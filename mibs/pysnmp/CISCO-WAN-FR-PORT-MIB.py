#
# PySNMP MIB module CISCO-WAN-FR-PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-FR-PORT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:04:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
frPort, frPortCnf, frPortServiceQueGrp, frPortCnt = mibBuilder.importSymbols("BASIS-MIB", "frPort", "frPortCnf", "frPortServiceQueGrp", "frPortCnt")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, NotificationType, ObjectIdentity, Integer32, Counter32, Gauge32, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, Bits, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "ObjectIdentity", "Integer32", "Counter32", "Gauge32", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "Bits", "Counter64", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoWanFrPortMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 44))
ciscoWanFrPortMIB.setRevisions(('2002-10-17 00:00',))
if mibBuilder.loadTexts: ciscoWanFrPortMIB.setLastUpdated('200210170000Z')
if mibBuilder.loadTexts: ciscoWanFrPortMIB.setOrganization('Cisco Systems, Inc.')
frPortCnfPortGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1))
frPortStateGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3))
frPortCntPortGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1))
frPortCnfPortGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1), )
if mibBuilder.loadTexts: frPortCnfPortGrpTable.setStatus('current')
frPortCnfPortGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-FR-PORT-MIB", "portNum"))
if mibBuilder.loadTexts: frPortCnfPortGrpEntry.setStatus('current')
portNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNum.setStatus('current')
portLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLineNum.setStatus('current')
portRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRowStatus.setStatus('current')
portDs0ConfigBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDs0ConfigBitMap.setStatus('current')
portDs0Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("speed56k", 1), ("speed64k", 2), ("unUsed", 3))).clone('speed64k')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDs0Speed.setStatus('current')
portFlagsBetweenFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlagsBetweenFrames.setStatus('current')
portEqueueServiceRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEqueueServiceRatio.setStatus('current')
portSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 8), Integer32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeed.setStatus('current')
portAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("write-Only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAdmin.setStatus('current')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frame-relay", 1), ("frFUNI", 2), ("frame-forward", 3))).clone('frame-relay')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portType.setStatus('current')
portSvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSvcStatus.setStatus('current')
portSvcInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-use", 1), ("in-use", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSvcInUse.setStatus('current')
portSvcShareLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port-based", 1), ("card-based", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSvcShareLcn.setStatus('current')
portSvcLcnLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4015))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSvcLcnLow.setStatus('current')
portSvcLcnHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4015))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSvcLcnHigh.setStatus('current')
portSvcDlciLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSvcDlciLow.setStatus('current')
portSvcDlciHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSvcDlciHigh.setStatus('current')
portDeleteSvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("other", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDeleteSvcs.setStatus('current')
portIngrSvcBandW = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIngrSvcBandW.setStatus('current')
portEgrSvcBandW = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portEgrSvcBandW.setStatus('current')
portBERTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBERTEnable.setStatus('current')
portEnhancedSIW = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEnhancedSIW.setStatus('current')
portM32EgrQueueThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6000)).clone(6000)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: portM32EgrQueueThresh.setStatus('current')
portHeaderLen = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twoOctets", 1), ("fourOctets", 2))).clone('twoOctets')).setUnits('Octets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHeaderLen.setStatus('current')
portFrameChkSumType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2))).clone('crc16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFrameChkSumType.setStatus('current')
portFileId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFileId.setStatus('current')
portOverSubEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOverSubEnable.setStatus('current')
portsUsedLine1 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsUsedLine1.setStatus('current')
portsUsedLine2 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsUsedLine2.setStatus('current')
portsUsedLine3 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsUsedLine3.setStatus('current')
portsUsedLine4 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsUsedLine4.setStatus('current')
portsUsedLine5 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsUsedLine5.setStatus('current')
portsUsedLine6 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsUsedLine6.setStatus('current')
portsUsedLine7 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsUsedLine7.setStatus('current')
portsUsedLine8 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsUsedLine8.setStatus('current')
portNextAvailable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNextAvailable.setStatus('current')
frPortStateGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1), )
if mibBuilder.loadTexts: frPortStateGrpTable.setStatus('current')
frPortStateGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-FR-PORT-MIB", "statePortNum"))
if mibBuilder.loadTexts: frPortStateGrpEntry.setStatus('current')
statePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statePortNum.setStatus('current')
portState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("notConfigured", 1), ("active", 2), ("remoteLoopback", 3), ("failedDueToLine", 4), ("failedDueToSignalling", 5), ("inactive", 6), ("inBert", 7), ("farEndRemoteLoopback", 8), ("latchDS0DropFeLoop", 9), ("latchDS0LineFeLoop", 10), ("latchOcuFeLoop", 11), ("latchCsuFeLoop", 12), ("latchDsuFeLoop", 13), ("latchHL96FeLoop", 14), ("v54PolynomialFeLoop", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portState.setStatus('current')
portSignallingState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSignallingState.setStatus('current')
portOversubscribed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOversubscribed.setStatus('current')
portIngrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIngrPercentUtil.setStatus('current')
portEgrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portEgrPercentUtil.setStatus('current')
frPortCntPortGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1), )
if mibBuilder.loadTexts: frPortCntPortGrpTable.setStatus('current')
frPortCntPortGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-FR-PORT-MIB", "cntPortNum"))
if mibBuilder.loadTexts: frPortCntPortGrpEntry.setStatus('current')
cntPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntPortNum.setStatus('current')
rcvPortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 2), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortFrames.setStatus('current')
rcvPortBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 3), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortBytes.setStatus('current')
rcvPortFramesDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 4), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortFramesDE.setStatus('current')
rcvPortFramesFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 5), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortFramesFECN.setStatus('current')
rcvPortFramesBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 6), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortFramesBECN.setStatus('current')
rcvFramesDiscCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 7), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscCRCError.setStatus('current')
rcvFramesDiscAlignmentError = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 8), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscAlignmentError.setStatus('current')
rcvFramesDiscIllegalLen = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 9), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscIllegalLen.setStatus('current')
rcvFramesDiscIllegalHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 10), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscIllegalHeader.setStatus('current')
rcvFramesAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 11), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesAbort.setStatus('current')
rcvFramesUnknownDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 12), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesUnknownDLCI.setStatus('current')
rcvLastUnknownDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvLastUnknownDLCI.setStatus('current')
rcvPortFramesTaggedFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 14), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortFramesTaggedFECN.setStatus('current')
rcvPortFramesTaggedBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 15), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortFramesTaggedBECN.setStatus('current')
rcvPortFramesTaggedDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 16), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortFramesTaggedDE.setStatus('current')
rcvPortFramesDiscXceedDEThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 17), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortFramesDiscXceedDEThresh.setStatus('current')
rcvPortKbpsAIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 18), Integer32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortKbpsAIR.setStatus('current')
rcvBufNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvBufNotAvailable.setStatus('current')
xmtPortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 20), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortFrames.setStatus('current')
xmtPortBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 21), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortBytes.setStatus('current')
xmtPortFramesFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 22), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortFramesFECN.setStatus('current')
xmtPortFramesBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 23), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortFramesBECN.setStatus('current')
xmtPortFramesDiscXceedQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 24), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortFramesDiscXceedQDepth.setStatus('current')
xmtPortBytesDiscXceedQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 25), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortBytesDiscXceedQDepth.setStatus('current')
xmtPortFramesDuringLMIAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 26), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortFramesDuringLMIAlarm.setStatus('current')
xmtPortBytesDuringLMIAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 27), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortBytesDuringLMIAlarm.setStatus('current')
xmtFramesAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 28), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesAbort.setStatus('current')
xmtFramesUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 29), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesUnderrun.setStatus('current')
xmtPortKbpsAIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 30), Integer32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortKbpsAIR.setStatus('current')
xmtBufNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtBufNotAvailable.setStatus('current')
portClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portClrButton.setStatus('current')
rcvFramesDiscNoChan = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 33), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscNoChan.setStatus('current')
rcvFramesDiscOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 34), Counter32()).setUnits('Frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesDiscOverrun.setStatus('current')
rcvPortFramesDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortFramesDiscard.setStatus('current')
xmtPortFramesDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortFramesDE.setStatus('current')
xmtPortBytesDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortBytesDE.setStatus('current')
rcvPortBytesDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortBytesDE.setStatus('current')
xmtPortFramesDiscXceedDEThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortFramesDiscXceedDEThresh.setStatus('current')
xmtPortBytesDiscXceedDEThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtPortBytesDiscXceedDEThresh.setStatus('current')
rcvPortBytesDiscXceedDEThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvPortBytesDiscXceedDEThresh.setStatus('current')
frPortsUsedLineGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 11), )
if mibBuilder.loadTexts: frPortsUsedLineGrpTable.setStatus('current')
frPortsUsedLineGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 11, 1), ).setIndexNames((0, "CISCO-WAN-FR-PORT-MIB", "frPortsUsedLineIndex"))
if mibBuilder.loadTexts: frPortsUsedLineGrpEntry.setStatus('current')
frPortsUsedLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 56))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPortsUsedLineIndex.setStatus('current')
frPortsUsedLine = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPortsUsedLine.setStatus('current')
frPortServiceQueGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1), )
if mibBuilder.loadTexts: frPortServiceQueGrpTable.setStatus('current')
frPortServiceQueGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-WAN-FR-PORT-MIB", "frServPortNum"), (0, "CISCO-WAN-FR-PORT-MIB", "portServiceQueueNo"))
if mibBuilder.loadTexts: frPortServiceQueGrpEntry.setStatus('current')
frServPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frServPortNum.setStatus('current')
portServiceQueueNo = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("highpriorityQ", 1), ("rtVBRQ", 2), ("nrtVBRandABRQ", 3), ("uBRQ", 4), ("queue5", 5), ("queue6", 6), ("queue7", 7), ("queue8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portServiceQueueNo.setStatus('current')
portEgresQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(1048575)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEgresQDepth.setStatus('current')
portEgresECNThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(104857)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEgresECNThresh.setStatus('current')
portEgresDEThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2097151)).clone(524287)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEgresDEThresh.setStatus('current')
portQBwInc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portQBwInc.setStatus('current')
portBytesDiscXceedQueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 7), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: portBytesDiscXceedQueFull.setStatus('current')
portBytesDiscXceedDEThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 8), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: portBytesDiscXceedDEThresh.setStatus('current')
ciscoWanFrPortMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 44, 2))
ciscoWanFrPortMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 44, 2, 1))
ciscoWanFrPortMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 44, 2, 2))
ciscoWanFrPortCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 44, 2, 2, 1)).setObjects(("CISCO-WAN-FR-PORT-MIB", "ciscoWanFrPortConfGroup"), ("CISCO-WAN-FR-PORT-MIB", "ciscoWanFrPortStateGroup"), ("CISCO-WAN-FR-PORT-MIB", "ciscoWanFrPortStatsGroup"), ("CISCO-WAN-FR-PORT-MIB", "ciscoWanFrPortSvcGroup"), ("CISCO-WAN-FR-PORT-MIB", "ciscoWanFrPortDs0InDs1Group"), ("CISCO-WAN-FR-PORT-MIB", "ciscoWanFrPortsUsedGroup"), ("CISCO-WAN-FR-PORT-MIB", "ciscoWanFrPortServiceQueueGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrPortCompliance = ciscoWanFrPortCompliance.setStatus('current')
ciscoWanFrPortConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 44, 2, 1, 1)).setObjects(("CISCO-WAN-FR-PORT-MIB", "portNum"), ("CISCO-WAN-FR-PORT-MIB", "portLineNum"), ("CISCO-WAN-FR-PORT-MIB", "portRowStatus"), ("CISCO-WAN-FR-PORT-MIB", "portDs0ConfigBitMap"), ("CISCO-WAN-FR-PORT-MIB", "portDs0Speed"), ("CISCO-WAN-FR-PORT-MIB", "portFlagsBetweenFrames"), ("CISCO-WAN-FR-PORT-MIB", "portEqueueServiceRatio"), ("CISCO-WAN-FR-PORT-MIB", "portSpeed"), ("CISCO-WAN-FR-PORT-MIB", "portAdmin"), ("CISCO-WAN-FR-PORT-MIB", "portType"), ("CISCO-WAN-FR-PORT-MIB", "portBERTEnable"), ("CISCO-WAN-FR-PORT-MIB", "portEnhancedSIW"), ("CISCO-WAN-FR-PORT-MIB", "portM32EgrQueueThresh"), ("CISCO-WAN-FR-PORT-MIB", "portHeaderLen"), ("CISCO-WAN-FR-PORT-MIB", "portFrameChkSumType"), ("CISCO-WAN-FR-PORT-MIB", "portFileId"), ("CISCO-WAN-FR-PORT-MIB", "portOverSubEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrPortConfGroup = ciscoWanFrPortConfGroup.setStatus('current')
ciscoWanFrPortSvcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 44, 2, 1, 2)).setObjects(("CISCO-WAN-FR-PORT-MIB", "portSvcStatus"), ("CISCO-WAN-FR-PORT-MIB", "portSvcInUse"), ("CISCO-WAN-FR-PORT-MIB", "portSvcShareLcn"), ("CISCO-WAN-FR-PORT-MIB", "portSvcLcnLow"), ("CISCO-WAN-FR-PORT-MIB", "portSvcLcnHigh"), ("CISCO-WAN-FR-PORT-MIB", "portSvcDlciLow"), ("CISCO-WAN-FR-PORT-MIB", "portSvcDlciHigh"), ("CISCO-WAN-FR-PORT-MIB", "portDeleteSvcs"), ("CISCO-WAN-FR-PORT-MIB", "portIngrSvcBandW"), ("CISCO-WAN-FR-PORT-MIB", "portEgrSvcBandW"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrPortSvcGroup = ciscoWanFrPortSvcGroup.setStatus('current')
ciscoWanFrPortDs0InDs1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 44, 2, 1, 3)).setObjects(("CISCO-WAN-FR-PORT-MIB", "portsUsedLine1"), ("CISCO-WAN-FR-PORT-MIB", "portsUsedLine2"), ("CISCO-WAN-FR-PORT-MIB", "portsUsedLine3"), ("CISCO-WAN-FR-PORT-MIB", "portsUsedLine4"), ("CISCO-WAN-FR-PORT-MIB", "portsUsedLine5"), ("CISCO-WAN-FR-PORT-MIB", "portsUsedLine6"), ("CISCO-WAN-FR-PORT-MIB", "portsUsedLine7"), ("CISCO-WAN-FR-PORT-MIB", "portsUsedLine8"), ("CISCO-WAN-FR-PORT-MIB", "portNextAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrPortDs0InDs1Group = ciscoWanFrPortDs0InDs1Group.setStatus('current')
ciscoWanFrPortStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 44, 2, 1, 4)).setObjects(("CISCO-WAN-FR-PORT-MIB", "statePortNum"), ("CISCO-WAN-FR-PORT-MIB", "portState"), ("CISCO-WAN-FR-PORT-MIB", "portSignallingState"), ("CISCO-WAN-FR-PORT-MIB", "portOversubscribed"), ("CISCO-WAN-FR-PORT-MIB", "portIngrPercentUtil"), ("CISCO-WAN-FR-PORT-MIB", "portEgrPercentUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrPortStateGroup = ciscoWanFrPortStateGroup.setStatus('current')
ciscoWanFrPortStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 44, 2, 1, 5)).setObjects(("CISCO-WAN-FR-PORT-MIB", "cntPortNum"), ("CISCO-WAN-FR-PORT-MIB", "rcvPortFrames"), ("CISCO-WAN-FR-PORT-MIB", "rcvPortBytes"), ("CISCO-WAN-FR-PORT-MIB", "rcvPortFramesDE"), ("CISCO-WAN-FR-PORT-MIB", "rcvPortFramesFECN"), ("CISCO-WAN-FR-PORT-MIB", "rcvPortFramesBECN"), ("CISCO-WAN-FR-PORT-MIB", "rcvFramesDiscCRCError"), ("CISCO-WAN-FR-PORT-MIB", "rcvFramesDiscAlignmentError"), ("CISCO-WAN-FR-PORT-MIB", "rcvFramesDiscIllegalLen"), ("CISCO-WAN-FR-PORT-MIB", "rcvFramesDiscIllegalHeader"), ("CISCO-WAN-FR-PORT-MIB", "rcvFramesAbort"), ("CISCO-WAN-FR-PORT-MIB", "rcvFramesUnknownDLCI"), ("CISCO-WAN-FR-PORT-MIB", "rcvLastUnknownDLCI"), ("CISCO-WAN-FR-PORT-MIB", "rcvPortFramesTaggedFECN"), ("CISCO-WAN-FR-PORT-MIB", "rcvPortFramesTaggedBECN"), ("CISCO-WAN-FR-PORT-MIB", "rcvPortFramesTaggedDE"), ("CISCO-WAN-FR-PORT-MIB", "rcvPortFramesDiscXceedDEThresh"), ("CISCO-WAN-FR-PORT-MIB", "rcvPortKbpsAIR"), ("CISCO-WAN-FR-PORT-MIB", "rcvBufNotAvailable"), ("CISCO-WAN-FR-PORT-MIB", "xmtPortFrames"), ("CISCO-WAN-FR-PORT-MIB", "xmtPortBytes"), ("CISCO-WAN-FR-PORT-MIB", "xmtPortFramesFECN"), ("CISCO-WAN-FR-PORT-MIB", "xmtPortFramesBECN"), ("CISCO-WAN-FR-PORT-MIB", "xmtPortFramesDiscXceedQDepth"), ("CISCO-WAN-FR-PORT-MIB", "xmtPortBytesDiscXceedQDepth"), ("CISCO-WAN-FR-PORT-MIB", "xmtPortFramesDuringLMIAlarm"), ("CISCO-WAN-FR-PORT-MIB", "xmtPortBytesDuringLMIAlarm"), ("CISCO-WAN-FR-PORT-MIB", "xmtFramesAbort"), ("CISCO-WAN-FR-PORT-MIB", "xmtFramesUnderrun"), ("CISCO-WAN-FR-PORT-MIB", "xmtPortKbpsAIR"), ("CISCO-WAN-FR-PORT-MIB", "xmtBufNotAvailable"), ("CISCO-WAN-FR-PORT-MIB", "portClrButton"), ("CISCO-WAN-FR-PORT-MIB", "rcvFramesDiscNoChan"), ("CISCO-WAN-FR-PORT-MIB", "rcvFramesDiscOverrun"), ("CISCO-WAN-FR-PORT-MIB", "rcvPortFramesDiscard"), ("CISCO-WAN-FR-PORT-MIB", "xmtPortFramesDE"), ("CISCO-WAN-FR-PORT-MIB", "xmtPortBytesDE"), ("CISCO-WAN-FR-PORT-MIB", "rcvPortBytesDE"), ("CISCO-WAN-FR-PORT-MIB", "xmtPortFramesDiscXceedDEThresh"), ("CISCO-WAN-FR-PORT-MIB", "xmtPortBytesDiscXceedDEThresh"), ("CISCO-WAN-FR-PORT-MIB", "rcvPortBytesDiscXceedDEThresh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrPortStatsGroup = ciscoWanFrPortStatsGroup.setStatus('current')
ciscoWanFrPortServiceQueueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 44, 2, 1, 6)).setObjects(("CISCO-WAN-FR-PORT-MIB", "frServPortNum"), ("CISCO-WAN-FR-PORT-MIB", "portServiceQueueNo"), ("CISCO-WAN-FR-PORT-MIB", "portEgresQDepth"), ("CISCO-WAN-FR-PORT-MIB", "portEgresECNThresh"), ("CISCO-WAN-FR-PORT-MIB", "portEgresDEThresh"), ("CISCO-WAN-FR-PORT-MIB", "portQBwInc"), ("CISCO-WAN-FR-PORT-MIB", "portBytesDiscXceedQueFull"), ("CISCO-WAN-FR-PORT-MIB", "portBytesDiscXceedDEThresh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrPortServiceQueueGroup = ciscoWanFrPortServiceQueueGroup.setStatus('current')
ciscoWanFrPortsUsedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 44, 2, 1, 7)).setObjects(("CISCO-WAN-FR-PORT-MIB", "frPortsUsedLineIndex"), ("CISCO-WAN-FR-PORT-MIB", "frPortsUsedLine"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrPortsUsedGroup = ciscoWanFrPortsUsedGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-WAN-FR-PORT-MIB", frPortServiceQueGrpEntry=frPortServiceQueGrpEntry, portType=portType, xmtBufNotAvailable=xmtBufNotAvailable, xmtPortKbpsAIR=xmtPortKbpsAIR, frServPortNum=frServPortNum, portEgrSvcBandW=portEgrSvcBandW, xmtPortFramesDuringLMIAlarm=xmtPortFramesDuringLMIAlarm, portServiceQueueNo=portServiceQueueNo, rcvPortFramesTaggedFECN=rcvPortFramesTaggedFECN, ciscoWanFrPortMIBCompliances=ciscoWanFrPortMIBCompliances, portEgresDEThresh=portEgresDEThresh, portSvcStatus=portSvcStatus, portSvcDlciLow=portSvcDlciLow, ciscoWanFrPortConfGroup=ciscoWanFrPortConfGroup, portEnhancedSIW=portEnhancedSIW, rcvFramesDiscOverrun=rcvFramesDiscOverrun, portFrameChkSumType=portFrameChkSumType, portsUsedLine3=portsUsedLine3, rcvPortFramesBECN=rcvPortFramesBECN, rcvFramesDiscIllegalLen=rcvFramesDiscIllegalLen, rcvPortFramesDiscard=rcvPortFramesDiscard, portHeaderLen=portHeaderLen, rcvFramesUnknownDLCI=rcvFramesUnknownDLCI, portSvcLcnLow=portSvcLcnLow, portSvcInUse=portSvcInUse, ciscoWanFrPortStatsGroup=ciscoWanFrPortStatsGroup, portsUsedLine2=portsUsedLine2, frPortCntPortGrpTable=frPortCntPortGrpTable, frPortCntPortGrpEntry=frPortCntPortGrpEntry, rcvPortKbpsAIR=rcvPortKbpsAIR, portsUsedLine1=portsUsedLine1, rcvFramesAbort=rcvFramesAbort, rcvLastUnknownDLCI=rcvLastUnknownDLCI, frPortServiceQueGrpTable=frPortServiceQueGrpTable, frPortsUsedLineGrpTable=frPortsUsedLineGrpTable, cntPortNum=cntPortNum, frPortCnfPortGrpEntry=frPortCnfPortGrpEntry, portEgresECNThresh=portEgresECNThresh, portEgrPercentUtil=portEgrPercentUtil, portSvcShareLcn=portSvcShareLcn, xmtFramesAbort=xmtFramesAbort, rcvFramesDiscNoChan=rcvFramesDiscNoChan, portsUsedLine7=portsUsedLine7, portBERTEnable=portBERTEnable, statePortNum=statePortNum, portQBwInc=portQBwInc, portNextAvailable=portNextAvailable, xmtPortFrames=xmtPortFrames, rcvPortBytesDiscXceedDEThresh=rcvPortBytesDiscXceedDEThresh, portSignallingState=portSignallingState, xmtPortBytes=xmtPortBytes, ciscoWanFrPortMIBGroups=ciscoWanFrPortMIBGroups, ciscoWanFrPortMIBConformance=ciscoWanFrPortMIBConformance, portFlagsBetweenFrames=portFlagsBetweenFrames, portDeleteSvcs=portDeleteSvcs, portFileId=portFileId, portDs0ConfigBitMap=portDs0ConfigBitMap, xmtPortBytesDuringLMIAlarm=xmtPortBytesDuringLMIAlarm, rcvFramesDiscIllegalHeader=rcvFramesDiscIllegalHeader, rcvPortBytes=rcvPortBytes, portsUsedLine4=portsUsedLine4, portLineNum=portLineNum, portRowStatus=portRowStatus, rcvFramesDiscCRCError=rcvFramesDiscCRCError, xmtPortFramesBECN=xmtPortFramesBECN, portBytesDiscXceedQueFull=portBytesDiscXceedQueFull, ciscoWanFrPortMIB=ciscoWanFrPortMIB, portNum=portNum, rcvPortFrames=rcvPortFrames, xmtPortBytesDiscXceedQDepth=xmtPortBytesDiscXceedQDepth, ciscoWanFrPortStateGroup=ciscoWanFrPortStateGroup, rcvBufNotAvailable=rcvBufNotAvailable, rcvPortFramesDE=rcvPortFramesDE, portEgresQDepth=portEgresQDepth, portsUsedLine5=portsUsedLine5, portM32EgrQueueThresh=portM32EgrQueueThresh, frPortStateGrpEntry=frPortStateGrpEntry, portOversubscribed=portOversubscribed, xmtPortFramesFECN=xmtPortFramesFECN, portsUsedLine6=portsUsedLine6, frPortsUsedLine=frPortsUsedLine, portSvcLcnHigh=portSvcLcnHigh, portEqueueServiceRatio=portEqueueServiceRatio, frPortsUsedLineIndex=frPortsUsedLineIndex, frPortsUsedLineGrpEntry=frPortsUsedLineGrpEntry, rcvPortFramesTaggedBECN=rcvPortFramesTaggedBECN, xmtFramesUnderrun=xmtFramesUnderrun, portSvcDlciHigh=portSvcDlciHigh, xmtPortBytesDE=xmtPortBytesDE, portAdmin=portAdmin, xmtPortBytesDiscXceedDEThresh=xmtPortBytesDiscXceedDEThresh, ciscoWanFrPortCompliance=ciscoWanFrPortCompliance, portBytesDiscXceedDEThresh=portBytesDiscXceedDEThresh, frPortStateGrp=frPortStateGrp, ciscoWanFrPortServiceQueueGroup=ciscoWanFrPortServiceQueueGroup, rcvPortFramesDiscXceedDEThresh=rcvPortFramesDiscXceedDEThresh, rcvPortFramesFECN=rcvPortFramesFECN, rcvPortBytesDE=rcvPortBytesDE, frPortStateGrpTable=frPortStateGrpTable, ciscoWanFrPortDs0InDs1Group=ciscoWanFrPortDs0InDs1Group, frPortCnfPortGrpTable=frPortCnfPortGrpTable, ciscoWanFrPortsUsedGroup=ciscoWanFrPortsUsedGroup, frPortCnfPortGrp=frPortCnfPortGrp, ciscoWanFrPortSvcGroup=ciscoWanFrPortSvcGroup, xmtPortFramesDE=xmtPortFramesDE, portsUsedLine8=portsUsedLine8, xmtPortFramesDiscXceedDEThresh=xmtPortFramesDiscXceedDEThresh, portDs0Speed=portDs0Speed, PYSNMP_MODULE_ID=ciscoWanFrPortMIB, xmtPortFramesDiscXceedQDepth=xmtPortFramesDiscXceedQDepth, portClrButton=portClrButton, rcvFramesDiscAlignmentError=rcvFramesDiscAlignmentError, portIngrPercentUtil=portIngrPercentUtil, portSpeed=portSpeed, rcvPortFramesTaggedDE=rcvPortFramesTaggedDE, portIngrSvcBandW=portIngrSvcBandW, portOverSubEnable=portOverSubEnable, frPortCntPortGrp=frPortCntPortGrp, portState=portState)
