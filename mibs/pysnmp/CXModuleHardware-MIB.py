#
# PySNMP MIB module CXModuleHardware-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXModuleHardware-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
cxModuleHardware, Alias = mibBuilder.importSymbols("CXProduct-SMI", "cxModuleHardware", "Alias")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, iso, NotificationType, TimeTicks, IpAddress, MibIdentifier, Counter64, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "NotificationType", "TimeTicks", "IpAddress", "MibIdentifier", "Counter64", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "ObjectIdentity", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cxModuleHwAlias = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 1), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxModuleHwAlias.setStatus('mandatory')
cxModuleHwRevAssemblyAndEco = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxModuleHwRevAssemblyAndEco.setStatus('mandatory')
cxModuleHwPhysSlot = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxModuleHwPhysSlot.setStatus('mandatory')
cxModuleHwCpuClockSpeed = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxModuleHwCpuClockSpeed.setStatus('mandatory')
cxModuleHwLedsDisplay = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxModuleHwLedsDisplay.setStatus('mandatory')
cxModuleHwFlashEpromSize = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxModuleHwFlashEpromSize.setStatus('mandatory')
cxModuleHwPrivateDramSize = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxModuleHwPrivateDramSize.setStatus('mandatory')
cxModuleHwSharedDramSize = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxModuleHwSharedDramSize.setStatus('mandatory')
cxModuleHwUpTimeTicks = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxModuleHwUpTimeTicks.setStatus('mandatory')
cxModuleHwResetTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxModuleHwResetTimeOut.setStatus('mandatory')
cxModuleHwSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxModuleHwSwVersion.setStatus('mandatory')
cxModuleHwNodeId = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxModuleHwNodeId.setStatus('mandatory')
mibBuilder.exportSymbols("CXModuleHardware-MIB", cxModuleHwNodeId=cxModuleHwNodeId, cxModuleHwPrivateDramSize=cxModuleHwPrivateDramSize, cxModuleHwFlashEpromSize=cxModuleHwFlashEpromSize, cxModuleHwSharedDramSize=cxModuleHwSharedDramSize, cxModuleHwAlias=cxModuleHwAlias, cxModuleHwLedsDisplay=cxModuleHwLedsDisplay, cxModuleHwPhysSlot=cxModuleHwPhysSlot, cxModuleHwCpuClockSpeed=cxModuleHwCpuClockSpeed, cxModuleHwSwVersion=cxModuleHwSwVersion, cxModuleHwUpTimeTicks=cxModuleHwUpTimeTicks, cxModuleHwResetTimeOut=cxModuleHwResetTimeOut, cxModuleHwRevAssemblyAndEco=cxModuleHwRevAssemblyAndEco)
