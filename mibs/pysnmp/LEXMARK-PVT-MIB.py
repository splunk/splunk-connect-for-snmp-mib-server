#
# PySNMP MIB module LEXMARK-PVT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LEXMARK-PVT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:56:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, NotificationType, ObjectIdentity, Unsigned32, Bits, iso, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, IpAddress, Integer32, MibIdentifier, Gauge32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "ObjectIdentity", "Unsigned32", "Bits", "iso", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "IpAddress", "Integer32", "MibIdentifier", "Gauge32", "enterprises")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
lexmark = MibIdentifier((1, 3, 6, 1, 4, 1, 641))
adapter = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1))
printer = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 2))
attachment = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 3))
opsys = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 1))
lexlink = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 2))
lexipx = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 3))
lextalk = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 4))
lextcp = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 5))
lexhttp = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 5, 6))
lexdhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 5, 7))
lexhdwr = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 6))
lexmac = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 7))
lextrap = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 8))
time = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 9))
prtgen = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 2, 1))
fax = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 3, 1))
opsysCodeRev = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysCodeRev.setStatus('mandatory')
opsysJobTimeout = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsysJobTimeout.setStatus('mandatory')
opsysCurrentJob = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysCurrentJob.setStatus('mandatory')
opsysRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysRAMSize.setStatus('mandatory')
opsysNVRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysNVRAMSize.setStatus('mandatory')
opsysROMSize = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysROMSize.setStatus('mandatory')
opsysROMType = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysROMType.setStatus('mandatory')
opsysProtocols = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysProtocols.setStatus('mandatory')
opsysTimeToReset = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsysTimeToReset.setStatus('mandatory')
opsysCardPartNo = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysCardPartNo.setStatus('mandatory')
opsysCardEC = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysCardEC.setStatus('mandatory')
opsysCurrentJobTable = MibTable((1, 3, 6, 1, 4, 1, 641, 1, 1, 12), )
if mibBuilder.loadTexts: opsysCurrentJobTable.setStatus('mandatory')
opsysCurrentJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 1, 1, 12, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "opsysCurrentJobEntryIndex"))
if mibBuilder.loadTexts: opsysCurrentJobEntry.setStatus('mandatory')
opsysCurrentJobEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysCurrentJobEntryIndex.setStatus('mandatory')
opsysCurrentJobString = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 1, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysCurrentJobString.setStatus('mandatory')
opsysDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysDeviceType.setStatus('mandatory')
opsysAdapterName = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysAdapterName.setStatus('mandatory')
opsysAdapterCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysAdapterCapabilities.setStatus('mandatory')
lexlinkActivated = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexlinkActivated.setStatus('mandatory')
lexlinkNickname = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexlinkNickname.setStatus('mandatory')
lexipxActivated = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxActivated.setStatus('mandatory')
lexipxLoginName = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 43))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxLoginName.setStatus('mandatory')
lexipxNetNumber = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxNetNumber.setStatus('mandatory')
lexipxSAPMode = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxSAPMode.setStatus('mandatory')
lexipxServerMode = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pserver", 1), ("rprinter", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxServerMode.setStatus('mandatory')
lexipxNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxNumPorts.setStatus('mandatory')
lexipxPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 641, 1, 3, 7), )
if mibBuilder.loadTexts: lexipxPortInfoTable.setStatus('mandatory')
lexipxPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 1, 3, 7, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "lexipxPortInfoIndex"))
if mibBuilder.loadTexts: lexipxPortInfoEntry.setStatus('mandatory')
lexipxPortInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxPortInfoIndex.setStatus('mandatory')
lexipxPortInfoPollIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxPortInfoPollIntvl.setStatus('mandatory')
lexipxPortInfoEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxPortInfoEnable.setStatus('mandatory')
lexipxPortInfoBannerPage = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("postscript", 2), ("ascii", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxPortInfoBannerPage.setStatus('mandatory')
lexipxNumPrefServers = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxNumPrefServers.setStatus('mandatory')
lexipxPrefSrvrTable = MibTable((1, 3, 6, 1, 4, 1, 641, 1, 3, 9), )
if mibBuilder.loadTexts: lexipxPrefSrvrTable.setStatus('mandatory')
lexipxPrefSrvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 1, 3, 9, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "lexipxPrefSrvrIndex"))
if mibBuilder.loadTexts: lexipxPrefSrvrEntry.setStatus('mandatory')
lexipxPrefSrvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxPrefSrvrIndex.setStatus('mandatory')
lexipxPrefSrvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxPrefSrvrName.setStatus('mandatory')
lexipxConnSrvrTable = MibTable((1, 3, 6, 1, 4, 1, 641, 1, 3, 10), )
if mibBuilder.loadTexts: lexipxConnSrvrTable.setStatus('mandatory')
lexipxConnSrvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 1, 3, 10, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "lexipxConnSrvrIndex"))
if mibBuilder.loadTexts: lexipxConnSrvrEntry.setStatus('mandatory')
lexipxConnSrvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxConnSrvrIndex.setStatus('mandatory')
lexipxConnSrvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxConnSrvrName.setStatus('mandatory')
lexipxConnSrvrNet = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxConnSrvrNet.setStatus('mandatory')
lexipxConnSrvrNode = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxConnSrvrNode.setStatus('mandatory')
lexipxConnSrvrConnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxConnSrvrConnNum.setStatus('mandatory')
lexipxConnSrvrConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxConnSrvrConnId.setStatus('mandatory')
lexipxConnSrvrPSConnID = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxConnSrvrPSConnID.setStatus('mandatory')
lexipxFrameType = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxFrameType.setStatus('mandatory')
lexipxTrapTable = MibTable((1, 3, 6, 1, 4, 1, 641, 1, 3, 12), )
if mibBuilder.loadTexts: lexipxTrapTable.setStatus('mandatory')
lexipxTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 1, 3, 12, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "lexipxTrapIndex"))
if mibBuilder.loadTexts: lexipxTrapEntry.setStatus('mandatory')
lexipxTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxTrapIndex.setStatus('mandatory')
lexipxTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxTrapMask.setStatus('mandatory')
lexipxTrapNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 12, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxTrapNetworkAddress.setStatus('mandatory')
lexipxTrapNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxTrapNodeAddress.setStatus('mandatory')
lexipxTrapType = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multiplexed", 1), ("individual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxTrapType.setStatus('mandatory')
lexipxGSQ = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxGSQ.setStatus('mandatory')
lextalkActivated = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lextalkActivated.setStatus('mandatory')
lextalkAddress = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextalkAddress.setStatus('mandatory')
lextalkName = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextalkName.setStatus('mandatory')
lextalkZone = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextalkZone.setStatus('mandatory')
lextalkType = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextalkType.setStatus('mandatory')
lextcpActivated = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lextcpActivated.setStatus('mandatory')
lextcpBootpEnable = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lextcpBootpEnable.setStatus('mandatory')
lextcpAddressServ = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextcpAddressServ.setStatus('mandatory')
lextcpNumNPAPservers = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextcpNumNPAPservers.setStatus('mandatory')
lextcpNPAPserversTable = MibTable((1, 3, 6, 1, 4, 1, 641, 1, 5, 5), )
if mibBuilder.loadTexts: lextcpNPAPserversTable.setStatus('mandatory')
lextcpNPAPserversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 1, 5, 5, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "lextcpNPAPserverIndex"))
if mibBuilder.loadTexts: lextcpNPAPserversEntry.setStatus('mandatory')
lextcpNPAPserverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextcpNPAPserverIndex.setStatus('mandatory')
lextcpNPAPserverAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 5, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextcpNPAPserverAddress.setStatus('mandatory')
lexhttpEnable = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhttpEnable.setStatus('mandatory')
lexhttpNumLinks = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexhttpNumLinks.setStatus('mandatory')
lexhttpBytesRemaining = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexhttpBytesRemaining.setStatus('mandatory')
lexhttpResetLinks = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhttpResetLinks.setStatus('mandatory')
lexhttpLinkTable = MibTable((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 5), )
if mibBuilder.loadTexts: lexhttpLinkTable.setStatus('mandatory')
lexhttpLinkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 5, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "lexhttpLinkTableIndex"))
if mibBuilder.loadTexts: lexhttpLinkTableEntry.setStatus('mandatory')
lexhttpLinkTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexhttpLinkTableIndex.setStatus('mandatory')
lexhttpLinkTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("linkOff", 1), ("customOn", 2), ("useDefault", 3), ("defaultOff", 4), ("defaultOn", 5), ("eraseCustom", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhttpLinkTableStatus.setStatus('mandatory')
lexhttpLinkTableLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhttpLinkTableLabel.setStatus('mandatory')
lexhttpLinkTableURL = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhttpLinkTableURL.setStatus('mandatory')
lexhttpConfigEnable = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhttpConfigEnable.setStatus('mandatory')
lexdhcpDhcpEnable = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexdhcpDhcpEnable.setStatus('mandatory')
lexdhcpRarpEnable = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexdhcpRarpEnable.setStatus('mandatory')
lexdhcpAddressSource = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("manual", 1), ("dhcp", 2), ("bootp", 3), ("rarp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexdhcpAddressSource.setStatus('mandatory')
lexdhcpWinsStatus = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unregistered", 1), ("registered", 2), ("pending", 3), ("rejected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexdhcpWinsStatus.setStatus('mandatory')
lexdhcpWinsServer = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 7, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexdhcpWinsServer.setStatus('mandatory')
lexdhcpHostname = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 7, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexdhcpHostname.setStatus('mandatory')
lexdhcpLeaseLength = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexdhcpLeaseLength.setStatus('mandatory')
lexdhcpTimetoExpire = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexdhcpTimetoExpire.setStatus('mandatory')
lexdhcpDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 7, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexdhcpDNSServer.setStatus('mandatory')
lexhdwrNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexhdwrNumPorts.setStatus('mandatory')
lexhdwrPortTable = MibTable((1, 3, 6, 1, 4, 1, 641, 1, 6, 2), )
if mibBuilder.loadTexts: lexhdwrPortTable.setStatus('mandatory')
lexhdwrPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "lexhdwrPortTableIndex"))
if mibBuilder.loadTexts: lexhdwrPortTableEntry.setStatus('mandatory')
lexhdwrPortTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexhdwrPortTableIndex.setStatus('mandatory')
lexhdwrPortTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("parallel", 2), ("serial", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexhdwrPortTableType.setStatus('mandatory')
lexhdwrPortTableParm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhdwrPortTableParm1.setStatus('mandatory')
lexhdwrPortTableParm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhdwrPortTableParm2.setStatus('mandatory')
lexhdwrPortTableParm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhdwrPortTableParm3.setStatus('mandatory')
lexhdwrPortTableParm4 = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhdwrPortTableParm4.setStatus('mandatory')
lexhdwrPortTableParm5 = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhdwrPortTableParm5.setStatus('mandatory')
lexhdwrPortTableParm6 = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhdwrPortTableParm6.setStatus('mandatory')
lexhdwrPortTableParm7 = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhdwrPortTableParm7.setStatus('mandatory')
lexhdwrPortTableParm8 = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("npapInactive", 1), ("npapActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexhdwrPortTableParm8.setStatus('mandatory')
lexhdwrPortTableParm9 = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("printer", 1), ("fax", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhdwrPortTableParm9.setStatus('mandatory')
lexmacType = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexmacType.setStatus('mandatory')
lexmacSpeed = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 7, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexmacSpeed.setStatus('mandatory')
lexmacConnType = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("aui", 1), ("bnc", 2), ("stp", 3), ("utp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexmacConnType.setStatus('mandatory')
lexmacUAA = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 7, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexmacUAA.setStatus('mandatory')
lexmacLAA = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 7, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexmacLAA.setStatus('mandatory')
lextrapDestNum = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextrapDestNum.setStatus('mandatory')
lextrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 641, 1, 8, 2), )
if mibBuilder.loadTexts: lextrapDestTable.setStatus('mandatory')
lextrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 1, 8, 2, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "lextrapDestIndex"))
if mibBuilder.loadTexts: lextrapDestEntry.setStatus('mandatory')
lextrapDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextrapDestIndex.setStatus('mandatory')
lextrapDestIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 8, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lextrapDestIPAddr.setStatus('mandatory')
lextrapDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lextrapDestMask.setStatus('mandatory')
lextrapIPTrapType = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multiplexed", 1), ("individual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lextrapIPTrapType.setStatus('mandatory')
timeReset = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeReset.setStatus('mandatory')
timeSource = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ntp", 2), ("netware", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSource.setStatus('mandatory')
timeUTCOffset = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-720, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeUTCOffset.setStatus('mandatory')
timeDSTEnable = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeDSTEnable.setStatus('mandatory')
timeDSTStartDate = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 9, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeDSTStartDate.setStatus('mandatory')
timeDSTEndDate = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 9, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeDSTEndDate.setStatus('mandatory')
timeDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeDSTOffset.setStatus('mandatory')
timeServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 9, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServerAddress.setStatus('mandatory')
timeServerName = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 9, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServerName.setStatus('mandatory')
prtgenNumber = MibScalar((1, 3, 6, 1, 4, 1, 641, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenNumber.setStatus('mandatory')
prtgenInfoTable = MibTable((1, 3, 6, 1, 4, 1, 641, 2, 1, 2), )
if mibBuilder.loadTexts: prtgenInfoTable.setStatus('mandatory')
prtgenInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 2, 1, 2, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "prtgenPrinterIndex"))
if mibBuilder.loadTexts: prtgenInfoEntry.setStatus('mandatory')
prtgenPrinterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenPrinterIndex.setStatus('mandatory')
prtgenPrinterName = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenPrinterName.setStatus('mandatory')
prtgenPeripheralID = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenPeripheralID.setStatus('mandatory')
prtgenCodeRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenCodeRevision.setStatus('mandatory')
prtgenResValue = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenResValue.setStatus('mandatory')
prtgenSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenSerialNo.setStatus('mandatory')
prtgenStatusTable = MibTable((1, 3, 6, 1, 4, 1, 641, 2, 1, 3), )
if mibBuilder.loadTexts: prtgenStatusTable.setStatus('mandatory')
prtgenStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "prtgenStatPrinterIndex"))
if mibBuilder.loadTexts: prtgenStatusEntry.setStatus('mandatory')
prtgenStatPrinterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatPrinterIndex.setStatus('mandatory')
prtgenStatusIRC = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusIRC.setStatus('mandatory')
prtgenStatusOutHopFull = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notFull", 1), ("full", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusOutHopFull.setStatus('mandatory')
prtgenStatusInputEmpty = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notEmpty", 1), ("empty", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusInputEmpty.setStatus('mandatory')
prtgenStatusPaperJam = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notJammed", 1), ("jamed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusPaperJam.setStatus('mandatory')
prtgenStatusTonerError = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noTonerError", 1), ("tonerError", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusTonerError.setStatus('mandatory')
prtgenStatusSrvcReqd = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noServiceRequired", 1), ("serviceRequired", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusSrvcReqd.setStatus('mandatory')
prtgenStatusDiskError = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noDiskError", 1), ("diskError", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusDiskError.setStatus('mandatory')
prtgenStatusCoverOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noCoverOpen", 1), ("coverOpen", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusCoverOpen.setStatus('mandatory')
prtgenStatusPageComplex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noComplexPage", 1), ("complexPage", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusPageComplex.setStatus('mandatory')
prtgenStatusLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusLineStatus.setStatus('mandatory')
prtgenStatusBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notBusy", 1), ("busy", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusBusy.setStatus('mandatory')
prtgenStatusWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notWaiting", 1), ("waiting", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusWaiting.setStatus('mandatory')
prtgenStatusWarming = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notWarming", 1), ("warming", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusWarming.setStatus('mandatory')
prtgenStatusPrinting = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPrinting", 1), ("printing", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusPrinting.setStatus('mandatory')
faxNumber = MibScalar((1, 3, 6, 1, 4, 1, 641, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxNumber.setStatus('mandatory')
faxTable = MibTable((1, 3, 6, 1, 4, 1, 641, 3, 1, 2), )
if mibBuilder.loadTexts: faxTable.setStatus('mandatory')
faxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "faxIndex"))
if mibBuilder.loadTexts: faxEntry.setStatus('mandatory')
faxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxIndex.setStatus('mandatory')
faxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(145, 146, 147, 148, 149))).clone(namedValues=NamedValues(("serial1", 145), ("serial2", 146), ("serial3", 147), ("serial4", 148), ("serial5", 149)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxPort.setStatus('mandatory')
faxAdapterCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxAdapterCapabilities.setStatus('mandatory')
faxModemCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxModemCapabilities.setStatus('mandatory')
faxSelectedCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxSelectedCapabilities.setStatus('mandatory')
faxActiveCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxActiveCapabilities.setStatus('mandatory')
faxIDString = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxIDString.setStatus('mandatory')
faxInitString = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxInitString.setStatus('mandatory')
faxNumberRings = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxNumberRings.setStatus('mandatory')
faxScaling = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scaleToFit", 1), ("cropToFit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxScaling.setStatus('mandatory')
faxBinaryEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("taggedBinary", 1), ("ascii85", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxBinaryEncoding.setStatus('mandatory')
faxPrinterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(129, 130, 255))).clone(namedValues=NamedValues(("parallel1", 129), ("parallel2", 130), ("firstAvail", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxPrinterPort.setStatus('mandatory')
faxInputTray = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxInputTray.setStatus('mandatory')
faxOutputBin = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxOutputBin.setStatus('mandatory')
irCleared = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,0)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
irCondition = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,1)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
irOutputFull = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,2)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
irLoadPaper = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,3)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
irPaperJam = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,4)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
irTonerLow = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,5)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
irServiceReq = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,6)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
irDiskErr = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,7)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
irCoverOpen = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,8)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
irPageComplexity = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,9)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
irOffline = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,10)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
irClearedTypeII = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,11)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
mibBuilder.exportSymbols("LEXMARK-PVT-MIB", lexipxPortInfoIndex=lexipxPortInfoIndex, adapter=adapter, lexipxPortInfoEnable=lexipxPortInfoEnable, lexipxPortInfoPollIntvl=lexipxPortInfoPollIntvl, opsysNVRAMSize=opsysNVRAMSize, lextalkAddress=lextalkAddress, prtgenStatusDiskError=prtgenStatusDiskError, lexipxConnSrvrName=lexipxConnSrvrName, lextrap=lextrap, lexhttpNumLinks=lexhttpNumLinks, lextcp=lextcp, prtgenStatusTable=prtgenStatusTable, lexhdwrPortTableParm2=lexhdwrPortTableParm2, opsysROMSize=opsysROMSize, lextcpAddressServ=lextcpAddressServ, lexhdwrPortTableType=lexhdwrPortTableType, lexhdwrPortTableIndex=lexhdwrPortTableIndex, lextalkType=lextalkType, lextalkZone=lextalkZone, prtgenStatusIRC=prtgenStatusIRC, opsysProtocols=opsysProtocols, lextrapDestIPAddr=lextrapDestIPAddr, prtgenStatusPageComplex=prtgenStatusPageComplex, lexipxTrapNodeAddress=lexipxTrapNodeAddress, faxModemCapabilities=faxModemCapabilities, opsysCardEC=opsysCardEC, faxInitString=faxInitString, prtgenStatusEntry=prtgenStatusEntry, lexhttpBytesRemaining=lexhttpBytesRemaining, irTonerLow=irTonerLow, lextrapDestNum=lextrapDestNum, opsysRAMSize=opsysRAMSize, lextcpNPAPserversEntry=lextcpNPAPserversEntry, irPaperJam=irPaperJam, faxInputTray=faxInputTray, irClearedTypeII=irClearedTypeII, lexhttpEnable=lexhttpEnable, timeDSTEndDate=timeDSTEndDate, lextrapDestTable=lextrapDestTable, attachment=attachment, lexipx=lexipx, prtgenNumber=prtgenNumber, faxPort=faxPort, lexdhcpAddressSource=lexdhcpAddressSource, lexhdwrPortTableParm7=lexhdwrPortTableParm7, faxEntry=faxEntry, lexipxNumPrefServers=lexipxNumPrefServers, opsysTimeToReset=opsysTimeToReset, lexipxTrapType=lexipxTrapType, opsysCardPartNo=opsysCardPartNo, prtgenStatusInputEmpty=prtgenStatusInputEmpty, opsysCurrentJob=opsysCurrentJob, lexdhcpDhcpEnable=lexdhcpDhcpEnable, opsysAdapterName=opsysAdapterName, opsysROMType=opsysROMType, faxScaling=faxScaling, lexhdwrNumPorts=lexhdwrNumPorts, lexdhcpLeaseLength=lexdhcpLeaseLength, faxActiveCapabilities=faxActiveCapabilities, irCondition=irCondition, prtgenInfoEntry=prtgenInfoEntry, fax=fax, lexdhcpWinsServer=lexdhcpWinsServer, lexlink=lexlink, lexipxPrefSrvrTable=lexipxPrefSrvrTable, lexipxFrameType=lexipxFrameType, lextcpNPAPserverIndex=lextcpNPAPserverIndex, lexipxTrapNetworkAddress=lexipxTrapNetworkAddress, lexhdwrPortTable=lexhdwrPortTable, prtgenPrinterName=prtgenPrinterName, irOutputFull=irOutputFull, lexdhcpWinsStatus=lexdhcpWinsStatus, prtgenStatusOutHopFull=prtgenStatusOutHopFull, irLoadPaper=irLoadPaper, timeReset=timeReset, irServiceReq=irServiceReq, lexhdwr=lexhdwr, lexhdwrPortTableParm1=lexhdwrPortTableParm1, opsys=opsys, lexipxConnSrvrNode=lexipxConnSrvrNode, lexdhcpTimetoExpire=lexdhcpTimetoExpire, lexdhcp=lexdhcp, lexipxConnSrvrConnId=lexipxConnSrvrConnId, lexhttpLinkTableLabel=lexhttpLinkTableLabel, printer=printer, opsysCurrentJobTable=opsysCurrentJobTable, lexipxConnSrvrIndex=lexipxConnSrvrIndex, lextrapDestEntry=lextrapDestEntry, faxNumber=faxNumber, timeDSTEnable=timeDSTEnable, faxBinaryEncoding=faxBinaryEncoding, lextalk=lextalk, lexipxActivated=lexipxActivated, timeServerName=timeServerName, faxIDString=faxIDString, lexipxPortInfoBannerPage=lexipxPortInfoBannerPage, faxNumberRings=faxNumberRings, lexhdwrPortTableParm9=lexhdwrPortTableParm9, lextcpNPAPserverAddress=lextcpNPAPserverAddress, lexlinkNickname=lexlinkNickname, lexhttpResetLinks=lexhttpResetLinks, opsysCodeRev=opsysCodeRev, prtgenStatusBusy=prtgenStatusBusy, opsysCurrentJobEntryIndex=opsysCurrentJobEntryIndex, faxOutputBin=faxOutputBin, lextrapIPTrapType=lextrapIPTrapType, lexipxGSQ=lexipxGSQ, lexhttp=lexhttp, prtgenStatusPrinting=prtgenStatusPrinting, lexhdwrPortTableParm8=lexhdwrPortTableParm8, lexipxTrapEntry=lexipxTrapEntry, prtgenSerialNo=prtgenSerialNo, lexhdwrPortTableEntry=lexhdwrPortTableEntry, prtgenStatusCoverOpen=prtgenStatusCoverOpen, timeDSTOffset=timeDSTOffset, lexipxNumPorts=lexipxNumPorts, opsysCurrentJobEntry=opsysCurrentJobEntry, lexhttpLinkTable=lexhttpLinkTable, lextrapDestIndex=lextrapDestIndex, lexipxTrapTable=lexipxTrapTable, lexhdwrPortTableParm4=lexhdwrPortTableParm4, lextrapDestMask=lextrapDestMask, prtgenCodeRevision=prtgenCodeRevision, faxIndex=faxIndex, prtgenStatusTonerError=prtgenStatusTonerError, opsysAdapterCapabilities=opsysAdapterCapabilities, lextcpNPAPserversTable=lextcpNPAPserversTable, lexmacSpeed=lexmacSpeed, prtgenStatusSrvcReqd=prtgenStatusSrvcReqd, lexipxConnSrvrPSConnID=lexipxConnSrvrPSConnID, lexdhcpDNSServer=lexdhcpDNSServer, lexipxPortInfoEntry=lexipxPortInfoEntry, faxPrinterPort=faxPrinterPort, lexhttpLinkTableEntry=lexhttpLinkTableEntry, prtgenStatusWaiting=prtgenStatusWaiting, lexipxPrefSrvrName=lexipxPrefSrvrName, lextcpNumNPAPservers=lextcpNumNPAPservers, lexipxNetNumber=lexipxNetNumber, lexmark=lexmark, lextcpActivated=lextcpActivated, irPageComplexity=irPageComplexity, prtgenStatPrinterIndex=prtgenStatPrinterIndex, irOffline=irOffline, lexmac=lexmac, lexhttpConfigEnable=lexhttpConfigEnable, timeUTCOffset=timeUTCOffset, faxAdapterCapabilities=faxAdapterCapabilities, lexipxPortInfoTable=lexipxPortInfoTable, lexlinkActivated=lexlinkActivated, lexhdwrPortTableParm6=lexhdwrPortTableParm6, lexmacUAA=lexmacUAA, lextcpBootpEnable=lextcpBootpEnable, lexhttpLinkTableIndex=lexhttpLinkTableIndex, lexdhcpHostname=lexdhcpHostname, lextalkActivated=lextalkActivated, lexipxTrapMask=lexipxTrapMask, lexipxServerMode=lexipxServerMode, timeDSTStartDate=timeDSTStartDate, lexipxLoginName=lexipxLoginName, irCleared=irCleared, lexipxTrapIndex=lexipxTrapIndex, lexhttpLinkTableURL=lexhttpLinkTableURL, prtgen=prtgen, irDiskErr=irDiskErr, lexhdwrPortTableParm5=lexhdwrPortTableParm5, lextalkName=lextalkName, prtgenResValue=prtgenResValue, lexipxPrefSrvrEntry=lexipxPrefSrvrEntry, prtgenPeripheralID=prtgenPeripheralID, lexmacLAA=lexmacLAA, lexmacType=lexmacType, prtgenPrinterIndex=prtgenPrinterIndex, faxSelectedCapabilities=faxSelectedCapabilities, lexipxConnSrvrTable=lexipxConnSrvrTable, lexipxConnSrvrNet=lexipxConnSrvrNet, prtgenInfoTable=prtgenInfoTable, lexmacConnType=lexmacConnType, opsysCurrentJobString=opsysCurrentJobString, timeSource=timeSource, irCoverOpen=irCoverOpen, prtgenStatusPaperJam=prtgenStatusPaperJam, lexipxConnSrvrEntry=lexipxConnSrvrEntry, lexipxPrefSrvrIndex=lexipxPrefSrvrIndex, lexipxConnSrvrConnNum=lexipxConnSrvrConnNum, lexdhcpRarpEnable=lexdhcpRarpEnable, lexhdwrPortTableParm3=lexhdwrPortTableParm3, faxTable=faxTable, prtgenStatusLineStatus=prtgenStatusLineStatus, time=time, opsysJobTimeout=opsysJobTimeout, lexhttpLinkTableStatus=lexhttpLinkTableStatus, lexipxSAPMode=lexipxSAPMode, opsysDeviceType=opsysDeviceType, timeServerAddress=timeServerAddress, prtgenStatusWarming=prtgenStatusWarming)
