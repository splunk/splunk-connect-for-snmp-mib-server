#
# PySNMP MIB module HH3C-DOT11-CFG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-DOT11-CFG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:13:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
Hh3cDot11TunnelSecSchemType, Hh3cDot11RadioType, Hh3cDot11WorkMode, Hh3cDot11ServicePolicyIDType, Hh3cDot11ChannelScopeType, hh3cDot11APElementIndex, Hh3cDot11RadioScopeType, Hh3cDot11ObjectIDType, Hh3cDot11SSIDStringType, Hh3cDot11CirMode, hh3cDot11, Hh3cDot11RadioElementIndex, Hh3cDot11PreambleType, Hh3cDot11SSIDEncryptModeType, Hh3cDot11TxPwrLevelScopeType, Hh3cDot11SecIEStatusType, Hh3cDot11AuthenType = mibBuilder.importSymbols("HH3C-DOT11-REF-MIB", "Hh3cDot11TunnelSecSchemType", "Hh3cDot11RadioType", "Hh3cDot11WorkMode", "Hh3cDot11ServicePolicyIDType", "Hh3cDot11ChannelScopeType", "hh3cDot11APElementIndex", "Hh3cDot11RadioScopeType", "Hh3cDot11ObjectIDType", "Hh3cDot11SSIDStringType", "Hh3cDot11CirMode", "hh3cDot11", "Hh3cDot11RadioElementIndex", "Hh3cDot11PreambleType", "Hh3cDot11SSIDEncryptModeType", "Hh3cDot11TxPwrLevelScopeType", "Hh3cDot11SecIEStatusType", "Hh3cDot11AuthenType")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, NotificationType, iso, ObjectIdentity, Counter64, Counter32, ModuleIdentity, Gauge32, MibIdentifier, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "iso", "ObjectIdentity", "Counter64", "Counter32", "ModuleIdentity", "Gauge32", "MibIdentifier", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32")
MacAddress, RowStatus, TextualConvention, DisplayString, TruthValue, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "TextualConvention", "DisplayString", "TruthValue", "DateAndTime")
hh3cDot11CFG = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4))
hh3cDot11CFG.setRevisions(('2010-09-25 18:00', '2010-09-02 18:00', '2009-07-29 18:00', '2009-05-07 20:00', '2009-03-20 15:30', '2008-11-07 15:30', '2008-07-09 18:00', '2008-02-25 18:00', '2007-12-21 18:00', '2007-10-09 16:55', '2007-06-19 18:00', '2007-04-27 20:00', '2007-02-01 20:00', '2006-05-10 19:00',))
if mibBuilder.loadTexts: hh3cDot11CFG.setLastUpdated('201009251800Z')
if mibBuilder.loadTexts: hh3cDot11CFG.setOrganization('Marconi Corporation PLC.')
hh3cDot11GlobeConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1))
hh3cDot11PolicyConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2))
hh3cDot11APConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3))
hh3cDot11RadioIntfConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4))
hh3cDot11DataRateConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 5))
hh3cDot11InterfaceConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6))
hh3cDot11ACBackupGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 7))
hh3cDot11RadioElementConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 8))
hh3cDot11CfgNotifyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 9))
hh3cDot11GlobalCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11GlobalCountryCode.setStatus('current')
hh3cDot11StaKeepALiveTimerIntvl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 2), Unsigned32()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11StaKeepALiveTimerIntvl.setStatus('current')
hh3cDot11StaIdleTimerIntvl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 3), Integer32()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11StaIdleTimerIntvl.setStatus('current')
hh3cDot11BroadcastProbeReply = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11BroadcastProbeReply.setStatus('current')
hh3cDot11APScanMode = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2))).clone('passive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11APScanMode.setStatus('current')
hh3cDot11ACCtrlTunnelSecSupport = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 6), Hh3cDot11TunnelSecSchemType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11ACCtrlTunnelSecSupport.setStatus('current')
hh3cDot11ACDataTunnelSecSupport = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 7), Hh3cDot11TunnelSecSchemType().clone('cleartxt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11ACDataTunnelSecSupport.setStatus('current')
hh3cDot11ACAutoAPSupport = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11ACAutoAPSupport.setStatus('current')
hh3cDot11AutoAPName = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11AutoAPName.setStatus('current')
hh3cDot11PersistentName = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11PersistentName.setStatus('current')
hh3cDot11IntfTrapThreshold = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 11), Integer32()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11IntfTrapThreshold.setStatus('current')
hh3cDot11MonitorInterval = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 15), ))).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11MonitorInterval.setStatus('current')
hh3cDot11SampleInterval = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 300), ))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SampleInterval.setStatus('current')
hh3cDot11ChnlSwitChkInterval = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(8, 180)).clone(8)).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11ChnlSwitChkInterval.setStatus('current')
hh3cDot11APUserUplimit = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11APUserUplimit.setStatus('current')
hh3cDot11APL2IsolateEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11APL2IsolateEnable.setStatus('current')
hh3cDot11APBSSIDSupportNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11APBSSIDSupportNum.setStatus('current')
hh3cDot11APLastUpdateStatTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11APLastUpdateStatTime.setStatus('current')
hh3cDot11APDoSProtectEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11APDoSProtectEnable.setStatus('current')
hh3cDot11MaxAPPerIf = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11MaxAPPerIf.setStatus('current')
hh3cDot11SampleTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11SampleTimeStamp.setStatus('current')
hh3cDot11UplinkTrackId = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11UplinkTrackId.setStatus('current')
hh3cDot11RtCollectSwitch = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 23), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RtCollectSwitch.setStatus('current')
hh3cDot11RglCollectIntvl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 24), Integer32()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RglCollectIntvl.setStatus('current')
hh3cDot11RtCollectIntvl = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 25), Integer32()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RtCollectIntvl.setStatus('current')
hh3cDot11AllAPCpuUsageThreshold = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('onepercent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11AllAPCpuUsageThreshold.setStatus('current')
hh3cDot11AllAPMemUsageThreshold = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('onepercent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11AllAPMemUsageThreshold.setStatus('current')
hh3cDot11AdjIntfTrapThreshold = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 1, 28), Integer32()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11AdjIntfTrapThreshold.setStatus('current')
hh3cDot11RadioPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 1), )
if mibBuilder.loadTexts: hh3cDot11RadioPolicyTable.setStatus('current')
hh3cDot11RadioPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 1, 1), ).setIndexNames((1, "HH3C-DOT11-CFG-MIB", "hh3cDot11RadioPolicyName"))
if mibBuilder.loadTexts: hh3cDot11RadioPolicyEntry.setStatus('current')
hh3cDot11RadioPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: hh3cDot11RadioPolicyName.setStatus('current')
hh3cDot11BeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 1, 1, 2), Integer32().clone(100)).setUnits('TU').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11BeaconInterval.setStatus('current')
hh3cDot11DtimInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 1, 1, 3), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11DtimInterval.setStatus('current')
hh3cDot11RtsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 1, 1, 4), Integer32().clone(2346)).setUnits('byte').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11RtsThreshold.setStatus('current')
hh3cDot11FragThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 1, 1, 5), Integer32().clone(2346)).setUnits('byte').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11FragThreshold.setStatus('current')
hh3cDot11ShortRetryThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 1, 1, 6), Integer32().clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11ShortRetryThreshold.setStatus('current')
hh3cDot11LongRetryThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 1, 1, 7), Integer32().clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11LongRetryThreshold.setStatus('current')
hh3cDot11MaxRxLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 1, 1, 8), Unsigned32().clone(2000)).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11MaxRxLifetime.setStatus('current')
hh3cDot11RdoPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11RdoPolicyRowStatus.setStatus('current')
hh3cDot11RdoClientMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11RdoClientMaxCount.setStatus('current')
hh3cDot11BeaconIntervalMs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 1, 1, 11), Integer32()).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11BeaconIntervalMs.setStatus('current')
hh3cDot11ServicePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 2), )
if mibBuilder.loadTexts: hh3cDot11ServicePolicyTable.setStatus('current')
hh3cDot11ServicePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 2, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11ServicePolicyID"))
if mibBuilder.loadTexts: hh3cDot11ServicePolicyEntry.setStatus('current')
hh3cDot11ServicePolicyID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 2, 1, 1), Hh3cDot11ServicePolicyIDType())
if mibBuilder.loadTexts: hh3cDot11ServicePolicyID.setStatus('current')
hh3cDot11SSIDName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 2, 1, 2), Hh3cDot11SSIDStringType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11SSIDName.setStatus('current')
hh3cDot11SSIDHidden = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11SSIDHidden.setStatus('current')
hh3cDot11AuthenMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 2, 1, 4), Hh3cDot11AuthenType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11AuthenMode.setStatus('current')
hh3cDot11SSIDEncryptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 2, 1, 5), Hh3cDot11SSIDEncryptModeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11SSIDEncryptionMode.setStatus('current')
hh3cDot11WlanInfBindingType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 2, 1, 6), OctetString().clone('WLAN-ESS')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11WlanInfBindingType.setStatus('current')
hh3cDot11WlanInfBindingID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 2, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11WlanInfBindingID.setStatus('current')
hh3cDot11SrvPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11SrvPolicyRowStatus.setStatus('current')
hh3cDot11ClientMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11ClientMaxCount.setStatus('current')
hh3cDot11SPInCirMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 2, 1, 10), Hh3cDot11CirMode().clone('static')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11SPInCirMode.setStatus('current')
hh3cDot11SPInCirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 2, 1, 11), Integer32()).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11SPInCirValue.setStatus('current')
hh3cDot11SPOutCirMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 2, 1, 12), Hh3cDot11CirMode().clone('static')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11SPOutCirMode.setStatus('current')
hh3cDot11SPOutCirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 2, 1, 13), Integer32()).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11SPOutCirValue.setStatus('current')
hh3cDot11WlanInfPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 2, 1, 14), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11WlanInfPVID.setStatus('current')
hh3cDot11SPInCirStaticValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 2, 1, 15), Integer32()).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11SPInCirStaticValue.setStatus('current')
hh3cDot11SPOutCirStaticValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 2, 1, 16), Integer32()).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11SPOutCirStaticValue.setStatus('current')
hh3cDot11SPIsolate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 2, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11SPIsolate.setStatus('current')
hh3cDot11ServicePolicyExtTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 3), )
if mibBuilder.loadTexts: hh3cDot11ServicePolicyExtTable.setStatus('current')
hh3cDot11ServicePolicyExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 3, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11ServicePolicyExtID"))
if mibBuilder.loadTexts: hh3cDot11ServicePolicyExtEntry.setStatus('current')
hh3cDot11ServicePolicyExtID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 3, 1, 1), Hh3cDot11ServicePolicyIDType())
if mibBuilder.loadTexts: hh3cDot11ServicePolicyExtID.setStatus('current')
hh3cDot11SecIEStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 3, 1, 2), Hh3cDot11SecIEStatusType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11SecIEStatus.setStatus('current')
hh3cDot11SecurityCiphers = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11SecurityCiphers.setStatus('current')
hh3cDot11CipherKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 3, 1, 4), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11CipherKeyIndex.setStatus('current')
hh3cDot11CipherKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 3, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11CipherKey.setStatus('current')
hh3cDot11SrvPolicyExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11SrvPolicyExtRowStatus.setStatus('current')
hh3cDot11CipherKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("char", 1), ("hex", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11CipherKeyType.setStatus('current')
hh3cDot11RadioPolicyExtTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 4), )
if mibBuilder.loadTexts: hh3cDot11RadioPolicyExtTable.setStatus('current')
hh3cDot11RadioPolicyExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 4, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11RPAPSerialID"), (0, "HH3C-DOT11-CFG-MIB", "hh3cDot11RPRadioID"))
if mibBuilder.loadTexts: hh3cDot11RadioPolicyExtEntry.setStatus('current')
hh3cDot11RPAPSerialID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: hh3cDot11RPAPSerialID.setStatus('current')
hh3cDot11RPRadioID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 4, 1, 2), Hh3cDot11RadioScopeType())
if mibBuilder.loadTexts: hh3cDot11RPRadioID.setStatus('current')
hh3cDot11RPBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 4, 1, 3), Integer32().clone(100)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RPBeaconInterval.setStatus('current')
hh3cDot11RPDtimInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 4, 1, 4), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RPDtimInterval.setStatus('current')
hh3cDot11RPRtsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 4, 1, 5), Integer32().clone(2346)).setUnits('byte').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RPRtsThreshold.setStatus('current')
hh3cDot11RPFragThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 4, 1, 6), Integer32().clone(2346)).setUnits('byte').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RPFragThreshold.setStatus('current')
hh3cDot11RPShortRetryThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 4, 1, 7), Integer32().clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RPShortRetryThreshold.setStatus('current')
hh3cDot11RPLongRetryThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 4, 1, 8), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RPLongRetryThreshold.setStatus('current')
hh3cDot11RPClientMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RPClientMaxCount.setStatus('current')
hh3cDot11SrvPortSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 5), )
if mibBuilder.loadTexts: hh3cDot11SrvPortSecurityTable.setStatus('current')
hh3cDot11SrvPortSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 5, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11SecurityServicePolicyID"))
if mibBuilder.loadTexts: hh3cDot11SrvPortSecurityEntry.setStatus('current')
hh3cDot11SecurityServicePolicyID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 5, 1, 1), Hh3cDot11ServicePolicyIDType())
if mibBuilder.loadTexts: hh3cDot11SecurityServicePolicyID.setStatus('current')
hh3cDot11SrvPortSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noRestrictions", 1), ("userLoginSecureExt", 2), ("psk", 3), ("macAddressAndPsk", 4), ("userLoginSecureExtOrPsk", 5), ("wapi", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SrvPortSecurityMode.setStatus('current')
hh3cDot11SrvSecurityKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("userLoginTxKeyTypeNone", 1), ("userLoginTxKeyTypeDot11Key", 2), ("userLoginTxKeyTypeRsaRC4Key", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SrvSecurityKeyType.setStatus('current')
hh3cDot11SrvSecurityPskKeyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pskKeyModeNone", 1), ("pskKeyModePassPhrase", 2), ("pskKeyModeRawKey", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SrvSecurityPskKeyMode.setStatus('current')
hh3cDot11SrvSecurityPskKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SrvSecurityPskKeyString.setStatus('current')
hh3cDot11SrvPolicyExtendTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 6), )
if mibBuilder.loadTexts: hh3cDot11SrvPolicyExtendTable.setStatus('current')
hh3cDot11SrvPolicyExtendEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 6, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11ServicePolicyID"))
if mibBuilder.loadTexts: hh3cDot11SrvPolicyExtendEntry.setStatus('current')
hh3cDot11SPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SPEnable.setStatus('current')
hh3cDot11APTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1), )
if mibBuilder.loadTexts: hh3cDot11APTemplateTable.setStatus('current')
hh3cDot11APTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11APTemplateName"))
if mibBuilder.loadTexts: hh3cDot11APTemplateEntry.setStatus('current')
hh3cDot11APTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: hh3cDot11APTemplateName.setStatus('current')
hh3cDot11APSerialID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11APSerialID.setStatus('current')
hh3cDot11TemplateAPModelAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11TemplateAPModelAlias.setStatus('current')
hh3cDot11Description = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11Description.setStatus('current')
hh3cDot11APWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("monitor", 2), ("hybrid", 3))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11APWorkMode.setStatus('current')
hh3cDot11APTemplateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11APTemplateRowStatus.setStatus('current')
hh3cDot11APName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1, 1, 7), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11APName.setStatus('current')
hh3cDot11StatisInterv = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1, 1, 8), Integer32()).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11StatisInterv.setStatus('current')
hh3cDot11APBroadcastProbeReply = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1, 1, 9), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11APBroadcastProbeReply.setStatus('current')
hh3cDot11StaIdleTimerInterv = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1, 1, 10), Integer32()).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11StaIdleTimerInterv.setStatus('current')
hh3cDot11StaKeepAliveTimerInterv = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1, 1, 11), Integer32()).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11StaKeepAliveTimerInterv.setStatus('current')
hh3cDot11APCir = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1, 1, 12), Integer32()).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11APCir.setStatus('current')
hh3cDot11APCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1, 1, 13), Integer32()).setUnits('Bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11APCbs.setStatus('current')
hh3cDot11APPriorityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11APPriorityLevel.setStatus('current')
hh3cDot11APElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11APElementID.setStatus('current')
hh3cDot11APDevDetectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11APDevDetectEnable.setStatus('current')
hh3cDot11APGetIPMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcpAlloc", 1), ("static", 2))).clone('dhcpAlloc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11APGetIPMethod.setStatus('current')
hh3cDot11StatisIntervMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("realtime", 2))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11StatisIntervMode.setStatus('current')
hh3cDot11RadioToConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 2), )
if mibBuilder.loadTexts: hh3cDot11RadioToConfigTable.setStatus('current')
hh3cDot11RadioToConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 2, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11APTemplateNameCfg"), (0, "HH3C-DOT11-CFG-MIB", "hh3cDot11CfgRadioID"))
if mibBuilder.loadTexts: hh3cDot11RadioToConfigEntry.setStatus('current')
hh3cDot11APTemplateNameCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: hh3cDot11APTemplateNameCfg.setStatus('current')
hh3cDot11CfgRadioID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 2, 1, 2), Hh3cDot11RadioScopeType())
if mibBuilder.loadTexts: hh3cDot11CfgRadioID.setStatus('current')
hh3cDot11CfgRadioPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11CfgRadioPolicyName.setStatus('current')
hh3cDot11CfgRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 2, 1, 4), Hh3cDot11RadioType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11CfgRadioType.setStatus('current')
hh3cDot11CfgChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 2, 1, 5), Hh3cDot11ChannelScopeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11CfgChannel.setStatus('current')
hh3cDot11CfgMaxTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 2, 1, 6), Hh3cDot11TxPwrLevelScopeType()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11CfgMaxTxPowerLevel.setStatus('current')
hh3cDot11PreambleLen = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 2, 1, 7), Hh3cDot11PreambleType().clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11PreambleLen.setStatus('current')
hh3cDot11CfgRadioStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 2, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11CfgRadioStatus.setStatus('current')
hh3cDot11CfgRdElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11CfgRdElementID.setStatus('current')
hh3cDot11CfgWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 2, 1, 10), Hh3cDot11WorkMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11CfgWorkMode.setStatus('current')
hh3cDot11CfgPwrAttValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11CfgPwrAttValue.setStatus('current')
hh3cDot11RadioTxArithmetic = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("quality", 1), ("bandwidth", 2))).clone('quality')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RadioTxArithmetic.setStatus('current')
hh3cDot11CfgChannelLockStat = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2))).clone('unlocked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11CfgChannelLockStat.setStatus('current')
hh3cDot11CfgPowerLockStat = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2))).clone('unlocked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11CfgPowerLockStat.setStatus('current')
hh3cDot11CfgLBRdGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 2, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11CfgLBRdGroupId.setStatus('current')
hh3cDot11CfgRRMSDRdGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 2, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11CfgRRMSDRdGroupId.setStatus('current')
hh3cDot11APServiceSetTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 3), )
if mibBuilder.loadTexts: hh3cDot11APServiceSetTable.setStatus('current')
hh3cDot11APServiceSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 3, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11APTemplateNameCfg"), (0, "HH3C-DOT11-CFG-MIB", "hh3cDot11CfgRadioID"), (0, "HH3C-DOT11-CFG-MIB", "hh3cDot11CfgServicePolicyID"))
if mibBuilder.loadTexts: hh3cDot11APServiceSetEntry.setStatus('current')
hh3cDot11CfgServicePolicyID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 3, 1, 1), Hh3cDot11ServicePolicyIDType())
if mibBuilder.loadTexts: hh3cDot11CfgServicePolicyID.setStatus('current')
hh3cDot11SrvSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11SrvSetRowStatus.setStatus('current')
hh3cDot11ServiceSetVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11ServiceSetVlanId.setStatus('current')
hh3cDot11APSTVlanTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 11), )
if mibBuilder.loadTexts: hh3cDot11APSTVlanTable.setStatus('current')
hh3cDot11APSTVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 11, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11SIDAPSerialID"), (0, "HH3C-DOT11-CFG-MIB", "hh3cDot11CfgRadioID"), (0, "HH3C-DOT11-CFG-MIB", "hh3cDot11CfgServicePolicyID"))
if mibBuilder.loadTexts: hh3cDot11APSTVlanEntry.setStatus('current')
hh3cDot11CfgSTVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11CfgSTVLANID.setStatus('current')
hh3cDot11CfgSTNASPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11CfgSTNASPortID.setStatus('current')
hh3cDot11CfgServiceSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11CfgServiceSetRowStatus.setStatus('current')
hh3cDot11APSysInfoSetTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 4), )
if mibBuilder.loadTexts: hh3cDot11APSysInfoSetTable.setStatus('current')
hh3cDot11APSysInfoSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 4, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11SIDAPSerialID"))
if mibBuilder.loadTexts: hh3cDot11APSysInfoSetEntry.setStatus('current')
hh3cDot11APSysNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11APSysNetID.setStatus('current')
hh3cDot11APCpuUsageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('onepercent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11APCpuUsageThreshold.setStatus('current')
hh3cDot11APMemUsageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('onepercent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11APMemUsageThreshold.setStatus('current')
hh3cDot11APLimitTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 5), )
if mibBuilder.loadTexts: hh3cDot11APLimitTable.setStatus('current')
hh3cDot11APLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 5, 1), ).setIndexNames((0, "HH3C-DOT11-REF-MIB", "hh3cDot11APElementIndex"))
if mibBuilder.loadTexts: hh3cDot11APLimitEntry.setStatus('current')
hh3cDot11APSsidNumLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11APSsidNumLimit.setStatus('current')
hh3cDot11APUserCntLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11APUserCntLimit.setStatus('current')
hh3cDot11APUserThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11APUserThreshold.setStatus('current')
hh3cDot11APIfSetTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 6), )
if mibBuilder.loadTexts: hh3cDot11APIfSetTable.setStatus('current')
hh3cDot11APIfSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 6, 1), ).setIndexNames((0, "HH3C-DOT11-REF-MIB", "hh3cDot11APElementIndex"), (0, "HH3C-DOT11-CFG-MIB", "hh3cDot11APSetIfIndex"))
if mibBuilder.loadTexts: hh3cDot11APIfSetEntry.setStatus('current')
hh3cDot11APSetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cDot11APSetIfIndex.setStatus('current')
hh3cDot11APIfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11APIfAlias.setStatus('current')
hh3cDot11APServiceVlanTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 7), )
if mibBuilder.loadTexts: hh3cDot11APServiceVlanTable.setStatus('current')
hh3cDot11APServiceVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 7, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11APServiceVlanSerialID"), (0, "HH3C-DOT11-CFG-MIB", "hh3cDot11APServiceVlanSPID"))
if mibBuilder.loadTexts: hh3cDot11APServiceVlanEntry.setStatus('current')
hh3cDot11APServiceVlanSerialID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 7, 1, 1), OctetString())
if mibBuilder.loadTexts: hh3cDot11APServiceVlanSerialID.setStatus('current')
hh3cDot11APServiceVlanSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 7, 1, 2), Hh3cDot11ServicePolicyIDType())
if mibBuilder.loadTexts: hh3cDot11APServiceVlanSPID.setStatus('current')
hh3cDot11APServiceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11APServiceVlanId.setStatus('current')
hh3cDot11APServiceVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11APServiceVlanRowStatus.setStatus('current')
hh3cDot11RadioConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 8), )
if mibBuilder.loadTexts: hh3cDot11RadioConfigTable.setStatus('current')
hh3cDot11RadioConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 8, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11RCAPSerialID"), (0, "HH3C-DOT11-CFG-MIB", "hh3cDot11RCRadioID"))
if mibBuilder.loadTexts: hh3cDot11RadioConfigEntry.setStatus('current')
hh3cDot11RCAPSerialID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: hh3cDot11RCAPSerialID.setStatus('current')
hh3cDot11RCRadioID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 8, 1, 2), Hh3cDot11RadioScopeType())
if mibBuilder.loadTexts: hh3cDot11RCRadioID.setStatus('current')
hh3cDot11RCRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 8, 1, 3), Hh3cDot11RadioType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RCRadioType.setStatus('current')
hh3cDot11RCChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 8, 1, 4), Hh3cDot11ChannelScopeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RCChannel.setStatus('current')
hh3cDot11RCPreambleLen = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 8, 1, 5), Hh3cDot11PreambleType().clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RCPreambleLen.setStatus('current')
hh3cDot11RCPwrAttValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 8, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RCPwrAttValue.setStatus('current')
hh3cDot11RCApPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 8, 1, 7), Hh3cDot11TxPwrLevelScopeType()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RCApPowerLevel.setStatus('current')
hh3cDot11RCDynamicChlState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 8, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RCDynamicChlState.setStatus('current')
hh3cDot11RCDynamicPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 8, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RCDynamicPowerState.setStatus('current')
hh3cDot11RCRadioStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 8, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RCRadioStatus.setStatus('current')
hh3cDot11RadioSSIDCfgTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 9), )
if mibBuilder.loadTexts: hh3cDot11RadioSSIDCfgTable.setStatus('current')
hh3cDot11RadioSSIDCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 9, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11RadioSSIDSerialID"), (0, "HH3C-DOT11-CFG-MIB", "hh3cDot11RadioSSIDRadioID"), (0, "HH3C-DOT11-CFG-MIB", "hh3cDot11RadioSSIDWLANID"))
if mibBuilder.loadTexts: hh3cDot11RadioSSIDCfgEntry.setStatus('current')
hh3cDot11RadioSSIDSerialID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 9, 1, 1), Hh3cDot11ObjectIDType())
if mibBuilder.loadTexts: hh3cDot11RadioSSIDSerialID.setStatus('current')
hh3cDot11RadioSSIDRadioID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 9, 1, 2), Hh3cDot11RadioScopeType())
if mibBuilder.loadTexts: hh3cDot11RadioSSIDRadioID.setStatus('current')
hh3cDot11RadioSSIDWLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 9, 1, 3), Integer32())
if mibBuilder.loadTexts: hh3cDot11RadioSSIDWLANID.setStatus('current')
hh3cDot11RadioSSIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 9, 1, 4), Hh3cDot11ServicePolicyIDType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11RadioSSIDIndex.setStatus('current')
hh3cDot11RadioBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 9, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11RadioBSSID.setStatus('current')
hh3cDot11RadioSSIDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 9, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11RadioSSIDRowStatus.setStatus('current')
hh3cDot11APSerialIDTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 10), )
if mibBuilder.loadTexts: hh3cDot11APSerialIDTable.setStatus('current')
hh3cDot11APSerialIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 10, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11SIDAPSerialID"))
if mibBuilder.loadTexts: hh3cDot11APSerialIDEntry.setStatus('current')
hh3cDot11SIDAPSerialID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 10, 1, 1), OctetString())
if mibBuilder.loadTexts: hh3cDot11SIDAPSerialID.setStatus('current')
hh3cDot11SIDAPWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("monitor", 2), ("hybrid", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SIDAPWorkMode.setStatus('current')
hh3cDot11SIDAPGetIPMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcpAlloc", 1), ("static", 2))).clone('dhcpAlloc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SIDAPGetIPMethod.setStatus('current')
hh3cDot11RadioIntfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 1), )
if mibBuilder.loadTexts: hh3cDot11RadioIntfConfigTable.setStatus('current')
hh3cDot11RadioIntfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 1, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11RadioIfIdx"))
if mibBuilder.loadTexts: hh3cDot11RadioIntfConfigEntry.setStatus('current')
hh3cDot11RadioIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cDot11RadioIfIdx.setStatus('current')
hh3cDot11RadioCfgBeaconIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 1, 1, 2), Integer32().clone(100)).setUnits('TU').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RadioCfgBeaconIntvl.setStatus('current')
hh3cDot11RadioCfgDtimIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 1, 1, 3), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RadioCfgDtimIntvl.setStatus('current')
hh3cDot11RadioCfgRtsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 1, 1, 4), Integer32().clone(2346)).setUnits('Byte').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RadioCfgRtsThreshold.setStatus('current')
hh3cDot11RadioCfgFragThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 1, 1, 5), Integer32().clone(2346)).setUnits('Byte').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RadioCfgFragThreshold.setStatus('current')
hh3cDot11RadioCfgShtRetryThld = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 1, 1, 6), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RadioCfgShtRetryThld.setStatus('current')
hh3cDot11RadioCfglongRtrThld = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 1, 1, 7), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RadioCfglongRtrThld.setStatus('current')
hh3cDot11RadioCfgMaxRxLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 1, 1, 8), Unsigned32().clone(2000)).setUnits('millisecond').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RadioCfgMaxRxLifetime.setStatus('current')
hh3cDot11RadioCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 1, 1, 9), Hh3cDot11RadioType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RadioCfgType.setStatus('current')
hh3cDot11RadioCfgChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 1, 1, 10), Hh3cDot11ChannelScopeType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RadioCfgChannel.setStatus('current')
hh3cDot11RadioCfgMaxTxPwrLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 1, 1, 11), Hh3cDot11TxPwrLevelScopeType()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RadioCfgMaxTxPwrLvl.setStatus('current')
hh3cDot11RadioCfgPreambleLen = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 1, 1, 12), Hh3cDot11PreambleType().clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RadioCfgPreambleLen.setStatus('current')
hh3cDot11RadioCfgWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 1, 1, 13), Hh3cDot11WorkMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RadioCfgWorkMode.setStatus('current')
hh3cDot11RadioCfgOnly11gEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RadioCfgOnly11gEnable.setStatus('current')
hh3cDot11RadioIntfBindTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 2), )
if mibBuilder.loadTexts: hh3cDot11RadioIntfBindTable.setStatus('current')
hh3cDot11RadioIntfBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 2, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11RadioIfIdx"), (0, "HH3C-DOT11-CFG-MIB", "hh3cDot11RadioIntfBindSvcPlcyID"))
if mibBuilder.loadTexts: hh3cDot11RadioIntfBindEntry.setStatus('current')
hh3cDot11RadioIntfBindSvcPlcyID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 2, 1, 1), Hh3cDot11ServicePolicyIDType())
if mibBuilder.loadTexts: hh3cDot11RadioIntfBindSvcPlcyID.setStatus('current')
hh3cDot11RadioIntfBindIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11RadioIntfBindIfIdx.setStatus('current')
hh3cDot11RadioIntfBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 4, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11RadioIntfBindRowStatus.setStatus('current')
hh3cDot11DataRateConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 5, 1), )
if mibBuilder.loadTexts: hh3cDot11DataRateConfigTable.setStatus('current')
hh3cDot11DataRateConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 5, 1, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11RadioTypeID"))
if mibBuilder.loadTexts: hh3cDot11DataRateConfigEntry.setStatus('current')
hh3cDot11RadioTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 5, 1, 1, 1), Hh3cDot11RadioType())
if mibBuilder.loadTexts: hh3cDot11RadioTypeID.setStatus('current')
hh3cDot11SupportedRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SupportedRateSet.setStatus('current')
hh3cDot11MandatoryRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11MandatoryRateSet.setStatus('current')
hh3cDot11DisabledRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11DisabledRateSet.setStatus('current')
hh3cDot11SmartRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SmartRateSet.setStatus('current')
hh3cDot11WlanEssIfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 1), )
if mibBuilder.loadTexts: hh3cDot11WlanEssIfTable.setStatus('current')
hh3cDot11WlanEssIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 1, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11WlanEssIfNumber"))
if mibBuilder.loadTexts: hh3cDot11WlanEssIfEntry.setStatus('current')
hh3cDot11WlanEssIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cDot11WlanEssIfNumber.setStatus('current')
hh3cDot11WlanEssIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11WlanEssIfIndex.setStatus('current')
hh3cDot11WlanEssRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11WlanEssRowStatus.setStatus('current')
hh3cDot11WlanBssIfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 2), )
if mibBuilder.loadTexts: hh3cDot11WlanBssIfTable.setStatus('current')
hh3cDot11WlanBssIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 2, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11WlanBssIfNumber"))
if mibBuilder.loadTexts: hh3cDot11WlanBssIfEntry.setStatus('current')
hh3cDot11WlanBssIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cDot11WlanBssIfNumber.setStatus('current')
hh3cDot11WlanBssIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11WlanBssIfIndex.setStatus('current')
hh3cDot11WlanBssRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11WlanBssRowStatus.setStatus('current')
hh3cDot11WLANEthernetIfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 3), )
if mibBuilder.loadTexts: hh3cDot11WLANEthernetIfTable.setStatus('current')
hh3cDot11WLANEthernetIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 3, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11WlanEthernetIfNumber"))
if mibBuilder.loadTexts: hh3cDot11WLANEthernetIfEntry.setStatus('current')
hh3cDot11WlanEthernetIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cDot11WlanEthernetIfNumber.setStatus('current')
hh3cDot11WLANEthernetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11WLANEthernetIfIndex.setStatus('current')
hh3cDot11WlanEthernetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11WlanEthernetRowStatus.setStatus('current')
hh3cDot11PortSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 4), )
if mibBuilder.loadTexts: hh3cDot11PortSecurityTable.setStatus('current')
hh3cDot11PortSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cDot11PortSecurityEntry.setStatus('current')
hh3cDot11PortSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noRestrictions", 1), ("userLoginSecureExt", 2), ("psk", 3), ("macAddressAndPsk", 4), ("userLoginSecureExtOrPsk", 5), ("wapi", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11PortSecurityMode.setStatus('current')
hh3cDot11SecurityUserLoginTxKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("userLoginTxKeyTypeNone", 1), ("userLoginTxKeyTypeDot11Key", 2), ("userLoginTxKeyTypeRsaRC4Key", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SecurityUserLoginTxKeyType.setStatus('current')
hh3cDot11SecurityPskKeyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pskKeyModeNone", 1), ("pskKeyModePassPhrase", 2), ("pskKeyModeRawKey", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SecurityPskKeyMode.setStatus('current')
hh3cDot11SecurityPskKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11SecurityPskKeyString.setStatus('current')
hh3cDot11WlanMeshIfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 5), )
if mibBuilder.loadTexts: hh3cDot11WlanMeshIfTable.setStatus('current')
hh3cDot11WlanMeshIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 5, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11WlanMeshIfNumber"))
if mibBuilder.loadTexts: hh3cDot11WlanMeshIfEntry.setStatus('current')
hh3cDot11WlanMeshIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cDot11WlanMeshIfNumber.setStatus('current')
hh3cDot11WlanMeshIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDot11WlanMeshIfIndex.setStatus('current')
hh3cDot11WlanMeshRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 6, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDot11WlanMeshRowStatus.setStatus('current')
hh3cDot11BackupACAdrssIP = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 7, 1), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11BackupACAdrssIP.setStatus('current')
hh3cDot11BackupACAdrssIPv6 = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 7, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11BackupACAdrssIPv6.setStatus('current')
hh3cDot11nRadioCfgTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 8, 1), )
if mibBuilder.loadTexts: hh3cDot11nRadioCfgTable.setStatus('current')
hh3cDot11nRadioCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 8, 1, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11nRadioCfgIndex"))
if mibBuilder.loadTexts: hh3cDot11nRadioCfgEntry.setStatus('current')
hh3cDot11nRadioCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 8, 1, 1, 1), Hh3cDot11RadioElementIndex())
if mibBuilder.loadTexts: hh3cDot11nRadioCfgIndex.setStatus('current')
hh3cDot11nAMpduEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 8, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11nAMpduEnable.setStatus('current')
hh3cDot11nAMsduEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 8, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11nAMsduEnable.setStatus('current')
hh3cDot11nClientDot11nOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 8, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11nClientDot11nOnly.setStatus('current')
hh3cDot11nChanelBand = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mode20", 1), ("mode40", 2))).clone('mode40')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11nChanelBand.setStatus('current')
hh3cDot11nShortGiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 8, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11nShortGiEnable.setStatus('current')
hh3cDot11RadioWDSTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 8, 2), )
if mibBuilder.loadTexts: hh3cDot11RadioWDSTable.setStatus('current')
hh3cDot11RadioWDSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 8, 2, 1), ).setIndexNames((0, "HH3C-DOT11-CFG-MIB", "hh3cDot11RadioWDSIndex"))
if mibBuilder.loadTexts: hh3cDot11RadioWDSEntry.setStatus('current')
hh3cDot11RadioWDSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 8, 2, 1, 1), Hh3cDot11RadioElementIndex())
if mibBuilder.loadTexts: hh3cDot11RadioWDSIndex.setStatus('current')
hh3cDot11RadioWDSMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nowds", 1), ("wds", 2))).clone('nowds')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RadioWDSMode.setStatus('current')
hh3cDot11RadioWDSNetWorkID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 8, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11RadioWDSNetWorkID.setStatus('current')
hh3cDot11WDSSecPskKeyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pskKeyModeNone", 1), ("pskKeyModePassPhrase", 2), ("pskKeyModeRawKey", 3))).clone('pskKeyModeNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11WDSSecPskKeyMode.setStatus('current')
hh3cDot11WDSSecPskKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 8, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDot11WDSSecPskKeyString.setStatus('current')
hh3cDot11CfgNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 9, 0))
hh3cDot11CfgCipherChange = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 9, 0, 1)).setObjects(("HH3C-DOT11-CFG-MIB", "hh3cDot11SSIDName"), ("HH3C-DOT11-CFG-MIB", "hh3cDot11SecurityCiphers"))
if mibBuilder.loadTexts: hh3cDot11CfgCipherChange.setStatus('current')
hh3cDot11CfgPSKChange = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 9, 0, 2)).setObjects(("HH3C-DOT11-CFG-MIB", "hh3cDot11SSIDName"))
if mibBuilder.loadTexts: hh3cDot11CfgPSKChange.setStatus('current')
hh3cDot11SSIDWepIDConflictTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 9, 0, 3)).setObjects(("HH3C-DOT11-CFG-MIB", "hh3cDot11PreConflictTemplateNum"), ("HH3C-DOT11-CFG-MIB", "hh3cDot11CurrConflictTemplateNum"), ("HH3C-DOT11-CFG-MIB", "hh3cDot11ConflictCipherIdx"), ("HH3C-DOT11-CFG-MIB", "hh3cDot11ConfigureAPID"), ("HH3C-DOT11-CFG-MIB", "hh3cDot11ConfigureRadioID"))
if mibBuilder.loadTexts: hh3cDot11SSIDWepIDConflictTrap.setStatus('current')
hh3cDot11CfgTrapVarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 9, 1))
hh3cDot11PreConflictTemplateNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDot11PreConflictTemplateNum.setStatus('current')
hh3cDot11CurrConflictTemplateNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDot11CurrConflictTemplateNum.setStatus('current')
hh3cDot11ConflictCipherIdx = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDot11ConflictCipherIdx.setStatus('current')
hh3cDot11ConfigureAPID = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 9, 1, 4), Hh3cDot11ObjectIDType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDot11ConfigureAPID.setStatus('current')
hh3cDot11ConfigureRadioID = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 75, 4, 9, 1, 5), Hh3cDot11RadioScopeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDot11ConfigureRadioID.setStatus('current')
mibBuilder.exportSymbols("HH3C-DOT11-CFG-MIB", hh3cDot11CfgChannel=hh3cDot11CfgChannel, hh3cDot11nAMsduEnable=hh3cDot11nAMsduEnable, hh3cDot11SmartRateSet=hh3cDot11SmartRateSet, hh3cDot11UplinkTrackId=hh3cDot11UplinkTrackId, hh3cDot11SecurityServicePolicyID=hh3cDot11SecurityServicePolicyID, hh3cDot11WlanEthernetRowStatus=hh3cDot11WlanEthernetRowStatus, hh3cDot11PreConflictTemplateNum=hh3cDot11PreConflictTemplateNum, hh3cDot11CfgNotifications=hh3cDot11CfgNotifications, hh3cDot11RadioSSIDIndex=hh3cDot11RadioSSIDIndex, hh3cDot11RCRadioType=hh3cDot11RCRadioType, hh3cDot11RadioWDSIndex=hh3cDot11RadioWDSIndex, hh3cDot11Description=hh3cDot11Description, hh3cDot11SrvPolicyExtRowStatus=hh3cDot11SrvPolicyExtRowStatus, hh3cDot11TemplateAPModelAlias=hh3cDot11TemplateAPModelAlias, hh3cDot11RadioPolicyName=hh3cDot11RadioPolicyName, hh3cDot11RdoClientMaxCount=hh3cDot11RdoClientMaxCount, hh3cDot11WDSSecPskKeyString=hh3cDot11WDSSecPskKeyString, hh3cDot11RPAPSerialID=hh3cDot11RPAPSerialID, hh3cDot11AllAPCpuUsageThreshold=hh3cDot11AllAPCpuUsageThreshold, hh3cDot11SecurityPskKeyString=hh3cDot11SecurityPskKeyString, hh3cDot11RPShortRetryThreshold=hh3cDot11RPShortRetryThreshold, hh3cDot11APTemplateEntry=hh3cDot11APTemplateEntry, hh3cDot11APSysInfoSetEntry=hh3cDot11APSysInfoSetEntry, hh3cDot11RadioTxArithmetic=hh3cDot11RadioTxArithmetic, hh3cDot11APServiceSetEntry=hh3cDot11APServiceSetEntry, hh3cDot11RadioIfIdx=hh3cDot11RadioIfIdx, hh3cDot11RCAPSerialID=hh3cDot11RCAPSerialID, hh3cDot11RadioSSIDWLANID=hh3cDot11RadioSSIDWLANID, hh3cDot11SSIDHidden=hh3cDot11SSIDHidden, hh3cDot11RglCollectIntvl=hh3cDot11RglCollectIntvl, hh3cDot11ServicePolicyExtEntry=hh3cDot11ServicePolicyExtEntry, hh3cDot11CipherKey=hh3cDot11CipherKey, hh3cDot11RadioSSIDRowStatus=hh3cDot11RadioSSIDRowStatus, hh3cDot11ACDataTunnelSecSupport=hh3cDot11ACDataTunnelSecSupport, hh3cDot11APGetIPMethod=hh3cDot11APGetIPMethod, hh3cDot11RCRadioID=hh3cDot11RCRadioID, hh3cDot11APConfigGroup=hh3cDot11APConfigGroup, hh3cDot11LongRetryThreshold=hh3cDot11LongRetryThreshold, hh3cDot11RPClientMaxCount=hh3cDot11RPClientMaxCount, hh3cDot11APIfSetEntry=hh3cDot11APIfSetEntry, hh3cDot11CfgChannelLockStat=hh3cDot11CfgChannelLockStat, hh3cDot11SrvPortSecurityMode=hh3cDot11SrvPortSecurityMode, hh3cDot11SPEnable=hh3cDot11SPEnable, hh3cDot11StatisInterv=hh3cDot11StatisInterv, hh3cDot11RadioSSIDRadioID=hh3cDot11RadioSSIDRadioID, hh3cDot11APIfSetTable=hh3cDot11APIfSetTable, hh3cDot11APServiceVlanSPID=hh3cDot11APServiceVlanSPID, hh3cDot11RadioConfigTable=hh3cDot11RadioConfigTable, hh3cDot11DataRateConfigEntry=hh3cDot11DataRateConfigEntry, hh3cDot11APWorkMode=hh3cDot11APWorkMode, hh3cDot11ConfigureAPID=hh3cDot11ConfigureAPID, hh3cDot11CfgServicePolicyID=hh3cDot11CfgServicePolicyID, hh3cDot11RadioCfgWorkMode=hh3cDot11RadioCfgWorkMode, hh3cDot11WlanMeshIfNumber=hh3cDot11WlanMeshIfNumber, hh3cDot11RadioIntfConfigEntry=hh3cDot11RadioIntfConfigEntry, hh3cDot11ShortRetryThreshold=hh3cDot11ShortRetryThreshold, hh3cDot11SPOutCirMode=hh3cDot11SPOutCirMode, hh3cDot11APMemUsageThreshold=hh3cDot11APMemUsageThreshold, hh3cDot11RdoPolicyRowStatus=hh3cDot11RdoPolicyRowStatus, hh3cDot11SPInCirMode=hh3cDot11SPInCirMode, hh3cDot11SIDAPGetIPMethod=hh3cDot11SIDAPGetIPMethod, hh3cDot11DataRateConfigGroup=hh3cDot11DataRateConfigGroup, hh3cDot11APSetIfIndex=hh3cDot11APSetIfIndex, hh3cDot11RadioCfglongRtrThld=hh3cDot11RadioCfglongRtrThld, hh3cDot11APCir=hh3cDot11APCir, hh3cDot11PersistentName=hh3cDot11PersistentName, hh3cDot11AuthenMode=hh3cDot11AuthenMode, hh3cDot11APUserUplimit=hh3cDot11APUserUplimit, hh3cDot11RPRadioID=hh3cDot11RPRadioID, hh3cDot11SSIDName=hh3cDot11SSIDName, hh3cDot11RadioPolicyExtTable=hh3cDot11RadioPolicyExtTable, hh3cDot11SrvSecurityKeyType=hh3cDot11SrvSecurityKeyType, hh3cDot11APServiceVlanRowStatus=hh3cDot11APServiceVlanRowStatus, hh3cDot11AdjIntfTrapThreshold=hh3cDot11AdjIntfTrapThreshold, hh3cDot11CfgSTVLANID=hh3cDot11CfgSTVLANID, hh3cDot11AllAPMemUsageThreshold=hh3cDot11AllAPMemUsageThreshold, hh3cDot11RPLongRetryThreshold=hh3cDot11RPLongRetryThreshold, hh3cDot11SPOutCirValue=hh3cDot11SPOutCirValue, hh3cDot11SPOutCirStaticValue=hh3cDot11SPOutCirStaticValue, hh3cDot11RPBeaconInterval=hh3cDot11RPBeaconInterval, hh3cDot11APSerialID=hh3cDot11APSerialID, hh3cDot11DtimInterval=hh3cDot11DtimInterval, hh3cDot11APSysNetID=hh3cDot11APSysNetID, hh3cDot11FragThreshold=hh3cDot11FragThreshold, hh3cDot11APIfAlias=hh3cDot11APIfAlias, hh3cDot11CfgPowerLockStat=hh3cDot11CfgPowerLockStat, hh3cDot11CfgServiceSetRowStatus=hh3cDot11CfgServiceSetRowStatus, hh3cDot11SecurityCiphers=hh3cDot11SecurityCiphers, hh3cDot11SrvPolicyExtendEntry=hh3cDot11SrvPolicyExtendEntry, hh3cDot11RadioSSIDCfgEntry=hh3cDot11RadioSSIDCfgEntry, hh3cDot11CfgSTNASPortID=hh3cDot11CfgSTNASPortID, hh3cDot11WlanInfBindingType=hh3cDot11WlanInfBindingType, hh3cDot11RtsThreshold=hh3cDot11RtsThreshold, hh3cDot11APDevDetectEnable=hh3cDot11APDevDetectEnable, hh3cDot11APServiceVlanSerialID=hh3cDot11APServiceVlanSerialID, hh3cDot11WlanMeshIfIndex=hh3cDot11WlanMeshIfIndex, hh3cDot11RadioCfgMaxTxPwrLvl=hh3cDot11RadioCfgMaxTxPwrLvl, hh3cDot11RadioWDSNetWorkID=hh3cDot11RadioWDSNetWorkID, hh3cDot11RadioCfgPreambleLen=hh3cDot11RadioCfgPreambleLen, hh3cDot11CfgNotifyGroup=hh3cDot11CfgNotifyGroup, hh3cDot11APTemplateRowStatus=hh3cDot11APTemplateRowStatus, hh3cDot11RadioCfgChannel=hh3cDot11RadioCfgChannel, hh3cDot11nRadioCfgEntry=hh3cDot11nRadioCfgEntry, hh3cDot11SSIDWepIDConflictTrap=hh3cDot11SSIDWepIDConflictTrap, hh3cDot11CurrConflictTemplateNum=hh3cDot11CurrConflictTemplateNum, hh3cDot11APPriorityLevel=hh3cDot11APPriorityLevel, hh3cDot11APUserThreshold=hh3cDot11APUserThreshold, hh3cDot11WlanMeshIfEntry=hh3cDot11WlanMeshIfEntry, hh3cDot11SPInCirValue=hh3cDot11SPInCirValue, hh3cDot11SrvSetRowStatus=hh3cDot11SrvSetRowStatus, hh3cDot11ACAutoAPSupport=hh3cDot11ACAutoAPSupport, hh3cDot11WlanInfBindingID=hh3cDot11WlanInfBindingID, hh3cDot11MonitorInterval=hh3cDot11MonitorInterval, hh3cDot11WlanInfPVID=hh3cDot11WlanInfPVID, hh3cDot11RCChannel=hh3cDot11RCChannel, hh3cDot11CFG=hh3cDot11CFG, hh3cDot11APServiceSetTable=hh3cDot11APServiceSetTable, hh3cDot11PortSecurityMode=hh3cDot11PortSecurityMode, hh3cDot11APServiceVlanTable=hh3cDot11APServiceVlanTable, hh3cDot11APSerialIDTable=hh3cDot11APSerialIDTable, hh3cDot11RadioBSSID=hh3cDot11RadioBSSID, hh3cDot11RadioWDSTable=hh3cDot11RadioWDSTable, hh3cDot11RadioPolicyExtEntry=hh3cDot11RadioPolicyExtEntry, hh3cDot11GlobeConfigGroup=hh3cDot11GlobeConfigGroup, hh3cDot11APScanMode=hh3cDot11APScanMode, hh3cDot11RadioCfgOnly11gEnable=hh3cDot11RadioCfgOnly11gEnable, hh3cDot11APServiceVlanEntry=hh3cDot11APServiceVlanEntry, hh3cDot11RadioCfgFragThreshold=hh3cDot11RadioCfgFragThreshold, hh3cDot11BeaconIntervalMs=hh3cDot11BeaconIntervalMs, hh3cDot11WlanEssRowStatus=hh3cDot11WlanEssRowStatus, hh3cDot11APTemplateNameCfg=hh3cDot11APTemplateNameCfg, hh3cDot11ServicePolicyExtID=hh3cDot11ServicePolicyExtID, hh3cDot11RCRadioStatus=hh3cDot11RCRadioStatus, hh3cDot11WlanEssIfIndex=hh3cDot11WlanEssIfIndex, hh3cDot11WLANEthernetIfEntry=hh3cDot11WLANEthernetIfEntry, hh3cDot11RadioIntfBindEntry=hh3cDot11RadioIntfBindEntry, hh3cDot11APSTVlanTable=hh3cDot11APSTVlanTable, hh3cDot11RadioWDSMode=hh3cDot11RadioWDSMode, hh3cDot11RadioIntfBindTable=hh3cDot11RadioIntfBindTable, hh3cDot11StaIdleTimerIntvl=hh3cDot11StaIdleTimerIntvl, hh3cDot11CfgRadioStatus=hh3cDot11CfgRadioStatus, hh3cDot11CfgPSKChange=hh3cDot11CfgPSKChange, hh3cDot11APTemplateTable=hh3cDot11APTemplateTable, hh3cDot11BroadcastProbeReply=hh3cDot11BroadcastProbeReply, hh3cDot11APDoSProtectEnable=hh3cDot11APDoSProtectEnable, hh3cDot11RtCollectSwitch=hh3cDot11RtCollectSwitch, hh3cDot11RadioPolicyTable=hh3cDot11RadioPolicyTable, hh3cDot11SrvPortSecurityEntry=hh3cDot11SrvPortSecurityEntry, hh3cDot11ConflictCipherIdx=hh3cDot11ConflictCipherIdx, hh3cDot11RadioWDSEntry=hh3cDot11RadioWDSEntry, hh3cDot11RadioElementConfigGroup=hh3cDot11RadioElementConfigGroup, hh3cDot11nClientDot11nOnly=hh3cDot11nClientDot11nOnly, hh3cDot11APSerialIDEntry=hh3cDot11APSerialIDEntry, hh3cDot11SampleTimeStamp=hh3cDot11SampleTimeStamp, hh3cDot11SrvSecurityPskKeyString=hh3cDot11SrvSecurityPskKeyString, hh3cDot11SIDAPWorkMode=hh3cDot11SIDAPWorkMode, hh3cDot11InterfaceConfigGroup=hh3cDot11InterfaceConfigGroup, hh3cDot11SrvPortSecurityTable=hh3cDot11SrvPortSecurityTable, hh3cDot11MaxAPPerIf=hh3cDot11MaxAPPerIf, hh3cDot11CfgRadioType=hh3cDot11CfgRadioType, hh3cDot11SrvPolicyRowStatus=hh3cDot11SrvPolicyRowStatus, hh3cDot11RPFragThreshold=hh3cDot11RPFragThreshold, hh3cDot11SecurityPskKeyMode=hh3cDot11SecurityPskKeyMode, hh3cDot11APSTVlanEntry=hh3cDot11APSTVlanEntry, hh3cDot11WlanMeshRowStatus=hh3cDot11WlanMeshRowStatus, hh3cDot11APLimitTable=hh3cDot11APLimitTable, hh3cDot11WlanBssIfTable=hh3cDot11WlanBssIfTable, hh3cDot11APLastUpdateStatTime=hh3cDot11APLastUpdateStatTime, hh3cDot11nRadioCfgTable=hh3cDot11nRadioCfgTable, hh3cDot11ServicePolicyExtTable=hh3cDot11ServicePolicyExtTable, hh3cDot11RadioSSIDSerialID=hh3cDot11RadioSSIDSerialID, hh3cDot11nShortGiEnable=hh3cDot11nShortGiEnable, hh3cDot11APSysInfoSetTable=hh3cDot11APSysInfoSetTable, hh3cDot11APServiceVlanId=hh3cDot11APServiceVlanId, hh3cDot11BeaconInterval=hh3cDot11BeaconInterval, hh3cDot11CipherKeyIndex=hh3cDot11CipherKeyIndex, hh3cDot11IntfTrapThreshold=hh3cDot11IntfTrapThreshold, hh3cDot11RadioCfgDtimIntvl=hh3cDot11RadioCfgDtimIntvl, hh3cDot11WlanEssIfTable=hh3cDot11WlanEssIfTable, hh3cDot11RPRtsThreshold=hh3cDot11RPRtsThreshold, hh3cDot11ClientMaxCount=hh3cDot11ClientMaxCount, hh3cDot11CfgPwrAttValue=hh3cDot11CfgPwrAttValue, hh3cDot11RadioIntfBindSvcPlcyID=hh3cDot11RadioIntfBindSvcPlcyID, hh3cDot11SPInCirStaticValue=hh3cDot11SPInCirStaticValue, hh3cDot11StatisIntervMode=hh3cDot11StatisIntervMode, hh3cDot11APTemplateName=hh3cDot11APTemplateName, hh3cDot11RadioPolicyEntry=hh3cDot11RadioPolicyEntry, hh3cDot11CfgRadioPolicyName=hh3cDot11CfgRadioPolicyName, hh3cDot11DataRateConfigTable=hh3cDot11DataRateConfigTable, hh3cDot11CfgWorkMode=hh3cDot11CfgWorkMode, hh3cDot11ACCtrlTunnelSecSupport=hh3cDot11ACCtrlTunnelSecSupport, hh3cDot11RCPreambleLen=hh3cDot11RCPreambleLen, hh3cDot11PortSecurityTable=hh3cDot11PortSecurityTable, hh3cDot11RadioToConfigTable=hh3cDot11RadioToConfigTable, hh3cDot11RadioIntfConfigGroup=hh3cDot11RadioIntfConfigGroup, hh3cDot11APBSSIDSupportNum=hh3cDot11APBSSIDSupportNum, hh3cDot11ServiceSetVlanId=hh3cDot11ServiceSetVlanId, hh3cDot11RadioIntfBindIfIdx=hh3cDot11RadioIntfBindIfIdx, hh3cDot11RCApPowerLevel=hh3cDot11RCApPowerLevel, hh3cDot11RadioIntfBindRowStatus=hh3cDot11RadioIntfBindRowStatus, hh3cDot11GlobalCountryCode=hh3cDot11GlobalCountryCode, hh3cDot11PolicyConfigGroup=hh3cDot11PolicyConfigGroup, hh3cDot11WlanBssRowStatus=hh3cDot11WlanBssRowStatus, hh3cDot11AutoAPName=hh3cDot11AutoAPName, hh3cDot11SrvPolicyExtendTable=hh3cDot11SrvPolicyExtendTable, hh3cDot11DisabledRateSet=hh3cDot11DisabledRateSet, hh3cDot11SecIEStatus=hh3cDot11SecIEStatus, hh3cDot11RadioCfgRtsThreshold=hh3cDot11RadioCfgRtsThreshold, hh3cDot11SecurityUserLoginTxKeyType=hh3cDot11SecurityUserLoginTxKeyType, hh3cDot11RadioCfgMaxRxLifetime=hh3cDot11RadioCfgMaxRxLifetime, hh3cDot11CfgMaxTxPowerLevel=hh3cDot11CfgMaxTxPowerLevel, hh3cDot11CfgLBRdGroupId=hh3cDot11CfgLBRdGroupId, hh3cDot11APSsidNumLimit=hh3cDot11APSsidNumLimit, hh3cDot11PortSecurityEntry=hh3cDot11PortSecurityEntry, hh3cDot11ServicePolicyID=hh3cDot11ServicePolicyID, hh3cDot11APName=hh3cDot11APName, hh3cDot11RadioConfigEntry=hh3cDot11RadioConfigEntry, hh3cDot11RadioIntfConfigTable=hh3cDot11RadioIntfConfigTable, hh3cDot11RadioToConfigEntry=hh3cDot11RadioToConfigEntry, hh3cDot11RCDynamicChlState=hh3cDot11RCDynamicChlState, hh3cDot11StaKeepAliveTimerInterv=hh3cDot11StaKeepAliveTimerInterv, hh3cDot11StaIdleTimerInterv=hh3cDot11StaIdleTimerInterv, hh3cDot11RadioCfgBeaconIntvl=hh3cDot11RadioCfgBeaconIntvl, hh3cDot11nAMpduEnable=hh3cDot11nAMpduEnable, hh3cDot11ServicePolicyEntry=hh3cDot11ServicePolicyEntry, hh3cDot11ServicePolicyTable=hh3cDot11ServicePolicyTable, hh3cDot11APElementID=hh3cDot11APElementID, hh3cDot11RadioCfgType=hh3cDot11RadioCfgType, hh3cDot11APCpuUsageThreshold=hh3cDot11APCpuUsageThreshold, PYSNMP_MODULE_ID=hh3cDot11CFG, hh3cDot11APBroadcastProbeReply=hh3cDot11APBroadcastProbeReply, hh3cDot11SIDAPSerialID=hh3cDot11SIDAPSerialID, hh3cDot11WlanEssIfEntry=hh3cDot11WlanEssIfEntry, hh3cDot11APUserCntLimit=hh3cDot11APUserCntLimit, hh3cDot11BackupACAdrssIP=hh3cDot11BackupACAdrssIP, hh3cDot11PreambleLen=hh3cDot11PreambleLen, hh3cDot11SampleInterval=hh3cDot11SampleInterval, hh3cDot11SSIDEncryptionMode=hh3cDot11SSIDEncryptionMode, hh3cDot11RtCollectIntvl=hh3cDot11RtCollectIntvl, hh3cDot11CfgCipherChange=hh3cDot11CfgCipherChange, hh3cDot11ACBackupGroup=hh3cDot11ACBackupGroup, hh3cDot11MaxRxLifetime=hh3cDot11MaxRxLifetime, hh3cDot11CipherKeyType=hh3cDot11CipherKeyType, hh3cDot11APLimitEntry=hh3cDot11APLimitEntry, hh3cDot11APL2IsolateEnable=hh3cDot11APL2IsolateEnable, hh3cDot11CfgTrapVarObjects=hh3cDot11CfgTrapVarObjects, hh3cDot11RCDynamicPowerState=hh3cDot11RCDynamicPowerState, hh3cDot11CfgRRMSDRdGroupId=hh3cDot11CfgRRMSDRdGroupId, hh3cDot11WDSSecPskKeyMode=hh3cDot11WDSSecPskKeyMode, hh3cDot11ConfigureRadioID=hh3cDot11ConfigureRadioID, hh3cDot11WlanBssIfEntry=hh3cDot11WlanBssIfEntry, hh3cDot11RPDtimInterval=hh3cDot11RPDtimInterval, hh3cDot11APCbs=hh3cDot11APCbs, hh3cDot11MandatoryRateSet=hh3cDot11MandatoryRateSet)
mibBuilder.exportSymbols("HH3C-DOT11-CFG-MIB", hh3cDot11nChanelBand=hh3cDot11nChanelBand, hh3cDot11WLANEthernetIfIndex=hh3cDot11WLANEthernetIfIndex, hh3cDot11WlanEthernetIfNumber=hh3cDot11WlanEthernetIfNumber, hh3cDot11RadioTypeID=hh3cDot11RadioTypeID, hh3cDot11WlanBssIfNumber=hh3cDot11WlanBssIfNumber, hh3cDot11RCPwrAttValue=hh3cDot11RCPwrAttValue, hh3cDot11SupportedRateSet=hh3cDot11SupportedRateSet, hh3cDot11RadioSSIDCfgTable=hh3cDot11RadioSSIDCfgTable, hh3cDot11CfgRadioID=hh3cDot11CfgRadioID, hh3cDot11WlanEssIfNumber=hh3cDot11WlanEssIfNumber, hh3cDot11nRadioCfgIndex=hh3cDot11nRadioCfgIndex, hh3cDot11CfgRdElementID=hh3cDot11CfgRdElementID, hh3cDot11SPIsolate=hh3cDot11SPIsolate, hh3cDot11WlanMeshIfTable=hh3cDot11WlanMeshIfTable, hh3cDot11WlanBssIfIndex=hh3cDot11WlanBssIfIndex, hh3cDot11StaKeepALiveTimerIntvl=hh3cDot11StaKeepALiveTimerIntvl, hh3cDot11BackupACAdrssIPv6=hh3cDot11BackupACAdrssIPv6, hh3cDot11WLANEthernetIfTable=hh3cDot11WLANEthernetIfTable, hh3cDot11SrvSecurityPskKeyMode=hh3cDot11SrvSecurityPskKeyMode, hh3cDot11ChnlSwitChkInterval=hh3cDot11ChnlSwitChkInterval, hh3cDot11RadioCfgShtRetryThld=hh3cDot11RadioCfgShtRetryThld)
