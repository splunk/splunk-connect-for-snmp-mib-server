#
# PySNMP MIB module ASCEND-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:10:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
slots, = mibBuilder.importSymbols("ASCEND-MIB", "slots")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, ObjectIdentity, TimeTicks, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, Gauge32, MibIdentifier, Counter32, ModuleIdentity, IpAddress, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "TimeTicks", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "Gauge32", "MibIdentifier", "Counter32", "ModuleIdentity", "IpAddress", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class AscendSlotType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 92, 93, 94, 96, 97))
    namedValues = NamedValues(("other", 1), ("empty", 2), ("sysT1", 3), ("slotT1", 4), ("sysE1", 5), ("slotE1", 6), ("bri", 7), ("s56-2", 8), ("s56-4", 9), ("dualHost", 10), ("quadHost", 11), ("aim2", 12), ("aim6", 13), ("ethernet", 14), ("ethernetData", 15), ("slotBriTE", 16), ("slotBriNT", 17), ("lanModem", 18), ("serialWan", 19), ("v110", 20), ("slotBriLT", 21), ("lanModemP", 22), ("lanModemP12", 23), ("pots", 24), ("analogModem", 25), ("lanModemP48", 26), ("router", 27), ("unchanT1", 28), ("t3", 29), ("hssi", 30), ("primaryNailedT1", 31), ("primaryNailed56", 32), ("dig-8modem", 33), ("dig-12modem", 34), ("dig-16modem", 35), ("dig-48modem", 36), ("phs-8v32modem", 37), ("phs-12v32modem", 38), ("phs-16v32modem", 39), ("sdsl", 40), ("cap-adsl", 41), ("dmt-adsl", 42), ("idsl", 43), ("unchanE1", 44), ("analogModem2", 45), ("voip-8dsp", 46), ("voip-12dsp", 47), ("voip-16dsp", 48), ("csmx", 49), ("uds3", 50), ("ethernet10-100", 51), ("ds3-atm", 52), ("ethernet2", 53), ("ethernetData2", 54), ("sdsl-data", 55), ("madd", 56), ("sdsl-voice", 57), ("slotBriTeU", 58), ("slotOc3Daughter", 59), ("oc3-atm", 60), ("ethernet3", 61), ("srs-ether", 62), ("sdsl-atm", 63), ("alcatel-dadsl-atm", 64), ("csm3v", 65), ("st100-ds3-atm", 66), ("st100-uds3", 67), ("st100-sdsl16", 68), ("ethernetData2ec", 69), ("slotDs3Daughter", 70), ("st100-sdsl8", 71), ("ether-dual", 72), ("st100-oc3-atm", 73), ("ethernet4", 74), ("stm0", 75), ("st100-cc3-atm", 76), ("lanModem-csmx", 77), ("maxpotsFxs", 78), ("ds3-atm2", 79), ("occupied", 80), ("stinger-control-module", 81), ("tnt-control-module", 82), ("dadsl-atm-16ports", 83), ("alcatel-dadsl-atm-v2", 84), ("sdsl-atm-v2", 85), ("dadsl-atm-16ports-v2", 86), ("dadsl-atm-24ports", 87), ("glite-atm-48ports", 91), ("e3-atm", 92), ("madd2", 93), ("hdsl2", 94), ("annexb-dadsl-atm", 96), ("apx-control-module", 97))

chassisInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 2, 6))
chassisDesc = MibScalar((1, 3, 6, 1, 4, 1, 529, 2, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisDesc.setStatus('mandatory')
chassisSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 529, 2, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSerialNo.setStatus('mandatory')
chassisHWRev = MibScalar((1, 3, 6, 1, 4, 1, 529, 2, 6, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisHWRev.setStatus('mandatory')
chassisRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 529, 2, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noRedundancy", 1), ("redundancy", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisRedundancy.setStatus('mandatory')
chassisMemTotal = MibScalar((1, 3, 6, 1, 4, 1, 529, 2, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisMemTotal.setStatus('mandatory')
chassisMemAvail = MibScalar((1, 3, 6, 1, 4, 1, 529, 2, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisMemAvail.setStatus('mandatory')
chassisMemThreshold = MibScalar((1, 3, 6, 1, 4, 1, 529, 2, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisMemThreshold.setStatus('mandatory')
cntrReduGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 2, 6, 8))
cntrReduSwitchLastTime = MibScalar((1, 3, 6, 1, 4, 1, 529, 2, 6, 8, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntrReduSwitchLastTime.setStatus('mandatory')
cntrReduSwitchReason = MibScalar((1, 3, 6, 1, 4, 1, 529, 2, 6, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("failure", 2), ("manual", 3), ("scheduled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntrReduSwitchReason.setStatus('mandatory')
cntrReduSwitchIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 2, 6, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntrReduSwitchIndex.setStatus('mandatory')
cntrReduCurrentIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 2, 6, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntrReduCurrentIndex.setStatus('mandatory')
cntrReduAvailGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 2, 6, 9))
cntrReduAvailLastTime = MibScalar((1, 3, 6, 1, 4, 1, 529, 2, 6, 9, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntrReduAvailLastTime.setStatus('mandatory')
class CntrReduAvailState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("boot", 2), ("fullRedundancy", 3), ("partialRedundancy", 4), ("noRedundancy", 5))

cntrReduAvailPrevState = MibScalar((1, 3, 6, 1, 4, 1, 529, 2, 6, 9, 2), CntrReduAvailState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntrReduAvailPrevState.setStatus('mandatory')
cntrReduAvailCurrState = MibScalar((1, 3, 6, 1, 4, 1, 529, 2, 6, 9, 3), CntrReduAvailState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntrReduAvailCurrState.setStatus('mandatory')
cntrReduAvailSlotIndex = MibScalar((1, 3, 6, 1, 4, 1, 529, 2, 6, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntrReduAvailSlotIndex.setStatus('mandatory')
slotNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotNumber.setStatus('mandatory')
slotTable = MibTable((1, 3, 6, 1, 4, 1, 529, 2, 2), )
if mibBuilder.loadTexts: slotTable.setStatus('mandatory')
slotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 2, 2, 1), ).setIndexNames((0, "ASCEND-CHASSIS-MIB", "slotIndex"))
if mibBuilder.loadTexts: slotEntry.setStatus('mandatory')
slotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIndex.setStatus('mandatory')
slotName = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotName.setStatus('mandatory')
slotType = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 2, 1, 3), AscendSlotType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotType.setStatus('mandatory')
slotFixed = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("removable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotFixed.setStatus('mandatory')
slotItems = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotItems.setStatus('mandatory')
slotSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 2, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotSpecific.setStatus('mandatory')
slotSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotSerialNumber.setStatus('mandatory')
slotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("operStateDown", 1), ("operStateUp", 2), ("operStateDiag", 3), ("operStateCoreDump", 4), ("operStateLoading", 5), ("operStatePost", 6), ("operStateNone", 7), ("operStateOccupied", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStatus.setStatus('mandatory')
slotLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotLastChange.setStatus('mandatory')
slotHWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotHWRev.setStatus('mandatory')
slotSWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotSWRev.setStatus('mandatory')
slotAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotAdminStatus.setStatus('mandatory')
slotUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 2, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotUpTime.setStatus('mandatory')
slotMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotMemoryTotal.setStatus('mandatory')
slotMemoryAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotMemoryAvail.setStatus('mandatory')
slotMemoryThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotMemoryThreshold.setStatus('mandatory')
slotItemTable = MibTable((1, 3, 6, 1, 4, 1, 529, 2, 3), )
if mibBuilder.loadTexts: slotItemTable.setStatus('mandatory')
slotItemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 2, 3, 1), ).setIndexNames((0, "ASCEND-CHASSIS-MIB", "slotItemSlotIndex"), (0, "ASCEND-CHASSIS-MIB", "slotItemIndex"))
if mibBuilder.loadTexts: slotItemEntry.setStatus('mandatory')
slotItemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotItemSlotIndex.setStatus('mandatory')
slotItemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotItemIndex.setStatus('mandatory')
slotItemFirstIf = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotItemFirstIf.setStatus('mandatory')
slotItemIfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotItemIfCount.setStatus('mandatory')
slotItemSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 3, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotItemSpecific.setStatus('mandatory')
slotItemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("statusOther", 1), ("slotItemNotRunning", 2), ("briLinkNotStuffed", 3), ("briLinkDisabled", 4), ("briDown", 5), ("briNotInit", 6), ("briNotInitWithL2", 7), ("briPInit", 8), ("briMInit", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotItemStatus.setStatus('mandatory')
slotIfTable = MibTable((1, 3, 6, 1, 4, 1, 529, 2, 4), )
if mibBuilder.loadTexts: slotIfTable.setStatus('mandatory')
slotIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 2, 4, 1), ).setIndexNames((0, "ASCEND-CHASSIS-MIB", "slotIfIndex"))
if mibBuilder.loadTexts: slotIfEntry.setStatus('mandatory')
slotIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIfIndex.setStatus('mandatory')
slotIfSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIfSlotIndex.setStatus('mandatory')
slotIfItemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIfItemIndex.setStatus('mandatory')
mibBuilder.exportSymbols("ASCEND-CHASSIS-MIB", cntrReduAvailGroup=cntrReduAvailGroup, slotItemEntry=slotItemEntry, chassisDesc=chassisDesc, slotIfTable=slotIfTable, chassisMemAvail=chassisMemAvail, slotUpTime=slotUpTime, cntrReduSwitchReason=cntrReduSwitchReason, slotTable=slotTable, slotMemoryAvail=slotMemoryAvail, slotName=slotName, cntrReduAvailPrevState=cntrReduAvailPrevState, slotIfSlotIndex=slotIfSlotIndex, slotLastChange=slotLastChange, slotType=slotType, slotAdminStatus=slotAdminStatus, chassisRedundancy=chassisRedundancy, slotMemoryTotal=slotMemoryTotal, slotIndex=slotIndex, slotStatus=slotStatus, cntrReduAvailLastTime=cntrReduAvailLastTime, slotItemStatus=slotItemStatus, slotIfItemIndex=slotIfItemIndex, chassisHWRev=chassisHWRev, chassisInfo=chassisInfo, slotHWRev=slotHWRev, chassisSerialNo=chassisSerialNo, slotMemoryThreshold=slotMemoryThreshold, cntrReduSwitchIndex=cntrReduSwitchIndex, cntrReduGroup=cntrReduGroup, slotSWRev=slotSWRev, slotItemSlotIndex=slotItemSlotIndex, slotItemIndex=slotItemIndex, slotFixed=slotFixed, slotIfIndex=slotIfIndex, cntrReduAvailCurrState=cntrReduAvailCurrState, slotIfEntry=slotIfEntry, slotItemFirstIf=slotItemFirstIf, chassisMemThreshold=chassisMemThreshold, cntrReduSwitchLastTime=cntrReduSwitchLastTime, CntrReduAvailState=CntrReduAvailState, slotItemTable=slotItemTable, slotItemSpecific=slotItemSpecific, slotNumber=slotNumber, slotEntry=slotEntry, slotSpecific=slotSpecific, AscendSlotType=AscendSlotType, chassisMemTotal=chassisMemTotal, cntrReduAvailSlotIndex=cntrReduAvailSlotIndex, slotItems=slotItems, cntrReduCurrentIndex=cntrReduCurrentIndex, slotItemIfCount=slotItemIfCount, slotSerialNumber=slotSerialNumber)
