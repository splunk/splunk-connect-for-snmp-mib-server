#
# PySNMP MIB module ERR-STATUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ERR-STATUS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:52:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
stratacom, = mibBuilder.importSymbols("CISCOWAN-SMI", "stratacom")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, NotificationType, ModuleIdentity, Integer32, TimeTicks, Counter64, ObjectIdentity, IpAddress, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "NotificationType", "ModuleIdentity", "Integer32", "TimeTicks", "Counter64", "ObjectIdentity", "IpAddress", "iso", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
strmErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 910))
errStatusLastIndex = MibScalar((1, 3, 6, 1, 4, 1, 351, 910, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errStatusLastIndex.setStatus('mandatory')
errStatusTable = MibTable((1, 3, 6, 1, 4, 1, 351, 910, 2), )
if mibBuilder.loadTexts: errStatusTable.setStatus('mandatory')
errStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 910, 2, 1), ).setIndexNames((0, "ERR-STATUS-MIB", "errReqId"))
if mibBuilder.loadTexts: errStatusTableEntry.setStatus('mandatory')
errReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 910, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errReqId.setStatus('mandatory')
errCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 910, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 200, 201, 202, 203, 204, 205, 206, 207, 208, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649), SingleValueConstraint(650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762))).clone(namedValues=NamedValues(("success", 1), ("existErr", 2), ("syntaxErr", 3), ("resourceErr", 4), ("databaseLocked", 5), ("otherErr", 6), ("wrongType", 7), ("wrongLength", 8), ("wrongEncoding", 9), ("wrongValue", 10), ("noCreation", 11), ("inconsistentValue", 12), ("resourceUnavailable", 13), ("commitFailed", 14), ("undoFailed", 15), ("authorizationError", 16), ("notWritable", 17), ("inconsistentName", 18), ("featureDisabled", 19), ("m32Problem", 20), ("sarProblem", 21), ("bnmProblem", 22), ("ascUpdFailed", 23), ("lineEnabled", 24), ("lineDisabled", 25), ("lmMismatch", 26), ("lineHasPorts", 27), ("portEnabled", 28), ("portDisable", 29), ("portHasChan", 30), ("chanEnabled", 31), ("chanDisabled", 32), ("dlciEnabled", 33), ("dlciDisabled", 34), ("ovrsubconnPass", 35), ("ovrsubConnFail", 36), ("portVpiVciInUse", 37), ("invalidPrimarySlot", 38), ("invalidSecondarySlot", 39), ("linkFull", 40), ("primaryDuplicate", 41), ("secondaryDuplicate", 42), ("primaryNotPresent", 43), ("secondaryNotPresent", 44), ("srmNotPresent", 45), ("invalidCommand", 46), ("invalidCardType", 47), ("featureMismatch", 48), ("lmiEnabled", 49), ("dlciUsed", 50), ("invalidRedType", 51), ("bertResourcesNotFree", 52), ("bertResourcesNotReady", 53), ("bertSlotEmpty", 54), ("bertUnsupportedCard", 55), ("bertNotOwner", 56), ("bertStartFailed", 57), ("bertModFailed", 58), ("bertDelFailed", 59), ("bertUnsupportedType", 60), ("bertWrongParams", 61), ("bertUnableToFree", 62), ("bertGeneralError", 63), ("portInLoopback", 64), ("invalidT3LineNum", 65), ("invalidT1LineNum", 66), ("invalidSlotNum", 67), ("invalidLineNum", 68), ("notEnoughLine", 69), ("lineInUse", 70), ("t3NotEnabled", 71), ("smNotPresent", 72), ("smNotPrimary", 73), ("srm3t3NotPresent", 74), ("lineInLoopback", 75), ("lineInconsistentLoopback", 76), ("lineLoopNotAllowed", 77), ("versionMismatch", 78), ("portOutOfService", 79), ("lineOutOfService", 80), ("bertNotConfigured", 81), ("bertConfigurationIncomplete", 82), ("testAlreadyOn", 83), ("testNotOn", 84), ("loopUpFailure", 85), ("loopDownFailure", 86), ("bertPatternSyncFailure", 87), ("delRedBeforeLastLinkDelete", 88), ("bertInvalidState", 89), ("bertEirOneInTenNotSupport", 90), ("localIfNotOk", 100), ("remoteIfNotOk", 101), ("localChannelsNotEnough", 102), ("remoteChannelsNotEnough", 103), ("localAddrNotOk", 104), ("remoteAddrNotOk", 105), ("localAddrExist", 106), ("remoteAddrExist", 107), ("invalidConnAddr", 108), ("maxConnsExceeded", 109), ("lmiTrkNotAdded", 110), ("connNotExist", 111), ("vpiConflictForVcc", 112), ("vpiConflictForVpc", 113), ("vpiRangeErr", 114), ("vciRangeErr", 115), ("invalidConnType", 116), ("genConnErr", 117), ("masterConnAllocFailed", 118), ("slaveConnAllocFailed", 119), ("masterLogepAllocFailed", 120), ("slaveLogepAllocFailed", 121), ("masterCmtFailed", 122), ("slaveCmtFailed", 123), ("daxCmtFailed", 124), ("masterChgFailed", 125), ("slaveChgFailed", 126), ("daxChgFailed", 127), ("masterDelFailed", 128), ("slaveDelFailed", 129), ("daxDelFailed", 130), ("masterTimeout", 131), ("mxConAddSessionExceeded", 132), ("masterSessionUnavail", 133), ("slaveSessionUnavail", 134), ("unknownDest", 135), ("localAddrUnknown", 136), ("rmtAddrUnknown", 137), ("portHasResPart", 138), ("networkBusy", 139), ("slaveCnfconNotAllowed", 140), ("pnniConfigurationFail", 200), ("pnniInvalidValue", 201), ("pnniTargtNodeNotExist", 202), ("pnniEntryExist", 203), ("pnniEntryNotExist", 204), ("pnniTargetNodeAdminUp", 205), ("pnniTargetInterfaceNotExist", 206), ("pnniInvalidAtmEndStationAddress", 207), ("pnniNotReadyForSet", 208), ("ccbNullMessageSent", 250), ("ccbOutOfMemory", 251), ("ccbSSIMessageAllocationFailed", 252), ("ccbSwitchResponseReturnedFailure", 253), ("ccbOperationNotPermittedOnControlPort", 254), ("ccbPortExists", 255), ("ccbPortNotExist", 256), ("ccbPortInUseBySwitch", 257), ("ccbPortNotOutOfService", 258), ("ccbPortUpAlready", 259), ("ccbPortDownAlready", 260), ("ccbPortTypeNotMatch", 261), ("ccbAtmAddrExceedMax", 262), ("ccbAtmAddrNotExist", 263), ("ccbAtmAddrExist", 264), ("ccbAtmAddrNotAllowed", 265), ("ccbAtmAddrSendPnniFailed", 266), ("localIfInvalid", 348), ("remoteIfInvalid", 349), ("vpiVciNotAvail", 350), ("rmtAddrRequired", 351), ("endptAllocFailed", 352), ("legAllocFailed", 353), ("invalidTrafficParam", 354), ("daxNoSlave", 355), ("daxSlaveNotAvail", 356), ("endptNotExist", 357), ("endptNotPersistent", 358), ("delFailed", 359), ("modFailed", 360), ("upFailed", 361), ("downFailed", 362), ("rerouteFailed", 363), ("operNotAppl", 364), ("connAlreadyUp", 365), ("connAlreadyDown", 366), ("daxSlaveParamMismatch", 367), ("daxSlaveTrafficParamModNotAllowed", 368), ("daxRerouteNotAppl", 369), ("interfaceDown", 370), ("spvcNotAllowedOnPart", 371), ("spvcBlockEnabled", 372), ("spvcNotAllowedOnIntf", 373), ("spvcNotAllowedDelDaxSlaveEp", 374), ("noPepToDelete", 375), ("portDontSuppoSc", 376), ("lscrBiggerThanLpcr", 377), ("rscrBiggerThanRpcr", 378), ("cbrNeedsLpcr", 379), ("cbrNeedsRpcr", 380), ("vbrNeedsLpcr", 381), ("vbrNeedsRpcr", 382), ("abrNeedsLpcr", 383), ("abrNeedsRpcr", 384), ("badRcdv", 385), ("badRctd", 386), ("badRMaxClr", 387), ("lCrTooBig", 388), ("rCrTooBig", 389), ("ctdNotApplicableServiceType", 390), ("cdvNotApplicableServiceType", 391), ("vccExistsVpi", 392), ("epAlreadyExists", 393), ("ctdNotAllowedSlaveEp", 394), ("cdcNotAllowedSlaveEp", 395), ("mcNotAllowedSlaveEp", 396), ("cantsetOamseg", 397), ("networkBusyTryLater", 398), ("commandProcNotReady", 601), ("invalidIfIndex", 602), ("invalidShelfNum", 603), ("invalidBayNum", 605), ("invalidPortNum", 606), ("provDisBcMismatch", 607), ("configNotSupported", 608), ("frontcardMismatch", 609), ("portRateSumExceedLnRate", 610), ("axsmDiskErr", 611), ("portRateExceedLnRate", 612), ("cannotModSctID", 613), ("partNotExist", 614), ("partExist", 615), ("badBayOrLine", 616), ("vsiSetErr", 617), ("vsisAddPart", 618), ("vsisCnfPart", 619), ("vsisDelPart", 620), ("partRateExceedsPortRate", 621), ("lineResvForE3", 622), ("lineResvForT3", 623), ("minRateExceedMax", 624), ("vpiLoExceedHi", 625), ("vciLoExceedHi", 626), ("swErr", 627), ("actsctCntExceed", 628), ("sctFileMissing", 629), ("sctFileBad", 630), ("sctSgParmMismatch", 631), ("hardwareConfigErr", 633), ("vpiOverlap", 634), ("vciOverlap", 635), ("cannotAllocLcn", 636), ("cannotAllocBw", 637), ("partPortParmMismatch", 638), ("cannotReleaseLcn", 639), ("cannotReleaseBw", 640), ("cannotModLcnRange", 641), ("cannotModBwRange", 642), ("invalidPartNum", 643), ("invalidCtlrNum", 644), ("invalidSlave", 645), ("invalidConnref", 646), ("dupRequest", 647), ("pendingRequest", 648), ("outOfMemory", 649)) + NamedValues(("resourceInUse", 650), ("dcMismatch", 651), ("dcMissing", 652), ("bcMismatch", 653), ("bcMissing", 654), ("invalidDiskRecord", 655), ("invalidCellMapping", 656), ("invalidLineTrace", 657), ("invalidTcaSeverity", 658), ("invalidAtmPhy", 659), ("conflictingPort", 660), ("minConnsExceedsMax", 661), ("partTblFull", 662), ("frozenStatsLvl", 663), ("invalidStatsLvl", 664), ("invalidImaGroup", 665), ("imaGroupEnable", 666), ("imaGroupDisable", 667), ("imaGroupHasPorts", 668), ("cannotCnfProtLine", 669), ("workingLineDown", 670), ("imaModuleNotReady", 671), ("imaInvalidParameters", 672), ("imaInvalidLineLength", 673), ("imaInvalidPattern", 674), ("imaInvalidErrInsertionRate", 675), ("imaProtocolError", 676), ("imaInsufficientAtmPhy", 677), ("imaInvalidClkSource", 678), ("imaInvalidLoopbackConf", 679), ("imaNullHdrNullPyldNotSupported", 680), ("imaVer2Txm128Only", 681), ("imaFeatureIsBlocked", 682), ("imaMinBandwidthViolation", 683), ("imaLinkDeletePending", 684), ("imaLinkExist", 685), ("imaLinkTestInvalidStatusValue", 686), ("imaGroupInvalidMaxDelay", 687), ("imaGroupInvalidVersion", 688), ("imaLinkNotInGroup", 689), ("imaTestLinkNotInGroup", 690), ("imaGroupDelayClrErr", 691), ("imaGroupItcClockNotSupport", 692), ("imaGroupFrameLengthErr", 693), ("imaGroupAtmPhyLimit", 694), ("imaAddportOnLinkError", 695), ("imaServiceModuleError", 696), ("invalidParam", 701), ("badIpcData", 702), ("rvtNotActive", 703), ("diskUpdFailed", 704), ("subIfDown", 705), ("vpiOutOfRange", 706), ("vciOutOfRange", 707), ("vcdOutOfRange", 708), ("inarpNotAllowed", 709), ("vcdInUse", 710), ("secondVccOnPTP", 711), ("unknownLANEType", 712), ("secondIlmiVc", 713), ("unknownEncapType", 714), ("pppErr", 715), ("invalidVpi", 716), ("invalidVci", 717), ("serviceTypeNotSupported", 718), ("cantChgVpcFlag", 719), ("cantChgRmtVpi", 720), ("cantChgRmtVci", 721), ("cantChgRmtAddr", 722), ("cantChgMastership", 723), ("cantChgSubIf", 724), ("cantChgServType", 725), ("cantCnfVc", 726), ("cantDelVc", 727), ("connNotFound", 728), ("subIfNotExist", 729), ("endptNotMaster", 730), ("ctlrIdRequired", 731), ("ingBwRangeRequired", 732), ("egrBwRangeRequired", 733), ("vpiRangeRequired", 734), ("vciRangeRequired", 735), ("invalidIngBwRange", 736), ("invalidEgrBwRange", 737), ("ingBwNotAvail", 738), ("egrBwNotAvail", 739), ("invalidVpiRange", 740), ("invalidVciRange", 741), ("vpiRangeInUse", 742), ("vciRangeInUse", 743), ("cantChgCtlrId", 744), ("cantChgPartType", 745), ("cantModPart", 746), ("cantDelPart", 747), ("subIfExist", 748), ("invalidIpAddr", 749), ("subIfTypeRequired", 750), ("cantChgSubIfType", 751), ("subIfNotFound", 752), ("cantShutMainIf", 753), ("cantDelMainIf", 754), ("rpmNotActive", 755), ("ipcErr", 756), ("rpmNoResponse", 757), ("invalidSrmeLineNum", 758), ("invalidVtNum", 759), ("invalidVtMapping", 760), ("invalidVtFrameType", 761), ("rpmConfigCopyinProgress", 762)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errCode.setStatus('mandatory')
errStatusDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 910, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errStatusDesc.setStatus('mandatory')
mibBuilder.exportSymbols("ERR-STATUS-MIB", errReqId=errReqId, strmErrors=strmErrors, errStatusTableEntry=errStatusTableEntry, errStatusDesc=errStatusDesc, errCode=errCode, errStatusTable=errStatusTable, errStatusLastIndex=errStatusLastIndex)
