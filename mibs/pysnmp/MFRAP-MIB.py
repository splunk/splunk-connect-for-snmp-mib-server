#
# PySNMP MIB module MFRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MFRAP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:01:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
internet, NotificationType, Counter64, iso, ModuleIdentity, MibIdentifier, Counter32, Unsigned32, Bits, Gauge32, Integer32, NotificationType, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "internet", "NotificationType", "Counter64", "iso", "ModuleIdentity", "MibIdentifier", "Counter32", "Unsigned32", "Bits", "Gauge32", "Integer32", "NotificationType", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
sync = MibIdentifier((1, 3, 6, 1, 4, 1, 485))
mfrap = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8))
mfrapSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 1))
mfrapSysTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 1, 1))
mfrapSysType = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysType.setStatus('mandatory')
mfrapSysSoftRev = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysSoftRev.setStatus('mandatory')
mfrapSysHardRev = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysHardRev.setStatus('mandatory')
mfrapSysNumT1Installed = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysNumT1Installed.setStatus('mandatory')
mfrapSysNumDteInstalled = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysNumDteInstalled.setStatus('mandatory')
mfrapSysNumMaintInstalled = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysNumMaintInstalled.setStatus('mandatory')
mfrapSysName = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapSysName.setStatus('mandatory')
mfrapSysSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysSerialNo.setStatus('mandatory')
mfrapSysResetNode = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(321))).clone(namedValues=NamedValues(("reset-node", 321)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapSysResetNode.setStatus('mandatory')
mfrapSysAmtMemoryInstalled = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysAmtMemoryInstalled.setStatus('mandatory')
mfrapSysLocation = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapSysLocation.setStatus('mandatory')
mfrapSysContact = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapSysContact.setStatus('mandatory')
mfrapSysPrompt = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapSysPrompt.setStatus('mandatory')
mfrapSysBootRev = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysBootRev.setStatus('mandatory')
mfrapSysNestId = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapSysNestId.setStatus('mandatory')
mfrapSysFeatureTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 1, 2))
mfrapSysSLIPSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysSLIPSupported.setStatus('mandatory')
mfrapSysPPPSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysPPPSupported.setStatus('mandatory')
mfrapSysRDOSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysRDOSupported.setStatus('mandatory')
mfrapSysETHSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysETHSupported.setStatus('mandatory')
mfrapSysTKRSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysTKRSupported.setStatus('mandatory')
mfrapSysExtTimSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysExtTimSupported.setStatus('mandatory')
mfrapSysBRISupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysBRISupported.setStatus('mandatory')
mfrapSysSelDTESupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysSelDTESupported.setStatus('mandatory')
mfrapSysMLSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysMLSupported.setStatus('mandatory')
mfrapSysNumDlcisSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysNumDlcisSupported.setStatus('mandatory')
mfrapSysLTFNumDlcis = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysLTFNumDlcis.setStatus('mandatory')
mfrapSysLTFNumProtocols = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysLTFNumProtocols.setStatus('mandatory')
mfrapSysNumUserProtocols = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysNumUserProtocols.setStatus('mandatory')
mfrapSysNumSnmpMgrs = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysNumSnmpMgrs.setStatus('mandatory')
mfrapSysNumDlciNames = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 1, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapSysNumDlciNames.setStatus('mandatory')
mfrapConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 2))
mfrapCfgMgmtTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 2, 1))
mfrapCfgIpTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 1))
mfrapCfgIpMyIP = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgIpMyIP.setStatus('mandatory')
mfrapCfgIpPeerIP = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgIpPeerIP.setStatus('mandatory')
mfrapCfgIpMask = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgIpMask.setStatus('mandatory')
mfrapCfgIpMaxMTU = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgIpMaxMTU.setStatus('mandatory')
mfrapCfgIpChannel = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("slip-port", 2), ("in-band-dlci", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgIpChannel.setStatus('mandatory')
mfrapCfgIpTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-telnet", 1), ("disable-telnet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgIpTelnetEnable.setStatus('mandatory')
mfrapCfgIpTelnetAutoLogOut = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 10, 30, 60))).clone(namedValues=NamedValues(("autologout-at-15-minutes", 1), ("disable-autologout", 2), ("autologout-at-3-minutes", 3), ("autologout-at-5-minutes", 5), ("autologout-at-10-minutes", 10), ("autologout-at-30-minutes", 30), ("autologout-at-60-minutes", 60)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgIpTelnetAutoLogOut.setStatus('mandatory')
mfrapCfgTftpTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 2))
mfrapCfgTftpInitiate = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapCfgTftpInitiate.setStatus('mandatory')
mfrapCfgTftpIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgTftpIpAddress.setStatus('mandatory')
mfrapCfgTftpFilename = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgTftpFilename.setStatus('mandatory')
mfrapCfgTftpInterface = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2), ("slip-interface", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgTftpInterface.setStatus('mandatory')
mfrapCfgTftpDlci = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63487))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgTftpDlci.setStatus('mandatory')
mfrapCfgTftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("inactive", 1), ("requested", 2), ("transferring", 3), ("programming", 4), ("transfer-aborted", 5), ("host-no-reply", 6), ("file-not-found", 7), ("invalid-file", 8), ("corrupt-file", 9), ("successful", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgTftpStatus.setStatus('mandatory')
mfrapCfgTftpNumBytes = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgTftpNumBytes.setStatus('mandatory')
mfrapCfgSnmpTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 3))
mfrapCfgSnmpFrTrap = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgSnmpFrTrap.setStatus('mandatory')
mfrapCfgSnmpTrapMuting = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgSnmpTrapMuting.setStatus('mandatory')
mfrapCfgSnmpNestAlarmTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgSnmpNestAlarmTrapEnable.setStatus('mandatory')
mfrapCfgSnmpDandIPortTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgSnmpDandIPortTrapEnable.setStatus('mandatory')
mfrapCfgSnmpUtilTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgSnmpUtilTrapEnable.setStatus('mandatory')
mfrapCfgSnmpMgrClearN = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 3, 7), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapCfgSnmpMgrClearN.setStatus('mandatory')
mfrapCfgSnmpMgrTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 3, 2), )
if mibBuilder.loadTexts: mfrapCfgSnmpMgrTable.setStatus('mandatory')
mfrapCfgSnmpMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 3, 2, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapCfgSnmpMgrIndex"))
if mibBuilder.loadTexts: mfrapCfgSnmpMgrEntry.setStatus('mandatory')
mfrapCfgSnmpMgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgSnmpMgrIndex.setStatus('mandatory')
mfrapCfgSnmpMgrIP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgSnmpMgrIP.setStatus('mandatory')
mfrapCfgSnmpMgrInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2), ("slip-interface", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgSnmpMgrInterface.setStatus('mandatory')
mfrapCfgSnmpMgrDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgSnmpMgrDlci.setStatus('mandatory')
mfrapCfgCommTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 4))
mfrapCfgCommMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vt100", 1), ("slip", 2), ("modem", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgCommMode.setStatus('mandatory')
mfrapCfgCommBaud = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 5, 6))).clone(namedValues=NamedValues(("baud-2400", 2), ("baud-9600", 4), ("baud-19200", 5), ("baud-38400", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgCommBaud.setStatus('mandatory')
mfrapCfgCommDataBits = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits-7", 1), ("databits-8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgCommDataBits.setStatus('mandatory')
mfrapCfgCommStopBits = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stopbits-1", 1), ("stopbits-1-5", 2), ("stopbits-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgCommStopBits.setStatus('mandatory')
mfrapCfgCommParity = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-parity", 1), ("odd-parity", 2), ("even-parity", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgCommParity.setStatus('mandatory')
mfrapCfgCommFlowCtrl = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("no-flow-control", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgCommFlowCtrl.setStatus('mandatory')
mfrapCfgCommModeAutoDetect = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgCommModeAutoDetect.setStatus('mandatory')
mfrapCfgFrDLCITable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 5))
mfrapCfgFrDLCIMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inactive", 1), ("local", 2), ("remote", 3), ("bidirectional", 4), ("piggyback", 5), ("fixedDCE", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrDLCIMode.setStatus('mandatory')
mfrapCfgFrDLCIValue = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 63487))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrDLCIValue.setStatus('mandatory')
mfrapCfgFrDLCIEncap = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rfc1490", 1), ("rfc1490snap", 2), ("auto", 3), ("cisco", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrDLCIEncap.setStatus('mandatory')
mfrapCfgFrDLCIMgmtDE = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-DE-bit-0", 1), ("yes-DE-bit-1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrDLCIMgmtDE.setStatus('mandatory')
mfrapCfgAppTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 2, 2))
mfrapCfgAppClockSource = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("internal", 1), ("network", 2), ("dte", 3), ("drop-and-insert", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgAppClockSource.setStatus('mandatory')
mfrapCfgAppCircuitId = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgAppCircuitId.setStatus('mandatory')
mfrapCfgAppType = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dedicated", 1), ("frame-relay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgAppType.setStatus('mandatory')
mfrapCfgAppFormat = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbo", 1), ("hdlc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgAppFormat.setStatus('mandatory')
mfrapCfgAppLpbkTimeout = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgAppLpbkTimeout.setStatus('mandatory')
mfrapCfgAppPerfBuffLimit = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgAppPerfBuffLimit.setStatus('mandatory')
mfrapCfgT1Table = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 2, 3))
mfrapCfgT1Framing = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("d4", 1), ("esf-54016", 2), ("esf-ansi", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgT1Framing.setStatus('mandatory')
mfrapCfgT1LineEncoding = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgT1LineEncoding.setStatus('mandatory')
mfrapCfgT1Density = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-density", 1), ("twelve-half-percent", 2), ("one-in-16", 3), ("one-in-64", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgT1Density.setStatus('mandatory')
mfrapCfgT1Interface = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dsx-1", 1), ("csu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgT1Interface.setStatus('mandatory')
mfrapCfgT1LboSetting = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("zero-db", 1), ("n7-5-db", 2), ("n15-db", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgT1LboSetting.setStatus('mandatory')
mfrapCfgDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 2, 4))
mfrapCfgDteIntfType = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("intf-v35", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgDteIntfType.setStatus('mandatory')
mfrapCfgDteDataMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data-normal", 1), ("data-invert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgDteDataMode.setStatus('mandatory')
mfrapCfgDteClockMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clock-normal", 1), ("clock-invert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgDteClockMode.setStatus('mandatory')
mfrapCfgDteTiming = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loop-1", 1), ("loop-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgDteTiming.setStatus('mandatory')
mfrapCfgDteLineRate = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1536000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgDteLineRate.setStatus('mandatory')
mfrapCfgDteChannelDensity = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(56, 64))).clone(namedValues=NamedValues(("bit-7-stuff", 56), ("clear-channel", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgDteChannelDensity.setStatus('mandatory')
mfrapCfgDteStartDs0 = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 40, 41))).clone(namedValues=NamedValues(("ds0-01", 1), ("ds0-02", 2), ("ds0-03", 3), ("ds0-04", 4), ("ds0-05", 5), ("ds0-06", 6), ("ds0-07", 7), ("ds0-08", 8), ("ds0-09", 9), ("ds0-10", 10), ("ds0-11", 11), ("ds0-12", 12), ("ds0-13", 13), ("ds0-14", 14), ("ds0-15", 15), ("ds0-16", 16), ("ds0-17", 17), ("ds0-18", 18), ("ds0-19", 19), ("ds0-20", 20), ("ds0-21", 21), ("ds0-22", 22), ("ds0-23", 23), ("ds0-24", 24), ("no-current-connections", 40), ("non-continuous-ds0s", 41)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgDteStartDs0.setStatus('mandatory')
mfrapCfgDteConnStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("connections-valid", 1), ("no-current-connections", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgDteConnStatus.setStatus('mandatory')
mfrapCfgDteConnStartDs0 = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 40, 41))).clone(namedValues=NamedValues(("ds0-01", 1), ("ds0-02", 2), ("ds0-03", 3), ("ds0-04", 4), ("ds0-05", 5), ("ds0-06", 6), ("ds0-07", 7), ("ds0-08", 8), ("ds0-09", 9), ("ds0-10", 10), ("ds0-11", 11), ("ds0-12", 12), ("ds0-13", 13), ("ds0-14", 14), ("ds0-15", 15), ("ds0-16", 16), ("ds0-17", 17), ("ds0-18", 18), ("ds0-19", 19), ("ds0-20", 20), ("ds0-21", 21), ("ds0-22", 22), ("ds0-23", 23), ("ds0-24", 24), ("no-current-connections", 40), ("non-continuous-ds0s", 41)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgDteConnStartDs0.setStatus('mandatory')
mfrapCfgDteConnRate = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1536000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgDteConnRate.setStatus('mandatory')
mfrapCfgDteConnDensity = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(56, 64))).clone(namedValues=NamedValues(("bit-7-stuff", 56), ("clear-channel", 64)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgDteConnDensity.setStatus('mandatory')
mfrapCfgDteConnDs0Required = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgDteConnDs0Required.setStatus('mandatory')
mfrapCfgDteConnAutoStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("configuration-valid", 1), ("configuration-invalid", 2), ("valid-config-updated", 3), ("invalid-cfg-no-update", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgDteConnAutoStatus.setStatus('mandatory')
mfrapCfgDteConnAutoUpdate = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("config-and-connect", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapCfgDteConnAutoUpdate.setStatus('mandatory')
mfrapCfgDteRts = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal-held-active", 1), ("external-from-dte", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgDteRts.setStatus('mandatory')
mfrapCfgDteDtr = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal-held-active", 1), ("external-from-dte", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgDteDtr.setStatus('mandatory')
mfrapCfgDteDcdOutput = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("signal-off", 1), ("signal-on", 2), ("follow-carrier", 3), ("follow-test", 4), ("follow-rts", 5), ("follow-carrier-rts", 6), ("follow-sync-rts", 7), ("follow-lmi-carr-rts", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgDteDcdOutput.setStatus('mandatory')
mfrapCfgDteDsrOutput = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("signal-off", 1), ("signal-on", 2), ("follow-carrier", 3), ("follow-test", 4), ("follow-rts", 5), ("follow-carrier-rts", 6), ("follow-sync-rts", 7), ("follow-lmi-carr-rts", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgDteDsrOutput.setStatus('mandatory')
mfrapCfgDteCtsOutput = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("signal-off", 1), ("signal-on", 2), ("follow-carrier", 3), ("follow-test", 4), ("follow-rts", 5), ("follow-carrier-rts", 6), ("follow-sync-rts", 7), ("follow-lmi-carr-rts", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgDteCtsOutput.setStatus('mandatory')
mfrapCfgFrTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 2, 5))
mfrapCfgFrAddrLen = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("twobytes", 1), ("threebytes", 2), ("fourbytes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrAddrLen.setStatus('mandatory')
mfrapCfgFrCrcMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("passthru", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrCrcMode.setStatus('mandatory')
mfrapCfgFrLmiType = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("annexd", 1), ("annexa", 2), ("type1", 3), ("autosense", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrLmiType.setStatus('mandatory')
mfrapCfgFrLmiInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrLmiInactivityTimeout.setStatus('mandatory')
mfrapCfgFrLmiKeepaliveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrLmiKeepaliveTimeout.setStatus('mandatory')
mfrapCfgFrAddrResMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("arp", 2), ("inarp", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrAddrResMode.setStatus('mandatory')
mfrapCfgFrAddrResDlcis = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("single", 1), ("multiple", 2), ("t1multi", 3), ("dtemulti", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrAddrResDlcis.setStatus('mandatory')
mfrapCfgFrAddrResInarpTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrAddrResInarpTimer.setStatus('mandatory')
mfrapCfgFrLmiFullStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrLmiFullStatus.setStatus('mandatory')
mfrapCfgVnipTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 2, 6))
mfrapCfgVnipMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("dte", 2), ("t1", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgVnipMode.setStatus('mandatory')
mfrapCfgVnipInitTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgVnipInitTimer.setStatus('mandatory')
mfrapCfgVnipKeepAliveTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgVnipKeepAliveTimer.setStatus('mandatory')
mfrapCfgVnipInactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgVnipInactivityTimer.setStatus('mandatory')
mfrapCfgVnipTransitDelayFrequency = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgVnipTransitDelayFrequency.setStatus('mandatory')
mfrapCfgTransitDelayTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 2, 6, 20), )
if mibBuilder.loadTexts: mfrapCfgTransitDelayTable.setStatus('mandatory')
mfrapCfgTransitDelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 2, 6, 20, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapCfgTransitDelayInterface"), (0, "MFRAP-MIB", "mfrapCfgTransitDelayDlciValue"))
if mibBuilder.loadTexts: mfrapCfgTransitDelayEntry.setStatus('mandatory')
mfrapCfgTransitDelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 6, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgTransitDelayInterface.setStatus('mandatory')
mfrapCfgTransitDelayDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 6, 20, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgTransitDelayDlciValue.setStatus('mandatory')
mfrapCfgTransitDelayNumHops = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 6, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgTransitDelayNumHops.setStatus('mandatory')
mfrapCfgTransitDelayRcvSummaryCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 6, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-rsc", 1), ("disable-rsc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgTransitDelayRcvSummaryCancel.setStatus('mandatory')
mfrapCfgTransitDelayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 6, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgTransitDelayThreshold.setStatus('mandatory')
mfrapCfgTDDeleteTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 2, 6, 21), )
if mibBuilder.loadTexts: mfrapCfgTDDeleteTable.setStatus('mandatory')
mfrapCfgTDDeleteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 2, 6, 21, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapCfgTDDeleteInterface"))
if mibBuilder.loadTexts: mfrapCfgTDDeleteEntry.setStatus('mandatory')
mfrapCfgTDDeleteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 6, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2))))
if mibBuilder.loadTexts: mfrapCfgTDDeleteInterface.setStatus('mandatory')
mfrapCfgTDDeleteDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 6, 21, 1, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapCfgTDDeleteDlciValue.setStatus('mandatory')
mfrapCfgTransitDelayTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 6, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapCfgTransitDelayTableClear.setStatus('mandatory')
mfrapCfgFrPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 2, 7))
mfrapCfgFrPerfDlciNamesTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 1), )
if mibBuilder.loadTexts: mfrapCfgFrPerfDlciNamesTable.setStatus('mandatory')
mfrapCfgFrPerfDlciNamesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 1, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapCfgFrPerfDlciNamesDlciValue"))
if mibBuilder.loadTexts: mfrapCfgFrPerfDlciNamesEntry.setStatus('mandatory')
mfrapCfgFrPerfDlciNamesDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrPerfDlciNamesDlciValue.setStatus('mandatory')
mfrapCfgFrPerfDlciNamesDlciName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrPerfDlciNamesDlciName.setStatus('mandatory')
mfrapCfgFrPerfDlciNamesCirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrPerfDlciNamesCirValue.setStatus('mandatory')
mfrapCfgFrPerfDlciNamesCirType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cir-acquired-from-lmi", 1), ("cir-configured-by-user", 2), ("cir-is-datarate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgFrPerfDlciNamesCirType.setStatus('mandatory')
mfrapCfgFrPerfDlciNamesUtilThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrPerfDlciNamesUtilThreshold.setStatus('mandatory')
mfrapCfgFrPerfDlciNamesEirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrPerfDlciNamesEirValue.setStatus('mandatory')
mfrapCfgFrPerfDlciNamesDelete = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapCfgFrPerfDlciNamesDelete.setStatus('mandatory')
mfrapCfgFrPerfTimers = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 3))
mfrapCfgFrPerfTimersSTInterval = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrPerfTimersSTInterval.setStatus('mandatory')
mfrapCfgFrPerfTimersLTInterval = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrPerfTimersLTInterval.setStatus('mandatory')
mfrapCfgFrPerfUserProtocolsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 4), )
if mibBuilder.loadTexts: mfrapCfgFrPerfUserProtocolsTable.setStatus('mandatory')
mfrapCfgFrPerfUserProtocolsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 4, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapCfgFrPerfUserProtocolsIndex"))
if mibBuilder.loadTexts: mfrapCfgFrPerfUserProtocolsEntry.setStatus('mandatory')
mfrapCfgFrPerfUserProtocolsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgFrPerfUserProtocolsIndex.setStatus('mandatory')
mfrapCfgFrPerfUserProtocolsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrPerfUserProtocolsPortNum.setStatus('mandatory')
mfrapCfgFrPerfLTDlciFilterTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 5), )
if mibBuilder.loadTexts: mfrapCfgFrPerfLTDlciFilterTable.setStatus('mandatory')
mfrapCfgFrPerfLTDlciFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 5, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapCfgFrPerfLTDlciFilterIndex"))
if mibBuilder.loadTexts: mfrapCfgFrPerfLTDlciFilterEntry.setStatus('mandatory')
mfrapCfgFrPerfLTDlciFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgFrPerfLTDlciFilterIndex.setStatus('mandatory')
mfrapCfgFrPerfLTDlciFilterDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrPerfLTDlciFilterDlciNum.setStatus('mandatory')
mfrapCfgFrPerfLTProtocolFilterTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 6), )
if mibBuilder.loadTexts: mfrapCfgFrPerfLTProtocolFilterTable.setStatus('mandatory')
mfrapCfgFrPerfLTProtocolFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 6, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapCfgFrPerfLTProtocolFilterIndex"))
if mibBuilder.loadTexts: mfrapCfgFrPerfLTProtocolFilterEntry.setStatus('mandatory')
mfrapCfgFrPerfLTProtocolFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgFrPerfLTProtocolFilterIndex.setStatus('mandatory')
mfrapCfgFrPerfLTProtocolFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 21, 22, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, -1))).clone(namedValues=NamedValues(("ip-tx-bc", 1), ("ip-rx-bc", 2), ("tcp-ip-tx-bc", 3), ("tcp-ip-rx-bc", 4), ("ftp-tcp-ip-tx-bc", 5), ("ftp-tcp-ip-rx-bc", 6), ("telnet-tcp-ip-tx-bc", 7), ("telnet-tcp-ip-rx-bc", 8), ("smtp-tcp-ip-tx-bc", 9), ("smtp-tcp-ip-rx-bc", 10), ("http-tcp-ip-tx-bc", 13), ("http-tcp-ip-rx-bc", 14), ("netbios-ssn-tcp-ip-tx-bc", 15), ("netbios-ssn-tcp-ip-rx-bc", 16), ("udp-ip-tx-bc", 21), ("udp-ip-rx-bc", 22), ("tftp-udp-ip-tx-bc", 29), ("tftp-udp-ip-rx-bc", 30), ("netbios-dgm-udp-ip-tx-bc", 33), ("netbios-dgm-udp-ip-rx-bc", 34), ("snmp-udp-ip-tx-bc", 35), ("snmp-udp-ip-rx-bc", 36), ("snmptrap-udp-ip-tx-bc", 37), ("snmptrap-udp-ip-rx-bc", 38), ("rip-udp-ip-tx-bc", 39), ("rip-udp-ip-rx-bc", 40), ("icmp-ip-tx-bc", 41), ("icmp-ip-rx-bc", 42), ("echorep-icmp-ip-tx-bc", 43), ("echorep-icmp-ip-rx-bc", 44), ("dest-unr-icmp-ip-tx-bc", 45), ("dest-unr-icmp-ip-rx-bc", 46), ("src-quench-icmp-ip-tx-bc", 47), ("src-quench-icmp-ip-rx-bc", 48), ("redirect-icmp-ip-tx-bc", 49), ("redirect-icmp-ip-rx-bc", 50), ("echoreq-icmp-ip-tx-bc", 51), ("echoreq-icmp-ip-rx-bc", 52), ("time-excd-icmp-ip-tx-bc", 53), ("time-excd-icmp-ip-rx-bc", 54), ("param-prob-icmp-ip-tx-bc", 55), ("param-prob-icmp-ip-rx-bc", 56), ("timestamp-req-icmp-ip-tx-bc", 57), ("timestamp-req-icmp-ip-rx-bc", 58), ("timestamp-rep-icmp-ip-tx-bc", 59), ("timestamp-rep-icmp-ip-rx-bc", 60), ("addr-mask-req-icmp-ip-tx-bc", 61), ("addr-mask-req-icmp-ip-rx-bc", 62), ("addr-mask-rep-icmp-ip-tx-bc", 63), ("addr-mask-rep-icmp-ip-rx-bc", 64), ("pkt-too-big-icmp-ip-tx-bc", 65), ("pkt-too-big-icmp-ip-rx-bc", 66), ("gp-mem-query-icmp-ip-tx-bc", 67), ("gp-mem-query-icmp-ip-rx-bc", 68), ("gp-mem-report-icmp-ip-tx-bc", 69), ("gp-mem-report-icmp-ip-rx-bc", 70), ("gp-mem-reduct-icmp-ip-tx-bc", 71), ("gp-mem-reduct-icmp-ip-rx-bc", 72), ("ospf-ip-tx-bc", 73), ("ospf-ip-rx-bc", 74), ("other-ip-tx-bc", 75), ("other-ip-rx-bc", 76), ("ipx-tx-bc", 77), ("ipx-rx-bc", 78), ("spx-ipx-tx-bc", 79), ("spx-ipx-rx-bc", 80), ("ncp-ipx-tx-bc", 81), ("ncp-ipx-rx-bc", 82), ("sap-ipx-tx-bc", 83), ("sap-ipx-rx-bc", 84), ("rip-ipx-tx-bc", 85), ("rip-ipx-rx-bc", 86), ("netbios-ipx-tx-bc", 87), ("netbios-ipx-rx-bc", 88), ("other-ipx-tx-bc", 89), ("other-ipx-rx-bc", 90), ("arp-tx-bc", 91), ("arp-rx-bc", 92), ("arp-req-tx-bc", 93), ("arp-req-rx-bc", 94), ("arp-rep-tx-bc", 95), ("arp-rep-rx-bc", 96), ("rarp-req-tx-bc", 97), ("rarp-req-rx-bc", 98), ("rarp-rep-tx-bc", 99), ("rarp-rep-rx-bc", 100), ("inarp-req-tx-bc", 101), ("inarp-req-rx-bc", 102), ("inarp-rep-tx-bc", 103), ("inarp-rep-rx-bc", 104), ("sna-tx-bc", 105), ("sna-rx-bc", 106), ("sna-subarea-tx-bc", 107), ("sna-subarea-rx-bc", 108), ("sna-periph-tx-bc", 109), ("sna-periph-rx-bc", 110), ("sna-appn-tx-bc", 111), ("sna-appn-rx-bc", 112), ("sna-netbios-tx-bc", 113), ("sna-netbios-rx-bc", 114), ("cisco-tx-bc", 115), ("cisco-rx-bc", 116), ("other-tx-bc", 117), ("other-rx-bc", 118), ("user-defined-1-tx-bc", 119), ("user-defined-1-rx-bc", 120), ("user-defined-2-tx-bc", 121), ("user-defined-2-rx-bc", 122), ("user-defined-3-tx-bc", 123), ("user-defined-3-rx-bc", 124), ("user-defined-4-tx-bc", 125), ("user-defined-4-rx-bc", 126), ("thru-byte-tx-bc", 127), ("thru-byte-rx-bc", 128), ("thru-frame-tx-bc", 129), ("thru-frame-rx-bc", 130), ("thru-fecn-tx-bc", 131), ("thru-fecn-rx-bc", 132), ("thru-becn-tx-bc", 133), ("thru-becn-rx-bc", 134), ("thru-de-tx-bc", 135), ("thru-de-rx-bc", 136), ("cir-percent-range1-tx-bc", 137), ("cir-percent-range1-rx-bc", 138), ("cir-percent-range2-tx-bc", 139), ("cir-percent-range2-rx-bc", 140), ("cir-percent-range3-tx-bc", 141), ("cir-percent-range3-rx-bc", 142), ("cir-percent-range4-tx-bc", 143), ("cir-percent-range4-rx-bc", 144), ("cir-percent-range5-tx-bc", 145), ("cir-percent-range5-rx-bc", 146), ("cir-percent-range6-tx-bc", 147), ("cir-percent-range6-rx-bc", 148), ("cir-percent-range7-tx-bc", 149), ("cir-percent-range7-rx-bc", 150), ("cir-percent-range8-tx-bc", 151), ("cir-percent-range8-rx-bc", 152), ("lmi-tx-bc", 153), ("lmi-rx-bc", 154), ("lmi-livo-enq-tx-bc", 155), ("lmi-livo-enq-rx-bc", 156), ("lmi-livo-stat-tx-bc", 157), ("lmi-livo-stat-rx-bc", 158), ("lmi-full-enq-tx-bc", 159), ("lmi-full-enq-rx-bc", 160), ("lmi-full-stat-tx-bc", 161), ("lmi-full-stat-rx-bc", 162), ("lmi-other-tx-bc", 163), ("lmi-other-rx-bc", 164), ("total-uptime", 165), ("total-downtime", 166), ("igrp-tx-bc", 167), ("igrp-rx-bc", 168), ("vnip-tx-bc", 169), ("vnip-rx-bc", 170), ("annex-g-tx-bc", 171), ("annex-g-rx-bc", 172), ("delete-entry", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrPerfLTProtocolFilterProtocol.setStatus('mandatory')
mfrapCfgFrPerfDlciDefaultUtilThreshold = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrPerfDlciDefaultUtilThreshold.setStatus('mandatory')
mfrapCfgFrPerfDlciUtilDuration = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgFrPerfDlciUtilDuration.setStatus('mandatory')
mfrapCfgFrPerfDlciNamesTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear-table", 1), ("clear-table-keep-stats", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapCfgFrPerfDlciNamesTableClear.setStatus('mandatory')
mfrapCfgFrPerfUserProtocolsTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapCfgFrPerfUserProtocolsTableClear.setStatus('mandatory')
mfrapCfgFrPerfLTDlciFilterTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapCfgFrPerfLTDlciFilterTableClear.setStatus('mandatory')
mfrapCfgFrPerfLTProtocolFilterTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapCfgFrPerfLTProtocolFilterTableClear.setStatus('mandatory')
mfrapCfgFrPerfUnprovDlcisDelete = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 7, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete-unprov", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapCfgFrPerfUnprovDlcisDelete.setStatus('mandatory')
mfrapCfgSecurityTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 2, 8))
mfrapCfgTelnetCliLcdPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgTelnetCliLcdPassword.setStatus('mandatory')
mfrapCfgTftpPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgTftpPassword.setStatus('mandatory')
mfrapCfgCliPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgCliPassword.setStatus('mandatory')
mfrapCfgLcdPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgLcdPassword.setStatus('mandatory')
mfrapCfgGetCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgGetCommunityString.setStatus('mandatory')
mfrapCfgSetCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgSetCommunityString.setStatus('mandatory')
mfrapCfgLcdPswdEnable = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-lcd-pswd", 1), ("disable-lcd-pswd", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgLcdPswdEnable.setStatus('mandatory')
mfrapCfgLcdPswdTimeout = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 8, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgLcdPswdTimeout.setStatus('mandatory')
mfrapCfgConnectionTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 2, 10))
mfrapCfgCurrentConnTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 1), )
if mibBuilder.loadTexts: mfrapCfgCurrentConnTable.setStatus('mandatory')
mfrapCfgCurrentConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 1, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapCfgCurrentConnDestPort"), (0, "MFRAP-MIB", "mfrapCfgCurrentConnDestDs0"))
if mibBuilder.loadTexts: mfrapCfgCurrentConnEntry.setStatus('mandatory')
mfrapCfgCurrentConnDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("port1-t1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgCurrentConnDestPort.setStatus('mandatory')
mfrapCfgCurrentConnDestDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgCurrentConnDestDs0.setStatus('mandatory')
mfrapCfgCurrentConnSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 33))).clone(namedValues=NamedValues(("port2-dandi", 2), ("port3-dte", 3), ("not-connected", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgCurrentConnSrcPort.setStatus('mandatory')
mfrapCfgCurrentConnSrcDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 40))).clone(namedValues=NamedValues(("ds0-01", 1), ("ds0-02", 2), ("ds0-03", 3), ("ds0-04", 4), ("ds0-05", 5), ("ds0-06", 6), ("ds0-07", 7), ("ds0-08", 8), ("ds0-09", 9), ("ds0-10", 10), ("ds0-11", 11), ("ds0-12", 12), ("ds0-13", 13), ("ds0-14", 14), ("ds0-15", 15), ("ds0-16", 16), ("ds0-17", 17), ("ds0-18", 18), ("ds0-19", 19), ("ds0-20", 20), ("ds0-21", 21), ("ds0-22", 22), ("ds0-23", 23), ("ds0-24", 24), ("no-connection", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgCurrentConnSrcDs0.setStatus('mandatory')
mfrapCfgCurrentConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 33))).clone(namedValues=NamedValues(("voice", 1), ("transparent", 2), ("frame-relay", 3), ("not-connected", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgCurrentConnType.setStatus('mandatory')
mfrapCfgEditConnections = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 2))
mfrapCfgEditConnCopyCurrtoEdit = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("copy-current", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapCfgEditConnCopyCurrtoEdit.setStatus('mandatory')
mfrapCfgEditClearEdit = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-edit", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapCfgEditClearEdit.setStatus('mandatory')
mfrapCfgEditConnTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 2, 3), )
if mibBuilder.loadTexts: mfrapCfgEditConnTable.setStatus('mandatory')
mfrapCfgEditConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 2, 3, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapCfgEditConnDestPort"), (0, "MFRAP-MIB", "mfrapCfgEditConnDestDs0"))
if mibBuilder.loadTexts: mfrapCfgEditConnEntry.setStatus('mandatory')
mfrapCfgEditConnDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("port1-t1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgEditConnDestPort.setStatus('mandatory')
mfrapCfgEditConnDestDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgEditConnDestDs0.setStatus('mandatory')
mfrapCfgEditConnSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 33))).clone(namedValues=NamedValues(("port2-dandi", 2), ("port3-dte", 3), ("not-connected", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgEditConnSrcPort.setStatus('mandatory')
mfrapCfgEditConnSrcDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 40))).clone(namedValues=NamedValues(("ds0-01", 1), ("ds0-02", 2), ("ds0-03", 3), ("ds0-04", 4), ("ds0-05", 5), ("ds0-06", 6), ("ds0-07", 7), ("ds0-08", 8), ("ds0-09", 9), ("ds0-10", 10), ("ds0-11", 11), ("ds0-12", 12), ("ds0-13", 13), ("ds0-14", 14), ("ds0-15", 15), ("ds0-16", 16), ("ds0-17", 17), ("ds0-18", 18), ("ds0-19", 19), ("ds0-20", 20), ("ds0-21", 21), ("ds0-22", 22), ("ds0-23", 23), ("ds0-24", 24), ("no-connection", 40)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgEditConnSrcDs0.setStatus('mandatory')
mfrapCfgEditConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 33))).clone(namedValues=NamedValues(("voice", 1), ("transparent", 2), ("frame-relay", 3), ("not-connected", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgEditConnType.setStatus('mandatory')
mfrapCfgEditDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disconnect", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapCfgEditDisconnect.setStatus('mandatory')
mfrapCfgEditLastSetStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8))).clone(namedValues=NamedValues(("set-valid", 1), ("invalid-dte-bandwidth", 2), ("bandwidth-conflict", 3), ("ds0s-not-ascending", 4), ("illegal-value", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgEditLastSetStatus.setStatus('mandatory')
mfrapCfgEditConnStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 99))).clone(namedValues=NamedValues(("connections-valid", 1), ("invalid-dte-bandwidth", 2), ("ds0s-not-ascending", 4), ("incomplete-entry", 5), ("inconsistent-edit-buff", 6), ("bad-connection-type", 7), ("no-current-connections", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgEditConnStatus.setStatus('mandatory')
mfrapCfgConnUpdateCmd = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 10, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("config-and-connect", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapCfgConnUpdateCmd.setStatus('mandatory')
mfrapCfgDandiTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 2, 11))
mfrapCfgDandiFraming = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("d4", 1), ("esf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgDandiFraming.setStatus('mandatory')
mfrapCfgDandiLineEncoding = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgDandiLineEncoding.setStatus('mandatory')
mfrapCfgLock = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapCfgLock.setStatus('mandatory')
mfrapCfgLockID = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgLockID.setStatus('mandatory')
mfrapCfgID = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapCfgID.setStatus('mandatory')
mfrapCfgStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("in-progress", 1), ("success", 2), ("datarate-density-conflict", 3), ("bandwidth-allocation-error", 4), ("general-error", 5), ("timeout", 6), ("aborted-by-user", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgStatus.setStatus('mandatory')
mfrapCfgUnlock = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("un-lock", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapCfgUnlock.setStatus('mandatory')
mfrapCfgUpdate = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapCfgUpdate.setStatus('mandatory')
mfrapDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 3))
mfrapDiagUnitTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 3, 1))
mfrapDiagUnitLocLoop = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-loopback-mode", 1), ("disable-loopback-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapDiagUnitLocLoop.setStatus('mandatory')
mfrapDiagUnitReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset-unit", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapDiagUnitReset.setStatus('mandatory')
mfrapDiagUnitTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDiagUnitTimeRemaining.setStatus('mandatory')
mfrapDiagT1Table = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 3, 2))
mfrapDiagT1LocLineLpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("line-lpbk-disable", 1), ("line-lpbk-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapDiagT1LocLineLpbk.setStatus('mandatory')
mfrapDiagT1LocPylLpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pyl-lpbk-disable", 1), ("pyl-lpbk-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapDiagT1LocPylLpbk.setStatus('mandatory')
mfrapDiagT1LocAggrLpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aggr-lpbk-disable", 1), ("aggr-lpbk-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapDiagT1LocAggrLpbk.setStatus('mandatory')
mfrapDiagT1RmtLpbkStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-remote-lpbks", 1), ("csu-lpbk-from-remote", 2), ("dsu-lpbk-from-remote", 3), ("pyl-lpbk-from-remote", 4), ("csu-lpbk-sent-to-remote", 5), ("dsu-lpbk-sent-to-remote", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDiagT1RmtLpbkStatus.setStatus('mandatory')
mfrapDiagT1RmtLpbkCmd = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rmt-csu-lpbk-loopup", 1), ("rmt-csu-lpbk-loopdown", 2), ("rmt-dsu-lpbk-loopup", 3), ("rmt-dsu-lpbk-loopdown", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapDiagT1RmtLpbkCmd.setStatus('mandatory')
mfrapDiagT1TimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 2, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDiagT1TimeRemaining.setStatus('mandatory')
mfrapDiagDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 3, 3))
mfrapDiagDteSigRTS = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rts-signal-on", 1), ("rts-signal-off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDiagDteSigRTS.setStatus('mandatory')
mfrapDiagDteSigDTR = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtr-signal-on", 1), ("dtr-signal-off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDiagDteSigDTR.setStatus('mandatory')
mfrapDiagDteLclLpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-loopback-mode", 1), ("disable-loopback-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapDiagDteLclLpbk.setStatus('mandatory')
mfrapDiagDteV54Lpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopback-enable", 1), ("loopback-disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDiagDteV54Lpbk.setStatus('mandatory')
mfrapDiagDteRmtV54Lpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("transmit-code-enable", 3), ("transmit-code-disable", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapDiagDteRmtV54Lpbk.setStatus('mandatory')
mfrapDiagDteTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 3, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDiagDteTimeRemaining.setStatus('mandatory')
mfrapDiagBertTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 3, 5))
mfrapDiagBertState = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("start-bert-test-t1", 1), ("start-bert-test-dte", 2), ("stop-bert-test", 3), ("inject-error-bert-test", 4), ("clear-error-bert-test", 5), ("start-bert-test-dandi", 6), ("start-bert-test-fractional-t1", 7)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapDiagBertState.setStatus('mandatory')
mfrapDiagBertStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bert-off", 1), ("bert-out-of-sync", 2), ("bert-in-sync", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDiagBertStatus.setStatus('mandatory')
mfrapDiagBertErrors = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDiagBertErrors.setStatus('mandatory')
mfrapDiagBertErrSec = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDiagBertErrSec.setStatus('mandatory')
mfrapDiagBertTimeElaps = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 5, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDiagBertTimeElaps.setStatus('mandatory')
mfrapDiagBertResyncs = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDiagBertResyncs.setStatus('mandatory')
mfrapDiagBertPattern = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("five11-pattern", 1), ("qrss", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapDiagBertPattern.setStatus('mandatory')
mfrapDiagVnipTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 3, 6), )
if mibBuilder.loadTexts: mfrapDiagVnipTable.setStatus('mandatory')
mfrapDiagVnipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 3, 6, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapDiagVnipInterface"), (0, "MFRAP-MIB", "mfrapDiagVnipIndex"))
if mibBuilder.loadTexts: mfrapDiagVnipEntry.setStatus('mandatory')
mfrapDiagVnipInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapDiagVnipInterface.setStatus('mandatory')
mfrapDiagVnipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 3, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapDiagVnipIndex.setStatus('mandatory')
mfrapDiagVnipDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDiagVnipDlci.setStatus('mandatory')
mfrapDiagVnipIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 3, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDiagVnipIpAddr.setStatus('mandatory')
mfrapDiagVLOOP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start-test", 1), ("stop-test", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapDiagVLOOP.setStatus('mandatory')
mfrapDiagVBERT = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapDiagVBERT.setStatus('mandatory')
mfrapDiagVBERTRate = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8000, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapDiagVBERTRate.setStatus('mandatory')
mfrapDiagVBERTSize = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapDiagVBERTSize.setStatus('mandatory')
mfrapDiagVBERTPktPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 3, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("zero-percent", 0), ("twentyFive-percent", 1), ("fifty-percent", 2), ("seventyFive-percent", 3), ("oneHundred-percent", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapDiagVBERTPktPercent.setStatus('mandatory')
mfrapDiagVBERTTestPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 3, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapDiagVBERTTestPeriod.setStatus('mandatory')
mfrapDiagDandiTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 3, 8))
mfrapDiagDandiLocLineLpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("line-lpbk-disable", 1), ("line-lpbk-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapDiagDandiLocLineLpbk.setStatus('mandatory')
mfrapDiagDandiLocPylLpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pyl-lpbk-disable", 1), ("pyl-lpbk-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapDiagDandiLocPylLpbk.setStatus('mandatory')
mfrapDiagDandiTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 3, 8, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDiagDandiTimeRemaining.setStatus('mandatory')
mfrapStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 4))
mfrapStatusT1Table = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 4, 1))
mfrapStatusT1Mode = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-connections", 1), ("active", 2), ("test", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusT1Mode.setStatus('mandatory')
mfrapStatusT1Status = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t1-frame-sync-okay", 1), ("t1-frame-sync-with-errors", 2), ("signal-present-without-frame-sync", 3), ("signal-not-present", 4), ("not-applicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusT1Status.setStatus('mandatory')
mfrapStatusT1Alarms = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-alarms", 1), ("red-alarm-declared", 2), ("yellow-alarm-detected", 3), ("unframed-all-ones-detected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusT1Alarms.setStatus('mandatory')
mfrapStatusDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 4, 7))
mfrapStatusDteMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-connections", 1), ("active", 2), ("test", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusDteMode.setStatus('mandatory')
mfrapStatusDteRts = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusDteRts.setStatus('mandatory')
mfrapStatusDteDtr = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusDteDtr.setStatus('mandatory')
mfrapStatusDteDcd = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusDteDcd.setStatus('mandatory')
mfrapStatusDteDsr = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusDteDsr.setStatus('mandatory')
mfrapStatusDteCts = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusDteCts.setStatus('mandatory')
mfrapStatusDandiTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 4, 15))
mfrapStatusDandiMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-connections", 1), ("active", 2), ("test", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusDandiMode.setStatus('mandatory')
mfrapStatusDandiStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t1-frame-sync-okay", 1), ("t1-frame-sync-with-errors", 2), ("signal-present-without-frame-sync", 3), ("signal-not-present", 4), ("not-applicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusDandiStatus.setStatus('mandatory')
mfrapStatusDandiAlarms = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 15, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-alarms", 1), ("red-alarm-declared", 2), ("yellow-alarm-detected", 3), ("unframed-all-ones-detected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusDandiAlarms.setStatus('mandatory')
mfrapStatusLedTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 4, 4))
mfrapStatusDteModeLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("offLED-DTE-inactive", 1), ("greenLED-normal", 2), ("yellowLED-test-mode", 3), ("redLED-no-active-WAN-connection", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusDteModeLED.setStatus('mandatory')
mfrapStatusDteStatusLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offLED-inactive", 1), ("greenLED-active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusDteStatusLED.setStatus('mandatory')
mfrapStatusDteTxLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offLED-inactive", 1), ("greenLED-tx-data-transmitting", 2), ("yellowLED-disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusDteTxLED.setStatus('mandatory')
mfrapStatusDteRxLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offLED-inactive", 1), ("greenLED-rx-data-receiving", 2), ("yellowLED-disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusDteRxLED.setStatus('mandatory')
mfrapStatusT1ModeLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("greenLED-normal", 2), ("yellowLED-test-mode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusT1ModeLED.setStatus('mandatory')
mfrapStatusT1StatusLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("offLED-T1-no-signal", 1), ("greenLED-normal", 2), ("yellowLED-remote-alarm", 3), ("redLED-red-alarm", 4), ("blinking-redLED-no-carrier-red-alarm", 5), ("blinking-red-greenLED-transient-error", 6), ("blinking-red-yellowLED-AIS", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusT1StatusLED.setStatus('mandatory')
mfrapStatusAllLEDs = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusAllLEDs.setStatus('mandatory')
mfrapStatusDandiModeLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("greenLED-normal", 2), ("yellowLED-test-mode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusDandiModeLED.setStatus('mandatory')
mfrapStatusDandiStatusLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("offLED-Dandi-no-signal", 1), ("greenLED-normal", 2), ("yellowLED-remote-alarm", 3), ("redLED-red-alarm", 4), ("blinking-redLED-no-carrier-red-alarm", 5), ("blinking-red-greenLED-transient-error", 6), ("blinking-red-yellowLED-AIS", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusDandiStatusLED.setStatus('mandatory')
mfrapVnipTopologyTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 4, 2), )
if mibBuilder.loadTexts: mfrapVnipTopologyTable.setStatus('mandatory')
mfrapVnipTopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapVnipTopologyInterface"), (0, "MFRAP-MIB", "mfrapVnipTopologyIndex"))
if mibBuilder.loadTexts: mfrapVnipTopologyEntry.setStatus('mandatory')
mfrapVnipTopologyInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopologyInterface.setStatus('mandatory')
mfrapVnipTopologyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopologyIndex.setStatus('mandatory')
mfrapVnipTopologyDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopologyDlci.setStatus('mandatory')
mfrapVnipTopologyIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopologyIpAddr.setStatus('mandatory')
mfrapVnipTopologyNumHops = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopologyNumHops.setStatus('mandatory')
mfrapVnipTopologyLocalDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopologyLocalDlci.setStatus('mandatory')
mfrapVnipTopoTDNumSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopoTDNumSamples.setStatus('mandatory')
mfrapVnipTopoTDAvgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopoTDAvgDelay.setStatus('mandatory')
mfrapVnipTopoTDMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopoTDMaxDelay.setStatus('mandatory')
mfrapVnipTopoTDMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopoTDMinDelay.setStatus('mandatory')
mfrapVnipTopoTDLastDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopoTDLastDelay.setStatus('mandatory')
mfrapVnipTopoVLOOPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopback-enable", 1), ("loopback-disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopoVLOOPStatus.setStatus('mandatory')
mfrapVnipTopoVBERTStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("testing", 2), ("test-failed", 3), ("test-completed", 4), ("in-test", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopoVBERTStatus.setStatus('mandatory')
mfrapVnipTopoVBertTxDESetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopoVBertTxDESetFrames.setStatus('mandatory')
mfrapVnipTopoVBertRxDESetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopoVBertRxDESetFrames.setStatus('mandatory')
mfrapVnipTopoVBertTxDEClrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopoVBertTxDEClrFrames.setStatus('mandatory')
mfrapVnipTopoVBertRxDEClrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopoVBertRxDEClrFrames.setStatus('mandatory')
mfrapVnipTopoVBertTransitDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopoVBertTransitDelayMax.setStatus('mandatory')
mfrapVnipTopoVBertTransitDelayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopoVBertTransitDelayAvg.setStatus('mandatory')
mfrapVnipTopoVBertTimeElapse = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 23), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopoVBertTimeElapse.setStatus('mandatory')
mfrapVnipTopoVBertPerUtilCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopoVBertPerUtilCIR.setStatus('mandatory')
mfrapVnipTopoVBertPerUtilEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapVnipTopoVBertPerUtilEIR.setStatus('mandatory')
mfrapVnipTransitDelayClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-transit-delay", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapVnipTransitDelayClear.setStatus('mandatory')
mfrapLmiSourcing = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("initializing", 1), ("passthrough", 2), ("user-dte", 3), ("user-t1", 4), ("network-dte", 5), ("network-t1", 6), ("disabled", 7), ("both-ports", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapLmiSourcing.setStatus('mandatory')
mfrapStatusMgmtTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 4, 3))
mfrapStatusMgmtChannel = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("slip", 2), ("private-dlci", 3), ("piggyback-dlci", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusMgmtChannel.setStatus('mandatory')
mfrapStatusMgmtInterface = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("comm", 1), ("dte", 2), ("t1", 3), ("dte-and-t1", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusMgmtInterface.setStatus('mandatory')
mfrapStatusMgmtInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusMgmtInterfaceStatus.setStatus('mandatory')
mfrapStatusMgmtDefaultDLCINo = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusMgmtDefaultDLCINo.setStatus('mandatory')
mfrapStatusMgmtDefaultDLCIStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("na", 1), ("dlci-active", 2), ("dlci-inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusMgmtDefaultDLCIStatus.setStatus('mandatory')
mfrapStatusLmiAutosense = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("searching", 2), ("learned-annex-d", 3), ("learned-annex-a", 4), ("learned-type1", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusLmiAutosense.setStatus('mandatory')
mfrapStatusNestTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 4, 14))
mfrapStatusNestFanOne = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fan-ok", 1), ("fan-alarm", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusNestFanOne.setStatus('mandatory')
mfrapStatusNestFanTwo = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fan-ok", 1), ("fan-alarm", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusNestFanTwo.setStatus('mandatory')
mfrapStatusNestPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("power-supply-ok", 1), ("power-supply-alarm", 2), ("power-supply-na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusNestPowerSupply.setStatus('mandatory')
mfrapStatusNestSlotId = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 4, 14, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapStatusNestSlotId.setStatus('mandatory')
mfrapPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 5))
mfrapPerfPhysicalIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 5, 1))
mfrapPerfT1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 1), )
if mibBuilder.loadTexts: mfrapPerfT1CurrentTable.setStatus('mandatory')
mfrapT1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 1, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapT1CurrentIndex"))
if mibBuilder.loadTexts: mfrapT1CurrentEntry.setStatus('mandatory')
mfrapT1CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1CurrentIndex.setStatus('mandatory')
mfrapT1CurrentCrc6Events = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1CurrentCrc6Events.setStatus('mandatory')
mfrapT1CurrentOofEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1CurrentOofEvents.setStatus('mandatory')
mfrapT1CurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1CurrentESs.setStatus('mandatory')
mfrapT1CurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1CurrentSESs.setStatus('mandatory')
mfrapT1CurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1CurrentSEFSs.setStatus('mandatory')
mfrapT1CurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1CurrentUASs.setStatus('mandatory')
mfrapT1CurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1CurrentCSSs.setStatus('mandatory')
mfrapT1CurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1CurrentBESs.setStatus('mandatory')
mfrapT1CurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1CurrentLCVs.setStatus('mandatory')
mfrapPerfT1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 2), )
if mibBuilder.loadTexts: mfrapPerfT1IntervalTable.setStatus('mandatory')
mfrapT1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 2, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapT1IntervalIndex"), (0, "MFRAP-MIB", "mfrapT1IntervalNumber"))
if mibBuilder.loadTexts: mfrapT1IntervalEntry.setStatus('mandatory')
mfrapT1IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1IntervalIndex.setStatus('mandatory')
mfrapT1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1IntervalNumber.setStatus('mandatory')
mfrapT1IntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1IntervalESs.setStatus('mandatory')
mfrapT1IntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1IntervalSESs.setStatus('mandatory')
mfrapT1IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1IntervalSEFSs.setStatus('mandatory')
mfrapT1IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1IntervalUASs.setStatus('mandatory')
mfrapT1IntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1IntervalCSSs.setStatus('mandatory')
mfrapT1IntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1IntervalBESs.setStatus('mandatory')
mfrapT1IntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1IntervalLCVs.setStatus('mandatory')
mfrapPerfT1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 3), )
if mibBuilder.loadTexts: mfrapPerfT1TotalTable.setStatus('mandatory')
mfrapT1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 3, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapT1TotalIndex"))
if mibBuilder.loadTexts: mfrapT1TotalEntry.setStatus('mandatory')
mfrapT1TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1TotalIndex.setStatus('mandatory')
mfrapT1TotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1TotalESs.setStatus('mandatory')
mfrapT1TotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1TotalSESs.setStatus('mandatory')
mfrapT1TotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1TotalSEFSs.setStatus('mandatory')
mfrapT1TotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1TotalUASs.setStatus('mandatory')
mfrapT1TotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1TotalCSSs.setStatus('mandatory')
mfrapT1TotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1TotalBESs.setStatus('mandatory')
mfrapT1TotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapT1TotalLCVs.setStatus('mandatory')
mfrapT1PerfCmdTypeTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 4))
mfrapT1PerfFreezeState = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freeze-reg", 1), ("unfreeze-reg", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapT1PerfFreezeState.setStatus('mandatory')
mfrapT1PerfClearEvents = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-events", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapT1PerfClearEvents.setStatus('mandatory')
mfrapT1PerfClearAll = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-all", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapT1PerfClearAll.setStatus('mandatory')
mfrapPerfDandiCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 5), )
if mibBuilder.loadTexts: mfrapPerfDandiCurrentTable.setStatus('mandatory')
mfrapDandiCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 5, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapDandiCurrentIndex"))
if mibBuilder.loadTexts: mfrapDandiCurrentEntry.setStatus('mandatory')
mfrapDandiCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("dandi-port1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiCurrentIndex.setStatus('mandatory')
mfrapDandiCurrentCrc6Events = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiCurrentCrc6Events.setStatus('mandatory')
mfrapDandiCurrentOofEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiCurrentOofEvents.setStatus('mandatory')
mfrapDandiCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiCurrentESs.setStatus('mandatory')
mfrapDandiCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiCurrentSESs.setStatus('mandatory')
mfrapDandiCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiCurrentSEFSs.setStatus('mandatory')
mfrapDandiCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiCurrentUASs.setStatus('mandatory')
mfrapDandiCurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 5, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiCurrentCSSs.setStatus('mandatory')
mfrapDandiCurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 5, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiCurrentBESs.setStatus('mandatory')
mfrapDandiCurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 5, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiCurrentLCVs.setStatus('mandatory')
mfrapPerfDandiIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 6), )
if mibBuilder.loadTexts: mfrapPerfDandiIntervalTable.setStatus('mandatory')
mfrapDandiIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 6, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapDandiIntervalIndex"), (0, "MFRAP-MIB", "mfrapDandiIntervalNumber"))
if mibBuilder.loadTexts: mfrapDandiIntervalEntry.setStatus('mandatory')
mfrapDandiIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("dandi-port1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiIntervalIndex.setStatus('mandatory')
mfrapDandiIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiIntervalNumber.setStatus('mandatory')
mfrapDandiIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiIntervalESs.setStatus('mandatory')
mfrapDandiIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiIntervalSESs.setStatus('mandatory')
mfrapDandiIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiIntervalSEFSs.setStatus('mandatory')
mfrapDandiIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiIntervalUASs.setStatus('mandatory')
mfrapDandiIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiIntervalCSSs.setStatus('mandatory')
mfrapDandiIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 6, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiIntervalBESs.setStatus('mandatory')
mfrapDandiIntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 6, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiIntervalLCVs.setStatus('mandatory')
mfrapPerfDandiTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 7), )
if mibBuilder.loadTexts: mfrapPerfDandiTotalTable.setStatus('mandatory')
mfrapDandiTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 7, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapDandiTotalIndex"))
if mibBuilder.loadTexts: mfrapDandiTotalEntry.setStatus('mandatory')
mfrapDandiTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("dandi-port1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiTotalIndex.setStatus('mandatory')
mfrapDandiTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiTotalESs.setStatus('mandatory')
mfrapDandiTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiTotalSESs.setStatus('mandatory')
mfrapDandiTotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 7, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiTotalSEFSs.setStatus('mandatory')
mfrapDandiTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 7, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiTotalUASs.setStatus('mandatory')
mfrapDandiTotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 7, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiTotalCSSs.setStatus('mandatory')
mfrapDandiTotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 7, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiTotalBESs.setStatus('mandatory')
mfrapDandiTotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 7, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDandiTotalLCVs.setStatus('mandatory')
mfrapDandiPerfCmdTypeTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 8))
mfrapDandiPerfFreezeState = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freeze-reg", 1), ("unfreeze-reg", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfrapDandiPerfFreezeState.setStatus('mandatory')
mfrapDandiPerfClearEvents = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-events", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapDandiPerfClearEvents.setStatus('mandatory')
mfrapDandiPerfClearAll = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-all", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapDandiPerfClearAll.setStatus('mandatory')
mfrapPerfMgmtIp = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 5, 2))
mfrapPerfMgmtIpIFStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 1))
mfrapPerfMgmtIpIFInOctets = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpIFInOctets.setStatus('mandatory')
mfrapPerfMgmtIpIFInErrors = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpIFInErrors.setStatus('mandatory')
mfrapPerfMgmtIpIFOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpIFOutOctets.setStatus('mandatory')
mfrapPerfMgmtIpIFOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpIFOperStatus.setStatus('mandatory')
mfrapPerfMgmtIpIPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 2))
mfrapPerfMgmtIpIPInRcv = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpIPInRcv.setStatus('mandatory')
mfrapPerfMgmtIpIPInHdrErr = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpIPInHdrErr.setStatus('mandatory')
mfrapPerfMgmtIpIPInAddrErr = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpIPInAddrErr.setStatus('mandatory')
mfrapPerfMgmtIpIPInProtUnk = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpIPInProtUnk.setStatus('mandatory')
mfrapPerfMgmtIpIPInDscrd = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpIPInDscrd.setStatus('mandatory')
mfrapPerfMgmtIpIPInDlvrs = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpIPInDlvrs.setStatus('mandatory')
mfrapPerfMgmtIpIPOutRqst = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpIPOutRqst.setStatus('mandatory')
mfrapPerfMgmtIpIPOutDscrd = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpIPOutDscrd.setStatus('mandatory')
mfrapPerfMgmtIpIPOutNoRt = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpIPOutNoRt.setStatus('mandatory')
mfrapPerfMgmtIpICMPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 3))
mfrapPerfMgmtIpICMPInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpICMPInMsgs.setStatus('mandatory')
mfrapPerfMgmtIpICMPInErrors = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpICMPInErrors.setStatus('mandatory')
mfrapPerfMgmtIpICMPInDestUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpICMPInDestUnreachs.setStatus('mandatory')
mfrapPerfMgmtIpICMPInTimeExcds = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpICMPInTimeExcds.setStatus('mandatory')
mfrapPerfMgmtIpICMPInParmProbs = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpICMPInParmProbs.setStatus('mandatory')
mfrapPerfMgmtIpICMPInRedirects = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpICMPInRedirects.setStatus('mandatory')
mfrapPerfMgmtIpICMPInEchos = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpICMPInEchos.setStatus('mandatory')
mfrapPerfMgmtIpICMPInEchoReps = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpICMPInEchoReps.setStatus('mandatory')
mfrapPerfMgmtIpICMPOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpICMPOutMsgs.setStatus('mandatory')
mfrapPerfMgmtIpICMPOutErrors = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpICMPOutErrors.setStatus('mandatory')
mfrapPerfMgmtIpICMPOutDestUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpICMPOutDestUnreachs.setStatus('mandatory')
mfrapPerfMgmtIpICMPOutParmProbs = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpICMPOutParmProbs.setStatus('mandatory')
mfrapPerfMgmtIpICMPOutRedirects = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpICMPOutRedirects.setStatus('mandatory')
mfrapPerfMgmtIpICMPOutEchos = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpICMPOutEchos.setStatus('mandatory')
mfrapPerfMgmtIpICMPOutEchoReps = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpICMPOutEchoReps.setStatus('mandatory')
mfrapPerfMgmtIpUDPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 4))
mfrapPerfMgmtIpUDPInDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpUDPInDatagrams.setStatus('mandatory')
mfrapPerfMgmtIpUDPOutDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpUDPOutDatagrams.setStatus('mandatory')
mfrapPerfMgmtIpUDPNoPorts = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpUDPNoPorts.setStatus('mandatory')
mfrapPerfMgmtIpTCPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 5))
mfrapPerfMgmtIpTCPActiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpTCPActiveOpens.setStatus('mandatory')
mfrapPerfMgmtIpTCPPassiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpTCPPassiveOpens.setStatus('mandatory')
mfrapPerfMgmtIpTCPAttemptFails = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpTCPAttemptFails.setStatus('mandatory')
mfrapPerfMgmtIpTCPCurrEstab = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpTCPCurrEstab.setStatus('mandatory')
mfrapPerfMgmtIpTCPInSegs = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpTCPInSegs.setStatus('mandatory')
mfrapPerfMgmtIpTCPOutSegs = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfMgmtIpTCPOutSegs.setStatus('mandatory')
mfrapPerfThruput = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 5, 3))
mfrapPerfThruputPerIntfTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 1), )
if mibBuilder.loadTexts: mfrapPerfThruputPerIntfTable.setStatus('mandatory')
mfrapPerfThruputPerIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 1, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfThruputPerIntfIndex"))
if mibBuilder.loadTexts: mfrapPerfThruputPerIntfEntry.setStatus('mandatory')
mfrapPerfThruputPerIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("t1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerIntfIndex.setStatus('mandatory')
mfrapPerfThruputPerIntfRxByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerIntfRxByteCnt.setStatus('mandatory')
mfrapPerfThruputPerIntfTxByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerIntfTxByteCnt.setStatus('mandatory')
mfrapPerfThruputPerIntfRxFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerIntfRxFrameCnt.setStatus('mandatory')
mfrapPerfThruputPerIntfTxFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerIntfTxFrameCnt.setStatus('mandatory')
mfrapPerfThruputPerIntfRxCrcErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerIntfRxCrcErrCnt.setStatus('mandatory')
mfrapPerfThruputPerIntfRxAbortCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerIntfRxAbortCnt.setStatus('mandatory')
class Index(Integer32):
    pass

mfrapPerfThruputPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2), )
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciTable.setStatus('mandatory')
mfrapPerfThruputPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfThruputPerDlciIndex"), (0, "MFRAP-MIB", "mfrapPerfThruputPerDlciValue"))
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciEntry.setStatus('mandatory')
mfrapPerfThruputPerDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciIndex.setStatus('mandatory')
mfrapPerfThruputPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciValue.setStatus('mandatory')
mfrapPerfThruputPerDlciCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciCreateTime.setStatus('mandatory')
mfrapPerfThruputPerDlciChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciChangeTime.setStatus('mandatory')
mfrapPerfThruputPerDlciRxByte = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciRxByte.setStatus('mandatory')
mfrapPerfThruputPerDlciTxByte = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciTxByte.setStatus('mandatory')
mfrapPerfThruputPerDlciRxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciRxFrame.setStatus('mandatory')
mfrapPerfThruputPerDlciTxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciTxFrame.setStatus('mandatory')
mfrapPerfThruputPerDlciRxFecn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciRxFecn.setStatus('mandatory')
mfrapPerfThruputPerDlciRxBecn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciRxBecn.setStatus('mandatory')
mfrapPerfThruputPerDlciRxDe = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciRxDe.setStatus('mandatory')
mfrapPerfThruputPerDlciTxDe = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciTxDe.setStatus('mandatory')
mfrapPerfThruputPerDlciRxThruput = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciRxThruput.setStatus('mandatory')
mfrapPerfThruputPerDlciTxThruput = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciTxThruput.setStatus('mandatory')
mfrapPerfThruputPerDlciCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciCIR.setStatus('mandatory')
mfrapPerfThruputPerDlciCirType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cir-acquired-from-lmi", 1), ("cir-configured-by-user", 2), ("cir-is-dte-datarate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciCirType.setStatus('mandatory')
mfrapPerfThruputPerDlciUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciUptime.setStatus('mandatory')
mfrapPerfThruputPerDlciDowntime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciDowntime.setStatus('mandatory')
mfrapPerfThruputPerDlciPvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pvc-active", 1), ("pvc-inactive", 2), ("pvc-unprovisioned", 3), ("pvc-not-in-lmi", 4), ("pvc-lmi-timeout", 5), ("pvc-undetermined", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciPvcState.setStatus('mandatory')
mfrapPerfThruputPerDlciOutageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciOutageCount.setStatus('mandatory')
mfrapPerfThruputPerDlciAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciAvailability.setStatus('mandatory')
mfrapPerfThruputPerDlciMTBSO = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciMTBSO.setStatus('mandatory')
mfrapPerfThruputPerDlciMTTSR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciMTTSR.setStatus('mandatory')
mfrapPerfThruputPerDlciEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("encap-na", 1), ("encap-1490", 2), ("encap-cisco", 3), ("encap-annex-g", 4), ("encap-other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciEncapType.setStatus('mandatory')
mfrapPerfThruputPerDlciRxUtilizationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("over-threshold", 2), ("alarm", 3), ("alarm-under-threshold", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciRxUtilizationStatus.setStatus('mandatory')
mfrapPerfThruputPerDlciTxUtilizationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("over-threshold", 2), ("alarm", 3), ("alarm-under-threshold", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciTxUtilizationStatus.setStatus('mandatory')
mfrapPerfThruputPerDlciEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputPerDlciEIR.setStatus('mandatory')
mfrapPerfThruputCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 3))
mfrapPerfThruputCmdClearDteStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapPerfThruputCmdClearDteStats.setStatus('mandatory')
mfrapPerfThruputCmdClearT1Stats = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapPerfThruputCmdClearT1Stats.setStatus('mandatory')
mfrapPerfThruputCmdClearAllIntfStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapPerfThruputCmdClearAllIntfStats.setStatus('mandatory')
mfrapPerfThruputCmdClearDlciStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapPerfThruputCmdClearDlciStats.setStatus('mandatory')
mfrapPerfThruputCmdClearAllStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapPerfThruputCmdClearAllStats.setStatus('mandatory')
mfrapPerfThruputCmdRemoveStsDlci = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 3, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapPerfThruputCmdRemoveStsDlci.setStatus('mandatory')
mfrapPerfThruputCmdReplaceDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 3, 7), )
if mibBuilder.loadTexts: mfrapPerfThruputCmdReplaceDlciTable.setStatus('mandatory')
mfrapPerfThruputCmdReplaceDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 3, 7, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfThruputCmdReplaceDlciValue"))
if mibBuilder.loadTexts: mfrapPerfThruputCmdReplaceDlciEntry.setStatus('mandatory')
mfrapPerfThruputCmdReplaceDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfThruputCmdReplaceDlciValue.setStatus('mandatory')
mfrapPerfThruputCmdReplaceDlciNewValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 3, 7, 1, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapPerfThruputCmdReplaceDlciNewValue.setStatus('mandatory')
mfrapPerfThruputCmdAvailabilityStsDlciReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 3, 8), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapPerfThruputCmdAvailabilityStsDlciReset.setStatus('mandatory')
mfrapPerfThruputCmdAvailabilityStsDlciResetAll = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 3, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapPerfThruputCmdAvailabilityStsDlciResetAll.setStatus('mandatory')
mfrapPerfThruputCmdCountsStsDlciReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 3, 10), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapPerfThruputCmdCountsStsDlciReset.setStatus('mandatory')
mfrapPerfThruputCmdCountsStsDlciResetAll = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 3, 11), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapPerfThruputCmdCountsStsDlciResetAll.setStatus('mandatory')
mfrapPerfThruputCmdAllStsDlciReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 3, 12), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapPerfThruputCmdAllStsDlciReset.setStatus('mandatory')
mfrapPerfThruputCmdAllStsDlciResetAll = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 3, 3, 13), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapPerfThruputCmdAllStsDlciResetAll.setStatus('mandatory')
mfrapPerfNetworkShortTerm = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 5, 4))
mfrapPerfNetwProtoPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1), )
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciTable.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfNetwProtoPerDlciInterval"), (0, "MFRAP-MIB", "mfrapPerfNetwProtoPerDlciValue"))
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciEntry.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciInterval.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciValue.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciRxTotal.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciTxTotal.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciRxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciRxIp.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciTxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciTxIp.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciRxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciRxIpx.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciTxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciTxIpx.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciRxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciRxSna.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciTxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciTxSna.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciRxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciRxArp.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciTxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciTxArp.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciRxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciRxCisco.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciTxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciTxCisco.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciRxOther.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciTxOther.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciRxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciRxVnip.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciTxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciTxVnip.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciRxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciRxAnnexG.setStatus('mandatory')
mfrapPerfNetwProtoPerDlciTxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoPerDlciTxAnnexG.setStatus('mandatory')
mfrapPerfNetwProtoTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2), )
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalTable.setStatus('mandatory')
mfrapPerfNetwProtoTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfNetwProtoTotalInterval"))
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalEntry.setStatus('mandatory')
mfrapPerfNetwProtoTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalInterval.setStatus('mandatory')
mfrapPerfNetwProtoTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalRxTotal.setStatus('mandatory')
mfrapPerfNetwProtoTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalTxTotal.setStatus('mandatory')
mfrapPerfNetwProtoTotalRxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalRxIp.setStatus('mandatory')
mfrapPerfNetwProtoTotalTxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalTxIp.setStatus('mandatory')
mfrapPerfNetwProtoTotalRxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalRxIpx.setStatus('mandatory')
mfrapPerfNetwProtoTotalTxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalTxIpx.setStatus('mandatory')
mfrapPerfNetwProtoTotalRxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalRxSna.setStatus('mandatory')
mfrapPerfNetwProtoTotalTxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalTxSna.setStatus('mandatory')
mfrapPerfNetwProtoTotalRxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalRxArp.setStatus('mandatory')
mfrapPerfNetwProtoTotalTxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalTxArp.setStatus('mandatory')
mfrapPerfNetwProtoTotalRxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalRxCisco.setStatus('mandatory')
mfrapPerfNetwProtoTotalTxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalTxCisco.setStatus('mandatory')
mfrapPerfNetwProtoTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalRxOther.setStatus('mandatory')
mfrapPerfNetwProtoTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalTxOther.setStatus('mandatory')
mfrapPerfNetwProtoTotalRxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalRxVnip.setStatus('mandatory')
mfrapPerfNetwProtoTotalTxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalTxVnip.setStatus('mandatory')
mfrapPerfNetwProtoTotalRxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalRxAnnexG.setStatus('mandatory')
mfrapPerfNetwProtoTotalTxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwProtoTotalTxAnnexG.setStatus('mandatory')
mfrapPerfIpPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 3), )
if mibBuilder.loadTexts: mfrapPerfIpPerDlciTable.setStatus('mandatory')
mfrapPerfIpPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 3, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfIpPerDlciInterval"), (0, "MFRAP-MIB", "mfrapPerfIpPerDlciValue"))
if mibBuilder.loadTexts: mfrapPerfIpPerDlciEntry.setStatus('mandatory')
mfrapPerfIpPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpPerDlciInterval.setStatus('mandatory')
mfrapPerfIpPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpPerDlciValue.setStatus('mandatory')
mfrapPerfIpPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpPerDlciRxTotal.setStatus('mandatory')
mfrapPerfIpPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpPerDlciTxTotal.setStatus('mandatory')
mfrapPerfIpPerDlciRxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpPerDlciRxTcp.setStatus('mandatory')
mfrapPerfIpPerDlciTxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpPerDlciTxTcp.setStatus('mandatory')
mfrapPerfIpPerDlciRxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpPerDlciRxUdp.setStatus('mandatory')
mfrapPerfIpPerDlciTxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpPerDlciTxUdp.setStatus('mandatory')
mfrapPerfIpPerDlciRxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpPerDlciRxIcmp.setStatus('mandatory')
mfrapPerfIpPerDlciTxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpPerDlciTxIcmp.setStatus('mandatory')
mfrapPerfIpPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpPerDlciRxOther.setStatus('mandatory')
mfrapPerfIpPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpPerDlciTxOther.setStatus('mandatory')
mfrapPerfIpPerDlciRxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpPerDlciRxIgrp.setStatus('mandatory')
mfrapPerfIpPerDlciTxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpPerDlciTxIgrp.setStatus('mandatory')
mfrapPerfIpTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 4), )
if mibBuilder.loadTexts: mfrapPerfIpTotalTable.setStatus('mandatory')
mfrapPerfIpTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 4, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfIpTotalInterval"))
if mibBuilder.loadTexts: mfrapPerfIpTotalEntry.setStatus('mandatory')
mfrapPerfIpTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpTotalInterval.setStatus('mandatory')
mfrapPerfIpTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpTotalRxTotal.setStatus('mandatory')
mfrapPerfIpTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpTotalTxTotal.setStatus('mandatory')
mfrapPerfIpTotalRxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpTotalRxTcp.setStatus('mandatory')
mfrapPerfIpTotalTxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpTotalTxTcp.setStatus('mandatory')
mfrapPerfIpTotalRxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpTotalRxUdp.setStatus('mandatory')
mfrapPerfIpTotalTxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpTotalTxUdp.setStatus('mandatory')
mfrapPerfIpTotalRxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpTotalRxIcmp.setStatus('mandatory')
mfrapPerfIpTotalTxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpTotalTxIcmp.setStatus('mandatory')
mfrapPerfIpTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpTotalRxOther.setStatus('mandatory')
mfrapPerfIpTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpTotalTxOther.setStatus('mandatory')
mfrapPerfIpTotalRxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpTotalRxIgrp.setStatus('mandatory')
mfrapPerfIpTotalTxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpTotalTxIgrp.setStatus('mandatory')
mfrapPerfIcmpPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5), )
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciTable.setStatus('mandatory')
mfrapPerfIcmpPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfIcmpPerDlciInterval"), (0, "MFRAP-MIB", "mfrapPerfIcmpPerDlciValue"))
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciEntry.setStatus('mandatory')
mfrapPerfIcmpPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciInterval.setStatus('mandatory')
mfrapPerfIcmpPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciValue.setStatus('mandatory')
mfrapPerfIcmpPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciRxTotal.setStatus('mandatory')
mfrapPerfIcmpPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciTxTotal.setStatus('mandatory')
mfrapPerfIcmpPerDlciRxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciRxEchoRep.setStatus('mandatory')
mfrapPerfIcmpPerDlciTxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciTxEchoRep.setStatus('mandatory')
mfrapPerfIcmpPerDlciRxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciRxDestUnr.setStatus('mandatory')
mfrapPerfIcmpPerDlciTxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciTxDestUnr.setStatus('mandatory')
mfrapPerfIcmpPerDlciRxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciRxSrcQuench.setStatus('mandatory')
mfrapPerfIcmpPerDlciTxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciTxSrcQuench.setStatus('mandatory')
mfrapPerfIcmpPerDlciRxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciRxRedirect.setStatus('mandatory')
mfrapPerfIcmpPerDlciTxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciTxRedirect.setStatus('mandatory')
mfrapPerfIcmpPerDlciRxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciRxEchoReq.setStatus('mandatory')
mfrapPerfIcmpPerDlciTxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciTxEchoReq.setStatus('mandatory')
mfrapPerfIcmpPerDlciRxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciRxTimeExcd.setStatus('mandatory')
mfrapPerfIcmpPerDlciTxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciTxTimeExcd.setStatus('mandatory')
mfrapPerfIcmpPerDlciRxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciRxParamProb.setStatus('mandatory')
mfrapPerfIcmpPerDlciTxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciTxParamProb.setStatus('mandatory')
mfrapPerfIcmpPerDlciRxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciRxTimestpReq.setStatus('mandatory')
mfrapPerfIcmpPerDlciTxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciTxTimestpReq.setStatus('mandatory')
mfrapPerfIcmpPerDlciRxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciRxTimestpRep.setStatus('mandatory')
mfrapPerfIcmpPerDlciTxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciTxTimestpRep.setStatus('mandatory')
mfrapPerfIcmpPerDlciRxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciRxAddrMaskReq.setStatus('mandatory')
mfrapPerfIcmpPerDlciTxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciTxAddrMaskReq.setStatus('mandatory')
mfrapPerfIcmpPerDlciRxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciRxAddrMaskRep.setStatus('mandatory')
mfrapPerfIcmpPerDlciTxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciTxAddrMaskRep.setStatus('mandatory')
mfrapPerfIcmpPerDlciRxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciRxPktTooBig.setStatus('mandatory')
mfrapPerfIcmpPerDlciTxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciTxPktTooBig.setStatus('mandatory')
mfrapPerfIcmpPerDlciRxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciRxGmQuery.setStatus('mandatory')
mfrapPerfIcmpPerDlciTxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciTxGmQuery.setStatus('mandatory')
mfrapPerfIcmpPerDlciRxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciRxGmReport.setStatus('mandatory')
mfrapPerfIcmpPerDlciTxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciTxGmReport.setStatus('mandatory')
mfrapPerfIcmpPerDlciRxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciRxGmReduct.setStatus('mandatory')
mfrapPerfIcmpPerDlciTxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpPerDlciTxGmReduct.setStatus('mandatory')
mfrapPerfIcmpTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6), )
if mibBuilder.loadTexts: mfrapPerfIcmpTotalTable.setStatus('mandatory')
mfrapPerfIcmpTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfIcmpTotalInterval"))
if mibBuilder.loadTexts: mfrapPerfIcmpTotalEntry.setStatus('mandatory')
mfrapPerfIcmpTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalInterval.setStatus('mandatory')
mfrapPerfIcmpTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalRxTotal.setStatus('mandatory')
mfrapPerfIcmpTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalTxTotal.setStatus('mandatory')
mfrapPerfIcmpTotalRxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalRxEchoRep.setStatus('mandatory')
mfrapPerfIcmpTotalTxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalTxEchoRep.setStatus('mandatory')
mfrapPerfIcmpTotalRxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalRxDestUnr.setStatus('mandatory')
mfrapPerfIcmpTotalTxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalTxDestUnr.setStatus('mandatory')
mfrapPerfIcmpTotalRxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalRxSrcQuench.setStatus('mandatory')
mfrapPerfIcmpTotalTxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalTxSrcQuench.setStatus('mandatory')
mfrapPerfIcmpTotalRxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalRxRedirect.setStatus('mandatory')
mfrapPerfIcmpTotalTxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalTxRedirect.setStatus('mandatory')
mfrapPerfIcmpTotalRxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalRxEchoReq.setStatus('mandatory')
mfrapPerfIcmpTotalTxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalTxEchoReq.setStatus('mandatory')
mfrapPerfIcmpTotalRxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalRxTimeExcd.setStatus('mandatory')
mfrapPerfIcmpTotalTxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalTxTimeExcd.setStatus('mandatory')
mfrapPerfIcmpTotalRxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalRxParamProb.setStatus('mandatory')
mfrapPerfIcmpTotalTxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalTxParamProb.setStatus('mandatory')
mfrapPerfIcmpTotalRxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalRxTimestpReq.setStatus('mandatory')
mfrapPerfIcmpTotalTxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalTxTimestpReq.setStatus('mandatory')
mfrapPerfIcmpTotalRxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalRxTimestpRep.setStatus('mandatory')
mfrapPerfIcmpTotalTxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalTxTimestpRep.setStatus('mandatory')
mfrapPerfIcmpTotalRxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalRxAddrMaskReq.setStatus('mandatory')
mfrapPerfIcmpTotalTxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalTxAddrMaskReq.setStatus('mandatory')
mfrapPerfIcmpTotalRxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalRxAddrMaskRep.setStatus('mandatory')
mfrapPerfIcmpTotalTxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalTxAddrMaskRep.setStatus('mandatory')
mfrapPerfIcmpTotalRxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalRxPktTooBig.setStatus('mandatory')
mfrapPerfIcmpTotalTxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalTxPktTooBig.setStatus('mandatory')
mfrapPerfIcmpTotalRxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalRxGmQuery.setStatus('mandatory')
mfrapPerfIcmpTotalTxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalTxGmQuery.setStatus('mandatory')
mfrapPerfIcmpTotalRxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalRxGmReport.setStatus('mandatory')
mfrapPerfIcmpTotalTxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalTxGmReport.setStatus('mandatory')
mfrapPerfIcmpTotalRxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalRxGmReduct.setStatus('mandatory')
mfrapPerfIcmpTotalTxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 6, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIcmpTotalTxGmReduct.setStatus('mandatory')
mfrapPerfApplicationPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7), )
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciTable.setStatus('mandatory')
mfrapPerfApplicationPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfApplicationPerDlciInterval"), (0, "MFRAP-MIB", "mfrapPerfApplicationPerDlciValue"))
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciEntry.setStatus('mandatory')
mfrapPerfApplicationPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciInterval.setStatus('mandatory')
mfrapPerfApplicationPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciValue.setStatus('mandatory')
mfrapPerfApplicationPerDlciRxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciRxSnmp.setStatus('mandatory')
mfrapPerfApplicationPerDlciTxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciTxSnmp.setStatus('mandatory')
mfrapPerfApplicationPerDlciRxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciRxSnmpTrap.setStatus('mandatory')
mfrapPerfApplicationPerDlciTxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciTxSnmpTrap.setStatus('mandatory')
mfrapPerfApplicationPerDlciRxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciRxHttp.setStatus('mandatory')
mfrapPerfApplicationPerDlciTxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciTxHttp.setStatus('mandatory')
mfrapPerfApplicationPerDlciRxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciRxTelnet.setStatus('mandatory')
mfrapPerfApplicationPerDlciTxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciTxTelnet.setStatus('mandatory')
mfrapPerfApplicationPerDlciRxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciRxSmtp.setStatus('mandatory')
mfrapPerfApplicationPerDlciTxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciTxSmtp.setStatus('mandatory')
mfrapPerfApplicationPerDlciRxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciRxFtp.setStatus('mandatory')
mfrapPerfApplicationPerDlciTxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciTxFtp.setStatus('mandatory')
mfrapPerfApplicationPerDlciRxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciRxTftp.setStatus('mandatory')
mfrapPerfApplicationPerDlciTxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciTxTftp.setStatus('mandatory')
mfrapPerfApplicationPerDlciRxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciRxCustom1.setStatus('mandatory')
mfrapPerfApplicationPerDlciTxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciTxCustom1.setStatus('mandatory')
mfrapPerfApplicationPerDlciRxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciRxCustom2.setStatus('mandatory')
mfrapPerfApplicationPerDlciTxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciTxCustom2.setStatus('mandatory')
mfrapPerfApplicationPerDlciRxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciRxCustom3.setStatus('mandatory')
mfrapPerfApplicationPerDlciTxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciTxCustom3.setStatus('mandatory')
mfrapPerfApplicationPerDlciRxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciRxCustom4.setStatus('mandatory')
mfrapPerfApplicationPerDlciTxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 7, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationPerDlciTxCustom4.setStatus('mandatory')
mfrapPerfApplicationTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8), )
if mibBuilder.loadTexts: mfrapPerfApplicationTotalTable.setStatus('mandatory')
mfrapPerfApplicationTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfApplicationTotalInterval"))
if mibBuilder.loadTexts: mfrapPerfApplicationTotalEntry.setStatus('mandatory')
mfrapPerfApplicationTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalInterval.setStatus('mandatory')
mfrapPerfApplicationTotalRxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalRxSnmp.setStatus('mandatory')
mfrapPerfApplicationTotalTxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalTxSnmp.setStatus('mandatory')
mfrapPerfApplicationTotalRxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalRxSnmpTrap.setStatus('mandatory')
mfrapPerfApplicationTotalTxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalTxSnmpTrap.setStatus('mandatory')
mfrapPerfApplicationTotalRxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalRxHttp.setStatus('mandatory')
mfrapPerfApplicationTotalTxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalTxHttp.setStatus('mandatory')
mfrapPerfApplicationTotalRxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalRxTelnet.setStatus('mandatory')
mfrapPerfApplicationTotalTxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalTxTelnet.setStatus('mandatory')
mfrapPerfApplicationTotalRxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalRxSmtp.setStatus('mandatory')
mfrapPerfApplicationTotalTxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalTxSmtp.setStatus('mandatory')
mfrapPerfApplicationTotalRxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalRxFtp.setStatus('mandatory')
mfrapPerfApplicationTotalTxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalTxFtp.setStatus('mandatory')
mfrapPerfApplicationTotalRxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalRxTftp.setStatus('mandatory')
mfrapPerfApplicationTotalTxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalTxTftp.setStatus('mandatory')
mfrapPerfApplicationTotalRxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalRxCustom1.setStatus('mandatory')
mfrapPerfApplicationTotalTxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalTxCustom1.setStatus('mandatory')
mfrapPerfApplicationTotalRxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalRxCustom2.setStatus('mandatory')
mfrapPerfApplicationTotalTxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalTxCustom2.setStatus('mandatory')
mfrapPerfApplicationTotalRxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalRxCustom3.setStatus('mandatory')
mfrapPerfApplicationTotalTxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalTxCustom3.setStatus('mandatory')
mfrapPerfApplicationTotalRxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalRxCustom4.setStatus('mandatory')
mfrapPerfApplicationTotalTxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 8, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfApplicationTotalTxCustom4.setStatus('mandatory')
mfrapPerfRoutingPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 9), )
if mibBuilder.loadTexts: mfrapPerfRoutingPerDlciTable.setStatus('mandatory')
mfrapPerfRoutingPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 9, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfRoutingPerDlciInterval"), (0, "MFRAP-MIB", "mfrapPerfRoutingPerDlciValue"))
if mibBuilder.loadTexts: mfrapPerfRoutingPerDlciEntry.setStatus('mandatory')
mfrapPerfRoutingPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfRoutingPerDlciInterval.setStatus('mandatory')
mfrapPerfRoutingPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfRoutingPerDlciValue.setStatus('mandatory')
mfrapPerfRoutingPerDlciRxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfRoutingPerDlciRxOspf.setStatus('mandatory')
mfrapPerfRoutingPerDlciTxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfRoutingPerDlciTxOspf.setStatus('mandatory')
mfrapPerfRoutingPerDlciRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfRoutingPerDlciRxRip.setStatus('mandatory')
mfrapPerfRoutingPerDlciTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfRoutingPerDlciTxRip.setStatus('mandatory')
mfrapPerfRoutingPerDlciRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfRoutingPerDlciRxNetbios.setStatus('mandatory')
mfrapPerfRoutingPerDlciTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfRoutingPerDlciTxNetbios.setStatus('mandatory')
mfrapPerfRoutingTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 10), )
if mibBuilder.loadTexts: mfrapPerfRoutingTotalTable.setStatus('mandatory')
mfrapPerfRoutingTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 10, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfRoutingTotalInterval"))
if mibBuilder.loadTexts: mfrapPerfRoutingTotalEntry.setStatus('mandatory')
mfrapPerfRoutingTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfRoutingTotalInterval.setStatus('mandatory')
mfrapPerfRoutingTotalRxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfRoutingTotalRxOspf.setStatus('mandatory')
mfrapPerfRoutingTotalTxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfRoutingTotalTxOspf.setStatus('mandatory')
mfrapPerfRoutingTotalRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfRoutingTotalRxRip.setStatus('mandatory')
mfrapPerfRoutingTotalTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfRoutingTotalTxRip.setStatus('mandatory')
mfrapPerfRoutingTotalRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfRoutingTotalRxNetbios.setStatus('mandatory')
mfrapPerfRoutingTotalTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfRoutingTotalTxNetbios.setStatus('mandatory')
mfrapPerfIpxPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 11), )
if mibBuilder.loadTexts: mfrapPerfIpxPerDlciTable.setStatus('mandatory')
mfrapPerfIpxPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 11, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfIpxPerDlciInterval"), (0, "MFRAP-MIB", "mfrapPerfIpxPerDlciValue"))
if mibBuilder.loadTexts: mfrapPerfIpxPerDlciEntry.setStatus('mandatory')
mfrapPerfIpxPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxPerDlciInterval.setStatus('mandatory')
mfrapPerfIpxPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxPerDlciValue.setStatus('mandatory')
mfrapPerfIpxPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxPerDlciRxTotal.setStatus('mandatory')
mfrapPerfIpxPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxPerDlciTxTotal.setStatus('mandatory')
mfrapPerfIpxPerDlciRxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxPerDlciRxSpx.setStatus('mandatory')
mfrapPerfIpxPerDlciTxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxPerDlciTxSpx.setStatus('mandatory')
mfrapPerfIpxPerDlciRxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxPerDlciRxNcp.setStatus('mandatory')
mfrapPerfIpxPerDlciTxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxPerDlciTxNcp.setStatus('mandatory')
mfrapPerfIpxPerDlciRxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxPerDlciRxSap.setStatus('mandatory')
mfrapPerfIpxPerDlciTxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxPerDlciTxSap.setStatus('mandatory')
mfrapPerfIpxPerDlciRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxPerDlciRxRip.setStatus('mandatory')
mfrapPerfIpxPerDlciTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxPerDlciTxRip.setStatus('mandatory')
mfrapPerfIpxPerDlciRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxPerDlciRxNetbios.setStatus('mandatory')
mfrapPerfIpxPerDlciTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 11, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxPerDlciTxNetbios.setStatus('mandatory')
mfrapPerfIpxPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxPerDlciRxOther.setStatus('mandatory')
mfrapPerfIpxPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxPerDlciTxOther.setStatus('mandatory')
mfrapPerfIpxTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 12), )
if mibBuilder.loadTexts: mfrapPerfIpxTotalTable.setStatus('mandatory')
mfrapPerfIpxTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 12, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfIpxTotalInterval"))
if mibBuilder.loadTexts: mfrapPerfIpxTotalEntry.setStatus('mandatory')
mfrapPerfIpxTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxTotalInterval.setStatus('mandatory')
mfrapPerfIpxTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxTotalRxTotal.setStatus('mandatory')
mfrapPerfIpxTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxTotalTxTotal.setStatus('mandatory')
mfrapPerfIpxTotalRxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxTotalRxSpx.setStatus('mandatory')
mfrapPerfIpxTotalTxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxTotalTxSpx.setStatus('mandatory')
mfrapPerfIpxTotalRxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxTotalRxNcp.setStatus('mandatory')
mfrapPerfIpxTotalTxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxTotalTxNcp.setStatus('mandatory')
mfrapPerfIpxTotalRxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxTotalRxSap.setStatus('mandatory')
mfrapPerfIpxTotalTxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxTotalTxSap.setStatus('mandatory')
mfrapPerfIpxTotalRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxTotalRxRip.setStatus('mandatory')
mfrapPerfIpxTotalTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxTotalTxRip.setStatus('mandatory')
mfrapPerfIpxTotalRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxTotalRxNetbios.setStatus('mandatory')
mfrapPerfIpxTotalTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxTotalTxNetbios.setStatus('mandatory')
mfrapPerfIpxTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxTotalRxOther.setStatus('mandatory')
mfrapPerfIpxTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfIpxTotalTxOther.setStatus('mandatory')
mfrapPerfSnaPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 13), )
if mibBuilder.loadTexts: mfrapPerfSnaPerDlciTable.setStatus('mandatory')
mfrapPerfSnaPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 13, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfSnaPerDlciInterval"), (0, "MFRAP-MIB", "mfrapPerfSnaPerDlciValue"))
if mibBuilder.loadTexts: mfrapPerfSnaPerDlciEntry.setStatus('mandatory')
mfrapPerfSnaPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaPerDlciInterval.setStatus('mandatory')
mfrapPerfSnaPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaPerDlciValue.setStatus('mandatory')
mfrapPerfSnaPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaPerDlciRxTotal.setStatus('mandatory')
mfrapPerfSnaPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaPerDlciTxTotal.setStatus('mandatory')
mfrapPerfSnaPerDlciRxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaPerDlciRxSubarea.setStatus('mandatory')
mfrapPerfSnaPerDlciTxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaPerDlciTxSubarea.setStatus('mandatory')
mfrapPerfSnaPerDlciRxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaPerDlciRxPeriph.setStatus('mandatory')
mfrapPerfSnaPerDlciTxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaPerDlciTxPeriph.setStatus('mandatory')
mfrapPerfSnaPerDlciRxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaPerDlciRxAppn.setStatus('mandatory')
mfrapPerfSnaPerDlciTxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaPerDlciTxAppn.setStatus('mandatory')
mfrapPerfSnaPerDlciRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaPerDlciRxNetbios.setStatus('mandatory')
mfrapPerfSnaPerDlciTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaPerDlciTxNetbios.setStatus('mandatory')
mfrapPerfSnaPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaPerDlciRxOther.setStatus('mandatory')
mfrapPerfSnaPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaPerDlciTxOther.setStatus('mandatory')
mfrapPerfSnaTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 14), )
if mibBuilder.loadTexts: mfrapPerfSnaTotalTable.setStatus('mandatory')
mfrapPerfSnaTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 14, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfSnaTotalInterval"))
if mibBuilder.loadTexts: mfrapPerfSnaTotalEntry.setStatus('mandatory')
mfrapPerfSnaTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaTotalInterval.setStatus('mandatory')
mfrapPerfSnaTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaTotalRxTotal.setStatus('mandatory')
mfrapPerfSnaTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaTotalTxTotal.setStatus('mandatory')
mfrapPerfSnaTotalRxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaTotalRxSubarea.setStatus('mandatory')
mfrapPerfSnaTotalTxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaTotalTxSubarea.setStatus('mandatory')
mfrapPerfSnaTotalRxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaTotalRxPeriph.setStatus('mandatory')
mfrapPerfSnaTotalTxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaTotalTxPeriph.setStatus('mandatory')
mfrapPerfSnaTotalRxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaTotalRxAppn.setStatus('mandatory')
mfrapPerfSnaTotalTxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaTotalTxAppn.setStatus('mandatory')
mfrapPerfSnaTotalRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaTotalRxNetbios.setStatus('mandatory')
mfrapPerfSnaTotalTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 14, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaTotalTxNetbios.setStatus('mandatory')
mfrapPerfSnaTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 14, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaTotalRxOther.setStatus('mandatory')
mfrapPerfSnaTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfSnaTotalTxOther.setStatus('mandatory')
mfrapPerfArpPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15), )
if mibBuilder.loadTexts: mfrapPerfArpPerDlciTable.setStatus('mandatory')
mfrapPerfArpPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfArpPerDlciInterval"), (0, "MFRAP-MIB", "mfrapPerfArpPerDlciValue"))
if mibBuilder.loadTexts: mfrapPerfArpPerDlciEntry.setStatus('mandatory')
mfrapPerfArpPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpPerDlciInterval.setStatus('mandatory')
mfrapPerfArpPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpPerDlciValue.setStatus('mandatory')
mfrapPerfArpPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpPerDlciRxTotal.setStatus('mandatory')
mfrapPerfArpPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpPerDlciTxTotal.setStatus('mandatory')
mfrapPerfArpPerDlciRxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpPerDlciRxArpReq.setStatus('mandatory')
mfrapPerfArpPerDlciTxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpPerDlciTxArpReq.setStatus('mandatory')
mfrapPerfArpPerDlciRxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpPerDlciRxArpRep.setStatus('mandatory')
mfrapPerfArpPerDlciTxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpPerDlciTxArpRep.setStatus('mandatory')
mfrapPerfArpPerDlciRxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpPerDlciRxRarpReq.setStatus('mandatory')
mfrapPerfArpPerDlciTxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpPerDlciTxRarpReq.setStatus('mandatory')
mfrapPerfArpPerDlciRxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpPerDlciRxRarpRep.setStatus('mandatory')
mfrapPerfArpPerDlciTxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpPerDlciTxRarpRep.setStatus('mandatory')
mfrapPerfArpPerDlciRxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpPerDlciRxInarpReq.setStatus('mandatory')
mfrapPerfArpPerDlciTxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpPerDlciTxInarpReq.setStatus('mandatory')
mfrapPerfArpPerDlciRxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpPerDlciRxInarpRep.setStatus('mandatory')
mfrapPerfArpPerDlciTxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpPerDlciTxInarpRep.setStatus('mandatory')
mfrapPerfArpPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpPerDlciRxOther.setStatus('mandatory')
mfrapPerfArpPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 15, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpPerDlciTxOther.setStatus('mandatory')
mfrapPerfArpTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 16), )
if mibBuilder.loadTexts: mfrapPerfArpTotalTable.setStatus('mandatory')
mfrapPerfArpTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 16, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfArpTotalInterval"))
if mibBuilder.loadTexts: mfrapPerfArpTotalEntry.setStatus('mandatory')
mfrapPerfArpTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpTotalInterval.setStatus('mandatory')
mfrapPerfArpTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpTotalRxTotal.setStatus('mandatory')
mfrapPerfArpTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpTotalTxTotal.setStatus('mandatory')
mfrapPerfArpTotalRxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpTotalRxArpReq.setStatus('mandatory')
mfrapPerfArpTotalTxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpTotalTxArpReq.setStatus('mandatory')
mfrapPerfArpTotalRxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpTotalRxArpRep.setStatus('mandatory')
mfrapPerfArpTotalTxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpTotalTxArpRep.setStatus('mandatory')
mfrapPerfArpTotalRxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpTotalRxRarpReq.setStatus('mandatory')
mfrapPerfArpTotalTxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpTotalTxRarpReq.setStatus('mandatory')
mfrapPerfArpTotalRxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpTotalRxRarpRep.setStatus('mandatory')
mfrapPerfArpTotalTxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpTotalTxRarpRep.setStatus('mandatory')
mfrapPerfArpTotalRxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpTotalRxInarpReq.setStatus('mandatory')
mfrapPerfArpTotalTxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpTotalTxInarpReq.setStatus('mandatory')
mfrapPerfArpTotalRxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 16, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpTotalRxInarpRep.setStatus('mandatory')
mfrapPerfArpTotalTxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 16, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpTotalTxInarpRep.setStatus('mandatory')
mfrapPerfArpTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 16, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpTotalRxOther.setStatus('mandatory')
mfrapPerfArpTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 16, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfArpTotalTxOther.setStatus('mandatory')
mfrapPerfLmiPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 17), )
if mibBuilder.loadTexts: mfrapPerfLmiPerDlciTable.setStatus('mandatory')
mfrapPerfLmiPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 17, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfLmiPerDlciInterval"), (0, "MFRAP-MIB", "mfrapPerfLmiPerDlciValue"))
if mibBuilder.loadTexts: mfrapPerfLmiPerDlciEntry.setStatus('mandatory')
mfrapPerfLmiPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiPerDlciInterval.setStatus('mandatory')
mfrapPerfLmiPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiPerDlciValue.setStatus('mandatory')
mfrapPerfLmiPerDlciRxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiPerDlciRxTotalByteCnt.setStatus('mandatory')
mfrapPerfLmiPerDlciTxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiPerDlciTxTotalByteCnt.setStatus('mandatory')
mfrapPerfLmiPerDlciRxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiPerDlciRxLivoEnqByteCnt.setStatus('mandatory')
mfrapPerfLmiPerDlciTxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiPerDlciTxLivoEnqByteCnt.setStatus('mandatory')
mfrapPerfLmiPerDlciRxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiPerDlciRxLivoStatByteCnt.setStatus('mandatory')
mfrapPerfLmiPerDlciTxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiPerDlciTxLivoStatByteCnt.setStatus('mandatory')
mfrapPerfLmiPerDlciRxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiPerDlciRxFullEnqByteCnt.setStatus('mandatory')
mfrapPerfLmiPerDlciTxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiPerDlciTxFullEnqByteCnt.setStatus('mandatory')
mfrapPerfLmiPerDlciRxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiPerDlciRxFullStatByteCnt.setStatus('mandatory')
mfrapPerfLmiPerDlciTxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiPerDlciTxFullStatByteCnt.setStatus('mandatory')
mfrapPerfLmiPerDlciRxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiPerDlciRxOtherByteCnt.setStatus('mandatory')
mfrapPerfLmiPerDlciTxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiPerDlciTxOtherByteCnt.setStatus('mandatory')
mfrapPerfLmiTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 18), )
if mibBuilder.loadTexts: mfrapPerfLmiTotalTable.setStatus('mandatory')
mfrapPerfLmiTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 18, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfLmiTotalInterval"))
if mibBuilder.loadTexts: mfrapPerfLmiTotalEntry.setStatus('mandatory')
mfrapPerfLmiTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiTotalInterval.setStatus('mandatory')
mfrapPerfLmiTotalDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiTotalDlciValue.setStatus('mandatory')
mfrapPerfLmiTotalRxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiTotalRxTotalByteCnt.setStatus('mandatory')
mfrapPerfLmiTotalTxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiTotalTxTotalByteCnt.setStatus('mandatory')
mfrapPerfLmiTotalRxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiTotalRxLivoEnqByteCnt.setStatus('mandatory')
mfrapPerfLmiTotalTxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiTotalTxLivoEnqByteCnt.setStatus('mandatory')
mfrapPerfLmiTotalRxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiTotalRxLivoStatByteCnt.setStatus('mandatory')
mfrapPerfLmiTotalTxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiTotalTxLivoStatByteCnt.setStatus('mandatory')
mfrapPerfLmiTotalRxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiTotalRxFullEnqByteCnt.setStatus('mandatory')
mfrapPerfLmiTotalTxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiTotalTxFullEnqByteCnt.setStatus('mandatory')
mfrapPerfLmiTotalRxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiTotalRxFullStatByteCnt.setStatus('mandatory')
mfrapPerfLmiTotalTxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiTotalTxFullStatByteCnt.setStatus('mandatory')
mfrapPerfLmiTotalRxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiTotalRxOtherByteCnt.setStatus('mandatory')
mfrapPerfLmiTotalTxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 4, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfLmiTotalTxOtherByteCnt.setStatus('mandatory')
mfrapPerfNetworkLongTerm = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 5, 5))
mfrapPerfNetwLongTermTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 5, 1), )
if mibBuilder.loadTexts: mfrapPerfNetwLongTermTable.setStatus('mandatory')
mfrapPerfNetwLongTermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 5, 1, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfNetwLongTermDlci"), (0, "MFRAP-MIB", "mfrapPerfNetwLongTermProtocol"), (0, "MFRAP-MIB", "mfrapPerfNetwLongTermInterval"))
if mibBuilder.loadTexts: mfrapPerfNetwLongTermEntry.setStatus('mandatory')
mfrapPerfNetwLongTermDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwLongTermDlci.setStatus('mandatory')
mfrapPerfNetwLongTermProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 21, 22, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172))).clone(namedValues=NamedValues(("ip-tx-bc", 1), ("ip-rx-bc", 2), ("tcp-ip-tx-bc", 3), ("tcp-ip-rx-bc", 4), ("ftp-tcp-ip-tx-bc", 5), ("ftp-tcp-ip-rx-bc", 6), ("telnet-tcp-ip-tx-bc", 7), ("telnet-tcp-ip-rx-bc", 8), ("smtp-tcp-ip-tx-bc", 9), ("smtp-tcp-ip-rx-bc", 10), ("http-tcp-ip-tx-bc", 13), ("http-tcp-ip-rx-bc", 14), ("netbios-ssn-tcp-ip-tx-bc", 15), ("netbios-ssn-tcp-ip-rx-bc", 16), ("udp-ip-tx-bc", 21), ("udp-ip-rx-bc", 22), ("tftp-udp-ip-tx-bc", 29), ("tftp-udp-ip-rx-bc", 30), ("netbios-dgm-udp-ip-tx-bc", 33), ("netbios-dgm-udp-ip-rx-bc", 34), ("snmp-udp-ip-tx-bc", 35), ("snmp-udp-ip-rx-bc", 36), ("snmptrap-udp-ip-tx-bc", 37), ("snmptrap-udp-ip-rx-bc", 38), ("rip-udp-ip-tx-bc", 39), ("rip-udp-ip-rx-bc", 40), ("icmp-ip-tx-bc", 41), ("icmp-ip-rx-bc", 42), ("echorep-icmp-ip-tx-bc", 43), ("echorep-icmp-ip-rx-bc", 44), ("dest-unr-icmp-ip-tx-bc", 45), ("dest-unr-icmp-ip-rx-bc", 46), ("src-quench-icmp-ip-tx-bc", 47), ("src-quench-icmp-ip-rx-bc", 48), ("redirect-icmp-ip-tx-bc", 49), ("redirect-icmp-ip-rx-bc", 50), ("echoreq-icmp-ip-tx-bc", 51), ("echoreq-icmp-ip-rx-bc", 52), ("time-excd-icmp-ip-tx-bc", 53), ("time-excd-icmp-ip-rx-bc", 54), ("param-prob-icmp-ip-tx-bc", 55), ("param-prob-icmp-ip-rx-bc", 56), ("timestamp-req-icmp-ip-tx-bc", 57), ("timestamp-req-icmp-ip-rx-bc", 58), ("timestamp-rep-icmp-ip-tx-bc", 59), ("timestamp-rep-icmp-ip-rx-bc", 60), ("addr-mask-req-icmp-ip-tx-bc", 61), ("addr-mask-req-icmp-ip-rx-bc", 62), ("addr-mask-rep-icmp-ip-tx-bc", 63), ("addr-mask-rep-icmp-ip-rx-bc", 64), ("pkt-too-big-icmp-ip-tx-bc", 65), ("pkt-too-big-icmp-ip-rx-bc", 66), ("gp-mem-query-icmp-ip-tx-bc", 67), ("gp-mem-query-icmp-ip-rx-bc", 68), ("gp-mem-report-icmp-ip-tx-bc", 69), ("gp-mem-report-icmp-ip-rx-bc", 70), ("gp-mem-reduct-icmp-ip-tx-bc", 71), ("gp-mem-reduct-icmp-ip-rx-bc", 72), ("ospf-ip-tx-bc", 73), ("ospf-ip-rx-bc", 74), ("other-ip-tx-bc", 75), ("other-ip-rx-bc", 76), ("ipx-tx-bc", 77), ("ipx-rx-bc", 78), ("spx-ipx-tx-bc", 79), ("spx-ipx-rx-bc", 80), ("ncp-ipx-tx-bc", 81), ("ncp-ipx-rx-bc", 82), ("sap-ipx-tx-bc", 83), ("sap-ipx-rx-bc", 84), ("rip-ipx-tx-bc", 85), ("rip-ipx-rx-bc", 86), ("netbios-ipx-tx-bc", 87), ("netbios-ipx-rx-bc", 88), ("other-ipx-tx-bc", 89), ("other-ipx-rx-bc", 90), ("arp-tx-bc", 91), ("arp-rx-bc", 92), ("arp-req-tx-bc", 93), ("arp-req-rx-bc", 94), ("arp-rep-tx-bc", 95), ("arp-rep-rx-bc", 96), ("rarp-req-tx-bc", 97), ("rarp-req-rx-bc", 98), ("rarp-rep-tx-bc", 99), ("rarp-rep-rx-bc", 100), ("inarp-req-tx-bc", 101), ("inarp-req-rx-bc", 102), ("inarp-rep-tx-bc", 103), ("inarp-rep-rx-bc", 104), ("sna-tx-bc", 105), ("sna-rx-bc", 106), ("sna-subarea-tx-bc", 107), ("sna-subarea-rx-bc", 108), ("sna-periph-tx-bc", 109), ("sna-periph-rx-bc", 110), ("sna-appn-tx-bc", 111), ("sna-appn-rx-bc", 112), ("sna-netbios-tx-bc", 113), ("sna-netbios-rx-bc", 114), ("cisco-tx-bc", 115), ("cisco-rx-bc", 116), ("other-tx-bc", 117), ("other-rx-bc", 118), ("user-defined-1-tx-bc", 119), ("user-defined-1-rx-bc", 120), ("user-defined-2-tx-bc", 121), ("user-defined-2-rx-bc", 122), ("user-defined-3-tx-bc", 123), ("user-defined-3-rx-bc", 124), ("user-defined-4-tx-bc", 125), ("user-defined-4-rx-bc", 126), ("thru-byte-tx-bc", 127), ("thru-byte-rx-bc", 128), ("thru-frame-tx-bc", 129), ("thru-frame-rx-bc", 130), ("thru-fecn-tx-bc", 131), ("thru-fecn-rx-bc", 132), ("thru-becn-tx-bc", 133), ("thru-becn-rx-bc", 134), ("thru-de-tx-bc", 135), ("thru-de-rx-bc", 136), ("cir-percent-range1-tx-bc", 137), ("cir-percent-range1-rx-bc", 138), ("cir-percent-range2-tx-bc", 139), ("cir-percent-range2-rx-bc", 140), ("cir-percent-range3-tx-bc", 141), ("cir-percent-range3-rx-bc", 142), ("cir-percent-range4-tx-bc", 143), ("cir-percent-range4-rx-bc", 144), ("cir-percent-range5-tx-bc", 145), ("cir-percent-range5-rx-bc", 146), ("cir-percent-range6-tx-bc", 147), ("cir-percent-range6-rx-bc", 148), ("cir-percent-range7-tx-bc", 149), ("cir-percent-range7-rx-bc", 150), ("cir-percent-range8-tx-bc", 151), ("cir-percent-range8-rx-bc", 152), ("lmi-tx-bc", 153), ("lmi-rx-bc", 154), ("lmi-livo-enq-tx-bc", 155), ("lmi-livo-enq-rx-bc", 156), ("lmi-livo-stat-tx-bc", 157), ("lmi-livo-stat-rx-bc", 158), ("lmi-full-enq-tx-bc", 159), ("lmi-full-enq-rx-bc", 160), ("lmi-full-stat-tx-bc", 161), ("lmi-full-stat-rx-bc", 162), ("lmi-other-tx-bc", 163), ("lmi-other-rx-bc", 164), ("total-uptime", 165), ("total-downtime", 166), ("igrp-tx-bc", 167), ("igrp-rx-bc", 168), ("vnip-tx-bc", 169), ("vnip-rx-bc", 170), ("annex-g-tx-bc", 171), ("annex-g-rx-bc", 172)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwLongTermProtocol.setStatus('mandatory')
mfrapPerfNetwLongTermInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwLongTermInterval.setStatus('mandatory')
mfrapPerfNetwLongTermValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwLongTermValue.setStatus('mandatory')
mfrapPerfNetwLongTermAltTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 5, 2), )
if mibBuilder.loadTexts: mfrapPerfNetwLongTermAltTable.setStatus('mandatory')
mfrapPerfNetwLongTermAltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 5, 2, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfNetwLongTermAltDlci"), (0, "MFRAP-MIB", "mfrapPerfNetwLongTermAltProtocol"))
if mibBuilder.loadTexts: mfrapPerfNetwLongTermAltEntry.setStatus('mandatory')
mfrapPerfNetwLongTermAltDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwLongTermAltDlci.setStatus('mandatory')
mfrapPerfNetwLongTermAltProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 21, 22, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172))).clone(namedValues=NamedValues(("ip-tx-bc", 1), ("ip-rx-bc", 2), ("tcp-ip-tx-bc", 3), ("tcp-ip-rx-bc", 4), ("ftp-tcp-ip-tx-bc", 5), ("ftp-tcp-ip-rx-bc", 6), ("telnet-tcp-ip-tx-bc", 7), ("telnet-tcp-ip-rx-bc", 8), ("smtp-tcp-ip-tx-bc", 9), ("smtp-tcp-ip-rx-bc", 10), ("http-tcp-ip-tx-bc", 13), ("http-tcp-ip-rx-bc", 14), ("netbios-ssn-tcp-ip-tx-bc", 15), ("netbios-ssn-tcp-ip-rx-bc", 16), ("udp-ip-tx-bc", 21), ("udp-ip-rx-bc", 22), ("tftp-udp-ip-tx-bc", 29), ("tftp-udp-ip-rx-bc", 30), ("netbios-dgm-udp-ip-tx-bc", 33), ("netbios-dgm-udp-ip-rx-bc", 34), ("snmp-udp-ip-tx-bc", 35), ("snmp-udp-ip-rx-bc", 36), ("snmptrap-udp-ip-tx-bc", 37), ("snmptrap-udp-ip-rx-bc", 38), ("rip-udp-ip-tx-bc", 39), ("rip-udp-ip-rx-bc", 40), ("icmp-ip-tx-bc", 41), ("icmp-ip-rx-bc", 42), ("echorep-icmp-ip-tx-bc", 43), ("echorep-icmp-ip-rx-bc", 44), ("dest-unr-icmp-ip-tx-bc", 45), ("dest-unr-icmp-ip-rx-bc", 46), ("src-quench-icmp-ip-tx-bc", 47), ("src-quench-icmp-ip-rx-bc", 48), ("redirect-icmp-ip-tx-bc", 49), ("redirect-icmp-ip-rx-bc", 50), ("echoreq-icmp-ip-tx-bc", 51), ("echoreq-icmp-ip-rx-bc", 52), ("time-excd-icmp-ip-tx-bc", 53), ("time-excd-icmp-ip-rx-bc", 54), ("param-prob-icmp-ip-tx-bc", 55), ("param-prob-icmp-ip-rx-bc", 56), ("timestamp-req-icmp-ip-tx-bc", 57), ("timestamp-req-icmp-ip-rx-bc", 58), ("timestamp-rep-icmp-ip-tx-bc", 59), ("timestamp-rep-icmp-ip-rx-bc", 60), ("addr-mask-req-icmp-ip-tx-bc", 61), ("addr-mask-req-icmp-ip-rx-bc", 62), ("addr-mask-rep-icmp-ip-tx-bc", 63), ("addr-mask-rep-icmp-ip-rx-bc", 64), ("pkt-too-big-icmp-ip-tx-bc", 65), ("pkt-too-big-icmp-ip-rx-bc", 66), ("gp-mem-query-icmp-ip-tx-bc", 67), ("gp-mem-query-icmp-ip-rx-bc", 68), ("gp-mem-report-icmp-ip-tx-bc", 69), ("gp-mem-report-icmp-ip-rx-bc", 70), ("gp-mem-reduct-icmp-ip-tx-bc", 71), ("gp-mem-reduct-icmp-ip-rx-bc", 72), ("ospf-ip-tx-bc", 73), ("ospf-ip-rx-bc", 74), ("other-ip-tx-bc", 75), ("other-ip-rx-bc", 76), ("ipx-tx-bc", 77), ("ipx-rx-bc", 78), ("spx-ipx-tx-bc", 79), ("spx-ipx-rx-bc", 80), ("ncp-ipx-tx-bc", 81), ("ncp-ipx-rx-bc", 82), ("sap-ipx-tx-bc", 83), ("sap-ipx-rx-bc", 84), ("rip-ipx-tx-bc", 85), ("rip-ipx-rx-bc", 86), ("netbios-ipx-tx-bc", 87), ("netbios-ipx-rx-bc", 88), ("other-ipx-tx-bc", 89), ("other-ipx-rx-bc", 90), ("arp-tx-bc", 91), ("arp-rx-bc", 92), ("arp-req-tx-bc", 93), ("arp-req-rx-bc", 94), ("arp-rep-tx-bc", 95), ("arp-rep-rx-bc", 96), ("rarp-req-tx-bc", 97), ("rarp-req-rx-bc", 98), ("rarp-rep-tx-bc", 99), ("rarp-rep-rx-bc", 100), ("inarp-req-tx-bc", 101), ("inarp-req-rx-bc", 102), ("inarp-rep-tx-bc", 103), ("inarp-rep-rx-bc", 104), ("sna-tx-bc", 105), ("sna-rx-bc", 106), ("sna-subarea-tx-bc", 107), ("sna-subarea-rx-bc", 108), ("sna-periph-tx-bc", 109), ("sna-periph-rx-bc", 110), ("sna-appn-tx-bc", 111), ("sna-appn-rx-bc", 112), ("sna-netbios-tx-bc", 113), ("sna-netbios-rx-bc", 114), ("cisco-tx-bc", 115), ("cisco-rx-bc", 116), ("other-tx-bc", 117), ("other-rx-bc", 118), ("user-defined-1-tx-bc", 119), ("user-defined-1-rx-bc", 120), ("user-defined-2-tx-bc", 121), ("user-defined-2-rx-bc", 122), ("user-defined-3-tx-bc", 123), ("user-defined-3-rx-bc", 124), ("user-defined-4-tx-bc", 125), ("user-defined-4-rx-bc", 126), ("thru-byte-tx-bc", 127), ("thru-byte-rx-bc", 128), ("thru-frame-tx-bc", 129), ("thru-frame-rx-bc", 130), ("thru-fecn-tx-bc", 131), ("thru-fecn-rx-bc", 132), ("thru-becn-tx-bc", 133), ("thru-becn-rx-bc", 134), ("thru-de-tx-bc", 135), ("thru-de-rx-bc", 136), ("cir-percent-range1-tx-bc", 137), ("cir-percent-range1-rx-bc", 138), ("cir-percent-range2-tx-bc", 139), ("cir-percent-range2-rx-bc", 140), ("cir-percent-range3-tx-bc", 141), ("cir-percent-range3-rx-bc", 142), ("cir-percent-range4-tx-bc", 143), ("cir-percent-range4-rx-bc", 144), ("cir-percent-range5-tx-bc", 145), ("cir-percent-range5-rx-bc", 146), ("cir-percent-range6-tx-bc", 147), ("cir-percent-range6-rx-bc", 148), ("cir-percent-range7-tx-bc", 149), ("cir-percent-range7-rx-bc", 150), ("cir-percent-range8-tx-bc", 151), ("cir-percent-range8-rx-bc", 152), ("lmi-tx-bc", 153), ("lmi-rx-bc", 154), ("lmi-livo-enq-tx-bc", 155), ("lmi-livo-enq-rx-bc", 156), ("lmi-livo-stat-tx-bc", 157), ("lmi-livo-stat-rx-bc", 158), ("lmi-full-enq-tx-bc", 159), ("lmi-full-enq-rx-bc", 160), ("lmi-full-stat-tx-bc", 161), ("lmi-full-stat-rx-bc", 162), ("lmi-other-tx-bc", 163), ("lmi-other-rx-bc", 164), ("total-uptime", 165), ("total-downtime", 166), ("igrp-tx-bc", 167), ("igrp-rx-bc", 168), ("vnip-tx-bc", 169), ("vnip-rx-bc", 170), ("annex-g-tx-bc", 171), ("annex-g-rx-bc", 172)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwLongTermAltProtocol.setStatus('mandatory')
mfrapPerfNetwLongTermAltArray = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 5, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfNetwLongTermAltArray.setStatus('mandatory')
mfrapPerfNetworkLongTermCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 5, 5, 3))
mfrapPerfNetworkLongTermCmdClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapPerfNetworkLongTermCmdClear.setStatus('mandatory')
mfrapPerfCirPercentUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 5, 6))
mfrapPerfCirPercentUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1), )
if mibBuilder.loadTexts: mfrapPerfCirPercentUtilizationTable.setStatus('mandatory')
mfrapPerfCirPercentUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfCirPercentUtilizationInterval"), (0, "MFRAP-MIB", "mfrapPerfCirPercentUtilizationDlciValue"))
if mibBuilder.loadTexts: mfrapPerfCirPercentUtilizationEntry.setStatus('mandatory')
mfrapPerfCirPercentUtilizationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCirPercentUtilizationInterval.setStatus('mandatory')
mfrapPerfCirPercentUtilizationDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCirPercentUtilizationDlciValue.setStatus('mandatory')
mfrapPerfCirRxPercentUtilizationRange1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCirRxPercentUtilizationRange1.setStatus('mandatory')
mfrapPerfCirRxPercentUtilizationRange2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCirRxPercentUtilizationRange2.setStatus('mandatory')
mfrapPerfCirRxPercentUtilizationRange3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCirRxPercentUtilizationRange3.setStatus('mandatory')
mfrapPerfCirRxPercentUtilizationRange4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCirRxPercentUtilizationRange4.setStatus('mandatory')
mfrapPerfCirRxPercentUtilizationRange5 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCirRxPercentUtilizationRange5.setStatus('mandatory')
mfrapPerfCirRxPercentUtilizationRange6 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCirRxPercentUtilizationRange6.setStatus('mandatory')
mfrapPerfCirRxPercentUtilizationRange7 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCirRxPercentUtilizationRange7.setStatus('mandatory')
mfrapPerfCirRxPercentUtilizationRange8 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCirRxPercentUtilizationRange8.setStatus('mandatory')
mfrapPerfCirTxPercentUtilizationRange1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCirTxPercentUtilizationRange1.setStatus('mandatory')
mfrapPerfCirTxPercentUtilizationRange2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCirTxPercentUtilizationRange2.setStatus('mandatory')
mfrapPerfCirTxPercentUtilizationRange3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCirTxPercentUtilizationRange3.setStatus('mandatory')
mfrapPerfCirTxPercentUtilizationRange4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCirTxPercentUtilizationRange4.setStatus('mandatory')
mfrapPerfCirTxPercentUtilizationRange5 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCirTxPercentUtilizationRange5.setStatus('mandatory')
mfrapPerfCirTxPercentUtilizationRange6 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCirTxPercentUtilizationRange6.setStatus('mandatory')
mfrapPerfCirTxPercentUtilizationRange7 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCirTxPercentUtilizationRange7.setStatus('mandatory')
mfrapPerfCirTxPercentUtilizationRange8 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCirTxPercentUtilizationRange8.setStatus('mandatory')
mfrapPerfCurrentPerDlciUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 2), )
if mibBuilder.loadTexts: mfrapPerfCurrentPerDlciUtilizationTable.setStatus('mandatory')
mfrapPerfCurrentPerDlciUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 2, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapPerfCurrentPerDlciUtilizationDlciValue"))
if mibBuilder.loadTexts: mfrapPerfCurrentPerDlciUtilizationEntry.setStatus('mandatory')
mfrapPerfCurrentPerDlciUtilizationDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCurrentPerDlciUtilizationDlciValue.setStatus('mandatory')
mfrapPerfCurrentPerDlciRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCurrentPerDlciRxUtilization.setStatus('mandatory')
mfrapPerfCurrentPerDlciTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCurrentPerDlciTxUtilization.setStatus('mandatory')
mfrapPerfCurrentPerDlciAggregateUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCurrentPerDlciAggregateUtilization.setStatus('mandatory')
mfrapPerfCurrentUnitUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 3))
mfrapPerfCurrentDteUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCurrentDteUtilization.setStatus('mandatory')
mfrapPerfCurrentWanUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCurrentWanUtilization.setStatus('mandatory')
mfrapPerfCurrentAggregateUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 5, 6, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPerfCurrentAggregateUtilization.setStatus('mandatory')
mfrapEventTrapLog = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 8, 10))
mfrapEventTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 10, 1), )
if mibBuilder.loadTexts: mfrapEventTrapLogTable.setStatus('mandatory')
mfrapEventTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 10, 1, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapEventTrapLogSeqNum"))
if mibBuilder.loadTexts: mfrapEventTrapLogEntry.setStatus('mandatory')
mfrapEventTrapLogSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapEventTrapLogSeqNum.setStatus('mandatory')
mfrapEventTrapLogGenericEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapEventTrapLogGenericEvent.setStatus('mandatory')
mfrapEventTrapLogSpecificEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapEventTrapLogSpecificEvent.setStatus('mandatory')
mfrapEventTrapLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 10, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapEventTrapLogTimeStamp.setStatus('mandatory')
mfrapEventTrapLogVarBind1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapEventTrapLogVarBind1.setStatus('mandatory')
mfrapEventTrapLogVarBind2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapEventTrapLogVarBind2.setStatus('mandatory')
mfrapEventTrapLogVarBind3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapEventTrapLogVarBind3.setStatus('mandatory')
mfrapEventLogAltTable = MibTable((1, 3, 6, 1, 4, 1, 485, 8, 10, 2), )
if mibBuilder.loadTexts: mfrapEventLogAltTable.setStatus('mandatory')
mfrapEventLogAltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 8, 10, 2, 1), ).setIndexNames((0, "MFRAP-MIB", "mfrapEventLogAltSeqNum"))
if mibBuilder.loadTexts: mfrapEventLogAltEntry.setStatus('mandatory')
mfrapEventLogAltSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapEventLogAltSeqNum.setStatus('mandatory')
mfrapEventLogAltArray = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 8, 10, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapEventLogAltArray.setStatus('mandatory')
mfrapEventLogCurrentSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapEventLogCurrentSeqNum.setStatus('mandatory')
mfrapEventLogFreeze = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freeze", 1), ("un-freeze", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapEventLogFreeze.setStatus('mandatory')
mfrapEventLogClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mfrapEventLogClear.setStatus('mandatory')
mfrapAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 75, 76, 90, 91, 92, 93, 94, 95, 96, 97, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 257, 258, 259, 260, 261, 262, 263, 264, 265))).clone(namedValues=NamedValues(("bad-config-in-set", 1), ("config-local-update", 2), ("t1-netw-carrier-loss", 3), ("t1-netw-carrier-detect", 4), ("t1-netw-sync-loss-declare", 5), ("t1-netw-sync-acquire", 6), ("t1-netw-red-alarm-declare", 7), ("t1-netw-red-alarm-clear", 8), ("t1-netw-yellow-alarm-detect", 9), ("t1-netw-yellow-alarm-clear", 10), ("t1-netw-ais-detect", 11), ("t1-netw-ais-clear", 12), ("t1-controlled-slip", 13), ("local-unit-loopback-enabled", 14), ("local-unit-loopback-disabled", 15), ("local-unit-loopback-failure", 16), ("local-dte-loopback-enabled", 17), ("local-dte-loopback-disabled", 18), ("local-dte-loopback-failure", 19), ("local-aggregate-loopback-enabled", 20), ("local-aggregate-loopback-disabled", 21), ("local-aggregate-loopback-failure", 22), ("local-payload-loopback-enabled", 23), ("local-payload-loopback-disabled", 24), ("local-payload-loopback-failure", 25), ("local-network-loopback-enabled", 26), ("local-network-loopback-disabled", 27), ("local-network-loopback-failure", 28), ("v54-loop-up-initiated", 29), ("v54-loop-down-completed", 30), ("v54-loopback-enabled-by-remote", 31), ("v54-loopback-disabled-by-remote", 32), ("v54-loopback-failure", 33), ("csu-loop-up-initiated", 34), ("csu-loop-down-completed", 35), ("csu-loopback-enabled-by-remote", 36), ("csu-loopback-disabled-by-remote", 37), ("csu-loopback-failure", 38), ("dsu-loop-up-initiated", 39), ("dsu-loop-down-completed", 40), ("dsu-loopback-enabled-by-remote", 41), ("dsu-loopback-disabled-by-remote", 42), ("dsu-loopback-failure", 43), ("bert-test-pattern-initiated", 44), ("bert-test-pattern-completed", 45), ("bert-test-pattern-failure", 46), ("dlci-active", 47), ("dlci-inactive", 48), ("dlci-td-threshold", 49), ("lmi-sourcing-change-passthru", 50), ("lmi-sourcing-change-user-dte", 51), ("lmi-sourcing-change-net-dte", 52), ("lmi-sourcing-change-user-net", 53), ("lmi-sourcing-change-net-net", 54), ("dte-signal-rts-on", 55), ("dte-signal-rts-off", 56), ("dte-signal-dtr-on", 57), ("dte-signal-dtr-off", 58), ("lmi-non-incr-seq-num-dte", 59), ("lmi-non-incr-seq-num-net", 60), ("lmi-seq-num-mismatch-dte", 61), ("lmi-seq-num-mismatch-net", 62), ("trap-muting-active", 75), ("trap-muting-inactive", 76), ("vloop-loop-up", 90), ("vloop-loop-down", 91), ("vloop-up-via-remote", 92), ("vloop-down-via-remote", 93), ("vloop-failed", 94), ("vbert-started", 95), ("vbert-stopped", 96), ("vbert-request-failed", 97), ("dandi-carrier-loss", 110), ("dandi-carrier-detect", 111), ("dandi-sync-loss-declare", 112), ("dandi-sync-acquire", 113), ("dandi-red-alarm-declare", 114), ("dandi-red-alarm-clear", 115), ("dandi-yellow-alarm-detect", 116), ("dandi-yellow-alarm-clear", 117), ("dandi-ais-detect", 118), ("dandi-ais-clear", 119), ("dandi-controlled-slip", 120), ("local-dandi-payload-loopback-enabled", 121), ("local-dandi-payload-loopback-disabled", 122), ("local-dandi-payload-loopback-failure", 123), ("local-dandi-line-loopback-enabled", 124), ("local-dandi-line-loopback-disabled", 125), ("local-dandi-line-loopback-failure", 126), ("nest-fan-one-alarm", 130), ("nest-fan-one-alarm-clear", 131), ("nest-fan-two-alarm", 132), ("nest-fan-two-alarm-clear", 133), ("nest-power-supply-alarm", 134), ("nest-power-supply-alarm-clear", 135), ("local-payload-loopback-via-rmt-enabled", 136), ("local-payload-loopback-via-rmt-disabled", 137), ("pvc-rx-utilization-exceeded", 138), ("pvc-tx-utilization-exceeded", 139), ("pvc-rx-utilization-cleared", 140), ("pvc-tx-utilization-cleared", 141), ("config-install-success", 142), ("tftp-requested", 257), ("tftp-transferring", 258), ("tftp-programming", 259), ("tftp-aborted", 260), ("tftp-success", 261), ("tftp-host-unreachable", 262), ("tftp-no-file", 263), ("tftp-invalid-file", 264), ("tftp-corrupt-file", 265)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapAlarmType.setStatus('mandatory')
mfrapDLCINum = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapDLCINum.setStatus('mandatory')
mfrapInterface = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("t1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapInterface.setStatus('mandatory')
mfrapIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapIpAddress.setStatus('mandatory')
mfrapPercentUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapPercentUtilization.setStatus('mandatory')
mfrapUtilizationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapUtilizationThreshold.setStatus('mandatory')
mfrapCfgLockIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 485, 8, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfrapCfgLockIpAddress.setStatus('mandatory')
mfrapTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,0)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapBadConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,1)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,2)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapt1netwcarrierloss = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,3)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapt1netwcarrierdetect = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,4)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapt1netwsynclossdeclare = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,5)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapt1netwsyncacquire = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,6)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapt1netwredalarmdeclare = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,7)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapt1netwredalarmclear = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,8)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapt1netwyellowalarmdetect = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,9)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapt1netwyellowalarmclear = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,10)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapt1netwaisdetect = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,11)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapt1netwaisclear = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,12)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapt1controlledslip = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,13)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalUnitLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,14)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalUnitLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,15)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalUnitLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,16)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalDteLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,17)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalDteLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,18)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalDteLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,19)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalAggregateLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,20)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalAggregateLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,21)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalAggregateLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,22)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalPayloadLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,23)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalPayloadLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,24)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalPayloadLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,25)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalNetLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,26)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalNetLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,27)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalNetLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,28)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapV54LoopUpInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,29)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapV54LoopDownCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,30)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapV54LoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,31)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapV54LoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,32)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapV54LoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,33)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapCsuLoopUpInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,34)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapCsuLoopDownCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,35)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapCsuLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,36)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapCsuLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,37)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapCsuLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,38)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDsuLoopUpInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,39)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDsuLoopDownCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,40)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDsuLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,41)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDsuLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,42)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDsuLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,43)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapBertInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,44)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapBertCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,45)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapBertFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,46)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDLCIActiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,47)).setObjects(("MFRAP-MIB", "mfrapAlarmType"), ("MFRAP-MIB", "mfrapDLCINum"))
mfrapDLCIInactiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,48)).setObjects(("MFRAP-MIB", "mfrapAlarmType"), ("MFRAP-MIB", "mfrapDLCINum"))
mfrapDLCITDThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,49)).setObjects(("MFRAP-MIB", "mfrapAlarmType"), ("MFRAP-MIB", "mfrapDLCINum"), ("MFRAP-MIB", "mfrapIpAddress"))
mfrapLmiSourcingChangePassthruTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,50)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLmiSourcingChangeUserDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,51)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLmiSourcingChangeNetDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,52)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLmiSourcingChangeUserT1Trap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,53)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLmiSourcingChangeNetT1Trap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,54)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDteSignalRtsOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,55)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDteSignalRtsOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,56)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDteSignalDtrOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,57)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDteSignalDtrOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,58)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapNonIncrLmiSeqNumDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,59)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapNonIncrLmiSeqNumT1Trap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,60)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLmiSeqNumMismatchDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,61)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLmiSeqNumMismatchT1Trap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,62)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapTrapMutingActive = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,75)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapTrapMutingInactive = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,76)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapVloopUp = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,90)).setObjects(("MFRAP-MIB", "mfrapAlarmType"), ("MFRAP-MIB", "mfrapDLCINum"), ("MFRAP-MIB", "mfrapInterface"))
mfrapVloopDown = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,91)).setObjects(("MFRAP-MIB", "mfrapAlarmType"), ("MFRAP-MIB", "mfrapDLCINum"), ("MFRAP-MIB", "mfrapInterface"))
mfrapVloopUpViaRemote = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,92)).setObjects(("MFRAP-MIB", "mfrapAlarmType"), ("MFRAP-MIB", "mfrapDLCINum"), ("MFRAP-MIB", "mfrapInterface"))
mfrapVloopDownViaRemote = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,93)).setObjects(("MFRAP-MIB", "mfrapAlarmType"), ("MFRAP-MIB", "mfrapDLCINum"), ("MFRAP-MIB", "mfrapInterface"))
mfrapVloopRequestFailed = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,94)).setObjects(("MFRAP-MIB", "mfrapAlarmType"), ("MFRAP-MIB", "mfrapDLCINum"), ("MFRAP-MIB", "mfrapInterface"))
mfrapVbertStarted = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,95)).setObjects(("MFRAP-MIB", "mfrapAlarmType"), ("MFRAP-MIB", "mfrapDLCINum"), ("MFRAP-MIB", "mfrapInterface"))
mfrapVbertStopped = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,96)).setObjects(("MFRAP-MIB", "mfrapAlarmType"), ("MFRAP-MIB", "mfrapDLCINum"), ("MFRAP-MIB", "mfrapInterface"))
mfrapVbertRequestFailed = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,97)).setObjects(("MFRAP-MIB", "mfrapAlarmType"), ("MFRAP-MIB", "mfrapDLCINum"), ("MFRAP-MIB", "mfrapInterface"))
mfrapDandiCarrierLoss = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,110)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDandiCarrierDetect = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,111)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDandiSyncLossDeclare = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,112)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDandiSyncAcquire = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,113)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDandiRedAlarmDeclare = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,114)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDandiRedalArmclear = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,115)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDandiYellowAlarmDetect = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,116)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDandiYellowAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,117)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDandIaisDetect = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,118)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDandiAisClear = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,119)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapDandiControlledSlip = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,120)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalDandiPayloadLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,121)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalDandiPayloadLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,122)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalDandiPayloadLoopbackFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,123)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalDandiLineLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,124)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalDandiLineLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,125)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalDandiLineLoopbackFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,126)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapNestFanOneAlarm = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,130)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapNestFanOneAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,131)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapNestFanTwoAlarm = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,132)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapNestFanTwoAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,133)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapNestPowerSupplyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,134)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapNestPowerSupplyAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,135)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalPayloadLoopbackEnabledViaRemoteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,136)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapLocalPayloadLoopbackDisabledViaRemoteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,137)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapPvcRxUtilizationExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,138)).setObjects(("MFRAP-MIB", "mfrapAlarmType"), ("MFRAP-MIB", "mfrapDLCINum"), ("MFRAP-MIB", "mfrapPercentUtilization"), ("MFRAP-MIB", "mfrapUtilizationThreshold"))
mfrapPvcTxUtilizationExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,139)).setObjects(("MFRAP-MIB", "mfrapAlarmType"), ("MFRAP-MIB", "mfrapDLCINum"), ("MFRAP-MIB", "mfrapPercentUtilization"), ("MFRAP-MIB", "mfrapUtilizationThreshold"))
mfrapPvcRxUtilizationClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,140)).setObjects(("MFRAP-MIB", "mfrapAlarmType"), ("MFRAP-MIB", "mfrapDLCINum"), ("MFRAP-MIB", "mfrapPercentUtilization"), ("MFRAP-MIB", "mfrapUtilizationThreshold"))
mfrapPvcTxUtilizationClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,141)).setObjects(("MFRAP-MIB", "mfrapAlarmType"), ("MFRAP-MIB", "mfrapDLCINum"), ("MFRAP-MIB", "mfrapPercentUtilization"), ("MFRAP-MIB", "mfrapUtilizationThreshold"))
mfrapConfigInstallSuccess = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,142)).setObjects(("MFRAP-MIB", "mfrapAlarmType"), ("MFRAP-MIB", "mfrapCfgLockIpAddress"))
mfrapTftpRequestedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,257)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapTftpTransferringTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,258)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapTftpProgrammingTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,259)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapTftpAbortedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,260)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapTftpSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,261)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapTftpHostUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,262)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapTftpNoFileTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,263)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapTftpInvalidFileTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,264)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mfrapTftpCorruptFileTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 8) + (0,265)).setObjects(("MFRAP-MIB", "mfrapAlarmType"))
mibBuilder.exportSymbols("MFRAP-MIB", mfrapPerfNetworkShortTerm=mfrapPerfNetworkShortTerm, mfrapCfgEditConnStatus=mfrapCfgEditConnStatus, mfrapPerfCirPercentUtilization=mfrapPerfCirPercentUtilization, mfrapDandiPerfFreezeState=mfrapDandiPerfFreezeState, mfrapPerfIcmpPerDlciRxRedirect=mfrapPerfIcmpPerDlciRxRedirect, mfrapPerfArpTotalTxInarpRep=mfrapPerfArpTotalTxInarpRep, mfrapCfgLockIpAddress=mfrapCfgLockIpAddress, mfrapDandiTotalESs=mfrapDandiTotalESs, mfrapPerfIpPerDlciInterval=mfrapPerfIpPerDlciInterval, mfrapPerfDandiIntervalTable=mfrapPerfDandiIntervalTable, mfrapPerfThruputCmdAllStsDlciResetAll=mfrapPerfThruputCmdAllStsDlciResetAll, mfrapPerfNetwProtoTotalTxOther=mfrapPerfNetwProtoTotalTxOther, mfrapPerfIpPerDlciEntry=mfrapPerfIpPerDlciEntry, mfrapPerfIpxTotalEntry=mfrapPerfIpxTotalEntry, mfrapPerfIpxTotalRxNetbios=mfrapPerfIpxTotalRxNetbios, mfrapPerfLmiPerDlciRxFullEnqByteCnt=mfrapPerfLmiPerDlciRxFullEnqByteCnt, mfrapPerfNetwProtoTotalInterval=mfrapPerfNetwProtoTotalInterval, mfrapPerfIpxPerDlciTxOther=mfrapPerfIpxPerDlciTxOther, mfrapCfgDteConnRate=mfrapCfgDteConnRate, mfrapPerfLmiPerDlciRxTotalByteCnt=mfrapPerfLmiPerDlciRxTotalByteCnt, mfrapPerfLmiTotalTxLivoEnqByteCnt=mfrapPerfLmiTotalTxLivoEnqByteCnt, mfrapPerfLmiTotalInterval=mfrapPerfLmiTotalInterval, mfrapCfgFrAddrResDlcis=mfrapCfgFrAddrResDlcis, mfrapLocalDandiLineLoopbackEnabledTrap=mfrapLocalDandiLineLoopbackEnabledTrap, mfrapPerfArpTotalEntry=mfrapPerfArpTotalEntry, mfrapCfgFrPerfLTDlciFilterIndex=mfrapCfgFrPerfLTDlciFilterIndex, mfrapCfgTransitDelayInterface=mfrapCfgTransitDelayInterface, mfrapPerfApplicationTotalTxCustom1=mfrapPerfApplicationTotalTxCustom1, mfrapPerfRoutingTotalInterval=mfrapPerfRoutingTotalInterval, mfrapCfgDteConnStartDs0=mfrapCfgDteConnStartDs0, mfrapBertCompletedTrap=mfrapBertCompletedTrap, mfrapT1TotalBESs=mfrapT1TotalBESs, mfrapPerfIcmpTotalTxGmReport=mfrapPerfIcmpTotalTxGmReport, mfrapT1IntervalNumber=mfrapT1IntervalNumber, mfrapVnipTopoVBERTStatus=mfrapVnipTopoVBERTStatus, mfrapCfgSnmpMgrEntry=mfrapCfgSnmpMgrEntry, mfrapSysType=mfrapSysType, mfrapStatusNestTable=mfrapStatusNestTable, mfrapT1TotalEntry=mfrapT1TotalEntry, mfrapPerfSnaPerDlciRxOther=mfrapPerfSnaPerDlciRxOther, mfrapCfgCurrentConnTable=mfrapCfgCurrentConnTable, mfrapCfgT1Density=mfrapCfgT1Density, mfrapCfgTftpNumBytes=mfrapCfgTftpNumBytes, mfrapStatusDteDtr=mfrapStatusDteDtr, mfrapDLCINum=mfrapDLCINum, mfrapPerfNetwProtoPerDlciRxAnnexG=mfrapPerfNetwProtoPerDlciRxAnnexG, mfrapPerformance=mfrapPerformance, mfrapCfgCommFlowCtrl=mfrapCfgCommFlowCtrl, mfrapStatusT1Table=mfrapStatusT1Table, mfrapPerfIpPerDlciTxUdp=mfrapPerfIpPerDlciTxUdp, mfrapPerfIpPerDlciRxOther=mfrapPerfIpPerDlciRxOther, mfrapPerfCirPercentUtilizationEntry=mfrapPerfCirPercentUtilizationEntry, mfrapCfgFrPerfLTDlciFilterDlciNum=mfrapCfgFrPerfLTDlciFilterDlciNum, mfrapPerfDandiTotalTable=mfrapPerfDandiTotalTable, mfrapPerfThruputCmdClearDlciStats=mfrapPerfThruputCmdClearDlciStats, mfrapCfgTDDeleteTable=mfrapCfgTDDeleteTable, mfrapT1PerfClearAll=mfrapT1PerfClearAll, mfrapPerfIpPerDlciTxOther=mfrapPerfIpPerDlciTxOther, mfrapVnipTopoTDMinDelay=mfrapVnipTopoTDMinDelay, mfrapDteSignalRtsOnTrap=mfrapDteSignalRtsOnTrap, mfrapPerfApplicationPerDlciTxSnmp=mfrapPerfApplicationPerDlciTxSnmp, mfrapCfgFrLmiType=mfrapCfgFrLmiType, mfrapPerfApplicationTotalRxTftp=mfrapPerfApplicationTotalRxTftp, mfrapCfgFrPerfUnprovDlcisDelete=mfrapCfgFrPerfUnprovDlcisDelete, mfrapCfgFrPerfDlciNamesDlciValue=mfrapCfgFrPerfDlciNamesDlciValue, mfrapPerfSnaTotalRxPeriph=mfrapPerfSnaTotalRxPeriph, mfrapPerfNetwProtoPerDlciTxSna=mfrapPerfNetwProtoPerDlciTxSna, mfrapPerfMgmtIpICMPInMsgs=mfrapPerfMgmtIpICMPInMsgs, mfrapPvcTxUtilizationExceededTrap=mfrapPvcTxUtilizationExceededTrap, mfrapPerfIcmpTotalRxAddrMaskRep=mfrapPerfIcmpTotalRxAddrMaskRep, mfrapCfgFrPerfUserProtocolsPortNum=mfrapCfgFrPerfUserProtocolsPortNum, mfrapPerfArpTotalTxRarpReq=mfrapPerfArpTotalTxRarpReq, mfrapPerfIpPerDlciValue=mfrapPerfIpPerDlciValue, mfrapEventTrapLogEntry=mfrapEventTrapLogEntry, mfrapPerfIcmpTotalRxGmReport=mfrapPerfIcmpTotalRxGmReport, mfrapPerfNetwProtoTotalRxArp=mfrapPerfNetwProtoTotalRxArp, mfrapPerfThruputPerDlciTable=mfrapPerfThruputPerDlciTable, mfrapEventTrapLogTable=mfrapEventTrapLogTable, mfrapCfgGetCommunityString=mfrapCfgGetCommunityString, mfrapPerfLmiTotalRxOtherByteCnt=mfrapPerfLmiTotalRxOtherByteCnt, mfrapDsuLoopbackDisabledTrap=mfrapDsuLoopbackDisabledTrap, mfrapStatusDandiModeLED=mfrapStatusDandiModeLED, mfrapDiagT1LocPylLpbk=mfrapDiagT1LocPylLpbk, mfrapt1controlledslip=mfrapt1controlledslip, mfrapCfgTransitDelayNumHops=mfrapCfgTransitDelayNumHops, mfrapDsuLoopDownCompletedTrap=mfrapDsuLoopDownCompletedTrap, mfrapVnipTopoVBertPerUtilCIR=mfrapVnipTopoVBertPerUtilCIR, mfrapPerfLmiPerDlciTable=mfrapPerfLmiPerDlciTable, mfrapCfgFrAddrResInarpTimer=mfrapCfgFrAddrResInarpTimer, mfrapEventTrapLogGenericEvent=mfrapEventTrapLogGenericEvent, mfrapt1netwcarrierloss=mfrapt1netwcarrierloss, mfrapLocalDandiPayloadLoopbackEnabledTrap=mfrapLocalDandiPayloadLoopbackEnabledTrap, mfrapCfgFrPerfLTProtocolFilterTable=mfrapCfgFrPerfLTProtocolFilterTable, mfrapPerfIcmpTotalTxEchoReq=mfrapPerfIcmpTotalTxEchoReq, mfrapT1PerfClearEvents=mfrapT1PerfClearEvents, mfrapEventLogAltTable=mfrapEventLogAltTable, mfrapPerfThruputPerIntfTxByteCnt=mfrapPerfThruputPerIntfTxByteCnt, mfrapPerfLmiTotalRxFullEnqByteCnt=mfrapPerfLmiTotalRxFullEnqByteCnt, mfrapTrapMutingActive=mfrapTrapMutingActive, mfrapCfgDteLineRate=mfrapCfgDteLineRate, mfrapUtilizationThreshold=mfrapUtilizationThreshold, mfrapT1PerfFreezeState=mfrapT1PerfFreezeState, mfrapCfgFrPerfLTDlciFilterTableClear=mfrapCfgFrPerfLTDlciFilterTableClear, mfrapLmiSeqNumMismatchT1Trap=mfrapLmiSeqNumMismatchT1Trap, mfrapTftpCorruptFileTrap=mfrapTftpCorruptFileTrap, mfrapCfgLcdPswdTimeout=mfrapCfgLcdPswdTimeout, mfrapCfgDteDcdOutput=mfrapCfgDteDcdOutput, mfrapPerfRoutingPerDlciRxNetbios=mfrapPerfRoutingPerDlciRxNetbios, mfrapPerfLmiPerDlciTxFullEnqByteCnt=mfrapPerfLmiPerDlciTxFullEnqByteCnt, mfrapPerfIcmpPerDlciTable=mfrapPerfIcmpPerDlciTable, mfrapPerfApplicationTotalTxFtp=mfrapPerfApplicationTotalTxFtp, mfrapPerfApplicationPerDlciRxCustom1=mfrapPerfApplicationPerDlciRxCustom1, mfrap=mfrap, mfrapPerfThruputPerDlciRxThruput=mfrapPerfThruputPerDlciRxThruput, mfrapStatusMgmtTable=mfrapStatusMgmtTable, mfrapPerfMgmtIpIPInAddrErr=mfrapPerfMgmtIpIPInAddrErr, mfrapPerfThruputPerDlciOutageCount=mfrapPerfThruputPerDlciOutageCount, mfrapPerfIcmpPerDlciTxEchoReq=mfrapPerfIcmpPerDlciTxEchoReq, mfrapCfgT1LboSetting=mfrapCfgT1LboSetting, mfrapPerfArpTotalRxTotal=mfrapPerfArpTotalRxTotal, mfrapCfgDteDtr=mfrapCfgDteDtr, mfrapDiagDteLclLpbk=mfrapDiagDteLclLpbk, mfrapPerfIcmpPerDlciRxTotal=mfrapPerfIcmpPerDlciRxTotal, mfrapPerfCirTxPercentUtilizationRange7=mfrapPerfCirTxPercentUtilizationRange7, mfrapPerfIpTotalTxIgrp=mfrapPerfIpTotalTxIgrp, mfrapNestFanTwoAlarm=mfrapNestFanTwoAlarm, mfrapPerfMgmtIpIFInOctets=mfrapPerfMgmtIpIFInOctets, mfrapPerfThruputCmdCountsStsDlciResetAll=mfrapPerfThruputCmdCountsStsDlciResetAll, mfrapVnipTopoVLOOPStatus=mfrapVnipTopoVLOOPStatus, mfrapDiagVnipDlci=mfrapDiagVnipDlci, mfrapPerfArpPerDlciTxInarpRep=mfrapPerfArpPerDlciTxInarpRep, mfrapPerfNetwLongTermProtocol=mfrapPerfNetwLongTermProtocol, mfrapPerfCurrentAggregateUtilization=mfrapPerfCurrentAggregateUtilization, mfrapCsuLoopDownCompletedTrap=mfrapCsuLoopDownCompletedTrap, mfrapPvcTxUtilizationClearedTrap=mfrapPvcTxUtilizationClearedTrap, mfrapCsuLoopbackEnabledTrap=mfrapCsuLoopbackEnabledTrap, mfrapCfgAppType=mfrapCfgAppType, mfrapCfgCommBaud=mfrapCfgCommBaud, mfrapPerfThruputPerDlciTxThruput=mfrapPerfThruputPerDlciTxThruput, mfrapPerfApplicationPerDlciInterval=mfrapPerfApplicationPerDlciInterval, mfrapPerfIpxTotalRxTotal=mfrapPerfIpxTotalRxTotal, mfrapPerfCirPercentUtilizationDlciValue=mfrapPerfCirPercentUtilizationDlciValue, mfrapPerfNetwLongTermAltDlci=mfrapPerfNetwLongTermAltDlci, mfrapCfgTransitDelayRcvSummaryCancel=mfrapCfgTransitDelayRcvSummaryCancel, mfrapCfgFrPerfLTProtocolFilterEntry=mfrapCfgFrPerfLTProtocolFilterEntry, mfrapPerfIcmpTotalRxGmQuery=mfrapPerfIcmpTotalRxGmQuery, mfrapPerfApplicationPerDlciTxHttp=mfrapPerfApplicationPerDlciTxHttp, mfrapDandiTotalSEFSs=mfrapDandiTotalSEFSs, mfrapStatusDandiMode=mfrapStatusDandiMode, sync=sync, mfrapPerfSnaTotalRxTotal=mfrapPerfSnaTotalRxTotal, mfrapPerfIcmpPerDlciTxParamProb=mfrapPerfIcmpPerDlciTxParamProb, mfrapPerfThruputPerDlciCirType=mfrapPerfThruputPerDlciCirType, mfrapPerfApplicationTotalTxCustom2=mfrapPerfApplicationTotalTxCustom2, mfrapPerfThruputPerDlciValue=mfrapPerfThruputPerDlciValue, mfrapSysMLSupported=mfrapSysMLSupported, mfrapPerfIpxPerDlciInterval=mfrapPerfIpxPerDlciInterval, mfrapPerfApplicationTotalRxCustom1=mfrapPerfApplicationTotalRxCustom1, mfrapCfgSnmpDandIPortTrapEnable=mfrapCfgSnmpDandIPortTrapEnable, mfrapCfgFrTable=mfrapCfgFrTable, mfrapPerfIcmpTotalRxTimestpRep=mfrapPerfIcmpTotalRxTimestpRep, mfrapPerfIpxPerDlciValue=mfrapPerfIpxPerDlciValue, mfrapPerfIcmpTotalTxDestUnr=mfrapPerfIcmpTotalTxDestUnr, mfrapCfgT1LineEncoding=mfrapCfgT1LineEncoding, mfrapCfgDandiFraming=mfrapCfgDandiFraming, mfrapDiagVnipTable=mfrapDiagVnipTable, mfrapPerfApplicationTotalTxTftp=mfrapPerfApplicationTotalTxTftp, mfrapPerfIpxPerDlciTxNcp=mfrapPerfIpxPerDlciTxNcp, mfrapPerfIpxPerDlciTxRip=mfrapPerfIpxPerDlciTxRip, mfrapPerfArpPerDlciRxRarpRep=mfrapPerfArpPerDlciRxRarpRep, mfrapLocalPayloadLoopbackFailedTrap=mfrapLocalPayloadLoopbackFailedTrap, mfrapStatusLedTable=mfrapStatusLedTable, mfrapPerfMgmtIpIPInRcv=mfrapPerfMgmtIpIPInRcv, mfrapSysSLIPSupported=mfrapSysSLIPSupported, mfrapCfgFrPerfDlciDefaultUtilThreshold=mfrapCfgFrPerfDlciDefaultUtilThreshold, mfrapLocalConfigTrap=mfrapLocalConfigTrap, mfrapPerfNetwProtoTotalTxAnnexG=mfrapPerfNetwProtoTotalTxAnnexG, mfrapPerfRoutingTotalRxOspf=mfrapPerfRoutingTotalRxOspf, mfrapPerfIcmpPerDlciRxEchoRep=mfrapPerfIcmpPerDlciRxEchoRep, mfrapT1CurrentOofEvents=mfrapT1CurrentOofEvents, mfrapPerfNetwProtoPerDlciTxOther=mfrapPerfNetwProtoPerDlciTxOther, mfrapStatusDteCts=mfrapStatusDteCts, mfrapCfgCurrentConnEntry=mfrapCfgCurrentConnEntry, mfrapLmiSourcingChangePassthruTrap=mfrapLmiSourcingChangePassthruTrap, mfrapPerfRoutingPerDlciRxOspf=mfrapPerfRoutingPerDlciRxOspf, mfrapPerfCirRxPercentUtilizationRange8=mfrapPerfCirRxPercentUtilizationRange8, mfrapt1netwredalarmdeclare=mfrapt1netwredalarmdeclare, mfrapBertInitiatedTrap=mfrapBertInitiatedTrap, mfrapPerfThruputPerDlciEntry=mfrapPerfThruputPerDlciEntry, mfrapPerfSnaTotalTxSubarea=mfrapPerfSnaTotalTxSubarea, mfrapPerfNetwProtoTotalTxVnip=mfrapPerfNetwProtoTotalTxVnip, mfrapPerfIcmpPerDlciTxGmQuery=mfrapPerfIcmpPerDlciTxGmQuery, mfrapPerfCurrentPerDlciUtilizationEntry=mfrapPerfCurrentPerDlciUtilizationEntry, mfrapPerfThruputPerIntfRxFrameCnt=mfrapPerfThruputPerIntfRxFrameCnt, mfrapPerfNetwProtoTotalTxTotal=mfrapPerfNetwProtoTotalTxTotal, mfrapPerfRoutingTotalEntry=mfrapPerfRoutingTotalEntry, mfrapPerfRoutingTotalTable=mfrapPerfRoutingTotalTable, mfrapVbertStopped=mfrapVbertStopped, mfrapDiagBertState=mfrapDiagBertState, mfrapVnipTopologyLocalDlci=mfrapVnipTopologyLocalDlci, mfrapPerfLmiPerDlciTxTotalByteCnt=mfrapPerfLmiPerDlciTxTotalByteCnt, mfrapPerfRoutingTotalTxNetbios=mfrapPerfRoutingTotalTxNetbios, mfrapDandiRedalArmclear=mfrapDandiRedalArmclear, mfrapStatus=mfrapStatus, mfrapPerfCirPercentUtilizationInterval=mfrapPerfCirPercentUtilizationInterval, mfrapPerfT1TotalTable=mfrapPerfT1TotalTable, mfrapCfgID=mfrapCfgID, mfrapPerfNetwProtoTotalRxTotal=mfrapPerfNetwProtoTotalRxTotal, mfrapPerfApplicationTotalRxHttp=mfrapPerfApplicationTotalRxHttp, mfrapPerfIpxTotalTxSap=mfrapPerfIpxTotalTxSap, mfrapDiagT1LocLineLpbk=mfrapDiagT1LocLineLpbk, mfrapInterface=mfrapInterface, mfrapTrap=mfrapTrap, mfrapStatusDteDsr=mfrapStatusDteDsr, mfrapCfgFrPerfLTProtocolFilterIndex=mfrapCfgFrPerfLTProtocolFilterIndex, mfrapPerfSnaTotalTxNetbios=mfrapPerfSnaTotalTxNetbios, mfrapSysTKRSupported=mfrapSysTKRSupported, mfrapStatusDteStatusLED=mfrapStatusDteStatusLED, mfrapDandiSyncLossDeclare=mfrapDandiSyncLossDeclare, mfrapDandiCurrentLCVs=mfrapDandiCurrentLCVs, mfrapDiagDteTimeRemaining=mfrapDiagDteTimeRemaining, mfrapDandIaisDetect=mfrapDandIaisDetect, mfrapPerfArpTotalTxInarpReq=mfrapPerfArpTotalTxInarpReq, mfrapPerfLmiTotalEntry=mfrapPerfLmiTotalEntry, mfrapT1IntervalLCVs=mfrapT1IntervalLCVs, mfrapPerfSnaTotalTable=mfrapPerfSnaTotalTable, mfrapPerfIpxPerDlciTxTotal=mfrapPerfIpxPerDlciTxTotal, mfrapCfgTelnetCliLcdPassword=mfrapCfgTelnetCliLcdPassword, mfrapPerfThruputPerDlciRxByte=mfrapPerfThruputPerDlciRxByte, mfrapDsuLoopbackFailedTrap=mfrapDsuLoopbackFailedTrap, mfrapPerfApplicationTotalTxSmtp=mfrapPerfApplicationTotalTxSmtp, mfrapDiagBertErrSec=mfrapDiagBertErrSec, mfrapT1TotalSEFSs=mfrapT1TotalSEFSs, mfrapPerfArpPerDlciTable=mfrapPerfArpPerDlciTable, mfrapCfgFrPerfTimersSTInterval=mfrapCfgFrPerfTimersSTInterval, mfrapSysExtTimSupported=mfrapSysExtTimSupported, mfrapT1TotalESs=mfrapT1TotalESs, mfrapPerfThruputPerIntfRxAbortCnt=mfrapPerfThruputPerIntfRxAbortCnt, mfrapSysNumDteInstalled=mfrapSysNumDteInstalled, mfrapLocalUnitLoopbackFailedTrap=mfrapLocalUnitLoopbackFailedTrap, mfrapDiagBertStatus=mfrapDiagBertStatus, mfrapLocalDteLoopbackDisabledTrap=mfrapLocalDteLoopbackDisabledTrap, mfrapPerfLmiPerDlciEntry=mfrapPerfLmiPerDlciEntry, mfrapCfgFrPerfLTDlciFilterTable=mfrapCfgFrPerfLTDlciFilterTable, mfrapDsuLoopbackEnabledTrap=mfrapDsuLoopbackEnabledTrap, mfrapSysRDOSupported=mfrapSysRDOSupported, mfrapCfgEditConnSrcPort=mfrapCfgEditConnSrcPort, mfrapPerfNetwProtoTotalRxIpx=mfrapPerfNetwProtoTotalRxIpx, mfrapPerfMgmtIpICMPOutErrors=mfrapPerfMgmtIpICMPOutErrors, mfrapCfgIpMyIP=mfrapCfgIpMyIP, mfrapCfgDteClockMode=mfrapCfgDteClockMode, mfrapCfgFrPerfDlciNamesDlciName=mfrapCfgFrPerfDlciNamesDlciName, mfrapPerfApplicationTotalRxFtp=mfrapPerfApplicationTotalRxFtp, mfrapPerfIpxTotalTxSpx=mfrapPerfIpxTotalTxSpx)
mibBuilder.exportSymbols("MFRAP-MIB", mfrapCfgSnmpMgrTable=mfrapCfgSnmpMgrTable, mfrapPerfNetwLongTermDlci=mfrapPerfNetwLongTermDlci, mfrapPerfThruputCmdCountsStsDlciReset=mfrapPerfThruputCmdCountsStsDlciReset, mfrapNestPowerSupplyAlarmClear=mfrapNestPowerSupplyAlarmClear, mfrapPerfT1CurrentTable=mfrapPerfT1CurrentTable, mfrapDiagBertTimeElaps=mfrapDiagBertTimeElaps, mfrapDiagDandiLocLineLpbk=mfrapDiagDandiLocLineLpbk, mfrapPerfIcmpTotalTxGmReduct=mfrapPerfIcmpTotalTxGmReduct, mfrapPerfApplicationTotalRxSnmpTrap=mfrapPerfApplicationTotalRxSnmpTrap, mfrapPerfIpxTotalRxNcp=mfrapPerfIpxTotalRxNcp, mfrapPerfApplicationPerDlciTxCustom2=mfrapPerfApplicationPerDlciTxCustom2, mfrapt1netwsyncacquire=mfrapt1netwsyncacquire, mfrapPerfIcmpTotalRxTotal=mfrapPerfIcmpTotalRxTotal, mfrapDandiCurrentEntry=mfrapDandiCurrentEntry, mfrapPerfSnaPerDlciTxNetbios=mfrapPerfSnaPerDlciTxNetbios, mfrapPerfThruputPerIntfEntry=mfrapPerfThruputPerIntfEntry, mfrapPerfNetwProtoPerDlciRxIpx=mfrapPerfNetwProtoPerDlciRxIpx, mfrapSysBRISupported=mfrapSysBRISupported, mfrapCfgFrPerfDlciNamesUtilThreshold=mfrapCfgFrPerfDlciNamesUtilThreshold, mfrapDandiTotalBESs=mfrapDandiTotalBESs, mfrapCfgEditConnSrcDs0=mfrapCfgEditConnSrcDs0, mfrapPerfSnaPerDlciTxTotal=mfrapPerfSnaPerDlciTxTotal, mfrapDiagDandiTimeRemaining=mfrapDiagDandiTimeRemaining, mfrapCfgDteTable=mfrapCfgDteTable, mfrapPerfArpTotalRxInarpReq=mfrapPerfArpTotalRxInarpReq, mfrapCfgMgmtTable=mfrapCfgMgmtTable, mfrapDiagT1Table=mfrapDiagT1Table, mfrapV54LoopUpInitiatedTrap=mfrapV54LoopUpInitiatedTrap, mfrapStatusT1ModeLED=mfrapStatusT1ModeLED, mfrapDiagDteSigDTR=mfrapDiagDteSigDTR, mfrapCfgFrPerfUserProtocolsTableClear=mfrapCfgFrPerfUserProtocolsTableClear, mfrapT1TotalUASs=mfrapT1TotalUASs, mfrapPerfIpPerDlciRxUdp=mfrapPerfIpPerDlciRxUdp, mfrapPerfSnaTotalRxOther=mfrapPerfSnaTotalRxOther, mfrapVloopUpViaRemote=mfrapVloopUpViaRemote, mfrapDandiSyncAcquire=mfrapDandiSyncAcquire, mfrapCfgTransitDelayEntry=mfrapCfgTransitDelayEntry, private=private, mfrapDandiCurrentCrc6Events=mfrapDandiCurrentCrc6Events, mfrapCfgSnmpMgrInterface=mfrapCfgSnmpMgrInterface, mfrapCfgVnipMode=mfrapCfgVnipMode, mfrapCfgIpTable=mfrapCfgIpTable, mfrapPerfIpxPerDlciRxNcp=mfrapPerfIpxPerDlciRxNcp, mfrapPerfCirRxPercentUtilizationRange4=mfrapPerfCirRxPercentUtilizationRange4, mfrapCfgTransitDelayThreshold=mfrapCfgTransitDelayThreshold, mfrapPerfIpTotalRxIcmp=mfrapPerfIpTotalRxIcmp, mfrapPerfApplicationTotalRxTelnet=mfrapPerfApplicationTotalRxTelnet, mfrapPerfIpxPerDlciRxNetbios=mfrapPerfIpxPerDlciRxNetbios, mfrapPerfIpxTotalTxNcp=mfrapPerfIpxTotalTxNcp, mfrapPerfArpTotalTxTotal=mfrapPerfArpTotalTxTotal, mfrapPerfThruputCmdReplaceDlciEntry=mfrapPerfThruputCmdReplaceDlciEntry, mfrapPerfArpPerDlciEntry=mfrapPerfArpPerDlciEntry, mfrapLocalDandiLineLoopbackDisabledTrap=mfrapLocalDandiLineLoopbackDisabledTrap, mfrapDandiCurrentOofEvents=mfrapDandiCurrentOofEvents, mfrapCfgDteConnDensity=mfrapCfgDteConnDensity, mfrapDandiPerfCmdTypeTable=mfrapDandiPerfCmdTypeTable, mfrapSysSerialNo=mfrapSysSerialNo, mfrapStatusNestFanTwo=mfrapStatusNestFanTwo, mfrapPerfThruputPerIntfRxByteCnt=mfrapPerfThruputPerIntfRxByteCnt, mfrapTftpHostUnreachableTrap=mfrapTftpHostUnreachableTrap, mfrapPerfLmiTotalRxTotalByteCnt=mfrapPerfLmiTotalRxTotalByteCnt, mfrapCfgFrPerfDlciNamesDelete=mfrapCfgFrPerfDlciNamesDelete, mfrapCfgT1Table=mfrapCfgT1Table, mfrapCfgVnipTable=mfrapCfgVnipTable, mfrapPerfNetwProtoPerDlciInterval=mfrapPerfNetwProtoPerDlciInterval, mfrapDLCITDThresholdTrap=mfrapDLCITDThresholdTrap, mfrapPerfCirTxPercentUtilizationRange3=mfrapPerfCirTxPercentUtilizationRange3, mfrapDiagVLOOP=mfrapDiagVLOOP, mfrapDsuLoopUpInitiatedTrap=mfrapDsuLoopUpInitiatedTrap, mfrapPerfIcmpTotalRxGmReduct=mfrapPerfIcmpTotalRxGmReduct, mfrapPerfThruputPerDlciUptime=mfrapPerfThruputPerDlciUptime, mfrapCfgFrCrcMode=mfrapCfgFrCrcMode, mfrapCfgTransitDelayTableClear=mfrapCfgTransitDelayTableClear, mfrapPerfApplicationTotalInterval=mfrapPerfApplicationTotalInterval, mfrapPvcRxUtilizationClearedTrap=mfrapPvcRxUtilizationClearedTrap, mfrapPerfLmiTotalTxOtherByteCnt=mfrapPerfLmiTotalTxOtherByteCnt, mfrapDandiYellowAlarmDetect=mfrapDandiYellowAlarmDetect, mfrapT1CurrentSESs=mfrapT1CurrentSESs, mfrapPerfRoutingTotalRxRip=mfrapPerfRoutingTotalRxRip, mfrapPerfIpPerDlciRxIgrp=mfrapPerfIpPerDlciRxIgrp, mfrapPerfMgmtIpIPInDlvrs=mfrapPerfMgmtIpIPInDlvrs, mfrapPerfThruputPerDlciPvcState=mfrapPerfThruputPerDlciPvcState, mfrapPerfIcmpTotalRxSrcQuench=mfrapPerfIcmpTotalRxSrcQuench, mfrapLocalDteLoopbackFailedTrap=mfrapLocalDteLoopbackFailedTrap, mfrapLocalNetLoopbackFailedTrap=mfrapLocalNetLoopbackFailedTrap, mfrapDiagVnipIndex=mfrapDiagVnipIndex, mfrapPerfNetwProtoPerDlciTable=mfrapPerfNetwProtoPerDlciTable, mfrapSysNumDlciNames=mfrapSysNumDlciNames, mfrapPerfArpTotalTxArpReq=mfrapPerfArpTotalTxArpReq, mfrapCfgVnipInactivityTimer=mfrapCfgVnipInactivityTimer, mfrapV54LoopbackEnabledTrap=mfrapV54LoopbackEnabledTrap, mfrapCfgDteConnStatus=mfrapCfgDteConnStatus, mfrapPerfIcmpPerDlciTxAddrMaskRep=mfrapPerfIcmpPerDlciTxAddrMaskRep, mfrapPerfIpxPerDlciRxTotal=mfrapPerfIpxPerDlciRxTotal, mfrapSysLocation=mfrapSysLocation, mfrapNestFanOneAlarm=mfrapNestFanOneAlarm, mfrapCfgFrDLCIMode=mfrapCfgFrDLCIMode, mfrapPerfIpPerDlciTxTotal=mfrapPerfIpPerDlciTxTotal, mfrapDandiIntervalCSSs=mfrapDandiIntervalCSSs, mfrapDiagDteV54Lpbk=mfrapDiagDteV54Lpbk, mfrapPerfMgmtIpICMPInParmProbs=mfrapPerfMgmtIpICMPInParmProbs, mfrapVnipTopoVBertRxDEClrFrames=mfrapVnipTopoVBertRxDEClrFrames, mfrapT1TotalCSSs=mfrapT1TotalCSSs, mfrapNestPowerSupplyAlarm=mfrapNestPowerSupplyAlarm, mfrapTftpSuccessTrap=mfrapTftpSuccessTrap, mfrapT1IntervalBESs=mfrapT1IntervalBESs, mfrapCfgAppPerfBuffLimit=mfrapCfgAppPerfBuffLimit, mfrapPerfArpTotalRxRarpReq=mfrapPerfArpTotalRxRarpReq, mfrapDandiCarrierLoss=mfrapDandiCarrierLoss, mfrapPerfDandiCurrentTable=mfrapPerfDandiCurrentTable, mfrapCfgSnmpTable=mfrapCfgSnmpTable, mfrapCfgCurrentConnSrcDs0=mfrapCfgCurrentConnSrcDs0, mfrapPerfRoutingPerDlciTxRip=mfrapPerfRoutingPerDlciTxRip, mfrapPerfRoutingPerDlciTxNetbios=mfrapPerfRoutingPerDlciTxNetbios, mfrapPerfNetwProtoTotalRxCisco=mfrapPerfNetwProtoTotalRxCisco, mfrapPerfLmiTotalRxLivoEnqByteCnt=mfrapPerfLmiTotalRxLivoEnqByteCnt, mfrapLmiSourcingChangeNetT1Trap=mfrapLmiSourcingChangeNetT1Trap, mfrapDiagDteTable=mfrapDiagDteTable, mfrapPerfNetwProtoPerDlciTxIp=mfrapPerfNetwProtoPerDlciTxIp, mfrapPerfIpTotalRxTcp=mfrapPerfIpTotalRxTcp, mfrapT1CurrentBESs=mfrapT1CurrentBESs, mfrapPerfNetwProtoPerDlciTxAnnexG=mfrapPerfNetwProtoPerDlciTxAnnexG, mfrapPerfApplicationPerDlciEntry=mfrapPerfApplicationPerDlciEntry, mfrapVnipTopoVBertTxDEClrFrames=mfrapVnipTopoVBertTxDEClrFrames, mfrapPerfSnaPerDlciTxPeriph=mfrapPerfSnaPerDlciTxPeriph, mfrapPerfIcmpPerDlciTxPktTooBig=mfrapPerfIcmpPerDlciTxPktTooBig, mfrapDandiRedAlarmDeclare=mfrapDandiRedAlarmDeclare, mfrapPerfNetwLongTermEntry=mfrapPerfNetwLongTermEntry, mfrapT1IntervalESs=mfrapT1IntervalESs, mfrapPerfCirTxPercentUtilizationRange8=mfrapPerfCirTxPercentUtilizationRange8, mfrapCfgFrPerfDlciNamesEirValue=mfrapCfgFrPerfDlciNamesEirValue, mfrapStatusMgmtDefaultDLCINo=mfrapStatusMgmtDefaultDLCINo, mfrapPerfIcmpTotalTxTotal=mfrapPerfIcmpTotalTxTotal, mfrapCfgFrPerfTimers=mfrapCfgFrPerfTimers, mfrapSysNumDlcisSupported=mfrapSysNumDlcisSupported, mfrapLocalAggregateLoopbackEnabledTrap=mfrapLocalAggregateLoopbackEnabledTrap, mfrapCfgAppCircuitId=mfrapCfgAppCircuitId, mfrapPerfNetwLongTermAltArray=mfrapPerfNetwLongTermAltArray, mfrapCfgCommMode=mfrapCfgCommMode, mfrapPerfMgmtIpICMPOutEchoReps=mfrapPerfMgmtIpICMPOutEchoReps, mfrapPerfArpPerDlciTxArpReq=mfrapPerfArpPerDlciTxArpReq, mfrapCfgCommDataBits=mfrapCfgCommDataBits, mfrapLocalDandiPayloadLoopbackDisabledTrap=mfrapLocalDandiPayloadLoopbackDisabledTrap, mfrapPerfIpxTotalRxOther=mfrapPerfIpxTotalRxOther, mfrapV54LoopDownCompletedTrap=mfrapV54LoopDownCompletedTrap, mfrapPerfIcmpTotalRxTimestpReq=mfrapPerfIcmpTotalRxTimestpReq, mfrapPerfThruputPerDlciChangeTime=mfrapPerfThruputPerDlciChangeTime, mfrapPerfLmiTotalTable=mfrapPerfLmiTotalTable, mfrapDiagT1RmtLpbkCmd=mfrapDiagT1RmtLpbkCmd, mfrapPerfCirPercentUtilizationTable=mfrapPerfCirPercentUtilizationTable, mfrapCfgTransitDelayTable=mfrapCfgTransitDelayTable, mfrapCfgSetCommunityString=mfrapCfgSetCommunityString, mfrapCfgEditConnDestPort=mfrapCfgEditConnDestPort, mfrapPerfSnaTotalTxPeriph=mfrapPerfSnaTotalTxPeriph, mfrapCfgConnectionTable=mfrapCfgConnectionTable, mfrapPerfMgmtIpUDPStatsTable=mfrapPerfMgmtIpUDPStatsTable, mfrapPerfThruputPerDlciAvailability=mfrapPerfThruputPerDlciAvailability, mfrapT1CurrentLCVs=mfrapT1CurrentLCVs, mfrapPerfIcmpPerDlciTxTimeExcd=mfrapPerfIcmpPerDlciTxTimeExcd, mfrapPerfIcmpTotalInterval=mfrapPerfIcmpTotalInterval, mfrapPerfIcmpTotalRxEchoRep=mfrapPerfIcmpTotalRxEchoRep, mfrapPerfIcmpTotalTxAddrMaskRep=mfrapPerfIcmpTotalTxAddrMaskRep, mfrapPerfApplicationPerDlciTxCustom1=mfrapPerfApplicationPerDlciTxCustom1, mfrapPerfIpxTotalRxSap=mfrapPerfIpxTotalRxSap, mfrapSysPrompt=mfrapSysPrompt, mfrapT1CurrentEntry=mfrapT1CurrentEntry, mfrapSysFeatureTable=mfrapSysFeatureTable, mfrapPerfIcmpTotalEntry=mfrapPerfIcmpTotalEntry, mfrapPerfApplicationPerDlciTxSnmpTrap=mfrapPerfApplicationPerDlciTxSnmpTrap, mfrapPerfSnaTotalTxAppn=mfrapPerfSnaTotalTxAppn, mfrapPerfIpTotalTxTcp=mfrapPerfIpTotalTxTcp, mfrapT1PerfCmdTypeTable=mfrapT1PerfCmdTypeTable, mfrapPerfIpPerDlciTxIgrp=mfrapPerfIpPerDlciTxIgrp, mfrapPerfArpTotalTxRarpRep=mfrapPerfArpTotalTxRarpRep, mfrapPerfArpTotalRxInarpRep=mfrapPerfArpTotalRxInarpRep, mfrapPerfNetwProtoPerDlciTxArp=mfrapPerfNetwProtoPerDlciTxArp, mfrapPerfLmiPerDlciInterval=mfrapPerfLmiPerDlciInterval, mfrapPerfThruputPerIntfRxCrcErrCnt=mfrapPerfThruputPerIntfRxCrcErrCnt, mfrapLocalPayloadLoopbackDisabledTrap=mfrapLocalPayloadLoopbackDisabledTrap, mfrapPerfApplicationPerDlciRxTftp=mfrapPerfApplicationPerDlciRxTftp, mfrapDandiCurrentCSSs=mfrapDandiCurrentCSSs, mfrapPerfSnaPerDlciRxPeriph=mfrapPerfSnaPerDlciRxPeriph, mfrapPerfLmiTotalTxFullStatByteCnt=mfrapPerfLmiTotalTxFullStatByteCnt, mfrapLmiSourcingChangeUserT1Trap=mfrapLmiSourcingChangeUserT1Trap, mfrapCfgIpPeerIP=mfrapCfgIpPeerIP, mfrapCfgEditConnections=mfrapCfgEditConnections, mfrapCfgAppLpbkTimeout=mfrapCfgAppLpbkTimeout, mfrapDiagT1LocAggrLpbk=mfrapDiagT1LocAggrLpbk, mfrapStatusDandiTable=mfrapStatusDandiTable, mfrapDandiIntervalUASs=mfrapDandiIntervalUASs, mfrapPerfIcmpPerDlciTxSrcQuench=mfrapPerfIcmpPerDlciTxSrcQuench, mfrapPerfApplicationPerDlciRxTelnet=mfrapPerfApplicationPerDlciRxTelnet, mfrapPerfIpxTotalRxSpx=mfrapPerfIpxTotalRxSpx, mfrapPerfThruputPerDlciEncapType=mfrapPerfThruputPerDlciEncapType, mfrapPerfLmiTotalRxFullStatByteCnt=mfrapPerfLmiTotalRxFullStatByteCnt, mfrapCfgDteRts=mfrapCfgDteRts, mfrapT1IntervalSESs=mfrapT1IntervalSESs, mfrapCfgSnmpMgrClearN=mfrapCfgSnmpMgrClearN, mfrapPerfThruputPerDlciCIR=mfrapPerfThruputPerDlciCIR, mfrapPerfIcmpPerDlciValue=mfrapPerfIcmpPerDlciValue, mfrapPerfApplicationTotalTxCustom4=mfrapPerfApplicationTotalTxCustom4, mfrapCfgFrDLCIEncap=mfrapCfgFrDLCIEncap, mfrapCsuLoopbackFailedTrap=mfrapCsuLoopbackFailedTrap, mfrapCfgLock=mfrapCfgLock, mfrapDandiIntervalBESs=mfrapDandiIntervalBESs, mfrapNestFanTwoAlarmClear=mfrapNestFanTwoAlarmClear, mfrapStatusMgmtInterface=mfrapStatusMgmtInterface, mfrapSysAmtMemoryInstalled=mfrapSysAmtMemoryInstalled, mfrapPerfMgmtIpICMPOutMsgs=mfrapPerfMgmtIpICMPOutMsgs, mfrapCfgTftpStatus=mfrapCfgTftpStatus, mfrapDandiIntervalLCVs=mfrapDandiIntervalLCVs, mfrapPerfIcmpTotalTxRedirect=mfrapPerfIcmpTotalTxRedirect, mfrapPerfIcmpPerDlciRxPktTooBig=mfrapPerfIcmpPerDlciRxPktTooBig, mfrapDandiTotalUASs=mfrapDandiTotalUASs, mfrapCfgDteIntfType=mfrapCfgDteIntfType, mfrapPerfNetwProtoPerDlciRxIp=mfrapPerfNetwProtoPerDlciRxIp, mfrapCfgDteStartDs0=mfrapCfgDteStartDs0, mfrapPerfNetwLongTermAltEntry=mfrapPerfNetwLongTermAltEntry, mfrapCfgUpdate=mfrapCfgUpdate, mfrapCfgFrPerfUserProtocolsTable=mfrapCfgFrPerfUserProtocolsTable, mfrapCfgSnmpMgrIndex=mfrapCfgSnmpMgrIndex, mfrapPerfCirTxPercentUtilizationRange5=mfrapPerfCirTxPercentUtilizationRange5, mfrapStatusT1Status=mfrapStatusT1Status, mfrapCfgEditLastSetStatus=mfrapCfgEditLastSetStatus, mfrapPercentUtilization=mfrapPercentUtilization, mfrapDiagBertErrors=mfrapDiagBertErrors, mfrapStatusDteTxLED=mfrapStatusDteTxLED, mfrapStatusMgmtChannel=mfrapStatusMgmtChannel, mfrapCfgVnipInitTimer=mfrapCfgVnipInitTimer, mfrapCfgCurrentConnDestPort=mfrapCfgCurrentConnDestPort, mfrapPerfMgmtIp=mfrapPerfMgmtIp, mfrapPerfApplicationPerDlciTxCustom4=mfrapPerfApplicationPerDlciTxCustom4, mfrapPerfIcmpPerDlciRxAddrMaskReq=mfrapPerfIcmpPerDlciRxAddrMaskReq, mfrapPerfIpxPerDlciTxSap=mfrapPerfIpxPerDlciTxSap, mfrapPerfIpxTotalInterval=mfrapPerfIpxTotalInterval, mfrapConfiguration=mfrapConfiguration, mfrapPerfMgmtIpTCPPassiveOpens=mfrapPerfMgmtIpTCPPassiveOpens, mfrapStatusLmiAutosense=mfrapStatusLmiAutosense, mfrapVnipTopologyDlci=mfrapVnipTopologyDlci, mfrapVloopDownViaRemote=mfrapVloopDownViaRemote, mfrapCfgIpChannel=mfrapCfgIpChannel, mfrapPerfIcmpPerDlciRxGmQuery=mfrapPerfIcmpPerDlciRxGmQuery, mfrapPerfIcmpPerDlciRxGmReduct=mfrapPerfIcmpPerDlciRxGmReduct, mfrapPerfRoutingPerDlciInterval=mfrapPerfRoutingPerDlciInterval, mfrapPerfLmiPerDlciTxOtherByteCnt=mfrapPerfLmiPerDlciTxOtherByteCnt, mfrapPerfIcmpPerDlciTxAddrMaskReq=mfrapPerfIcmpPerDlciTxAddrMaskReq, mfrapDandiControlledSlip=mfrapDandiControlledSlip, mfrapStatusT1StatusLED=mfrapStatusT1StatusLED, mfrapStatusDandiAlarms=mfrapStatusDandiAlarms, mfrapPerfRoutingTotalTxOspf=mfrapPerfRoutingTotalTxOspf, mfrapSysBootRev=mfrapSysBootRev, mfrapDiagUnitReset=mfrapDiagUnitReset, mfrapDiagVnipIpAddr=mfrapDiagVnipIpAddr, mfrapPerfCurrentPerDlciRxUtilization=mfrapPerfCurrentPerDlciRxUtilization)
mibBuilder.exportSymbols("MFRAP-MIB", mfrapPerfIcmpPerDlciRxEchoReq=mfrapPerfIcmpPerDlciRxEchoReq, mfrapCfgEditConnType=mfrapCfgEditConnType, mfrapCfgEditConnEntry=mfrapCfgEditConnEntry, mfrapPerfThruputCmdReplaceDlciTable=mfrapPerfThruputCmdReplaceDlciTable, mfrapCfgEditConnDestDs0=mfrapCfgEditConnDestDs0, mfrapPerfApplicationTotalEntry=mfrapPerfApplicationTotalEntry, mfrapCfgFrPerfLTProtocolFilterProtocol=mfrapCfgFrPerfLTProtocolFilterProtocol, mfrapDiagT1TimeRemaining=mfrapDiagT1TimeRemaining, mfrapPerfThruputPerDlciTxUtilizationStatus=mfrapPerfThruputPerDlciTxUtilizationStatus, mfrapPerfIpxPerDlciRxOther=mfrapPerfIpxPerDlciRxOther, mfrapPerfArpPerDlciTxArpRep=mfrapPerfArpPerDlciTxArpRep, mfrapStatusMgmtDefaultDLCIStatus=mfrapStatusMgmtDefaultDLCIStatus, mfrapPerfNetwProtoTotalTxArp=mfrapPerfNetwProtoTotalTxArp, mfrapPerfIcmpTotalTxTimestpRep=mfrapPerfIcmpTotalTxTimestpRep, mfrapPerfArpPerDlciInterval=mfrapPerfArpPerDlciInterval, mfrapEventTrapLogVarBind1=mfrapEventTrapLogVarBind1, Index=Index, mfrapPerfApplicationPerDlciRxSmtp=mfrapPerfApplicationPerDlciRxSmtp, mfrapTftpTransferringTrap=mfrapTftpTransferringTrap, mfrapDteSignalDtrOnTrap=mfrapDteSignalDtrOnTrap, mfrapPerfIpxTotalRxRip=mfrapPerfIpxTotalRxRip, mfrapPerfNetwProtoTotalTable=mfrapPerfNetwProtoTotalTable, mfrapPerfMgmtIpIPStatsTable=mfrapPerfMgmtIpIPStatsTable, mfrapLocalUnitLoopbackDisabledTrap=mfrapLocalUnitLoopbackDisabledTrap, mfrapDiagVBERTPktPercent=mfrapDiagVBERTPktPercent, mfrapPerfThruputPerDlciEIR=mfrapPerfThruputPerDlciEIR, mfrapDLCIActiveTrap=mfrapDLCIActiveTrap, mfrapPerfSnaPerDlciTable=mfrapPerfSnaPerDlciTable, mfrapPerfIpTotalTxTotal=mfrapPerfIpTotalTxTotal, mfrapPerfSnaPerDlciInterval=mfrapPerfSnaPerDlciInterval, mfrapTftpAbortedTrap=mfrapTftpAbortedTrap, mfrapDiagT1RmtLpbkStatus=mfrapDiagT1RmtLpbkStatus, mfrapCfgDandiLineEncoding=mfrapCfgDandiLineEncoding, mfrapT1IntervalSEFSs=mfrapT1IntervalSEFSs, mfrapPerfIcmpPerDlciRxDestUnr=mfrapPerfIcmpPerDlciRxDestUnr, mfrapCfgFrPerfTimersLTInterval=mfrapCfgFrPerfTimersLTInterval, mfrapPerfIpxTotalTxTotal=mfrapPerfIpxTotalTxTotal, mfrapPerfArpPerDlciTxRarpReq=mfrapPerfArpPerDlciTxRarpReq, mfrapLocalAggregateLoopbackFailedTrap=mfrapLocalAggregateLoopbackFailedTrap, mfrapLocalPayloadLoopbackEnabledViaRemoteTrap=mfrapLocalPayloadLoopbackEnabledViaRemoteTrap, mfrapCfgFrLmiInactivityTimeout=mfrapCfgFrLmiInactivityTimeout, mfrapPerfNetwProtoTotalEntry=mfrapPerfNetwProtoTotalEntry, mfrapPerfNetwProtoTotalRxIp=mfrapPerfNetwProtoTotalRxIp, mfrapPerfArpTotalInterval=mfrapPerfArpTotalInterval, mfrapDandiYellowAlarmClear=mfrapDandiYellowAlarmClear, mfrapPerfIcmpPerDlciTxTotal=mfrapPerfIcmpPerDlciTxTotal, mfrapCfgFrPerfDlciUtilDuration=mfrapCfgFrPerfDlciUtilDuration, mfrapLmiSourcing=mfrapLmiSourcing, mfrapCfgCurrentConnSrcPort=mfrapCfgCurrentConnSrcPort, mfrapCfgEditConnCopyCurrtoEdit=mfrapCfgEditConnCopyCurrtoEdit, mfrapCfgTftpInitiate=mfrapCfgTftpInitiate, mfrapStatusMgmtInterfaceStatus=mfrapStatusMgmtInterfaceStatus, mfrapVloopUp=mfrapVloopUp, mfrapPerfLmiTotalTxTotalByteCnt=mfrapPerfLmiTotalTxTotalByteCnt, mfrapDandiCarrierDetect=mfrapDandiCarrierDetect, mfrapPerfApplicationPerDlciValue=mfrapPerfApplicationPerDlciValue, mfrapPerfArpPerDlciRxRarpReq=mfrapPerfArpPerDlciRxRarpReq, mfrapCfgUnlock=mfrapCfgUnlock, mfrapPerfArpPerDlciTxTotal=mfrapPerfArpPerDlciTxTotal, mfrapLocalDteLoopbackEnabledTrap=mfrapLocalDteLoopbackEnabledTrap, mfrapt1netwyellowalarmdetect=mfrapt1netwyellowalarmdetect, mfrapCfgFrPerfDlciNamesTable=mfrapCfgFrPerfDlciNamesTable, mfrapVnipTopoTDNumSamples=mfrapVnipTopoTDNumSamples, mfrapVnipTopoVBertRxDESetFrames=mfrapVnipTopoVBertRxDESetFrames, mfrapPerfApplicationPerDlciTxFtp=mfrapPerfApplicationPerDlciTxFtp, mfrapStatusT1Mode=mfrapStatusT1Mode, mfrapCfgCommModeAutoDetect=mfrapCfgCommModeAutoDetect, mfrapPerfThruputPerDlciRxUtilizationStatus=mfrapPerfThruputPerDlciRxUtilizationStatus, mfrapLocalPayloadLoopbackEnabledTrap=mfrapLocalPayloadLoopbackEnabledTrap, mfrapPerfNetwProtoPerDlciRxTotal=mfrapPerfNetwProtoPerDlciRxTotal, mfrapPerfNetwProtoTotalRxSna=mfrapPerfNetwProtoTotalRxSna, mfrapPerfThruputPerDlciCreateTime=mfrapPerfThruputPerDlciCreateTime, mfrapCfgTftpPassword=mfrapCfgTftpPassword, mfrapCfgFrPerfDlciNamesEntry=mfrapCfgFrPerfDlciNamesEntry, mfrapLocalDandiPayloadLoopbackFailureTrap=mfrapLocalDandiPayloadLoopbackFailureTrap, mfrapNestFanOneAlarmClear=mfrapNestFanOneAlarmClear, mfrapVnipTopoTDMaxDelay=mfrapVnipTopoTDMaxDelay, mfrapCfgDteChannelDensity=mfrapCfgDteChannelDensity, mfrapPerfNetwProtoPerDlciEntry=mfrapPerfNetwProtoPerDlciEntry, mfrapPerfSnaPerDlciRxNetbios=mfrapPerfSnaPerDlciRxNetbios, mfrapSysResetNode=mfrapSysResetNode, mfrapPerfApplicationTotalTable=mfrapPerfApplicationTotalTable, mfrapPerfArpPerDlciTxOther=mfrapPerfArpPerDlciTxOther, mfrapPerfThruputCmdClearAllIntfStats=mfrapPerfThruputCmdClearAllIntfStats, mfrapLmiSourcingChangeNetDteTrap=mfrapLmiSourcingChangeNetDteTrap, mfrapPerfSnaPerDlciEntry=mfrapPerfSnaPerDlciEntry, mfrapDiagDteRmtV54Lpbk=mfrapDiagDteRmtV54Lpbk, mfrapCfgLcdPswdEnable=mfrapCfgLcdPswdEnable, mfrapCfgSnmpFrTrap=mfrapCfgSnmpFrTrap, mfrapDiagBertResyncs=mfrapDiagBertResyncs, mfrapPerfIpPerDlciTable=mfrapPerfIpPerDlciTable, mfrapVbertStarted=mfrapVbertStarted, mfrapCfgFrLmiKeepaliveTimeout=mfrapCfgFrLmiKeepaliveTimeout, mfrapPerfApplicationPerDlciTxTelnet=mfrapPerfApplicationPerDlciTxTelnet, mfrapSysHardRev=mfrapSysHardRev, mfrapCfgIpMask=mfrapCfgIpMask, mfrapPerfIcmpPerDlciRxTimestpReq=mfrapPerfIcmpPerDlciRxTimestpReq, mfrapPerfCirRxPercentUtilizationRange3=mfrapPerfCirRxPercentUtilizationRange3, mfrapPerfT1IntervalTable=mfrapPerfT1IntervalTable, mfrapPerfThruputPerIntfIndex=mfrapPerfThruputPerIntfIndex, mfrapPerfThruputCmdAllStsDlciReset=mfrapPerfThruputCmdAllStsDlciReset, mfrapPerfApplicationTotalRxSnmp=mfrapPerfApplicationTotalRxSnmp, mfrapPerfArpPerDlciRxOther=mfrapPerfArpPerDlciRxOther, mfrapDandiCurrentBESs=mfrapDandiCurrentBESs, mfrapPerfIpTotalTxIcmp=mfrapPerfIpTotalTxIcmp, mfrapCfgCurrentConnType=mfrapCfgCurrentConnType, mfrapPerfArpPerDlciRxArpRep=mfrapPerfArpPerDlciRxArpRep, mfrapPerfIcmpTotalTable=mfrapPerfIcmpTotalTable, mfrapPerfNetworkLongTermCommands=mfrapPerfNetworkLongTermCommands, mfrapStatusNestSlotId=mfrapStatusNestSlotId, mfrapPerfMgmtIpIPInDscrd=mfrapPerfMgmtIpIPInDscrd, mfrapPerfNetwProtoPerDlciTxVnip=mfrapPerfNetwProtoPerDlciTxVnip, mfrapT1IntervalIndex=mfrapT1IntervalIndex, mfrapPerfMgmtIpICMPStatsTable=mfrapPerfMgmtIpICMPStatsTable, mfrapt1netwaisclear=mfrapt1netwaisclear, mfrapPerfCurrentPerDlciAggregateUtilization=mfrapPerfCurrentPerDlciAggregateUtilization, mfrapPerfNetwProtoPerDlciRxArp=mfrapPerfNetwProtoPerDlciRxArp, mfrapT1CurrentCrc6Events=mfrapT1CurrentCrc6Events, mfrapDiagUnitTimeRemaining=mfrapDiagUnitTimeRemaining, mfrapCfgFrDLCIValue=mfrapCfgFrDLCIValue, mfrapStatusDandiStatusLED=mfrapStatusDandiStatusLED, mfrapPerfSnaTotalEntry=mfrapPerfSnaTotalEntry, mfrapt1netwyellowalarmclear=mfrapt1netwyellowalarmclear, mfrapDteSignalDtrOffTrap=mfrapDteSignalDtrOffTrap, mfrapCfgDteCtsOutput=mfrapCfgDteCtsOutput, mfrapPerfLmiPerDlciRxLivoStatByteCnt=mfrapPerfLmiPerDlciRxLivoStatByteCnt, mfrapVloopRequestFailed=mfrapVloopRequestFailed, mfrapPerfArpTotalRxOther=mfrapPerfArpTotalRxOther, mfrapTftpRequestedTrap=mfrapTftpRequestedTrap, mfrapDandiTotalLCVs=mfrapDandiTotalLCVs, mfrapPerfSnaPerDlciRxTotal=mfrapPerfSnaPerDlciRxTotal, mfrapSysNestId=mfrapSysNestId, mfrapPerfMgmtIpICMPInDestUnreachs=mfrapPerfMgmtIpICMPInDestUnreachs, mfrapDiagVnipInterface=mfrapDiagVnipInterface, mfrapDandiCurrentUASs=mfrapDandiCurrentUASs, mfrapDandiTotalSESs=mfrapDandiTotalSESs, mfrapPerfIcmpPerDlciRxTimestpRep=mfrapPerfIcmpPerDlciRxTimestpRep, mfrapPerfCurrentUnitUtilization=mfrapPerfCurrentUnitUtilization, mfrapSysName=mfrapSysName, mfrapStatusDandiStatus=mfrapStatusDandiStatus, mfrapPerfRoutingPerDlciTxOspf=mfrapPerfRoutingPerDlciTxOspf, mfrapPerfIcmpPerDlciTxTimestpReq=mfrapPerfIcmpPerDlciTxTimestpReq, mfrapDiagVBERTTestPeriod=mfrapDiagVBERTTestPeriod, mfrapCfgIpTelnetEnable=mfrapCfgIpTelnetEnable, mfrapPerfApplicationTotalRxSmtp=mfrapPerfApplicationTotalRxSmtp, mfrapPerfIpTotalTable=mfrapPerfIpTotalTable, mfrapPerfCirTxPercentUtilizationRange2=mfrapPerfCirTxPercentUtilizationRange2, enterprises=enterprises, mfrapPerfCurrentPerDlciTxUtilization=mfrapPerfCurrentPerDlciTxUtilization, mfrapLocalNetLoopbackDisabledTrap=mfrapLocalNetLoopbackDisabledTrap, mfrapPerfThruputPerDlciMTTSR=mfrapPerfThruputPerDlciMTTSR, mfrapPerfIpPerDlciRxIcmp=mfrapPerfIpPerDlciRxIcmp, mfrapPerfApplicationPerDlciRxSnmp=mfrapPerfApplicationPerDlciRxSnmp, mfrapPerfLmiPerDlciValue=mfrapPerfLmiPerDlciValue, mfrapPerfNetwProtoTotalTxSna=mfrapPerfNetwProtoTotalTxSna, mfrapCfgAppTable=mfrapCfgAppTable, mfrapCfgTftpDlci=mfrapCfgTftpDlci, mfrapCfgEditConnTable=mfrapCfgEditConnTable, mfrapPerfNetwProtoTotalRxAnnexG=mfrapPerfNetwProtoTotalRxAnnexG, mfrapPerfIcmpPerDlciRxParamProb=mfrapPerfIcmpPerDlciRxParamProb, mfrapDiagDteSigRTS=mfrapDiagDteSigRTS, mfrapPerfMgmtIpUDPNoPorts=mfrapPerfMgmtIpUDPNoPorts, mfrapPerfNetwProtoPerDlciValue=mfrapPerfNetwProtoPerDlciValue, mfrapPerfApplicationTotalTxCustom3=mfrapPerfApplicationTotalTxCustom3, mfrapt1netwredalarmclear=mfrapt1netwredalarmclear, mfrapPerfThruputCmdReplaceDlciValue=mfrapPerfThruputCmdReplaceDlciValue, mfrapCfgSnmpMgrIP=mfrapCfgSnmpMgrIP, mfrapVnipTopologyEntry=mfrapVnipTopologyEntry, mfrapPerfArpPerDlciRxInarpReq=mfrapPerfArpPerDlciRxInarpReq, mfrapVnipTransitDelayClear=mfrapVnipTransitDelayClear, mfrapPerfCurrentPerDlciUtilizationDlciValue=mfrapPerfCurrentPerDlciUtilizationDlciValue, mfrapPerfNetwLongTermAltProtocol=mfrapPerfNetwLongTermAltProtocol, mfrapCfgCliPassword=mfrapCfgCliPassword, mfrapPerfIpPerDlciRxTcp=mfrapPerfIpPerDlciRxTcp, mfrapPerfIcmpTotalRxAddrMaskReq=mfrapPerfIcmpTotalRxAddrMaskReq, mfrapPerfSnaTotalInterval=mfrapPerfSnaTotalInterval, mfrapPerfArpPerDlciTxInarpReq=mfrapPerfArpPerDlciTxInarpReq, mfrapPerfLmiTotalDlciValue=mfrapPerfLmiTotalDlciValue, mfrapCfgTftpTable=mfrapCfgTftpTable, mfrapLocalUnitLoopbackEnabledTrap=mfrapLocalUnitLoopbackEnabledTrap, mfrapV54LoopbackDisabledTrap=mfrapV54LoopbackDisabledTrap, mfrapSysNumSnmpMgrs=mfrapSysNumSnmpMgrs, mfrapStatusNestFanOne=mfrapStatusNestFanOne, mfrapPerfIpTotalTxUdp=mfrapPerfIpTotalTxUdp, mfrapPerfRoutingPerDlciTable=mfrapPerfRoutingPerDlciTable, mfrapPerfThruputPerDlciTxByte=mfrapPerfThruputPerDlciTxByte, mfrapCfgEditClearEdit=mfrapCfgEditClearEdit, mfrapDiagVBERTSize=mfrapDiagVBERTSize, mfrapTftpProgrammingTrap=mfrapTftpProgrammingTrap, mfrapPerfCurrentPerDlciUtilizationTable=mfrapPerfCurrentPerDlciUtilizationTable, mfrapPerfIcmpPerDlciTxTimestpRep=mfrapPerfIcmpPerDlciTxTimestpRep, mfrapPerfCirTxPercentUtilizationRange1=mfrapPerfCirTxPercentUtilizationRange1, mfrapPerfNetwProtoTotalTxIp=mfrapPerfNetwProtoTotalTxIp, mfrapPerfMgmtIpUDPInDatagrams=mfrapPerfMgmtIpUDPInDatagrams, mfrapPerfIpTotalEntry=mfrapPerfIpTotalEntry, mfrapPerfThruputCommands=mfrapPerfThruputCommands, mfrapDandiIntervalESs=mfrapDandiIntervalESs, mfrapDiagDandiTable=mfrapDiagDandiTable, mfrapPerfThruputCmdClearDteStats=mfrapPerfThruputCmdClearDteStats, mfrapPerfSnaPerDlciRxAppn=mfrapPerfSnaPerDlciRxAppn, mfrapPerfIcmpTotalTxAddrMaskReq=mfrapPerfIcmpTotalTxAddrMaskReq, mfrapSysSelDTESupported=mfrapSysSelDTESupported, mfrapCfgTftpInterface=mfrapCfgTftpInterface, mfrapCfgTransitDelayDlciValue=mfrapCfgTransitDelayDlciValue, mfrapCfgFrPerfDlciNamesTableClear=mfrapCfgFrPerfDlciNamesTableClear, mfrapNonIncrLmiSeqNumT1Trap=mfrapNonIncrLmiSeqNumT1Trap, mfrapPerfApplicationTotalRxCustom3=mfrapPerfApplicationTotalRxCustom3, mfrapCfgIpMaxMTU=mfrapCfgIpMaxMTU, mfrapPerfIcmpPerDlciRxAddrMaskRep=mfrapPerfIcmpPerDlciRxAddrMaskRep, mfrapPerfApplicationPerDlciRxHttp=mfrapPerfApplicationPerDlciRxHttp, mfrapPerfThruputCmdClearT1Stats=mfrapPerfThruputCmdClearT1Stats, mfrapPerfApplicationTotalTxSnmp=mfrapPerfApplicationTotalTxSnmp, mfrapCfgFrDLCIMgmtDE=mfrapCfgFrDLCIMgmtDE, mfrapVnipTopologyIndex=mfrapVnipTopologyIndex, mfrapCfgDteTiming=mfrapCfgDteTiming, mfrapCfgLcdPassword=mfrapCfgLcdPassword, mfrapPerfIpPerDlciTxTcp=mfrapPerfIpPerDlciTxTcp, mfrapPerfApplicationPerDlciRxFtp=mfrapPerfApplicationPerDlciRxFtp, mfrapPerfMgmtIpICMPOutDestUnreachs=mfrapPerfMgmtIpICMPOutDestUnreachs, mfrapStatusT1Alarms=mfrapStatusT1Alarms, mfrapCfgDteConnDs0Required=mfrapCfgDteConnDs0Required, mfrapPerfMgmtIpTCPActiveOpens=mfrapPerfMgmtIpTCPActiveOpens, mfrapPerfApplicationTotalRxCustom4=mfrapPerfApplicationTotalRxCustom4, mfrapVnipTopologyInterface=mfrapVnipTopologyInterface, mfrapCfgFrLmiFullStatus=mfrapCfgFrLmiFullStatus, mfrapCfgTDDeleteInterface=mfrapCfgTDDeleteInterface, mfrapPerfSnaPerDlciTxAppn=mfrapPerfSnaPerDlciTxAppn, mfrapPerfMgmtIpTCPStatsTable=mfrapPerfMgmtIpTCPStatsTable, mfrapCfgCommParity=mfrapCfgCommParity, mfrapCfgDteDataMode=mfrapCfgDteDataMode, mfrapPerfThruputPerDlciMTBSO=mfrapPerfThruputPerDlciMTBSO, mfrapPerfNetwProtoPerDlciTxTotal=mfrapPerfNetwProtoPerDlciTxTotal, mfrapPerfRoutingPerDlciEntry=mfrapPerfRoutingPerDlciEntry, mfrapPerfCirRxPercentUtilizationRange6=mfrapPerfCirRxPercentUtilizationRange6, mfrapPerfIpxPerDlciTxSpx=mfrapPerfIpxPerDlciTxSpx, mfrapPerfThruputPerDlciTxFrame=mfrapPerfThruputPerDlciTxFrame, mfrapDLCIInactiveTrap=mfrapDLCIInactiveTrap, mfrapDandiTotalIndex=mfrapDandiTotalIndex, mfrapPerfRoutingTotalTxRip=mfrapPerfRoutingTotalTxRip, mfrapPerfSnaTotalTxOther=mfrapPerfSnaTotalTxOther, mfrapVnipTopoVBertPerUtilEIR=mfrapVnipTopoVBertPerUtilEIR, mfrapPerfCurrentWanUtilization=mfrapPerfCurrentWanUtilization, mfrapT1TotalSESs=mfrapT1TotalSESs, mfrapEventTrapLogVarBind2=mfrapEventTrapLogVarBind2, mfrapDandiPerfClearAll=mfrapDandiPerfClearAll, mfrapPerfNetwProtoPerDlciRxSna=mfrapPerfNetwProtoPerDlciRxSna, mfrapPerfCirRxPercentUtilizationRange5=mfrapPerfCirRxPercentUtilizationRange5, mfrapCfgFrPerfUserProtocolsEntry=mfrapCfgFrPerfUserProtocolsEntry, mfrapVbertRequestFailed=mfrapVbertRequestFailed, mfrapDandiAisClear=mfrapDandiAisClear, mfrapCfgFrAddrResMode=mfrapCfgFrAddrResMode, mfrapDandiIntervalSESs=mfrapDandiIntervalSESs, mfrapPerfLmiPerDlciRxFullStatByteCnt=mfrapPerfLmiPerDlciRxFullStatByteCnt, mfrapEventTrapLogVarBind3=mfrapEventTrapLogVarBind3)
mibBuilder.exportSymbols("MFRAP-MIB", mfrapPerfIcmpTotalTxTimeExcd=mfrapPerfIcmpTotalTxTimeExcd, mfrapStatusDteTable=mfrapStatusDteTable, mfrapCfgVnipKeepAliveTimer=mfrapCfgVnipKeepAliveTimer, mfrapPerfIcmpPerDlciTxGmReport=mfrapPerfIcmpPerDlciTxGmReport, mfrapVnipTopoVBertTimeElapse=mfrapVnipTopoVBertTimeElapse, mfrapCfgVnipTransitDelayFrequency=mfrapCfgVnipTransitDelayFrequency, mfrapCfgAppFormat=mfrapCfgAppFormat, mfrapPerfThruputCmdReplaceDlciNewValue=mfrapPerfThruputCmdReplaceDlciNewValue, mfrapCfgFrPerfLTProtocolFilterTableClear=mfrapCfgFrPerfLTProtocolFilterTableClear, mfrapStatusDteRts=mfrapStatusDteRts, mfrapCfgLockID=mfrapCfgLockID, mfrapEventTrapLog=mfrapEventTrapLog, mfrapCfgConnUpdateCmd=mfrapCfgConnUpdateCmd, mfrapVnipTopoVBertTxDESetFrames=mfrapVnipTopoVBertTxDESetFrames, mfrapPerfNetwProtoTotalRxOther=mfrapPerfNetwProtoTotalRxOther, mfrapPerfPhysicalIntf=mfrapPerfPhysicalIntf, mfrapCfgCommTable=mfrapCfgCommTable, mfrapCfgFrDLCITable=mfrapCfgFrDLCITable, mfrapDandiCurrentSESs=mfrapDandiCurrentSESs, mfrapPerfMgmtIpICMPInEchoReps=mfrapPerfMgmtIpICMPInEchoReps, mfrapPerfIpxPerDlciEntry=mfrapPerfIpxPerDlciEntry, mfrapDandiTotalCSSs=mfrapDandiTotalCSSs, mfrapPerfNetwProtoTotalTxIpx=mfrapPerfNetwProtoTotalTxIpx, mfrapPerfSnaPerDlciTxOther=mfrapPerfSnaPerDlciTxOther, mfrapPerfArpTotalTable=mfrapPerfArpTotalTable, mfrapLocalAggregateLoopbackDisabledTrap=mfrapLocalAggregateLoopbackDisabledTrap, mfrapV54LoopbackFailedTrap=mfrapV54LoopbackFailedTrap, mfrapPerfThruputPerDlciRxDe=mfrapPerfThruputPerDlciRxDe, mfrapPerfNetwProtoTotalRxVnip=mfrapPerfNetwProtoTotalRxVnip, mfrapPerfLmiPerDlciTxLivoEnqByteCnt=mfrapPerfLmiPerDlciTxLivoEnqByteCnt, mfrapNonIncrLmiSeqNumDteTrap=mfrapNonIncrLmiSeqNumDteTrap, mfrapCfgFrPerf=mfrapCfgFrPerf, mfrapPerfIcmpTotalTxSrcQuench=mfrapPerfIcmpTotalTxSrcQuench, mfrapPerfIcmpPerDlciTxRedirect=mfrapPerfIcmpPerDlciTxRedirect, mfrapCfgT1Interface=mfrapCfgT1Interface, mfrapSysPPPSupported=mfrapSysPPPSupported, mfrapPerfIpxPerDlciRxSap=mfrapPerfIpxPerDlciRxSap, mfrapCfgTDDeleteDlciValue=mfrapCfgTDDeleteDlciValue, mfrapStatusDteMode=mfrapStatusDteMode, mfrapVnipTopologyIpAddr=mfrapVnipTopologyIpAddr, mfrapCfgAppClockSource=mfrapCfgAppClockSource, mfrapPerfIcmpTotalRxParamProb=mfrapPerfIcmpTotalRxParamProb, mfrapCfgSnmpUtilTrapEnable=mfrapCfgSnmpUtilTrapEnable, mfrapPerfLmiTotalRxLivoStatByteCnt=mfrapPerfLmiTotalRxLivoStatByteCnt, mfrapT1CurrentESs=mfrapT1CurrentESs, mfrapPerfIcmpTotalRxDestUnr=mfrapPerfIcmpTotalRxDestUnr, mfrapt1netwsynclossdeclare=mfrapt1netwsynclossdeclare, mfrapTftpNoFileTrap=mfrapTftpNoFileTrap, mfrapt1netwcarrierdetect=mfrapt1netwcarrierdetect, mfrapSysNumMaintInstalled=mfrapSysNumMaintInstalled, mfrapPerfNetwLongTermTable=mfrapPerfNetwLongTermTable, mfrapTftpInvalidFileTrap=mfrapTftpInvalidFileTrap, mfrapPerfIpxTotalTxOther=mfrapPerfIpxTotalTxOther, mfrapCfgCommStopBits=mfrapCfgCommStopBits, mfrapPerfMgmtIpIPOutNoRt=mfrapPerfMgmtIpIPOutNoRt, mfrapPerfNetwProtoPerDlciRxOther=mfrapPerfNetwProtoPerDlciRxOther, mfrapPerfIcmpPerDlciRxGmReport=mfrapPerfIcmpPerDlciRxGmReport, mfrapPerfMgmtIpIPInHdrErr=mfrapPerfMgmtIpIPInHdrErr, mfrapPerfApplicationTotalTxHttp=mfrapPerfApplicationTotalTxHttp, mfrapCfgSnmpTrapMuting=mfrapCfgSnmpTrapMuting, mfrapLocalDandiLineLoopbackFailureTrap=mfrapLocalDandiLineLoopbackFailureTrap, mfrapEventLogAltSeqNum=mfrapEventLogAltSeqNum, mfrapCfgFrPerfDlciNamesCirType=mfrapCfgFrPerfDlciNamesCirType, mfrapPerfLmiPerDlciRxLivoEnqByteCnt=mfrapPerfLmiPerDlciRxLivoEnqByteCnt, mfrapPerfMgmtIpIPOutDscrd=mfrapPerfMgmtIpIPOutDscrd, mfrapPerfMgmtIpICMPInTimeExcds=mfrapPerfMgmtIpICMPInTimeExcds, mfrapPerfIpPerDlciTxIcmp=mfrapPerfIpPerDlciTxIcmp, mfrapCfgTftpFilename=mfrapCfgTftpFilename, mfrapPerfIpxPerDlciTable=mfrapPerfIpxPerDlciTable, mfrapPerfArpTotalTxArpRep=mfrapPerfArpTotalTxArpRep, mfrapPerfApplicationPerDlciTable=mfrapPerfApplicationPerDlciTable, mfrapPerfRoutingPerDlciRxRip=mfrapPerfRoutingPerDlciRxRip, mfrapPerfNetwProtoPerDlciRxVnip=mfrapPerfNetwProtoPerDlciRxVnip, mfrapDandiPerfClearEvents=mfrapDandiPerfClearEvents, mfrapSysSoftRev=mfrapSysSoftRev, mfrapPerfThruput=mfrapPerfThruput, mfrapPerfIcmpPerDlciInterval=mfrapPerfIcmpPerDlciInterval, mfrapPerfNetwLongTermValue=mfrapPerfNetwLongTermValue, mfrapPerfThruputCmdClearAllStats=mfrapPerfThruputCmdClearAllStats, mfrapSysETHSupported=mfrapSysETHSupported, mfrapEventTrapLogSpecificEvent=mfrapEventTrapLogSpecificEvent, mfrapStatusDteDcd=mfrapStatusDteDcd, mfrapCsuLoopbackDisabledTrap=mfrapCsuLoopbackDisabledTrap, mfrapSysLTFNumProtocols=mfrapSysLTFNumProtocols, mfrapPerfSnaPerDlciRxSubarea=mfrapPerfSnaPerDlciRxSubarea, mfrapPerfMgmtIpIPInProtUnk=mfrapPerfMgmtIpIPInProtUnk, mfrapPerfThruputPerDlciRxBecn=mfrapPerfThruputPerDlciRxBecn, mfrapCfgTftpIpAddress=mfrapCfgTftpIpAddress, mfrapVnipTopoTDLastDelay=mfrapVnipTopoTDLastDelay, mfrapDiagDandiLocPylLpbk=mfrapDiagDandiLocPylLpbk, mfrapPerfMgmtIpICMPOutEchos=mfrapPerfMgmtIpICMPOutEchos, mfrapLocalNetLoopbackEnabledTrap=mfrapLocalNetLoopbackEnabledTrap, mfrapPerfMgmtIpIFStatsTable=mfrapPerfMgmtIpIFStatsTable, mfrapPerfMgmtIpICMPInErrors=mfrapPerfMgmtIpICMPInErrors, mfrapPerfIcmpTotalRxPktTooBig=mfrapPerfIcmpTotalRxPktTooBig, mfrapPerfLmiTotalTxLivoStatByteCnt=mfrapPerfLmiTotalTxLivoStatByteCnt, mfrapCfgStatus=mfrapCfgStatus, mfrapVnipTopoVBertTransitDelayAvg=mfrapVnipTopoVBertTransitDelayAvg, mfrapPerfThruputPerDlciRxFrame=mfrapPerfThruputPerDlciRxFrame, mfrapCfgIpTelnetAutoLogOut=mfrapCfgIpTelnetAutoLogOut, mfrapPerfIpTotalRxTotal=mfrapPerfIpTotalRxTotal, mfrapPerfIpxPerDlciRxSpx=mfrapPerfIpxPerDlciRxSpx, mfrapBadConfigTrap=mfrapBadConfigTrap, mfrapPerfSnaTotalRxSubarea=mfrapPerfSnaTotalRxSubarea, mfrapPerfIpxTotalTable=mfrapPerfIpxTotalTable, mfrapPerfArpTotalRxRarpRep=mfrapPerfArpTotalRxRarpRep, mfrapLmiSeqNumMismatchDteTrap=mfrapLmiSeqNumMismatchDteTrap, mfrapPerfIpxTotalTxRip=mfrapPerfIpxTotalTxRip, mfrapPerfSnaPerDlciValue=mfrapPerfSnaPerDlciValue, mfrapDiagUnitLocLoop=mfrapDiagUnitLocLoop, mfrapPerfThruputCmdRemoveStsDlci=mfrapPerfThruputCmdRemoveStsDlci, mfrapPerfIcmpPerDlciTxEchoRep=mfrapPerfIcmpPerDlciTxEchoRep, mfrapPerfIcmpTotalTxTimestpReq=mfrapPerfIcmpTotalTxTimestpReq, mfrapPerfRoutingTotalRxNetbios=mfrapPerfRoutingTotalRxNetbios, mfrapPerfMgmtIpUDPOutDatagrams=mfrapPerfMgmtIpUDPOutDatagrams, mfrapPerfSnaTotalRxAppn=mfrapPerfSnaTotalRxAppn, mfrapSystem=mfrapSystem, mfrapCfgFrAddrLen=mfrapCfgFrAddrLen, mfrapPerfThruputPerDlciTxDe=mfrapPerfThruputPerDlciTxDe, mfrapPerfIcmpTotalTxPktTooBig=mfrapPerfIcmpTotalTxPktTooBig, mfrapPerfApplicationPerDlciTxTftp=mfrapPerfApplicationPerDlciTxTftp, mfrapT1CurrentSEFSs=mfrapT1CurrentSEFSs, mfrapPerfMgmtIpIPOutRqst=mfrapPerfMgmtIpIPOutRqst, mfrapCfgT1Framing=mfrapCfgT1Framing, mfrapDandiIntervalEntry=mfrapDandiIntervalEntry, mfrapPerfMgmtIpICMPOutParmProbs=mfrapPerfMgmtIpICMPOutParmProbs, mfrapPerfArpPerDlciValue=mfrapPerfArpPerDlciValue, mfrapPerfArpPerDlciRxTotal=mfrapPerfArpPerDlciRxTotal, mfrapPerfRoutingPerDlciValue=mfrapPerfRoutingPerDlciValue, mfrapCfgFrPerfLTDlciFilterEntry=mfrapCfgFrPerfLTDlciFilterEntry, mfrapPerfApplicationPerDlciRxCustom2=mfrapPerfApplicationPerDlciRxCustom2, mfrapT1CurrentCSSs=mfrapT1CurrentCSSs, mfrapSysTable=mfrapSysTable, mfrapPerfThruputPerIntfTxFrameCnt=mfrapPerfThruputPerIntfTxFrameCnt, mfrapPerfArpTotalRxArpReq=mfrapPerfArpTotalRxArpReq, mfrapDteSignalRtsOffTrap=mfrapDteSignalRtsOffTrap, mfrapPerfMgmtIpTCPInSegs=mfrapPerfMgmtIpTCPInSegs, mfrapVnipTopoTDAvgDelay=mfrapVnipTopoTDAvgDelay, mfrapPerfApplicationPerDlciTxSmtp=mfrapPerfApplicationPerDlciTxSmtp, mfrapCfgFrPerfDlciNamesCirValue=mfrapCfgFrPerfDlciNamesCirValue, mfrapPerfThruputCmdAvailabilityStsDlciResetAll=mfrapPerfThruputCmdAvailabilityStsDlciResetAll, mfrapt1netwaisdetect=mfrapt1netwaisdetect, mfrapPerfIpTotalRxOther=mfrapPerfIpTotalRxOther, mfrapCsuLoopUpInitiatedTrap=mfrapCsuLoopUpInitiatedTrap, mfrapPerfNetwProtoPerDlciTxIpx=mfrapPerfNetwProtoPerDlciTxIpx, mfrapPerfThruputCmdAvailabilityStsDlciReset=mfrapPerfThruputCmdAvailabilityStsDlciReset, mfrapCfgEditDisconnect=mfrapCfgEditDisconnect, mfrapPerfMgmtIpICMPInEchos=mfrapPerfMgmtIpICMPInEchos, mfrapPerfIpTotalRxUdp=mfrapPerfIpTotalRxUdp, mfrapCfgSecurityTable=mfrapCfgSecurityTable, mfrapPerfApplicationTotalRxCustom2=mfrapPerfApplicationTotalRxCustom2, mfrapPerfIpxPerDlciTxNetbios=mfrapPerfIpxPerDlciTxNetbios, mfrapPerfArpTotalRxArpRep=mfrapPerfArpTotalRxArpRep, mfrapPerfNetworkLongTermCmdClear=mfrapPerfNetworkLongTermCmdClear, mfrapPerfThruputPerDlciIndex=mfrapPerfThruputPerDlciIndex, mfrapCfgDteConnAutoUpdate=mfrapCfgDteConnAutoUpdate, mfrapDiagUnitTable=mfrapDiagUnitTable, mfrapT1CurrentUASs=mfrapT1CurrentUASs, mfrapPerfApplicationPerDlciRxSnmpTrap=mfrapPerfApplicationPerDlciRxSnmpTrap, mfrapCfgTDDeleteEntry=mfrapCfgTDDeleteEntry, mfrapPerfIcmpPerDlciTxGmReduct=mfrapPerfIcmpPerDlciTxGmReduct, mfrapPerfCirTxPercentUtilizationRange4=mfrapPerfCirTxPercentUtilizationRange4, mfrapStatusDteRxLED=mfrapStatusDteRxLED, mfrapT1TotalLCVs=mfrapT1TotalLCVs, mfrapEventTrapLogSeqNum=mfrapEventTrapLogSeqNum, mfrapPerfMgmtIpTCPAttemptFails=mfrapPerfMgmtIpTCPAttemptFails, mfrapPerfMgmtIpIFInErrors=mfrapPerfMgmtIpIFInErrors, mfrapDiagBertPattern=mfrapDiagBertPattern, mfrapPerfIcmpTotalTxGmQuery=mfrapPerfIcmpTotalTxGmQuery, mfrapPerfApplicationPerDlciTxCustom3=mfrapPerfApplicationPerDlciTxCustom3, mfrapDiagVBERTRate=mfrapDiagVBERTRate, mfrapPerfNetwProtoPerDlciTxCisco=mfrapPerfNetwProtoPerDlciTxCisco, mfrapPerfCirRxPercentUtilizationRange7=mfrapPerfCirRxPercentUtilizationRange7, mfrapSysNumT1Installed=mfrapSysNumT1Installed, mfrapDandiCurrentESs=mfrapDandiCurrentESs, mfrapPerfCirRxPercentUtilizationRange1=mfrapPerfCirRxPercentUtilizationRange1, mfrapDandiIntervalSEFSs=mfrapDandiIntervalSEFSs, mfrapCfgDteDsrOutput=mfrapCfgDteDsrOutput, mfrapPerfSnaTotalTxTotal=mfrapPerfSnaTotalTxTotal, mfrapPerfIcmpPerDlciTxDestUnr=mfrapPerfIcmpPerDlciTxDestUnr, mfrapPerfIpPerDlciRxTotal=mfrapPerfIpPerDlciRxTotal, mfrapPerfSnaTotalRxNetbios=mfrapPerfSnaTotalRxNetbios, mfrapPerfApplicationPerDlciRxCustom4=mfrapPerfApplicationPerDlciRxCustom4, mfrapCfgCurrentConnDestDs0=mfrapCfgCurrentConnDestDs0, mfrapPerfIcmpPerDlciRxSrcQuench=mfrapPerfIcmpPerDlciRxSrcQuench, mfrapVloopDown=mfrapVloopDown, mfrapPerfIcmpTotalRxTimeExcd=mfrapPerfIcmpTotalRxTimeExcd, mfrapPerfSnaPerDlciTxSubarea=mfrapPerfSnaPerDlciTxSubarea, mfrapPerfIcmpTotalTxEchoRep=mfrapPerfIcmpTotalTxEchoRep, mfrapPerfThruputPerDlciDowntime=mfrapPerfThruputPerDlciDowntime, mfrapCfgSnmpMgrDlci=mfrapCfgSnmpMgrDlci, mfrapT1TotalIndex=mfrapT1TotalIndex, mfrapPerfIpxPerDlciRxRip=mfrapPerfIpxPerDlciRxRip, mfrapEventLogAltEntry=mfrapEventLogAltEntry, mfrapPerfIcmpTotalTxParamProb=mfrapPerfIcmpTotalTxParamProb, mfrapTrapMutingInactive=mfrapTrapMutingInactive, mfrapPerfApplicationTotalTxTelnet=mfrapPerfApplicationTotalTxTelnet, mfrapVnipTopologyNumHops=mfrapVnipTopologyNumHops, mfrapVnipTopoVBertTransitDelayMax=mfrapVnipTopoVBertTransitDelayMax, mfrapDandiIntervalNumber=mfrapDandiIntervalNumber, mfrapPerfLmiPerDlciTxFullStatByteCnt=mfrapPerfLmiPerDlciTxFullStatByteCnt, mfrapDiagnostics=mfrapDiagnostics, mfrapAlarmType=mfrapAlarmType, mfrapPerfApplicationPerDlciRxCustom3=mfrapPerfApplicationPerDlciRxCustom3, mfrapPerfApplicationTotalTxSnmpTrap=mfrapPerfApplicationTotalTxSnmpTrap, mfrapConfigInstallSuccess=mfrapConfigInstallSuccess, mfrapPerfCurrentDteUtilization=mfrapPerfCurrentDteUtilization, mfrapPerfMgmtIpICMPInRedirects=mfrapPerfMgmtIpICMPInRedirects, mfrapPerfIcmpPerDlciEntry=mfrapPerfIcmpPerDlciEntry, mfrapPerfNetwLongTermAltTable=mfrapPerfNetwLongTermAltTable, mfrapIpAddress=mfrapIpAddress, mfrapSysContact=mfrapSysContact, mfrapPerfIpTotalRxIgrp=mfrapPerfIpTotalRxIgrp, mfrapPerfMgmtIpIFOperStatus=mfrapPerfMgmtIpIFOperStatus, mfrapPerfIcmpTotalRxEchoReq=mfrapPerfIcmpTotalRxEchoReq, mfrapPerfMgmtIpIFOutOctets=mfrapPerfMgmtIpIFOutOctets, mfrapT1IntervalUASs=mfrapT1IntervalUASs, mfrapPerfLmiPerDlciRxOtherByteCnt=mfrapPerfLmiPerDlciRxOtherByteCnt, mfrapPerfIcmpPerDlciRxTimeExcd=mfrapPerfIcmpPerDlciRxTimeExcd, mfrapStatusNestPowerSupply=mfrapStatusNestPowerSupply, mfrapStatusAllLEDs=mfrapStatusAllLEDs, mfrapCfgSnmpNestAlarmTrapEnable=mfrapCfgSnmpNestAlarmTrapEnable, mfrapLocalPayloadLoopbackDisabledViaRemoteTrap=mfrapLocalPayloadLoopbackDisabledViaRemoteTrap, mfrapPerfMgmtIpTCPCurrEstab=mfrapPerfMgmtIpTCPCurrEstab, mfrapDiagVnipEntry=mfrapDiagVnipEntry, mfrapDandiCurrentSEFSs=mfrapDandiCurrentSEFSs, mfrapEventLogAltArray=mfrapEventLogAltArray, mfrapSysLTFNumDlcis=mfrapSysLTFNumDlcis, mfrapBertFailedTrap=mfrapBertFailedTrap, mfrapPerfArpPerDlciTxRarpRep=mfrapPerfArpPerDlciTxRarpRep, mfrapPvcRxUtilizationExceededTrap=mfrapPvcRxUtilizationExceededTrap, mfrapDandiTotalEntry=mfrapDandiTotalEntry, mfrapPerfLmiPerDlciTxLivoStatByteCnt=mfrapPerfLmiPerDlciTxLivoStatByteCnt, mfrapPerfNetworkLongTerm=mfrapPerfNetworkLongTerm, mfrapVnipTopologyTable=mfrapVnipTopologyTable, mfrapPerfNetwLongTermInterval=mfrapPerfNetwLongTermInterval, mfrapEventLogCurrentSeqNum=mfrapEventLogCurrentSeqNum, mfrapT1CurrentIndex=mfrapT1CurrentIndex, mfrapDiagBertTable=mfrapDiagBertTable, mfrapPerfThruputPerIntfTable=mfrapPerfThruputPerIntfTable, mfrapCfgDandiTable=mfrapCfgDandiTable, mfrapStatusDteModeLED=mfrapStatusDteModeLED, mfrapPerfIpTotalInterval=mfrapPerfIpTotalInterval, mfrapPerfMgmtIpICMPOutRedirects=mfrapPerfMgmtIpICMPOutRedirects, mfrapDandiIntervalIndex=mfrapDandiIntervalIndex, mfrapPerfNetwProtoTotalTxCisco=mfrapPerfNetwProtoTotalTxCisco, mfrapDandiCurrentIndex=mfrapDandiCurrentIndex, mfrapPerfCirTxPercentUtilizationRange6=mfrapPerfCirTxPercentUtilizationRange6, mfrapCfgDteConnAutoStatus=mfrapCfgDteConnAutoStatus, mfrapPerfIpTotalTxOther=mfrapPerfIpTotalTxOther, mfrapPerfIcmpTotalRxRedirect=mfrapPerfIcmpTotalRxRedirect, mfrapCfgFrPerfUserProtocolsIndex=mfrapCfgFrPerfUserProtocolsIndex, mfrapPerfMgmtIpTCPOutSegs=mfrapPerfMgmtIpTCPOutSegs, mfrapLmiSourcingChangeUserDteTrap=mfrapLmiSourcingChangeUserDteTrap)
mibBuilder.exportSymbols("MFRAP-MIB", mfrapSysNumUserProtocols=mfrapSysNumUserProtocols, mfrapPerfArpPerDlciRxArpReq=mfrapPerfArpPerDlciRxArpReq, mfrapPerfNetwProtoPerDlciRxCisco=mfrapPerfNetwProtoPerDlciRxCisco, mfrapPerfLmiTotalTxFullEnqByteCnt=mfrapPerfLmiTotalTxFullEnqByteCnt, mfrapEventTrapLogTimeStamp=mfrapEventTrapLogTimeStamp, mfrapPerfArpPerDlciRxInarpRep=mfrapPerfArpPerDlciRxInarpRep, mfrapEventLogFreeze=mfrapEventLogFreeze, mfrapEventLogClear=mfrapEventLogClear, mfrapPerfCirRxPercentUtilizationRange2=mfrapPerfCirRxPercentUtilizationRange2, mfrapT1IntervalCSSs=mfrapT1IntervalCSSs, mfrapPerfIpxTotalTxNetbios=mfrapPerfIpxTotalTxNetbios, mfrapPerfArpTotalTxOther=mfrapPerfArpTotalTxOther, mfrapDiagVBERT=mfrapDiagVBERT, mfrapT1IntervalEntry=mfrapT1IntervalEntry, mfrapPerfThruputPerDlciRxFecn=mfrapPerfThruputPerDlciRxFecn)
