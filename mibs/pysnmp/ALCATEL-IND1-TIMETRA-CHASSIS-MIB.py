#
# PySNMP MIB module ALCATEL-IND1-TIMETRA-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-TIMETRA-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:03:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
timetraSRMIBModules, tmnxSRConfs, tmnxSRNotifyPrefix, tmnxSRObjs = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-GLOBAL-MIB", "timetraSRMIBModules", "tmnxSRConfs", "tmnxSRNotifyPrefix", "tmnxSRObjs")
TNamedItemOrEmpty, TmnxActionType, TItemDescription, TmnxOperState, TmnxAdminState, TmnxPortID, TNamedItem = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-TC-MIB", "TNamedItemOrEmpty", "TmnxActionType", "TItemDescription", "TmnxOperState", "TmnxAdminState", "TmnxPortID", "TNamedItem")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
TimeTicks, MibIdentifier, Gauge32, ModuleIdentity, iso, NotificationType, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, Unsigned32, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "Gauge32", "ModuleIdentity", "iso", "NotificationType", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "Unsigned32", "Integer32", "Counter32")
TimeStamp, DisplayString, TextualConvention, RowStatus, TruthValue, MacAddress, TimeInterval, DateAndTime, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TextualConvention", "RowStatus", "TruthValue", "MacAddress", "TimeInterval", "DateAndTime", "RowPointer")
tmnxChassisMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 2))
tmnxChassisMIBModule.setRevisions(('1908-01-01 00:00', '1907-01-01 00:00', '1906-03-16 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-01-15 00:00', '1903-08-15 00:00', '1903-01-20 00:00', '1900-08-14 00:00',))
if mibBuilder.loadTexts: tmnxChassisMIBModule.setLastUpdated('0801010000Z')
if mibBuilder.loadTexts: tmnxChassisMIBModule.setOrganization('Alcatel')
tmnxHwObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2))
tmnxChassisObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1))
tmnxSlotObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 2))
tmnxCardObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3))
tmnxChassisNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6))
tmnxChassisAdminObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8))
tmnxHwNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2))
tmnxChassisNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1))
tmnxChassisNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0))
tmnxHwConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2))
tmnxChassisConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1))
class TmnxAlarmState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("alarmActive", 1), ("alarmCleared", 2))

class TmnxChassisIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 32)

class TmnxHwIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class TmnxHwIndexOrZero(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class TmnxHwClass(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("chassis", 3), ("container", 4), ("powerSupply", 5), ("fan", 6), ("sensor", 7), ("ioModule", 8), ("cpmModule", 9), ("fabricModule", 10), ("mdaModule", 11), ("flashDiskModule", 12), ("port", 13), ("mcm", 14), ("ccm", 15))

class TmnxCardType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxChassisType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxDeviceState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("deviceStateUnknown", 1), ("deviceNotEquipped", 2), ("deviceStateOk", 3), ("deviceStateFailed", 4), ("deviceStateOutOfService", 5))

class TmnxLEDState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("ledOff", 1), ("ledRed", 2), ("ledAmber", 3), ("ledYellow", 4), ("ledGreen", 5), ("ledAmberBlink", 6), ("ledYellowBlink", 7), ("ledGreenBlink", 8))

class TmnxMdaType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxMDASuppType(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("invalid-MDA-type", 0), ("unassigned", 1), ("supp-MDA-type-2", 2), ("supp-MDA-type-3", 3), ("supp-MDA-type-4", 4), ("supp-MDA-type-5", 5), ("supp-MDA-type-6", 6), ("supp-MDA-type-7", 7), ("supp-MDA-type-8", 8), ("supp-MDA-type-9", 9), ("supp-MDA-type-10", 10), ("supp-MDA-type-11", 11), ("supp-MDA-type-12", 12), ("supp-MDA-type-13", 13), ("supp-MDA-type-14", 14), ("supp-MDA-type-15", 15), ("supp-MDA-type-16", 16), ("supp-MDA-type-17", 17), ("supp-MDA-type-18", 18), ("supp-MDA-type-19", 19), ("supp-MDA-type-20", 20), ("supp-MDA-type-21", 21), ("supp-MDA-type-22", 22), ("supp-MDA-type-23", 23), ("supp-MDA-type-24", 24), ("supp-MDA-type-25", 25), ("supp-MDA-type-26", 26), ("supp-MDA-type-27", 27), ("supp-MDA-type-28", 28), ("supp-MDA-type-29", 29), ("supp-MDA-type-30", 30), ("supp-MDA-type-31", 31), ("supp-MDA-type-32", 32), ("supp-MDA-type-33", 33), ("supp-MDA-type-34", 34), ("supp-MDA-type-35", 35), ("supp-MDA-type-36", 36), ("supp-MDA-type-37", 37), ("supp-MDA-type-38", 38), ("supp-MDA-type-39", 39), ("supp-MDA-type-40", 40), ("supp-MDA-type-41", 41), ("supp-MDA-type-42", 42), ("supp-MDA-type-43", 43), ("supp-MDA-type-44", 44), ("supp-MDA-type-45", 45), ("supp-MDA-type-46", 46), ("supp-MDA-type-47", 47))

class TmnxMDAChanType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("unknown", 0), ("sonetSts768", 1), ("sonetSts192", 2), ("sonetSts48", 3), ("sonetSts12", 4), ("sonetSts3", 5), ("sonetSts1", 6), ("sdhTug3", 7), ("sonetVtg", 8), ("sonetVt15", 9), ("sonetVt2", 10), ("sonetVt3", 11), ("sonetVt6", 12), ("pdhTu3", 13), ("pdhDs3", 14), ("pdhE3", 15), ("pdhDs1", 16), ("pdhE1", 17), ("pdhDs0Grp", 18))

class TmnxCcmType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxMcmType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxSlotNum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 128)

class TmnxSlotNumOrZero(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 128)

class TmnxPortAdminStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noop", 1), ("inService", 2), ("outOfService", 3), ("diagnose", 4))

class TmnxChassisMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("modeA", 1), ("modeB", 2), ("modeC", 3))

class TmnxSETSRefSource(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("reference1", 1), ("reference2", 2), ("bits", 3))

class TmnxSETSRefQualified(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("qualified", 1), ("not-qualified", 2))

class TmnxSETSRefAlarm(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("los", 0), ("oof", 1), ("oopir", 2))

class TmnxBITSIfType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("none", 0), ("t1-esf", 1), ("t1-sf", 2), ("e1-pcm30crc", 3), ("e1-pcm31crc", 4))

class TmnxCcagId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8), )
class TmnxCcagRate(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100000000), )
class TmnxCcagRateOption(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("aggregate", 1), ("cca", 2))

tmnxChassisTotalNumber = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisTotalNumber.setStatus('current')
tmnxChassisLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisLastChange.setStatus('current')
tmnxChassisTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3), )
if mibBuilder.loadTexts: tmnxChassisTable.setStatus('current')
tmnxChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"))
if mibBuilder.loadTexts: tmnxChassisEntry.setStatus('current')
tmnxChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 1), TmnxChassisIndex())
if mibBuilder.loadTexts: tmnxChassisIndex.setStatus('current')
tmnxChassisRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisRowStatus.setStatus('current')
tmnxChassisName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisName.setStatus('current')
tmnxChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 4), TmnxChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisType.setStatus('current')
tmnxChassisLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 5), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisLocation.setStatus('current')
tmnxChassisCoordinates = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 6), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisCoordinates.setStatus('current')
tmnxChassisNumSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisNumSlots.setStatus('current')
tmnxChassisNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisNumPorts.setStatus('current')
tmnxChassisNumPwrSupplies = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisNumPwrSupplies.setStatus('current')
tmnxChassisNumFanTrays = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisNumFanTrays.setStatus('current')
tmnxChassisNumFans = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisNumFans.setStatus('current')
tmnxChassisCriticalLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 12), TmnxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisCriticalLEDState.setStatus('current')
tmnxChassisMajorLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 13), TmnxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisMajorLEDState.setStatus('current')
tmnxChassisMinorLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 14), TmnxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisMinorLEDState.setStatus('current')
tmnxChassisBaseMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisBaseMacAddress.setStatus('current')
tmnxChassisCLLICode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 16), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisCLLICode.setStatus('current')
tmnxChassisReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 17), TmnxActionType().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisReboot.setStatus('current')
tmnxChassisUpgrade = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 18), TmnxActionType().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisUpgrade.setStatus('current')
tmnxChassisAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 19), TmnxChassisMode().clone('modeA')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisAdminMode.setStatus('current')
tmnxChassisOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 20), TmnxChassisMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisOperMode.setStatus('current')
tmnxChassisModeForce = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 21), TmnxActionType().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisModeForce.setStatus('current')
tmnxChassisUpdateWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 600)).clone(15)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisUpdateWaitTime.setStatus('obsolete')
tmnxChassisUpdateTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 23), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisUpdateTimeLeft.setStatus('current')
tmnxChassisOverTempState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stateOk", 1), ("stateOverTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisOverTempState.setStatus('current')
tmnxChassisFanTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4), )
if mibBuilder.loadTexts: tmnxChassisFanTable.setStatus('current')
tmnxChassisFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisFanIndex"))
if mibBuilder.loadTexts: tmnxChassisFanEntry.setStatus('current')
tmnxChassisFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: tmnxChassisFanIndex.setStatus('current')
tmnxChassisFanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1, 2), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisFanOperStatus.setStatus('current')
tmnxChassisFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("halfSpeed", 2), ("fullSpeed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisFanSpeed.setStatus('current')
tmnxChassisPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5), )
if mibBuilder.loadTexts: tmnxChassisPowerSupplyTable.setStatus('current')
tmnxChassisPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyId"))
if mibBuilder.loadTexts: tmnxChassisPowerSupplyEntry.setStatus('current')
tmnxChassisPowerSupplyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: tmnxChassisPowerSupplyId.setStatus('current')
tmnxChassisPowerSupplyACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 2), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyACStatus.setStatus('current')
tmnxChassisPowerSupplyDCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 3), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyDCStatus.setStatus('current')
tmnxChassisPowerSupplyTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 4), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyTempStatus.setStatus('current')
tmnxChassisPowerSupplyTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 5), Integer32()).setUnits('degrees celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyTempThreshold.setStatus('current')
tmnxChassisPowerSupply1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 6), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupply1Status.setStatus('current')
tmnxChassisPowerSupply2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 7), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupply2Status.setStatus('current')
tmnxChassisPowerSupplyAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("dc", 1), ("acSingle", 2), ("acMultiple", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyAssignedType.setStatus('current')
tmnxChassisPowerSupplyInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 9), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyInputStatus.setStatus('current')
tmnxChassisPowerSupplyOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 10), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyOutputStatus.setStatus('current')
tmnxChassisTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6), )
if mibBuilder.loadTexts: tmnxChassisTypeTable.setStatus('current')
tmnxChassisTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisTypeIndex"))
if mibBuilder.loadTexts: tmnxChassisTypeEntry.setStatus('current')
tmnxChassisTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1, 1), TmnxChassisType())
if mibBuilder.loadTexts: tmnxChassisTypeIndex.setStatus('current')
tmnxChassisTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisTypeName.setStatus('current')
tmnxChassisTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisTypeDescription.setStatus('current')
tmnxChassisTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisTypeStatus.setStatus('current')
tmnxHwLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwLastChange.setStatus('current')
tmnxHwTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8), )
if mibBuilder.loadTexts: tmnxHwTable.setStatus('current')
tmnxHwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwIndex"))
if mibBuilder.loadTexts: tmnxHwEntry.setStatus('current')
tmnxHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 1), TmnxHwIndex())
if mibBuilder.loadTexts: tmnxHwIndex.setStatus('current')
tmnxHwID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwID.setStatus('current')
tmnxHwMfgString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwMfgString.setStatus('current')
tmnxHwMfgBoardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwMfgBoardNumber.setStatus('current')
tmnxHwSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwSerialNumber.setStatus('current')
tmnxHwManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwManufactureDate.setStatus('current')
tmnxHwClass = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 7), TmnxHwClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwClass.setStatus('current')
tmnxHwName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 8), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwName.setStatus('current')
tmnxHwAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 9), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxHwAlias.setStatus('current')
tmnxHwAssetID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 10), SnmpAdminString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxHwAssetID.setStatus('current')
tmnxHwCLEI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwCLEI.setStatus('current')
tmnxHwIsFRU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwIsFRU.setStatus('current')
tmnxHwContainedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwContainedIn.setStatus('current')
tmnxHwParentRelPos = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwParentRelPos.setStatus('current')
tmnxHwAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noop", 1), ("inService", 2), ("outOfService", 3), ("diagnose", 4), ("operateSwitch", 5))).clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxHwAdminState.setStatus('current')
tmnxHwOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("unknown", 1), ("inService", 2), ("outOfService", 3), ("diagnosing", 4), ("failed", 5), ("booting", 6), ("empty", 7), ("provisioned", 8), ("unprovisioned", 9), ("upgrade", 10), ("downgrade", 11), ("inServiceUpgrade", 12), ("inServiceDowngrade", 13), ("resetPending", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwOperState.setStatus('current')
tmnxHwTempSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwTempSensor.setStatus('current')
tmnxHwTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 18), Integer32()).setUnits('degrees celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwTemperature.setStatus('current')
tmnxHwTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 19), Integer32()).setUnits('degrees celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwTempThreshold.setStatus('current')
tmnxHwBootCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwBootCodeVersion.setStatus('current')
tmnxHwSoftwareCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwSoftwareCodeVersion.setStatus('current')
tmnxHwSwLastBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwSwLastBoot.setStatus('current')
tmnxHwSwState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("hwFailure", 1), ("swFailure", 2), ("hwInitting", 3), ("swDownloading", 4), ("swInitting", 5), ("swInitted", 6), ("swRunning", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwSwState.setStatus('obsolete')
tmnxHwAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 24), TmnxAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwAlarmState.setStatus('current')
tmnxHwLastAlarmEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 25), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwLastAlarmEvent.setStatus('current')
tmnxHwClearAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 26), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxHwClearAlarms.setStatus('current')
tmnxHwSwImageSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("primary", 1), ("secondary", 2), ("tertiary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwSwImageSource.setStatus('current')
tmnxHwMfgDeviations = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 28), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwMfgDeviations.setStatus('current')
tmnxHwBaseMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 29), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwBaseMacAddress.setStatus('current')
tmnxHwFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwFailureReason.setStatus('current')
tmnxHwContainsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 9), )
if mibBuilder.loadTexts: tmnxHwContainsTable.setStatus('current')
tmnxHwContainsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwIndex"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwContainedIndex"))
if mibBuilder.loadTexts: tmnxHwContainsEntry.setStatus('current')
tmnxHwContainedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 9, 1, 1), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwContainedIndex.setStatus('current')
tmnxCcmTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10), )
if mibBuilder.loadTexts: tmnxCcmTable.setStatus('current')
tmnxCcmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcmIndex"))
if mibBuilder.loadTexts: tmnxCcmEntry.setStatus('current')
tmnxCcmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tmnxCcmIndex.setStatus('current')
tmnxCcmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1, 2), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcmOperStatus.setStatus('current')
tmnxCcmHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1, 3), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcmHwIndex.setStatus('current')
tmnxCcmEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1, 4), TmnxCcmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcmEquippedType.setStatus('current')
tmnxCcmTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11), )
if mibBuilder.loadTexts: tmnxCcmTypeTable.setStatus('current')
tmnxCcmTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcmTypeIndex"))
if mibBuilder.loadTexts: tmnxCcmTypeEntry.setStatus('current')
tmnxCcmTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1, 1), TmnxCcmType())
if mibBuilder.loadTexts: tmnxCcmTypeIndex.setStatus('current')
tmnxCcmTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcmTypeName.setStatus('current')
tmnxCcmTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcmTypeDescription.setStatus('current')
tmnxCcmTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcmTypeStatus.setStatus('current')
tmnxCardLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardLastChange.setStatus('current')
tmnxCardTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2), )
if mibBuilder.loadTexts: tmnxCardTable.setStatus('current')
tmnxCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"))
if mibBuilder.loadTexts: tmnxCardEntry.setStatus('current')
tmnxCardSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 1), TmnxSlotNum())
if mibBuilder.loadTexts: tmnxCardSlotNum.setStatus('current')
tmnxCardSupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 2), TmnxCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardSupportedTypes.setStatus('current')
tmnxCardAllowedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 3), TmnxCardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardAllowedTypes.setStatus('obsolete')
tmnxCardAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 4), TmnxCardType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardAssignedType.setStatus('current')
tmnxCardEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 5), TmnxCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardEquippedType.setStatus('current')
tmnxCardHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 6), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardHwIndex.setStatus('current')
tmnxCardClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 10), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardClockSource.setStatus('current')
tmnxCardNumMdaSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardNumMdaSlots.setStatus('current')
tmnxCardNumMdas = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardNumMdas.setStatus('current')
tmnxCardReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 13), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardReboot.setStatus('current')
tmnxCardMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 14), Unsigned32()).setUnits('Mega-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardMemorySize.setStatus('current')
tmnxCardNamedPoolAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 15), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardNamedPoolAdminMode.setStatus('current')
tmnxCardNamedPoolOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 16), TmnxAdminState().clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardNamedPoolOperMode.setStatus('current')
tmnxCpmCardLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardLastChange.setStatus('current')
tmnxCpmCardTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4), )
if mibBuilder.loadTexts: tmnxCpmCardTable.setStatus('current')
tmnxCpmCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardSlotNum"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardNum"))
if mibBuilder.loadTexts: tmnxCpmCardEntry.setStatus('current')
tmnxCpmCardSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 1), TmnxSlotNum())
if mibBuilder.loadTexts: tmnxCpmCardSlotNum.setStatus('current')
tmnxCpmCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxCpmCardNum.setStatus('current')
tmnxCpmCardSupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 3), TmnxCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardSupportedTypes.setStatus('current')
tmnxCpmCardAllowedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 4), TmnxCardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCpmCardAllowedTypes.setStatus('obsolete')
tmnxCpmCardAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 5), TmnxCardType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCpmCardAssignedType.setStatus('current')
tmnxCpmCardEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 6), TmnxCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardEquippedType.setStatus('current')
tmnxCpmCardHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 7), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardHwIndex.setStatus('current')
tmnxCpmCardBootOptionVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 8), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardBootOptionVersion.setStatus('current')
tmnxCpmCardBootOptionLastModified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardBootOptionLastModified.setStatus('current')
tmnxCpmCardConfigBootedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 10), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigBootedVersion.setStatus('current')
tmnxCpmCardIndexBootedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 11), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardIndexBootedVersion.setStatus('current')
tmnxCpmCardConfigLastModified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigLastModified.setStatus('current')
tmnxCpmCardConfigLastSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigLastSaved.setStatus('current')
tmnxCpmCardRedundant = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("singleton", 1), ("redundantActive", 2), ("redundantStandby", 3), ("redundantSplit", 4), ("redundantDisabled", 5), ("redundantSynching", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardRedundant.setStatus('current')
tmnxCpmCardClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 15), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardClockSource.setStatus('current')
tmnxCpmCardNumCpus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardNumCpus.setStatus('current')
tmnxCpmCardCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("mips", 2), ("pentium-pc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCpuType.setStatus('current')
tmnxCpmCardMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 18), Unsigned32()).setUnits('Mega-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardMemorySize.setStatus('current')
tmnxCpmCardSwitchToRedundantCard = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 19), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCpmCardSwitchToRedundantCard.setStatus('current')
tmnxCpmCardReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 20), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCpmCardReboot.setStatus('current')
tmnxCpmCardRereadBootOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 21), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCpmCardRereadBootOptions.setStatus('current')
tmnxCpmCardConfigFileLastBooted = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigFileLastBooted.setStatus('current')
tmnxCpmCardConfigFileLastSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigFileLastSaved.setStatus('current')
tmnxCpmCardConfigFileLastBootedHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigFileLastBootedHeader.setStatus('current')
tmnxCpmCardIndexFileLastBootedHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardIndexFileLastBootedHeader.setStatus('current')
tmnxCpmCardBootOptionSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardBootOptionSource.setStatus('current')
tmnxCpmCardConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("primary", 1), ("secondary", 2), ("tertiary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigSource.setStatus('current')
tmnxCpmCardBootOptionLastSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardBootOptionLastSaved.setStatus('current')
tmnxCpmCardMasterSlaveRefState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primaryRef", 1), ("secondaryRef", 2), ("notInitialized", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardMasterSlaveRefState.setStatus('current')
tmnxFabricLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFabricLastChange.setStatus('current')
tmnxFabricTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6), )
if mibBuilder.loadTexts: tmnxFabricTable.setStatus('current')
tmnxFabricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxFabricSlotNum"))
if mibBuilder.loadTexts: tmnxFabricEntry.setStatus('current')
tmnxFabricSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: tmnxFabricSlotNum.setStatus('current')
tmnxFabricAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 2), TmnxCardType().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFabricAssignedType.setStatus('current')
tmnxFabricEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 3), TmnxCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFabricEquippedType.setStatus('current')
tmnxFabricHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 4), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFabricHwIndex.setStatus('current')
tmnxCpmFlashTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7), )
if mibBuilder.loadTexts: tmnxCpmFlashTable.setStatus('current')
tmnxCpmFlashEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmFlashId"))
if mibBuilder.loadTexts: tmnxCpmFlashEntry.setStatus('current')
tmnxCpmFlashId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: tmnxCpmFlashId.setStatus('current')
tmnxCpmFlashOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 2), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashOperStatus.setStatus('current')
tmnxCpmFlashSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashSerialNumber.setStatus('current')
tmnxCpmFlashFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 4), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashFirmwareRevision.setStatus('current')
tmnxCpmFlashModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 5), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashModelNumber.setStatus('current')
tmnxCpmFlashCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 6), Unsigned32()).setUnits('sectors').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashCapacity.setStatus('current')
tmnxCpmFlashUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 7), Unsigned32()).setUnits('sectors').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashUsed.setStatus('current')
tmnxCpmFlashHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 8), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashHwIndex.setStatus('current')
tmnxMDATable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8), )
if mibBuilder.loadTexts: tmnxMDATable.setStatus('current')
tmnxMDAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: tmnxMDAEntry.setStatus('current')
tmnxMDASlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: tmnxMDASlotNum.setStatus('current')
tmnxMDASupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 2), TmnxMDASuppType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDASupportedTypes.setStatus('current')
tmnxMDAAllowedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 3), TmnxMdaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAAllowedTypes.setStatus('obsolete')
tmnxMDAAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 4), TmnxMdaType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAAssignedType.setStatus('current')
tmnxMDAEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 5), TmnxMdaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAEquippedType.setStatus('current')
tmnxMDAHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 6), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAHwIndex.setStatus('current')
tmnxMDAMaxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMaxPorts.setStatus('current')
tmnxMDAEquippedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAEquippedPorts.setStatus('current')
tmnxMDATxTimingSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cpm-card-A", 1), ("cpm-card-B", 2), ("local", 3), ("holdover", 4), ("not-applicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDATxTimingSelected.setStatus('current')
tmnxMDASyncIfTimingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("qualified", 1), ("not-qualified", 2), ("not-applicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDASyncIfTimingStatus.setStatus('current')
tmnxMDANetworkIngQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 12), TNamedItem().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDANetworkIngQueues.setStatus('current')
tmnxMDACapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 13), Bits().clone(namedValues=NamedValues(("isEthernet", 0), ("isSonet", 1), ("isTDM", 2), ("supportsPPP", 3), ("supportsFR", 4), ("supportsATM", 5), ("supportscHDLC", 6), ("isCMA", 7), ("supportsCEM", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDACapabilities.setStatus('current')
tmnxMDAMinChannelization = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 14), TmnxMDAChanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMinChannelization.setStatus('current')
tmnxMDAMaxChannelization = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 15), TmnxMDAChanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMaxChannelization.setStatus('current')
tmnxMDAMaxChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMaxChannels.setStatus('current')
tmnxMDAChannelsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAChannelsInUse.setStatus('current')
tmnxMDACcagId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 18), TmnxCcagId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDACcagId.setStatus('current')
tmnxMDAReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 19), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAReboot.setStatus('current')
tmnxMDAHiBwMcastSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAHiBwMcastSource.setStatus('current')
tmnxMDAHiBwMcastAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 21), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAHiBwMcastAlarm.setStatus('current')
tmnxMDAHiBwMcastTapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAHiBwMcastTapCount.setStatus('current')
tmnxMDAHiBwMcastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAHiBwMcastGroup.setStatus('current')
tmnxMDAClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("adaptive", 1), ("differential", 2))).clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAClockMode.setStatus('current')
tmnxMDADiffTimestampFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(19440, 19440), ValueRangeConstraint(77760, 77760), ValueRangeConstraint(103680, 103680), ))).setUnits('kilohertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDADiffTimestampFreq.setStatus('current')
tmnxMDAMcPathMgmtBwPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 27), TNamedItem().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtBwPlcyName.setStatus('current')
tmnxMDAMcPathMgmtPriPathLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 28), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2000), ))).setUnits('mega-bits-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtPriPathLimit.setStatus('current')
tmnxMDAMcPathMgmtSecPathLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 29), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2000), ))).setUnits('mega-bits-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtSecPathLimit.setStatus('current')
tmnxMDAMcPathMgmtAncPathLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 30), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 5000), ))).setUnits('mega-bits-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtAncPathLimit.setStatus('current')
tmnxMDAMcPathMgmtAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 31), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtAdminState.setStatus('current')
tmnxMDAIngNamedPoolPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 32), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAIngNamedPoolPolicy.setStatus('current')
tmnxMDAEgrNamedPoolPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 33), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAEgrNamedPoolPolicy.setStatus('current')
tmnxMDAMcPathMgmtPriInUseBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtPriInUseBw.setStatus('current')
tmnxMDAMcPathMgmtSecInUseBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtSecInUseBw.setStatus('current')
tmnxMDAMcPathMgmtAncInUseBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtAncInUseBw.setStatus('current')
tmnxMDAMcPathMgmtBlkHoleInUseBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtBlkHoleInUseBw.setStatus('current')
tmnxCardTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9), )
if mibBuilder.loadTexts: tmnxCardTypeTable.setStatus('current')
tmnxCardTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardTypeIndex"))
if mibBuilder.loadTexts: tmnxCardTypeEntry.setStatus('current')
tmnxCardTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1, 1), TmnxCardType())
if mibBuilder.loadTexts: tmnxCardTypeIndex.setStatus('current')
tmnxCardTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardTypeName.setStatus('current')
tmnxCardTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardTypeDescription.setStatus('current')
tmnxCardTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardTypeStatus.setStatus('current')
tmnxMdaTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10), )
if mibBuilder.loadTexts: tmnxMdaTypeTable.setStatus('current')
tmnxMdaTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMdaTypeIndex"))
if mibBuilder.loadTexts: tmnxMdaTypeEntry.setStatus('current')
tmnxMdaTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1, 1), TmnxMdaType())
if mibBuilder.loadTexts: tmnxMdaTypeIndex.setStatus('current')
tmnxMdaTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMdaTypeName.setStatus('current')
tmnxMdaTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMdaTypeDescription.setStatus('current')
tmnxMdaTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMdaTypeStatus.setStatus('current')
tmnxSyncIfTimingTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11), )
if mibBuilder.loadTexts: tmnxSyncIfTimingTable.setStatus('current')
tmnxSyncIfTimingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1), )
tmnxCpmCardEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingEntry"))
tmnxSyncIfTimingEntry.setIndexNames(*tmnxCpmCardEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxSyncIfTimingEntry.setStatus('current')
tmnxSyncIfTimingRevert = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRevert.setStatus('current')
tmnxSyncIfTimingRefOrder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 2), TmnxSETSRefSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRefOrder1.setStatus('current')
tmnxSyncIfTimingRefOrder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 3), TmnxSETSRefSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRefOrder2.setStatus('current')
tmnxSyncIfTimingRef1SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 4), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1SrcPort.setStatus('current')
tmnxSyncIfTimingRef1AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 5), TmnxPortAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1AdminStatus.setStatus('current')
tmnxSyncIfTimingRef1InUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1InUse.setStatus('current')
tmnxSyncIfTimingRef1Qualified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 7), TmnxSETSRefQualified()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1Qualified.setStatus('current')
tmnxSyncIfTimingRef1Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 8), TmnxSETSRefAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1Alarm.setStatus('current')
tmnxSyncIfTimingRef2SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 9), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2SrcPort.setStatus('current')
tmnxSyncIfTimingRef2AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 10), TmnxPortAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2AdminStatus.setStatus('current')
tmnxSyncIfTimingRef2InUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2InUse.setStatus('current')
tmnxSyncIfTimingRef2Qualified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 12), TmnxSETSRefQualified()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2Qualified.setStatus('current')
tmnxSyncIfTimingRef2Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 13), TmnxSETSRefAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2Alarm.setStatus('current')
tmnxSyncIfTimingFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 14), Integer32()).setUnits('parts-per-million').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingFreqOffset.setStatus('current')
tmnxSyncIfTimingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("not-present", 1), ("master-freerun", 2), ("master-holdover", 3), ("master-locked", 4), ("slave", 5), ("acquiring", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingStatus.setStatus('current')
tmnxSyncIfTimingRefOrder3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 16), TmnxSETSRefSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRefOrder3.setStatus('current')
tmnxSyncIfTimingBITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 17), TmnxBITSIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSIfType.setStatus('current')
tmnxSyncIfTimingBITSAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 18), TmnxPortAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSAdminStatus.setStatus('current')
tmnxSyncIfTimingBITSInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSInUse.setStatus('current')
tmnxSyncIfTimingBITSQualified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 20), TmnxSETSRefQualified()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSQualified.setStatus('current')
tmnxSyncIfTimingBITSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 21), TmnxSETSRefAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSAlarm.setStatus('current')
tmnxSyncIfTimingRef1SrcHw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 22), TmnxHwIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1SrcHw.setStatus('current')
tmnxSyncIfTimingRef1BITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 23), TmnxBITSIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1BITSIfType.setStatus('current')
tmnxSyncIfTimingRef2SrcHw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 24), TmnxHwIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2SrcHw.setStatus('current')
tmnxSyncIfTimingRef2BITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 25), TmnxBITSIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2BITSIfType.setStatus('current')
tmnxChassisAdminCtrlObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1))
tmnxChassisAdminValueObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2))
tSyncIfTimingAdmTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1), )
if mibBuilder.loadTexts: tSyncIfTimingAdmTable.setStatus('current')
tSyncIfTimingAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardSlotNum"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardNum"))
if mibBuilder.loadTexts: tSyncIfTimingAdmEntry.setStatus('current')
tSyncIfTimingAdmRevert = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRevert.setStatus('current')
tSyncIfTimingAdmRefOrder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 2), TmnxSETSRefSource().clone('bits')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRefOrder1.setStatus('current')
tSyncIfTimingAdmRefOrder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 3), TmnxSETSRefSource().clone('reference1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRefOrder2.setStatus('current')
tSyncIfTimingAdmRef1SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 4), TmnxPortID().clone(503316480)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef1SrcPort.setStatus('current')
tSyncIfTimingAdmRef1AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 5), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef1AdminStatus.setStatus('current')
tSyncIfTimingAdmRef2SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 6), TmnxPortID().clone(503316480)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef2SrcPort.setStatus('current')
tSyncIfTimingAdmRef2AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 7), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef2AdminStatus.setStatus('current')
tSyncIfTimingAdmChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmChanged.setStatus('current')
tSyncIfTimingAdmRefOrder3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 9), TmnxSETSRefSource().clone('reference2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRefOrder3.setStatus('current')
tSyncIfTimingAdmBITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 10), TmnxBITSIfType().clone('t1-esf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITSIfType.setStatus('current')
tSyncIfTimingAdmBITSAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 11), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITSAdminStatus.setStatus('current')
tSyncIfTimingAdmRef1SrcHw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 12), TmnxHwIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef1SrcHw.setStatus('current')
tSyncIfTimingAdmRef1BITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 13), TmnxBITSIfType().clone('t1-esf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef1BITSIfType.setStatus('current')
tSyncIfTimingAdmRef2SrcHw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 14), TmnxHwIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef2SrcHw.setStatus('current')
tSyncIfTimingAdmRef2BITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 15), TmnxBITSIfType().clone('t1-esf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef2BITSIfType.setStatus('current')
tmnxChassisAdminOwner = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisAdminOwner.setStatus('current')
tmnxChassisAdminControlApply = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("initialize", 2), ("commit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisAdminControlApply.setStatus('current')
tmnxChassisAdminLastSetTimer = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1, 3), TimeInterval()).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisAdminLastSetTimer.setStatus('current')
tmnxChassisAdminLastSetTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1, 4), TimeInterval().clone(180000)).setUnits('centiseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisAdminLastSetTimeout.setStatus('current')
tmnxCcagTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12), )
if mibBuilder.loadTexts: tmnxCcagTable.setStatus('current')
tmnxCcagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagId"))
if mibBuilder.loadTexts: tmnxCcagEntry.setStatus('current')
tmnxCcagId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 1), TmnxCcagId())
if mibBuilder.loadTexts: tmnxCcagId.setStatus('current')
tmnxCcagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagRowStatus.setStatus('current')
tmnxCcagLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcagLastChanged.setStatus('current')
tmnxCcagDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 4), DisplayString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagDescription.setStatus('current')
tmnxCcagAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 5), TmnxAdminState().clone('inService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagAdminStatus.setStatus('current')
tmnxCcagOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 6), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcagOperStatus.setStatus('current')
tmnxCcagCcaRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 7), TmnxCcagRate().clone(-1)).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagCcaRate.setStatus('current')
tmnxCcagAccessAdaptQos = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("link", 1), ("distribute", 2))).clone('distribute')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagAccessAdaptQos.setStatus('current')
tmnxCcagPathTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13), )
if mibBuilder.loadTexts: tmnxCcagPathTable.setStatus('current')
tmnxCcagPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagId"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathId"))
if mibBuilder.loadTexts: tmnxCcagPathEntry.setStatus('current')
tmnxCcagPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alpha", 1), ("beta", 2))))
if mibBuilder.loadTexts: tmnxCcagPathId.setStatus('current')
tmnxCcagPathLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcagPathLastChanged.setStatus('current')
tmnxCcagPathRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 3), TmnxCcagRate().clone(-1)).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathRate.setStatus('current')
tmnxCcagPathRateOption = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 4), TmnxCcagRateOption().clone('aggregate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathRateOption.setStatus('current')
tmnxCcagPathWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathWeight.setStatus('current')
tmnxCcagPathCcTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14), )
if mibBuilder.loadTexts: tmnxCcagPathCcTable.setStatus('current')
tmnxCcagPathCcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagId"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathId"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcType"))
if mibBuilder.loadTexts: tmnxCcagPathCcEntry.setStatus('current')
tmnxCcagPathCcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sapsap", 1), ("sapnet", 2), ("netsap", 3))))
if mibBuilder.loadTexts: tmnxCcagPathCcType.setStatus('current')
tmnxCcagPathCcLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcagPathCcLastChanged.setStatus('current')
tmnxCcagPathCcEgrPoolResvCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcEgrPoolResvCbs.setStatus('current')
tmnxCcagPathCcEgrPoolSlpPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 4), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcEgrPoolSlpPlcy.setStatus('current')
tmnxCcagPathCcIngPoolResvCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcIngPoolResvCbs.setStatus('current')
tmnxCcagPathCcIngPoolSlpPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 6), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcIngPoolSlpPlcy.setStatus('current')
tmnxCcagPathCcAcctPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcAcctPolicyId.setStatus('current')
tmnxCcagPathCcCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcCollectStats.setStatus('current')
tmnxCcagPathCcQueuePlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 9), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcQueuePlcy.setStatus('current')
tmnxCcagPathCcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 10), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcMac.setStatus('current')
tmnxCcagPathCcMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcMtu.setStatus('current')
tmnxCcagPathCcUserAssignedMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 12), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcagPathCcUserAssignedMac.setStatus('current')
tmnxCcagPathCcHwMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcagPathCcHwMac.setStatus('current')
tmnxMcmTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15), )
if mibBuilder.loadTexts: tmnxMcmTable.setStatus('current')
tmnxMcmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMcmSlotNum"))
if mibBuilder.loadTexts: tmnxMcmEntry.setStatus('current')
tmnxMcmSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: tmnxMcmSlotNum.setStatus('current')
tmnxMcmSupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 2), TmnxMcmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcmSupportedTypes.setStatus('current')
tmnxMcmAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 3), TmnxMcmType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMcmAssignedType.setStatus('current')
tmnxMcmEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 4), TmnxMcmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcmEquippedType.setStatus('current')
tmnxMcmHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 5), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcmHwIndex.setStatus('current')
tmnxMcmTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16), )
if mibBuilder.loadTexts: tmnxMcmTypeTable.setStatus('current')
tmnxMcmTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMcmTypeIndex"))
if mibBuilder.loadTexts: tmnxMcmTypeEntry.setStatus('current')
tmnxMcmTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1, 1), TmnxMcmType())
if mibBuilder.loadTexts: tmnxMcmTypeIndex.setStatus('current')
tmnxMcmTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcmTypeName.setStatus('current')
tmnxMcmTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcmTypeDescription.setStatus('current')
tmnxMcmTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcmTypeStatus.setStatus('current')
tmnxEqNotificationRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 1), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxEqNotificationRow.setStatus('current')
tmnxEqTypeNotificationRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 2), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxEqTypeNotificationRow.setStatus('current')
tmnxChassisNotifyChassisId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 3), TmnxChassisIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyChassisId.setStatus('current')
tmnxChassisNotifyHwIndex = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 4), TmnxHwIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyHwIndex.setStatus('current')
tmnxRedSecondaryCPMStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("fail", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxRedSecondaryCPMStatus.setStatus('current')
tmnxChassisNotifyOID = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 6), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyOID.setStatus('current')
tmnxSyncIfTimingNotifyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 0), ("los", 1), ("oof", 2), ("oopir", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSyncIfTimingNotifyAlarm.setStatus('current')
tmnxChassisNotifyMismatchedVer = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyMismatchedVer.setStatus('current')
tmnxChassisNotifySoftwareLocation = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifySoftwareLocation.setStatus('current')
tmnxChassisNotifyCardFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyCardFailureReason.setStatus('current')
tmnxChassisNotifyCardName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyCardName.setStatus('current')
tmnxHwConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 1)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxHwConfigChange.setStatus('obsolete')
tmnxEnvTempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 2)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwTemperature"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwTempThreshold"))
if mibBuilder.loadTexts: tmnxEnvTempTooHigh.setStatus('current')
tmnxEqPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 3)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyACStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyDCStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempThreshold"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply1Status"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply2Status"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyInputStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyOutputStatus"))
if mibBuilder.loadTexts: tmnxEqPowerSupplyFailure.setStatus('current')
tmnxEqPowerSupplyInserted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 4)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqPowerSupplyInserted.setStatus('current')
tmnxEqPowerSupplyRemoved = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 5)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqPowerSupplyRemoved.setStatus('current')
tmnxEqFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 6)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisFanOperStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisFanSpeed"))
if mibBuilder.loadTexts: tmnxEqFanFailure.setStatus('current')
tmnxEqCardFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 7)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwOperState"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardFailureReason"))
if mibBuilder.loadTexts: tmnxEqCardFailure.setStatus('current')
tmnxEqCardInserted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 8)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardName"))
if mibBuilder.loadTexts: tmnxEqCardInserted.setStatus('current')
tmnxEqCardRemoved = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 9)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardName"))
if mibBuilder.loadTexts: tmnxEqCardRemoved.setStatus('current')
tmnxEqWrongCard = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 10)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqWrongCard.setStatus('current')
tmnxEqCpuFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 11)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqCpuFailure.setStatus('obsolete')
tmnxEqMemoryFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 12)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqMemoryFailure.setStatus('obsolete')
tmnxEqBackdoorBusFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 13)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"))
if mibBuilder.loadTexts: tmnxEqBackdoorBusFailure.setStatus('obsolete')
tmnxPeSoftwareError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 14)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPeSoftwareError.setStatus('obsolete')
tmnxPeSoftwareAbnormalHalt = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 15)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPeSoftwareAbnormalHalt.setStatus('obsolete')
tmnxPeSoftwareVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 16)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"))
if mibBuilder.loadTexts: tmnxPeSoftwareVersionMismatch.setStatus('current')
tmnxPeOutOfMemory = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 17)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPeOutOfMemory.setStatus('obsolete')
tmnxPeConfigurationError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 18)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPeConfigurationError.setStatus('obsolete')
tmnxPeStorageProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 19)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPeStorageProblem.setStatus('obsolete')
tmnxPeCpuCyclesExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 20)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPeCpuCyclesExceeded.setStatus('obsolete')
tmnxRedPrimaryCPMFail = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 21)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxRedPrimaryCPMFail.setStatus('current')
tmnxRedSecondaryCPMStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 22)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxRedSecondaryCPMStatus"))
if mibBuilder.loadTexts: tmnxRedSecondaryCPMStatusChange.setStatus('obsolete')
tmnxRedRestoreSuccess = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 23)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxRedRestoreSuccess.setStatus('obsolete')
tmnxRedRestoreFail = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 24)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxRedRestoreFail.setStatus('obsolete')
tmnxChassisNotificationClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 25)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyOID"))
if mibBuilder.loadTexts: tmnxChassisNotificationClear.setStatus('current')
tmnxEqSyncIfTimingHoldover = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 26)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingHoldover.setStatus('current')
tmnxEqSyncIfTimingHoldoverClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 27)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingHoldoverClear.setStatus('current')
tmnxEqSyncIfTimingRef1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 28)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingRef1Alarm.setStatus('current')
tmnxEqSyncIfTimingRef1AlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 29)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingRef1AlarmClear.setStatus('current')
tmnxEqSyncIfTimingRef2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 30)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingRef2Alarm.setStatus('current')
tmnxEqSyncIfTimingRef2AlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 31)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingRef2AlarmClear.setStatus('current')
tmnxEqFlashDataLoss = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 32)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwOperState"))
if mibBuilder.loadTexts: tmnxEqFlashDataLoss.setStatus('current')
tmnxEqFlashDiskFull = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 33)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwOperState"))
if mibBuilder.loadTexts: tmnxEqFlashDiskFull.setStatus('current')
tmnxPeSoftwareLoadFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 34)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifySoftwareLocation"))
if mibBuilder.loadTexts: tmnxPeSoftwareLoadFailed.setStatus('current')
tmnxPeBootloaderVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 35)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"))
if mibBuilder.loadTexts: tmnxPeBootloaderVersionMismatch.setStatus('current')
tmnxPeBootromVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 36)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"))
if mibBuilder.loadTexts: tmnxPeBootromVersionMismatch.setStatus('current')
tmnxPeFPGAVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 37)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"))
if mibBuilder.loadTexts: tmnxPeFPGAVersionMismatch.setStatus('current')
tmnxEqSyncIfTimingBITSAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 38)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingBITSAlarm.setStatus('current')
tmnxEqSyncIfTimingBITSAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 39)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingBITSAlarmClear.setStatus('current')
tmnxEqCardFirmwareUpgraded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 40)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqCardFirmwareUpgraded.setStatus('current')
tmnxChassisUpgradeInProgress = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 41)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxChassisUpgradeInProgress.setStatus('current')
tmnxChassisUpgradeComplete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 42)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxChassisUpgradeComplete.setStatus('current')
tmnxChassisHiBwMcastAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 43)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxChassisHiBwMcastAlarm.setStatus('current')
tmnxEqMdaCfgNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 44)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqMdaCfgNotCompatible.setStatus('current')
tmnxChassisCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1))
tmnxChassisGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2))
tmnxChassisV4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 4)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisV3v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV4v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV4v0Compliance = tmnxChassisV4v0Compliance.setStatus('obsolete')
tmnxChassisV5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 6)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV4v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV5v0Compliance = tmnxChassisV5v0Compliance.setStatus('obsolete')
tmnxChassis7750V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 7)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassis7750V6v0Compliance = tmnxChassis7750V6v0Compliance.setStatus('current')
tmnxChassis7450V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 8)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassis7450V6v0Compliance = tmnxChassis7450V6v0Compliance.setStatus('current')
tmnxChassisComp7710 = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5))
tmnxChassisComp7710V3v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 1)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisV3v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAV3v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV3v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisComp7710V3v0 = tmnxChassisComp7710V3v0.setStatus('obsolete')
tmnxChassisComp7710V5v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 2)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV4v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisComp7710V5v0 = tmnxChassisComp7710V5v0.setStatus('obsolete')
tmnxChassisComp7710V6v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 3)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisComp7710V6v0 = tmnxChassisComp7710V6v0.setStatus('current')
tmnxChassisNotifyObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 4)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqNotificationRow"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqTypeNotificationRow"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxRedSecondaryCPMStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyOID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifySoftwareLocation"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardFailureReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyObjsGroup = tmnxChassisNotifyObjsGroup.setStatus('current')
tmnxChassisNotifyObsoleteGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 7)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwConfigChange"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqCpuFailure"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqMemoryFailure"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqBackdoorBusFailure"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareError"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareAbnormalHalt"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeOutOfMemory"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeConfigurationError"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeStorageProblem"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeCpuCyclesExceeded"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxRedSecondaryCPMStatusChange"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxRedRestoreSuccess"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxRedRestoreFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyObsoleteGroup = tmnxChassisNotifyObsoleteGroup.setStatus('current')
tmnxChassisV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 9)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisTotalNumber"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisLastChange"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisRowStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisName"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisLocation"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisCoordinates"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNumSlots"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNumPorts"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNumPwrSupplies"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNumFanTrays"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNumFans"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisCriticalLEDState"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisMajorLEDState"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisMinorLEDState"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisBaseMacAddress"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisCLLICode"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisReboot"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisUpgrade"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisAdminMode"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisOperMode"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisModeForce"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisUpdateWaitTime"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisUpdateTimeLeft"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisFanOperStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisFanSpeed"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyACStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyDCStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempThreshold"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply1Status"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply2Status"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyAssignedType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisTypeName"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisTypeDescription"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisTypeStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwLastChange"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwMfgString"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwMfgBoardNumber"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwSerialNumber"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwManufactureDate"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwName"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwAlias"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwAssetID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwCLEI"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwIsFRU"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwContainedIn"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwParentRelPos"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwAdminState"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwOperState"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwTempSensor"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwTemperature"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwTempThreshold"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwBootCodeVersion"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwSwLastBoot"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwAlarmState"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwLastAlarmEvent"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClearAlarms"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwSwImageSource"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwMfgDeviations"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwBaseMacAddress"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwFailureReason"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwContainedIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV3v0Group = tmnxChassisV3v0Group.setStatus('obsolete')
tmnxMDAV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 10)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDASupportedTypes"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAAssignedType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMaxPorts"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedPorts"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDATxTimingSelected"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDASyncIfTimingStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDANetworkIngQueues"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDACapabilities"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMinChannelization"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannelization"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannels"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAChannelsInUse"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDACcagId"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMdaTypeName"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMdaTypeDescription"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMdaTypeStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagRowStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagDescription"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagAdminStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagOperStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagCcaRate"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagLastChanged"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagAccessAdaptQos"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathLastChanged"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathRate"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathRateOption"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathWeight"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcLastChanged"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolResvCbs"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolSlpPlcy"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolResvCbs"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolSlpPlcy"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcAcctPolicyId"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcCollectStats"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcQueuePlcy"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMac"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMtu"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcHwMac"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcUserAssignedMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMDAV3v0Group = tmnxMDAV3v0Group.setStatus('obsolete')
tmnxChassisObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 11)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwSwState"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardAllowedTypes"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardAllowedTypes"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAAllowedTypes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisObsoleteGroup = tmnxChassisObsoleteGroup.setStatus('current')
tmnxCardV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 12)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardLastChange"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardTypeName"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardTypeDescription"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardTypeStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardSupportedTypes"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardAssignedType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardEquippedType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardClockSource"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardNumMdaSlots"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardNumMdas"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardReboot"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardMemorySize"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardLastChange"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardSupportedTypes"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardAssignedType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardEquippedType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardBootOptionVersion"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardBootOptionLastModified"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigBootedVersion"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardIndexBootedVersion"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigLastModified"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigLastSaved"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardRedundant"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardClockSource"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardNumCpus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardCpuType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardMemorySize"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardSwitchToRedundantCard"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardReboot"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardRereadBootOptions"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigFileLastBooted"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigFileLastSaved"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigFileLastBootedHeader"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardIndexFileLastBootedHeader"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardBootOptionSource"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigSource"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardBootOptionLastSaved"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxFabricLastChange"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxFabricAssignedType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxFabricEquippedType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxFabricHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmFlashOperStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmFlashSerialNumber"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmFlashFirmwareRevision"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmFlashModelNumber"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmFlashCapacity"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmFlashUsed"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmFlashHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRevert"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRefOrder1"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRefOrder2"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1SrcPort"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1AdminStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1InUse"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1Qualified"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1Alarm"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2SrcPort"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2AdminStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2InUse"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2Qualified"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2Alarm"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingFreqOffset"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRefOrder3"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSIfType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSAdminStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSInUse"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSQualified"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSAlarm"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRevert"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRefOrder1"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRefOrder2"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1SrcPort"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1AdminStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2SrcPort"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2AdminStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmChanged"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRefOrder3"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSIfType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSAdminStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisAdminOwner"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisAdminControlApply"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisAdminLastSetTimer"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisAdminLastSetTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardV3v0Group = tmnxCardV3v0Group.setStatus('current')
tmnxMDAV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 13)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDASupportedTypes"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAAssignedType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMaxPorts"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedPorts"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDATxTimingSelected"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDASyncIfTimingStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDANetworkIngQueues"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDACapabilities"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMinChannelization"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannelization"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannels"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAChannelsInUse"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDACcagId"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMdaTypeName"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMdaTypeDescription"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMdaTypeStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAReboot"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagRowStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagDescription"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagAdminStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagOperStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagCcaRate"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagLastChanged"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagAccessAdaptQos"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathLastChanged"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathRate"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathRateOption"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathWeight"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcLastChanged"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolResvCbs"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolSlpPlcy"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolResvCbs"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolSlpPlcy"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcAcctPolicyId"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcCollectStats"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcQueuePlcy"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMac"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMtu"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcHwMac"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcUserAssignedMac"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastSource"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastAlarm"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastTapCount"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastGroup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMDAV4v0Group = tmnxMDAV4v0Group.setStatus('current')
tmnxChassisNotificationV4v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 14)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEnvTempTooHigh"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyFailure"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInserted"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyRemoved"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqFanFailure"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqCardFailure"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqCardInserted"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqCardRemoved"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqWrongCard"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareVersionMismatch"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxRedPrimaryCPMFail"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationClear"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldover"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldoverClear"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Alarm"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1AlarmClear"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Alarm"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2AlarmClear"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqFlashDataLoss"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqFlashDiskFull"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareLoadFailed"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeBootloaderVersionMismatch"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeBootromVersionMismatch"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeFPGAVersionMismatch"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarm"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarmClear"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqCardFirmwareUpgraded"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeInProgress"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeComplete"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisHiBwMcastAlarm"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqMdaCfgNotCompatible"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotificationV4v0Group = tmnxChassisNotificationV4v0Group.setStatus('obsolete')
tmnx7710HwV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 15)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisOverTempState"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCpmCardMasterSlaveRefState"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcmOperStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcmHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcmEquippedType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcmTypeName"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcmTypeDescription"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCcmTypeStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMcmSupportedTypes"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMcmAssignedType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMcmEquippedType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMcmHwIndex"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMcmTypeName"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMcmTypeDescription"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMcmTypeStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyInputStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyOutputStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAReboot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnx7710HwV3v0Group = tmnx7710HwV3v0Group.setStatus('current')
tmnxChassisV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 16)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisTotalNumber"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisLastChange"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisRowStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisName"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisLocation"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisCoordinates"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNumSlots"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNumPorts"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNumPwrSupplies"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNumFanTrays"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNumFans"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisCriticalLEDState"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisMajorLEDState"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisMinorLEDState"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisBaseMacAddress"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisCLLICode"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisReboot"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisUpgrade"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisAdminMode"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisOperMode"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisModeForce"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisUpdateTimeLeft"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisFanOperStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisFanSpeed"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyACStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyDCStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempThreshold"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply1Status"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply2Status"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyAssignedType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisTypeName"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisTypeDescription"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisTypeStatus"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwLastChange"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwMfgString"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwMfgBoardNumber"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwSerialNumber"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwManufactureDate"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwName"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwAlias"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwAssetID"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwCLEI"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwIsFRU"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwContainedIn"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwParentRelPos"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwAdminState"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwOperState"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwTempSensor"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwTemperature"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwTempThreshold"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwBootCodeVersion"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwSwLastBoot"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwAlarmState"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwLastAlarmEvent"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwClearAlarms"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwSwImageSource"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwMfgDeviations"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwBaseMacAddress"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwFailureReason"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxHwContainedIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV5v0Group = tmnxChassisV5v0Group.setStatus('current')
tmnxChassisV5v0ObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 17)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisUpdateWaitTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV5v0ObsoleteGroup = tmnxChassisV5v0ObsoleteGroup.setStatus('current')
tmnx77x0CESMDAV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 18)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAClockMode"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDADiffTimestampFreq"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAIngNamedPoolPolicy"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAEgrNamedPoolPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnx77x0CESMDAV6v0Group = tmnx77x0CESMDAV6v0Group.setStatus('current')
tmnxChassisNotificationV3v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 20)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEnvTempTooHigh"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyFailure"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInserted"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyRemoved"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqFanFailure"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqCardFailure"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqCardInserted"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqCardRemoved"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqWrongCard"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareVersionMismatch"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxRedPrimaryCPMFail"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationClear"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldover"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldoverClear"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Alarm"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1AlarmClear"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Alarm"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2AlarmClear"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqFlashDataLoss"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqFlashDiskFull"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareLoadFailed"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeBootloaderVersionMismatch"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeBootromVersionMismatch"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeFPGAVersionMismatch"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarm"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarmClear"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqCardFirmwareUpgraded"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqMdaCfgNotCompatible"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotificationV3v0Group = tmnxChassisNotificationV3v0Group.setStatus('obsolete')
tmnxChassisNotificationV6v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 21)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEnvTempTooHigh"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyFailure"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInserted"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyRemoved"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqFanFailure"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqCardFailure"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqCardInserted"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqCardRemoved"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqWrongCard"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareVersionMismatch"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxRedPrimaryCPMFail"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationClear"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldover"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldoverClear"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Alarm"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1AlarmClear"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Alarm"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2AlarmClear"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqFlashDataLoss"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqFlashDiskFull"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareLoadFailed"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeBootloaderVersionMismatch"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeBootromVersionMismatch"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxPeFPGAVersionMismatch"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarm"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarmClear"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqCardFirmwareUpgraded"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeInProgress"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeComplete"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisHiBwMcastAlarm"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxEqMdaCfgNotCompatible"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotificationV6v0Group = tmnxChassisNotificationV6v0Group.setStatus('current')
tmnx7710SETSRefSrcHwV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 22)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1SrcHw"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1BITSIfType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2SrcHw"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2BITSIfType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1SrcHw"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1BITSIfType"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2SrcHw"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2BITSIfType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnx7710SETSRefSrcHwV6v0Group = tmnx7710SETSRefSrcHwV6v0Group.setStatus('current')
tmnxMDAMcPathMgmtV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 24)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtBwPlcyName"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtPriPathLimit"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtSecPathLimit"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtAncPathLimit"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtAdminState"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtPriInUseBw"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtSecInUseBw"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtAncInUseBw"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtBlkHoleInUseBw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMDAMcPathMgmtV6v0Group = tmnxMDAMcPathMgmtV6v0Group.setStatus('current')
tmnxCardV6v0NamedPoolPlcyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 25)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardNamedPoolAdminMode"), ("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxCardNamedPoolOperMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardV6v0NamedPoolPlcyGroup = tmnxCardV6v0NamedPoolPlcyGroup.setStatus('current')
tmnxChassisNotifyObjsV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 26)).setObjects(("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyObjsV6v0Group = tmnxChassisNotifyObjsV6v0Group.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", tmnxMDAMaxPorts=tmnxMDAMaxPorts, tSyncIfTimingAdmEntry=tSyncIfTimingAdmEntry, TmnxPortAdminStatus=TmnxPortAdminStatus, tmnxChassisV3v0Group=tmnxChassisV3v0Group, tmnxChassisPowerSupply2Status=tmnxChassisPowerSupply2Status, tmnxMcmTypeName=tmnxMcmTypeName, tmnxSyncIfTimingRef2SrcHw=tmnxSyncIfTimingRef2SrcHw, tmnxCcmEquippedType=tmnxCcmEquippedType, tmnxHwOperState=tmnxHwOperState, tmnxChassisIndex=tmnxChassisIndex, tmnxHwLastAlarmEvent=tmnxHwLastAlarmEvent, tmnxCardTable=tmnxCardTable, tmnxCcagPathCcIngPoolSlpPlcy=tmnxCcagPathCcIngPoolSlpPlcy, tmnxEqPowerSupplyRemoved=tmnxEqPowerSupplyRemoved, tSyncIfTimingAdmRef1SrcHw=tSyncIfTimingAdmRef1SrcHw, tmnxCcagOperStatus=tmnxCcagOperStatus, tmnxHwTable=tmnxHwTable, tmnxChassisV4v0Compliance=tmnxChassisV4v0Compliance, tmnxChassisCLLICode=tmnxChassisCLLICode, tSyncIfTimingAdmRef2AdminStatus=tSyncIfTimingAdmRef2AdminStatus, tmnxFabricLastChange=tmnxFabricLastChange, tmnxCpmCardCpuType=tmnxCpmCardCpuType, tmnxSlotObjs=tmnxSlotObjs, tmnxCpmCardIndexBootedVersion=tmnxCpmCardIndexBootedVersion, tmnxSyncIfTimingBITSQualified=tmnxSyncIfTimingBITSQualified, tmnxEnvTempTooHigh=tmnxEnvTempTooHigh, tmnxMDACcagId=tmnxMDACcagId, tSyncIfTimingAdmRef1SrcPort=tSyncIfTimingAdmRef1SrcPort, tmnxMDAMcPathMgmtBwPlcyName=tmnxMDAMcPathMgmtBwPlcyName, tmnxCpmCardBootOptionLastSaved=tmnxCpmCardBootOptionLastSaved, tmnxSyncIfTimingRef2InUse=tmnxSyncIfTimingRef2InUse, tmnxChassisObjs=tmnxChassisObjs, tmnxCpmFlashId=tmnxCpmFlashId, tmnxChassisTypeIndex=tmnxChassisTypeIndex, tmnxChassisPowerSupplyAssignedType=tmnxChassisPowerSupplyAssignedType, tmnxMDAMcPathMgmtSecInUseBw=tmnxMDAMcPathMgmtSecInUseBw, tmnxFabricEquippedType=tmnxFabricEquippedType, tmnxSyncIfTimingRef1SrcHw=tmnxSyncIfTimingRef1SrcHw, tmnxMcmTypeIndex=tmnxMcmTypeIndex, tmnxCcagPathCcCollectStats=tmnxCcagPathCcCollectStats, tmnxMDAAllowedTypes=tmnxMDAAllowedTypes, tmnxChassisOverTempState=tmnxChassisOverTempState, tmnxPeBootloaderVersionMismatch=tmnxPeBootloaderVersionMismatch, tmnxChassisNotifyChassisId=tmnxChassisNotifyChassisId, tmnxMDATxTimingSelected=tmnxMDATxTimingSelected, tmnxPeConfigurationError=tmnxPeConfigurationError, tSyncIfTimingAdmRef2BITSIfType=tSyncIfTimingAdmRef2BITSIfType, tmnxHwContainsTable=tmnxHwContainsTable, TmnxSETSRefAlarm=TmnxSETSRefAlarm, tmnxChassisNotifyOID=tmnxChassisNotifyOID, tmnxCardTypeName=tmnxCardTypeName, tmnxHwBaseMacAddress=tmnxHwBaseMacAddress, tmnxCpmCardClockSource=tmnxCpmCardClockSource, tmnxCpmCardRereadBootOptions=tmnxCpmCardRereadBootOptions, tmnxSyncIfTimingBITSAdminStatus=tmnxSyncIfTimingBITSAdminStatus, tSyncIfTimingAdmRefOrder2=tSyncIfTimingAdmRefOrder2, tmnxCpmCardConfigFileLastBootedHeader=tmnxCpmCardConfigFileLastBootedHeader, tmnxFabricHwIndex=tmnxFabricHwIndex, tmnxChassisNotifySoftwareLocation=tmnxChassisNotifySoftwareLocation, tmnxHwObjs=tmnxHwObjs, tmnxEqMdaCfgNotCompatible=tmnxEqMdaCfgNotCompatible, tmnxChassisObsoleteGroup=tmnxChassisObsoleteGroup, tmnxCpmCardSupportedTypes=tmnxCpmCardSupportedTypes, tmnxCcagPathCcType=tmnxCcagPathCcType, tmnxChassisNumSlots=tmnxChassisNumSlots, tmnxMcmSupportedTypes=tmnxMcmSupportedTypes, tmnxHwTemperature=tmnxHwTemperature, tmnxChassisUpdateTimeLeft=tmnxChassisUpdateTimeLeft, tmnxHwMfgDeviations=tmnxHwMfgDeviations, tmnxCpmFlashFirmwareRevision=tmnxCpmFlashFirmwareRevision, tmnxChassisBaseMacAddress=tmnxChassisBaseMacAddress, tmnxCpmCardConfigLastModified=tmnxCpmCardConfigLastModified, tmnxChassisNumFanTrays=tmnxChassisNumFanTrays, tmnxCcagAccessAdaptQos=tmnxCcagAccessAdaptQos, tmnxMdaTypeIndex=tmnxMdaTypeIndex, tmnxCpmCardLastChange=tmnxCpmCardLastChange, TmnxAlarmState=TmnxAlarmState, tmnxEqWrongCard=tmnxEqWrongCard, tmnxMDAV3v0Group=tmnxMDAV3v0Group, tmnxHwSerialNumber=tmnxHwSerialNumber, tmnxChassisName=tmnxChassisName, tmnxHwFailureReason=tmnxHwFailureReason, tmnxHwMfgBoardNumber=tmnxHwMfgBoardNumber, tmnxChassisAdminCtrlObjs=tmnxChassisAdminCtrlObjs, tmnxCcmTypeIndex=tmnxCcmTypeIndex, tSyncIfTimingAdmRef1AdminStatus=tSyncIfTimingAdmRef1AdminStatus, tmnxMcmEntry=tmnxMcmEntry, tmnxMDAV4v0Group=tmnxMDAV4v0Group, tmnxSyncIfTimingRef1AdminStatus=tmnxSyncIfTimingRef1AdminStatus, tmnxChassisTypeTable=tmnxChassisTypeTable, tmnxCpmCardBootOptionSource=tmnxCpmCardBootOptionSource, tmnxMDATable=tmnxMDATable, tmnxHwClearAlarms=tmnxHwClearAlarms, tmnxMDASupportedTypes=tmnxMDASupportedTypes, tmnxCardTypeDescription=tmnxCardTypeDescription, tmnxChassisFanSpeed=tmnxChassisFanSpeed, tmnxEqSyncIfTimingRef2AlarmClear=tmnxEqSyncIfTimingRef2AlarmClear, TmnxChassisIndex=TmnxChassisIndex, tmnxHwAssetID=tmnxHwAssetID, tmnxChassis7750V6v0Compliance=tmnxChassis7750V6v0Compliance, tmnxCcagPathCcQueuePlcy=tmnxCcagPathCcQueuePlcy, tmnxChassisPowerSupplyACStatus=tmnxChassisPowerSupplyACStatus, tmnxMDAClockMode=tmnxMDAClockMode, TmnxHwIndex=TmnxHwIndex, tmnxChassisAdminOwner=tmnxChassisAdminOwner, tmnxMDAHiBwMcastTapCount=tmnxMDAHiBwMcastTapCount, tmnxCpmCardConfigFileLastSaved=tmnxCpmCardConfigFileLastSaved, tmnxSyncIfTimingBITSAlarm=tmnxSyncIfTimingBITSAlarm, tmnxChassisLocation=tmnxChassisLocation, tmnxHwAlarmState=tmnxHwAlarmState, tmnxCardTypeTable=tmnxCardTypeTable, tmnxChassisAdminMode=tmnxChassisAdminMode, tmnxSyncIfTimingFreqOffset=tmnxSyncIfTimingFreqOffset, tmnxHwLastChange=tmnxHwLastChange, tmnxHwID=tmnxHwID, tmnxCpmCardBootOptionVersion=tmnxCpmCardBootOptionVersion, tmnxSyncIfTimingRef1Alarm=tmnxSyncIfTimingRef1Alarm, tmnxChassisMajorLEDState=tmnxChassisMajorLEDState, tmnxPeCpuCyclesExceeded=tmnxPeCpuCyclesExceeded, tmnxCcagAdminStatus=tmnxCcagAdminStatus, tmnxChassisPowerSupplyOutputStatus=tmnxChassisPowerSupplyOutputStatus, TmnxHwIndexOrZero=TmnxHwIndexOrZero, tmnxHwCLEI=tmnxHwCLEI, tmnxCcmTable=tmnxCcmTable, tmnxCpmCardTable=tmnxCpmCardTable, tmnxCardTypeEntry=tmnxCardTypeEntry, tmnx7710HwV3v0Group=tmnx7710HwV3v0Group, tmnxChassisPowerSupplyTempStatus=tmnxChassisPowerSupplyTempStatus, tmnxSyncIfTimingRef1SrcPort=tmnxSyncIfTimingRef1SrcPort, tmnxSyncIfTimingRef2Qualified=tmnxSyncIfTimingRef2Qualified, tmnxChassisFanIndex=tmnxChassisFanIndex, tmnx7710SETSRefSrcHwV6v0Group=tmnx7710SETSRefSrcHwV6v0Group, tmnxMDAMcPathMgmtV6v0Group=tmnxMDAMcPathMgmtV6v0Group, tmnxEqNotificationRow=tmnxEqNotificationRow, tmnxCcagPathCcLastChanged=tmnxCcagPathCcLastChanged, tmnxCcagPathCcMac=tmnxCcagPathCcMac, tmnxChassisPowerSupply1Status=tmnxChassisPowerSupply1Status, TmnxBITSIfType=TmnxBITSIfType, tmnxEqFlashDataLoss=tmnxEqFlashDataLoss, tmnxCpmFlashCapacity=tmnxCpmFlashCapacity, tmnxMDAAssignedType=tmnxMDAAssignedType, tmnxMDAChannelsInUse=tmnxMDAChannelsInUse, tmnxCpmFlashSerialNumber=tmnxCpmFlashSerialNumber, tmnxEqFlashDiskFull=tmnxEqFlashDiskFull, tmnxCcagPathRate=tmnxCcagPathRate, tmnxChassisLastChange=tmnxChassisLastChange, tmnxCcagLastChanged=tmnxCcagLastChanged, tmnxCpmCardMemorySize=tmnxCpmCardMemorySize, tmnxCardEntry=tmnxCardEntry, tmnxHwTempThreshold=tmnxHwTempThreshold, tmnxMDANetworkIngQueues=tmnxMDANetworkIngQueues, tmnxChassisMIBModule=tmnxChassisMIBModule, tmnxHwIsFRU=tmnxHwIsFRU, tmnxChassisUpgradeComplete=tmnxChassisUpgradeComplete, tmnxChassisCoordinates=tmnxChassisCoordinates, tmnxCcagPathTable=tmnxCcagPathTable, tmnxEqPowerSupplyInserted=tmnxEqPowerSupplyInserted, tmnxChassisCriticalLEDState=tmnxChassisCriticalLEDState, tmnxHwAlias=tmnxHwAlias, tmnxChassisComp7710V6v0=tmnxChassisComp7710V6v0, tmnxHwContainedIndex=tmnxHwContainedIndex, tmnxHwParentRelPos=tmnxHwParentRelPos, tmnxCardAssignedType=tmnxCardAssignedType, tmnxSyncIfTimingRef1BITSIfType=tmnxSyncIfTimingRef1BITSIfType, tSyncIfTimingAdmTable=tSyncIfTimingAdmTable, tmnxChassisPowerSupplyInputStatus=tmnxChassisPowerSupplyInputStatus, tmnxChassisPowerSupplyTempThreshold=tmnxChassisPowerSupplyTempThreshold, tmnxPeBootromVersionMismatch=tmnxPeBootromVersionMismatch, tSyncIfTimingAdmChanged=tSyncIfTimingAdmChanged, tmnxEqSyncIfTimingRef1AlarmClear=tmnxEqSyncIfTimingRef1AlarmClear, tmnxMdaTypeDescription=tmnxMdaTypeDescription, tmnxCardObjs=tmnxCardObjs, tmnxRedSecondaryCPMStatus=tmnxRedSecondaryCPMStatus, tmnxHwContainsEntry=tmnxHwContainsEntry, tmnxCardNamedPoolOperMode=tmnxCardNamedPoolOperMode, tmnxChassisNotifyCardFailureReason=tmnxChassisNotifyCardFailureReason, tmnxCcagPathCcHwMac=tmnxCcagPathCcHwMac, tmnxCcagPathCcIngPoolResvCbs=tmnxCcagPathCcIngPoolResvCbs, TmnxDeviceState=TmnxDeviceState, tmnxCardMemorySize=tmnxCardMemorySize, tmnxChassisNotification=tmnxChassisNotification, tmnxSyncIfTimingRevert=tmnxSyncIfTimingRevert, tmnxPeSoftwareVersionMismatch=tmnxPeSoftwareVersionMismatch, tmnxChassisNotifyObjsV6v0Group=tmnxChassisNotifyObjsV6v0Group, tmnxChassisGroups=tmnxChassisGroups, tmnxHwSwLastBoot=tmnxHwSwLastBoot, tmnxChassisPowerSupplyEntry=tmnxChassisPowerSupplyEntry, tmnxSyncIfTimingRefOrder2=tmnxSyncIfTimingRefOrder2, tmnxCpmCardConfigBootedVersion=tmnxCpmCardConfigBootedVersion, tmnxCardNamedPoolAdminMode=tmnxCardNamedPoolAdminMode, PYSNMP_MODULE_ID=tmnxChassisMIBModule, tmnxChassisTable=tmnxChassisTable, tmnxMcmSlotNum=tmnxMcmSlotNum, tmnxChassisModeForce=tmnxChassisModeForce, tmnxEqCardFailure=tmnxEqCardFailure, tmnxChassisComp7710=tmnxChassisComp7710, tmnxMDASyncIfTimingStatus=tmnxMDASyncIfTimingStatus, tmnxCpmFlashModelNumber=tmnxCpmFlashModelNumber, tmnxMDAMcPathMgmtSecPathLimit=tmnxMDAMcPathMgmtSecPathLimit, tmnxPeOutOfMemory=tmnxPeOutOfMemory, tmnxChassisNotificationV3v0Group=tmnxChassisNotificationV3v0Group, tmnxMdaTypeEntry=tmnxMdaTypeEntry, tmnx77x0CESMDAV6v0Group=tmnx77x0CESMDAV6v0Group, tmnxMDAHiBwMcastSource=tmnxMDAHiBwMcastSource, tmnxCpmCardHwIndex=tmnxCpmCardHwIndex, tmnxEqSyncIfTimingRef2Alarm=tmnxEqSyncIfTimingRef2Alarm, tmnxCpmCardReboot=tmnxCpmCardReboot, tmnxSyncIfTimingBITSIfType=tmnxSyncIfTimingBITSIfType, tmnxCardSupportedTypes=tmnxCardSupportedTypes, tmnxCpmCardSwitchToRedundantCard=tmnxCpmCardSwitchToRedundantCard, tmnxCpmCardEquippedType=tmnxCpmCardEquippedType, tmnxChassisEntry=tmnxChassisEntry, tmnxFabricTable=tmnxFabricTable, tmnxMDAMcPathMgmtBlkHoleInUseBw=tmnxMDAMcPathMgmtBlkHoleInUseBw, tmnxCardSlotNum=tmnxCardSlotNum, tmnxChassisConformance=tmnxChassisConformance, TmnxChassisType=TmnxChassisType, tmnxChassisAdminLastSetTimeout=tmnxChassisAdminLastSetTimeout, tmnxSyncIfTimingTable=tmnxSyncIfTimingTable, tmnxPeStorageProblem=tmnxPeStorageProblem, tmnxCpmFlashEntry=tmnxCpmFlashEntry, tmnxHwSwState=tmnxHwSwState, tmnxChassisFanTable=tmnxChassisFanTable, tmnxCcagPathCcMtu=tmnxCcagPathCcMtu, TmnxLEDState=TmnxLEDState, tmnxCcmTypeTable=tmnxCcmTypeTable, tmnxSyncIfTimingRefOrder3=tmnxSyncIfTimingRefOrder3, tmnxChassis7450V6v0Compliance=tmnxChassis7450V6v0Compliance, tmnxCcagPathCcEgrPoolResvCbs=tmnxCcagPathCcEgrPoolResvCbs, tmnxCpmCardNumCpus=tmnxCpmCardNumCpus, tmnxCpmCardEntry=tmnxCpmCardEntry, tmnxMDACapabilities=tmnxMDACapabilities, tmnxChassisPowerSupplyId=tmnxChassisPowerSupplyId, tmnxChassisRowStatus=tmnxChassisRowStatus, tmnxCpmFlashHwIndex=tmnxCpmFlashHwIndex, tmnxCardNumMdas=tmnxCardNumMdas, tmnxEqSyncIfTimingBITSAlarm=tmnxEqSyncIfTimingBITSAlarm, tmnxChassisReboot=tmnxChassisReboot, tmnxSyncIfTimingBITSInUse=tmnxSyncIfTimingBITSInUse, tmnxMdaTypeStatus=tmnxMdaTypeStatus, tmnxChassisNotifyObjsGroup=tmnxChassisNotifyObjsGroup, tmnxChassisCompliances=tmnxChassisCompliances, tmnxChassisComp7710V3v0=tmnxChassisComp7710V3v0, tmnxHwSwImageSource=tmnxHwSwImageSource, tmnxCardEquippedType=tmnxCardEquippedType, tmnxEqMemoryFailure=tmnxEqMemoryFailure, tmnxEqPowerSupplyFailure=tmnxEqPowerSupplyFailure, tmnxCcagPathId=tmnxCcagPathId, tmnxCcagPathEntry=tmnxCcagPathEntry, tmnxMDAHiBwMcastAlarm=tmnxMDAHiBwMcastAlarm, tmnxMDAMinChannelization=tmnxMDAMinChannelization, tmnxChassisPowerSupplyTable=tmnxChassisPowerSupplyTable, tmnxCpmCardSlotNum=tmnxCpmCardSlotNum, tmnxCardHwIndex=tmnxCardHwIndex)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", tmnxCcagEntry=tmnxCcagEntry, tmnxMDADiffTimestampFreq=tmnxMDADiffTimestampFreq, tmnxHwTempSensor=tmnxHwTempSensor, TmnxMdaType=TmnxMdaType, TmnxCcagRate=TmnxCcagRate, tmnxMDAEntry=tmnxMDAEntry, TmnxSETSRefSource=TmnxSETSRefSource, tSyncIfTimingAdmBITSAdminStatus=tSyncIfTimingAdmBITSAdminStatus, tmnxChassisTotalNumber=tmnxChassisTotalNumber, tmnxChassisNumPwrSupplies=tmnxChassisNumPwrSupplies, tmnxCcagPathCcUserAssignedMac=tmnxCcagPathCcUserAssignedMac, tmnxSyncIfTimingNotifyAlarm=tmnxSyncIfTimingNotifyAlarm, tmnxChassisNotifyObsoleteGroup=tmnxChassisNotifyObsoleteGroup, tmnxMDAMcPathMgmtPriPathLimit=tmnxMDAMcPathMgmtPriPathLimit, tmnxSyncIfTimingRef2AdminStatus=tmnxSyncIfTimingRef2AdminStatus, tmnxCardReboot=tmnxCardReboot, tmnxEqSyncIfTimingHoldover=tmnxEqSyncIfTimingHoldover, tSyncIfTimingAdmRefOrder1=tSyncIfTimingAdmRefOrder1, TmnxMcmType=TmnxMcmType, tmnxChassisPowerSupplyDCStatus=tmnxChassisPowerSupplyDCStatus, tmnxCcmOperStatus=tmnxCcmOperStatus, tmnxCardV6v0NamedPoolPlcyGroup=tmnxCardV6v0NamedPoolPlcyGroup, tmnxChassisTypeDescription=tmnxChassisTypeDescription, tmnxSyncIfTimingRef1InUse=tmnxSyncIfTimingRef1InUse, tmnxCcmHwIndex=tmnxCcmHwIndex, tmnxChassisMinorLEDState=tmnxChassisMinorLEDState, tmnxCcmEntry=tmnxCcmEntry, tmnxMDAHwIndex=tmnxMDAHwIndex, tmnxChassisFanEntry=tmnxChassisFanEntry, tmnxCpmCardConfigSource=tmnxCpmCardConfigSource, tmnxPeSoftwareError=tmnxPeSoftwareError, tmnxHwClass=tmnxHwClass, tmnxChassisNumPorts=tmnxChassisNumPorts, tmnxCcagPathWeight=tmnxCcagPathWeight, TmnxSETSRefQualified=TmnxSETSRefQualified, tmnxFabricSlotNum=tmnxFabricSlotNum, tmnxChassisV5v0ObsoleteGroup=tmnxChassisV5v0ObsoleteGroup, TmnxHwClass=TmnxHwClass, tmnxMcmTable=tmnxMcmTable, tmnxChassisComp7710V5v0=tmnxChassisComp7710V5v0, tmnxEqTypeNotificationRow=tmnxEqTypeNotificationRow, tmnxChassisNotificationObjects=tmnxChassisNotificationObjects, tmnxHwContainedIn=tmnxHwContainedIn, tmnxMcmTypeTable=tmnxMcmTypeTable, TmnxCardType=TmnxCardType, tmnxCpmCardBootOptionLastModified=tmnxCpmCardBootOptionLastModified, tmnxChassisTypeEntry=tmnxChassisTypeEntry, tmnxMDAHiBwMcastGroup=tmnxMDAHiBwMcastGroup, tmnxMDAEquippedType=tmnxMDAEquippedType, tmnxCcagId=tmnxCcagId, tmnxCcagPathCcAcctPolicyId=tmnxCcagPathCcAcctPolicyId, tmnxChassisUpgrade=tmnxChassisUpgrade, tmnxCardTypeStatus=tmnxCardTypeStatus, tmnxCpmFlashTable=tmnxCpmFlashTable, tmnxSyncIfTimingRefOrder1=tmnxSyncIfTimingRefOrder1, tmnxMcmTypeStatus=tmnxMcmTypeStatus, tmnxHwEntry=tmnxHwEntry, tmnxHwName=tmnxHwName, tmnxHwManufactureDate=tmnxHwManufactureDate, TmnxChassisMode=TmnxChassisMode, tmnxCcmIndex=tmnxCcmIndex, tmnxEqCardRemoved=tmnxEqCardRemoved, tmnxEqSyncIfTimingRef1Alarm=tmnxEqSyncIfTimingRef1Alarm, tmnxChassisV5v0Compliance=tmnxChassisV5v0Compliance, tSyncIfTimingAdmRevert=tSyncIfTimingAdmRevert, tmnxCcmTypeName=tmnxCcmTypeName, tmnxPeSoftwareAbnormalHalt=tmnxPeSoftwareAbnormalHalt, tmnxSyncIfTimingRef2BITSIfType=tmnxSyncIfTimingRef2BITSIfType, tSyncIfTimingAdmBITSIfType=tSyncIfTimingAdmBITSIfType, tmnxChassisNumFans=tmnxChassisNumFans, tmnxCardV3v0Group=tmnxCardV3v0Group, tmnxSyncIfTimingRef1Qualified=tmnxSyncIfTimingRef1Qualified, tmnxCpmFlashUsed=tmnxCpmFlashUsed, tmnxMDAMcPathMgmtPriInUseBw=tmnxMDAMcPathMgmtPriInUseBw, tmnxMDAEquippedPorts=tmnxMDAEquippedPorts, tmnxCcagPathLastChanged=tmnxCcagPathLastChanged, tmnxCcmTypeEntry=tmnxCcmTypeEntry, tmnxMDAReboot=tmnxMDAReboot, tSyncIfTimingAdmRefOrder3=tSyncIfTimingAdmRefOrder3, tmnxChassisAdminObjects=tmnxChassisAdminObjects, tmnxEqCardFirmwareUpgraded=tmnxEqCardFirmwareUpgraded, tmnxRedRestoreSuccess=tmnxRedRestoreSuccess, tmnxHwMfgString=tmnxHwMfgString, tmnxChassisNotificationV6v0Group=tmnxChassisNotificationV6v0Group, tmnxCcagPathCcEntry=tmnxCcagPathCcEntry, tmnxMDAMaxChannels=tmnxMDAMaxChannels, tmnxCardAllowedTypes=tmnxCardAllowedTypes, tmnxSyncIfTimingRef2Alarm=tmnxSyncIfTimingRef2Alarm, tmnxEqBackdoorBusFailure=tmnxEqBackdoorBusFailure, tmnxCpmCardAssignedType=tmnxCpmCardAssignedType, tmnxChassisUpgradeInProgress=tmnxChassisUpgradeInProgress, tmnxMcmHwIndex=tmnxMcmHwIndex, tmnxChassisNotificationClear=tmnxChassisNotificationClear, tmnxHwConformance=tmnxHwConformance, tmnxChassisTypeName=tmnxChassisTypeName, tmnxCpmCardConfigLastSaved=tmnxCpmCardConfigLastSaved, tmnxCpmCardMasterSlaveRefState=tmnxCpmCardMasterSlaveRefState, tSyncIfTimingAdmRef1BITSIfType=tSyncIfTimingAdmRef1BITSIfType, tmnxEqCardInserted=tmnxEqCardInserted, tmnxCpmCardConfigFileLastBooted=tmnxCpmCardConfigFileLastBooted, tmnxChassisType=tmnxChassisType, tmnxHwConfigChange=tmnxHwConfigChange, tmnxChassisNotifyPrefix=tmnxChassisNotifyPrefix, tmnxHwNotification=tmnxHwNotification, tmnxCcmTypeDescription=tmnxCcmTypeDescription, tmnxCardTypeIndex=tmnxCardTypeIndex, tmnxChassisNotifyMismatchedVer=tmnxChassisNotifyMismatchedVer, tSyncIfTimingAdmRef2SrcHw=tSyncIfTimingAdmRef2SrcHw, tmnxHwBootCodeVersion=tmnxHwBootCodeVersion, tmnxCpmCardIndexFileLastBootedHeader=tmnxCpmCardIndexFileLastBootedHeader, tmnxEqSyncIfTimingHoldoverClear=tmnxEqSyncIfTimingHoldoverClear, tmnxChassisNotificationV4v0Group=tmnxChassisNotificationV4v0Group, tmnxEqFanFailure=tmnxEqFanFailure, tmnxCcagPathRateOption=tmnxCcagPathRateOption, tmnxChassisOperMode=tmnxChassisOperMode, tmnxChassisFanOperStatus=tmnxChassisFanOperStatus, tmnxChassisV5v0Group=tmnxChassisV5v0Group, tmnxPeSoftwareLoadFailed=tmnxPeSoftwareLoadFailed, tmnxCcagPathCcTable=tmnxCcagPathCcTable, tmnxChassisUpdateWaitTime=tmnxChassisUpdateWaitTime, tmnxChassisAdminValueObjs=tmnxChassisAdminValueObjs, tmnxSyncIfTimingEntry=tmnxSyncIfTimingEntry, tmnxCcagCcaRate=tmnxCcagCcaRate, tmnxRedSecondaryCPMStatusChange=tmnxRedSecondaryCPMStatusChange, tmnxCardNumMdaSlots=tmnxCardNumMdaSlots, tmnxMDAIngNamedPoolPolicy=tmnxMDAIngNamedPoolPolicy, tmnxPeFPGAVersionMismatch=tmnxPeFPGAVersionMismatch, tmnxCcagRowStatus=tmnxCcagRowStatus, tmnxRedPrimaryCPMFail=tmnxRedPrimaryCPMFail, tmnxCpmCardRedundant=tmnxCpmCardRedundant, tmnxMcmEquippedType=tmnxMcmEquippedType, tmnxChassisAdminControlApply=tmnxChassisAdminControlApply, TmnxCcmType=TmnxCcmType, tmnxCcagDescription=tmnxCcagDescription, tmnxFabricAssignedType=tmnxFabricAssignedType, tSyncIfTimingAdmRef2SrcPort=tSyncIfTimingAdmRef2SrcPort, tmnxEqSyncIfTimingBITSAlarmClear=tmnxEqSyncIfTimingBITSAlarmClear, TmnxMDASuppType=TmnxMDASuppType, TmnxMDAChanType=TmnxMDAChanType, tmnxHwAdminState=tmnxHwAdminState, tmnxCpmCardAllowedTypes=tmnxCpmCardAllowedTypes, tmnxCcmTypeStatus=tmnxCcmTypeStatus, tmnxMcmTypeEntry=tmnxMcmTypeEntry, tmnxFabricEntry=tmnxFabricEntry, tmnxSyncIfTimingStatus=tmnxSyncIfTimingStatus, tmnxMDAMcPathMgmtAncInUseBw=tmnxMDAMcPathMgmtAncInUseBw, TmnxSlotNumOrZero=TmnxSlotNumOrZero, tmnxMDAMcPathMgmtAncPathLimit=tmnxMDAMcPathMgmtAncPathLimit, tmnxChassisTypeStatus=tmnxChassisTypeStatus, tmnxCcagPathCcEgrPoolSlpPlcy=tmnxCcagPathCcEgrPoolSlpPlcy, tmnxCardLastChange=tmnxCardLastChange, TmnxCcagRateOption=TmnxCcagRateOption, tmnxHwIndex=tmnxHwIndex, tmnxEqCpuFailure=tmnxEqCpuFailure, tmnxChassisNotifyCardName=tmnxChassisNotifyCardName, tmnxMDAMcPathMgmtAdminState=tmnxMDAMcPathMgmtAdminState, tmnxMDAEgrNamedPoolPolicy=tmnxMDAEgrNamedPoolPolicy, tmnxChassisHiBwMcastAlarm=tmnxChassisHiBwMcastAlarm, tmnxSyncIfTimingRef2SrcPort=tmnxSyncIfTimingRef2SrcPort, tmnxChassisNotifyHwIndex=tmnxChassisNotifyHwIndex, tmnxMdaTypeName=tmnxMdaTypeName, tmnxCcagTable=tmnxCcagTable, tmnxCpmFlashOperStatus=tmnxCpmFlashOperStatus, tmnxHwSoftwareCodeVersion=tmnxHwSoftwareCodeVersion, tmnxCardClockSource=tmnxCardClockSource, tmnxMcmAssignedType=tmnxMcmAssignedType, tmnxRedRestoreFail=tmnxRedRestoreFail, tmnxMDASlotNum=tmnxMDASlotNum, tmnxCpmCardNum=tmnxCpmCardNum, TmnxSlotNum=TmnxSlotNum, tmnxMcmTypeDescription=tmnxMcmTypeDescription, tmnxMDAMaxChannelization=tmnxMDAMaxChannelization, tmnxMdaTypeTable=tmnxMdaTypeTable, tmnxChassisAdminLastSetTimer=tmnxChassisAdminLastSetTimer, TmnxCcagId=TmnxCcagId)
