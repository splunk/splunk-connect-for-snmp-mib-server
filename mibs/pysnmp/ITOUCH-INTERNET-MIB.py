#
# PySNMP MIB module ITOUCH-INTERNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ITOUCH-INTERNET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:46:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ipAdEntAddr, ipNetToMediaNetAddress = mibBuilder.importSymbols("IP-MIB", "ipAdEntAddr", "ipNetToMediaNetAddress")
AddressType, iTouch, TypedAddress, DateTime = mibBuilder.importSymbols("ITOUCH-MIB", "AddressType", "iTouch", "TypedAddress", "DateTime")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Integer32, Counter32, MibIdentifier, TimeTicks, Bits, IpAddress, Counter64, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Integer32", "Counter32", "MibIdentifier", "TimeTicks", "Bits", "IpAddress", "Counter64", "Unsigned32", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xInternetDep = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 4))
xInternet = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10))
xIp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 1))
xTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 2))
xSnmpAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 3))
xDomainResolver = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 4))
xSlip = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 5))
xTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 6))
xTn3270 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 7))
xKerberos = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 8))
xPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 9))
xXremote = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 10))
xRotary = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 11))
xEgp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 12))
xOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 13))
xRouterIp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 14))
xRouterUdp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 15))
xRouterPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 16))
xRip = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 18))
xlpd = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 19))
xSecurID = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 20))
xSsh = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 23))
ipGatewayAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGatewayAddress1.setStatus('mandatory')
ipGatewayAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGatewayAddress2.setStatus('mandatory')
ipAutoSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAutoSubnetMask.setStatus('deprecated')
ipReassembly = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipReassembly.setStatus('mandatory')
ipFragmentsQueuedHigh = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragmentsQueuedHigh.setStatus('mandatory')
ipFragmentsQueuedCurrent = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragmentsQueuedCurrent.setStatus('mandatory')
ipGenAdExtTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 1, 7), )
if mibBuilder.loadTexts: ipGenAdExtTable.setStatus('mandatory')
ipARPTimeout = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipARPTimeout.setStatus('mandatory')
ipGatewayPingInterval = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGatewayPingInterval.setStatus('mandatory')
ipConfigureBootp = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipConfigureBootp.setStatus('mandatory')
ipGenAdExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 1, 7, 1), ).setIndexNames((0, "IP-MIB", "ipAdEntAddr"))
if mibBuilder.loadTexts: ipGenAdExtEntry.setStatus('mandatory')
ipGenAdEntExtType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("rotary", 2), ("slip", 3), ("ppp", 4))).clone('primary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGenAdEntExtType.setStatus('mandatory')
ipGenAdEntExtBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 1, 7, 1, 2), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGenAdEntExtBroadcast.setStatus('mandatory')
tcpPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 2, 1), )
if mibBuilder.loadTexts: tcpPortTable.setStatus('mandatory')
tcpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 2, 1, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "tcpPortIndex"))
if mibBuilder.loadTexts: tcpPortEntry.setStatus('mandatory')
tcpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpPortIndex.setStatus('mandatory')
tcpPortConnectByAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpPortConnectByAddress.setStatus('mandatory')
tcpPortWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpPortWindowSize.setStatus('mandatory')
tcpPortKeepAliveLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpPortKeepAliveLimit.setStatus('mandatory')
tcpResequencing = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpResequencing.setStatus('mandatory')
tcpQueuedSegs = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpQueuedSegs.setStatus('mandatory')
tcpDiscardSegs = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpDiscardSegs.setStatus('mandatory')
tcpConnectTimer = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpConnectTimer.setStatus('mandatory')
tcpLocalPortBase = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpLocalPortBase.setStatus('mandatory')
tcpLocalPortIncrement = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpLocalPortIncrement.setStatus('mandatory')
tcpRoutingTblSz = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpRoutingTblSz.setStatus('mandatory')
tcpDataSendDelay = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpDataSendDelay.setStatus('mandatory')
tcpAckDelay = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpAckDelay.setStatus('mandatory')
tcpRetransmitMin = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 3000)).clone(640)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpRetransmitMin.setStatus('mandatory')
snmpAgentGetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentGetCommunity.setStatus('mandatory')
snmpAgentSetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentSetCommunity.setStatus('mandatory')
snmpAgentTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentTrapCommunity.setStatus('mandatory')
snmpAgentGetClientNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentGetClientNumber.setStatus('mandatory')
snmpAgentSetClientNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentSetClientNumber.setStatus('mandatory')
snmpAgentTrapClientNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientNumber.setStatus('mandatory')
getClientTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 3, 7), )
if mibBuilder.loadTexts: getClientTable.setStatus('mandatory')
getClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "getClientIndex"))
if mibBuilder.loadTexts: getClientEntry.setStatus('mandatory')
getClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: getClientIndex.setStatus('mandatory')
getClientEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: getClientEntryStatus.setStatus('mandatory')
getClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1, 3), AddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: getClientAddressType.setStatus('mandatory')
getClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: getClientAddress.setStatus('mandatory')
setClientTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 3, 8), )
if mibBuilder.loadTexts: setClientTable.setStatus('mandatory')
setClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "setClientIndex"))
if mibBuilder.loadTexts: setClientEntry.setStatus('mandatory')
setClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setClientIndex.setStatus('mandatory')
setClientEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setClientEntryStatus.setStatus('mandatory')
setClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1, 3), AddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setClientAddressType.setStatus('mandatory')
setClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setClientAddress.setStatus('mandatory')
trapClientTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 3, 9), )
if mibBuilder.loadTexts: trapClientTable.setStatus('mandatory')
trapClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "trapClientIndex"))
if mibBuilder.loadTexts: trapClientEntry.setStatus('mandatory')
trapClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapClientIndex.setStatus('mandatory')
trapClientEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapClientEntryStatus.setStatus('mandatory')
trapClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1, 3), AddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapClientAddressType.setStatus('mandatory')
trapClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapClientAddress.setStatus('mandatory')
snmpAgentAuthFailureAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 10), TypedAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentAuthFailureAddress.setStatus('mandatory')
snmpAgentCommunityAuthenticationAlways = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentCommunityAuthenticationAlways.setStatus('mandatory')
domainResolverSuffix = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 115))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverSuffix.setStatus('mandatory')
domainResolverAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverAddress1.setStatus('mandatory')
domainResolverAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverAddress2.setStatus('mandatory')
domainResolverTtl = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 168))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverTtl.setStatus('mandatory')
domainResolverNameNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainResolverNameNumber.setStatus('mandatory')
nameTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 4, 6), )
if mibBuilder.loadTexts: nameTable.setStatus('mandatory')
nameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "nameName"), (0, "ITOUCH-INTERNET-MIB", "nameAddress"))
if mibBuilder.loadTexts: nameEntry.setStatus('mandatory')
nameName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameName.setStatus('mandatory')
nameAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameAddress.setStatus('mandatory')
nameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameStatus.setStatus('mandatory')
nameSource = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("manager", 1), ("primary", 2), ("secondary", 3), ("rwho", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameSource.setStatus('mandatory')
nameTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameTtl.setStatus('mandatory')
domainResolverPpp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 4, 7))
domainResolverPppPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 7, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverPppPrimaryServer.setStatus('mandatory')
domainResolverPppSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverPppSecondaryServer.setStatus('mandatory')
slipTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 5, 1), )
if mibBuilder.loadTexts: slipTable.setStatus('mandatory')
slipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "slipIndex"))
if mibBuilder.loadTexts: slipEntry.setStatus('mandatory')
slipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipIndex.setStatus('mandatory')
slipState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("compressed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipState.setStatus('mandatory')
slipLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipLocalAddress.setStatus('mandatory')
slipRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipRemoteAddress.setStatus('mandatory')
slipMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipMask.setStatus('mandatory')
slipPortPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketsReceived.setStatus('mandatory')
slipPortPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketsSent.setStatus('mandatory')
slipPortPacketsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketsDiscarded.setStatus('mandatory')
slipPortPacketLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketLengthErrors.setStatus('mandatory')
slipPortPacketChecksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketChecksumErrors.setStatus('mandatory')
slipNetworkPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipNetworkPacketsReceived.setStatus('mandatory')
slipNetworkPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipNetworkPacketsSent.setStatus('mandatory')
slipNetworkPacketsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipNetworkPacketsDiscarded.setStatus('mandatory')
telnetPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 6, 1), )
if mibBuilder.loadTexts: telnetPortTable.setStatus('mandatory')
telnetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "telnetPortIndex"))
if mibBuilder.loadTexts: telnetPortEntry.setStatus('mandatory')
telnetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetPortIndex.setStatus('mandatory')
telnetPortIncomingTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortIncomingTcpPort.setStatus('mandatory')
telnetPortOutgoingTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortOutgoingTcpPort.setStatus('mandatory')
telnetPortNewlineTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("cr", 2), ("crNull", 3), ("crLf", 4), ("std", 5), ("lfToCrLf", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortNewlineTranslation.setStatus('mandatory')
telnetPortTerminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortTerminalType.setStatus('mandatory')
telnetPortEorReflection = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortEorReflection.setStatus('mandatory')
telnetPortBinaryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("flowControl", 1), ("complete", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortBinaryMode.setStatus('mandatory')
telnetPortSendLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortSendLocation.setStatus('mandatory')
telnetPortClientLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetPortClientLocation.setStatus('mandatory')
telnetPortPassiveSendLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortPassiveSendLocation.setStatus('mandatory')
telnetSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 6, 2), )
if mibBuilder.loadTexts: telnetSerialPortTable.setStatus('mandatory')
telnetSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "telnetSerialPortIndex"))
if mibBuilder.loadTexts: telnetSerialPortEntry.setStatus('mandatory')
telnetSerialPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetSerialPortIndex.setStatus('mandatory')
telnetSerialPortOptionDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortOptionDisplay.setStatus('mandatory')
telnetSerialPortCsiEscape = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortCsiEscape.setStatus('mandatory')
telnetSerialPortEchoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("disabled", 3), ("passive", 4), ("character", 5), ("line", 6), ("noecho", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortEchoMode.setStatus('mandatory')
telnetSerialPortNewlineMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crNull", 1), ("crLf", 2), ("verbatim", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortNewlineMode.setStatus('mandatory')
telnetSerialPortTransmitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediate", 1), ("buffered", 2), ("timed", 3), ("controlchar", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortTransmitMode.setStatus('mandatory')
telnetSerialPortTransmitCharacterTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortTransmitCharacterTimes.setStatus('mandatory')
telnetSerialPortAbortOutputCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortAbortOutputCharacter.setStatus('mandatory')
telnetSerialPortAttentionCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortAttentionCharacter.setStatus('mandatory')
telnetSerialPortEraseKeyCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortEraseKeyCharacter.setStatus('mandatory')
telnetSerialPortEraseLineCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortEraseLineCharacter.setStatus('mandatory')
telnetSerialPortInterruptCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortInterruptCharacter.setStatus('mandatory')
telnetSerialPortQueryCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortQueryCharacter.setStatus('mandatory')
telnetSerialPortSynchronizeCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortSynchronizeCharacter.setStatus('mandatory')
telnetSerialPortUrgentBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortUrgentBreak.setStatus('mandatory')
telnetSerialPortRs491 = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortRs491.setStatus('mandatory')
telnetSerialPortTransmitBufferedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1500)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortTransmitBufferedTime.setStatus('mandatory')
telnetSerialPortInterpretInterruptAsBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortInterpretInterruptAsBreak.setStatus('mandatory')
telnetSerialPortPass8d = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortPass8d.setStatus('mandatory')
telnetSerialPortComControlClient = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortComControlClient.setStatus('mandatory')
telnetSerialPortComControlServer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortComControlServer.setStatus('mandatory')
telnetSerialPortComControlServerRaisesDtr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortComControlServerRaisesDtr.setStatus('mandatory')
telnetSerialPortComControlClientTogglesDtr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortComControlClientTogglesDtr.setStatus('mandatory')
tn3270DeviceNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270DeviceNumber.setStatus('mandatory')
tn3270LanguageNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270LanguageNumber.setStatus('mandatory')
tn3270PortKeymapStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortKeymapStatus.setStatus('mandatory')
tn3270DeviceTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 4), )
if mibBuilder.loadTexts: tn3270DeviceTable.setStatus('mandatory')
tn3270DeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "tn3270DeviceName"))
if mibBuilder.loadTexts: tn3270DeviceEntry.setStatus('mandatory')
tn3270DeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270DeviceName.setStatus('mandatory')
tn3270DeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270DeviceStatus.setStatus('mandatory')
tn3270DeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21)).clone('VT100')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270DeviceType.setStatus('mandatory')
tn3270Device3278Model = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("model2", 1), ("model5", 2))).clone('model2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270Device3278Model.setStatus('mandatory')
tn3270DeviceKeyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 5), Integer32().clone(70)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270DeviceKeyNumber.setStatus('mandatory')
tn3270DeviceScreenNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 6), Integer32().clone(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270DeviceScreenNumber.setStatus('mandatory')
tn3270KeyTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 5), )
if mibBuilder.loadTexts: tn3270KeyTable.setStatus('mandatory')
tn3270KeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "tn3270KeyDeviceName"), (0, "ITOUCH-INTERNET-MIB", "tn3270KeyName"))
if mibBuilder.loadTexts: tn3270KeyEntry.setStatus('mandatory')
tn3270KeyDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270KeyDeviceName.setStatus('mandatory')
tn3270KeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70))).clone(namedValues=NamedValues(("newline", 1), ("tab", 2), ("backtab", 3), ("cursorup", 4), ("cursorleft", 5), ("cursorright", 6), ("cursordown", 7), ("home", 8), ("delete", 9), ("eraseeof", 10), ("eraseinput", 11), ("insert", 12), ("flushinput", 13), ("refresh", 14), ("centsign", 15), ("duplicate", 16), ("fieldmark", 17), ("scroll", 18), ("status", 19), ("reset", 20), ("fastleft", 21), ("fastright", 22), ("showkeys", 23), ("print", 24), ("pf1", 39), ("pf2", 40), ("pf3", 41), ("pf4", 42), ("pf5", 43), ("pf6", 44), ("pf7", 45), ("pf8", 46), ("pf9", 47), ("pf10", 48), ("pf11", 49), ("pf12", 50), ("pf13", 51), ("pf14", 52), ("pf15", 53), ("pf16", 54), ("pf17", 55), ("pf18", 56), ("pf19", 57), ("pf20", 58), ("pf21", 59), ("pf22", 60), ("pf23", 61), ("pf24", 62), ("pa1", 63), ("pa2", 64), ("pa3", 65), ("sysreq", 66), ("enter", 67), ("clear", 68), ("cursorsel", 69), ("test", 70)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270KeyName.setStatus('mandatory')
tn3270KeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270KeyStatus.setStatus('deprecated')
tn3270KeyCharacterSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270KeyCharacterSequence.setStatus('mandatory')
tn3270KeyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270KeyDescription.setStatus('mandatory')
tn3270ScreenTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 6), )
if mibBuilder.loadTexts: tn3270ScreenTable.setStatus('mandatory')
tn3270ScreenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "tn3270ScreenDeviceName"), (0, "ITOUCH-INTERNET-MIB", "tn3270ScreenActionName"))
if mibBuilder.loadTexts: tn3270ScreenEntry.setStatus('mandatory')
tn3270ScreenDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270ScreenDeviceName.setStatus('mandatory')
tn3270ScreenActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("eraseeol", 1), ("clearscr", 2), ("movecursor", 3), ("col132", 4), ("col80", 5), ("beep", 6), ("charset", 7), ("boldon", 8), ("boldoff", 9), ("blinkon", 10), ("blinkoff", 11), ("underscoreon", 12), ("underscoreoff", 13), ("reverseon", 14), ("reverseoff", 15), ("colorBlue", 16), ("colorRed", 17), ("colorPink", 18), ("colorGreen", 19), ("colorTurquoise", 20), ("colorYellow", 21), ("colorWhite", 22), ("status1", 26), ("status2", 27), ("reset1", 28), ("reset2", 29), ("reset3", 30), ("reset4", 31), ("base", 32), ("sgr", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270ScreenActionName.setStatus('mandatory')
tn3270ScreenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270ScreenStatus.setStatus('deprecated')
tn3270ScreenCharacterSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270ScreenCharacterSequence.setStatus('mandatory')
tn3270LanguageTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 7), )
if mibBuilder.loadTexts: tn3270LanguageTable.setStatus('mandatory')
tn3270LanguageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 7, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "tn3270LanguageName"))
if mibBuilder.loadTexts: tn3270LanguageEntry.setStatus('mandatory')
tn3270LanguageName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270LanguageName.setStatus('mandatory')
tn3270LanguageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270LanguageStatus.setStatus('mandatory')
eToALanguageTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 8), )
if mibBuilder.loadTexts: eToALanguageTable.setStatus('mandatory')
eToALanguageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 8, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "eToALanguageName"), (0, "ITOUCH-INTERNET-MIB", "eToAOffset"))
if mibBuilder.loadTexts: eToALanguageEntry.setStatus('mandatory')
eToALanguageName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eToALanguageName.setStatus('mandatory')
eToAOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(65, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eToAOffset.setStatus('mandatory')
eToAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eToAValue.setStatus('mandatory')
aToELanguageTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 9), )
if mibBuilder.loadTexts: aToELanguageTable.setStatus('mandatory')
aToELanguageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 9, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "aToELanguageName"), (0, "ITOUCH-INTERNET-MIB", "aToEOffset"))
if mibBuilder.loadTexts: aToELanguageEntry.setStatus('mandatory')
aToELanguageName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aToELanguageName.setStatus('mandatory')
aToEOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(33, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aToEOffset.setStatus('mandatory')
aToEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aToEValue.setStatus('mandatory')
tn3270PortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 10), )
if mibBuilder.loadTexts: tn3270PortTable.setStatus('mandatory')
tn3270PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "tn3270PortIndex"))
if mibBuilder.loadTexts: tn3270PortEntry.setStatus('mandatory')
tn3270PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270PortIndex.setStatus('mandatory')
tn3270PortDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortDeviceName.setStatus('mandatory')
tn3270PortLanguageName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortLanguageName.setStatus('mandatory')
tn3270PortExtendedAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortExtendedAttributes.setStatus('mandatory')
tn3270PortEorNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortEorNegotiation.setStatus('mandatory')
tn3270PortErrorLock = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortErrorLock.setStatus('mandatory')
tn3270PortPrinterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortPrinterPort.setStatus('mandatory')
tn3270PortOutgoingTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortOutgoingTcpPort.setStatus('mandatory')
tn3270PortSpaceInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortSpaceInsert.setStatus('mandatory')
tn3270PortTypeAhead = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortTypeAhead.setStatus('mandatory')
tn3270PrefixKeyMap = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PrefixKeyMap.setStatus('mandatory')
tn3270PortScanner = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortScanner.setStatus('mandatory')
kerbStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("login", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbStatus.setStatus('mandatory')
kerbRealm = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbRealm.setStatus('mandatory')
kerbQueryLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbQueryLimit.setStatus('mandatory')
kerbMasterName = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbMasterName.setStatus('mandatory')
kerbServerName1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbServerName1.setStatus('mandatory')
kerbServerName2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbServerName2.setStatus('mandatory')
kerbInsecureLogins = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbInsecureLogins.setStatus('mandatory')
kerbSecureLogins = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbSecureLogins.setStatus('mandatory')
kerbSecureLoginsFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbSecureLoginsFailed.setStatus('mandatory')
kerbPasswordChangeFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbPasswordChangeFailed.setStatus('mandatory')
kerbError = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbError.setStatus('mandatory')
kerbErrorTime = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 12), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbErrorTime.setStatus('mandatory')
kerbMasterAccess = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbMasterAccess.setStatus('mandatory')
kerbMasterAccessFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbMasterAccessFailed.setStatus('mandatory')
kerbServerAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbServerAccess1.setStatus('mandatory')
kerbServerAccessFailed1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbServerAccessFailed1.setStatus('mandatory')
kerbServerAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbServerAccess2.setStatus('mandatory')
kerbServerAccessFailed2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbServerAccessFailed2.setStatus('mandatory')
kerbPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 8, 19), )
if mibBuilder.loadTexts: kerbPortTable.setStatus('mandatory')
kerbPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 8, 19, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "kerbPortIndex"))
if mibBuilder.loadTexts: kerbPortEntry.setStatus('mandatory')
kerbPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 8, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbPortIndex.setStatus('mandatory')
kerbPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 8, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("login", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbPortStatus.setStatus('mandatory')
kerbServerPort = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(88, 750))).clone(namedValues=NamedValues(("standardPort", 88), ("experimentalPort", 750)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbServerPort.setStatus('mandatory')
psEntryNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psEntryNumber.setStatus('mandatory')
psEntryNumberLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psEntryNumberLimit.setStatus('mandatory')
psEntryInvalidIndex = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psEntryInvalidIndex.setStatus('mandatory')
psPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 9, 4), )
if mibBuilder.loadTexts: psPortTable.setStatus('mandatory')
psPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 9, 4, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "psPortIndex"))
if mibBuilder.loadTexts: psPortEntry.setStatus('mandatory')
psPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPortIndex.setStatus('mandatory')
psPortDefaultInboundAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPortDefaultInboundAccess.setStatus('mandatory')
psPortDefaultOutboundAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPortDefaultOutboundAccess.setStatus('mandatory')
psClrInternetSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psClrInternetSecurity.setStatus('mandatory')
psTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 9, 5), )
if mibBuilder.loadTexts: psTable.setStatus('mandatory')
psEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "psEntryIndex"))
if mibBuilder.loadTexts: psEntry.setStatus('mandatory')
psEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psEntryIndex.setStatus('mandatory')
psEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryStatus.setStatus('mandatory')
psEntryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryAddress.setStatus('mandatory')
psEntryMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryMask.setStatus('mandatory')
psEntryAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryAccess.setStatus('mandatory')
psEntryDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryDirection.setStatus('mandatory')
psEntryPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryPortMap.setStatus('mandatory')
xremoteServerName1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremoteServerName1.setStatus('mandatory')
xremoteServerName2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremoteServerName2.setStatus('mandatory')
xremoteServerAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerAccess1.setStatus('mandatory')
xremoteServerAccessFailed1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerAccessFailed1.setStatus('mandatory')
xremoteServerAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerAccess2.setStatus('mandatory')
xremoteServerAccessFailed2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerAccessFailed2.setStatus('mandatory')
xremoteSessions = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteSessions.setStatus('mandatory')
xremotePortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 10, 8), )
if mibBuilder.loadTexts: xremotePortTable.setStatus('mandatory')
xremotePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "xremotePortIndex"))
if mibBuilder.loadTexts: xremotePortEntry.setStatus('mandatory')
xremotePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremotePortIndex.setStatus('mandatory')
xremotePortXremote = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremotePortXremote.setStatus('mandatory')
xremotePortXdmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("specific", 1), ("broadcast", 2), ("indirect", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremotePortXdmQuery.setStatus('mandatory')
xremotePortXdmHost = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremotePortXdmHost.setStatus('mandatory')
xremoteServerClients = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerClients.setStatus('mandatory')
rotaryNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rotaryNumber.setStatus('mandatory')
rotaryTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 11, 2), )
if mibBuilder.loadTexts: rotaryTable.setStatus('mandatory')
rotaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 11, 2, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "rotaryAddress"))
if mibBuilder.loadTexts: rotaryEntry.setStatus('mandatory')
rotaryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 11, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rotaryAddress.setStatus('mandatory')
rotaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rotaryStatus.setStatus('mandatory')
rotaryPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 11, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rotaryPortMap.setStatus('mandatory')
egpRouting = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egpRouting.setStatus('mandatory')
egpStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("noMemory", 2), ("noIpRouting", 3), ("noEgpRouting", 4), ("noNeighbors", 5), ("noAS", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpStatus.setStatus('mandatory')
egpNbrTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 12, 3), )
if mibBuilder.loadTexts: egpNbrTable.setStatus('mandatory')
egpNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 12, 3, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "egpNbrAddr"))
if mibBuilder.loadTexts: egpNbrEntry.setStatus('mandatory')
egpNbrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 12, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpNbrAddr.setStatus('mandatory')
egpNbrIntervalDead = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(30000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egpNbrIntervalDead.setStatus('mandatory')
egpNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 12, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egpNbrStatus.setStatus('mandatory')
ospfAutoConfigure = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfAutoConfigure.setStatus('mandatory')
ospfStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("active", 1), ("noMemory", 2), ("noIpRouting", 3), ("noOspfRouting", 4), ("noAreas", 5), ("noInterfaces", 6), ("noRtrId", 7), ("noBackBoneAndVirtualInterfaces", 8), ("noBackBoneAndInterface", 9), ("noBackBone", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfStatus.setStatus('mandatory')
ospfIfMtrcTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 13, 3), )
if mibBuilder.loadTexts: ospfIfMtrcTable.setStatus('mandatory')
ospfIfMtrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 13, 3, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "ospfIfMtrcIpAddress"), (0, "ITOUCH-INTERNET-MIB", "ospfIfMtrcAddressLessIf"), (0, "ITOUCH-INTERNET-MIB", "ospfIfMtrcTos"))
if mibBuilder.loadTexts: ospfIfMtrcEntry.setStatus('mandatory')
ospfIfMtrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfMtrcIpAddress.setStatus('mandatory')
ospfIfMtrcAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfMtrcAddressLessIf.setStatus('mandatory')
ospfIfMtrcTos = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfMtrcTos.setStatus('mandatory')
ospfIfMtrcCostActual = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfMtrcCostActual.setStatus('mandatory')
ospfXIfTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 13, 4), )
if mibBuilder.loadTexts: ospfXIfTable.setStatus('mandatory')
ospfXIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 13, 4, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "ospfXIfIpAddress"), (0, "ITOUCH-INTERNET-MIB", "ospfXIfAddressLessIf"))
if mibBuilder.loadTexts: ospfXIfEntry.setStatus('mandatory')
ospfXIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfXIfIpAddress.setStatus('mandatory')
ospfXIfAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfXIfAddressLessIf.setStatus('mandatory')
ospfXIfTypeActual = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("nonbroadcast", 2), ("pointToPoint", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfXIfTypeActual.setStatus('mandatory')
ospfXIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfXIfStatus.setStatus('mandatory')
ospfXAreaTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 13, 5), )
if mibBuilder.loadTexts: ospfXAreaTable.setStatus('mandatory')
ospfXAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 13, 5, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "ospfXAreaId"))
if mibBuilder.loadTexts: ospfXAreaEntry.setStatus('mandatory')
ospfXAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfXAreaId.setStatus('mandatory')
ospfXAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfXAreaStatus.setStatus('mandatory')
ipAdExtTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 14, 1), )
if mibBuilder.loadTexts: ipAdExtTable.setStatus('mandatory')
ipAdExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 14, 1, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "ipAdEntExtAddress"))
if mibBuilder.loadTexts: ipAdExtEntry.setStatus('mandatory')
ipAdEntExtAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntExtAddress.setStatus('mandatory')
ipAdEntExtProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAdEntExtProxyArp.setStatus('mandatory')
ipAdEntExtRip = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntExtRip.setStatus('deprecated')
ipRouterIfTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 14, 2), )
if mibBuilder.loadTexts: ipRouterIfTable.setStatus('mandatory')
ipRouterIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "ipRouterIfIndex"))
if mibBuilder.loadTexts: ipRouterIfEntry.setStatus('mandatory')
ipRouterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfIndex.setStatus('mandatory')
ipRouterIfProtocolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5))).clone(namedValues=NamedValues(("low", 1), ("medium", 3), ("high", 5))).clone('medium')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouterIfProtocolPriority.setStatus('mandatory')
ipRouterIfMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 65535)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouterIfMTU.setStatus('mandatory')
ipRouterIfRDP = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouterIfRDP.setStatus('mandatory')
ipRouterIfArpPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfArpPacketsIn.setStatus('mandatory')
ipRouterIfArpPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfArpPacketsOut.setStatus('mandatory')
ipRouterIfPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfPacketsIn.setStatus('mandatory')
ipRouterIfPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfPacketsOut.setStatus('mandatory')
ipRouterIfForwardsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfForwardsIn.setStatus('mandatory')
ipRouterIfForwardsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfForwardsOut.setStatus('mandatory')
xIpTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 14, 3))
ipTrafficSort = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTrafficSort.setStatus('mandatory')
ipTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2), )
if mibBuilder.loadTexts: ipTrafficTable.setStatus('mandatory')
ipTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "ipTrafficIndex"))
if mibBuilder.loadTexts: ipTrafficEntry.setStatus('mandatory')
ipTrafficIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficIndex.setStatus('mandatory')
ipTrafficPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficPercent.setStatus('mandatory')
ipTrafficDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficDstAddr.setStatus('mandatory')
ipTrafficSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficSrcAddr.setStatus('mandatory')
ipTrafficProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficProtocol.setStatus('mandatory')
ipTrafficDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficDstPort.setStatus('mandatory')
ipTrafficSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficSrcPort.setStatus('mandatory')
ipTrafficIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficIf.setStatus('mandatory')
ipTrafficMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTrafficMonitoring.setStatus('mandatory')
xIpNetToMediaTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 14, 4), )
if mibBuilder.loadTexts: xIpNetToMediaTable.setStatus('mandatory')
xIpNetToMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 14, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IP-MIB", "ipNetToMediaNetAddress"))
if mibBuilder.loadTexts: xIpNetToMediaEntry.setStatus('mandatory')
xIpNetToMediaCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIpNetToMediaCircuit.setStatus('mandatory')
xIpNetToMediaReverseArp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIpNetToMediaReverseArp.setStatus('mandatory')
udpBcstServerTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 15, 1), )
if mibBuilder.loadTexts: udpBcstServerTable.setStatus('mandatory')
udpBcstServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 15, 1, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "udpBcstServerAddress"))
if mibBuilder.loadTexts: udpBcstServerEntry.setStatus('mandatory')
udpBcstServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 15, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBcstServerAddress.setStatus('mandatory')
udpBcstServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpBcstServerStatus.setStatus('mandatory')
udpBcstPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 15, 2), )
if mibBuilder.loadTexts: udpBcstPortTable.setStatus('mandatory')
udpBcstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 15, 2, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "udpBcstPort"))
if mibBuilder.loadTexts: udpBcstPortEntry.setStatus('mandatory')
udpBcstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBcstPort.setStatus('mandatory')
udpBcstPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpBcstPortStatus.setStatus('mandatory')
udpBcstRouting = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpBcstRouting.setStatus('mandatory')
xImport = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 16, 1))
xExport = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 16, 2))
xFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 16, 3))
impEgpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1), )
if mibBuilder.loadTexts: impEgpRuleTable.setStatus('mandatory')
impEgpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "impEgpRuleAs"), (0, "ITOUCH-INTERNET-MIB", "impEgpRuleNetwork"))
if mibBuilder.loadTexts: impEgpRuleEntry.setStatus('mandatory')
impEgpRuleAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impEgpRuleAs.setStatus('mandatory')
impEgpRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impEgpRuleNetwork.setStatus('mandatory')
impEgpRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impEgpRuleAction.setStatus('mandatory')
impEgpRulePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impEgpRulePreference.setStatus('mandatory')
impEgpRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impEgpRuleType.setStatus('mandatory')
impEgpRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impEgpRuleMetricAction.setStatus('mandatory')
impEgpRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impEgpRuleMetric.setStatus('mandatory')
impEgpRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impEgpRuleStatus.setStatus('mandatory')
impOspfRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 2), )
if mibBuilder.loadTexts: impOspfRuleTable.setStatus('mandatory')
impOspfRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 2, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "impOspfRuleNetwork"))
if mibBuilder.loadTexts: impOspfRuleEntry.setStatus('mandatory')
impOspfRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impOspfRuleNetwork.setStatus('mandatory')
impOspfRulePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impOspfRulePreference.setStatus('mandatory')
impOspfRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impOspfRuleStatus.setStatus('mandatory')
impRipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3), )
if mibBuilder.loadTexts: impRipRuleTable.setStatus('mandatory')
impRipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "impRipRuleFromIf"), (0, "ITOUCH-INTERNET-MIB", "impRipRuleNetwork"))
if mibBuilder.loadTexts: impRipRuleEntry.setStatus('mandatory')
impRipRuleFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impRipRuleFromIf.setStatus('mandatory')
impRipRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impRipRuleNetwork.setStatus('mandatory')
impRipRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impRipRuleAction.setStatus('mandatory')
impRipRulePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impRipRulePreference.setStatus('mandatory')
impRipRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impRipRuleType.setStatus('mandatory')
impRipRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impRipRuleMetricAction.setStatus('mandatory')
impRipRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impRipRuleMetric.setStatus('mandatory')
impRipRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impRipRuleStatus.setStatus('mandatory')
impIsisRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4), )
if mibBuilder.loadTexts: impIsisRuleTable.setStatus('mandatory')
impIsisRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "impIsisRuleNetwork"))
if mibBuilder.loadTexts: impIsisRuleEntry.setStatus('mandatory')
impIsisRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impIsisRuleNetwork.setStatus('mandatory')
impIsisRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impIsisRuleAction.setStatus('mandatory')
impIsisRulePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impIsisRulePreference.setStatus('mandatory')
impIsisRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impIsisRuleType.setStatus('mandatory')
impIsisRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impIsisRuleMetricAction.setStatus('mandatory')
impIsisRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impIsisRuleMetric.setStatus('mandatory')
impIsisRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impIsisRuleStatus.setStatus('mandatory')
expEgpToEgpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1), )
if mibBuilder.loadTexts: expEgpToEgpRuleTable.setStatus('mandatory')
expEgpToEgpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "expEgpToEgpRuleToAs"), (0, "ITOUCH-INTERNET-MIB", "expEgpToEgpRuleNetwork"), (0, "ITOUCH-INTERNET-MIB", "expEgpToEgpRuleFromAs"))
if mibBuilder.loadTexts: expEgpToEgpRuleEntry.setStatus('mandatory')
expEgpToEgpRuleToAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToEgpRuleToAs.setStatus('mandatory')
expEgpToEgpRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToEgpRuleNetwork.setStatus('mandatory')
expEgpToEgpRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToEgpRuleFromAs.setStatus('mandatory')
expEgpToEgpRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToEgpRuleAction.setStatus('mandatory')
expEgpToEgpRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToEgpRuleMetricAction.setStatus('mandatory')
expEgpToEgpRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToEgpRuleMetric.setStatus('mandatory')
expEgpToEgpRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToEgpRuleStatus.setStatus('mandatory')
expOspfToEgpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2), )
if mibBuilder.loadTexts: expOspfToEgpRuleTable.setStatus('mandatory')
expOspfToEgpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "expOspfToEgpRuleToAs"), (0, "ITOUCH-INTERNET-MIB", "expOspfToEgpRuleNetwork"), (0, "ITOUCH-INTERNET-MIB", "expOspfToEgpRuleFromAs"))
if mibBuilder.loadTexts: expOspfToEgpRuleEntry.setStatus('mandatory')
expOspfToEgpRuleToAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToEgpRuleToAs.setStatus('mandatory')
expOspfToEgpRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToEgpRuleNetwork.setStatus('mandatory')
expOspfToEgpRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToEgpRuleFromAs.setStatus('mandatory')
expOspfToEgpRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToEgpRuleAction.setStatus('mandatory')
expOspfToEgpRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToEgpRuleMetricAction.setStatus('mandatory')
expOspfToEgpRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToEgpRuleMetric.setStatus('mandatory')
expOspfToEgpRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToEgpRuleStatus.setStatus('mandatory')
expStaticToEgpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3), )
if mibBuilder.loadTexts: expStaticToEgpRuleTable.setStatus('mandatory')
expStaticToEgpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "expStaticToEgpRuleToAs"), (0, "ITOUCH-INTERNET-MIB", "expStaticToEgpRuleNetwork"))
if mibBuilder.loadTexts: expStaticToEgpRuleEntry.setStatus('mandatory')
expStaticToEgpRuleToAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expStaticToEgpRuleToAs.setStatus('mandatory')
expStaticToEgpRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expStaticToEgpRuleNetwork.setStatus('mandatory')
expStaticToEgpRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToEgpRuleAction.setStatus('mandatory')
expStaticToEgpRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToEgpRuleMetricAction.setStatus('mandatory')
expStaticToEgpRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToEgpRuleMetric.setStatus('mandatory')
expStaticToEgpRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToEgpRuleStatus.setStatus('mandatory')
expEgpToOspfRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 4), )
if mibBuilder.loadTexts: expEgpToOspfRuleTable.setStatus('mandatory')
expEgpToOspfRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 4, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "expEgpToOspfRuleNetwork"), (0, "ITOUCH-INTERNET-MIB", "expEgpToOspfRuleFromAs"))
if mibBuilder.loadTexts: expEgpToOspfRuleEntry.setStatus('mandatory')
expEgpToOspfRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToOspfRuleNetwork.setStatus('mandatory')
expEgpToOspfRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToOspfRuleFromAs.setStatus('mandatory')
expEgpToOspfRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToOspfRuleAction.setStatus('mandatory')
expEgpToOspfRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToOspfRuleStatus.setStatus('mandatory')
expRipToEgpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5), )
if mibBuilder.loadTexts: expRipToEgpRuleTable.setStatus('mandatory')
expRipToEgpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "expRipToEgpRuleToAs"), (0, "ITOUCH-INTERNET-MIB", "expRipToEgpRuleNetwork"))
if mibBuilder.loadTexts: expRipToEgpRuleEntry.setStatus('mandatory')
expRipToEgpRuleToAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expRipToEgpRuleToAs.setStatus('mandatory')
expRipToEgpRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expRipToEgpRuleNetwork.setStatus('mandatory')
expRipToEgpRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToEgpRuleAction.setStatus('mandatory')
expRipToEgpRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToEgpRuleMetricAction.setStatus('mandatory')
expRipToEgpRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToEgpRuleMetric.setStatus('mandatory')
expRipToEgpRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToEgpRuleStatus.setStatus('mandatory')
expRipToOspfRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 6), )
if mibBuilder.loadTexts: expRipToOspfRuleTable.setStatus('mandatory')
expRipToOspfRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 6, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "expRipToOspfRuleNetwork"))
if mibBuilder.loadTexts: expRipToOspfRuleEntry.setStatus('mandatory')
expRipToOspfRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expRipToOspfRuleNetwork.setStatus('mandatory')
expRipToOspfRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToOspfRuleAction.setStatus('mandatory')
expRipToOspfRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToOspfRuleStatus.setStatus('mandatory')
expEgpToRipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7), )
if mibBuilder.loadTexts: expEgpToRipRuleTable.setStatus('mandatory')
expEgpToRipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "expEgpToRipRuleToIf"), (0, "ITOUCH-INTERNET-MIB", "expEgpToRipRuleNetwork"), (0, "ITOUCH-INTERNET-MIB", "expEgpToRipRuleFromAs"))
if mibBuilder.loadTexts: expEgpToRipRuleEntry.setStatus('mandatory')
expEgpToRipRuleToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToRipRuleToIf.setStatus('mandatory')
expEgpToRipRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToRipRuleNetwork.setStatus('mandatory')
expEgpToRipRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToRipRuleFromAs.setStatus('mandatory')
expEgpToRipRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToRipRuleAction.setStatus('mandatory')
expEgpToRipRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToRipRuleMetricAction.setStatus('mandatory')
expEgpToRipRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToRipRuleMetric.setStatus('mandatory')
expEgpToRipRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToRipRuleStatus.setStatus('mandatory')
expOspfToRipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8), )
if mibBuilder.loadTexts: expOspfToRipRuleTable.setStatus('mandatory')
expOspfToRipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "expOspfToRipRuleToIf"), (0, "ITOUCH-INTERNET-MIB", "expOspfToRipRuleNetwork"), (0, "ITOUCH-INTERNET-MIB", "expOspfToRipRuleFromAs"))
if mibBuilder.loadTexts: expOspfToRipRuleEntry.setStatus('mandatory')
expOspfToRipRuleToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToRipRuleToIf.setStatus('mandatory')
expOspfToRipRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToRipRuleNetwork.setStatus('mandatory')
expOspfToRipRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToRipRuleFromAs.setStatus('mandatory')
expOspfToRipRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToRipRuleAction.setStatus('mandatory')
expOspfToRipRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToRipRuleMetricAction.setStatus('mandatory')
expOspfToRipRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToRipRuleMetric.setStatus('mandatory')
expOspfToRipRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToRipRuleStatus.setStatus('mandatory')
expRipToRipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9), )
if mibBuilder.loadTexts: expRipToRipRuleTable.setStatus('mandatory')
expRipToRipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "expRipToRipRuleToIf"), (0, "ITOUCH-INTERNET-MIB", "expRipToRipRuleNetwork"))
if mibBuilder.loadTexts: expRipToRipRuleEntry.setStatus('mandatory')
expRipToRipRuleToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expRipToRipRuleToIf.setStatus('mandatory')
expRipToRipRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expRipToRipRuleNetwork.setStatus('mandatory')
expRipToRipRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToRipRuleAction.setStatus('mandatory')
expRipToRipRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToRipRuleMetricAction.setStatus('mandatory')
expRipToRipRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToRipRuleMetric.setStatus('mandatory')
expRipToRipRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToRipRuleStatus.setStatus('mandatory')
expStaticToRipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10), )
if mibBuilder.loadTexts: expStaticToRipRuleTable.setStatus('mandatory')
expStaticToRipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "expStaticToRipRuleToIf"), (0, "ITOUCH-INTERNET-MIB", "expStaticToRipRuleNetwork"))
if mibBuilder.loadTexts: expStaticToRipRuleEntry.setStatus('mandatory')
expStaticToRipRuleToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expStaticToRipRuleToIf.setStatus('mandatory')
expStaticToRipRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expStaticToRipRuleNetwork.setStatus('mandatory')
expStaticToRipRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToRipRuleAction.setStatus('mandatory')
expStaticToRipRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToRipRuleMetricAction.setStatus('mandatory')
expStaticToRipRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToRipRuleMetric.setStatus('mandatory')
expStaticToRipRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToRipRuleStatus.setStatus('mandatory')
expIsisToEgpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11), )
if mibBuilder.loadTexts: expIsisToEgpRuleTable.setStatus('mandatory')
expIsisToEgpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "expIsisToEgpRuleToAs"), (0, "ITOUCH-INTERNET-MIB", "expIsisToEgpRuleNetwork"))
if mibBuilder.loadTexts: expIsisToEgpRuleEntry.setStatus('mandatory')
expIsisToEgpRuleToAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expIsisToEgpRuleToAs.setStatus('mandatory')
expIsisToEgpRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expIsisToEgpRuleNetwork.setStatus('mandatory')
expIsisToEgpRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToEgpRuleAction.setStatus('mandatory')
expIsisToEgpRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToEgpRuleMetricAction.setStatus('mandatory')
expIsisToEgpRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToEgpRuleMetric.setStatus('mandatory')
expIsisToEgpRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToEgpRuleStatus.setStatus('mandatory')
expIsisToOspfRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 12), )
if mibBuilder.loadTexts: expIsisToOspfRuleTable.setStatus('mandatory')
expIsisToOspfRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 12, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "expIsisToOspfRuleNetwork"))
if mibBuilder.loadTexts: expIsisToOspfRuleEntry.setStatus('mandatory')
expIsisToOspfRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 12, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expIsisToOspfRuleNetwork.setStatus('mandatory')
expIsisToOspfRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToOspfRuleAction.setStatus('mandatory')
expIsisToOspfRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToOspfRuleStatus.setStatus('mandatory')
expIsisToRipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13), )
if mibBuilder.loadTexts: expIsisToRipRuleTable.setStatus('mandatory')
expIsisToRipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "expIsisToRipRuleNetwork"))
if mibBuilder.loadTexts: expIsisToRipRuleEntry.setStatus('mandatory')
expIsisToRipRuleToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expIsisToRipRuleToIf.setStatus('mandatory')
expIsisToRipRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expIsisToRipRuleNetwork.setStatus('mandatory')
expIsisToRipRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToRipRuleAction.setStatus('mandatory')
expIsisToRipRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToRipRuleMetricAction.setStatus('mandatory')
expIsisToRipRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToRipRuleMetric.setStatus('mandatory')
expIsisToRipRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToRipRuleStatus.setStatus('mandatory')
expEgpToIsisRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14), )
if mibBuilder.loadTexts: expEgpToIsisRuleTable.setStatus('mandatory')
expEgpToIsisRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "expEgpToIsisRuleNetwork"), (0, "ITOUCH-INTERNET-MIB", "expEgpToIsisRuleFromAs"))
if mibBuilder.loadTexts: expEgpToIsisRuleEntry.setStatus('mandatory')
expEgpToIsisRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToIsisRuleNetwork.setStatus('mandatory')
expEgpToIsisRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToIsisRuleFromAs.setStatus('mandatory')
expEgpToIsisRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleAction.setStatus('mandatory')
expEgpToIsisRuleMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleMetricType.setStatus('mandatory')
expEgpToIsisRuleDefaultMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleDefaultMetricAction.setStatus('mandatory')
expEgpToIsisRuleDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleDefaultMetric.setStatus('mandatory')
expEgpToIsisRuleDelayMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleDelayMetricAction.setStatus('mandatory')
expEgpToIsisRuleDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleDelayMetric.setStatus('mandatory')
expEgpToIsisRuleErrorMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleErrorMetricAction.setStatus('mandatory')
expEgpToIsisRuleErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleErrorMetric.setStatus('mandatory')
expEgpToIsisRuleExpenseMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleExpenseMetricAction.setStatus('mandatory')
expEgpToIsisRuleExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleExpenseMetric.setStatus('mandatory')
expEgpToIsisRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleStatus.setStatus('mandatory')
expOspfToIsisRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15), )
if mibBuilder.loadTexts: expOspfToIsisRuleTable.setStatus('mandatory')
expOspfToIsisRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "expOspfToIsisRuleNetwork"), (0, "ITOUCH-INTERNET-MIB", "expOspfToIsisRuleFromAs"))
if mibBuilder.loadTexts: expOspfToIsisRuleEntry.setStatus('mandatory')
expOspfToIsisRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToIsisRuleNetwork.setStatus('mandatory')
expOspfToIsisRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToIsisRuleFromAs.setStatus('mandatory')
expOspfToIsisRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleAction.setStatus('mandatory')
expOspfToIsisRuleMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleMetricType.setStatus('mandatory')
expOspfToIsisRuleDefaultMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleDefaultMetricAction.setStatus('mandatory')
expOspfToIsisRuleDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleDefaultMetric.setStatus('mandatory')
expOspfToIsisRuleDelayMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleDelayMetricAction.setStatus('mandatory')
expOspfToIsisRuleDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleDelayMetric.setStatus('mandatory')
expOspfToIsisRuleErrorMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleErrorMetricAction.setStatus('mandatory')
expOspfToIsisRuleErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleErrorMetric.setStatus('mandatory')
expOspfToIsisRuleExpenseMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleExpenseMetricAction.setStatus('mandatory')
expOspfToIsisRuleExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleExpenseMetric.setStatus('mandatory')
expOspfToIsisRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleStatus.setStatus('mandatory')
expRipToIsisRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16), )
if mibBuilder.loadTexts: expRipToIsisRuleTable.setStatus('mandatory')
expRipToIsisRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "expRipToIsisRuleNetwork"))
if mibBuilder.loadTexts: expRipToIsisRuleEntry.setStatus('mandatory')
expRipToIsisRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expRipToIsisRuleNetwork.setStatus('mandatory')
expRipToIsisRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleAction.setStatus('mandatory')
expRipToIsisRuleMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleMetricType.setStatus('mandatory')
expRipToIsisRuleDefaultMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleDefaultMetricAction.setStatus('mandatory')
expRipToIsisRuleDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleDefaultMetric.setStatus('mandatory')
expRipToIsisRuleDelayMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleDelayMetricAction.setStatus('mandatory')
expRipToIsisRuleDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleDelayMetric.setStatus('mandatory')
expRipToIsisRuleErrorMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleErrorMetricAction.setStatus('mandatory')
expRipToIsisRuleErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleErrorMetric.setStatus('mandatory')
expRipToIsisRuleExpenseMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleExpenseMetricAction.setStatus('mandatory')
expRipToIsisRuleExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleExpenseMetric.setStatus('mandatory')
expRipToIsisRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleStatus.setStatus('mandatory')
expStaticToIsisRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17), )
if mibBuilder.loadTexts: expStaticToIsisRuleTable.setStatus('mandatory')
expStaticToIsisRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "expStaticToIsisRuleNetwork"))
if mibBuilder.loadTexts: expStaticToIsisRuleEntry.setStatus('mandatory')
expStaticToIsisRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expStaticToIsisRuleNetwork.setStatus('mandatory')
expStaticToIsisRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleAction.setStatus('mandatory')
expStaticToIsisRuleMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleMetricType.setStatus('mandatory')
expStaticToIsisRuleDefaultMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleDefaultMetricAction.setStatus('mandatory')
expStaticToIsisRuleDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleDefaultMetric.setStatus('mandatory')
expStaticToIsisRuleDelayMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleDelayMetricAction.setStatus('mandatory')
expStaticToIsisRuleDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleDelayMetric.setStatus('mandatory')
expStaticToIsisRuleErrorMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleErrorMetricAction.setStatus('mandatory')
expStaticToIsisRuleErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleErrorMetric.setStatus('mandatory')
expStaticToIsisRuleExpenseMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleExpenseMetricAction.setStatus('mandatory')
expStaticToIsisRuleExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleExpenseMetric.setStatus('mandatory')
expStaticToIsisRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleStatus.setStatus('mandatory')
ipIfFilterTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1), )
if mibBuilder.loadTexts: ipIfFilterTable.setStatus('deprecated')
ipIfFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "ipIfFilterIndex"), (0, "ITOUCH-INTERNET-MIB", "ipIfFilterProtocol"), (0, "ITOUCH-INTERNET-MIB", "ipIfFilterDstPort"), (0, "ITOUCH-INTERNET-MIB", "ipIfFilterSrcPort"), (0, "ITOUCH-INTERNET-MIB", "ipIfFilterDstAddr"), (0, "ITOUCH-INTERNET-MIB", "ipIfFilterDstMask"), (0, "ITOUCH-INTERNET-MIB", "ipIfFilterSrcAddr"), (0, "ITOUCH-INTERNET-MIB", "ipIfFilterSrcMask"))
if mibBuilder.loadTexts: ipIfFilterEntry.setStatus('deprecated')
ipIfFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterIndex.setStatus('deprecated')
ipIfFilterDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterDstAddr.setStatus('deprecated')
ipIfFilterDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterDstMask.setStatus('deprecated')
ipIfFilterSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterSrcAddr.setStatus('deprecated')
ipIfFilterSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterSrcMask.setStatus('deprecated')
ipIfFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterProtocol.setStatus('deprecated')
ipIfFilterDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterDstPort.setStatus('deprecated')
ipIfFilterSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterSrcPort.setStatus('deprecated')
ipIfFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2))).clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipIfFilterAction.setStatus('deprecated')
ipIfFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipIfFilterStatus.setStatus('deprecated')
ipFilterState = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterState.setStatus('mandatory')
ipIfFilter2Table = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3), )
if mibBuilder.loadTexts: ipIfFilter2Table.setStatus('mandatory')
ipIfFilter2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "ipIfFilter2Index"), (0, "ITOUCH-INTERNET-MIB", "ipIfFilter2Protocol"), (0, "ITOUCH-INTERNET-MIB", "ipIfFilter2DstPortStart"), (0, "ITOUCH-INTERNET-MIB", "ipIfFilter2DstPortEnd"), (0, "ITOUCH-INTERNET-MIB", "ipIfFilter2TcpSyn"), (0, "ITOUCH-INTERNET-MIB", "ipIfFilter2SrcPortStart"), (0, "ITOUCH-INTERNET-MIB", "ipIfFilter2SrcPortEnd"), (0, "ITOUCH-INTERNET-MIB", "ipIfFilter2DstMask"), (0, "ITOUCH-INTERNET-MIB", "ipIfFilter2DstAddr"), (0, "ITOUCH-INTERNET-MIB", "ipIfFilter2SrcMask"), (0, "ITOUCH-INTERNET-MIB", "ipIfFilter2SrcAddr"))
if mibBuilder.loadTexts: ipIfFilter2Entry.setStatus('mandatory')
ipIfFilter2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2Index.setStatus('mandatory')
ipIfFilter2DstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2DstAddr.setStatus('mandatory')
ipIfFilter2DstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2DstMask.setStatus('mandatory')
ipIfFilter2SrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2SrcAddr.setStatus('mandatory')
ipIfFilter2SrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2SrcMask.setStatus('mandatory')
ipIfFilter2Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2Protocol.setStatus('mandatory')
ipIfFilter2DstPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2DstPortStart.setStatus('mandatory')
ipIfFilter2SrcPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2SrcPortStart.setStatus('mandatory')
ipIfFilter2Action = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2))).clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipIfFilter2Action.setStatus('mandatory')
ipIfFilter2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipIfFilter2Status.setStatus('mandatory')
ipIfFilter2DstPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2DstPortEnd.setStatus('mandatory')
ipIfFilter2SrcPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2SrcPortEnd.setStatus('mandatory')
ipIfFilter2TcpSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("all", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2TcpSyn.setStatus('mandatory')
ipIfFilter2ProtocolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 256))).clone(namedValues=NamedValues(("low", 1), ("medium", 3), ("high", 5), ("none", 256))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipIfFilter2ProtocolPriority.setStatus('mandatory')
ripState = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripState.setStatus('mandatory')
ripStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("ripDisabled", 2), ("ipDisabled", 3), ("noNetworksEnabled", 4), ("noMemory", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatus.setStatus('mandatory')
ripNetTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 18, 3), )
if mibBuilder.loadTexts: ripNetTable.setStatus('mandatory')
ripNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 18, 3, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "ripNetNet"))
if mibBuilder.loadTexts: ripNetEntry.setStatus('mandatory')
ripNetNet = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 18, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNetNet.setStatus('mandatory')
ripNetState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 18, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("routerDiscovery", 2), ("full", 3))).clone('full')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNetState.setStatus('mandatory')
ripNetRipsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 18, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNetRipsIn.setStatus('mandatory')
ripNetRipsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 18, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNetRipsOut.setStatus('mandatory')
ripNetAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 18, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("poisonedReverse", 1), ("splitHorizon", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNetAlgorithm.setStatus('mandatory')
lpdQueueTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 19, 1), )
if mibBuilder.loadTexts: lpdQueueTable.setStatus('mandatory')
lpdQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "lpdQueueName"))
if mibBuilder.loadTexts: lpdQueueEntry.setStatus('mandatory')
lpdQueueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdQueueStatus.setStatus('mandatory')
lpdQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdQueueName.setStatus('mandatory')
lpdQueuePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdQueuePorts.setStatus('mandatory')
lpdQueueEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdQueueEnabled.setStatus('mandatory')
lpdQueueLfConversion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lf", 1), ("lfcr", 2))).clone('lf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdQueueLfConversion.setStatus('mandatory')
lpdQueueTotalJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdQueueTotalJobs.setStatus('mandatory')
lpdQueueActiveJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdQueueActiveJobs.setStatus('mandatory')
lpdQueueWaitingJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdQueueWaitingJobs.setStatus('mandatory')
lpdQueueProcessedJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdQueueProcessedJobs.setStatus('mandatory')
lpdQueueFormFeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("formfeedafter", 1), ("formfeedbefore", 2), ("formfeednone", 3))).clone('formfeedafter')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdQueueFormFeed.setStatus('mandatory')
lpdQueueBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdQueueBypass.setStatus('mandatory')
lpdJobTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 19, 2), )
if mibBuilder.loadTexts: lpdJobTable.setStatus('mandatory')
lpdJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "lpdQueueName"), (0, "ITOUCH-INTERNET-MIB", "lpdJobNumber"))
if mibBuilder.loadTexts: lpdJobEntry.setStatus('mandatory')
lpdJobStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdJobStatus.setStatus('mandatory')
lpdJobNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdJobNumber.setStatus('mandatory')
lpdJobAssignedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdJobAssignedPort.setStatus('mandatory')
lpdJobFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdJobFileSize.setStatus('mandatory')
lpdJobHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdJobHostName.setStatus('mandatory')
lpdJobFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdJobFileName.setStatus('mandatory')
lpdJobState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initialized", 1), ("waiting", 2), ("assigned", 3), ("printingData", 4), ("printingControl", 5), ("aborted", 6), ("completed", 7), ("error", 8), ("flushing", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdJobState.setStatus('mandatory')
securIDServerName0 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDServerName0.setStatus('mandatory')
securIDServerName1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDServerName1.setStatus('mandatory')
securIDServerName2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDServerName2.setStatus('mandatory')
securIDServerName3 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDServerName3.setStatus('mandatory')
securIDServerName4 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDServerName4.setStatus('mandatory')
securIDMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDMaxRetries.setStatus('mandatory')
securIDBaseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDBaseTimeout.setStatus('mandatory')
securIDPort = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDPort.setStatus('mandatory')
securIDQueryLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDQueryLimit.setStatus('mandatory')
securIDEncryptionMode = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sdiBlockCipher", 1), ("des", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDEncryptionMode.setStatus('mandatory')
securIDInsecureLogins = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDInsecureLogins.setStatus('mandatory')
securIDSecureLogins = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDSecureLogins.setStatus('mandatory')
securIDSecureLoginsFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDSecureLoginsFailed.setStatus('mandatory')
securIDServerAccess0 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccess0.setStatus('mandatory')
securIDServerAccessFailed0 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccessFailed0.setStatus('mandatory')
securIDServerAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccess1.setStatus('mandatory')
securIDServerAccessFailed1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccessFailed1.setStatus('mandatory')
securIDServerAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccess2.setStatus('mandatory')
securIDServerAccessFailed2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccessFailed2.setStatus('mandatory')
securIDServerAccess3 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccess3.setStatus('mandatory')
securIDServerAccessFailed3 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccessFailed3.setStatus('mandatory')
securIDServerAccess4 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccess4.setStatus('mandatory')
securIDServerAccessFailed4 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccessFailed4.setStatus('mandatory')
securIDErrorPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDErrorPortIndex.setStatus('mandatory')
securIDError = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDError.setStatus('mandatory')
securIDErrorUsername = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDErrorUsername.setStatus('mandatory')
securIDPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 20, 27), )
if mibBuilder.loadTexts: securIDPortTable.setStatus('mandatory')
securIDPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 20, 27, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "securIDPortIndex"))
if mibBuilder.loadTexts: securIDPortEntry.setStatus('mandatory')
securIDPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 20, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDPortIndex.setStatus('mandatory')
securIDPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 20, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDPortStatus.setStatus('mandatory')
sshPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 23, 1), )
if mibBuilder.loadTexts: sshPortTable.setStatus('mandatory')
sshPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1), ).setIndexNames((0, "ITOUCH-INTERNET-MIB", "sshPortIndex"))
if mibBuilder.loadTexts: sshPortEntry.setStatus('mandatory')
sshPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshPortIndex.setStatus('mandatory')
sshPortIncomingTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPortIncomingTcpPort.setStatus('mandatory')
sshPortNewlineFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("crToCrLf", 2), ("crToCrNull", 3), ("crLfToCr", 4), ("crLfToCrNull", 5), ("crNullToCr", 6), ("crNullToCrLf", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPortNewlineFiltering.setStatus('mandatory')
sshPortNewline = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("crToCrLf", 2), ("crToCrNull", 3), ("crLfToCr", 4), ("crLfToCrNull", 5), ("crNullToCr", 6), ("crNullToCrLf", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPortNewline.setStatus('mandatory')
sshPortTransmitBufferedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1500)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPortTransmitBufferedTime.setStatus('mandatory')
sshPortRemoteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ssh", 1), ("telnet", 2), ("both", 3))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPortRemoteProtocol.setStatus('mandatory')
sshCipherMask = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshCipherMask.setStatus('mandatory')
sshAuthenticationTimeout = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthenticationTimeout.setStatus('mandatory')
sshHostKeyLength = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 2048)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyLength.setStatus('mandatory')
sshHostKeyGenerate = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("generate", 2), ("update", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyGenerate.setStatus('mandatory')
sshServerKeyLength = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 2048)).clone(768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerKeyLength.setStatus('mandatory')
sshServerKeyTtl = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1440)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerKeyTtl.setStatus('mandatory')
sshServerMaxBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4096, 262144)).clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerMaxBufferSize.setStatus('mandatory')
mibBuilder.exportSymbols("ITOUCH-INTERNET-MIB", telnetSerialPortComControlServerRaisesDtr=telnetSerialPortComControlServerRaisesDtr, impEgpRuleAs=impEgpRuleAs, expStaticToIsisRuleExpenseMetricAction=expStaticToIsisRuleExpenseMetricAction, telnetSerialPortEraseKeyCharacter=telnetSerialPortEraseKeyCharacter, xEgp=xEgp, securIDBaseTimeout=securIDBaseTimeout, lpdJobTable=lpdJobTable, aToELanguageEntry=aToELanguageEntry, securIDServerAccess3=securIDServerAccess3, xInternet=xInternet, kerbPortStatus=kerbPortStatus, xIpNetToMediaCircuit=xIpNetToMediaCircuit, expOspfToRipRuleTable=expOspfToRipRuleTable, lpdQueueBypass=lpdQueueBypass, expIsisToOspfRuleAction=expIsisToOspfRuleAction, expEgpToEgpRuleEntry=expEgpToEgpRuleEntry, psEntryAddress=psEntryAddress, expIsisToOspfRuleNetwork=expIsisToOspfRuleNetwork, ospfXAreaStatus=ospfXAreaStatus, sshPortIncomingTcpPort=sshPortIncomingTcpPort, sshHostKeyGenerate=sshHostKeyGenerate, sshServerMaxBufferSize=sshServerMaxBufferSize, trapClientTable=trapClientTable, expRipToIsisRuleErrorMetricAction=expRipToIsisRuleErrorMetricAction, expEgpToEgpRuleNetwork=expEgpToEgpRuleNetwork, xRouterPolicy=xRouterPolicy, ripState=ripState, tn3270ScreenActionName=tn3270ScreenActionName, telnetSerialPortTransmitMode=telnetSerialPortTransmitMode, ipIfFilterSrcAddr=ipIfFilterSrcAddr, ospfXIfTypeActual=ospfXIfTypeActual, nameAddress=nameAddress, expOspfToIsisRuleMetricType=expOspfToIsisRuleMetricType, getClientEntryStatus=getClientEntryStatus, ipIfFilter2Index=ipIfFilter2Index, lpdJobNumber=lpdJobNumber, ipIfFilterEntry=ipIfFilterEntry, expEgpToRipRuleMetricAction=expEgpToRipRuleMetricAction, udpBcstRouting=udpBcstRouting, trapClientEntryStatus=trapClientEntryStatus, ipFilterState=ipFilterState, tn3270DeviceStatus=tn3270DeviceStatus, sshCipherMask=sshCipherMask, tcpDataSendDelay=tcpDataSendDelay, domainResolverPppPrimaryServer=domainResolverPppPrimaryServer, expStaticToIsisRuleDefaultMetricAction=expStaticToIsisRuleDefaultMetricAction, ripNetRipsOut=ripNetRipsOut, tn3270ScreenTable=tn3270ScreenTable, setClientEntryStatus=setClientEntryStatus, expRipToEgpRuleTable=expRipToEgpRuleTable, expIsisToEgpRuleNetwork=expIsisToEgpRuleNetwork, psEntryNumber=psEntryNumber, securIDServerName1=securIDServerName1, ipGatewayPingInterval=ipGatewayPingInterval, slipRemoteAddress=slipRemoteAddress, xIpNetToMediaEntry=xIpNetToMediaEntry, impRipRuleTable=impRipRuleTable, impIsisRuleMetricAction=impIsisRuleMetricAction, tn3270PortKeymapStatus=tn3270PortKeymapStatus, rotaryTable=rotaryTable, ripNetAlgorithm=ripNetAlgorithm, slipNetworkPacketsReceived=slipNetworkPacketsReceived, udpBcstPort=udpBcstPort, kerbQueryLimit=kerbQueryLimit, ospfIfMtrcTos=ospfIfMtrcTos, expOspfToIsisRuleAction=expOspfToIsisRuleAction, expEgpToOspfRuleAction=expEgpToOspfRuleAction, egpNbrTable=egpNbrTable, securIDServerName3=securIDServerName3, tn3270PortErrorLock=tn3270PortErrorLock, impIsisRuleEntry=impIsisRuleEntry, udpBcstServerAddress=udpBcstServerAddress, ipIfFilterTable=ipIfFilterTable, kerbStatus=kerbStatus, expEgpToOspfRuleEntry=expEgpToOspfRuleEntry, ipRouterIfProtocolPriority=ipRouterIfProtocolPriority, expIsisToEgpRuleToAs=expIsisToEgpRuleToAs, setClientIndex=setClientIndex, lpdJobEntry=lpdJobEntry, setClientAddress=setClientAddress, expOspfToIsisRuleExpenseMetric=expOspfToIsisRuleExpenseMetric, telnetSerialPortPass8d=telnetSerialPortPass8d, ipGenAdExtTable=ipGenAdExtTable, ipAdExtEntry=ipAdExtEntry, sshHostKeyLength=sshHostKeyLength, rotaryPortMap=rotaryPortMap, telnetPortSendLocation=telnetPortSendLocation, ospfIfMtrcTable=ospfIfMtrcTable, udpBcstServerEntry=udpBcstServerEntry, expStaticToIsisRuleDelayMetric=expStaticToIsisRuleDelayMetric, impOspfRuleTable=impOspfRuleTable, xPortSecurity=xPortSecurity, xKerberos=xKerberos, telnetPortNewlineTranslation=telnetPortNewlineTranslation, ipARPTimeout=ipARPTimeout, lpdQueueFormFeed=lpdQueueFormFeed, expOspfToEgpRuleEntry=expOspfToEgpRuleEntry, impEgpRuleMetricAction=impEgpRuleMetricAction, snmpAgentCommunityAuthenticationAlways=snmpAgentCommunityAuthenticationAlways, kerbSecureLogins=kerbSecureLogins, ripNetState=ripNetState, ipTrafficEntry=ipTrafficEntry, expStaticToRipRuleTable=expStaticToRipRuleTable, getClientEntry=getClientEntry, expOspfToRipRuleMetricAction=expOspfToRipRuleMetricAction, tn3270LanguageTable=tn3270LanguageTable, expStaticToIsisRuleTable=expStaticToIsisRuleTable, expEgpToRipRuleAction=expEgpToRipRuleAction, lpdJobHostName=lpdJobHostName, ipGenAdExtEntry=ipGenAdExtEntry, tn3270PortEorNegotiation=tn3270PortEorNegotiation, telnetPortBinaryMode=telnetPortBinaryMode, ipTrafficProtocol=ipTrafficProtocol, ipAdExtTable=ipAdExtTable, impEgpRuleType=impEgpRuleType, kerbServerAccess2=kerbServerAccess2, udpBcstPortEntry=udpBcstPortEntry, lpdQueueEntry=lpdQueueEntry, expOspfToEgpRuleToAs=expOspfToEgpRuleToAs, ripNetEntry=ripNetEntry, xTcp=xTcp, tn3270PortPrinterPort=tn3270PortPrinterPort, psEntryInvalidIndex=psEntryInvalidIndex, sshServerKeyTtl=sshServerKeyTtl, lpdQueueLfConversion=lpdQueueLfConversion, snmpAgentSetCommunity=snmpAgentSetCommunity, telnetPortOutgoingTcpPort=telnetPortOutgoingTcpPort, rotaryStatus=rotaryStatus, sshPortIndex=sshPortIndex, ipTrafficDstAddr=ipTrafficDstAddr, getClientTable=getClientTable, psPortDefaultOutboundAccess=psPortDefaultOutboundAccess, ipIfFilter2Table=ipIfFilter2Table, nameSource=nameSource, expOspfToRipRuleStatus=expOspfToRipRuleStatus, securIDServerAccess4=securIDServerAccess4, tn3270KeyDeviceName=tn3270KeyDeviceName, ipRouterIfEntry=ipRouterIfEntry, ospfXIfStatus=ospfXIfStatus, expEgpToEgpRuleMetric=expEgpToEgpRuleMetric, ipAutoSubnetMask=ipAutoSubnetMask, domainResolverPppSecondaryServer=domainResolverPppSecondaryServer, expRipToOspfRuleEntry=expRipToOspfRuleEntry, expEgpToIsisRuleFromAs=expEgpToIsisRuleFromAs, telnetPortClientLocation=telnetPortClientLocation, kerbServerAccessFailed2=kerbServerAccessFailed2, xremoteServerAccess1=xremoteServerAccess1, expRipToRipRuleEntry=expRipToRipRuleEntry, securIDMaxRetries=securIDMaxRetries, expOspfToIsisRuleNetwork=expOspfToIsisRuleNetwork, tn3270DeviceKeyNumber=tn3270DeviceKeyNumber, sshPortTable=sshPortTable, slipPortPacketsSent=slipPortPacketsSent, slipPortPacketLengthErrors=slipPortPacketLengthErrors, kerbPortIndex=kerbPortIndex, telnetSerialPortComControlClient=telnetSerialPortComControlClient, ripNetTable=ripNetTable, ipIfFilter2Protocol=ipIfFilter2Protocol, securIDServerAccess2=securIDServerAccess2, ospfIfMtrcEntry=ospfIfMtrcEntry, psEntry=psEntry, slipLocalAddress=slipLocalAddress, tcpPortIndex=tcpPortIndex, ipTrafficSrcAddr=ipTrafficSrcAddr, tn3270PortLanguageName=tn3270PortLanguageName, ipTrafficPercent=ipTrafficPercent, impRipRuleMetric=impRipRuleMetric, expOspfToEgpRuleNetwork=expOspfToEgpRuleNetwork, tn3270DeviceNumber=tn3270DeviceNumber, expOspfToEgpRuleStatus=expOspfToEgpRuleStatus, setClientAddressType=setClientAddressType, psEntryNumberLimit=psEntryNumberLimit, tcpRoutingTblSz=tcpRoutingTblSz, ospfIfMtrcAddressLessIf=ospfIfMtrcAddressLessIf, expRipToIsisRuleDelayMetricAction=expRipToIsisRuleDelayMetricAction, expIsisToOspfRuleTable=expIsisToOspfRuleTable, ospfXIfTable=ospfXIfTable, expOspfToIsisRuleDefaultMetric=expOspfToIsisRuleDefaultMetric, ipIfFilter2SrcPortEnd=ipIfFilter2SrcPortEnd, tcpLocalPortIncrement=tcpLocalPortIncrement, impRipRuleStatus=impRipRuleStatus, tcpPortTable=tcpPortTable, ripNetNet=ripNetNet, impRipRuleNetwork=impRipRuleNetwork, psEntryStatus=psEntryStatus, impEgpRulePreference=impEgpRulePreference, trapClientAddress=trapClientAddress, eToAOffset=eToAOffset, egpNbrIntervalDead=egpNbrIntervalDead, expEgpToIsisRuleAction=expEgpToIsisRuleAction, ospfXAreaTable=ospfXAreaTable, xremotePortTable=xremotePortTable, xRouterIp=xRouterIp, expIsisToEgpRuleTable=expIsisToEgpRuleTable, expStaticToRipRuleNetwork=expStaticToRipRuleNetwork, psEntryDirection=psEntryDirection, xlpd=xlpd, telnetSerialPortRs491=telnetSerialPortRs491, impEgpRuleStatus=impEgpRuleStatus, domainResolverNameNumber=domainResolverNameNumber, xIp=xIp, udpBcstPortStatus=udpBcstPortStatus, tn3270KeyName=tn3270KeyName, xSnmpAgent=xSnmpAgent, ipConfigureBootp=ipConfigureBootp, sshPortEntry=sshPortEntry, ipIfFilter2SrcMask=ipIfFilter2SrcMask, domainResolverAddress2=domainResolverAddress2, expOspfToIsisRuleExpenseMetricAction=expOspfToIsisRuleExpenseMetricAction, tn3270PortOutgoingTcpPort=tn3270PortOutgoingTcpPort, ipTrafficMonitoring=ipTrafficMonitoring, impRipRuleType=impRipRuleType, snmpAgentTrapClientNumber=snmpAgentTrapClientNumber, expEgpToOspfRuleNetwork=expEgpToOspfRuleNetwork, expRipToIsisRuleMetricType=expRipToIsisRuleMetricType, expEgpToIsisRuleTable=expEgpToIsisRuleTable, expEgpToIsisRuleExpenseMetricAction=expEgpToIsisRuleExpenseMetricAction, lpdQueueProcessedJobs=lpdQueueProcessedJobs, tn3270PortTypeAhead=tn3270PortTypeAhead, expStaticToIsisRuleMetricType=expStaticToIsisRuleMetricType, domainResolverPpp=domainResolverPpp, lpdQueueEnabled=lpdQueueEnabled, nameEntry=nameEntry, expOspfToEgpRuleAction=expOspfToEgpRuleAction, expRipToEgpRuleNetwork=expRipToEgpRuleNetwork, expStaticToRipRuleEntry=expStaticToRipRuleEntry, expRipToOspfRuleStatus=expRipToOspfRuleStatus, expStaticToIsisRuleExpenseMetric=expStaticToIsisRuleExpenseMetric, domainResolverAddress1=domainResolverAddress1, expEgpToIsisRuleNetwork=expEgpToIsisRuleNetwork, xRotary=xRotary, ipAdEntExtAddress=ipAdEntExtAddress, expEgpToIsisRuleDelayMetricAction=expEgpToIsisRuleDelayMetricAction, expStaticToIsisRuleDefaultMetric=expStaticToIsisRuleDefaultMetric, telnetPortTable=telnetPortTable, expRipToEgpRuleToAs=expRipToEgpRuleToAs, tn3270LanguageEntry=tn3270LanguageEntry, aToELanguageTable=aToELanguageTable, expRipToRipRuleMetricAction=expRipToRipRuleMetricAction, tn3270Device3278Model=tn3270Device3278Model, ipIfFilter2Entry=ipIfFilter2Entry, impOspfRulePreference=impOspfRulePreference, eToALanguageEntry=eToALanguageEntry, rotaryNumber=rotaryNumber, ospfStatus=ospfStatus, expIsisToEgpRuleMetricAction=expIsisToEgpRuleMetricAction, snmpAgentAuthFailureAddress=snmpAgentAuthFailureAddress, expRipToEgpRuleEntry=expRipToEgpRuleEntry, impEgpRuleNetwork=impEgpRuleNetwork, expIsisToRipRuleStatus=expIsisToRipRuleStatus, expRipToEgpRuleMetricAction=expRipToEgpRuleMetricAction, lpdJobAssignedPort=lpdJobAssignedPort, impEgpRuleTable=impEgpRuleTable, xremotePortIndex=xremotePortIndex)
mibBuilder.exportSymbols("ITOUCH-INTERNET-MIB", tn3270ScreenEntry=tn3270ScreenEntry, expRipToRipRuleToIf=expRipToRipRuleToIf, udpBcstPortTable=udpBcstPortTable, trapClientEntry=trapClientEntry, tn3270KeyEntry=tn3270KeyEntry, tn3270ScreenDeviceName=tn3270ScreenDeviceName, aToEValue=aToEValue, xTn3270=xTn3270, lpdJobState=lpdJobState, tn3270PortEntry=tn3270PortEntry, xInternetDep=xInternetDep, lpdQueueActiveJobs=lpdQueueActiveJobs, sshServerKeyLength=sshServerKeyLength, xSsh=xSsh, expRipToOspfRuleAction=expRipToOspfRuleAction, ipIfFilter2DstAddr=ipIfFilter2DstAddr, securIDSecureLogins=securIDSecureLogins, xremoteServerName2=xremoteServerName2, expStaticToIsisRuleEntry=expStaticToIsisRuleEntry, sshPortNewlineFiltering=sshPortNewlineFiltering, slipState=slipState, securIDServerAccessFailed2=securIDServerAccessFailed2, expEgpToRipRuleStatus=expEgpToRipRuleStatus, telnetSerialPortEntry=telnetSerialPortEntry, ipIfFilterDstMask=ipIfFilterDstMask, impRipRuleAction=impRipRuleAction, expOspfToEgpRuleMetricAction=expOspfToEgpRuleMetricAction, impIsisRuleMetric=impIsisRuleMetric, expEgpToRipRuleFromAs=expEgpToRipRuleFromAs, tcpPortConnectByAddress=tcpPortConnectByAddress, xTelnet=xTelnet, egpNbrAddr=egpNbrAddr, slipPortPacketChecksumErrors=slipPortPacketChecksumErrors, xremotePortEntry=xremotePortEntry, tcpLocalPortBase=tcpLocalPortBase, impIsisRuleAction=impIsisRuleAction, ipGatewayAddress1=ipGatewayAddress1, nameName=nameName, kerbServerName2=kerbServerName2, expOspfToRipRuleNetwork=expOspfToRipRuleNetwork, getClientAddress=getClientAddress, slipNetworkPacketsDiscarded=slipNetworkPacketsDiscarded, telnetPortTerminalType=telnetPortTerminalType, expEgpToIsisRuleEntry=expEgpToIsisRuleEntry, ipTrafficTable=ipTrafficTable, expRipToIsisRuleDefaultMetric=expRipToIsisRuleDefaultMetric, xSecurID=xSecurID, rotaryAddress=rotaryAddress, tn3270KeyCharacterSequence=tn3270KeyCharacterSequence, expStaticToEgpRuleMetricAction=expStaticToEgpRuleMetricAction, nameTtl=nameTtl, xIpNetToMediaTable=xIpNetToMediaTable, expRipToIsisRuleDelayMetric=expRipToIsisRuleDelayMetric, expStaticToEgpRuleStatus=expStaticToEgpRuleStatus, tn3270LanguageNumber=tn3270LanguageNumber, expRipToRipRuleAction=expRipToRipRuleAction, telnetSerialPortComControlServer=telnetSerialPortComControlServer, ipRouterIfForwardsIn=ipRouterIfForwardsIn, kerbMasterName=kerbMasterName, psPortEntry=psPortEntry, psEntryPortMap=psEntryPortMap, expEgpToIsisRuleDefaultMetricAction=expEgpToIsisRuleDefaultMetricAction, expEgpToIsisRuleMetricType=expEgpToIsisRuleMetricType, impEgpRuleEntry=impEgpRuleEntry, ipTrafficSort=ipTrafficSort, impOspfRuleEntry=impOspfRuleEntry, securIDServerAccess1=securIDServerAccess1, ipIfFilterSrcMask=ipIfFilterSrcMask, snmpAgentSetClientNumber=snmpAgentSetClientNumber, expOspfToRipRuleFromAs=expOspfToRipRuleFromAs, lpdJobFileName=lpdJobFileName, tn3270DeviceName=tn3270DeviceName, securIDError=securIDError, psPortIndex=psPortIndex, ipIfFilter2SrcAddr=ipIfFilter2SrcAddr, xremoteServerAccess2=xremoteServerAccess2, psEntryAccess=psEntryAccess, expRipToIsisRuleAction=expRipToIsisRuleAction, expEgpToOspfRuleTable=expEgpToOspfRuleTable, xremoteServerAccessFailed2=xremoteServerAccessFailed2, tcpPortWindowSize=tcpPortWindowSize, udpBcstServerTable=udpBcstServerTable, expOspfToRipRuleMetric=expOspfToRipRuleMetric, expEgpToRipRuleMetric=expEgpToRipRuleMetric, expRipToIsisRuleStatus=expRipToIsisRuleStatus, ipGenAdEntExtBroadcast=ipGenAdEntExtBroadcast, expEgpToIsisRuleStatus=expEgpToIsisRuleStatus, telnetSerialPortSynchronizeCharacter=telnetSerialPortSynchronizeCharacter, telnetSerialPortCsiEscape=telnetSerialPortCsiEscape, expStaticToRipRuleStatus=expStaticToRipRuleStatus, ipIfFilterDstPort=ipIfFilterDstPort, ipRouterIfForwardsOut=ipRouterIfForwardsOut, expRipToIsisRuleNetwork=expRipToIsisRuleNetwork, expIsisToRipRuleMetricAction=expIsisToRipRuleMetricAction, expOspfToIsisRuleErrorMetric=expOspfToIsisRuleErrorMetric, securIDServerName2=securIDServerName2, ipTrafficIndex=ipTrafficIndex, expRipToEgpRuleAction=expRipToEgpRuleAction, udpBcstServerStatus=udpBcstServerStatus, tn3270PrefixKeyMap=tn3270PrefixKeyMap, psClrInternetSecurity=psClrInternetSecurity, expRipToEgpRuleStatus=expRipToEgpRuleStatus, telnetSerialPortAttentionCharacter=telnetSerialPortAttentionCharacter, telnetSerialPortComControlClientTogglesDtr=telnetSerialPortComControlClientTogglesDtr, ospfXAreaEntry=ospfXAreaEntry, expEgpToOspfRuleStatus=expEgpToOspfRuleStatus, expRipToRipRuleTable=expRipToRipRuleTable, expEgpToEgpRuleTable=expEgpToEgpRuleTable, telnetSerialPortTable=telnetSerialPortTable, expStaticToRipRuleToIf=expStaticToRipRuleToIf, xFilter=xFilter, expEgpToEgpRuleAction=expEgpToEgpRuleAction, ospfIfMtrcCostActual=ospfIfMtrcCostActual, xImport=xImport, xremoteSessions=xremoteSessions, slipTable=slipTable, tn3270ScreenStatus=tn3270ScreenStatus, securIDSecureLoginsFailed=securIDSecureLoginsFailed, impIsisRuleType=impIsisRuleType, lpdQueueWaitingJobs=lpdQueueWaitingJobs, expOspfToEgpRuleMetric=expOspfToEgpRuleMetric, slipNetworkPacketsSent=slipNetworkPacketsSent, xDomainResolver=xDomainResolver, impIsisRuleStatus=impIsisRuleStatus, telnetSerialPortOptionDisplay=telnetSerialPortOptionDisplay, expIsisToRipRuleMetric=expIsisToRipRuleMetric, aToELanguageName=aToELanguageName, expRipToIsisRuleExpenseMetricAction=expRipToIsisRuleExpenseMetricAction, ipAdEntExtRip=ipAdEntExtRip, xExport=xExport, lpdQueuePorts=lpdQueuePorts, expEgpToIsisRuleDefaultMetric=expEgpToIsisRuleDefaultMetric, expIsisToOspfRuleEntry=expIsisToOspfRuleEntry, expEgpToRipRuleNetwork=expEgpToRipRuleNetwork, impOspfRuleNetwork=impOspfRuleNetwork, impRipRuleEntry=impRipRuleEntry, expEgpToIsisRuleDelayMetric=expEgpToIsisRuleDelayMetric, xremoteServerClients=xremoteServerClients, telnetSerialPortEraseLineCharacter=telnetSerialPortEraseLineCharacter, ospfXAreaId=ospfXAreaId, impEgpRuleAction=impEgpRuleAction, ipIfFilter2DstPortEnd=ipIfFilter2DstPortEnd, tcpQueuedSegs=tcpQueuedSegs, kerbServerAccessFailed1=kerbServerAccessFailed1, expStaticToEgpRuleToAs=expStaticToEgpRuleToAs, securIDServerAccessFailed1=securIDServerAccessFailed1, telnetSerialPortIndex=telnetSerialPortIndex, expIsisToEgpRuleAction=expIsisToEgpRuleAction, psPortDefaultInboundAccess=psPortDefaultInboundAccess, xRouterUdp=xRouterUdp, telnetSerialPortUrgentBreak=telnetSerialPortUrgentBreak, ipTrafficSrcPort=ipTrafficSrcPort, expStaticToEgpRuleNetwork=expStaticToEgpRuleNetwork, impRipRulePreference=impRipRulePreference, expIsisToEgpRuleStatus=expIsisToEgpRuleStatus, ripNetRipsIn=ripNetRipsIn, tn3270PortScanner=tn3270PortScanner, xremotePortXdmHost=xremotePortXdmHost, expStaticToEgpRuleEntry=expStaticToEgpRuleEntry, expOspfToIsisRuleTable=expOspfToIsisRuleTable, xIpNetToMediaReverseArp=xIpNetToMediaReverseArp, expRipToOspfRuleTable=expRipToOspfRuleTable, expRipToIsisRuleDefaultMetricAction=expRipToIsisRuleDefaultMetricAction, expEgpToRipRuleEntry=expEgpToRipRuleEntry, sshPortNewline=sshPortNewline, kerbInsecureLogins=kerbInsecureLogins, tcpPortEntry=tcpPortEntry, xremoteServerName1=xremoteServerName1, lpdJobFileSize=lpdJobFileSize, sshAuthenticationTimeout=sshAuthenticationTimeout, tcpConnectTimer=tcpConnectTimer, telnetSerialPortEchoMode=telnetSerialPortEchoMode, impIsisRuleNetwork=impIsisRuleNetwork, expIsisToRipRuleTable=expIsisToRipRuleTable, kerbPortTable=kerbPortTable, expStaticToRipRuleAction=expStaticToRipRuleAction, kerbMasterAccess=kerbMasterAccess, ospfXIfIpAddress=ospfXIfIpAddress, egpStatus=egpStatus, expRipToEgpRuleMetric=expRipToEgpRuleMetric, eToALanguageTable=eToALanguageTable, domainResolverTtl=domainResolverTtl, tn3270ScreenCharacterSequence=tn3270ScreenCharacterSequence, slipMask=slipMask, tcpAckDelay=tcpAckDelay, impOspfRuleStatus=impOspfRuleStatus, securIDInsecureLogins=securIDInsecureLogins, ipGatewayAddress2=ipGatewayAddress2, ipRouterIfPacketsIn=ipRouterIfPacketsIn, expStaticToIsisRuleErrorMetric=expStaticToIsisRuleErrorMetric, ipRouterIfRDP=ipRouterIfRDP, psEntryMask=psEntryMask, psEntryIndex=psEntryIndex, expRipToRipRuleNetwork=expRipToRipRuleNetwork, tn3270DeviceEntry=tn3270DeviceEntry, expStaticToEgpRuleMetric=expStaticToEgpRuleMetric, psTable=psTable, ipIfFilter2Status=ipIfFilter2Status, securIDQueryLimit=securIDQueryLimit, expStaticToIsisRuleDelayMetricAction=expStaticToIsisRuleDelayMetricAction, securIDEncryptionMode=securIDEncryptionMode, expRipToIsisRuleEntry=expRipToIsisRuleEntry, kerbErrorTime=kerbErrorTime, sshPortRemoteProtocol=sshPortRemoteProtocol, nameStatus=nameStatus, expOspfToIsisRuleFromAs=expOspfToIsisRuleFromAs, expEgpToEgpRuleStatus=expEgpToEgpRuleStatus, ipFragmentsQueuedHigh=ipFragmentsQueuedHigh, expOspfToRipRuleEntry=expOspfToRipRuleEntry, securIDServerName0=securIDServerName0, snmpAgentTrapCommunity=snmpAgentTrapCommunity, securIDServerAccess0=securIDServerAccess0, ospfAutoConfigure=ospfAutoConfigure, ipRouterIfArpPacketsOut=ipRouterIfArpPacketsOut, impEgpRuleMetric=impEgpRuleMetric, expEgpToIsisRuleExpenseMetric=expEgpToIsisRuleExpenseMetric, tn3270KeyDescription=tn3270KeyDescription, lpdQueueTable=lpdQueueTable, ipIfFilter2SrcPortStart=ipIfFilter2SrcPortStart, expStaticToIsisRuleNetwork=expStaticToIsisRuleNetwork, eToALanguageName=eToALanguageName, expEgpToEgpRuleToAs=expEgpToEgpRuleToAs, expOspfToIsisRuleErrorMetricAction=expOspfToIsisRuleErrorMetricAction, lpdQueueTotalJobs=lpdQueueTotalJobs, ipRouterIfMTU=ipRouterIfMTU, impRipRuleMetricAction=impRipRuleMetricAction, lpdQueueName=lpdQueueName, slipPortPacketsDiscarded=slipPortPacketsDiscarded, psPortTable=psPortTable, expEgpToRipRuleTable=expEgpToRipRuleTable, setClientTable=setClientTable, expOspfToIsisRuleDefaultMetricAction=expOspfToIsisRuleDefaultMetricAction, expIsisToEgpRuleMetric=expIsisToEgpRuleMetric, domainResolverSuffix=domainResolverSuffix, expStaticToIsisRuleStatus=expStaticToIsisRuleStatus, expIsisToRipRuleAction=expIsisToRipRuleAction, xOspf=xOspf, telnetPortEorReflection=telnetPortEorReflection, telnetSerialPortAbortOutputCharacter=telnetSerialPortAbortOutputCharacter, expEgpToOspfRuleFromAs=expEgpToOspfRuleFromAs, rotaryEntry=rotaryEntry, ipIfFilter2Action=ipIfFilter2Action, ipIfFilter2ProtocolPriority=ipIfFilter2ProtocolPriority, tn3270PortExtendedAttributes=tn3270PortExtendedAttributes, tn3270LanguageStatus=tn3270LanguageStatus, telnetSerialPortQueryCharacter=telnetSerialPortQueryCharacter, egpNbrEntry=egpNbrEntry, slipIndex=slipIndex, ipIfFilterSrcPort=ipIfFilterSrcPort, snmpAgentGetCommunity=snmpAgentGetCommunity, expOspfToIsisRuleDelayMetricAction=expOspfToIsisRuleDelayMetricAction, ospfXIfAddressLessIf=ospfXIfAddressLessIf, ipIfFilterAction=ipIfFilterAction, slipEntry=slipEntry)
mibBuilder.exportSymbols("ITOUCH-INTERNET-MIB", expRipToIsisRuleExpenseMetric=expRipToIsisRuleExpenseMetric, securIDServerAccessFailed3=securIDServerAccessFailed3, expStaticToIsisRuleAction=expStaticToIsisRuleAction, telnetPortPassiveSendLocation=telnetPortPassiveSendLocation, tn3270DeviceTable=tn3270DeviceTable, trapClientIndex=trapClientIndex, lpdJobStatus=lpdJobStatus, tcpResequencing=tcpResequencing, egpRouting=egpRouting, snmpAgentGetClientNumber=snmpAgentGetClientNumber, expEgpToIsisRuleErrorMetricAction=expEgpToIsisRuleErrorMetricAction, expStaticToEgpRuleTable=expStaticToEgpRuleTable, expIsisToOspfRuleStatus=expIsisToOspfRuleStatus, ipIfFilterIndex=ipIfFilterIndex, tn3270PortTable=tn3270PortTable, tn3270DeviceScreenNumber=tn3270DeviceScreenNumber, ipTrafficIf=ipTrafficIf, expOspfToIsisRuleEntry=expOspfToIsisRuleEntry, expIsisToRipRuleEntry=expIsisToRipRuleEntry, xSlip=xSlip, sshPortTransmitBufferedTime=sshPortTransmitBufferedTime, expOspfToRipRuleAction=expOspfToRipRuleAction, trapClientAddressType=trapClientAddressType, kerbError=kerbError, ipRouterIfArpPacketsIn=ipRouterIfArpPacketsIn, securIDPortTable=securIDPortTable, ipIfFilterStatus=ipIfFilterStatus, egpNbrStatus=egpNbrStatus, expOspfToIsisRuleDelayMetric=expOspfToIsisRuleDelayMetric, kerbServerPort=kerbServerPort, securIDPortStatus=securIDPortStatus, telnetPortIncomingTcpPort=telnetPortIncomingTcpPort, xXremote=xXremote, xremotePortXdmQuery=xremotePortXdmQuery, impRipRuleFromIf=impRipRuleFromIf, securIDErrorPortIndex=securIDErrorPortIndex, impIsisRulePreference=impIsisRulePreference, telnetPortIndex=telnetPortIndex, expOspfToIsisRuleStatus=expOspfToIsisRuleStatus, tcpDiscardSegs=tcpDiscardSegs, kerbMasterAccessFailed=kerbMasterAccessFailed, ipIfFilter2TcpSyn=ipIfFilter2TcpSyn, expStaticToRipRuleMetric=expStaticToRipRuleMetric, ripStatus=ripStatus, tn3270PortDeviceName=tn3270PortDeviceName, telnetSerialPortInterpretInterruptAsBreak=telnetSerialPortInterpretInterruptAsBreak, telnetSerialPortInterruptCharacter=telnetSerialPortInterruptCharacter, expRipToIsisRuleTable=expRipToIsisRuleTable, ipRouterIfTable=ipRouterIfTable, ipAdEntExtProxyArp=ipAdEntExtProxyArp, telnetSerialPortTransmitBufferedTime=telnetSerialPortTransmitBufferedTime, ipReassembly=ipReassembly, telnetSerialPortNewlineMode=telnetSerialPortNewlineMode, kerbPortEntry=kerbPortEntry, ipIfFilterProtocol=ipIfFilterProtocol, tcpPortKeepAliveLimit=tcpPortKeepAliveLimit, securIDPortIndex=securIDPortIndex, kerbRealm=kerbRealm, expOspfToEgpRuleFromAs=expOspfToEgpRuleFromAs, getClientIndex=getClientIndex, telnetPortEntry=telnetPortEntry, nameTable=nameTable, ipFragmentsQueuedCurrent=ipFragmentsQueuedCurrent, slipPortPacketsReceived=slipPortPacketsReceived, ipIfFilter2DstPortStart=ipIfFilter2DstPortStart, expRipToIsisRuleErrorMetric=expRipToIsisRuleErrorMetric, telnetSerialPortTransmitCharacterTimes=telnetSerialPortTransmitCharacterTimes, kerbPasswordChangeFailed=kerbPasswordChangeFailed, aToEOffset=aToEOffset, securIDServerName4=securIDServerName4, expEgpToEgpRuleMetricAction=expEgpToEgpRuleMetricAction, ipRouterIfIndex=ipRouterIfIndex, tn3270DeviceType=tn3270DeviceType, xIpTraffic=xIpTraffic, expEgpToIsisRuleErrorMetric=expEgpToIsisRuleErrorMetric, xRip=xRip, expStaticToEgpRuleAction=expStaticToEgpRuleAction, ipIfFilterDstAddr=ipIfFilterDstAddr, securIDErrorUsername=securIDErrorUsername, securIDPortEntry=securIDPortEntry, expEgpToRipRuleToIf=expEgpToRipRuleToIf, expRipToRipRuleMetric=expRipToRipRuleMetric, expOspfToRipRuleToIf=expOspfToRipRuleToIf, lpdQueueStatus=lpdQueueStatus, expIsisToRipRuleNetwork=expIsisToRipRuleNetwork, kerbServerName1=kerbServerName1, tcpRetransmitMin=tcpRetransmitMin, expRipToRipRuleStatus=expRipToRipRuleStatus, tn3270KeyStatus=tn3270KeyStatus, impIsisRuleTable=impIsisRuleTable, securIDServerAccessFailed4=securIDServerAccessFailed4, expRipToOspfRuleNetwork=expRipToOspfRuleNetwork, getClientAddressType=getClientAddressType, xremoteServerAccessFailed1=xremoteServerAccessFailed1, ospfXIfEntry=ospfXIfEntry, ipRouterIfPacketsOut=ipRouterIfPacketsOut, securIDPort=securIDPort, tn3270KeyTable=tn3270KeyTable, xremotePortXremote=xremotePortXremote, ospfIfMtrcIpAddress=ospfIfMtrcIpAddress, expStaticToIsisRuleErrorMetricAction=expStaticToIsisRuleErrorMetricAction, kerbServerAccess1=kerbServerAccess1, expIsisToEgpRuleEntry=expIsisToEgpRuleEntry, expEgpToEgpRuleFromAs=expEgpToEgpRuleFromAs, ipGenAdEntExtType=ipGenAdEntExtType, tn3270LanguageName=tn3270LanguageName, ipTrafficDstPort=ipTrafficDstPort, setClientEntry=setClientEntry, ipIfFilter2DstMask=ipIfFilter2DstMask, expOspfToEgpRuleTable=expOspfToEgpRuleTable, expStaticToRipRuleMetricAction=expStaticToRipRuleMetricAction, expIsisToRipRuleToIf=expIsisToRipRuleToIf, eToAValue=eToAValue, kerbSecureLoginsFailed=kerbSecureLoginsFailed, tn3270PortIndex=tn3270PortIndex, securIDServerAccessFailed0=securIDServerAccessFailed0, tn3270PortSpaceInsert=tn3270PortSpaceInsert)
