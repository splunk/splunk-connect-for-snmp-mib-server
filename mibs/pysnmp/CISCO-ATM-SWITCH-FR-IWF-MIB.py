#
# PySNMP MIB module CISCO-ATM-SWITCH-FR-IWF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ATM-SWITCH-FR-IWF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:33:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
AtmTrafficDescrParamIndex, = mibBuilder.importSymbols("ATM-MIB", "AtmTrafficDescrParamIndex")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Unsigned32, = mibBuilder.importSymbols("CISCO-TC", "Unsigned32")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, Unsigned32, MibIdentifier, Gauge32, ObjectIdentity, IpAddress, Counter64, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "MibIdentifier", "Gauge32", "ObjectIdentity", "IpAddress", "Counter64", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "Counter32", "Integer32")
TimeStamp, DisplayString, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "RowStatus", "TruthValue", "TextualConvention")
ciscoAtmSwitchFrIwfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 112))
ciscoAtmSwitchFrIwfMIB.setRevisions(('2001-05-20 00:00', '2000-02-29 00:00', '1998-07-09 00:00',))
if mibBuilder.loadTexts: ciscoAtmSwitchFrIwfMIB.setLastUpdated('200105200000Z')
if mibBuilder.loadTexts: ciscoAtmSwitchFrIwfMIB.setOrganization('Cisco Systems')
ciscoAtmSwitchFrIwfMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 112, 1))
casfFrTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1))
casfFrVC = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2))
casfFrInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3))
casfFrCounts = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4))
casfMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5))
class CasfTrafficDescrRow(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class DlciValue(TextualConvention, Integer32):
    reference = 'ITU Recommendation Q.922, ISDN Data Link Layer Specification For Frame Mode Bearer Services.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4194303)

class ConnectionKind(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("pvc", 1), ("svcIncoming", 2), ("svcOutgoing", 3), ("spvcInitiator", 4), ("spvcTarget", 5))

class AtmAddr(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 40)

casfTrafficDescrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1), )
if mibBuilder.loadTexts: casfTrafficDescrTable.setStatus('current')
casfTrafficDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-ATM-SWITCH-FR-IWF-MIB", "casfTrafficDescrIndex"))
if mibBuilder.loadTexts: casfTrafficDescrEntry.setStatus('current')
casfTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1, 1, 1), CasfTrafficDescrRow())
if mibBuilder.loadTexts: casfTrafficDescrIndex.setStatus('current')
casfTrafficDescrCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1, 1, 2), Unsigned32()).setUnits('bits/sec').setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfTrafficDescrCIR.setStatus('current')
casfTrafficDescrBc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1, 1, 3), Unsigned32()).setUnits('bits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfTrafficDescrBc.setStatus('current')
casfTrafficDescrBe = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1, 1, 4), Unsigned32()).setUnits('bits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfTrafficDescrBe.setStatus('current')
casfTrafficDescrPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1, 1, 5), Unsigned32()).setUnits('bits/sec').setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfTrafficDescrPIR.setStatus('current')
casfTrafficDescrServCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vbrNrt", 1), ("abr", 2), ("ubr", 3), ("vbrRt", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfTrafficDescrServCategory.setStatus('current')
casfTrafficDescrAtmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1, 1, 7), AtmTrafficDescrParamIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfTrafficDescrAtmIndex.setStatus('current')
casfTrafficDescrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfTrafficDescrRowStatus.setStatus('current')
casfVcEndptTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1), )
if mibBuilder.loadTexts: casfVcEndptTable.setStatus('current')
casfVcEndptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptDlci"))
if mibBuilder.loadTexts: casfVcEndptEntry.setStatus('current')
casfVcEndptDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 1), DlciValue())
if mibBuilder.loadTexts: casfVcEndptDlci.setStatus('current')
casfVcEndptRxTrafficDescrRow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 2), CasfTrafficDescrRow()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptRxTrafficDescrRow.setStatus('current')
casfVcEndptTxTrafficDescrRow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 3), CasfTrafficDescrRow()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptTxTrafficDescrRow.setStatus('current')
casfVcEndptRxNegTrafficDescrRow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 4), CasfTrafficDescrRow()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcEndptRxNegTrafficDescrRow.setStatus('current')
casfVcEndptTxNegTrafficDescrRow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 5), CasfTrafficDescrRow()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcEndptTxNegTrafficDescrRow.setStatus('current')
casfVcEndptConnKind = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 6), ConnectionKind().clone('pvc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptConnKind.setStatus('current')
casfVcEndptIwfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("network", 1), ("serviceTransparent", 2), ("serviceTranslation", 3), ("rfc1973", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptIwfType.setStatus('current')
casfVcEndptClpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clpIfDe", 1), ("clpIsZero", 2), ("clpIsOne", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptClpMode.setStatus('current')
casfVcEndptDeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("deIfClpOrFrsscsDe", 1), ("deIfFrsscsDe", 2), ("deIfClp", 3), ("deIsZero", 4), ("deIsOne", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptDeMode.setStatus('current')
casfVcEndptEfciMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("efciIfFecn", 1), ("efciIsZero", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptEfciMode.setStatus('current')
casfVcEndptUpcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pass", 1), ("tagDrop", 2), ("tag", 3), ("drop", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptUpcMode.setStatus('current')
casfVcEndptSpvcRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 12), AtmAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptSpvcRemoteAddr.setStatus('current')
casfVcEndptSpvcRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("frameRelay", 2), ("atm", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptSpvcRemoteType.setStatus('current')
casfVcEndptSpvcRemoteDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 14), DlciValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptSpvcRemoteDlci.setStatus('current')
casfVcEndptSpvcRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptSpvcRemoteVpi.setStatus('current')
casfVcEndptSpvcRemoteVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptSpvcRemoteVci.setStatus('current')
casfVcEndptCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcEndptCreationTime.setStatus('current')
casfVcEndptRcvdSigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("deleted", 1), ("active", 2), ("inactive", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcEndptRcvdSigStatus.setStatus('current')
casfVcEndptRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcEndptRowStatus.setStatus('current')
casfVcSignalStandardCalledIe = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 2, 1, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casfVcSignalStandardCalledIe.setStatus('current')
casfFrLmiTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1), )
if mibBuilder.loadTexts: casfFrLmiTable.setStatus('current')
casfFrLmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: casfFrLmiEntry.setStatus('current')
casfFrLmiProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("lmi", 2), ("ansiT1617D", 3), ("ansiT1617B", 4), ("ccittQ933A", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfFrLmiProtocol.setStatus('current')
casfFrLmiType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("nni", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfFrLmiType.setStatus('current')
casfFrLmiUserN391 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfFrLmiUserN391.setStatus('current')
casfFrLmiUserN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfFrLmiUserN392.setStatus('current')
casfFrLmiUserN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfFrLmiUserN393.setStatus('current')
casfFrLmiUserT391 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfFrLmiUserT391.setStatus('current')
casfFrLmiNetN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfFrLmiNetN392.setStatus('current')
casfFrLmiNetN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfFrLmiNetN393.setStatus('current')
casfFrLmiNetT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfFrLmiNetT392.setStatus('current')
casfFrLmiEnquiryIns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 10), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfFrLmiEnquiryIns.setStatus('current')
casfFrLmiEnquiryOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 11), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfFrLmiEnquiryOuts.setStatus('current')
casfFrLmiStatusIns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 12), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfFrLmiStatusIns.setStatus('current')
casfFrLmiStatusOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 13), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfFrLmiStatusOuts.setStatus('current')
casfFrLmiStatusTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfFrLmiStatusTimeouts.setStatus('current')
casfFrLmiStatusEnqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfFrLmiStatusEnqTimeouts.setStatus('current')
casfConfIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 2), )
if mibBuilder.loadTexts: casfConfIfTable.setStatus('current')
casfConfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: casfConfIfEntry.setStatus('current')
casfConfIfAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 2, 1, 1), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfConfIfAtmAddress.setStatus('current')
casfConfIfUpcIntent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pass", 1), ("tagDrop", 2), ("tag", 3), ("drop", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfConfIfUpcIntent.setStatus('current')
casfConfIfBcDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setUnits('bits').setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfConfIfBcDefault.setStatus('current')
casfConfIfCledSpvcDeModeDef = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deIfClpOrFrsscsDe", 1), ("deIfFrsscsDe", 2))).clone('deIfClpOrFrsscsDe')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfConfIfCledSpvcDeModeDef.setStatus('current')
casfConfIfCledSpvcClpModeDef = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clpIfDe", 1), ("clpIfIsZero", 2), ("clpIfIsOne", 3))).clone('clpIfDe')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casfConfIfCledSpvcClpModeDef.setStatus('current')
casfVcCountTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1), )
if mibBuilder.loadTexts: casfVcCountTable.setStatus('current')
casfVcCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptDlci"))
if mibBuilder.loadTexts: casfVcCountEntry.setStatus('current')
casfVcCountReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 1), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountReceivedFrames.setStatus('current')
casfVcCountReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 2), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountReceivedOctets.setStatus('current')
casfVcCountReceivedFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountReceivedFECNs.setStatus('current')
casfVcCountReceivedBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountReceivedBECNs.setStatus('current')
casfVcCountReceivedDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 5), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountReceivedDEs.setStatus('current')
casfVcCountInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 6), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountInDiscards.setStatus('current')
casfVcCountOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 7), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountOutDiscards.setStatus('current')
casfVcCountSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 8), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountSentFrames.setStatus('current')
casfVcCountSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 9), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountSentOctets.setStatus('current')
casfVcCountSentFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 10), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountSentFECNs.setStatus('current')
casfVcCountSentBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 11), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountSentBECNs.setStatus('current')
casfVcCountSentDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 12), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountSentDEs.setStatus('current')
casfVcCountTaggedFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 13), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountTaggedFECNs.setStatus('current')
casfVcCountTaggedBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 14), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountTaggedBECNs.setStatus('current')
casfVcCountTaggedDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 1, 1, 15), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcCountTaggedDEs.setStatus('current')
casfVcIwfCountTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 2), )
if mibBuilder.loadTexts: casfVcIwfCountTable.setStatus('current')
casfVcIwfCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptDlci"))
if mibBuilder.loadTexts: casfVcIwfCountEntry.setStatus('current')
casfVcIwfCountInUnknownProts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcIwfCountInUnknownProts.setStatus('current')
casfVcIwfCountOutUnknownProts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcIwfCountOutUnknownProts.setStatus('current')
casfVcIwfCountReassemblyTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcIwfCountReassemblyTimeouts.setStatus('current')
casfVcIwfCountLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcIwfCountLengthErrors.setStatus('current')
casfVcIwfCountCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcIwfCountCrcErrors.setStatus('current')
casfVcIwfCountTotalDiscardFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfVcIwfCountTotalDiscardFrames.setStatus('current')
casfFAMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 1), )
if mibBuilder.loadTexts: casfFAMapTable.setStatus('current')
casfFAMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFAMapDlci"))
if mibBuilder.loadTexts: casfFAMapEntry.setStatus('current')
casfFAMapDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 1, 1, 1), DlciValue())
if mibBuilder.loadTexts: casfFAMapDlci.setStatus('current')
casfFAMapInternalAtmInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfFAMapInternalAtmInterface.setStatus('current')
casfFAMapInternalAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfFAMapInternalAtmVpi.setStatus('current')
casfFAMapInternalAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfFAMapInternalAtmVci.setStatus('current')
casfAFMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 2), )
if mibBuilder.loadTexts: casfAFMapTable.setStatus('current')
casfAFMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-SWITCH-FR-IWF-MIB", "casfAFMapAtmVpi"), (0, "CISCO-ATM-SWITCH-FR-IWF-MIB", "casfAFMapAtmVci"))
if mibBuilder.loadTexts: casfAFMapEntry.setStatus('current')
casfAFMapAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: casfAFMapAtmVpi.setStatus('current')
casfAFMapAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: casfAFMapAtmVci.setStatus('current')
casfAFMapFrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 2, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfAFMapFrIndex.setStatus('current')
casfAFMapFrDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 112, 1, 5, 2, 1, 4), DlciValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casfAFMapFrDlci.setStatus('current')
ciscoAtmSFrIwfMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 112, 3))
ciscoAtmSFrIwfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 112, 3, 1))
ciscoAtmSFrIwfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 112, 3, 2))
ciscoAtmSFrIwfMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 112, 3, 1, 1)).setObjects(("CISCO-ATM-SWITCH-FR-IWF-MIB", "ciscoAtmSFrIwfConfConnGroup"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "ciscoAtmSFrIwfLmiGroup"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "ciscoAtmSFrIwfConfIfGroup"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "ciscoAtmSFrIwfVcStatsGroup"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "ciscoAtmSFrIwfVcIwStatsGroup"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "ciscoAtmSFrIwfMappingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmSFrIwfMIBCompliance = ciscoAtmSFrIwfMIBCompliance.setStatus('current')
ciscoAtmSFrIwfConfConnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 112, 3, 2, 1)).setObjects(("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfTrafficDescrCIR"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfTrafficDescrBc"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfTrafficDescrBe"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfTrafficDescrPIR"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfTrafficDescrServCategory"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfTrafficDescrAtmIndex"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfTrafficDescrRowStatus"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptRxTrafficDescrRow"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptTxTrafficDescrRow"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptRxNegTrafficDescrRow"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptTxNegTrafficDescrRow"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptConnKind"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptIwfType"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptClpMode"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptDeMode"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptEfciMode"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptUpcMode"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptCreationTime"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptRcvdSigStatus"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptSpvcRemoteAddr"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptSpvcRemoteType"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptSpvcRemoteDlci"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptSpvcRemoteVpi"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptSpvcRemoteVci"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcEndptRowStatus"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcSignalStandardCalledIe"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmSFrIwfConfConnGroup = ciscoAtmSFrIwfConfConnGroup.setStatus('current')
ciscoAtmSFrIwfLmiGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 112, 3, 2, 2)).setObjects(("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiProtocol"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiType"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiUserN391"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiUserN392"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiUserN393"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiUserT391"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiNetN392"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiNetN393"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiNetT392"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiEnquiryIns"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiEnquiryOuts"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiStatusIns"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiStatusOuts"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiStatusTimeouts"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFrLmiStatusEnqTimeouts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmSFrIwfLmiGroup = ciscoAtmSFrIwfLmiGroup.setStatus('current')
ciscoAtmSFrIwfConfIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 112, 3, 2, 3)).setObjects(("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfConfIfAtmAddress"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfConfIfUpcIntent"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfConfIfBcDefault"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfConfIfCledSpvcDeModeDef"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfConfIfCledSpvcClpModeDef"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmSFrIwfConfIfGroup = ciscoAtmSFrIwfConfIfGroup.setStatus('current')
ciscoAtmSFrIwfVcStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 112, 3, 2, 4)).setObjects(("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountReceivedFrames"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountReceivedOctets"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountReceivedFECNs"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountReceivedBECNs"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountReceivedDEs"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountInDiscards"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountOutDiscards"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountSentFrames"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountSentOctets"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountSentFECNs"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountSentBECNs"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountSentDEs"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountTaggedFECNs"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountTaggedBECNs"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcCountTaggedDEs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmSFrIwfVcStatsGroup = ciscoAtmSFrIwfVcStatsGroup.setStatus('current')
ciscoAtmSFrIwfVcIwStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 112, 3, 2, 5)).setObjects(("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcIwfCountInUnknownProts"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcIwfCountOutUnknownProts"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcIwfCountReassemblyTimeouts"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcIwfCountLengthErrors"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcIwfCountCrcErrors"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfVcIwfCountTotalDiscardFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmSFrIwfVcIwStatsGroup = ciscoAtmSFrIwfVcIwStatsGroup.setStatus('current')
ciscoAtmSFrIwfMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 112, 3, 2, 6)).setObjects(("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFAMapInternalAtmInterface"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFAMapInternalAtmVpi"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfFAMapInternalAtmVci"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfAFMapFrIndex"), ("CISCO-ATM-SWITCH-FR-IWF-MIB", "casfAFMapFrDlci"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmSFrIwfMappingGroup = ciscoAtmSFrIwfMappingGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-ATM-SWITCH-FR-IWF-MIB", casfVcEndptTable=casfVcEndptTable, casfVcIwfCountInUnknownProts=casfVcIwfCountInUnknownProts, casfConfIfBcDefault=casfConfIfBcDefault, casfVcIwfCountReassemblyTimeouts=casfVcIwfCountReassemblyTimeouts, casfFAMapTable=casfFAMapTable, casfAFMapFrDlci=casfAFMapFrDlci, casfFrLmiNetN392=casfFrLmiNetN392, casfAFMapFrIndex=casfAFMapFrIndex, casfFrInterface=casfFrInterface, casfVcEndptCreationTime=casfVcEndptCreationTime, casfFrLmiEntry=casfFrLmiEntry, casfVcEndptEfciMode=casfVcEndptEfciMode, casfMapping=casfMapping, casfVcSignalStandardCalledIe=casfVcSignalStandardCalledIe, CasfTrafficDescrRow=CasfTrafficDescrRow, casfFAMapDlci=casfFAMapDlci, ciscoAtmSFrIwfVcStatsGroup=ciscoAtmSFrIwfVcStatsGroup, casfTrafficDescrCIR=casfTrafficDescrCIR, casfConfIfTable=casfConfIfTable, casfVcCountReceivedFECNs=casfVcCountReceivedFECNs, casfFAMapEntry=casfFAMapEntry, casfVcCountOutDiscards=casfVcCountOutDiscards, ciscoAtmSwitchFrIwfMIBObjects=ciscoAtmSwitchFrIwfMIBObjects, casfFrLmiNetT392=casfFrLmiNetT392, casfVcIwfCountCrcErrors=casfVcIwfCountCrcErrors, ciscoAtmSFrIwfMIBCompliances=ciscoAtmSFrIwfMIBCompliances, casfVcEndptDeMode=casfVcEndptDeMode, casfAFMapEntry=casfAFMapEntry, ciscoAtmSFrIwfMIBCompliance=ciscoAtmSFrIwfMIBCompliance, casfTrafficDescrServCategory=casfTrafficDescrServCategory, DlciValue=DlciValue, casfVcEndptRxNegTrafficDescrRow=casfVcEndptRxNegTrafficDescrRow, casfVcEndptTxTrafficDescrRow=casfVcEndptTxTrafficDescrRow, casfFrLmiNetN393=casfFrLmiNetN393, casfFrTraffic=casfFrTraffic, casfVcEndptSpvcRemoteVpi=casfVcEndptSpvcRemoteVpi, casfVcCountReceivedFrames=casfVcCountReceivedFrames, AtmAddr=AtmAddr, ciscoAtmSFrIwfVcIwStatsGroup=ciscoAtmSFrIwfVcIwStatsGroup, casfFrLmiEnquiryOuts=casfFrLmiEnquiryOuts, casfVcCountReceivedOctets=casfVcCountReceivedOctets, casfVcCountReceivedDEs=casfVcCountReceivedDEs, casfConfIfEntry=casfConfIfEntry, casfTrafficDescrBc=casfTrafficDescrBc, casfVcCountSentDEs=casfVcCountSentDEs, casfTrafficDescrAtmIndex=casfTrafficDescrAtmIndex, casfVcCountTable=casfVcCountTable, casfVcEndptSpvcRemoteType=casfVcEndptSpvcRemoteType, PYSNMP_MODULE_ID=ciscoAtmSwitchFrIwfMIB, casfVcEndptEntry=casfVcEndptEntry, casfVcEndptTxNegTrafficDescrRow=casfVcEndptTxNegTrafficDescrRow, casfVcIwfCountTable=casfVcIwfCountTable, casfFrLmiType=casfFrLmiType, casfFAMapInternalAtmVci=casfFAMapInternalAtmVci, casfVcEndptUpcMode=casfVcEndptUpcMode, casfVcEndptDlci=casfVcEndptDlci, casfVcCountSentOctets=casfVcCountSentOctets, casfVcEndptSpvcRemoteVci=casfVcEndptSpvcRemoteVci, ciscoAtmSFrIwfMappingGroup=ciscoAtmSFrIwfMappingGroup, casfVcIwfCountOutUnknownProts=casfVcIwfCountOutUnknownProts, casfVcCountTaggedDEs=casfVcCountTaggedDEs, casfFrCounts=casfFrCounts, ciscoAtmSwitchFrIwfMIB=ciscoAtmSwitchFrIwfMIB, casfFrLmiEnquiryIns=casfFrLmiEnquiryIns, casfFrLmiUserT391=casfFrLmiUserT391, casfConfIfCledSpvcDeModeDef=casfConfIfCledSpvcDeModeDef, casfFrLmiStatusTimeouts=casfFrLmiStatusTimeouts, casfVcCountSentFECNs=casfVcCountSentFECNs, casfFAMapInternalAtmVpi=casfFAMapInternalAtmVpi, casfTrafficDescrEntry=casfTrafficDescrEntry, casfVcCountSentFrames=casfVcCountSentFrames, casfVcEndptRxTrafficDescrRow=casfVcEndptRxTrafficDescrRow, casfFrLmiUserN393=casfFrLmiUserN393, casfFrLmiStatusIns=casfFrLmiStatusIns, ciscoAtmSFrIwfConfConnGroup=ciscoAtmSFrIwfConfConnGroup, casfFrLmiStatusOuts=casfFrLmiStatusOuts, casfVcCountTaggedBECNs=casfVcCountTaggedBECNs, casfVcCountReceivedBECNs=casfVcCountReceivedBECNs, casfFrLmiStatusEnqTimeouts=casfFrLmiStatusEnqTimeouts, casfVcCountSentBECNs=casfVcCountSentBECNs, casfAFMapAtmVpi=casfAFMapAtmVpi, ciscoAtmSFrIwfConfIfGroup=ciscoAtmSFrIwfConfIfGroup, casfVcCountInDiscards=casfVcCountInDiscards, ConnectionKind=ConnectionKind, casfConfIfAtmAddress=casfConfIfAtmAddress, ciscoAtmSFrIwfLmiGroup=ciscoAtmSFrIwfLmiGroup, casfVcIwfCountLengthErrors=casfVcIwfCountLengthErrors, casfVcEndptRcvdSigStatus=casfVcEndptRcvdSigStatus, casfVcEndptSpvcRemoteAddr=casfVcEndptSpvcRemoteAddr, casfConfIfCledSpvcClpModeDef=casfConfIfCledSpvcClpModeDef, casfVcEndptConnKind=casfVcEndptConnKind, casfVcEndptClpMode=casfVcEndptClpMode, casfVcIwfCountEntry=casfVcIwfCountEntry, ciscoAtmSFrIwfMIBConformance=ciscoAtmSFrIwfMIBConformance, casfTrafficDescrTable=casfTrafficDescrTable, casfFrLmiUserN392=casfFrLmiUserN392, casfVcEndptIwfType=casfVcEndptIwfType, casfAFMapTable=casfAFMapTable, casfVcCountTaggedFECNs=casfVcCountTaggedFECNs, casfTrafficDescrPIR=casfTrafficDescrPIR, casfAFMapAtmVci=casfAFMapAtmVci, casfVcCountEntry=casfVcCountEntry, ciscoAtmSFrIwfMIBGroups=ciscoAtmSFrIwfMIBGroups, casfFrLmiTable=casfFrLmiTable, casfConfIfUpcIntent=casfConfIfUpcIntent, casfTrafficDescrIndex=casfTrafficDescrIndex, casfVcEndptSpvcRemoteDlci=casfVcEndptSpvcRemoteDlci, casfTrafficDescrBe=casfTrafficDescrBe, casfVcEndptRowStatus=casfVcEndptRowStatus, casfFrVC=casfFrVC, casfVcIwfCountTotalDiscardFrames=casfVcIwfCountTotalDiscardFrames, casfFrLmiProtocol=casfFrLmiProtocol, casfFAMapInternalAtmInterface=casfFAMapInternalAtmInterface, casfFrLmiUserN391=casfFrLmiUserN391, casfTrafficDescrRowStatus=casfTrafficDescrRowStatus)
