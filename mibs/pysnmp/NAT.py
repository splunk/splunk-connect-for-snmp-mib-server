#
# PySNMP MIB module NAT (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NAT
# Produced by pysmi-0.3.4 at Mon Apr 29 20:07:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Bits, iso, TimeTicks, Integer32, Gauge32, Counter32, MibIdentifier, Unsigned32, enterprises, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Bits", "iso", "TimeTicks", "Integer32", "Gauge32", "Counter32", "MibIdentifier", "Unsigned32", "enterprises", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nat = MibIdentifier((1, 3, 6, 1, 4, 1, 86))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 1))
natmib = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2))
trapinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 8))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 1))
natinf = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 2))
natopr = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 3))
natbrg = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 4))
natmtr = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 5))
natalert = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 6))
rmeter = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 7))
natrtr = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 8))
dialup = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 9))
cfFirmware = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfFirmware.setStatus('mandatory')
cfCmstrTable = MibTable((1, 3, 6, 1, 4, 1, 86, 2, 1, 2), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfCmstrTable.setStatus('mandatory')
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 1, 2, 1) + (1000, ), Integer32())
cfCmstrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 86, 2, 1, 2, 1), ).setMaxAccess("readonly").setIndexNames((0, "NAT", "pysmiFakeCol1000"))
if mibBuilder.loadTexts: cfCmstrEntry.setStatus('mandatory')
cfCmstrReadPublic = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 1, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfCmstrReadPublic.setStatus('mandatory')
cfCmstrReadEnterprise = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfCmstrReadEnterprise.setStatus('mandatory')
cfCmstrReadTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfCmstrReadTrap.setStatus('mandatory')
cfCmstrReadWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 1, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfCmstrReadWrite.setStatus('mandatory')
cfCmstrAliasTable = MibTable((1, 3, 6, 1, 4, 1, 86, 2, 1, 3), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfCmstrAliasTable.setStatus('mandatory')
pysmiFakeCol1001 = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 1, 3, 1) + (1001, ), Integer32())
cfCmstrAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 86, 2, 1, 3, 1), ).setMaxAccess("readwrite").setIndexNames((0, "NAT", "pysmiFakeCol1001"))
if mibBuilder.loadTexts: cfCmstrAliasEntry.setStatus('mandatory')
cfCmstrAliasReadPublic = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 1, 3, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfCmstrAliasReadPublic.setStatus('mandatory')
cfCmstrAliasReadEnterprise = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 1, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfCmstrAliasReadEnterprise.setStatus('mandatory')
cfCmstrAliasReadTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 1, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfCmstrAliasReadTrap.setStatus('mandatory')
cfCmstrAliasReadWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 1, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfCmstrAliasReadWrite.setStatus('mandatory')
cfAcchostTable = MibTable((1, 3, 6, 1, 4, 1, 86, 2, 1, 4), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfAcchostTable.setStatus('mandatory')
pysmiFakeCol1002 = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 1, 4, 1) + (1002, ), Integer32())
cfAcchostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 86, 2, 1, 4, 1), ).setMaxAccess("readonly").setIndexNames((0, "NAT", "pysmiFakeCol1002"))
if mibBuilder.loadTexts: cfAcchostEntry.setStatus('mandatory')
cfAcchostHostIP = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfAcchostHostIP.setStatus('mandatory')
cfAcchostLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("readstandard", 1), ("readenterprise", 2), ("trap", 3), ("readwrite", 4), ("readwriteenterprise", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfAcchostLevel.setStatus('mandatory')
cfDenyReadPublic = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfDenyReadPublic.setStatus('mandatory')
cfDevIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfDevIPAddr.setStatus('mandatory')
cfSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfSubnetMask.setStatus('mandatory')
cfAcchostCfgTable = MibTable((1, 3, 6, 1, 4, 1, 86, 2, 1, 8), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfAcchostCfgTable.setStatus('mandatory')
cfAcchostCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 86, 2, 1, 8, 1), ).setMaxAccess("readwrite").setIndexNames((0, "SNMPv2-SMI", "IpAddress"))
if mibBuilder.loadTexts: cfAcchostCfgEntry.setStatus('mandatory')
cfAcchostCfgAcclvl = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("cfDelet", 0), ("cfAddReadStd", 1), ("cfAddReadEnterprise", 2), ("cfAddTrap", 3), ("cfAddReadwrite", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfAcchostCfgAcclvl.setStatus('mandatory')
cfParmsSave = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cfClear", 0), ("cfStore", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfParmsSave.setStatus('mandatory')
cfPassword = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 1, 10), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cfPassword.setStatus('mandatory')
cfIPAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfIPAddr2.setStatus('mandatory')
cfSubnetMask2 = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfSubnetMask2.setStatus('mandatory')
statsTable = MibTable((1, 3, 6, 1, 4, 1, 86, 2, 2, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsTable.setStatus('mandatory')
pysmiFakeCol1003 = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1) + (1003, ), Integer32())
statsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1), ).setMaxAccess("readwrite").setIndexNames((0, "NAT", "pysmiFakeCol1003"))
if mibBuilder.loadTexts: statsEntry.setStatus('mandatory')
statsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsReset.setStatus('mandatory')
statsResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsResetTime.setStatus('mandatory')
statsRcvpkts = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsRcvpkts.setStatus('mandatory')
statsFwdpkts = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsFwdpkts.setStatus('mandatory')
statsBufOvflows = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsBufOvflows.setStatus('mandatory')
statsCrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsCrcs.setStatus('mandatory')
statsAlgns = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsAlgns.setStatus('mandatory')
statsCntlOvflows = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsCntlOvflows.setStatus('mandatory')
statsXmtColls = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsXmtColls.setStatus('mandatory')
statsBlkDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsBlkDiscards.setStatus('mandatory')
statsPassDiscards = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsPassDiscards.setStatus('mandatory')
statsFwdMultiPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsFwdMultiPkts.setStatus('mandatory')
statsKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsKbytes.setStatus('mandatory')
statsBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsBcastPkts.setStatus('mandatory')
statsMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsMcastPkts.setStatus('mandatory')
statsSize64_127Pkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 16), Counter32()).setLabel("statsSize64-127Pkts").setMaxAccess("readonly")
if mibBuilder.loadTexts: statsSize64_127Pkts.setStatus('mandatory')
statsSize128_255Pkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 17), Counter32()).setLabel("statsSize128-255Pkts").setMaxAccess("readonly")
if mibBuilder.loadTexts: statsSize128_255Pkts.setStatus('mandatory')
statsSize256_511Pkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 18), Counter32()).setLabel("statsSize256-511Pkts").setMaxAccess("readonly")
if mibBuilder.loadTexts: statsSize256_511Pkts.setStatus('mandatory')
statsSize512_1023Pkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 19), Counter32()).setLabel("statsSize512-1023Pkts").setMaxAccess("readonly")
if mibBuilder.loadTexts: statsSize512_1023Pkts.setStatus('mandatory')
statsSize1024_1518Pkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 20), Counter32()).setLabel("statsSize1024-1518Pkts").setMaxAccess("readonly")
if mibBuilder.loadTexts: statsSize1024_1518Pkts.setStatus('mandatory')
statsShortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsShortPkts.setStatus('mandatory')
statsOvsizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsOvsizePkts.setStatus('mandatory')
opSysReset = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opSysReset.setStatus('mandatory')
opNoStatColl = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opNoStatColl.setStatus('mandatory')
opTrapInact = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opTrapInact.setStatus('mandatory')
trapSrcAddr = MibScalar((1, 3, 6, 1, 4, 1, 86, 8, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSrcAddr.setStatus('mandatory')
trapErrMsg = MibScalar((1, 3, 6, 1, 4, 1, 86, 8, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapErrMsg.setStatus('mandatory')
lanTable = MibTable((1, 3, 6, 1, 4, 1, 86, 2, 4, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanTable.setStatus('mandatory')
lanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 86, 2, 4, 1, 1), ).setMaxAccess("readonly").setIndexNames((0, "NAT", "lanPhyAddr"))
if mibBuilder.loadTexts: lanEntry.setStatus('mandatory')
lanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanIfIndex.setStatus('mandatory')
lanPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanPhyAddr.setStatus('mandatory')
blanTable = MibTable((1, 3, 6, 1, 4, 1, 86, 2, 4, 2), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: blanTable.setStatus('mandatory')
blanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 86, 2, 4, 2, 1), ).setMaxAccess("readwrite").setIndexNames((0, "NAT", "blanIfIndex"), (0, "NAT", "blanOffset"), (0, "NAT", "blanPtrn"))
if mibBuilder.loadTexts: blanEntry.setStatus('mandatory')
blanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blanIfIndex.setStatus('mandatory')
blanOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blanOffset.setStatus('mandatory')
blanLength = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 4, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: blanLength.setStatus('mandatory')
blanPtrn = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 4, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blanPtrn.setStatus('mandatory')
planTable = MibTable((1, 3, 6, 1, 4, 1, 86, 2, 4, 3), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: planTable.setStatus('mandatory')
planEntry = MibTableRow((1, 3, 6, 1, 4, 1, 86, 2, 4, 3, 1), ).setMaxAccess("readwrite").setIndexNames((0, "NAT", "planIfIndex"), (0, "NAT", "planOffset"), (0, "NAT", "planPtrn"))
if mibBuilder.loadTexts: planEntry.setStatus('mandatory')
planIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: planIfIndex.setStatus('mandatory')
planOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: planOffset.setStatus('mandatory')
planLength = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 4, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: planLength.setStatus('mandatory')
planPtrn = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 4, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: planPtrn.setStatus('mandatory')
lanTblFlush = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanTblFlush.setStatus('mandatory')
brgState = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 0), ("backup", 1), ("forwarding", 2), ("idle", 3), ("serial-handshake", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgState.setStatus('mandatory')
etypeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 5, 1))
etypeTypes = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etypeTypes.setStatus('mandatory')
etypeTable = MibTable((1, 3, 6, 1, 4, 1, 86, 2, 5, 1, 2), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: etypeTable.setStatus('mandatory')
pysmiFakeCol1004 = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 5, 1, 2, 1) + (1004, ), Integer32())
etypeTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 86, 2, 5, 1, 2, 1), ).setMaxAccess("readonly").setIndexNames((0, "NAT", "pysmiFakeCol1004"))
if mibBuilder.loadTexts: etypeTblEntry.setStatus('mandatory')
etypeEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32871, 32872, 512, 32873, 513, 32874, 32876, 1536, 32877, 32878, 32879, 2048, 2049, 2304, 32880, 2560, 2050, 32881, 2561, 32882, 2051, 32883, 2052, 2053, 32884, 2054, 32885, 2055, 32886, 32887, 4096, 4097, 4098, 32890, 4099, 32896, 32891, 4100, 32892, 32897, 4101, 32893, 5632, 32898, 4102, 32894, 32899, 4103, 32895, 4104, 65280, 4105, 4106, 4107, 4108, 4109, 4110, 4111, 2076, 32923, 32924, 32925, 32926, 32927, 32931, 32932, 32933, 32934, 32935, 32936, 32937, 32938, 32939, 32940, 32941, 32942, 32943, 15367, 32944, 32945, 32946, 4660, 32947, 32960, 32961, 32962, 32963, 32966, 21000, 32967, 32968, 32969, 32970, 32971, 32972, 24576, 32973, 24577, 32974, 24578, 32975, 32976, 24579, 17185, 24580, 32977, 24581, 32978, 24582, 32979, 24583, 32980, 24584, 24585, 28672, 24592, 32989, 28673, 24593, 28674, 32990, 24594, 32991, 24595, 32992, 24596, 28677, 32993, 32994, 28679, 32995, 32996, 28681, 32997, 32998, 32999, 33000, 33001, 33002, 33003, 33004, 33005, 33006, 33007, 33008, 33010, 33011, 33012, 33013, 33015, 28704, 28705, 28706, 33023, 28707, 28708, 33024, 28709, 33025, 28710, 33026, 28711, 32771, 33027, 28712, 32772, 28713, 32773, 32774, 33031, 32776, 33032, 33033, 28720, 2184, 36864, 32784, 2185, 36865, 2186, 36866, 32787, 36867, 32788, 32789, 32790, 32793, 33067, 32814, 32815, 33072, 33073, 32821, 32822, 33079, 32824, 2989, 33080, 32825, 33081, 32826, 33082, 32827, 33083, 32828, 33084, 32829, 33085, 32830, 32831, 32832, 32833, 32834, 32836, 32838, 32839, 32841, 32859, 32860, 32861, 32864, 32866, 32869, 32870, 39321))).clone(namedValues=NamedValues(("veeco", 32871), ("gd", 32872), ("xrx-PUP", 512), ("atandt", 32873), ("xrx-PUPUT", 513), ("autophon", 32874), ("comdesign", 32876), ("xns-IDP", 1536), ("compuGraphic", 32877), ("lg", 32878), ("lg-1", 32879), ("dod-TCPIP", 2048), ("xdot75-IP", 2049), ("ung-DB", 2304), ("lg-2", 32880), ("xrx-PUP2", 2560), ("nbs-IP", 2050), ("lg-3", 32881), ("xrx-PUPAT2", 2561), ("lg-4", 32882), ("ecma-IP", 2051), ("lg-5", 32883), ("chaosnet", 2052), ("xdot25-LEV3", 2053), ("lg-6", 32884), ("tcpip-ARP", 2054), ("lg-7", 32885), ("xrx-XNS", 2055), ("lg-8", 32886), ("lg-9", 32887), ("berk-IP-0", 4096), ("berk-IP-1", 4097), ("berk-IP-2", 4098), ("matra", 32890), ("berk-IP-3", 4099), ("vit-B-MAN", 32896), ("dansk", 32891), ("berk-IP-4", 4100), ("mrt-I-NODAL", 32892), ("cc", 32897), ("berk-IP-5", 4101), ("vitalink", 32893), ("valid-MH", 5632), ("cc-1", 32898), ("berk-IP-6", 4102), ("vitalink-1", 32894), ("cc-2", 32899), ("berk-IP-7", 4103), ("vitalink-2", 32895), ("berk-IP-8", 4104), ("bbn-VITA", 65280), ("berk-IP-9", 4105), ("berk-IP-10", 4106), ("berk-IP-11", 4107), ("berk-IP-12", 4108), ("berk-IP-13", 4109), ("berk-IP-14", 4110), ("berk-IP-15", 4111), ("symbolics", 2076), ("appletlk", 32923), ("datability", 32924), ("datability-1", 32925), ("datability-2", 32926), ("spider", 32927), ("nixdorf", 32931), ("siemens", 32932), ("siemens-1", 32933), ("siemens-2", 32934), ("siemens-3", 32935), ("siemens-4", 32936), ("siemens-5", 32937), ("siemens-6", 32938), ("siemens-7", 32939), ("siemens-8", 32940), ("siemens-9", 32941), ("siemens-10", 32942), ("siemens-11", 32943), ("nbp", 15367), ("siemens-12", 32944), ("siemens-13", 32945), ("siemens-14", 32946), ("dca-MULTI", 4660), ("siemens-15", 32947), ("dca-HELLO", 32960), ("dca-TALK1", 32961), ("dca-TALK2", 32962), ("dca", 32963), ("pacer", 32966), ("bbn-SIMNET", 21000), ("applitek", 32967), ("integraph", 32968), ("integraph-1", 32969), ("integraph-2", 32970), ("integraph-3", 32971), ("integraph-4", 32972), ("dec-C-UA1", 24576), ("harris", 32973), ("dec-C-MOPDL", 24577), ("harris-1", 32974), ("dec-C-MOPRC", 24578), ("taylor", 32975), ("taylor-1", 32976), ("dec-C-NET", 24579), ("thd-DIDDLE", 17185), ("dec-C-LAT", 24580), ("taylor-2", 32977), ("dec-C-DIAG", 24581), ("taylor-3", 32978), ("dec-C-USE", 24582), ("rosemount", 32979), ("dec-C-LAVC", 24583), ("rosemount-1", 32980), ("dec-C-UA2", 24584), ("dec-C-UA3", 24585), ("ung-BASSO", 28672), ("three-COM", 24592), ("varian", 32989), ("ung-BASS1", 28673), ("three-COM-1", 24593), ("ung-BASS2", 28674), ("is-TRFS", 32990), ("three-COM-2", 24594), ("is", 32991), ("three-COM-3", 24595), ("ab", 32992), ("three-COM-4", 24596), ("ung-BASS5", 28677), ("ab-1", 32993), ("ab-2", 32994), ("os9net-1", 28679), ("ab-3", 32995), ("datability-3", 32996), ("os9net-2", 28681), ("datability-4", 32997), ("datability-5", 32998), ("datability-6", 32999), ("datability-7", 33000), ("datability-8", 33001), ("datability-9", 33002), ("datability-10", 33003), ("datability-11", 33004), ("datability-12", 33005), ("datability-13", 33006), ("datability-14", 33007), ("datability-15", 33008), ("retix", 33010), ("apple-TSS", 33011), ("kinetics", 33012), ("kinetics-1", 33013), ("apollo", 33015), ("lrt", 28704), ("lrt-1", 28705), ("lrt-2", 28706), ("wellfleet", 33023), ("lrt-3", 28707), ("lrt-4", 28708), ("wellfleet-1", 33024), ("lrt-5", 28709), ("wellfleet-2", 33025), ("lrt-6", 28710), ("wellfleet-3", 33026), ("lrt-7", 28711), ("cron-VLN", 32771), ("wellfleet-4", 33027), ("lrt-8", 28712), ("cron-DIR", 32772), ("lrt-9", 28713), ("hp-PROBE", 32773), ("nestar", 32774), ("symbolics-1", 33031), ("atandt-1", 32776), ("symbolics-2", 33032), ("symbolics-3", 33033), ("proteon", 28720), ("xyplex", 2184), ("loopback", 36864), ("excelan", 32784), ("xyplex-1", 2185), ("brg-BRG1", 36865), ("xyplex-2", 2186), ("brg-BRG2", 36866), ("sg-DIAG", 32787), ("brg-BRG3", 36867), ("sg", 32788), ("sg-UA", 32789), ("sg-XNS", 32790), ("ap-DOMAIN", 32793), ("talaris", 33067), ("tymshare", 32814), ("tigan", 32815), ("waterloo", 33072), ("vg", 33073), ("rev-ARP", 32821), ("aeonic", 32822), ("novell", 33079), ("dec-BRIDGE", 32824), ("banyan", 2989), ("novell-1", 33080), ("dec-C-UA4", 32825), ("kti", 33081), ("dec-C-UA5", 32826), ("kti-1", 33082), ("dec-C-UA6", 32827), ("kti-2", 33083), ("dec-DNS", 32828), ("kti-3", 33084), ("dec-ENCRYP", 32829), ("kti-4", 33085), ("dec-C-UA9", 32830), ("dec-LTM", 32831), ("dec-PC-ENim", 32832), ("dec-MS-DOS", 32833), ("dec-C-UA13", 32834), ("prc", 32836), ("atandt-2", 32838), ("atandt-3", 32839), ("expertdata", 32841), ("stan-ESP", 32859), ("stan-PRO", 32860), ("eands", 32861), ("lm", 32864), ("cc-3", 32866), ("um-AMH", 32869), ("um-AMH-1", 32870), ("mytype", 39321)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etypeEtype.setStatus('mandatory')
etypePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 5, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etypePkts.setStatus('mandatory')
etypeOtherTypes = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etypeOtherTypes.setStatus('mandatory')
peakInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 5, 2))
peakReset = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: peakReset.setStatus('mandatory')
peakResetTime = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakResetTime.setStatus('mandatory')
peakSmplIntv = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: peakSmplIntv.setStatus('mandatory')
peakData = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4))
peakFrameInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 1))
peakFramePkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakFramePkts.setStatus('mandatory')
peakFrameTime = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakFrameTime.setStatus('mandatory')
peakFrameErrors = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakFrameErrors.setStatus('mandatory')
peakKbyteInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 2))
peakKbytes = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakKbytes.setStatus('mandatory')
peakKbyteTime = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 2, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakKbyteTime.setStatus('mandatory')
peakKbyteTotalPkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakKbyteTotalPkts.setStatus('mandatory')
peakKbyteErrors = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakKbyteErrors.setStatus('mandatory')
peakBcastInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 3))
peakBcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakBcastPkts.setStatus('mandatory')
peakBcastTime = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 3, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakBcastTime.setStatus('mandatory')
peakBcastTotalPkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakBcastTotalPkts.setStatus('mandatory')
peakBcastErrors = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakBcastErrors.setStatus('mandatory')
peakMcastInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 4))
peakMcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakMcastPkts.setStatus('mandatory')
peakMcastTime = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 4, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakMcastTime.setStatus('mandatory')
peakMcastTotalPkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakMcastTotalPkts.setStatus('mandatory')
peakMcastErrors = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakMcastErrors.setStatus('mandatory')
peakErrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 5))
peakErrErrors = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakErrErrors.setStatus('mandatory')
peakErrTime = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 5, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakErrTime.setStatus('mandatory')
peakErrTotalPkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakErrTotalPkts.setStatus('mandatory')
peakErrCrcs = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakErrCrcs.setStatus('mandatory')
peakErrAlgns = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakErrAlgns.setStatus('mandatory')
peakErrXmtColls = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakErrXmtColls.setStatus('mandatory')
peakErrShorts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakErrShorts.setStatus('mandatory')
peakErrOvsizes = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakErrOvsizes.setStatus('mandatory')
peakUtilInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 6))
peakUtilVal = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakUtilVal.setStatus('mandatory')
peakUtilTime = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 6, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakUtilTime.setStatus('mandatory')
peakUtilTotalPkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakUtilTotalPkts.setStatus('mandatory')
peakUtilErrors = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 2, 4, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakUtilErrors.setStatus('mandatory')
top10Info = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 5, 3))
top10Enable = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 0), ("ethernettalkerON", 1), ("iptalkerON", 2), ("ethernetlistenerON", 3), ("iplistenerON", 4), ("ethernetpairON", 5), ("ippairON", 6), ("ethernetbroadcasterON", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: top10Enable.setStatus('mandatory')
top10ThresholdVal = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: top10ThresholdVal.setStatus('mandatory')
top10SmplIntv = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: top10SmplIntv.setStatus('mandatory')
top10SeqNum = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: top10SeqNum.setStatus('mandatory')
top10SmplTime = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 3, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: top10SmplTime.setStatus('mandatory')
top10TotalEntries = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: top10TotalEntries.setStatus('mandatory')
top10Ovflow = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: top10Ovflow.setStatus('mandatory')
top10TotalPkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: top10TotalPkts.setStatus('mandatory')
top10MatchedPkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: top10MatchedPkts.setStatus('mandatory')
top10ValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: top10ValidEntries.setStatus('mandatory')
top10Data = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 5, 3, 11))
top10StrID = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 3, 11, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: top10StrID.setStatus('mandatory')
top10Pkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 5, 3, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: top10Pkts.setStatus('mandatory')
alertParms = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 6, 1))
alertTypes = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertTypes.setStatus('mandatory')
alertSmplIntv = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alertSmplIntv.setStatus('mandatory')
alertReset = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alertReset.setStatus('mandatory')
alertResetTime = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertResetTime.setStatus('mandatory')
alerts = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 6, 2))
alertFrameInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 1))
alertFrameEnable = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alertFrameEnable.setStatus('mandatory')
alertFrameThreshold = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alertFrameThreshold.setStatus('mandatory')
alertFramePkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertFramePkts.setStatus('mandatory')
alertFrameTime = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertFrameTime.setStatus('mandatory')
alertFrameTotalPkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertFrameTotalPkts.setStatus('mandatory')
alertFrameErrors = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertFrameErrors.setStatus('mandatory')
alertBcastInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 2))
alertBcastEnable = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alertBcastEnable.setStatus('mandatory')
alertBcastThreshold = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alertBcastThreshold.setStatus('mandatory')
alertBcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertBcastPkts.setStatus('mandatory')
alertBcastTime = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 2, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertBcastTime.setStatus('mandatory')
alertBcastTotalPkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertBcastTotalPkts.setStatus('mandatory')
alertBcastErrors = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertBcastErrors.setStatus('mandatory')
alertMcastInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 3))
alertMcastEnable = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alertMcastEnable.setStatus('mandatory')
alertMcastThreshold = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alertMcastThreshold.setStatus('mandatory')
alertMcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertMcastPkts.setStatus('mandatory')
alertMcastTime = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 3, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertMcastTime.setStatus('mandatory')
alertMcastTotalPkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertMcastTotalPkts.setStatus('mandatory')
alertMcastErrors = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertMcastErrors.setStatus('mandatory')
alertErrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 4))
alertErrEnable = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alertErrEnable.setStatus('mandatory')
alertErrThreshold = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alertErrThreshold.setStatus('mandatory')
alertErrErrors = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertErrErrors.setStatus('mandatory')
alertErrTime = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 4, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertErrTime.setStatus('mandatory')
alertErrTotalPkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertErrTotalPkts.setStatus('mandatory')
alertErrTotalErrors = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertErrTotalErrors.setStatus('mandatory')
alertErrCrcs = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertErrCrcs.setStatus('mandatory')
alertErrAlgns = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertErrAlgns.setStatus('mandatory')
alertErrXmtColls = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertErrXmtColls.setStatus('mandatory')
alertErrShorts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertErrShorts.setStatus('mandatory')
alertErrOvsizes = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertErrOvsizes.setStatus('mandatory')
alertUtilInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 5))
alertUtilEnable = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alertUtilEnable.setStatus('mandatory')
alertUtilThreshold = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alertUtilThreshold.setStatus('mandatory')
alertUtilValue = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertUtilValue.setStatus('mandatory')
alertUtilTime = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 5, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertUtilTime.setStatus('mandatory')
alertUtilTotalPkts = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertUtilTotalPkts.setStatus('mandatory')
alertUtilErrors = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 6, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertUtilErrors.setStatus('mandatory')
rconfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 7, 1))
prTrapchannel = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 7, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prTrapchannel.setStatus('mandatory')
auxTrapchannel = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auxTrapchannel.setStatus('mandatory')
phonenum = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 9, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phonenum.setStatus('mandatory')
modemInitstr = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 9, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemInitstr.setStatus('mandatory')
modemDialprefix = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 9, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemDialprefix.setStatus('mandatory')
modemDialsuffix = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 9, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemDialsuffix.setStatus('mandatory')
modemHangupprefix = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 9, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemHangupprefix.setStatus('mandatory')
modemHangupsuffix = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 9, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemHangupsuffix.setStatus('mandatory')
rtrcfg = MibIdentifier((1, 3, 6, 1, 4, 1, 86, 2, 8, 1))
rtrcfRtupdintv = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 8, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrcfRtupdintv.setStatus('mandatory')
rtrcfRtdownintv = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrcfRtdownintv.setStatus('mandatory')
rtrcfRtholdintv = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrcfRtholdintv.setStatus('mandatory')
rtrcfRtdropintv = MibScalar((1, 3, 6, 1, 4, 1, 86, 2, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrcfRtdropintv.setStatus('mandatory')
rtrcfIfTable = MibTable((1, 3, 6, 1, 4, 1, 86, 2, 8, 1, 5), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrcfIfTable.setStatus('mandatory')
pysmiFakeCol1005 = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 8, 1, 5, 1) + (1005, ), Integer32())
rtrcfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 86, 2, 8, 1, 5, 1), ).setMaxAccess("readonly").setIndexNames((0, "NAT", "pysmiFakeCol1005"))
if mibBuilder.loadTexts: rtrcfIfEntry.setStatus('mandatory')
rtrcfProxyarp = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 8, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrcfProxyarp.setStatus('mandatory')
rtrcfIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 8, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrcfIcmp.setStatus('mandatory')
rtrcfHelperAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 8, 1, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrcfHelperAddr.setStatus('mandatory')
rtrcfBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 8, 1, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrcfBcastAddr.setStatus('mandatory')
rtrcfStatRtTbl = MibTable((1, 3, 6, 1, 4, 1, 86, 2, 8, 1, 6), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrcfStatRtTbl.setStatus('mandatory')
rtrcfStatRtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 86, 2, 8, 1, 6, 1), ).setMaxAccess("readonly").setIndexNames((0, "NAT", "rtrcfStatRtRoute"))
if mibBuilder.loadTexts: rtrcfStatRtEntry.setStatus('mandatory')
rtrcfStatRtRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 8, 1, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrcfStatRtRoute.setStatus('mandatory')
rtrcfStatRtRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 8, 1, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrcfStatRtRouter.setStatus('mandatory')
rtrcfStatRtMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 8, 1, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrcfStatRtMetric.setStatus('mandatory')
rtrrtInFltrTbl = MibTable((1, 3, 6, 1, 4, 1, 86, 2, 8, 3), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrrtInFltrTbl.setStatus('mandatory')
rtrrtInFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 86, 2, 8, 3, 1), ).setMaxAccess("readonly").setIndexNames((0, "NAT", "rtrrtInFltrInf"), (0, "NAT", "rtrrtInFltrAddr"), (0, "NAT", "rtrrtInFltrMask"))
if mibBuilder.loadTexts: rtrrtInFltrEntry.setStatus('mandatory')
rtrrtInFltrInf = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrrtInFltrInf.setStatus('mandatory')
rtrrtInFltrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 8, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrrtInFltrAddr.setStatus('mandatory')
rtrrtInFltrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 8, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrrtInFltrMask.setStatus('mandatory')
rtrrtInFltrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 8, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrrtInFltrFlag.setStatus('mandatory')
rtrrtOutFltrTbl = MibTable((1, 3, 6, 1, 4, 1, 86, 2, 8, 4), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrrtOutFltrTbl.setStatus('mandatory')
rtrrtOutFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 86, 2, 8, 4, 1), ).setMaxAccess("readonly").setIndexNames((0, "NAT", "rtrrtOutFltrInf"), (0, "NAT", "rtrrtOutFltrAddr"), (0, "NAT", "rtrrtOutFltrMask"))
if mibBuilder.loadTexts: rtrrtOutFltrEntry.setStatus('mandatory')
rtrrtOutFltrInf = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrrtOutFltrInf.setStatus('mandatory')
rtrrtOutFltrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 8, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrrtOutFltrAddr.setStatus('mandatory')
rtrrtOutFltrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 8, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrrtOutFltrMask.setStatus('mandatory')
rtrrtOutFltrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 86, 2, 8, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrrtOutFltrFlag.setStatus('mandatory')
mibBuilder.exportSymbols("NAT", alertSmplIntv=alertSmplIntv, alertBcastTime=alertBcastTime, peakFrameTime=peakFrameTime, rtrcfIcmp=rtrcfIcmp, peakUtilVal=peakUtilVal, rtrcfStatRtMetric=rtrcfStatRtMetric, blanIfIndex=blanIfIndex, opSysReset=opSysReset, trapSrcAddr=trapSrcAddr, alertErrCrcs=alertErrCrcs, prTrapchannel=prTrapchannel, statsBlkDiscards=statsBlkDiscards, phonenum=phonenum, statsCntlOvflows=statsCntlOvflows, rtrcfStatRtTbl=rtrcfStatRtTbl, blanPtrn=blanPtrn, rtrrtOutFltrEntry=rtrrtOutFltrEntry, alertMcastErrors=alertMcastErrors, auxTrapchannel=auxTrapchannel, cfPassword=cfPassword, rtrrtInFltrFlag=rtrrtInFltrFlag, alertUtilTime=alertUtilTime, top10Info=top10Info, alertMcastPkts=alertMcastPkts, natinf=natinf, statsSize256_511Pkts=statsSize256_511Pkts, peakReset=peakReset, cfParmsSave=cfParmsSave, peakMcastTime=peakMcastTime, peakErrOvsizes=peakErrOvsizes, statsBcastPkts=statsBcastPkts, top10TotalEntries=top10TotalEntries, rtrcfIfEntry=rtrcfIfEntry, cfCmstrAliasReadEnterprise=cfCmstrAliasReadEnterprise, lanTable=lanTable, alertErrShorts=alertErrShorts, rtrcfIfTable=rtrcfIfTable, alertUtilErrors=alertUtilErrors, modemDialprefix=modemDialprefix, rtrcfProxyarp=rtrcfProxyarp, statsCrcs=statsCrcs, alertErrXmtColls=alertErrXmtColls, alertBcastErrors=alertBcastErrors, statsKbytes=statsKbytes, modemHangupprefix=modemHangupprefix, statsRcvpkts=statsRcvpkts, blanEntry=blanEntry, alertFrameEnable=alertFrameEnable, alertErrTotalErrors=alertErrTotalErrors, top10SeqNum=top10SeqNum, alertResetTime=alertResetTime, alertMcastThreshold=alertMcastThreshold, alertErrTime=alertErrTime, rtrcfRtdownintv=rtrcfRtdownintv, top10TotalPkts=top10TotalPkts, top10MatchedPkts=top10MatchedPkts, top10Enable=top10Enable, cfDenyReadPublic=cfDenyReadPublic, alertReset=alertReset, rtrcfRtholdintv=rtrcfRtholdintv, alertErrOvsizes=alertErrOvsizes, nat=nat, cfAcchostLevel=cfAcchostLevel, statsSize64_127Pkts=statsSize64_127Pkts, etypeTypes=etypeTypes, rtrrtOutFltrMask=rtrrtOutFltrMask, etypePkts=etypePkts, natmib=natmib, blanLength=blanLength, alertErrAlgns=alertErrAlgns, cfCmstrReadWrite=cfCmstrReadWrite, cfAcchostCfgTable=cfAcchostCfgTable, alertUtilThreshold=alertUtilThreshold, pysmiFakeCol1001=pysmiFakeCol1001, planIfIndex=planIfIndex, natbrg=natbrg, alertErrErrors=alertErrErrors, top10ThresholdVal=top10ThresholdVal, top10Data=top10Data, alertBcastTotalPkts=alertBcastTotalPkts, cfAcchostHostIP=cfAcchostHostIP, statsFwdMultiPkts=statsFwdMultiPkts, rtrrtInFltrEntry=rtrrtInFltrEntry, rtrrtOutFltrAddr=rtrrtOutFltrAddr, cfCmstrReadEnterprise=cfCmstrReadEnterprise, rtrcfg=rtrcfg, peakKbyteInfo=peakKbyteInfo, peakBcastTotalPkts=peakBcastTotalPkts, peakUtilTime=peakUtilTime, planPtrn=planPtrn, planLength=planLength, peakMcastErrors=peakMcastErrors, peakMcastInfo=peakMcastInfo, peakMcastPkts=peakMcastPkts, statsFwdpkts=statsFwdpkts, alertBcastPkts=alertBcastPkts, cfCmstrAliasTable=cfCmstrAliasTable, cfAcchostTable=cfAcchostTable, rtrcfBcastAddr=rtrcfBcastAddr, cfDevIPAddr=cfDevIPAddr, rtrcfStatRtRoute=rtrcfStatRtRoute, statsBufOvflows=statsBufOvflows, rtrrtOutFltrFlag=rtrrtOutFltrFlag, top10StrID=top10StrID, top10SmplIntv=top10SmplIntv, alertFrameTotalPkts=alertFrameTotalPkts, peakKbyteTotalPkts=peakKbyteTotalPkts, statsPassDiscards=statsPassDiscards, cfCmstrEntry=cfCmstrEntry, etypeInfo=etypeInfo, peakBcastInfo=peakBcastInfo, opTrapInact=opTrapInact, alerts=alerts, peakFrameInfo=peakFrameInfo, top10SmplTime=top10SmplTime, modemDialsuffix=modemDialsuffix, statsSize128_255Pkts=statsSize128_255Pkts, peakErrAlgns=peakErrAlgns, alertFrameTime=alertFrameTime, alertMcastEnable=alertMcastEnable, rtrcfRtdropintv=rtrcfRtdropintv, rtrcfHelperAddr=rtrcfHelperAddr, rtrrtInFltrInf=rtrrtInFltrInf, statsReset=statsReset, rtrcfStatRtEntry=rtrcfStatRtEntry, cfCmstrAliasReadWrite=cfCmstrAliasReadWrite, statsShortPkts=statsShortPkts, statsOvsizePkts=statsOvsizePkts, peakFramePkts=peakFramePkts, statsXmtColls=statsXmtColls, alertUtilValue=alertUtilValue, top10Pkts=top10Pkts, cfAcchostEntry=cfAcchostEntry, cfCmstrReadTrap=cfCmstrReadTrap, natalert=natalert, etypeOtherTypes=etypeOtherTypes, alertErrInfo=alertErrInfo, rtrrtOutFltrTbl=rtrrtOutFltrTbl, lanTblFlush=lanTblFlush, alertMcastTotalPkts=alertMcastTotalPkts, cfFirmware=cfFirmware, natopr=natopr, rtrcfRtupdintv=rtrcfRtupdintv, modemHangupsuffix=modemHangupsuffix, peakUtilTotalPkts=peakUtilTotalPkts, peakBcastErrors=peakBcastErrors, alertMcastInfo=alertMcastInfo, dialup=dialup, alertUtilTotalPkts=alertUtilTotalPkts, cfCmstrAliasReadTrap=cfCmstrAliasReadTrap, cfSubnetMask=cfSubnetMask, cfIPAddr2=cfIPAddr2, planEntry=planEntry, brgState=brgState, peakResetTime=peakResetTime, peakErrInfo=peakErrInfo, alertFramePkts=alertFramePkts, statsEntry=statsEntry, cfCmstrTable=cfCmstrTable, peakKbytes=peakKbytes, peakKbyteTime=peakKbyteTime, peakUtilInfo=peakUtilInfo, alertFrameErrors=alertFrameErrors, modemInitstr=modemInitstr, statsSize512_1023Pkts=statsSize512_1023Pkts, statsAlgns=statsAlgns, trapinfo=trapinfo, alertUtilInfo=alertUtilInfo, peakErrTotalPkts=peakErrTotalPkts, pysmiFakeCol1005=pysmiFakeCol1005, rtrcfStatRtRouter=rtrcfStatRtRouter, statsResetTime=statsResetTime, alertErrThreshold=alertErrThreshold, peakBcastTime=peakBcastTime, natmtr=natmtr, etypeTable=etypeTable, peakData=peakData, rtrrtInFltrMask=rtrrtInFltrMask, peakErrTime=peakErrTime, etypeTblEntry=etypeTblEntry, products=products, cfAcchostCfgAcclvl=cfAcchostCfgAcclvl, alertFrameThreshold=alertFrameThreshold, lanPhyAddr=lanPhyAddr, top10Ovflow=top10Ovflow, peakErrCrcs=peakErrCrcs, alertTypes=alertTypes, peakErrShorts=peakErrShorts, pysmiFakeCol1000=pysmiFakeCol1000, blanOffset=blanOffset, peakErrErrors=peakErrErrors, blanTable=blanTable, alertErrEnable=alertErrEnable, peakKbyteErrors=peakKbyteErrors, alertUtilEnable=alertUtilEnable, lanEntry=lanEntry, alertBcastEnable=alertBcastEnable, planTable=planTable, cfCmstrReadPublic=cfCmstrReadPublic, alertBcastInfo=alertBcastInfo, rtrrtInFltrAddr=rtrrtInFltrAddr, pysmiFakeCol1004=pysmiFakeCol1004, rtrrtInFltrTbl=rtrrtInFltrTbl, peakSmplIntv=peakSmplIntv, rtrrtOutFltrInf=rtrrtOutFltrInf, rmeter=rmeter, peakBcastPkts=peakBcastPkts, statsSize1024_1518Pkts=statsSize1024_1518Pkts, cfCmstrAliasEntry=cfCmstrAliasEntry, configuration=configuration, cfSubnetMask2=cfSubnetMask2, alertFrameInfo=alertFrameInfo, statsMcastPkts=statsMcastPkts, peakMcastTotalPkts=peakMcastTotalPkts, planOffset=planOffset, natrtr=natrtr, alertBcastThreshold=alertBcastThreshold, opNoStatColl=opNoStatColl, etypeEtype=etypeEtype, top10ValidEntries=top10ValidEntries, cfAcchostCfgEntry=cfAcchostCfgEntry, peakInfo=peakInfo, rconfiguration=rconfiguration, alertErrTotalPkts=alertErrTotalPkts, peakErrXmtColls=peakErrXmtColls, statsTable=statsTable, alertParms=alertParms, lanIfIndex=lanIfIndex, cfCmstrAliasReadPublic=cfCmstrAliasReadPublic, alertMcastTime=alertMcastTime, peakFrameErrors=peakFrameErrors, peakUtilErrors=peakUtilErrors, trapErrMsg=trapErrMsg, pysmiFakeCol1002=pysmiFakeCol1002, pysmiFakeCol1003=pysmiFakeCol1003)
