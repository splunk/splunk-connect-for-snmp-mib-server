#
# PySNMP MIB module GDCHDSL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDCHDSL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:05:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, MibIdentifier, enterprises, Integer32, IpAddress, Counter64, Bits, Gauge32, TimeTicks, Unsigned32, Counter32, ObjectIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "MibIdentifier", "enterprises", "Integer32", "IpAddress", "Counter64", "Bits", "Gauge32", "TimeTicks", "Unsigned32", "Counter32", "ObjectIdentity", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
hdsl = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11))
gdcHdslSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1))
hdsl700G2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 2))
hdsl700G3 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 3))
hdsl730D1 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 4))
hdsl730D2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 5))
hdsl720G1 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 6))
hdsl720G2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 7))
hdsl702G2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 8))
hdsl710D2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 9))
hdsl700G2RP = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 10))
hdsl710D2RP = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 11))
hdsl720G2RP = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 12))
hdsl730D2RP = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 13))
hdsl701T2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 14))
hdsl701T2RP = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 15))
hdsl721T1 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 16))
hdsl721T2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 17))
hdsl721T2RP = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 18))
hdsl731D1 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 19))
hdsl731D2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 20))
hdsl731D2RP = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 21))
hdsl700AG2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 22))
hdsl700AG2NZ = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 23))
hdslGT1030 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 25))
hdslGT2030 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 26))
uas7722 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 27))
hdslGT1020 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 28))
hdslGT2020 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 29))
hdsl711D2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 30))
gdcHdslVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1, 1))
gdcHdslMaintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1, 2))
gdcHdslConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1, 3))
gdcHdslDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1, 4))
gdcHdslPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1, 5))
gdcHdslStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1, 6))
gdcHdslDiagnosticResults = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1, 7))
gdcFractional = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1, 8))
gdcHdslAlarmThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1, 9))
gdcHdslSystemMIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslSystemMIBversion.setStatus('mandatory')
gdcHdslVersionTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 2), )
if mibBuilder.loadTexts: gdcHdslVersionTable.setStatus('mandatory')
gdcHdslVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 2, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslVersionIndex"))
if mibBuilder.loadTexts: gdcHdslVersionEntry.setStatus('mandatory')
gdcHdslVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslVersionIndex.setStatus('mandatory')
gdcHdslFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslFirmwareRev.setStatus('mandatory')
gdcHdslModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslModelNumber.setStatus('mandatory')
gdcHdslDownloadTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 3), )
if mibBuilder.loadTexts: gdcHdslDownloadTable.setStatus('mandatory')
gdcHdslDownloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 3, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslDownloadIndex"))
if mibBuilder.loadTexts: gdcHdslDownloadEntry.setStatus('mandatory')
gdcHdslDownloadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDownloadIndex.setStatus('mandatory')
gdcHdslActiveFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslActiveFirmwareRev.setStatus('mandatory')
gdcHdslStoredFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslStoredFirmwareRev.setStatus('mandatory')
gdcHdslStoredFirmwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("statBlank", 1), ("statDownLoading", 2), ("statOK", 3), ("statCheckSumBad", 4), ("statUnZipping", 5), ("statBadUnZip", 6), ("statDownloadAborted", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslStoredFirmwareStatus.setStatus('mandatory')
gdcHdslSwitchActiveFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchNorm", 1), ("switchActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslSwitchActiveFirmware.setStatus('mandatory')
gdcHdslDownloadingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disableAll", 1), ("enableAndWait", 2), ("enableAndSwitch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslDownloadingMode.setStatus('mandatory')
gdcHdslEraseFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("erase", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslEraseFlash.setStatus('mandatory')
gdcHdslMaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1), )
if mibBuilder.loadTexts: gdcHdslMaintenanceTable.setStatus('mandatory')
gdcHdslMaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslMaintenanceLineIndex"))
if mibBuilder.loadTexts: gdcHdslMaintenanceEntry.setStatus('mandatory')
gdcHdslMaintenanceLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslMaintenanceLineIndex.setStatus('mandatory')
gdcHdslSoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("norm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslSoftReset.setStatus('mandatory')
gdcHdslConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslConfigMode.setStatus('mandatory')
gdcHdslSysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslSysUpTime.setStatus('mandatory')
gdcHdslUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ltu", 1), ("ntu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslUnitType.setStatus('mandatory')
gdcHdslDefaultInit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("factoryDefault", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslDefaultInit.setStatus('mandatory')
gdcHdslDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voice", 1), ("data", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslDataType.setStatus('mandatory')
gdcHdslLoopProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pointopoint", 1), ("pointomultipoint", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslLoopProvision.setStatus('mandatory')
gdcHdslNumberofLoops = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneLoop", 1), ("twoLoops", 2), ("threeLoops", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslNumberofLoops.setStatus('mandatory')
gdcHdslFrontPanel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslFrontPanel.setStatus('mandatory')
gdcHdslRoutingConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twoLoops", 1), ("threeLoops", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslRoutingConfig.setStatus('mandatory')
gdcHdslPrivateStorage1 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslPrivateStorage1.setStatus('mandatory')
gdcHdslPrivateStorage2 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslPrivateStorage2.setStatus('mandatory')
gdcHdslPrivateStorage3 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslPrivateStorage3.setStatus('mandatory')
gdcHdslLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLedStatus.setStatus('mandatory')
fracExecution = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("execute", 1), ("norm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fracExecution.setStatus('mandatory')
gdcHdslAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslAlarmStatus.setStatus('mandatory')
gdcHdslV54Config = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslV54Config.setStatus('mandatory')
gdcHdslFPRDLConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eoc", 1), ("v54", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslFPRDLConfig.setStatus('mandatory')
gdcHdslRLTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("mins10", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslRLTimeOut.setStatus('mandatory')
gdcHdslRPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslRPEnable.setStatus('mandatory')
gdcHdslLedStatus1 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLedStatus1.setStatus('mandatory')
gdcHdslE1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 1), )
if mibBuilder.loadTexts: gdcHdslE1ConfigTable.setStatus('mandatory')
gdcHdslE1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 1, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslE1ConfigIndex"))
if mibBuilder.loadTexts: gdcHdslE1ConfigEntry.setStatus('mandatory')
gdcHdslE1ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslE1ConfigIndex.setStatus('mandatory')
gdcHdslE1FramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("framed", 1), ("unframed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslE1FramingMode.setStatus('mandatory')
gdcHdslE1LineUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tlu", 1), ("ilu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslE1LineUnit.setStatus('mandatory')
gdcHdslE1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("hdb3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslE1LineCoding.setStatus('mandatory')
gdcHdslDteConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 2), )
if mibBuilder.loadTexts: gdcHdslDteConfigTable.setStatus('mandatory')
gdcHdslDteConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 2, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslDteConfigIndex"))
if mibBuilder.loadTexts: gdcHdslDteConfigEntry.setStatus('mandatory')
gdcHdslDteConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDteConfigIndex.setStatus('mandatory')
gdcHdslDteCtsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forcedOn", 1), ("onWithRts", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslDteCtsMode.setStatus('mandatory')
gdcHdslDteDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslDteDataRate.setStatus('mandatory')
gdcHdslDteTxClkSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("externalTiming", 1), ("internalTiming", 2), ("loopTiming", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslDteTxClkSource.setStatus('mandatory')
gdcHdslT1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3), )
if mibBuilder.loadTexts: gdcHdslT1ConfigTable.setStatus('mandatory')
gdcHdslT1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslT1ConfigIndex"))
if mibBuilder.loadTexts: gdcHdslT1ConfigEntry.setStatus('mandatory')
gdcHdslT1ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslT1ConfigIndex.setStatus('mandatory')
gdcHdslT1InterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dsx1", 1), ("ds1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslT1InterfaceType.setStatus('mandatory')
gdcHdslT1FramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("esfANSI", 1), ("esf54016", 2), ("sf", 3), ("unframed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslT1FramingMode.setStatus('mandatory')
gdcHdslT1TxPreequalization = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("preq0to133ft", 1), ("preq133to266ft", 2), ("preq266to399ft", 3), ("preq399to533ft", 4), ("preq533to655ft", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslT1TxPreequalization.setStatus('mandatory')
gdcHdslT1TxBulidOut = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bo0dB", 1), ("bo75dB", 2), ("bo150dB", 3), ("bo225dB", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslT1TxBulidOut.setStatus('mandatory')
gdcHdslT1InbandLBType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inhibit", 1), ("lineloopback", 2), ("payloadloopback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslT1InbandLBType.setStatus('mandatory')
gdcHdslT1FDLMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslT1FDLMode.setStatus('mandatory')
gdcHdslT1AISLoopdownTime = MibScalar((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("ld5secs", 2), ("ld10secs", 3), ("ld20secs", 4), ("ld40secs", 5), ("ld60secs", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslT1AISLoopdownTime.setStatus('mandatory')
gdcHdslT1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslT1LineCoding.setStatus('mandatory')
gdcHdslT1TxClkSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("externalTiming", 1), ("internalTiming", 2), ("loopTiming", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslT1TxClkSource.setStatus('mandatory')
gdcHdslDiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 4, 1), )
if mibBuilder.loadTexts: gdcHdslDiagTable.setStatus('mandatory')
gdcHdslDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 4, 1, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslDiagIndex"))
if mibBuilder.loadTexts: gdcHdslDiagEntry.setStatus('mandatory')
gdcHdslDiagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 4, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDiagIndex.setStatus('mandatory')
gdcHdslLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7))).clone(namedValues=NamedValues(("noLoop", 1), ("lineLoop", 2), ("localLoop", 3), ("lineandlocalLoop", 4), ("dataLoop", 6), ("remoteLoop", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslLoopback.setStatus('mandatory')
gdcHdslBertTest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inhibit", 1), ("enable", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslBertTest.setStatus('mandatory')
gdcHdslDiagResultsTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 7, 1), )
if mibBuilder.loadTexts: gdcHdslDiagResultsTable.setStatus('mandatory')
gdcHdslDiagResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 7, 1, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslDiagResultsIndex"))
if mibBuilder.loadTexts: gdcHdslDiagResultsEntry.setStatus('mandatory')
gdcHdslDiagResultsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 7, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDiagResultsIndex.setStatus('mandatory')
gdcHdslTestExecutionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inSync", 1), ("notInSync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslTestExecutionStatus.setStatus('mandatory')
gdcHdslDiagResultErr = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDiagResultErr.setStatus('mandatory')
gdcHdslDiagResultInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDiagResultInterval.setStatus('mandatory')
gdcHdslV54RDLTest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInV54Test", 1), ("txV54Test", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslV54RDLTest.setStatus('mandatory')
gdcHdslCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 1), )
if mibBuilder.loadTexts: gdcHdslCurrentTable.setStatus('mandatory')
gdcHdslCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 1, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslCurrentIndex"))
if mibBuilder.loadTexts: gdcHdslCurrentEntry.setStatus('mandatory')
gdcHdslCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslCurrentIndex.setStatus('mandatory')
gdcHdslCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslCurrentESs.setStatus('mandatory')
gdcHdslCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslCurrentSESs.setStatus('mandatory')
gdcHdslCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslCurrentUASs.setStatus('mandatory')
gdcHdslCurrentDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslCurrentDMs.setStatus('mandatory')
gdcHdslCurrentFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslCurrentFEBEs.setStatus('mandatory')
gdcHdslCurrentStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslCurrentStats.setStatus('mandatory')
gdcHdslIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2), )
if mibBuilder.loadTexts: gdcHdslIntervalTable.setStatus('mandatory')
gdcHdslIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslIntervalIndex"), (0, "GDCHDSL-MIB", "gdcHdslIntervalNumber"))
if mibBuilder.loadTexts: gdcHdslIntervalEntry.setStatus('mandatory')
gdcHdslIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslIntervalIndex.setStatus('mandatory')
gdcHdslIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslIntervalNumber.setStatus('mandatory')
gdcHdslIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslIntervalESs.setStatus('mandatory')
gdcHdslIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslIntervalSESs.setStatus('mandatory')
gdcHdslIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslIntervalUASs.setStatus('mandatory')
gdcHdslIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslIntervalDMs.setStatus('mandatory')
gdcHdslIntervalFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslIntervalFEBEs.setStatus('mandatory')
gdcHdslIntervalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslIntervalStats.setStatus('mandatory')
gdcHdslTotalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 3), )
if mibBuilder.loadTexts: gdcHdslTotalTable.setStatus('mandatory')
gdcHdslTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 3, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslTotalIndex"))
if mibBuilder.loadTexts: gdcHdslTotalEntry.setStatus('mandatory')
gdcHdslTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslTotalIndex.setStatus('mandatory')
gdcHdslTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslTotalESs.setStatus('mandatory')
gdcHdslTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslTotalSESs.setStatus('mandatory')
gdcHdslTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslTotalUASs.setStatus('mandatory')
gdcHdslTotalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslTotalDMs.setStatus('mandatory')
gdcHdslTotalFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslTotalFEBEs.setStatus('mandatory')
gdcHdslTotalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslTotalStats.setStatus('mandatory')
gdcHdslIntervalMaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 4), )
if mibBuilder.loadTexts: gdcHdslIntervalMaintenanceTable.setStatus('mandatory')
gdcHdslIntervalMaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 4, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslIntervalMaintenanceIndex"))
if mibBuilder.loadTexts: gdcHdslIntervalMaintenanceEntry.setStatus('mandatory')
gdcHdslIntervalMaintenanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslIntervalMaintenanceIndex.setStatus('mandatory')
gdcHdslResetIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslResetIntervals.setStatus('mandatory')
gdcHdslNumberofValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslNumberofValidIntervals.setStatus('mandatory')
gdcHdslResetMajorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clearAlarm", 1), ("normalAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslResetMajorAlarm.setStatus('mandatory')
gdcHdslResetMinorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clearAlarm", 1), ("normalAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslResetMinorAlarm.setStatus('mandatory')
gdcHdslT1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 5), )
if mibBuilder.loadTexts: gdcHdslT1CurrentTable.setStatus('mandatory')
gdcHdslT1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 5, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslT1CurrentIndex"))
if mibBuilder.loadTexts: gdcHdslT1CurrentEntry.setStatus('mandatory')
gdcHdslT1CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 5, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslT1CurrentIndex.setStatus('mandatory')
gdcHdslT1CurrentStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslT1CurrentStats.setStatus('mandatory')
gdcHdslT1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 6), )
if mibBuilder.loadTexts: gdcHdslT1IntervalTable.setStatus('mandatory')
gdcHdslT1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 6, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslT1IntervalIndex"), (0, "GDCHDSL-MIB", "gdcHdslT1IntervalNumber"))
if mibBuilder.loadTexts: gdcHdslT1IntervalEntry.setStatus('mandatory')
gdcHdslT1IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 6, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslT1IntervalIndex.setStatus('mandatory')
gdcHdslT1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslT1IntervalNumber.setStatus('mandatory')
gdcHdslT1IntervalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslT1IntervalStats.setStatus('mandatory')
gdcHdslT1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 7), )
if mibBuilder.loadTexts: gdcHdslT1TotalTable.setStatus('mandatory')
gdcHdslT1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 7, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslT1TotalIndex"))
if mibBuilder.loadTexts: gdcHdslT1TotalEntry.setStatus('mandatory')
gdcHdslT1TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 7, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslT1TotalIndex.setStatus('mandatory')
gdcHdslT1TotalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslT1TotalStats.setStatus('mandatory')
gdcHdslLoopStatusTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1), )
if mibBuilder.loadTexts: gdcHdslLoopStatusTable.setStatus('mandatory')
gdcHdslLoopStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslLoopStatusLineIndex"))
if mibBuilder.loadTexts: gdcHdslLoopStatusEntry.setStatus('mandatory')
gdcHdslLoopStatusLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLoopStatusLineIndex.setStatus('mandatory')
gdcHdslLoopStartUp = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("norm", 1), ("start", 2), ("cancel", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslLoopStartUp.setStatus('mandatory')
gdcHdslLoopTipRingReversalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reversed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLoopTipRingReversalMode.setStatus('mandatory')
gdcHdslLoopSignaltoNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLoopSignaltoNoiseMargin.setStatus('mandatory')
gdcHdslLoopSNFrac = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLoopSNFrac.setStatus('mandatory')
gdcHdslLoopSNAttenSense = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("positive", 1), ("negative", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLoopSNAttenSense.setStatus('mandatory')
gdcHdslLoopPulseAtten = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLoopPulseAtten.setStatus('mandatory')
gdcHdslLoopPulseAttenFrac = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLoopPulseAttenFrac.setStatus('mandatory')
gdcHdslLoopGain = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("high", 2), ("ok", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLoopGain.setStatus('mandatory')
gdcHdslLoopExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("exchange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLoopExchange.setStatus('mandatory')
gdcHdslDteStatusTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 2), )
if mibBuilder.loadTexts: gdcHdslDteStatusTable.setStatus('mandatory')
gdcHdslDteStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 2, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslDteStatusIndex"))
if mibBuilder.loadTexts: gdcHdslDteStatusEntry.setStatus('mandatory')
gdcHdslDteStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDteStatusIndex.setStatus('mandatory')
gdcHdslDteDTRstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDteDTRstatus.setStatus('mandatory')
gdcHdslDteDCDstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDteDCDstatus.setStatus('mandatory')
gdcHdslDteRTSstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDteRTSstatus.setStatus('mandatory')
gdcHdslDteDSRstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDteDSRstatus.setStatus('mandatory')
gdcHdslDteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDteStatus.setStatus('mandatory')
hdslFracTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 8, 1), )
if mibBuilder.loadTexts: hdslFracTable.setStatus('mandatory')
hdslFracEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 8, 1, 1), ).setIndexNames((0, "GDCHDSL-MIB", "hdslFracIndex"))
if mibBuilder.loadTexts: hdslFracEntry.setStatus('mandatory')
hdslFracIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 8, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslFracIndex.setStatus('mandatory')
channelmapping = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelmapping.setStatus('mandatory')
gdcHdslHighway = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notAssigned", 1), ("highway1", 2), ("highway2", 3), ("highway3", 4), ("highway4", 5), ("highway5", 6), ("highway6", 7), ("highway7", 8), ("highway8", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslHighway.setStatus('mandatory')
gdcHdslTimeSlot16 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("used", 1), ("skipped", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslTimeSlot16.setStatus('mandatory')
hdslAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 9, 1), )
if mibBuilder.loadTexts: hdslAlarmConfigTable.setStatus('mandatory')
hdslAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 9, 1, 1), ).setIndexNames((0, "GDCHDSL-MIB", "hdslAlarmConfigIndex"), (0, "GDCHDSL-MIB", "hdslAlarmConfigIdentifier"))
if mibBuilder.loadTexts: hdslAlarmConfigEntry.setStatus('mandatory')
hdslAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 9, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslAlarmConfigIndex.setStatus('mandatory')
hdslAlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 9, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslAlarmConfigIdentifier.setStatus('mandatory')
hdslAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("thres1E04", 1), ("thres1E05", 2), ("thres1E06", 3), ("thres1E07", 4), ("thres1E08", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdslAlarmThreshold.setStatus('mandatory')
mibBuilder.exportSymbols("GDCHDSL-MIB", gdcHdslE1FramingMode=gdcHdslE1FramingMode, gdcHdslT1ConfigEntry=gdcHdslT1ConfigEntry, gdcHdslLoopSNAttenSense=gdcHdslLoopSNAttenSense, gdcHdslT1TotalIndex=gdcHdslT1TotalIndex, gdcHdslSystem=gdcHdslSystem, hdsl701T2=hdsl701T2, gdcHdslDteDataRate=gdcHdslDteDataRate, gdcHdslIntervalEntry=gdcHdslIntervalEntry, hdslGT1030=hdslGT1030, gdcHdslRoutingConfig=gdcHdslRoutingConfig, gdcHdslT1CurrentTable=gdcHdslT1CurrentTable, gdcHdslTotalStats=gdcHdslTotalStats, gdcHdslT1IntervalNumber=gdcHdslT1IntervalNumber, gdcHdslT1LineCoding=gdcHdslT1LineCoding, gdcHdslDownloadIndex=gdcHdslDownloadIndex, hdslAlarmConfigEntry=hdslAlarmConfigEntry, gdcHdslLoopStatusTable=gdcHdslLoopStatusTable, gdcHdslDteConfigIndex=gdcHdslDteConfigIndex, gdcHdslMaintenanceEntry=gdcHdslMaintenanceEntry, gdcHdslTotalFEBEs=gdcHdslTotalFEBEs, gdcHdslDiagEntry=gdcHdslDiagEntry, gdcHdslBertTest=gdcHdslBertTest, hdslGT2030=hdslGT2030, gdcHdslT1IntervalIndex=gdcHdslT1IntervalIndex, uas7722=uas7722, channelmapping=channelmapping, hdsl700G2=hdsl700G2, gdcHdslT1ConfigIndex=gdcHdslT1ConfigIndex, gdcHdslT1AISLoopdownTime=gdcHdslT1AISLoopdownTime, gdcHdslT1TotalStats=gdcHdslT1TotalStats, gdcHdslCurrentIndex=gdcHdslCurrentIndex, gdcHdslDteDCDstatus=gdcHdslDteDCDstatus, gdcHdslTotalDMs=gdcHdslTotalDMs, hdslAlarmConfigIndex=hdslAlarmConfigIndex, gdcHdslCurrentUASs=gdcHdslCurrentUASs, gdcHdslDiagResultsIndex=gdcHdslDiagResultsIndex, gdcHdslConfigMode=gdcHdslConfigMode, gdcHdslNumberofLoops=gdcHdslNumberofLoops, gdcHdslT1IntervalStats=gdcHdslT1IntervalStats, gdcHdslDteDSRstatus=gdcHdslDteDSRstatus, gdcHdslEraseFlash=gdcHdslEraseFlash, gdcHdslRLTimeOut=gdcHdslRLTimeOut, gdcHdslVersionEntry=gdcHdslVersionEntry, hdsl720G1=hdsl720G1, hdsl700AG2NZ=hdsl700AG2NZ, gdcHdslLedStatus=gdcHdslLedStatus, gdcHdslMaintenanceLineIndex=gdcHdslMaintenanceLineIndex, gdcHdslVersionTable=gdcHdslVersionTable, hdsl730D2=hdsl730D2, gdcHdslCurrentSESs=gdcHdslCurrentSESs, hdsl700G3=hdsl700G3, hdslFracTable=hdslFracTable, gdcHdslDiagResultsEntry=gdcHdslDiagResultsEntry, gdcHdslFirmwareRev=gdcHdslFirmwareRev, gdc=gdc, gdcHdslIntervalSESs=gdcHdslIntervalSESs, gdcHdslDefaultInit=gdcHdslDefaultInit, hdsl=hdsl, hdslFracEntry=hdslFracEntry, hdsl721T2=hdsl721T2, gdcHdslDownloadEntry=gdcHdslDownloadEntry, gdcHdslT1CurrentIndex=gdcHdslT1CurrentIndex, gdcHdslLoopSNFrac=gdcHdslLoopSNFrac, gdcHdslResetMajorAlarm=gdcHdslResetMajorAlarm, gdcHdslTotalSESs=gdcHdslTotalSESs, gdcHdslSoftReset=gdcHdslSoftReset, gdcHdslDownloadingMode=gdcHdslDownloadingMode, gdcHdslTimeSlot16=gdcHdslTimeSlot16, gdcHdslV54RDLTest=gdcHdslV54RDLTest, gdcHdslV54Config=gdcHdslV54Config, gdcHdslLoopExchange=gdcHdslLoopExchange, gdcHdslDteRTSstatus=gdcHdslDteRTSstatus, gdcHdslFPRDLConfig=gdcHdslFPRDLConfig, hdsl711D2=hdsl711D2, gdcFractional=gdcFractional, gdcHdslT1TxPreequalization=gdcHdslT1TxPreequalization, hdsl730D2RP=hdsl730D2RP, gdcHdslMaintenanceTable=gdcHdslMaintenanceTable, gdcHdslCurrentStats=gdcHdslCurrentStats, gdcHdslDiagTable=gdcHdslDiagTable, gdcHdslIntervalTable=gdcHdslIntervalTable, gdcHdslT1InterfaceType=gdcHdslT1InterfaceType, gdcHdslLoopPulseAtten=gdcHdslLoopPulseAtten, hdsl720G2=hdsl720G2, gdcHdslStatus=gdcHdslStatus, gdcHdslUnitType=gdcHdslUnitType, gdcHdslT1IntervalEntry=gdcHdslT1IntervalEntry, gdcHdslConfiguration=gdcHdslConfiguration, gdcHdslIntervalMaintenanceIndex=gdcHdslIntervalMaintenanceIndex, gdcHdslT1ConfigTable=gdcHdslT1ConfigTable, gdcHdslPrivateStorage3=gdcHdslPrivateStorage3, gdcHdslIntervalNumber=gdcHdslIntervalNumber, gdcHdslCurrentTable=gdcHdslCurrentTable, gdcHdslDteStatusEntry=gdcHdslDteStatusEntry, gdcHdslDiagIndex=gdcHdslDiagIndex, gdcHdslDteStatusIndex=gdcHdslDteStatusIndex, gdcHdslModelNumber=gdcHdslModelNumber, gdcHdslTotalIndex=gdcHdslTotalIndex, gdcHdslDteStatus=gdcHdslDteStatus, gdcHdslIntervalMaintenanceEntry=gdcHdslIntervalMaintenanceEntry, hdsl710D2RP=hdsl710D2RP, gdcHdslIntervalMaintenanceTable=gdcHdslIntervalMaintenanceTable, hdslGT1020=hdslGT1020, gdcHdslPrivateStorage2=gdcHdslPrivateStorage2, gdcHdslIntervalUASs=gdcHdslIntervalUASs, gdcHdslCurrentESs=gdcHdslCurrentESs, gdcHdslMaintenance=gdcHdslMaintenance, gdcHdslT1TxClkSource=gdcHdslT1TxClkSource, gdcHdslLoopPulseAttenFrac=gdcHdslLoopPulseAttenFrac, hdslFracIndex=hdslFracIndex, hdsl710D2=hdsl710D2, gdcHdslDteConfigEntry=gdcHdslDteConfigEntry, gdcHdslLoopTipRingReversalMode=gdcHdslLoopTipRingReversalMode, gdcHdslIntervalDMs=gdcHdslIntervalDMs, gdcHdslT1CurrentEntry=gdcHdslT1CurrentEntry, gdcHdslDownloadTable=gdcHdslDownloadTable, gdcHdslDiagnosticResults=gdcHdslDiagnosticResults, gdcHdslE1LineCoding=gdcHdslE1LineCoding, gdcHdslLoopStatusEntry=gdcHdslLoopStatusEntry, gdcHdslCurrentEntry=gdcHdslCurrentEntry, gdcHdslT1TotalEntry=gdcHdslT1TotalEntry, gdcHdslHighway=gdcHdslHighway, gdcHdslAlarmStatus=gdcHdslAlarmStatus, hdsl700G2RP=hdsl700G2RP, gdcHdslVersionIndex=gdcHdslVersionIndex, gdcHdslDteDTRstatus=gdcHdslDteDTRstatus, hdsl702G2=hdsl702G2, gdcHdslResetMinorAlarm=gdcHdslResetMinorAlarm, gdcHdslSwitchActiveFirmware=gdcHdslSwitchActiveFirmware, gdcHdslT1InbandLBType=gdcHdslT1InbandLBType, hdsl701T2RP=hdsl701T2RP, gdcHdslTotalEntry=gdcHdslTotalEntry, gdcHdslResetIntervals=gdcHdslResetIntervals, gdcHdslNumberofValidIntervals=gdcHdslNumberofValidIntervals, gdcHdslIntervalESs=gdcHdslIntervalESs, gdcHdslLoopGain=gdcHdslLoopGain, gdcHdslLoopback=gdcHdslLoopback, gdcHdslE1LineUnit=gdcHdslE1LineUnit, gdcHdslStoredFirmwareRev=gdcHdslStoredFirmwareRev, gdcHdslE1ConfigTable=gdcHdslE1ConfigTable, hdsl700AG2=hdsl700AG2, gdcHdslVersion=gdcHdslVersion, gdcHdslIntervalStats=gdcHdslIntervalStats, gdcHdslDteCtsMode=gdcHdslDteCtsMode, gdcHdslIntervalFEBEs=gdcHdslIntervalFEBEs, hdslAlarmThreshold=hdslAlarmThreshold, gdcHdslPrivateStorage1=gdcHdslPrivateStorage1, hdsl731D1=hdsl731D1, hdsl730D1=hdsl730D1, gdcHdslT1TotalTable=gdcHdslT1TotalTable, gdcHdslLoopProvision=gdcHdslLoopProvision, gdcHdslActiveFirmwareRev=gdcHdslActiveFirmwareRev, gdcHdslE1ConfigIndex=gdcHdslE1ConfigIndex, gdcHdslLoopSignaltoNoiseMargin=gdcHdslLoopSignaltoNoiseMargin, gdcHdslE1ConfigEntry=gdcHdslE1ConfigEntry, gdcHdslTotalTable=gdcHdslTotalTable, gdcHdslTestExecutionStatus=gdcHdslTestExecutionStatus, hdslAlarmConfigTable=hdslAlarmConfigTable, hdsl721T2RP=hdsl721T2RP, hdsl731D2RP=hdsl731D2RP, gdcHdslDiagnostics=gdcHdslDiagnostics, gdcHdslLoopStatusLineIndex=gdcHdslLoopStatusLineIndex, hdsl721T1=hdsl721T1, gdcHdslCurrentDMs=gdcHdslCurrentDMs, gdcHdslLoopStartUp=gdcHdslLoopStartUp, gdcHdslTotalUASs=gdcHdslTotalUASs, gdcHdslT1IntervalTable=gdcHdslT1IntervalTable, hdslAlarmConfigIdentifier=hdslAlarmConfigIdentifier, gdcHdslDteStatusTable=gdcHdslDteStatusTable, gdcHdslT1TxBulidOut=gdcHdslT1TxBulidOut, gdcHdslDiagResultsTable=gdcHdslDiagResultsTable, gdcHdslT1FDLMode=gdcHdslT1FDLMode, gdcHdslPerformance=gdcHdslPerformance, gdcHdslSysUpTime=gdcHdslSysUpTime, gdcHdslAlarmThresholds=gdcHdslAlarmThresholds, gdcHdslSystemMIBversion=gdcHdslSystemMIBversion, gdcHdslFrontPanel=gdcHdslFrontPanel, gdcHdslStoredFirmwareStatus=gdcHdslStoredFirmwareStatus, hdsl731D2=hdsl731D2, gdcHdslIntervalIndex=gdcHdslIntervalIndex, gdcHdslDataType=gdcHdslDataType, fracExecution=fracExecution, gdcHdslDteConfigTable=gdcHdslDteConfigTable, gdcHdslDiagResultErr=gdcHdslDiagResultErr, gdcHdslCurrentFEBEs=gdcHdslCurrentFEBEs, gdcHdslT1FramingMode=gdcHdslT1FramingMode, gdcHdslLedStatus1=gdcHdslLedStatus1, hdslGT2020=hdslGT2020, gdcHdslT1CurrentStats=gdcHdslT1CurrentStats, gdcHdslDiagResultInterval=gdcHdslDiagResultInterval, hdsl720G2RP=hdsl720G2RP, gdcHdslTotalESs=gdcHdslTotalESs, gdcHdslRPEnable=gdcHdslRPEnable, gdcHdslDteTxClkSource=gdcHdslDteTxClkSource)
