#
# PySNMP MIB module PANDATEL-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PANDATEL-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:28:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter64, NotificationType, IpAddress, enterprises, ObjectIdentity, iso, Integer32, Counter32, Unsigned32, Gauge32, NotificationType, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter64", "NotificationType", "IpAddress", "enterprises", "ObjectIdentity", "iso", "Integer32", "Counter32", "Unsigned32", "Gauge32", "NotificationType", "TimeTicks", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
pandatel = MibIdentifier((1, 3, 6, 1, 4, 1, 760))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1))
chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 20000))
chassisTypeID = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 20000, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTypeID.setStatus('mandatory')
chassisComponents = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 20000, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("stand-alone", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisComponents.setStatus('mandatory')
chassisDevices = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 20000, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisDevices.setStatus('mandatory')
chassisSlots = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 20000, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("no-slots", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlots.setStatus('mandatory')
chassisModules = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 20000, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisModules.setStatus('mandatory')
chassisPorts = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 20000, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("no-ports", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPorts.setStatus('mandatory')
chassisComponentTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 20000, 10), )
if mibBuilder.loadTexts: chassisComponentTable.setStatus('optional')
chassisDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 20000, 11), )
if mibBuilder.loadTexts: chassisDeviceTable.setStatus('mandatory')
chassisSlotTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 20000, 12), )
if mibBuilder.loadTexts: chassisSlotTable.setStatus('optional')
chassisPortTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 20000, 13), )
if mibBuilder.loadTexts: chassisPortTable.setStatus('optional')
chassisPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 20000, 14), )
if mibBuilder.loadTexts: chassisPowerSupplyTable.setStatus('optional')
compEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 20000, 10, 1), ).setIndexNames((0, "PANDATEL-CHASSIS-MIB", "compComp"))
if mibBuilder.loadTexts: compEntry.setStatus('mandatory')
compComp = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("main", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compComp.setStatus('mandatory')
compDesign = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("rack", 2), ("device", 3), ("stack", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compDesign.setStatus('mandatory')
compTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 10, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compTypeID.setStatus('mandatory')
compSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compSlots.setStatus('mandatory')
compModules = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compModules.setStatus('mandatory')
devcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 20000, 11, 1), ).setIndexNames((0, "PANDATEL-CHASSIS-MIB", "devcComp"), (0, "PANDATEL-CHASSIS-MIB", "devcSlot"))
if mibBuilder.loadTexts: devcEntry.setStatus('mandatory')
devcComp = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("main", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devcComp.setStatus('mandatory')
devcSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("main", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devcSlot.setStatus('mandatory')
devcTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 11, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devcTypeID.setStatus('mandatory')
devcMgmtAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 11, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devcMgmtAddress.setStatus('mandatory')
devcDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devcDescr.setStatus('mandatory')
devcModules = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devcModules.setStatus('mandatory')
devcPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devcPorts.setStatus('mandatory')
devcLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 11, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devcLastChange.setStatus('mandatory')
slotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 20000, 12, 1), ).setIndexNames((0, "PANDATEL-CHASSIS-MIB", "slotComp"), (0, "PANDATEL-CHASSIS-MIB", "slotSlot"))
if mibBuilder.loadTexts: slotEntry.setStatus('mandatory')
slotComp = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("main", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotComp.setStatus('mandatory')
slotSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("main", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotSlot.setStatus('mandatory')
slotOwnerDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 12, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotOwnerDeviceID.setStatus('mandatory')
slotSlotTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 12, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotSlotTypeID.setStatus('mandatory')
slotModuleTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 12, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotModuleTypeID.setStatus('mandatory')
slotModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 12, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotModuleName.setStatus('mandatory')
slotPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotPorts.setStatus('mandatory')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 20000, 13, 1), ).setIndexNames((0, "PANDATEL-CHASSIS-MIB", "portComp"), (0, "PANDATEL-CHASSIS-MIB", "portSlot"), (0, "PANDATEL-CHASSIS-MIB", "portPort"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
portComp = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portComp.setStatus('mandatory')
portSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("main", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSlot.setStatus('mandatory')
portPort = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPort.setStatus('mandatory')
portOwnerDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 13, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOwnerDeviceID.setStatus('mandatory')
portFunctionalTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 13, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFunctionalTypeID.setStatus('mandatory')
portPhysicalType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 997, 998, 999))).clone(namedValues=NamedValues(("other", 1), ("single-fiber", 2), ("dual-fiber", 3), ("bnc", 4), ("dpc", 5), ("rj45", 7), ("ics", 8), ("mic", 9), ("db-9-f", 10), ("db-9-m", 11), ("db-15-f", 12), ("db-15-m", 13), ("db-25-f", 14), ("db-25-m", 15), ("db-37-f", 16), ("db-37-m", 17), ("winch-f", 18), ("winch-m", 19), ("mini-c", 20), ("minimicro", 21), ("escon", 22), ("e2000", 23), ("single-sc", 24), ("single-fc", 25), ("single-st", 26), ("dual-sc", 27), ("dual-fc", 28), ("dual-st", 29), ("single-sc-apc", 30), ("single-fc-apc", 31), ("dual-sc-apc", 32), ("dual-fc-apc", 33), ("single-lc", 34), ("single-lc-apc", 35), ("dual-lc", 36), ("dual-lc-apc", 37), ("mt-rj", 38), ("single-sc-45", 39), ("dual-sc-45", 40), ("unknown", 997), ("virtual", 998), ("not-installed", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPhysicalType.setStatus('mandatory')
psupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 20000, 14, 1), ).setIndexNames((0, "PANDATEL-CHASSIS-MIB", "psupplyRack"), (0, "PANDATEL-CHASSIS-MIB", "psupplySlot"), (0, "PANDATEL-CHASSIS-MIB", "psupplyIndex"))
if mibBuilder.loadTexts: psupplyEntry.setStatus('mandatory')
psupplyRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psupplyRack.setStatus('mandatory')
psupplySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("main", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psupplySlot.setStatus('mandatory')
psupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psupplyIndex.setStatus('mandatory')
psupplyTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 14, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psupplyTypeID.setStatus('mandatory')
psupplyDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 14, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psupplyDescr.setStatus('mandatory')
psupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 20000, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 98, 99))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3), ("fail", 4), ("unknown", 98), ("not-present", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psupplyStatus.setStatus('mandatory')
componentAdded = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 20000) + (0,1)).setObjects(("PANDATEL-CHASSIS-MIB", "compTypeID"))
componentRemoved = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 20000) + (0,2)).setObjects(("PANDATEL-CHASSIS-MIB", "compTypeID"))
moduleAdded = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 20000) + (0,3)).setObjects(("PANDATEL-CHASSIS-MIB", "slotModuleTypeID"))
moduleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 20000) + (0,4)).setObjects(("PANDATEL-CHASSIS-MIB", "slotModuleTypeID"))
powerSupplyAdded = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 20000) + (0,21)).setObjects(("PANDATEL-CHASSIS-MIB", "psupplyTypeID"))
powerSupplyRemoved = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 20000) + (0,22)).setObjects(("PANDATEL-CHASSIS-MIB", "psupplyTypeID"))
powerSupplyFailed = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 20000) + (0,23)).setObjects(("PANDATEL-CHASSIS-MIB", "psupplyTypeID"))
powerSupplyRecovered = NotificationType((1, 3, 6, 1, 4, 1, 760, 1, 20000) + (0,24)).setObjects(("PANDATEL-CHASSIS-MIB", "psupplyTypeID"))
mibBuilder.exportSymbols("PANDATEL-CHASSIS-MIB", componentRemoved=componentRemoved, chassis=chassis, devcPorts=devcPorts, chassisSlots=chassisSlots, devcEntry=devcEntry, portEntry=portEntry, psupplyStatus=psupplyStatus, slotComp=slotComp, portPort=portPort, compEntry=compEntry, powerSupplyAdded=powerSupplyAdded, slotSlot=slotSlot, devcMgmtAddress=devcMgmtAddress, compDesign=compDesign, psupplyDescr=psupplyDescr, powerSupplyRemoved=powerSupplyRemoved, chassisComponents=chassisComponents, mibs=mibs, moduleRemoved=moduleRemoved, devcComp=devcComp, slotEntry=slotEntry, compTypeID=compTypeID, portOwnerDeviceID=portOwnerDeviceID, devcModules=devcModules, devcDescr=devcDescr, powerSupplyRecovered=powerSupplyRecovered, portComp=portComp, chassisTypeID=chassisTypeID, powerSupplyFailed=powerSupplyFailed, chassisPowerSupplyTable=chassisPowerSupplyTable, slotOwnerDeviceID=slotOwnerDeviceID, slotPorts=slotPorts, psupplySlot=psupplySlot, devcSlot=devcSlot, portPhysicalType=portPhysicalType, psupplyTypeID=psupplyTypeID, devcTypeID=devcTypeID, psupplyIndex=psupplyIndex, pandatel=pandatel, psupplyEntry=psupplyEntry, chassisModules=chassisModules, psupplyRack=psupplyRack, compComp=compComp, portSlot=portSlot, componentAdded=componentAdded, compModules=compModules, slotModuleTypeID=slotModuleTypeID, chassisPorts=chassisPorts, portFunctionalTypeID=portFunctionalTypeID, chassisDevices=chassisDevices, devcLastChange=devcLastChange, compSlots=compSlots, slotSlotTypeID=slotSlotTypeID, chassisComponentTable=chassisComponentTable, moduleAdded=moduleAdded, chassisDeviceTable=chassisDeviceTable, slotModuleName=slotModuleName, chassisSlotTable=chassisSlotTable, chassisPortTable=chassisPortTable)
