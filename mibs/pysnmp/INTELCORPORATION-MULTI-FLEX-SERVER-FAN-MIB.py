#
# PySNMP MIB module INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:43:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
chassis, = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-MIB", "chassis")
regModule, groups = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "regModule", "groups")
Index, INT32withException, IdromBinary16, FaultLedStates, Power, PowerLedStates, PresenceLedStates, Presence = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-TC", "Index", "INT32withException", "IdromBinary16", "FaultLedStates", "Power", "PowerLedStates", "PresenceLedStates", "Presence")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter64, ModuleIdentity, Bits, Gauge32, MibIdentifier, TimeTicks, Unsigned32, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "Bits", "Gauge32", "MibIdentifier", "TimeTicks", "Unsigned32", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "Counter32", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
multiFlexServerFanMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 1, 16))
multiFlexServerFanMibModule.setRevisions(('2007-08-16 13:00', '2007-06-19 00:30', '2007-06-07 20:30', '2007-06-07 13:30', '2007-05-30 19:00', '2007-05-21 17:00', '2007-04-25 17:00', '2007-04-24 16:30', '2007-04-18 19:05', '2007-04-09 10:30', '2007-04-02 10:30', '2007-03-14 17:00', '2007-03-13 15:00', '2007-03-06 10:30', '2007-02-22 17:00', '2006-11-07 11:30', '2006-10-02 06:29',))
if mibBuilder.loadTexts: multiFlexServerFanMibModule.setLastUpdated('200708161300Z')
if mibBuilder.loadTexts: multiFlexServerFanMibModule.setOrganization('Intel Corporation')
maxFanFrus = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxFanFrus.setStatus('current')
numOfFanFrus = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfFanFrus.setStatus('current')
fanFruPresenceMask = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruPresenceMask.setStatus('current')
fans = ObjectIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206))
if mibBuilder.loadTexts: fans.setStatus('current')
fanFruTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1), )
if mibBuilder.loadTexts: fanFruTable.setStatus('current')
fanFruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruIndex"))
if mibBuilder.loadTexts: fanFruEntry.setStatus('current')
fanFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruIndex.setStatus('current')
fanFruPresence = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 2), Presence()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruPresence.setStatus('current')
fanFruVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruVendor.setStatus('current')
fanFruMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruMfgDate.setStatus('current')
fanFruDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruDeviceName.setStatus('current')
fanFruPart = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 6), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruPart.setStatus('current')
fanFruSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 7), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruSerialNo.setStatus('current')
fanFruMaximumPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 8), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruMaximumPower.setStatus('current')
fanFruNominalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 9), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruNominalPower.setStatus('current')
fanFruAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 10), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruAssetTag.setStatus('current')
fanFruPowerLed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 11), PowerLedStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruPowerLed.setStatus('current')
fanFruFaultLed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 12), FaultLedStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruFaultLed.setStatus('current')
fanFruOpCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruOpCodeVersion.setStatus('current')
fanFruBootBlockVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruBootBlockVersion.setStatus('current')
fanFruNumOfFans = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 15), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruNumOfFans.setStatus('current')
fanFruInletTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 1, 1, 16), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFruInletTemperature.setStatus('current')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 2), )
if mibBuilder.loadTexts: fanTable.setStatus('current')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 2, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruIndex"), (0, "INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanIndex"))
if mibBuilder.loadTexts: fanEntry.setStatus('current')
fanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 2, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanIndex.setStatus('current')
fanRpmMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-2, -1))).clone(namedValues=NamedValues(("notApplicable", -2), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanRpmMinimum.setStatus('current')
fanRpmMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-2, -1))).clone(namedValues=NamedValues(("notApplicable", -2), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanRpmMaximum.setStatus('current')
fanRpmReading = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 206, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-2, -1, 0))).clone(namedValues=NamedValues(("notApplicable", -2), ("unknown", -1), ("notspinning", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanRpmReading.setStatus('current')
fanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 2, 2, 16)).setObjects(("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "maxFanFrus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "numOfFanFrus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruPresenceMask"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruIndex"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruVendor"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruMfgDate"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruDeviceName"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruPart"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruSerialNo"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruMaximumPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruNominalPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruAssetTag"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruPowerLed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruFaultLed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruOpCodeVersion"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruBootBlockVersion"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruPresence"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruNumOfFans"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanFruInletTemperature"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanIndex"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanRpmMinimum"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanRpmMaximum"), ("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", "fanRpmReading"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fanGroup = fanGroup.setStatus('current')
mibBuilder.exportSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-FAN-MIB", fans=fans, fanFruFaultLed=fanFruFaultLed, fanFruTable=fanFruTable, fanFruVendor=fanFruVendor, multiFlexServerFanMibModule=multiFlexServerFanMibModule, fanRpmMaximum=fanRpmMaximum, fanFruMfgDate=fanFruMfgDate, fanFruPart=fanFruPart, fanEntry=fanEntry, fanFruInletTemperature=fanFruInletTemperature, fanFruSerialNo=fanFruSerialNo, fanFruMaximumPower=fanFruMaximumPower, fanRpmMinimum=fanRpmMinimum, fanIndex=fanIndex, fanFruEntry=fanFruEntry, fanFruPowerLed=fanFruPowerLed, fanFruOpCodeVersion=fanFruOpCodeVersion, fanFruNumOfFans=fanFruNumOfFans, fanFruPresence=fanFruPresence, maxFanFrus=maxFanFrus, PYSNMP_MODULE_ID=multiFlexServerFanMibModule, fanFruAssetTag=fanFruAssetTag, fanFruBootBlockVersion=fanFruBootBlockVersion, fanTable=fanTable, numOfFanFrus=numOfFanFrus, fanRpmReading=fanRpmReading, fanFruPresenceMask=fanFruPresenceMask, fanFruDeviceName=fanFruDeviceName, fanFruNominalPower=fanFruNominalPower, fanGroup=fanGroup, fanFruIndex=fanFruIndex)
