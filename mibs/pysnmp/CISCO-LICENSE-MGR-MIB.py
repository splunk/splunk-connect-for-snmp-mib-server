#
# PySNMP MIB module CISCO-LICENSE-MGR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LICENSE-MGR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:47:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, Unsigned32, Integer32, Bits, iso, TimeTicks, Counter32, IpAddress, ObjectIdentity, MibIdentifier, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "Unsigned32", "Integer32", "Bits", "iso", "TimeTicks", "Counter32", "IpAddress", "ObjectIdentity", "MibIdentifier", "NotificationType", "Gauge32")
DisplayString, TextualConvention, TruthValue, TestAndIncr, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "TestAndIncr", "DateAndTime")
ciscoLicenseMgrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 369))
ciscoLicenseMgrMIB.setRevisions(('2004-07-20 00:00', '2003-11-27 00:00', '2003-10-30 00:00', '2003-09-12 00:00',))
if mibBuilder.loadTexts: ciscoLicenseMgrMIB.setLastUpdated('200407200000Z')
if mibBuilder.loadTexts: ciscoLicenseMgrMIB.setOrganization('Cisco Systems Inc.')
ciscoLicenseMgrMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 369, 1))
ciscoLicenseMgrMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 369, 2))
ciscoLicenseMgrMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 369, 3))
ciscoLicenseMgrConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 1))
clmLicenseConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2))
clmLicenseInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3))
ciscoLicenseMgrNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 369, 3, 0))
clmHostId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmHostId.setStatus('current')
clmLicenseConfigSpinLock = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 1), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clmLicenseConfigSpinLock.setStatus('current')
clmLicenseFileURI = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clmLicenseFileURI.setStatus('current')
clmLicenseFileTargetName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clmLicenseFileTargetName.setStatus('current')
clmLicenseConfigCommand = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("install", 1), ("uninstall", 2), ("noOp", 3), ("update", 4))).clone('noOp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clmLicenseConfigCommand.setStatus('current')
clmLicenseConfigCommandStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("success", 1), ("inProgress", 2), ("corruptedLicenseFile", 3), ("targetLicenseFileAlreadyExist", 4), ("invalidLicenseFileName", 5), ("duplicateLicense", 6), ("licenseInUse", 7), ("generalLicensingFailure", 8), ("none", 9), ("licenseExpiryConflict", 10), ("invalidLicenseCount", 11), ("notThisHost", 12), ("licenseInGraceMore", 13), ("licenseFileNotFound", 14), ("licenseFileMissing", 15), ("invalidLicenseFileExtension", 16), ("invalidURI", 17), ("noDemoLicenseSupport", 18), ("invalidPlatform", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicenseConfigCommandStatus.setStatus('current')
clmLicenseRequestSpinLock = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 6), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clmLicenseRequestSpinLock.setStatus('current')
clmLicenseRequestFeatureName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clmLicenseRequestFeatureName.setStatus('current')
clmLicenseRequestAppName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clmLicenseRequestAppName.setStatus('current')
clmLicenseRequestCommand = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("checkIn", 1), ("checkOut", 2), ("noOp", 3))).clone('noOp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clmLicenseRequestCommand.setStatus('current')
clmLicenseRequestCommandStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("success", 1), ("none", 2), ("licenseDenied", 3), ("licenseTooMany", 4), ("generalLicensingFailure", 5), ("invalidFeature", 6), ("licenseExpired", 7), ("licenseServerDown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicenseRequestCommandStatus.setStatus('current')
clmNoOfLicenseFilesInstalled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmNoOfLicenseFilesInstalled.setStatus('current')
clmLicenseFileContentsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 2), )
if mibBuilder.loadTexts: clmLicenseFileContentsTable.setStatus('current')
clmLicenseFileContentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-LICENSE-MGR-MIB", "clmLicenseFileName"), (0, "CISCO-LICENSE-MGR-MIB", "clmLicenseFileRowNumber"))
if mibBuilder.loadTexts: clmLicenseFileContentsEntry.setStatus('current')
clmLicenseFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: clmLicenseFileName.setStatus('current')
clmLicenseFileRowNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: clmLicenseFileRowNumber.setStatus('current')
clmLicenseFileTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 2, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicenseFileTimeStamp.setStatus('current')
clmLicenseFileNoOfRows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicenseFileNoOfRows.setStatus('current')
clmLicenseFileRowContents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicenseFileRowContents.setStatus('current')
clmNoOfLicensedFeatures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmNoOfLicensedFeatures.setStatus('current')
clmLicenseFeatureUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 4), )
if mibBuilder.loadTexts: clmLicenseFeatureUsageTable.setStatus('current')
clmLicenseFeatureUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 4, 1), ).setIndexNames((0, "CISCO-LICENSE-MGR-MIB", "clmLicenseFeatureName"))
if mibBuilder.loadTexts: clmLicenseFeatureUsageEntry.setStatus('current')
clmLicenseFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 30)))
if mibBuilder.loadTexts: clmLicenseFeatureName.setStatus('current')
clmLicenseFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 4, 1, 2), Bits().clone(namedValues=NamedValues(("demo", 0), ("permanent", 1), ("counted", 2), ("unlicensed", 3), ("inGracePeriod", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicenseFlag.setStatus('current')
clmNoOfLicenseMaxUsages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmNoOfLicenseMaxUsages.setStatus('current')
clmNoOfMissingUsageLicenses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmNoOfMissingUsageLicenses.setStatus('current')
clmNoOfLicenseCurrentUsages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmNoOfLicenseCurrentUsages.setStatus('current')
clmLicenseExpiryDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 4, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicenseExpiryDate.setStatus('current')
clmLicenseGracePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5184000))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicenseGracePeriod.setStatus('current')
clmFeatureUsageDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 5), )
if mibBuilder.loadTexts: clmFeatureUsageDetailsTable.setStatus('current')
clmFeatureUsageDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 5, 1), ).setIndexNames((0, "CISCO-LICENSE-MGR-MIB", "clmLicenseFeatureName"), (0, "CISCO-LICENSE-MGR-MIB", "clmLicensedAppIndex"))
if mibBuilder.loadTexts: clmFeatureUsageDetailsEntry.setStatus('current')
clmLicensedAppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clmLicensedAppIndex.setStatus('current')
clmLicensedAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 5, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicensedAppName.setStatus('current')
clmLicenseViolationWarnFlag = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 3, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clmLicenseViolationWarnFlag.setStatus('current')
clmNotificationsEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 369, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clmNotificationsEnable.setStatus('current')
clmLicenseExpiryNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 369, 3, 0, 1)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseExpiryDate"))
if mibBuilder.loadTexts: clmLicenseExpiryNotify.setStatus('current')
clmNoLicenseForFeatureNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 369, 3, 0, 2)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseGracePeriod"))
if mibBuilder.loadTexts: clmNoLicenseForFeatureNotify.setStatus('current')
clmLicenseFileMissingNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 369, 3, 0, 3)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmNoOfMissingUsageLicenses"))
if mibBuilder.loadTexts: clmLicenseFileMissingNotify.setStatus('current')
clmLicenseExpiryWarningNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 369, 3, 0, 4)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseExpiryDate"))
if mibBuilder.loadTexts: clmLicenseExpiryWarningNotify.setStatus('current')
ciscoLicenseMgrCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 1))
ciscoLicenseMgrGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 2))
ciscoLicenseMgrCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 1, 1)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseInstallGroup"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfInstalledLicensesGroup"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseInformationGroup"), ("CISCO-LICENSE-MGR-MIB", "clmNotificationsEnableGroup"), ("CISCO-LICENSE-MGR-MIB", "clmNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLicenseMgrCompliance = ciscoLicenseMgrCompliance.setStatus('deprecated')
ciscoLicenseMgrCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 1, 2)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseInstallGroup"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseRequestGroup"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfInstalledLicensesGroup"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseInformationGroup1"), ("CISCO-LICENSE-MGR-MIB", "clmNotificationsEnableGroup"), ("CISCO-LICENSE-MGR-MIB", "clmNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLicenseMgrCompliance1 = ciscoLicenseMgrCompliance1.setStatus('deprecated')
ciscoLicenseMgrCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 1, 3)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseInstallGroup"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseRequestGroup"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfInstalledLicensesGroup"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseInformationGroup2"), ("CISCO-LICENSE-MGR-MIB", "clmNotificationsEnableGroup"), ("CISCO-LICENSE-MGR-MIB", "clmNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLicenseMgrCompliance2 = ciscoLicenseMgrCompliance2.setStatus('current')
clmLicenseInstallGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 2, 1)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmHostId"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseConfigSpinLock"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFileURI"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFileTargetName"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseConfigCommand"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseConfigCommandStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clmLicenseInstallGroup = clmLicenseInstallGroup.setStatus('current')
clmNoOfInstalledLicensesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 2, 2)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmNoOfLicenseFilesInstalled"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfLicensedFeatures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clmNoOfInstalledLicensesGroup = clmNoOfInstalledLicensesGroup.setStatus('current')
clmLicenseInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 2, 3)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseFileTimeStamp"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFileNoOfRows"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFileRowContents"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFlag"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfLicenseMaxUsages"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfMissingUsageLicenses"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfLicenseCurrentUsages"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseExpiryDate"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseGracePeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clmLicenseInformationGroup = clmLicenseInformationGroup.setStatus('deprecated')
clmNotificationsEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 2, 4)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmNotificationsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clmNotificationsEnableGroup = clmNotificationsEnableGroup.setStatus('current')
clmNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 2, 5)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseExpiryNotify"), ("CISCO-LICENSE-MGR-MIB", "clmNoLicenseForFeatureNotify"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFileMissingNotify"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseExpiryWarningNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clmNotificationGroup = clmNotificationGroup.setStatus('current')
clmLicenseRequestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 2, 6)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseRequestSpinLock"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseRequestFeatureName"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseRequestAppName"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseRequestCommand"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseRequestCommandStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clmLicenseRequestGroup = clmLicenseRequestGroup.setStatus('current')
clmLicenseInformationGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 2, 7)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseFileTimeStamp"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFileNoOfRows"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFileRowContents"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFlag"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfLicenseMaxUsages"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfMissingUsageLicenses"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfLicenseCurrentUsages"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseExpiryDate"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseGracePeriod"), ("CISCO-LICENSE-MGR-MIB", "clmLicensedAppName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clmLicenseInformationGroup1 = clmLicenseInformationGroup1.setStatus('deprecated')
clmLicenseInformationGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 369, 2, 2, 8)).setObjects(("CISCO-LICENSE-MGR-MIB", "clmLicenseFileTimeStamp"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFileNoOfRows"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFileRowContents"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseFlag"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfLicenseMaxUsages"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfMissingUsageLicenses"), ("CISCO-LICENSE-MGR-MIB", "clmNoOfLicenseCurrentUsages"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseExpiryDate"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseGracePeriod"), ("CISCO-LICENSE-MGR-MIB", "clmLicensedAppName"), ("CISCO-LICENSE-MGR-MIB", "clmLicenseViolationWarnFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clmLicenseInformationGroup2 = clmLicenseInformationGroup2.setStatus('current')
mibBuilder.exportSymbols("CISCO-LICENSE-MGR-MIB", ciscoLicenseMgrMIBNotifs=ciscoLicenseMgrMIBNotifs, PYSNMP_MODULE_ID=ciscoLicenseMgrMIB, clmLicenseFileTimeStamp=clmLicenseFileTimeStamp, clmLicenseExpiryDate=clmLicenseExpiryDate, clmNoOfMissingUsageLicenses=clmNoOfMissingUsageLicenses, ciscoLicenseMgrMIB=ciscoLicenseMgrMIB, clmLicenseFileTargetName=clmLicenseFileTargetName, clmLicenseRequestSpinLock=clmLicenseRequestSpinLock, clmLicensedAppName=clmLicensedAppName, clmLicenseFileMissingNotify=clmLicenseFileMissingNotify, clmLicenseGracePeriod=clmLicenseGracePeriod, clmLicenseRequestCommandStatus=clmLicenseRequestCommandStatus, clmFeatureUsageDetailsEntry=clmFeatureUsageDetailsEntry, clmLicenseExpiryWarningNotify=clmLicenseExpiryWarningNotify, clmLicenseConfiguration=clmLicenseConfiguration, clmNoOfLicenseFilesInstalled=clmNoOfLicenseFilesInstalled, clmLicenseFileName=clmLicenseFileName, clmLicenseExpiryNotify=clmLicenseExpiryNotify, clmLicenseConfigCommandStatus=clmLicenseConfigCommandStatus, clmLicenseConfigCommand=clmLicenseConfigCommand, clmLicenseRequestFeatureName=clmLicenseRequestFeatureName, ciscoLicenseMgrConfig=ciscoLicenseMgrConfig, clmLicenseFileNoOfRows=clmLicenseFileNoOfRows, clmNoOfLicensedFeatures=clmNoOfLicensedFeatures, clmLicenseInformationGroup2=clmLicenseInformationGroup2, clmLicenseFileURI=clmLicenseFileURI, clmLicenseInformationGroup=clmLicenseInformationGroup, clmLicenseRequestGroup=clmLicenseRequestGroup, clmLicenseFileContentsTable=clmLicenseFileContentsTable, clmNotificationGroup=clmNotificationGroup, ciscoLicenseMgrMIBObjects=ciscoLicenseMgrMIBObjects, clmNoOfLicenseCurrentUsages=clmNoOfLicenseCurrentUsages, ciscoLicenseMgrCompliance1=ciscoLicenseMgrCompliance1, clmLicenseFeatureName=clmLicenseFeatureName, ciscoLicenseMgrCompliance=ciscoLicenseMgrCompliance, clmLicenseInformationGroup1=clmLicenseInformationGroup1, ciscoLicenseMgrGroups=ciscoLicenseMgrGroups, clmLicenseFileContentsEntry=clmLicenseFileContentsEntry, clmLicenseFeatureUsageTable=clmLicenseFeatureUsageTable, clmLicenseFileRowContents=clmLicenseFileRowContents, clmLicenseInformation=clmLicenseInformation, clmLicenseFeatureUsageEntry=clmLicenseFeatureUsageEntry, clmLicenseRequestCommand=clmLicenseRequestCommand, clmNoOfLicenseMaxUsages=clmNoOfLicenseMaxUsages, clmHostId=clmHostId, clmNoOfInstalledLicensesGroup=clmNoOfInstalledLicensesGroup, clmLicenseConfigSpinLock=clmLicenseConfigSpinLock, clmLicenseRequestAppName=clmLicenseRequestAppName, clmLicenseFileRowNumber=clmLicenseFileRowNumber, clmLicenseFlag=clmLicenseFlag, clmLicenseViolationWarnFlag=clmLicenseViolationWarnFlag, clmFeatureUsageDetailsTable=clmFeatureUsageDetailsTable, ciscoLicenseMgrCompliances=ciscoLicenseMgrCompliances, ciscoLicenseMgrNotifications=ciscoLicenseMgrNotifications, ciscoLicenseMgrMIBConform=ciscoLicenseMgrMIBConform, ciscoLicenseMgrCompliance2=ciscoLicenseMgrCompliance2, clmLicenseInstallGroup=clmLicenseInstallGroup, clmNoLicenseForFeatureNotify=clmNoLicenseForFeatureNotify, clmNotificationsEnableGroup=clmNotificationsEnableGroup, clmLicensedAppIndex=clmLicensedAppIndex, clmNotificationsEnable=clmNotificationsEnable)
