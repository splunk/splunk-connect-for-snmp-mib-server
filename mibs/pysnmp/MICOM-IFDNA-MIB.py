#
# PySNMP MIB module MICOM-IFDNA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-IFDNA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:02:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, NotificationType, iso, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, Unsigned32, TimeTicks, Integer32, MibIdentifier, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "iso", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "Unsigned32", "TimeTicks", "Integer32", "MibIdentifier", "Gauge32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
micom_ifdna = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 18)).setLabel("micom-ifdna")
ifDna = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 1))
ifNvDna = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 2))
mcmIfDnaTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 1, 1), )
if mibBuilder.loadTexts: mcmIfDnaTable.setStatus('mandatory')
mcmIfDnaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 1, 1, 1), ).setIndexNames((0, "MICOM-IFDNA-MIB", "mcmIfDnaIfIndex"), (0, "MICOM-IFDNA-MIB", "mcmIfDnaType"))
if mibBuilder.loadTexts: mcmIfDnaEntry.setStatus('mandatory')
mcmIfDnaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIfDnaIfIndex.setStatus('mandatory')
mcmIfDnaType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("provisioned", 1), ("learnt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIfDnaType.setStatus('mandatory')
mcmIfDNADigits = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmIfDNADigits.setStatus('mandatory')
mcmIfDnaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("active", 2), ("invalid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmIfDnaStatus.setStatus('mandatory')
nvmIfDnaTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 2, 1), )
if mibBuilder.loadTexts: nvmIfDnaTable.setStatus('mandatory')
nvmIfDnaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 2, 1, 1), ).setIndexNames((0, "MICOM-IFDNA-MIB", "nvmIfDnaIfIndex"), (0, "MICOM-IFDNA-MIB", "nvmIfDnaType"))
if mibBuilder.loadTexts: nvmIfDnaEntry.setStatus('mandatory')
nvmIfDnaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmIfDnaIfIndex.setStatus('mandatory')
nvmIfDnaType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("provisioned", 1), ("learnt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmIfDnaType.setStatus('mandatory')
nvmIfDNADigits = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmIfDNADigits.setStatus('mandatory')
nvmIfDnaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 18, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("active", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmIfDnaStatus.setStatus('mandatory')
mibBuilder.exportSymbols("MICOM-IFDNA-MIB", nvmIfDnaStatus=nvmIfDnaStatus, mcmIfDnaType=mcmIfDnaType, mcmIfDnaTable=mcmIfDnaTable, mcmIfDnaEntry=mcmIfDnaEntry, micom_ifdna=micom_ifdna, mcmIfDnaIfIndex=mcmIfDnaIfIndex, ifNvDna=ifNvDna, mcmIfDnaStatus=mcmIfDnaStatus, nvmIfDnaTable=nvmIfDnaTable, nvmIfDnaEntry=nvmIfDnaEntry, ifDna=ifDna, nvmIfDnaType=nvmIfDnaType, nvmIfDNADigits=nvmIfDNADigits, mcmIfDNADigits=mcmIfDNADigits, nvmIfDnaIfIndex=nvmIfDnaIfIndex)
