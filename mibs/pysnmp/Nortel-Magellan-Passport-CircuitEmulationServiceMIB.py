#
# PySNMP MIB module Nortel-Magellan-Passport-CircuitEmulationServiceMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-CircuitEmulationServiceMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:17:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
PassportCounter64, Counter32, Integer32, DisplayString, StorageType, RowStatus, Gauge32, Unsigned32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "PassportCounter64", "Counter32", "Integer32", "DisplayString", "StorageType", "RowStatus", "Gauge32", "Unsigned32")
Hex, NonReplicated, AsciiString, EnterpriseDateAndTime, Link = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "Hex", "NonReplicated", "AsciiString", "EnterpriseDateAndTime", "Link")
components, passportMIBs = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "components", "passportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, IpAddress, Integer32, iso, Counter32, NotificationType, Counter64, ModuleIdentity, MibIdentifier, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "Integer32", "iso", "Counter32", "NotificationType", "Counter64", "ModuleIdentity", "MibIdentifier", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
circuitEmulationServiceMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 55))
aal1Ces = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119))
aal1CesRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 1), )
if mibBuilder.loadTexts: aal1CesRowStatusTable.setStatus('mandatory')
aal1CesRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"))
if mibBuilder.loadTexts: aal1CesRowStatusEntry.setStatus('mandatory')
aal1CesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesRowStatus.setStatus('mandatory')
aal1CesComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesComponentName.setStatus('mandatory')
aal1CesStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesStorageType.setStatus('mandatory')
aal1CesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: aal1CesIndex.setStatus('mandatory')
aal1CesCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 10), )
if mibBuilder.loadTexts: aal1CesCidDataTable.setStatus('mandatory')
aal1CesCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"))
if mibBuilder.loadTexts: aal1CesCidDataEntry.setStatus('mandatory')
aal1CesCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesCustomerIdentifier.setStatus('mandatory')
aal1CesProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11), )
if mibBuilder.loadTexts: aal1CesProvTable.setStatus('mandatory')
aal1CesProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"))
if mibBuilder.loadTexts: aal1CesProvEntry.setStatus('mandatory')
aal1CesServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unstructured", 0), ("basicStructured", 1), ("casStructured", 2))).clone('unstructured')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesServiceType.setStatus('mandatory')
aal1CesBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(94, 15651)).clone(282)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesBufferSize.setStatus('mandatory')
aal1CesCellDelayVariationTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 655)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesCellDelayVariationTolerance.setStatus('mandatory')
aal1CesCellLossIntegrationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 60000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesCellLossIntegrationPeriod.setStatus('mandatory')
aal1CesInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 5), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesInterfaceName.setStatus('mandatory')
aal1CesPartialFill = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(8, 47)).clone(47)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesPartialFill.setStatus('mandatory')
aal1CesIdleSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesIdleSuppression.setStatus('mandatory')
aal1CesIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 8), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(126)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesIdlePattern.setStatus('mandatory')
aal1CesCellLossRecoveryPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesCellLossRecoveryPeriod.setStatus('mandatory')
aal1CesDummyDataByte = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 11, 1, 10), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesDummyDataByte.setStatus('mandatory')
aal1CesStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12), )
if mibBuilder.loadTexts: aal1CesStateTable.setStatus('mandatory')
aal1CesStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"))
if mibBuilder.loadTexts: aal1CesStateEntry.setStatus('mandatory')
aal1CesAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAdminState.setStatus('mandatory')
aal1CesOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesOperationalState.setStatus('mandatory')
aal1CesUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesUsageState.setStatus('mandatory')
aal1CesAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAvailabilityStatus.setStatus('mandatory')
aal1CesProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesProceduralStatus.setStatus('mandatory')
aal1CesControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesControlStatus.setStatus('mandatory')
aal1CesAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAlarmStatus.setStatus('mandatory')
aal1CesStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesStandbyStatus.setStatus('mandatory')
aal1CesUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesUnknownStatus.setStatus('mandatory')
aal1CesOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 13), )
if mibBuilder.loadTexts: aal1CesOperTable.setStatus('mandatory')
aal1CesOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"))
if mibBuilder.loadTexts: aal1CesOperEntry.setStatus('mandatory')
aal1CesCellLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noLoss", 0), ("loss", 1))).clone('noLoss')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesCellLossStatus.setStatus('mandatory')
aal1CesAal1LayerLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noLoss", 0), ("loss", 1))).clone('noLoss')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAal1LayerLossStatus.setStatus('mandatory')
aal1CesConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("connected", 0), ("channelNotReady", 1), ("atmNotReady", 2), ("atmNotConfigured", 3))).clone('channelNotReady')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesConnectionStatus.setStatus('mandatory')
aal1CesStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14), )
if mibBuilder.loadTexts: aal1CesStatsTable.setStatus('mandatory')
aal1CesStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"))
if mibBuilder.loadTexts: aal1CesStatsEntry.setStatus('mandatory')
aal1CesCellsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesCellsTransmitted.setStatus('mandatory')
aal1CesCellsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesCellsReceived.setStatus('mandatory')
aal1CesLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLostCells.setStatus('mandatory')
aal1CesBufferUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesBufferUnderflows.setStatus('mandatory')
aal1CesBufferOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesBufferOverflows.setStatus('mandatory')
aal1CesReassembledCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesReassembledCells.setStatus('mandatory')
aal1CesHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesHeaderErrors.setStatus('mandatory')
aal1CesPointerReframes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesPointerReframes.setStatus('mandatory')
aal1CesPointerParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesPointerParityErrors.setStatus('mandatory')
aal1CesAal1SequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAal1SequenceErrors.setStatus('mandatory')
aal1CesMisinsertedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesMisinsertedCells.setStatus('mandatory')
aal1CesNap = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2))
aal1CesNapRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2, 1), )
if mibBuilder.loadTexts: aal1CesNapRowStatusTable.setStatus('mandatory')
aal1CesNapRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesNapIndex"))
if mibBuilder.loadTexts: aal1CesNapRowStatusEntry.setStatus('mandatory')
aal1CesNapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesNapRowStatus.setStatus('mandatory')
aal1CesNapComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesNapComponentName.setStatus('mandatory')
aal1CesNapStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesNapStorageType.setStatus('mandatory')
aal1CesNapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: aal1CesNapIndex.setStatus('mandatory')
aal1CesNapProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2, 10), )
if mibBuilder.loadTexts: aal1CesNapProvTable.setStatus('mandatory')
aal1CesNapProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesNapIndex"))
if mibBuilder.loadTexts: aal1CesNapProvEntry.setStatus('mandatory')
aal1CesNapAtmConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesNapAtmConnection.setStatus('mandatory')
aal1CesAep = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3))
aal1CesAepRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 1), )
if mibBuilder.loadTexts: aal1CesAepRowStatusTable.setStatus('mandatory')
aal1CesAepRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesAepIndex"))
if mibBuilder.loadTexts: aal1CesAepRowStatusEntry.setStatus('mandatory')
aal1CesAepRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesAepRowStatus.setStatus('mandatory')
aal1CesAepComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepComponentName.setStatus('mandatory')
aal1CesAepStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepStorageType.setStatus('mandatory')
aal1CesAepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: aal1CesAepIndex.setStatus('mandatory')
aal1CesAepProvEndPointAddrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 10), )
if mibBuilder.loadTexts: aal1CesAepProvEndPointAddrTable.setStatus('mandatory')
aal1CesAepProvEndPointAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesAepIndex"))
if mibBuilder.loadTexts: aal1CesAepProvEndPointAddrEntry.setStatus('mandatory')
aal1CesAepExpectedRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesAepExpectedRemoteAddress.setStatus('mandatory')
aal1CesAepLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesAepLocalAddress.setStatus('mandatory')
aal1CesAepProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 11), )
if mibBuilder.loadTexts: aal1CesAepProvTable.setStatus('mandatory')
aal1CesAepProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesAepIndex"))
if mibBuilder.loadTexts: aal1CesAepProvEntry.setStatus('mandatory')
aal1CesAepAddressToCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesAepAddressToCall.setStatus('mandatory')
aal1CesAepRoutingOption = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("porsOnly", 0))).clone('porsOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesAepRoutingOption.setStatus('mandatory')
aal1CesAepProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 11, 1, 3), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesAepProfile.setStatus('mandatory')
aal1CesAepFirstRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesAepFirstRetryInterval.setStatus('mandatory')
aal1CesAepRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesAepRetryLimit.setStatus('mandatory')
aal1CesAepEpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 12), )
if mibBuilder.loadTexts: aal1CesAepEpOperTable.setStatus('mandatory')
aal1CesAepEpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesAepIndex"))
if mibBuilder.loadTexts: aal1CesAepEpOperEntry.setStatus('mandatory')
aal1CesAepRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(7, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepRemoteAddress.setStatus('mandatory')
aal1CesAepLastTearDownCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepLastTearDownCause.setStatus('mandatory')
aal1CesAepLastTearDownDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 12, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepLastTearDownDiagnostic.setStatus('mandatory')
aal1CesAepOutTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 13), )
if mibBuilder.loadTexts: aal1CesAepOutTable.setStatus('mandatory')
aal1CesAepOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesAepIndex"))
if mibBuilder.loadTexts: aal1CesAepOutEntry.setStatus('mandatory')
aal1CesAepSvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("initialising", 0), ("connecting", 1), ("connected", 2), ("idle", 3), ("retriesExhausted", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepSvcStatus.setStatus('mandatory')
aal1CesAepLastSetupFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepLastSetupFailureCause.setStatus('mandatory')
aal1CesAepLastSetupFailureDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 13, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepLastSetupFailureDiagnostic.setStatus('mandatory')
aal1CesAepRetryTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepRetryTimeRemaining.setStatus('mandatory')
aal1CesAepRetryFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 3, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesAepRetryFailures.setStatus('mandatory')
aal1CesPep = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4))
aal1CesPepRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 1), )
if mibBuilder.loadTexts: aal1CesPepRowStatusTable.setStatus('mandatory')
aal1CesPepRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesPepIndex"))
if mibBuilder.loadTexts: aal1CesPepRowStatusEntry.setStatus('mandatory')
aal1CesPepRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesPepRowStatus.setStatus('mandatory')
aal1CesPepComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesPepComponentName.setStatus('mandatory')
aal1CesPepStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesPepStorageType.setStatus('mandatory')
aal1CesPepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: aal1CesPepIndex.setStatus('mandatory')
aal1CesPepProvEndPointAddrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 10), )
if mibBuilder.loadTexts: aal1CesPepProvEndPointAddrTable.setStatus('mandatory')
aal1CesPepProvEndPointAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesPepIndex"))
if mibBuilder.loadTexts: aal1CesPepProvEndPointAddrEntry.setStatus('mandatory')
aal1CesPepExpectedRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesPepExpectedRemoteAddress.setStatus('mandatory')
aal1CesPepLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesPepLocalAddress.setStatus('mandatory')
aal1CesPepEpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 11), )
if mibBuilder.loadTexts: aal1CesPepEpOperTable.setStatus('mandatory')
aal1CesPepEpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesPepIndex"))
if mibBuilder.loadTexts: aal1CesPepEpOperEntry.setStatus('mandatory')
aal1CesPepRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(7, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesPepRemoteAddress.setStatus('mandatory')
aal1CesPepLastTearDownCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesPepLastTearDownCause.setStatus('mandatory')
aal1CesPepLastTearDownDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 11, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesPepLastTearDownDiagnostic.setStatus('mandatory')
aal1CesPepPassiveOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 12), )
if mibBuilder.loadTexts: aal1CesPepPassiveOperTable.setStatus('mandatory')
aal1CesPepPassiveOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesPepIndex"))
if mibBuilder.loadTexts: aal1CesPepPassiveOperEntry.setStatus('mandatory')
aal1CesPepSvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5))).clone(namedValues=NamedValues(("initialising", 0), ("connecting", 1), ("connected", 2), ("idle", 3), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesPepSvcStatus.setStatus('mandatory')
aal1CesLCo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5))
aal1CesLCoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 1), )
if mibBuilder.loadTexts: aal1CesLCoRowStatusTable.setStatus('mandatory')
aal1CesLCoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesLCoIndex"))
if mibBuilder.loadTexts: aal1CesLCoRowStatusEntry.setStatus('mandatory')
aal1CesLCoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoRowStatus.setStatus('mandatory')
aal1CesLCoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoComponentName.setStatus('mandatory')
aal1CesLCoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoStorageType.setStatus('mandatory')
aal1CesLCoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: aal1CesLCoIndex.setStatus('mandatory')
aal1CesLCoPathDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10), )
if mibBuilder.loadTexts: aal1CesLCoPathDataTable.setStatus('mandatory')
aal1CesLCoPathDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesLCoIndex"))
if mibBuilder.loadTexts: aal1CesLCoPathDataEntry.setStatus('mandatory')
aal1CesLCoState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("pathDown", 0), ("selectingRoute", 1), ("connecting", 2), ("pathUp", 3), ("pathDownRetrying", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoState.setStatus('mandatory')
aal1CesLCoOverrideRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal1CesLCoOverrideRemoteName.setStatus('mandatory')
aal1CesLCoEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("calling", 0), ("called", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoEnd.setStatus('mandatory')
aal1CesLCoCostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoCostMetric.setStatus('mandatory')
aal1CesLCoDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoDelayMetric.setStatus('mandatory')
aal1CesLCoRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoRoundTripDelay.setStatus('mandatory')
aal1CesLCoSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoSetupPriority.setStatus('mandatory')
aal1CesLCoHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoHoldingPriority.setStatus('mandatory')
aal1CesLCoRequiredTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoRequiredTxBandwidth.setStatus('mandatory')
aal1CesLCoRequiredRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoRequiredRxBandwidth.setStatus('mandatory')
aal1CesLCoRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoRequiredTrafficType.setStatus('mandatory')
aal1CesLCoPermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoPermittedTrunkTypes.setStatus('mandatory')
aal1CesLCoRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoRequiredSecurity.setStatus('mandatory')
aal1CesLCoRequiredCustomerParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoRequiredCustomerParameter.setStatus('mandatory')
aal1CesLCoEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoEmissionPriority.setStatus('mandatory')
aal1CesLCoDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoDiscardPriority.setStatus('mandatory')
aal1CesLCoPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("manual", 1), ("forced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoPathType.setStatus('mandatory')
aal1CesLCoRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoRetryCount.setStatus('mandatory')
aal1CesLCoPathFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoPathFailureCount.setStatus('mandatory')
aal1CesLCoReasonForNoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("destinationNameTooLong", 1), ("destinationNotSpecified", 2), ("unknownDestinationName", 3), ("incorrectDestination", 4), ("incorrectDestinationEndPoint", 5), ("unknownSource", 6), ("unknownDestination", 7), ("sameNode", 8), ("routeCostTooMuch", 9), ("routesDelayTooLong", 10), ("attributesNotMet", 11), ("anError", 12), ("attributeProfileProblem", 13), ("manualPathIndexProblem", 14))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoReasonForNoRoute.setStatus('mandatory')
aal1CesLCoLastTearDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("none", 0), ("normalShutDown", 1), ("insufficientTxLcOrBandwidth", 2), ("insufficientRxLcOrBandwidth", 3), ("trunkFailure", 4), ("trunkCardFailure", 5), ("operatorForced", 6), ("lostLcnClash", 7), ("networkCongestion", 8), ("trunkNotFound", 9), ("farEndNotFound", 10), ("wrongModuleReached", 11), ("farEndBusy", 12), ("callLoopedBack", 13), ("unknownReason", 14), ("farEndNotReady", 15), ("remoteNameMismatch", 16), ("serviceTypeMismatch", 17), ("reconnectFromFarEnd", 18), ("bumped", 19), ("accessCardFailure", 20), ("optimized", 21), ("overrideRemoteName", 22), ("trunkOrFarEndDidNotSupportMode", 23))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoLastTearDownReason.setStatus('mandatory')
aal1CesLCoPathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoPathFailureAction.setStatus('mandatory')
aal1CesLCoBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoBumpPreference.setStatus('mandatory')
aal1CesLCoOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoOptimization.setStatus('mandatory')
aal1CesLCoPathUpDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 10, 1, 25), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoPathUpDateTime.setStatus('mandatory')
aal1CesLCoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 11), )
if mibBuilder.loadTexts: aal1CesLCoStatsTable.setStatus('mandatory')
aal1CesLCoStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesLCoIndex"))
if mibBuilder.loadTexts: aal1CesLCoStatsEntry.setStatus('mandatory')
aal1CesLCoPktsToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 11, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoPktsToNetwork.setStatus('mandatory')
aal1CesLCoBytesToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 11, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoBytesToNetwork.setStatus('mandatory')
aal1CesLCoPktsFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 11, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoPktsFromNetwork.setStatus('mandatory')
aal1CesLCoBytesFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoBytesFromNetwork.setStatus('mandatory')
aal1CesLCoPathTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 264), )
if mibBuilder.loadTexts: aal1CesLCoPathTable.setStatus('mandatory')
aal1CesLCoPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 264, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesLCoIndex"), (0, "Nortel-Magellan-Passport-CircuitEmulationServiceMIB", "aal1CesLCoPathValue"))
if mibBuilder.loadTexts: aal1CesLCoPathEntry.setStatus('mandatory')
aal1CesLCoPathValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 119, 5, 264, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal1CesLCoPathValue.setStatus('mandatory')
circuitEmulationServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 55, 1))
circuitEmulationServiceGroupBD = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 55, 1, 4))
circuitEmulationServiceGroupBD00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 55, 1, 4, 1))
circuitEmulationServiceGroupBD00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 55, 1, 4, 1, 2))
circuitEmulationServiceCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 55, 3))
circuitEmulationServiceCapabilitiesBD = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 55, 3, 4))
circuitEmulationServiceCapabilitiesBD00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 55, 3, 4, 1))
circuitEmulationServiceCapabilitiesBD00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 55, 3, 4, 1, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-CircuitEmulationServiceMIB", aal1CesLCoRequiredTxBandwidth=aal1CesLCoRequiredTxBandwidth, aal1CesPepRowStatusEntry=aal1CesPepRowStatusEntry, aal1CesNapAtmConnection=aal1CesNapAtmConnection, circuitEmulationServiceMIB=circuitEmulationServiceMIB, aal1CesLCo=aal1CesLCo, aal1CesAep=aal1CesAep, aal1CesLCoLastTearDownReason=aal1CesLCoLastTearDownReason, aal1CesAepLocalAddress=aal1CesAepLocalAddress, aal1CesPointerParityErrors=aal1CesPointerParityErrors, aal1CesAepProfile=aal1CesAepProfile, aal1CesLCoBumpPreference=aal1CesLCoBumpPreference, aal1CesPepStorageType=aal1CesPepStorageType, aal1CesAepProvEntry=aal1CesAepProvEntry, aal1CesAepOutTable=aal1CesAepOutTable, aal1CesRowStatusTable=aal1CesRowStatusTable, aal1CesAepFirstRetryInterval=aal1CesAepFirstRetryInterval, aal1CesReassembledCells=aal1CesReassembledCells, aal1CesAepRetryTimeRemaining=aal1CesAepRetryTimeRemaining, aal1CesAepRemoteAddress=aal1CesAepRemoteAddress, aal1CesLCoRowStatusTable=aal1CesLCoRowStatusTable, aal1CesLCoStatsEntry=aal1CesLCoStatsEntry, aal1CesPepLocalAddress=aal1CesPepLocalAddress, aal1CesCellDelayVariationTolerance=aal1CesCellDelayVariationTolerance, aal1CesAepLastTearDownCause=aal1CesAepLastTearDownCause, aal1CesAepIndex=aal1CesAepIndex, aal1CesAepProvEndPointAddrTable=aal1CesAepProvEndPointAddrTable, aal1CesLCoPathDataTable=aal1CesLCoPathDataTable, aal1CesStatsEntry=aal1CesStatsEntry, aal1CesLCoDiscardPriority=aal1CesLCoDiscardPriority, aal1CesServiceType=aal1CesServiceType, aal1CesLCoPathFailureAction=aal1CesLCoPathFailureAction, aal1CesAepOutEntry=aal1CesAepOutEntry, circuitEmulationServiceCapabilitiesBD00A=circuitEmulationServiceCapabilitiesBD00A, aal1CesLCoIndex=aal1CesLCoIndex, aal1CesAepLastSetupFailureDiagnostic=aal1CesAepLastSetupFailureDiagnostic, aal1CesAepAddressToCall=aal1CesAepAddressToCall, aal1CesNapStorageType=aal1CesNapStorageType, aal1CesAepProvEndPointAddrEntry=aal1CesAepProvEndPointAddrEntry, aal1CesAepSvcStatus=aal1CesAepSvcStatus, aal1CesLCoHoldingPriority=aal1CesLCoHoldingPriority, aal1CesAal1LayerLossStatus=aal1CesAal1LayerLossStatus, aal1CesStorageType=aal1CesStorageType, aal1CesProceduralStatus=aal1CesProceduralStatus, circuitEmulationServiceCapabilitiesBD00=circuitEmulationServiceCapabilitiesBD00, aal1Ces=aal1Ces, aal1CesNap=aal1CesNap, aal1CesProvTable=aal1CesProvTable, aal1CesLCoDelayMetric=aal1CesLCoDelayMetric, aal1CesAepRoutingOption=aal1CesAepRoutingOption, aal1CesAepRowStatusEntry=aal1CesAepRowStatusEntry, aal1CesCellLossIntegrationPeriod=aal1CesCellLossIntegrationPeriod, aal1CesLCoPathType=aal1CesLCoPathType, aal1CesCellsReceived=aal1CesCellsReceived, aal1CesAepRetryLimit=aal1CesAepRetryLimit, aal1CesAepStorageType=aal1CesAepStorageType, aal1CesIdlePattern=aal1CesIdlePattern, aal1CesAepRowStatusTable=aal1CesAepRowStatusTable, aal1CesLCoPktsFromNetwork=aal1CesLCoPktsFromNetwork, aal1CesLCoRowStatusEntry=aal1CesLCoRowStatusEntry, aal1CesLCoPathUpDateTime=aal1CesLCoPathUpDateTime, aal1CesPartialFill=aal1CesPartialFill, aal1CesUnknownStatus=aal1CesUnknownStatus, circuitEmulationServiceGroupBD00A=circuitEmulationServiceGroupBD00A, aal1CesLCoReasonForNoRoute=aal1CesLCoReasonForNoRoute, aal1CesLCoRowStatus=aal1CesLCoRowStatus, circuitEmulationServiceGroup=circuitEmulationServiceGroup, aal1CesPepProvEndPointAddrTable=aal1CesPepProvEndPointAddrTable, aal1CesProvEntry=aal1CesProvEntry, aal1CesNapIndex=aal1CesNapIndex, aal1CesStateEntry=aal1CesStateEntry, aal1CesPepRemoteAddress=aal1CesPepRemoteAddress, aal1CesLCoPathDataEntry=aal1CesLCoPathDataEntry, aal1CesLCoRequiredCustomerParameter=aal1CesLCoRequiredCustomerParameter, aal1CesLCoPathValue=aal1CesLCoPathValue, aal1CesPepRowStatusTable=aal1CesPepRowStatusTable, aal1CesLCoSetupPriority=aal1CesLCoSetupPriority, aal1CesPointerReframes=aal1CesPointerReframes, aal1CesLCoEmissionPriority=aal1CesLCoEmissionPriority, aal1CesLCoPathFailureCount=aal1CesLCoPathFailureCount, aal1CesIndex=aal1CesIndex, aal1CesNapRowStatus=aal1CesNapRowStatus, circuitEmulationServiceCapabilities=circuitEmulationServiceCapabilities, circuitEmulationServiceCapabilitiesBD=circuitEmulationServiceCapabilitiesBD, aal1CesAvailabilityStatus=aal1CesAvailabilityStatus, aal1CesBufferSize=aal1CesBufferSize, aal1CesOperationalState=aal1CesOperationalState, aal1CesLCoOverrideRemoteName=aal1CesLCoOverrideRemoteName, aal1CesLCoRequiredSecurity=aal1CesLCoRequiredSecurity, aal1CesAdminState=aal1CesAdminState, aal1CesConnectionStatus=aal1CesConnectionStatus, aal1CesPepEpOperEntry=aal1CesPepEpOperEntry, aal1CesUsageState=aal1CesUsageState, aal1CesBufferUnderflows=aal1CesBufferUnderflows, aal1CesLCoStatsTable=aal1CesLCoStatsTable, aal1CesCellLossRecoveryPeriod=aal1CesCellLossRecoveryPeriod, aal1CesHeaderErrors=aal1CesHeaderErrors, aal1CesCellLossStatus=aal1CesCellLossStatus, aal1CesNapRowStatusTable=aal1CesNapRowStatusTable, aal1CesNapProvEntry=aal1CesNapProvEntry, aal1CesPepPassiveOperTable=aal1CesPepPassiveOperTable, aal1CesPepExpectedRemoteAddress=aal1CesPepExpectedRemoteAddress, aal1CesCellsTransmitted=aal1CesCellsTransmitted, aal1CesAepComponentName=aal1CesAepComponentName, aal1CesNapProvTable=aal1CesNapProvTable, aal1CesPep=aal1CesPep, aal1CesStatsTable=aal1CesStatsTable, aal1CesAepEpOperEntry=aal1CesAepEpOperEntry, aal1CesIdleSuppression=aal1CesIdleSuppression, aal1CesCidDataEntry=aal1CesCidDataEntry, aal1CesLostCells=aal1CesLostCells, aal1CesLCoEnd=aal1CesLCoEnd, aal1CesAepProvTable=aal1CesAepProvTable, aal1CesOperTable=aal1CesOperTable, aal1CesPepRowStatus=aal1CesPepRowStatus, aal1CesLCoPathTable=aal1CesLCoPathTable, aal1CesMisinsertedCells=aal1CesMisinsertedCells, aal1CesBufferOverflows=aal1CesBufferOverflows, aal1CesPepLastTearDownDiagnostic=aal1CesPepLastTearDownDiagnostic, aal1CesInterfaceName=aal1CesInterfaceName, aal1CesAepLastSetupFailureCause=aal1CesAepLastSetupFailureCause, aal1CesComponentName=aal1CesComponentName, aal1CesRowStatus=aal1CesRowStatus, aal1CesPepComponentName=aal1CesPepComponentName, aal1CesPepProvEndPointAddrEntry=aal1CesPepProvEndPointAddrEntry, circuitEmulationServiceGroupBD00=circuitEmulationServiceGroupBD00, aal1CesPepPassiveOperEntry=aal1CesPepPassiveOperEntry, aal1CesStandbyStatus=aal1CesStandbyStatus, aal1CesLCoBytesToNetwork=aal1CesLCoBytesToNetwork, aal1CesDummyDataByte=aal1CesDummyDataByte, aal1CesPepSvcStatus=aal1CesPepSvcStatus, aal1CesLCoOptimization=aal1CesLCoOptimization, aal1CesNapRowStatusEntry=aal1CesNapRowStatusEntry, aal1CesLCoRetryCount=aal1CesLCoRetryCount, aal1CesRowStatusEntry=aal1CesRowStatusEntry, aal1CesNapComponentName=aal1CesNapComponentName, aal1CesPepIndex=aal1CesPepIndex, aal1CesAlarmStatus=aal1CesAlarmStatus, aal1CesAepLastTearDownDiagnostic=aal1CesAepLastTearDownDiagnostic, aal1CesLCoStorageType=aal1CesLCoStorageType, aal1CesLCoRequiredTrafficType=aal1CesLCoRequiredTrafficType, circuitEmulationServiceGroupBD=circuitEmulationServiceGroupBD, aal1CesLCoBytesFromNetwork=aal1CesLCoBytesFromNetwork, aal1CesLCoCostMetric=aal1CesLCoCostMetric, aal1CesLCoState=aal1CesLCoState, aal1CesStateTable=aal1CesStateTable, aal1CesAal1SequenceErrors=aal1CesAal1SequenceErrors, aal1CesPepEpOperTable=aal1CesPepEpOperTable, aal1CesPepLastTearDownCause=aal1CesPepLastTearDownCause, aal1CesAepEpOperTable=aal1CesAepEpOperTable, aal1CesOperEntry=aal1CesOperEntry, aal1CesLCoRequiredRxBandwidth=aal1CesLCoRequiredRxBandwidth, aal1CesLCoComponentName=aal1CesLCoComponentName, aal1CesControlStatus=aal1CesControlStatus, aal1CesAepExpectedRemoteAddress=aal1CesAepExpectedRemoteAddress, aal1CesLCoPermittedTrunkTypes=aal1CesLCoPermittedTrunkTypes, aal1CesLCoRoundTripDelay=aal1CesLCoRoundTripDelay, aal1CesCidDataTable=aal1CesCidDataTable, aal1CesAepRowStatus=aal1CesAepRowStatus, aal1CesLCoPktsToNetwork=aal1CesLCoPktsToNetwork, aal1CesLCoPathEntry=aal1CesLCoPathEntry, aal1CesCustomerIdentifier=aal1CesCustomerIdentifier, aal1CesAepRetryFailures=aal1CesAepRetryFailures)
