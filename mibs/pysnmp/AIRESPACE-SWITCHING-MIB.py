#
# PySNMP MIB module AIRESPACE-SWITCHING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AIRESPACE-SWITCHING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:00:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
airespace, = mibBuilder.importSymbols("AIRESPACE-REF-MIB", "airespace")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
dot1qVlanIndex, dot1qFdbId = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanIndex", "dot1qFdbId")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, Unsigned32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, Counter64, NotificationType, IpAddress, iso, Gauge32, Integer32, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "Counter64", "NotificationType", "IpAddress", "iso", "Gauge32", "Integer32", "MibIdentifier", "Bits")
MacAddress, DisplayString, TextualConvention, TruthValue, PhysAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention", "TruthValue", "PhysAddress", "RowStatus")
bsnSwitching = ModuleIdentity((1, 3, 6, 1, 4, 1, 14179, 1))
bsnSwitching.setRevisions(('2006-04-10 00:00',))
if mibBuilder.loadTexts: bsnSwitching.setLastUpdated('200604100000Z')
if mibBuilder.loadTexts: bsnSwitching.setOrganization('Airespace, Inc.')
agentInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1))
agentConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2))
agentSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 3))
stats = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 4))
switchingTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 50))
bsnSwitchingGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 51))
bsnSwitchingCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 52))
agentInventoryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1))
agentInventorySysDescription = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySysDescription.setStatus('current')
agentInventoryMachineType = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMachineType.setStatus('current')
agentInventoryMachineModel = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMachineModel.setStatus('current')
agentInventorySerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySerialNumber.setStatus('current')
agentInventoryMaintenanceLevel = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMaintenanceLevel.setStatus('current')
agentInventoryBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryBurnedInMacAddress.setStatus('current')
agentInventoryOperatingSystem = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryOperatingSystem.setStatus('current')
agentInventoryManufacturerName = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryManufacturerName.setStatus('current')
agentInventoryProductName = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryProductName.setStatus('current')
agentInventoryProductVersion = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryProductVersion.setStatus('current')
agentInventoryIsGigECardPresent = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryIsGigECardPresent.setStatus('current')
agentInventoryIsCryptoCardPresent = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryIsCryptoCardPresent.setStatus('current')
agentInventoryIsForeignAPSupported = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryIsForeignAPSupported.setStatus('current')
agentInventoryMaxNumberOfAPsSupported = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMaxNumberOfAPsSupported.setStatus('current')
agentInventoryIsCryptoCard2Present = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryIsCryptoCard2Present.setStatus('current')
agentInventoryFipsModeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 1, 20), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryFipsModeEnabled.setStatus('current')
agentTrapLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2))
agentTrapLogTotal = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTotal.setStatus('current')
agentTrapLogTotalSinceLastViewed = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTotalSinceLastViewed.setStatus('current')
agentRadioUpDownTrapCount = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRadioUpDownTrapCount.setStatus('current')
agentApAssociateDisassociateTrapCount = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentApAssociateDisassociateTrapCount.setStatus('current')
agentApLoadProfileFailTrapCount = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentApLoadProfileFailTrapCount.setStatus('current')
agentApNoiseProfileFailTrapCount = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentApNoiseProfileFailTrapCount.setStatus('current')
agentApInterferenceProfileFailTrapCount = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentApInterferenceProfileFailTrapCount.setStatus('current')
agentApCoverageProfileFailTrapCount = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentApCoverageProfileFailTrapCount.setStatus('current')
agentTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 4), )
if mibBuilder.loadTexts: agentTrapLogTable.setStatus('current')
agentTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 4, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentTrapLogIndex"))
if mibBuilder.loadTexts: agentTrapLogEntry.setStatus('current')
agentTrapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogIndex.setStatus('current')
agentTrapLogSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogSystemTime.setStatus('current')
agentTrapLogTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 1, 2, 4, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTrap.setStatus('current')
agentSwitchInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 3))
agentSwitchInfoLwappTransportMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("layer2", 1), ("layer3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchInfoLwappTransportMode.setStatus('current')
agentSwitchInfoPowerSupply1Present = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchInfoPowerSupply1Present.setStatus('current')
agentSwitchInfoPowerSupply1Operational = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchInfoPowerSupply1Operational.setStatus('current')
agentSwitchInfoPowerSupply2Present = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchInfoPowerSupply2Present.setStatus('current')
agentSwitchInfoPowerSupply2Operational = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchInfoPowerSupply2Operational.setStatus('current')
agentResourceInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 5))
agentCurrentCPUUtilization = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCurrentCPUUtilization.setStatus('current')
agentTotalMemory = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTotalMemory.setStatus('current')
agentFreeMemory = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFreeMemory.setStatus('current')
agentWcpInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6))
agentWcpDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentWcpDeviceName.setStatus('current')
agentWcpSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentWcpSlotNumber.setStatus('current')
agentWcpPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentWcpPortNumber.setStatus('current')
agentWcpPeerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentWcpPeerPortNumber.setStatus('current')
agentWcpPeerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentWcpPeerIpAddress.setStatus('current')
agentWcpControllerTableChecksum = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentWcpControllerTableChecksum.setStatus('current')
agentWcpControllerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 7), )
if mibBuilder.loadTexts: agentWcpControllerInfoTable.setStatus('current')
agentWcpControllerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 7, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentWcpControllerInfoSlotNumber"), (0, "AIRESPACE-SWITCHING-MIB", "agentWcpControllerInfoPortNumber"))
if mibBuilder.loadTexts: agentWcpControllerInfoEntry.setStatus('current')
agentWcpControllerInfoSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentWcpControllerInfoSlotNumber.setStatus('current')
agentWcpControllerInfoPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentWcpControllerInfoPortNumber.setStatus('current')
agentWcpControllerInfoIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 1, 6, 7, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentWcpControllerInfoIpAddress.setStatus('current')
agentProductGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 4))
productGroup1 = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 4, 1))
productGroup2 = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 4, 2))
productGroup3 = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 4, 3))
productGroup4 = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 1, 4, 4))
agentCLIConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1))
agentLoginSessionTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 1), )
if mibBuilder.loadTexts: agentLoginSessionTable.setStatus('current')
agentLoginSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 1, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentLoginSessionIndex"))
if mibBuilder.loadTexts: agentLoginSessionEntry.setStatus('current')
agentLoginSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIndex.setStatus('current')
agentLoginSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionUserName.setStatus('current')
agentLoginSessionIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIPAddress.setStatus('current')
agentLoginSessionConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("serial", 1), ("telnet", 2), ("web", 3), ("ssl", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionConnectionType.setStatus('current')
agentLoginSessionIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIdleTime.setStatus('current')
agentLoginSessionSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionSessionTime.setStatus('current')
agentLoginSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 1, 1, 26), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLoginSessionStatus.setStatus('current')
agentTelnetConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 2))
agentTelnetLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetLoginTimeout.setStatus('current')
agentTelnetMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetMaxSessions.setStatus('current')
agentTelnetAllowNewMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetAllowNewMode.setStatus('current')
agentSSHAllowNewMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSSHAllowNewMode.setStatus('current')
agentSerialGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 5))
agentSerialTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialTimeout.setStatus('current')
agentSerialBaudrate = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("baud1200", 1), ("baud2400", 2), ("baud4800", 3), ("baud9600", 4), ("baud19200", 5), ("baud38400", 6), ("baud57600", 7), ("baud115200", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialBaudrate.setStatus('current')
agentSerialCharacterSize = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialCharacterSize.setStatus('current')
agentSerialHWFlowControlMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialHWFlowControlMode.setStatus('current')
agentSerialStopBits = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialStopBits.setStatus('current')
agentSerialParityType = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("even", 1), ("odd", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialParityType.setStatus('current')
agentLagConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2))
agentLagConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagConfigCreate.setStatus('obsolete')
agentLagSummaryConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2), )
if mibBuilder.loadTexts: agentLagSummaryConfigTable.setStatus('obsolete')
agentLagSummaryConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentLagSummaryName"))
if mibBuilder.loadTexts: agentLagSummaryConfigEntry.setStatus('obsolete')
agentLagSummaryName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLagSummaryName.setStatus('obsolete')
agentLagSummaryLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagSummaryLagIndex.setStatus('obsolete')
agentLagSummaryFlushTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLagSummaryFlushTimer.setStatus('obsolete')
agentLagSummaryLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLagSummaryLinkTrap.setStatus('obsolete')
agentLagSummaryAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLagSummaryAdminMode.setStatus('obsolete')
agentLagSummaryStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d", 1), ("fast", 2), ("off", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLagSummaryStpMode.setStatus('obsolete')
agentLagSummaryAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLagSummaryAddPort.setStatus('obsolete')
agentLagSummaryDeletePort = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLagSummaryDeletePort.setStatus('obsolete')
agentLagSummaryPortsBitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLagSummaryPortsBitMask.setStatus('obsolete')
agentLagSummaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 2, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLagSummaryStatus.setStatus('obsolete')
agentLagDetailedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 3), )
if mibBuilder.loadTexts: agentLagDetailedConfigTable.setStatus('obsolete')
agentLagDetailedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 3, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentLagDetailedLagIndex"), (0, "AIRESPACE-SWITCHING-MIB", "agentLagDetailedIfIndex"))
if mibBuilder.loadTexts: agentLagDetailedConfigEntry.setStatus('obsolete')
agentLagDetailedLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedLagIndex.setStatus('obsolete')
agentLagDetailedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedIfIndex.setStatus('obsolete')
agentLagDetailedPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 3, 1, 22), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedPortSpeed.setStatus('obsolete')
agentLagConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagConfigMode.setStatus('obsolete')
agentNetworkConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3))
agentNetworkIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIPAddress.setStatus('current')
agentNetworkSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkSubnetMask.setStatus('current')
agentNetworkDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkDefaultGateway.setStatus('current')
agentNetworkBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkBurnedInMacAddress.setStatus('current')
agentNetworkConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkConfigProtocol.setStatus('current')
agentNetworkWebMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkWebMode.setStatus('current')
agentNetworkSecureWebMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkSecureWebMode.setStatus('current')
agentNetworkMulticastMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("unicast", 1), ("multicast", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkMulticastMode.setStatus('current')
agentNetworkDsPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkDsPortNumber.setStatus('current')
agentNetworkUserIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkUserIdleTimeout.setStatus('current')
agentNetworkArpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkArpTimeout.setStatus('current')
agentNetworkManagementVlan = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkManagementVlan.setStatus('current')
agentNetworkGvrpStatus = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkGvrpStatus.setStatus('obsolete')
agentNetworkAllowMgmtViaWireless = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkAllowMgmtViaWireless.setStatus('current')
agentNetworkBroadcastSsidMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkBroadcastSsidMode.setStatus('current')
agentNetworkSecureWebPassword = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkSecureWebPassword.setStatus('current')
agentNetworkWebAdminCertType = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkWebAdminCertType.setStatus('current')
agentNetworkWebAdminCertRegenerateCmdInvoke = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkWebAdminCertRegenerateCmdInvoke.setStatus('current')
agentNetworkWebAuthCertType = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkWebAuthCertType.setStatus('current')
agentNetworkWebAuthCertRegenerateCmdInvoke = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkWebAuthCertRegenerateCmdInvoke.setStatus('current')
agentNetworkPeerToPeerBlockingMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkPeerToPeerBlockingMode.setStatus('current')
agentNetworkMulticastGroupAddress = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkMulticastGroupAddress.setStatus('current')
agentNetworkRouteConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 23), )
if mibBuilder.loadTexts: agentNetworkRouteConfigTable.setStatus('current')
agentNetworkRouteConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 23, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentNetworkRouteIPAddress"))
if mibBuilder.loadTexts: agentNetworkRouteConfigEntry.setStatus('current')
agentNetworkRouteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 23, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkRouteIPAddress.setStatus('current')
agentNetworkRouteIPNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 23, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkRouteIPNetmask.setStatus('current')
agentNetworkRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 23, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkRouteGateway.setStatus('current')
agentNetworkRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 3, 23, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkRouteStatus.setStatus('current')
agentInterfaceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13), )
if mibBuilder.loadTexts: agentInterfaceConfigTable.setStatus('current')
agentInterfaceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentInterfaceName"))
if mibBuilder.loadTexts: agentInterfaceConfigEntry.setStatus('current')
agentInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceName.setStatus('current')
agentInterfaceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceVlanId.setStatus('current')
agentInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("static", 0), ("dynamic", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInterfaceType.setStatus('current')
agentInterfaceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInterfaceMacAddress.setStatus('current')
agentInterfaceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceIPAddress.setStatus('current')
agentInterfaceIPNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceIPNetmask.setStatus('current')
agentInterfaceIPGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceIPGateway.setStatus('current')
agentInterfacePortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfacePortNo.setStatus('current')
agentInterfacePrimaryDhcpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfacePrimaryDhcpAddress.setStatus('current')
agentInterfaceSecondaryDhcpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceSecondaryDhcpAddress.setStatus('current')
agentInterfaceDhcpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceDhcpProtocol.setStatus('current')
agentInterfaceDnsHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceDnsHostName.setStatus('current')
agentInterfaceAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceAclName.setStatus('current')
agentInterfaceAPManagementFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceAPManagementFeature.setStatus('current')
agentInterfaceActivePortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInterfaceActivePortNo.setStatus('current')
agentInterfaceBackupPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceBackupPortNo.setStatus('current')
agentInterfaceVlanQuarantine = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceVlanQuarantine.setStatus('current')
agentInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 13, 1, 31), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentInterfaceRowStatus.setStatus('current')
agentNtpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 14))
agentNtpPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3600, 604800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNtpPollingInterval.setStatus('current')
agentNtpServerTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 14, 2), )
if mibBuilder.loadTexts: agentNtpServerTable.setStatus('current')
agentNtpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 14, 2, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentNtpServerIndex"))
if mibBuilder.loadTexts: agentNtpServerEntry.setStatus('current')
agentNtpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNtpServerIndex.setStatus('current')
agentNtpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 14, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNtpServerAddress.setStatus('current')
agentNtpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 14, 2, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNtpServerRowStatus.setStatus('current')
agentDhcpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15))
agentDhcpScopeTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1), )
if mibBuilder.loadTexts: agentDhcpScopeTable.setStatus('current')
agentDhcpScopeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentDhcpScopeIndex"))
if mibBuilder.loadTexts: agentDhcpScopeEntry.setStatus('current')
agentDhcpScopeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeIndex.setStatus('current')
agentDhcpScopeName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 79))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeName.setStatus('current')
agentDhcpScopeLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(120, 8640000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeLeaseTime.setStatus('current')
agentDhcpScopeNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeNetwork.setStatus('current')
agentDhcpScopeNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeNetmask.setStatus('current')
agentDhcpScopePoolStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopePoolStartAddress.setStatus('current')
agentDhcpScopePoolEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopePoolEndAddress.setStatus('current')
agentDhcpScopeDefaultRouterAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeDefaultRouterAddress1.setStatus('current')
agentDhcpScopeDefaultRouterAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeDefaultRouterAddress2.setStatus('current')
agentDhcpScopeDefaultRouterAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeDefaultRouterAddress3.setStatus('current')
agentDhcpScopeDnsDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeDnsDomainName.setStatus('current')
agentDhcpScopeDnsServerAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeDnsServerAddress1.setStatus('current')
agentDhcpScopeDnsServerAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeDnsServerAddress2.setStatus('current')
agentDhcpScopeDnsServerAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeDnsServerAddress3.setStatus('current')
agentDhcpScopeNetbiosNameServerAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeNetbiosNameServerAddress1.setStatus('current')
agentDhcpScopeNetbiosNameServerAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 16), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeNetbiosNameServerAddress2.setStatus('current')
agentDhcpScopeNetbiosNameServerAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 17), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeNetbiosNameServerAddress3.setStatus('current')
agentDhcpScopeState = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeState.setStatus('current')
agentDhcpScopeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 15, 1, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDhcpScopeRowStatus.setStatus('current')
agentServicePortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 4))
agentServicePortIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortIPAddress.setStatus('obsolete')
agentServicePortSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortSubnetMask.setStatus('obsolete')
agentServicePortDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortDefaultGateway.setStatus('obsolete')
agentServicePortBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 4, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortBurnedInMacAddress.setStatus('obsolete')
agentServicePortConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("none", 1), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortConfigProtocol.setStatus('obsolete')
agentSnmpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5))
agentSnmpTrapPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapPortNumber.setStatus('current')
agentSnmpVersion1Status = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpVersion1Status.setStatus('current')
agentSnmpVersion2cStatus = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpVersion2cStatus.setStatus('current')
agentSnmpCommunityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 5), )
if mibBuilder.loadTexts: agentSnmpCommunityConfigTable.setStatus('current')
agentSnmpCommunityConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 5, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentSnmpCommunityName"))
if mibBuilder.loadTexts: agentSnmpCommunityConfigEntry.setStatus('current')
agentSnmpCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpCommunityName.setStatus('current')
agentSnmpCommunityIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 5, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpCommunityIPAddress.setStatus('current')
agentSnmpCommunityIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 5, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpCommunityIPMask.setStatus('current')
agentSnmpCommunityAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2))).clone('readOnly')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpCommunityAccessMode.setStatus('current')
agentSnmpCommunityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpCommunityEnabled.setStatus('current')
agentSnmpCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 5, 1, 25), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpCommunityStatus.setStatus('current')
agentSnmpTrapReceiverConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 6), )
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigTable.setStatus('current')
agentSnmpTrapReceiverConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 6, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentSnmpTrapReceiverName"))
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigEntry.setStatus('current')
agentSnmpTrapReceiverName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpTrapReceiverName.setStatus('current')
agentSnmpTrapReceiverIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 6, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpTrapReceiverIPAddress.setStatus('current')
agentSnmpTrapReceiverEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpTrapReceiverEnabled.setStatus('current')
agentSnmpTrapReceiverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 6, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpTrapReceiverStatus.setStatus('current')
agentSnmpTrapFlagsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 7))
agentSnmpAuthenticationTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpAuthenticationTrapFlag.setStatus('current')
agentSnmpLinkUpDownTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpLinkUpDownTrapFlag.setStatus('current')
agentSnmpMultipleUsersTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpMultipleUsersTrapFlag.setStatus('current')
agentSnmpSpanningTreeTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpSpanningTreeTrapFlag.setStatus('current')
agentSnmpBroadcastStormTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 5, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpBroadcastStormTrapFlag.setStatus('obsolete')
agentSnmpV3ConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6))
agentSnmpVersion3Status = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpVersion3Status.setStatus('current')
agentSnmpV3UserConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 2), )
if mibBuilder.loadTexts: agentSnmpV3UserConfigTable.setStatus('current')
agentSnmpV3UserConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 2, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentSnmpV3UserName"))
if mibBuilder.loadTexts: agentSnmpV3UserConfigEntry.setStatus('current')
agentSnmpV3UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpV3UserName.setStatus('current')
agentSnmpV3UserAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readonly", 1), ("readwrite", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpV3UserAccessMode.setStatus('current')
agentSnmpV3UserAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hmacmd5", 2), ("hmacsha", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpV3UserAuthenticationType.setStatus('current')
agentSnmpV3UserEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpV3UserEncryptionType.setStatus('current')
agentSnmpV3UserAuthenticationPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpV3UserAuthenticationPassword.setStatus('current')
agentSnmpV3UserEncryptionPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpV3UserEncryptionPassword.setStatus('current')
agentSnmpV3UserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 6, 2, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpV3UserStatus.setStatus('current')
agentSpanningTreeConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 7))
agentSpanningTreeMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSpanningTreeMode.setStatus('current')
agentSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 8))
agentSwitchAddressAgingTimeoutTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 8, 4), )
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutTable.setStatus('current')
agentSwitchAddressAgingTimeoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 8, 4, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qFdbId"))
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutEntry.setStatus('current')
agentSwitchAddressAgingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 8, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeout.setStatus('current')
agentSwitchBroadcastControlMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchBroadcastControlMode.setStatus('current')
agentSwitchDot3FlowControlMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDot3FlowControlMode.setStatus('current')
agentSwitchLwappTransportMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("layer2", 1), ("layer3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchLwappTransportMode.setStatus('current')
agentTransferConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9))
agentTransferUploadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 1))
agentTransferUploadMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tftp", 1), ("xmodem", 2), ("ymodem", 3), ("zmodem", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadMode.setStatus('current')
agentTransferUploadServerIP = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadServerIP.setStatus('current')
agentTransferUploadPath = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadPath.setStatus('current')
agentTransferUploadFilename = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadFilename.setStatus('current')
agentTransferUploadDataType = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 99))).clone(namedValues=NamedValues(("config", 2), ("errorlog", 3), ("systemtrace", 4), ("traplog", 5), ("crashfile", 6), ("signatures", 7), ("unknown", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadDataType.setStatus('current')
agentTransferUploadStart = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadStart.setStatus('current')
agentTransferUploadStatus = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 99))).clone(namedValues=NamedValues(("notInitiated", 1), ("transferStarting", 2), ("errorStarting", 3), ("wrongFileType", 4), ("updatingConfig", 5), ("invalidConfigFile", 6), ("writingToFlash", 7), ("failureWritingToFlash", 8), ("checkingCRC", 9), ("failedCRC", 10), ("unknownDirection", 11), ("transferSuccessful", 12), ("transferFailed", 13), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTransferUploadStatus.setStatus('current')
agentTransferConfigurationFileEncryption = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferConfigurationFileEncryption.setStatus('current')
agentTransferConfigurationFileEncryptionKey = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferConfigurationFileEncryptionKey.setStatus('current')
agentTransferDownloadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2))
agentTransferDownloadMode = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tftp", 1), ("xmodem", 2), ("ymodem", 3), ("zmodem", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadMode.setStatus('current')
agentTransferDownloadServerIP = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadServerIP.setStatus('current')
agentTransferDownloadPath = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadPath.setStatus('current')
agentTransferDownloadFilename = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadFilename.setStatus('current')
agentTransferDownloadDataType = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 99))).clone(namedValues=NamedValues(("code", 2), ("config", 3), ("webauthcert", 4), ("webadmincert", 5), ("signatures", 6), ("customWebAuth", 7), ("unknown", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadDataType.setStatus('current')
agentTransferDownloadStart = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadStart.setStatus('current')
agentTransferDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 99))).clone(namedValues=NamedValues(("notInitiated", 1), ("transferStarting", 2), ("errorStarting", 3), ("wrongFileType", 4), ("updatingConfig", 5), ("invalidConfigFile", 6), ("writingToFlash", 7), ("failureWritingToFlash", 8), ("checkingCRC", 9), ("failedCRC", 10), ("unknownDirection", 11), ("transferSuccessful", 12), ("transferFailed", 13), ("bootBreakOff", 14), ("invalidTarFile", 15), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTransferDownloadStatus.setStatus('current')
agentTransferDownloadTftpMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadTftpMaxRetries.setStatus('current')
agentTransferDownloadTftpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 2, 9, 2, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadTftpTimeout.setStatus('current')
agentDot3adAggPortTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 11), )
if mibBuilder.loadTexts: agentDot3adAggPortTable.setStatus('obsolete')
agentDot3adAggPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 11, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentDot3adAggPort"))
if mibBuilder.loadTexts: agentDot3adAggPortEntry.setStatus('obsolete')
agentDot3adAggPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot3adAggPort.setStatus('obsolete')
agentDot3adAggPortLACPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 11, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot3adAggPortLACPMode.setStatus('obsolete')
agentPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12), )
if mibBuilder.loadTexts: agentPortConfigTable.setStatus('current')
agentPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "agentPortDot1dBasePort"))
if mibBuilder.loadTexts: agentPortConfigEntry.setStatus('current')
agentPortDot1dBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortDot1dBasePort.setStatus('current')
agentPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortIfIndex.setStatus('current')
agentPortIanaType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 3), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortIanaType.setStatus('current')
agentPortSTPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d", 1), ("fast", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortSTPMode.setStatus('current')
agentPortSTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("blocking", 1), ("listening", 2), ("learning", 3), ("forwarding", 4), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortSTPState.setStatus('current')
agentPortAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortAdminMode.setStatus('current')
agentPortPhysicalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8))).clone(namedValues=NamedValues(("autoNegotiate", 1), ("half10", 2), ("full10", 3), ("half100", 4), ("full100", 5), ("full1000sx", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortPhysicalMode.setStatus('current')
agentPortPhysicalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8, 9))).clone(namedValues=NamedValues(("autonegotiate", 1), ("half10", 2), ("full10", 3), ("half100", 4), ("full100", 5), ("full1000sx", 8), ("unknown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortPhysicalStatus.setStatus('current')
agentPortLinkTrapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortLinkTrapMode.setStatus('current')
agentPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortClearStats.setStatus('current')
agentPortDefaultType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 11), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDefaultType.setStatus('current')
agentPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 12), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortType.setStatus('current')
agentPortAutoNegAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortAutoNegAdminStatus.setStatus('current')
agentPortDot3FlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDot3FlowControlMode.setStatus('current')
agentPortPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortPowerMode.setStatus('current')
agentPortGvrpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortGvrpStatus.setStatus('obsolete')
agentPortGarpJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 17), Unsigned32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortGarpJoinTime.setStatus('obsolete')
agentPortGarpLeaveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 18), Unsigned32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortGarpLeaveTime.setStatus('obsolete')
agentPortGarpLeaveAllTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 19), Unsigned32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortGarpLeaveAllTime.setStatus('obsolete')
agentPortMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorMode.setStatus('current')
agentPortMulticastApplianceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMulticastApplianceMode.setStatus('current')
agentPortOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 2, 12, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortOperationalStatus.setStatus('current')
agentSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSaveConfig.setStatus('current')
agentClearConfig = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearConfig.setStatus('current')
agentClearLags = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearLags.setStatus('current')
agentClearLoginSessions = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearLoginSessions.setStatus('current')
agentClearPortStats = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearPortStats.setStatus('current')
agentClearSwitchStats = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearSwitchStats.setStatus('current')
agentClearTrapLog = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearTrapLog.setStatus('current')
agentResetSystem = MibScalar((1, 3, 6, 1, 4, 1, 14179, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentResetSystem.setStatus('current')
portStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1), )
if mibBuilder.loadTexts: portStatsTable.setStatus('current')
portStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1), ).setIndexNames((0, "AIRESPACE-SWITCHING-MIB", "portStatsIndex"))
if mibBuilder.loadTexts: portStatsEntry.setStatus('current')
portStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsIndex.setStatus('current')
portStatsPktsTx64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 2), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsTx64Octets.setStatus('current')
portStatsPktsTx65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 3), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsTx65to127Octets.setStatus('current')
portStatsPktsTx128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 4), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsTx128to255Octets.setStatus('current')
portStatsPktsTx256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsTx256to511Octets.setStatus('current')
portStatsPktsTx512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 6), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsTx512to1023Octets.setStatus('current')
portStatsPktsTx1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 7), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsTx1024to1518Octets.setStatus('current')
portStatsPktsRx1519to1530Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 8), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsRx1519to1530Octets.setStatus('current')
portStatsPktsTx1519to1530Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsTx1519to1530Octets.setStatus('current')
portStatsPktsTxOversizeOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 14179, 1, 4, 1, 1, 30), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsTxOversizeOctets.setStatus('current')
multipleUsersTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 1))
if mibBuilder.loadTexts: multipleUsersTrap.setStatus('current')
broadcastStormStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 2))
if mibBuilder.loadTexts: broadcastStormStartTrap.setStatus('current')
broadcastStormEndTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 3))
if mibBuilder.loadTexts: broadcastStormEndTrap.setStatus('current')
linkFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 4))
if mibBuilder.loadTexts: linkFailureTrap.setStatus('current')
vlanRequestFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 5)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanRequestFailureTrap.setStatus('current')
vlanDeleteLastTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 6)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanDeleteLastTrap.setStatus('current')
vlanDefaultCfgFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 7)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanDefaultCfgFailureTrap.setStatus('current')
vlanRestoreFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 8)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanRestoreFailureTrap.setStatus('current')
fanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 9))
if mibBuilder.loadTexts: fanFailureTrap.setStatus('current')
stpInstanceNewRootTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 10)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: stpInstanceNewRootTrap.setStatus('current')
stpInstanceTopologyChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 11)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: stpInstanceTopologyChangeTrap.setStatus('current')
powerSupplyStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 14179, 1, 50, 12))
if mibBuilder.loadTexts: powerSupplyStatusChangeTrap.setStatus('current')
bsnSwitchingCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 14179, 1, 52, 1)).setObjects(("AIRESPACE-SWITCHING-MIB", "bsnSwitchingAgentInfoGroup"), ("AIRESPACE-SWITCHING-MIB", "bsnSwitchingAgentConfigGroup"), ("AIRESPACE-SWITCHING-MIB", "bsnSwitchingAgentSystemGroup"), ("AIRESPACE-SWITCHING-MIB", "bsnSwitchingAgentStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnSwitchingCompliance = bsnSwitchingCompliance.setStatus('current')
bsnSwitchingAgentInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 1, 51, 1)).setObjects(("AIRESPACE-SWITCHING-MIB", "agentInventorySysDescription"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryMachineType"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryMachineModel"), ("AIRESPACE-SWITCHING-MIB", "agentInventorySerialNumber"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryMaintenanceLevel"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryBurnedInMacAddress"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryOperatingSystem"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryManufacturerName"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryProductName"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryProductVersion"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryIsGigECardPresent"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryIsCryptoCardPresent"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryIsForeignAPSupported"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryMaxNumberOfAPsSupported"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryIsCryptoCard2Present"), ("AIRESPACE-SWITCHING-MIB", "agentInventoryFipsModeEnabled"), ("AIRESPACE-SWITCHING-MIB", "agentTrapLogTotal"), ("AIRESPACE-SWITCHING-MIB", "agentTrapLogTotalSinceLastViewed"), ("AIRESPACE-SWITCHING-MIB", "agentTrapLogIndex"), ("AIRESPACE-SWITCHING-MIB", "agentTrapLogSystemTime"), ("AIRESPACE-SWITCHING-MIB", "agentTrapLogTrap"), ("AIRESPACE-SWITCHING-MIB", "agentRadioUpDownTrapCount"), ("AIRESPACE-SWITCHING-MIB", "agentApAssociateDisassociateTrapCount"), ("AIRESPACE-SWITCHING-MIB", "agentApLoadProfileFailTrapCount"), ("AIRESPACE-SWITCHING-MIB", "agentApNoiseProfileFailTrapCount"), ("AIRESPACE-SWITCHING-MIB", "agentApInterferenceProfileFailTrapCount"), ("AIRESPACE-SWITCHING-MIB", "agentApCoverageProfileFailTrapCount"), ("AIRESPACE-SWITCHING-MIB", "agentSwitchInfoLwappTransportMode"), ("AIRESPACE-SWITCHING-MIB", "agentSwitchInfoPowerSupply1Present"), ("AIRESPACE-SWITCHING-MIB", "agentSwitchInfoPowerSupply1Operational"), ("AIRESPACE-SWITCHING-MIB", "agentSwitchInfoPowerSupply2Present"), ("AIRESPACE-SWITCHING-MIB", "agentSwitchInfoPowerSupply2Operational"), ("AIRESPACE-SWITCHING-MIB", "agentCurrentCPUUtilization"), ("AIRESPACE-SWITCHING-MIB", "agentTotalMemory"), ("AIRESPACE-SWITCHING-MIB", "agentFreeMemory"), ("AIRESPACE-SWITCHING-MIB", "agentWcpDeviceName"), ("AIRESPACE-SWITCHING-MIB", "agentWcpSlotNumber"), ("AIRESPACE-SWITCHING-MIB", "agentWcpPortNumber"), ("AIRESPACE-SWITCHING-MIB", "agentWcpPeerPortNumber"), ("AIRESPACE-SWITCHING-MIB", "agentWcpPeerIpAddress"), ("AIRESPACE-SWITCHING-MIB", "agentWcpControllerTableChecksum"), ("AIRESPACE-SWITCHING-MIB", "agentWcpControllerInfoSlotNumber"), ("AIRESPACE-SWITCHING-MIB", "agentWcpControllerInfoPortNumber"), ("AIRESPACE-SWITCHING-MIB", "agentWcpControllerInfoIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnSwitchingAgentInfoGroup = bsnSwitchingAgentInfoGroup.setStatus('current')
bsnSwitchingAgentConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 1, 51, 2)).setObjects(("AIRESPACE-SWITCHING-MIB", "agentLoginSessionIndex"), ("AIRESPACE-SWITCHING-MIB", "agentLoginSessionUserName"), ("AIRESPACE-SWITCHING-MIB", "agentLoginSessionIPAddress"), ("AIRESPACE-SWITCHING-MIB", "agentLoginSessionConnectionType"), ("AIRESPACE-SWITCHING-MIB", "agentLoginSessionIdleTime"), ("AIRESPACE-SWITCHING-MIB", "agentLoginSessionSessionTime"), ("AIRESPACE-SWITCHING-MIB", "agentLoginSessionStatus"), ("AIRESPACE-SWITCHING-MIB", "agentTelnetLoginTimeout"), ("AIRESPACE-SWITCHING-MIB", "agentTelnetMaxSessions"), ("AIRESPACE-SWITCHING-MIB", "agentTelnetAllowNewMode"), ("AIRESPACE-SWITCHING-MIB", "agentSSHAllowNewMode"), ("AIRESPACE-SWITCHING-MIB", "agentSerialTimeout"), ("AIRESPACE-SWITCHING-MIB", "agentSerialBaudrate"), ("AIRESPACE-SWITCHING-MIB", "agentSerialCharacterSize"), ("AIRESPACE-SWITCHING-MIB", "agentSerialHWFlowControlMode"), ("AIRESPACE-SWITCHING-MIB", "agentSerialStopBits"), ("AIRESPACE-SWITCHING-MIB", "agentSerialParityType"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkIPAddress"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkSubnetMask"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkDefaultGateway"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkBurnedInMacAddress"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkConfigProtocol"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkWebMode"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkSecureWebMode"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkMulticastMode"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkDsPortNumber"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkUserIdleTimeout"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkArpTimeout"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkManagementVlan"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkAllowMgmtViaWireless"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkBroadcastSsidMode"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkSecureWebPassword"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkWebAdminCertType"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkWebAuthCertRegenerateCmdInvoke"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkWebAdminCertRegenerateCmdInvoke"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkWebAuthCertType"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkRouteIPAddress"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkRouteIPNetmask"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkRouteGateway"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkRouteStatus"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkPeerToPeerBlockingMode"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkMulticastGroupAddress"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceName"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceVlanId"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceType"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceMacAddress"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceIPAddress"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceIPNetmask"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceIPGateway"), ("AIRESPACE-SWITCHING-MIB", "agentInterfacePortNo"), ("AIRESPACE-SWITCHING-MIB", "agentInterfacePrimaryDhcpAddress"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceSecondaryDhcpAddress"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceDhcpProtocol"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceDnsHostName"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceAclName"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceAPManagementFeature"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceActivePortNo"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceBackupPortNo"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceVlanQuarantine"), ("AIRESPACE-SWITCHING-MIB", "agentInterfaceRowStatus"), ("AIRESPACE-SWITCHING-MIB", "agentNtpPollingInterval"), ("AIRESPACE-SWITCHING-MIB", "agentNtpServerIndex"), ("AIRESPACE-SWITCHING-MIB", "agentNtpServerAddress"), ("AIRESPACE-SWITCHING-MIB", "agentNtpServerRowStatus"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeIndex"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeName"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeLeaseTime"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeNetwork"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeNetmask"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopePoolStartAddress"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopePoolEndAddress"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeDefaultRouterAddress1"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeDefaultRouterAddress2"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeDefaultRouterAddress3"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeDnsDomainName"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeDnsServerAddress1"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeDnsServerAddress2"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeDnsServerAddress3"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeNetbiosNameServerAddress1"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeNetbiosNameServerAddress2"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeNetbiosNameServerAddress3"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeState"), ("AIRESPACE-SWITCHING-MIB", "agentDhcpScopeRowStatus"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpTrapPortNumber"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpVersion1Status"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpVersion2cStatus"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpCommunityName"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpCommunityIPAddress"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpCommunityIPMask"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpCommunityAccessMode"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpCommunityEnabled"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpCommunityStatus"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpTrapReceiverName"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpTrapReceiverIPAddress"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpTrapReceiverEnabled"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpTrapReceiverStatus"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpAuthenticationTrapFlag"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpLinkUpDownTrapFlag"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpMultipleUsersTrapFlag"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpSpanningTreeTrapFlag"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpVersion3Status"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpV3UserName"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpV3UserAccessMode"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpV3UserAuthenticationType"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpV3UserEncryptionType"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpV3UserAuthenticationPassword"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpV3UserEncryptionPassword"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpV3UserStatus"), ("AIRESPACE-SWITCHING-MIB", "agentSpanningTreeMode"), ("AIRESPACE-SWITCHING-MIB", "agentSwitchAddressAgingTimeout"), ("AIRESPACE-SWITCHING-MIB", "agentSwitchBroadcastControlMode"), ("AIRESPACE-SWITCHING-MIB", "agentSwitchDot3FlowControlMode"), ("AIRESPACE-SWITCHING-MIB", "agentSwitchLwappTransportMode"), ("AIRESPACE-SWITCHING-MIB", "agentTransferUploadMode"), ("AIRESPACE-SWITCHING-MIB", "agentTransferUploadServerIP"), ("AIRESPACE-SWITCHING-MIB", "agentTransferUploadPath"), ("AIRESPACE-SWITCHING-MIB", "agentTransferUploadFilename"), ("AIRESPACE-SWITCHING-MIB", "agentTransferUploadDataType"), ("AIRESPACE-SWITCHING-MIB", "agentTransferUploadStart"), ("AIRESPACE-SWITCHING-MIB", "agentTransferUploadStatus"), ("AIRESPACE-SWITCHING-MIB", "agentTransferConfigurationFileEncryption"), ("AIRESPACE-SWITCHING-MIB", "agentTransferConfigurationFileEncryptionKey"), ("AIRESPACE-SWITCHING-MIB", "agentTransferDownloadMode"), ("AIRESPACE-SWITCHING-MIB", "agentTransferDownloadServerIP"), ("AIRESPACE-SWITCHING-MIB", "agentTransferDownloadPath"), ("AIRESPACE-SWITCHING-MIB", "agentTransferDownloadFilename"), ("AIRESPACE-SWITCHING-MIB", "agentTransferDownloadDataType"), ("AIRESPACE-SWITCHING-MIB", "agentTransferDownloadStart"), ("AIRESPACE-SWITCHING-MIB", "agentTransferDownloadStatus"), ("AIRESPACE-SWITCHING-MIB", "agentTransferDownloadTftpMaxRetries"), ("AIRESPACE-SWITCHING-MIB", "agentTransferDownloadTftpTimeout"), ("AIRESPACE-SWITCHING-MIB", "agentPortDot1dBasePort"), ("AIRESPACE-SWITCHING-MIB", "agentPortIfIndex"), ("AIRESPACE-SWITCHING-MIB", "agentPortIanaType"), ("AIRESPACE-SWITCHING-MIB", "agentPortSTPMode"), ("AIRESPACE-SWITCHING-MIB", "agentPortSTPState"), ("AIRESPACE-SWITCHING-MIB", "agentPortAdminMode"), ("AIRESPACE-SWITCHING-MIB", "agentPortPhysicalMode"), ("AIRESPACE-SWITCHING-MIB", "agentPortPhysicalStatus"), ("AIRESPACE-SWITCHING-MIB", "agentPortLinkTrapMode"), ("AIRESPACE-SWITCHING-MIB", "agentPortClearStats"), ("AIRESPACE-SWITCHING-MIB", "agentPortDefaultType"), ("AIRESPACE-SWITCHING-MIB", "agentPortType"), ("AIRESPACE-SWITCHING-MIB", "agentPortAutoNegAdminStatus"), ("AIRESPACE-SWITCHING-MIB", "agentPortDot3FlowControlMode"), ("AIRESPACE-SWITCHING-MIB", "agentPortPowerMode"), ("AIRESPACE-SWITCHING-MIB", "agentPortMirrorMode"), ("AIRESPACE-SWITCHING-MIB", "agentPortMulticastApplianceMode"), ("AIRESPACE-SWITCHING-MIB", "agentPortOperationalStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnSwitchingAgentConfigGroup = bsnSwitchingAgentConfigGroup.setStatus('current')
bsnSwitchingAgentSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 1, 51, 3)).setObjects(("AIRESPACE-SWITCHING-MIB", "agentSaveConfig"), ("AIRESPACE-SWITCHING-MIB", "agentClearConfig"), ("AIRESPACE-SWITCHING-MIB", "agentClearLags"), ("AIRESPACE-SWITCHING-MIB", "agentClearLoginSessions"), ("AIRESPACE-SWITCHING-MIB", "agentClearPortStats"), ("AIRESPACE-SWITCHING-MIB", "agentClearSwitchStats"), ("AIRESPACE-SWITCHING-MIB", "agentClearTrapLog"), ("AIRESPACE-SWITCHING-MIB", "agentResetSystem"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnSwitchingAgentSystemGroup = bsnSwitchingAgentSystemGroup.setStatus('current')
bsnSwitchingAgentStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 1, 51, 4)).setObjects(("AIRESPACE-SWITCHING-MIB", "portStatsIndex"), ("AIRESPACE-SWITCHING-MIB", "portStatsPktsTx64Octets"), ("AIRESPACE-SWITCHING-MIB", "portStatsPktsTx65to127Octets"), ("AIRESPACE-SWITCHING-MIB", "portStatsPktsTx128to255Octets"), ("AIRESPACE-SWITCHING-MIB", "portStatsPktsTx256to511Octets"), ("AIRESPACE-SWITCHING-MIB", "portStatsPktsTx512to1023Octets"), ("AIRESPACE-SWITCHING-MIB", "portStatsPktsTx1024to1518Octets"), ("AIRESPACE-SWITCHING-MIB", "portStatsPktsRx1519to1530Octets"), ("AIRESPACE-SWITCHING-MIB", "portStatsPktsTx1519to1530Octets"), ("AIRESPACE-SWITCHING-MIB", "portStatsPktsTxOversizeOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnSwitchingAgentStatsGroup = bsnSwitchingAgentStatsGroup.setStatus('current')
bsnSwitchingObsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14179, 1, 51, 5)).setObjects(("AIRESPACE-SWITCHING-MIB", "agentLagConfigCreate"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryName"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryLagIndex"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryLinkTrap"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryAdminMode"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryStpMode"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryAddPort"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryDeletePort"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryPortsBitMask"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryStatus"), ("AIRESPACE-SWITCHING-MIB", "agentLagDetailedLagIndex"), ("AIRESPACE-SWITCHING-MIB", "agentLagDetailedIfIndex"), ("AIRESPACE-SWITCHING-MIB", "agentLagDetailedPortSpeed"), ("AIRESPACE-SWITCHING-MIB", "agentLagConfigMode"), ("AIRESPACE-SWITCHING-MIB", "agentServicePortIPAddress"), ("AIRESPACE-SWITCHING-MIB", "agentServicePortSubnetMask"), ("AIRESPACE-SWITCHING-MIB", "agentServicePortBurnedInMacAddress"), ("AIRESPACE-SWITCHING-MIB", "agentServicePortConfigProtocol"), ("AIRESPACE-SWITCHING-MIB", "agentSnmpBroadcastStormTrapFlag"), ("AIRESPACE-SWITCHING-MIB", "agentDot3adAggPort"), ("AIRESPACE-SWITCHING-MIB", "agentDot3adAggPortLACPMode"), ("AIRESPACE-SWITCHING-MIB", "agentNetworkGvrpStatus"), ("AIRESPACE-SWITCHING-MIB", "agentPortGvrpStatus"), ("AIRESPACE-SWITCHING-MIB", "agentPortGarpJoinTime"), ("AIRESPACE-SWITCHING-MIB", "agentPortGarpLeaveTime"), ("AIRESPACE-SWITCHING-MIB", "agentPortGarpLeaveAllTime"), ("AIRESPACE-SWITCHING-MIB", "agentLagSummaryFlushTimer"), ("AIRESPACE-SWITCHING-MIB", "agentServicePortDefaultGateway"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnSwitchingObsGroup = bsnSwitchingObsGroup.setStatus('obsolete')
bsnSwitchingTrap = NotificationGroup((1, 3, 6, 1, 4, 1, 14179, 1, 51, 6)).setObjects(("AIRESPACE-SWITCHING-MIB", "multipleUsersTrap"), ("AIRESPACE-SWITCHING-MIB", "broadcastStormStartTrap"), ("AIRESPACE-SWITCHING-MIB", "broadcastStormEndTrap"), ("AIRESPACE-SWITCHING-MIB", "linkFailureTrap"), ("AIRESPACE-SWITCHING-MIB", "vlanRequestFailureTrap"), ("AIRESPACE-SWITCHING-MIB", "vlanDeleteLastTrap"), ("AIRESPACE-SWITCHING-MIB", "vlanDefaultCfgFailureTrap"), ("AIRESPACE-SWITCHING-MIB", "vlanRestoreFailureTrap"), ("AIRESPACE-SWITCHING-MIB", "fanFailureTrap"), ("AIRESPACE-SWITCHING-MIB", "stpInstanceNewRootTrap"), ("AIRESPACE-SWITCHING-MIB", "stpInstanceTopologyChangeTrap"), ("AIRESPACE-SWITCHING-MIB", "powerSupplyStatusChangeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bsnSwitchingTrap = bsnSwitchingTrap.setStatus('current')
mibBuilder.exportSymbols("AIRESPACE-SWITCHING-MIB", agentClearLoginSessions=agentClearLoginSessions, agentSerialHWFlowControlMode=agentSerialHWFlowControlMode, agentTelnetLoginTimeout=agentTelnetLoginTimeout, agentWcpControllerInfoTable=agentWcpControllerInfoTable, productGroup4=productGroup4, agentInterfaceIPNetmask=agentInterfaceIPNetmask, portStatsPktsTx1024to1518Octets=portStatsPktsTx1024to1518Octets, stats=stats, agentFreeMemory=agentFreeMemory, agentServicePortConfigGroup=agentServicePortConfigGroup, agentSnmpMultipleUsersTrapFlag=agentSnmpMultipleUsersTrapFlag, agentSwitchInfoPowerSupply1Present=agentSwitchInfoPowerSupply1Present, agentTrapLogTrap=agentTrapLogTrap, agentServicePortDefaultGateway=agentServicePortDefaultGateway, agentLagDetailedIfIndex=agentLagDetailedIfIndex, agentWcpInfoGroup=agentWcpInfoGroup, agentLagSummaryDeletePort=agentLagSummaryDeletePort, agentPortIanaType=agentPortIanaType, agentServicePortBurnedInMacAddress=agentServicePortBurnedInMacAddress, agentInventoryIsGigECardPresent=agentInventoryIsGigECardPresent, agentNetworkRouteIPNetmask=agentNetworkRouteIPNetmask, agentLoginSessionConnectionType=agentLoginSessionConnectionType, agentDhcpScopeEntry=agentDhcpScopeEntry, agentNetworkRouteGateway=agentNetworkRouteGateway, agentResourceInfoGroup=agentResourceInfoGroup, vlanRestoreFailureTrap=vlanRestoreFailureTrap, agentSSHAllowNewMode=agentSSHAllowNewMode, agentTransferDownloadServerIP=agentTransferDownloadServerIP, agentTelnetMaxSessions=agentTelnetMaxSessions, agentInterfaceType=agentInterfaceType, agentSnmpV3UserName=agentSnmpV3UserName, agentWcpPortNumber=agentWcpPortNumber, agentSwitchInfoPowerSupply2Operational=agentSwitchInfoPowerSupply2Operational, agentLagSummaryStatus=agentLagSummaryStatus, agentTrapLogIndex=agentTrapLogIndex, agentNetworkDsPortNumber=agentNetworkDsPortNumber, agentTransferUploadStatus=agentTransferUploadStatus, agentSpanningTreeConfigGroup=agentSpanningTreeConfigGroup, broadcastStormEndTrap=broadcastStormEndTrap, agentSnmpCommunityName=agentSnmpCommunityName, agentNetworkWebMode=agentNetworkWebMode, agentTransferDownloadPath=agentTransferDownloadPath, agentPortConfigTable=agentPortConfigTable, agentInterfaceAPManagementFeature=agentInterfaceAPManagementFeature, agentApInterferenceProfileFailTrapCount=agentApInterferenceProfileFailTrapCount, agentTransferDownloadStart=agentTransferDownloadStart, agentNtpServerEntry=agentNtpServerEntry, agentSnmpConfigGroup=agentSnmpConfigGroup, agentSerialBaudrate=agentSerialBaudrate, agentNetworkSubnetMask=agentNetworkSubnetMask, agentTrapLogTable=agentTrapLogTable, bsnSwitchingObsGroup=bsnSwitchingObsGroup, agentNetworkPeerToPeerBlockingMode=agentNetworkPeerToPeerBlockingMode, agentWcpControllerInfoEntry=agentWcpControllerInfoEntry, agentSwitchConfigGroup=agentSwitchConfigGroup, agentTransferUploadMode=agentTransferUploadMode, agentPortMirrorMode=agentPortMirrorMode, agentTrapLogTotal=agentTrapLogTotal, agentTransferDownloadFilename=agentTransferDownloadFilename, agentInterfaceVlanId=agentInterfaceVlanId, agentApLoadProfileFailTrapCount=agentApLoadProfileFailTrapCount, agentTransferUploadDataType=agentTransferUploadDataType, agentDhcpScopeName=agentDhcpScopeName, agentNetworkConfigGroup=agentNetworkConfigGroup, multipleUsersTrap=multipleUsersTrap, agentWcpSlotNumber=agentWcpSlotNumber, agentNtpServerRowStatus=agentNtpServerRowStatus, agentTransferConfigGroup=agentTransferConfigGroup, agentLoginSessionSessionTime=agentLoginSessionSessionTime, agentClearSwitchStats=agentClearSwitchStats, agentPortDot3FlowControlMode=agentPortDot3FlowControlMode, agentPortConfigEntry=agentPortConfigEntry, agentInterfaceVlanQuarantine=agentInterfaceVlanQuarantine, agentLagDetailedConfigEntry=agentLagDetailedConfigEntry, agentPortDot1dBasePort=agentPortDot1dBasePort, agentInventoryMachineType=agentInventoryMachineType, agentTrapLogGroup=agentTrapLogGroup, agentDhcpScopeIndex=agentDhcpScopeIndex, agentInterfaceBackupPortNo=agentInterfaceBackupPortNo, agentSwitchLwappTransportMode=agentSwitchLwappTransportMode, agentTransferDownloadDataType=agentTransferDownloadDataType, agentSaveConfig=agentSaveConfig, agentSnmpVersion3Status=agentSnmpVersion3Status, agentDhcpScopeDefaultRouterAddress3=agentDhcpScopeDefaultRouterAddress3, agentNetworkMulticastMode=agentNetworkMulticastMode, agentNtpServerIndex=agentNtpServerIndex, agentInventorySysDescription=agentInventorySysDescription, agentClearLags=agentClearLags, agentSpanningTreeMode=agentSpanningTreeMode, agentTelnetAllowNewMode=agentTelnetAllowNewMode, productGroup3=productGroup3, agentClearConfig=agentClearConfig, agentSnmpV3ConfigGroup=agentSnmpV3ConfigGroup, agentSnmpV3UserConfigEntry=agentSnmpV3UserConfigEntry, agentWcpControllerTableChecksum=agentWcpControllerTableChecksum, agentSwitchInfoPowerSupply1Operational=agentSwitchInfoPowerSupply1Operational, portStatsPktsTx65to127Octets=portStatsPktsTx65to127Octets, agentWcpControllerInfoSlotNumber=agentWcpControllerInfoSlotNumber, agentSwitchInfoGroup=agentSwitchInfoGroup, agentSnmpTrapReceiverIPAddress=agentSnmpTrapReceiverIPAddress, agentTelnetConfigGroup=agentTelnetConfigGroup, agentPortOperationalStatus=agentPortOperationalStatus, agentInventoryMaintenanceLevel=agentInventoryMaintenanceLevel, broadcastStormStartTrap=broadcastStormStartTrap, agentLoginSessionEntry=agentLoginSessionEntry, vlanDeleteLastTrap=vlanDeleteLastTrap, agentNetworkBurnedInMacAddress=agentNetworkBurnedInMacAddress, agentCurrentCPUUtilization=agentCurrentCPUUtilization, agentInterfaceAclName=agentInterfaceAclName, agentLagSummaryLagIndex=agentLagSummaryLagIndex, agentInventoryMachineModel=agentInventoryMachineModel, agentSnmpAuthenticationTrapFlag=agentSnmpAuthenticationTrapFlag, bsnSwitchingAgentInfoGroup=bsnSwitchingAgentInfoGroup, agentPortPhysicalMode=agentPortPhysicalMode, agentSnmpVersion1Status=agentSnmpVersion1Status, agentSnmpVersion2cStatus=agentSnmpVersion2cStatus, agentLagDetailedConfigTable=agentLagDetailedConfigTable, agentPortLinkTrapMode=agentPortLinkTrapMode, agentSwitchDot3FlowControlMode=agentSwitchDot3FlowControlMode, agentTransferDownloadGroup=agentTransferDownloadGroup, agentSnmpCommunityIPAddress=agentSnmpCommunityIPAddress, portStatsPktsTx128to255Octets=portStatsPktsTx128to255Octets, agentSerialTimeout=agentSerialTimeout, agentApNoiseProfileFailTrapCount=agentApNoiseProfileFailTrapCount, agentDhcpScopeTable=agentDhcpScopeTable, agentInterfaceName=agentInterfaceName, agentConfigGroup=agentConfigGroup, agentInterfaceIPAddress=agentInterfaceIPAddress, agentDot3adAggPortEntry=agentDot3adAggPortEntry, agentTransferUploadServerIP=agentTransferUploadServerIP, agentTransferUploadGroup=agentTransferUploadGroup, agentTransferDownloadMode=agentTransferDownloadMode, agentNetworkSecureWebPassword=agentNetworkSecureWebPassword, agentServicePortConfigProtocol=agentServicePortConfigProtocol, agentDhcpScopeDnsServerAddress3=agentDhcpScopeDnsServerAddress3, agentServicePortSubnetMask=agentServicePortSubnetMask, agentClearPortStats=agentClearPortStats, agentCLIConfigGroup=agentCLIConfigGroup, agentInterfaceIPGateway=agentInterfaceIPGateway, productGroup2=productGroup2, agentDhcpScopeNetwork=agentDhcpScopeNetwork, agentSerialParityType=agentSerialParityType, bsnSwitchingCompliance=bsnSwitchingCompliance, agentLagSummaryLinkTrap=agentLagSummaryLinkTrap, agentPortAutoNegAdminStatus=agentPortAutoNegAdminStatus, agentDhcpScopeDnsServerAddress1=agentDhcpScopeDnsServerAddress1, agentInventoryIsForeignAPSupported=agentInventoryIsForeignAPSupported, agentInterfaceConfigTable=agentInterfaceConfigTable, agentTransferDownloadTftpMaxRetries=agentTransferDownloadTftpMaxRetries, agentLoginSessionIndex=agentLoginSessionIndex, agentInterfaceConfigEntry=agentInterfaceConfigEntry, agentInterfaceMacAddress=agentInterfaceMacAddress, agentNetworkRouteConfigTable=agentNetworkRouteConfigTable, agentLoginSessionIPAddress=agentLoginSessionIPAddress, portStatsPktsRx1519to1530Octets=portStatsPktsRx1519to1530Octets, agentInventoryMaxNumberOfAPsSupported=agentInventoryMaxNumberOfAPsSupported, agentNetworkRouteStatus=agentNetworkRouteStatus, agentInterfacePortNo=agentInterfacePortNo, agentLagSummaryPortsBitMask=agentLagSummaryPortsBitMask, agentLagSummaryName=agentLagSummaryName, agentNtpServerTable=agentNtpServerTable, agentDot3adAggPortLACPMode=agentDot3adAggPortLACPMode, agentSnmpCommunityConfigTable=agentSnmpCommunityConfigTable, agentSerialCharacterSize=agentSerialCharacterSize, agentInfoGroup=agentInfoGroup, agentLagConfigGroup=agentLagConfigGroup, agentSwitchAddressAgingTimeoutEntry=agentSwitchAddressAgingTimeoutEntry, agentNtpPollingInterval=agentNtpPollingInterval, agentPortGvrpStatus=agentPortGvrpStatus, agentSwitchInfoPowerSupply2Present=agentSwitchInfoPowerSupply2Present, agentInventorySerialNumber=agentInventorySerialNumber, agentSnmpCommunityIPMask=agentSnmpCommunityIPMask, agentLoginSessionTable=agentLoginSessionTable, agentInterfacePrimaryDhcpAddress=agentInterfacePrimaryDhcpAddress, agentPortSTPState=agentPortSTPState, agentTransferUploadFilename=agentTransferUploadFilename, bsnSwitchingCompliances=bsnSwitchingCompliances, agentInventoryIsCryptoCard2Present=agentInventoryIsCryptoCard2Present, agentPortPhysicalStatus=agentPortPhysicalStatus, agentInventoryGroup=agentInventoryGroup, agentDhcpScopeDefaultRouterAddress1=agentDhcpScopeDefaultRouterAddress1, agentWcpControllerInfoIpAddress=agentWcpControllerInfoIpAddress, agentDhcpScopeDnsServerAddress2=agentDhcpScopeDnsServerAddress2, agentDhcpScopeNetmask=agentDhcpScopeNetmask, agentLagConfigMode=agentLagConfigMode, agentTransferConfigurationFileEncryption=agentTransferConfigurationFileEncryption, agentResetSystem=agentResetSystem, agentProductGroup=agentProductGroup, agentSnmpV3UserEncryptionPassword=agentSnmpV3UserEncryptionPassword, agentDhcpScopeRowStatus=agentDhcpScopeRowStatus, agentSnmpTrapPortNumber=agentSnmpTrapPortNumber, agentPortGarpLeaveTime=agentPortGarpLeaveTime, agentDhcpScopePoolEndAddress=agentDhcpScopePoolEndAddress, agentSnmpTrapReceiverConfigTable=agentSnmpTrapReceiverConfigTable, bsnSwitchingAgentSystemGroup=bsnSwitchingAgentSystemGroup, agentNtpConfigGroup=agentNtpConfigGroup, bsnSwitching=bsnSwitching, agentNtpServerAddress=agentNtpServerAddress, agentSnmpV3UserAuthenticationPassword=agentSnmpV3UserAuthenticationPassword, agentApAssociateDisassociateTrapCount=agentApAssociateDisassociateTrapCount, agentApCoverageProfileFailTrapCount=agentApCoverageProfileFailTrapCount, linkFailureTrap=linkFailureTrap, vlanRequestFailureTrap=vlanRequestFailureTrap, switchingTraps=switchingTraps, agentSerialGroup=agentSerialGroup, agentInterfaceSecondaryDhcpAddress=agentInterfaceSecondaryDhcpAddress, agentSnmpTrapReceiverEnabled=agentSnmpTrapReceiverEnabled, portStatsEntry=portStatsEntry, agentNetworkRouteIPAddress=agentNetworkRouteIPAddress, bsnSwitchingGroups=bsnSwitchingGroups, agentSnmpV3UserEncryptionType=agentSnmpV3UserEncryptionType, agentInventoryProductVersion=agentInventoryProductVersion, agentSnmpV3UserConfigTable=agentSnmpV3UserConfigTable, agentInventoryProductName=agentInventoryProductName, agentDot3adAggPort=agentDot3adAggPort, agentSnmpTrapReceiverStatus=agentSnmpTrapReceiverStatus, agentInventoryOperatingSystem=agentInventoryOperatingSystem, agentInventoryManufacturerName=agentInventoryManufacturerName, agentPortType=agentPortType, agentLoginSessionStatus=agentLoginSessionStatus, agentSerialStopBits=agentSerialStopBits, agentPortIfIndex=agentPortIfIndex, agentSnmpCommunityAccessMode=agentSnmpCommunityAccessMode, agentLagSummaryFlushTimer=agentLagSummaryFlushTimer, agentWcpControllerInfoPortNumber=agentWcpControllerInfoPortNumber, agentClearTrapLog=agentClearTrapLog, agentTransferDownloadStatus=agentTransferDownloadStatus, agentDhcpScopeLeaseTime=agentDhcpScopeLeaseTime, agentNetworkWebAdminCertRegenerateCmdInvoke=agentNetworkWebAdminCertRegenerateCmdInvoke, agentSnmpTrapReceiverConfigEntry=agentSnmpTrapReceiverConfigEntry, agentNetworkWebAdminCertType=agentNetworkWebAdminCertType, PYSNMP_MODULE_ID=bsnSwitching, agentNetworkManagementVlan=agentNetworkManagementVlan, agentLagSummaryConfigTable=agentLagSummaryConfigTable, agentDhcpScopeDnsDomainName=agentDhcpScopeDnsDomainName, portStatsPktsTx512to1023Octets=portStatsPktsTx512to1023Octets, productGroup1=productGroup1, stpInstanceNewRootTrap=stpInstanceNewRootTrap, agentSnmpCommunityEnabled=agentSnmpCommunityEnabled, agentSnmpCommunityConfigEntry=agentSnmpCommunityConfigEntry, agentTransferConfigurationFileEncryptionKey=agentTransferConfigurationFileEncryptionKey, agentNetworkSecureWebMode=agentNetworkSecureWebMode, agentNetworkWebAuthCertRegenerateCmdInvoke=agentNetworkWebAuthCertRegenerateCmdInvoke, portStatsPktsTxOversizeOctets=portStatsPktsTxOversizeOctets, agentTotalMemory=agentTotalMemory, fanFailureTrap=fanFailureTrap, agentTrapLogSystemTime=agentTrapLogSystemTime, agentNetworkIPAddress=agentNetworkIPAddress, agentWcpDeviceName=agentWcpDeviceName, agentDhcpScopeState=agentDhcpScopeState, agentInterfaceRowStatus=agentInterfaceRowStatus, agentSnmpBroadcastStormTrapFlag=agentSnmpBroadcastStormTrapFlag, agentLagDetailedPortSpeed=agentLagDetailedPortSpeed, bsnSwitchingTrap=bsnSwitchingTrap)
mibBuilder.exportSymbols("AIRESPACE-SWITCHING-MIB", agentLagSummaryAddPort=agentLagSummaryAddPort, agentLagSummaryStpMode=agentLagSummaryStpMode, agentSwitchBroadcastControlMode=agentSwitchBroadcastControlMode, agentNetworkAllowMgmtViaWireless=agentNetworkAllowMgmtViaWireless, agentDhcpScopeDefaultRouterAddress2=agentDhcpScopeDefaultRouterAddress2, portStatsPktsTx64Octets=portStatsPktsTx64Octets, agentSnmpTrapReceiverName=agentSnmpTrapReceiverName, agentDhcpScopeNetbiosNameServerAddress2=agentDhcpScopeNetbiosNameServerAddress2, portStatsPktsTx256to511Octets=portStatsPktsTx256to511Octets, powerSupplyStatusChangeTrap=powerSupplyStatusChangeTrap, agentSwitchAddressAgingTimeoutTable=agentSwitchAddressAgingTimeoutTable, bsnSwitchingAgentStatsGroup=bsnSwitchingAgentStatsGroup, agentNetworkBroadcastSsidMode=agentNetworkBroadcastSsidMode, agentPortAdminMode=agentPortAdminMode, agentDhcpConfigGroup=agentDhcpConfigGroup, agentNetworkWebAuthCertType=agentNetworkWebAuthCertType, agentTrapLogTotalSinceLastViewed=agentTrapLogTotalSinceLastViewed, portStatsIndex=portStatsIndex, agentNetworkConfigProtocol=agentNetworkConfigProtocol, agentPortGarpJoinTime=agentPortGarpJoinTime, agentInterfaceActivePortNo=agentInterfaceActivePortNo, bsnSwitchingAgentConfigGroup=bsnSwitchingAgentConfigGroup, agentDhcpScopeNetbiosNameServerAddress3=agentDhcpScopeNetbiosNameServerAddress3, agentNetworkGvrpStatus=agentNetworkGvrpStatus, agentSnmpV3UserStatus=agentSnmpV3UserStatus, portStatsTable=portStatsTable, vlanDefaultCfgFailureTrap=vlanDefaultCfgFailureTrap, agentNetworkDefaultGateway=agentNetworkDefaultGateway, agentSnmpCommunityStatus=agentSnmpCommunityStatus, agentPortPowerMode=agentPortPowerMode, agentWcpPeerPortNumber=agentWcpPeerPortNumber, agentSystemGroup=agentSystemGroup, agentTransferUploadStart=agentTransferUploadStart, agentLoginSessionIdleTime=agentLoginSessionIdleTime, agentInventoryBurnedInMacAddress=agentInventoryBurnedInMacAddress, agentSnmpLinkUpDownTrapFlag=agentSnmpLinkUpDownTrapFlag, agentLagSummaryConfigEntry=agentLagSummaryConfigEntry, agentTransferDownloadTftpTimeout=agentTransferDownloadTftpTimeout, agentNetworkRouteConfigEntry=agentNetworkRouteConfigEntry, agentDhcpScopeNetbiosNameServerAddress1=agentDhcpScopeNetbiosNameServerAddress1, agentPortDefaultType=agentPortDefaultType, agentSnmpV3UserAuthenticationType=agentSnmpV3UserAuthenticationType, agentDhcpScopePoolStartAddress=agentDhcpScopePoolStartAddress, agentNetworkArpTimeout=agentNetworkArpTimeout, agentNetworkMulticastGroupAddress=agentNetworkMulticastGroupAddress, agentPortSTPMode=agentPortSTPMode, agentInterfaceDnsHostName=agentInterfaceDnsHostName, agentPortMulticastApplianceMode=agentPortMulticastApplianceMode, portStatsPktsTx1519to1530Octets=portStatsPktsTx1519to1530Octets, agentPortGarpLeaveAllTime=agentPortGarpLeaveAllTime, stpInstanceTopologyChangeTrap=stpInstanceTopologyChangeTrap, agentInterfaceDhcpProtocol=agentInterfaceDhcpProtocol, agentRadioUpDownTrapCount=agentRadioUpDownTrapCount, agentWcpPeerIpAddress=agentWcpPeerIpAddress, agentLagConfigCreate=agentLagConfigCreate, agentSnmpV3UserAccessMode=agentSnmpV3UserAccessMode, agentInventoryFipsModeEnabled=agentInventoryFipsModeEnabled, agentLoginSessionUserName=agentLoginSessionUserName, agentTrapLogEntry=agentTrapLogEntry, agentLagSummaryAdminMode=agentLagSummaryAdminMode, agentDot3adAggPortTable=agentDot3adAggPortTable, agentPortClearStats=agentPortClearStats, agentNetworkUserIdleTimeout=agentNetworkUserIdleTimeout, agentSnmpSpanningTreeTrapFlag=agentSnmpSpanningTreeTrapFlag, agentSnmpTrapFlagsConfigGroup=agentSnmpTrapFlagsConfigGroup, agentSwitchAddressAgingTimeout=agentSwitchAddressAgingTimeout, agentTransferUploadPath=agentTransferUploadPath, agentLagDetailedLagIndex=agentLagDetailedLagIndex, agentInventoryIsCryptoCardPresent=agentInventoryIsCryptoCardPresent, agentServicePortIPAddress=agentServicePortIPAddress, agentSwitchInfoLwappTransportMode=agentSwitchInfoLwappTransportMode)
