#
# PySNMP MIB module INTEL-AMOD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-AMOD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:42:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
mib2ext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "mib2ext")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter64, NotificationType, ObjectIdentity, Unsigned32, TimeTicks, ModuleIdentity, Gauge32, IpAddress, iso, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "NotificationType", "ObjectIdentity", "Unsigned32", "TimeTicks", "ModuleIdentity", "Gauge32", "IpAddress", "iso", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
amod = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 24))
amodModem = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 24, 1))
amodLink = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 24, 2))
class ModemState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("noConfiguration", 1), ("noValidModem", 2), ("initializingModem", 3), ("resettingModem", 4), ("waitingForResetAck", 5), ("hangingUp", 6), ("waitingForHangupAck", 7), ("standBy", 8), ("acceptingCall", 9), ("connected", 10), ("reserved", 11), ("dialing", 12), ("waitingForAnswer", 13), ("other", 14))

amodModemTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 24, 1, 1), )
if mibBuilder.loadTexts: amodModemTable.setStatus('mandatory')
amodModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 24, 1, 1, 1), ).setIndexNames((0, "INTEL-AMOD-MIB", "amodModemIfIndex"))
if mibBuilder.loadTexts: amodModemEntry.setStatus('mandatory')
amodModemIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 24, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amodModemIfIndex.setStatus('mandatory')
amodModemState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 24, 1, 1, 1, 2), ModemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amodModemState.setStatus('mandatory')
amodModemManufactureName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 24, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amodModemManufactureName.setStatus('mandatory')
amodModemProductNameAndVer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 24, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amodModemProductNameAndVer.setStatus('mandatory')
amodLinkTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 24, 2, 1), )
if mibBuilder.loadTexts: amodLinkTable.setStatus('mandatory')
amodLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 24, 2, 1, 1), ).setIndexNames((0, "INTEL-AMOD-MIB", "amodLinkIfIndex"))
if mibBuilder.loadTexts: amodLinkEntry.setStatus('mandatory')
amodLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 24, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amodLinkIfIndex.setStatus('mandatory')
amodLinkHdlcRxChecksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 24, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amodLinkHdlcRxChecksumErrors.setStatus('mandatory')
amodLinkHdlcRxLong = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 24, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amodLinkHdlcRxLong.setStatus('mandatory')
amodLinkHdlcRxShort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 24, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amodLinkHdlcRxShort.setStatus('mandatory')
amodLinkHdlcStuffingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 24, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amodLinkHdlcStuffingErrors.setStatus('mandatory')
amodLinkHdlcLostEndMarkers = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 24, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amodLinkHdlcLostEndMarkers.setStatus('mandatory')
amodLinkHdlcRxOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 24, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amodLinkHdlcRxOverflow.setStatus('mandatory')
amodLinkTxCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 24, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amodLinkTxCalls.setStatus('mandatory')
amodLinkTxCallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 24, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amodLinkTxCallsFailed.setStatus('mandatory')
amodLinkRxCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 24, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amodLinkRxCalls.setStatus('mandatory')
mibBuilder.exportSymbols("INTEL-AMOD-MIB", amodLinkHdlcRxOverflow=amodLinkHdlcRxOverflow, amodLinkEntry=amodLinkEntry, amodModemState=amodModemState, amodLinkHdlcRxLong=amodLinkHdlcRxLong, amodLinkTxCallsFailed=amodLinkTxCallsFailed, amodLinkRxCalls=amodLinkRxCalls, amodModemProductNameAndVer=amodModemProductNameAndVer, amodModem=amodModem, amodModemEntry=amodModemEntry, amodLinkHdlcLostEndMarkers=amodLinkHdlcLostEndMarkers, amodLinkTable=amodLinkTable, amod=amod, amodLinkIfIndex=amodLinkIfIndex, ModemState=ModemState, amodModemIfIndex=amodModemIfIndex, amodModemManufactureName=amodModemManufactureName, amodLink=amodLink, amodLinkHdlcStuffingErrors=amodLinkHdlcStuffingErrors, amodLinkHdlcRxShort=amodLinkHdlcRxShort, amodLinkTxCalls=amodLinkTxCalls, amodModemTable=amodModemTable, amodLinkHdlcRxChecksumErrors=amodLinkHdlcRxChecksumErrors)
