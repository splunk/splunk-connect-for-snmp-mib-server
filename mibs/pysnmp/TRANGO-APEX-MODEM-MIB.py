#
# PySNMP MIB module TRANGO-APEX-MODEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRANGO-APEX-MODEM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:19:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, iso, Integer32, Gauge32, Counter64, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32, NotificationType, MibIdentifier, TimeTicks, Opaque, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "Integer32", "Gauge32", "Counter64", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32", "NotificationType", "MibIdentifier", "TimeTicks", "Opaque", "ModuleIdentity", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
MibScalar, MibTable, MibTableRow, MibTableColumn, apex, NotificationType, ObjectIdentity, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("TRANGO-APEX-MIB", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "apex", "NotificationType", "ObjectIdentity", "ModuleIdentity", "Unsigned32")
modem = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2))
modemLoopbackMode = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("OFF", 0), ("DIGITAL", 1), ("IF", 2), ("RFGEN", 3), ("RFREFL", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemLoopbackMode.setStatus('current')
modemDataPattern = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("EXT", 0), ("INT", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemDataPattern.setStatus('current')
modemBER = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemBER.setStatus('current')
modemMSE = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemMSE.setStatus('current')
modemFER = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemFER.setStatus('current')
lock = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 6))
modemLockStatus = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("UNLOCKED", 0), ("LOCKED", 1), ("PROGRESS", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemLockStatus.setStatus('current')
modemTimingLock = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("NOTLOCKED", 0), ("LOCKED", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemTimingLock.setStatus('current')
modemPreambleLock = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("NOTLOCKED", 0), ("LOCKED", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemPreambleLock.setStatus('current')
modemLdpcLock = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("NOTLOCKED", 0), ("LOCKED", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemLdpcLock.setStatus('current')
modemReserved = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemReserved.setStatus('current')
acm = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7))
modemACMEnable = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("DISABLED", 0), ("ENABLED", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMEnable.setStatus('current')
acmprofile = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 2))
modemACMProfileQPSKEnable = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("DISABLED", 0), ("ENABLED", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMProfileQPSKEnable.setStatus('current')
modemACMProfileQAM16Enable = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("DISABLED", 0), ("ENABLED", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMProfileQAM16Enable.setStatus('current')
modemACMProfileQAM32Enable = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("DISABLED", 0), ("ENABLED", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMProfileQAM32Enable.setStatus('current')
modemACMProfileQAM64Enable = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("DISABLED", 0), ("ENABLED", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMProfileQAM64Enable.setStatus('current')
modemACMProfileQAM128Enable = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("DISABLED", 0), ("ENABLED", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMProfileQAM128Enable.setStatus('current')
modemACMProfileQAM256Enable = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("DISABLED", 0), ("ENABLED", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMProfileQAM256Enable.setStatus('current')
acmMSEImprove = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 3))
modemACMQPSKMSEImprove = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 3, 1), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMQPSKMSEImprove.setStatus('current')
modemACMQAM16MSEImprove = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 3, 2), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMQAM16MSEImprove.setStatus('current')
modemACMQAM32MSEImprove = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 3, 3), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMQAM32MSEImprove.setStatus('current')
modemACMQAM64MSEImprove = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 3, 4), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMQAM64MSEImprove.setStatus('current')
modemACMQAM128MSEImprove = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 3, 5), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMQAM128MSEImprove.setStatus('current')
modemACMQAM256MSEImprove = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 3, 6), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMQAM256MSEImprove.setStatus('current')
acmMSEDegrade = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 4))
modemACMQPSKMSEDegrade = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 4, 1), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMQPSKMSEDegrade.setStatus('current')
modemACMQAM16MSEDegrade = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 4, 2), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMQAM16MSEDegrade.setStatus('current')
modemACMQAM32MSEDegrade = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 4, 3), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMQAM32MSEDegrade.setStatus('current')
modemACMQAM64MSEDegrade = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 4, 4), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMQAM64MSEDegrade.setStatus('current')
modemACMQAM128MSEDegrade = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 4, 5), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMQAM128MSEDegrade.setStatus('current')
modemACMQAM256MSEDegrade = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 7, 4, 6), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMQAM256MSEDegrade.setStatus('current')
profile = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 8))
modemACMTxProfile = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMTxProfile.setStatus('current')
modemACMRxProfile = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 60, 2, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemACMRxProfile.setStatus('current')
mibBuilder.exportSymbols("TRANGO-APEX-MODEM-MIB", acmprofile=acmprofile, modemACMQAM256MSEDegrade=modemACMQAM256MSEDegrade, modemACMQPSKMSEDegrade=modemACMQPSKMSEDegrade, modemFER=modemFER, modemACMQAM256MSEImprove=modemACMQAM256MSEImprove, modemLdpcLock=modemLdpcLock, modemACMQAM16MSEDegrade=modemACMQAM16MSEDegrade, modemACMRxProfile=modemACMRxProfile, modemMSE=modemMSE, modem=modem, modemDataPattern=modemDataPattern, modemACMQAM128MSEDegrade=modemACMQAM128MSEDegrade, modemLoopbackMode=modemLoopbackMode, modemACMQAM32MSEImprove=modemACMQAM32MSEImprove, modemReserved=modemReserved, modemBER=modemBER, profile=profile, modemACMQAM64MSEImprove=modemACMQAM64MSEImprove, modemACMProfileQAM256Enable=modemACMProfileQAM256Enable, lock=lock, modemACMEnable=modemACMEnable, modemTimingLock=modemTimingLock, modemACMQAM64MSEDegrade=modemACMQAM64MSEDegrade, modemACMQAM128MSEImprove=modemACMQAM128MSEImprove, modemACMProfileQAM64Enable=modemACMProfileQAM64Enable, modemACMQAM16MSEImprove=modemACMQAM16MSEImprove, modemACMProfileQAM32Enable=modemACMProfileQAM32Enable, modemACMTxProfile=modemACMTxProfile, modemACMQAM32MSEDegrade=modemACMQAM32MSEDegrade, acmMSEDegrade=acmMSEDegrade, acmMSEImprove=acmMSEImprove, modemPreambleLock=modemPreambleLock, modemACMProfileQAM128Enable=modemACMProfileQAM128Enable, modemACMProfileQAM16Enable=modemACMProfileQAM16Enable, modemLockStatus=modemLockStatus, modemACMProfileQPSKEnable=modemACMProfileQPSKEnable, acm=acm, modemACMQPSKMSEImprove=modemACMQPSKMSEImprove)
