#
# PySNMP MIB module ERI-DNX-NEST-SYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ERI-DNX-NEST-SYS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:51:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
dnx, trapSequence, sysMgr, dnxTrapEnterprise, database, DecisionType, NestSlotAddress, devices, UnsignedInt = mibBuilder.importSymbols("ERI-DNX-SMC-MIB", "dnx", "trapSequence", "sysMgr", "dnxTrapEnterprise", "database", "DecisionType", "NestSlotAddress", "devices", "UnsignedInt")
eriMibs, = mibBuilder.importSymbols("ERI-ROOT-SMI", "eriMibs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Gauge32, Counter32, TimeTicks, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, Counter64, ModuleIdentity, Unsigned32, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Counter32", "TimeTicks", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "Counter64", "ModuleIdentity", "Unsigned32", "NotificationType", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
eriDNXNestSysMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 644, 3, 14))
eriDNXNestSysMIB.setRevisions(('2003-07-17 00:00', '2002-05-13 00:00',))
if mibBuilder.loadTexts: eriDNXNestSysMIB.setLastUpdated('200307170000Z')
if mibBuilder.loadTexts: eriDNXNestSysMIB.setOrganization('Eastern Research, Inc.')
class DnxSlotDeviceType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31))
    namedValues = NamedValues(("slot", 0), ("octal-t1e1", 1), ("quadHighSpeed", 2), ("octalHighSpeed", 3), ("quadOcu", 4), ("smc", 5), ("quad-t1", 6), ("ds3", 7), ("testAccess", 8), ("octalVoice", 9), ("powerSupply", 14), ("psx", 15), ("router", 16), ("sts1", 17), ("hds3", 18), ("gr303", 19), ("xcc", 20), ("xlc", 21), ("xnm", 22), ("ds0dp", 25), ("stm1", 26), ("oc3", 27), ("e3", 28), ("xlc-ot1e1", 29), ("stm1X", 30), ("oc3X", 31))

class DnxSlotDeviceState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("not-present", 0), ("online", 1), ("offline", 2), ("disabled", 3), ("standby", 4), ("defective", 5), ("busError", 6), ("outOfService", 7), ("configError", 8), ("online-online", 11), ("online-offline", 12), ("online-standby", 13), ("online-defective", 14), ("online-busError", 15), ("online-oos", 16), ("standby-online", 17), ("standby-offline", 18), ("standby-standby", 19), ("standby-defective", 20), ("standby-busError", 21), ("standby-oos", 22), ("online-cfgError", 23), ("standby-cfgError", 24))

slotConfigTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 3), )
if mibBuilder.loadTexts: slotConfigTable.setStatus('current')
slotConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 3, 1), ).setIndexNames((0, "ERI-DNX-NEST-SYS-MIB", "slotNbr"))
if mibBuilder.loadTexts: slotConfigEntry.setStatus('current')
slotNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotNbr.setStatus('current')
slotConfigDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 3, 1, 2), DnxSlotDeviceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotConfigDeviceType.setStatus('current')
slotActualDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 3, 1, 3), DnxSlotDeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotActualDeviceType.setStatus('current')
slotDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 3, 1, 4), DnxSlotDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotDeviceState.setStatus('current')
slotAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 99))).clone(namedValues=NamedValues(("no-alarm", 0), ("minor-level", 1), ("major-level", 2), ("major-minor", 3), ("critical-level", 4), ("critical-minor", 5), ("critical-major", 6), ("critical-major-minor", 7), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotAlarmLevel.setStatus('current')
slotDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotDeviceName.setStatus('current')
slotDeviceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotDeviceVersion.setStatus('current')
slotDeviceRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotDeviceRedundancy.setStatus('current')
slotMiscState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("errors", 1), ("test", 2), ("errors-test", 3), ("clockSrc", 4), ("errors-clockSrc", 5), ("test-clockSrc", 6), ("errors-test-clockSrc", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotMiscState.setStatus('current')
slotConfigCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 10, 11, 101, 102, 110, 111, 200, 201, 202, 203, 204, 205, 207, 208, 450, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update-slot-config", 1), ("delete-slot-config", 2), ("ndr-switchover", 10), ("ndr-restore", 11), ("update-successful", 101), ("delete-successful", 102), ("switch-successful", 110), ("restore-successful", 111), ("err-general-slot-config-error", 200), ("err-invalid-slot-type", 201), ("err-invalid-slot-command", 202), ("err-invalid-slot-name", 203), ("err-redundancy-disabled", 204), ("err-cannot-chg-sys-device", 205), ("err-invalid-redundancy-state", 207), ("err-cannot-delete-online-device", 208), ("err-data-locked-by-another-user", 450), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotConfigCmdStatus.setStatus('current')
numberSlots = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberSlots.setStatus('obsolete')
softwareRelease = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareRelease.setStatus('obsolete')
redundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 9))
ndrEnabled = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 9, 1), DecisionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ndrEnabled.setStatus('current')
ndrState = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("frozen", 2), ("delayed", 3), ("enabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndrState.setStatus('current')
ndrAutoSwitchover = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("manual", 0), ("automatic", 1), ("narrowband-auto", 2), ("broadband-1-auto", 3), ("broadband-2-auto", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ndrAutoSwitchover.setStatus('current')
ndrAutoRestore = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("manual", 0), ("automatic", 1), ("narrowband-auto", 2), ("broadband-1-auto", 3), ("broadband-2-auto", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndrAutoRestore.setStatus('current')
ndrBroadbandGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndrBroadbandGroup1.setStatus('current')
ndrNarrowbandGroup = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndrNarrowbandGroup.setStatus('current')
ndrBroadbandGroup1Protected = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(8, 10), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndrBroadbandGroup1Protected.setStatus('current')
ndrNarrowbandProtected = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 11), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndrNarrowbandProtected.setStatus('current')
ndrBroadbandGroup1Type = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 18, 21, 31))).clone(namedValues=NamedValues(("ds3", 8), ("sts1", 18), ("hds3", 21), ("e3", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ndrBroadbandGroup1Type.setStatus('current')
ndrNarrowbandType = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 9, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(13, 22))).clone(namedValues=NamedValues(("octalT1E1", 13), ("gr303", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndrNarrowbandType.setStatus('current')
ndrDualBroadbandEnabled = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 9, 11), DecisionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ndrDualBroadbandEnabled.setStatus('current')
ndrBroadbandGroup2 = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 9, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndrBroadbandGroup2.setStatus('current')
ndrBroadbandGroup2Protected = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 9, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ndrBroadbandGroup2Protected.setStatus('current')
ndrBroadbandGroup2Type = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 9, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 18, 21, 31))).clone(namedValues=NamedValues(("ds3", 8), ("sts1", 18), ("hds3", 21), ("e3", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ndrBroadbandGroup2Type.setStatus('current')
ndrPsxChassisType = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 9, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("psx5200", 0), ("psx5300", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ndrPsxChassisType.setStatus('current')
upgradeSw = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 10))
devDownloadTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 10, 1), )
if mibBuilder.loadTexts: devDownloadTable.setStatus('current')
devDownloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 10, 1, 1), ).setIndexNames((0, "ERI-DNX-NEST-SYS-MIB", "programFileIndex"))
if mibBuilder.loadTexts: devDownloadEntry.setStatus('current')
programFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: programFileIndex.setStatus('current')
programFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: programFileName.setStatus('current')
programFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: programFileSize.setStatus('current')
programLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loadingProgramFile", 1), ("readyForProgramLoad", 2), ("swDownloadNotReady", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: programLoadStatus.setStatus('current')
programLoadInitiator = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 10, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: programLoadInitiator.setStatus('current')
programBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: programBytesSent.setStatus('current')
programSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 10, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: programSlotNumber.setStatus('current')
programFileCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 414, 450, 500, 501, 502))).clone(namedValues=NamedValues(("loadProgramFile", 1), ("loadProgramToAll", 2), ("deleteProgramFile", 4), ("readyForCommand", 5), ("err-invalid-slot-nbr", 6), ("noProgramFile", 7), ("programFileBusy", 8), ("noError", 9), ("slotNotReady", 10), ("programFileIdle", 12), ("err-invalid-nest-nbr", 13), ("err-invalid-command", 414), ("err-data-locked-by-another-user", 450), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: programFileCommand.setStatus('current')
programNestNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 10))).clone(namedValues=NamedValues(("nest1", 0), ("nest2", 1), ("nest3", 2), ("nest4", 3), ("nest5", 4), ("nest6", 5), ("nest7", 6), ("nest8", 7), ("allNests", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: programNestNumber.setStatus('current')
eXpansionNestAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11))
xNestCfgTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 1), )
if mibBuilder.loadTexts: xNestCfgTable.setStatus('current')
xNestCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 1, 1), ).setIndexNames((0, "ERI-DNX-NEST-SYS-MIB", "xNestIndex"))
if mibBuilder.loadTexts: xNestCfgEntry.setStatus('current')
xNestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xNestIndex.setStatus('current')
xNestUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xNestUnitName.setStatus('current')
xNestType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notConfig", 0), ("dnx4", 1), ("dnx11", 2), ("stm1X-oc3X", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xNestType.setStatus('current')
xNestState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 8, 12, 16, 32))).clone(namedValues=NamedValues(("mismatch", 2), ("notPresent", 8), ("missing", 12), ("online", 16), ("offline", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xNestState.setStatus('current')
xNestAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 99))).clone(namedValues=NamedValues(("no-alarm", 0), ("minor-level", 1), ("major-level", 2), ("major-minor", 3), ("critical-level", 4), ("critical-minor", 5), ("critical-major", 6), ("critical-major-minor", 7), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xNestAlarmStatus.setStatus('current')
xNestDeviceCards = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xNestDeviceCards.setStatus('current')
xNestNDRCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 1, 1, 7), DecisionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xNestNDRCapable.setStatus('current')
xNestAlarmContacts = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("standard", 0), ("localAudio1", 1), ("localAudio2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xNestAlarmContacts.setStatus('current')
xNestDualSMCs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 1, 1, 9), DecisionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xNestDualSMCs.setStatus('current')
xNestDualXccXlc = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 1, 1, 10), DecisionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xNestDualXccXlc.setStatus('current')
xNestCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 101, 102, 103, 104, 105, 106, 107, 200, 201, 202, 203, 204, 205, 206, 207, 208, 450, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update-nest-config", 1), ("delete-nest-config", 2), ("switch-mgr-cards", 3), ("reset-device-cards", 4), ("clear-device-errors", 5), ("switch-xcc-cards", 6), ("switch-xlink-cards", 7), ("update-successful", 101), ("delete-successful", 102), ("switch-mgr-successful", 103), ("reset-successful", 104), ("clear-successful", 105), ("switch-xcc-successful", 106), ("switch-xlink-successful", 107), ("err-general-nest-config-error", 200), ("err-invalid-nest-type", 201), ("err-invalid-nest-command", 202), ("err-invalid-nest-name", 203), ("err-invalid-nest-alrm", 204), ("err-invalid-nest-ndr", 205), ("err-invalid-nest-option", 206), ("err-cannot-delete-online-nest", 207), ("err-nest-not-present", 208), ("err-data-locked-by-another-user", 450), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xNestCmdStatus.setStatus('current')
xNestDualPower = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 1, 1, 12), DecisionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xNestDualPower.setStatus('current')
xSlotTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 2), )
if mibBuilder.loadTexts: xSlotTable.setStatus('current')
xSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 2, 1), ).setIndexNames((0, "ERI-DNX-NEST-SYS-MIB", "xSlotNestAddr"))
if mibBuilder.loadTexts: xSlotEntry.setStatus('current')
xSlotNestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 2, 1, 1), NestSlotAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xSlotNestAddr.setStatus('current')
xSlotDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 2, 1, 2), DnxSlotDeviceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xSlotDeviceType.setStatus('current')
xSlotActualDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 2, 1, 3), DnxSlotDeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xSlotActualDeviceType.setStatus('current')
xSlotDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 2, 1, 4), DnxSlotDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xSlotDeviceState.setStatus('current')
xSlotAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 99))).clone(namedValues=NamedValues(("no-alarm", 0), ("minor-level", 1), ("major-level", 2), ("major-minor", 3), ("critical-level", 4), ("critical-minor", 5), ("critical-major", 6), ("critical-major-minor", 7), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xSlotAlarmLevel.setStatus('current')
xSlotDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xSlotDeviceName.setStatus('current')
xSlotDeviceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xSlotDeviceVersion.setStatus('current')
xSlotDeviceRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xSlotDeviceRedundancy.setStatus('current')
xSlotMiscState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("errors", 1), ("test", 2), ("errors-test", 3), ("clockSrc", 4), ("errors-clockSrc", 5), ("test-clockSrc", 6), ("errors-test-clockSrc", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xSlotMiscState.setStatus('current')
xSlotCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 10, 11, 101, 102, 110, 111, 200, 201, 202, 203, 204, 205, 207, 208, 450, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update-slot-config", 1), ("delete-slot-config", 2), ("ndr-switchover", 10), ("ndr-restore", 11), ("update-successful", 101), ("delete-successful", 102), ("switch-successful", 110), ("restore-successful", 111), ("err-general-slot-config-error", 200), ("err-invalid-slot-type", 201), ("err-invalid-slot-command", 202), ("err-invalid-slot-name", 203), ("err-redundancy-disabled", 204), ("err-cannot-chg-sys-device", 205), ("err-invalid-redundancy-state", 207), ("err-cannot-delete-online-device", 208), ("err-data-locked-by-another-user", 450), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xSlotCmdStatus.setStatus('current')
xSlotRawDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 2, 1, 11), UnsignedInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xSlotRawDeviceState.setStatus('current')
xNdrTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 3), )
if mibBuilder.loadTexts: xNdrTable.setStatus('current')
xNdrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 3, 1), ).setIndexNames((0, "ERI-DNX-NEST-SYS-MIB", "xNdrNestIndex"))
if mibBuilder.loadTexts: xNdrEntry.setStatus('current')
xNdrNestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xNdrNestIndex.setStatus('current')
xNdrState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("frozen", 2), ("delayed", 3), ("enabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xNdrState.setStatus('current')
xNdrAutoSwitchover = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("manual", 0), ("automatic", 1), ("narrowband-auto", 2), ("broadband-1-auto", 3), ("broadband-2-auto", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xNdrAutoSwitchover.setStatus('current')
xNdrAutoRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("manual", 0), ("automatic", 1), ("narrowband-auto", 2), ("broadband-1-auto", 3), ("broadband-2-auto", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xNdrAutoRestore.setStatus('current')
xNdrBroadbandGroup1 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xNdrBroadbandGroup1.setStatus('current')
xNdrNarrowbandGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xNdrNarrowbandGroup.setStatus('current')
xNdrBroadbandGroup1Protected = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(8, 10), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xNdrBroadbandGroup1Protected.setStatus('current')
xNdrNarrowbandProtected = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 11), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xNdrNarrowbandProtected.setStatus('current')
xNdrBroadbandGroup1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 18, 21, 31))).clone(namedValues=NamedValues(("ds3", 8), ("sts1", 18), ("hds3", 21), ("e3", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xNdrBroadbandGroup1Type.setStatus('current')
xNdrNarrowbandType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(13, 22))).clone(namedValues=NamedValues(("octalT1E1", 13), ("gr303", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xNdrNarrowbandType.setStatus('current')
xNdrDualBroadbandEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 3, 1, 11), DecisionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xNdrDualBroadbandEnabled.setStatus('current')
xNdrBroadbandGroup2 = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xNdrBroadbandGroup2.setStatus('current')
xNdrBroadbandGroup2Protected = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xNdrBroadbandGroup2Protected.setStatus('current')
xNdrBroadbandGroup2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 18, 21, 31))).clone(namedValues=NamedValues(("ds3", 8), ("sts1", 18), ("hds3", 21), ("e3", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xNdrBroadbandGroup2Type.setStatus('current')
xNdrPsxChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("psx5200", 0), ("psx5300", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xNdrPsxChassisType.setStatus('current')
xNdrCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 101, 200, 201, 202, 203, 204, 205, 206, 450, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update-ndr", 1), ("update-successful", 101), ("err-general-ndr-config-error", 200), ("err-invalid-ndr-group-type", 201), ("err-invalid-ndr-command", 202), ("err-invalid-ndr-autoswitch", 203), ("err-invalid-ndr-chassis", 204), ("err-invalid-ndr-dual-bb", 205), ("err-invalid-ndr-dual-psx", 206), ("err-data-locked-by-another-user", 450), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xNdrCmdStatus.setStatus('current')
xNdrDualPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 11, 3, 1, 17), DecisionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xNdrDualPowerSupply.setStatus('current')
dbSyncronize = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 1, 2))
dbAutoSyncMode = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 1, 2, 1), DecisionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbAutoSyncMode.setStatus('current')
dbSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inSync", 1), ("notInSync", 2), ("syncInProgress", 3), ("autoSyncOff", 4), ("standByNotPresent", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbSyncStatus.setStatus('current')
dbSyncProgressTime = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbSyncProgressTime.setStatus('current')
dbSyncCmdStatus = MibScalar((1, 3, 6, 1, 4, 1, 644, 2, 4, 1, 12, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 101, 102, 120, 200, 201, 202, 203, 204, 450, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update", 1), ("startDBSync", 2), ("update-successful", 101), ("sync-start-successful", 102), ("sync-completed-successful", 120), ("err-gen-dbsync-cfg-error", 200), ("err-standby-not-present", 201), ("err-dbsync-failed", 202), ("err-invalid-dbsync-command", 203), ("err-invalid-dbsync-mode", 204), ("err-data-locked-by-another-user", 450), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbSyncCmdStatus.setStatus('current')
deviceAboutTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 225), )
if mibBuilder.loadTexts: deviceAboutTable.setStatus('current')
deviceAboutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 225, 1), ).setIndexNames((0, "ERI-DNX-NEST-SYS-MIB", "devCardAddress"))
if mibBuilder.loadTexts: deviceAboutEntry.setStatus('current')
devCardAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 225, 1, 1), NestSlotAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devCardAddress.setStatus('current')
devSwReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 225, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devSwReleaseDate.setStatus('current')
devSwChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 225, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devSwChecksum.setStatus('current')
devFrontCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 225, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFrontCardType.setStatus('current')
devFrontCardRev = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 225, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFrontCardRev.setStatus('current')
devXilinxVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 225, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devXilinxVersion.setStatus('current')
devRearCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 225, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devRearCardType.setStatus('current')
devRearCardRev = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 225, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devRearCardRev.setStatus('current')
devSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 225, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devSwVersion.setStatus('current')
slotConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 0, 5)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-NEST-SYS-MIB", "slotNbr"), ("ERI-DNX-NEST-SYS-MIB", "slotConfigCmdStatus"), ("ERI-DNX-NEST-SYS-MIB", "xNestIndex"))
if mibBuilder.loadTexts: slotConfigTrap.setStatus('current')
ndrGroupStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 0, 8)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-NEST-SYS-MIB", "ndrState"), ("ERI-DNX-NEST-SYS-MIB", "ndrBroadbandGroup1"), ("ERI-DNX-NEST-SYS-MIB", "ndrNarrowbandGroup"), ("ERI-DNX-NEST-SYS-MIB", "ndrBroadbandGroup2"), ("ERI-DNX-NEST-SYS-MIB", "xNdrNestIndex"))
if mibBuilder.loadTexts: ndrGroupStatusTrap.setStatus('current')
nestConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 0, 9)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-NEST-SYS-MIB", "xNestIndex"), ("ERI-DNX-NEST-SYS-MIB", "xNestType"), ("ERI-DNX-NEST-SYS-MIB", "xNestCmdStatus"), ("ERI-DNX-NEST-SYS-MIB", "xNestUnitName"))
if mibBuilder.loadTexts: nestConfigTrap.setStatus('current')
dbSyncProgressTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 0, 12)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-NEST-SYS-MIB", "dbSyncStatus"), ("ERI-DNX-NEST-SYS-MIB", "dbSyncCmdStatus"))
if mibBuilder.loadTexts: dbSyncProgressTrap.setStatus('current')
mibBuilder.exportSymbols("ERI-DNX-NEST-SYS-MIB", ndrBroadbandGroup1Protected=ndrBroadbandGroup1Protected, programSlotNumber=programSlotNumber, programLoadInitiator=programLoadInitiator, xNdrBroadbandGroup1=xNdrBroadbandGroup1, ndrBroadbandGroup2Type=ndrBroadbandGroup2Type, xNdrTable=xNdrTable, xSlotDeviceRedundancy=xSlotDeviceRedundancy, programFileIndex=programFileIndex, xNdrPsxChassisType=xNdrPsxChassisType, dbAutoSyncMode=dbAutoSyncMode, xNdrBroadbandGroup2=xNdrBroadbandGroup2, xNestAlarmStatus=xNestAlarmStatus, dbSyncCmdStatus=dbSyncCmdStatus, deviceAboutTable=deviceAboutTable, xSlotRawDeviceState=xSlotRawDeviceState, xNdrBroadbandGroup1Protected=xNdrBroadbandGroup1Protected, xNdrBroadbandGroup2Type=xNdrBroadbandGroup2Type, xNestUnitName=xNestUnitName, ndrDualBroadbandEnabled=ndrDualBroadbandEnabled, xNdrDualBroadbandEnabled=xNdrDualBroadbandEnabled, xNdrBroadbandGroup1Type=xNdrBroadbandGroup1Type, dbSyncronize=dbSyncronize, xNdrNarrowbandProtected=xNdrNarrowbandProtected, xSlotDeviceType=xSlotDeviceType, slotConfigCmdStatus=slotConfigCmdStatus, ndrBroadbandGroup1Type=ndrBroadbandGroup1Type, slotNbr=slotNbr, xSlotActualDeviceType=xSlotActualDeviceType, slotMiscState=slotMiscState, xNdrCmdStatus=xNdrCmdStatus, xNestCmdStatus=xNestCmdStatus, programFileCommand=programFileCommand, programFileName=programFileName, slotActualDeviceType=slotActualDeviceType, dbSyncStatus=dbSyncStatus, dbSyncProgressTime=dbSyncProgressTime, PYSNMP_MODULE_ID=eriDNXNestSysMIB, softwareRelease=softwareRelease, programFileSize=programFileSize, devRearCardType=devRearCardType, xSlotCmdStatus=xSlotCmdStatus, slotConfigTable=slotConfigTable, numberSlots=numberSlots, slotDeviceVersion=slotDeviceVersion, xNestIndex=xNestIndex, ndrBroadbandGroup2=ndrBroadbandGroup2, xNdrState=xNdrState, ndrNarrowbandType=ndrNarrowbandType, xSlotDeviceName=xSlotDeviceName, xNdrAutoSwitchover=xNdrAutoSwitchover, slotDeviceRedundancy=slotDeviceRedundancy, ndrGroupStatusTrap=ndrGroupStatusTrap, devSwVersion=devSwVersion, slotAlarmLevel=slotAlarmLevel, eriDNXNestSysMIB=eriDNXNestSysMIB, upgradeSw=upgradeSw, xNestAlarmContacts=xNestAlarmContacts, dbSyncProgressTrap=dbSyncProgressTrap, xSlotEntry=xSlotEntry, xNdrDualPowerSupply=xNdrDualPowerSupply, devDownloadEntry=devDownloadEntry, devRearCardRev=devRearCardRev, xNestType=xNestType, programLoadStatus=programLoadStatus, xNestDeviceCards=xNestDeviceCards, xNdrNarrowbandGroup=xNdrNarrowbandGroup, programNestNumber=programNestNumber, slotConfigDeviceType=slotConfigDeviceType, xNestDualSMCs=xNestDualSMCs, devDownloadTable=devDownloadTable, DnxSlotDeviceType=DnxSlotDeviceType, xSlotDeviceVersion=xSlotDeviceVersion, xNestState=xNestState, xNdrNestIndex=xNdrNestIndex, slotDeviceState=slotDeviceState, ndrBroadbandGroup1=ndrBroadbandGroup1, xSlotTable=xSlotTable, slotDeviceName=slotDeviceName, xNestDualPower=xNestDualPower, xNdrEntry=xNdrEntry, slotConfigEntry=slotConfigEntry, xNestNDRCapable=xNestNDRCapable, xNdrAutoRestore=xNdrAutoRestore, DnxSlotDeviceState=DnxSlotDeviceState, devSwChecksum=devSwChecksum, ndrNarrowbandGroup=ndrNarrowbandGroup, ndrBroadbandGroup2Protected=ndrBroadbandGroup2Protected, devSwReleaseDate=devSwReleaseDate, ndrAutoRestore=ndrAutoRestore, devFrontCardRev=devFrontCardRev, xNdrNarrowbandType=xNdrNarrowbandType, ndrEnabled=ndrEnabled, xSlotDeviceState=xSlotDeviceState, xNestCfgTable=xNestCfgTable, ndrPsxChassisType=ndrPsxChassisType, xSlotMiscState=xSlotMiscState, redundancy=redundancy, programBytesSent=programBytesSent, xSlotAlarmLevel=xSlotAlarmLevel, devCardAddress=devCardAddress, nestConfigTrap=nestConfigTrap, xNestDualXccXlc=xNestDualXccXlc, slotConfigTrap=slotConfigTrap, ndrAutoSwitchover=ndrAutoSwitchover, devFrontCardType=devFrontCardType, devXilinxVersion=devXilinxVersion, deviceAboutEntry=deviceAboutEntry, eXpansionNestAdmin=eXpansionNestAdmin, xSlotNestAddr=xSlotNestAddr, xNdrBroadbandGroup2Protected=xNdrBroadbandGroup2Protected, ndrNarrowbandProtected=ndrNarrowbandProtected, xNestCfgEntry=xNestCfgEntry, ndrState=ndrState)
