#
# PySNMP MIB module ETH-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ETH-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:52:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, enterprises, TimeTicks, iso, NotificationType, MibIdentifier, Bits, Unsigned32, Integer32, Counter64, ObjectIdentity, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "enterprises", "TimeTicks", "iso", "NotificationType", "MibIdentifier", "Bits", "Unsigned32", "Integer32", "Counter64", "ObjectIdentity", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class DisplayString(OctetString):
    pass

cdx6500PPCTdot3PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8), )
if mibBuilder.loadTexts: cdx6500PPCTdot3PortTable.setStatus('mandatory')
cdx6500PPCTdot3PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1), ).setIndexNames((0, "ETH-OPT-MIB", "cdx6500dot3IfIndex"))
if mibBuilder.loadTexts: cdx6500PPCTdot3PortEntry.setStatus('mandatory')
cdx6500dot3IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3IfIndex.setStatus('mandatory')
cdx6500dot3LanCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("aui", 2), ("utp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500dot3LanCableType.setStatus('mandatory')
cdx6500dot3PortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500dot3PortMacAddress.setStatus('mandatory')
cdx6500dot3TransmitQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500dot3TransmitQueueLimit.setStatus('mandatory')
cdx6500dot3CollisionSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500dot3CollisionSensitivity.setStatus('mandatory')
cdx6500dot3CarrierSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500dot3CarrierSensitivity.setStatus('mandatory')
cdx6500dot3BridgeLinkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500dot3BridgeLinkNum.setStatus('mandatory')
cdx6500dot3RouterIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500dot3RouterIfNum.setStatus('mandatory')
cdx6500dot3DuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500dot3DuplexMode.setStatus('mandatory')
cdx6500PPSTdot3PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8), )
if mibBuilder.loadTexts: cdx6500PPSTdot3PortTable.setStatus('mandatory')
cdx6500PPSTdot3PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1), ).setIndexNames((0, "ETH-OPT-MIB", "cdx6500dot3StatsIfIndex"))
if mibBuilder.loadTexts: cdx6500PPSTdot3PortEntry.setStatus('mandatory')
cdx6500dot3StatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsIfIndex.setStatus('mandatory')
cdx6500dot3StatsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30))).clone(namedValues=NamedValues(("eth", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsPortType.setStatus('mandatory')
cdx6500dot3StatsRxShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsRxShortFrames.setStatus('mandatory')
cdx6500dot3StatsRxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsRxCollisions.setStatus('mandatory')
cdx6500dot3StatsRxLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsRxLongFrames.setStatus('mandatory')
cdx6500dot3StatsTxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsTxDiscards.setStatus('mandatory')
cdx6500dot3StatsDataBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsDataBytesRx.setStatus('mandatory')
cdx6500dot3StatsDataBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsDataBytesTx.setStatus('mandatory')
cdx6500dot3StatsPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("up", 3), ("down", 4), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsPortStatus.setStatus('mandatory')
cdx6500dot3StatsLastStatReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3StatsLastStatReset.setStatus('mandatory')
cdx6500dot3StatsClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500dot3StatsClearStats.setStatus('mandatory')
cdx6500dot3StatsCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("boot", 2), ("disable", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500dot3StatsCommand.setStatus('mandatory')
cdx6500dot3Statsframesin = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3Statsframesin.setStatus('mandatory')
cdx6500dot3Statsframesout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3Statsframesout.setStatus('mandatory')
cdx6500dot3Statsfpsin = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3Statsfpsin.setStatus('mandatory')
cdx6500dot3Statsfpsout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3Statsfpsout.setStatus('mandatory')
cdx6500dot3Statshadiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500dot3Statshadiscards.setStatus('mandatory')
mibBuilder.exportSymbols("ETH-OPT-MIB", cdx6500dot3DuplexMode=cdx6500dot3DuplexMode, cdx6500dot3BridgeLinkNum=cdx6500dot3BridgeLinkNum, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500dot3StatsCommand=cdx6500dot3StatsCommand, cdx6500dot3StatsLastStatReset=cdx6500dot3StatsLastStatReset, cdx6500=cdx6500, cdx6500dot3Statshadiscards=cdx6500dot3Statshadiscards, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500dot3StatsPortType=cdx6500dot3StatsPortType, cdx6500dot3PortMacAddress=cdx6500dot3PortMacAddress, cdx6500dot3Statsframesout=cdx6500dot3Statsframesout, cdx6500dot3Statsfpsin=cdx6500dot3Statsfpsin, cdx6500Statistics=cdx6500Statistics, cdx6500dot3TransmitQueueLimit=cdx6500dot3TransmitQueueLimit, cdx6500dot3StatsPortStatus=cdx6500dot3StatsPortStatus, cdx6500dot3RouterIfNum=cdx6500dot3RouterIfNum, cdx6500dot3IfIndex=cdx6500dot3IfIndex, cdx6500dot3LanCableType=cdx6500dot3LanCableType, cdxProductSpecific=cdxProductSpecific, cdx6500dot3StatsTxDiscards=cdx6500dot3StatsTxDiscards, cdx6500dot3StatsRxShortFrames=cdx6500dot3StatsRxShortFrames, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500dot3Statsfpsout=cdx6500dot3Statsfpsout, cdx6500Configuration=cdx6500Configuration, MacAddress=MacAddress, cdx6500dot3CollisionSensitivity=cdx6500dot3CollisionSensitivity, cdx6500dot3StatsRxCollisions=cdx6500dot3StatsRxCollisions, cdx6500dot3StatsRxLongFrames=cdx6500dot3StatsRxLongFrames, cdx6500PPCTdot3PortEntry=cdx6500PPCTdot3PortEntry, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500dot3StatsDataBytesRx=cdx6500dot3StatsDataBytesRx, codex=codex, cdx6500dot3Statsframesin=cdx6500dot3Statsframesin, cdx6500PPCTdot3PortTable=cdx6500PPCTdot3PortTable, cdx6500dot3CarrierSensitivity=cdx6500dot3CarrierSensitivity, cdx6500dot3StatsIfIndex=cdx6500dot3StatsIfIndex, cdx6500dot3StatsClearStats=cdx6500dot3StatsClearStats, cdx6500PPSTdot3PortTable=cdx6500PPSTdot3PortTable, cdx6500PPSTdot3PortEntry=cdx6500PPSTdot3PortEntry, DisplayString=DisplayString, cdx6500dot3StatsDataBytesTx=cdx6500dot3StatsDataBytesTx)
