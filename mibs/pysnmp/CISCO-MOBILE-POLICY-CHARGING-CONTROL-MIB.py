#
# PySNMP MIB module CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:50:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
TimeIntervalSec, = mibBuilder.importSymbols("CISCO-TC", "TimeIntervalSec")
entPhysicalIndex, entPhysicalName = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "entPhysicalName")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, ObjectIdentity, IpAddress, ModuleIdentity, Counter64, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, Integer32, Counter32, MibIdentifier, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "IpAddress", "ModuleIdentity", "Counter64", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "Integer32", "Counter32", "MibIdentifier", "iso", "Gauge32")
RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
ciscoMobilePolicyChargingControlMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 690))
ciscoMobilePolicyChargingControlMIB.setRevisions(('2009-07-10 00:00', '2009-01-08 00:00',))
if mibBuilder.loadTexts: ciscoMobilePolicyChargingControlMIB.setLastUpdated('200907100000Z')
if mibBuilder.loadTexts: ciscoMobilePolicyChargingControlMIB.setOrganization('Cisco Systems, Inc.')
ciscoMobilePolicyChargingControlMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 690, 0))
ciscoMobilePolicyChargingControlMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 690, 1))
cMobilePolicyChargingControlMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 690, 2))
cMobilePolicyChargingControlMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 690, 2, 1))
cmpccConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 1))
cmpccStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2))
cmpccNotifConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 3))
cmpccPreloadErrorNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmpccPreloadErrorNotifEnabled.setStatus('current')
cmpccPreloadRollbackFailedNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 3, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmpccPreloadRollbackFailedNotifEnabled.setStatus('current')
cmpccGlobalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 1), )
if mibBuilder.loadTexts: cmpccGlobalStatsTable.setStatus('current')
cmpccGlobalStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cmpccGlobalStatsTableEntry.setStatus('current')
cmpccgsTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 1, 1, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccgsTotalSessions.setStatus('current')
cmpccgsCCRInitialSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccgsCCRInitialSent.setStatus('current')
cmpccgsCCRUpdateSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccgsCCRUpdateSent.setStatus('current')
cmpccgsCCRFinalSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccgsCCRFinalSent.setStatus('current')
cmpccgsCCARecd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccgsCCARecd.setStatus('current')
cmpccgsRARRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccgsRARRecd.setStatus('current')
cmpccgsRAASent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccgsRAASent.setStatus('current')
cmpccgsCCRFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccgsCCRFailures.setStatus('current')
cmpccgsMessageTypeInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccgsMessageTypeInvalid.setStatus('current')
cmpccgsDuplicateRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccgsDuplicateRequests.setStatus('current')
cmpccgsCCAErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccgsCCAErrors.setStatus('current')
cmpccgsRAAFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccgsRAAFailures.setStatus('current')
cmpccgsRARErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccgsRARErrors.setStatus('current')
cmpccgsReqTypeInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccgsReqTypeInvalid.setStatus('current')
cmpccgsReqNumInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccgsReqNumInvalid.setStatus('current')
cmpccgsReqStatusInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccgsReqStatusInvalid.setStatus('current')
cmpccgsSessionIDInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccgsSessionIDInvalid.setStatus('current')
cmpccPCRFMethodListStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2), )
if mibBuilder.loadTexts: cmpccPCRFMethodListStatsTable.setStatus('current')
cmpccPCRFMethodListStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpmlsMethodList"))
if mibBuilder.loadTexts: cmpccPCRFMethodListStatsTableEntry.setStatus('current')
cmpccpmlsMethodList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cmpccpmlsMethodList.setStatus('current')
cmpccpmlsCCRInitialSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccpmlsCCRInitialSent.setStatus('current')
cmpccpmlsCCRUpdateSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccpmlsCCRUpdateSent.setStatus('current')
cmpccpmlsCCRFinalSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccpmlsCCRFinalSent.setStatus('current')
cmpccpmlsCCARecd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccpmlsCCARecd.setStatus('current')
cmpccpmlsRARRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccpmlsRARRecd.setStatus('current')
cmpccpmlsRAASent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccpmlsRAASent.setStatus('current')
cmpccpmlsPCRFReboots = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccpmlsPCRFReboots.setStatus('current')
cmpccpmlsCCRFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccpmlsCCRFailures.setStatus('current')
cmpccpmlsMessageTypeInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccpmlsMessageTypeInvalid.setStatus('current')
cmpccpmlsDuplicateRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccpmlsDuplicateRequests.setStatus('current')
cmpccpmlsCCAErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccpmlsCCAErrors.setStatus('current')
cmpccpmlsRAAFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccpmlsRAAFailures.setStatus('current')
cmpccpmlsRARErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccpmlsRARErrors.setStatus('current')
cmpccpmlsReqTypeInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccpmlsReqTypeInvalid.setStatus('current')
cmpccpmlsReqNumInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccpmlsReqNumInvalid.setStatus('current')
cmpccpmlsReqStatusInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccpmlsReqStatusInvalid.setStatus('current')
cmpccpmlsSessionIDInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccpmlsSessionIDInvalid.setStatus('current')
cmpccPolicyPreloadStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3), )
if mibBuilder.loadTexts: cmpccPolicyPreloadStatsTable.setStatus('current')
cmpccPolicyPreloadStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cmpccPolicyPreloadStatsTableEntry.setStatus('current')
cmpccppsPolicyPreloadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("preloadNotInitiated", 1), ("preloadInProgress", 2), ("preloadFailed", 3), ("preloadTimeout", 4), ("preloadComplete", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsPolicyPreloadStatus.setStatus('current')
cmpccppsPCEFInit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsPCEFInit.setStatus('current')
cmpccppsPCRFInit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsPCRFInit.setStatus('current')
cmpccppsReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsReq.setStatus('current')
cmpccppsRes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsRes.setStatus('current')
cmpccppsGlobalPolicyPush = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsGlobalPolicyPush.setStatus('current')
cmpccppsGlobalPolicyPushAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsGlobalPolicyPushAck.setStatus('current')
cmpccppsErrorState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("preloadInconsistentData", 1), ("preloadAVPMissing", 2), ("preloadEnforceFailure", 3), ("preloadWrongOrderFailure", 4), ("preloadStaticConfigConflict", 5), ("preloadNoError", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsErrorState.setStatus('current')
cmpccppsPreloadDataInconsistent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsPreloadDataInconsistent.setStatus('current')
cmpccppsAVPMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsAVPMissing.setStatus('current')
cmpccppsWrongOrderFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsWrongOrderFailures.setStatus('current')
cmpccppsEnforceFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsEnforceFailures.setStatus('current')
cmpccppsStaticConfigConflicts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsStaticConfigConflicts.setStatus('current')
cmpccppsCCRFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsCCRFailures.setStatus('current')
cmpccppsMessageTypeInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsMessageTypeInvalid.setStatus('current')
cmpccppsCCAErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsCCAErrors.setStatus('current')
cmpccppsRAAFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsRAAFailed.setStatus('current')
cmpccppsRARErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsRARErrors.setStatus('current')
cmpccppsReqTypeInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsReqTypeInvalid.setStatus('current')
cmpccppsReqNumInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsReqNumInvalid.setStatus('current')
cmpccppsReqStatusInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsReqStatusInvalid.setStatus('current')
cmpccppsSessionIDInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsSessionIDInvalid.setStatus('current')
cmpccppsTimeoutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsTimeoutErrors.setStatus('current')
cmpccPolicyPreloadExtStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4), )
if mibBuilder.loadTexts: cmpccPolicyPreloadExtStatsTable.setStatus('current')
cmpccPolicyPreloadExtStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cmpccPolicyPreloadExtStatsTableEntry.setStatus('current')
cmpccppsServiceContentsInserted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsServiceContentsInserted.setStatus('current')
cmpccppsServiceContentsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsServiceContentsDeleted.setStatus('current')
cmpccppsServiceContentsRolledback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsServiceContentsRolledback.setStatus('current')
cmpccppsServiceContentsInsertFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsServiceContentsInsertFailed.setStatus('current')
cmpccppsServiceContentsDeleteFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsServiceContentsDeleteFailed.setStatus('current')
cmpccppsServiceContentsRollbackFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsServiceContentsRollbackFailed.setStatus('current')
cmpccppsAcctPolicyMapsInserted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsAcctPolicyMapsInserted.setStatus('current')
cmpccppsAcctPolicyMapsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsAcctPolicyMapsDeleted.setStatus('current')
cmpccppsAcctPolicyMapsRolledback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsAcctPolicyMapsRolledback.setStatus('current')
cmpccppsAcctPolicyMapsInsertFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsAcctPolicyMapsInsertFailed.setStatus('current')
cmpccppsAcctPolicyMapsDeleteFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsAcctPolicyMapsDeleteFailed.setStatus('current')
cmpccppsAcctPolicyMapsRollbackFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsAcctPolicyMapsRollbackFailed.setStatus('current')
cmpccppsBillingServicesInserted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsBillingServicesInserted.setStatus('current')
cmpccppsBillingServicesDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsBillingServicesDeleted.setStatus('current')
cmpccppsBillingServicesRolledback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsBillingServicesRolledback.setStatus('current')
cmpccppsBillingServicesInsertFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsBillingServicesInsertFailed.setStatus('current')
cmpccppsBillingServicesDeleteFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsBillingServicesDeleteFailed.setStatus('current')
cmpccppsBillingServicesRollbackFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsBillingServicesRollbackFailed.setStatus('current')
cmpccppsContentPoliciesInserted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsContentPoliciesInserted.setStatus('current')
cmpccppsContentPoliciesDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsContentPoliciesDeleted.setStatus('current')
cmpccppsContentPoliciesRolledback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsContentPoliciesRolledback.setStatus('current')
cmpccppsContentPoliciesInsertFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsContentPoliciesInsertFailed.setStatus('current')
cmpccppsContentPoliciesDeleteFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsContentPoliciesDeleteFailed.setStatus('current')
cmpccppsContentPoliciesRollbackFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsContentPoliciesRollbackFailed.setStatus('current')
cmpccppsBillingPlansInserted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsBillingPlansInserted.setStatus('current')
cmpccppsBillingPlansDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsBillingPlansDeleted.setStatus('current')
cmpccppsBillingPlansRolledback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsBillingPlansRolledback.setStatus('current')
cmpccppsBillingPlansInsertFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsBillingPlansInsertFailed.setStatus('current')
cmpccppsBillingPlansDeleteFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsBillingPlansDeleteFailed.setStatus('current')
cmpccppsBillingPlansRollbackFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccppsBillingPlansRollbackFailed.setStatus('current')
cmpccPolicyMismatch = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccPolicyMismatch.setStatus('current')
cmpccRollbackFailedReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("acctPolicyMap", 2), ("contentPolicy", 3), ("serviceContent", 4), ("billingService", 5), ("billingPlan", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpccRollbackFailedReason.setStatus('current')
cmpccProfileConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 1, 1), )
if mibBuilder.loadTexts: cmpccProfileConfigTable.setStatus('current')
cmpccProfileConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpcProfileName"), (0, "CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpcMethodList"))
if mibBuilder.loadTexts: cmpccProfileConfigTableEntry.setStatus('current')
cmpccpcProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: cmpccpcProfileName.setStatus('current')
cmpccpcMethodList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cmpccpcMethodList.setStatus('current')
cmpccpcDestinationRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmpccpcDestinationRealm.setStatus('current')
cmpccpcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmpccpcRowStatus.setStatus('current')
cmpccPreloadEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmpccPreloadEnable.setStatus('current')
cmpccProfileDefault = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmpccProfileDefault.setStatus('current')
cmpccMethodListPreload = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmpccMethodListPreload.setStatus('current')
cmpccDestinationRealmString = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmpccDestinationRealmString.setStatus('current')
cmpccPreloadTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 690, 1, 1, 6), TimeIntervalSec().subtype(subtypeSpec=ValueRangeConstraint(900, 7200)).clone(1800)).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmpccPreloadTimeout.setStatus('current')
ciscoMobilePolicyChargingControlPreloadError = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 690, 0, 1)).setObjects(("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsErrorState"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsPreloadDataInconsistent"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsAVPMissing"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsEnforceFailures"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsStaticConfigConflicts"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsWrongOrderFailures"))
if mibBuilder.loadTexts: ciscoMobilePolicyChargingControlPreloadError.setStatus('current')
cmpccPreloadRollbackFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 690, 0, 2)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccRollbackFailedReason"))
if mibBuilder.loadTexts: cmpccPreloadRollbackFailed.setStatus('current')
cMobilePolicyChargingControlMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 690, 2, 2))
cMobilePolicyChargingControlMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 690, 2, 1, 1)).setObjects(("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cMobilePolicyChargingControlGlobalStatsGroup"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cMobilePolicyChargingControlNotifGroup"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cMobilePolicyChargingControlConfigGroup"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cMobilePolicyChargingControlPCRFMethodListStatsGroup"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cMobilePolicyChargingControlPolicyPreloadStatsGroup"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cMobilePolicyChargingControlNotifEnableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMobilePolicyChargingControlMIBCompliance = cMobilePolicyChargingControlMIBCompliance.setStatus('deprecated')
cMobilePolicyChargingControlMIBCompliancesRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 690, 2, 1, 2)).setObjects(("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cMobilePolicyChargingControlConfigGroup"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cMobilePolicyChargingControlGlobalStatsGroup"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cMobilePolicyChargingControlPCRFMethodListStatsGroup"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cMobilePolicyChargingControlPolicyPreloadStatsGroup"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cMobilePolicyChargingControlNotifGroup"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cMobilePolicyChargingControlNotifEnableGroup"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccStatisticsExtGroup"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccPolicyPreloadNotifGroup"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccPreloadNotifControlGroup"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccPolicyMismatchGroup"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccRollbackFailedGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMobilePolicyChargingControlMIBCompliancesRev1 = cMobilePolicyChargingControlMIBCompliancesRev1.setStatus('current')
cMobilePolicyChargingControlConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 690, 2, 2, 1)).setObjects(("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccPreloadEnable"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccProfileDefault"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccMethodListPreload"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccPreloadTimeout"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpcRowStatus"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccDestinationRealmString"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpcDestinationRealm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMobilePolicyChargingControlConfigGroup = cMobilePolicyChargingControlConfigGroup.setStatus('current')
cMobilePolicyChargingControlGlobalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 690, 2, 2, 2)).setObjects(("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccgsTotalSessions"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccgsCCRInitialSent"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccgsCCRUpdateSent"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccgsCCRFinalSent"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccgsCCARecd"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccgsRARRecd"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccgsRAASent"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccgsCCRFailures"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccgsRAAFailures"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccgsReqTypeInvalid"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccgsReqNumInvalid"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccgsReqStatusInvalid"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccgsMessageTypeInvalid"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccgsDuplicateRequests"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccgsCCAErrors"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccgsRARErrors"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccgsSessionIDInvalid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMobilePolicyChargingControlGlobalStatsGroup = cMobilePolicyChargingControlGlobalStatsGroup.setStatus('current')
cMobilePolicyChargingControlPCRFMethodListStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 690, 2, 2, 3)).setObjects(("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpmlsCCRInitialSent"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpmlsCCRUpdateSent"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpmlsCCRFinalSent"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpmlsCCARecd"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpmlsRARRecd"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpmlsRAASent"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpmlsCCRFailures"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpmlsRAAFailures"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpmlsReqTypeInvalid"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpmlsReqNumInvalid"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpmlsReqStatusInvalid"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpmlsPCRFReboots"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpmlsMessageTypeInvalid"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpmlsDuplicateRequests"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpmlsCCAErrors"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpmlsRARErrors"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccpmlsSessionIDInvalid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMobilePolicyChargingControlPCRFMethodListStatsGroup = cMobilePolicyChargingControlPCRFMethodListStatsGroup.setStatus('current')
cMobilePolicyChargingControlPolicyPreloadStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 690, 2, 2, 4)).setObjects(("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsPCEFInit"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsPCRFInit"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsReq"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsRes"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsGlobalPolicyPush"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsGlobalPolicyPushAck"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsPreloadDataInconsistent"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsAVPMissing"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsWrongOrderFailures"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsEnforceFailures"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsStaticConfigConflicts"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsCCRFailures"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsRAAFailed"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsReqTypeInvalid"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsReqNumInvalid"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsReqStatusInvalid"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsErrorState"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsPolicyPreloadStatus"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsMessageTypeInvalid"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsCCAErrors"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsRARErrors"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsSessionIDInvalid"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsTimeoutErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMobilePolicyChargingControlPolicyPreloadStatsGroup = cMobilePolicyChargingControlPolicyPreloadStatsGroup.setStatus('current')
cMobilePolicyChargingControlNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 690, 2, 2, 5)).setObjects(("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "ciscoMobilePolicyChargingControlPreloadError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMobilePolicyChargingControlNotifGroup = cMobilePolicyChargingControlNotifGroup.setStatus('current')
cMobilePolicyChargingControlNotifEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 690, 2, 2, 6)).setObjects(("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccPreloadErrorNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMobilePolicyChargingControlNotifEnableGroup = cMobilePolicyChargingControlNotifEnableGroup.setStatus('current')
cmpccStatisticsExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 690, 2, 2, 7)).setObjects(("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsBillingServicesInserted"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsBillingServicesDeleted"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsBillingServicesRolledback"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsBillingServicesInsertFailed"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsBillingServicesDeleteFailed"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsBillingServicesRollbackFailed"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsContentPoliciesInserted"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsContentPoliciesDeleted"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsContentPoliciesRolledback"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsContentPoliciesInsertFailed"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsContentPoliciesDeleteFailed"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsContentPoliciesRollbackFailed"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsBillingPlansInserted"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsBillingPlansDeleted"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsBillingPlansRolledback"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsBillingPlansInsertFailed"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsBillingPlansDeleteFailed"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsBillingPlansRollbackFailed"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsServiceContentsInserted"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsServiceContentsDeleted"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsServiceContentsRolledback"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsServiceContentsInsertFailed"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsServiceContentsDeleteFailed"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsServiceContentsRollbackFailed"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsAcctPolicyMapsInserted"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsAcctPolicyMapsDeleted"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsAcctPolicyMapsRolledback"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsAcctPolicyMapsInsertFailed"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsAcctPolicyMapsDeleteFailed"), ("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccppsAcctPolicyMapsRollbackFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmpccStatisticsExtGroup = cmpccStatisticsExtGroup.setStatus('current')
cmpccPolicyPreloadNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 690, 2, 2, 8)).setObjects(("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccPreloadRollbackFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmpccPolicyPreloadNotifGroup = cmpccPolicyPreloadNotifGroup.setStatus('current')
cmpccPreloadNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 690, 2, 2, 9)).setObjects(("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccPreloadRollbackFailedNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmpccPreloadNotifControlGroup = cmpccPreloadNotifControlGroup.setStatus('current')
cmpccPolicyMismatchGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 690, 2, 2, 10)).setObjects(("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccPolicyMismatch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmpccPolicyMismatchGroup = cmpccPolicyMismatchGroup.setStatus('current')
cmpccRollbackFailedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 690, 2, 2, 11)).setObjects(("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", "cmpccRollbackFailedReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmpccRollbackFailedGroup = cmpccRollbackFailedGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-MOBILE-POLICY-CHARGING-CONTROL-MIB", cmpccgsCCRUpdateSent=cmpccgsCCRUpdateSent, cmpccppsContentPoliciesRollbackFailed=cmpccppsContentPoliciesRollbackFailed, cmpccgsRARRecd=cmpccgsRARRecd, cmpccgsRARErrors=cmpccgsRARErrors, cmpccppsContentPoliciesInsertFailed=cmpccppsContentPoliciesInsertFailed, cmpccPreloadRollbackFailedNotifEnabled=cmpccPreloadRollbackFailedNotifEnabled, cmpccpmlsRAAFailures=cmpccpmlsRAAFailures, cmpccPolicyPreloadExtStatsTable=cmpccPolicyPreloadExtStatsTable, cmpccppsReqStatusInvalid=cmpccppsReqStatusInvalid, cmpccPCRFMethodListStatsTable=cmpccPCRFMethodListStatsTable, cMobilePolicyChargingControlMIBCompliances=cMobilePolicyChargingControlMIBCompliances, cmpccgsCCRInitialSent=cmpccgsCCRInitialSent, cmpccpmlsCCRFinalSent=cmpccpmlsCCRFinalSent, cmpccpmlsCCRFailures=cmpccpmlsCCRFailures, cMobilePolicyChargingControlConfigGroup=cMobilePolicyChargingControlConfigGroup, cmpccpmlsMethodList=cmpccpmlsMethodList, cmpccppsBillingPlansDeleteFailed=cmpccppsBillingPlansDeleteFailed, cmpccpmlsCCRUpdateSent=cmpccpmlsCCRUpdateSent, cmpccConfig=cmpccConfig, cmpccppsPolicyPreloadStatus=cmpccppsPolicyPreloadStatus, cmpccGlobalStatsTableEntry=cmpccGlobalStatsTableEntry, ciscoMobilePolicyChargingControlMIB=ciscoMobilePolicyChargingControlMIB, cmpccppsReq=cmpccppsReq, cmpccpmlsMessageTypeInvalid=cmpccpmlsMessageTypeInvalid, cmpccgsCCAErrors=cmpccgsCCAErrors, cmpccppsBillingPlansDeleted=cmpccppsBillingPlansDeleted, cmpccppsBillingPlansInserted=cmpccppsBillingPlansInserted, cmpccppsWrongOrderFailures=cmpccppsWrongOrderFailures, cmpccppsRAAFailed=cmpccppsRAAFailed, cmpccgsReqStatusInvalid=cmpccgsReqStatusInvalid, cmpccpcDestinationRealm=cmpccpcDestinationRealm, cmpccppsAcctPolicyMapsInsertFailed=cmpccppsAcctPolicyMapsInsertFailed, cmpccppsStaticConfigConflicts=cmpccppsStaticConfigConflicts, cmpccppsServiceContentsDeleted=cmpccppsServiceContentsDeleted, cmpccppsBillingServicesRollbackFailed=cmpccppsBillingServicesRollbackFailed, cmpccppsEnforceFailures=cmpccppsEnforceFailures, cmpccppsReqTypeInvalid=cmpccppsReqTypeInvalid, cmpccProfileConfigTable=cmpccProfileConfigTable, cmpccPreloadEnable=cmpccPreloadEnable, cmpccgsReqTypeInvalid=cmpccgsReqTypeInvalid, cmpccppsErrorState=cmpccppsErrorState, ciscoMobilePolicyChargingControlPreloadError=ciscoMobilePolicyChargingControlPreloadError, cmpccppsServiceContentsRollbackFailed=cmpccppsServiceContentsRollbackFailed, cmpccMethodListPreload=cmpccMethodListPreload, cmpccNotifConfig=cmpccNotifConfig, cmpccGlobalStatsTable=cmpccGlobalStatsTable, cmpccppsBillingServicesDeleteFailed=cmpccppsBillingServicesDeleteFailed, cmpccppsGlobalPolicyPush=cmpccppsGlobalPolicyPush, cmpccDestinationRealmString=cmpccDestinationRealmString, cmpccPreloadNotifControlGroup=cmpccPreloadNotifControlGroup, cmpccStats=cmpccStats, cmpccpmlsCCAErrors=cmpccpmlsCCAErrors, cmpccgsRAAFailures=cmpccgsRAAFailures, cmpccpmlsReqStatusInvalid=cmpccpmlsReqStatusInvalid, cmpccppsRARErrors=cmpccppsRARErrors, cmpccppsAVPMissing=cmpccppsAVPMissing, cmpccppsAcctPolicyMapsRollbackFailed=cmpccppsAcctPolicyMapsRollbackFailed, cmpccpmlsRARErrors=cmpccpmlsRARErrors, cmpccStatisticsExtGroup=cmpccStatisticsExtGroup, cmpccppsCCRFailures=cmpccppsCCRFailures, cmpccppsMessageTypeInvalid=cmpccppsMessageTypeInvalid, cmpccPreloadRollbackFailed=cmpccPreloadRollbackFailed, cmpccppsReqNumInvalid=cmpccppsReqNumInvalid, cmpccPolicyMismatchGroup=cmpccPolicyMismatchGroup, cmpccProfileConfigTableEntry=cmpccProfileConfigTableEntry, cmpccProfileDefault=cmpccProfileDefault, cMobilePolicyChargingControlMIBGroups=cMobilePolicyChargingControlMIBGroups, cmpccppsTimeoutErrors=cmpccppsTimeoutErrors, cmpccppsAcctPolicyMapsRolledback=cmpccppsAcctPolicyMapsRolledback, cmpccpmlsCCARecd=cmpccpmlsCCARecd, cMobilePolicyChargingControlPCRFMethodListStatsGroup=cMobilePolicyChargingControlPCRFMethodListStatsGroup, cmpccppsBillingPlansRolledback=cmpccppsBillingPlansRolledback, cmpccppsBillingServicesInserted=cmpccppsBillingServicesInserted, cmpccppsContentPoliciesDeleted=cmpccppsContentPoliciesDeleted, cmpccPreloadTimeout=cmpccPreloadTimeout, cmpccppsGlobalPolicyPushAck=cmpccppsGlobalPolicyPushAck, cmpccppsPreloadDataInconsistent=cmpccppsPreloadDataInconsistent, cmpccpmlsReqNumInvalid=cmpccpmlsReqNumInvalid, cmpccppsBillingServicesRolledback=cmpccppsBillingServicesRolledback, ciscoMobilePolicyChargingControlMIBNotifs=ciscoMobilePolicyChargingControlMIBNotifs, cmpccppsServiceContentsInsertFailed=cmpccppsServiceContentsInsertFailed, cmpccppsBillingServicesDeleted=cmpccppsBillingServicesDeleted, cmpccppsRes=cmpccppsRes, cmpccgsCCRFinalSent=cmpccgsCCRFinalSent, cmpccPreloadErrorNotifEnabled=cmpccPreloadErrorNotifEnabled, cmpccppsAcctPolicyMapsDeleted=cmpccppsAcctPolicyMapsDeleted, cMobilePolicyChargingControlPolicyPreloadStatsGroup=cMobilePolicyChargingControlPolicyPreloadStatsGroup, cmpccPolicyPreloadStatsTable=cmpccPolicyPreloadStatsTable, cMobilePolicyChargingControlNotifEnableGroup=cMobilePolicyChargingControlNotifEnableGroup, cmpccPolicyPreloadNotifGroup=cmpccPolicyPreloadNotifGroup, cmpccpmlsRAASent=cmpccpmlsRAASent, cMobilePolicyChargingControlMIBCompliancesRev1=cMobilePolicyChargingControlMIBCompliancesRev1, PYSNMP_MODULE_ID=ciscoMobilePolicyChargingControlMIB, cmpccpcRowStatus=cmpccpcRowStatus, cmpccppsServiceContentsRolledback=cmpccppsServiceContentsRolledback, cmpccpmlsDuplicateRequests=cmpccpmlsDuplicateRequests, cmpccppsPCEFInit=cmpccppsPCEFInit, cmpccgsRAASent=cmpccgsRAASent, cMobilePolicyChargingControlMIBConform=cMobilePolicyChargingControlMIBConform, cmpccppsAcctPolicyMapsInserted=cmpccppsAcctPolicyMapsInserted, cmpccpmlsRARRecd=cmpccpmlsRARRecd, cMobilePolicyChargingControlGlobalStatsGroup=cMobilePolicyChargingControlGlobalStatsGroup, cmpccppsBillingPlansInsertFailed=cmpccppsBillingPlansInsertFailed, cMobilePolicyChargingControlMIBCompliance=cMobilePolicyChargingControlMIBCompliance, cmpccRollbackFailedGroup=cmpccRollbackFailedGroup, cmpccgsTotalSessions=cmpccgsTotalSessions, cmpccpmlsPCRFReboots=cmpccpmlsPCRFReboots, cmpccgsMessageTypeInvalid=cmpccgsMessageTypeInvalid, cmpccppsBillingPlansRollbackFailed=cmpccppsBillingPlansRollbackFailed, cmpccppsPCRFInit=cmpccppsPCRFInit, cmpccPolicyMismatch=cmpccPolicyMismatch, cmpccgsCCRFailures=cmpccgsCCRFailures, cmpccPolicyPreloadStatsTableEntry=cmpccPolicyPreloadStatsTableEntry, ciscoMobilePolicyChargingControlMIBObjects=ciscoMobilePolicyChargingControlMIBObjects, cmpccppsBillingServicesInsertFailed=cmpccppsBillingServicesInsertFailed, cmpccgsReqNumInvalid=cmpccgsReqNumInvalid, cmpccppsContentPoliciesInserted=cmpccppsContentPoliciesInserted, cmpccgsDuplicateRequests=cmpccgsDuplicateRequests, cmpccgsCCARecd=cmpccgsCCARecd, cmpccpmlsSessionIDInvalid=cmpccpmlsSessionIDInvalid, cmpccpcMethodList=cmpccpcMethodList, cmpccppsServiceContentsInserted=cmpccppsServiceContentsInserted, cmpccppsAcctPolicyMapsDeleteFailed=cmpccppsAcctPolicyMapsDeleteFailed, cmpccpmlsReqTypeInvalid=cmpccpmlsReqTypeInvalid, cmpccPolicyPreloadExtStatsTableEntry=cmpccPolicyPreloadExtStatsTableEntry, cmpccPCRFMethodListStatsTableEntry=cmpccPCRFMethodListStatsTableEntry, cmpccpmlsCCRInitialSent=cmpccpmlsCCRInitialSent, cmpccgsSessionIDInvalid=cmpccgsSessionIDInvalid, cmpccRollbackFailedReason=cmpccRollbackFailedReason, cmpccppsServiceContentsDeleteFailed=cmpccppsServiceContentsDeleteFailed, cmpccpcProfileName=cmpccpcProfileName, cmpccppsSessionIDInvalid=cmpccppsSessionIDInvalid, cMobilePolicyChargingControlNotifGroup=cMobilePolicyChargingControlNotifGroup, cmpccppsCCAErrors=cmpccppsCCAErrors, cmpccppsContentPoliciesRolledback=cmpccppsContentPoliciesRolledback, cmpccppsContentPoliciesDeleteFailed=cmpccppsContentPoliciesDeleteFailed)
