#
# PySNMP MIB module ZHONE-COM-IP-DHCP-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-COM-IP-DHCP-CLIENT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:40:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, Integer32, MibIdentifier, ObjectIdentity, Counter64, Unsigned32, NotificationType, TimeTicks, Gauge32, iso, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "Integer32", "MibIdentifier", "ObjectIdentity", "Counter64", "Unsigned32", "NotificationType", "TimeTicks", "Gauge32", "iso", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ipInterfaceEntry, = mibBuilder.importSymbols("ZHONE-COM-IP-REC-MIB", "ipInterfaceEntry")
zhoneShelfIndex, zhoneSlotIndex, zhoneIp, zhoneModules = mibBuilder.importSymbols("Zhone", "zhoneShelfIndex", "zhoneSlotIndex", "zhoneIp", "zhoneModules")
ZhoneAdminString, = mibBuilder.importSymbols("Zhone-TC", "ZhoneAdminString")
comIpDhcpClient = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 51))
comIpDhcpClient.setRevisions(('2001-06-28 11:14', '2000-09-28 17:00', '2000-09-11 15:01',))
if mibBuilder.loadTexts: comIpDhcpClient.setLastUpdated('200106281700Z')
if mibBuilder.loadTexts: comIpDhcpClient.setOrganization('Zhone Technologies, Inc.')
dhcpClient = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1))
if mibBuilder.loadTexts: dhcpClient.setStatus('current')
dhcpClientResourceTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 1), )
if mibBuilder.loadTexts: dhcpClientResourceTable.setStatus('current')
dhcpClientResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 1, 1), ).setIndexNames((0, "Zhone", "zhoneShelfIndex"), (0, "Zhone", "zhoneSlotIndex"))
if mibBuilder.loadTexts: dhcpClientResourceEntry.setStatus('current')
dhcpOfferTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOfferTimeout.setStatus('current')
dhcpDefaultLease = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 604800)).clone(3600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpDefaultLease.setStatus('current')
dhcpMinLease = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpMinLease.setStatus('current')
dhcpClientErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientErrors.setStatus('current')
dhcpAvgTimeForLease = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 1, 1, 5), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpAvgTimeForLease.setStatus('current')
dhcpInterfacesTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2), )
if mibBuilder.loadTexts: dhcpInterfacesTable.setStatus('current')
dhcpInterfacesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1), )
ipInterfaceEntry.registerAugmentions(("ZHONE-COM-IP-DHCP-CLIENT-MIB", "dhcpInterfacesEntry"))
dhcpInterfacesEntry.setIndexNames(*ipInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: dhcpInterfacesEntry.setStatus('current')
dhcpInterfaceServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInterfaceServerName.setStatus('current')
dhcpInterfaceRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInterfaceRenew.setStatus('current')
dhcpInterfaceRebind = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInterfaceRebind.setStatus('current')
dhcpInterfaceBootFile = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInterfaceBootFile.setStatus('current')
dhcpInterfaceTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInterfaceTftp.setStatus('current')
dhcpInterfaceHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 6), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInterfaceHostname.setStatus('current')
dhcpInterfaceDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInterfaceDomainName.setStatus('current')
dhcpInterfaceVendorClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInterfaceVendorClassId.setStatus('current')
dhcpInterfaceDhcpClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpInterfaceDhcpClientId.setStatus('current')
dhcpInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("init", 1), ("reboot", 2), ("bound", 3), ("verify", 4), ("release", 5), ("invalid", 6), ("bind", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpInterfaceState.setStatus('current')
dnsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 3), )
if mibBuilder.loadTexts: dnsTable.setStatus('current')
dnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZHONE-COM-IP-DHCP-CLIENT-MIB", "dnsIpAddress"))
if mibBuilder.loadTexts: dnsEntry.setStatus('current')
dnsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsIpAddress.setStatus('current')
routersTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 4), )
if mibBuilder.loadTexts: routersTable.setStatus('current')
routersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZHONE-COM-IP-DHCP-CLIENT-MIB", "routersIpAddress"))
if mibBuilder.loadTexts: routersEntry.setStatus('current')
routersIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routersIpAddress.setStatus('current')
mibBuilder.exportSymbols("ZHONE-COM-IP-DHCP-CLIENT-MIB", dhcpClientErrors=dhcpClientErrors, dhcpInterfaceState=dhcpInterfaceState, dhcpInterfaceBootFile=dhcpInterfaceBootFile, dhcpInterfaceDomainName=dhcpInterfaceDomainName, dhcpMinLease=dhcpMinLease, dhcpInterfaceRebind=dhcpInterfaceRebind, dhcpInterfaceDhcpClientId=dhcpInterfaceDhcpClientId, dhcpAvgTimeForLease=dhcpAvgTimeForLease, dhcpOfferTimeout=dhcpOfferTimeout, dnsIpAddress=dnsIpAddress, routersTable=routersTable, comIpDhcpClient=comIpDhcpClient, routersIpAddress=routersIpAddress, routersEntry=routersEntry, dhcpInterfaceVendorClassId=dhcpInterfaceVendorClassId, PYSNMP_MODULE_ID=comIpDhcpClient, dhcpInterfaceServerName=dhcpInterfaceServerName, dhcpInterfaceRenew=dhcpInterfaceRenew, dhcpClientResourceEntry=dhcpClientResourceEntry, dhcpClientResourceTable=dhcpClientResourceTable, dhcpClient=dhcpClient, dhcpDefaultLease=dhcpDefaultLease, dnsTable=dnsTable, dhcpInterfaceTftp=dhcpInterfaceTftp, dhcpInterfacesTable=dhcpInterfacesTable, dhcpInterfacesEntry=dhcpInterfacesEntry, dhcpInterfaceHostname=dhcpInterfaceHostname, dnsEntry=dnsEntry)
