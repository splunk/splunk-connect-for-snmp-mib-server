#
# PySNMP MIB module AC-PSTN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AC-PSTN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:54:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
audioCodes, acGeneric, acProducts, acBoardMibs, acRegistrations = mibBuilder.importSymbols("AUDIOCODES-TYPES-MIB", "audioCodes", "acGeneric", "acProducts", "acBoardMibs", "acRegistrations")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, iso, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, enterprises, TimeTicks, MibIdentifier, ModuleIdentity, NotificationType, Gauge32, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "enterprises", "TimeTicks", "MibIdentifier", "ModuleIdentity", "NotificationType", "Gauge32", "Unsigned32", "Counter64")
DisplayString, RowStatus, TextualConvention, DateAndTime, TAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "DateAndTime", "TAddress")
acPSTN = ModuleIdentity((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9))
if mibBuilder.loadTexts: acPSTN.setLastUpdated('200909301722Z')
if mibBuilder.loadTexts: acPSTN.setOrganization('AudioCodes Ltd')
acPSTNConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1))
acTrunkConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1))
acTrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1))
acTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1), )
if mibBuilder.loadTexts: acTrunkTable.setStatus('current')
acTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acTrunkIndex"))
if mibBuilder.loadTexts: acTrunkEntry.setStatus('current')
acTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 83))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkIndex.setStatus('current')
acTrunkAdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("locked", 0), ("unLocked", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkAdministrativeState.setStatus('current')
acTrunkProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 50, 51, 52, 53, 54, 55, 56, 57))).clone(namedValues=NamedValues(("nONE", 0), ("e1EuroISDN", 1), ("t1Cas", 2), ("t1RawCas", 3), ("t1Transparent", 4), ("e1Transparent31", 5), ("e1Transparent30", 6), ("e1Mfcr2", 7), ("e1CasR2", 8), ("e1RawCAS", 9), ("t1-NI2ISDN", 10), ("t1-4EssISDN", 11), ("t1-5Ess-9-ISDN", 12), ("t1-5Ess-10-ISDN", 13), ("t1-Dms100-ISDN", 14), ("j1-TRANSPARENT", 15), ("t1-NTT-ISDN", 16), ("e1-AUSTEL-ISDN", 17), ("e1-HKT-ISDN", 18), ("e1-KOR-ISDN", 19), ("t1-HKT-ISDN", 20), ("e1-QSIG", 21), ("e1-TNZ-22", 22), ("t1-EXTRA-23", 23), ("t1-IUA", 28), ("e1-IUA", 29), ("e1-EXTRA-30", 30), ("e1-FRENCH-VN3-ISDN", 31), ("t1-EXTRA-32", 32), ("eXTRA-33", 33), ("t1-EURO-ISDN", 34), ("t1-DMS100-MERIDIAN-ISDN", 35), ("t1-NI1-ISDN", 36), ("e1-DUA", 37), ("e1-Q931-PACKETS", 38), ("t1-Q931-PACKETS", 39), ("e1-NI2-ISDN", 40), ("e1-CAS-R15", 41), ("v5", 43), ("bRI-EURO-ISDN", 50), ("bRI-NI-2", 51), ("bRI-DMS100", 52), ("bRI-5ESS", 53), ("bRI-QSIG", 54), ("bRI-VNG", 55), ("bRI-NTT", 56), ("bRI-IUA", 57)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkProtocolType.setStatus('current')
acTrunkClockMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("acCLOCK-MASTER-OFF", 0), ("acCLOCK-MASTER-ON", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkClockMaster.setStatus('current')
acTrunkFramingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("eXTENDED-SUPER-FRAME", 0), ("sUPER-FRAME", 1), ("e1-FRAMING-DDF", 2), ("e1-FRAMING-MFF-CRC4", 3), ("e1-FRAMING-MFF-CRC4-EXT", 4), ("t1-FRAMING-F4", 6), ("t1-FRAMING-F12", 7), ("t1-FRAMING-ESF", 8), ("t1-FRAMING-ESF-CRC6", 9), ("t1-FRAMING-F72", 10), ("t1-FRAMING-ESF-CRC6-JT", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkFramingMethod.setStatus('current')
acTrunkLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("acB8ZS", 0), ("acAMI", 1), ("acHDB3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkLineCode.setStatus('current')
acTrunkTraceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 15))).clone(namedValues=NamedValues(("acNO-TRACE", 0), ("acFULL-ISDN-TRACE", 1), ("acLAYER3-ISDN-TRACE", 2), ("acONLY-ISDN-Q931-MSGS-TRACE", 3), ("acLAYER3-ISDN-TRACE-NO-DUPLICATION", 4), ("acFULL-ISDN-TRACE-WITH-DUPLICATION", 5), ("acISDN-Q931-RAW-DATA-TRACE", 6), ("acISDN-Q921-RAW-DATA-TRACE", 7), ("acISDN-Q931-Q921-RAW-DATA-TRACE", 8), ("acSS7-MTP2", 10), ("acSS7-MTP2-AND-APPLI", 11), ("acSS7-MTP2-SL-L3-NO-MSU", 12), ("acSS7-AAL", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkTraceLevel.setStatus('current')
acTrunkDialPlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkDialPlanName.setStatus('current')
acTrunkLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11, 12, 21))).clone(namedValues=NamedValues(("lineTypeE1", 10), ("lineTypeT1", 11), ("lineTypeBRI", 12), ("lineTypeUnknown", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkLineType.setStatus('current')
acTrunkAutoClockPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkAutoClockPriority.setStatus('current')
acTrunkDeactivate = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notAvailable", 0), ("deActivated", 1), ("activated", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkDeactivate.setStatus('current')
acTrunkLine = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 2))
acTrunkLineTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 2, 1), )
if mibBuilder.loadTexts: acTrunkLineTable.setStatus('current')
acTrunkLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 2, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acTrunkIndex"))
if mibBuilder.loadTexts: acTrunkLineEntry.setStatus('current')
acTrunkLineBuildOutLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ac0DB", 0), ("ac7-5DB", 1), ("ac15DB", 2), ("ac22-5DB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkLineBuildOutLoss.setStatus('current')
acTrunkLineBuildOutOverwrite = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("acNO-OVER-WRITE", 0), ("acOVER-WRITE", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkLineBuildOutOverwrite.setStatus('current')
acTrunkLineBuildOutXPM0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkLineBuildOutXPM0.setStatus('current')
acTrunkLineBuildOutXPM1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkLineBuildOutXPM1.setStatus('current')
acTrunkLineBuildOutXPM2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkLineBuildOutXPM2.setStatus('current')
acTrunkISDN = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3))
acTrunkISDNCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1))
acTrunkISDNCommonTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1), )
if mibBuilder.loadTexts: acTrunkISDNCommonTable.setStatus('current')
acTrunkISDNCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acTrunkIndex"))
if mibBuilder.loadTexts: acTrunkISDNCommonEntry.setStatus('current')
acTrunkISDNCommonTerminationSide = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("acUSER-TERMINATION-SIDE", 0), ("acNETWORK-TERMINATION-SIDE", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNCommonTerminationSide.setStatus('current')
acTrunkISDNCommonQ931LayerResponseBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNCommonQ931LayerResponseBehavior.setStatus('current')
acTrunkISDNCommonIncomingCallsBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNCommonIncomingCallsBehavior.setStatus('current')
acTrunkISDNCommonOutgoingCallsBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNCommonOutgoingCallsBehavior.setStatus('current')
acTrunkISDNCommonGeneralCCBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNCommonGeneralCCBehavior.setStatus('current')
acTrunkISDNCommonIuaInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkISDNCommonIuaInterfaceId.setStatus('current')
acTrunkISDNCommonDuplicateQ931BuffMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNCommonDuplicateQ931BuffMode.setStatus('current')
acTrunkISDNCommonBRILayer2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bRI-L2-MODE-P2P", 0), ("bRI-L2-MODE-P2MP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNCommonBRILayer2Mode.setStatus('current')
acTrunkISDNNfas = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 2))
acTrunkISDNNfasTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 2, 1), )
if mibBuilder.loadTexts: acTrunkISDNNfasTable.setStatus('current')
acTrunkISDNNfasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acTrunkIndex"))
if mibBuilder.loadTexts: acTrunkISDNNfasEntry.setStatus('current')
acTrunkISDNNfasDchConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("acDCH-CONFIG-PRIMARY", 0), ("acDCH-CONFIG-BACKUP", 1), ("acDCH-CONFIG-NFAS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNNfasDchConfig.setStatus('current')
acTrunkISDNNfasInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNNfasInterfaceId.setStatus('current')
acTrunkISDNNfasGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNNfasGroupNumber.setStatus('current')
acTrunkISDNDpnss = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 3))
acTrunkISDNDpnssTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 3, 1), )
if mibBuilder.loadTexts: acTrunkISDNDpnssTable.setStatus('current')
acTrunkISDNDpnssEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 3, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acTrunkIndex"))
if mibBuilder.loadTexts: acTrunkISDNDpnssEntry.setStatus('current')
acTrunkISDNDpnssBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNDpnssBehavior.setStatus('current')
acTrunkISDNDpnssNumRealChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNDpnssNumRealChannels.setStatus('current')
acTrunkISDNDpnssNumVirtualChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 3, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkISDNDpnssNumVirtualChannels.setStatus('current')
acTrunkCAS = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 4))
acTrunkCASTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 4, 1), )
if mibBuilder.loadTexts: acTrunkCASTable.setStatus('current')
acTrunkCASEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 4, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acTrunkIndex"))
if mibBuilder.loadTexts: acTrunkCASEntry.setStatus('current')
acTrunkCASTablesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkCASTablesIndex.setStatus('current')
acTrunkCASTablePerChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 4, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkCASTablePerChannel.setStatus('current')
acTrunkV5 = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 5))
acTrunkV5Table = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 5, 1), )
if mibBuilder.loadTexts: acTrunkV5Table.setStatus('current')
acTrunkV5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 5, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acTrunkIndex"))
if mibBuilder.loadTexts: acTrunkV5Entry.setStatus('current')
acTrunkV5NumberOfCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkV5NumberOfCChannels.setStatus('current')
acTrunkV5ProtocolSide = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("an-Side", 0), ("le-Side", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkV5ProtocolSide.setStatus('current')
acTrunkGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 8))
acTrunkGlobalLifeLineType = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("hW-Only", 0), ("hW-And-Link-Detection", 1), ("hW-And-Link-And-Network-Detection", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTrunkGlobalLifeLineType.setStatus('current')
acISDNConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 2))
acMiscISDN = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 2, 1))
acMiscISDNQ931RelayMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("none", 0), ("activateLAPDmessaging", 1), ("layer3-IS-IUA", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acMiscISDNQ931RelayMode.setStatus('current')
acMiscISDNDuplicateQ931BuffMode = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acMiscISDNDuplicateQ931BuffMode.setStatus('obsolete')
acDS3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 3))
acDS3ConfigFramingMethod = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dS3-M23", 0), ("dS3-C-BIT-PARITY", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDS3ConfigFramingMethod.setStatus('obsolete')
acDS3ConfigClockSource = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("acClock-Source-External", 0), ("acClock-Source-Local-Board", 1), ("acClock-Source-Local-PLL", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDS3ConfigClockSource.setStatus('obsolete')
acDS3ConfigLineBuiltOut = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("acLINE-BUILT-OUT-LEVEL-1", 0), ("acLINE-BUILT-OUT-LEVEL-2", 1), ("acLINE-BUILT-OUT-LEVEL-3", 2), ("acLINE-BUILT-OUT-LEVEL-4", 3), ("acLINE-BUILT-OUT-LEVEL-5", 4), ("acLINE-BUILT-OUT-LEVEL-6", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDS3ConfigLineBuiltOut.setStatus('obsolete')
acCasConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 4))
acCasConfigEnable = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acCasConfigEnable.setStatus('current')
acCASFile = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 4, 2))
acCASFileTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 4, 2, 1), )
if mibBuilder.loadTexts: acCASFileTable.setStatus('current')
acCASFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 4, 2, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acCASFileIndex"))
if mibBuilder.loadTexts: acCASFileEntry.setStatus('current')
acCASFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 4, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acCASFileIndex.setStatus('current')
acCASFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 4, 2, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acCASFileName.setStatus('current')
acSonetSDH = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 5))
acSonetSDHTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 5, 1), )
if mibBuilder.loadTexts: acSonetSDHTable.setStatus('current')
acSonetSDHEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 5, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acSonetSDHIndex"))
if mibBuilder.loadTexts: acSonetSDHEntry.setStatus('current')
acSonetSDHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: acSonetSDHIndex.setStatus('current')
acSonetSDHFbrGrpMappingType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 15))).clone(namedValues=NamedValues(("asynchronousVT15andDS1", 0), ("asynchronousTU12andE1", 1), ("sTS1asynchronousDS3", 3), ("undefined", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSDHFbrGrpMappingType.setStatus('current')
acSonetSDHFbrGrpKlmNumberingScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("numberingScheme-MLK", 0), ("numberingScheme-LMK", 1), ("numberingScheme-KLM", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSDHFbrGrpKlmNumberingScheme.setStatus('current')
acSonetSDHFbrGrpAPSDirectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unidirectional", 0), ("bidirectional", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSDHFbrGrpAPSDirectionMode.setStatus('current')
acSonetSDHFbrGrpAPSRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nonRevertive", 0), ("revertive", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSDHFbrGrpAPSRevertMode.setStatus('current')
acSonetSDHFbrGrpAPSWaitToRestoreTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 1, 5, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acSonetSDHFbrGrpAPSWaitToRestoreTime.setStatus('current')
acPSTNStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2))
acTrunkStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1))
acTrunkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1, 1), )
if mibBuilder.loadTexts: acTrunkStatusTable.setStatus('current')
acTrunkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acTrunkIndex"))
if mibBuilder.loadTexts: acTrunkStatusEntry.setStatus('current')
acTrunkStatusLedStatusColor = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("red", 1), ("green", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkStatusLedStatusColor.setStatus('current')
acTrunkStatusLedStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("steady", 0), ("blink", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkStatusLedStatusState.setStatus('current')
acTrunkStatusChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkStatusChannels.setStatus('current')
acTrunkStatusV5InterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkStatusV5InterfaceNum.setStatus('current')
acTrunkStatusV5LinkID = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkStatusV5LinkID.setStatus('current')
acTrunkStatusDChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 10))).clone(namedValues=NamedValues(("dChannelEstablished", 0), ("dChannelNotEstablished", 1), ("dChannelNotApplicable", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkStatusDChannel.setStatus('current')
acTrunkStatusAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("greyDisabled", 0), ("greenActive", 1), ("redLosLof", 2), ("blueAis", 3), ("yellowRai", 4), ("orangeDChannel", 5), ("purpleLowerLayerDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acTrunkStatusAlarm.setStatus('current')
acDigitalLegs = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2))
acDigitalLegsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1), )
if mibBuilder.loadTexts: acDigitalLegsTable.setStatus('current')
acDigitalLegsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acDigitalLegsLegIndex"))
if mibBuilder.loadTexts: acDigitalLegsEntry.setStatus('current')
acDigitalLegsLegIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000)))
if mibBuilder.loadTexts: acDigitalLegsLegIndex.setStatus('current')
acDigitalLegsCallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsCallIndex.setStatus('current')
acDigitalLegsTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsTrunk.setStatus('current')
acDigitalLegsBchannel = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 76500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsBchannel.setStatus('current')
acDigitalLegsEchoCanceller = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsEchoCanceller.setStatus('current')
acDigitalLegsDTMFDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsDTMFDetection.setStatus('current')
acDigitalLegsVoiceVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsVoiceVolume.setStatus('current')
acDigitalLegsHighPassFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsHighPassFilter.setStatus('current')
acDigitalLegsInputGain = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsInputGain.setStatus('current')
acDigitalLegsDSPDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsDSPDevice.setStatus('current')
acDigitalLegsLegName = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 2, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDigitalLegsLegName.setStatus('current')
acSDHKLMNumberingScheme = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 3))
acSDHKLMNumberingSchemeTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 3, 1), )
if mibBuilder.loadTexts: acSDHKLMNumberingSchemeTable.setStatus('current')
acSDHKLMNumberingSchemeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 3, 1, 1), ).setIndexNames((0, "AC-PSTN-MIB", "acSDHKLMNumberingSchemeTrunkIndex"))
if mibBuilder.loadTexts: acSDHKLMNumberingSchemeEntry.setStatus('current')
acSDHKLMNumberingSchemeTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000)))
if mibBuilder.loadTexts: acSDHKLMNumberingSchemeTrunkIndex.setStatus('current')
acSDHKLMNumberingSchemeTUG3OrSTS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSDHKLMNumberingSchemeTUG3OrSTS1.setStatus('current')
acSDHKLMNumberingSchemeTUG2OrVTG = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSDHKLMNumberingSchemeTUG2OrVTG.setStatus('current')
acSDHKLMNumberingSchemeTU12OrVT15 = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSDHKLMNumberingSchemeTU12OrVT15.setStatus('current')
acFiberGroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 4))
acFiberGroupStatusActiveLink = MibScalar((1, 3, 6, 1, 4, 1, 5003, 9, 10, 9, 2, 4, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acFiberGroupStatusActiveLink.setStatus('current')
mibBuilder.exportSymbols("AC-PSTN-MIB", acTrunkConfig=acTrunkConfig, acSonetSDHFbrGrpMappingType=acSonetSDHFbrGrpMappingType, acTrunkISDNDpnssBehavior=acTrunkISDNDpnssBehavior, acTrunkV5Table=acTrunkV5Table, acDigitalLegsInputGain=acDigitalLegsInputGain, acSonetSDHFbrGrpAPSRevertMode=acSonetSDHFbrGrpAPSRevertMode, acTrunkISDNNfasTable=acTrunkISDNNfasTable, acTrunkProtocolType=acTrunkProtocolType, acTrunkISDNDpnss=acTrunkISDNDpnss, acTrunkCASEntry=acTrunkCASEntry, acDigitalLegsLegIndex=acDigitalLegsLegIndex, acTrunkISDNCommonIuaInterfaceId=acTrunkISDNCommonIuaInterfaceId, acTrunkV5Entry=acTrunkV5Entry, acTrunkStatus=acTrunkStatus, acTrunk=acTrunk, acDS3ConfigClockSource=acDS3ConfigClockSource, acTrunkLineBuildOutXPM1=acTrunkLineBuildOutXPM1, acCASFileTable=acCASFileTable, acSonetSDH=acSonetSDH, acPSTN=acPSTN, acTrunkISDNCommon=acTrunkISDNCommon, acTrunkStatusChannels=acTrunkStatusChannels, acSDHKLMNumberingSchemeTUG3OrSTS1=acSDHKLMNumberingSchemeTUG3OrSTS1, acCASFileIndex=acCASFileIndex, acTrunkLineType=acTrunkLineType, acCasConfig=acCasConfig, acTrunkLineEntry=acTrunkLineEntry, acTrunkStatusDChannel=acTrunkStatusDChannel, acDigitalLegsHighPassFilter=acDigitalLegsHighPassFilter, acTrunkISDNDpnssEntry=acTrunkISDNDpnssEntry, acTrunkISDNNfasInterfaceId=acTrunkISDNNfasInterfaceId, acTrunkCASTablesIndex=acTrunkCASTablesIndex, acDigitalLegsDTMFDetection=acDigitalLegsDTMFDetection, acDS3Config=acDS3Config, acSonetSDHFbrGrpAPSDirectionMode=acSonetSDHFbrGrpAPSDirectionMode, PYSNMP_MODULE_ID=acPSTN, acTrunkISDNNfasDchConfig=acTrunkISDNNfasDchConfig, acDigitalLegs=acDigitalLegs, acTrunkStatusLedStatusState=acTrunkStatusLedStatusState, acTrunkLine=acTrunkLine, acTrunkISDNCommonGeneralCCBehavior=acTrunkISDNCommonGeneralCCBehavior, acTrunkCASTablePerChannel=acTrunkCASTablePerChannel, acTrunkAdministrativeState=acTrunkAdministrativeState, acSDHKLMNumberingSchemeTable=acSDHKLMNumberingSchemeTable, acDigitalLegsTable=acDigitalLegsTable, acTrunkISDNCommonTable=acTrunkISDNCommonTable, acTrunkISDNCommonIncomingCallsBehavior=acTrunkISDNCommonIncomingCallsBehavior, acMiscISDNQ931RelayMode=acMiscISDNQ931RelayMode, acTrunkLineBuildOutOverwrite=acTrunkLineBuildOutOverwrite, acDigitalLegsEntry=acDigitalLegsEntry, acTrunkISDN=acTrunkISDN, acTrunkClockMaster=acTrunkClockMaster, acDS3ConfigFramingMethod=acDS3ConfigFramingMethod, acPSTNStatus=acPSTNStatus, acFiberGroupStatusActiveLink=acFiberGroupStatusActiveLink, acTrunkFramingMethod=acTrunkFramingMethod, acDigitalLegsCallIndex=acDigitalLegsCallIndex, acSDHKLMNumberingSchemeTUG2OrVTG=acSDHKLMNumberingSchemeTUG2OrVTG, acTrunkLineBuildOutLoss=acTrunkLineBuildOutLoss, acTrunkLineTable=acTrunkLineTable, acTrunkISDNDpnssTable=acTrunkISDNDpnssTable, acTrunkV5=acTrunkV5, acDS3ConfigLineBuiltOut=acDS3ConfigLineBuiltOut, acTrunkGlobal=acTrunkGlobal, acTrunkISDNNfasEntry=acTrunkISDNNfasEntry, acDigitalLegsLegName=acDigitalLegsLegName, acTrunkStatusEntry=acTrunkStatusEntry, acTrunkISDNCommonBRILayer2Mode=acTrunkISDNCommonBRILayer2Mode, acTrunkV5NumberOfCChannels=acTrunkV5NumberOfCChannels, acDigitalLegsTrunk=acDigitalLegsTrunk, acTrunkDialPlanName=acTrunkDialPlanName, acTrunkISDNCommonEntry=acTrunkISDNCommonEntry, acSDHKLMNumberingSchemeEntry=acSDHKLMNumberingSchemeEntry, acDigitalLegsBchannel=acDigitalLegsBchannel, acTrunkStatusV5InterfaceNum=acTrunkStatusV5InterfaceNum, acTrunkStatusTable=acTrunkStatusTable, acTrunkStatusAlarm=acTrunkStatusAlarm, acTrunkEntry=acTrunkEntry, acSonetSDHTable=acSonetSDHTable, acTrunkISDNDpnssNumRealChannels=acTrunkISDNDpnssNumRealChannels, acTrunkISDNCommonQ931LayerResponseBehavior=acTrunkISDNCommonQ931LayerResponseBehavior, acMiscISDN=acMiscISDN, acMiscISDNDuplicateQ931BuffMode=acMiscISDNDuplicateQ931BuffMode, acSDHKLMNumberingSchemeTrunkIndex=acSDHKLMNumberingSchemeTrunkIndex, acTrunkStatusV5LinkID=acTrunkStatusV5LinkID, acTrunkISDNCommonOutgoingCallsBehavior=acTrunkISDNCommonOutgoingCallsBehavior, acTrunkStatusLedStatusColor=acTrunkStatusLedStatusColor, acTrunkTable=acTrunkTable, acTrunkLineBuildOutXPM0=acTrunkLineBuildOutXPM0, acTrunkISDNCommonTerminationSide=acTrunkISDNCommonTerminationSide, acSonetSDHEntry=acSonetSDHEntry, acTrunkAutoClockPriority=acTrunkAutoClockPriority, acTrunkIndex=acTrunkIndex, acTrunkISDNCommonDuplicateQ931BuffMode=acTrunkISDNCommonDuplicateQ931BuffMode, acSonetSDHFbrGrpAPSWaitToRestoreTime=acSonetSDHFbrGrpAPSWaitToRestoreTime, acTrunkGlobalLifeLineType=acTrunkGlobalLifeLineType, acPSTNConfiguration=acPSTNConfiguration, acCASFile=acCASFile, acTrunkCASTable=acTrunkCASTable, acTrunkV5ProtocolSide=acTrunkV5ProtocolSide, acDigitalLegsVoiceVolume=acDigitalLegsVoiceVolume, acFiberGroupStatus=acFiberGroupStatus, acISDNConfig=acISDNConfig, acTrunkISDNNfas=acTrunkISDNNfas, acSonetSDHIndex=acSonetSDHIndex, acSDHKLMNumberingSchemeTU12OrVT15=acSDHKLMNumberingSchemeTU12OrVT15, acTrunkDeactivate=acTrunkDeactivate, acTrunkLineCode=acTrunkLineCode, acTrunkISDNNfasGroupNumber=acTrunkISDNNfasGroupNumber, acDigitalLegsDSPDevice=acDigitalLegsDSPDevice, acTrunkCAS=acTrunkCAS, acDigitalLegsEchoCanceller=acDigitalLegsEchoCanceller, acCASFileName=acCASFileName, acSDHKLMNumberingScheme=acSDHKLMNumberingScheme, acTrunkLineBuildOutXPM2=acTrunkLineBuildOutXPM2, acTrunkTraceLevel=acTrunkTraceLevel, acCASFileEntry=acCASFileEntry, acSonetSDHFbrGrpKlmNumberingScheme=acSonetSDHFbrGrpKlmNumberingScheme, acCasConfigEnable=acCasConfigEnable, acTrunkISDNDpnssNumVirtualChannels=acTrunkISDNDpnssNumVirtualChannels)
