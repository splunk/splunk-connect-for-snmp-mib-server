#
# PySNMP MIB module SW-FDB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SW-FDB-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:04:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, Integer32, ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, Gauge32, Counter64, TimeTicks, IpAddress, ObjectIdentity, Unsigned32, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Integer32", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "Gauge32", "Counter64", "TimeTicks", "IpAddress", "ObjectIdentity", "Unsigned32", "iso", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

marconi = MibIdentifier((1, 3, 6, 1, 4, 1, 326))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2))
external = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20))
dlink = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1))
dlinkcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 1))
golf = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2))
golfproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1))
es2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1, 3))
golfcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2))
marconi_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2)).setLabel("marconi-mgmt")
es2000Mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28))
swL2Mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2))
swFDB = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9))
endOfMIB = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 9999), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfMIB.setStatus('optional')
swFdbStaticTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9, 1), )
if mibBuilder.loadTexts: swFdbStaticTable.setStatus('mandatory')
swFdbStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9, 1, 1), ).setIndexNames((0, "SW-FDB-MIB", "swFdbStaticVid"), (0, "SW-FDB-MIB", "swFdbStaticAddress"))
if mibBuilder.loadTexts: swFdbStaticEntry.setStatus('mandatory')
swFdbStaticVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticVid.setStatus('mandatory')
swFdbStaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticAddress.setStatus('mandatory')
swFdbStaticPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFdbStaticPortMap.setStatus('mandatory')
swFdbStaticState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFdbStaticState.setStatus('mandatory')
swFdbStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("apply", 2), ("not-apply", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticStatus.setStatus('mandatory')
swFdbStaticMemberTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9, 2), )
if mibBuilder.loadTexts: swFdbStaticMemberTable.setStatus('mandatory')
swFdbStaticMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9, 2, 1), ).setIndexNames((0, "SW-FDB-MIB", "swFdbStaticMemberVid"), (0, "SW-FDB-MIB", "swFdbStaticMemberAddress"), (0, "SW-FDB-MIB", "swFdbStaticMemberUnitIndex"), (0, "SW-FDB-MIB", "swFdbStaticMemberModuleIndex"), (0, "SW-FDB-MIB", "swFdbStaticMemberPortIndex"))
if mibBuilder.loadTexts: swFdbStaticMemberEntry.setStatus('mandatory')
swFdbStaticMemberVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticMemberVid.setStatus('mandatory')
swFdbStaticMemberAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticMemberAddress.setStatus('mandatory')
swFdbStaticMemberUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticMemberUnitIndex.setStatus('mandatory')
swFdbStaticMemberModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticMemberModuleIndex.setStatus('mandatory')
swFdbStaticMemberPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticMemberPortIndex.setStatus('mandatory')
swFdbFilterTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9, 3), )
if mibBuilder.loadTexts: swFdbFilterTable.setStatus('mandatory')
swFdbFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9, 3, 1), ).setIndexNames((0, "SW-FDB-MIB", "swFdbFilterVid"), (0, "SW-FDB-MIB", "swFdbFilterAddress"))
if mibBuilder.loadTexts: swFdbFilterEntry.setStatus('mandatory')
swFdbFilterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbFilterVid.setStatus('mandatory')
swFdbFilterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbFilterAddress.setStatus('mandatory')
swFdbFilterState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3), ("dst-src-addr", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFdbFilterState.setStatus('mandatory')
mibBuilder.exportSymbols("SW-FDB-MIB", golfcommon=golfcommon, swFdbStaticMemberUnitIndex=swFdbStaticMemberUnitIndex, swFdbFilterEntry=swFdbFilterEntry, dlinkcommon=dlinkcommon, MacAddress=MacAddress, marconi=marconi, swFDB=swFDB, PortList=PortList, endOfMIB=endOfMIB, swFdbFilterVid=swFdbFilterVid, marconi_mgmt=marconi_mgmt, swFdbStaticMemberModuleIndex=swFdbStaticMemberModuleIndex, dlink=dlink, golf=golf, swFdbStaticPortMap=swFdbStaticPortMap, swFdbStaticState=swFdbStaticState, swFdbStaticMemberPortIndex=swFdbStaticMemberPortIndex, swFdbStaticMemberVid=swFdbStaticMemberVid, swFdbFilterAddress=swFdbFilterAddress, swFdbStaticEntry=swFdbStaticEntry, swFdbStaticTable=swFdbStaticTable, swFdbStaticMemberAddress=swFdbStaticMemberAddress, swFdbStaticMemberEntry=swFdbStaticMemberEntry, swFdbFilterTable=swFdbFilterTable, golfproducts=golfproducts, swFdbFilterState=swFdbFilterState, swFdbStaticStatus=swFdbStaticStatus, external=external, systems=systems, swL2Mgmt=swL2Mgmt, es2000=es2000, swFdbStaticMemberTable=swFdbStaticMemberTable, swFdbStaticAddress=swFdbStaticAddress, swFdbStaticVid=swFdbStaticVid, es2000Mgmt=es2000Mgmt)
