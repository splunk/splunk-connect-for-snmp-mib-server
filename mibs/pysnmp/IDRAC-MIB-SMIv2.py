#
# PySNMP MIB module IDRAC-MIB-SMIv2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IDRAC-MIB-SMIv2
# Produced by pysmi-0.3.4 at Mon Apr 29 19:40:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Integer32, Counter64, Unsigned32, IpAddress, enterprises, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, TimeTicks, MibIdentifier, Bits, ObjectIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "Counter64", "Unsigned32", "IpAddress", "enterprises", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "TimeTicks", "MibIdentifier", "Bits", "ObjectIdentity", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
outOfBandGroup = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10892, 5))
outOfBandGroup.setRevisions(('2015-01-19 00:00', '2014-10-03 00:00', '2014-07-07 00:00', '2013-08-22 00:00', '2012-10-30 00:00',))
if mibBuilder.loadTexts: outOfBandGroup.setLastUpdated('201501190000Z')
if mibBuilder.loadTexts: outOfBandGroup.setOrganization('Dell Inc.')
informationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1))
racInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1))
chassisInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 2))
systemInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3))
statusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 2))
alertGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3))
alertVariablesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1))
alertTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2))
systemAlertTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1))
storageAlertTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2))
updatesAlertTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 3))
auditAlertTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4))
configurationAlertTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5))
systemDetailsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4))
mIBVersionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1))
systemStateGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200))
chassisInformationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300))
powerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600))
thermalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700))
deviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100))
slotGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200))
fruGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000))
storageDetailsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5))
software = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1))
storageManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20))
physicalDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130))
logicalDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140))
class StringType(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 1023)

class String64(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 64)

class FQDDString(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 512)

class MACAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class ObjectRange(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 128)

class Unsigned8BitRange(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class Unsigned16BitRange(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class Unsigned32BitRange(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class Signed32BitRange(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-2147483647, 2147483647)

class BooleanType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 1)

class DateName(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(25, 25)
    fixedLength = 25

class StateCapabilitiesFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2), ("notReadyCapable", 4), ("enableAndNotReadyCapable", 6))

class StateSettingsFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("notReady", 4), ("enabledAndNotReady", 6))

class ProbeCapabilitiesFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("upperNonCriticalThresholdSetCapable", 1), ("lowerNonCriticalThresholdSetCapable", 2), ("upperNonCriticalThresholdDefaultCapable", 4), ("lowerNonCriticalThresholdDefaultCapable", 8))

class StatusProbeEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCriticalUpper", 4), ("criticalUpper", 5), ("nonRecoverableUpper", 6), ("nonCriticalLower", 7), ("criticalLower", 8), ("nonRecoverableLower", 9), ("failed", 10))

class StatusRedundancyEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("full", 3), ("degraded", 4), ("lost", 5), ("notRedundant", 6), ("redundancyOffline", 7))

class ObjectStatusEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("nonCritical", 4), ("critical", 5), ("nonRecoverable", 6))

class RacTypeEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 16, 17, 32, 33))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("idrac7monolithic", 16), ("idrac7modular", 17), ("idrac8monolithic", 32), ("idrac8modular", 33))

class SystemFormFactorEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("u1", 3), ("u2", 4), ("u4", 5), ("u7", 6), ("singleWidthHalfHeight", 7), ("dualWidthHalfHeight", 8), ("singleWidthFullHeight", 9), ("dualWidthFullHeight", 10), ("singleWidthQuarterHeight", 11), ("u5", 12), ("u1HalfWidth", 13), ("u1QuarterWidth", 14), ("u1FullWidth", 15))

class BladeGeometryEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("singleWidthHalfHeight", 3), ("dualWidthHalfHeight", 4), ("singleWidthFullHeight", 5), ("dualWidthFullHeight", 6), ("singleWidthQuarterHeight", 7), ("u1HalfWidth", 8), ("u1QuarterWidth", 9), ("u1FullWidth", 10))

class PowerStateStatusEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("off", 3), ("on", 4))

racName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 1), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racName.setStatus('current')
racShortName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 2), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racShortName.setStatus('current')
racDescription = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 3), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racDescription.setStatus('current')
racManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 4), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racManufacturer.setStatus('current')
racVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 5), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racVersion.setStatus('current')
racURL = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 6), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racURL.setStatus('current')
racType = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 7), RacTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racType.setStatus('current')
racFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 1, 8), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: racFirmwareVersion.setStatus('current')
chassisServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 2, 1), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisServiceTag.setStatus('current')
chassisNameModular = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 2, 2), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNameModular.setStatus('current')
chassisModelModular = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 2, 3), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisModelModular.setStatus('current')
systemFQDN = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 1), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFQDN.setStatus('current')
systemServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 2), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServiceTag.setStatus('current')
systemExpressServiceCode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 3), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemExpressServiceCode.setStatus('current')
systemAssetTag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 4), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAssetTag.setStatus('current')
systemBladeSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 5), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBladeSlotNumber.setStatus('current')
systemOSName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 6), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemOSName.setStatus('current')
systemFormFactor = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 7), SystemFormFactorEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFormFactor.setStatus('current')
systemDataCenterName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 8), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDataCenterName.setStatus('current')
systemAisleName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 9), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemAisleName.setStatus('current')
systemRackName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 10), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemRackName.setStatus('current')
systemRackSlot = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 11), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemRackSlot.setStatus('current')
systemModelName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 12), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemModelName.setStatus('current')
systemSystemID = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 13), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSystemID.setStatus('current')
systemOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 14), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemOSVersion.setStatus('current')
systemRoomName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 15), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemRoomName.setStatus('current')
systemChassisSystemHeight = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 16), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemChassisSystemHeight.setStatus('current')
systemBladeGeometry = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 17), BladeGeometryEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBladeGeometry.setStatus('current')
systemNodeID = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 1, 3, 18), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNodeID.setStatus('current')
globalSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 2, 1), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalSystemStatus.setStatus('current')
systemLCDStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 2, 2), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemLCDStatus.setStatus('current')
globalStorageStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 2, 3), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalStorageStatus.setStatus('current')
systemPowerState = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 2, 4), PowerStateStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPowerState.setStatus('current')
systemPowerUpTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 2, 5), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPowerUpTime.setStatus('current')
alertMessageID = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertMessageID.setStatus('current')
alertMessage = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 2), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertMessage.setStatus('current')
alertCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 3), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertCurrentStatus.setStatus('current')
alertSystemServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertSystemServiceTag.setStatus('current')
alertSystemFQDN = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 5), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertSystemFQDN.setStatus('current')
alertFQDD = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertFQDD.setStatus('current')
alertDeviceDisplayName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertDeviceDisplayName.setStatus('current')
alertMessageArguments = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 8), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertMessageArguments.setStatus('current')
alertChassisServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertChassisServiceTag.setStatus('current')
alertChassisName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertChassisName.setStatus('current')
alertRacFQDN = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 1, 11), StringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertRacFQDN.setStatus('current')
mIBMajorVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1, 1), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mIBMajorVersionNumber.setStatus('current')
mIBMinorVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1, 2), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mIBMinorVersionNumber.setStatus('current')
mIBMaintenanceVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1, 3), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mIBMaintenanceVersionNumber.setStatus('current')
systemStateTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10), )
if mibBuilder.loadTexts: systemStateTable.setStatus('current')
systemStateTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "systemStatechassisIndex"))
if mibBuilder.loadTexts: systemStateTableEntry.setStatus('current')
systemStatechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatechassisIndex.setStatus('current')
systemStateGlobalSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 2), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateGlobalSystemStatus.setStatus('current')
systemStateChassisState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 3), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisState.setStatus('current')
systemStateChassisStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 4), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisStatus.setStatus('current')
systemStatePowerUnitStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStateDetails.setStatus('current')
systemStatePowerUnitStatusRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 6), StatusRedundancyEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStatusRedundancy.setStatus('current')
systemStatePowerUnitStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStatusDetails.setStatus('current')
systemStatePowerSupplyStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerSupplyStateDetails.setStatus('current')
systemStatePowerSupplyStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 9), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerSupplyStatusCombined.setStatus('current')
systemStatePowerSupplyStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerSupplyStatusDetails.setStatus('current')
systemStateVoltageStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateVoltageStateDetails.setStatus('current')
systemStateVoltageStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 12), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateVoltageStatusCombined.setStatus('current')
systemStateVoltageStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateVoltageStatusDetails.setStatus('current')
systemStateAmperageStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateAmperageStateDetails.setStatus('current')
systemStateAmperageStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 15), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateAmperageStatusCombined.setStatus('current')
systemStateAmperageStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateAmperageStatusDetails.setStatus('current')
systemStateCoolingUnitStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStateDetails.setStatus('current')
systemStateCoolingUnitStatusRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 18), StatusRedundancyEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStatusRedundancy.setStatus('current')
systemStateCoolingUnitStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStatusDetails.setStatus('current')
systemStateCoolingDeviceStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingDeviceStateDetails.setStatus('current')
systemStateCoolingDeviceStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 21), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingDeviceStatusCombined.setStatus('current')
systemStateCoolingDeviceStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingDeviceStatusDetails.setStatus('current')
systemStateTemperatureStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStateDetails.setStatus('current')
systemStateTemperatureStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 24), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStatusCombined.setStatus('current')
systemStateTemperatureStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStatusDetails.setStatus('current')
systemStateMemoryDeviceStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateMemoryDeviceStateDetails.setStatus('current')
systemStateMemoryDeviceStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 27), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateMemoryDeviceStatusCombined.setStatus('current')
systemStateMemoryDeviceStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateMemoryDeviceStatusDetails.setStatus('current')
systemStateChassisIntrusionStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisIntrusionStateDetails.setStatus('current')
systemStateChassisIntrusionStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 30), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisIntrusionStatusCombined.setStatus('current')
systemStateChassisIntrusionStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateChassisIntrusionStatusDetails.setStatus('current')
systemStatePowerUnitStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 42), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStatusCombined.setStatus('current')
systemStatePowerUnitStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 43), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStatePowerUnitStatusList.setStatus('current')
systemStateCoolingUnitStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 44), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStatusCombined.setStatus('current')
systemStateCoolingUnitStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateCoolingUnitStatusList.setStatus('current')
systemStateProcessorDeviceStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 50), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateProcessorDeviceStatusCombined.setStatus('current')
systemStateProcessorDeviceStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 51), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateProcessorDeviceStatusList.setStatus('current')
systemStateBatteryStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 52), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateBatteryStatusCombined.setStatus('current')
systemStateBatteryStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateBatteryStatusList.setStatus('current')
systemStateSDCardUnitStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 54), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateSDCardUnitStatusCombined.setStatus('current')
systemStateSDCardUnitStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateSDCardUnitStatusList.setStatus('current')
systemStateSDCardDeviceStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 56), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateSDCardDeviceStatusCombined.setStatus('current')
systemStateSDCardDeviceStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 57), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateSDCardDeviceStatusList.setStatus('current')
systemStateIDSDMCardUnitStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 58), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateIDSDMCardUnitStatusCombined.setStatus('current')
systemStateIDSDMCardUnitStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 59), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateIDSDMCardUnitStatusList.setStatus('current')
systemStateIDSDMCardDeviceStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 60), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateIDSDMCardDeviceStatusCombined.setStatus('current')
systemStateIDSDMCardDeviceStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateIDSDMCardDeviceStatusList.setStatus('current')
systemStateTemperatureStatisticsStateDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 62), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStatisticsStateDetails.setStatus('current')
systemStateTemperatureStatisticsStatusCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 63), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStatisticsStatusCombined.setStatus('current')
systemStateTemperatureStatisticsStatusDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 200, 10, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemStateTemperatureStatisticsStatusDetails.setStatus('current')
class StateCapabilitiesLogUniqueFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("unknown", 1), ("onlineCapable", 2), ("notReadyCapable", 4), ("resetCapable", 8))

class StateSettingsLogUniqueFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("unknown", 1), ("online", 2), ("notReady", 4), ("reset", 8))

class LogFormatType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("raw", 1), ("ascii", 2), ("uniCode", 3))

numEventLogEntries = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 1), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numEventLogEntries.setStatus('current')
numLCLogEntries = MibScalar((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 2), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numLCLogEntries.setStatus('current')
class ChassisTypeEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("desktop", 3), ("lowProfileDesktop", 4), ("pizzaBox", 5), ("miniTower", 6), ("tower", 7), ("portable", 8), ("lapTop", 9), ("noteBook", 10), ("handHeld", 11), ("dockingStation", 12), ("allInOne", 13), ("subNoteBook", 14), ("spaceSaving", 15), ("lunchBox", 16), ("mainSystemChassis", 17), ("expansionChassis", 18), ("subChassis", 19), ("busExpansionChassis", 20), ("peripheralChassis", 21), ("raidChassis", 22), ("rackMountChassis", 23), ("sealedCasePC", 24), ("multiSystemChassis", 25))

class ChassisSystemClassEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("workstationClass", 3), ("serverClass", 4), ("desktopClass", 5), ("portableClass", 6), ("netPCClass", 7), ("storageClass", 8))

class LEDControlCapabilitiesFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))
    namedValues = NamedValues(("unknown", 1), ("alertOnErrorCapable", 2), ("alertOnWarningAndErrorCapable", 4), ("alertOnWarningOrErrorCapable", 6))

class LEDControlSettingsFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("alertOnError", 2), ("alertOnWarningAndError", 4))

class ChassisIdentifyControlCapabilitiesFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2), ("notReadyCapable", 4), ("identifyCapable", 8))

class ChassisIdentifyControlSettingsFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("notReady", 4), ("identifyChassis", 8), ("identifyChassisAndEnable", 10))

class HostControlCapabilitiesFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 7, 8, 15, 16, 32, 64, 128, 256, 512))
    namedValues = NamedValues(("manualRebootCapable", 1), ("manualPowerOFFCapable", 2), ("manualPowerCycleCapable", 4), ("manualAllExceptOperatingSystemShutdownCapable", 7), ("manualOperatingSystemShutdownCapable", 8), ("manualFullyCapable", 15), ("manualRebootWithOSShutdownCapable", 16), ("manualRebootWithoutOSShutdownCapable", 32), ("manualPowerOffWithOSShutdownCapable", 64), ("manualPowerOffWithoutOSShutdownCapable", 128), ("manualPowerCycleWithOSShutdownCapable", 256), ("manualPowerCycleWithoutOSShutdownCapable", 512))

class HostControlSettingsFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 9, 10, 12))
    namedValues = NamedValues(("manualReboot", 1), ("manualPowerOFF", 2), ("manualPowerCycle", 4), ("manualOperatingSystemShutdown", 8), ("manualOperatingSystemShutdownThenReboot", 9), ("manualOperatingSystemShutdownThenPowerOFF", 10), ("manualOperatingSystemShutdownThenPowerCycle", 12))

class WatchDogControlCapabilitiesFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 27, 31))
    namedValues = NamedValues(("automaticRebootCapable", 1), ("automaticPowerCycleCapable", 2), ("automaticNotificationCapable", 4), ("automaticWatchDogTimerCapable", 8), ("automaticPowerOffCapable", 16), ("automaticAllExceptNotificationCapable", 27), ("automaticFullyCapable", 31))

class WatchControlSettingsFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("automaticRebootEnabled", 1), ("automaticPowerCycleEnabled", 2), ("automaticNotificationEnabled", 4), ("automaticPowerOffEnabled", 8))

class WatchDogTimerCapabilitiesFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("type1Capable", 1), ("type2Capable", 2), ("type3Capable", 4))

class PowerButtonControlCapabilitiesFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2))

class PowerButtonControlSettingsFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("disabled", 4))

class NMIButtonControlCapabilitiesFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unknownCapabilities", 1), ("enableCapable", 2))

class NMIButtonControlSettingsFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("enabled", 2), ("disabled", 4))

class SystemPropertiesFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("energySmart", 1))

chassisInformationTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10), )
if mibBuilder.loadTexts: chassisInformationTable.setStatus('current')
chassisInformationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "chassisIndexChassisInformation"))
if mibBuilder.loadTexts: chassisInformationTableEntry.setStatus('current')
chassisIndexChassisInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisIndexChassisInformation.setStatus('current')
chassisStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 2), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisStateCapabilities.setStatus('current')
chassisStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 3), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisStateSettings.setStatus('current')
chassisStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 4), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisStatus.setStatus('current')
chassisparentIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 5), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisparentIndexReference.setStatus('current')
chassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 6), ChassisTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisType.setStatus('current')
chassisName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 7), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisName.setStatus('current')
chassisManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisManufacturerName.setStatus('current')
chassisModelTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 9), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisModelTypeName.setStatus('current')
chassisAssetTagName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisAssetTagName.setStatus('current')
chassisServiceTagName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisServiceTagName.setStatus('current')
chassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 12), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisID.setStatus('current')
chassisIDExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 13), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisIDExtension.setStatus('current')
chassisSystemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 14), ChassisSystemClassEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemClass.setStatus('current')
chassisSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 15), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemName.setStatus('current')
chassisLEDControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 24), LEDControlCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLEDControlCapabilitiesUnique.setStatus('current')
chassisLEDControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 25), LEDControlSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLEDControlSettingsUnique.setStatus('current')
chassisIdentifyFlashControlCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 28), ChassisIdentifyControlCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisIdentifyFlashControlCapabilities.setStatus('current')
chassisIdentifyFlashControlSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 29), ChassisIdentifyControlSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisIdentifyFlashControlSettings.setStatus('current')
chassisLockPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 30), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisLockPresent.setStatus('current')
chassishostControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 31), HostControlCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassishostControlCapabilitiesUnique.setStatus('current')
chassishostControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 32), HostControlSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassishostControlSettingsUnique.setStatus('current')
chassiswatchDogControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 33), WatchDogControlCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassiswatchDogControlCapabilitiesUnique.setStatus('current')
chassiswatchDogControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 34), WatchControlSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassiswatchDogControlSettingsUnique.setStatus('current')
chassiswatchDogControlExpiryTimeCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 35), WatchDogTimerCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassiswatchDogControlExpiryTimeCapabilitiesUnique.setStatus('current')
chassiswatchDogControlExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 36), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassiswatchDogControlExpiryTime.setStatus('current')
chassisPowerButtonControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 38), PowerButtonControlCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerButtonControlCapabilitiesUnique.setStatus('current')
chassisPowerButtonControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 39), PowerButtonControlSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPowerButtonControlSettingsUnique.setStatus('current')
chassisNMIButtonControlCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 44), NMIButtonControlCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNMIButtonControlCapabilitiesUnique.setStatus('current')
chassisNMIButtonControlSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 45), NMIButtonControlSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNMIButtonControlSettingsUnique.setStatus('current')
chassisSystemProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 46), SystemPropertiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemProperties.setStatus('current')
chassisSystemRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 47), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemRevisionNumber.setStatus('current')
chassisSystemRevisionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 48), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSystemRevisionName.setStatus('current')
chassisExpressServiceCodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 10, 1, 49), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisExpressServiceCodeName.setStatus('current')
eventLogTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40), )
if mibBuilder.loadTexts: eventLogTable.setStatus('current')
eventLogTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "eventLogchassisIndex"), (0, "IDRAC-MIB-SMIv2", "eventLogRecordIndex"))
if mibBuilder.loadTexts: eventLogTableEntry.setStatus('current')
eventLogchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogchassisIndex.setStatus('current')
eventLogRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 2), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogRecordIndex.setStatus('current')
eventLogStateCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 3), StateCapabilitiesLogUniqueFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogStateCapabilitiesUnique.setStatus('current')
eventLogStateSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 4), StateSettingsLogUniqueFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogStateSettingsUnique.setStatus('current')
eventLogRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogRecord.setStatus('current')
eventLogFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 6), LogFormatType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogFormat.setStatus('current')
eventLogSeverityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 7), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogSeverityStatus.setStatus('current')
eventLogDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 40, 1, 8), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogDateName.setStatus('current')
systemBIOSTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50), )
if mibBuilder.loadTexts: systemBIOSTable.setStatus('current')
systemBIOSTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "systemBIOSchassisIndex"), (0, "IDRAC-MIB-SMIv2", "systemBIOSIndex"))
if mibBuilder.loadTexts: systemBIOSTableEntry.setStatus('current')
systemBIOSchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSchassisIndex.setStatus('current')
systemBIOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSIndex.setStatus('current')
systemBIOSStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSStateCapabilities.setStatus('current')
systemBIOSStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSStateSettings.setStatus('current')
systemBIOSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSStatus.setStatus('current')
systemBIOSReleaseDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 7), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSReleaseDateName.setStatus('current')
systemBIOSVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSVersionName.setStatus('current')
systemBIOSManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 50, 1, 11), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBIOSManufacturerName.setStatus('current')
class FirmwareType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 20, 21, 22))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("lifecycleController", 20), ("iDRAC7", 21), ("iDRAC8", 22))

firmwareTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60), )
if mibBuilder.loadTexts: firmwareTable.setStatus('current')
firmwareTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "firmwarechassisIndex"), (0, "IDRAC-MIB-SMIv2", "firmwareIndex"))
if mibBuilder.loadTexts: firmwareTableEntry.setStatus('current')
firmwarechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwarechassisIndex.setStatus('current')
firmwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareIndex.setStatus('current')
firmwareStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareStateCapabilities.setStatus('current')
firmwareStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareStateSettings.setStatus('current')
firmwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareStatus.setStatus('current')
firmwareSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 6), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareSize.setStatus('current')
firmwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 7), FirmwareType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareType.setStatus('current')
firmwareTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareTypeName.setStatus('current')
firmwareUpdateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 9), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateCapabilities.setStatus('current')
firmwareVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 60, 1, 11), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersionName.setStatus('current')
class IntrusionReadingEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("chassisNotBreached", 1), ("chassisBreached", 2), ("chassisBreachedPrior", 3), ("chassisBreachSensorFailure", 4))

class IntrusionTypeEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("chassisBreachDetectionWhenPowerON", 1), ("chassisBreachDetectionWhenPowerOFF", 2))

intrusionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70), )
if mibBuilder.loadTexts: intrusionTable.setStatus('current')
intrusionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "intrusionchassisIndex"), (0, "IDRAC-MIB-SMIv2", "intrusionIndex"))
if mibBuilder.loadTexts: intrusionTableEntry.setStatus('current')
intrusionchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionchassisIndex.setStatus('current')
intrusionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionIndex.setStatus('current')
intrusionStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionStateCapabilities.setStatus('current')
intrusionStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionStateSettings.setStatus('current')
intrusionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionStatus.setStatus('current')
intrusionReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 6), IntrusionReadingEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionReading.setStatus('current')
intrusionType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 7), IntrusionTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionType.setStatus('current')
intrusionLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 70, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intrusionLocationName.setStatus('current')
class LcLogCategoryEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("system", 1), ("storage", 2), ("updates", 3), ("audit", 4), ("configuration", 5), ("workNotes", 6))

lcLogTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90), )
if mibBuilder.loadTexts: lcLogTable.setStatus('current')
lcLogTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "lcLogChassisIndex"), (0, "IDRAC-MIB-SMIv2", "lcLogRecordIndex"))
if mibBuilder.loadTexts: lcLogTableEntry.setStatus('current')
lcLogChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogChassisIndex.setStatus('current')
lcLogRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 2), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogRecordIndex.setStatus('current')
lcLogSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 3), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogSequenceNumber.setStatus('current')
lcLogCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 4), LcLogCategoryEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogCategory.setStatus('current')
lcLogSeverityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogSeverityStatus.setStatus('current')
lcLogDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 6), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogDateName.setStatus('current')
lcLogFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 7), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogFQDD.setStatus('current')
lcLogMessageID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogMessageID.setStatus('current')
lcLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogMessage.setStatus('current')
lcLogDetailedDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogDetailedDescription.setStatus('current')
lcLogRecommededAction = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogRecommededAction.setStatus('current')
lcLogComment = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 300, 90, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lcLogComment.setStatus('current')
powerUnitTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10), )
if mibBuilder.loadTexts: powerUnitTable.setStatus('current')
powerUnitTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "powerUnitchassisIndex"), (0, "IDRAC-MIB-SMIv2", "powerUnitIndex"))
if mibBuilder.loadTexts: powerUnitTableEntry.setStatus('current')
powerUnitchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitchassisIndex.setStatus('current')
powerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitIndex.setStatus('current')
powerUnitStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitStateCapabilities.setStatus('current')
powerUnitStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitStateSettings.setStatus('current')
powerUnitRedundancyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 5), StatusRedundancyEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitRedundancyStatus.setStatus('current')
powerSupplyCountForRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 6), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyCountForRedundancy.setStatus('current')
powerUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 7), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitName.setStatus('current')
powerUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 10, 1, 8), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitStatus.setStatus('current')
class PowerSupplyStateCapabilitiesUniqueFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("unknown", 1), ("onlineCapable", 2), ("notReadyCapable", 4))

class PowerSupplyStateSettingsUniqueFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10, 16, 32, 64, 66, 128, 130, 210, 242))
    namedValues = NamedValues(("unknown", 1), ("onLine", 2), ("notReady", 4), ("fanFailure", 8), ("onlineAndFanFailure", 10), ("powerSupplyIsON", 16), ("powerSupplyIsOK", 32), ("acSwitchIsON", 64), ("onlineandAcSwitchIsON", 66), ("acPowerIsON", 128), ("onlineAndAcPowerIsON", 130), ("onlineAndPredictiveFailure", 210), ("acPowerAndSwitchAreOnPowerSupplyIsOnIsOkAndOnline", 242))

class PowerSupplyTypeEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("powerSupplyTypeIsOther", 1), ("powerSupplyTypeIsUnknown", 2), ("powerSupplyTypeIsLinear", 3), ("powerSupplyTypeIsSwitching", 4), ("powerSupplyTypeIsBattery", 5), ("powerSupplyTypeIsUPS", 6), ("powerSupplyTypeIsConverter", 7), ("powerSupplyTypeIsRegulator", 8), ("powerSupplyTypeIsAC", 9), ("powerSupplyTypeIsDC", 10), ("powerSupplyTypeIsVRM", 11))

class PowerSupplySensorStateFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64))
    namedValues = NamedValues(("presenceDetected", 1), ("psFailureDetected", 2), ("predictiveFailure", 4), ("psACLost", 8), ("acLostOrOutOfRange", 16), ("acOutOfRangeButPresent", 32), ("configurationError", 64))

class PowerSupplyConfigurationErrorTypeEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("vendorMismatch", 1), ("revisionMismatch", 2), ("processorMissing", 3))

powerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12), )
if mibBuilder.loadTexts: powerSupplyTable.setStatus('current')
powerSupplyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "powerSupplychassisIndex"), (0, "IDRAC-MIB-SMIv2", "powerSupplyIndex"))
if mibBuilder.loadTexts: powerSupplyTableEntry.setStatus('current')
powerSupplychassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplychassisIndex.setStatus('current')
powerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyIndex.setStatus('current')
powerSupplyStateCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 3), PowerSupplyStateCapabilitiesUniqueFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStateCapabilitiesUnique.setStatus('current')
powerSupplyStateSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 4), PowerSupplyStateSettingsUniqueFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStateSettingsUnique.setStatus('current')
powerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStatus.setStatus('current')
powerSupplyOutputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 6), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyOutputWatts.setStatus('current')
powerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 7), PowerSupplyTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyType.setStatus('current')
powerSupplyLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyLocationName.setStatus('current')
powerSupplyMaximumInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 9), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyMaximumInputVoltage.setStatus('current')
powerSupplypowerUnitIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 10), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplypowerUnitIndexReference.setStatus('current')
powerSupplySensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 11), PowerSupplySensorStateFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplySensorState.setStatus('current')
powerSupplyConfigurationErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 12), PowerSupplyConfigurationErrorTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyConfigurationErrorType.setStatus('current')
powerSupplyPowerMonitorCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 13), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyPowerMonitorCapable.setStatus('current')
powerSupplyRatedInputWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 14), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyRatedInputWattage.setStatus('current')
powerSupplyFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 15), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyFQDD.setStatus('current')
powerSupplyCurrentInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 12, 1, 16), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyCurrentInputVoltage.setStatus('current')
class VoltageTypeEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    namedValues = NamedValues(("voltageProbeTypeIsOther", 1), ("voltageProbeTypeIsUnknown", 2), ("voltageProbeTypeIs1Point5Volt", 3), ("voltageProbeTypeIs3Point3Volt", 4), ("voltageProbeTypeIs5Volt", 5), ("voltageProbeTypeIsMinus5Volt", 6), ("voltageProbeTypeIs12Volt", 7), ("voltageProbeTypeIsMinus12Volt", 8), ("voltageProbeTypeIsIO", 9), ("voltageProbeTypeIsCore", 10), ("voltageProbeTypeIsFLEA", 11), ("voltageProbeTypeIsBattery", 12), ("voltageProbeTypeIsTerminator", 13), ("voltageProbeTypeIs2Point5Volt", 14), ("voltageProbeTypeIsGTL", 15), ("voltageProbeTypeIsDiscrete", 16), ("voltageProbeTypeIsGenericDiscrete", 17), ("voltageProbeTypeIsPSVoltage", 18), ("voltageProbeTypeIsMemoryStatus", 19))

class VoltageDiscreteReadingEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("voltageIsGood", 1), ("voltageIsBad", 2))

voltageProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20), )
if mibBuilder.loadTexts: voltageProbeTable.setStatus('current')
voltageProbeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "voltageProbechassisIndex"), (0, "IDRAC-MIB-SMIv2", "voltageProbeIndex"))
if mibBuilder.loadTexts: voltageProbeTableEntry.setStatus('current')
voltageProbechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbechassisIndex.setStatus('current')
voltageProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeIndex.setStatus('current')
voltageProbeStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeStateCapabilities.setStatus('current')
voltageProbeStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeStateSettings.setStatus('current')
voltageProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 5), StatusProbeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeStatus.setStatus('current')
voltageProbeReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 6), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeReading.setStatus('current')
voltageProbeType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 7), VoltageTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeType.setStatus('current')
voltageProbeLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeLocationName.setStatus('current')
voltageProbeUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 9), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeUpperNonRecoverableThreshold.setStatus('current')
voltageProbeUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 10), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeUpperCriticalThreshold.setStatus('current')
voltageProbeUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 11), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeUpperNonCriticalThreshold.setStatus('current')
voltageProbeLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 12), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeLowerNonCriticalThreshold.setStatus('current')
voltageProbeLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 13), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeLowerCriticalThreshold.setStatus('current')
voltageProbeLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 14), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeLowerNonRecoverableThreshold.setStatus('current')
voltageProbeProbeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 15), ProbeCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeProbeCapabilities.setStatus('current')
voltageProbeDiscreteReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 20, 1, 16), VoltageDiscreteReadingEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageProbeDiscreteReading.setStatus('current')
class AmperageProbeTypeEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25, 26))
    namedValues = NamedValues(("amperageProbeTypeIsOther", 1), ("amperageProbeTypeIsUnknown", 2), ("amperageProbeTypeIs1Point5Volt", 3), ("amperageProbeTypeIs3Point3volt", 4), ("amperageProbeTypeIs5Volt", 5), ("amperageProbeTypeIsMinus5Volt", 6), ("amperageProbeTypeIs12Volt", 7), ("amperageProbeTypeIsMinus12Volt", 8), ("amperageProbeTypeIsIO", 9), ("amperageProbeTypeIsCore", 10), ("amperageProbeTypeIsFLEA", 11), ("amperageProbeTypeIsBattery", 12), ("amperageProbeTypeIsTerminator", 13), ("amperageProbeTypeIs2Point5Volt", 14), ("amperageProbeTypeIsGTL", 15), ("amperageProbeTypeIsDiscrete", 16), ("amperageProbeTypeIsPowerSupplyAmps", 23), ("amperageProbeTypeIsPowerSupplyWatts", 24), ("amperageProbeTypeIsSystemAmps", 25), ("amperageProbeTypeIsSystemWatts", 26))

class AmperageDiscreteReadingEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("amperageIsGood", 1), ("amperageIsBad", 2))

amperageProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30), )
if mibBuilder.loadTexts: amperageProbeTable.setStatus('current')
amperageProbeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "amperageProbechassisIndex"), (0, "IDRAC-MIB-SMIv2", "amperageProbeIndex"))
if mibBuilder.loadTexts: amperageProbeTableEntry.setStatus('current')
amperageProbechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbechassisIndex.setStatus('current')
amperageProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeIndex.setStatus('current')
amperageProbeStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeStateCapabilities.setStatus('current')
amperageProbeStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeStateSettings.setStatus('current')
amperageProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 5), StatusProbeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeStatus.setStatus('current')
amperageProbeReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 6), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeReading.setStatus('current')
amperageProbeType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 7), AmperageProbeTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeType.setStatus('current')
amperageProbeLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeLocationName.setStatus('current')
amperageProbeUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 9), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeUpperNonRecoverableThreshold.setStatus('current')
amperageProbeUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 10), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeUpperCriticalThreshold.setStatus('current')
amperageProbeUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 11), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeUpperNonCriticalThreshold.setStatus('current')
amperageProbeLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 12), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeLowerNonCriticalThreshold.setStatus('current')
amperageProbeLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 13), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeLowerCriticalThreshold.setStatus('current')
amperageProbeLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 14), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeLowerNonRecoverableThreshold.setStatus('current')
amperageProbeProbeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 15), ProbeCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeProbeCapabilities.setStatus('current')
amperageProbeDiscreteReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 30, 1, 16), AmperageDiscreteReadingEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amperageProbeDiscreteReading.setStatus('current')
class SystemBatteryReadingFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("predictiveFailure", 1), ("failed", 2), ("presenceDetected", 4))

systemBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50), )
if mibBuilder.loadTexts: systemBatteryTable.setStatus('current')
systemBatteryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "systemBatteryChassisIndex"), (0, "IDRAC-MIB-SMIv2", "systemBatteryIndex"))
if mibBuilder.loadTexts: systemBatteryTableEntry.setStatus('current')
systemBatteryChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryChassisIndex.setStatus('current')
systemBatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryIndex.setStatus('current')
systemBatteryStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryStateCapabilities.setStatus('current')
systemBatteryStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryStateSettings.setStatus('current')
systemBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryStatus.setStatus('current')
systemBatteryReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 6), SystemBatteryReadingFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryReading.setStatus('current')
systemBatteryLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 50, 1, 7), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBatteryLocationName.setStatus('current')
class PowerCapCapabilitiesFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

class PowerCapSettingEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("enabled", 1))

powerUsageTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60), )
if mibBuilder.loadTexts: powerUsageTable.setStatus('current')
powerUsageTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "powerUsageChassisIndex"), (0, "IDRAC-MIB-SMIv2", "powerUsageIndex"))
if mibBuilder.loadTexts: powerUsageTableEntry.setStatus('current')
powerUsageChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageChassisIndex.setStatus('current')
powerUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageIndex.setStatus('current')
powerUsageStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageStateCapabilities.setStatus('current')
powerUsageStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageStateSettings.setStatus('current')
powerUsageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageStatus.setStatus('current')
powerUsageEntityName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 6), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageEntityName.setStatus('current')
powerUsageCumulativeWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 7), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageCumulativeWattage.setStatus('current')
powerUsageCumulativeWattageStartDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 8), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageCumulativeWattageStartDateName.setStatus('current')
powerUsagePeakWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 9), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakWatts.setStatus('current')
powerUsagePeakWattsStartDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 10), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakWattsStartDateName.setStatus('current')
powerUsagePeakWattsReadingDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 11), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakWattsReadingDateName.setStatus('current')
powerUsagePeakAmps = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 12), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakAmps.setStatus('current')
powerUsagePeakAmpsStartDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 13), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakAmpsStartDateName.setStatus('current')
powerUsagePeakAmpsReadingDateName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 14), DateName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakAmpsReadingDateName.setStatus('current')
powerUsageIdlePower = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 15), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageIdlePower.setStatus('current')
powerUsageMaxPotentialPower = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 16), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageMaxPotentialPower.setStatus('current')
powerUsagePowerCapCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 17), PowerCapCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePowerCapCapabilities.setStatus('current')
powerUsagePowerCapSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 18), PowerCapSettingEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePowerCapSetting.setStatus('current')
powerUsagePowerCapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 19), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePowerCapValue.setStatus('current')
powerUsageInstantaneousHeadroom = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 20), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsageInstantaneousHeadroom.setStatus('current')
powerUsagePeakHeadroom = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 600, 60, 1, 21), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUsagePeakHeadroom.setStatus('current')
coolingUnitTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10), )
if mibBuilder.loadTexts: coolingUnitTable.setStatus('current')
coolingUnitTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "coolingUnitchassisIndex"), (0, "IDRAC-MIB-SMIv2", "coolingUnitIndex"))
if mibBuilder.loadTexts: coolingUnitTableEntry.setStatus('current')
coolingUnitchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitchassisIndex.setStatus('current')
coolingUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitIndex.setStatus('current')
coolingUnitStateCapabilties = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStateCapabilties.setStatus('current')
coolingUnitStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStateSettings.setStatus('current')
coolingUnitRedundancyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 5), StatusRedundancyEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitRedundancyStatus.setStatus('current')
coolingDeviceCountForRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 6), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceCountForRedundancy.setStatus('current')
coolingUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 7), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitName.setStatus('current')
coolingUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 10, 1, 8), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatus.setStatus('current')
class CoolingDeviceTypeEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("coolingDeviceTypeIsOther", 1), ("coolingDeviceTypeIsUnknown", 2), ("coolingDeviceTypeIsAFan", 3), ("coolingDeviceTypeIsABlower", 4), ("coolingDeviceTypeIsAChipFan", 5), ("coolingDeviceTypeIsACabinetFan", 6), ("coolingDeviceTypeIsAPowerSupplyFan", 7), ("coolingDeviceTypeIsAHeatPipe", 8), ("coolingDeviceTypeIsRefrigeration", 9), ("coolingDeviceTypeIsActiveCooling", 10), ("coolingDeviceTypeIsPassiveCooling", 11))

class CoolingDeviceSubTypeEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 16))
    namedValues = NamedValues(("coolingDeviceSubTypeIsOther", 1), ("coolingDeviceSubTypeIsUnknown", 2), ("coolingDeviceSubTypeIsAFanThatReadsInRPM", 3), ("coolingDeviceSubTypeIsAFanReadsONorOFF", 4), ("coolingDeviceSubTypeIsAPowerSupplyFanThatReadsinRPM", 5), ("coolingDeviceSubTypeIsAPowerSupplyFanThatReadsONorOFF", 6), ("coolingDeviceSubTypeIsDiscrete", 16))

class CoolingDeviceDiscreteReadingEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("coolingDeviceIsGood", 1), ("coolingDeviceIsBad", 2))

coolingDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12), )
if mibBuilder.loadTexts: coolingDeviceTable.setStatus('current')
coolingDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "coolingDevicechassisIndex"), (0, "IDRAC-MIB-SMIv2", "coolingDeviceIndex"))
if mibBuilder.loadTexts: coolingDeviceTableEntry.setStatus('current')
coolingDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDevicechassisIndex.setStatus('current')
coolingDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceIndex.setStatus('current')
coolingDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceStateCapabilities.setStatus('current')
coolingDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceStateSettings.setStatus('current')
coolingDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 5), StatusProbeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceStatus.setStatus('current')
coolingDeviceReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 6), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceReading.setStatus('current')
coolingDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 7), CoolingDeviceTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceType.setStatus('current')
coolingDeviceLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceLocationName.setStatus('current')
coolingDeviceUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 9), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceUpperNonRecoverableThreshold.setStatus('current')
coolingDeviceUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 10), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceUpperCriticalThreshold.setStatus('current')
coolingDeviceUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 11), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceUpperNonCriticalThreshold.setStatus('current')
coolingDeviceLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 12), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceLowerNonCriticalThreshold.setStatus('current')
coolingDeviceLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 13), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceLowerCriticalThreshold.setStatus('current')
coolingDeviceLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 14), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceLowerNonRecoverableThreshold.setStatus('current')
coolingDevicecoolingUnitIndexReference = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 15), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDevicecoolingUnitIndexReference.setStatus('current')
coolingDeviceSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 16), CoolingDeviceSubTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceSubType.setStatus('current')
coolingDeviceProbeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 17), ProbeCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceProbeCapabilities.setStatus('current')
coolingDeviceDiscreteReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 18), CoolingDeviceDiscreteReadingEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceDiscreteReading.setStatus('current')
coolingDeviceFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 12, 1, 19), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingDeviceFQDD.setStatus('current')
class TemperatureProbeTypeEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 16))
    namedValues = NamedValues(("temperatureProbeTypeIsOther", 1), ("temperatureProbeTypeIsUnknown", 2), ("temperatureProbeTypeIsAmbientESM", 3), ("temperatureProbeTypeIsDiscrete", 16))

class TemperatureDiscreteReadingEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("temperatureIsGood", 1), ("temperatureIsBad", 2))

temperatureProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20), )
if mibBuilder.loadTexts: temperatureProbeTable.setStatus('current')
temperatureProbeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "temperatureProbechassisIndex"), (0, "IDRAC-MIB-SMIv2", "temperatureProbeIndex"))
if mibBuilder.loadTexts: temperatureProbeTableEntry.setStatus('current')
temperatureProbechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbechassisIndex.setStatus('current')
temperatureProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeIndex.setStatus('current')
temperatureProbeStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeStateCapabilities.setStatus('current')
temperatureProbeStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeStateSettings.setStatus('current')
temperatureProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 5), StatusProbeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeStatus.setStatus('current')
temperatureProbeReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 6), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeReading.setStatus('current')
temperatureProbeType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 7), TemperatureProbeTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeType.setStatus('current')
temperatureProbeLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeLocationName.setStatus('current')
temperatureProbeUpperNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 9), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeUpperNonRecoverableThreshold.setStatus('current')
temperatureProbeUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 10), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeUpperCriticalThreshold.setStatus('current')
temperatureProbeUpperNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 11), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeUpperNonCriticalThreshold.setStatus('current')
temperatureProbeLowerNonCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 12), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeLowerNonCriticalThreshold.setStatus('current')
temperatureProbeLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 13), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeLowerCriticalThreshold.setStatus('current')
temperatureProbeLowerNonRecoverableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 14), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeLowerNonRecoverableThreshold.setStatus('current')
temperatureProbeProbeCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 15), ProbeCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeProbeCapabilities.setStatus('current')
temperatureProbeDiscreteReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 700, 20, 1, 16), TemperatureDiscreteReadingEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeDiscreteReading.setStatus('current')
class ProcessorDeviceType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("deviceTypeIsOther", 1), ("deviceTypeIsUnknown", 2), ("deviceTypeIsCPU", 3), ("deviceTypeIsMathProcessor", 4), ("deviceTypeIsDSP", 5), ("deviceTypeIsAVideoProcessor", 6))

class ProcessorDeviceFamily(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 97, 98, 99, 100, 101, 112, 120, 121, 122, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 250, 251))
    namedValues = NamedValues(("deviceFamilyIsOther", 1), ("deviceFamilyIsUnknown", 2), ("deviceFamilyIs8086", 3), ("deviceFamilyIs80286", 4), ("deviceFamilyIsIntel386", 5), ("deviceFamilyIsIntel486", 6), ("deviceFamilyIs8087", 7), ("deviceFamilyIs80287", 8), ("deviceFamilyIs80387", 9), ("deviceFamilyIs80487", 10), ("deviceFamilyIsPentium", 11), ("deviceFamilyIsPentiumPro", 12), ("deviceFamilyIsPentiumII", 13), ("deviceFamilyIsPentiumMMX", 14), ("deviceFamilyIsCeleron", 15), ("deviceFamilyIsPentiumIIXeon", 16), ("deviceFamilyIsPentiumIII", 17), ("deviceFamilyIsPentiumIIIXeon", 18), ("deviceFamilyIsPentiumIIISpeedStep", 19), ("deviceFamilyIsItanium", 20), ("deviceFamilyIsIntelXeon", 21), ("deviceFamilyIsPentium4", 22), ("deviceFamilyIsIntelXeonMP", 23), ("deviceFamilyIsIntelItanium2", 24), ("deviceFamilyIsK5", 25), ("deviceFamilyIsK6", 26), ("deviceFamilyIsK6Dash2", 27), ("deviceFamilyIsK6Dash3", 28), ("deviceFamilyIsAMDAthlon", 29), ("deviceFamilyIsAMD2900", 30), ("deviceFamilyIsK6Dash2Plus", 31), ("deviceFamilyIsPowerPC", 32), ("deviceFamilyIsPowerPC601", 33), ("deviceFamilyIsPowerPC603", 34), ("deviceFamilyIsPowerPC603Plus", 35), ("deviceFamilyIsPowerPC604", 36), ("deviceFamilyIsPowerPC620", 37), ("deviceFamilyIsPowerPCx704", 38), ("deviceFamilyIsPowerPC750", 39), ("deviceFamilyIsIntelCoreDuo", 40), ("deviceFamilyIsIntelCoreDuoMobile", 41), ("deviceFamilyIsIntelCoreSoloMobile", 42), ("deviceFamilyIsIntelAtom", 43), ("deviceFamilyIsAlpha", 48), ("deviceFamilyIsAlpha21064", 49), ("deviceFamilyIsAlpha21066", 50), ("deviceFamilyIsAlpha21164", 51), ("deviceFamilyIsAlpha21164PC", 52), ("deviceFamilyIsAlpha21164a", 53), ("deviceFamilyIsAlpha21264", 54), ("deviceFamilyIsAlpha21364", 55), ("deviceFamilyIsAMDTurionIIUltraDualMobileM", 56), ("deviceFamilyIsAMDTurionIIDualMobileM", 57), ("deviceFamilyIsAMDAthlonIIDualMobileM", 58), ("deviceFamilyIsAMDOpteron6100", 59), ("deviceFamilyIsAMDOpteron4100", 60), ("deviceFamilyIsAMDOpteron6200", 61), ("deviceFamilyIsAMDOpteron4200", 62), ("deviceFamilyIsMIPS", 64), ("deviceFamilyIsMIPSR4000", 65), ("deviceFamilyIsMIPSR4200", 66), ("deviceFamilyIsMIPSR4400", 67), ("deviceFamilyIsMIPSR4600", 68), ("deviceFamilyIsMIPSR10000", 69), ("deviceFamilyIsSPARC", 80), ("deviceFamilyIsSuperSPARC", 81), ("deviceFamilyIsmicroSPARCII", 82), ("deviceFamilyIsmicroSPARCIIep", 83), ("deviceFamilyIsUltraSPARC", 84), ("deviceFamilyIsUltraSPARCII", 85), ("deviceFamilyIsUltraSPARCIIi", 86), ("deviceFamilyIsUltraSPARCIII", 87), ("deviceFamilyIsUltraSPARCIIIi", 88), ("deviceFamilyIs68040", 96), ("deviceFamilyIs68xxx", 97), ("deviceFamilyIs68000", 98), ("deviceFamilyIs68010", 99), ("deviceFamilyIs68020", 100), ("deviceFamilyIs68030", 101), ("deviceFamilyIsHobbit", 112), ("deviceFamilyIsCrusoeTM5000", 120), ("deviceFamilyIsCrusoeTM3000", 121), ("deviceFamilyIsEfficeonTM8000", 122), ("deviceFamilyIsWeitek", 128), ("deviceFamilyIsIntelCeleronM", 130), ("deviceFamilyIsAMDAthlon64", 131), ("deviceFamilyIsAMDOpteron", 132), ("deviceFamilyIsAMDSempron", 133), ("deviceFamilyIsAMDTurion64Mobile", 134), ("deviceFamilyIsDualCoreAMDOpteron", 135), ("deviceFamilyIsAMDAthlon64X2DualCore", 136), ("deviceFamilyIsAMDTurion64X2Mobile", 137), ("deviceFamilyIsQuadCoreAMDOpteron", 138), ("deviceFamilyIsThirdGenerationAMDOpteron", 139), ("deviceFamilyIsAMDPhenomFXQuadCore", 140), ("deviceFamilyIsAMDPhenomX4QuadCore", 141), ("deviceFamilyIsAMDPhenomX2DualCore", 142), ("deviceFamilyIsAMDAthlonX2DualCore", 143), ("deviceFamilyIsPARISC", 144), ("deviceFamilyIsPARISC8500", 145), ("deviceFamilyIsPARISC8000", 146), ("deviceFamilyIsPARISC7300LC", 147), ("deviceFamilyIsPARISC7200", 148), ("deviceFamilyIsPARISC7100LC", 149), ("deviceFamilyIsPARISC7100", 150), ("deviceFamilyIsV30", 160), ("deviceFamilyIsQuadCoreIntelXeon3200", 161), ("deviceFamilyIsDualCoreIntelXeon3000", 162), ("deviceFamilyIsQuadCoreIntelXeon5300", 163), ("deviceFamilyIsDualCoreIntelXeon5100", 164), ("deviceFamilyIsDualCoreIntelXeon5000", 165), ("deviceFamilyIsDualCoreIntelXeonLV", 166), ("deviceFamilyIsDualCoreIntelXeonULV", 167), ("deviceFamilyIsDualCoreIntelXeon7100", 168), ("deviceFamilyIsQuadCoreIntelXeon5400", 169), ("deviceFamilyIsQuadCoreIntelXeon", 170), ("deviceFamilyIsDualCoreIntelXeon5200", 171), ("deviceFamilyIsDualCoreIntelXeon7200", 172), ("deviceFamilyIsQuadCoreIntelXeon7300", 173), ("deviceFamilyIsQuadCoreIntelXeon7400", 174), ("deviceFamilyIsMultiCoreIntelXeon7400", 175), ("deviceFamilyIsM1", 176), ("deviceFamilyIsM2", 177), ("deviceFamilyIsIntelPentium4HT", 179), ("deviceFamilyIsAS400", 180), ("deviceFamilyIsAMDAthlonXP", 182), ("deviceFamilyIsAMDAthlonMP", 183), ("deviceFamilyIsAMDDuron", 184), ("deviceFamilyIsIntelPentiumM", 185), ("deviceFamilyIsIntelCeleronD", 186), ("deviceFamilyIsIntelPentiumD", 187), ("deviceFamilyIsIntelPentiumExtreme", 188), ("deviceFamilyIsIntelCoreSolo", 189), ("deviceFamilyIsIntelCore2", 190), ("deviceFamilyIsIntelCore2Duo", 191), ("deviceFamilyIsIntelCore2Solo", 192), ("deviceFamilyIsIntelCore2Extreme", 193), ("deviceFamilyIsIntelCore2Quad", 194), ("deviceFamilyIsIntelCore2ExtremeMobile", 195), ("deviceFamilyIsIntelCore2DuoMobile", 196), ("deviceFamilyIsIntelCore2SoloMobile", 197), ("deviceFamilyIsIntelCorei7", 198), ("deviceFamilyIsDualCoreIntelCeleron", 199), ("deviceFamilyIsIBM390", 200), ("deviceFamilyIsG4", 201), ("deviceFamilyIsG5", 202), ("deviceFamilyIsESA390G6", 203), ("deviceFamilyIszArchitectur", 204), ("deviceFamilyIsIntelCorei5", 205), ("deviceFamilyIsIntelCorei3", 206), ("deviceFamilyIsVIAC7M", 210), ("deviceFamilyIsVIAC7D", 211), ("deviceFamilyIsVIAC7", 212), ("deviceFamilyIsVIAEden", 213), ("deviceFamilyIsMultiCoreIntelXeon", 214), ("deviceFamilyIsDualCoreIntelXeon3xxx", 215), ("deviceFamilyIsQuadCoreIntelXeon3xxx", 216), ("deviceFamilyIsVIANano", 217), ("deviceFamilyIsDualCoreIntelXeon5xxx", 218), ("deviceFamilyIsQuadCoreIntelXeon5xxx", 219), ("deviceFamilyIsDualCoreIntelXeon7xxx", 221), ("deviceFamilyIsQuadCoreIntelXeon7xxx", 222), ("deviceFamilyIsMultiCoreIntelXeon7xxx", 223), ("deviceFamilyIsMultiCoreIntelXeon3400", 224), ("deviceFamilyIsEmbeddedAMDOpertonQuadCore", 230), ("deviceFamilyIsAMDPhenomTripleCore", 231), ("deviceFamilyIsAMDTurionUltraDualCoreMobile", 232), ("deviceFamilyIsAMDTurionDualCoreMobile", 233), ("deviceFamilyIsAMDAthlonDualCore", 234), ("deviceFamilyIsAMDSempronSI", 235), ("deviceFamilyIsAMDPhenomII", 236), ("deviceFamilyIsAMDAthlonII", 237), ("deviceFamilyIsSixCoreAMDOpteron", 238), ("deviceFamilyIsAMDSempronM", 239), ("deviceFamilyIsi860", 250), ("deviceFamilyIsi960", 251))

class ProcessorDeviceStatusState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("userDisabled", 4), ("biosDisabled", 5), ("idle", 6))

processorDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30), )
if mibBuilder.loadTexts: processorDeviceTable.setStatus('current')
processorDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "processorDevicechassisIndex"), (0, "IDRAC-MIB-SMIv2", "processorDeviceIndex"))
if mibBuilder.loadTexts: processorDeviceTableEntry.setStatus('current')
processorDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDevicechassisIndex.setStatus('current')
processorDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceIndex.setStatus('current')
processorDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStateCapabilities.setStatus('current')
processorDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStateSettings.setStatus('current')
processorDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatus.setStatus('current')
processorDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 7), ProcessorDeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceType.setStatus('current')
processorDeviceManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceManufacturerName.setStatus('current')
processorDeviceStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 9), ProcessorDeviceStatusState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusState.setStatus('current')
processorDeviceFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 10), ProcessorDeviceFamily()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceFamily.setStatus('current')
processorDeviceMaximumSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 11), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceMaximumSpeed.setStatus('current')
processorDeviceCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 12), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceCurrentSpeed.setStatus('current')
processorDeviceExternalClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 13), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceExternalClockSpeed.setStatus('current')
processorDeviceVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 14), Signed32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceVoltage.setStatus('current')
processorDeviceVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 16), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceVersionName.setStatus('current')
processorDeviceCoreCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 17), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceCoreCount.setStatus('current')
processorDeviceCoreEnabledCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 18), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceCoreEnabledCount.setStatus('current')
processorDeviceThreadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 19), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceThreadCount.setStatus('current')
processorDeviceCharacteristics = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 20), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceCharacteristics.setStatus('current')
processorDeviceExtendedCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 21), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceExtendedCapabilities.setStatus('current')
processorDeviceExtendedSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 22), Unsigned16BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceExtendedSettings.setStatus('current')
processorDeviceBrandName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 23), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceBrandName.setStatus('current')
processorDeviceFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 30, 1, 26), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceFQDD.setStatus('current')
class ProcessorDeviceStatusReadingFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 32, 128, 256, 512, 1024))
    namedValues = NamedValues(("internalError", 1), ("thermalTrip", 2), ("configurationError", 32), ("processorPresent", 128), ("processorDisabled", 256), ("terminatorPresent", 512), ("processorThrottled", 1024))

processorDeviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32), )
if mibBuilder.loadTexts: processorDeviceStatusTable.setStatus('current')
processorDeviceStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "processorDeviceStatusChassisIndex"), (0, "IDRAC-MIB-SMIv2", "processorDeviceStatusIndex"))
if mibBuilder.loadTexts: processorDeviceStatusTableEntry.setStatus('current')
processorDeviceStatusChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusChassisIndex.setStatus('current')
processorDeviceStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusIndex.setStatus('current')
processorDeviceStatusStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusStateCapabilities.setStatus('current')
processorDeviceStatusStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusStateSettings.setStatus('current')
processorDeviceStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusStatus.setStatus('current')
processorDeviceStatusReading = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 6), ProcessorDeviceStatusReadingFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusReading.setStatus('current')
processorDeviceStatusLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 32, 1, 7), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorDeviceStatusLocationName.setStatus('current')
class MemoryDeviceTypeEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26))
    namedValues = NamedValues(("deviceTypeIsOther", 1), ("deviceTypeIsUnknown", 2), ("deviceTypeIsDRAM", 3), ("deviceTypeIsEDRAM", 4), ("deviceTypeIsVRAM", 5), ("deviceTypeIsSRAM", 6), ("deviceTypeIsRAM", 7), ("deviceTypeIsROM", 8), ("deviceTypeIsFLASH", 9), ("deviceTypeIsEEPROM", 10), ("deviceTypeIsFEPROM", 11), ("deviceTypeIsEPROM", 12), ("deviceTypeIsCDRAM", 13), ("deviceTypeIs3DRAM", 14), ("deviceTypeIsSDRAM", 15), ("deviceTypeIsSGRAM", 16), ("deviceTypeIsRDRAM", 17), ("deviceTypeIsDDR", 18), ("deviceTypeIsDDR2", 19), ("deviceTypeIsDDR2FBDIMM", 20), ("deviceTypeIsDDR3", 24), ("deviceTypeIsFBD2", 25), ("deviceTypeIsDDR4", 26))

memoryDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50), )
if mibBuilder.loadTexts: memoryDeviceTable.setStatus('current')
memoryDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "memoryDevicechassisIndex"), (0, "IDRAC-MIB-SMIv2", "memoryDeviceIndex"))
if mibBuilder.loadTexts: memoryDeviceTableEntry.setStatus('current')
memoryDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDevicechassisIndex.setStatus('current')
memoryDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceIndex.setStatus('current')
memoryDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceStateCapabilities.setStatus('current')
memoryDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceStateSettings.setStatus('current')
memoryDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceStatus.setStatus('current')
memoryDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 7), MemoryDeviceTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceType.setStatus('current')
memoryDeviceLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceLocationName.setStatus('current')
memoryDeviceBankLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 10), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceBankLocationName.setStatus('current')
memoryDeviceSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 14), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceSize.setStatus('current')
memoryDeviceSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 15), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceSpeed.setStatus('current')
memoryDeviceManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 21), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceManufacturerName.setStatus('current')
memoryDevicePartNumberName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 22), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDevicePartNumberName.setStatus('current')
memoryDeviceSerialNumberName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 23), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceSerialNumberName.setStatus('current')
memoryDeviceFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 26), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceFQDD.setStatus('current')
memoryDeviceCurrentOperatingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 50, 1, 27), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryDeviceCurrentOperatingSpeed.setStatus('current')
pCIDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80), )
if mibBuilder.loadTexts: pCIDeviceTable.setStatus('current')
pCIDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "pCIDevicechassisIndex"), (0, "IDRAC-MIB-SMIv2", "pCIDeviceIndex"))
if mibBuilder.loadTexts: pCIDeviceTableEntry.setStatus('current')
pCIDevicechassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDevicechassisIndex.setStatus('current')
pCIDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceIndex.setStatus('current')
pCIDeviceStateCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 3), StateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceStateCapabilities.setStatus('current')
pCIDeviceStateSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 4), StateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceStateSettings.setStatus('current')
pCIDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceStatus.setStatus('current')
pCIDeviceDataBusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 7), Unsigned32BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceDataBusWidth.setStatus('current')
pCIDeviceManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceManufacturerName.setStatus('current')
pCIDeviceDescriptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 9), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceDescriptionName.setStatus('current')
pCIDeviceFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 80, 1, 12), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pCIDeviceFQDD.setStatus('current')
class NetworkDeviceConnectionStatusEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10, 11, 12, 13))
    namedValues = NamedValues(("connected", 1), ("disconnected", 2), ("driverBad", 3), ("driverDisabled", 4), ("hardwareInitalizing", 10), ("hardwareResetting", 11), ("hardwareClosing", 12), ("hardwareNotReady", 13))

class NetworkDeviceTOECapabilityFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))
    namedValues = NamedValues(("unknown", 1), ("available", 2), ("notAvailable", 4), ("cannotBeDetermined", 8), ("driverNotResponding", 16))

class NetworkDeviceiSCSICapabilityFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))
    namedValues = NamedValues(("unknown", 1), ("available", 2), ("notAvailable", 4), ("cannotBeDetermined", 8), ("driverNotResponding", 16))

class NetworkDeviceCapabilitiesFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))
    namedValues = NamedValues(("supported", 1), ("toe", 2), ("iscsiOffload", 4), ("fcoeOffload", 8))

networkDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90), )
if mibBuilder.loadTexts: networkDeviceTable.setStatus('current')
networkDeviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "networkDeviceChassisIndex"), (0, "IDRAC-MIB-SMIv2", "networkDeviceIndex"))
if mibBuilder.loadTexts: networkDeviceTableEntry.setStatus('current')
networkDeviceChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceChassisIndex.setStatus('current')
networkDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceIndex.setStatus('current')
networkDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 3), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceStatus.setStatus('current')
networkDeviceConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 4), NetworkDeviceConnectionStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceConnectionStatus.setStatus('current')
networkDeviceProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 6), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceProductName.setStatus('current')
networkDeviceVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 7), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceVendorName.setStatus('current')
networkDeviceCurrentMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 15), MACAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceCurrentMACAddress.setStatus('current')
networkDevicePermanentMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 16), MACAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDevicePermanentMACAddress.setStatus('current')
networkDevicePCIBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 17), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDevicePCIBusNumber.setStatus('current')
networkDevicePCIDeviceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 18), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDevicePCIDeviceNumber.setStatus('current')
networkDevicePCIFunctionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 19), Unsigned8BitRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDevicePCIFunctionNumber.setStatus('current')
networkDeviceTOECapabilityFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 23), NetworkDeviceTOECapabilityFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceTOECapabilityFlags.setStatus('current')
networkDeviceiSCSICapabilityFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 27), NetworkDeviceiSCSICapabilityFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceiSCSICapabilityFlags.setStatus('current')
networkDeviceiSCSIEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 28), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceiSCSIEnabled.setStatus('current')
networkDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 29), NetworkDeviceCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceCapabilities.setStatus('current')
networkDeviceFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1100, 90, 1, 30), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDeviceFQDD.setStatus('current')
class SystemSlotStateCapabilitiesFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 126, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32640, 32766))
    namedValues = NamedValues(("systemSlotHotPlugIsUnknown", 1), ("systemSlotHotPlugIsHotPluggableCapable", 2), ("systemSlotHotPlugCanBePoweredOn", 4), ("systemSlotHotPlugCanSignalAttention", 8), ("systemSlotHotPlugCanSignalPowerFault", 16), ("systemSlotHotPlugCanSignalAdapterPresent", 32), ("systemSlotHotPlugCanSignalPowerButtonPressed", 64), ("canSupportAllHotPlugCapabilities", 126), ("systemSlotCanProvide5Volts", 128), ("systemSlotCanProvide3Point3Volts", 256), ("systemSlotCanSignalIfShared", 512), ("systemSlotCanSupportCard16", 1024), ("systemSlotCanSupportCardBus", 2048), ("systemSlotCanSupportZoomVideo", 4096), ("systemSlotCanSupportModemRingResume", 8192), ("systemSlotCanSupportPMESignal", 16384), ("canSupportAllSlotCapabilities", 32640), ("canSupportAllSlotAndAllHotPlugCapabilities", 32766))

class SystemSlotStateSettingsFlags(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 36, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 16770, 16804, 16806, 17316))
    namedValues = NamedValues(("systemSlotHotPlugIsUnknown", 1), ("systemSlotHotPlugIsHotPluggable", 2), ("systemSlotHotPlugIsPoweredOn", 4), ("systemSlotHotPlugIsAtAttention", 8), ("systemSlotHotPlugHasPowerFaulted", 16), ("systemSlotHotPlugAdapterIsPresent", 32), ("systemSlotHotPlugAdapterPresentAndPoweredOn", 36), ("systemSlotHotPlugPowerButtonPressed", 64), ("systemSlotProvides5Volts", 128), ("systemSlotProvides3Point3Volts", 256), ("systemSlotIsShared", 512), ("systemSlotSupportsCard16", 1024), ("systemSlotSupportsCardBus", 2048), ("systemSlotSupportsZoomVideo", 4096), ("systemSlotSupportsModemRingResume", 8192), ("systemSlotSupportsPMESignal", 16384), ("supportsPMEand3P3Vand5VandHotPluggable", 16770), ("supportsPMEand3P3Vand5VhasAdapterOn", 16804), ("supportsPMEand3P3Vand5VhasAdapterOnandisHotPluggable", 16806), ("supportsPMEand3P3VIsSharedand5VhasAdapterOnandHotPlugable", 17316))

class SystemSlotTypeEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176))
    namedValues = NamedValues(("systemSlotIsOther", 1), ("systemSlotIsUnknown", 2), ("systemSlotIsISA", 3), ("systemSlotIsMCA", 4), ("systemSlotIsEISA", 5), ("systemSlotIsPCI", 6), ("systemSlotIsPCMCIA", 7), ("systemSlotIsVLVESA", 8), ("systemSlotIsProprietary", 9), ("systemSlotIsProcessorCard", 10), ("systemSlotIsProprietaryMemory", 11), ("systemSlotIsIORiserCard", 12), ("systemSlotIsNuBUS", 13), ("systemSlotIsPCI66MHz", 14), ("systemSlotIsAGP", 15), ("systemSlotIsAGP2X", 16), ("systemSlotIsAGP4X", 17), ("systemSlotIsPC98C20", 18), ("systemSlotIsPC98C24", 19), ("systemSlotIsPC98E", 20), ("systemSlotIsPC98LocalBus", 21), ("systemSlotIsPC98Card", 22), ("systemSlotIsPCIX", 23), ("systemSlotIsPCIExpress", 24), ("systemSlotIsAGP8X", 25), ("systemSlotIsPCIExpressX1", 166), ("systemSlotIsPCIExpressX2", 167), ("systemSlotIsPCIExpressX4", 168), ("systemSlotIsPCIExpressX8", 169), ("systemSlotIsPCIExpressX16", 170), ("systemSlotIsPCIExpressGen2", 171), ("systemSlotIsPCIExpressGen2X1", 172), ("systemSlotIsPCIExpressGen2X2", 173), ("systemSlotIsPCIExpressGen2X4", 174), ("systemSlotIsPCIExpressGen2X8", 175), ("systemSlotIsPCIExpressGen2X16", 176))

class SystemSlotUsageEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("systemSlotUsageIsOther", 1), ("systemSlotUsageIsUnknown", 2), ("systemSlotUsageIsAvailable", 3), ("systemSlotUsageIsInUse", 4))

class SystemSlotCategoryEnum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("systemSlotCategoryIsOther", 1), ("systemSlotCategoryIsUnknown", 2), ("systemSlotCategoryIsBusConnector", 3), ("systemSlotCategoryIsPCMCIA", 4), ("systemSlotCategoryIsMotherboard", 5))

systemSlotTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10), )
if mibBuilder.loadTexts: systemSlotTable.setStatus('current')
systemSlotTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "systemSlotchassisIndex"), (0, "IDRAC-MIB-SMIv2", "systemSlotIndex"))
if mibBuilder.loadTexts: systemSlotTableEntry.setStatus('current')
systemSlotchassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotchassisIndex.setStatus('current')
systemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotIndex.setStatus('current')
systemSlotStateCapabilitiesUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 3), SystemSlotStateCapabilitiesFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotStateCapabilitiesUnique.setStatus('current')
systemSlotStateSettingsUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 4), SystemSlotStateSettingsFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotStateSettingsUnique.setStatus('current')
systemSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 5), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotStatus.setStatus('current')
systemSlotCurrentUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 6), SystemSlotUsageEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotCurrentUsage.setStatus('current')
systemSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 7), SystemSlotTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotType.setStatus('current')
systemSlotSlotExternalSlotName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 8), String64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotSlotExternalSlotName.setStatus('current')
systemSlotCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 1200, 10, 1, 11), SystemSlotCategoryEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSlotCategory.setStatus('current')
fruTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10), )
if mibBuilder.loadTexts: fruTable.setStatus('current')
fruTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "fruChassisIndex"), (0, "IDRAC-MIB-SMIv2", "fruIndex"))
if mibBuilder.loadTexts: fruTableEntry.setStatus('current')
fruChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 1), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruChassisIndex.setStatus('current')
fruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 2), ObjectRange()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruIndex.setStatus('current')
fruInformationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 3), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruInformationStatus.setStatus('current')
fruManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruManufacturerName.setStatus('current')
fruSerialNumberName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruSerialNumberName.setStatus('current')
fruPartNumberName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruPartNumberName.setStatus('current')
fruRevisionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruRevisionName.setStatus('current')
fruFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 4, 2000, 10, 1, 12), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fruFQDD.setStatus('current')
batteryTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15), )
if mibBuilder.loadTexts: batteryTable.setStatus('current')
batteryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "batteryNumber"))
if mibBuilder.loadTexts: batteryTableEntry.setStatus('current')
batteryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryNumber.setStatus('current')
batteryState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("failed", 3), ("degraded", 4), ("missing", 5), ("charging", 6), ("belowThreshold", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryState.setStatus('current')
batteryComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1, 6), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryComponentStatus.setStatus('current')
batteryPredictedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("failed", 2), ("ready", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryPredictedCapacity.setStatus('obsolete')
batteryFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryFQDD.setStatus('current')
batteryDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 15, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryDisplayName.setStatus('current')
controllerTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1), )
if mibBuilder.loadTexts: controllerTable.setStatus('current')
controllerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "controllerNumber"))
if mibBuilder.loadTexts: controllerTableEntry.setStatus('current')
controllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerNumber.setStatus('current')
controllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerName.setStatus('current')
controllerRebuildRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerRebuildRate.setStatus('current')
controllerFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerFWVersion.setStatus('current')
controllerCacheSizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCacheSizeInMB.setStatus('current')
controllerRollUpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 37), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerRollUpStatus.setStatus('current')
controllerComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 38), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerComponentStatus.setStatus('current')
controllerDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerDriverVersion.setStatus('current')
controllerPCISlot = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPCISlot.setStatus('current')
controllerReconstructRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerReconstructRate.setStatus('current')
controllerPatrolReadRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPatrolReadRate.setStatus('current')
controllerBGIRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerBGIRate.setStatus('current')
controllerCheckConsistencyRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCheckConsistencyRate.setStatus('current')
controllerPatrolReadMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("disabled", 3), ("auto", 4), ("manual", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPatrolReadMode.setStatus('current')
controllerPatrolReadState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("stopped", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPatrolReadState.setStatus('current')
controllerPersistentHotSpare = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 59), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPersistentHotSpare.setStatus('current')
controllerSpinDownUnconfiguredDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 60), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSpinDownUnconfiguredDrives.setStatus('current')
controllerSpinDownHotSpareDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 61), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSpinDownHotSpareDrives.setStatus('current')
controllerSpinDownTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSpinDownTimeInterval.setStatus('current')
controllerPreservedCache = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 69), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPreservedCache.setStatus('current')
controllerCheckConsistencyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unsupported", 2), ("normal", 3), ("stopOnError", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCheckConsistencyMode.setStatus('current')
controllerCopyBackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unsupported", 2), ("on", 3), ("onWithSmart", 4), ("off", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCopyBackMode.setStatus('current')
controllerSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("lkm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSecurityStatus.setStatus('current')
controllerEncryptionKeyPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 73), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerEncryptionKeyPresent.setStatus('current')
controllerEncryptionCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("lkm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerEncryptionCapability.setStatus('current')
controllerLoadBalanceSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unsupported", 2), ("auto", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerLoadBalanceSetting.setStatus('current')
controllerMaxCapSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("oneDotFiveGbps", 2), ("threeGbps", 3), ("sixGbps", 4), ("twelveGbps", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerMaxCapSpeed.setStatus('current')
controllerSASAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 77), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSASAddress.setStatus('current')
controllerFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 78), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerFQDD.setStatus('current')
controllerDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 79), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerDisplayName.setStatus('current')
controllerT10PICapability = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("capable", 2), ("notCapable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerT10PICapability.setStatus('current')
controllerRAID10UnevenSpansSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 81), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerRAID10UnevenSpansSupported.setStatus('current')
controllerEnhancedAutoImportForeignConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("disabled", 3), ("enabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerEnhancedAutoImportForeignConfigMode.setStatus('current')
controllerBootModeSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 83), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerBootModeSupported.setStatus('current')
controllerBootMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 1, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("user", 2), ("contOnError", 3), ("headlessContOnError", 4), ("headlessSafe", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerBootMode.setStatus('current')
physicalDiskTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4), )
if mibBuilder.loadTexts: physicalDiskTable.setStatus('current')
physicalDiskTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "physicalDiskNumber"))
if mibBuilder.loadTexts: physicalDiskTableEntry.setStatus('current')
physicalDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskNumber.setStatus('current')
physicalDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskName.setStatus('current')
physicalDiskManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskManufacturer.setStatus('current')
physicalDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("online", 3), ("foreign", 4), ("offline", 5), ("blocked", 6), ("failed", 7), ("nonraid", 8), ("removed", 9), ("readonly", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskState.setStatus('current')
physicalDiskProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskProductID.setStatus('current')
physicalDiskSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskSerialNo.setStatus('current')
physicalDiskRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskRevision.setStatus('current')
physicalDiskCapacityInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskCapacityInMB.setStatus('current')
physicalDiskUsedSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskUsedSpaceInMB.setStatus('current')
physicalDiskFreeSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskFreeSpaceInMB.setStatus('current')
physicalDiskBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("scsi", 2), ("sas", 3), ("sata", 4), ("fibre", 5), ("pcie", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskBusType.setStatus('current')
physicalDiskSpareState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notASpare", 1), ("dedicatedHotSpare", 2), ("globalHotSpare", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskSpareState.setStatus('current')
physicalDiskComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 24), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskComponentStatus.setStatus('current')
physicalDiskPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskPartNumber.setStatus('current')
physicalDiskSASAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskSASAddress.setStatus('current')
physicalDiskNegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("oneDotFiveGbps", 2), ("threeGbps", 3), ("sixGbps", 4), ("twelveGbps", 5), ("fiveGTps", 6), ("eightGTps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskNegotiatedSpeed.setStatus('current')
physicalDiskCapableSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("oneDotFiveGbps", 2), ("threeGbps", 3), ("sixGbps", 4), ("twelveGbps", 5), ("fiveGTps", 6), ("eightGTps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskCapableSpeed.setStatus('current')
physicalDiskSmartAlertIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 31), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskSmartAlertIndication.setStatus('current')
physicalDiskManufactureDay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskManufactureDay.setStatus('current')
physicalDiskManufactureWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskManufactureWeek.setStatus('current')
physicalDiskManufactureYear = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskManufactureYear.setStatus('current')
physicalDiskMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("hdd", 2), ("ssd", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskMediaType.setStatus('current')
physicalDiskPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("spunUp", 2), ("spunDown", 3), ("transition", 4), ("on", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskPowerState.setStatus('current')
physicalDiskRemainingRatedWriteEndurance = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskRemainingRatedWriteEndurance.setStatus('current')
physicalDiskOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("rebuild", 2), ("clear", 3), ("copyback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskOperationalState.setStatus('current')
physicalDiskProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskProgress.setStatus('current')
physicalDiskSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2), ("secured", 3), ("locked", 4), ("foreign", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskSecurityStatus.setStatus('current')
physicalDiskFormFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("oneDotEight", 2), ("twoDotFive", 3), ("threeDotFive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskFormFactor.setStatus('current')
physicalDiskFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 54), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskFQDD.setStatus('current')
physicalDiskDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskDisplayName.setStatus('current')
physicalDiskT10PICapability = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("capable", 2), ("notCapable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskT10PICapability.setStatus('current')
physicalDiskBlockSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskBlockSizeInBytes.setStatus('current')
physicalDiskProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 59), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskProtocolVersion.setStatus('current')
physicalDiskPCIeNegotiatedLinkWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("notApplicable", 2), ("byOne", 3), ("byTwp", 4), ("byFour", 5), ("byEight", 6), ("bySixteen", 7), ("byThirtyTwp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskPCIeNegotiatedLinkWidth.setStatus('current')
physicalDiskPCIeCapableLinkWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 4, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("notApplicable", 2), ("byOne", 3), ("byTwp", 4), ("byFour", 5), ("byEight", 6), ("bySixteen", 7), ("byThirtyTwp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalDiskPCIeCapableLinkWidth.setStatus('current')
virtualDiskTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1), )
if mibBuilder.loadTexts: virtualDiskTable.setStatus('current')
virtualDiskTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "virtualDiskNumber"))
if mibBuilder.loadTexts: virtualDiskTableEntry.setStatus('current')
virtualDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskNumber.setStatus('current')
virtualDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskName.setStatus('current')
virtualDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("online", 2), ("failed", 3), ("degraded", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskState.setStatus('current')
virtualDiskSizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskSizeInMB.setStatus('current')
virtualDiskWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("writeThrough", 1), ("writeBack", 2), ("writeBackForce", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskWritePolicy.setStatus('current')
virtualDiskReadPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noReadAhead", 1), ("readAhead", 2), ("adaptiveReadAhead", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskReadPolicy.setStatus('current')
virtualDiskLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("r0", 2), ("r1", 3), ("r5", 4), ("r6", 5), ("r10", 6), ("r50", 7), ("r60", 8), ("concatRaid1", 9), ("concatRaid5", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskLayout.setStatus('current')
virtualDiskStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("other", 1), ("default", 2), ("fiveHundredAndTwelvebytes", 3), ("oneKilobytes", 4), ("twoKilobytes", 5), ("fourKilobytes", 6), ("eightKilobytes", 7), ("sixteenKilobytes", 8), ("thirtyTwoKilobytes", 9), ("sixtyFourKilobytes", 10), ("oneTwentyEightKilobytes", 11), ("twoFiftySixKilobytes", 12), ("fiveOneTwoKilobytes", 13), ("oneMegabye", 14), ("twoMegabytes", 15), ("fourMegabytes", 16), ("eightMegabytes", 17), ("sixteenMegabytes", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskStripeSize.setStatus('current')
virtualDiskComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 20), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskComponentStatus.setStatus('current')
virtualDiskBadBlocksDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 23), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskBadBlocksDetected.setStatus('current')
virtualDiskSecured = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 24), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskSecured.setStatus('current')
virtualDiskIsCacheCade = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 25), BooleanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskIsCacheCade.setStatus('current')
virtualDiskDiskCachePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("defullt", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskDiskCachePolicy.setStatus('current')
virtualDiskOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("reconstructing", 2), ("resynching", 3), ("initializing", 4), ("backgroundInit", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskOperationalState.setStatus('current')
virtualDiskProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskProgress.setStatus('current')
virtualDiskAvailableProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskAvailableProtocols.setStatus('current')
virtualDiskMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskMediaType.setStatus('current')
virtualDiskRemainingRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskRemainingRedundancy.setStatus('current')
virtualDiskFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 35), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskFQDD.setStatus('current')
virtualDiskDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskDisplayName.setStatus('current')
virtualDiskT10PIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskT10PIStatus.setStatus('current')
virtualDiskBlockSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 140, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskBlockSizeInBytes.setStatus('current')
enclosureTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3), )
if mibBuilder.loadTexts: enclosureTable.setStatus('current')
enclosureTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "enclosureNumber"))
if mibBuilder.loadTexts: enclosureTableEntry.setStatus('current')
enclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureNumber.setStatus('current')
enclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureName.setStatus('current')
enclosureState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("failed", 3), ("missing", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureState.setStatus('current')
enclosureServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureServiceTag.setStatus('current')
enclosureAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAssetTag.setStatus('current')
enclosureConnectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureConnectedPort.setStatus('current')
enclosureRollUpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 23), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureRollUpStatus.setStatus('current')
enclosureComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 24), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureComponentStatus.setStatus('current')
enclosureFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFirmwareVersion.setStatus('current')
enclosureSASAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureSASAddress.setStatus('current')
enclosureDriveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureDriveCount.setStatus('current')
enclosureTotalSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTotalSlots.setStatus('current')
enclosureFanCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanCount.setStatus('current')
enclosurePSUCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePSUCount.setStatus('current')
enclosureEMMCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureEMMCount.setStatus('current')
enclosureTempProbeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTempProbeCount.setStatus('current')
enclosureRedundantPath = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureRedundantPath.setStatus('current')
enclosurePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePosition.setStatus('current')
enclosureBackplaneBayID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureBackplaneBayID.setStatus('current')
enclosureFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 47), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFQDD.setStatus('current')
enclosureDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureDisplayName.setStatus('current')
enclosureType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 3, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("notApplicable", 2), ("sassata", 3), ("pcie", 4), ("universal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureType.setStatus('current')
enclosureManagementModuleTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13), )
if mibBuilder.loadTexts: enclosureManagementModuleTable.setStatus('current')
enclosureManagementModuleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "enclosureManagementModuleNumber"))
if mibBuilder.loadTexts: enclosureManagementModuleTableEntry.setStatus('current')
enclosureManagementModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleNumber.setStatus('current')
enclosureManagementModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleName.setStatus('current')
enclosureManagementModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("failed", 3), ("missing", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleState.setStatus('current')
enclosureManagementModulePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModulePartNumber.setStatus('current')
enclosureManagementModuleFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleFWVersion.setStatus('current')
enclosureManagementModuleComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 11), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleComponentStatus.setStatus('current')
enclosureManagementModuleFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 15), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleFQDD.setStatus('current')
enclosureManagementModuleDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 13, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleDisplayName.setStatus('current')
enclosureFanTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7), )
if mibBuilder.loadTexts: enclosureFanTable.setStatus('current')
enclosureFanTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "enclosureFanNumber"))
if mibBuilder.loadTexts: enclosureFanTableEntry.setStatus('current')
enclosureFanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanNumber.setStatus('current')
enclosureFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanName.setStatus('current')
enclosureFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("failed", 3), ("missing", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanState.setStatus('current')
enclosureFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("stopped", 2), ("slow", 3), ("medium", 4), ("fast", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanSpeed.setStatus('current')
enclosureFanComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 15), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanComponentStatus.setStatus('current')
enclosureFanFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 20), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanFQDD.setStatus('current')
enclosureFanDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 7, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureFanDisplayName.setStatus('current')
enclosurePowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9), )
if mibBuilder.loadTexts: enclosurePowerSupplyTable.setStatus('current')
enclosurePowerSupplyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "enclosurePowerSupplyNumber"))
if mibBuilder.loadTexts: enclosurePowerSupplyTableEntry.setStatus('current')
enclosurePowerSupplyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyNumber.setStatus('current')
enclosurePowerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyName.setStatus('current')
enclosurePowerSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("failed", 3), ("missing", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyState.setStatus('current')
enclosurePowerSupplyPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyPartNumber.setStatus('current')
enclosurePowerSupplyComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 9), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyComponentStatus.setStatus('current')
enclosurePowerSupplyFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 15), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyFQDD.setStatus('current')
enclosurePowerSupplyDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 9, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosurePowerSupplyDisplayName.setStatus('current')
enclosureTemperatureProbeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11), )
if mibBuilder.loadTexts: enclosureTemperatureProbeTable.setStatus('current')
enclosureTemperatureProbeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1), ).setIndexNames((0, "IDRAC-MIB-SMIv2", "enclosureTemperatureProbeNumber"))
if mibBuilder.loadTexts: enclosureTemperatureProbeTableEntry.setStatus('current')
enclosureTemperatureProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeNumber.setStatus('current')
enclosureTemperatureProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeName.setStatus('current')
enclosureTemperatureProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ready", 2), ("failed", 3), ("missing", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeState.setStatus('current')
enclosureTemperatureProbeMinWarningValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeMinWarningValue.setStatus('current')
enclosureTemperatureProbeMinCriticalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeMinCriticalValue.setStatus('current')
enclosureTemperatureProbeMaxWarningValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeMaxWarningValue.setStatus('current')
enclosureTemperatureProbeMaxCriticalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeMaxCriticalValue.setStatus('current')
enclosureTemperatureProbeCurValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeCurValue.setStatus('current')
enclosureTemperatureProbeComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 13), ObjectStatusEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeComponentStatus.setStatus('current')
enclosureTemperatureProbeFQDD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 15), FQDDString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeFQDD.setStatus('current')
enclosureTemperatureProbeDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10892, 5, 5, 1, 20, 130, 11, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureTemperatureProbeDisplayName.setStatus('current')
alertAmperageProbeNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2179)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertAmperageProbeNormal.setStatus('current')
alertAmperageProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2178)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertAmperageProbeWarning.setStatus('current')
alertAmperageProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2177)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertAmperageProbeFailure.setStatus('current')
alertAutomaticSystemRecovery = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2233)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertAutomaticSystemRecovery.setStatus('current')
alertBatteryNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2227)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertBatteryNormal.setStatus('current')
alertBatteryWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2226)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertBatteryWarning.setStatus('current')
alertBatteryFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2225)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertBatteryFailure.setStatus('current')
alertCableFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2393)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertCableFailure.setStatus('current')
alertCMCWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2546)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertCMCWarning.setStatus('current')
alertCMCFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2545)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertCMCFailure.setStatus('current')
alertProcessorDeviceStatusNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2243)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertProcessorDeviceStatusNormal.setStatus('current')
alertProcessorDeviceStatusWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2242)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertProcessorDeviceStatusWarning.setStatus('current')
alertProcessorDeviceStatusFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2241)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertProcessorDeviceStatusFailure.setStatus('current')
alertProcessorDeviceAbsent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2457)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertProcessorDeviceAbsent.setStatus('current')
alertFanInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2155)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertFanInformation.setStatus('current')
alertFanWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2154)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertFanWarning.setStatus('current')
alertFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2153)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertFanFailure.setStatus('current')
alertFiberChannelInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2539)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertFiberChannelInformation.setStatus('current')
alertFiberChannelWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2538)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertFiberChannelWarning.setStatus('current')
alertFiberChannelFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2537)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertFiberChannelFailure.setStatus('current')
alertHardwareConfigurationInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2331)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertHardwareConfigurationInformation.setStatus('current')
alertHardwareConfigurationWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2330)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertHardwareConfigurationWarning.setStatus('current')
alertHardwareConfigurationFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2329)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertHardwareConfigurationFailure.setStatus('current')
alertIOVirtualizationFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2553)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertIOVirtualizationFailure.setStatus('current')
alertLinkStatusInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2251)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertLinkStatusInformation.setStatus('current')
alertLinkStatusWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2250)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertLinkStatusWarning.setStatus('current')
alertLinkStatusFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2249)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertLinkStatusFailure.setStatus('current')
alertMemoryDeviceInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2267)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertMemoryDeviceInformation.setStatus('current')
alertMemoryDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2266)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertMemoryDeviceWarning.setStatus('current')
alertMemoryDeviceFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2265)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertMemoryDeviceFailure.setStatus('current')
alertNetworkInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2091)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertNetworkInformation.setStatus('current')
alertNetworkWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2090)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertNetworkWarning.setStatus('current')
alertNetworkFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2089)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertNetworkFailure.setStatus('current')
alertOSInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2411)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertOSInformation.setStatus('current')
alertOSFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2409)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertOSFailure.setStatus('current')
alertPCIDeviceInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2419)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPCIDeviceInformation.setStatus('current')
alertPCIDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2418)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPCIDeviceWarning.setStatus('current')
alertPCIDeviceFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2417)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPCIDeviceFailure.setStatus('current')
alertPhysicalDiskInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2299)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPhysicalDiskInformation.setStatus('current')
alertPhysicalDiskWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2298)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPhysicalDiskWarning.setStatus('current')
alertPhysicalDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2297)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPhysicalDiskFailure.setStatus('current')
alertBiosPostFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2425)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertBiosPostFailure.setStatus('current')
alertPowerSupplyNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2187)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerSupplyNormal.setStatus('current')
alertPowerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2186)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerSupplyWarning.setStatus('current')
alertPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2185)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerSupplyFailure.setStatus('current')
alertPowerSupplyAbsent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2465)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerSupplyAbsent.setStatus('current')
alertPowerUsageInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2275)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerUsageInformation.setStatus('current')
alertPowerUsageWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2274)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerUsageWarning.setStatus('current')
alertPowerUsageFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2273)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerUsageFailure.setStatus('current')
alertRedundancyInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2475)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertRedundancyInformation.setStatus('current')
alertRedundancyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2474)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertRedundancyDegraded.setStatus('current')
alertRedundancyLost = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2473)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertRedundancyLost.setStatus('current')
alertIntegratedDualSDModuleInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2211)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertIntegratedDualSDModuleInformation.setStatus('current')
alertIntegratedDualSDModuleWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2210)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertIntegratedDualSDModuleWarning.setStatus('current')
alertIntegratedDualSDModuleFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2209)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertIntegratedDualSDModuleFailure.setStatus('current')
alertIntegratedDualSDModuleAbsent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2481)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertIntegratedDualSDModuleAbsent.setStatus('current')
alertIntegratedDualSDModuleRedundancyInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2491)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertIntegratedDualSDModuleRedundancyInformation.setStatus('current')
alertIntegratedDualSDModuleRedundancyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2490)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertIntegratedDualSDModuleRedundancyDegraded.setStatus('current')
alertIntegratedDualSDModuleRedundancyLost = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2489)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertIntegratedDualSDModuleRedundancyLost.setStatus('current')
alertSecurityInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2387)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSecurityInformation.setStatus('current')
alertSecurityWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2386)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSecurityWarning.setStatus('current')
alertSecurityFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2385)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSecurityFailure.setStatus('current')
alertSystemEventLogInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2379)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSystemEventLogInformation.setStatus('current')
alertSystemEventLogWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2378)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSystemEventLogWarning.setStatus('current')
alertSystemEventLogFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2377)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSystemEventLogFailure.setStatus('current')
alertSoftwareConfigurationInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2339)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSoftwareConfigurationInformation.setStatus('current')
alertSoftwareConfigurationWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2338)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSoftwareConfigurationWarning.setStatus('current')
alertSoftwareConfigurationFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2337)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSoftwareConfigurationFailure.setStatus('current')
alertTemperatureProbeNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2163)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertTemperatureProbeNormal.setStatus('current')
alertTemperatureProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2162)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertTemperatureProbeWarning.setStatus('current')
alertTemperatureProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2161)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertTemperatureProbeFailure.setStatus('current')
alertTemperatureStatisticsWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2522)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertTemperatureStatisticsWarning.setStatus('current')
alertTemperatureStatisticsFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2521)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertTemperatureStatisticsFailure.setStatus('current')
alertvFlashMediaDeviceInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2507)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertvFlashMediaDeviceInformation.setStatus('current')
alertvFlashMediaDeviceWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2506)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertvFlashMediaDeviceWarning.setStatus('current')
alertvFlashMediaDeviceFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2505)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertvFlashMediaDeviceFailure.setStatus('current')
alertvFlashMediaDeviceAbsent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2515)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertvFlashMediaDeviceAbsent.setStatus('current')
alertVoltageProbeNormal = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2171)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertVoltageProbeNormal.setStatus('current')
alertVoltageProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2170)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertVoltageProbeWarning.setStatus('current')
alertVoltageProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2169)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertVoltageProbeFailure.setStatus('current')
alertRACInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2531)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertRACInformation.setStatus('current')
alertSystemPerformanceWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 1, 0, 2650)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSystemPerformanceWarning.setStatus('current')
alertStorageBatteryInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4275)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageBatteryInformation.setStatus('current')
alertStorageBatteryWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4274)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageBatteryWarning.setStatus('current')
alertStorageBatteryFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4273)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageBatteryFailure.setStatus('current')
alertStorageControllerInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4331)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageControllerInformation.setStatus('current')
alertStorageControllerWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4330)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageControllerWarning.setStatus('current')
alertStorageControllerFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4329)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageControllerFailure.setStatus('current')
alertStorageEnclosureInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4339)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageEnclosureInformation.setStatus('current')
alertStorageEnclosureWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4338)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageEnclosureWarning.setStatus('current')
alertStorageEnclosureFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4337)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageEnclosureFailure.setStatus('current')
alertStorageFanInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4203)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageFanInformation.setStatus('current')
alertStorageFanWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4202)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageFanWarning.setStatus('current')
alertStorageFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4201)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageFanFailure.setStatus('current')
alertStoragePhysicalDiskInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4347)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStoragePhysicalDiskInformation.setStatus('current')
alertStoragePhysicalDiskWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4346)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStoragePhysicalDiskWarning.setStatus('current')
alertStoragePhysicalDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4345)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStoragePhysicalDiskFailure.setStatus('current')
alertStoragePowerSupplyInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4235)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStoragePowerSupplyInformation.setStatus('current')
alertStoragePowerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4234)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStoragePowerSupplyWarning.setStatus('current')
alertStoragePowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4233)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStoragePowerSupplyFailure.setStatus('current')
alertStorageSecurityInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4435)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageSecurityInformation.setStatus('current')
alertStorageSecurityWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4434)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageSecurityWarning.setStatus('current')
alertStorageSecurityFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4433)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageSecurityFailure.setStatus('current')
alertStorageManagementInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4179)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageManagementInformation.setStatus('current')
alertStorageManagementWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4178)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageManagementWarning.setStatus('current')
alertStorageManagementFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4177)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageManagementFailure.setStatus('current')
alertStorageTemperatureProbeInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4211)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageTemperatureProbeInformation.setStatus('current')
alertStorageTemperatureProbeWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4210)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageTemperatureProbeWarning.setStatus('current')
alertStorageTemperatureProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4209)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageTemperatureProbeFailure.setStatus('current')
alertStorageVirtualDiskInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4355)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageVirtualDiskInformation.setStatus('current')
alertStorageVirtualDiskWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4354)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageVirtualDiskWarning.setStatus('current')
alertStorageVirtualDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 2, 0, 4353)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertStorageVirtualDiskFailure.setStatus('current')
alertUpdateJobInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 3, 0, 6211)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertUpdateJobInformation.setStatus('current')
alertSoftwareChangeUpdateWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 3, 0, 6314)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSoftwareChangeUpdateWarning.setStatus('current')
alertCMCAuditInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4, 0, 8691)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertCMCAuditInformation.setStatus('current')
alertCMCAuditWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4, 0, 8690)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertCMCAuditWarning.setStatus('current')
alertCMCAuditFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4, 0, 8689)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertCMCAuditFailure.setStatus('current')
alertDebugInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4, 0, 8595)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertDebugInformation.setStatus('current')
alertDebugWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4, 0, 8594)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertDebugWarning.setStatus('current')
alertiDRACIPAddressChange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4, 0, 8499)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertiDRACIPAddressChange.setStatus('current')
alertLicenseInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4, 0, 8515)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertLicenseInformation.setStatus('current')
alertLicenseWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4, 0, 8514)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertLicenseWarning.setStatus('current')
alertLicenseFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4, 0, 8513)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertLicenseFailure.setStatus('current')
alertPCIDeviceAuditWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4, 0, 8562)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPCIDeviceAuditWarning.setStatus('current')
alertPowerSupplyAuditWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4, 0, 8330)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerSupplyAuditWarning.setStatus('current')
alertPowerSupplyAuditFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4, 0, 8329)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerSupplyAuditFailure.setStatus('current')
alertPowerUsageAuditInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4, 0, 8419)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerUsageAuditInformation.setStatus('current')
alertPowerUsageAuditWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4, 0, 8418)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerUsageAuditWarning.setStatus('current')
alertPowerUsageAuditFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4, 0, 8417)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPowerUsageAuditFailure.setStatus('current')
alertSystemPowerStateChangeInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4, 0, 8579)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSystemPowerStateChangeInformation.setStatus('current')
alertUserTrackingWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 4, 0, 8490)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertUserTrackingWarning.setStatus('current')
alertAutoDiscoveryInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5, 0, 10635)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertAutoDiscoveryInformation.setStatus('current')
alertNetworkConfigurationInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5, 0, 10771)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertNetworkConfigurationInformation.setStatus('current')
alertNetworkConfigurationWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5, 0, 10770)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertNetworkConfigurationWarning.setStatus('current')
alertIPAddressConfigurationInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5, 0, 10547)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertIPAddressConfigurationInformation.setStatus('current')
alertJobControlConfigurationInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5, 0, 10267)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertJobControlConfigurationInformation.setStatus('current')
alertPCIDeviceConfigurationInformation = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5, 0, 10611)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertPCIDeviceConfigurationInformation.setStatus('current')
alertSecurityConfigurationWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5, 0, 10578)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSecurityConfigurationWarning.setStatus('current')
alertSWCConfigurationWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5, 0, 10530)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSWCConfigurationWarning.setStatus('current')
alertSWCConfigurationFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5, 0, 10529)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertSWCConfigurationFailure.setStatus('current')
alertTestTrapEvent = NotificationType((1, 3, 6, 1, 4, 1, 674, 10892, 5, 3, 2, 5, 0, 10395)).setObjects(("IDRAC-MIB-SMIv2", "alertMessageID"), ("IDRAC-MIB-SMIv2", "alertMessage"), ("IDRAC-MIB-SMIv2", "alertCurrentStatus"), ("IDRAC-MIB-SMIv2", "alertSystemServiceTag"), ("IDRAC-MIB-SMIv2", "alertSystemFQDN"), ("IDRAC-MIB-SMIv2", "alertFQDD"), ("IDRAC-MIB-SMIv2", "alertDeviceDisplayName"), ("IDRAC-MIB-SMIv2", "alertMessageArguments"), ("IDRAC-MIB-SMIv2", "alertChassisServiceTag"), ("IDRAC-MIB-SMIv2", "alertChassisName"), ("IDRAC-MIB-SMIv2", "alertRacFQDN"))
if mibBuilder.loadTexts: alertTestTrapEvent.setStatus('current')
mibBuilder.exportSymbols("IDRAC-MIB-SMIv2", controllerPatrolReadRate=controllerPatrolReadRate, alertCurrentStatus=alertCurrentStatus, systemBIOSchassisIndex=systemBIOSchassisIndex, systemBatteryStateCapabilities=systemBatteryStateCapabilities, coolingDeviceDiscreteReading=coolingDeviceDiscreteReading, enclosureFanFQDD=enclosureFanFQDD, enclosureTemperatureProbeTableEntry=enclosureTemperatureProbeTableEntry, amperageProbeTable=amperageProbeTable, enclosureFirmwareVersion=enclosureFirmwareVersion, systemStateCoolingUnitStatusRedundancy=systemStateCoolingUnitStatusRedundancy, physicalDiskSerialNo=physicalDiskSerialNo, memoryDeviceSize=memoryDeviceSize, Unsigned32BitRange=Unsigned32BitRange, pCIDeviceTable=pCIDeviceTable, PowerStateStatusEnum=PowerStateStatusEnum, systemBIOSIndex=systemBIOSIndex, physicalDiskManufacturer=physicalDiskManufacturer, alertProcessorDeviceStatusWarning=alertProcessorDeviceStatusWarning, firmwareStateCapabilities=firmwareStateCapabilities, alertChassisName=alertChassisName, systemBIOSStateSettings=systemBIOSStateSettings, PowerSupplySensorStateFlags=PowerSupplySensorStateFlags, racName=racName, alertSoftwareConfigurationWarning=alertSoftwareConfigurationWarning, chassisName=chassisName, alertRacFQDN=alertRacFQDN, networkDeviceVendorName=networkDeviceVendorName, systemStateChassisStatus=systemStateChassisStatus, alertTemperatureStatisticsWarning=alertTemperatureStatisticsWarning, systemSlotStatus=systemSlotStatus, alertStorageSecurityInformation=alertStorageSecurityInformation, systemStateVoltageStatusCombined=systemStateVoltageStatusCombined, alertFanFailure=alertFanFailure, alertSystemPerformanceWarning=alertSystemPerformanceWarning, alertPowerSupplyAbsent=alertPowerSupplyAbsent, virtualDiskSecured=virtualDiskSecured, systemOSName=systemOSName, networkDeviceFQDD=networkDeviceFQDD, chassisIndexChassisInformation=chassisIndexChassisInformation, alertLinkStatusWarning=alertLinkStatusWarning, amperageProbechassisIndex=amperageProbechassisIndex, voltageProbeReading=voltageProbeReading, alertStoragePhysicalDiskWarning=alertStoragePhysicalDiskWarning, physicalDiskCapacityInMB=physicalDiskCapacityInMB, coolingDeviceReading=coolingDeviceReading, alertMemoryDeviceFailure=alertMemoryDeviceFailure, systemStateCoolingUnitStatusCombined=systemStateCoolingUnitStatusCombined, powerSupplyFQDD=powerSupplyFQDD, enclosurePowerSupplyComponentStatus=enclosurePowerSupplyComponentStatus, alertCableFailure=alertCableFailure, SystemFormFactorEnum=SystemFormFactorEnum, lcLogTableEntry=lcLogTableEntry, memoryDeviceLocationName=memoryDeviceLocationName, enclosurePosition=enclosurePosition, eventLogDateName=eventLogDateName, virtualDiskName=virtualDiskName, enclosureNumber=enclosureNumber, alertMessageID=alertMessageID, voltageProbechassisIndex=voltageProbechassisIndex, TemperatureDiscreteReadingEnum=TemperatureDiscreteReadingEnum, systemStateCoolingDeviceStatusDetails=systemStateCoolingDeviceStatusDetails, alertSystemEventLogInformation=alertSystemEventLogInformation, alertStorageBatteryInformation=alertStorageBatteryInformation, alertProcessorDeviceAbsent=alertProcessorDeviceAbsent, powerSupplyCountForRedundancy=powerSupplyCountForRedundancy, powerUsageMaxPotentialPower=powerUsageMaxPotentialPower, lcLogCategory=lcLogCategory, alertChassisServiceTag=alertChassisServiceTag, SystemSlotCategoryEnum=SystemSlotCategoryEnum, processorDeviceStatusReading=processorDeviceStatusReading, memoryDeviceTableEntry=memoryDeviceTableEntry, coolingDeviceIndex=coolingDeviceIndex, memoryDevicechassisIndex=memoryDevicechassisIndex, alertStorageEnclosureInformation=alertStorageEnclosureInformation, systemStateIDSDMCardDeviceStatusList=systemStateIDSDMCardDeviceStatusList, racShortName=racShortName, voltageProbeStateCapabilities=voltageProbeStateCapabilities, powerSupplyType=powerSupplyType, enclosureRollUpStatus=enclosureRollUpStatus, enclosurePSUCount=enclosurePSUCount, voltageProbeTableEntry=voltageProbeTableEntry, processorDeviceVersionName=processorDeviceVersionName, eventLogStateCapabilitiesUnique=eventLogStateCapabilitiesUnique, StatusProbeEnum=StatusProbeEnum, powerUnitStateCapabilities=powerUnitStateCapabilities, processorDeviceStateSettings=processorDeviceStateSettings, virtualDiskBadBlocksDetected=virtualDiskBadBlocksDetected, alertSystemFQDN=alertSystemFQDN, alertUpdateJobInformation=alertUpdateJobInformation, alertIntegratedDualSDModuleFailure=alertIntegratedDualSDModuleFailure, processorDeviceBrandName=processorDeviceBrandName, HostControlSettingsFlags=HostControlSettingsFlags, enclosureFanSpeed=enclosureFanSpeed, voltageProbeDiscreteReading=voltageProbeDiscreteReading, alertPCIDeviceAuditWarning=alertPCIDeviceAuditWarning, powerGroup=powerGroup, coolingDeviceUpperNonCriticalThreshold=coolingDeviceUpperNonCriticalThreshold, alertPowerUsageFailure=alertPowerUsageFailure, systemPowerUpTime=systemPowerUpTime, virtualDiskT10PIStatus=virtualDiskT10PIStatus, physicalDiskSecurityStatus=physicalDiskSecurityStatus, systemStateVoltageStateDetails=systemStateVoltageStateDetails, VoltageDiscreteReadingEnum=VoltageDiscreteReadingEnum, physicalDiskManufactureWeek=physicalDiskManufactureWeek, systemRoomName=systemRoomName, coolingUnitName=coolingUnitName, VoltageTypeEnum=VoltageTypeEnum, virtualDiskBlockSizeInBytes=virtualDiskBlockSizeInBytes, enclosureFanName=enclosureFanName, physicalDiskUsedSpaceInMB=physicalDiskUsedSpaceInMB, controllerFQDD=controllerFQDD, intrusionTableEntry=intrusionTableEntry, physicalDiskCapableSpeed=physicalDiskCapableSpeed, controllerTable=controllerTable, physicalDiskFreeSpaceInMB=physicalDiskFreeSpaceInMB, alertNetworkInformation=alertNetworkInformation, PowerButtonControlSettingsFlags=PowerButtonControlSettingsFlags, physicalDiskTable=physicalDiskTable, BooleanType=BooleanType, coolingDeviceTableEntry=coolingDeviceTableEntry, powerUsageTable=powerUsageTable, coolingUnitRedundancyStatus=coolingUnitRedundancyStatus, temperatureProbeTable=temperatureProbeTable, chassisType=chassisType, alertIOVirtualizationFailure=alertIOVirtualizationFailure, alertRedundancyInformation=alertRedundancyInformation, powerSupplyStateSettingsUnique=powerSupplyStateSettingsUnique, physicalDiskSpareState=physicalDiskSpareState, enclosurePowerSupplyTable=enclosurePowerSupplyTable, lcLogRecordIndex=lcLogRecordIndex, amperageProbeReading=amperageProbeReading, networkDeviceStatus=networkDeviceStatus, systemStateCoolingDeviceStatusCombined=systemStateCoolingDeviceStatusCombined, alertBatteryFailure=alertBatteryFailure, alertStorageControllerInformation=alertStorageControllerInformation, controllerName=controllerName, alertStorageControllerWarning=alertStorageControllerWarning, ProcessorDeviceStatusState=ProcessorDeviceStatusState, physicalDiskBlockSizeInBytes=physicalDiskBlockSizeInBytes, MACAddress=MACAddress, powerUsagePeakAmpsStartDateName=powerUsagePeakAmpsStartDateName, systemSlotType=systemSlotType, systemSlotchassisIndex=systemSlotchassisIndex, coolingDeviceLowerNonCriticalThreshold=coolingDeviceLowerNonCriticalThreshold, memoryDeviceFQDD=memoryDeviceFQDD, alertSoftwareChangeUpdateWarning=alertSoftwareChangeUpdateWarning, temperatureProbeUpperCriticalThreshold=temperatureProbeUpperCriticalThreshold, StateSettingsLogUniqueFlags=StateSettingsLogUniqueFlags, controllerCacheSizeInMB=controllerCacheSizeInMB, memoryDeviceType=memoryDeviceType, systemDataCenterName=systemDataCenterName, systemStateCoolingUnitStatusList=systemStateCoolingUnitStatusList, chassishostControlSettingsUnique=chassishostControlSettingsUnique, chassisStatus=chassisStatus, virtualDiskStripeSize=virtualDiskStripeSize, enclosureTemperatureProbeMinWarningValue=enclosureTemperatureProbeMinWarningValue, alertRedundancyLost=alertRedundancyLost, systemInfoGroup=systemInfoGroup, alertStorageManagementInformation=alertStorageManagementInformation, coolingUnitStatus=coolingUnitStatus, alertLinkStatusFailure=alertLinkStatusFailure, pCIDeviceStatus=pCIDeviceStatus, globalStorageStatus=globalStorageStatus, powerUsageIndex=powerUsageIndex, powerSupplySensorState=powerSupplySensorState, processorDeviceStatusChassisIndex=processorDeviceStatusChassisIndex, chassisAssetTagName=chassisAssetTagName, processorDeviceStatusState=processorDeviceStatusState, physicalDiskManufactureDay=physicalDiskManufactureDay, alertRACInformation=alertRACInformation, systemBatteryIndex=systemBatteryIndex, pCIDeviceTableEntry=pCIDeviceTableEntry, enclosureTableEntry=enclosureTableEntry, enclosureManagementModulePartNumber=enclosureManagementModulePartNumber, alertPowerUsageInformation=alertPowerUsageInformation, alertStoragePowerSupplyInformation=alertStoragePowerSupplyInformation, alertPCIDeviceInformation=alertPCIDeviceInformation, systemAssetTag=systemAssetTag, enclosureFQDD=enclosureFQDD, networkDeviceProductName=networkDeviceProductName, alertvFlashMediaDeviceFailure=alertvFlashMediaDeviceFailure, alertIntegratedDualSDModuleRedundancyLost=alertIntegratedDualSDModuleRedundancyLost, enclosureTemperatureProbeNumber=enclosureTemperatureProbeNumber, enclosureTemperatureProbeFQDD=enclosureTemperatureProbeFQDD, lcLogComment=lcLogComment, physicalDiskT10PICapability=physicalDiskT10PICapability, mIBVersionGroup=mIBVersionGroup, powerUsagePowerCapSetting=powerUsagePowerCapSetting, intrusionchassisIndex=intrusionchassisIndex, alertPowerUsageWarning=alertPowerUsageWarning, StateCapabilitiesFlags=StateCapabilitiesFlags, lcLogDetailedDescription=lcLogDetailedDescription, chassisLockPresent=chassisLockPresent, powerUsagePeakWatts=powerUsagePeakWatts, chassisInformationTableEntry=chassisInformationTableEntry, controllerT10PICapability=controllerT10PICapability, storageAlertTrapGroup=storageAlertTrapGroup, controllerPCISlot=controllerPCISlot, temperatureProbeStateCapabilities=temperatureProbeStateCapabilities, physicalDiskPartNumber=physicalDiskPartNumber, systemStateIDSDMCardUnitStatusCombined=systemStateIDSDMCardUnitStatusCombined, physicalDiskDisplayName=physicalDiskDisplayName, alertMemoryDeviceWarning=alertMemoryDeviceWarning, alertNetworkConfigurationWarning=alertNetworkConfigurationWarning, voltageProbeTable=voltageProbeTable, controllerDisplayName=controllerDisplayName, NMIButtonControlCapabilitiesFlags=NMIButtonControlCapabilitiesFlags, alertSoftwareConfigurationFailure=alertSoftwareConfigurationFailure, PowerButtonControlCapabilitiesFlags=PowerButtonControlCapabilitiesFlags, networkDeviceCapabilities=networkDeviceCapabilities, enclosurePowerSupplyTableEntry=enclosurePowerSupplyTableEntry, processorDeviceStatusStatus=processorDeviceStatusStatus, firmwareType=firmwareType, chassisInfoGroup=chassisInfoGroup, amperageProbeStatus=amperageProbeStatus, NetworkDeviceiSCSICapabilityFlags=NetworkDeviceiSCSICapabilityFlags, processorDeviceStatusTableEntry=processorDeviceStatusTableEntry, alertMessage=alertMessage, physicalDiskSASAddress=physicalDiskSASAddress, alertPowerSupplyFailure=alertPowerSupplyFailure, systemBIOSVersionName=systemBIOSVersionName, amperageProbeUpperNonCriticalThreshold=amperageProbeUpperNonCriticalThreshold, voltageProbeLowerNonRecoverableThreshold=voltageProbeLowerNonRecoverableThreshold, enclosureFanTableEntry=enclosureFanTableEntry, enclosureFanComponentStatus=enclosureFanComponentStatus, alertTemperatureProbeNormal=alertTemperatureProbeNormal, enclosureManagementModuleName=enclosureManagementModuleName, processorDeviceStatusIndex=processorDeviceStatusIndex, systemSlotTableEntry=systemSlotTableEntry, chassiswatchDogControlExpiryTime=chassiswatchDogControlExpiryTime, temperatureProbeStatus=temperatureProbeStatus, alertSystemServiceTag=alertSystemServiceTag, systemBatteryTable=systemBatteryTable, chassisPowerButtonControlCapabilitiesUnique=chassisPowerButtonControlCapabilitiesUnique, coolingDeviceProbeCapabilities=coolingDeviceProbeCapabilities, controllerCheckConsistencyMode=controllerCheckConsistencyMode, alertDebugInformation=alertDebugInformation, lcLogSequenceNumber=lcLogSequenceNumber, alertStoragePhysicalDiskInformation=alertStoragePhysicalDiskInformation, powerUsageCumulativeWattageStartDateName=powerUsageCumulativeWattageStartDateName, physicalDiskName=physicalDiskName, enclosureManagementModuleDisplayName=enclosureManagementModuleDisplayName, alertTemperatureProbeFailure=alertTemperatureProbeFailure, voltageProbeType=voltageProbeType, networkDeviceIndex=networkDeviceIndex, enclosureState=enclosureState, intrusionStateSettings=intrusionStateSettings, systemRackSlot=systemRackSlot, alertProcessorDeviceStatusNormal=alertProcessorDeviceStatusNormal, alertDebugWarning=alertDebugWarning, chassisSystemProperties=chassisSystemProperties, networkDeviceTOECapabilityFlags=networkDeviceTOECapabilityFlags, chassisSystemRevisionName=chassisSystemRevisionName, alertPCIDeviceConfigurationInformation=alertPCIDeviceConfigurationInformation)
mibBuilder.exportSymbols("IDRAC-MIB-SMIv2", chassisServiceTagName=chassisServiceTagName, coolingDeviceType=coolingDeviceType, networkDevicePCIFunctionNumber=networkDevicePCIFunctionNumber, powerSupplyStateCapabilitiesUnique=powerSupplyStateCapabilitiesUnique, systemBatteryLocationName=systemBatteryLocationName, batteryTable=batteryTable, WatchControlSettingsFlags=WatchControlSettingsFlags, intrusionTable=intrusionTable, alertStorageManagementWarning=alertStorageManagementWarning, coolingUnitchassisIndex=coolingUnitchassisIndex, chassisSystemRevisionNumber=chassisSystemRevisionNumber, amperageProbeDiscreteReading=amperageProbeDiscreteReading, Unsigned8BitRange=Unsigned8BitRange, chassisManufacturerName=chassisManufacturerName, chassiswatchDogControlExpiryTimeCapabilitiesUnique=chassiswatchDogControlExpiryTimeCapabilitiesUnique, systemBatteryChassisIndex=systemBatteryChassisIndex, networkDeviceiSCSICapabilityFlags=networkDeviceiSCSICapabilityFlags, alertIntegratedDualSDModuleInformation=alertIntegratedDualSDModuleInformation, alertJobControlConfigurationInformation=alertJobControlConfigurationInformation, systemSlotTable=systemSlotTable, virtualDiskComponentStatus=virtualDiskComponentStatus, LogFormatType=LogFormatType, powerUsagePeakAmpsReadingDateName=powerUsagePeakAmpsReadingDateName, enclosureTemperatureProbeName=enclosureTemperatureProbeName, LEDControlCapabilitiesFlags=LEDControlCapabilitiesFlags, memoryDeviceCurrentOperatingSpeed=memoryDeviceCurrentOperatingSpeed, powerSupplyConfigurationErrorType=powerSupplyConfigurationErrorType, physicalDiskSmartAlertIndication=physicalDiskSmartAlertIndication, powerUnitchassisIndex=powerUnitchassisIndex, systemStateChassisState=systemStateChassisState, coolingDeviceSubType=coolingDeviceSubType, ChassisIdentifyControlCapabilitiesFlags=ChassisIdentifyControlCapabilitiesFlags, memoryDeviceTable=memoryDeviceTable, physicalDiskPCIeNegotiatedLinkWidth=physicalDiskPCIeNegotiatedLinkWidth, processorDeviceStateCapabilities=processorDeviceStateCapabilities, mIBMajorVersionNumber=mIBMajorVersionNumber, temperatureProbeUpperNonRecoverableThreshold=temperatureProbeUpperNonRecoverableThreshold, pCIDeviceIndex=pCIDeviceIndex, processorDeviceStatusStateSettings=processorDeviceStatusStateSettings, virtualDiskNumber=virtualDiskNumber, ObjectStatusEnum=ObjectStatusEnum, systemBIOSManufacturerName=systemBIOSManufacturerName, powerSupplypowerUnitIndexReference=powerSupplypowerUnitIndexReference, powerUsageStatus=powerUsageStatus, batteryDisplayName=batteryDisplayName, enclosureTemperatureProbeMaxCriticalValue=enclosureTemperatureProbeMaxCriticalValue, Unsigned16BitRange=Unsigned16BitRange, chassisServiceTag=chassisServiceTag, voltageProbeUpperCriticalThreshold=voltageProbeUpperCriticalThreshold, coolingDeviceFQDD=coolingDeviceFQDD, systemSystemID=systemSystemID, alertStorageVirtualDiskFailure=alertStorageVirtualDiskFailure, enclosureManagementModuleFWVersion=enclosureManagementModuleFWVersion, systemStatePowerSupplyStatusCombined=systemStatePowerSupplyStatusCombined, enclosureTempProbeCount=enclosureTempProbeCount, alertStoragePowerSupplyWarning=alertStoragePowerSupplyWarning, processorDeviceManufacturerName=processorDeviceManufacturerName, RacTypeEnum=RacTypeEnum, SystemPropertiesFlags=SystemPropertiesFlags, systemStatePowerUnitStateDetails=systemStatePowerUnitStateDetails, SystemSlotTypeEnum=SystemSlotTypeEnum, physicalDiskFQDD=physicalDiskFQDD, virtualDiskLayout=virtualDiskLayout, FirmwareType=FirmwareType, fruChassisIndex=fruChassisIndex, powerUnitTableEntry=powerUnitTableEntry, chassiswatchDogControlCapabilitiesUnique=chassiswatchDogControlCapabilitiesUnique, PowerSupplyTypeEnum=PowerSupplyTypeEnum, alertStorageSecurityWarning=alertStorageSecurityWarning, powerUsagePeakWattsStartDateName=powerUsagePeakWattsStartDateName, statusGroup=statusGroup, systemStatePowerUnitStatusRedundancy=systemStatePowerUnitStatusRedundancy, amperageProbeTableEntry=amperageProbeTableEntry, systemStateSDCardDeviceStatusCombined=systemStateSDCardDeviceStatusCombined, alertLinkStatusInformation=alertLinkStatusInformation, alertIntegratedDualSDModuleRedundancyDegraded=alertIntegratedDualSDModuleRedundancyDegraded, eventLogTableEntry=eventLogTableEntry, coolingDeviceStateSettings=coolingDeviceStateSettings, alertSecurityConfigurationWarning=alertSecurityConfigurationWarning, systemBladeGeometry=systemBladeGeometry, enclosureTemperatureProbeMaxWarningValue=enclosureTemperatureProbeMaxWarningValue, powerUsagePeakHeadroom=powerUsagePeakHeadroom, systemServiceTag=systemServiceTag, fruPartNumberName=fruPartNumberName, chassisLEDControlSettingsUnique=chassisLEDControlSettingsUnique, eventLogFormat=eventLogFormat, SystemSlotStateSettingsFlags=SystemSlotStateSettingsFlags, racDescription=racDescription, memoryDeviceSerialNumberName=memoryDeviceSerialNumberName, fruTableEntry=fruTableEntry, processorDevicechassisIndex=processorDevicechassisIndex, fruTable=fruTable, systemStatePowerSupplyStatusDetails=systemStatePowerSupplyStatusDetails, eventLogchassisIndex=eventLogchassisIndex, alertStorageBatteryWarning=alertStorageBatteryWarning, physicalDiskManufactureYear=physicalDiskManufactureYear, lcLogChassisIndex=lcLogChassisIndex, virtualDiskProgress=virtualDiskProgress, voltageProbeLowerCriticalThreshold=voltageProbeLowerCriticalThreshold, controllerSecurityStatus=controllerSecurityStatus, coolingUnitTable=coolingUnitTable, controllerRAID10UnevenSpansSupported=controllerRAID10UnevenSpansSupported, fruInformationStatus=fruInformationStatus, lcLogSeverityStatus=lcLogSeverityStatus, alertLicenseInformation=alertLicenseInformation, chassisInformationTable=chassisInformationTable, networkDevicePCIBusNumber=networkDevicePCIBusNumber, MemoryDeviceTypeEnum=MemoryDeviceTypeEnum, virtualDiskRemainingRedundancy=virtualDiskRemainingRedundancy, alertNetworkFailure=alertNetworkFailure, ChassisIdentifyControlSettingsFlags=ChassisIdentifyControlSettingsFlags, fruRevisionName=fruRevisionName, racFirmwareVersion=racFirmwareVersion, systemBIOSTable=systemBIOSTable, alertPowerUsageAuditWarning=alertPowerUsageAuditWarning, processorDeviceStatusTable=processorDeviceStatusTable, alertStorageTemperatureProbeFailure=alertStorageTemperatureProbeFailure, amperageProbeLowerNonCriticalThreshold=amperageProbeLowerNonCriticalThreshold, alertIntegratedDualSDModuleRedundancyInformation=alertIntegratedDualSDModuleRedundancyInformation, systemStateBatteryStatusCombined=systemStateBatteryStatusCombined, alertStorageVirtualDiskWarning=alertStorageVirtualDiskWarning, amperageProbeType=amperageProbeType, networkDevicePermanentMACAddress=networkDevicePermanentMACAddress, alertSWCConfigurationFailure=alertSWCConfigurationFailure, chassisNameModular=chassisNameModular, enclosureTemperatureProbeComponentStatus=enclosureTemperatureProbeComponentStatus, processorDeviceVoltage=processorDeviceVoltage, enclosureFanCount=enclosureFanCount, chassisNMIButtonControlCapabilitiesUnique=chassisNMIButtonControlCapabilitiesUnique, controllerCopyBackMode=controllerCopyBackMode, processorDeviceStatusLocationName=processorDeviceStatusLocationName, systemStateProcessorDeviceStatusList=systemStateProcessorDeviceStatusList, controllerBootModeSupported=controllerBootModeSupported, systemStateTableEntry=systemStateTableEntry, controllerFWVersion=controllerFWVersion, ProcessorDeviceFamily=ProcessorDeviceFamily, enclosureName=enclosureName, enclosureTemperatureProbeCurValue=enclosureTemperatureProbeCurValue, processorDeviceCharacteristics=processorDeviceCharacteristics, chassishostControlCapabilitiesUnique=chassishostControlCapabilitiesUnique, alertBatteryWarning=alertBatteryWarning, CoolingDeviceDiscreteReadingEnum=CoolingDeviceDiscreteReadingEnum, enclosureAssetTag=enclosureAssetTag, voltageProbeLowerNonCriticalThreshold=voltageProbeLowerNonCriticalThreshold, physicalDiskFormFactor=physicalDiskFormFactor, alertStorageTemperatureProbeInformation=alertStorageTemperatureProbeInformation, controllerPreservedCache=controllerPreservedCache, alertUserTrackingWarning=alertUserTrackingWarning, alertNetworkConfigurationInformation=alertNetworkConfigurationInformation, temperatureProbeLowerCriticalThreshold=temperatureProbeLowerCriticalThreshold, firmwarechassisIndex=firmwarechassisIndex, systemBatteryStatus=systemBatteryStatus, systemStateBatteryStatusList=systemStateBatteryStatusList, systemSlotStateSettingsUnique=systemSlotStateSettingsUnique, StringType=StringType, enclosurePowerSupplyPartNumber=enclosurePowerSupplyPartNumber, alertSoftwareConfigurationInformation=alertSoftwareConfigurationInformation, powerUsageTableEntry=powerUsageTableEntry, systemStateGroup=systemStateGroup, processorDeviceStatus=processorDeviceStatus, systemBatteryTableEntry=systemBatteryTableEntry, coolingDeviceStatus=coolingDeviceStatus, voltageProbeUpperNonRecoverableThreshold=voltageProbeUpperNonRecoverableThreshold, voltageProbeProbeCapabilities=voltageProbeProbeCapabilities, networkDeviceiSCSIEnabled=networkDeviceiSCSIEnabled, enclosureTemperatureProbeTable=enclosureTemperatureProbeTable, enclosureManagementModuleComponentStatus=enclosureManagementModuleComponentStatus, powerUsagePowerCapValue=powerUsagePowerCapValue, alertStorageEnclosureFailure=alertStorageEnclosureFailure, lcLogDateName=lcLogDateName, amperageProbeUpperCriticalThreshold=amperageProbeUpperCriticalThreshold, alertCMCWarning=alertCMCWarning, systemOSVersion=systemOSVersion, coolingDeviceLowerCriticalThreshold=coolingDeviceLowerCriticalThreshold, systemStateGlobalSystemStatus=systemStateGlobalSystemStatus, systemSlotIndex=systemSlotIndex, processorDeviceStatusStateCapabilities=processorDeviceStatusStateCapabilities, enclosureTotalSlots=enclosureTotalSlots, memoryDeviceIndex=memoryDeviceIndex, alertFiberChannelInformation=alertFiberChannelInformation, logicalDevices=logicalDevices, enclosureManagementModuleNumber=enclosureManagementModuleNumber, slotGroup=slotGroup, powerSupplyTableEntry=powerSupplyTableEntry, NetworkDeviceTOECapabilityFlags=NetworkDeviceTOECapabilityFlags, amperageProbeStateSettings=amperageProbeStateSettings, systemSlotCurrentUsage=systemSlotCurrentUsage, alertFiberChannelFailure=alertFiberChannelFailure, enclosureFanTable=enclosureFanTable, temperatureProbeReading=temperatureProbeReading, enclosureTemperatureProbeState=enclosureTemperatureProbeState, alertCMCAuditFailure=alertCMCAuditFailure, memoryDeviceBankLocationName=memoryDeviceBankLocationName, controllerBootMode=controllerBootMode, chassisID=chassisID, alertvFlashMediaDeviceWarning=alertvFlashMediaDeviceWarning, StateSettingsFlags=StateSettingsFlags, systemStateTemperatureStatusCombined=systemStateTemperatureStatusCombined, powerUnitStatus=powerUnitStatus, enclosureTemperatureProbeMinCriticalValue=enclosureTemperatureProbeMinCriticalValue, chassisSystemName=chassisSystemName, systemExpressServiceCode=systemExpressServiceCode, powerUnitName=powerUnitName, alertRedundancyDegraded=alertRedundancyDegraded, systemStateCoolingDeviceStateDetails=systemStateCoolingDeviceStateDetails, lcLogTable=lcLogTable, powerUsagePeakAmps=powerUsagePeakAmps, NetworkDeviceCapabilitiesFlags=NetworkDeviceCapabilitiesFlags, mIBMaintenanceVersionNumber=mIBMaintenanceVersionNumber, systemChassisSystemHeight=systemChassisSystemHeight, physicalDiskProductID=physicalDiskProductID, physicalDiskOperationalState=physicalDiskOperationalState, eventLogStateSettingsUnique=eventLogStateSettingsUnique, systemStateTemperatureStatusDetails=systemStateTemperatureStatusDetails, alertOSFailure=alertOSFailure, controllerRollUpStatus=controllerRollUpStatus, alertStoragePhysicalDiskFailure=alertStoragePhysicalDiskFailure, alertPhysicalDiskWarning=alertPhysicalDiskWarning, batteryPredictedCapacity=batteryPredictedCapacity, memoryDeviceStateCapabilities=memoryDeviceStateCapabilities, LEDControlSettingsFlags=LEDControlSettingsFlags, powerUsageStateCapabilities=powerUsageStateCapabilities, racInfoGroup=racInfoGroup, powerUsagePowerCapCapabilities=powerUsagePowerCapCapabilities, racType=racType, systemStateAmperageStatusDetails=systemStateAmperageStatusDetails, powerSupplyPowerMonitorCapable=powerSupplyPowerMonitorCapable, systemStateCoolingUnitStatusDetails=systemStateCoolingUnitStatusDetails, systemStateProcessorDeviceStatusCombined=systemStateProcessorDeviceStatusCombined, ChassisTypeEnum=ChassisTypeEnum, chassisparentIndexReference=chassisparentIndexReference, ProcessorDeviceStatusReadingFlags=ProcessorDeviceStatusReadingFlags, enclosureManagementModuleFQDD=enclosureManagementModuleFQDD, pCIDeviceFQDD=pCIDeviceFQDD, firmwareIndex=firmwareIndex, alertIntegratedDualSDModuleWarning=alertIntegratedDualSDModuleWarning, systemStateChassisIntrusionStatusDetails=systemStateChassisIntrusionStatusDetails, systemStateIDSDMCardUnitStatusList=systemStateIDSDMCardUnitStatusList, systemNodeID=systemNodeID, amperageProbeStateCapabilities=amperageProbeStateCapabilities, controllerRebuildRate=controllerRebuildRate, BladeGeometryEnum=BladeGeometryEnum, physicalDiskRemainingRatedWriteEndurance=physicalDiskRemainingRatedWriteEndurance, powerSupplyCurrentInputVoltage=powerSupplyCurrentInputVoltage, deviceGroup=deviceGroup, enclosureComponentStatus=enclosureComponentStatus, StatusRedundancyEnum=StatusRedundancyEnum, alertFanInformation=alertFanInformation, virtualDiskAvailableProtocols=virtualDiskAvailableProtocols, intrusionStateCapabilities=intrusionStateCapabilities, processorDeviceFQDD=processorDeviceFQDD, memoryDeviceStateSettings=memoryDeviceStateSettings, enclosureEMMCount=enclosureEMMCount, controllerDriverVersion=controllerDriverVersion)
mibBuilder.exportSymbols("IDRAC-MIB-SMIv2", enclosureFanNumber=enclosureFanNumber, physicalDiskProgress=physicalDiskProgress, firmwareTable=firmwareTable, systemStateTemperatureStatisticsStatusDetails=systemStateTemperatureStatisticsStatusDetails, voltageProbeStatus=voltageProbeStatus, powerUsageChassisIndex=powerUsageChassisIndex, temperatureProbeProbeCapabilities=temperatureProbeProbeCapabilities, eventLogRecordIndex=eventLogRecordIndex, firmwareVersionName=firmwareVersionName, enclosureManagementModuleTable=enclosureManagementModuleTable, enclosureManagementModuleState=enclosureManagementModuleState, processorDeviceType=processorDeviceType, alertPCIDeviceWarning=alertPCIDeviceWarning, powerSupplyLocationName=powerSupplyLocationName, powerSupplychassisIndex=powerSupplychassisIndex, amperageProbeUpperNonRecoverableThreshold=amperageProbeUpperNonRecoverableThreshold, alertDeviceDisplayName=alertDeviceDisplayName, amperageProbeIndex=amperageProbeIndex, controllerLoadBalanceSetting=controllerLoadBalanceSetting, enclosurePowerSupplyName=enclosurePowerSupplyName, alertProcessorDeviceStatusFailure=alertProcessorDeviceStatusFailure, systemStateMemoryDeviceStateDetails=systemStateMemoryDeviceStateDetails, alertBatteryNormal=alertBatteryNormal, controllerPersistentHotSpare=controllerPersistentHotSpare, racVersion=racVersion, amperageProbeLocationName=amperageProbeLocationName, systemStatePowerUnitStatusCombined=systemStatePowerUnitStatusCombined, coolingDevicechassisIndex=coolingDevicechassisIndex, batteryComponentStatus=batteryComponentStatus, temperatureProbeIndex=temperatureProbeIndex, controllerSpinDownTimeInterval=controllerSpinDownTimeInterval, memoryDeviceSpeed=memoryDeviceSpeed, systemSlotSlotExternalSlotName=systemSlotSlotExternalSlotName, controllerCheckConsistencyRate=controllerCheckConsistencyRate, chassisModelTypeName=chassisModelTypeName, pCIDeviceStateSettings=pCIDeviceStateSettings, coolingDeviceTable=coolingDeviceTable, coolingDeviceLowerNonRecoverableThreshold=coolingDeviceLowerNonRecoverableThreshold, virtualDiskReadPolicy=virtualDiskReadPolicy, controllerMaxCapSpeed=controllerMaxCapSpeed, lcLogRecommededAction=lcLogRecommededAction, controllerNumber=controllerNumber, alertIntegratedDualSDModuleAbsent=alertIntegratedDualSDModuleAbsent, chassisIDExtension=chassisIDExtension, enclosureDisplayName=enclosureDisplayName, alertFQDD=alertFQDD, systemStateTemperatureStatisticsStateDetails=systemStateTemperatureStatisticsStateDetails, powerSupplyMaximumInputVoltage=powerSupplyMaximumInputVoltage, enclosurePowerSupplyFQDD=enclosurePowerSupplyFQDD, physicalDiskNegotiatedSpeed=physicalDiskNegotiatedSpeed, voltageProbeIndex=voltageProbeIndex, enclosureTable=enclosureTable, alertIPAddressConfigurationInformation=alertIPAddressConfigurationInformation, virtualDiskDiskCachePolicy=virtualDiskDiskCachePolicy, ChassisSystemClassEnum=ChassisSystemClassEnum, systemStateChassisIntrusionStatusCombined=systemStateChassisIntrusionStatusCombined, powerSupplyTable=powerSupplyTable, SystemSlotStateCapabilitiesFlags=SystemSlotStateCapabilitiesFlags, alertPowerSupplyAuditFailure=alertPowerSupplyAuditFailure, processorDeviceCurrentSpeed=processorDeviceCurrentSpeed, alertTemperatureProbeWarning=alertTemperatureProbeWarning, systemLCDStatus=systemLCDStatus, powerUsageIdlePower=powerUsageIdlePower, coolingDeviceStateCapabilities=coolingDeviceStateCapabilities, LcLogCategoryEnum=LcLogCategoryEnum, DateName=DateName, alertSecurityFailure=alertSecurityFailure, systemDetailsGroup=systemDetailsGroup, systemAlertTrapGroup=systemAlertTrapGroup, racManufacturer=racManufacturer, fruManufacturerName=fruManufacturerName, alertBiosPostFailure=alertBiosPostFailure, racURL=racURL, coolingDeviceUpperCriticalThreshold=coolingDeviceUpperCriticalThreshold, temperatureProbeUpperNonCriticalThreshold=temperatureProbeUpperNonCriticalThreshold, systemStateAmperageStatusCombined=systemStateAmperageStatusCombined, systemStateMemoryDeviceStatusCombined=systemStateMemoryDeviceStatusCombined, processorDeviceTableEntry=processorDeviceTableEntry, intrusionLocationName=intrusionLocationName, pCIDevicechassisIndex=pCIDevicechassisIndex, amperageProbeProbeCapabilities=amperageProbeProbeCapabilities, systemPowerState=systemPowerState, PowerSupplyStateCapabilitiesUniqueFlags=PowerSupplyStateCapabilitiesUniqueFlags, chassiswatchDogControlSettingsUnique=chassiswatchDogControlSettingsUnique, systemBatteryReading=systemBatteryReading, WatchDogControlCapabilitiesFlags=WatchDogControlCapabilitiesFlags, alertSystemEventLogFailure=alertSystemEventLogFailure, controllerReconstructRate=controllerReconstructRate, alertOSInformation=alertOSInformation, alertPCIDeviceFailure=alertPCIDeviceFailure, thermalGroup=thermalGroup, systemStateCoolingUnitStateDetails=systemStateCoolingUnitStateDetails, controllerEncryptionKeyPresent=controllerEncryptionKeyPresent, IntrusionTypeEnum=IntrusionTypeEnum, lcLogMessageID=lcLogMessageID, amperageProbeLowerCriticalThreshold=amperageProbeLowerCriticalThreshold, temperatureProbeStateSettings=temperatureProbeStateSettings, enclosureTemperatureProbeDisplayName=enclosureTemperatureProbeDisplayName, enclosureBackplaneBayID=enclosureBackplaneBayID, chassisInformationGroup=chassisInformationGroup, alertTemperatureStatisticsFailure=alertTemperatureStatisticsFailure, powerUnitTable=powerUnitTable, systemStateTable=systemStateTable, processorDeviceCoreEnabledCount=processorDeviceCoreEnabledCount, enclosurePowerSupplyDisplayName=enclosurePowerSupplyDisplayName, coolingDeviceLocationName=coolingDeviceLocationName, PowerSupplyStateSettingsUniqueFlags=PowerSupplyStateSettingsUniqueFlags, enclosureSASAddress=enclosureSASAddress, networkDevicePCIDeviceNumber=networkDevicePCIDeviceNumber, eventLogTable=eventLogTable, NetworkDeviceConnectionStatusEnum=NetworkDeviceConnectionStatusEnum, virtualDiskSizeInMB=virtualDiskSizeInMB, systemStatechassisIndex=systemStatechassisIndex, intrusionIndex=intrusionIndex, powerSupplyStatus=powerSupplyStatus, voltageProbeUpperNonCriticalThreshold=voltageProbeUpperNonCriticalThreshold, ProbeCapabilitiesFlags=ProbeCapabilitiesFlags, enclosurePowerSupplyNumber=enclosurePowerSupplyNumber, systemStatePowerUnitStatusDetails=systemStatePowerUnitStatusDetails, systemStateIDSDMCardDeviceStatusCombined=systemStateIDSDMCardDeviceStatusCombined, pCIDeviceManufacturerName=pCIDeviceManufacturerName, SystemBatteryReadingFlags=SystemBatteryReadingFlags, controllerSASAddress=controllerSASAddress, alertFanWarning=alertFanWarning, temperatureProbeTableEntry=temperatureProbeTableEntry, processorDeviceExtendedSettings=processorDeviceExtendedSettings, enclosureDriveCount=enclosureDriveCount, alertSWCConfigurationWarning=alertSWCConfigurationWarning, updatesAlertTrapGroup=updatesAlertTrapGroup, PowerCapCapabilitiesFlags=PowerCapCapabilitiesFlags, voltageProbeStateSettings=voltageProbeStateSettings, enclosurePowerSupplyState=enclosurePowerSupplyState, coolingUnitTableEntry=coolingUnitTableEntry, physicalDiskState=physicalDiskState, alertAutomaticSystemRecovery=alertAutomaticSystemRecovery, controllerPatrolReadState=controllerPatrolReadState, alertPhysicalDiskFailure=alertPhysicalDiskFailure, alertStorageManagementFailure=alertStorageManagementFailure, systemStatePowerUnitStatusList=systemStatePowerUnitStatusList, processorDeviceExtendedCapabilities=processorDeviceExtendedCapabilities, systemStateVoltageStatusDetails=systemStateVoltageStatusDetails, systemBIOSStatus=systemBIOSStatus, powerUnitIndex=powerUnitIndex, systemSlotStateCapabilitiesUnique=systemSlotStateCapabilitiesUnique, alertPowerSupplyWarning=alertPowerSupplyWarning, alertStorageEnclosureWarning=alertStorageEnclosureWarning, chassisStateSettings=chassisStateSettings, alertMemoryDeviceInformation=alertMemoryDeviceInformation, eventLogRecord=eventLogRecord, firmwareTypeName=firmwareTypeName, chassisSystemClass=chassisSystemClass, PowerCapSettingEnum=PowerCapSettingEnum, chassisModelModular=chassisModelModular, alertStorageVirtualDiskInformation=alertStorageVirtualDiskInformation, controllerSpinDownHotSpareDrives=controllerSpinDownHotSpareDrives, controllerEncryptionCapability=controllerEncryptionCapability, String64=String64, voltageProbeLocationName=voltageProbeLocationName, alertTestTrapEvent=alertTestTrapEvent, powerUsageCumulativeWattage=powerUsageCumulativeWattage, alertSecurityInformation=alertSecurityInformation, temperatureProbeType=temperatureProbeType, systemFQDN=systemFQDN, systemStateSDCardDeviceStatusList=systemStateSDCardDeviceStatusList, chassisStateCapabilities=chassisStateCapabilities, batteryNumber=batteryNumber, virtualDiskDisplayName=virtualDiskDisplayName, CoolingDeviceTypeEnum=CoolingDeviceTypeEnum, powerUsageStateSettings=powerUsageStateSettings, physicalDiskPCIeCapableLinkWidth=physicalDiskPCIeCapableLinkWidth, powerUnitStateSettings=powerUnitStateSettings, FQDDString=FQDDString, numLCLogEntries=numLCLogEntries, storageDetailsGroup=storageDetailsGroup, firmwareStateSettings=firmwareStateSettings, systemSlotCategory=systemSlotCategory, enclosureRedundantPath=enclosureRedundantPath, enclosureType=enclosureType, systemBIOSReleaseDateName=systemBIOSReleaseDateName, alertHardwareConfigurationInformation=alertHardwareConfigurationInformation, memoryDeviceManufacturerName=memoryDeviceManufacturerName, systemBIOSStateCapabilities=systemBIOSStateCapabilities, firmwareUpdateCapabilities=firmwareUpdateCapabilities, systemStateSDCardUnitStatusCombined=systemStateSDCardUnitStatusCombined, processorDeviceCoreCount=processorDeviceCoreCount, alertCMCAuditWarning=alertCMCAuditWarning, batteryTableEntry=batteryTableEntry, powerSupplyIndex=powerSupplyIndex, powerSupplyRatedInputWattage=powerSupplyRatedInputWattage, numEventLogEntries=numEventLogEntries, fruIndex=fruIndex, physicalDevices=physicalDevices, virtualDiskTableEntry=virtualDiskTableEntry, PYSNMP_MODULE_ID=outOfBandGroup, systemStateAmperageStateDetails=systemStateAmperageStateDetails, coolingUnitIndex=coolingUnitIndex, WatchDogTimerCapabilitiesFlags=WatchDogTimerCapabilitiesFlags, networkDeviceTable=networkDeviceTable, chassisLEDControlCapabilitiesUnique=chassisLEDControlCapabilitiesUnique, physicalDiskPowerState=physicalDiskPowerState, alertStorageBatteryFailure=alertStorageBatteryFailure, alertMessageArguments=alertMessageArguments, powerSupplyOutputWatts=powerSupplyOutputWatts, powerUsageInstantaneousHeadroom=powerUsageInstantaneousHeadroom, processorDeviceTable=processorDeviceTable, alertStorageControllerFailure=alertStorageControllerFailure, temperatureProbeLocationName=temperatureProbeLocationName, CoolingDeviceSubTypeEnum=CoolingDeviceSubTypeEnum, eventLogSeverityStatus=eventLogSeverityStatus, alertVariablesGroup=alertVariablesGroup, batteryFQDD=batteryFQDD, powerUsageEntityName=powerUsageEntityName, temperatureProbeLowerNonRecoverableThreshold=temperatureProbeLowerNonRecoverableThreshold, configurationAlertTrapGroup=configurationAlertTrapGroup, virtualDiskTable=virtualDiskTable, systemAisleName=systemAisleName, alertGroup=alertGroup, intrusionReading=intrusionReading, alertvFlashMediaDeviceAbsent=alertvFlashMediaDeviceAbsent, systemBIOSTableEntry=systemBIOSTableEntry, enclosureFanState=enclosureFanState, memoryDevicePartNumberName=memoryDevicePartNumberName, alertCMCFailure=alertCMCFailure, processorDeviceExternalClockSpeed=processorDeviceExternalClockSpeed, systemBladeSlotNumber=systemBladeSlotNumber, intrusionStatus=intrusionStatus, alertSecurityWarning=alertSecurityWarning, alertVoltageProbeNormal=alertVoltageProbeNormal, networkDeviceConnectionStatus=networkDeviceConnectionStatus, chassisPowerButtonControlSettingsUnique=chassisPowerButtonControlSettingsUnique, alertSystemPowerStateChangeInformation=alertSystemPowerStateChangeInformation, alertVoltageProbeWarning=alertVoltageProbeWarning, chassisNMIButtonControlSettingsUnique=chassisNMIButtonControlSettingsUnique, AmperageDiscreteReadingEnum=AmperageDiscreteReadingEnum, ObjectRange=ObjectRange, pCIDeviceDescriptionName=pCIDeviceDescriptionName, alertStorageFanWarning=alertStorageFanWarning, lcLogMessage=lcLogMessage, processorDeviceFamily=processorDeviceFamily, virtualDiskFQDD=virtualDiskFQDD, enclosureConnectedPort=enclosureConnectedPort, networkDeviceCurrentMACAddress=networkDeviceCurrentMACAddress, controllerTableEntry=controllerTableEntry, coolingUnitStateSettings=coolingUnitStateSettings, physicalDiskProtocolVersion=physicalDiskProtocolVersion, batteryState=batteryState, alertvFlashMediaDeviceInformation=alertvFlashMediaDeviceInformation, systemFormFactor=systemFormFactor, systemStatePowerSupplyStateDetails=systemStatePowerSupplyStateDetails, pCIDeviceDataBusWidth=pCIDeviceDataBusWidth, virtualDiskMediaType=virtualDiskMediaType, alertAmperageProbeFailure=alertAmperageProbeFailure, alertHardwareConfigurationWarning=alertHardwareConfigurationWarning, amperageProbeLowerNonRecoverableThreshold=amperageProbeLowerNonRecoverableThreshold)
mibBuilder.exportSymbols("IDRAC-MIB-SMIv2", alertAmperageProbeWarning=alertAmperageProbeWarning, IntrusionReadingEnum=IntrusionReadingEnum, alertiDRACIPAddressChange=alertiDRACIPAddressChange, chassisIdentifyFlashControlCapabilities=chassisIdentifyFlashControlCapabilities, controllerBGIRate=controllerBGIRate, alertPowerSupplyAuditWarning=alertPowerSupplyAuditWarning, alertHardwareConfigurationFailure=alertHardwareConfigurationFailure, fruSerialNumberName=fruSerialNumberName, alertCMCAuditInformation=alertCMCAuditInformation, processorDeviceMaximumSpeed=processorDeviceMaximumSpeed, alertVoltageProbeFailure=alertVoltageProbeFailure, physicalDiskMediaType=physicalDiskMediaType, alertFiberChannelWarning=alertFiberChannelWarning, alertNetworkWarning=alertNetworkWarning, temperatureProbechassisIndex=temperatureProbechassisIndex, storageManagement=storageManagement, informationGroup=informationGroup, fruGroup=fruGroup, systemStateSDCardUnitStatusList=systemStateSDCardUnitStatusList, enclosureServiceTag=enclosureServiceTag, virtualDiskWritePolicy=virtualDiskWritePolicy, systemStateTemperatureStatisticsStatusCombined=systemStateTemperatureStatisticsStatusCombined, controllerEnhancedAutoImportForeignConfigMode=controllerEnhancedAutoImportForeignConfigMode, TemperatureProbeTypeEnum=TemperatureProbeTypeEnum, alertStorageFanFailure=alertStorageFanFailure, pCIDeviceStateCapabilities=pCIDeviceStateCapabilities, alertPowerSupplyNormal=alertPowerSupplyNormal, memoryDeviceStatus=memoryDeviceStatus, chassisExpressServiceCodeName=chassisExpressServiceCodeName, systemModelName=systemModelName, alertLicenseWarning=alertLicenseWarning, mIBMinorVersionNumber=mIBMinorVersionNumber, alertPowerUsageAuditInformation=alertPowerUsageAuditInformation, ProcessorDeviceType=ProcessorDeviceType, alertTrapGroup=alertTrapGroup, physicalDiskComponentStatus=physicalDiskComponentStatus, software=software, lcLogFQDD=lcLogFQDD, alertAmperageProbeNormal=alertAmperageProbeNormal, HostControlCapabilitiesFlags=HostControlCapabilitiesFlags, intrusionType=intrusionType, virtualDiskState=virtualDiskState, alertPowerUsageAuditFailure=alertPowerUsageAuditFailure, alertSystemEventLogWarning=alertSystemEventLogWarning, powerUnitRedundancyStatus=powerUnitRedundancyStatus, firmwareTableEntry=firmwareTableEntry, temperatureProbeDiscreteReading=temperatureProbeDiscreteReading, networkDeviceChassisIndex=networkDeviceChassisIndex, systemRackName=systemRackName, powerUsagePeakWattsReadingDateName=powerUsagePeakWattsReadingDateName, systemStateChassisIntrusionStateDetails=systemStateChassisIntrusionStateDetails, controllerPatrolReadMode=controllerPatrolReadMode, alertStorageSecurityFailure=alertStorageSecurityFailure, alertLicenseFailure=alertLicenseFailure, temperatureProbeLowerNonCriticalThreshold=temperatureProbeLowerNonCriticalThreshold, chassisIdentifyFlashControlSettings=chassisIdentifyFlashControlSettings, alertAutoDiscoveryInformation=alertAutoDiscoveryInformation, firmwareStatus=firmwareStatus, globalSystemStatus=globalSystemStatus, alertStoragePowerSupplyFailure=alertStoragePowerSupplyFailure, coolingDeviceCountForRedundancy=coolingDeviceCountForRedundancy, processorDeviceThreadCount=processorDeviceThreadCount, Signed32BitRange=Signed32BitRange, auditAlertTrapGroup=auditAlertTrapGroup, virtualDiskIsCacheCade=virtualDiskIsCacheCade, PowerSupplyConfigurationErrorTypeEnum=PowerSupplyConfigurationErrorTypeEnum, controllerComponentStatus=controllerComponentStatus, systemStateTemperatureStateDetails=systemStateTemperatureStateDetails, systemBatteryStateSettings=systemBatteryStateSettings, coolingDeviceUpperNonRecoverableThreshold=coolingDeviceUpperNonRecoverableThreshold, fruFQDD=fruFQDD, physicalDiskRevision=physicalDiskRevision, enclosureFanDisplayName=enclosureFanDisplayName, alertStorageFanInformation=alertStorageFanInformation, alertStorageTemperatureProbeWarning=alertStorageTemperatureProbeWarning, SystemSlotUsageEnum=SystemSlotUsageEnum, outOfBandGroup=outOfBandGroup, alertPhysicalDiskInformation=alertPhysicalDiskInformation, systemStateMemoryDeviceStatusDetails=systemStateMemoryDeviceStatusDetails, NMIButtonControlSettingsFlags=NMIButtonControlSettingsFlags, firmwareSize=firmwareSize, virtualDiskOperationalState=virtualDiskOperationalState, StateCapabilitiesLogUniqueFlags=StateCapabilitiesLogUniqueFlags, networkDeviceTableEntry=networkDeviceTableEntry, physicalDiskTableEntry=physicalDiskTableEntry, enclosureManagementModuleTableEntry=enclosureManagementModuleTableEntry, AmperageProbeTypeEnum=AmperageProbeTypeEnum, processorDeviceIndex=processorDeviceIndex, coolingUnitStateCapabilties=coolingUnitStateCapabilties, physicalDiskNumber=physicalDiskNumber, coolingDevicecoolingUnitIndexReference=coolingDevicecoolingUnitIndexReference, physicalDiskBusType=physicalDiskBusType, controllerSpinDownUnconfiguredDrives=controllerSpinDownUnconfiguredDrives)
