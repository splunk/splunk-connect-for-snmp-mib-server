#
# PySNMP MIB module STMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:03:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, iso, Counter32, Bits, enterprises, TimeTicks, ModuleIdentity, Integer32, ObjectIdentity, MibIdentifier, NotificationType, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "Counter32", "Bits", "enterprises", "TimeTicks", "ModuleIdentity", "Integer32", "ObjectIdentity", "MibIdentifier", "NotificationType", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class NodeAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class NestAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 1)
    fixedLength = 1

class SlotAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class PortAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class Ad10PortAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class AsmX50CkAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class RtmAdPortAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class BundleAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class ChannelAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class ChannelStatusAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(9, 9)
    fixedLength = 9

class RecordIndex(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class AlarmRecord(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(64, 64)
    fixedLength = 64

class Link2Index(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class Link2Addr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

timeplex = MibIdentifier((1, 3, 6, 1, 4, 1, 16))
synchrony = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101))
st50 = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1))
security = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 1))
resource = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2))
alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 3))
reConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1))
reStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2))
reStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3))
scPartitionHeader = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 1))
scPartitionControl = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("validateCRC", 1), ("invalidateCRC", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scPartitionControl.setStatus('mandatory')
scPartitionCRCCheck = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("succeed", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scPartitionCRCCheck.setStatus('mandatory')
scPartitionFlushMode = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scPartitionFlushMode.setStatus('mandatory')
scSystemProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2))
scSysNodeUpdate = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loaded", 1), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scSysNodeUpdate.setStatus('mandatory')
scSysNodeControl = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2, 4, 5))).clone(namedValues=NamedValues(("resetNode", 3), ("validateDatabase", 1), ("invalidateDatabase", 2), ("updateThroughput", 4), ("updateCpiProfile", 5)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scSysNodeControl.setStatus('mandatory')
scSysNodeNumber = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 3), NodeAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSysNodeNumber.setStatus('mandatory')
scSysNodeDate = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSysNodeDate.setStatus('mandatory')
scSysNodeTime = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSysNodeTime.setStatus('mandatory')
scSysNodeType = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rootNode", 1), ("dedicatedNode", 2), ("sharedNode", 3))).clone('dedicatedNode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSysNodeType.setStatus('mandatory')
scSysNodePartitionID = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSysNodePartitionID.setStatus('mandatory')
scSysNodeMasterClockPriority = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("master1", 1), ("master2", 2), ("master3", 3), ("master4", 4), ("master5", 5), ("master6", 6), ("master7", 7), ("master8", 8), ("master9", 9), ("master10", 10), ("master11", 11), ("master12", 12), ("master13", 13), ("master14", 14), ("master15", 15), ("master16", 16), ("slave", 17))).clone('slave')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSysNodeMasterClockPriority.setStatus('mandatory')
scSysNodeMasterClockList = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSysNodeMasterClockList.setStatus('mandatory')
scSysNodeDatabaseVersion = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scSysNodeDatabaseVersion.setStatus('mandatory')
scSysNodeDefaultRoot = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 11), NodeAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSysNodeDefaultRoot.setStatus('mandatory')
scSysNodeCpiProfileUpdate = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loaded", 1), ("updateCpiProfileReq", 2))).clone('updateCpiProfileReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scSysNodeCpiProfileUpdate.setStatus('mandatory')
scSysNodeCpiPasswordControl = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enablePassthru", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSysNodeCpiPasswordControl.setStatus('mandatory')
scSysNodeCpiPasswordLevel1 = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)).clone('public')).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scSysNodeCpiPasswordLevel1.setStatus('mandatory')
scSysNodeCpiPasswordLevel2 = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)).clone('public')).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scSysNodeCpiPasswordLevel2.setStatus('mandatory')
scSysNodeCpiPasswordLevel3 = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)).clone('public')).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scSysNodeCpiPasswordLevel3.setStatus('mandatory')
scSysNodeCpiSessionTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSysNodeCpiSessionTimeOut.setStatus('mandatory')
scSysNodeCpiMaxPassthruSessions = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSysNodeCpiMaxPassthruSessions.setStatus('mandatory')
scRootAccessTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 3), )
if mibBuilder.loadTexts: scRootAccessTable.setStatus('mandatory')
scRootAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 3, 1), ).setIndexNames((0, "STMIB", "scRootAccessIndex"))
if mibBuilder.loadTexts: scRootAccessEntry.setStatus('mandatory')
scRootAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scRootAccessIndex.setStatus('mandatory')
scRootAccessControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("erase", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scRootAccessControlMode.setStatus('mandatory')
scRootAccessIp = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scRootAccessIp.setStatus('mandatory')
scNodeAccessTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4), )
if mibBuilder.loadTexts: scNodeAccessTable.setStatus('mandatory')
scNodeAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1), ).setIndexNames((0, "STMIB", "scNodeAccessIndex"))
if mibBuilder.loadTexts: scNodeAccessEntry.setStatus('mandatory')
scNodeAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scNodeAccessIndex.setStatus('mandatory')
scNodeAccessControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(59, 60, 2, 3))).clone(namedValues=NamedValues(("fullAccess", 59), ("tableAccess", 60), ("disable", 2), ("erase", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scNodeAccessControlMode.setStatus('mandatory')
scNodeAccessUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loaded", 1), ("updateThroughputReq", 3))).clone('updateThroughputReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scNodeAccessUpdate.setStatus('mandatory')
scNodeAccessRootList = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scNodeAccessRootList.setStatus('mandatory')
scNodeAccessChPrfList = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scNodeAccessChPrfList.setStatus('mandatory')
scNodeAccessThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scNodeAccessThroughput.setStatus('mandatory')
scNodeAccessVoicePrfList = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scNodeAccessVoicePrfList.setStatus('mandatory')
scNodeAccessLink2TraEntriesMin = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1728))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scNodeAccessLink2TraEntriesMin.setStatus('mandatory')
scNodeAccessLink2TraEntriesMax = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1728)).clone(1728)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scNodeAccessLink2TraEntriesMax.setStatus('mandatory')
scCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5), )
if mibBuilder.loadTexts: scCommunityTable.setStatus('deprecated')
scCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5, 1), ).setIndexNames((0, "STMIB", "scCommunityIndex"))
if mibBuilder.loadTexts: scCommunityEntry.setStatus('deprecated')
scCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5, 1, 1), RecordIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCommunityIndex.setStatus('deprecated')
scCommunityControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("erase", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCommunityControlMode.setStatus('deprecated')
scCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24)).clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCommunityName.setStatus('deprecated')
scCommunityscMap = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11).clone(hexValue="0303030303030303030303")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCommunityscMap.setStatus('deprecated')
scCommunityrecfMap = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13).clone(hexValue="03030303030303030303030303")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCommunityrecfMap.setStatus('deprecated')
scCommunityrestMap = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11).clone(hexValue="0303030303030303030303")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCommunityrestMap.setStatus('deprecated')
scCommunityrestatisticsMap = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="03030303")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCommunityrestatisticsMap.setStatus('deprecated')
scCommunityalMap = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="03030303")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCommunityalMap.setStatus('deprecated')
scTrapAccessTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 6), )
if mibBuilder.loadTexts: scTrapAccessTable.setStatus('mandatory')
scTrapAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 6, 1), ).setIndexNames((0, "STMIB", "scTrapAccessIndex"))
if mibBuilder.loadTexts: scTrapAccessEntry.setStatus('mandatory')
scTrapAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scTrapAccessIndex.setStatus('mandatory')
scTrapAccessControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("erase", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTrapAccessControlMode.setStatus('mandatory')
scTrapAccessIp = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scTrapAccessIp.setStatus('mandatory')
scChProfileTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7), )
if mibBuilder.loadTexts: scChProfileTable.setStatus('mandatory')
scChProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1), ).setIndexNames((0, "STMIB", "scChProfileIndex"))
if mibBuilder.loadTexts: scChProfileEntry.setStatus('mandatory')
scChProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scChProfileIndex.setStatus('mandatory')
scChProfileControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("erase", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scChProfileControlMode.setStatus('mandatory')
scChProfileCostType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hops", 1), ("userDesignatedCost", 2), ("queuingDelay", 3), ("delayAndCost", 4))).clone('hops')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scChProfileCostType.setStatus('mandatory')
scChProfileMaxCost = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 4), Integer32().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scChProfileMaxCost.setStatus('mandatory')
scChProfilePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scChProfilePriority.setStatus('mandatory')
scChProfileEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("doNotCare", 1), ("required", 2))).clone('doNotCare')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scChProfileEncryption.setStatus('mandatory')
scChProfileMaxSatHop = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scChProfileMaxSatHop.setStatus('mandatory')
scChProfileErrPerformReq = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scChProfileErrPerformReq.setStatus('mandatory')
scChProfileINLGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scChProfileINLGroup.setStatus('mandatory')
scChProfileOverrideMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scChProfileOverrideMode.setStatus('mandatory')
scChProfileRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scChProfileRetryTimer.setStatus('mandatory')
scChProfileInfoAlarmGen = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scChProfileInfoAlarmGen.setStatus('mandatory')
scSoftloadEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 8))
scSoftloadControl = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("startDownload", 1), ("onlineCopy", 2), ("startDownloadToRecovery", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scSoftloadControl.setStatus('mandatory')
scSoftloadFileName = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSoftloadFileName.setStatus('mandatory')
scSoftloadDirectoryName = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSoftloadDirectoryName.setStatus('mandatory')
scSoftloadDestPort = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 8, 4), PortAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSoftloadDestPort.setStatus('mandatory')
scSoftloadSoftwareType = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8, 9, 11, 12, 14, 19, 20, 128, 254, 252, 255, 251, 253))).clone(namedValues=NamedValues(("ncp", 1), ("t1m", 5), ("e1m", 6), ("sgm", 7), ("lgm", 8), ("asm", 9), ("fsm", 11), ("sdm", 12), ("rtm", 14), ("dsm", 19), ("e3m", 20), ("ad10", 128), ("tableOC", 254), ("mibSchema", 252), ("stDatabase", 255), ("ad10Database", 251), ("rtmAdDatabase", 253)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSoftloadSoftwareType.setStatus('mandatory')
scSoftloadEmsNodeID = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 8, 6), NodeAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSoftloadEmsNodeID.setStatus('mandatory')
scSoftloadSourceEmsIp = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 8, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSoftloadSourceEmsIp.setStatus('mandatory')
scSoftloadTimeout = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSoftloadTimeout.setStatus('mandatory')
scCpiAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 9))
scCpiControl = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 40))).clone(namedValues=NamedValues(("resetCpiPort", 3), ("logoff", 40)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scCpiControl.setStatus('mandatory')
scCpiControlUpdate = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loaded", 1), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCpiControlUpdate.setStatus('mandatory')
scCpiSpeed = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a2400", 1), ("a4800", 2), ("a9600", 3), ("a14400", 4), ("a19200", 5))).clone('a9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCpiSpeed.setStatus('mandatory')
scCpiDataBits = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b7", 1), ("b8", 2))).clone('b8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCpiDataBits.setStatus('mandatory')
scCpiParity = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 2))).clone(namedValues=NamedValues(("noParity", 1), ("even", 3), ("odd", 2))).clone('noParity')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCpiParity.setStatus('mandatory')
scCpiStopBits = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b1", 1), ("b2", 2))).clone('b1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCpiStopBits.setStatus('mandatory')
scModemAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 10))
scModemControl = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 40))).clone(namedValues=NamedValues(("enableCpsSession", 1), ("resetModemPort", 3), ("logoff", 40)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scModemControl.setStatus('mandatory')
scModemControlUpdate = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loaded", 1), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scModemControlUpdate.setStatus('mandatory')
scModemSpeed = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a2400", 1), ("a4800", 2), ("a9600", 3), ("a14400", 4), ("a19200", 5))).clone('a9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scModemSpeed.setStatus('mandatory')
scModemDataBits = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("b8", 2))).clone('b8')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scModemDataBits.setStatus('mandatory')
scModemParity = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 2))).clone(namedValues=NamedValues(("noParity", 1), ("even", 3), ("odd", 2))).clone('noParity')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scModemParity.setStatus('mandatory')
scModemStopBits = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b1", 1), ("b2", 2))).clone('b1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scModemStopBits.setStatus('mandatory')
scModemControlLead = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eIA", 1), ("noEIA", 2))).clone('noEIA')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scModemControlLead.setStatus('mandatory')
scIpAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11))
scIpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1))
scIpControl = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetIp", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scIpControl.setStatus('mandatory')
scIpControlUpdate = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loaded", 1), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scIpControlUpdate.setStatus('mandatory')
scIpWANIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scIpWANIpAddress.setStatus('mandatory')
scIpSubNetworkMask = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scIpSubNetworkMask.setStatus('mandatory')
scIpRootGatewayIp = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scIpRootGatewayIp.setStatus('mandatory')
scIpRootGatewayMask = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scIpRootGatewayMask.setStatus('mandatory')
scIpRootGatewayEthernet = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("ethernetII", 2), ("e802d3", 1))).clone('ethernetII')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scIpRootGatewayEthernet.setStatus('mandatory')
scIpDefaultExtGateway = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scIpDefaultExtGateway.setStatus('mandatory')
scIpSlipAddress = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scIpSlipAddress.setStatus('mandatory')
scIpSlipMask = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scIpSlipMask.setStatus('mandatory')
scIpOnlineSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 2), )
if mibBuilder.loadTexts: scIpOnlineSubnetTable.setStatus('mandatory')
scIpOnlineSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 2, 1), ).setIndexNames((0, "STMIB", "scIpOnlineSubnetIndex"))
if mibBuilder.loadTexts: scIpOnlineSubnetEntry.setStatus('mandatory')
scIpOnlineSubnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scIpOnlineSubnetIndex.setStatus('mandatory')
scIpOnlineSubnetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scIpOnlineSubnetAddr.setStatus('mandatory')
scIpOfflineSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 3), )
if mibBuilder.loadTexts: scIpOfflineSubnetTable.setStatus('mandatory')
scIpOfflineSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 3, 1), ).setIndexNames((0, "STMIB", "scIpOfflineSubnetIndex"))
if mibBuilder.loadTexts: scIpOfflineSubnetEntry.setStatus('mandatory')
scIpOfflineSubnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scIpOfflineSubnetIndex.setStatus('mandatory')
scIpOfflineSubnetControl = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("erase", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: scIpOfflineSubnetControl.setStatus('mandatory')
scIpOfflineSubnetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scIpOfflineSubnetAddr.setStatus('mandatory')
scLgmStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 12), )
if mibBuilder.loadTexts: scLgmStaticRouteTable.setStatus('mandatory')
scLgmStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 12, 1), ).setIndexNames((0, "STMIB", "scLgmStaticRouteNode"), (0, "STMIB", "scLgmStaticRouteIndex"))
if mibBuilder.loadTexts: scLgmStaticRouteEntry.setStatus('mandatory')
scLgmStaticRouteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 12, 1, 1), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scLgmStaticRouteNode.setStatus('mandatory')
scLgmStaticRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scLgmStaticRouteIndex.setStatus('mandatory')
scLgmStaticRouteStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scLgmStaticRouteStartMode.setStatus('mandatory')
scLgmStaticRouteNextIafHop = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scLgmStaticRouteNextIafHop.setStatus('mandatory')
scLgmStaticRouteLink2GwyNode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 12, 1, 5), NodeAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scLgmStaticRouteLink2GwyNode.setStatus('mandatory')
scLgmStaticRoutePathDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scLgmStaticRoutePathDelay.setStatus('mandatory')
scVoicePrf = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13))
scVoicePrfNetTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1), )
if mibBuilder.loadTexts: scVoicePrfNetTable.setStatus('mandatory')
scVoicePrfNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1), ).setIndexNames((0, "STMIB", "scVoicePrfNetIndex"))
if mibBuilder.loadTexts: scVoicePrfNetEntry.setStatus('mandatory')
scVoicePrfNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scVoicePrfNetIndex.setStatus('mandatory')
scVoicePrfNetControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("erase", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNetControlMode.setStatus('mandatory')
scVoicePrfNetCompressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("tCelp", 1), ("atc", 2), ("adpcm", 3), ("pcm", 255))).clone('pcm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNetCompressMode.setStatus('mandatory')
scVoicePrfNetSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(40, 54, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 238, 240, 270, 480))).clone(namedValues=NamedValues(("b5333", 40), ("b7200", 54), ("b7466", 56), ("b8000", 60), ("b8533", 64), ("b9066", 68), ("b9600", 72), ("b10133", 76), ("b10666", 80), ("b11200", 84), ("b11733", 88), ("b12266", 92), ("b12800", 96), ("b13333", 100), ("b13866", 104), ("b14400", 108), ("b14933", 112), ("b15466", 116), ("b16000", 120), ("b16533", 124), ("b17066", 128), ("b17600", 132), ("b18133", 136), ("b18666", 140), ("b19200", 144), ("b19733", 148), ("b20266", 152), ("b20800", 156), ("b21333", 160), ("b21866", 164), ("b22400", 168), ("b22933", 172), ("b23466", 176), ("b24000", 180), ("b24533", 184), ("b25066", 188), ("b25600", 192), ("b26133", 196), ("b26666", 200), ("b27200", 204), ("b27733", 208), ("b28266", 212), ("b28800", 216), ("b29333", 220), ("b29866", 224), ("b30400", 228), ("b30933", 232), ("b31466", 236), ("b31733", 238), ("b32000", 240), ("b36000", 270), ("b64000", 480))).clone('b64000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNetSpeed.setStatus('mandatory')
scVoicePrfNetDTMFRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNetDTMFRelay.setStatus('mandatory')
scVoicePrfNetFaxRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNetFaxRelay.setStatus('mandatory')
scVoicePrfNetFaxNSFMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNetFaxNSFMode.setStatus('mandatory')
scVoicePrfNetVocoderEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("disable", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNetVocoderEnable.setStatus('mandatory')
scVoicePrfNetDataMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNetDataMode.setStatus('mandatory')
scVoicePrfNetSignalingType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("a", 2), ("ab", 3), ("abcd", 4), ("ac15-dtmf", 8), ("ac15-dp", 9))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNetSignalingType.setStatus('mandatory')
scVoicePrfNetSigIdlePttrn = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15))).clone(namedValues=NamedValues(("a0-b0-c0-d0", 16), ("a0-b0-c0-d1", 8), ("a0-b0-c1-d0", 4), ("a0-b0-c1-d1", 12), ("a0-b1-c0-d0", 2), ("a0-b1-c0-d1", 10), ("a0-b1-c1-d0", 6), ("a0-b1-c1-d1", 14), ("a1-b0-c0-d0", 1), ("a1-b0-c0-d1", 9), ("a1-b0-c1-d0", 5), ("a1-b0-c1-d1", 13), ("a1-b1-c0-d0", 3), ("a1-b1-c0-d1", 11), ("a1-b1-c1-d0", 7), ("a1-b1-c1-d1", 15))).clone('a0-b0-c0-d0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNetSigIdlePttrn.setStatus('mandatory')
scVoicePrfNodeTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2), )
if mibBuilder.loadTexts: scVoicePrfNodeTable.setStatus('mandatory')
scVoicePrfNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1), ).setIndexNames((0, "STMIB", "scVoicePrfNodeIndex"))
if mibBuilder.loadTexts: scVoicePrfNodeEntry.setStatus('mandatory')
scVoicePrfNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scVoicePrfNodeIndex.setStatus('mandatory')
scVoicePrfNodeRdnGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNodeRdnGrpId.setStatus('mandatory')
scVoicePrfNodeTxAudSrcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("silence", 2), ("toneDMW", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNodeTxAudSrcMode.setStatus('mandatory')
scVoicePrfNodeRxAudOutMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("silence", 2), ("toneDMW", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNodeRxAudOutMode.setStatus('mandatory')
scVoicePrfNodeEchoCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNodeEchoCancel.setStatus('mandatory')
scVoicePrfNodeNonLinear = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNodeNonLinear.setStatus('mandatory')
scVoicePrfNodeTxPCMGain = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)).clone(166)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNodeTxPCMGain.setStatus('mandatory')
scVoicePrfNodeRxPCMGain = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)).clone(166)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNodeRxPCMGain.setStatus('mandatory')
scVoicePrfNodePCMPhasorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 255)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNodePCMPhasorSize.setStatus('mandatory')
scVoicePrfNodeSubratePhSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 100)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNodeSubratePhSize.setStatus('mandatory')
scVoicePrfNodeNetSigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("st", 2), ("link", 3))).clone('st')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scVoicePrfNodeNetSigMode.setStatus('mandatory')
scCmntyAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14))
scCmntyAccessTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 1), )
if mibBuilder.loadTexts: scCmntyAccessTable.setStatus('mandatory')
scCmntyAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 1, 1), ).setIndexNames((0, "STMIB", "scCmntyAccessIndex"))
if mibBuilder.loadTexts: scCmntyAccessEntry.setStatus('mandatory')
scCmntyAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 1, 1, 1), RecordIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCmntyAccessIndex.setStatus('mandatory')
scCmntyAccessControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("erase", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyAccessControlMode.setStatus('mandatory')
scCmntyAccessCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24)).clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyAccessCommunityName.setStatus('mandatory')
scCmntyMib2Table = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2), )
if mibBuilder.loadTexts: scCmntyMib2Table.setStatus('mandatory')
scCmntyMib2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2, 1), ).setIndexNames((0, "STMIB", "scCmntyMib2Index"))
if mibBuilder.loadTexts: scCmntyMib2Entry.setStatus('mandatory')
scCmntyMib2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2, 1, 1), RecordIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCmntyMib2Index.setStatus('mandatory')
scCmntyMib2SystemAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyMib2SystemAccess.setStatus('mandatory')
scCmntyMib2InterfacesAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyMib2InterfacesAccess.setStatus('mandatory')
scCmntyMib2AtAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyMib2AtAccess.setStatus('mandatory')
scCmntyMib2IpAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyMib2IpAccess.setStatus('mandatory')
scCmntyMib2IcmpAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyMib2IcmpAccess.setStatus('mandatory')
scCmntyMib2UdpAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyMib2UdpAccess.setStatus('mandatory')
scCmntyMib2SnmpAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyMib2SnmpAccess.setStatus('mandatory')
scCmntySecTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3), )
if mibBuilder.loadTexts: scCmntySecTable.setStatus('mandatory')
scCmntySecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1), ).setIndexNames((0, "STMIB", "scCmntySecIndex"))
if mibBuilder.loadTexts: scCmntySecEntry.setStatus('mandatory')
scCmntySecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 1), RecordIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCmntySecIndex.setStatus('mandatory')
scCmntySecPartHeaderAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntySecPartHeaderAccess.setStatus('mandatory')
scCmntySecSystemProfileAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntySecSystemProfileAccess.setStatus('mandatory')
scCmntySecRootAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntySecRootAccess.setStatus('mandatory')
scCmntySecNodeAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntySecNodeAccess.setStatus('mandatory')
scCmntySecTrapAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntySecTrapAccess.setStatus('mandatory')
scCmntySecChanProfileAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntySecChanProfileAccess.setStatus('mandatory')
scCmntySecSoftloadAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntySecSoftloadAccess.setStatus('mandatory')
scCmntySecCPIAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntySecCPIAccess.setStatus('mandatory')
scCmntySecModemAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntySecModemAccess.setStatus('mandatory')
scCmntySecIPAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntySecIPAccess.setStatus('mandatory')
scCmntySecLGMRoutingAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntySecLGMRoutingAccess.setStatus('mandatory')
scCmntySecVoiceProfileAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntySecVoiceProfileAccess.setStatus('mandatory')
scCmntySecCommunityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntySecCommunityAccess.setStatus('mandatory')
scCmntyRecfTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4), )
if mibBuilder.loadTexts: scCmntyRecfTable.setStatus('mandatory')
scCmntyRecfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1), ).setIndexNames((0, "STMIB", "scCmntyRecfIndex"))
if mibBuilder.loadTexts: scCmntyRecfEntry.setStatus('mandatory')
scCmntyRecfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 1), RecordIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCmntyRecfIndex.setStatus('mandatory')
scCmntyRecfPartHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRecfPartHeader.setStatus('mandatory')
scCmntyRecfNodeAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRecfNodeAccess.setStatus('mandatory')
scCmntyRecfNestAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRecfNestAccess.setStatus('mandatory')
scCmntyRecfSlotAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRecfSlotAccess.setStatus('mandatory')
scCmntyRecfModuleAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRecfModuleAccess.setStatus('mandatory')
scCmntyRecfPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRecfPortAccess.setStatus('mandatory')
scCmntyRecfBundleAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRecfBundleAccess.setStatus('mandatory')
scCmntyRecfINLAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRecfINLAccess.setStatus('mandatory')
scCmntyRecfTDMChannelAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRecfTDMChannelAccess.setStatus('mandatory')
scCmntyRecfFrRelayAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRecfFrRelayAccess.setStatus('mandatory')
scCmntyRecfAd10PortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRecfAd10PortAccess.setStatus('mandatory')
scCmntyRecfAsmPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRecfAsmPortAccess.setStatus('mandatory')
scCmntyRecfRtmPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRecfRtmPortAccess.setStatus('mandatory')
scCmntyRecfLgmPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRecfLgmPortAccess.setStatus('mandatory')
scCmntyRecfDsmPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRecfDsmPortAccess.setStatus('mandatory')
scCmntyRecfTranslationAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRecfTranslationAccess.setStatus('mandatory')
scCmntyRecfHwRscAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRecfHwRscAccess.setStatus('mandatory')
scCmntyRestTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5), )
if mibBuilder.loadTexts: scCmntyRestTable.setStatus('mandatory')
scCmntyRestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1), ).setIndexNames((0, "STMIB", "scCmntyRestIndex"))
if mibBuilder.loadTexts: scCmntyRestEntry.setStatus('mandatory')
scCmntyRestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 1), RecordIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCmntyRestIndex.setStatus('mandatory')
scCmntyRestNodeAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestNodeAccess.setStatus('mandatory')
scCmntyRestNestAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestNestAccess.setStatus('mandatory')
scCmntyRestSlotAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestSlotAccess.setStatus('mandatory')
scCmntyRestModuleAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestModuleAccess.setStatus('mandatory')
scCmntyRestPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestPortAccess.setStatus('mandatory')
scCmntyRestBundleAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestBundleAccess.setStatus('mandatory')
scCmntyRestINLAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestINLAccess.setStatus('mandatory')
scCmntyRestINLContentsAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestINLContentsAccess.setStatus('mandatory')
scCmntyRestChannelAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestChannelAccess.setStatus('mandatory')
scCmntyRestAd10PortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestAd10PortAccess.setStatus('mandatory')
scCmntyRestAsmPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestAsmPortAccess.setStatus('mandatory')
scCmntyRestTrkGrpAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestTrkGrpAccess.setStatus('mandatory')
scCmntyRestRtmPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestRtmPortAccess.setStatus('mandatory')
scCmntyRestLgmPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestLgmPortAccess.setStatus('mandatory')
scCmntyRestSafAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestSafAccess.setStatus('mandatory')
scCmntyRestDsmPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestDsmPortAccess.setStatus('mandatory')
scCmntyRestHwRscAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestHwRscAccess.setStatus('mandatory')
scCmntyRestStTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 6), )
if mibBuilder.loadTexts: scCmntyRestStTable.setStatus('mandatory')
scCmntyRestStEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 6, 1), ).setIndexNames((0, "STMIB", "scCmntyRestStIndex"))
if mibBuilder.loadTexts: scCmntyRestStEntry.setStatus('mandatory')
scCmntyRestStIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 6, 1, 1), RecordIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCmntyRestStIndex.setStatus('mandatory')
scCmntyRestStModuleAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestStModuleAccess.setStatus('mandatory')
scCmntyRestStPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestStPortAccess.setStatus('mandatory')
scCmntyRestStINLAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestStINLAccess.setStatus('mandatory')
scCmntyRestStChannelAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestStChannelAccess.setStatus('mandatory')
scCmntyRestStAd10Access = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyRestStAd10Access.setStatus('mandatory')
scCmntyAlmTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 7), )
if mibBuilder.loadTexts: scCmntyAlmTable.setStatus('mandatory')
scCmntyAlmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 7, 1), ).setIndexNames((0, "STMIB", "scCmntyAlmIndex"))
if mibBuilder.loadTexts: scCmntyAlmEntry.setStatus('mandatory')
scCmntyAlmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 7, 1, 1), RecordIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scCmntyAlmIndex.setStatus('mandatory')
scCmntyAlmPartHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyAlmPartHeader.setStatus('mandatory')
scCmntyAlmAlarmProfileAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyAlmAlarmProfileAccess.setStatus('mandatory')
scCmntyAlmAlarmLogAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyAlmAlarmLogAccess.setStatus('mandatory')
scCmntyAlmAlarmRecordAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyAlmAlarmRecordAccess.setStatus('mandatory')
scCmntyAlmTrapAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("readWrite", 3))).clone('readWrite')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scCmntyAlmTrapAccess.setStatus('mandatory')
recfPartitionHeader = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 1))
recfPartitionControl = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("validateCRC", 1), ("invalidateCRC", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: recfPartitionControl.setStatus('mandatory')
recfPartitionCRCCheck = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("succeed", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfPartitionCRCCheck.setStatus('mandatory')
recfPartitionFlushMode = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfPartitionFlushMode.setStatus('mandatory')
recfNode = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2))
recfNodeEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 1))
recfNodeUpdate = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loaded", 1), ("updateNestReq", 3))).clone('updateNestReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfNodeUpdate.setStatus('mandatory')
recfNodeDescr = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfNodeDescr.setStatus('mandatory')
recfNodeContact = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfNodeContact.setStatus('mandatory')
recfNodeName = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfNodeName.setStatus('mandatory')
recfNodeLocation = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfNodeLocation.setStatus('mandatory')
recfNodeNumberOfNest = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfNodeNumberOfNest.setStatus('mandatory')
recfNodeClockSwitch = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("fast", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfNodeClockSwitch.setStatus('mandatory')
recfNodeAlarmRelay = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(19, 20))).clone(namedValues=NamedValues(("enableAlarmRelay", 19), ("disableAlarmRelay", 20))).clone('enableAlarmRelay')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfNodeAlarmRelay.setStatus('mandatory')
recfClockTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2), )
if mibBuilder.loadTexts: recfClockTable.setStatus('mandatory')
recfClockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2, 1), ).setIndexNames((0, "STMIB", "recfClockIndex"))
if mibBuilder.loadTexts: recfClockEntry.setStatus('mandatory')
recfClockIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfClockIndex.setStatus('mandatory')
recfClockStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(44, 3))).clone(namedValues=NamedValues(("active", 44), ("erase", 3))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfClockStartMode.setStatus('mandatory')
recfClockUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loaded", 1), ("updateReq", 2))).clone('updateReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfClockUpdate.setStatus('mandatory')
recfClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("internal", 1), ("station1", 2), ("station2", 3), ("portRxInd", 4), ("portRxDep", 5), ("portTx", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfClockType.setStatus('mandatory')
recfClockStationSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86))).clone(namedValues=NamedValues(("s2400", 1), ("s3200", 2), ("s3600", 3), ("s4000", 4), ("s4800", 5), ("s5600", 6), ("s6000", 7), ("s6400", 8), ("s7200", 9), ("s8000", 10), ("s8400", 11), ("s9600", 12), ("s12000", 13), ("s14400", 14), ("s16000", 15), ("s19200", 16), ("s24000", 17), ("s28800", 18), ("s32000", 19), ("s38400", 20), ("s40800", 21), ("s48000", 22), ("s50000", 23), ("s56000", 24), ("s57600", 25), ("s64000", 26), ("s72000", 27), ("s76800", 28), ("s80000", 29), ("s96000", 30), ("s112000", 31), ("s128000", 32), ("s144000", 33), ("s153600", 34), ("s168000", 35), ("s192000", 36), ("s224000", 37), ("s230400", 38), ("s256000", 39), ("s384000", 40), ("s448000", 41), ("s460800", 42), ("s512000", 43), ("s576000", 44), ("s672000", 45), ("s768000", 46), ("s896000", 47), ("s1024000", 48), ("s1152000", 49), ("s1334400", 50), ("s1536000", 51), ("s1544000", 52), ("s1920000", 53), ("s1984000", 54), ("s2048000", 55), ("s1856000", 56), ("s1792000", 57), ("s1728000", 58), ("s1664000", 59), ("s1600000", 60), ("s1472000", 61), ("s1408000", 62), ("s1288000", 63), ("s1280000", 64), ("s1232000", 65), ("s1216000", 66), ("s1176000", 67), ("s1120000", 68), ("s1088000", 69), ("s1064000", 70), ("s1008000", 71), ("s960000", 72), ("s952000", 73), ("s840000", 74), ("s832000", 75), ("s784000", 76), ("s728000", 77), ("s704000", 78), ("s640000", 79), ("s616000", 80), ("s560000", 81), ("s504000", 82), ("s392000", 83), ("s336000", 84), ("s320000", 85), ("s280000", 86))).clone('s1544000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfClockStationSpeed.setStatus('mandatory')
recfClockPortSource = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2, 1, 6), PortAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfClockPortSource.setStatus('mandatory')
recfClockQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("high", 1), ("low", 2))).clone('high')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfClockQuality.setStatus('mandatory')
recfClockPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfClockPriority.setStatus('mandatory')
recfAvailResourceTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 3), )
if mibBuilder.loadTexts: recfAvailResourceTable.setStatus('mandatory')
recfAvailResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 3, 1), ).setIndexNames((0, "STMIB", "recfAvailResourceType"))
if mibBuilder.loadTexts: recfAvailResourceEntry.setStatus('mandatory')
recfAvailResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("link2TranslationIndex", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfAvailResourceType.setStatus('mandatory')
recfAvailResourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfAvailResourceId.setStatus('mandatory')
recfNestTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 3), )
if mibBuilder.loadTexts: recfNestTable.setStatus('mandatory')
recfNestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 3, 1), ).setIndexNames((0, "STMIB", "recfNestAddr"))
if mibBuilder.loadTexts: recfNestEntry.setStatus('mandatory')
recfNestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 3, 1, 1), NestAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfNestAddr.setStatus('mandatory')
recfNestDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfNestDesc.setStatus('mandatory')
recfSlotTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4), )
if mibBuilder.loadTexts: recfSlotTable.setStatus('mandatory')
recfSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1), ).setIndexNames((0, "STMIB", "recfSlotAddr"))
if mibBuilder.loadTexts: recfSlotEntry.setStatus('mandatory')
recfSlotAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfSlotAddr.setStatus('mandatory')
recfSlotModuleStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSlotModuleStartMode.setStatus('mandatory')
recfSlotUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("updateReq", 2), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfSlotUpdate.setStatus('mandatory')
recfSlotModuleDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSlotModuleDesc.setStatus('mandatory')
recfSlotModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 19, 20))).clone(namedValues=NamedValues(("ncp", 1), ("lxm", 3), ("rxm", 4), ("t1m", 5), ("e1m", 6), ("sgm", 7), ("lgm", 8), ("asm", 9), ("fsm", 11), ("sdm", 12), ("rtm", 14), ("dsm", 19), ("e3m", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSlotModuleType.setStatus('mandatory')
recfSlotModuleSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSlotModuleSubType.setStatus('mandatory')
recfSlotRedundantMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("oneToOne", 2), ("group", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSlotRedundantMode.setStatus('mandatory')
recfSlotGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSlotGroupID.setStatus('mandatory')
recfSlotModuleMaxBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSlotModuleMaxBypass.setStatus('mandatory')
recfSlotModuleMaxSource = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSlotModuleMaxSource.setStatus('mandatory')
recfSlotModuleStartDiagMask = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSlotModuleStartDiagMask.setStatus('mandatory')
recfSlotModuleBgdDiagMask = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSlotModuleBgdDiagMask.setStatus('mandatory')
recfSlotModulePortDiagMask = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSlotModulePortDiagMask.setStatus('mandatory')
recfSlotModuleDiagoseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSlotModuleDiagoseMode.setStatus('mandatory')
recfSlotModuleStartDiagMaskExt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSlotModuleStartDiagMaskExt.setStatus('mandatory')
recfSlotModuleBgdDiagMaskExt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSlotModuleBgdDiagMaskExt.setStatus('mandatory')
recfModule = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5))
recfModuleFsm16Table = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 1), )
if mibBuilder.loadTexts: recfModuleFsm16Table.setStatus('mandatory')
recfModuleFsm16Entry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 1, 1), ).setIndexNames((0, "STMIB", "recfModuleFsm16Addr"))
if mibBuilder.loadTexts: recfModuleFsm16Entry.setStatus('mandatory')
recfModuleFsm16Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 1, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfModuleFsm16Addr.setStatus('mandatory')
recfModuleFsm16Partition = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfModuleFsm16Partition.setStatus('mandatory')
recfModuleFsm64Table = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 2), )
if mibBuilder.loadTexts: recfModuleFsm64Table.setStatus('mandatory')
recfModuleFsm64Entry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 2, 1), ).setIndexNames((0, "STMIB", "recfModuleFsm64Addr"))
if mibBuilder.loadTexts: recfModuleFsm64Entry.setStatus('mandatory')
recfModuleFsm64Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 2, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfModuleFsm64Addr.setStatus('mandatory')
recfModuleFsm64Partition = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfModuleFsm64Partition.setStatus('mandatory')
recfModuleSgmAgTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 3), )
if mibBuilder.loadTexts: recfModuleSgmAgTable.setStatus('mandatory')
recfModuleSgmAgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 3, 1), ).setIndexNames((0, "STMIB", "recfModuleSgmAgAddr"))
if mibBuilder.loadTexts: recfModuleSgmAgEntry.setStatus('mandatory')
recfModuleSgmAgAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 3, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfModuleSgmAgAddr.setStatus('mandatory')
recfModuleSgmAgPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfModuleSgmAgPartition.setStatus('mandatory')
recfModuleAsmTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 4), )
if mibBuilder.loadTexts: recfModuleAsmTable.setStatus('mandatory')
recfModuleAsmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 4, 1), ).setIndexNames((0, "STMIB", "recfModuleAsmAddr"))
if mibBuilder.loadTexts: recfModuleAsmEntry.setStatus('mandatory')
recfModuleAsmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 4, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfModuleAsmAddr.setStatus('mandatory')
recfModuleAsmPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfModuleAsmPartition.setStatus('mandatory')
recfModuleAsmCelpPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfModuleAsmCelpPartition.setStatus('mandatory')
recfModuleAsmMinCelpPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfModuleAsmMinCelpPorts.setStatus('mandatory')
recfModuleAsmApplType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("x50", 1), ("celp-atc", 2), ("adpcm", 3), ("mixed", 255))).clone('mixed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfModuleAsmApplType.setStatus('mandatory')
recfModuleLgmTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 5), )
if mibBuilder.loadTexts: recfModuleLgmTable.setStatus('mandatory')
recfModuleLgmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 5, 1), ).setIndexNames((0, "STMIB", "recfModuleLgmAddr"))
if mibBuilder.loadTexts: recfModuleLgmEntry.setStatus('mandatory')
recfModuleLgmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 5, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfModuleLgmAddr.setStatus('mandatory')
recfModuleLgmPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfModuleLgmPartition.setStatus('mandatory')
recfModuleDsm = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6))
recfModuleDsmTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 1), )
if mibBuilder.loadTexts: recfModuleDsmTable.setStatus('mandatory')
recfModuleDsmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 1, 1), ).setIndexNames((0, "STMIB", "recfModuleDsmAddr"))
if mibBuilder.loadTexts: recfModuleDsmEntry.setStatus('mandatory')
recfModuleDsmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 1, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfModuleDsmAddr.setStatus('mandatory')
recfModuleDsmPartitionMap = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfModuleDsmPartitionMap.setStatus('mandatory')
recfModuleDsmPbxProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dpnss", 1), ("qsig", 2))).clone('dpnss')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfModuleDsmPbxProtocol.setStatus('mandatory')
recfModuleDsmActiveLev1CDRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfModuleDsmActiveLev1CDRMode.setStatus('mandatory')
recfModuleDsmRecordLev1CDRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfModuleDsmRecordLev1CDRMode.setStatus('mandatory')
recfModuleDsmActiveLev2CDRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfModuleDsmActiveLev2CDRMode.setStatus('mandatory')
recfModuleDsmRecordLev2CDRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfModuleDsmRecordLev2CDRMode.setStatus('mandatory')
recfModDsmRecCDRLogTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 2), )
if mibBuilder.loadTexts: recfModDsmRecCDRLogTable.setStatus('mandatory')
recfModDsmRecCDRLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 2, 1), ).setIndexNames((0, "STMIB", "recfModDsmRecCDRLogAddr"), (0, "STMIB", "recfModDsmRecCDRLogIndex"))
if mibBuilder.loadTexts: recfModDsmRecCDRLogEntry.setStatus('mandatory')
recfModDsmRecCDRLogAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 2, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfModDsmRecCDRLogAddr.setStatus('mandatory')
recfModDsmRecCDRLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfModDsmRecCDRLogIndex.setStatus('mandatory')
recfModDsmRecCDRLogControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("erase", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfModDsmRecCDRLogControlMode.setStatus('mandatory')
recfModDsmRecCDRLogSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfModDsmRecCDRLogSize.setStatus('mandatory')
recfModDsmRecCDRLogOvThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfModDsmRecCDRLogOvThrshld.setStatus('mandatory')
recfModDsmRecCDRLogPartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfModDsmRecCDRLogPartitionID.setStatus('mandatory')
recfPort = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6))
recfT1mPortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1), )
if mibBuilder.loadTexts: recfT1mPortTable.setStatus('mandatory')
recfT1mPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1), ).setIndexNames((0, "STMIB", "recfT1mPortAddr"))
if mibBuilder.loadTexts: recfT1mPortEntry.setStatus('mandatory')
recfT1mPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfT1mPortAddr.setStatus('mandatory')
recfT1mPortStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfT1mPortStartMode.setStatus('mandatory')
recfT1mPortUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("updateReq", 2), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfT1mPortUpdate.setStatus('mandatory')
recfT1mPortFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sf", 1), ("attESF", 2), ("ansiESF", 3))).clone('ansiESF')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfT1mPortFraming.setStatus('mandatory')
recfT1mPortLineCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2), ("zeroCodeSuppression", 3))).clone('b8zs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfT1mPortLineCodeType.setStatus('mandatory')
recfT1mPortDs1Option = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("c", 3))).clone('a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfT1mPortDs1Option.setStatus('mandatory')
recfT1mPortDsx1Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("from0to133ft", 1), ("from134to266ft", 2), ("from267to399ft", 3), ("from400to533ft", 4), ("from534to655ft", 5), ("fccOptionA", 6))).clone('from0to133ft')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfT1mPortDsx1Distance.setStatus('mandatory')
recfT1mPortEquGain = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("g36db", 1), ("g26db", 2))).clone('g36db')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfT1mPortEquGain.setStatus('mandatory')
recfT1mPortBundleMap = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfT1mPortBundleMap.setStatus('mandatory')
recfT1mPortErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfT1mPortErrorThreshold.setStatus('mandatory')
recfT1mPortSevereThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfT1mPortSevereThreshold.setStatus('mandatory')
recfT1mPortAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfT1mPortAlarmThreshold.setStatus('mandatory')
recfT1mPortFailThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfT1mPortFailThreshold.setStatus('mandatory')
recfT1mPortFailToggleRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(61, 62))).clone(namedValues=NamedValues(("toggleIfPortFail", 61), ("noToggle", 62))).clone('toggleIfPortFail')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfT1mPortFailToggleRequest.setStatus('mandatory')
recfT1mPortOOSBitPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("x7f", 1), ("x1a", 2), ("xd5", 3), ("x7e", 4))).clone('x7f')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfT1mPortOOSBitPattern.setStatus('mandatory')
recfT1mPortOOSASignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("space", 1), ("mark", 2), ("spaceMark", 3), ("markSpace", 4))).clone('spaceMark')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfT1mPortOOSASignaling.setStatus('mandatory')
recfT1mPortOOSBSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("space", 1), ("mark", 2), ("spaceMark", 3), ("markSpace", 4))).clone('spaceMark')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfT1mPortOOSBSignaling.setStatus('mandatory')
recfT1mPortOOSCDSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("spaceSpace", 1), ("markMark", 2), ("spaceMark", 3), ("markSpace", 4))).clone('spaceMark')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfT1mPortOOSCDSignaling.setStatus('mandatory')
recfT1mPortSigInversion = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverted", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfT1mPortSigInversion.setStatus('deprecated')
recfE1mPortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2), )
if mibBuilder.loadTexts: recfE1mPortTable.setStatus('mandatory')
recfE1mPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1), ).setIndexNames((0, "STMIB", "recfE1mPortAddr"))
if mibBuilder.loadTexts: recfE1mPortEntry.setStatus('mandatory')
recfE1mPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfE1mPortAddr.setStatus('mandatory')
recfE1mPortStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfE1mPortStartMode.setStatus('mandatory')
recfE1mPortUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("updateReq", 2), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfE1mPortUpdate.setStatus('mandatory')
recfE1mPortFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("g732n", 1), ("g732s", 2))).clone('g732n')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfE1mPortFraming.setStatus('mandatory')
recfE1mPortCrcMultiFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfE1mPortCrcMultiFrame.setStatus('mandatory')
recfE1mPortSigInversion = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverted", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfE1mPortSigInversion.setStatus('deprecated')
recfE1mPortInternationalBit = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfE1mPortInternationalBit.setStatus('mandatory')
recfE1mPortNationalBit = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(31)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfE1mPortNationalBit.setStatus('mandatory')
recfE1mPortTransmitEBit = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfE1mPortTransmitEBit.setStatus('mandatory')
recfE1mPortReceiveEBit = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("monitor", 1), ("ignore", 2))).clone('ignore')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfE1mPortReceiveEBit.setStatus('mandatory')
recfE1mPortBundleMap = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(31, 31)).setFixedLength(31)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfE1mPortBundleMap.setStatus('mandatory')
recfE1mPortErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfE1mPortErrorThreshold.setStatus('mandatory')
recfE1mPortSevereThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfE1mPortSevereThreshold.setStatus('mandatory')
recfE1mPortAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfE1mPortAlarmThreshold.setStatus('mandatory')
recfE1mPortFailThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfE1mPortFailThreshold.setStatus('mandatory')
recfE1mPortFailToggleRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(61, 62))).clone(namedValues=NamedValues(("toggleIfPortFail", 61), ("noToggle", 62))).clone('toggleIfPortFail')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfE1mPortFailToggleRequest.setStatus('mandatory')
recfE1mPortOOSBitPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("x7f", 1), ("x1a", 2), ("xd5", 3), ("x7e", 4))).clone('xd5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfE1mPortOOSBitPattern.setStatus('mandatory')
recfE1mPortOOSASignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("space", 1), ("mark", 2), ("spaceMark", 3), ("markSpace", 4))).clone('spaceMark')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfE1mPortOOSASignaling.setStatus('mandatory')
recfE1mPortOOSBSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("space", 1), ("mark", 2), ("spaceMark", 3), ("markSpace", 4))).clone('spaceMark')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfE1mPortOOSBSignaling.setStatus('mandatory')
recfE1mPortOOSCDSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("spaceSpace", 1), ("markMark", 2), ("spaceMark", 3), ("markSpace", 4))).clone('spaceMark')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfE1mPortOOSCDSignaling.setStatus('mandatory')
recfSdmPortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3), )
if mibBuilder.loadTexts: recfSdmPortTable.setStatus('mandatory')
recfSdmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1), ).setIndexNames((0, "STMIB", "recfSdmPortAddr"))
if mibBuilder.loadTexts: recfSdmPortEntry.setStatus('mandatory')
recfSdmPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfSdmPortAddr.setStatus('mandatory')
recfSdmPortStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSdmPortStartMode.setStatus('mandatory')
recfSdmPortUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("updateReq", 2), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfSdmPortUpdate.setStatus('mandatory')
recfSdmPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 18, 36, 54, 72, 108, 144, 288, 360, 3360, 6720, 10080, 480, 960, 1440, 1920, 2400, 2880, 3840, 4320, 4800, 5280, 5760, 6240, 7200, 7680, 8160, 8640, 9120, 9600, 10560, 11040, 11520, 12000, 12480, 12960, 13440, 13920, 14400, 14880, 15360, 420, 840, 1260, 1680, 2100, 2520, 2940, 3780, 4200, 4620, 5040, 5460, 5880, 6300, 7140, 7560, 7980, 8400, 8820, 9240, 9660))).clone(namedValues=NamedValues(("s1200", 9), ("s2400", 18), ("s4800", 36), ("s7200", 54), ("s9600", 72), ("s14400", 108), ("s19200", 144), ("s38400", 288), ("s48000", 360), ("bsf448k", 3360), ("bsf896k", 6720), ("bsf1344k", 10080), ("b64k", 480), ("b128k", 960), ("b192k", 1440), ("b256k", 1920), ("b320k", 2400), ("b384k", 2880), ("b512k", 3840), ("b576k", 4320), ("b640k", 4800), ("b704k", 5280), ("b768k", 5760), ("b832k", 6240), ("b960k", 7200), ("b1024k", 7680), ("b1088k", 8160), ("b1152k", 8640), ("b1216k", 9120), ("b1280k", 9600), ("b1408k", 10560), ("b1472k", 11040), ("b1536k", 11520), ("b1600k", 12000), ("b1664k", 12480), ("b1728k", 12960), ("b1792k", 13440), ("b1856k", 13920), ("b1920k", 14400), ("b1984k", 14880), ("b2048k", 15360), ("sf56k", 420), ("sf112k", 840), ("sf168k", 1260), ("sf224k", 1680), ("sf280k", 2100), ("sf336k", 2520), ("sf392k", 2940), ("sf504k", 3780), ("sf560k", 4200), ("sf616k", 4620), ("sf672k", 5040), ("sf728k", 5460), ("sf784k", 5880), ("sf840k", 6300), ("sf952k", 7140), ("sf1008k", 7560), ("sf1064k", 7980), ("sf1120k", 8400), ("sf1176k", 8820), ("sf1232k", 9240), ("sf1288k", 9660))).clone('b64k')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSdmPortSpeed.setStatus('mandatory')
recfSdmPortInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dte1", 1), ("dte2", 2), ("dte3", 3), ("dce1", 4), ("dce2", 5), ("dce3", 6))).clone('dce1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSdmPortInterface.setStatus('mandatory')
recfSdmPortTxClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("system", 1), ("receive", 2), ("send", 3))).clone('system')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSdmPortTxClockSource.setStatus('mandatory')
recfSdmPortBitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b7bit", 1), ("b8bit", 2))).clone('b8bit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSdmPortBitMode.setStatus('mandatory')
recfSdmPortOOSOper = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("doNothing", 1), ("forceFNS", 2), ("mark", 3), ("markFF", 4), ("space", 5), ("spaceFF", 6))).clone('doNothing')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSdmPortOOSOper.setStatus('mandatory')
recfSdmPortGen = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("dsrDtr", 2), ("trans", 3))).clone('trans')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSdmPortGen.setStatus('mandatory')
recfSdmPortPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverted", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSdmPortPolarity.setStatus('mandatory')
recfSdmPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("null", 1), ("io", 2), ("bandContent", 3), ("inl", 4), ("fsm16Connect", 5))).clone('null')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSdmPortType.setStatus('mandatory')
recfSdmPortINLNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfSdmPortINLNumber.setStatus('mandatory')
recfSdmDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSdmDeviceType.setStatus('mandatory')
recfSdmPortPartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSdmPortPartitionID.setStatus('mandatory')
recfSdmPortFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSdmPortFunctions.setStatus('mandatory')
recfSdmPortContentionSet = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7, 8, 255))).clone(namedValues=NamedValues(("f1nf1", 1), ("f2nf2", 2), ("f4nf4", 7), ("nf4f4", 8), ("disable", 255))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSdmPortContentionSet.setStatus('mandatory')
recfSdmPortLoopbackSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 13, 11, 7, 9, 5, 3, 1))).clone(namedValues=NamedValues(("none", 15), ("ll", 13), ("rl", 11), ("tm", 7), ("llRl", 9), ("llTm", 5), ("rlTm", 3), ("llRlTm", 1))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSdmPortLoopbackSupport.setStatus('mandatory')
recfSdmPortSatelliteBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 3))).clone(namedValues=NamedValues(("enable", 15), ("disable", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSdmPortSatelliteBuffer.setStatus('mandatory')
recfSdmPortFailToggleRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(61, 62))).clone(namedValues=NamedValues(("toggleIfPortFail", 61), ("noToggle", 62))).clone('toggleIfPortFail')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSdmPortFailToggleRequest.setStatus('mandatory')
recfSdmPortKGPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kgPositive", 1), ("kgNegative", 2))).clone('kgPositive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSdmPortKGPolarity.setStatus('mandatory')
recfSdmPortKGSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kgPulse", 1), ("kgLevel", 2))).clone('kgPulse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSdmPortKGSignalType.setStatus('mandatory')
recfSdmPortKGMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kgEnable", 1), ("kgDisable", 2))).clone('kgDisable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfSdmPortKGMode.setStatus('mandatory')
recfBundleTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7), )
if mibBuilder.loadTexts: recfBundleTable.setStatus('mandatory')
recfBundleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1), ).setIndexNames((0, "STMIB", "recfBundleAddr"))
if mibBuilder.loadTexts: recfBundleEntry.setStatus('mandatory')
recfBundleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 1), BundleAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfBundleAddr.setStatus('mandatory')
recfBundleStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundleStartMode.setStatus('mandatory')
recfBundleUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("updateReq", 2), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfBundleUpdate.setStatus('mandatory')
recfBundleSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("a", 2), ("ab", 3), ("abcd", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundleSignaling.setStatus('mandatory')
recfBundleOOSBitPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("x7f", 1), ("x1a", 2), ("xd5", 3), ("x7e", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundleOOSBitPattern.setStatus('mandatory')
recfBundleOOSASignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("space", 1), ("mark", 2), ("spaceMark", 3), ("markSpace", 4))).clone('spaceMark')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundleOOSASignaling.setStatus('mandatory')
recfBundleOOSBSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("space", 1), ("mark", 2), ("spaceMark", 3), ("markSpace", 4))).clone('spaceMark')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundleOOSBSignaling.setStatus('mandatory')
recfBundleOOSCDSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("spaceSpace", 1), ("markMark", 2), ("spaceMark", 3), ("markSpace", 4))).clone('spaceMark')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundleOOSCDSignaling.setStatus('mandatory')
recfBundleNullIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("space", 1), ("mark", 2))).clone('mark')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundleNullIdlePattern.setStatus('mandatory')
recfBundleBwCntIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15))).clone(namedValues=NamedValues(("a0-b0-c0-d0", 16), ("a0-b0-c0-d1", 8), ("a0-b0-c1-d0", 4), ("a0-b0-c1-d1", 12), ("a0-b1-c0-d0", 2), ("a0-b1-c0-d1", 10), ("a0-b1-c1-d0", 6), ("a0-b1-c1-d1", 14), ("a1-b0-c0-d0", 1), ("a1-b0-c0-d1", 9), ("a1-b0-c1-d0", 5), ("a1-b0-c1-d1", 13), ("a1-b1-c0-d0", 3), ("a1-b1-c0-d1", 11), ("a1-b1-c1-d0", 7), ("a1-b1-c1-d1", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundleBwCntIdlePattern.setStatus('mandatory')
recfBundleBusyOutTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 255))).clone(namedValues=NamedValues(("sec5", 5), ("sec10", 10), ("sec20", 20), ("sec30", 30), ("sec40", 40), ("sec50", 50), ("sec60", 60), ("sec70", 70), ("sec80", 80), ("sec90", 90), ("sec100", 100), ("sec110", 110), ("sec120", 120), ("sec130", 130), ("sec140", 140), ("sec150", 150), ("sec160", 160), ("sec170", 170), ("sec180", 180), ("sec190", 190), ("sec200", 200), ("sec210", 210), ("sec220", 220), ("sec230", 230), ("sec240", 240), ("permanent", 255))).clone('permanent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundleBusyOutTimer.setStatus('mandatory')
recfBundleSeizureTime = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("ms50", 1), ("ms100", 2), ("ms150", 3), ("ms200", 4), ("ms250", 5), ("ms300", 6), ("ms350", 7), ("ms400", 8), ("ms450", 9), ("ms500", 10), ("ms550", 11), ("ms600", 12), ("ms650", 13), ("ms700", 14), ("ms750", 15), ("ms800", 16), ("ms850", 17), ("ms900", 18), ("ms950", 19), ("ms1000", 20))).clone('ms50')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundleSeizureTime.setStatus('mandatory')
recfBundlePreemptionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))).clone(namedValues=NamedValues(("none", 1), ("ms250", 2), ("ms300", 3), ("ms350", 4), ("ms400", 5), ("ms450", 6), ("ms500", 7), ("ms550", 8), ("ms600", 9), ("ms650", 10), ("ms700", 11), ("ms750", 12), ("ms800", 13), ("ms850", 14), ("ms900", 15), ("ms950", 16), ("s1", 20), ("s2", 21), ("s3", 22), ("s4", 23), ("s5", 24), ("s6", 25), ("s7", 26), ("s8", 27), ("s9", 28), ("s10", 29))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundlePreemptionTime.setStatus('mandatory')
recfBundleOrgDisconnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91))).clone(namedValues=NamedValues(("ms150", 1), ("ms200", 2), ("ms250", 3), ("ms300", 4), ("ms350", 5), ("ms400", 6), ("ms450", 7), ("ms500", 8), ("s10", 11), ("s15", 12), ("s20", 13), ("s25", 14), ("s30", 15), ("s35", 16), ("s40", 17), ("s45", 18), ("s50", 19), ("s55", 20), ("s60", 21), ("s65", 22), ("s70", 23), ("s75", 24), ("s80", 25), ("s85", 26), ("s90", 27), ("s95", 28), ("s100", 29), ("s105", 30), ("s110", 31), ("s115", 32), ("s120", 33), ("s125", 34), ("s130", 35), ("s135", 36), ("s140", 37), ("s145", 38), ("s150", 39), ("s155", 40), ("s160", 41), ("s165", 42), ("s170", 43), ("s175", 44), ("s180", 45), ("s185", 46), ("s190", 47), ("s195", 48), ("s200", 49), ("s205", 50), ("s210", 51), ("s215", 52), ("s220", 53), ("s225", 54), ("s230", 55), ("s235", 56), ("s240", 57), ("s245", 58), ("s250", 59), ("s255", 60), ("s260", 61), ("s265", 62), ("s270", 63), ("s275", 64), ("s280", 65), ("s285", 66), ("s290", 67), ("s295", 68), ("s300", 69), ("s305", 70), ("s310", 71), ("s315", 72), ("s320", 73), ("s325", 74), ("s330", 75), ("s335", 76), ("s340", 77), ("s345", 78), ("s350", 79), ("s355", 80), ("s360", 81), ("s365", 82), ("s370", 83), ("s375", 84), ("s380", 85), ("s385", 86), ("s390", 87), ("s395", 88), ("s400", 89), ("s405", 90), ("s410", 91))).clone('s180')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundleOrgDisconnectTime.setStatus('mandatory')
recfBundleAttenuationRx = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("p0db", 2), ("p3db", 3), ("p6db", 4), ("p9db", 5))).clone('p0db')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundleAttenuationRx.setStatus('mandatory')
recfBundleAttenuationTx = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("p0db", 2), ("p3db", 3), ("p6db", 4), ("p9db", 5))).clone('p0db')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundleAttenuationTx.setStatus('mandatory')
recfBundleType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("null", 1), ("io", 2), ("bandContent", 3), ("inl", 4))).clone('null')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundleType.setStatus('mandatory')
recfBundleINLNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfBundleINLNumber.setStatus('mandatory')
recfBundleDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundleDeviceType.setStatus('mandatory')
recfBundleContentionSet = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 2))).clone(namedValues=NamedValues(("em", 1), ("signalInvert", 3), ("fxo", 4), ("fxs-ard", 5), ("fxs", 6), ("disable", 2))).clone('em')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundleContentionSet.setStatus('mandatory')
recfBundlePartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundlePartitionID.setStatus('mandatory')
recfBundleBwCntBusyPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15, 254, 255))).clone(namedValues=NamedValues(("a0-b0-c0-d0", 16), ("a0-b0-c0-d1", 8), ("a0-b0-c1-d0", 4), ("a0-b0-c1-d1", 12), ("a0-b1-c0-d0", 2), ("a0-b1-c0-d1", 10), ("a0-b1-c1-d0", 6), ("a0-b1-c1-d1", 14), ("a1-b0-c0-d0", 1), ("a1-b0-c0-d1", 9), ("a1-b0-c1-d0", 5), ("a1-b0-c1-d1", 13), ("a1-b1-c0-d0", 3), ("a1-b1-c0-d1", 11), ("a1-b1-c1-d0", 7), ("a1-b1-c1-d1", 15), ("oos", 254), ("reverse", 255))).clone('reverse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundleBwCntBusyPattern.setStatus('mandatory')
recfBundleSigInversion = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverted", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundleSigInversion.setStatus('mandatory')
recfBundleDataPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverted", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundleDataPolarity.setStatus('mandatory')
recfBundlePCMLaw = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("native", 1), ("converted", 2))).clone('native')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfBundlePCMLaw.setStatus('mandatory')
recfINLTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8), )
if mibBuilder.loadTexts: recfINLTable.setStatus('mandatory')
recfINLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1), ).setIndexNames((0, "STMIB", "recfINLNumber"))
if mibBuilder.loadTexts: recfINLEntry.setStatus('mandatory')
recfINLNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfINLNumber.setStatus('mandatory')
recfINLAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 2), BundleAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfINLAddr.setStatus('mandatory')
recfINLStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfINLStartMode.setStatus('mandatory')
recfINLUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("updateReq", 2), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfINLUpdate.setStatus('mandatory')
recfINLArqCir = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfINLArqCir.setStatus('mandatory')
recfINLMaxPacketDS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfINLMaxPacketDS0.setStatus('mandatory')
recfINLPacketCirOccupy = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfINLPacketCirOccupy.setStatus('mandatory')
recfINLMaxTDMDS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfINLMaxTDMDS0.setStatus('mandatory')
recfINLGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="7f")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfINLGroup.setStatus('mandatory')
recfINLCost = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfINLCost.setStatus('mandatory')
recfINLEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("encrypted", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfINLEncryption.setStatus('mandatory')
recfINLSatelliteHop = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfINLSatelliteHop.setStatus('mandatory')
recfINLOOSTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfINLOOSTimer.setStatus('mandatory')
recfINLOrig = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfINLOrig.setStatus('mandatory')
recfINLRemoteNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 15), NodeAddr().clone(hexValue="0000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfINLRemoteNodeID.setStatus('mandatory')
recfINLRemoteINLID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfINLRemoteINLID.setStatus('mandatory')
recfINLPartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfINLPartitionID.setStatus('mandatory')
recfINLKGMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kgEnable", 1), ("kgDisable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfINLKGMode.setStatus('mandatory')
recfTDMChannelTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9), )
if mibBuilder.loadTexts: recfTDMChannelTable.setStatus('mandatory')
recfTDMChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1), ).setIndexNames((0, "STMIB", "recfTDMChannelAddr"))
if mibBuilder.loadTexts: recfTDMChannelEntry.setStatus('mandatory')
recfTDMChannelAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 1), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfTDMChannelAddr.setStatus('mandatory')
recfTDMChannelDestNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 2), NodeAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfTDMChannelDestNodeID.setStatus('mandatory')
recfTDMChannelDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 3), ChannelAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfTDMChannelDestAddr.setStatus('mandatory')
recfTDMChannelControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("erase", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfTDMChannelControlMode.setStatus('mandatory')
recfTDMChannelUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loaded", 1), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfTDMChannelUpdate.setStatus('mandatory')
recfTDMChannelModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 11, 12, 13, 14, 19, 20))).clone(namedValues=NamedValues(("t1m", 5), ("e1m", 6), ("sgm", 7), ("lgm", 8), ("asm", 9), ("fsm", 11), ("sdm", 12), ("sgmAg", 13), ("rtm", 14), ("dsm", 19), ("e3m", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfTDMChannelModuleType.setStatus('mandatory')
recfTDMChannelDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfTDMChannelDeviceType.setStatus('mandatory')
recfTDMChannelProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfTDMChannelProfile.setStatus('mandatory')
recfTDMChannelOrig = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfTDMChannelOrig.setStatus('mandatory')
recfTDMChannelPartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfTDMChannelPartitionID.setStatus('mandatory')
recfTDMChannelState = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(35, 34, 33, 86, 110, 111, 88, 112, 117, 118, 89, 90, 91, 92, 93, 113, 114, 115, 116, 104, 105, 41, 42, 30, 119, 120, 125, 128, 129, 130, 94, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 255))).clone(namedValues=NamedValues(("connected", 35), ("processing", 34), ("nodeReset", 33), ("noSourceIoMIB", 86), ("noSourceChProfile", 110), ("noDestChProfile", 111), ("sourceIoUnusable", 88), ("destIoUnusable", 112), ("sourceChMibOff", 117), ("destChMibOff", 118), ("noDestChMIB", 89), ("noDestIoMIB", 90), ("notMatchDeviceType", 91), ("notMatchIoSpeed", 92), ("notMatchPartition", 93), ("notMatchBitMode", 113), ("notMatchSignalling", 114), ("destBusy", 115), ("destMismatch", 116), ("contentionTerminate", 104), ("userInitiate", 105), ("noInlBw", 41), ("noRoute", 42), ("noServer", 30), ("sourceExceedSharedBw", 119), ("destExceedSharedBw", 120), ("disconnectedSAF", 125), ("rejectBySourceModule", 128), ("rejectByDestModule", 129), ("channelLimitExceeded", 130), ("linkDisconnectError", 94), ("noBypassServer", 151), ("noSrcServer", 152), ("noDestServer", 153), ("noSrcSgmSaf", 154), ("noDestSgmSaf", 155), ("noSrcSgmScf", 156), ("noDestSgmScf", 157), ("noSrcAgmSaf", 158), ("noDestAgmSaf", 159), ("noSrcAgmScf", 160), ("noDestAgmScf", 161), ("noSrcAsmSaf", 162), ("noDestAsmSaf", 163), ("noSrcAsmScf", 164), ("noDestAsmScf", 165), ("noSrcLgmSaf", 166), ("noDestLgmSaf", 167), ("noSrcLgmScf", 168), ("noDestLgmScf", 169), ("noSrcRtmSaf", 170), ("noDestRtmSaf", 171), ("noSrcRtmScf", 172), ("noDestRtmScf", 173), ("noSrcVoicePort", 174), ("noDestVoicePort", 175), ("notApplicable", 255))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfTDMChannelState.setStatus('mandatory')
recfTDMChannelDestCheckMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfTDMChannelDestCheckMode.setStatus('mandatory')
recfTDMChannelConnectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autoConnect", 1), ("userInitiate", 2))).clone('userInitiate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfTDMChannelConnectMode.setStatus('mandatory')
recfTDMChannelSpecialPrfType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("voiceProfile", 1), ("dataProfile", 2), ("none", 255))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfTDMChannelSpecialPrfType.setStatus('mandatory')
recfTDMChannelSpecialProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfTDMChannelSpecialProfile.setStatus('mandatory')
recfTDMChannelDestNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("st", 1), ("link", 2))).clone('st')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfTDMChannelDestNodeType.setStatus('mandatory')
recfFrame = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10))
recfFrPortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1), )
if mibBuilder.loadTexts: recfFrPortTable.setStatus('mandatory')
recfFrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1), ).setIndexNames((0, "STMIB", "recfFrPortAddr"))
if mibBuilder.loadTexts: recfFrPortEntry.setStatus('mandatory')
recfFrPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfFrPortAddr.setStatus('mandatory')
recfFrPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortDescription.setStatus('mandatory')
recfFrPortStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortStartMode.setStatus('mandatory')
recfFrPortUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loaded", 1), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfFrPortUpdate.setStatus('mandatory')
recfFrPortLmiActive = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ansi617D", 1), ("ccittQ933A", 2), ("disabled", 3))).clone('ansi617D')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortLmiActive.setStatus('mandatory')
recfFrPortLmiPollingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sec5", 1), ("sec10", 2), ("sec15", 3), ("sec20", 4), ("sec25", 5), ("sec30", 6))).clone('sec5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortLmiPollingTimer.setStatus('mandatory')
recfFrPortLmiWaitingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sec5", 1), ("sec10", 2), ("sec15", 3), ("sec20", 4), ("sec25", 5), ("sec30", 6))).clone('sec10')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortLmiWaitingTimer.setStatus('mandatory')
recfFrPortLmiFullEnqInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortLmiFullEnqInterval.setStatus('mandatory')
recfFrPortLmiMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortLmiMonitoredEvents.setStatus('mandatory')
recfFrPortErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortErrorThreshold.setStatus('mandatory')
recfFrPortDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 4))).clone(namedValues=NamedValues(("networkToUser", 1), ("userToNetwork", 2), ("networkToNetwork", 3), ("regularHdlc", 5), ("ad10", 4))).clone('networkToUser')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortDeviceType.setStatus('mandatory')
recfFrPortAd10NodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 12), NodeAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortAd10NodeID.setStatus('mandatory')
recfFrPortAd10PortID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 13), PortAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortAd10PortID.setStatus('mandatory')
recfFrPortBitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b7bit", 1), ("b8bit", 2))).clone('b8bit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortBitMode.setStatus('mandatory')
recfFrPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 4096)).clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortMaxFrameSize.setStatus('mandatory')
recfFrPortSharedZeroFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortSharedZeroFlag.setStatus('mandatory')
recfFrPortMaxCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortMaxCIR.setStatus('mandatory')
recfFrPortAvgPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("b32", 1), ("b64", 2), ("b128", 3), ("b256", 4))).clone('b256')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortAvgPktSize.setStatus('mandatory')
recfFrPortAllocationPref = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dontCare", 1), ("fsm16", 2), ("fsm64", 3))).clone('dontCare')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortAllocationPref.setStatus('mandatory')
recfFrPortBillingSegSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 1))).clone(namedValues=NamedValues(("b64", 2), ("b128", 3), ("b256", 4), ("b512", 5), ("b1024", 6), ("pktsize", 1))).clone('pktsize')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortBillingSegSize.setStatus('mandatory')
recfFrPortBillingControl = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortBillingControl.setStatus('mandatory')
recfFrPortPartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortPartitionID.setStatus('mandatory')
recfFrPortEncodingType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 3))).clone(namedValues=NamedValues(("nrz", 1), ("nrzb", 2), ("nrzi-space", 4), ("nrzi-mark", 3))).clone('nrz')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrPortEncodingType.setStatus('mandatory')
recfFrChannelTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2), )
if mibBuilder.loadTexts: recfFrChannelTable.setStatus('mandatory')
recfFrChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1), ).setIndexNames((0, "STMIB", "recfFrChannelAddr"))
if mibBuilder.loadTexts: recfFrChannelEntry.setStatus('mandatory')
recfFrChannelAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 1), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfFrChannelAddr.setStatus('mandatory')
recfFrChannelDestNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 2), NodeAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrChannelDestNodeID.setStatus('mandatory')
recfFrChannelDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 3), ChannelAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrChannelDestAddr.setStatus('mandatory')
recfFrChannelControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("erase", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrChannelControlMode.setStatus('mandatory')
recfFrChannelUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loaded", 1), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfFrChannelUpdate.setStatus('mandatory')
recfFrChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("regular", 1), ("expressRouting", 3))).clone('regular')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrChannelType.setStatus('mandatory')
recfFrChannelCirTransPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrChannelCirTransPriority.setStatus('mandatory')
recfFrChannelCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrChannelCIR.setStatus('mandatory')
recfFrChannelEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrChannelEIR.setStatus('mandatory')
recfFrChannelBc = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrChannelBc.setStatus('mandatory')
recfFrChannelProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrChannelProfile.setStatus('mandatory')
recfFrChannelOrig = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrChannelOrig.setStatus('mandatory')
recfFrChannelPartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrChannelPartitionID.setStatus('mandatory')
recfFrChannelState = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(35, 34, 33, 86, 110, 111, 88, 112, 117, 118, 89, 90, 91, 92, 93, 115, 116, 104, 105, 41, 42, 30, 119, 120, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 151, 152, 153, 255))).clone(namedValues=NamedValues(("connected", 35), ("processing", 34), ("nodeReset", 33), ("noSourceIoMIB", 86), ("noSourceChProfile", 110), ("noDestChProfile", 111), ("sourceIoUnusable", 88), ("destIoUnusable", 112), ("sourceChMibOff", 117), ("destChMibOff", 118), ("noDestChMIB", 89), ("noDestIoMIB", 90), ("notMatchDeviceType", 91), ("notMatchIoSpeed", 92), ("notMatchPartition", 93), ("destBusy", 115), ("destMismatch", 116), ("contentionTerminate", 104), ("userInitiate", 105), ("noInlBw", 41), ("noRoute", 42), ("noServer", 30), ("sourceExceedSharedBw", 119), ("destExceedSharedBw", 120), ("rejectBySourceModule", 128), ("rejectByDestModule", 129), ("sourceHdlcExcessDlcis", 130), ("destHdlcExcessDlcis", 131), ("sourceNoAvailableDlcis", 132), ("destNoAvailableDlcis", 133), ("sourceNoAvailablePvc", 134), ("destNoAvailablePvc", 135), ("bypassNoAvailablePvc", 136), ("sourceNoAvailableThroughput", 137), ("destNoAvailableThroughput", 138), ("sourceNoAvailableModuleMemory", 139), ("destNoAvailableModuleMemory", 140), ("bypassNoAvailableThroughput", 141), ("noBypassServer", 151), ("noSrcServer", 152), ("noDestServer", 153), ("notApplicable", 255))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfFrChannelState.setStatus('mandatory')
recfFrChannelDestCheckMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrChannelDestCheckMode.setStatus('mandatory')
recfFrChannelConnectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autoConnect", 1), ("userInitiate", 2))).clone('userInitiate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfFrChannelConnectMode.setStatus('mandatory')
recfFrChannelModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 19))).clone(namedValues=NamedValues(("fsm", 11), ("dsm", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfFrChannelModuleType.setStatus('mandatory')
recfAd10Port = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11))
recfAd10AgmPortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 1), )
if mibBuilder.loadTexts: recfAd10AgmPortTable.setStatus('mandatory')
recfAd10AgmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 1, 1), ).setIndexNames((0, "STMIB", "recfAd10AgmPortAddr"))
if mibBuilder.loadTexts: recfAd10AgmPortEntry.setStatus('mandatory')
recfAd10AgmPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 1, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfAd10AgmPortAddr.setStatus('mandatory')
recfAd10AgmPortStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10AgmPortStartMode.setStatus('mandatory')
recfAd10AgmPortUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loaded", 1), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfAd10AgmPortUpdate.setStatus('mandatory')
recfAd10AgmPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(144, 420, 480, 960))).clone(namedValues=NamedValues(("b19200", 144), ("b56000", 420), ("b64000", 480), ("b128000", 960))).clone('b64000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10AgmPortSpeed.setStatus('mandatory')
recfAd10AgmPortDef = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfAd10AgmPortDef.setStatus('mandatory')
recfAd10AgmPortPartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10AgmPortPartitionID.setStatus('mandatory')
recfAd10DataPortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 2), )
if mibBuilder.loadTexts: recfAd10DataPortTable.setStatus('mandatory')
recfAd10DataPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 2, 1), ).setIndexNames((0, "STMIB", "recfAd10DataPortAddr"))
if mibBuilder.loadTexts: recfAd10DataPortEntry.setStatus('mandatory')
recfAd10DataPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 2, 1, 1), Ad10PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfAd10DataPortAddr.setStatus('mandatory')
recfAd10DataPortStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10DataPortStartMode.setStatus('mandatory')
recfAd10DataPortUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loaded", 1), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfAd10DataPortUpdate.setStatus('mandatory')
recfAd10DataPortPhysSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("c", 3), ("d", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10DataPortPhysSlot.setStatus('mandatory')
recfAd10DataPortPhysPort = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10DataPortPhysPort.setStatus('mandatory')
recfAd10DataPortTDMDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 18, 36, 54, 72, 90, 108, 120, 126, 144, 180, 216, 240, 288, 360, 420, 65535))).clone(namedValues=NamedValues(("b1200", 9), ("b2400", 18), ("b4800", 36), ("b7200", 54), ("b9600", 72), ("b12000", 90), ("b14400", 108), ("b16000", 120), ("b16800", 126), ("b19200", 144), ("b24000", 180), ("b28800", 216), ("b32000", 240), ("b38400", 288), ("b48000", 360), ("b56000", 420), ("disabled", 65535))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10DataPortTDMDataRate.setStatus('mandatory')
recfAd10DataPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tdm-sync", 1), ("stat-mux-async", 2), ("bisync", 3), ("hdlc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10DataPortType.setStatus('mandatory')
recfAd10VoicePortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3), )
if mibBuilder.loadTexts: recfAd10VoicePortTable.setStatus('mandatory')
recfAd10VoicePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1), ).setIndexNames((0, "STMIB", "recfAd10VoicePortAddr"))
if mibBuilder.loadTexts: recfAd10VoicePortEntry.setStatus('mandatory')
recfAd10VoicePortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1, 1), Ad10PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfAd10VoicePortAddr.setStatus('mandatory')
recfAd10VoicePortStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10VoicePortStartMode.setStatus('mandatory')
recfAd10VoicePortUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loaded", 1), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfAd10VoicePortUpdate.setStatus('mandatory')
recfAd10VoicePortPhysSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10VoicePortPhysSlot.setStatus('mandatory')
recfAd10VoicePortPhysPort = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10VoicePortPhysPort.setStatus('mandatory')
recfAd10VoicePortDBAMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10VoicePortDBAMode.setStatus('mandatory')
recfAd10VoicePortCompressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tCelp", 1), ("atc", 2))).clone('tCelp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10VoicePortCompressMode.setStatus('mandatory')
recfAd10VoicePortFaxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("faxIIIenable-NSFenable", 1), ("faxIIIenable-NSFdisable", 2), ("faxIIIdisable-NSFdontcare", 3))).clone('faxIIIdisable-NSFdontcare')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10VoicePortFaxMode.setStatus('mandatory')
recfAd10VoicePortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(40, 54, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240, 65535))).clone(namedValues=NamedValues(("b5333", 40), ("b7200", 54), ("b7466", 56), ("b8000", 60), ("b8533", 64), ("b9066", 68), ("b9600", 72), ("b10133", 76), ("b10666", 80), ("b11200", 84), ("b11733", 88), ("b12266", 92), ("b12800", 96), ("b13333", 100), ("b13866", 104), ("b14400", 108), ("b14933", 112), ("b15466", 116), ("b16000", 120), ("b16533", 124), ("b17066", 128), ("b17600", 132), ("b18133", 136), ("b18666", 140), ("b19200", 144), ("b19733", 148), ("b20266", 152), ("b20800", 156), ("b21333", 160), ("b21866", 164), ("b22400", 168), ("b22933", 172), ("b23466", 176), ("b24000", 180), ("b24533", 184), ("b25066", 188), ("b25600", 192), ("b26133", 196), ("b26666", 200), ("b27200", 204), ("b27733", 208), ("b28266", 212), ("b28800", 216), ("b29333", 220), ("b29866", 224), ("b30400", 228), ("b30933", 232), ("b31466", 236), ("b32000", 240), ("disabled", 65535))).clone('b8000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10VoicePortSpeed.setStatus('mandatory')
recfAd10PktBandTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 4), )
if mibBuilder.loadTexts: recfAd10PktBandTable.setStatus('mandatory')
recfAd10PktBandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 4, 1), ).setIndexNames((0, "STMIB", "recfAd10PktBandAddr"))
if mibBuilder.loadTexts: recfAd10PktBandEntry.setStatus('mandatory')
recfAd10PktBandAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 4, 1, 1), Ad10PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfAd10PktBandAddr.setStatus('mandatory')
recfAd10PktBandStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10PktBandStartMode.setStatus('mandatory')
recfAd10PktBandUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loaded", 1), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfAd10PktBandUpdate.setStatus('mandatory')
recfAd10PktBandBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 10, 12, 14, 15, 16, 18, 20, 21, 24, 27, 28, 30, 32, 35, 36, 40, 42, 45, 48, 54, 56, 60, 63, 70, 72, 80, 84, 90, 96, 105, 108, 112, 120, 126, 135, 140, 144, 160, 168, 180, 189, 210, 216, 224, 240, 252, 270, 280, 288, 315, 336, 360, 378, 420, 432, 480, 504, 540, 560, 630, 672, 720, 756, 840, 864, 945, 960))).clone(namedValues=NamedValues(("b1200", 9), ("b1334", 10), ("b1600", 12), ("b1867", 14), ("b2000", 15), ("b2134", 16), ("b2400", 18), ("b2667", 20), ("b2800", 21), ("b3200", 24), ("b3600", 27), ("b3734", 28), ("b4000", 30), ("b4267", 32), ("b4667", 35), ("b4800", 36), ("b5334", 40), ("b5600", 42), ("b6000", 45), ("b6400", 48), ("b7200", 54), ("b7467", 56), ("b8000", 60), ("b8400", 63), ("b9334", 70), ("b9600", 72), ("b10667", 80), ("b11200", 84), ("b12000", 90), ("b12800", 96), ("b14000", 105), ("b14400", 108), ("b14934", 112), ("b16000", 120), ("b16800", 126), ("b18000", 135), ("b18667", 140), ("b19200", 144), ("b21334", 160), ("b22400", 168), ("b24000", 180), ("b25200", 189), ("b28000", 210), ("b28800", 216), ("b29867", 224), ("b32000", 240), ("b33600", 252), ("b36000", 270), ("b37334", 280), ("b38400", 288), ("b42000", 315), ("b44800", 336), ("b48000", 360), ("b50400", 378), ("b56000", 420), ("b57600", 432), ("b64000", 480), ("b67200", 504), ("b72000", 540), ("b74667", 560), ("b84000", 630), ("b89600", 672), ("b96000", 720), ("b100800", 756), ("b112000", 840), ("b115200", 864), ("b126000", 945), ("b128000", 960))).clone('b9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10PktBandBaudRate.setStatus('mandatory')
recfAd10PktBandDBAMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10PktBandDBAMode.setStatus('mandatory')
recfAd10TrkGrpTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5), )
if mibBuilder.loadTexts: recfAd10TrkGrpTable.setStatus('mandatory')
recfAd10TrkGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1), ).setIndexNames((0, "STMIB", "recfAd10TrkGrpAddr"))
if mibBuilder.loadTexts: recfAd10TrkGrpEntry.setStatus('mandatory')
recfAd10TrkGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfAd10TrkGrpAddr.setStatus('mandatory')
recfAd10TrkGrpStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10TrkGrpStartMode.setStatus('mandatory')
recfAd10TrkGrpAgmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1, 3), PortAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10TrkGrpAgmPort.setStatus('mandatory')
recfAd10TrkGrpLowElement = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10TrkGrpLowElement.setStatus('mandatory')
recfAd10TrkGrpHighElement = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10TrkGrpHighElement.setStatus('mandatory')
recfAd10TrkGrpRemoteNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1, 6), NodeAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10TrkGrpRemoteNodeID.setStatus('mandatory')
recfAd10TrkGrpRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1, 7), PortAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10TrkGrpRemoteAddr.setStatus('mandatory')
recfAd10TrkGrpPartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10TrkGrpPartitionID.setStatus('mandatory')
recfAd10TrkGrpSearchDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowHigh", 1), ("highLow", 2))).clone('highLow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAd10TrkGrpSearchDirection.setStatus('mandatory')
recfAsmPort = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12))
recfAsmX50Table = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1))
recfAsmX50PortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1), )
if mibBuilder.loadTexts: recfAsmX50PortTable.setStatus('mandatory')
recfAsmX50PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1), ).setIndexNames((0, "STMIB", "recfAsmX50PortAddr"))
if mibBuilder.loadTexts: recfAsmX50PortEntry.setStatus('mandatory')
recfAsmX50PortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfAsmX50PortAddr.setStatus('mandatory')
recfAsmX50PortStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmX50PortStartMode.setStatus('mandatory')
recfAsmX50PortUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loaded", 1), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfAsmX50PortUpdate.setStatus('mandatory')
recfAsmX50PortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(480))).clone(namedValues=NamedValues(("b64000", 480))).clone('b64000')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfAsmX50PortSpeed.setStatus('mandatory')
recfAsmX50PortProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 7))).clone(namedValues=NamedValues(("div2", 2), ("div3", 3), ("ad7", 7))).clone('div2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmX50PortProtocol.setStatus('mandatory')
recfAsmX50PortIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(45)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmX50PortIdlePattern.setStatus('mandatory')
recfAsmX50PortOosTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 255))).clone(namedValues=NamedValues(("sec3", 3), ("sec4", 4), ("sec5", 5), ("sec6", 6), ("sec7", 7), ("sec8", 8), ("sec9", 9), ("sec10", 10), ("sec11", 11), ("sec12", 12), ("sec13", 13), ("sec14", 14), ("sec15", 15), ("sec16", 16), ("sec17", 17), ("sec18", 18), ("sec19", 19), ("sec20", 20), ("sec21", 21), ("sec22", 22), ("sec23", 23), ("sec24", 24), ("sec25", 25), ("sec26", 26), ("sec27", 27), ("sec28", 28), ("sec29", 29), ("sec30", 30), ("disabled", 255))).clone('sec3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmX50PortOosTimer.setStatus('mandatory')
recfAsmX50PortPhasorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8, 16))).clone(namedValues=NamedValues(("p4", 4), ("p8", 8), ("p16", 16))).clone('p16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmX50PortPhasorSize.setStatus('mandatory')
recfAsmX50PortTxHouseKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmX50PortTxHouseKbits.setStatus('mandatory')
recfAsmX50PortCircuitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfAsmX50PortCircuitMap.setStatus('mandatory')
recfAsmX50PortPartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmX50PortPartitionID.setStatus('mandatory')
recfAsmX50CkTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 2), )
if mibBuilder.loadTexts: recfAsmX50CkTable.setStatus('mandatory')
recfAsmX50CkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 2, 1), ).setIndexNames((0, "STMIB", "recfAsmX50CkAddr"))
if mibBuilder.loadTexts: recfAsmX50CkEntry.setStatus('mandatory')
recfAsmX50CkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 2, 1, 1), AsmX50CkAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfAsmX50CkAddr.setStatus('mandatory')
recfAsmX50CkStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmX50CkStartMode.setStatus('mandatory')
recfAsmX50CkUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loaded", 1), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfAsmX50CkUpdate.setStatus('mandatory')
recfAsmX50CkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(18, 36, 72, 144))).clone(namedValues=NamedValues(("s2400", 18), ("s4800", 36), ("s9600", 72), ("s19200", 144))).clone('s9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmX50CkSpeed.setStatus('mandatory')
recfAsmX50CkTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(81, 83, 41, 42, 43, 44, 45, 1, 6, 11, 16, 2, 7, 12, 17, 3, 8, 13, 18, 4, 9, 14, 19, 5, 10, 15, 20))).clone(namedValues=NamedValues(("ab", 81), ("cd", 83), ("a", 41), ("b", 42), ("c", 43), ("d", 44), ("e", 45), ("a1", 1), ("a2", 6), ("a3", 11), ("a4", 16), ("b1", 2), ("b2", 7), ("b3", 12), ("b4", 17), ("c1", 3), ("c2", 8), ("c3", 13), ("c4", 18), ("d1", 4), ("d2", 9), ("d3", 14), ("d4", 19), ("e1", 5), ("e2", 10), ("e3", 15), ("e4", 20))).clone('a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmX50CkTimeSlot.setStatus('mandatory')
recfAsmX50CkPhasorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6, 8, 12, 16))).clone(namedValues=NamedValues(("p4", 4), ("p6", 6), ("p8", 8), ("p12", 12), ("p16", 16))).clone('p16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmX50CkPhasorSize.setStatus('mandatory')
recfAsmX50CkSbitConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("zero", 2))).clone('one')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmX50CkSbitConnectState.setStatus('mandatory')
recfAsmVoice = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2))
recfAsmVoiceTrkGrpTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1), )
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpTable.setStatus('mandatory')
recfAsmVoiceTrkGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1), ).setIndexNames((0, "STMIB", "recfAsmVoiceTrkGrpAddr"))
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpEntry.setStatus('mandatory')
recfAsmVoiceTrkGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpAddr.setStatus('mandatory')
recfAsmVoiceTrkGrpStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpStartMode.setStatus('mandatory')
recfAsmVoiceTrkGrpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 3), PortAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpPort.setStatus('mandatory')
recfAsmVoiceTrkGrpLowElement = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpLowElement.setStatus('mandatory')
recfAsmVoiceTrkGrpHighElement = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpHighElement.setStatus('mandatory')
recfAsmVoiceTrkGrpRemoteNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 6), NodeAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpRemoteNodeID.setStatus('mandatory')
recfAsmVoiceTrkGrpRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 7), PortAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpRemoteAddr.setStatus('mandatory')
recfAsmVoiceTrkGrpPartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpPartitionID.setStatus('mandatory')
recfAsmVoiceTrkGrpCompressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tCelp", 1), ("atc", 2), ("adpcm", 3))).clone('tCelp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpCompressMode.setStatus('mandatory')
recfAsmVoiceTrkGrpSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(40, 54, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 238, 240, 270))).clone(namedValues=NamedValues(("b5333", 40), ("b7200", 54), ("b7466", 56), ("b8000", 60), ("b8533", 64), ("b9066", 68), ("b9600", 72), ("b10133", 76), ("b10666", 80), ("b11200", 84), ("b11733", 88), ("b12266", 92), ("b12800", 96), ("b13333", 100), ("b13866", 104), ("b14400", 108), ("b14933", 112), ("b15466", 116), ("b16000", 120), ("b16533", 124), ("b17066", 128), ("b17600", 132), ("b18133", 136), ("b18666", 140), ("b19200", 144), ("b19733", 148), ("b20266", 152), ("b20800", 156), ("b21333", 160), ("b21866", 164), ("b22400", 168), ("b22933", 172), ("b23466", 176), ("b24000", 180), ("b24533", 184), ("b25066", 188), ("b25600", 192), ("b26133", 196), ("b26666", 200), ("b27200", 204), ("b27733", 208), ("b28266", 212), ("b28800", 216), ("b29333", 220), ("b29866", 224), ("b30400", 228), ("b30933", 232), ("b31466", 236), ("b31733", 238), ("b32000", 240), ("b36000", 270))).clone('b8000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpSpeed.setStatus('mandatory')
recfAsmVoiceTrkGrpSignalingType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("a", 2), ("ab", 3), ("abcd", 4), ("ac15-dtmf", 8), ("ac15-dp", 9))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpSignalingType.setStatus('mandatory')
recfAsmVoiceTrkGrpDTMFRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpDTMFRelay.setStatus('mandatory')
recfAsmVoiceTrkGrpFaxRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpFaxRelay.setStatus('mandatory')
recfAsmVoiceTrkGrpFaxNSFMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpFaxNSFMode.setStatus('mandatory')
recfAsmVoiceTrkGrpTxAudSrcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("silence", 2), ("toneDMW", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpTxAudSrcMode.setStatus('mandatory')
recfAsmVoiceTrkGrpRxAudOutMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("silence", 2), ("toneDMW", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpRxAudOutMode.setStatus('mandatory')
recfAsmVoiceTrkGrpEchoCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpEchoCancel.setStatus('mandatory')
recfAsmVoiceTrkGrpNonLinear = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpNonLinear.setStatus('mandatory')
recfAsmVoiceTrkGrpDataMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpDataMode.setStatus('mandatory')
recfAsmVoiceTrkGrpTxPCMGain = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)).clone(166)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpTxPCMGain.setStatus('mandatory')
recfAsmVoiceTrkGrpRxPCMGain = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)).clone(166)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpRxPCMGain.setStatus('mandatory')
recfAsmVoiceTrkGrpVocoderEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("disable", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpVocoderEnable.setStatus('mandatory')
recfAsmVoiceTrkGrpSigIdlePttrn = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15))).clone(namedValues=NamedValues(("a0-b0-c0-d0", 16), ("a0-b0-c0-d1", 8), ("a0-b0-c1-d0", 4), ("a0-b0-c1-d1", 12), ("a0-b1-c0-d0", 2), ("a0-b1-c0-d1", 10), ("a0-b1-c1-d0", 6), ("a0-b1-c1-d1", 14), ("a1-b0-c0-d0", 1), ("a1-b0-c0-d1", 9), ("a1-b0-c1-d0", 5), ("a1-b0-c1-d1", 13), ("a1-b1-c0-d0", 3), ("a1-b1-c0-d1", 11), ("a1-b1-c1-d0", 7), ("a1-b1-c1-d1", 15))).clone('a0-b0-c0-d0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpSigIdlePttrn.setStatus('mandatory')
recfAsmVoiceTrkGrpPCMPhasorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 255)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpPCMPhasorSize.setStatus('mandatory')
recfAsmVoiceTrkGrpSubratePhSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 100)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpSubratePhSize.setStatus('mandatory')
recfAsmVoiceTrkGrpLocalSigConf = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("fxs-ard", 2), ("fxo", 3), ("fxs-or-em", 4))).clone('fxs-ard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpLocalSigConf.setStatus('mandatory')
recfAsmVoiceTrkGrpRemoteSigConf = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ad10Fxs", 2), ("ad10Fxo", 3), ("ad10Em", 4))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpRemoteSigConf.setStatus('mandatory')
recfAsmVoiceTrkGrpRmtSigPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15))).clone(namedValues=NamedValues(("a0-b0-c0-d0", 16), ("a0-b0-c0-d1", 8), ("a0-b0-c1-d0", 4), ("a0-b0-c1-d1", 12), ("a0-b1-c0-d0", 2), ("a0-b1-c0-d1", 10), ("a0-b1-c1-d0", 6), ("a0-b1-c1-d1", 14), ("a1-b0-c0-d0", 1), ("a1-b0-c0-d1", 9), ("a1-b0-c1-d0", 5), ("a1-b0-c1-d1", 13), ("a1-b1-c0-d0", 3), ("a1-b1-c0-d1", 11), ("a1-b1-c1-d0", 7), ("a1-b1-c1-d1", 15))).clone('a0-b0-c0-d0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpRmtSigPattern.setStatus('mandatory')
recfAsmVoiceTrkGrpCelpNetSigMd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("st", 2), ("link", 3))).clone('st')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpCelpNetSigMd.setStatus('mandatory')
recfAsmVoiceTrkGrpSearchDir = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowHigh", 1), ("highLow", 2))).clone('highLow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfAsmVoiceTrkGrpSearchDir.setStatus('mandatory')
recfRtmPort = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13))
recfRtmPortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 1), )
if mibBuilder.loadTexts: recfRtmPortTable.setStatus('mandatory')
recfRtmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 1, 1), ).setIndexNames((0, "STMIB", "recfRtmPortAddr"))
if mibBuilder.loadTexts: recfRtmPortEntry.setStatus('mandatory')
recfRtmPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 1, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfRtmPortAddr.setStatus('mandatory')
recfRtmPortStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfRtmPortStartMode.setStatus('mandatory')
recfRtmPortUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loaded", 1), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfRtmPortUpdate.setStatus('mandatory')
recfRtmPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("null", 1), ("ad3", 2), ("ad7", 3))).clone('null')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfRtmPortType.setStatus('mandatory')
recfRtmPortPartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfRtmPortPartitionID.setStatus('mandatory')
recfRtmAdPortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 2), )
if mibBuilder.loadTexts: recfRtmAdPortTable.setStatus('mandatory')
recfRtmAdPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 2, 1), ).setIndexNames((0, "STMIB", "recfRtmAdPortAddr"))
if mibBuilder.loadTexts: recfRtmAdPortEntry.setStatus('mandatory')
recfRtmAdPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 2, 1, 1), RtmAdPortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfRtmAdPortAddr.setStatus('mandatory')
recfRtmAdPortStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfRtmAdPortStartMode.setStatus('mandatory')
recfRtmAdPortUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loaded", 1), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfRtmAdPortUpdate.setStatus('mandatory')
recfRtmAdPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 9, 18, 36, 60, 72, 108, 144, 240, 288, 360, 420, 480, 960))).clone(namedValues=NamedValues(("s150", 2), ("s300", 3), ("s1200", 9), ("s2400", 18), ("s4800", 36), ("s8000", 60), ("s9600", 72), ("s14400", 108), ("s19200", 144), ("s32000", 240), ("s38400", 288), ("s48000", 360), ("s56000", 420), ("s64000", 480), ("s128000", 960))).clone('s64000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfRtmAdPortSpeed.setStatus('mandatory')
recfRtmAdPortDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b7", 1), ("b8", 2))).clone('b8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfRtmAdPortDataBits.setStatus('mandatory')
recfRtmAdPortCommMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sync", 1), ("async", 2))).clone('sync')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfRtmAdPortCommMode.setStatus('mandatory')
recfRtmAdPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("null", 1), ("io", 2), ("bandContent", 3))).clone('null')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfRtmAdPortType.setStatus('mandatory')
recfLgmPort = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14))
recfLgmPortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1), )
if mibBuilder.loadTexts: recfLgmPortTable.setStatus('mandatory')
recfLgmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1), ).setIndexNames((0, "STMIB", "recfLgmPortAddr"))
if mibBuilder.loadTexts: recfLgmPortEntry.setStatus('mandatory')
recfLgmPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfLgmPortAddr.setStatus('mandatory')
recfLgmPortStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfLgmPortStartMode.setStatus('mandatory')
recfLgmPortUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("updateReq", 2), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfLgmPortUpdate.setStatus('mandatory')
recfLgmPortArq = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("s3200", 1), ("s6400", 2), ("s9600", 3))).clone('s9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfLgmPortArq.setStatus('mandatory')
recfLgmPortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="7f")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfLgmPortGroup.setStatus('mandatory')
recfLgmPortEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("encrypted", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfLgmPortEncryption.setStatus('mandatory')
recfLgmPortSatelliteHop = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfLgmPortSatelliteHop.setStatus('mandatory')
recfLgmPortSyncChar = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8))).clone(namedValues=NamedValues(("syncChar4", 4), ("syncChar8", 8))).clone('syncChar4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfLgmPortSyncChar.setStatus('mandatory')
recfLgmPortSyncLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2))).clone('level1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfLgmPortSyncLevel.setStatus('mandatory')
recfLgmPortOosTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfLgmPortOosTimer.setStatus('mandatory')
recfLgmPortPartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfLgmPortPartitionID.setStatus('mandatory')
recfLgmPortBitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b7Bit", 1), ("b8Bit", 2))).clone('b8Bit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfLgmPortBitMode.setStatus('mandatory')
recfLgmPortInbandSuperrate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nack", 1), ("forceActive", 2), ("pass", 3))).clone('forceActive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfLgmPortInbandSuperrate.setStatus('mandatory')
recfLgmPortInbandSubrate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("nack", 1), ("pass", 3))).clone('pass')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfLgmPortInbandSubrate.setStatus('mandatory')
recfLgmPortOutbandSuperrate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nack", 1), ("forceActive", 2), ("pass", 3))).clone('forceActive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfLgmPortOutbandSuperrate.setStatus('mandatory')
recfLgmPortOutbandSubrate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("nack", 1), ("pass", 3))).clone('pass')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfLgmPortOutbandSubrate.setStatus('mandatory')
recfDsmPort = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15))
recfDsmIDCPortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 1), )
if mibBuilder.loadTexts: recfDsmIDCPortTable.setStatus('mandatory')
recfDsmIDCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 1, 1), ).setIndexNames((0, "STMIB", "recfDsmIDCPortAddr"))
if mibBuilder.loadTexts: recfDsmIDCPortEntry.setStatus('mandatory')
recfDsmIDCPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 1, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfDsmIDCPortAddr.setStatus('mandatory')
recfDsmDChPort = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2))
recfDsmDChPortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1), )
if mibBuilder.loadTexts: recfDsmDChPortTable.setStatus('mandatory')
recfDsmDChPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1), ).setIndexNames((0, "STMIB", "recfDsmDChPortAddr"))
if mibBuilder.loadTexts: recfDsmDChPortEntry.setStatus('mandatory')
recfDsmDChPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfDsmDChPortAddr.setStatus('mandatory')
recfDsmDChPortStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChPortStartMode.setStatus('mandatory')
recfDsmDChPortUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("updateReq", 2), ("resetReq", 3))).clone('resetReq')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfDsmDChPortUpdate.setStatus('mandatory')
recfDsmDChPortPartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChPortPartitionID.setStatus('mandatory')
recfDsmDChPortPbxProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dpnss", 1), ("qsig", 2))).clone('dpnss')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChPortPbxProtocol.setStatus('mandatory')
recfDsmDChPortPbxLayer3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2))).clone('master')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChPortPbxLayer3Type.setStatus('mandatory')
recfDsmDChPortPbxLayer2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2))).clone('master')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChPortPbxLayer2Type.setStatus('mandatory')
recfDsmDChPortSharedZeroFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChPortSharedZeroFlag.setStatus('mandatory')
recfDsmDChPortEncodingType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 3))).clone(namedValues=NamedValues(("nrz", 1), ("nrzb", 2), ("nrzi-space", 4), ("nrzi-mark", 3))).clone('nrz')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChPortEncodingType.setStatus('mandatory')
recfDsmDChPortActiveLev1CDRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChPortActiveLev1CDRMode.setStatus('mandatory')
recfDsmDChPortRecordLev1CDRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChPortRecordLev1CDRMode.setStatus('mandatory')
recfDsmDChPortActiveLev2CDRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChPortActiveLev2CDRMode.setStatus('mandatory')
recfDsmDChPortRecordLev2CDRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChPortRecordLev2CDRMode.setStatus('mandatory')
recfDsmDChPortCallsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChPortCallsPerSecond.setStatus('mandatory')
recfDsmDChBChTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 2), )
if mibBuilder.loadTexts: recfDsmDChBChTable.setStatus('mandatory')
recfDsmDChBChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 2, 1), ).setIndexNames((0, "STMIB", "recfDsmDChBChAddr"), (0, "STMIB", "recfDsmDChBChBundle"))
if mibBuilder.loadTexts: recfDsmDChBChEntry.setStatus('mandatory')
recfDsmDChBChAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 2, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfDsmDChBChAddr.setStatus('mandatory')
recfDsmDChBChBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfDsmDChBChBundle.setStatus('mandatory')
recfDsmDChBChDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("outgoing", 1), ("incoming", 2), ("bidirectional", 3), ("none", 255))).clone('bidirectional')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChBChDirection.setStatus('mandatory')
recfDsmDChExchTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 3), )
if mibBuilder.loadTexts: recfDsmDChExchTable.setStatus('mandatory')
recfDsmDChExchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 3, 1), ).setIndexNames((0, "STMIB", "recfDsmDChExchDChAddr"), (0, "STMIB", "recfDsmDChExchIndex"))
if mibBuilder.loadTexts: recfDsmDChExchEntry.setStatus('mandatory')
recfDsmDChExchDChAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 3, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfDsmDChExchDChAddr.setStatus('mandatory')
recfDsmDChExchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfDsmDChExchIndex.setStatus('mandatory')
recfDsmDChExchControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("erase", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChExchControlMode.setStatus('mandatory')
recfDsmDChExchCode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChExchCode.setStatus('mandatory')
recfDsmDChQOSTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4), )
if mibBuilder.loadTexts: recfDsmDChQOSTable.setStatus('mandatory')
recfDsmDChQOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1), ).setIndexNames((0, "STMIB", "recfDsmDChQOSDChAddr"), (0, "STMIB", "recfDsmDChQOSIndex"))
if mibBuilder.loadTexts: recfDsmDChQOSEntry.setStatus('mandatory')
recfDsmDChQOSDChAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfDsmDChQOSDChAddr.setStatus('mandatory')
recfDsmDChQOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfDsmDChQOSIndex.setStatus('mandatory')
recfDsmDChQOSControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("erase", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQOSControlMode.setStatus('mandatory')
recfDsmDChQOSLowBChan = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQOSLowBChan.setStatus('mandatory')
recfDsmDChQOSHighBChan = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQOSHighBChan.setStatus('mandatory')
recfDsmDChQOSLowExchCode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQOSLowExchCode.setStatus('mandatory')
recfDsmDChQOSHighExchCode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQOSHighExchCode.setStatus('mandatory')
recfDsmDChQOSCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voice", 1), ("data", 2))).clone('voice')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQOSCallType.setStatus('mandatory')
recfDsmDChQOSChPrfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQOSChPrfIndex.setStatus('mandatory')
recfDsmDChQOSSpecialPrfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQOSSpecialPrfIndex.setStatus('mandatory')
recfDsmDChDPNSSTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 5), )
if mibBuilder.loadTexts: recfDsmDChDPNSSTable.setStatus('mandatory')
recfDsmDChDPNSSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 5, 1), ).setIndexNames((0, "STMIB", "recfDsmDChDPNSSAddr"))
if mibBuilder.loadTexts: recfDsmDChDPNSSEntry.setStatus('mandatory')
recfDsmDChDPNSSAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 5, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfDsmDChDPNSSAddr.setStatus('mandatory')
recfDsmDChDPNSSNL = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChDPNSSNL.setStatus('mandatory')
recfDsmDChDPNSSNT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChDPNSSNT1.setStatus('mandatory')
recfDsmDChDPNSSNT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChDPNSSNT2.setStatus('mandatory')
recfDsmDChDPNSSUnrecMsgIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChDPNSSUnrecMsgIdle.setStatus('mandatory')
recfDsmDChDPNSSInterDgtTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChDPNSSInterDgtTmr.setStatus('mandatory')
recfDsmDChQSigTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6), )
if mibBuilder.loadTexts: recfDsmDChQSigTable.setStatus('mandatory')
recfDsmDChQSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1), ).setIndexNames((0, "STMIB", "recfDsmDChQSigAddr"))
if mibBuilder.loadTexts: recfDsmDChQSigEntry.setStatus('mandatory')
recfDsmDChQSigAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfDsmDChQSigAddr.setStatus('mandatory')
recfDsmDChQSigK = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQSigK.setStatus('mandatory')
recfDsmDChQSigN200 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQSigN200.setStatus('mandatory')
recfDsmDChQSigT200 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQSigT200.setStatus('mandatory')
recfDsmDChQSigT203 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQSigT203.setStatus('mandatory')
recfDsmDChQSigT302 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQSigT302.setStatus('mandatory')
recfDsmDChQSigT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQSigT303.setStatus('mandatory')
recfDsmDChQSigT304 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQSigT304.setStatus('mandatory')
recfDsmDChQSigT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQSigT305.setStatus('mandatory')
recfDsmDChQSigT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQSigT308.setStatus('mandatory')
recfDsmDChQSigT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQSigT309.setStatus('mandatory')
recfDsmDChQSigT314 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQSigT314.setStatus('mandatory')
recfDsmDChQSigT316 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQSigT316.setStatus('mandatory')
recfDsmDChQSigT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfDsmDChQSigT322.setStatus('mandatory')
recfTranslation = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 16))
recfLink2TraTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 16, 1), )
if mibBuilder.loadTexts: recfLink2TraTable.setStatus('mandatory')
recfLink2TraEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 16, 1, 1), ).setIndexNames((0, "STMIB", "recfLink2TraIndex"))
if mibBuilder.loadTexts: recfLink2TraEntry.setStatus('mandatory')
recfLink2TraIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 16, 1, 1, 1), Link2Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfLink2TraIndex.setStatus('mandatory')
recfLink2TraStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic", 1), ("off", 2), ("erase", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfLink2TraStartMode.setStatus('mandatory')
recfLink2TraStAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 16, 1, 1, 3), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfLink2TraStAddr.setStatus('mandatory')
recfLink2TraL2Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 16, 1, 1, 4), Link2Addr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfLink2TraL2Addr.setStatus('mandatory')
recfLink2TraFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("inBand", 2), ("outBand", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfLink2TraFunctions.setStatus('mandatory')
recfLink2TraPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfLink2TraPartition.setStatus('mandatory')
recfHwRsc = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 17))
recfHwRscEngineTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 17, 1), )
if mibBuilder.loadTexts: recfHwRscEngineTable.setStatus('mandatory')
recfHwRscEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 17, 1, 1), ).setIndexNames((0, "STMIB", "recfHwRscEngineModuleAddr"), (0, "STMIB", "recfHwRscEngineID"))
if mibBuilder.loadTexts: recfHwRscEngineEntry.setStatus('mandatory')
recfHwRscEngineModuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 17, 1, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfHwRscEngineModuleAddr.setStatus('mandatory')
recfHwRscEngineID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfHwRscEngineID.setStatus('mandatory')
recfHwRscEngineStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("offline", 2))).clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfHwRscEngineStartMode.setStatus('mandatory')
recfHwRscEngineUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loaded", 1), ("resetRequired", 3))).clone('resetRequired')).setMaxAccess("readonly")
if mibBuilder.loadTexts: recfHwRscEngineUpdate.setStatus('mandatory')
recfHwRscEngineApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 17, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("x50", 1), ("celp-atc", 2), ("adpcm", 3), ("link", 4), ("any", 255))).clone('any')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfHwRscEngineApplication.setStatus('mandatory')
recfHwRscEnginePartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recfHwRscEnginePartitionID.setStatus('mandatory')
restNode = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1))
restNodeEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1))
restNodeDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 11, 12, 13, 17, 18, 108, 109, 122, 123))).clone(namedValues=NamedValues(("updateNest", 7), ("updateClockTable", 10), ("selectClock1", 21), ("selectClock2", 22), ("selectClock3", 23), ("selectClock4", 24), ("selectClock5", 25), ("selectClock6", 26), ("selectClock7", 27), ("selectClock8", 28), ("enableTestGenLocal", 11), ("enableTestGenRemote", 12), ("disableTestGen", 13), ("turnOnMajorAlarmRly", 17), ("turnOffMajorAlarmRly", 18), ("turnOnMinorAlarmRly", 108), ("turnOffMinorAlarmRly", 109), ("clearNcpBgDiagResults", 122), ("clearNcpStartupDiagResults", 123)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restNodeDiagnostics.setStatus('mandatory')
restNodeStatus = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(49, 48, 43))).clone(namedValues=NamedValues(("initializing", 49), ("online", 48), ("fail", 43)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeStatus.setStatus('mandatory')
restNodeCondition = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(57, 52))).clone(namedValues=NamedValues(("normal", 57), ("exception", 52)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeCondition.setStatus('mandatory')
restNodeSWRevision = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeSWRevision.setStatus('mandatory')
restNodeMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeMIBRevision.setStatus('mandatory')
restNodeUpTime = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeUpTime.setStatus('mandatory')
restNodeErrorMinutes = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeErrorMinutes.setStatus('mandatory')
restNodeNumOfNest = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeNumOfNest.setStatus('mandatory')
restNodePktBandBWAvail = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodePktBandBWAvail.setStatus('mandatory')
restNodePktBandBWMax = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodePktBandBWMax.setStatus('mandatory')
restNodeMasterClockPriority = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("master1", 1), ("master2", 2), ("master3", 3), ("master4", 4), ("master5", 5), ("master6", 6), ("master7", 7), ("master8", 8), ("master9", 9), ("master10", 10), ("master11", 11), ("master12", 12), ("master13", 13), ("master14", 14), ("master15", 15), ("master16", 16), ("slave", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeMasterClockPriority.setStatus('mandatory')
restNodeMasterClockMsg = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("asertingMasterMode", 1), ("defaultInternal", 2), ("unavailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeMasterClockMsg.setStatus('mandatory')
restNodeClockTableIndex = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeClockTableIndex.setStatus('mandatory')
restNodeClockStatus = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 9, 15, 11, 14, 16, 17))).clone(namedValues=NamedValues(("locked", 3), ("lockedStable", 4), ("locking", 5), ("relocking", 9), ("slaveHoldover", 15), ("waitInternal", 11), ("hardwareCheck", 14), ("startup", 16), ("defaultIntOsc", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeClockStatus.setStatus('mandatory')
restNodeClockSubStatus = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 7, 8, 10, 12, 13, 255))).clone(namedValues=NamedValues(("checkQualifier", 1), ("delayFallback", 2), ("preQualifyClock", 6), ("qualifyInvalid", 7), ("qualifyValid", 8), ("requalifying", 10), ("waitInvalid", 12), ("waitQualify", 13), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeClockSubStatus.setStatus('mandatory')
restNodeClockSourceType = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("internal", 1), ("station1", 2), ("station2", 3), ("portRxInd", 4), ("portRxDep", 5), ("portTx", 6), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeClockSourceType.setStatus('mandatory')
restNodeClockSourcePort = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 17), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeClockSourcePort.setStatus('mandatory')
restNodeClockSourcePriority = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeClockSourcePriority.setStatus('mandatory')
restNodeClockSourceQuality = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("high", 1), ("low", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeClockSourceQuality.setStatus('mandatory')
restNodeClockQualifierStatus = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(57, 58))).clone(namedValues=NamedValues(("good", 57), ("error", 58)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeClockQualifierStatus.setStatus('mandatory')
restNodeTestGenStatus = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(36, 57, 58))).clone(namedValues=NamedValues(("idle", 36), ("good", 57), ("error", 58)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeTestGenStatus.setStatus('mandatory')
restNodeTestGenType = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("remote", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeTestGenType.setStatus('mandatory')
restNodeTestGenTDMChannel = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 23), ChannelAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restNodeTestGenTDMChannel.setStatus('mandatory')
restNodeAlarmRelayStatus = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeAlarmRelayStatus.setStatus('mandatory')
restNodeAlarmRelaySubStatus = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(48, 106, 40, 107))).clone(namedValues=NamedValues(("onOn", 48), ("onOff", 106), ("offOn", 40), ("offOff", 107)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeAlarmRelaySubStatus.setStatus('mandatory')
restNodeCpiStatus = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("inSession", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeCpiStatus.setStatus('mandatory')
restNodeModemStatus = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("inCpsSession", 2), ("inEmsSession", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeModemStatus.setStatus('mandatory')
restNodeSoftloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(36, 66, 124, 128, 131, 65, 45, 80, 81, 82, 83, 84, 85, 67, 101, 102, 103, 104, 105, 126, 127, 129, 130, 43))).clone(namedValues=NamedValues(("idle", 36), ("softloading", 66), ("copyToStandbyNcp", 124), ("copyToModule", 128), ("copyToOnline", 131), ("success", 65), ("notMatchModuleType", 45), ("unknownModuleType", 80), ("outOfFlash", 81), ("flashWriteError", 82), ("crcError", 83), ("comError", 84), ("invalidNodeID", 85), ("fileNameNotExist", 67), ("cannotComWithServer", 101), ("invalidIPaddress", 102), ("invalidFileNameExt", 103), ("cannotComWithStandby", 104), ("standbyCrcError", 105), ("maxSessionsInProgress", 126), ("loadingInProgress", 127), ("destSlotBusy", 129), ("invalidDestSlot", 130), ("miscFailure", 43)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeSoftloadStatus.setStatus('mandatory')
restNodeSoftloadTotal = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeSoftloadTotal.setStatus('mandatory')
restNodeSoftloadSize = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeSoftloadSize.setStatus('mandatory')
restNodeSoftloadSoftwareType = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8, 9, 11, 12, 14, 19, 20, 128, 254, 252, 255, 251, 253, 256))).clone(namedValues=NamedValues(("ncp", 1), ("t1m", 5), ("e1m", 6), ("sgm", 7), ("lgm", 8), ("asm", 9), ("fsm", 11), ("sdm", 12), ("rtm", 14), ("dsm", 19), ("e3m", 20), ("ad10", 128), ("tableOC", 254), ("mibSchema", 252), ("stDatabase", 255), ("ad10Database", 251), ("rtmAdDatabase", 253), ("notApplicable", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeSoftloadSoftwareType.setStatus('mandatory')
restNodeUploadStatus = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeUploadStatus.setStatus('mandatory')
restNodeUploadTotal = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeUploadTotal.setStatus('mandatory')
restNodeUploadSize = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeUploadSize.setStatus('mandatory')
restNodeUploadClientID = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeUploadClientID.setStatus('mandatory')
restNodeTotalDsmCallsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNodeTotalDsmCallsPerSecond.setStatus('mandatory')
restNestTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2), )
if mibBuilder.loadTexts: restNestTable.setStatus('mandatory')
restNestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1), ).setIndexNames((0, "STMIB", "restNestAddr"))
if mibBuilder.loadTexts: restNestEntry.setStatus('mandatory')
restNestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 1), NestAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNestAddr.setStatus('mandatory')
restNestDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 13, 14, 15, 16, 21, 22, 23, 24))).clone(namedValues=NamedValues(("reset", 3), ("insert", 4), ("remove", 5), ("resetRightCircuit", 13), ("resetLeftCircuit", 14), ("toggleRightCircuit", 15), ("toggleLeftCircuit", 16), ("setLoopbackLxm", 21), ("setLoopbackRxm", 22), ("clearLoopbackLxm", 23), ("clearLoopbackRxm", 24)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restNestDiagnostics.setStatus('mandatory')
restNestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(49, 48, 43))).clone(namedValues=NamedValues(("initializing", 49), ("online", 48), ("failed", 43)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNestStatus.setStatus('mandatory')
restNestCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(57, 52))).clone(namedValues=NamedValues(("normal", 57), ("exception", 52)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNestCondition.setStatus('mandatory')
restNestNumberOfModules = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNestNumberOfModules.setStatus('mandatory')
restNestPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(57, 43))).clone(namedValues=NamedValues(("good", 57), ("fail", 43)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNestPowerStatus.setStatus('mandatory')
restNestFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(57, 43))).clone(namedValues=NamedValues(("good", 57), ("fail", 43)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNestFanStatus.setStatus('mandatory')
restNestTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("tooHigh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNestTemperature.setStatus('mandatory')
restNestClockReference1 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNestClockReference1.setStatus('mandatory')
restNestClockReference2 = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNestClockReference2.setStatus('mandatory')
restNestBusLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(33, 34, 2))).clone(namedValues=NamedValues(("leftEnable", 33), ("rightEnable", 34), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNestBusLoopbackStatus.setStatus('mandatory')
restNestSlotPresence = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNestSlotPresence.setStatus('mandatory')
restNestActiveRight = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("circuit1", 1), ("circuit2", 2), ("noRxm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNestActiveRight.setStatus('mandatory')
restNestActiveLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("circuit1", 1), ("circuit2", 2), ("noLxm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNestActiveLeft.setStatus('mandatory')
restNestRxmCkt1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pass", 1), ("fail", 2), ("noRxm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNestRxmCkt1Status.setStatus('mandatory')
restNestRxmCkt2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pass", 1), ("fail", 2), ("noRxm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNestRxmCkt2Status.setStatus('mandatory')
restNestLxmCkt1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pass", 1), ("fail", 2), ("noLxm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNestLxmCkt1Status.setStatus('mandatory')
restNestLxmCkt2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pass", 1), ("fail", 2), ("noLxm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNestLxmCkt2Status.setStatus('mandatory')
restSlotTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3), )
if mibBuilder.loadTexts: restSlotTable.setStatus('mandatory')
restSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1), ).setIndexNames((0, "STMIB", "restSlotAddr"))
if mibBuilder.loadTexts: restSlotEntry.setStatus('mandatory')
restSlotAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSlotAddr.setStatus('mandatory')
restSlotModuleDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 7))).clone(namedValues=NamedValues(("reset", 3), ("insert", 4), ("remove", 5), ("update", 7)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restSlotModuleDiagnostics.setStatus('mandatory')
restSlotModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(44, 47, 43, 5, 53, 54, 55))).clone(namedValues=NamedValues(("active", 44), ("standby", 47), ("fail", 43), ("removed", 5), ("busDisable", 53), ("loading", 54), ("initializing", 55)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSlotModuleStatus.setStatus('mandatory')
restSlotModuleFailureType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("module", 1), ("port", 2), ("noMib", 3), ("errorMib", 4), ("noRTS", 5), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSlotModuleFailureType.setStatus('mandatory')
restSlotModuleCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(57, 52))).clone(namedValues=NamedValues(("normal", 57), ("exception", 52)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSlotModuleCondition.setStatus('mandatory')
restSlotSWModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 19, 20))).clone(namedValues=NamedValues(("ncp", 1), ("lxm", 3), ("rxm", 4), ("t1m", 5), ("e1m", 6), ("sgm", 7), ("lgm", 8), ("asm", 9), ("fsm", 11), ("sdm", 12), ("sgmAg", 13), ("rtm", 14), ("dsm", 19), ("e3m", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSlotSWModuleType.setStatus('mandatory')
restSlotSWModuleSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSlotSWModuleSubType.setStatus('mandatory')
restSlotModuleIDFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSlotModuleIDFormat.setStatus('mandatory')
restSlotHWModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 19, 20))).clone(namedValues=NamedValues(("ncp", 1), ("lxm", 3), ("rxm", 4), ("t1m", 5), ("e1m", 6), ("sgm", 7), ("lgm", 8), ("asm", 9), ("fsm", 11), ("sdm", 12), ("rtm", 14), ("dsm", 19), ("e3m", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSlotHWModuleType.setStatus('mandatory')
restSlotHWModuleSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSlotHWModuleSubType.setStatus('mandatory')
restSlotModuleAssemblyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSlotModuleAssemblyNum.setStatus('mandatory')
restSlotModuleRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSlotModuleRevision.setStatus('mandatory')
restSlotModuleSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSlotModuleSerialNum.setStatus('mandatory')
restSlotModuleDateMade = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSlotModuleDateMade.setStatus('mandatory')
restSlotActiveRedundantSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 15), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSlotActiveRedundantSlot.setStatus('mandatory')
restSlotModuleSWRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSlotModuleSWRevision.setStatus('mandatory')
restSlotStartupDiagResults = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSlotStartupDiagResults.setStatus('mandatory')
restSlotBGDiagResults = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSlotBGDiagResults.setStatus('mandatory')
restSlotNumActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSlotNumActivePorts.setStatus('mandatory')
restSlotNumNormalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSlotNumNormalPorts.setStatus('mandatory')
restModule = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4))
restNcpTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 1), )
if mibBuilder.loadTexts: restNcpTable.setStatus('mandatory')
restNcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 1, 1), ).setIndexNames((0, "STMIB", "restNcpAddr"))
if mibBuilder.loadTexts: restNcpEntry.setStatus('mandatory')
restNcpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 1, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNcpAddr.setStatus('mandatory')
restNcpBootPromRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNcpBootPromRevision.setStatus('mandatory')
restNcpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNcpMacAddr.setStatus('mandatory')
restNcpFlashObjectVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNcpFlashObjectVersions.setStatus('deprecated')
restNcpFlashTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2), )
if mibBuilder.loadTexts: restNcpFlashTable.setStatus('mandatory')
restNcpFlashEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1), ).setIndexNames((0, "STMIB", "restNcpFlashAddr"), (0, "STMIB", "restNcpFlashIndex"))
if mibBuilder.loadTexts: restNcpFlashEntry.setStatus('mandatory')
restNcpFlashAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNcpFlashAddr.setStatus('mandatory')
restNcpFlashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNcpFlashIndex.setStatus('mandatory')
restNcpFlashModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8, 9, 11, 12, 14, 19, 20, 252, 254))).clone(namedValues=NamedValues(("ncp", 1), ("t1m", 5), ("e1m", 6), ("sgm", 7), ("lgm", 8), ("asm", 9), ("fsm", 11), ("sdm", 12), ("rtm", 14), ("dsm", 19), ("e3m", 20), ("mibSchema", 252), ("tableOfContents", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNcpFlashModuleType.setStatus('mandatory')
restNcpFlashRecoveryIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("recovery", 2), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNcpFlashRecoveryIndicator.setStatus('mandatory')
restNcpFlashCompressIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("compressed", 1), ("uncompressed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNcpFlashCompressIndicator.setStatus('mandatory')
restNcpFlashFileVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNcpFlashFileVersionNumber.setStatus('mandatory')
restNcpFlashFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNcpFlashFileSize.setStatus('mandatory')
restNcpFlashFileStoredCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNcpFlashFileStoredCrc.setStatus('mandatory')
restNcpFlashFileCrcCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("pass", 1), ("fail", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restNcpFlashFileCrcCheck.setStatus('mandatory')
restFsmTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6), )
if mibBuilder.loadTexts: restFsmTable.setStatus('mandatory')
restFsmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1), ).setIndexNames((0, "STMIB", "restFsmAddr"))
if mibBuilder.loadTexts: restFsmEntry.setStatus('mandatory')
restFsmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restFsmAddr.setStatus('mandatory')
restFsmBypassBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restFsmBypassBandwidth.setStatus('mandatory')
restFsmSourceBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restFsmSourceBandwidth.setStatus('mandatory')
restFsmBandwidthAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restFsmBandwidthAvail.setStatus('mandatory')
restFsmPortSpeedAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restFsmPortSpeedAvail.setStatus('mandatory')
restFsmDlciTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restFsmDlciTotal.setStatus('mandatory')
restFsmDlciAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restFsmDlciAvail.setStatus('mandatory')
restFsmDlciConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restFsmDlciConfig.setStatus('mandatory')
restFsmBypChanTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restFsmBypChanTotal.setStatus('mandatory')
restFsmBypChanAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restFsmBypChanAvail.setStatus('mandatory')
restFsmCirTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restFsmCirTotal.setStatus('mandatory')
restFsmCirAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restFsmCirAvail.setStatus('mandatory')
restFsmVciCtrlBlkTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restFsmVciCtrlBlkTotal.setStatus('mandatory')
restFsmVciCtrlBlkAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restFsmVciCtrlBlkAvail.setStatus('mandatory')
restFsmTotalBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restFsmTotalBuffers.setStatus('mandatory')
restFsmBuffersAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restFsmBuffersAvail.setStatus('mandatory')
restFsmCcfSupportIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restFsmCcfSupportIndicator.setStatus('mandatory')
restSgmAgTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7), )
if mibBuilder.loadTexts: restSgmAgTable.setStatus('mandatory')
restSgmAgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1), ).setIndexNames((0, "STMIB", "restSgmAgAddr"))
if mibBuilder.loadTexts: restSgmAgEntry.setStatus('mandatory')
restSgmAgAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSgmAgAddr.setStatus('mandatory')
restSgmAgmPortAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSgmAgmPortAvail.setStatus('mandatory')
restSgmAgmPortTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSgmAgmPortTotal.setStatus('mandatory')
restSgmAgSafAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSgmAgSafAvail.setStatus('mandatory')
restSgmAgSafTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSgmAgSafTotal.setStatus('mandatory')
restSgmAgSgmScfAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSgmAgSgmScfAvail.setStatus('mandatory')
restSgmAgSgmScfTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSgmAgSgmScfTotal.setStatus('mandatory')
restSgmAgAgmScfAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSgmAgAgmScfAvail.setStatus('mandatory')
restSgmAgAgmScfTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSgmAgAgmScfTotal.setStatus('mandatory')
restSgmAgAgmCcfAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSgmAgAgmCcfAvail.setStatus('mandatory')
restSgmAgAgmCcfTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSgmAgAgmCcfTotal.setStatus('mandatory')
restSgmAgAgmPortCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSgmAgAgmPortCapacity.setStatus('mandatory')
restAsm = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8))
restAsmModuleTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 1), )
if mibBuilder.loadTexts: restAsmModuleTable.setStatus('mandatory')
restAsmModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 1, 1), ).setIndexNames((0, "STMIB", "restAsmModuleAddr"))
if mibBuilder.loadTexts: restAsmModuleEntry.setStatus('mandatory')
restAsmModuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 1, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmModuleAddr.setStatus('mandatory')
restAsmModuleMaxCelp = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmModuleMaxCelp.setStatus('deprecated')
restAsmModuleNumCelpAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmModuleNumCelpAvail.setStatus('deprecated')
restAsmModuleTotalEngines = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmModuleTotalEngines.setStatus('mandatory')
restAsmModuleAvailEngines = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmModuleAvailEngines.setStatus('mandatory')
restAsmModuleTotalSafScfs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 448))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmModuleTotalSafScfs.setStatus('mandatory')
restAsmModuleAvailSafScfs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 448))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmModuleAvailSafScfs.setStatus('mandatory')
restAsmEngineTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2), )
if mibBuilder.loadTexts: restAsmEngineTable.setStatus('deprecated')
restAsmEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2, 1), ).setIndexNames((0, "STMIB", "restAsmEngineModuleAddr"), (0, "STMIB", "restAsmEngineID"))
if mibBuilder.loadTexts: restAsmEngineEntry.setStatus('deprecated')
restAsmEngineModuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmEngineModuleAddr.setStatus('deprecated')
restAsmEngineID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmEngineID.setStatus('deprecated')
restAsmEngineDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6))).clone(namedValues=NamedValues(("insert", 4), ("remove", 5), ("reset", 6))))
if mibBuilder.loadTexts: restAsmEngineDiagnostics.setStatus('deprecated')
restAsmEngineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 43))).clone(namedValues=NamedValues(("x50", 1), ("celp", 2), ("adpcm", 3), ("free", 4), ("removed", 5), ("normal", 6), ("failed", 43)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmEngineStatus.setStatus('deprecated')
restAsmEngineNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmEngineNumPorts.setStatus('deprecated')
restAsmEngineNumSAFs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmEngineNumSAFs.setStatus('deprecated')
restAsmEngineNumSCFs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmEngineNumSCFs.setStatus('deprecated')
restAsmEngineApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("x50", 1), ("celp-atc", 2), ("adpcm", 3), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmEngineApplication.setStatus('deprecated')
restAsmModApplTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3), )
if mibBuilder.loadTexts: restAsmModApplTable.setStatus('mandatory')
restAsmModApplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1), ).setIndexNames((0, "STMIB", "restAsmModApplModuleAddr"), (0, "STMIB", "restAsmModApplType"))
if mibBuilder.loadTexts: restAsmModApplEntry.setStatus('mandatory')
restAsmModApplModuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmModApplModuleAddr.setStatus('mandatory')
restAsmModApplType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("x50", 1), ("celp-atc", 2), ("adpcm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmModApplType.setStatus('mandatory')
restAsmModApplMaxPortsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmModApplMaxPortsAllowed.setStatus('mandatory')
restAsmModApplCurPortsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmModApplCurPortsAllowed.setStatus('mandatory')
restAsmModApplCurPortsAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmModApplCurPortsAllocated.setStatus('mandatory')
restAsmModApplEnginesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmModApplEnginesUsed.setStatus('mandatory')
restAsmModApplEnginesRsvd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmModApplEnginesRsvd.setStatus('mandatory')
restAsmModApplTotalLicenses = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmModApplTotalLicenses.setStatus('mandatory')
restAsmModApplAvailLicenses = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmModApplAvailLicenses.setStatus('mandatory')
restRtm = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 9))
restRtmModuleTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 9, 1), )
if mibBuilder.loadTexts: restRtmModuleTable.setStatus('mandatory')
restRtmModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 9, 1, 1), ).setIndexNames((0, "STMIB", "restRtmModuleAddr"))
if mibBuilder.loadTexts: restRtmModuleEntry.setStatus('mandatory')
restRtmModuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 9, 1, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmModuleAddr.setStatus('mandatory')
restRtmModuleDS0sUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmModuleDS0sUsed.setStatus('mandatory')
restRtmModuleDS0sAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmModuleDS0sAvail.setStatus('mandatory')
restRtmModuleSafsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmModuleSafsUsed.setStatus('mandatory')
restRtmModuleSafsAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmModuleSafsAvail.setStatus('mandatory')
restDsmModule = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10))
restDsmModuleTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1), )
if mibBuilder.loadTexts: restDsmModuleTable.setStatus('mandatory')
restDsmModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1), ).setIndexNames((0, "STMIB", "restDsmModuleAddr"))
if mibBuilder.loadTexts: restDsmModuleEntry.setStatus('mandatory')
restDsmModuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleAddr.setStatus('mandatory')
restDsmModuleNumDsmComms = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleNumDsmComms.setStatus('mandatory')
restDsmModuleNumCallsProc = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleNumCallsProc.setStatus('mandatory')
restDsmModuleNumRmtRteEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleNumRmtRteEntries.setStatus('mandatory')
restDsmModuleNumRmtRteAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleNumRmtRteAvail.setStatus('mandatory')
restDsmModuleNumLocRteEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleNumLocRteEntries.setStatus('mandatory')
restDsmModuleNumLocRteAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleNumLocRteAvail.setStatus('mandatory')
restDsmModuleBypassPPSTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleBypassPPSTotal.setStatus('mandatory')
restDsmModuleBypassPPSAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleBypassPPSAvail.setStatus('mandatory')
restDsmModuleBypChanTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleBypChanTotal.setStatus('mandatory')
restDsmModuleBypChanAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleBypChanAvail.setStatus('mandatory')
restDsmModuleCirTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleCirTotal.setStatus('mandatory')
restDsmModuleCirAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleCirAvail.setStatus('mandatory')
restDsmModuleVciCtrlBlkTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleVciCtrlBlkTotal.setStatus('mandatory')
restDsmModuleVciCtrlBlkAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleVciCtrlBlkAvail.setStatus('mandatory')
restDsmModuleTotalBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleTotalBuffers.setStatus('mandatory')
restDsmModuleBuffersAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleBuffersAvail.setStatus('mandatory')
restDsmModuleTotalRecCDRs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleTotalRecCDRs.setStatus('mandatory')
restDsmModuleRecCDRsAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleRecCDRsAvail.setStatus('mandatory')
restDsmModuleTotalCallsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleTotalCallsPerSec.setStatus('mandatory')
restDsmModuleCallsPerSecAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleCallsPerSecAvail.setStatus('mandatory')
restDsmModuleCallsPerSecFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleCallsPerSecFactor.setStatus('mandatory')
restDsmModuleBypassFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleBypassFactor.setStatus('mandatory')
restDsmModuleTotalProcessUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleTotalProcessUnits.setStatus('mandatory')
restDsmModuleProcessUnitsAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModuleProcessUnitsAvail.setStatus('mandatory')
restDsmModRecCDRLogTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 2), )
if mibBuilder.loadTexts: restDsmModRecCDRLogTable.setStatus('mandatory')
restDsmModRecCDRLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 2, 1), ).setIndexNames((0, "STMIB", "restDsmModRecCDRLogAddr"), (0, "STMIB", "restDsmModRecCDRLogIndex"))
if mibBuilder.loadTexts: restDsmModRecCDRLogEntry.setStatus('mandatory')
restDsmModRecCDRLogAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 2, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModRecCDRLogAddr.setStatus('mandatory')
restDsmModRecCDRLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModRecCDRLogIndex.setStatus('mandatory')
restDsmModRecCDRLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 2))).clone(namedValues=NamedValues(("overflow", 3), ("noOverflow", 4), ("overThreshold", 5), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModRecCDRLogStatus.setStatus('mandatory')
restDsmModRecCDRLogLev1Entries = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModRecCDRLogLev1Entries.setStatus('mandatory')
restDsmModRecCDRLogLev2Entries = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModRecCDRLogLev2Entries.setStatus('mandatory')
restDsmModRecCDRLogClrEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restDsmModRecCDRLogClrEntries.setStatus('mandatory')
restDsmModRecCDRTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 3), )
if mibBuilder.loadTexts: restDsmModRecCDRTable.setStatus('mandatory')
restDsmModRecCDREntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 3, 1), ).setIndexNames((0, "STMIB", "restDsmModRecCDRAddr"), (0, "STMIB", "restDsmModRecCDRLogNum"), (0, "STMIB", "restDsmModRecCDRIndex"))
if mibBuilder.loadTexts: restDsmModRecCDREntry.setStatus('mandatory')
restDsmModRecCDRAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 3, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModRecCDRAddr.setStatus('mandatory')
restDsmModRecCDRLogNum = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModRecCDRLogNum.setStatus('mandatory')
restDsmModRecCDRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModRecCDRIndex.setStatus('mandatory')
restDsmModRecCDRContents = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(72, 72)).setFixedLength(72)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModRecCDRContents.setStatus('mandatory')
restDsmModExchTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 4), )
if mibBuilder.loadTexts: restDsmModExchTable.setStatus('mandatory')
restDsmModExchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 4, 1), ).setIndexNames((0, "STMIB", "restDsmModExchAddr"), (0, "STMIB", "restDsmModExchCallNumLen"), (0, "STMIB", "restDsmModExchCallNumber"), (0, "STMIB", "restDsmModExchPartition"))
if mibBuilder.loadTexts: restDsmModExchEntry.setStatus('mandatory')
restDsmModExchAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 4, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModExchAddr.setStatus('mandatory')
restDsmModExchCallNumLen = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModExchCallNumLen.setStatus('mandatory')
restDsmModExchCallNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModExchCallNumber.setStatus('mandatory')
restDsmModExchPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModExchPartition.setStatus('mandatory')
restDsmModExchCode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModExchCode.setStatus('mandatory')
restDsmModRteTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5), )
if mibBuilder.loadTexts: restDsmModRteTable.setStatus('mandatory')
restDsmModRteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5, 1), ).setIndexNames((0, "STMIB", "restDsmModRteAddr"), (0, "STMIB", "restDsmModRteExchCodeLen"), (0, "STMIB", "restDsmModRteExchCode"), (0, "STMIB", "restDsmModRtePartition"), (0, "STMIB", "restDsmModRteRemoteNode"), (0, "STMIB", "restDsmModRteRemoteSlot"), (0, "STMIB", "restDsmModRteLocalPortNumber"))
if mibBuilder.loadTexts: restDsmModRteEntry.setStatus('mandatory')
restDsmModRteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModRteAddr.setStatus('mandatory')
restDsmModRteExchCodeLen = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModRteExchCodeLen.setStatus('mandatory')
restDsmModRteExchCode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModRteExchCode.setStatus('mandatory')
restDsmModRtePartition = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModRtePartition.setStatus('mandatory')
restDsmModRteRemoteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5, 1, 5), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModRteRemoteNode.setStatus('mandatory')
restDsmModRteRemoteSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5, 1, 6), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModRteRemoteSlot.setStatus('mandatory')
restDsmModRteLocalPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModRteLocalPortNumber.setStatus('mandatory')
restDsmModRteLocalPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5, 1, 8), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmModRteLocalPortAddress.setStatus('mandatory')
restLgmModule = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 11))
restLgmModuleTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 11, 1), )
if mibBuilder.loadTexts: restLgmModuleTable.setStatus('mandatory')
restLgmModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 11, 1, 1), ).setIndexNames((0, "STMIB", "restLgmModuleAddr"))
if mibBuilder.loadTexts: restLgmModuleEntry.setStatus('mandatory')
restLgmModuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 11, 1, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmModuleAddr.setStatus('mandatory')
restLgmModuleTotalSAFs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmModuleTotalSAFs.setStatus('mandatory')
restLgmModuleAvailSAFs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmModuleAvailSAFs.setStatus('mandatory')
restLgmModuleTotalSCFs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmModuleTotalSCFs.setStatus('mandatory')
restLgmModuleAvailSCFs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 11, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmModuleAvailSCFs.setStatus('mandatory')
restPortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5), )
if mibBuilder.loadTexts: restPortTable.setStatus('mandatory')
restPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1), ).setIndexNames((0, "STMIB", "restPortAddr"))
if mibBuilder.loadTexts: restPortEntry.setStatus('mandatory')
restPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortAddr.setStatus('mandatory')
restPortDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 4, 5, 7, 9, 8, 10))).clone(namedValues=NamedValues(("reset", 6), ("insert", 4), ("remove", 5), ("update", 7), ("setLoopback", 9), ("clearLoopback", 8), ("clearEvent", 10)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restPortDiagnostics.setStatus('mandatory')
restPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(44, 47, 51, 46, 43))).clone(namedValues=NamedValues(("active", 44), ("standby", 47), ("maintenance", 51), ("inactive", 46), ("failed", 43)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortStatus.setStatus('mandatory')
restPortSubStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 50))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("removed", 5), ("undefined", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortSubStatus.setStatus('mandatory')
restPortCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(57, 52, 50))).clone(namedValues=NamedValues(("normal", 57), ("exception", 52), ("undefined", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortCondition.setStatus('mandatory')
restPortSubCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 98, 99, 100, 29, 30, 31, 33, 39))).clone(namedValues=NamedValues(("none", 71), ("redAlarm", 72), ("yellowAlarm", 73), ("lmiFail", 74), ("clockFail", 75), ("msgTimeout", 76), ("cfgMismatch", 77), ("dnloadRmt", 78), ("stToSt", 79), ("serverLoopback", 80), ("exceedPowerSpec", 81), ("externalLoopback", 82), ("remoteEndReset", 83), ("los", 98), ("ros", 99), ("losAndRos", 100), ("berOverFailThreshold", 29), ("layer2TimeOut", 30), ("layer2Mismatch", 31), ("pending", 33), ("oos", 39)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortSubCondition.setStatus('mandatory')
restPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 11, 12, 13, 14, 19, 20))).clone(namedValues=NamedValues(("t1m", 5), ("e1m", 6), ("sgm", 7), ("lgm", 8), ("asm", 9), ("fsm", 11), ("sdm", 12), ("sgmAg", 13), ("rtm", 14), ("dsm", 19), ("e3m", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortType.setStatus('mandatory')
restPortLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("lim", 2), ("limDisc", 3), ("rim", 4), ("bidirectional", 5), ("extLim", 12), ("extRim", 13), ("extBidirectional", 14), ("extUlim", 15), ("extIdlRim", 16), ("remoteBus", 17)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restPortLoopbackType.setStatus('mandatory')
restPortLoopbackDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restPortLoopbackDuration.setStatus('mandatory')
restPortLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("none", 1), ("lim", 2), ("limDisc", 3), ("rim", 4), ("bidirectional", 5), ("facility", 8), ("payload", 9), ("localLoop", 10), ("remoteLoop", 11), ("extLim", 12), ("extRim", 13), ("extBidirectional", 14), ("extUlim", 15), ("extIdlRim", 16), ("remoteBus", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortLoopbackStatus.setStatus('mandatory')
restPortLoopbackInitiator = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortLoopbackInitiator.setStatus('mandatory')
restPortErrorIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("clear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortErrorIndication.setStatus('mandatory')
restPortSevereIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("clear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortSevereIndication.setStatus('mandatory')
restPortBGDiagResults = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortBGDiagResults.setStatus('mandatory')
restPortNumberOfBundles = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortNumberOfBundles.setStatus('mandatory')
restPortPhasorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortPhasorStatus.setStatus('mandatory')
restPortMappedPhy = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 17), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortMappedPhy.setStatus('mandatory')
restPortSdmFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortSdmFunction.setStatus('mandatory')
restPortSdmTFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortSdmTFunction.setStatus('mandatory')
restPortBundleInTone = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortBundleInTone.setStatus('mandatory')
restPortSdmSignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 255))).clone(namedValues=NamedValues(("ok", 1), ("los", 2), ("losEvent", 4), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortSdmSignalStatus.setStatus('mandatory')
restPortSdmBipolarViolationInd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("event", 1), ("noEvent", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortSdmBipolarViolationInd.setStatus('mandatory')
restPortCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPortCapabilities.setStatus('mandatory')
restBundleTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6), )
if mibBuilder.loadTexts: restBundleTable.setStatus('mandatory')
restBundleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1), ).setIndexNames((0, "STMIB", "restBundleAddr"))
if mibBuilder.loadTexts: restBundleEntry.setStatus('mandatory')
restBundleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 1), BundleAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restBundleAddr.setStatus('mandatory')
restBundleDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7))).clone(namedValues=NamedValues(("insert", 4), ("remove", 5), ("reset", 6), ("update", 7)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restBundleDiagnostics.setStatus('mandatory')
restBundleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 50))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("unknown", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restBundleStatus.setStatus('mandatory')
restBundleBwCntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 50))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("busy", 3), ("unknown", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restBundleBwCntStatus.setStatus('mandatory')
restBundleMillwattSignalABCD = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("a0-b0-c0-d0", 1), ("a0-b0-c0-d1", 2), ("a0-b0-c1-d0", 3), ("a0-b0-c1-d1", 4), ("a0-b1-c0-d0", 5), ("a0-b1-c0-d1", 6), ("a0-b1-c1-d0", 7), ("a0-b1-c1-d1", 8), ("a1-b0-c0-d0", 9), ("a1-b0-c0-d1", 10), ("a1-b0-c1-d0", 11), ("a1-b0-c1-d1", 12), ("a1-b1-c0-d0", 13), ("a1-b1-c0-d1", 14), ("a1-b1-c1-d0", 15), ("a1-b1-c1-d1", 16), ("disable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restBundleMillwattSignalABCD.setStatus('mandatory')
restBundleDS0Map = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restBundleDS0Map.setStatus('mandatory')
restBundleSignalA = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restBundleSignalA.setStatus('mandatory')
restBundleSignalB = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restBundleSignalB.setStatus('mandatory')
restBundleSignalC = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restBundleSignalC.setStatus('mandatory')
restBundleSignalD = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restBundleSignalD.setStatus('mandatory')
restBundleOutSigA = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restBundleOutSigA.setStatus('mandatory')
restBundleOutSigB = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restBundleOutSigB.setStatus('mandatory')
restBundleOutSigC = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restBundleOutSigC.setStatus('mandatory')
restBundleOutSigD = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restBundleOutSigD.setStatus('mandatory')
restINLTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7), )
if mibBuilder.loadTexts: restINLTable.setStatus('mandatory')
restINLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1), ).setIndexNames((0, "STMIB", "restINLNumber"))
if mibBuilder.loadTexts: restINLEntry.setStatus('mandatory')
restINLNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLNumber.setStatus('mandatory')
restINLAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 2), BundleAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLAddr.setStatus('mandatory')
restINLDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 79, 9, 8, 63, 64))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("insert", 4), ("remove", 5), ("reset", 6), ("update", 7), ("restart", 79), ("setLoopback", 9), ("clearLoopback", 8), ("clearINLTotalCRCErrors", 63), ("clearINLBERWindowFill", 64)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restINLDiagnostics.setStatus('mandatory')
restINLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(33, 38, 39, 51))).clone(namedValues=NamedValues(("pending", 33), ("inService", 38), ("outOfService", 39), ("maintenance", 51)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLStatus.setStatus('mandatory')
restINLSubStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLSubStatus.setStatus('mandatory')
restINLLocalBERLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLLocalBERLevel.setStatus('mandatory')
restINLLocalBERQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accepted", 1), ("unaccepted", 2), ("notCalculatedYet", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLLocalBERQuality.setStatus('mandatory')
restINLRemoteNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 8), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLRemoteNodeID.setStatus('mandatory')
restINLRemotePortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 9), BundleAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLRemotePortAddr.setStatus('mandatory')
restINLRemoteINLID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLRemoteINLID.setStatus('mandatory')
restINLRemoteBERLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLRemoteBERLevel.setStatus('mandatory')
restINLRemoteBERQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accepted", 1), ("unaccepted", 2), ("notCalculatedYet", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLRemoteBERQuality.setStatus('mandatory')
restINLAvailableTDMBw = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLAvailableTDMBw.setStatus('mandatory')
restINLAvailablePacketBw = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLAvailablePacketBw.setStatus('mandatory')
restINLLoopbackDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restINLLoopbackDuration.setStatus('mandatory')
restINLLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("originator", 2), ("terminator", 3), ("external", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLLoopbackStatus.setStatus('mandatory')
restINLTotalCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLTotalCRCErrors.setStatus('mandatory')
restINLBERWindowFill = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLBERWindowFill.setStatus('mandatory')
restINLNumTdmCh = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLNumTdmCh.setStatus('mandatory')
restINLNumFrCh = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLNumFrCh.setStatus('mandatory')
restINLSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLSpeed.setStatus('mandatory')
restINLNumSaf = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLNumSaf.setStatus('mandatory')
restINLLOSMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("localOutOfSync", 1), ("localInSync", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLLOSMode.setStatus('mandatory')
restINLBusFrameMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("addbackMode", 1), ("fallbackMode", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLBusFrameMode.setStatus('mandatory')
restINLContentsTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 8), )
if mibBuilder.loadTexts: restINLContentsTable.setStatus('mandatory')
restINLContentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 8, 1), ).setIndexNames((0, "STMIB", "restINLContentsINLNumber"), (0, "STMIB", "restINLContentsSeqNumber"))
if mibBuilder.loadTexts: restINLContentsEntry.setStatus('mandatory')
restINLContentsINLNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLContentsINLNumber.setStatus('mandatory')
restINLContentsSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLContentsSeqNumber.setStatus('mandatory')
restINLContentsSourceNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 8, 1, 3), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLContentsSourceNodeID.setStatus('mandatory')
restINLContentsSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 8, 1, 4), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLContentsSourceAddr.setStatus('mandatory')
restINLContentsDestNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 8, 1, 5), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLContentsDestNodeID.setStatus('mandatory')
restINLContentsDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 8, 1, 6), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restINLContentsDestAddr.setStatus('mandatory')
restChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9))
restChannelTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1), )
if mibBuilder.loadTexts: restChannelTable.setStatus('mandatory')
restChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1), ).setIndexNames((0, "STMIB", "restChannelStatusAddr"))
if mibBuilder.loadTexts: restChannelEntry.setStatus('mandatory')
restChannelStatusAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 1), ChannelStatusAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelStatusAddr.setStatus('mandatory')
restChannelSourceNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 2), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelSourceNodeID.setStatus('mandatory')
restChannelSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 3), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelSourceAddr.setStatus('mandatory')
restChannelDestNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 4), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelDestNodeID.setStatus('mandatory')
restChannelDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 5), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelDestAddr.setStatus('mandatory')
restChannelDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(35, 36, 6, 9, 8))).clone(namedValues=NamedValues(("connect", 35), ("disconnect", 36), ("reset", 6), ("setLoopback", 9), ("clearLoopback", 8)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restChannelDiagnostics.setStatus('mandatory')
restChannelDirectNodeConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restChannelDirectNodeConnect.setStatus('mandatory')
restChannelDirectPathConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 88))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restChannelDirectPathConnect.setStatus('mandatory')
restChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(34, 35, 37, 9, 30, 41, 42, 132, 76, 77, 121, 78, 33, 36))).clone(namedValues=NamedValues(("connecting", 34), ("connected", 35), ("disconnecting", 37), ("loopback", 9), ("retryNoServer", 30), ("retryNoBW", 41), ("retryNoRoute", 42), ("retryNoDlci", 132), ("retryDestIoUnusable", 76), ("retryDestIoInUse", 77), ("retryAuto", 121), ("retryExceedShareBW", 78), ("pending", 33), ("disconnected", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelStatus.setStatus('mandatory')
restChannelSubStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(55, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 36))).clone(namedValues=NamedValues(("waitForRTSAck", 55), ("noBypassServer", 151), ("noSrcServer", 152), ("noDestServer", 153), ("noSrcSgmSaf", 154), ("noDestSgmSaf", 155), ("noSrcSgmScf", 156), ("noDestSgmScf", 157), ("noSrcAgmSaf", 158), ("noDestAgmSaf", 159), ("noSrcAgmScf", 160), ("noDestAgmScf", 161), ("noSrcAsmSaf", 162), ("noDestAsmSaf", 163), ("noSrcAsmScf", 164), ("noDestAsmScf", 165), ("noSrcLgmSaf", 166), ("noDestLgmSaf", 167), ("noSrcLgmScf", 168), ("noDestLgmScf", 169), ("noSrcRtmSaf", 170), ("noDestRtmSaf", 171), ("noSrcRtmScf", 172), ("noDestRtmScf", 173), ("noSrcVoicePort", 174), ("noDestVoicePort", 175), ("none", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelSubStatus.setStatus('mandatory')
restChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 9))).clone(namedValues=NamedValues(("tdm", 1), ("packet", 2), ("subrate", 4), ("trunkGroup", 5), ("voice", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelType.setStatus('mandatory')
restChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelBandwidth.setStatus('mandatory')
restChannelBypassCount = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelBypassCount.setStatus('mandatory')
restChannelPath = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 85))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelPath.setStatus('deprecated')
restChannelRouteQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(57, 56))).clone(namedValues=NamedValues(("asSpecified", 57), ("overriden", 56)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelRouteQuality.setStatus('mandatory')
restChannelConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelConnectTime.setStatus('mandatory')
restChannelRetryCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelRetryCounter.setStatus('mandatory')
restChannelLoopbackNode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 18), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelLoopbackNode.setStatus('mandatory')
restChannelNodalSubratePath = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelNodalSubratePath.setStatus('mandatory')
restChannelDChOrigNode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 20), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelDChOrigNode.setStatus('mandatory')
restChannelDChOrigAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 21), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelDChOrigAddr.setStatus('mandatory')
restChannelDChTermNode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 22), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelDChTermNode.setStatus('mandatory')
restChannelDChTermAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 23), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelDChTermAddr.setStatus('mandatory')
restChannelLoopbackModAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 24), SlotAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restChannelLoopbackModAddr.setStatus('mandatory')
restChannelNetworkPath = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 204))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restChannelNetworkPath.setStatus('mandatory')
restPktChannelTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2), )
if mibBuilder.loadTexts: restPktChannelTable.setStatus('mandatory')
restPktChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1), ).setIndexNames((0, "STMIB", "restPktChannelAddr"))
if mibBuilder.loadTexts: restPktChannelEntry.setStatus('mandatory')
restPktChannelAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 1), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPktChannelAddr.setStatus('mandatory')
restPktChannelDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12, 13, 15))).clone(namedValues=NamedValues(("enablePktTestGenLocal", 11), ("enablePktTestGenRemote", 12), ("disablePktTestGen", 13), ("disablePktPing", 15)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restPktChannelDiagnostics.setStatus('mandatory')
restPktChannelTestGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(44, 45, 46))).clone(namedValues=NamedValues(("activeLocal", 44), ("activeRemote", 45), ("inactive", 46)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPktChannelTestGenStatus.setStatus('mandatory')
restPktChannelTestGenFrSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPktChannelTestGenFrSent.setStatus('mandatory')
restPktChannelTestGenFrRcvOK = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPktChannelTestGenFrRcvOK.setStatus('mandatory')
restPktChannelTestGenFrRcvErr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPktChannelTestGenFrRcvErr.setStatus('mandatory')
restPktChannelTestGenFrTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPktChannelTestGenFrTimeOut.setStatus('mandatory')
restPktChannelPingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPktChannelPingStatus.setStatus('mandatory')
restPktChannelPingNumTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restPktChannelPingNumTimes.setStatus('mandatory')
restPktChannelPingNumRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPktChannelPingNumRemaining.setStatus('mandatory')
restPktChannelCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPktChannelCommStatus.setStatus('mandatory')
restPktChPingTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 3), )
if mibBuilder.loadTexts: restPktChPingTable.setStatus('mandatory')
restPktChPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 3, 1), ).setIndexNames((0, "STMIB", "restPktChPingAddr"), (0, "STMIB", "restPktChPingHopNumber"))
if mibBuilder.loadTexts: restPktChPingEntry.setStatus('mandatory')
restPktChPingAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 3, 1, 1), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPktChPingAddr.setStatus('mandatory')
restPktChPingHopNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPktChPingHopNumber.setStatus('mandatory')
restPktChPingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPktChPingDelay.setStatus('mandatory')
restPktChPingOrigTermCong = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("yellow", 2), ("red", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPktChPingOrigTermCong.setStatus('mandatory')
restPktChPingTermOrigCong = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("yellow", 2), ("red", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restPktChPingTermOrigCong.setStatus('mandatory')
restAd10Port = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10))
restAd10AgmPortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1), )
if mibBuilder.loadTexts: restAd10AgmPortTable.setStatus('mandatory')
restAd10AgmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1), ).setIndexNames((0, "STMIB", "restAd10AgmPortAddr"))
if mibBuilder.loadTexts: restAd10AgmPortEntry.setStatus('mandatory')
restAd10AgmPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10AgmPortAddr.setStatus('mandatory')
restAd10AgmPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tdmMuxSwitch", 1), ("unitReset", 2), ("updateHw", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restAd10AgmPortControl.setStatus('mandatory')
restAd10AgmPortCpSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("a300", 1), ("a1200", 2), ("a2400", 3), ("a9600", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10AgmPortCpSpeed.setStatus('mandatory')
restAd10AgmPortCpTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("vt100", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10AgmPortCpTermType.setStatus('mandatory')
restAd10AgmPortCpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10AgmPortCpMode.setStatus('mandatory')
restAd10Date = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10Date.setStatus('mandatory')
restAd10Time = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10Time.setStatus('mandatory')
restAd10VersionLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10VersionLabel.setStatus('mandatory')
restAd10UnitSerialNumberStr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10UnitSerialNumberStr.setStatus('mandatory')
restAd10UnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 9))).clone(namedValues=NamedValues(("atixSt50", 6), ("accessPlus", 7), ("ad10", 8), ("universalType", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10UnitType.setStatus('mandatory')
restAd10HWConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(384, 384)).setFixedLength(384)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10HWConfig.setStatus('mandatory')
restAd10NetworkInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rs232", 1), ("v35", 2), ("rs422", 3), ("v11", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10NetworkInterface.setStatus('mandatory')
restAd10NetworkClockConf = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("external", 1), ("slave", 2), ("internal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10NetworkClockConf.setStatus('mandatory')
restAd10TdmMuxSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10TdmMuxSwitchStatus.setStatus('mandatory')
restAd10SoftloadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(66, 65, 36, 109, 110, 111, 112))).clone(namedValues=NamedValues(("softloading", 66), ("success", 65), ("idle", 36), ("responseTimeout", 109), ("resetTimeout", 110), ("infoIncorrect", 111), ("ad10LinkDown", 112)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10SoftloadStatus.setStatus('mandatory')
restAd10SoftloadFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10SoftloadFileSize.setStatus('mandatory')
restAd10SoftloadTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10SoftloadTransferred.setStatus('mandatory')
restAd10SoftloadStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10SoftloadStartTime.setStatus('mandatory')
restAd10SoftloadCompletionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10SoftloadCompletionTime.setStatus('mandatory')
restAd10DataPortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2), )
if mibBuilder.loadTexts: restAd10DataPortTable.setStatus('mandatory')
restAd10DataPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1), ).setIndexNames((0, "STMIB", "restAd10DataPortAddr"))
if mibBuilder.loadTexts: restAd10DataPortEntry.setStatus('mandatory')
restAd10DataPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 1), Ad10PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10DataPortAddr.setStatus('mandatory')
restAd10DataPortDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6))).clone(namedValues=NamedValues(("insert", 4), ("remove", 5), ("reset", 6)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restAd10DataPortDiagnostics.setStatus('mandatory')
restAd10DataPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("offline", 1), ("online", 2), ("disableDiagnostics", 3), ("bertTowardSubscriber", 4), ("bertTowardNetwork", 5), ("loopSubscriber", 6), ("loopNetwork", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortMode.setStatus('mandatory')
restAd10DataPortIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rs232", 1), ("v35", 2), ("rs422", 3), ("v11", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10DataPortIntfType.setStatus('mandatory')
restAd10DataPortClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("internal", 2), ("external", 3), ("txExternal", 4), ("derived", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortClockMode.setStatus('mandatory')
restAd10DataPortClockRate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20480))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortClockRate.setStatus('mandatory')
restAd10DataPortCtsOOS = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceOff", 1), ("forceOn", 2), ("freeze", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortCtsOOS.setStatus('mandatory')
restAd10DataPortCtsSig = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("forceOff", 1), ("forceOn", 2), ("loopLocalRts", 3), ("loopLocalDtr", 4), ("rts", 5), ("dtr", 6), ("rtsAndDtr", 7), ("rtsOrDtr", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortCtsSig.setStatus('mandatory')
restAd10DataPortDcdOOS = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceOff", 1), ("forceOn", 2), ("freeze", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortDcdOOS.setStatus('mandatory')
restAd10DataPortDcdSig = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("forceOff", 1), ("forceOn", 2), ("loopLocalRts", 3), ("loopLocalDtr", 4), ("rts", 5), ("dtr", 6), ("rtsAndDtr", 7), ("rtsOrDtr", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortDcdSig.setStatus('mandatory')
restAd10DataPortDsrOOS = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceOff", 1), ("forceOn", 2), ("freeze", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortDsrOOS.setStatus('mandatory')
restAd10DataPortDsrSig = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("forceOff", 1), ("forceOn", 2), ("loopLocalRts", 3), ("loopLocalDtr", 4), ("rts", 5), ("dtr", 6), ("rtsAndDtr", 7), ("rtsOrDtr", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortDsrSig.setStatus('mandatory')
restAd10DataPortRtsLoopDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortRtsLoopDelay.setStatus('mandatory')
restAd10DataPortDtrLoopDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortDtrLoopDelay.setStatus('mandatory')
restAd10DataPortAsyncDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("b5bit", 1), ("b6bit", 2), ("b7bit", 3), ("b8bit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortAsyncDataBits.setStatus('mandatory')
restAd10DataPortAsyncStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("oneAndHalf", 2), ("two", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortAsyncStopBits.setStatus('mandatory')
restAd10DataPortAsyncParity = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("even", 2), ("odd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortAsyncParity.setStatus('mandatory')
restAd10DataPortAsyncSubMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortAsyncSubMode.setStatus('mandatory')
restAd10DataPortAsyncSubChar = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortAsyncSubChar.setStatus('mandatory')
restAd10DataPortPktFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ctsDtr", 1), ("xonXoff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortPktFlowControl.setStatus('mandatory')
restAd10DataPortPktTxFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortPktTxFlow.setStatus('mandatory')
restAd10DataPortPktRxFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortPktRxFlow.setStatus('mandatory')
restAd10DataPortPktBuildTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortPktBuildTimeOut.setStatus('mandatory')
restAd10DataPortPktRxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortPktRxThreshold.setStatus('mandatory')
restAd10DataPortPktTxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortPktTxThreshold.setStatus('mandatory')
restAd10DataPortPktMinRxFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortPktMinRxFrag.setStatus('mandatory')
restAd10DataPortBiSyncCharType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii7", 1), ("ascii8", 2), ("ebcdic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortBiSyncCharType.setStatus('mandatory')
restAd10DataPortBiSyncParity = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("high", 1), ("low", 2), ("even", 3), ("odd", 4), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortBiSyncParity.setStatus('mandatory')
restAd10DataPortBiSyncIdleFill = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("sync", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortBiSyncIdleFill.setStatus('mandatory')
restAd10DataPortBiSyncMinPair = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortBiSyncMinPair.setStatus('mandatory')
restAd10DataPortBiSyncSyncChar = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortBiSyncSyncChar.setStatus('mandatory')
restAd10DataPortBiSyncPadChar = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortBiSyncPadChar.setStatus('mandatory')
restAd10DataPortHdlcCrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortHdlcCrcType.setStatus('mandatory')
restAd10DataPortHdlcLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nrz", 1), ("nrzi", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortHdlcLineCode.setStatus('mandatory')
restAd10DataPortHdlcIdleFill = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("flag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortHdlcIdleFill.setStatus('mandatory')
restAd10DataPortHdlcMinFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortHdlcMinFlags.setStatus('mandatory')
restAd10DataPortModemSigInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10DataPortModemSigInfo.setStatus('mandatory')
restAd10DataPortVcMapDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortVcMapDlci.setStatus('mandatory')
restAd10DataPortVcMapCir = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1280))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortVcMapCir.setStatus('mandatory')
restAd10DataPortTDMDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 18, 36, 54, 72, 90, 108, 120, 126, 144, 180, 216, 240, 288, 360, 420, 65535))).clone(namedValues=NamedValues(("b1200", 9), ("b2400", 18), ("b4800", 36), ("b7200", 54), ("b9600", 72), ("b12000", 90), ("b14400", 108), ("b16000", 120), ("b16800", 126), ("b19200", 144), ("b24000", 180), ("b28800", 216), ("b32000", 240), ("b38400", 288), ("b48000", 360), ("b56000", 420), ("disabled", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10DataPortTDMDataRate.setStatus('mandatory')
restAd10DataPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tdm-sync", 1), ("stat-mux-async", 2), ("bisync", 3), ("hdlc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10DataPortType.setStatus('mandatory')
restAd10DataPortDtrFlLpDlyDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortDtrFlLpDlyDelta.setStatus('mandatory')
restAd10DataPortRtsFlLpDlyDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10DataPortRtsFlLpDlyDelta.setStatus('mandatory')
restAd10VoicePortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3), )
if mibBuilder.loadTexts: restAd10VoicePortTable.setStatus('mandatory')
restAd10VoicePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1), ).setIndexNames((0, "STMIB", "restAd10VoicePortAddr"))
if mibBuilder.loadTexts: restAd10VoicePortEntry.setStatus('mandatory')
restAd10VoicePortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 1), Ad10PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10VoicePortAddr.setStatus('mandatory')
restAd10VoicePortDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6))).clone(namedValues=NamedValues(("insert", 4), ("remove", 5), ("reset", 6)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restAd10VoicePortDiagnostics.setStatus('mandatory')
restAd10VoicePortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("offline", 1), ("online", 2), ("disableDiagnosis", 3), ("subDMW", 4), ("bertTowardNetwork", 5), ("loopSub", 6), ("loopNet", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10VoicePortMode.setStatus('mandatory')
restAd10VoicePortInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("fxo", 1), ("fxsGndStartContRing", 5), ("fxsGndStartInterRing", 6), ("fxsLoopStartContRing", 7), ("fxsLoopStartInterRing", 8), ("emTypeI", 9), ("emTypeII", 10), ("emTypeIII", 11), ("emTypeIV", 12), ("emTypeV", 13), ("ac15", 14), ("ss5", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10VoicePortInterface.setStatus('mandatory')
restAd10VoicePortEchoCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10VoicePortEchoCancel.setStatus('mandatory')
restAd10VoicePortToneMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10VoicePortToneMode.setStatus('mandatory')
restAd10VoicePortNonLinear = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10VoicePortNonLinear.setStatus('mandatory')
restAd10VoicePortEMPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("reverse", 1), ("normal", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10VoicePortEMPolarity.setStatus('mandatory')
restAd10VoicePortUncfgCktSig = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("busy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10VoicePortUncfgCktSig.setStatus('mandatory')
restAd10VoicePortHookStateRx = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10VoicePortHookStateRx.setStatus('mandatory')
restAd10VoicePortHookStateTx = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10VoicePortHookStateTx.setStatus('mandatory')
restAd10VoicePortTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10VoicePortTxLevel.setStatus('mandatory')
restAd10VoicePortRcvLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10VoicePortRcvLevel.setStatus('mandatory')
restAd10VoicePortTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("r600ohms", 1), ("r900ohmsOrComplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10VoicePortTermination.setStatus('mandatory')
restAd10VoicePortWire = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("w4wire", 1), ("w2wire", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10VoicePortWire.setStatus('mandatory')
restAd10VoicePortAc15Dial = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("dtmf", 1), ("pulse", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10VoicePortAc15Dial.setStatus('mandatory')
restAd10VoicePortTelcoIntType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("us", 1), ("babt", 2), ("austel", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10VoicePortTelcoIntType.setStatus('mandatory')
restAd10VoicePortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(40, 54, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240, 65535))).clone(namedValues=NamedValues(("b5333", 40), ("b7200", 54), ("b7466", 56), ("b8000", 60), ("b8533", 64), ("b9066", 68), ("b9600", 72), ("b10133", 76), ("b10666", 80), ("b11200", 84), ("b11733", 88), ("b12266", 92), ("b12800", 96), ("b13333", 100), ("b13866", 104), ("b14400", 108), ("b14933", 112), ("b15466", 116), ("b16000", 120), ("b16533", 124), ("b17066", 128), ("b17600", 132), ("b18133", 136), ("b18666", 140), ("b19200", 144), ("b19733", 148), ("b20266", 152), ("b20800", 156), ("b21333", 160), ("b21866", 164), ("b22400", 168), ("b22933", 172), ("b23466", 176), ("b24000", 180), ("b24533", 184), ("b25066", 188), ("b25600", 192), ("b26133", 196), ("b26666", 200), ("b27200", 204), ("b27733", 208), ("b28266", 212), ("b28800", 216), ("b29333", 220), ("b29866", 224), ("b30400", 228), ("b30933", 232), ("b31466", 236), ("b32000", 240), ("disabled", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10VoicePortSpeed.setStatus('mandatory')
restAd10VoicePortCompressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tCelp", 1), ("atc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10VoicePortCompressMode.setStatus('mandatory')
restAd10VoicePortFaxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("faxIIIenable-NSFenable", 1), ("faxIIIenable-NSFdisable", 2), ("faxIIIdisable-NSFdontcare", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10VoicePortFaxMode.setStatus('mandatory')
restAd10VoicePortOOSAudio = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fastBusy", 1), ("silence", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10VoicePortOOSAudio.setStatus('mandatory')
restAd10VoicePortCelpNetSigMd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("st", 2), ("link", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10VoicePortCelpNetSigMd.setStatus('mandatory')
restAd10VoicePortCelpNetSigSt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("indeterminate", 1), ("st", 2), ("link", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10VoicePortCelpNetSigSt.setStatus('mandatory')
restAd10PktBandTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4), )
if mibBuilder.loadTexts: restAd10PktBandTable.setStatus('mandatory')
restAd10PktBandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4, 1), ).setIndexNames((0, "STMIB", "restAd10PktBandAddr"))
if mibBuilder.loadTexts: restAd10PktBandEntry.setStatus('mandatory')
restAd10PktBandAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4, 1, 1), Ad10PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10PktBandAddr.setStatus('mandatory')
restAd10PktBandDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6))).clone(namedValues=NamedValues(("insert", 4), ("remove", 5), ("reset", 6)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restAd10PktBandDiagnostics.setStatus('mandatory')
restAd10PktBandStatMuxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("offline", 1), ("online", 2), ("disableDiagnosis", 3), ("bertTowardSub", 4), ("bertTowardNetwork", 5), ("loopSub", 6), ("loopNet", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10PktBandStatMuxMode.setStatus('deprecated')
restAd10PktBandMaxSegSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b64bytes", 1), ("b256bytes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restAd10PktBandMaxSegSize.setStatus('mandatory')
restAd10PktBandBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 10, 12, 14, 15, 16, 18, 20, 21, 24, 27, 28, 30, 32, 35, 36, 40, 42, 45, 48, 54, 56, 60, 63, 70, 72, 80, 84, 90, 96, 105, 108, 112, 120, 126, 135, 140, 144, 160, 168, 180, 189, 210, 216, 224, 240, 252, 270, 280, 288, 315, 336, 360, 378, 420, 432, 480, 504, 540, 560, 630, 672, 720, 756, 840, 864, 945, 960, 65535))).clone(namedValues=NamedValues(("b1200", 9), ("b1334", 10), ("b1600", 12), ("b1867", 14), ("b2000", 15), ("b2134", 16), ("b2400", 18), ("b2667", 20), ("b2800", 21), ("b3200", 24), ("b3600", 27), ("b3734", 28), ("b4000", 30), ("b4267", 32), ("b4667", 35), ("b4800", 36), ("b5334", 40), ("b5600", 42), ("b6000", 45), ("b6400", 48), ("b7200", 54), ("b7467", 56), ("b8000", 60), ("b8400", 63), ("b9334", 70), ("b9600", 72), ("b10667", 80), ("b11200", 84), ("b12000", 90), ("b12800", 96), ("b14000", 105), ("b14400", 108), ("b14934", 112), ("b16000", 120), ("b16800", 126), ("b18000", 135), ("b18667", 140), ("b19200", 144), ("b21334", 160), ("b22400", 168), ("b24000", 180), ("b25200", 189), ("b28000", 210), ("b28800", 216), ("b29867", 224), ("b32000", 240), ("b33600", 252), ("b36000", 270), ("b37334", 280), ("b38400", 288), ("b42000", 315), ("b44800", 336), ("b48000", 360), ("b50400", 378), ("b56000", 420), ("b57600", 432), ("b64000", 480), ("b67200", 504), ("b72000", 540), ("b74667", 560), ("b84000", 630), ("b89600", 672), ("b96000", 720), ("b100800", 756), ("b112000", 840), ("b115200", 864), ("b126000", 945), ("b128000", 960), ("disabled", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10PktBandBaudRate.setStatus('mandatory')
restAd10PktBandMinBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10PktBandMinBandwidth.setStatus('mandatory')
restAd10PktBandCurBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10PktBandCurBandwidth.setStatus('mandatory')
restAd10PktBandMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAd10PktBandMaxBandwidth.setStatus('mandatory')
restAsmPort = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11))
restAsmX50Table = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1))
restAsmX50PortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 1), )
if mibBuilder.loadTexts: restAsmX50PortTable.setStatus('mandatory')
restAsmX50PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 1, 1), ).setIndexNames((0, "STMIB", "restAsmX50PortAddr"))
if mibBuilder.loadTexts: restAsmX50PortEntry.setStatus('mandatory')
restAsmX50PortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 1, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmX50PortAddr.setStatus('mandatory')
restAsmX50PortEngine = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmX50PortEngine.setStatus('mandatory')
restAsmX50PortRxHouseKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmX50PortRxHouseKbits.setStatus('mandatory')
restAsmX50PortCktTimeSlotMap = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmX50PortCktTimeSlotMap.setStatus('mandatory')
restAsmX50PortAggrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8, 16, 17))).clone(namedValues=NamedValues(("pending", 1), ("inSync", 2), ("los", 4), ("ros", 6), ("losRos", 8), ("oos", 16), ("loopback", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmX50PortAggrStatus.setStatus('mandatory')
restAsmX50CkTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 2), )
if mibBuilder.loadTexts: restAsmX50CkTable.setStatus('mandatory')
restAsmX50CkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 2, 1), ).setIndexNames((0, "STMIB", "restAsmX50CkAddr"))
if mibBuilder.loadTexts: restAsmX50CkEntry.setStatus('mandatory')
restAsmX50CkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 2, 1, 1), AsmX50CkAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmX50CkAddr.setStatus('mandatory')
restAsmX50CkDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6))).clone(namedValues=NamedValues(("insert", 4), ("remove", 5), ("reset", 6)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restAsmX50CkDiagnostics.setStatus('mandatory')
restAsmX50CkSbitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("zero", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmX50CkSbitStatus.setStatus('mandatory')
restAsmX50CkPhasorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmX50CkPhasorStatus.setStatus('mandatory')
restAsmVoice = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2))
restAsmVoicePortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1), )
if mibBuilder.loadTexts: restAsmVoicePortTable.setStatus('mandatory')
restAsmVoicePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1), ).setIndexNames((0, "STMIB", "restAsmVoicePortChannelAddr"))
if mibBuilder.loadTexts: restAsmVoicePortEntry.setStatus('mandatory')
restAsmVoicePortChannelAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 1), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmVoicePortChannelAddr.setStatus('mandatory')
restAsmVoicePortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 2), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmVoicePortAddr.setStatus('mandatory')
restAsmVoicePortTrkGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 3), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmVoicePortTrkGrpAddr.setStatus('mandatory')
restAsmVoicePortEngine = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmVoicePortEngine.setStatus('mandatory')
restAsmVoicePortPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmVoicePortPacketSize.setStatus('mandatory')
restAsmVoicePortBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(120, 240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmVoicePortBlockSize.setStatus('mandatory')
restAsmVoicePortEchoCanceller = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmVoicePortEchoCanceller.setStatus('mandatory')
restAsmVoicePortDTMFRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmVoicePortDTMFRelay.setStatus('mandatory')
restAsmVoicePortFaxRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmVoicePortFaxRelay.setStatus('mandatory')
restAsmVoicePortPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmVoicePortPacket.setStatus('mandatory')
restAsmVoicePortSubratePhasor = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmVoicePortSubratePhasor.setStatus('mandatory')
restAsmVoicePortSignalingLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inSync", 1), ("los", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmVoicePortSignalingLOS.setStatus('mandatory')
restAsmVoicePortFrameLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inSync", 1), ("los", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmVoicePortFrameLOS.setStatus('mandatory')
restAsmVoicePortCelpNetSigSt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("indeterminate", 1), ("st", 2), ("link", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restAsmVoicePortCelpNetSigSt.setStatus('mandatory')
restTrunkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12))
restTrkGrpTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 1), )
if mibBuilder.loadTexts: restTrkGrpTable.setStatus('mandatory')
restTrkGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 1, 1), ).setIndexNames((0, "STMIB", "restTrkGrpAddr"))
if mibBuilder.loadTexts: restTrkGrpEntry.setStatus('mandatory')
restTrkGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 1, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restTrkGrpAddr.setStatus('mandatory')
restTrkGrpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restTrkGrpStatus.setStatus('mandatory')
restTrkGrpContentsTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2), )
if mibBuilder.loadTexts: restTrkGrpContentsTable.setStatus('mandatory')
restTrkGrpContentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2, 1), ).setIndexNames((0, "STMIB", "restTrkGrpContentsAddr"), (0, "STMIB", "restTrkGrpContentsSequenceID"))
if mibBuilder.loadTexts: restTrkGrpContentsEntry.setStatus('mandatory')
restTrkGrpContentsAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restTrkGrpContentsAddr.setStatus('mandatory')
restTrkGrpContentsSequenceID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restTrkGrpContentsSequenceID.setStatus('mandatory')
restTrkGrpContentsSrcNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2, 1, 3), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restTrkGrpContentsSrcNodeID.setStatus('mandatory')
restTrkGrpContentsSrcTrkGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2, 1, 4), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restTrkGrpContentsSrcTrkGrpAddr.setStatus('mandatory')
restTrkGrpContentsSrcChAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2, 1, 5), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restTrkGrpContentsSrcChAddr.setStatus('mandatory')
restTrkGrpContentsDstNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2, 1, 6), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restTrkGrpContentsDstNodeID.setStatus('mandatory')
restTrkGrpContentsDstTrkGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2, 1, 7), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restTrkGrpContentsDstTrkGrpAddr.setStatus('mandatory')
restTrkGrpContentsDstChAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2, 1, 8), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restTrkGrpContentsDstChAddr.setStatus('mandatory')
restRtmPort = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13))
restRtmPortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1), )
if mibBuilder.loadTexts: restRtmPortTable.setStatus('mandatory')
restRtmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1), ).setIndexNames((0, "STMIB", "restRtmPortAddr"))
if mibBuilder.loadTexts: restRtmPortEntry.setStatus('mandatory')
restRtmPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmPortAddr.setStatus('mandatory')
restRtmPortAdFmtRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmPortAdFmtRevision.setStatus('mandatory')
restRtmPortAdType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("ad3", 2), ("ad7", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmPortAdType.setStatus('mandatory')
restRtmPortAdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("integralInt", 1), ("daughterBrdInt", 2), ("sipexChipInt", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmPortAdSubtype.setStatus('mandatory')
restRtmPortAdAssemblyNmb = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmPortAdAssemblyNmb.setStatus('mandatory')
restRtmPortAdMotherBrdAssmNmb = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmPortAdMotherBrdAssmNmb.setStatus('mandatory')
restRtmPortAdSerialNmb = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmPortAdSerialNmb.setStatus('mandatory')
restRtmPortAdManufactDate = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmPortAdManufactDate.setStatus('mandatory')
restRtmPortAdRamSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmPortAdRamSize.setStatus('mandatory')
restRtmPortAdModDiagResult = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmPortAdModDiagResult.setStatus('mandatory')
restRtmPortAdPortDiagResult = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmPortAdPortDiagResult.setStatus('mandatory')
restRtmPortAdCpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restRtmPortAdCpMode.setStatus('mandatory')
restRtmPortAdCpSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("a9600", 1), ("a19200", 2))).clone('a9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restRtmPortAdCpSpeed.setStatus('mandatory')
restRtmAdPortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2), )
if mibBuilder.loadTexts: restRtmAdPortTable.setStatus('mandatory')
restRtmAdPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1), ).setIndexNames((0, "STMIB", "restRtmAdPortAddr"))
if mibBuilder.loadTexts: restRtmAdPortEntry.setStatus('mandatory')
restRtmAdPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 1), RtmAdPortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmAdPortAddr.setStatus('mandatory')
restRtmAdPortDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 9, 8))).clone(namedValues=NamedValues(("insert", 4), ("remove", 5), ("reset", 6), ("setLoopback", 9), ("clearLoopback", 8)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restRtmAdPortDiagnostics.setStatus('mandatory')
restRtmAdPortInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("dce1", 1), ("dce3", 3))).clone('dce1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restRtmAdPortInterface.setStatus('mandatory')
restRtmAdPortStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneStopBit", 1), ("twoStopBit", 2))).clone('oneStopBit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restRtmAdPortStopBits.setStatus('mandatory')
restRtmAdPortGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transparent", 1), ("autogen", 2))).clone('transparent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restRtmAdPortGeneration.setStatus('mandatory')
restRtmAdPortContention = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nobwc", 1), ("f1nf1", 2), ("f2nf2", 3))).clone('nobwc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restRtmAdPortContention.setStatus('mandatory')
restRtmAdPortOosOper = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("doNothing", 1), ("forceFn", 2), ("mark", 3), ("markFf", 4), ("space", 5), ("spaceFf", 6))).clone('doNothing')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restRtmAdPortOosOper.setStatus('mandatory')
restRtmAdPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("defined", 2), ("online", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmAdPortState.setStatus('mandatory')
restRtmAdPortForcedFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restRtmAdPortForcedFunc.setStatus('mandatory')
restRtmAdPortLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("adRim", 1), ("adLim", 2), ("adLimDisc", 4), ("rtmRim", 8), ("rtmLim", 16), ("rtmBidirectional", 32)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restRtmAdPortLoopbackType.setStatus('mandatory')
restRtmAdPortLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 255))).clone(namedValues=NamedValues(("adRim", 1), ("adLim", 2), ("adLimDisc", 4), ("rtmRim", 8), ("rtmLim", 16), ("rtmBidirectional", 32), ("adLocalLl", 64), ("adLocalRl", 128), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmAdPortLoopbackStatus.setStatus('mandatory')
restRtmAdPortElecInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("x21", 3), ("noInterface", 10))).clone('v24')).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmAdPortElecInterface.setStatus('mandatory')
restRtmAdPortElIntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonProgrammable", 1), ("programmable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmAdPortElIntStatus.setStatus('mandatory')
restRtmAdPortParSubstitution = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restRtmAdPortParSubstitution.setStatus('mandatory')
restRtmAdPortParSubstChar = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restRtmAdPortParSubstChar.setStatus('mandatory')
restRtmAdPortPhasorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmAdPortPhasorStatus.setStatus('mandatory')
restRtmAdPortAdPhasorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmAdPortAdPhasorStatus.setStatus('mandatory')
restRtmAdPortAdFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restRtmAdPortAdFunctions.setStatus('mandatory')
restRtmAdPortParity = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("parNone", 1), ("parEven", 2), ("parOdd", 3))).clone('parNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restRtmAdPortParity.setStatus('mandatory')
restLgmPort = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14))
restLgmPortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1), )
if mibBuilder.loadTexts: restLgmPortTable.setStatus('mandatory')
restLgmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1), ).setIndexNames((0, "STMIB", "restLgmPortAddr"))
if mibBuilder.loadTexts: restLgmPortEntry.setStatus('mandatory')
restLgmPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmPortAddr.setStatus('mandatory')
restLgmPortLocalBERQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notAvailable", 1), ("pend", 2), ("poor", 3), ("fair", 4), ("good", 5), ("veryGood", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmPortLocalBERQuality.setStatus('mandatory')
restLgmPortBERWindowFill = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmPortBERWindowFill.setStatus('mandatory')
restLgmPortRemoteNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmPortRemoteNodeID.setStatus('mandatory')
restLgmPortRemotePortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 5), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmPortRemotePortAddr.setStatus('mandatory')
restLgmPortRemoteBERQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notAvailable", 1), ("pend", 2), ("poor", 3), ("fair", 4), ("good", 5), ("veryGood", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmPortRemoteBERQuality.setStatus('mandatory')
restLgmPortRemoteRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmPortRemoteRevision.setStatus('mandatory')
restLgmPortAvailableBw = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmPortAvailableBw.setStatus('mandatory')
restLgmPortUsedBw = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmPortUsedBw.setStatus('mandatory')
restLgmPortNumCh = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmPortNumCh.setStatus('mandatory')
restLgmPortLgmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 11), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmPortLgmPort.setStatus('mandatory')
restLgmPortLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmPortLinkSpeed.setStatus('mandatory')
restLgmPortDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 64))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("clearVILCBerWindowFill", 64)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restLgmPortDiagnostics.setStatus('mandatory')
restLgmPortSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inSync", 1), ("los", 2), ("ros", 3), ("losAndRos", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmPortSyncState.setStatus('mandatory')
restLgmContentsTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 2), )
if mibBuilder.loadTexts: restLgmContentsTable.setStatus('mandatory')
restLgmContentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 2, 1), ).setIndexNames((0, "STMIB", "restLgmContentsAddr"), (0, "STMIB", "restLgmContentsSequenceID"))
if mibBuilder.loadTexts: restLgmContentsEntry.setStatus('mandatory')
restLgmContentsAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 2, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmContentsAddr.setStatus('mandatory')
restLgmContentsSequenceID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmContentsSequenceID.setStatus('mandatory')
restLgmContentsSourceNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 2, 1, 3), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmContentsSourceNodeID.setStatus('mandatory')
restLgmContentsSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 2, 1, 4), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmContentsSourceAddr.setStatus('mandatory')
restLgmContentsDestNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 2, 1, 5), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmContentsDestNodeID.setStatus('mandatory')
restLgmContentsDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 2, 1, 6), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restLgmContentsDestAddr.setStatus('mandatory')
restSaf = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15))
restSafTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1), )
if mibBuilder.loadTexts: restSafTable.setStatus('mandatory')
restSafEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1), ).setIndexNames((0, "STMIB", "restSafAddr"))
if mibBuilder.loadTexts: restSafEntry.setStatus('mandatory')
restSafAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafAddr.setStatus('mandatory')
restSafStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inSync", 1), ("outOfSync", 2), ("frameSwitch", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafStatus.setStatus('mandatory')
restSafSubStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("syncError", 1), ("noError", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafSubStatus.setStatus('mandatory')
restSafRemoteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 4), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafRemoteNode.setStatus('mandatory')
restSafRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 5), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafRemoteAddr.setStatus('mandatory')
restSafInlNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafInlNumber.setStatus('mandatory')
restSafBandwidthAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafBandwidthAvail.setStatus('mandatory')
restSafNumChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafNumChannels.setStatus('mandatory')
restSafHWPhasorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafHWPhasorStatus.setStatus('deprecated')
restSafSWPhasorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafSWPhasorStatus.setStatus('deprecated')
restSafModNumChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafModNumChannels.setStatus('mandatory')
restSafModBandwidthAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafModBandwidthAvail.setStatus('mandatory')
restSafDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 9, 8))).clone(namedValues=NamedValues(("clearStats", 3), ("setLoopback", 9), ("clearLoopback", 8)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restSafDiagnostics.setStatus('mandatory')
restSafFrameSwitchLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafFrameSwitchLocation.setStatus('mandatory')
restSafFrameSwitchIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafFrameSwitchIndicator.setStatus('mandatory')
restSafRemoteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-service", 1), ("out-of-service", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafRemoteStatus.setStatus('mandatory')
restSafSyncErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafSyncErrors.setStatus('mandatory')
restSafOosErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafOosErrors.setStatus('mandatory')
restSafPhasorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafPhasorStatus.setStatus('mandatory')
restSafContentsTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 2), )
if mibBuilder.loadTexts: restSafContentsTable.setStatus('mandatory')
restSafContentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 2, 1), ).setIndexNames((0, "STMIB", "restSafContentsAddr"), (0, "STMIB", "restSafContentsSeqNum"))
if mibBuilder.loadTexts: restSafContentsEntry.setStatus('mandatory')
restSafContentsAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 2, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafContentsAddr.setStatus('mandatory')
restSafContentsSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafContentsSeqNum.setStatus('mandatory')
restSafContentsSrcNode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 2, 1, 3), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafContentsSrcNode.setStatus('mandatory')
restSafContentsSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 2, 1, 4), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafContentsSrcAddr.setStatus('mandatory')
restSafContentsDestNode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 2, 1, 5), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafContentsDestNode.setStatus('mandatory')
restSafContentsDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 2, 1, 6), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restSafContentsDestAddr.setStatus('mandatory')
restDsmPort = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16))
restDsmDChPortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 1), )
if mibBuilder.loadTexts: restDsmDChPortTable.setStatus('mandatory')
restDsmDChPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 1, 1), ).setIndexNames((0, "STMIB", "restDsmDChPortAddr"))
if mibBuilder.loadTexts: restDsmDChPortEntry.setStatus('mandatory')
restDsmDChPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 1, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmDChPortAddr.setStatus('mandatory')
restDsmDChPortDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("layer2Reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restDsmDChPortDiagnostics.setStatus('mandatory')
restDsmDChPortNumCallsInProc = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmDChPortNumCallsInProc.setStatus('mandatory')
restDsmDChPortNumCallsConn = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmDChPortNumCallsConn.setStatus('mandatory')
restDsmDChCallRealTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2), )
if mibBuilder.loadTexts: restDsmDChCallRealTable.setStatus('mandatory')
restDsmDChCallRealEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2, 1), ).setIndexNames((0, "STMIB", "restDsmDChCallRealAddr"), (0, "STMIB", "restDsmDChCallRealBundle"))
if mibBuilder.loadTexts: restDsmDChCallRealEntry.setStatus('mandatory')
restDsmDChCallRealAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmDChCallRealAddr.setStatus('mandatory')
restDsmDChCallRealBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmDChCallRealBundle.setStatus('mandatory')
restDsmDChCallRealCDRContents = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 112))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmDChCallRealCDRContents.setStatus('mandatory')
restDsmDChCallRealDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetLayer2", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restDsmDChCallRealDiagnostics.setStatus('mandatory')
restDsmDChCallRealLayer2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("pending", 1), ("in-service", 2), ("layer2Timeout", 3), ("layer2Mismatch", 4), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmDChCallRealLayer2Status.setStatus('mandatory')
restDsmDChCallRealLayer2State = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 129, 130, 131, 132, 133, 134, 135, 136, 255))).clone(namedValues=NamedValues(("idle", 1), ("ready", 2), ("waitingForResponse", 3), ("waitingForEstablishment", 4), ("outOfService", 5), ("unassignedTEI", 129), ("assignAwaitingTEI", 130), ("establishAwaitingTEI", 131), ("assignedTEI", 132), ("awaitingEstablishment", 133), ("awaitingRelease", 134), ("multipleFrameEstablished", 135), ("timeRecovery", 136), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmDChCallRealLayer2State.setStatus('mandatory')
restDsmDChCallRealLayer3State = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 144, 146, 148, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 255))).clone(namedValues=NamedValues(("inactive", 1), ("idle", 2), ("outgoingService", 3), ("incomingService", 4), ("awaitNAMOut", 5), ("awaitNAMIn", 6), ("awaitCCMOut", 7), ("awaitCCMIn", 8), ("setupComplete", 9), ("callRejecting", 10), ("callClearing", 11), ("callBarred", 12), ("preIdle", 13), ("awaitRelease", 14), ("nullState", 129), ("callInit", 130), ("overlapSending", 131), ("outgoingCallProceeding", 132), ("callDelivered", 133), ("callPresent", 135), ("callReceived", 136), ("connectRequest", 137), ("incomingCallProceeding", 138), ("callActive", 139), ("disconnectRequest", 140), ("disconnectIndication", 141), ("suspendRequest", 144), ("resumeRequest", 146), ("releaseRequest", 148), ("overlapReceive", 154), ("idleState", 155), ("establishWait", 156), ("passiveAwaitingConf", 157), ("callPassive", 158), ("registerRequest", 159), ("cancelRequest", 160), ("asaiTr1State", 161), ("u10HoldRequest", 162), ("u10TransferRequest", 163), ("u10ConferenceRequest", 164), ("u10ReconnectRequest", 165), ("u10AwaitingDisc", 166), ("u10CallOnHold", 167), ("deactivated", 168), ("reactivateRequested", 169), ("deactivateRequested", 170), ("nilHoldReqU3", 171), ("nilHoldReqU4", 172), ("nilHoldReqU10", 173), ("nilRetrieveU3", 174), ("nilRetrieveU4", 175), ("nilRetrieveU10", 176), ("nilHoldActiveU3", 177), ("nilHoldActiveU4", 178), ("nilHoldActiveU10", 179), ("broadcastState", 180), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmDChCallRealLayer3State.setStatus('mandatory')
restDsmDChCallRealTransitState = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 255))).clone(namedValues=NamedValues(("inactive", 1), ("idle", 2), ("awaitDigits", 3), ("awaitAdditionalDigits", 4), ("overlap", 5), ("incomingCallProceeding", 6), ("transitCallProceeding", 7), ("callAlerting", 8), ("active", 9), ("awaitIncomingRelease", 10), ("awaitOutgoingRelease", 11), ("awaitTwoWayRelease", 12), ("awaitCallRealChannelResponse", 13), ("awaitNcpReleaseResponse", 14), ("awaitNcpReleaseNoResponse", 15), ("awaitNcpRelease", 16), ("awaitNcpDisconnect", 17), ("awaitNcp", 18), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmDChCallRealTransitState.setStatus('mandatory')
restDsmDChCallVirtTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3), )
if mibBuilder.loadTexts: restDsmDChCallVirtTable.setStatus('mandatory')
restDsmDChCallVirtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3, 1), ).setIndexNames((0, "STMIB", "restDsmDChCallVirtAddr"), (0, "STMIB", "restDsmDChCallVirtNumber"))
if mibBuilder.loadTexts: restDsmDChCallVirtEntry.setStatus('mandatory')
restDsmDChCallVirtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmDChCallVirtAddr.setStatus('mandatory')
restDsmDChCallVirtNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 480))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmDChCallVirtNumber.setStatus('mandatory')
restDsmDChCallVirtCDRContents = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 112))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmDChCallVirtCDRContents.setStatus('mandatory')
restDsmDChCallVirtDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetLayer2", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restDsmDChCallVirtDiagnostics.setStatus('mandatory')
restDsmDChCallVirtLayer2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("pending", 1), ("in-service", 2), ("layer2Timeout", 3), ("layer2Mismatch", 4), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmDChCallVirtLayer2Status.setStatus('mandatory')
restDsmDChCallVirtLayer2State = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 129, 130, 131, 132, 133, 134, 135, 136, 255))).clone(namedValues=NamedValues(("idle", 1), ("ready", 2), ("waitingForResponse", 3), ("waitingForEstablishment", 4), ("outOfService", 5), ("unassignedTEI", 129), ("assignAwaitingTEI", 130), ("establishAwaitingTEI", 131), ("assignedTEI", 132), ("awaitingEstablishment", 133), ("awaitingRelease", 134), ("multipleFrameEstablished", 135), ("timeRecovery", 136), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmDChCallVirtLayer2State.setStatus('mandatory')
restDsmDChCallVirtLayer3State = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 144, 146, 148, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 255))).clone(namedValues=NamedValues(("inactive", 1), ("idle", 2), ("outgoingService", 3), ("incomingService", 4), ("awaitNAMOut", 5), ("awaitNAMIn", 6), ("awaitCCMOut", 7), ("awaitCCMIn", 8), ("setupComplete", 9), ("callRejecting", 10), ("callClearing", 11), ("callBarred", 12), ("preIdle", 13), ("awaitRelease", 14), ("nullState", 129), ("callInit", 130), ("overlapSending", 131), ("outgoingCallProceeding", 132), ("callDelivered", 133), ("callPresent", 135), ("callReceived", 136), ("connectRequest", 137), ("incomingCallProceeding", 138), ("callActive", 139), ("disconnectRequest", 140), ("disconnectIndication", 141), ("suspendRequest", 144), ("resumeRequest", 146), ("releaseRequest", 148), ("overlapReceive", 154), ("idleState", 155), ("establishWait", 156), ("passiveAwaitingConf", 157), ("callPassive", 158), ("registerRequest", 159), ("cancelRequest", 160), ("asaiTr1State", 161), ("u10HoldRequest", 162), ("u10TransferRequest", 163), ("u10ConferenceRequest", 164), ("u10ReconnectRequest", 165), ("u10AwaitingDisc", 166), ("u10CallOnHold", 167), ("deactivated", 168), ("reactivateRequested", 169), ("deactivateRequested", 170), ("nilHoldReqU3", 171), ("nilHoldReqU4", 172), ("nilHoldReqU10", 173), ("nilRetrieveU3", 174), ("nilRetrieveU4", 175), ("nilRetrieveU10", 176), ("nilHoldActiveU3", 177), ("nilHoldActiveU4", 178), ("nilHoldActiveU10", 179), ("broadcastState", 180), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmDChCallVirtLayer3State.setStatus('mandatory')
restDsmDChCallVirtTransitState = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 255))).clone(namedValues=NamedValues(("inactive", 1), ("idle", 2), ("awaitDigits", 3), ("awaitAdditionalDigits", 4), ("overlap", 5), ("incomingCallProceeding", 6), ("transitCallProceeding", 7), ("callAlerting", 8), ("active", 9), ("awaitIncomingRelease", 10), ("awaitOutgoingRelease", 11), ("awaitTwoWayRelease", 12), ("awaitCallVirtChannelResponse", 13), ("awaitNcpReleaseResponse", 14), ("awaitNcpReleaseNoResponse", 15), ("awaitNcpRelease", 16), ("awaitNcpDisconnect", 17), ("awaitNcp", 18), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restDsmDChCallVirtTransitState.setStatus('mandatory')
restHwRsc = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17))
restHwRscEngineTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1), )
if mibBuilder.loadTexts: restHwRscEngineTable.setStatus('mandatory')
restHwRscEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1), ).setIndexNames((0, "STMIB", "restHwRscEngineModAddr"), (0, "STMIB", "restHwRscEngineID"))
if mibBuilder.loadTexts: restHwRscEngineEntry.setStatus('mandatory')
restHwRscEngineModAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restHwRscEngineModAddr.setStatus('mandatory')
restHwRscEngineID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restHwRscEngineID.setStatus('mandatory')
restHwRscEngineDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6))).clone(namedValues=NamedValues(("insert", 4), ("remove", 5), ("reset", 6)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restHwRscEngineDiagnostics.setStatus('mandatory')
restHwRscEngineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 43))).clone(namedValues=NamedValues(("removed", 5), ("normal", 6), ("failed", 43)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restHwRscEngineStatus.setStatus('mandatory')
restHwRscEngineApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("x50", 1), ("celp-atc", 2), ("adpcm", 3), ("link", 4), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restHwRscEngineApplication.setStatus('mandatory')
restHwRscEngineMaxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restHwRscEngineMaxPorts.setStatus('mandatory')
restHwRscEngineNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restHwRscEngineNumPorts.setStatus('mandatory')
restHwRscEngineMaxSAFs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restHwRscEngineMaxSAFs.setStatus('mandatory')
restHwRscEngineNumSAFs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restHwRscEngineNumSAFs.setStatus('mandatory')
restHwRscEngineMaxSCFs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restHwRscEngineMaxSCFs.setStatus('mandatory')
restHwRscEngineNumSCFs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restHwRscEngineNumSCFs.setStatus('mandatory')
restHwRscEngineMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restHwRscEngineMaxLoad.setStatus('mandatory')
restHwRscEngineCurLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restHwRscEngineCurLoad.setStatus('mandatory')
restHwRscEngineSubStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("startupDiagnosticsFailure", 1), ("noWellAndAlive", 2), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restHwRscEngineSubStatus.setStatus('mandatory')
restStatPort = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1))
restStatPortT1mTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1), )
if mibBuilder.loadTexts: restStatPortT1mTable.setStatus('mandatory')
restStatPortT1mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1), ).setIndexNames((0, "STMIB", "restStatPortT1mAddr"), (0, "STMIB", "restStatPortT1mIndex"))
if mibBuilder.loadTexts: restStatPortT1mEntry.setStatus('mandatory')
restStatPortT1mAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortT1mAddr.setStatus('mandatory')
restStatPortT1mIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortT1mIndex.setStatus('mandatory')
restStatPortT1mStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortT1mStartTime.setStatus('mandatory')
restStatPortT1mErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortT1mErrSec.setStatus('mandatory')
restStatPortT1mSevErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortT1mSevErrSec.setStatus('mandatory')
restStatPortT1mBstyErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortT1mBstyErrSec.setStatus('mandatory')
restStatPortT1mUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortT1mUnavailSec.setStatus('mandatory')
restStatPortT1mLostFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortT1mLostFrame.setStatus('mandatory')
restStatPortT1mControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("clearStats", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restStatPortT1mControlMode.setStatus('mandatory')
restStatPortE1mTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2), )
if mibBuilder.loadTexts: restStatPortE1mTable.setStatus('mandatory')
restStatPortE1mEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1), ).setIndexNames((0, "STMIB", "restStatPortE1mAddr"), (0, "STMIB", "restStatPortE1mIndex"))
if mibBuilder.loadTexts: restStatPortE1mEntry.setStatus('mandatory')
restStatPortE1mAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortE1mAddr.setStatus('mandatory')
restStatPortE1mIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortE1mIndex.setStatus('mandatory')
restStatPortE1mStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortE1mStartTime.setStatus('mandatory')
restStatPortE1mErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortE1mErrSec.setStatus('mandatory')
restStatPortE1mSevErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortE1mSevErrSec.setStatus('mandatory')
restStatPortE1mBstyErrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortE1mBstyErrSec.setStatus('mandatory')
restStatPortE1mUnavailSec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortE1mUnavailSec.setStatus('mandatory')
restStatPortE1mLostFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortE1mLostFrame.setStatus('mandatory')
restStatPortE1mControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("clearStats", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restStatPortE1mControlMode.setStatus('mandatory')
restStatPortPktTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3), )
if mibBuilder.loadTexts: restStatPortPktTable.setStatus('mandatory')
restStatPortPktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1), ).setIndexNames((0, "STMIB", "restStatPortPktAddr"))
if mibBuilder.loadTexts: restStatPortPktEntry.setStatus('mandatory')
restStatPortPktAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktAddr.setStatus('mandatory')
restStatPortPktControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("clearStats", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restStatPortPktControlMode.setStatus('mandatory')
restStatPortPktSegmentSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktSegmentSent.setStatus('mandatory')
restStatPortPktSegmentRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktSegmentRecv.setStatus('mandatory')
restStatPortPktOctetSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktOctetSent.setStatus('mandatory')
restStatPortPktOctetRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktOctetRecv.setStatus('mandatory')
restStatPortPktDlciDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktDlciDiscard.setStatus('mandatory')
restStatPortPktBadAddrDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktBadAddrDiscard.setStatus('mandatory')
restStatPortPktOvrszeDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktOvrszeDiscard.setStatus('mandatory')
restStatPortPktUnderszeDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktUnderszeDiscard.setStatus('mandatory')
restStatPortPktCRCDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktCRCDiscard.setStatus('mandatory')
restStatPortPktSwOvrRunDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktSwOvrRunDiscard.setStatus('mandatory')
restStatPortPktUnderRunDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktUnderRunDiscard.setStatus('mandatory')
restStatPortPktAbortDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktAbortDiscard.setStatus('mandatory')
restStatPortPktHwOvrRunDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktHwOvrRunDiscard.setStatus('mandatory')
restStatPortPktLmiSegmentSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktLmiSegmentSent.setStatus('mandatory')
restStatPortPktLmiSegmentRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktLmiSegmentRecv.setStatus('mandatory')
restStatPortPktLmiSyntaxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktLmiSyntaxErr.setStatus('mandatory')
restStatPortPktLmiWrongSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktLmiWrongSeq.setStatus('mandatory')
restStatPortPktLmiPollTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktLmiPollTimeOut.setStatus('mandatory')
restStatPortPktLmiWaitTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktLmiWaitTimeOut.setStatus('mandatory')
restStatPortPktLmiTxSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktLmiTxSeqNum.setStatus('mandatory')
restStatPortPktLmiRxSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktLmiRxSeqNum.setStatus('mandatory')
restStatPortPktLmiNumGoodEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktLmiNumGoodEvents.setStatus('mandatory')
restStatPortPktLmiNumBadEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktLmiNumBadEvents.setStatus('mandatory')
restStatPortPktLmiEventHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortPktLmiEventHistory.setStatus('mandatory')
restStatPortAsmX50Table = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 4), )
if mibBuilder.loadTexts: restStatPortAsmX50Table.setStatus('mandatory')
restStatPortAsmX50Entry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 4, 1), ).setIndexNames((0, "STMIB", "restStatPortAsmX50Addr"))
if mibBuilder.loadTexts: restStatPortAsmX50Entry.setStatus('mandatory')
restStatPortAsmX50Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 4, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortAsmX50Addr.setStatus('mandatory')
restStatPortAsmX50Control = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restStatPortAsmX50Control.setStatus('mandatory')
restStatPortAsmX50RxFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortAsmX50RxFrameErrors.setStatus('mandatory')
restStatPortAsmX50LocalOs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortAsmX50LocalOs.setStatus('mandatory')
restStatPortAsmX50RemoteOs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortAsmX50RemoteOs.setStatus('mandatory')
restStatPortRtmTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 5), )
if mibBuilder.loadTexts: restStatPortRtmTable.setStatus('mandatory')
restStatPortRtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 5, 1), ).setIndexNames((0, "STMIB", "restStatPortRtmAddr"))
if mibBuilder.loadTexts: restStatPortRtmEntry.setStatus('mandatory')
restStatPortRtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 5, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortRtmAddr.setStatus('mandatory')
restStatPortRtmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("clearStats", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restStatPortRtmControl.setStatus('mandatory')
restStatPortRtmUIFarEndBlkErr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortRtmUIFarEndBlkErr.setStatus('mandatory')
restStatPortRtmUINearEndBlkErr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortRtmUINearEndBlkErr.setStatus('mandatory')
restStatPortRtmAdUIFarEndBlkErr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortRtmAdUIFarEndBlkErr.setStatus('mandatory')
restStatPortRtmAdUINrEndBlkErr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortRtmAdUINrEndBlkErr.setStatus('mandatory')
restStatPortRtmOOSTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortRtmOOSTransitions.setStatus('mandatory')
restStatPortAsmVoiceTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 6), )
if mibBuilder.loadTexts: restStatPortAsmVoiceTable.setStatus('mandatory')
restStatPortAsmVoiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 6, 1), ).setIndexNames((0, "STMIB", "restStatPortAsmVoiceChanAddr"))
if mibBuilder.loadTexts: restStatPortAsmVoiceEntry.setStatus('mandatory')
restStatPortAsmVoiceChanAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 6, 1, 1), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortAsmVoiceChanAddr.setStatus('mandatory')
restStatPortAsmVoiceControl = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("clearStats", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restStatPortAsmVoiceControl.setStatus('mandatory')
restStatPortAsmVoiceFrameOOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortAsmVoiceFrameOOSs.setStatus('mandatory')
restStatPortAsmVoiceSignalOOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortAsmVoiceSignalOOSs.setStatus('mandatory')
restStatPortAsmVoiceHighBERs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortAsmVoiceHighBERs.setStatus('mandatory')
restStatPortLgmTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7), )
if mibBuilder.loadTexts: restStatPortLgmTable.setStatus('mandatory')
restStatPortLgmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1), ).setIndexNames((0, "STMIB", "restStatPortLgmAddr"))
if mibBuilder.loadTexts: restStatPortLgmEntry.setStatus('mandatory')
restStatPortLgmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortLgmAddr.setStatus('mandatory')
restStatPortLgmControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restStatPortLgmControlMode.setStatus('mandatory')
restStatPortLgmBadSync = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortLgmBadSync.setStatus('mandatory')
restStatPortLgmOosCount = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortLgmOosCount.setStatus('mandatory')
restStatPortLgmFrameSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortLgmFrameSent.setStatus('mandatory')
restStatPortLgmFrameRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortLgmFrameRecd.setStatus('mandatory')
restStatPortLgmFrameReTx = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortLgmFrameReTx.setStatus('mandatory')
restStatPortLgmFrameNak = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortLgmFrameNak.setStatus('mandatory')
restStatPortLgmSabmSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortLgmSabmSent.setStatus('mandatory')
restStatPortLgmSabmRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortLgmSabmRecd.setStatus('mandatory')
restStatPortLgmRnrSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortLgmRnrSent.setStatus('mandatory')
restStatPortLgmRnrRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortLgmRnrRecd.setStatus('mandatory')
restStatPortDsm = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8))
restStatPortDsmDChTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1), )
if mibBuilder.loadTexts: restStatPortDsmDChTable.setStatus('mandatory')
restStatPortDsmDChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1), ).setIndexNames((0, "STMIB", "restStatPortDsmDChAddr"))
if mibBuilder.loadTexts: restStatPortDsmDChEntry.setStatus('mandatory')
restStatPortDsmDChAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 1), PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortDsmDChAddr.setStatus('mandatory')
restStatPortDsmDChControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("clearStats", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restStatPortDsmDChControlMode.setStatus('mandatory')
restStatPortDsmDChOrigAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortDsmDChOrigAttempts.setStatus('mandatory')
restStatPortDsmDChTermAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortDsmDChTermAttempts.setStatus('mandatory')
restStatPortDsmDChPbxLayer2Errs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortDsmDChPbxLayer2Errs.setStatus('mandatory')
restStatPortDsmDChPbxLayer3Errs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortDsmDChPbxLayer3Errs.setStatus('mandatory')
restStatPortDsmDChPbxLinkResets = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortDsmDChPbxLinkResets.setStatus('mandatory')
restStatPortDsmDChPbxDisconns = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortDsmDChPbxDisconns.setStatus('mandatory')
restStatPortDsmDChPbxUnkExchs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortDsmDChPbxUnkExchs.setStatus('mandatory')
restStatPortDsmDChPbxNoBws = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortDsmDChPbxNoBws.setStatus('mandatory')
restStatPortDsmDChPbxNoCmprs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortDsmDChPbxNoCmprs.setStatus('mandatory')
restStatPortDsmDChPbxNoBchs = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortDsmDChPbxNoBchs.setStatus('mandatory')
restStatPortDsmDChPbxOtherFails = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortDsmDChPbxOtherFails.setStatus('mandatory')
restStatPortDsmDChNetDisconns = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortDsmDChNetDisconns.setStatus('mandatory')
restStatPortDsmDChNetOtherFails = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatPortDsmDChNetOtherFails.setStatus('mandatory')
restStatCh = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2))
restStatChPktTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1), )
if mibBuilder.loadTexts: restStatChPktTable.setStatus('mandatory')
restStatChPktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1), ).setIndexNames((0, "STMIB", "restStatChPktAddr"))
if mibBuilder.loadTexts: restStatChPktEntry.setStatus('mandatory')
restStatChPktAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 1), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktAddr.setStatus('mandatory')
restStatChPktSourceNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 2), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktSourceNodeID.setStatus('mandatory')
restStatChPktSourceChAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 3), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktSourceChAddr.setStatus('mandatory')
restStatChPktDestNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 4), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktDestNodeID.setStatus('mandatory')
restStatChPktDestChAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 5), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktDestChAddr.setStatus('mandatory')
restStatChPktControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("clearStats", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restStatChPktControlMode.setStatus('mandatory')
restStatChPktSegmentsToUser = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktSegmentsToUser.setStatus('mandatory')
restStatChPktSegmentsToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktSegmentsToNetwork.setStatus('mandatory')
restStatChPktYellowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktYellowThreshold.setStatus('mandatory')
restStatChPktRedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktRedThreshold.setStatus('mandatory')
restStatChPktCritThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktCritThreshold.setStatus('mandatory')
restStatChPktPortCongMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("yellow", 2), ("red", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktPortCongMode.setStatus('mandatory')
restStatChPktNetCongMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("yellow", 2), ("red", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktNetCongMode.setStatus('mandatory')
restStatChPktRemoteCongMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("yellow", 2), ("red", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktRemoteCongMode.setStatus('mandatory')
restStatChPktCIRCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktCIRCredit.setStatus('mandatory')
restStatChPktEIRCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktEIRCredit.setStatus('mandatory')
restStatChPktFECNSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktFECNSent.setStatus('mandatory')
restStatChPktBECNSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBECNSent.setStatus('mandatory')
restStatChPktPortCIRSegSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktPortCIRSegSent.setStatus('mandatory')
restStatChPktPortCIRSegRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktPortCIRSegRcv.setStatus('mandatory')
restStatChPktPortEIRSegSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktPortEIRSegSent.setStatus('mandatory')
restStatChPktPortEIRSegRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktPortEIRSegRcv.setStatus('mandatory')
restStatChPktPortCIROctetSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktPortCIROctetSent.setStatus('mandatory')
restStatChPktPortCIROctetRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktPortCIROctetRcv.setStatus('mandatory')
restStatChPktPortEIROctetSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktPortEIROctetSent.setStatus('mandatory')
restStatChPktPortEIROctetRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktPortEIROctetRcv.setStatus('mandatory')
restStatChPktPortCIRSegDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktPortCIRSegDrops.setStatus('mandatory')
restStatChPktPortEIRSegDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktPortEIRSegDrops.setStatus('mandatory')
restStatChPktPortCIROctetDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktPortCIROctetDrops.setStatus('mandatory')
restStatChPktPortEIROctetDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktPortEIROctetDrops.setStatus('mandatory')
restStatChPktNetCIRSegSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktNetCIRSegSent.setStatus('mandatory')
restStatChPktNetCIRSegRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktNetCIRSegRcv.setStatus('mandatory')
restStatChPktNetEIRSegSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktNetEIRSegSent.setStatus('mandatory')
restStatChPktNetEIRSegRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktNetEIRSegRcv.setStatus('mandatory')
restStatChPktNetCIROctetSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktNetCIROctetSent.setStatus('mandatory')
restStatChPktNetCIROctetRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktNetCIROctetRcv.setStatus('mandatory')
restStatChPktNetEIROctetSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktNetEIROctetSent.setStatus('mandatory')
restStatChPktNetEIROctetRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktNetEIROctetRcv.setStatus('mandatory')
restStatChPktNetCIRSegDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktNetCIRSegDrops.setStatus('mandatory')
restStatChPktNetEIRSegDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktNetEIRSegDrops.setStatus('mandatory')
restStatChPktNetCIROctetDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktNetCIROctetDrops.setStatus('mandatory')
restStatChPktNetEIROctetDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktNetEIROctetDrops.setStatus('mandatory')
restStatChPktSegEIRDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktSegEIRDiscard.setStatus('mandatory')
restStatChPktSegSeqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktSegSeqDiscard.setStatus('mandatory')
restStatChPktSegCongPortDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktSegCongPortDiscard.setStatus('mandatory')
restStatChPktSegCongNetDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktSegCongNetDiscard.setStatus('mandatory')
restStatChPktSegExcDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktSegExcDiscard.setStatus('mandatory')
restStatChPktSegUnderszDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktSegUnderszDiscard.setStatus('mandatory')
restStatChPktSegV120ErrDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktSegV120ErrDiscard.setStatus('mandatory')
restStatChPktSegInacPortDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktSegInacPortDiscard.setStatus('mandatory')
restStatChPktSegInacNetDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktSegInacNetDiscard.setStatus('mandatory')
restStatChPktBypTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2), )
if mibBuilder.loadTexts: restStatChPktBypTable.setStatus('mandatory')
restStatChPktBypEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1), ).setIndexNames((0, "STMIB", "restStatChPktBypNodeID"), (0, "STMIB", "restStatChPktBypAddr"))
if mibBuilder.loadTexts: restStatChPktBypEntry.setStatus('mandatory')
restStatChPktBypNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 1), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypNodeID.setStatus('mandatory')
restStatChPktBypAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 2), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypAddr.setStatus('mandatory')
restStatChPktBypSourceNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 3), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypSourceNodeID.setStatus('mandatory')
restStatChPktBypSourceChAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 4), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypSourceChAddr.setStatus('mandatory')
restStatChPktBypDestNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 5), NodeAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypDestNodeID.setStatus('mandatory')
restStatChPktBypDestChAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 6), ChannelAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypDestChAddr.setStatus('mandatory')
restStatChPktBypControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("clearStats", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restStatChPktBypControlMode.setStatus('mandatory')
restStatChPktBypSegmentsToSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypSegmentsToSrc.setStatus('mandatory')
restStatChPktBypSegmentsToDst = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypSegmentsToDst.setStatus('mandatory')
restStatChPktBypYellowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypYellowThreshold.setStatus('mandatory')
restStatChPktBypRedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypRedThreshold.setStatus('mandatory')
restStatChPktBypCritThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypCritThreshold.setStatus('mandatory')
restStatChPktBypInCongMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("yellow", 2), ("red", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypInCongMode.setStatus('mandatory')
restStatChPktBypOutCongMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("yellow", 2), ("red", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypOutCongMode.setStatus('mandatory')
restStatChPktBypInCIRSegSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypInCIRSegSent.setStatus('mandatory')
restStatChPktBypInCIRSegRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypInCIRSegRcv.setStatus('mandatory')
restStatChPktBypInEIRSegSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypInEIRSegSent.setStatus('mandatory')
restStatChPktBypInEIRSegRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypInEIRSegRcv.setStatus('mandatory')
restStatChPktBypInCIROctetSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypInCIROctetSent.setStatus('mandatory')
restStatChPktBypInCIROctetRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypInCIROctetRcv.setStatus('mandatory')
restStatChPktBypInEIROctetSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypInEIROctetSent.setStatus('mandatory')
restStatChPktBypInEIROctetRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypInEIROctetRcv.setStatus('mandatory')
restStatChPktBypInCIRSegDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypInCIRSegDrop.setStatus('mandatory')
restStatChPktBypInEIRSegDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypInEIRSegDrop.setStatus('mandatory')
restStatChPktBypInCIROctetDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypInCIROctetDrop.setStatus('mandatory')
restStatChPktBypInEIROctetDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypInEIROctetDrop.setStatus('mandatory')
restStatChPktBypOutCIRSegSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypOutCIRSegSent.setStatus('mandatory')
restStatChPktBypOutCIRSegRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypOutCIRSegRcv.setStatus('mandatory')
restStatChPktBypOutEIRSegSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypOutEIRSegSent.setStatus('mandatory')
restStatChPktBypOutEIRSegRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypOutEIRSegRcv.setStatus('mandatory')
restStatChPktBypOutCIROctetSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypOutCIROctetSent.setStatus('mandatory')
restStatChPktBypOutCIROctetRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypOutCIROctetRcv.setStatus('mandatory')
restStatChPktBypOutEIROctetSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypOutEIROctetSent.setStatus('mandatory')
restStatChPktBypOutEIROctetRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypOutEIROctetRcv.setStatus('mandatory')
restStatChPktBypOutCIRSegDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypOutCIRSegDrop.setStatus('mandatory')
restStatChPktBypOutEIRSegDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypOutEIRSegDrop.setStatus('mandatory')
restStatChPktBypOutCIROctetDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypOutCIROctetDrop.setStatus('mandatory')
restStatChPktBypOutEIROctetDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypOutEIROctetDrop.setStatus('mandatory')
restStatChPktBypSegSrcEIRDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypSegSrcEIRDisc.setStatus('mandatory')
restStatChPktBypSegDstEIRDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypSegDstEIRDisc.setStatus('mandatory')
restStatChPktBypSegSrcDstConDsc = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypSegSrcDstConDsc.setStatus('mandatory')
restStatChPktBypSegDstSrcConDsc = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypSegDstSrcConDsc.setStatus('mandatory')
restStatChPktBypSegInacSrcDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypSegInacSrcDisc.setStatus('mandatory')
restStatChPktBypSegInacDstDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatChPktBypSegInacDstDisc.setStatus('mandatory')
restStatInl = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 3))
restStatInlTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 3, 1), )
if mibBuilder.loadTexts: restStatInlTable.setStatus('mandatory')
restStatInlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 3, 1, 1), ).setIndexNames((0, "STMIB", "restStatInlNumber"), (0, "STMIB", "restStatInlIndex"))
if mibBuilder.loadTexts: restStatInlEntry.setStatus('mandatory')
restStatInlNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatInlNumber.setStatus('mandatory')
restStatInlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatInlIndex.setStatus('mandatory')
restStatInlStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 3, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: restStatInlStartTime.setStatus('mandatory')
restStatInlPktOctetSent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatInlPktOctetSent.setStatus('mandatory')
restStatInlPktOctetRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatInlPktOctetRcv.setStatus('mandatory')
restStatAd10 = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4))
restStatAd10DataPortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1), )
if mibBuilder.loadTexts: restStatAd10DataPortTable.setStatus('mandatory')
restStatAd10DataPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1), ).setIndexNames((0, "STMIB", "restStatAd10DataPortAddr"))
if mibBuilder.loadTexts: restStatAd10DataPortEntry.setStatus('mandatory')
restStatAd10DataPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 1), Ad10PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10DataPortAddr.setStatus('mandatory')
restStatAd10DataPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clearStats", 1), ("clearBertStats", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restStatAd10DataPortControl.setStatus('mandatory')
restStatAd10DataPortTxTotFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10DataPortTxTotFrames.setStatus('mandatory')
restStatAd10DataPortRxTotFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10DataPortRxTotFrames.setStatus('mandatory')
restStatAd10DataPortRxFrSeqErr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10DataPortRxFrSeqErr.setStatus('mandatory')
restStatAd10DataPortRxFrHdrErr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10DataPortRxFrHdrErr.setStatus('mandatory')
restStatAd10DataPortRxCongDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10DataPortRxCongDisc.setStatus('mandatory')
restStatAd10DataPortTxCongDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10DataPortTxCongDisc.setStatus('mandatory')
restStatAd10DataPortRxBecnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10DataPortRxBecnCount.setStatus('mandatory')
restStatAd10DataPortTxBecnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10DataPortTxBecnCount.setStatus('mandatory')
restStatAd10DataPortTxSCCOvrRun = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10DataPortTxSCCOvrRun.setStatus('mandatory')
restStatAd10DataPortRxSCCUndRun = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10DataPortRxSCCUndRun.setStatus('mandatory')
restStatAd10DataPortTxSCCAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10DataPortTxSCCAbort.setStatus('mandatory')
restStatAd10DataPortTxFrOvrSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10DataPortTxFrOvrSize.setStatus('mandatory')
restStatAd10DataPortTxFifoFlCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10DataPortTxFifoFlCtl.setStatus('mandatory')
restStatAd10DataPortRxMinSegHt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10DataPortRxMinSegHt.setStatus('mandatory')
restStatAd10DataPortBertSynLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10DataPortBertSynLoss.setStatus('mandatory')
restStatAd10DataPortBertByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10DataPortBertByteCnt.setStatus('mandatory')
restStatAd10DataPortBertBitErr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10DataPortBertBitErr.setStatus('mandatory')
restStatAd10VoicePortTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 2), )
if mibBuilder.loadTexts: restStatAd10VoicePortTable.setStatus('mandatory')
restStatAd10VoicePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 2, 1), ).setIndexNames((0, "STMIB", "restStatAd10VoicePortAddr"))
if mibBuilder.loadTexts: restStatAd10VoicePortEntry.setStatus('mandatory')
restStatAd10VoicePortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 2, 1, 1), Ad10PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10VoicePortAddr.setStatus('mandatory')
restStatAd10VoicePortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clearStats", 1), ("clearBertStats", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restStatAd10VoicePortControl.setStatus('mandatory')
restStatAd10VoicePortHber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10VoicePortHber.setStatus('mandatory')
restStatAd10VoicePortSyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10VoicePortSyncLoss.setStatus('mandatory')
restStatAd10VoicePortBertByte = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10VoicePortBertByte.setStatus('mandatory')
restStatAd10VoicePortBertBitErr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10VoicePortBertBitErr.setStatus('mandatory')
restStatAd10PktBandTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3), )
if mibBuilder.loadTexts: restStatAd10PktBandTable.setStatus('mandatory')
restStatAd10PktBandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1), ).setIndexNames((0, "STMIB", "restStatAd10PktBandAddr"))
if mibBuilder.loadTexts: restStatAd10PktBandEntry.setStatus('mandatory')
restStatAd10PktBandAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 1), Ad10PortAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10PktBandAddr.setStatus('mandatory')
restStatAd10PktBandControl = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restStatAd10PktBandControl.setStatus('mandatory')
restStatAd10PktBandTxTotFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10PktBandTxTotFrames.setStatus('mandatory')
restStatAd10PktBandRxTotFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10PktBandRxTotFrames.setStatus('mandatory')
restStatAd10PktBandRxFrErr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10PktBandRxFrErr.setStatus('mandatory')
restStatAd10PktBandRxSCCOvrRun = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10PktBandRxSCCOvrRun.setStatus('mandatory')
restStatAd10PktBandTxSCCUndRun = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10PktBandTxSCCUndRun.setStatus('mandatory')
restStatAd10PktBandRxSCCAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10PktBandRxSCCAbort.setStatus('mandatory')
restStatAd10PktBandRxInvDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10PktBandRxInvDlci.setStatus('mandatory')
restStatAd10PktBandRxFrOvrSize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10PktBandRxFrOvrSize.setStatus('mandatory')
restStatAd10PktBandRxCrcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatAd10PktBandRxCrcErr.setStatus('mandatory')
restStatModule = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 5))
restStatModDsmTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 5, 1), )
if mibBuilder.loadTexts: restStatModDsmTable.setStatus('mandatory')
restStatModDsmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 5, 1, 1), ).setIndexNames((0, "STMIB", "restStatModDsmAddr"))
if mibBuilder.loadTexts: restStatModDsmEntry.setStatus('mandatory')
restStatModDsmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 5, 1, 1, 1), SlotAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatModDsmAddr.setStatus('mandatory')
restStatModDsmControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("clearStats", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restStatModDsmControlMode.setStatus('mandatory')
restStatModDsmRejectOrigCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatModDsmRejectOrigCalls.setStatus('mandatory')
restStatModDsmRejectTermCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restStatModDsmRejectTermCalls.setStatus('mandatory')
alPartitionHeader = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 1))
alPartitionControl = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("validateCRC", 1), ("invalidateCRC", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alPartitionControl.setStatus('mandatory')
alPartitionCRCCheck = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("succeed", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPartitionCRCCheck.setStatus('mandatory')
alPartitionFlushMode = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alPartitionFlushMode.setStatus('mandatory')
alSystemProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 2))
alSysLogSize = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alSysLogSize.setStatus('mandatory')
alSysLogSizeAvailable = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSysLogSizeAvailable.setStatus('mandatory')
alLogTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3), )
if mibBuilder.loadTexts: alLogTable.setStatus('mandatory')
alLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3, 1), ).setIndexNames((0, "STMIB", "alLogIndex"))
if mibBuilder.loadTexts: alLogEntry.setStatus('mandatory')
alLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alLogIndex.setStatus('mandatory')
alLogDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enableNotification", 1), ("disableNotification", 2), ("clearAlarmLog", 3), ("disableLogging", 4), ("clearOverflow", 5)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alLogDiagnostics.setStatus('mandatory')
alLogState = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notificationOn", 1), ("notificationOff", 2), ("notificationOnWoverflow", 3), ("notificationOffWoverflow", 4), ("loggingDisabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alLogState.setStatus('mandatory')
alLogTotalEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alLogTotalEntries.setStatus('mandatory')
alLogAvailableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alLogAvailableEntries.setStatus('mandatory')
alLogNotificationList = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alLogNotificationList.setStatus('mandatory')
alLogClearEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3, 1, 7), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alLogClearEntries.setStatus('mandatory')
alLogPartitionID = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alLogPartitionID.setStatus('mandatory')
alLogRecTable = MibTable((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 4), )
if mibBuilder.loadTexts: alLogRecTable.setStatus('mandatory')
alLogRecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 4, 1), ).setIndexNames((0, "STMIB", "alLogRecIndex"))
if mibBuilder.loadTexts: alLogRecEntry.setStatus('mandatory')
alLogRecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 4, 1, 1), RecordIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alLogRecIndex.setStatus('mandatory')
alLogRecContents = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 4, 1, 2), AlarmRecord()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alLogRecContents.setStatus('mandatory')
alTrapContents = MibScalar((1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10))
if mibBuilder.loadTexts: alTrapContents.setStatus('mandatory')
mibBuilder.exportSymbols("STMIB", restStatPortPktSegmentRecv=restStatPortPktSegmentRecv, restStatChPktBypOutCIROctetDrop=restStatChPktBypOutCIROctetDrop, recfSlotRedundantMode=recfSlotRedundantMode, recfSdmPortSpeed=recfSdmPortSpeed, restNodeAlarmRelayStatus=restNodeAlarmRelayStatus, recfAd10VoicePortFaxMode=recfAd10VoicePortFaxMode, recfPartitionFlushMode=recfPartitionFlushMode, restDsmModRecCDRLogStatus=restDsmModRecCDRLogStatus, restAd10DataPortRtsLoopDelay=restAd10DataPortRtsLoopDelay, restINLLOSMode=restINLLOSMode, recfAsmVoiceTrkGrpLocalSigConf=recfAsmVoiceTrkGrpLocalSigConf, recfAd10TrkGrpAgmPort=recfAd10TrkGrpAgmPort, restStatChPktNetCIRSegDrops=restStatChPktNetCIRSegDrops, recfLgmPortOutbandSuperrate=recfLgmPortOutbandSuperrate, restStatPortE1mLostFrame=restStatPortE1mLostFrame, scVoicePrfNetTable=scVoicePrfNetTable, restStatChPktDestNodeID=restStatChPktDestNodeID, restNodeUploadClientID=restNodeUploadClientID, restStatChPktBypSegSrcDstConDsc=restStatChPktBypSegSrcDstConDsc, recfDsmDChDPNSSUnrecMsgIdle=recfDsmDChDPNSSUnrecMsgIdle, restHwRscEngineMaxSCFs=restHwRscEngineMaxSCFs, recfAsmVoiceTrkGrpSearchDir=recfAsmVoiceTrkGrpSearchDir, scIpAccess=scIpAccess, timeplex=timeplex, recfE1mPortCrcMultiFrame=recfE1mPortCrcMultiFrame, restStatPortPktOctetSent=restStatPortPktOctetSent, restRtmAdPortAdPhasorStatus=restRtmAdPortAdPhasorStatus, recfFrChannelDestNodeID=recfFrChannelDestNodeID, restLgmContentsDestAddr=restLgmContentsDestAddr, recfAd10TrkGrpTable=recfAd10TrkGrpTable, recfAsmVoiceTrkGrpEchoCancel=recfAsmVoiceTrkGrpEchoCancel, scIpOnlineSubnetEntry=scIpOnlineSubnetEntry, recfDsmDChQSigT303=recfDsmDChQSigT303, scVoicePrfNetSignalingType=scVoicePrfNetSignalingType, AsmX50CkAddr=AsmX50CkAddr, recfHwRscEngineApplication=recfHwRscEngineApplication, restChannelLoopbackModAddr=restChannelLoopbackModAddr, restDsmModRecCDREntry=restDsmModRecCDREntry, restNcpAddr=restNcpAddr, restAsmVoicePortChannelAddr=restAsmVoicePortChannelAddr, restChannelStatus=restChannelStatus, restAd10DataPortHdlcLineCode=restAd10DataPortHdlcLineCode, scCmntyRecfTable=scCmntyRecfTable, scCmntyRestStModuleAccess=scCmntyRestStModuleAccess, restSlotModuleSerialNum=restSlotModuleSerialNum, restStatPortDsmDChControlMode=restStatPortDsmDChControlMode, restBundleSignalC=restBundleSignalC, restStatPortAsmVoiceSignalOOSs=restStatPortAsmVoiceSignalOOSs, scVoicePrfNodeTable=scVoicePrfNodeTable, recfHwRscEngineTable=recfHwRscEngineTable, recfNodeClockSwitch=recfNodeClockSwitch, restStatPortPktCRCDiscard=restStatPortPktCRCDiscard, restRtmPortAddr=restRtmPortAddr, restLgmPortRemotePortAddr=restLgmPortRemotePortAddr, recfAd10PktBandUpdate=recfAd10PktBandUpdate, restBundleOutSigA=restBundleOutSigA, restAsmVoicePortBlockSize=restAsmVoicePortBlockSize, restStatChPktSegUnderszDiscard=restStatChPktSegUnderszDiscard, recfModDsmRecCDRLogEntry=recfModDsmRecCDRLogEntry, scCmntyAlmAlarmRecordAccess=scCmntyAlmAlarmRecordAccess, recfBundleSigInversion=recfBundleSigInversion, restDsmModRecCDRLogIndex=restDsmModRecCDRLogIndex, scTrapAccessControlMode=scTrapAccessControlMode, scChProfileInfoAlarmGen=scChProfileInfoAlarmGen, restSafContentsSrcAddr=restSafContentsSrcAddr, recfSdmPortTable=recfSdmPortTable, recfModuleSgmAgPartition=recfModuleSgmAgPartition, scCpiSpeed=scCpiSpeed, restTrkGrpContentsEntry=restTrkGrpContentsEntry, restStatPortAsmVoiceChanAddr=restStatPortAsmVoiceChanAddr, recfBundlePCMLaw=recfBundlePCMLaw, scCmntyAlmTable=scCmntyAlmTable, restChannelConnectTime=restChannelConnectTime, recfFrChannelCIR=recfFrChannelCIR, restStatPortRtmControl=restStatPortRtmControl, restStatPortLgmAddr=restStatPortLgmAddr, recfSlotTable=recfSlotTable, restStatChPktCIRCredit=restStatChPktCIRCredit, restDsmModuleBuffersAvail=restDsmModuleBuffersAvail, restStatAd10VoicePortSyncLoss=restStatAd10VoicePortSyncLoss, restAsmX50CkSbitStatus=restAsmX50CkSbitStatus, scCmntyRecfHwRscAccess=scCmntyRecfHwRscAccess, restStatPortPktLmiEventHistory=restStatPortPktLmiEventHistory, restPortLoopbackDuration=restPortLoopbackDuration, restStatPortLgmRnrSent=restStatPortLgmRnrSent, restTrkGrpAddr=restTrkGrpAddr, restSgmAgAgmPortCapacity=restSgmAgAgmPortCapacity, restStatPortPktTable=restStatPortPktTable, restStatPortPktEntry=restStatPortPktEntry, restStatAd10VoicePortBertByte=restStatAd10VoicePortBertByte, scCmntyAlmAlarmProfileAccess=scCmntyAlmAlarmProfileAccess, restAd10SoftloadFileSize=restAd10SoftloadFileSize, scCmntyRecfAd10PortAccess=scCmntyRecfAd10PortAccess, restPortStatus=restPortStatus, restStatPortLgmFrameNak=restStatPortLgmFrameNak, restDsmDChCallRealCDRContents=restDsmDChCallRealCDRContents, recfRtmAdPortSpeed=recfRtmAdPortSpeed, restRtmPortAdMotherBrdAssmNmb=restRtmPortAdMotherBrdAssmNmb, restStatChPktBypControlMode=restStatChPktBypControlMode, recfModuleAsmTable=recfModuleAsmTable, restAd10PktBandTable=restAd10PktBandTable, scNodeAccessVoicePrfList=scNodeAccessVoicePrfList, restStatPortRtmUINearEndBlkErr=restStatPortRtmUINearEndBlkErr, restStatChPktBypSegInacSrcDisc=restStatChPktBypSegInacSrcDisc, restDsmModRteLocalPortNumber=restDsmModRteLocalPortNumber, recfFrPortAd10PortID=recfFrPortAd10PortID, restStatModDsmRejectOrigCalls=restStatModDsmRejectOrigCalls, restStatPortE1mStartTime=restStatPortE1mStartTime, recfDsmDChPortStartMode=recfDsmDChPortStartMode, restAd10VoicePortWire=restAd10VoicePortWire, Link2Addr=Link2Addr, restRtmPortAdType=restRtmPortAdType, restStatPortE1mControlMode=restStatPortE1mControlMode, recfModuleFsm16Partition=recfModuleFsm16Partition, restSafContentsDestNode=restSafContentsDestNode, scModemAccess=scModemAccess, restStatChPktSourceChAddr=restStatChPktSourceChAddr, scCmntyRestStEntry=scCmntyRestStEntry, scIpDefaultExtGateway=scIpDefaultExtGateway, restDsmDChCallVirtLayer3State=restDsmDChCallVirtLayer3State, recfAsmX50PortTxHouseKbits=recfAsmX50PortTxHouseKbits, scCmntySecEntry=scCmntySecEntry, restSlotModuleDiagnostics=restSlotModuleDiagnostics, restPktChannelTestGenFrSent=restPktChannelTestGenFrSent, recfBundleAttenuationRx=recfBundleAttenuationRx, recfRtmPortPartitionID=recfRtmPortPartitionID, restRtmModuleTable=restRtmModuleTable, restStatChPktBypDestNodeID=restStatChPktBypDestNodeID, restPortType=restPortType, restLgmPortUsedBw=restLgmPortUsedBw, recfE1mPortEntry=recfE1mPortEntry, recfDsmDChBChEntry=recfDsmDChBChEntry, restAd10VoicePortTxLevel=restAd10VoicePortTxLevel, restAd10DataPortBiSyncMinPair=restAd10DataPortBiSyncMinPair, scPartitionFlushMode=scPartitionFlushMode, recfSdmPortFunctions=recfSdmPortFunctions, recfDsmDChQOSTable=recfDsmDChQOSTable, restChannelDirectPathConnect=restChannelDirectPathConnect, restModule=restModule, restStatPortPktControlMode=restStatPortPktControlMode, recfAsmVoiceTrkGrpRemoteNodeID=recfAsmVoiceTrkGrpRemoteNodeID, recfAd10VoicePortUpdate=recfAd10VoicePortUpdate, recfE1mPortTransmitEBit=recfE1mPortTransmitEBit, recfAd10VoicePortSpeed=recfAd10VoicePortSpeed, recfT1mPortTable=recfT1mPortTable, restNodeClockSubStatus=restNodeClockSubStatus, recfAsmX50PortTable=recfAsmX50PortTable, restStatChPktBypSourceChAddr=restStatChPktBypSourceChAddr, recfHwRscEnginePartitionID=recfHwRscEnginePartitionID, scNodeAccessChPrfList=scNodeAccessChPrfList, ChannelAddr=ChannelAddr, restNcpTable=restNcpTable, restSlotModuleIDFormat=restSlotModuleIDFormat, restStatChPktBypInCIROctetDrop=restStatChPktBypInCIROctetDrop, recfSlotModuleSubType=recfSlotModuleSubType, restLgmPortEntry=restLgmPortEntry, RecordIndex=RecordIndex, restAsmX50PortTable=restAsmX50PortTable, scCmntyAccessControlMode=scCmntyAccessControlMode, restRtmPortAdRamSize=restRtmPortAdRamSize, restSlotHWModuleType=restSlotHWModuleType, recfFrame=recfFrame, recfFrChannelCirTransPriority=recfFrChannelCirTransPriority, recfFrPortDeviceType=recfFrPortDeviceType, recfAsmVoiceTrkGrpPort=recfAsmVoiceTrkGrpPort, restAsmVoicePortPacket=restAsmVoicePortPacket, restSlotEntry=restSlotEntry, scCmntyAccessEntry=scCmntyAccessEntry, restINLRemoteBERQuality=restINLRemoteBERQuality, recfAsmX50CkSbitConnectState=recfAsmX50CkSbitConnectState, restRtmAdPortAdFunctions=restRtmAdPortAdFunctions, restSafOosErrors=restSafOosErrors, restStatPortT1mAddr=restStatPortT1mAddr, restAd10SoftloadTransferred=restAd10SoftloadTransferred, restAd10PktBandMaxBandwidth=restAd10PktBandMaxBandwidth, restRtmAdPortDiagnostics=restRtmAdPortDiagnostics, recfDsmDChQOSIndex=recfDsmDChQOSIndex, restDsmModRecCDRTable=restDsmModRecCDRTable, restAsmVoicePortTable=restAsmVoicePortTable, recfAsmVoiceTrkGrpTxAudSrcMode=recfAsmVoiceTrkGrpTxAudSrcMode, restAd10DataPortAsyncSubChar=restAd10DataPortAsyncSubChar, recfTDMChannelDeviceType=recfTDMChannelDeviceType, recfRtmAdPortCommMode=recfRtmAdPortCommMode, restPortLoopbackStatus=restPortLoopbackStatus, scCmntyRecfNodeAccess=scCmntyRecfNodeAccess, restStatAd10PktBandRxSCCOvrRun=restStatAd10PktBandRxSCCOvrRun, recfClockEntry=recfClockEntry, recfTDMChannelProfile=recfTDMChannelProfile, restSafFrameSwitchLocation=restSafFrameSwitchLocation, restAd10TdmMuxSwitchStatus=restAd10TdmMuxSwitchStatus, restRtmAdPortParSubstitution=restRtmAdPortParSubstitution, scSysNodeTime=scSysNodeTime, restAd10NetworkInterface=restAd10NetworkInterface, restTrunkGroup=restTrunkGroup, restStatChPktBypInEIROctetDrop=restStatChPktBypInEIROctetDrop, restRtmAdPortContention=restRtmAdPortContention, restNodeDiagnostics=restNodeDiagnostics, restFsmCirTotal=restFsmCirTotal, restNodeClockSourceType=restNodeClockSourceType, restNcpFlashObjectVersions=restNcpFlashObjectVersions, scNodeAccessEntry=scNodeAccessEntry, recfBundleTable=recfBundleTable, restDsmDChCallRealTransitState=restDsmDChCallRealTransitState, restNodeClockSourcePort=restNodeClockSourcePort, scCmntyRecfBundleAccess=scCmntyRecfBundleAccess, scModemControlUpdate=scModemControlUpdate, restNestStatus=restNestStatus, restStatAd10PktBandAddr=restStatAd10PktBandAddr, recfLgmPortArq=recfLgmPortArq, recfFrPortLmiPollingTimer=recfFrPortLmiPollingTimer, restAsmVoicePortSubratePhasor=restAsmVoicePortSubratePhasor, restPortCapabilities=restPortCapabilities, recfDsmDChBChDirection=recfDsmDChBChDirection, scCmntyRestStAd10Access=scCmntyRestStAd10Access, recfSlotModuleDesc=recfSlotModuleDesc, restSgmAgAgmScfTotal=restSgmAgAgmScfTotal, recfAd10VoicePortEntry=recfAd10VoicePortEntry, restINLBusFrameMode=restINLBusFrameMode, restSafSWPhasorStatus=restSafSWPhasorStatus, restDsmModule=restDsmModule, recfTDMChannelUpdate=recfTDMChannelUpdate, restSlotModuleFailureType=restSlotModuleFailureType, restLgmContentsEntry=restLgmContentsEntry, scCpiControl=scCpiControl, restDsmDChCallVirtDiagnostics=restDsmDChCallVirtDiagnostics, restAsmVoicePortFaxRelay=restAsmVoicePortFaxRelay, restAd10PktBandCurBandwidth=restAd10PktBandCurBandwidth, restNodeCondition=restNodeCondition, restNodeTestGenTDMChannel=restNodeTestGenTDMChannel, restPortDiagnostics=restPortDiagnostics, scSysNodeMasterClockPriority=scSysNodeMasterClockPriority, restRtmAdPortParity=restRtmAdPortParity, recfModuleFsm64Entry=recfModuleFsm64Entry, restStatPortPktUnderRunDiscard=restStatPortPktUnderRunDiscard, restBundleTable=restBundleTable, PortAddr=PortAddr, scCmntyAlmPartHeader=scCmntyAlmPartHeader, restBundleMillwattSignalABCD=restBundleMillwattSignalABCD, recfDsmDChDPNSSNT2=recfDsmDChDPNSSNT2, restDsmModuleNumCallsProc=restDsmModuleNumCallsProc, restAsmX50CkAddr=restAsmX50CkAddr, recfDsmDChQOSLowBChan=recfDsmDChQOSLowBChan, restFsmDlciTotal=restFsmDlciTotal, restNodeCpiStatus=restNodeCpiStatus, scSysNodeControl=scSysNodeControl, restDsmDChCallVirtLayer2State=restDsmDChCallVirtLayer2State, restStatChPktPortCIROctetRcv=restStatChPktPortCIROctetRcv, recfRtmPortType=recfRtmPortType, restINLEntry=restINLEntry, restAsmModApplEnginesRsvd=restAsmModApplEnginesRsvd, recfClockUpdate=recfClockUpdate, recfSdmPortKGMode=recfSdmPortKGMode, restAsmModApplType=restAsmModApplType, scSysNodeCpiPasswordLevel1=scSysNodeCpiPasswordLevel1)
mibBuilder.exportSymbols("STMIB", recfFrPortStartMode=recfFrPortStartMode, restStatPortAsmX50LocalOs=restStatPortAsmX50LocalOs, scCmntyRecfINLAccess=scCmntyRecfINLAccess, recfE1mPortTable=recfE1mPortTable, restFsmBandwidthAvail=restFsmBandwidthAvail, restRtmAdPortStopBits=restRtmAdPortStopBits, recfSlotModuleBgdDiagMaskExt=recfSlotModuleBgdDiagMaskExt, restStatPortDsmDChPbxUnkExchs=restStatPortDsmDChPbxUnkExchs, restStatPortDsmDChTermAttempts=restStatPortDsmDChTermAttempts, alLogClearEntries=alLogClearEntries, restAsmModuleAvailEngines=restAsmModuleAvailEngines, restStatChPktBypSegmentsToSrc=restStatChPktBypSegmentsToSrc, restChannelBandwidth=restChannelBandwidth, recfINLRemoteINLID=recfINLRemoteINLID, restSlotModuleDateMade=restSlotModuleDateMade, recfBundleOOSBitPattern=recfBundleOOSBitPattern, scCmntyRestDsmPortAccess=scCmntyRestDsmPortAccess, recfDsmDChQSigAddr=recfDsmDChQSigAddr, recfDsmDChQOSEntry=recfDsmDChQOSEntry, alPartitionControl=alPartitionControl, scVoicePrfNodeSubratePhSize=scVoicePrfNodeSubratePhSize, recfDsmDChExchTable=recfDsmDChExchTable, restAsmX50CkDiagnostics=restAsmX50CkDiagnostics, restAd10DataPortHdlcCrcType=restAd10DataPortHdlcCrcType, recfLink2TraIndex=recfLink2TraIndex, recfSlotAddr=recfSlotAddr, scSoftloadControl=scSoftloadControl, recfINLOOSTimer=recfINLOOSTimer, scCmntyMib2Table=scCmntyMib2Table, scNodeAccessLink2TraEntriesMin=scNodeAccessLink2TraEntriesMin, restAd10AgmPortEntry=restAd10AgmPortEntry, recfT1mPortUpdate=recfT1mPortUpdate, restNcpFlashCompressIndicator=restNcpFlashCompressIndicator, restStatChPktBECNSent=restStatChPktBECNSent, restDsmModuleAddr=restDsmModuleAddr, recfSlotModuleDiagoseMode=recfSlotModuleDiagoseMode, recfSlotEntry=recfSlotEntry, scSysNodeDefaultRoot=scSysNodeDefaultRoot, restAsmVoicePortDTMFRelay=restAsmVoicePortDTMFRelay, restStatPortAsmVoiceTable=restStatPortAsmVoiceTable, restStatPortPktLmiRxSeqNum=restStatPortPktLmiRxSeqNum, restNodeTestGenType=restNodeTestGenType, scNodeAccessLink2TraEntriesMax=scNodeAccessLink2TraEntriesMax, scCmntyRestNestAccess=scCmntyRestNestAccess, restChannelNodalSubratePath=restChannelNodalSubratePath, NodeAddr=NodeAddr, recfFrChannelEntry=recfFrChannelEntry, restAd10PktBandEntry=restAd10PktBandEntry, restNodeSoftloadTotal=restNodeSoftloadTotal, recfDsmDChPortPbxProtocol=recfDsmDChPortPbxProtocol, restStatChPktSegInacPortDiscard=restStatChPktSegInacPortDiscard, restLgmModuleTotalSCFs=restLgmModuleTotalSCFs, scSysNodeType=scSysNodeType, restStatPortAsmVoiceHighBERs=restStatPortAsmVoiceHighBERs, recfAd10AgmPortStartMode=recfAd10AgmPortStartMode, alTrapContents=alTrapContents, recfT1mPortSevereThreshold=recfT1mPortSevereThreshold, restNestActiveLeft=restNestActiveLeft, restStatChPktBypTable=restStatChPktBypTable, scChProfileRetryTimer=scChProfileRetryTimer, recfModuleFsm16Addr=recfModuleFsm16Addr, recfT1mPortFraming=recfT1mPortFraming, recfDsmDChQSigK=recfDsmDChQSigK, restDsmModuleBypassFactor=restDsmModuleBypassFactor, restAsmEngineTable=restAsmEngineTable, restPortCondition=restPortCondition, recfAd10TrkGrpAddr=recfAd10TrkGrpAddr, scVoicePrfNetVocoderEnable=scVoicePrfNetVocoderEnable, restStatPortPktBadAddrDiscard=restStatPortPktBadAddrDiscard, restHwRsc=restHwRsc, scCmntyRestIndex=scCmntyRestIndex, restStatChPktNetCIRSegSent=restStatChPktNetCIRSegSent, restINLLocalBERQuality=restINLLocalBERQuality, restStatInlStartTime=restStatInlStartTime, recfAsmVoiceTrkGrpAddr=recfAsmVoiceTrkGrpAddr, recfAd10DataPortType=recfAd10DataPortType, restNodeClockSourcePriority=restNodeClockSourcePriority, recfModuleAsmApplType=recfModuleAsmApplType, restAsmModuleTotalEngines=restAsmModuleTotalEngines, recfDsmDChQSigT200=recfDsmDChQSigT200, recfDsmDChDPNSSEntry=recfDsmDChDPNSSEntry, restChannelSubStatus=restChannelSubStatus, recfAsmVoiceTrkGrpTxPCMGain=recfAsmVoiceTrkGrpTxPCMGain, scCmntyRestPortAccess=scCmntyRestPortAccess, scSysNodeCpiSessionTimeOut=scSysNodeCpiSessionTimeOut, restAsmModApplModuleAddr=restAsmModApplModuleAddr, restAd10AgmPortControl=restAd10AgmPortControl, restAsmVoicePortFrameLOS=restAsmVoicePortFrameLOS, restStatChPktSegInacNetDiscard=restStatChPktSegInacNetDiscard, restAsmX50PortEntry=restAsmX50PortEntry, recfDsmDChPortPartitionID=recfDsmDChPortPartitionID, restStatChPktBypYellowThreshold=restStatChPktBypYellowThreshold, restPktChannelTestGenStatus=restPktChannelTestGenStatus, restStatPortDsmDChPbxLayer3Errs=restStatPortDsmDChPbxLayer3Errs, restFsmVciCtrlBlkTotal=restFsmVciCtrlBlkTotal, restNestEntry=restNestEntry, restDsmModExchCallNumber=restDsmModExchCallNumber, recfFrPortPartitionID=recfFrPortPartitionID, restDsmModuleNumRmtRteEntries=restDsmModuleNumRmtRteEntries, reStatistics=reStatistics, restAd10VoicePortAddr=restAd10VoicePortAddr, restNodeErrorMinutes=restNodeErrorMinutes, scVoicePrfNodeNonLinear=scVoicePrfNodeNonLinear, restAsmEngineDiagnostics=restAsmEngineDiagnostics, restStatPortDsmDChOrigAttempts=restStatPortDsmDChOrigAttempts, restStatChPktPortEIROctetRcv=restStatChPktPortEIROctetRcv, scVoicePrfNodeTxPCMGain=scVoicePrfNodeTxPCMGain, recfBundleContentionSet=recfBundleContentionSet, restAsmModuleTable=restAsmModuleTable, restNestClockReference2=restNestClockReference2, recfClockType=recfClockType, restAd10DataPortTDMDataRate=restAd10DataPortTDMDataRate, scCmntyRestAsmPortAccess=scCmntyRestAsmPortAccess, restStatChPktPortEIRSegDrops=restStatChPktPortEIRSegDrops, recfE1mPortInternationalBit=recfE1mPortInternationalBit, restAd10VoicePortAc15Dial=restAd10VoicePortAc15Dial, restRtmPortAdSerialNmb=restRtmPortAdSerialNmb, scCmntyRecfDsmPortAccess=scCmntyRecfDsmPortAccess, scLgmStaticRouteTable=scLgmStaticRouteTable, restAd10VoicePortRcvLevel=restAd10VoicePortRcvLevel, restNcpFlashFileVersionNumber=restNcpFlashFileVersionNumber, restAsmEngineEntry=restAsmEngineEntry, restAd10DataPortBiSyncParity=restAd10DataPortBiSyncParity, recfModule=recfModule, restNodeStatus=restNodeStatus, restRtmAdPortGeneration=restRtmAdPortGeneration, restStatChPktPortCIRSegSent=restStatChPktPortCIRSegSent, reStatus=reStatus, scCommunityalMap=scCommunityalMap, restRtmPort=restRtmPort, scCmntyAlmAlarmLogAccess=scCmntyAlmAlarmLogAccess, recfAd10DataPortAddr=recfAd10DataPortAddr, restAd10AgmPortCpTermType=restAd10AgmPortCpTermType, restStatChPktSegExcDiscard=restStatChPktSegExcDiscard, recfBundleBusyOutTimer=recfBundleBusyOutTimer, restStatChPktBypOutCIRSegSent=restStatChPktBypOutCIRSegSent, restStatAd10PktBandRxInvDlci=restStatAd10PktBandRxInvDlci, recfAsmVoiceTrkGrpSignalingType=recfAsmVoiceTrkGrpSignalingType, restAsmModuleTotalSafScfs=restAsmModuleTotalSafScfs, restAsmX50Table=restAsmX50Table, recfDsmDChBChBundle=recfDsmDChBChBundle, restSafRemoteStatus=restSafRemoteStatus, restStatAd10PktBandTxTotFrames=restStatAd10PktBandTxTotFrames, scIpSlipAddress=scIpSlipAddress, restFsmEntry=restFsmEntry, recfAd10VoicePortDBAMode=recfAd10VoicePortDBAMode, restAd10DataPortDiagnostics=restAd10DataPortDiagnostics, restStatAd10PktBandTxSCCUndRun=restStatAd10PktBandTxSCCUndRun, restStatPortDsmDChTable=restStatPortDsmDChTable, reConfig=reConfig, recfPartitionHeader=recfPartitionHeader, restSgmAgAgmCcfTotal=restSgmAgAgmCcfTotal, restHwRscEngineMaxPorts=restHwRscEngineMaxPorts, restINLContentsSourceAddr=restINLContentsSourceAddr, alLogTable=alLogTable, restFsmDlciConfig=restFsmDlciConfig, restStatChPktSegEIRDiscard=restStatChPktSegEIRDiscard, restAsmX50CkPhasorStatus=restAsmX50CkPhasorStatus, restLgmModuleAddr=restLgmModuleAddr, recfAsmVoiceTrkGrpRxPCMGain=recfAsmVoiceTrkGrpRxPCMGain, recfBundleAddr=recfBundleAddr, restAd10DataPortDcdSig=restAd10DataPortDcdSig, restAd10DataPortVcMapCir=restAd10DataPortVcMapCir, recfDsmDChQSigT305=recfDsmDChQSigT305, scSysNodeDate=scSysNodeDate, restPktChannelTable=restPktChannelTable, recfFrPortErrorThreshold=recfFrPortErrorThreshold, restDsmModuleNumDsmComms=restDsmModuleNumDsmComms, recfDsmDChQSigT308=recfDsmDChQSigT308, restNodeSoftloadSoftwareType=restNodeSoftloadSoftwareType, restFsmBuffersAvail=restFsmBuffersAvail, restStatChPktSegV120ErrDiscard=restStatChPktSegV120ErrDiscard, scPartitionControl=scPartitionControl, restPktChannelPingNumTimes=restPktChannelPingNumTimes, alLogIndex=alLogIndex, Ad10PortAddr=Ad10PortAddr, scModemSpeed=scModemSpeed, scCommunityTable=scCommunityTable, scRootAccessControlMode=scRootAccessControlMode, recfLgmPortUpdate=recfLgmPortUpdate, restNodeSoftloadSize=restNodeSoftloadSize, restAd10DataPortHdlcIdleFill=restAd10DataPortHdlcIdleFill, restSafStatus=restSafStatus, restAsmEngineNumSCFs=restAsmEngineNumSCFs, restStatPortLgmSabmRecd=restStatPortLgmSabmRecd, restStatChPktControlMode=restStatChPktControlMode, restPktChPingAddr=restPktChPingAddr, recfFrChannelOrig=recfFrChannelOrig, restNodeNumOfNest=restNodeNumOfNest, restAd10DataPortBiSyncIdleFill=restAd10DataPortBiSyncIdleFill, restAd10DataPortBiSyncSyncChar=restAd10DataPortBiSyncSyncChar, restStatAd10PktBandRxFrErr=restStatAd10PktBandRxFrErr, scIpRootGatewayIp=scIpRootGatewayIp, restStatPortE1mBstyErrSec=restStatPortE1mBstyErrSec, restStatAd10DataPortTxSCCAbort=restStatAd10DataPortTxSCCAbort, restStatPortT1mIndex=restStatPortT1mIndex, recfDsmDChDPNSSNL=recfDsmDChDPNSSNL, scSoftloadFileName=scSoftloadFileName, restTrkGrpContentsDstNodeID=restTrkGrpContentsDstNodeID, restINLLoopbackStatus=restINLLoopbackStatus, recfSdmPortLoopbackSupport=recfSdmPortLoopbackSupport, recfAd10DataPortTable=recfAd10DataPortTable, restNestClockReference1=restNestClockReference1, restSgmAgAgmCcfAvail=restSgmAgAgmCcfAvail, restAd10SoftloadCompletionTime=restAd10SoftloadCompletionTime, restAsmModuleAddr=restAsmModuleAddr, restStatChPktTable=restStatChPktTable, restNcpFlashIndex=restNcpFlashIndex, restAsmModApplEnginesUsed=restAsmModApplEnginesUsed, restStatPortE1mSevErrSec=restStatPortE1mSevErrSec, restStatPortAsmVoiceEntry=restStatPortAsmVoiceEntry, recfLgmPortSyncLevel=recfLgmPortSyncLevel, recfSdmPortFailToggleRequest=recfSdmPortFailToggleRequest, restAsmX50PortRxHouseKbits=restAsmX50PortRxHouseKbits, restDsmModuleTotalProcessUnits=restDsmModuleTotalProcessUnits, recfTDMChannelControlMode=recfTDMChannelControlMode, recfT1mPortErrorThreshold=recfT1mPortErrorThreshold, restAd10Port=restAd10Port, scCmntyRecfEntry=scCmntyRecfEntry, restNodeEntry=restNodeEntry, recfTDMChannelAddr=recfTDMChannelAddr, restBundleDiagnostics=restBundleDiagnostics, scCpiDataBits=scCpiDataBits, restStatChPktSegmentsToUser=restStatChPktSegmentsToUser, recfT1mPortEntry=recfT1mPortEntry, restDsmDChCallRealEntry=restDsmDChCallRealEntry, restLgmContentsSourceNodeID=restLgmContentsSourceNodeID, restHwRscEngineID=restHwRscEngineID, recfLink2TraL2Addr=recfLink2TraL2Addr, recfAvailResourceId=recfAvailResourceId, restAd10AgmPortTable=restAd10AgmPortTable, restDsmModRecCDRLogTable=restDsmModRecCDRLogTable, recfModuleFsm64Partition=recfModuleFsm64Partition, restAsmVoice=restAsmVoice, restAsmX50CkTable=restAsmX50CkTable, recfSlotModuleMaxBypass=recfSlotModuleMaxBypass, recfClockQuality=recfClockQuality, restDsmDChPortEntry=restDsmDChPortEntry, scCmntyRestINLAccess=scCmntyRestINLAccess, recfSdmPortTxClockSource=recfSdmPortTxClockSource, restDsmModRtePartition=restDsmModRtePartition, recfRtmPortUpdate=recfRtmPortUpdate, scIpControl=scIpControl, restDsmModRteAddr=restDsmModRteAddr, recfLgmPortGroup=recfLgmPortGroup, restAsmModuleAvailSafScfs=restAsmModuleAvailSafScfs, st50=st50, scCommunityName=scCommunityName, restSgmAgEntry=restSgmAgEntry, restStatPortT1mTable=restStatPortT1mTable, restStatPortRtmAdUIFarEndBlkErr=restStatPortRtmAdUIFarEndBlkErr, recfSdmPortStartMode=recfSdmPortStartMode, scCommunityControlMode=scCommunityControlMode, restAsmModApplCurPortsAllocated=restAsmModApplCurPortsAllocated)
mibBuilder.exportSymbols("STMIB", scCmntySecSystemProfileAccess=scCmntySecSystemProfileAccess, restAd10VoicePortEMPolarity=restAd10VoicePortEMPolarity, restNcpFlashFileSize=restNcpFlashFileSize, restRtmAdPortForcedFunc=restRtmAdPortForcedFunc, recfBundleBwCntIdlePattern=recfBundleBwCntIdlePattern, scTrapAccessTable=scTrapAccessTable, recfT1mPortOOSBSignaling=recfT1mPortOOSBSignaling, restFsmBypChanTotal=restFsmBypChanTotal, recfClockIndex=recfClockIndex, restStatChPktBypSegmentsToDst=restStatChPktBypSegmentsToDst, restChannelDChTermNode=restChannelDChTermNode, restStatPortLgmFrameSent=restStatPortLgmFrameSent, recfModuleDsmActiveLev1CDRMode=recfModuleDsmActiveLev1CDRMode, restStatChPktSegCongPortDiscard=restStatChPktSegCongPortDiscard, restDsmDChPortDiagnostics=restDsmDChPortDiagnostics, recfSlotUpdate=recfSlotUpdate, restStatChPktBypOutCIRSegDrop=restStatChPktBypOutCIRSegDrop, restBundleEntry=restBundleEntry, recfSdmPortUpdate=recfSdmPortUpdate, recfAd10PktBandDBAMode=recfAd10PktBandDBAMode, scLgmStaticRouteNextIafHop=scLgmStaticRouteNextIafHop, restNodeMasterClockPriority=restNodeMasterClockPriority, recfT1mPortSigInversion=recfT1mPortSigInversion, restStatPortAsmVoiceControl=restStatPortAsmVoiceControl, restStatPortLgmBadSync=restStatPortLgmBadSync, restStatPortT1mUnavailSec=restStatPortT1mUnavailSec, recfSdmPortSatelliteBuffer=recfSdmPortSatelliteBuffer, restDsmModuleEntry=restDsmModuleEntry, restLgmPort=restLgmPort, restStatPortDsmDChPbxNoCmprs=restStatPortDsmDChPbxNoCmprs, scCmntySecRootAccess=scCmntySecRootAccess, restStatPortPktLmiSyntaxErr=restStatPortPktLmiSyntaxErr, alLogPartitionID=alLogPartitionID, restTrkGrpContentsSrcChAddr=restTrkGrpContentsSrcChAddr, restSgmAgSafAvail=restSgmAgSafAvail, scIpRootGatewayEthernet=scIpRootGatewayEthernet, restFsmPortSpeedAvail=restFsmPortSpeedAvail, restAsmVoicePortSignalingLOS=restAsmVoicePortSignalingLOS, restINLRemoteINLID=restINLRemoteINLID, restSlotModuleCondition=restSlotModuleCondition, restSlotHWModuleSubType=restSlotHWModuleSubType, restLgmContentsSequenceID=restLgmContentsSequenceID, restStatChPktEIRCredit=restStatChPktEIRCredit, scRootAccessIndex=scRootAccessIndex, restStatChPktBypInEIROctetSent=restStatChPktBypInEIROctetSent, recfDsmDChQSigT304=recfDsmDChQSigT304, scVoicePrfNetFaxNSFMode=scVoicePrfNetFaxNSFMode, restDsmModRecCDRLogAddr=restDsmModRecCDRLogAddr, recfINLTable=recfINLTable, restINLNumTdmCh=restINLNumTdmCh, restPortMappedPhy=restPortMappedPhy, scCmntyRestStTable=scCmntyRestStTable, recfFrPortAd10NodeID=recfFrPortAd10NodeID, restAd10AgmPortCpMode=restAd10AgmPortCpMode, restRtmPortAdCpMode=restRtmPortAdCpMode, restPortLoopbackType=restPortLoopbackType, recfAd10PktBandEntry=recfAd10PktBandEntry, restChannelPath=restChannelPath, scVoicePrfNetControlMode=scVoicePrfNetControlMode, recfNodeAlarmRelay=recfNodeAlarmRelay, restStatChPktPortEIRSegSent=restStatChPktPortEIRSegSent, recfAd10TrkGrpPartitionID=recfAd10TrkGrpPartitionID, scSoftloadSoftwareType=scSoftloadSoftwareType, recfModuleAsmPartition=recfModuleAsmPartition, AlarmRecord=AlarmRecord, recfLink2TraEntry=recfLink2TraEntry, recfAd10PktBandStartMode=recfAd10PktBandStartMode, restINLDiagnostics=restINLDiagnostics, restDsmModRecCDRLogNum=restDsmModRecCDRLogNum, restSafRemoteAddr=restSafRemoteAddr, restAd10AgmPortAddr=restAd10AgmPortAddr, restStatChPktNetCIRSegRcv=restStatChPktNetCIRSegRcv, scSystemProfile=scSystemProfile, recfLgmPortPartitionID=recfLgmPortPartitionID, recfINLEntry=recfINLEntry, recfFrPortBillingControl=recfFrPortBillingControl, scCmntyRecfTranslationAccess=scCmntyRecfTranslationAccess, restAsmModApplEntry=restAsmModApplEntry, recfAsmVoiceTrkGrpRemoteSigConf=recfAsmVoiceTrkGrpRemoteSigConf, restStatPortPktUnderszeDiscard=restStatPortPktUnderszeDiscard, recfFrPortAllocationPref=recfFrPortAllocationPref, recfE1mPortOOSCDSignaling=recfE1mPortOOSCDSignaling, recfE1mPortFailThreshold=recfE1mPortFailThreshold, restAd10DataPortPktBuildTimeOut=restAd10DataPortPktBuildTimeOut, restStatAd10DataPortTxBecnCount=restStatAd10DataPortTxBecnCount, recfNodeEntry=recfNodeEntry, restNodeMasterClockMsg=restNodeMasterClockMsg, recfTDMChannelSpecialProfile=recfTDMChannelSpecialProfile, restRtmAdPortPhasorStatus=restRtmAdPortPhasorStatus, restStatPortE1mUnavailSec=restStatPortE1mUnavailSec, restDsmModRecCDRLogLev2Entries=restDsmModRecCDRLogLev2Entries, restTrkGrpContentsSrcTrkGrpAddr=restTrkGrpContentsSrcTrkGrpAddr, recfDsmDChQSigT322=recfDsmDChQSigT322, recfE1mPortSigInversion=recfE1mPortSigInversion, recfDsmDChQSigEntry=recfDsmDChQSigEntry, recfFrChannelTable=recfFrChannelTable, recfAd10PktBandBaudRate=recfAd10PktBandBaudRate, recfLgmPortAddr=recfLgmPortAddr, restStatChPktCritThreshold=restStatChPktCritThreshold, scVoicePrfNetEntry=scVoicePrfNetEntry, recfAd10AgmPortSpeed=recfAd10AgmPortSpeed, recfSdmPortType=recfSdmPortType, scCmntySecLGMRoutingAccess=scCmntySecLGMRoutingAccess, restStatChPktNetCIROctetRcv=restStatChPktNetCIROctetRcv, restStatChPktBypOutEIRSegDrop=restStatChPktBypOutEIRSegDrop, recfFrPortSharedZeroFlag=recfFrPortSharedZeroFlag, restLgmPortLgmPort=restLgmPortLgmPort, restRtm=restRtm, restDsmModRecCDRAddr=restDsmModRecCDRAddr, recfModuleAsmEntry=recfModuleAsmEntry, recfAsmX50PortOosTimer=recfAsmX50PortOosTimer, restStatChPktBypOutCIROctetSent=restStatChPktBypOutCIROctetSent, restAsmVoicePortEngine=restAsmVoicePortEngine, recfClockPriority=recfClockPriority, restHwRscEngineMaxLoad=restHwRscEngineMaxLoad, recfFrChannelState=recfFrChannelState, restDsmModExchCallNumLen=restDsmModExchCallNumLen, recfAsmX50CkSpeed=recfAsmX50CkSpeed, recfAsmVoiceTrkGrpDTMFRelay=recfAsmVoiceTrkGrpDTMFRelay, restChannelRetryCounter=restChannelRetryCounter, restTrkGrpContentsSequenceID=restTrkGrpContentsSequenceID, scIpOfflineSubnetControl=scIpOfflineSubnetControl, restAd10VoicePortMode=restAd10VoicePortMode, recfINLMaxTDMDS0=recfINLMaxTDMDS0, recfTDMChannelState=recfTDMChannelState, restAsmX50PortAggrStatus=restAsmX50PortAggrStatus, restLgmModuleAvailSCFs=restLgmModuleAvailSCFs, scVoicePrfNodePCMPhasorSize=scVoicePrfNodePCMPhasorSize, scLgmStaticRouteNode=scLgmStaticRouteNode, recfSdmPortEntry=recfSdmPortEntry, recfDsmDChPortEntry=recfDsmDChPortEntry, scSysNodeCpiProfileUpdate=scSysNodeCpiProfileUpdate, restStatChPktBypInCIRSegDrop=restStatChPktBypInCIRSegDrop, recfLgmPortOosTimer=recfLgmPortOosTimer, recfAsmVoiceTrkGrpRxAudOutMode=recfAsmVoiceTrkGrpRxAudOutMode, recfAd10DataPortStartMode=recfAd10DataPortStartMode, restStatPortAsmX50RemoteOs=restStatPortAsmX50RemoteOs, recfModuleDsmRecordLev1CDRMode=recfModuleDsmRecordLev1CDRMode, restSlotTable=restSlotTable, restStatAd10PktBandEntry=restStatAd10PktBandEntry, restChannelDChTermAddr=restChannelDChTermAddr, restRtmModuleSafsAvail=restRtmModuleSafsAvail, alLogRecContents=alLogRecContents, restStatChPktNetEIRSegDrops=restStatChPktNetEIRSegDrops, restDsmModRteExchCodeLen=restDsmModRteExchCodeLen, restRtmAdPortEntry=restRtmAdPortEntry, recfDsmIDCPortEntry=recfDsmIDCPortEntry, restDsmDChCallRealTable=restDsmDChCallRealTable, restAd10VoicePortTelcoIntType=restAd10VoicePortTelcoIntType, restAsmModApplAvailLicenses=restAsmModApplAvailLicenses, scCommunityEntry=scCommunityEntry, restAd10VoicePortDiagnostics=restAd10VoicePortDiagnostics, restNestLxmCkt2Status=restNestLxmCkt2Status, restStatChPktEntry=restStatChPktEntry, recfNestAddr=recfNestAddr, scChProfileIndex=scChProfileIndex, restLgmPortRemoteRevision=restLgmPortRemoteRevision, recfFrChannelDestCheckMode=recfFrChannelDestCheckMode, recfAd10TrkGrpRemoteAddr=recfAd10TrkGrpRemoteAddr, restDsmModuleVciCtrlBlkTotal=restDsmModuleVciCtrlBlkTotal, restDsmPort=restDsmPort, scChProfilePriority=scChProfilePriority, recfLgmPortEncryption=recfLgmPortEncryption, restDsmModuleBypChanAvail=restDsmModuleBypChanAvail, restAsmVoicePortPacketSize=restAsmVoicePortPacketSize, restStatAd10DataPortTxFrOvrSize=restStatAd10DataPortTxFrOvrSize, restChannelTable=restChannelTable, recfFrPortLmiWaitingTimer=recfFrPortLmiWaitingTimer, restAd10VoicePortEntry=restAd10VoicePortEntry, restStatCh=restStatCh, scVoicePrfNodeRdnGrpId=scVoicePrfNodeRdnGrpId, recfFrChannelConnectMode=recfFrChannelConnectMode, restDsmModRteExchCode=restDsmModRteExchCode, recfFrChannelEIR=recfFrChannelEIR, recfAsmVoiceTrkGrpLowElement=recfAsmVoiceTrkGrpLowElement, restStatPortPktLmiTxSeqNum=restStatPortPktLmiTxSeqNum, restSafEntry=restSafEntry, restChannelNetworkPath=restChannelNetworkPath, recfDsmDChBChTable=recfDsmDChBChTable, restAsmX50PortCktTimeSlotMap=restAsmX50PortCktTimeSlotMap, restStatPortE1mIndex=restStatPortE1mIndex, restStatPortLgmRnrRecd=restStatPortLgmRnrRecd, scNodeAccessUpdate=scNodeAccessUpdate, restStatChPktSegSeqDiscard=restStatChPktSegSeqDiscard, restAd10AgmPortCpSpeed=restAd10AgmPortCpSpeed, restPktChannelTestGenFrTimeOut=restPktChannelTestGenFrTimeOut, scChProfileMaxSatHop=scChProfileMaxSatHop, scSoftloadDirectoryName=scSoftloadDirectoryName, restStatChPktBypSegDstEIRDisc=restStatChPktBypSegDstEIRDisc, recfINLUpdate=recfINLUpdate, recfAd10TrkGrpHighElement=recfAd10TrkGrpHighElement, scCmntyRecfPortAccess=scCmntyRecfPortAccess, restStatPortPktLmiSegmentSent=restStatPortPktLmiSegmentSent, recfTDMChannelDestAddr=recfTDMChannelDestAddr, scCmntyRestSafAccess=scCmntyRestSafAccess, restPortSevereIndication=restPortSevereIndication, restNcpBootPromRevision=restNcpBootPromRevision, restSgmAgmPortTotal=restSgmAgmPortTotal, restLgmPortNumCh=restLgmPortNumCh, recfE1mPortFailToggleRequest=recfE1mPortFailToggleRequest, recfRtmPort=recfRtmPort, scVoicePrfNodeEntry=scVoicePrfNodeEntry, recfAd10PktBandTable=recfAd10PktBandTable, restHwRscEngineTable=restHwRscEngineTable, restStatAd10PktBandControl=restStatAd10PktBandControl, recfModuleDsmActiveLev2CDRMode=recfModuleDsmActiveLev2CDRMode, recfAd10TrkGrpEntry=recfAd10TrkGrpEntry, recfHwRscEngineStartMode=recfHwRscEngineStartMode, restStatChPktBypCritThreshold=restStatChPktBypCritThreshold, restDsmModuleVciCtrlBlkAvail=restDsmModuleVciCtrlBlkAvail, recfDsmDChQSigT316=recfDsmDChQSigT316, restAd10DataPortDtrLoopDelay=restAd10DataPortDtrLoopDelay, scVoicePrfNodeIndex=scVoicePrfNodeIndex, restAd10DataPortDsrOOS=restAd10DataPortDsrOOS, restStatChPktFECNSent=restStatChPktFECNSent, recfAd10AgmPortDef=recfAd10AgmPortDef, recfDsmDChPortPbxLayer2Type=recfDsmDChPortPbxLayer2Type, restNestActiveRight=restNestActiveRight, restNcpFlashFileStoredCrc=restNcpFlashFileStoredCrc, recfModuleDsmTable=recfModuleDsmTable, restDsmModuleCirTotal=restDsmModuleCirTotal, restStatPortDsm=restStatPortDsm, restAd10DataPortDsrSig=restAd10DataPortDsrSig, recfNodeDescr=recfNodeDescr, recfAd10TrkGrpLowElement=recfAd10TrkGrpLowElement, scCmntyRestLgmPortAccess=scCmntyRestLgmPortAccess, scCmntySecNodeAccess=scCmntySecNodeAccess, restSlotSWModuleSubType=restSlotSWModuleSubType, restPktChannelTestGenFrRcvErr=restPktChannelTestGenFrRcvErr, recfNestDesc=recfNestDesc, scCmntyMib2InterfacesAccess=scCmntyMib2InterfacesAccess, restSlotModuleStatus=restSlotModuleStatus, restStatPortDsmDChEntry=restStatPortDsmDChEntry, recfINLAddr=recfINLAddr, restStatPortLgmSabmSent=restStatPortLgmSabmSent, recfAsmX50PortPhasorSize=recfAsmX50PortPhasorSize, recfBundleAttenuationTx=recfBundleAttenuationTx, scCmntyRecfPartHeader=scCmntyRecfPartHeader, recfSdmPortKGSignalType=recfSdmPortKGSignalType, restStatPortDsmDChPbxLinkResets=restStatPortDsmDChPbxLinkResets, restStatPortDsmDChPbxNoBws=restStatPortDsmDChPbxNoBws, restLgmPortDiagnostics=restLgmPortDiagnostics, restAd10DataPortHdlcMinFlags=restAd10DataPortHdlcMinFlags, recfLgmPortSatelliteHop=recfLgmPortSatelliteHop, restSafRemoteNode=restSafRemoteNode, scRootAccessEntry=scRootAccessEntry, scNodeAccessControlMode=scNodeAccessControlMode, restAd10PktBandDiagnostics=restAd10PktBandDiagnostics, restStatAd10PktBandRxCrcErr=restStatAd10PktBandRxCrcErr, recfT1mPortAlarmThreshold=recfT1mPortAlarmThreshold, recfAsmX50CkStartMode=recfAsmX50CkStartMode, recfDsmDChDPNSSInterDgtTmr=recfDsmDChDPNSSInterDgtTmr, restDsmModExchPartition=restDsmModExchPartition, restStatChPktRedThreshold=restStatChPktRedThreshold)
mibBuilder.exportSymbols("STMIB", restLgmPortTable=restLgmPortTable, restBundleAddr=restBundleAddr, scCmntyRecfModuleAccess=scCmntyRecfModuleAccess, restPktChannelPingStatus=restPktChannelPingStatus, restAsmModuleNumCelpAvail=restAsmModuleNumCelpAvail, scIpOfflineSubnetTable=scIpOfflineSubnetTable, restPktChannelTestGenFrRcvOK=restPktChannelTestGenFrRcvOK, restPktChPingTable=restPktChPingTable, restStatPortDsmDChPbxNoBchs=restStatPortDsmDChPbxNoBchs, recfClockPortSource=recfClockPortSource, recfSlotModuleStartMode=recfSlotModuleStartMode, restStatChPktPortCongMode=restStatChPktPortCongMode, recfHwRscEngineModuleAddr=recfHwRscEngineModuleAddr, scModemStopBits=scModemStopBits, scIpRootGatewayMask=scIpRootGatewayMask, restRtmAdPortElecInterface=restRtmAdPortElecInterface, restStatInl=restStatInl, restAsmModApplTable=restAsmModApplTable, restFsmVciCtrlBlkAvail=restFsmVciCtrlBlkAvail, recfAd10DataPortEntry=recfAd10DataPortEntry, restNcpFlashRecoveryIndicator=restNcpFlashRecoveryIndicator, recfAsmPort=recfAsmPort, recfAsmVoiceTrkGrpCelpNetSigMd=recfAsmVoiceTrkGrpCelpNetSigMd, restStatChPktNetCIROctetSent=restStatChPktNetCIROctetSent, scCmntyRestChannelAccess=scCmntyRestChannelAccess, alLogRecTable=alLogRecTable, restAd10VersionLabel=restAd10VersionLabel, recfModuleDsmEntry=recfModuleDsmEntry, recfAd10VoicePortCompressMode=recfAd10VoicePortCompressMode, restNodeSoftloadStatus=restNodeSoftloadStatus, restStatPortE1mTable=restStatPortE1mTable, recfTDMChannelConnectMode=recfTDMChannelConnectMode, scCmntySecCPIAccess=scCmntySecCPIAccess, restINLContentsSeqNumber=restINLContentsSeqNumber, restAd10DataPortVcMapDlci=restAd10DataPortVcMapDlci, restStatPortE1mAddr=restStatPortE1mAddr, restStatPortRtmAdUINrEndBlkErr=restStatPortRtmAdUINrEndBlkErr, restDsmDChCallRealLayer3State=restDsmDChCallRealLayer3State, restNcpFlashEntry=restNcpFlashEntry, restStatChPktBypAddr=restStatChPktBypAddr, restStatPortPktLmiNumGoodEvents=restStatPortPktLmiNumGoodEvents, restLgmPortLocalBERQuality=restLgmPortLocalBERQuality, restStatChPktNetEIRSegSent=restStatChPktNetEIRSegSent, recfDsmDChPortActiveLev2CDRMode=recfDsmDChPortActiveLev2CDRMode, recfFrPortAvgPktSize=recfFrPortAvgPktSize, restStatPortPktDlciDiscard=restStatPortPktDlciDiscard, recfLink2TraStartMode=recfLink2TraStartMode, restPortBundleInTone=restPortBundleInTone, restStatPortPktLmiWrongSeq=restStatPortPktLmiWrongSeq, recfHwRscEngineID=recfHwRscEngineID, restBundleSignalA=restBundleSignalA, scCmntyRestEntry=scCmntyRestEntry, restStatAd10VoicePortControl=restStatAd10VoicePortControl, restAsmEngineStatus=restAsmEngineStatus, restAsmEngineApplication=restAsmEngineApplication, restAd10VoicePortCelpNetSigMd=restAd10VoicePortCelpNetSigMd, recfDsmDChPortActiveLev1CDRMode=recfDsmDChPortActiveLev1CDRMode, scSysNodeDatabaseVersion=scSysNodeDatabaseVersion, restBundleOutSigC=restBundleOutSigC, recfAd10VoicePortAddr=recfAd10VoicePortAddr, restFsmCcfSupportIndicator=restFsmCcfSupportIndicator, restDsmModuleCallsPerSecFactor=restDsmModuleCallsPerSecFactor, restStatPortPktSwOvrRunDiscard=restStatPortPktSwOvrRunDiscard, scCommunityscMap=scCommunityscMap, restStatInlIndex=restStatInlIndex, restDsmModuleTable=restDsmModuleTable, scIpOnlineSubnetTable=scIpOnlineSubnetTable, restDsmDChCallVirtTable=restDsmDChCallVirtTable, scLgmStaticRouteLink2GwyNode=scLgmStaticRouteLink2GwyNode, scIpOfflineSubnetAddr=scIpOfflineSubnetAddr, restRtmAdPortLoopbackType=restRtmAdPortLoopbackType, recfTDMChannelDestCheckMode=recfTDMChannelDestCheckMode, restStatChPktBypOutEIROctetDrop=restStatChPktBypOutEIROctetDrop, scCmntyRestStINLAccess=scCmntyRestStINLAccess, restStatPortDsmDChPbxOtherFails=restStatPortDsmDChPbxOtherFails, restRtmPortAdPortDiagResult=restRtmPortAdPortDiagResult, recfDsmDChQSigTable=recfDsmDChQSigTable, restPortErrorIndication=restPortErrorIndication, restLgmContentsAddr=restLgmContentsAddr, restAd10DataPortIntfType=restAd10DataPortIntfType, scCmntyMib2SystemAccess=scCmntyMib2SystemAccess, recfBundlePreemptionTime=recfBundlePreemptionTime, recfINLPartitionID=recfINLPartitionID, recfDsmDChQOSHighBChan=recfDsmDChQOSHighBChan, restAd10VoicePortUncfgCktSig=restAd10VoicePortUncfgCktSig, recfAsmX50PortSpeed=recfAsmX50PortSpeed, scCmntyMib2IpAccess=scCmntyMib2IpAccess, restNestAddr=restNestAddr, restAd10DataPortAddr=restAd10DataPortAddr, recfDsmDChPortTable=recfDsmDChPortTable, recfINLStartMode=recfINLStartMode, recfINLOrig=recfINLOrig, alLogState=alLogState, recfFrPortLmiActive=recfFrPortLmiActive, restStatChPktAddr=restStatChPktAddr, restStatAd10PktBandTable=restStatAd10PktBandTable, restStatPortPktOvrszeDiscard=restStatPortPktOvrszeDiscard, recfModDsmRecCDRLogControlMode=recfModDsmRecCDRLogControlMode, restDsmModuleRecCDRsAvail=restDsmModuleRecCDRsAvail, restSafInlNumber=restSafInlNumber, recfE1mPortAddr=recfE1mPortAddr, restStatModDsmTable=restStatModDsmTable, recfAvailResourceTable=recfAvailResourceTable, restAd10VoicePortTable=restAd10VoicePortTable, restNestNumberOfModules=restNestNumberOfModules, restNestSlotPresence=restNestSlotPresence, recfAsmX50CkAddr=recfAsmX50CkAddr, restAsmPort=restAsmPort, restPktChPingHopNumber=restPktChPingHopNumber, restDsmModuleTotalRecCDRs=restDsmModuleTotalRecCDRs, recfHwRscEngineUpdate=recfHwRscEngineUpdate, restAsmX50PortAddr=restAsmX50PortAddr, recfAsmX50PortProtocol=recfAsmX50PortProtocol, recfDsmDChPortPbxLayer3Type=recfDsmDChPortPbxLayer3Type, restStatInlTable=restStatInlTable, restRtmModuleAddr=restRtmModuleAddr, alarm=alarm, restPortTable=restPortTable, restAd10DataPortCtsOOS=restAd10DataPortCtsOOS, restStatPortPktLmiPollTimeOut=restStatPortPktLmiPollTimeOut, recfT1mPortAddr=recfT1mPortAddr, restDsmModuleCallsPerSecAvail=restDsmModuleCallsPerSecAvail, scCmntyRestAd10PortAccess=scCmntyRestAd10PortAccess, restAsmEngineNumPorts=restAsmEngineNumPorts, restStatAd10DataPortRxSCCUndRun=restStatAd10DataPortRxSCCUndRun, restHwRscEngineSubStatus=restHwRscEngineSubStatus, restTrkGrpContentsDstTrkGrpAddr=restTrkGrpContentsDstTrkGrpAddr, restAd10VoicePortInterface=restAd10VoicePortInterface, restNodeClockStatus=restNodeClockStatus, restStatModule=restStatModule, recfFrPortBillingSegSize=recfFrPortBillingSegSize, restTrkGrpContentsSrcNodeID=restTrkGrpContentsSrcNodeID, recfBundleUpdate=recfBundleUpdate, restAsmVoicePortAddr=restAsmVoicePortAddr, restStatPortT1mEntry=restStatPortT1mEntry, recfINLSatelliteHop=recfINLSatelliteHop, recfDsmDChQOSSpecialPrfIndex=recfDsmDChQOSSpecialPrfIndex, recfAd10DataPortTDMDataRate=recfAd10DataPortTDMDataRate, scCmntyRecfIndex=scCmntyRecfIndex, restAd10VoicePortEchoCancel=restAd10VoicePortEchoCancel, restAd10DataPortPktFlowControl=restAd10DataPortPktFlowControl, scIpOnlineSubnetIndex=scIpOnlineSubnetIndex, restStatPortT1mStartTime=restStatPortT1mStartTime, restSafHWPhasorStatus=restSafHWPhasorStatus, recfModDsmRecCDRLogIndex=recfModDsmRecCDRLogIndex, recfAd10AgmPortAddr=recfAd10AgmPortAddr, restBundleBwCntStatus=restBundleBwCntStatus, restNode=restNode, recfDsmDChPortAddr=recfDsmDChPortAddr, recfDsmIDCPortTable=recfDsmIDCPortTable, restINLTable=restINLTable, scCmntyRestNodeAccess=scCmntyRestNodeAccess, restPortBGDiagResults=restPortBGDiagResults, restRtmAdPortAddr=restRtmAdPortAddr, restDsmDChCallRealBundle=restDsmDChCallRealBundle, restBundleSignalD=restBundleSignalD, scVoicePrfNodeEchoCancel=scVoicePrfNodeEchoCancel, scPartitionCRCCheck=scPartitionCRCCheck, restStatPortPktAddr=restStatPortPktAddr, recfAsmX50CkEntry=recfAsmX50CkEntry, restINLRemoteBERLevel=restINLRemoteBERLevel, recfDsmDChQSigT203=recfDsmDChQSigT203, restStatChPktNetCIROctetDrops=restStatChPktNetCIROctetDrops, restDsmDChCallVirtNumber=restDsmDChCallVirtNumber, recfLgmPortOutbandSubrate=recfLgmPortOutbandSubrate, recfDsmDChQOSCallType=recfDsmDChQOSCallType, restAsmX50CkEntry=restAsmX50CkEntry, recfDsmDChQSigT314=recfDsmDChQSigT314, recfLgmPort=recfLgmPort, restStatInlPktOctetRcv=restStatInlPktOctetRcv, restAsmVoicePortEchoCanceller=restAsmVoicePortEchoCanceller, restStatPortE1mEntry=restStatPortE1mEntry, scIpOfflineSubnetEntry=scIpOfflineSubnetEntry, recfLgmPortStartMode=recfLgmPortStartMode, recfE1mPortAlarmThreshold=recfE1mPortAlarmThreshold, restLgmPortAddr=restLgmPortAddr, restStatAd10DataPortAddr=restStatAd10DataPortAddr, restStatAd10PktBandRxTotFrames=restStatAd10PktBandRxTotFrames, scCommunityrestMap=scCommunityrestMap, recfFrChannelPartitionID=recfFrChannelPartitionID, restNestBusLoopbackStatus=restNestBusLoopbackStatus, restRtmAdPortParSubstChar=restRtmAdPortParSubstChar, recfAd10AgmPortEntry=recfAd10AgmPortEntry, restTrkGrpTable=restTrkGrpTable, restNodeSWRevision=restNodeSWRevision, recfT1mPortDs1Option=recfT1mPortDs1Option, restStatChPktBypSourceNodeID=restStatChPktBypSourceNodeID, restDsmDChCallRealAddr=restDsmDChCallRealAddr, restINLBERWindowFill=restINLBERWindowFill, restSafModNumChannels=restSafModNumChannels, recfLgmPortTable=recfLgmPortTable, restStatAd10DataPortTxTotFrames=restStatAd10DataPortTxTotFrames, restSlotStartupDiagResults=restSlotStartupDiagResults, recfINLEncryption=recfINLEncryption, recfDsmDChExchCode=recfDsmDChExchCode, recfDsmDChDPNSSTable=recfDsmDChDPNSSTable, recfDsmDChDPNSSNT1=recfDsmDChDPNSSNT1, restStatChPktNetCongMode=restStatChPktNetCongMode, restDsmModuleBypChanTotal=restDsmModuleBypChanTotal, restStatPortT1mBstyErrSec=restStatPortT1mBstyErrSec, restStatPortRtmEntry=restStatPortRtmEntry, restINLContentsDestNodeID=restINLContentsDestNodeID, restDsmModuleProcessUnitsAvail=restDsmModuleProcessUnitsAvail, recfModuleFsm16Entry=recfModuleFsm16Entry, scCmntyRestTrkGrpAccess=scCmntyRestTrkGrpAccess, recfAd10TrkGrpStartMode=recfAd10TrkGrpStartMode, restStatAd10DataPortRxCongDisc=restStatAd10DataPortRxCongDisc, restNestFanStatus=restNestFanStatus, scCmntyMib2IcmpAccess=scCmntyMib2IcmpAccess, restAsmVoicePortCelpNetSigSt=restAsmVoicePortCelpNetSigSt, restStatChPktDestChAddr=restStatChPktDestChAddr, recfAsmVoiceTrkGrpNonLinear=recfAsmVoiceTrkGrpNonLinear, scCmntySecCommunityAccess=scCmntySecCommunityAccess, restSafContentsSeqNum=restSafContentsSeqNum, restINLNumSaf=restINLNumSaf, recfModuleAsmCelpPartition=recfModuleAsmCelpPartition, scSoftloadEntry=scSoftloadEntry, restStatChPktSegCongNetDiscard=restStatChPktSegCongNetDiscard, recfAsmX50PortAddr=recfAsmX50PortAddr, restINLContentsSourceNodeID=restINLContentsSourceNodeID, restDsmModRteEntry=restDsmModRteEntry, restLgmPortSyncState=restLgmPortSyncState, restDsmModRecCDRLogEntry=restDsmModRecCDRLogEntry, restRtmModuleEntry=restRtmModuleEntry, restHwRscEngineNumSAFs=restHwRscEngineNumSAFs, restINLLocalBERLevel=restINLLocalBERLevel, restAd10DataPortRtsFlLpDlyDelta=restAd10DataPortRtsFlLpDlyDelta, restStatChPktPortCIROctetSent=restStatChPktPortCIROctetSent, recfAsmVoiceTrkGrpFaxRelay=recfAsmVoiceTrkGrpFaxRelay, restDsmModRteLocalPortAddress=restDsmModRteLocalPortAddress, restStatAd10VoicePortBertBitErr=restStatAd10VoicePortBertBitErr, restStatInlEntry=restStatInlEntry, recfAsmVoiceTrkGrpPartitionID=recfAsmVoiceTrkGrpPartitionID, restStatPortRtmUIFarEndBlkErr=restStatPortRtmUIFarEndBlkErr, restStatChPktPortCIROctetDrops=restStatChPktPortCIROctetDrops, scNodeAccessIndex=scNodeAccessIndex, recfSdmPortGen=recfSdmPortGen, restINLSubStatus=restINLSubStatus, recfAsmX50PortIdlePattern=recfAsmX50PortIdlePattern, restStatChPktBypInCongMode=restStatChPktBypInCongMode, restPortSubCondition=restPortSubCondition, restSafContentsSrcNode=restSafContentsSrcNode, restSlotActiveRedundantSlot=restSlotActiveRedundantSlot, restPktChannelDiagnostics=restPktChannelDiagnostics, restChannelDirectNodeConnect=restChannelDirectNodeConnect, recfPartitionCRCCheck=recfPartitionCRCCheck, recfModuleSgmAgEntry=recfModuleSgmAgEntry, restLgmModuleTable=restLgmModuleTable, recfRtmPortTable=recfRtmPortTable, alSysLogSize=alSysLogSize, restStatChPktBypInEIRSegRcv=restStatChPktBypInEIRSegRcv, scCmntyMib2SnmpAccess=scCmntyMib2SnmpAccess, recfModuleDsmPbxProtocol=recfModuleDsmPbxProtocol, scVoicePrfNodeTxAudSrcMode=scVoicePrfNodeTxAudSrcMode)
mibBuilder.exportSymbols("STMIB", recfAd10AgmPortTable=recfAd10AgmPortTable, restNestLxmCkt1Status=restNestLxmCkt1Status, alLogTotalEntries=alLogTotalEntries, restLgmPortRemoteBERQuality=restLgmPortRemoteBERQuality, restStatAd10DataPortBertBitErr=restStatAd10DataPortBertBitErr, restDsmDChCallVirtLayer2Status=restDsmDChCallVirtLayer2Status, restBundleStatus=restBundleStatus, recfINLPacketCirOccupy=recfINLPacketCirOccupy, restLgmPortRemoteNodeID=restLgmPortRemoteNodeID, scRootAccessIp=scRootAccessIp, restStatPortAsmVoiceFrameOOSs=restStatPortAsmVoiceFrameOOSs, restAd10DataPortBiSyncCharType=restAd10DataPortBiSyncCharType, restAd10DataPortTable=restAd10DataPortTable, recfBundleStartMode=recfBundleStartMode, recfTDMChannelModuleType=recfTDMChannelModuleType, recfAd10Port=recfAd10Port, recfDsmDChPortUpdate=recfDsmDChPortUpdate, restDsmModuleCirAvail=restDsmModuleCirAvail, restHwRscEngineEntry=restHwRscEngineEntry, restStatAd10DataPortControl=restStatAd10DataPortControl, restStatModDsmRejectTermCalls=restStatModDsmRejectTermCalls, restFsmDlciAvail=restFsmDlciAvail, restStatPortT1mLostFrame=restStatPortT1mLostFrame, restAd10NetworkClockConf=restAd10NetworkClockConf, recfAsmVoiceTrkGrpRemoteAddr=recfAsmVoiceTrkGrpRemoteAddr, restLgmModuleEntry=restLgmModuleEntry, restPktChannelAddr=restPktChannelAddr, restAd10Time=restAd10Time, recfRtmPortAddr=recfRtmPortAddr, recfTranslation=recfTranslation, restStatPortLgmTable=restStatPortLgmTable, restChannel=restChannel, recfE1mPortNationalBit=recfE1mPortNationalBit, recfLink2TraFunctions=recfLink2TraFunctions, scCmntyRecfNestAccess=scCmntyRecfNestAccess, restStatPortPktSegmentSent=restStatPortPktSegmentSent, scNodeAccessTable=scNodeAccessTable, restDsmModuleTotalBuffers=restDsmModuleTotalBuffers, scCpiStopBits=scCpiStopBits, recfT1mPortBundleMap=recfT1mPortBundleMap, scCmntyMib2UdpAccess=scCmntyMib2UdpAccess, alLogEntry=alLogEntry, restChannelDestNodeID=restChannelDestNodeID, scSysNodeCpiPasswordControl=scSysNodeCpiPasswordControl, recfAvailResourceType=recfAvailResourceType, recfFrChannelControlMode=recfFrChannelControlMode, recfT1mPortOOSBitPattern=recfT1mPortOOSBitPattern, restStatPortPktOctetRecv=restStatPortPktOctetRecv, restStatAd10DataPortRxFrHdrErr=restStatAd10DataPortRxFrHdrErr, restINLContentsTable=restINLContentsTable, restSafContentsAddr=restSafContentsAddr, restSgmAgSgmScfTotal=restSgmAgSgmScfTotal, restHwRscEngineNumSCFs=restHwRscEngineNumSCFs, restAd10VoicePortOOSAudio=restAd10VoicePortOOSAudio, restStatPortAsmX50RxFrameErrors=restStatPortAsmX50RxFrameErrors, restStatPortRtmAddr=restStatPortRtmAddr, restHwRscEngineApplication=restHwRscEngineApplication, restAd10DataPortBiSyncPadChar=restAd10DataPortBiSyncPadChar, recfE1mPortOOSBitPattern=recfE1mPortOOSBitPattern, recfDsmDChExchDChAddr=recfDsmDChExchDChAddr, restStatAd10VoicePortHber=restStatAd10VoicePortHber, restRtmModuleDS0sAvail=restRtmModuleDS0sAvail, recfDsmPort=recfDsmPort, recfDsmDChPortCallsPerSecond=recfDsmDChPortCallsPerSecond, restNcpFlashFileCrcCheck=restNcpFlashFileCrcCheck, restFsmBypassBandwidth=restFsmBypassBandwidth, restTrkGrpContentsAddr=restTrkGrpContentsAddr, recfFrChannelAddr=recfFrChannelAddr, restStatAd10=restStatAd10, restStatAd10DataPortEntry=restStatAd10DataPortEntry, recfFrChannelDestAddr=recfFrChannelDestAddr, recfDsmDChPortRecordLev1CDRMode=recfDsmDChPortRecordLev1CDRMode, restINLStatus=restINLStatus, scCmntyRestStChannelAccess=scCmntyRestStChannelAccess, recfRtmPortStartMode=recfRtmPortStartMode, restSafModBandwidthAvail=restSafModBandwidthAvail, scCmntyRecfTDMChannelAccess=scCmntyRecfTDMChannelAccess, restAd10DataPortCtsSig=restAd10DataPortCtsSig, recfE1mPortBundleMap=recfE1mPortBundleMap, restAd10DataPortAsyncStopBits=restAd10DataPortAsyncStopBits, recfAsmVoiceTrkGrpVocoderEnable=recfAsmVoiceTrkGrpVocoderEnable, recfBundleINLNumber=recfBundleINLNumber, scVoicePrf=scVoicePrf, recfDsmDChExchIndex=recfDsmDChExchIndex, recfBundlePartitionID=recfBundlePartitionID, restStatPortE1mErrSec=restStatPortE1mErrSec, restSafSubStatus=restSafSubStatus, recfE1mPortReceiveEBit=recfE1mPortReceiveEBit, restDsmModRteRemoteNode=restDsmModRteRemoteNode, recfModuleAsmAddr=recfModuleAsmAddr, restNcpMacAddr=restNcpMacAddr, scSoftloadDestPort=scSoftloadDestPort, recfSdmPortPolarity=recfSdmPortPolarity, restNodeClockTableIndex=restNodeClockTableIndex, restStatAd10DataPortRxFrSeqErr=restStatAd10DataPortRxFrSeqErr, recfTDMChannelEntry=recfTDMChannelEntry, recfLgmPortSyncChar=recfLgmPortSyncChar, recfModDsmRecCDRLogAddr=recfModDsmRecCDRLogAddr, restPktChannelCommStatus=restPktChannelCommStatus, restStatAd10VoicePortTable=restStatAd10VoicePortTable, recfHwRsc=recfHwRsc, restDsmModRecCDRLogLev1Entries=restDsmModRecCDRLogLev1Entries, restStatChPktBypDestChAddr=restStatChPktBypDestChAddr, recfNodeUpdate=recfNodeUpdate, restAd10DataPortPktRxFlow=restAd10DataPortPktRxFlow, restStatPortDsmDChAddr=restStatPortDsmDChAddr, recfAsmVoiceTrkGrpPCMPhasorSize=recfAsmVoiceTrkGrpPCMPhasorSize, restLgmContentsTable=restLgmContentsTable, scCmntyAlmEntry=scCmntyAlmEntry, restDsmDChCallVirtCDRContents=restDsmDChCallVirtCDRContents, restSafAddr=restSafAddr, restStatPortPktLmiWaitTimeOut=restStatPortPktLmiWaitTimeOut, restSafPhasorStatus=restSafPhasorStatus, recfBundleOOSCDSignaling=recfBundleOOSCDSignaling, recfAvailResourceEntry=recfAvailResourceEntry, recfNode=recfNode, recfAsmVoiceTrkGrpSigIdlePttrn=recfAsmVoiceTrkGrpSigIdlePttrn, restSlotSWModuleType=restSlotSWModuleType, scNodeAccessThroughput=scNodeAccessThroughput, restNodeUploadStatus=restNodeUploadStatus, scCmntyRecfRtmPortAccess=scCmntyRecfRtmPortAccess, scVoicePrfNodeRxPCMGain=scVoicePrfNodeRxPCMGain, restSafContentsEntry=restSafContentsEntry, scCmntyRecfAsmPortAccess=scCmntyRecfAsmPortAccess, restDsmDChPortTable=restDsmDChPortTable, scIpSlipMask=scIpSlipMask, restDsmDChCallVirtTransitState=restDsmDChCallVirtTransitState, restPortNumberOfBundles=restPortNumberOfBundles, restNestRxmCkt2Status=restNestRxmCkt2Status, restAsmEngineNumSAFs=restAsmEngineNumSAFs, recfRtmAdPortStartMode=recfRtmAdPortStartMode, restStatAd10PktBandRxSCCAbort=restStatAd10PktBandRxSCCAbort, Link2Index=Link2Index, recfSdmPortBitMode=recfSdmPortBitMode, recfAsmVoice=recfAsmVoice, scCmntySecIndex=scCmntySecIndex, recfSlotModuleBgdDiagMask=recfSlotModuleBgdDiagMask, recfAd10AgmPortUpdate=recfAd10AgmPortUpdate, recfModuleDsmRecordLev2CDRMode=recfModuleDsmRecordLev2CDRMode, scCmntyMib2Entry=scCmntyMib2Entry, recfINLKGMode=recfINLKGMode, restPktChPingDelay=restPktChPingDelay, scNodeAccessRootList=scNodeAccessRootList, recfClockStationSpeed=recfClockStationSpeed, BundleAddr=BundleAddr, restNodeTestGenStatus=restNodeTestGenStatus, recfModuleLgmTable=recfModuleLgmTable, restChannelDiagnostics=restChannelDiagnostics, restNodeModemStatus=restNodeModemStatus, restDsmModuleTotalCallsPerSec=restDsmModuleTotalCallsPerSec, recfFrPortUpdate=recfFrPortUpdate, scSysNodeCpiPasswordLevel2=scSysNodeCpiPasswordLevel2, recfRtmAdPortTable=recfRtmAdPortTable, restStatPortLgmEntry=restStatPortLgmEntry, restDsmDChPortNumCallsInProc=restDsmDChPortNumCallsInProc, restStatChPktBypSegDstSrcConDsc=restStatChPktBypSegDstSrcConDsc, recfNestEntry=recfNestEntry, restFsmBypChanAvail=restFsmBypChanAvail, restStatAd10DataPortTxSCCOvrRun=restStatAd10DataPortTxSCCOvrRun, scModemControl=scModemControl, scVoicePrfNodeNetSigMode=scVoicePrfNodeNetSigMode, recfFrChannelUpdate=recfFrChannelUpdate, restPktChannelEntry=restPktChannelEntry, restAsmEngineModuleAddr=restAsmEngineModuleAddr, scChProfileINLGroup=scChProfileINLGroup, restRtmPortTable=restRtmPortTable, restSlotModuleRevision=restSlotModuleRevision, recfModuleFsm64Addr=recfModuleFsm64Addr, scTrapAccessIndex=scTrapAccessIndex, restStatModDsmEntry=restStatModDsmEntry, restChannelType=restChannelType, recfAd10DataPortUpdate=recfAd10DataPortUpdate, scCmntyAccessIndex=scCmntyAccessIndex, restINLTotalCRCErrors=restINLTotalCRCErrors, restRtmPortAdSubtype=restRtmPortAdSubtype, recfFrPortTable=recfFrPortTable, recfDsmDChPortRecordLev2CDRMode=recfDsmDChPortRecordLev2CDRMode, restAsmX50PortEngine=restAsmX50PortEngine, restPktChPingOrigTermCong=restPktChPingOrigTermCong, alLogRecIndex=alLogRecIndex, recfModuleLgmAddr=recfModuleLgmAddr, alLogDiagnostics=alLogDiagnostics, restStatAd10DataPortRxMinSegHt=restStatAd10DataPortRxMinSegHt, scChProfileEntry=scChProfileEntry, restAd10DataPortDtrFlLpDlyDelta=restAd10DataPortDtrFlLpDlyDelta, scCpiAccess=scCpiAccess, scVoicePrfNetSigIdlePttrn=scVoicePrfNetSigIdlePttrn, restAd10PktBandStatMuxMode=restAd10PktBandStatMuxMode, restStatAd10DataPortTxFifoFlCtl=restStatAd10DataPortTxFifoFlCtl, scIpOfflineSubnetIndex=scIpOfflineSubnetIndex, recfINLNumber=recfINLNumber, restNodeUpTime=restNodeUpTime, restNcpFlashAddr=restNcpFlashAddr, recfBundleOOSBSignaling=recfBundleOOSBSignaling, recfE1mPortOOSBSignaling=recfE1mPortOOSBSignaling, restINLRemoteNodeID=restINLRemoteNodeID, restNcpFlashModuleType=restNcpFlashModuleType, alSystemProfile=alSystemProfile, recfFrChannelBc=recfFrChannelBc, restAsmVoicePortTrkGrpAddr=restAsmVoicePortTrkGrpAddr, restChannelRouteQuality=restChannelRouteQuality, recfDsmDChQOSControlMode=recfDsmDChQOSControlMode, recfINLGroup=recfINLGroup, recfE1mPortSevereThreshold=recfE1mPortSevereThreshold, recfAsmVoiceTrkGrpSpeed=recfAsmVoiceTrkGrpSpeed, restNestTable=restNestTable, restPortSdmSignalStatus=restPortSdmSignalStatus, restBundleOutSigB=restBundleOutSigB, recfDsmDChQSigT309=recfDsmDChQSigT309, recfTDMChannelOrig=recfTDMChannelOrig, scCmntySecChanProfileAccess=scCmntySecChanProfileAccess, restLgmModuleTotalSAFs=restLgmModuleTotalSAFs, recfAsmVoiceTrkGrpSubratePhSize=recfAsmVoiceTrkGrpSubratePhSize, recfDsmDChQOSDChAddr=recfDsmDChQOSDChAddr, recfAd10TrkGrpSearchDirection=recfAd10TrkGrpSearchDirection, restChannelDestAddr=restChannelDestAddr, recfModuleFsm64Table=recfModuleFsm64Table, scSoftloadTimeout=scSoftloadTimeout, restDsmDChCallRealLayer2Status=restDsmDChCallRealLayer2Status, restNodeClockSourceQuality=restNodeClockSourceQuality, recfLgmPortEntry=recfLgmPortEntry, recfAd10VoicePortPhysSlot=recfAd10VoicePortPhysSlot, restNodeAlarmRelaySubStatus=restNodeAlarmRelaySubStatus, scChProfileErrPerformReq=scChProfileErrPerformReq, scCmntyRestStIndex=scCmntyRestStIndex, scVoicePrfNetIndex=scVoicePrfNetIndex, recfLink2TraPartition=recfLink2TraPartition, scCmntySecTrapAccess=scCmntySecTrapAccess, recfBundleEntry=recfBundleEntry, alPartitionCRCCheck=alPartitionCRCCheck, restAsmModuleEntry=restAsmModuleEntry, recfLgmPortBitMode=recfLgmPortBitMode, recfAd10VoicePortStartMode=recfAd10VoicePortStartMode, restChannelEntry=restChannelEntry, restStatChPktBypInCIROctetRcv=restStatChPktBypInCIROctetRcv, restDsmDChCallVirtAddr=restDsmDChCallVirtAddr, restPortAddr=restPortAddr, restDsmDChCallRealLayer2State=restDsmDChCallRealLayer2State, recfAsmX50PortPartitionID=recfAsmX50PortPartitionID, recfBundleDataPolarity=recfBundleDataPolarity, scCmntyMib2Index=scCmntyMib2Index, recfAsmX50PortUpdate=recfAsmX50PortUpdate, scIpProfile=scIpProfile, scCmntySecIPAccess=scCmntySecIPAccess, restStatPortLgmControlMode=restStatPortLgmControlMode, restNodeUploadSize=restNodeUploadSize, recfT1mPortOOSASignaling=recfT1mPortOOSASignaling, recfModuleSgmAgAddr=recfModuleSgmAgAddr, recfModuleDsmPartitionMap=recfModuleDsmPartitionMap, restAd10UnitSerialNumberStr=restAd10UnitSerialNumberStr, recfBundleType=recfBundleType, restSafNumChannels=restSafNumChannels, restDsmModuleBypassPPSTotal=restDsmModuleBypassPPSTotal, restStatAd10DataPortRxBecnCount=restStatAd10DataPortRxBecnCount)
mibBuilder.exportSymbols("STMIB", restStatPortT1mSevErrSec=restStatPortT1mSevErrSec, recfLink2TraTable=recfLink2TraTable, scCpiControlUpdate=scCpiControlUpdate, restAd10PktBandMinBandwidth=restAd10PktBandMinBandwidth, restStatChPktPortEIROctetSent=restStatChPktPortEIROctetSent, restNodeMIBRevision=restNodeMIBRevision, restStatAd10VoicePortEntry=restStatAd10VoicePortEntry, recfSlotGroupID=recfSlotGroupID, recfDsmDChBChAddr=recfDsmDChBChAddr, restAsmModApplTotalLicenses=restAsmModApplTotalLicenses, scChProfileEncryption=scChProfileEncryption, recfT1mPortStartMode=recfT1mPortStartMode, recfFrPortLmiFullEnqInterval=recfFrPortLmiFullEnqInterval, recfAsmVoiceTrkGrpHighElement=recfAsmVoiceTrkGrpHighElement, restDsmModExchEntry=restDsmModExchEntry, restAd10DataPortPktTxFlow=restAd10DataPortPktTxFlow, restStatPortLgmFrameRecd=restStatPortLgmFrameRecd, scVoicePrfNetFaxRelay=scVoicePrfNetFaxRelay, recfDsmDChQSigN200=recfDsmDChQSigN200, restAd10DataPortPktTxThreshold=restAd10DataPortPktTxThreshold, recfSdmPortAddr=recfSdmPortAddr, restRtmAdPortTable=restRtmAdPortTable, scCmntyAccess=scCmntyAccess, recfSdmPortKGPolarity=recfSdmPortKGPolarity, scCmntyAccessTable=scCmntyAccessTable, restStatPortDsmDChNetDisconns=restStatPortDsmDChNetDisconns, recfClockTable=recfClockTable, restLgmModule=restLgmModule, restINLAddr=restINLAddr, restStatChPktNetEIROctetDrops=restStatChPktNetEIROctetDrops, alLogRecEntry=alLogRecEntry, scModemDataBits=scModemDataBits, recfT1mPortDsx1Distance=recfT1mPortDsx1Distance, restDsmModRecCDRIndex=restDsmModRecCDRIndex, recfBundleBwCntBusyPattern=recfBundleBwCntBusyPattern, restNestCondition=restNestCondition, restAd10Date=restAd10Date, recfBundleSignaling=recfBundleSignaling, restAd10PktBandAddr=restAd10PktBandAddr, scSysNodeCpiPasswordLevel3=scSysNodeCpiPasswordLevel3, scCommunityIndex=scCommunityIndex, restDsmModExchTable=restDsmModExchTable, scVoicePrfNetDataMode=scVoicePrfNetDataMode, restNcpEntry=restNcpEntry, recfFrChannelProfile=recfFrChannelProfile, restSlotNumNormalPorts=restSlotNumNormalPorts, recfE1mPortUpdate=recfE1mPortUpdate, restINLNumber=restINLNumber, restRtmPortAdModDiagResult=restRtmPortAdModDiagResult, scCmntyAlmIndex=scCmntyAlmIndex, scSysNodePartitionID=scSysNodePartitionID, recfDsmDChQOSHighExchCode=recfDsmDChQOSHighExchCode, recfModDsmRecCDRLogPartitionID=recfModDsmRecCDRLogPartitionID, scCmntyRestINLContentsAccess=scCmntyRestINLContentsAccess, restDsmModuleNumLocRteAvail=restDsmModuleNumLocRteAvail, restAd10DataPortPktMinRxFrag=restAd10DataPortPktMinRxFrag, recfRtmAdPortEntry=recfRtmAdPortEntry, scCmntyMib2AtAccess=scCmntyMib2AtAccess, restStatInlPktOctetSent=restStatInlPktOctetSent, restStatChPktBypOutEIRSegRcv=restStatChPktBypOutEIRSegRcv, recfModuleDsmAddr=recfModuleDsmAddr, restPortEntry=restPortEntry, recfAd10TrkGrpRemoteNodeID=recfAd10TrkGrpRemoteNodeID, restStatPortDsmDChNetOtherFails=restStatPortDsmDChNetOtherFails, restDsmModRecCDRLogClrEntries=restDsmModRecCDRLogClrEntries, restStatPortPktAbortDiscard=restStatPortPktAbortDiscard, restStatPortAsmX50Entry=restStatPortAsmX50Entry, recfT1mPortFailToggleRequest=recfT1mPortFailToggleRequest, restStatPortAsmX50Addr=restStatPortAsmX50Addr, restStatChPktYellowThreshold=restStatChPktYellowThreshold, restAd10VoicePortCelpNetSigSt=restAd10VoicePortCelpNetSigSt, restRtmPortAdAssemblyNmb=restRtmPortAdAssemblyNmb, restStatChPktPortEIROctetDrops=restStatChPktPortEIROctetDrops, recfBundleOrgDisconnectTime=recfBundleOrgDisconnectTime, restStatChPktSourceNodeID=restStatChPktSourceNodeID, restDsmModuleBypassPPSAvail=restDsmModuleBypassPPSAvail, recfBundleNullIdlePattern=recfBundleNullIdlePattern, restSgmAgSgmScfAvail=restSgmAgSgmScfAvail, restStatChPktBypInEIROctetRcv=restStatChPktBypInEIROctetRcv, restRtmAdPortOosOper=restRtmAdPortOosOper, restPktChPingEntry=restPktChPingEntry, recfDsmIDCPortAddr=recfDsmIDCPortAddr, recfLgmPortInbandSubrate=recfLgmPortInbandSubrate, restStatChPktBypSegSrcEIRDisc=restStatChPktBypSegSrcEIRDisc, restChannelBypassCount=restChannelBypassCount, restStatPortT1mControlMode=restStatPortT1mControlMode, restAd10DataPortClockRate=restAd10DataPortClockRate, scRootAccessTable=scRootAccessTable, restFsmCirAvail=restFsmCirAvail, scPartitionHeader=scPartitionHeader, restRtmPortAdManufactDate=restRtmPortAdManufactDate, restSafSyncErrors=restSafSyncErrors, restSgmAgSafTotal=restSgmAgSafTotal, restStatChPktBypOutCongMode=restStatChPktBypOutCongMode, recfDsmDChQOSChPrfIndex=recfDsmDChQOSChPrfIndex, recfDsmDChQOSLowExchCode=recfDsmDChQOSLowExchCode, restRtmAdPortState=restRtmAdPortState, restStatPortRtmTable=restStatPortRtmTable, restStatChPktBypInCIROctetSent=restStatChPktBypInCIROctetSent, restTrkGrpContentsTable=restTrkGrpContentsTable, recfAd10VoicePortTable=recfAd10VoicePortTable, restINLSpeed=restINLSpeed, restStatChPktBypInEIRSegSent=restStatChPktBypInEIRSegSent, restBundleSignalB=restBundleSignalB, scCommunityrestatisticsMap=scCommunityrestatisticsMap, restRtmPortAdFmtRevision=restRtmPortAdFmtRevision, restAd10VoicePortCompressMode=restAd10VoicePortCompressMode, scVoicePrfNetDTMFRelay=scVoicePrfNetDTMFRelay, scIpWANIpAddress=scIpWANIpAddress, recfINLCost=recfINLCost, recfT1mPortEquGain=recfT1mPortEquGain, recfAsmX50CkPhasorSize=recfAsmX50CkPhasorSize, restAsmEngineID=restAsmEngineID, restRtmAdPortLoopbackStatus=restRtmAdPortLoopbackStatus, recfAsmX50PortEntry=recfAsmX50PortEntry, restStatChPktBypSegInacDstDisc=restStatChPktBypSegInacDstDisc, restBundleOutSigD=restBundleOutSigD, restRtmAdPortInterface=restRtmAdPortInterface, restHwRscEngineModAddr=restHwRscEngineModAddr, recfModuleFsm16Table=recfModuleFsm16Table, scIpControlUpdate=scIpControlUpdate, restAd10VoicePortSpeed=restAd10VoicePortSpeed, recfModDsmRecCDRLogOvThrshld=recfModDsmRecCDRLogOvThrshld, restAd10HWConfig=restAd10HWConfig, restStatInlNumber=restStatInlNumber, recfDsmDChExchControlMode=recfDsmDChExchControlMode, scLgmStaticRouteStartMode=scLgmStaticRouteStartMode, restNodeTotalDsmCallsPerSecond=restNodeTotalDsmCallsPerSecond, restTrkGrpEntry=restTrkGrpEntry, scCmntyRestRtmPortAccess=scCmntyRestRtmPortAccess, recfTDMChannelTable=recfTDMChannelTable, restSlotBGDiagResults=restSlotBGDiagResults, restStatChPktBypEntry=restStatChPktBypEntry, restHwRscEngineNumPorts=restHwRscEngineNumPorts, recfSdmPortPartitionID=recfSdmPortPartitionID, restPktChPingTermOrigCong=restPktChPingTermOrigCong, restAd10VoicePortHookStateTx=restAd10VoicePortHookStateTx, restStatAd10DataPortBertSynLoss=restStatAd10DataPortBertSynLoss, restAd10PktBandBaudRate=restAd10PktBandBaudRate, restAd10DataPortEntry=restAd10DataPortEntry, restDsmModExchAddr=restDsmModExchAddr, restChannelStatusAddr=restChannelStatusAddr, restPortSdmBipolarViolationInd=restPortSdmBipolarViolationInd, restAd10DataPortPktRxThreshold=restAd10DataPortPktRxThreshold, recfTDMChannelPartitionID=recfTDMChannelPartitionID, restSlotNumActivePorts=restSlotNumActivePorts, restDsmModExchCode=restDsmModExchCode, restINLNumFrCh=restINLNumFrCh, restPktChannelPingNumRemaining=restPktChannelPingNumRemaining, restTrkGrpContentsDstChAddr=restTrkGrpContentsDstChAddr, restSgmAgmPortAvail=restSgmAgmPortAvail, restDsmModRecCDRContents=restDsmModRecCDRContents, recfAsmX50CkUpdate=recfAsmX50CkUpdate, recfSdmDeviceType=recfSdmDeviceType, recfFrPortMaxFrameSize=recfFrPortMaxFrameSize, alLogAvailableEntries=alLogAvailableEntries, restRtmModuleDS0sUsed=restRtmModuleDS0sUsed, restAsmVoicePortEntry=restAsmVoicePortEntry, restNcpFlashTable=restNcpFlashTable, restFsmSourceBandwidth=restFsmSourceBandwidth, restStatChPktSegmentsToNetwork=restStatChPktSegmentsToNetwork, recfBundleDeviceType=recfBundleDeviceType, restStatChPktBypOutCIROctetRcv=restStatChPktBypOutCIROctetRcv, restLgmPortBERWindowFill=restLgmPortBERWindowFill, restNodeUploadTotal=restNodeUploadTotal, recfE1mPortOOSASignaling=recfE1mPortOOSASignaling, restStatModDsmAddr=restStatModDsmAddr, restSgmAgTable=restSgmAgTable, restAd10DataPortModemSigInfo=restAd10DataPortModemSigInfo, recfModuleDsm=recfModuleDsm, restBundleDS0Map=restBundleDS0Map, restAd10SoftloadStartTime=restAd10SoftloadStartTime, recfBundleOOSASignaling=recfBundleOOSASignaling, scCmntyRestTable=scCmntyRestTable, restAd10DataPortClockMode=restAd10DataPortClockMode, recfFrPortMaxCIR=recfFrPortMaxCIR, restINLAvailableTDMBw=restINLAvailableTDMBw, restDsmModRteTable=restDsmModRteTable, scCmntySecPartHeaderAccess=scCmntySecPartHeaderAccess, scSysNodeNumber=scSysNodeNumber, restStatPortPktLmiNumBadEvents=restStatPortPktLmiNumBadEvents, scModemParity=scModemParity, scCmntyRecfSlotAccess=scCmntyRecfSlotAccess, restAd10VoicePortToneMode=restAd10VoicePortToneMode, scIpOnlineSubnetAddr=scIpOnlineSubnetAddr, restPortPhasorStatus=restPortPhasorStatus, scVoicePrfNetCompressMode=scVoicePrfNetCompressMode, recfFrChannelModuleType=recfFrChannelModuleType, recfTDMChannelDestNodeID=recfTDMChannelDestNodeID, restDsmDChPortAddr=restDsmDChPortAddr, restAd10DataPortDcdOOS=restAd10DataPortDcdOOS, recfAsmVoiceTrkGrpDataMode=recfAsmVoiceTrkGrpDataMode, restStatPortPktLmiSegmentRecv=restStatPortPktLmiSegmentRecv, restStatChPktRemoteCongMode=restStatChPktRemoteCongMode, recfDsmDChPortEncodingType=recfDsmDChPortEncodingType, restAd10SoftloadStatus=restAd10SoftloadStatus, recfFrPortLmiMonitoredEvents=recfFrPortLmiMonitoredEvents, scChProfileCostType=scChProfileCostType, resource=resource, restAd10UnitType=restAd10UnitType, restLgmPortAvailableBw=restLgmPortAvailableBw, restStatAd10DataPortBertByteCnt=restStatAd10DataPortBertByteCnt, restAd10DataPortAsyncParity=restAd10DataPortAsyncParity, scChProfileControlMode=scChProfileControlMode, restStatPortLgmOosCount=restStatPortLgmOosCount, recfFrPortBitMode=recfFrPortBitMode, restSgmAgAddr=restSgmAgAddr, restStatChPktNetEIROctetSent=restStatChPktNetEIROctetSent, restStatChPktBypOutEIROctetRcv=restStatChPktBypOutEIROctetRcv, recfAsmVoiceTrkGrpFaxNSFMode=recfAsmVoiceTrkGrpFaxNSFMode, recfBundleSeizureTime=recfBundleSeizureTime, restFsmTotalBuffers=restFsmTotalBuffers, recfE1mPortFraming=recfE1mPortFraming, restStatChPktBypInCIRSegSent=restStatChPktBypInCIRSegSent, restRtmPortEntry=restRtmPortEntry, recfAd10PktBandAddr=recfAd10PktBandAddr, restPortSubStatus=restPortSubStatus, scSysNodeMasterClockList=scSysNodeMasterClockList, restTrkGrpStatus=restTrkGrpStatus, alPartitionHeader=alPartitionHeader, scModemControlLead=scModemControlLead, restSafBandwidthAvail=restSafBandwidthAvail, restStatChPktBypOutCIRSegRcv=restStatChPktBypOutCIRSegRcv, RtmAdPortAddr=RtmAdPortAddr, restNodePktBandBWAvail=restNodePktBandBWAvail, restStatPortDsmDChPbxLayer2Errs=restStatPortDsmDChPbxLayer2Errs, recfModDsmRecCDRLogTable=recfModDsmRecCDRLogTable, restStatAd10PktBandRxFrOvrSize=restStatAd10PktBandRxFrOvrSize, recfAsmVoiceTrkGrpRmtSigPattern=recfAsmVoiceTrkGrpRmtSigPattern, recfSdmPortOOSOper=recfSdmPortOOSOper, restNestPowerStatus=restNestPowerStatus, restChannelDChOrigNode=restChannelDChOrigNode, restLgmContentsSourceAddr=restLgmContentsSourceAddr, recfModDsmRecCDRLogSize=recfModDsmRecCDRLogSize, restStatPortAsmX50Table=restStatPortAsmX50Table, recfINLMaxPacketDS0=recfINLMaxPacketDS0, restAd10DataPortAsyncSubMode=restAd10DataPortAsyncSubMode, restStatPortDsmDChPbxDisconns=restStatPortDsmDChPbxDisconns, security=security, SlotAddr=SlotAddr, recfT1mPortFailThreshold=recfT1mPortFailThreshold, alPartitionFlushMode=alPartitionFlushMode, recfRtmAdPortAddr=recfRtmAdPortAddr, recfModuleSgmAgTable=recfModuleSgmAgTable, scChProfileOverrideMode=scChProfileOverrideMode, recfTDMChannelSpecialPrfType=recfTDMChannelSpecialPrfType, restAsm=restAsm, scCpiParity=scCpiParity, restNestDiagnostics=restNestDiagnostics, restDsmDChPortNumCallsConn=restDsmDChPortNumCallsConn, restPortSdmFunction=restPortSdmFunction, scSoftloadEmsNodeID=scSoftloadEmsNodeID, restINLContentsEntry=restINLContentsEntry, scVoicePrfNodeRxAudOutMode=scVoicePrfNodeRxAudOutMode)
mibBuilder.exportSymbols("STMIB", recfSdmPortInterface=recfSdmPortInterface, restStatChPktPortCIRSegDrops=restStatChPktPortCIRSegDrops, scCmntyRestHwRscAccess=scCmntyRestHwRscAccess, restAd10DataPortType=restAd10DataPortType, scSysNodeCpiMaxPassthruSessions=scSysNodeCpiMaxPassthruSessions, recfPort=recfPort, restHwRscEngineCurLoad=restHwRscEngineCurLoad, recfSlotModuleStartDiagMask=recfSlotModuleStartDiagMask, restSlotAddr=restSlotAddr, restNestTemperature=restNestTemperature, recfFrPortEntry=recfFrPortEntry, restDsmDChCallRealDiagnostics=restDsmDChCallRealDiagnostics, recfDsmDChQSigT302=recfDsmDChQSigT302, restStatChPktBypInEIRSegDrop=restStatChPktBypInEIRSegDrop, restChannelLoopbackNode=restChannelLoopbackNode, restNestRxmCkt1Status=restNestRxmCkt1Status, restStatPortPktHwOvrRunDiscard=restStatPortPktHwOvrRunDiscard, recfModuleLgmPartition=recfModuleLgmPartition, recfModuleAsmMinCelpPorts=recfModuleAsmMinCelpPorts, recfSdmPortContentionSet=recfSdmPortContentionSet, recfT1mPortOOSCDSignaling=recfT1mPortOOSCDSignaling, scCmntyRecfFrRelayAccess=scCmntyRecfFrRelayAccess, recfAsmVoiceTrkGrpTable=recfAsmVoiceTrkGrpTable, restINLContentsINLNumber=restINLContentsINLNumber, restSafContentsDestAddr=restSafContentsDestAddr, recfAd10DataPortPhysPort=recfAd10DataPortPhysPort, scTrapAccessEntry=scTrapAccessEntry, restStatAd10DataPortTable=restStatAd10DataPortTable, recfTDMChannelDestNodeType=recfTDMChannelDestNodeType, NestAddr=NestAddr, recfSlotModuleType=recfSlotModuleType, restSaf=restSaf, restINLLoopbackDuration=restINLLoopbackDuration, recfHwRscEngineEntry=recfHwRscEngineEntry, recfFrChannelType=recfFrChannelType, restAd10VoicePortNonLinear=restAd10VoicePortNonLinear, restAd10DataPortMode=restAd10DataPortMode, restSlotModuleAssemblyNum=restSlotModuleAssemblyNum, restStatAd10DataPortRxTotFrames=restStatAd10DataPortRxTotFrames, restChannelSourceNodeID=restChannelSourceNodeID, recfAsmX50PortStartMode=recfAsmX50PortStartMode, recfLink2TraStAddr=recfLink2TraStAddr, recfAd10VoicePortPhysPort=recfAd10VoicePortPhysPort, restRtmPortAdCpSpeed=restRtmPortAdCpSpeed, recfINLArqCir=recfINLArqCir, restRtmModuleSafsUsed=restRtmModuleSafsUsed, recfFrPortEncodingType=recfFrPortEncodingType, restStatChPktBypOutEIROctetSent=restStatChPktBypOutEIROctetSent, restDsmModuleNumLocRteEntries=restDsmModuleNumLocRteEntries, restHwRscEngineStatus=restHwRscEngineStatus, scCmntySecTable=scCmntySecTable, restAd10VoicePortHookStateRx=restAd10VoicePortHookStateRx, restRtmAdPortElIntStatus=restRtmAdPortElIntStatus, recfAsmX50PortCircuitMap=recfAsmX50PortCircuitMap, restStatPortAsmX50Control=restStatPortAsmX50Control, scCmntySecVoiceProfileAccess=scCmntySecVoiceProfileAccess, restLgmContentsDestNodeID=restLgmContentsDestNodeID, restHwRscEngineMaxSAFs=restHwRscEngineMaxSAFs, recfT1mPortLineCodeType=recfT1mPortLineCodeType, restDsmModRteRemoteSlot=restDsmModRteRemoteSlot, restStatChPktNetEIROctetRcv=restStatChPktNetEIROctetRcv, restLgmPortLinkSpeed=restLgmPortLinkSpeed, restSlotModuleSWRevision=restSlotModuleSWRevision, restStatChPktBypOutEIRSegSent=restStatChPktBypOutEIRSegSent, restStatChPktNetEIRSegRcv=restStatChPktNetEIRSegRcv, restAsmModApplCurPortsAllowed=restAsmModApplCurPortsAllowed, recfSdmPortINLNumber=recfSdmPortINLNumber, scCmntyRecfLgmPortAccess=scCmntyRecfLgmPortAccess, restSafContentsTable=restSafContentsTable, restStatChPktBypInCIRSegRcv=restStatChPktBypInCIRSegRcv, recfE1mPortStartMode=recfE1mPortStartMode, recfDsmDChPortSharedZeroFlag=recfDsmDChPortSharedZeroFlag, restStatPortT1mErrSec=restStatPortT1mErrSec, restPortLoopbackInitiator=restPortLoopbackInitiator, restAsmModuleMaxCelp=restAsmModuleMaxCelp, restStatChPktPortEIRSegRcv=restStatChPktPortEIRSegRcv, recfDsmDChDPNSSAddr=recfDsmDChDPNSSAddr, scCmntyRestBundleAccess=scCmntyRestBundleAccess, scCmntyAlmTrapAccess=scCmntyAlmTrapAccess, restAd10VoicePortFaxMode=restAd10VoicePortFaxMode, scCmntySecModemAccess=scCmntySecModemAccess, recfAsmVoiceTrkGrpEntry=recfAsmVoiceTrkGrpEntry, restLgmModuleAvailSAFs=restLgmModuleAvailSAFs, recfAd10DataPortPhysSlot=recfAd10DataPortPhysSlot, recfRtmPortEntry=recfRtmPortEntry, recfNodeName=recfNodeName, restINLAvailablePacketBw=restINLAvailablePacketBw, recfRtmAdPortDataBits=recfRtmAdPortDataBits, restSgmAgAgmScfAvail=restSgmAgAgmScfAvail, recfRtmAdPortType=recfRtmAdPortType, recfFrPortDescription=recfFrPortDescription, recfPartitionControl=recfPartitionControl, scCmntyRestStPortAccess=scCmntyRestStPortAccess, scCmntySecSoftloadAccess=scCmntySecSoftloadAccess, restDsmDChCallVirtEntry=restDsmDChCallVirtEntry, restNodeClockQualifierStatus=restNodeClockQualifierStatus, restStatPortLgmFrameReTx=restStatPortLgmFrameReTx, restPortSdmTFunction=restPortSdmTFunction, recfDsmDChPort=recfDsmDChPort, recfNodeLocation=recfNodeLocation, recfAsmX50Table=recfAsmX50Table, restStatPort=restStatPort, restINLContentsDestAddr=restINLContentsDestAddr, restStatChPktPortCIRSegRcv=restStatChPktPortCIRSegRcv, restSafDiagnostics=restSafDiagnostics, scLgmStaticRouteIndex=scLgmStaticRouteIndex, restFsmAddr=restFsmAddr, scCmntyRestSlotAccess=scCmntyRestSlotAccess, scLgmStaticRoutePathDelay=scLgmStaticRoutePathDelay, synchrony=synchrony, ChannelStatusAddr=ChannelStatusAddr, scChProfileMaxCost=scChProfileMaxCost, recfNodeNumberOfNest=recfNodeNumberOfNest, recfClockStartMode=recfClockStartMode, recfAsmVoiceTrkGrpStartMode=recfAsmVoiceTrkGrpStartMode, restDsmModuleNumRmtRteAvail=restDsmModuleNumRmtRteAvail, restStatModDsmControlMode=restStatModDsmControlMode, recfE1mPortErrorThreshold=recfE1mPortErrorThreshold, recfDsmDChExchEntry=recfDsmDChExchEntry, restAsmModApplMaxPortsAllowed=restAsmModApplMaxPortsAllowed, scCommunityrecfMap=scCommunityrecfMap, recfLgmPortInbandSuperrate=recfLgmPortInbandSuperrate, recfAd10AgmPortPartitionID=recfAd10AgmPortPartitionID, recfAsmX50CkTable=recfAsmX50CkTable, recfSlotModuleStartDiagMaskExt=recfSlotModuleStartDiagMaskExt, restAd10DataPortAsyncDataBits=restAd10DataPortAsyncDataBits, restStatPortRtmOOSTransitions=restStatPortRtmOOSTransitions, scCmntyRestModuleAccess=scCmntyRestModuleAccess, restNodePktBandBWMax=restNodePktBandBWMax, scSoftloadSourceEmsIp=scSoftloadSourceEmsIp, restChannelDChOrigAddr=restChannelDChOrigAddr, restChannelSourceAddr=restChannelSourceAddr, scSysNodeUpdate=scSysNodeUpdate, alLogNotificationList=alLogNotificationList, scTrapAccessIp=scTrapAccessIp, restHwRscEngineDiagnostics=restHwRscEngineDiagnostics, restSafFrameSwitchIndicator=restSafFrameSwitchIndicator, scVoicePrfNetSpeed=scVoicePrfNetSpeed, recfINLRemoteNodeID=recfINLRemoteNodeID, restAd10VoicePortTermination=restAd10VoicePortTermination, scCmntyAccessCommunityName=scCmntyAccessCommunityName, restSafTable=restSafTable, recfFrPortAddr=recfFrPortAddr, restStatChPktBypRedThreshold=restStatChPktBypRedThreshold, recfModuleLgmEntry=recfModuleLgmEntry, recfSlotModuleMaxSource=recfSlotModuleMaxSource, recfAsmVoiceTrkGrpCompressMode=recfAsmVoiceTrkGrpCompressMode, recfNodeContact=recfNodeContact, alSysLogSizeAvailable=alSysLogSizeAvailable, recfNestTable=recfNestTable, scChProfileTable=scChProfileTable, restAd10PktBandMaxSegSize=restAd10PktBandMaxSegSize, recfSlotModulePortDiagMask=recfSlotModulePortDiagMask, scIpSubNetworkMask=scIpSubNetworkMask, restFsmTable=restFsmTable, restStatChPktBypNodeID=restStatChPktBypNodeID, scLgmStaticRouteEntry=scLgmStaticRouteEntry, restINLRemotePortAddr=restINLRemotePortAddr, restStatAd10DataPortTxCongDisc=restStatAd10DataPortTxCongDisc, restStatAd10VoicePortAddr=restStatAd10VoicePortAddr, recfAsmX50CkTimeSlot=recfAsmX50CkTimeSlot, recfRtmAdPortUpdate=recfRtmAdPortUpdate)
