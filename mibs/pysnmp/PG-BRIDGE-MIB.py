#
# PySNMP MIB module PG-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PG-BRIDGE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:31:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pgainDSLAM, = mibBuilder.importSymbols("PAIRGAIN-COMMON-HD-MIB", "pgainDSLAM")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, Gauge32, TimeTicks, mib_2, Bits, Counter64, NotificationType, ObjectIdentity, Unsigned32, Integer32, Counter32, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "Gauge32", "TimeTicks", "mib-2", "Bits", "Counter64", "NotificationType", "ObjectIdentity", "Unsigned32", "Integer32", "Counter32", "MibIdentifier", "NotificationType")
RowStatus, TextualConvention, PhysAddress, DisplayString, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "PhysAddress", "DisplayString", "TruthValue", "MacAddress")
class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(Integer32):
    pass

pgsessionMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 927, 1, 9, 8))
if mibBuilder.loadTexts: pgsessionMIB.setLastUpdated('9812170000Z')
if mibBuilder.loadTexts: pgsessionMIB.setOrganization('Pairgain Technology')
pgSessionPort = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1))
pgDot1dBase = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2))
pgDot1dBasePort = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 3))
pgDot1dStpPort = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4))
pgDot1dTp = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5))
pgDot1dStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 6))
pgVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7))
pgSessionRouterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 8))
pgIfindexToSlotPortMap = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 9))
pgBridgePortToSlotPortMap = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 10))
pgSessionPortTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1), )
if mibBuilder.loadTexts: pgSessionPortTable.setStatus('mandatory')
pgSessionPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "PG-BRIDGE-MIB", "pgSessionPortVpi"), (0, "PG-BRIDGE-MIB", "pgSessionPortVci"))
if mibBuilder.loadTexts: pgSessionPortEntry.setStatus('mandatory')
pgSessionInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSessionInstance.setStatus('mandatory')
pgSessionPortVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSessionPortVpi.setStatus('mandatory')
pgSessionPortVci = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSessionPortVci.setStatus('mandatory')
pgSessionPortSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionPortSlotNum.setStatus('mandatory')
pgSessionPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionPortNum.setStatus('mandatory')
pgSessionPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSessionPortIfIndex.setStatus('mandatory')
pgSessionPortBridgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSessionPortBridgePort.setStatus('mandatory')
pgSessionPortRouterGroupInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionPortRouterGroupInterface.setStatus('mandatory')
pgSessionPortVlanIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 9), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionPortVlanIdentifier.setStatus('mandatory')
pgSessionPortServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionPortServiceType.setStatus('mandatory')
pgSessionPortSubscriberName = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionPortSubscriberName.setStatus('mandatory')
pgSessionPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 1, 1, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionPortRowStatus.setStatus('mandatory')
pgDot1dBaseTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2, 1), )
if mibBuilder.loadTexts: pgDot1dBaseTable.setStatus('mandatory')
pgDot1dBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"))
if mibBuilder.loadTexts: pgDot1dBaseEntry.setStatus('mandatory')
pgDot1dBaseBrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDot1dBaseBrEnable.setStatus('mandatory')
pgDot1dBaseBrStpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDot1dBaseBrStpEnable.setStatus('mandatory')
pgDot1dBaseBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dBaseBridgeAddress.setStatus('mandatory')
pgDot1dBaseNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dBaseNumPorts.setStatus('mandatory')
pgDot1dBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparent-only", 2), ("sourceroute-only", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dBaseType.setStatus('mandatory')
pgDot1dTpLearnedEntryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dTpLearnedEntryDiscards.setStatus('mandatory')
pgDot1dTpAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDot1dTpAgingTime.setStatus('mandatory')
pgdot1dBasePortTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 3, 1), )
if mibBuilder.loadTexts: pgdot1dBasePortTable.setStatus('mandatory')
pgdot1dBasePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 3, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "PG-BRIDGE-MIB", "pgSessionPortBridgePort"))
if mibBuilder.loadTexts: pgdot1dBasePortEntry.setStatus('mandatory')
pgdot1dBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dBasePort.setStatus('mandatory')
pgdot1dBasePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dBasePortIfIndex.setStatus('mandatory')
pgdot1dBasePortCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 3, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dBasePortCircuit.setStatus('mandatory')
pgdot1dBasePortDelayExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dBasePortDelayExceededDiscards.setStatus('mandatory')
pgdot1dBasePortMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dBasePortMtuExceededDiscards.setStatus('mandatory')
pgdot1dStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1), )
if mibBuilder.loadTexts: pgdot1dStpPortTable.setStatus('mandatory')
pgdot1dStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "PG-BRIDGE-MIB", "pgSessionPortBridgePort"))
if mibBuilder.loadTexts: pgdot1dStpPortEntry.setStatus('mandatory')
pgdot1dStpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dStpPort.setStatus('mandatory')
pgdot1dStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgdot1dStpPortPriority.setStatus('mandatory')
pgdot1dStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dStpPortState.setStatus('mandatory')
pgdot1dStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgdot1dStpPortEnable.setStatus('mandatory')
pgdot1dStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgdot1dStpPortPathCost.setStatus('mandatory')
pgdot1dStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dStpPortDesignatedRoot.setStatus('mandatory')
pgdot1dStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dStpPortDesignatedCost.setStatus('mandatory')
pgdot1dStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dStpPortDesignatedBridge.setStatus('mandatory')
pgdot1dStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dStpPortDesignatedPort.setStatus('mandatory')
pgdot1dStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgdot1dStpPortForwardTransitions.setStatus('mandatory')
pgdot1dStpPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 4, 1, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgdot1dStpPortRowStatus.setStatus('mandatory')
pgDot1dTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 1), )
if mibBuilder.loadTexts: pgDot1dTpFdbTable.setStatus('mandatory')
pgDot1dTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "PG-BRIDGE-MIB", "pgDot1dTpFdbAddress"))
if mibBuilder.loadTexts: pgDot1dTpFdbEntry.setStatus('mandatory')
pgDot1dTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dTpFdbAddress.setStatus('mandatory')
pgDot1dTpFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dTpFdbPort.setStatus('mandatory')
pgDot1dTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dTpFdbStatus.setStatus('mandatory')
pgDot1dTpPortTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 2), )
if mibBuilder.loadTexts: pgDot1dTpPortTable.setStatus('mandatory')
pgDot1dTpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 2, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "PG-BRIDGE-MIB", "pgDot1dTpPort"))
if mibBuilder.loadTexts: pgDot1dTpPortEntry.setStatus('mandatory')
pgDot1dTpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dTpPort.setStatus('mandatory')
pgDot1dTpPortMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dTpPortMaxInfo.setStatus('mandatory')
pgDot1dTpPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dTpPortInFrames.setStatus('mandatory')
pgDot1dTpPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dTpPortOutFrames.setStatus('mandatory')
pgDot1dTpPortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDot1dTpPortInDiscards.setStatus('mandatory')
pgDot1dStaticTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 6, 1), )
if mibBuilder.loadTexts: pgDot1dStaticTable.setStatus('mandatory')
pgDot1dStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 6, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "PG-BRIDGE-MIB", "pgDot1dStaticAddress"), (0, "PG-BRIDGE-MIB", "pgDot1dStaticReceivePort"))
if mibBuilder.loadTexts: pgDot1dStaticEntry.setStatus('mandatory')
pgDot1dStaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 6, 1, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDot1dStaticAddress.setStatus('mandatory')
pgDot1dStaticReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 6, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDot1dStaticReceivePort.setStatus('mandatory')
pgDot1dStaticAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 6, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDot1dStaticAllowedToGoTo.setStatus('mandatory')
pgDot1dStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDot1dStaticStatus.setStatus('mandatory')
pgVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1), )
if mibBuilder.loadTexts: pgVlanGroupTable.setStatus('mandatory')
pgVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "PG-BRIDGE-MIB", "pgBrVlanGroupIdentifier"))
if mibBuilder.loadTexts: pgVlanGroupEntry.setStatus('mandatory')
pgBrVlanGroupIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupIdentifier.setStatus('mandatory')
pgBrVlanGroupWanBcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupWanBcEnable.setStatus('mandatory')
pgBrVlanGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupName.setStatus('mandatory')
pgBrVlanGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupMode.setStatus('mandatory')
pgBrVlanGroupTag = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupTag.setStatus('mandatory')
pgBrVlanGroupStpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupStpEnable.setStatus('mandatory')
pgBrVlanGroupStpProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpProtocolSpecification.setStatus('mandatory')
pgBrVlanGroupStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupStpPriority.setStatus('mandatory')
pgBrVlanGroupStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpTimeSinceTopologyChange.setStatus('mandatory')
pgBrVlanGroupStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpTopChanges.setStatus('mandatory')
pgBrVlanGroupStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 11), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpDesignatedRoot.setStatus('mandatory')
pgBrVlanGroupStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpRootCost.setStatus('mandatory')
pgBrVlanGroupStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpRootPort.setStatus('mandatory')
pgBrVlanGroupStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpMaxAge.setStatus('mandatory')
pgBrVlanGroupStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 15), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpHelloTime.setStatus('mandatory')
pgBrVlanGroupStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpHoldTime.setStatus('mandatory')
pgBrVlanGroupStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 17), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBrVlanGroupStpForwardDelay.setStatus('mandatory')
pgBrVlanGroupStpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 18), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupStpBridgeMaxAge.setStatus('mandatory')
pgBrVlanGroupStpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 19), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupStpBridgeHelloTime.setStatus('mandatory')
pgBrVlanGroupStpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 20), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupStpBridgeForwardDelay.setStatus('mandatory')
pgBrVlanGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 7, 1, 1, 21), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgBrVlanGroupRowStatus.setStatus('mandatory')
pgSessionRouterGroupTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 8, 1), )
if mibBuilder.loadTexts: pgSessionRouterGroupTable.setStatus('mandatory')
pgSessionRouterGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 8, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "PG-BRIDGE-MIB", "pgSessionPortRouterGroupInterface"))
if mibBuilder.loadTexts: pgSessionRouterGroupEntry.setStatus('mandatory')
pgSessionGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 8, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionGroupIpAddress.setStatus('mandatory')
pgSessionGroupSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 8, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionGroupSubnetMask.setStatus('mandatory')
pgSessionGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 8, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgSessionGroupRowStatus.setStatus('mandatory')
pgIfindexToSlotPortMapTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 9, 1), )
if mibBuilder.loadTexts: pgIfindexToSlotPortMapTable.setStatus('mandatory')
pgIfindexToSlotPortMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 9, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pgIfindexToSlotPortMapEntry.setStatus('mandatory')
pgIfindexToSlotPortMapSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgIfindexToSlotPortMapSlot.setStatus('mandatory')
pgIfindexToSlotPortMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgIfindexToSlotPortMapPort.setStatus('mandatory')
pgIfindexToSlotPortMapIntVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgIfindexToSlotPortMapIntVpi.setStatus('mandatory')
pgIfindexToSlotPortMapIntVci = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgIfindexToSlotPortMapIntVci.setStatus('mandatory')
pgIfindexToSlotPortMapExtVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgIfindexToSlotPortMapExtVpi.setStatus('mandatory')
pgIfindexToSlotPortMapExtVci = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgIfindexToSlotPortMapExtVci.setStatus('mandatory')
pgBridgePortToSlotPortMapTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 10, 1), )
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapTable.setStatus('mandatory')
pgBridgePortToSlotPortMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 10, 1, 1), ).setIndexNames((0, "PG-BRIDGE-MIB", "pgSessionInstance"), (0, "PG-BRIDGE-MIB", "pgSessionPortBridgePort"))
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapEntry.setStatus('mandatory')
pgBridgePortToSlotPortMapSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapSlot.setStatus('mandatory')
pgBridgePortToSlotPortMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapPort.setStatus('mandatory')
pgBridgePortToSlotPortMapIntVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapIntVpi.setStatus('mandatory')
pgBridgePortToSlotPortMapIntVci = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 10, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapIntVci.setStatus('mandatory')
pgBridgePortToSlotPortMapExtVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapExtVpi.setStatus('mandatory')
pgBridgePortToSlotPortMapExtVci = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 8, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgBridgePortToSlotPortMapExtVci.setStatus('mandatory')
mibBuilder.exportSymbols("PG-BRIDGE-MIB", pgDot1dTpFdbEntry=pgDot1dTpFdbEntry, pgIfindexToSlotPortMapSlot=pgIfindexToSlotPortMapSlot, pgSessionGroupIpAddress=pgSessionGroupIpAddress, pgDot1dTpAgingTime=pgDot1dTpAgingTime, pgdot1dStpPortDesignatedBridge=pgdot1dStpPortDesignatedBridge, PYSNMP_MODULE_ID=pgsessionMIB, pgSessionPortTable=pgSessionPortTable, pgDot1dBase=pgDot1dBase, pgBrVlanGroupRowStatus=pgBrVlanGroupRowStatus, pgBrVlanGroupStpBridgeMaxAge=pgBrVlanGroupStpBridgeMaxAge, pgSessionPortVpi=pgSessionPortVpi, pgVlanGroup=pgVlanGroup, pgSessionPortSubscriberName=pgSessionPortSubscriberName, pgDot1dTpFdbPort=pgDot1dTpFdbPort, pgDot1dTpPortMaxInfo=pgDot1dTpPortMaxInfo, pgdot1dStpPortDesignatedRoot=pgdot1dStpPortDesignatedRoot, pgDot1dStpPort=pgDot1dStpPort, pgDot1dStaticEntry=pgDot1dStaticEntry, pgSessionRouterGroup=pgSessionRouterGroup, pgBrVlanGroupStpRootPort=pgBrVlanGroupStpRootPort, pgIfindexToSlotPortMapExtVpi=pgIfindexToSlotPortMapExtVpi, pgDot1dTpPortInFrames=pgDot1dTpPortInFrames, pgBrVlanGroupMode=pgBrVlanGroupMode, BridgeId=BridgeId, pgVlanGroupTable=pgVlanGroupTable, pgBrVlanGroupStpRootCost=pgBrVlanGroupStpRootCost, pgIfindexToSlotPortMapIntVci=pgIfindexToSlotPortMapIntVci, pgDot1dTpPort=pgDot1dTpPort, pgDot1dBaseEntry=pgDot1dBaseEntry, pgsessionMIB=pgsessionMIB, pgdot1dBasePortDelayExceededDiscards=pgdot1dBasePortDelayExceededDiscards, pgdot1dBasePortCircuit=pgdot1dBasePortCircuit, pgBrVlanGroupName=pgBrVlanGroupName, pgBrVlanGroupStpForwardDelay=pgBrVlanGroupStpForwardDelay, pgBrVlanGroupStpHoldTime=pgBrVlanGroupStpHoldTime, pgDot1dBaseType=pgDot1dBaseType, pgDot1dTpPortEntry=pgDot1dTpPortEntry, pgIfindexToSlotPortMapEntry=pgIfindexToSlotPortMapEntry, pgDot1dBaseBridgeAddress=pgDot1dBaseBridgeAddress, pgBrVlanGroupStpMaxAge=pgBrVlanGroupStpMaxAge, pgdot1dBasePortIfIndex=pgdot1dBasePortIfIndex, pgBrVlanGroupStpDesignatedRoot=pgBrVlanGroupStpDesignatedRoot, pgSessionPortRouterGroupInterface=pgSessionPortRouterGroupInterface, pgdot1dStpPortForwardTransitions=pgdot1dStpPortForwardTransitions, pgBridgePortToSlotPortMapExtVpi=pgBridgePortToSlotPortMapExtVpi, pgBrVlanGroupTag=pgBrVlanGroupTag, pgSessionRouterGroupEntry=pgSessionRouterGroupEntry, pgdot1dStpPortDesignatedCost=pgdot1dStpPortDesignatedCost, pgDot1dBasePort=pgDot1dBasePort, pgdot1dStpPortState=pgdot1dStpPortState, pgDot1dTpFdbStatus=pgDot1dTpFdbStatus, pgdot1dStpPortPathCost=pgdot1dStpPortPathCost, pgDot1dTpFdbAddress=pgDot1dTpFdbAddress, pgBrVlanGroupStpTimeSinceTopologyChange=pgBrVlanGroupStpTimeSinceTopologyChange, pgBrVlanGroupStpBridgeHelloTime=pgBrVlanGroupStpBridgeHelloTime, pgDot1dStaticReceivePort=pgDot1dStaticReceivePort, pgdot1dBasePort=pgdot1dBasePort, pgDot1dBaseBrStpEnable=pgDot1dBaseBrStpEnable, Timeout=Timeout, pgSessionPortEntry=pgSessionPortEntry, pgSessionPortBridgePort=pgSessionPortBridgePort, pgdot1dStpPortTable=pgdot1dStpPortTable, pgDot1dStaticTable=pgDot1dStaticTable, pgSessionPortNum=pgSessionPortNum, pgdot1dStpPortEnable=pgdot1dStpPortEnable, pgDot1dBaseBrEnable=pgDot1dBaseBrEnable, pgBrVlanGroupStpBridgeForwardDelay=pgBrVlanGroupStpBridgeForwardDelay, pgDot1dBaseTable=pgDot1dBaseTable, pgdot1dStpPortPriority=pgdot1dStpPortPriority, pgDot1dTpFdbTable=pgDot1dTpFdbTable, pgdot1dBasePortTable=pgdot1dBasePortTable, pgBrVlanGroupStpTopChanges=pgBrVlanGroupStpTopChanges, pgBridgePortToSlotPortMapIntVci=pgBridgePortToSlotPortMapIntVci, pgBrVlanGroupStpHelloTime=pgBrVlanGroupStpHelloTime, pgdot1dBasePortMtuExceededDiscards=pgdot1dBasePortMtuExceededDiscards, pgIfindexToSlotPortMapIntVpi=pgIfindexToSlotPortMapIntVpi, pgBrVlanGroupStpProtocolSpecification=pgBrVlanGroupStpProtocolSpecification, pgSessionPortRowStatus=pgSessionPortRowStatus, pgDot1dStaticStatus=pgDot1dStaticStatus, pgSessionGroupSubnetMask=pgSessionGroupSubnetMask, pgDot1dTpPortOutFrames=pgDot1dTpPortOutFrames, pgDot1dStatic=pgDot1dStatic, pgdot1dBasePortEntry=pgdot1dBasePortEntry, pgdot1dStpPort=pgdot1dStpPort, pgDot1dTp=pgDot1dTp, pgBridgePortToSlotPortMapTable=pgBridgePortToSlotPortMapTable, pgBridgePortToSlotPortMap=pgBridgePortToSlotPortMap, pgDot1dStaticAllowedToGoTo=pgDot1dStaticAllowedToGoTo, pgBridgePortToSlotPortMapIntVpi=pgBridgePortToSlotPortMapIntVpi, pgBrVlanGroupIdentifier=pgBrVlanGroupIdentifier, pgSessionInstance=pgSessionInstance, pgSessionPort=pgSessionPort, pgBrVlanGroupStpEnable=pgBrVlanGroupStpEnable, pgIfindexToSlotPortMap=pgIfindexToSlotPortMap, pgSessionPortVci=pgSessionPortVci, pgDot1dTpPortTable=pgDot1dTpPortTable, pgSessionPortIfIndex=pgSessionPortIfIndex, pgBrVlanGroupWanBcEnable=pgBrVlanGroupWanBcEnable, pgSessionRouterGroupTable=pgSessionRouterGroupTable, pgBrVlanGroupStpPriority=pgBrVlanGroupStpPriority, pgSessionGroupRowStatus=pgSessionGroupRowStatus, pgBridgePortToSlotPortMapSlot=pgBridgePortToSlotPortMapSlot, pgdot1dStpPortEntry=pgdot1dStpPortEntry, pgDot1dStaticAddress=pgDot1dStaticAddress, pgBridgePortToSlotPortMapEntry=pgBridgePortToSlotPortMapEntry, pgDot1dTpPortInDiscards=pgDot1dTpPortInDiscards, pgSessionPortVlanIdentifier=pgSessionPortVlanIdentifier, pgSessionPortServiceType=pgSessionPortServiceType, pgSessionPortSlotNum=pgSessionPortSlotNum, pgVlanGroupEntry=pgVlanGroupEntry, pgIfindexToSlotPortMapTable=pgIfindexToSlotPortMapTable, pgDot1dTpLearnedEntryDiscards=pgDot1dTpLearnedEntryDiscards, pgBridgePortToSlotPortMapPort=pgBridgePortToSlotPortMapPort, pgDot1dBaseNumPorts=pgDot1dBaseNumPorts, pgdot1dStpPortRowStatus=pgdot1dStpPortRowStatus, pgBridgePortToSlotPortMapExtVci=pgBridgePortToSlotPortMapExtVci, pgIfindexToSlotPortMapExtVci=pgIfindexToSlotPortMapExtVci, pgdot1dStpPortDesignatedPort=pgdot1dStpPortDesignatedPort, pgIfindexToSlotPortMapPort=pgIfindexToSlotPortMapPort)
