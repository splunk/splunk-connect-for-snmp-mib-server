#
# PySNMP MIB module Fore-E3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-E3-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:03:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
asx, = mibBuilder.importSymbols("Fore-Common-MIB", "asx")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Counter32, Counter64, Bits, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, TimeTicks, ObjectIdentity, Unsigned32, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "Counter64", "Bits", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "TimeTicks", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
foreE3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5))
if mibBuilder.loadTexts: foreE3.setLastUpdated('9911050000Z')
if mibBuilder.loadTexts: foreE3.setOrganization('FORE')
e3ConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 1))
e3StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2))
e3ConfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 1, 1), )
if mibBuilder.loadTexts: e3ConfTable.setStatus('current')
e3ConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 1, 1, 1), ).setIndexNames((0, "Fore-E3-MIB", "e3ConfBoard"), (0, "Fore-E3-MIB", "e3ConfModule"), (0, "Fore-E3-MIB", "e3ConfPort"))
if mibBuilder.loadTexts: e3ConfEntry.setStatus('current')
e3ConfBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3ConfBoard.setStatus('current')
e3ConfModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3ConfModule.setStatus('current')
e3ConfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3ConfPort.setStatus('current')
e3LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("e3OtherLineType", 1), ("e3Framed", 2), ("e3Plcp", 3))).clone('e3Framed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3LineType.setStatus('current')
e3LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("e3OtherLineCoding", 1), ("e3HDB3", 2))).clone('e3HDB3')).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3LineCoding.setStatus('current')
e3SendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("e3SendNoCode", 1), ("e3SendLineCode", 2), ("e3SendPayloadCode", 3), ("e3SendResetCode", 4), ("e3SendDS1LoopCode", 5), ("e3SendTestPattern", 6))).clone('e3SendNoCode')).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3SendCode.setStatus('current')
e3ReceiveCode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("e3ReceiveNoCode", 1), ("e3ReceiveLineCode", 2), ("e3ReceivePayloadCode", 3), ("e3ReceiveResetCode", 4), ("e3ReceiveDS1LoopCode", 5), ("e3ReceiveTestPattern", 6))).clone('e3ReceiveNoCode')).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3ReceiveCode.setStatus('current')
e3LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("e3NoLoop", 1), ("e3CellLoop", 2), ("e3PayloadLoop", 3), ("e3DiagLoop", 4), ("e3LineLoop", 5), ("e3OtherLoop", 6))).clone('e3NoLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3LoopbackConfig.setStatus('current')
e3TxClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rxTiming", 1), ("localTiming", 2))).clone('localTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3TxClockSource.setStatus('current')
e3RxScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("descrambling", 1), ("noDescrambling", 2))).clone('noDescrambling')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3RxScrambling.setStatus('current')
e3TxScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scrambling", 1), ("noScrambling", 2))).clone('noScrambling')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3TxScrambling.setStatus('current')
e3LineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3LineStatus.setStatus('current')
e3IdleUnassignedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unassigned", 1), ("idle", 2))).clone('unassigned')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3IdleUnassignedCells.setStatus('current')
e3FramingTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 1), )
if mibBuilder.loadTexts: e3FramingTable.setStatus('current')
e3FramingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 1, 1), ).setIndexNames((0, "Fore-E3-MIB", "e3FramingBoard"), (0, "Fore-E3-MIB", "e3FramingModule"), (0, "Fore-E3-MIB", "e3FramingPort"))
if mibBuilder.loadTexts: e3FramingEntry.setStatus('current')
e3FramingBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3FramingBoard.setStatus('current')
e3FramingModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3FramingModule.setStatus('current')
e3FramingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3FramingPort.setStatus('current')
e3FramingLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3FramingLOSs.setStatus('current')
e3FramingLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3FramingLCVs.setStatus('current')
e3FramingFERRs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3FramingFERRs.setStatus('current')
e3FramingOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3FramingOOFs.setStatus('current')
e3FramingFERFs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3FramingFERFs.setStatus('current')
e3FramingAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3FramingAISs.setStatus('current')
e3FramingBIP8s = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3FramingBIP8s.setStatus('current')
e3FramingFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3FramingFEBEs.setStatus('current')
e3PlcpTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 2), )
if mibBuilder.loadTexts: e3PlcpTable.setStatus('current')
e3PlcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 2, 1), ).setIndexNames((0, "Fore-E3-MIB", "e3PlcpBoard"), (0, "Fore-E3-MIB", "e3PlcpModule"), (0, "Fore-E3-MIB", "e3PlcpPort"))
if mibBuilder.loadTexts: e3PlcpEntry.setStatus('current')
e3PlcpBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3PlcpBoard.setStatus('current')
e3PlcpModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3PlcpModule.setStatus('current')
e3PlcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3PlcpPort.setStatus('current')
e3PlcpFERRs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3PlcpFERRs.setStatus('current')
e3PlcpLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3PlcpLOFs.setStatus('current')
e3PlcpBIP8s = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3PlcpBIP8s.setStatus('current')
e3PlcpFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3PlcpFEBEs.setStatus('current')
e3PlcpYellows = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3PlcpYellows.setStatus('current')
e3AtmTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 3), )
if mibBuilder.loadTexts: e3AtmTable.setStatus('current')
e3AtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 3, 1), ).setIndexNames((0, "Fore-E3-MIB", "e3AtmBoard"), (0, "Fore-E3-MIB", "e3AtmModule"), (0, "Fore-E3-MIB", "e3AtmPort"))
if mibBuilder.loadTexts: e3AtmEntry.setStatus('current')
e3AtmBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3AtmBoard.setStatus('current')
e3AtmModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3AtmModule.setStatus('current')
e3AtmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3AtmPort.setStatus('current')
e3AtmHCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3AtmHCSs.setStatus('current')
e3AtmRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3AtmRxCells.setStatus('current')
e3AtmTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3AtmTxCells.setStatus('current')
e3AtmLCDs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 5, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3AtmLCDs.setStatus('current')
mibBuilder.exportSymbols("Fore-E3-MIB", e3PlcpEntry=e3PlcpEntry, e3FramingModule=e3FramingModule, e3PlcpTable=e3PlcpTable, e3PlcpModule=e3PlcpModule, e3PlcpPort=e3PlcpPort, e3AtmTable=e3AtmTable, e3LineCoding=e3LineCoding, e3AtmTxCells=e3AtmTxCells, e3PlcpBIP8s=e3PlcpBIP8s, e3PlcpLOFs=e3PlcpLOFs, e3RxScrambling=e3RxScrambling, e3LineType=e3LineType, e3ConfTable=e3ConfTable, e3IdleUnassignedCells=e3IdleUnassignedCells, e3PlcpBoard=e3PlcpBoard, e3FramingAISs=e3FramingAISs, e3PlcpFERRs=e3PlcpFERRs, PYSNMP_MODULE_ID=foreE3, e3TxScrambling=e3TxScrambling, e3FramingBIP8s=e3FramingBIP8s, e3ConfGroup=e3ConfGroup, e3ConfBoard=e3ConfBoard, e3AtmLCDs=e3AtmLCDs, foreE3=foreE3, e3FramingBoard=e3FramingBoard, e3FramingLOSs=e3FramingLOSs, e3FramingEntry=e3FramingEntry, e3AtmModule=e3AtmModule, e3FramingFERRs=e3FramingFERRs, e3PlcpYellows=e3PlcpYellows, e3AtmBoard=e3AtmBoard, e3ConfModule=e3ConfModule, e3FramingPort=e3FramingPort, e3AtmRxCells=e3AtmRxCells, e3AtmEntry=e3AtmEntry, e3SendCode=e3SendCode, e3AtmHCSs=e3AtmHCSs, e3FramingFERFs=e3FramingFERFs, e3AtmPort=e3AtmPort, e3ConfPort=e3ConfPort, e3FramingFEBEs=e3FramingFEBEs, e3LoopbackConfig=e3LoopbackConfig, e3FramingOOFs=e3FramingOOFs, e3StatsGroup=e3StatsGroup, e3LineStatus=e3LineStatus, e3FramingLCVs=e3FramingLCVs, e3ReceiveCode=e3ReceiveCode, e3ConfEntry=e3ConfEntry, e3PlcpFEBEs=e3PlcpFEBEs, e3TxClockSource=e3TxClockSource, e3FramingTable=e3FramingTable)
