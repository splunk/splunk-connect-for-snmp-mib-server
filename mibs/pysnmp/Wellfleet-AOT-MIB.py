#
# PySNMP MIB module Wellfleet-AOT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-AOT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:32:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Bits, Integer32, ModuleIdentity, ObjectIdentity, Counter32, TimeTicks, Gauge32, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "Integer32", "ModuleIdentity", "ObjectIdentity", "Counter32", "TimeTicks", "Gauge32", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfAsyncOverTcpGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfAsyncOverTcpGroup")
wfAot = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 1))
wfAotDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAotDelete.setStatus('mandatory')
wfAotDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAotDisable.setStatus('mandatory')
wfAotState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAotState.setStatus('mandatory')
wfAotInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 2), )
if mibBuilder.loadTexts: wfAotInterfaceTable.setStatus('mandatory')
wfAotInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 2, 1), ).setIndexNames((0, "Wellfleet-AOT-MIB", "wfAotInterfaceSlotNumber"), (0, "Wellfleet-AOT-MIB", "wfAotInterfaceCctNumber"))
if mibBuilder.loadTexts: wfAotInterfaceEntry.setStatus('mandatory')
wfAotInterfaceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAotInterfaceDelete.setStatus('mandatory')
wfAotInterfaceDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAotInterfaceDisable.setStatus('mandatory')
wfAotInterfaceCctNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAotInterfaceCctNumber.setStatus('mandatory')
wfAotInterfaceSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAotInterfaceSlotNumber.setStatus('mandatory')
wfAotInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAotInterfaceState.setStatus('mandatory')
wfAotInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singledrop", 1), ("multidrop", 2))).clone('singledrop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAotInterfaceType.setStatus('mandatory')
wfAotInterfaceAttachedTo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAotInterfaceAttachedTo.setStatus('mandatory')
wfAotInterfacePktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAotInterfacePktCnt.setStatus('mandatory')
wfAotKeepaliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAotKeepaliveInterval.setStatus('mandatory')
wfAotKeepaliveRto = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAotKeepaliveRto.setStatus('mandatory')
wfAotKeepaliveMaxRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAotKeepaliveMaxRetry.setStatus('mandatory')
wfAotPeerTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 3), )
if mibBuilder.loadTexts: wfAotPeerTable.setStatus('mandatory')
wfAotPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 3, 1), ).setIndexNames((0, "Wellfleet-AOT-MIB", "wfAotPeerSlotNumber"), (0, "Wellfleet-AOT-MIB", "wfAotPeerCctNumber"), (0, "Wellfleet-AOT-MIB", "wfAotPeerRemoteIpAddr"), (0, "Wellfleet-AOT-MIB", "wfAotPeerLocalTcpListenPort"), (0, "Wellfleet-AOT-MIB", "wfAotPeerRemoteTcpListenPort"), (0, "Wellfleet-AOT-MIB", "wfAotConnOriginator"))
if mibBuilder.loadTexts: wfAotPeerEntry.setStatus('mandatory')
wfAotPeerEntryDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAotPeerEntryDelete.setStatus('mandatory')
wfAotPeerEntryDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAotPeerEntryDisable.setStatus('mandatory')
wfAotPeerSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAotPeerSlotNumber.setStatus('mandatory')
wfAotPeerCctNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAotPeerCctNumber.setStatus('mandatory')
wfAotPeerRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAotPeerRemoteIpAddr.setStatus('mandatory')
wfAotConnOriginator = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("self", 1), ("partner", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAotConnOriginator.setStatus('mandatory')
wfAotPeerLocalTcpListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAotPeerLocalTcpListenPort.setStatus('mandatory')
wfAotPeerRemoteTcpListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAotPeerRemoteTcpListenPort.setStatus('mandatory')
wfAotPeerLocalTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAotPeerLocalTcpPort.setStatus('mandatory')
wfAotPeerRemoteTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 21, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAotPeerRemoteTcpPort.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-AOT-MIB", wfAotPeerRemoteIpAddr=wfAotPeerRemoteIpAddr, wfAotInterfaceState=wfAotInterfaceState, wfAotInterfaceAttachedTo=wfAotInterfaceAttachedTo, wfAotPeerTable=wfAotPeerTable, wfAotInterfaceCctNumber=wfAotInterfaceCctNumber, wfAotState=wfAotState, wfAotPeerEntryDisable=wfAotPeerEntryDisable, wfAotPeerLocalTcpListenPort=wfAotPeerLocalTcpListenPort, wfAotPeerLocalTcpPort=wfAotPeerLocalTcpPort, wfAotPeerEntryDelete=wfAotPeerEntryDelete, wfAotDelete=wfAotDelete, wfAotDisable=wfAotDisable, wfAotInterfaceType=wfAotInterfaceType, wfAotInterfaceEntry=wfAotInterfaceEntry, wfAotKeepaliveInterval=wfAotKeepaliveInterval, wfAotPeerSlotNumber=wfAotPeerSlotNumber, wfAotPeerCctNumber=wfAotPeerCctNumber, wfAotInterfaceDisable=wfAotInterfaceDisable, wfAotInterfaceSlotNumber=wfAotInterfaceSlotNumber, wfAotInterfaceTable=wfAotInterfaceTable, wfAotKeepaliveMaxRetry=wfAotKeepaliveMaxRetry, wfAotInterfaceDelete=wfAotInterfaceDelete, wfAotPeerEntry=wfAotPeerEntry, wfAotConnOriginator=wfAotConnOriginator, wfAotPeerRemoteTcpListenPort=wfAotPeerRemoteTcpListenPort, wfAotPeerRemoteTcpPort=wfAotPeerRemoteTcpPort, wfAotInterfacePktCnt=wfAotInterfacePktCnt, wfAot=wfAot, wfAotKeepaliveRto=wfAotKeepaliveRto)
