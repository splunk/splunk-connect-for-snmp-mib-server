#
# PySNMP MIB module CPIWF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPIWF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:11:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, enterprises, Integer32, NotificationType, Bits, MibIdentifier, IpAddress, Unsigned32, ModuleIdentity, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "enterprises", "Integer32", "NotificationType", "Bits", "MibIdentifier", "IpAddress", "Unsigned32", "ModuleIdentity", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "TimeTicks", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
atmForum = MibIdentifier((1, 3, 6, 1, 4, 1, 353))
atmForumNetworkManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5))
atmfLoopEmulationService = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 10))
cpIwfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 353, 5, 10, 1))
if mibBuilder.loadTexts: cpIwfMIB.setLastUpdated('200107260000Z')
if mibBuilder.loadTexts: cpIwfMIB.setOrganization('ATM Forum VMOA Working Group')
cpIwfMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1))
cpIwfMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 2))
cpIwf = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1))
cpIwfVpi = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfVpi.setStatus('current')
cpIwfVci = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfVci.setStatus('current')
cpIwfEchoCancellationSupport = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfEchoCancellationSupport.setStatus('current')
cpIwfNumPotsPorts = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfNumPotsPorts.setStatus('current')
cpIwfNumIsdnBriPorts = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfNumIsdnBriPorts.setStatus('current')
cpIwfTimingReference = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ntr", 1), ("adaptiveVoice", 2), ("freeRun", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfTimingReference.setStatus('current')
cpIwfPotsPortEncodingSelectionMode = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("independent", 1), ("masterSlave", 2))).clone('masterSlave')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpIwfPotsPortEncodingSelectionMode.setStatus('current')
cpIwfIsdnBriPortEncodingSelectionMode = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("independent", 1), ("masterSlave", 2))).clone('masterSlave')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpIwfIsdnBriPortEncodingSelectionMode.setStatus('current')
cpIwfElcpAndPstnChannelBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 9), Integer32().clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpIwfElcpAndPstnChannelBandwidth.setStatus('current')
cpIwfAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("shuttingDown", 3), ("testing", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpIwfAdminStatus.setStatus('current')
cpIwfOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfOperStatus.setStatus('current')
cpIwfRestart = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("started", 1), ("warmStart", 2), ("coldStart", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpIwfRestart.setStatus('current')
cpIwfTestType = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("selfTest", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpIwfTestType.setStatus('current')
cpIwfTestResult = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("null", 1), ("success", 2), ("failure", 3), ("inProgress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfTestResult.setStatus('current')
cpIwfTestResultText = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfTestResultText.setStatus('current')
cpIwfPlayoutBufferDepth = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 16), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpIwfPlayoutBufferDepth.setStatus('current')
cpIwfImpairmentInterval = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 17), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpIwfImpairmentInterval.setStatus('current')
cpIwfImpairmentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpIwfImpairmentThreshold.setStatus('current')
cpIwfV5PSTNProtocolVariant = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 19), Integer32().clone(44)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpIwfV5PSTNProtocolVariant.setStatus('current')
cpIwfMwdForRestart = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 20), Integer32().clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpIwfMwdForRestart.setStatus('current')
cpIwfEocBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 640000)).clone(32000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpIwfEocBandwidth.setStatus('current')
cpIwfCurrentConfig = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpIwfCurrentConfig.setStatus('current')
cpIwfTrapGeneration = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled-all", 2), ("disabled-except-coldStart", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpIwfTrapGeneration.setStatus('current')
cpIwfVendorName = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfVendorName.setStatus('current')
cpIwfDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfDeviceType.setStatus('current')
cpIwfHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfHardwareVersion.setStatus('current')
cpIwfSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfSoftwareVersion.setStatus('current')
cpIwfAal2Profile = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 2))
aal2ApplicationIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 2, 1), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2ApplicationIdentifier.setStatus('current')
aal2CpsMaxMultiplexedChannels = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2CpsMaxMultiplexedChannels.setStatus('current')
aal2CpsMaxSDULength = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(45, 45), ValueRangeConstraint(64, 64), )).clone(45)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2CpsMaxSDULength.setStatus('current')
aal2CpsCIDLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 223)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2CpsCIDLowerLimit.setStatus('current')
aal2CpsCIDUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 223)).clone(223)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2CpsCIDUpperLimit.setStatus('current')
aal2CpsOptimisation = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleCpsPacketPerCpsPduNoOverlap", 1), ("multipleCpsPacketsPerCpsPduWithOverlap", 2))).clone('singleCpsPacketPerCpsPduNoOverlap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2CpsOptimisation.setStatus('current')
aal2CpsTimerCuValue = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2CpsTimerCuValue.setStatus('current')
aal2SscsFaxDemodulationTransport = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2SscsFaxDemodulationTransport.setStatus('current')
aal2SscsDtmfDigitPacketTransport = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2SscsDtmfDigitPacketTransport.setStatus('current')
aal2SscsPcmEncoding = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aLaw", 1), ("uLaw", 2))).clone('aLaw')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2SscsPcmEncoding.setStatus('current')
aal2SscsMaxSssarSduLength = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(493, 65568)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2SscsMaxSssarSduLength.setStatus('current')
aal2SscsProfileSource = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ituT", 1), ("other", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2SscsProfileSource.setStatus('current')
aal2SscsPredefinedProfileIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 2, 13), Integer32().clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2SscsPredefinedProfileIdentifier.setStatus('current')
aal2SscsIeeeOui = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 2, 14), Integer32().clone(41022)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2SscsIeeeOui.setStatus('current')
aal2SscsSsSarAssemblyTimerValue = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 2, 15), Integer32().clone(2147483647)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2SscsSsSarAssemblyTimerValue.setStatus('current')
cpIwfPotsPortTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 3), )
if mibBuilder.loadTexts: cpIwfPotsPortTable.setStatus('current')
cpIwfPotsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 3, 1), ).setIndexNames((0, "CPIWF-MIB", "potsPortNumber"))
if mibBuilder.loadTexts: cpIwfPotsPortEntry.setStatus('current')
potsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: potsPortNumber.setStatus('current')
potsPhysicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: potsPhysicalPort.setStatus('current')
aal2ChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2ChannelId.setStatus('current')
potsPortTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("codecLoopback", 2), ("aal2Loopback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: potsPortTestType.setStatus('current')
signalingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loopStart", 1), ("loopReverseBattery", 2), ("groundStart", 3), ("ddiPbxStart", 4))).clone('loopStart')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: signalingMethod.setStatus('current')
potsPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: potsPortLabel.setStatus('current')
cpIwfIsdnBriPortTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 4), )
if mibBuilder.loadTexts: cpIwfIsdnBriPortTable.setStatus('current')
cpIwfIsdnBriPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 4, 1), ).setIndexNames((0, "CPIWF-MIB", "isdnBriPortNumber"))
if mibBuilder.loadTexts: cpIwfIsdnBriPortEntry.setStatus('current')
isdnBriPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: isdnBriPortNumber.setStatus('current')
isdnBriPhysicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnBriPhysicalPort.setStatus('current')
aal2ChannelIdD = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2ChannelIdD.setStatus('current')
aal2ChannelIdB1 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2ChannelIdB1.setStatus('current')
aal2ChannelIdB2 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2ChannelIdB2.setStatus('current')
isdnBriPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnBriPortLabel.setStatus('current')
isdnBriPortTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("physicalPortLoopback", 1), ("dChannelPhysicalPortLoopback", 2), ("b1ChannelPhysicalPortLoopback", 3), ("b2ChannelPhysicalPortLoopback", 4), ("dChannelAal2Loopback", 5), ("b1ChannelAal2Loopback", 6), ("b2ChannelAal2Loopback", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnBriPortTestType.setStatus('current')
cpIwfAal2Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 6))
aal2CpsInPkts = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2CpsInPkts.setStatus('current')
aal2CpsOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2CpsOutPkts.setStatus('current')
aal2CpsParityErrors = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2CpsParityErrors.setStatus('current')
aal2CpsSeqNumErrors = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2CpsSeqNumErrors.setStatus('current')
aal2CpsOsfMismatchErrors = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2CpsOsfMismatchErrors.setStatus('current')
aal2CpsOsfErrors = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2CpsOsfErrors.setStatus('current')
aal2CpsHecErrors = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2CpsHecErrors.setStatus('current')
aal2CpsOversizedSduErrors = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2CpsOversizedSduErrors.setStatus('current')
aal2CpsReassemblyErrors = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2CpsReassemblyErrors.setStatus('current')
aal2CpsHecOverlapErrors = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2CpsHecOverlapErrors.setStatus('current')
aal2CpsUuiErrors = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2CpsUuiErrors.setStatus('current')
aal2CpsCidErrors = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2CpsCidErrors.setStatus('current')
aal2SscsOversizedSssarSduErrors = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 6, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2SscsOversizedSssarSduErrors.setStatus('current')
aal2SscsSssarRasTimerExpiryErrors = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 6, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2SscsSssarRasTimerExpiryErrors.setStatus('current')
aal2SscsUndersizedSstedPduErrors = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 6, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2SscsUndersizedSstedPduErrors.setStatus('current')
aal2SscsSstedPduLengthMismatchErrors = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 6, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2SscsSstedPduLengthMismatchErrors.setStatus('current')
aal2SscsSstedCrcMismatchErrors = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 6, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal2SscsSstedCrcMismatchErrors.setStatus('current')
cpIwfPotsPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 7), )
if mibBuilder.loadTexts: cpIwfPotsPortStatsTable.setStatus('current')
cpIwfPotsPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 7, 1), ).setIndexNames((0, "CPIWF-MIB", "potsPortNumber"))
if mibBuilder.loadTexts: cpIwfPotsPortStatsEntry.setStatus('current')
cpIwfPotsPortActiveSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfPotsPortActiveSeconds.setStatus('current')
cpIwfPotsPortFillerOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfPotsPortFillerOctets.setStatus('current')
cpIwfPotsPortDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfPotsPortDroppedOctets.setStatus('current')
cpIwfIsdnBriPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 8), )
if mibBuilder.loadTexts: cpIwfIsdnBriPortStatsTable.setStatus('current')
cpIwfIsdnBriPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 8, 1), ).setIndexNames((0, "CPIWF-MIB", "isdnBriPortNumber"))
if mibBuilder.loadTexts: cpIwfIsdnBriPortStatsEntry.setStatus('current')
cpIwfIsdnBriPortB1ActiveSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfIsdnBriPortB1ActiveSeconds.setStatus('current')
cpIwfIsdnBriPortB1FillerOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfIsdnBriPortB1FillerOctets.setStatus('current')
cpIwfIsdnBriPortB1DroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfIsdnBriPortB1DroppedOctets.setStatus('current')
cpIwfIsdnBriPortB2ActiveSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfIsdnBriPortB2ActiveSeconds.setStatus('current')
cpIwfIsdnBriPortB2FillerOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfIsdnBriPortB2FillerOctets.setStatus('current')
cpIwfIsdnBriPortB2DroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpIwfIsdnBriPortB2DroppedOctets.setStatus('current')
cpIwfMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 2, 0))
cpIwfInsufficientPhysicalBandwidth = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 2, 0, 1)).setObjects(("CPIWF-MIB", "cpIwfUpstreamPhysicalBandwidth"), ("CPIWF-MIB", "cpIwfDownstreamPhysicalBandwidth"))
if mibBuilder.loadTexts: cpIwfInsufficientPhysicalBandwidth.setStatus('current')
cpIwfUpstreamPhysicalBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpIwfUpstreamPhysicalBandwidth.setStatus('current')
cpIwfDownstreamPhysicalBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpIwfDownstreamPhysicalBandwidth.setStatus('current')
cpIwfExcessImpairment = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 2, 0, 2)).setObjects(("CPIWF-MIB", "cpIwfImpairmentPortType"), ("CPIWF-MIB", "cpIwfPortNumber"))
if mibBuilder.loadTexts: cpIwfExcessImpairment.setStatus('current')
cpIwfImpairmentPortType = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pots", 1), ("isdnBriB1", 2), ("isdnBriB2", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpIwfImpairmentPortType.setStatus('current')
cpIwfPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 240))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpIwfPortNumber.setStatus('current')
cpIwfMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 3))
cpIwfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 3, 1))
cpIwfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 3, 2))
cpIwfMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 3, 1, 1)).setObjects(("CPIWF-MIB", "cpIwfGeneralGroup"), ("CPIWF-MIB", "cpIwfNotificationsGroup"), ("CPIWF-MIB", "cpIwfAal2ConfigGroup"), ("CPIWF-MIB", "cpIwfAal2StatsGroup"), ("CPIWF-MIB", "cpIwfPotsPortConfigGroup"), ("CPIWF-MIB", "cpIwfPotsPortStatsGroup"), ("CPIWF-MIB", "cpIwfIsdnBriPortConfigGroup"), ("CPIWF-MIB", "cpIwfIsdnBriPortStatsGroup"), ("CPIWF-MIB", "cpIwfPotsPortCidConfigGroup"), ("CPIWF-MIB", "cpIwfIsdnBriPortCidConfigGroup"), ("CPIWF-MIB", "cpIwfElcpPstnGroup"), ("CPIWF-MIB", "cpIwfPlayoutBufferGroup"), ("CPIWF-MIB", "cpIwfImpairmentNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpIwfMIBCompliance = cpIwfMIBCompliance.setStatus('current')
cpIwfGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 3, 2, 1)).setObjects(("CPIWF-MIB", "cpIwfVpi"), ("CPIWF-MIB", "cpIwfVci"), ("CPIWF-MIB", "cpIwfTimingReference"), ("CPIWF-MIB", "cpIwfEchoCancellationSupport"), ("CPIWF-MIB", "cpIwfAdminStatus"), ("CPIWF-MIB", "cpIwfOperStatus"), ("CPIWF-MIB", "cpIwfRestart"), ("CPIWF-MIB", "cpIwfTestType"), ("CPIWF-MIB", "cpIwfTestResult"), ("CPIWF-MIB", "cpIwfTestResultText"), ("CPIWF-MIB", "cpIwfMwdForRestart"), ("CPIWF-MIB", "cpIwfEocBandwidth"), ("CPIWF-MIB", "cpIwfCurrentConfig"), ("CPIWF-MIB", "cpIwfTrapGeneration"), ("CPIWF-MIB", "cpIwfVendorName"), ("CPIWF-MIB", "cpIwfDeviceType"), ("CPIWF-MIB", "cpIwfHardwareVersion"), ("CPIWF-MIB", "cpIwfSoftwareVersion"), ("CPIWF-MIB", "cpIwfUpstreamPhysicalBandwidth"), ("CPIWF-MIB", "cpIwfDownstreamPhysicalBandwidth"), ("CPIWF-MIB", "cpIwfPortNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpIwfGeneralGroup = cpIwfGeneralGroup.setStatus('current')
cpIwfAal2ConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 3, 2, 2)).setObjects(("CPIWF-MIB", "aal2ApplicationIdentifier"), ("CPIWF-MIB", "aal2CpsMaxMultiplexedChannels"), ("CPIWF-MIB", "aal2CpsMaxSDULength"), ("CPIWF-MIB", "aal2CpsCIDLowerLimit"), ("CPIWF-MIB", "aal2CpsCIDUpperLimit"), ("CPIWF-MIB", "aal2CpsOptimisation"), ("CPIWF-MIB", "aal2CpsTimerCuValue"), ("CPIWF-MIB", "aal2SscsMaxSssarSduLength"), ("CPIWF-MIB", "aal2SscsFaxDemodulationTransport"), ("CPIWF-MIB", "aal2SscsDtmfDigitPacketTransport"), ("CPIWF-MIB", "aal2SscsPcmEncoding"), ("CPIWF-MIB", "aal2SscsProfileSource"), ("CPIWF-MIB", "aal2SscsPredefinedProfileIdentifier"), ("CPIWF-MIB", "aal2SscsIeeeOui"), ("CPIWF-MIB", "aal2SscsSsSarAssemblyTimerValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpIwfAal2ConfigGroup = cpIwfAal2ConfigGroup.setStatus('current')
cpIwfPotsPortConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 3, 2, 3)).setObjects(("CPIWF-MIB", "cpIwfNumPotsPorts"), ("CPIWF-MIB", "cpIwfPotsPortEncodingSelectionMode"), ("CPIWF-MIB", "potsPhysicalPort"), ("CPIWF-MIB", "potsPortTestType"), ("CPIWF-MIB", "signalingMethod"), ("CPIWF-MIB", "potsPortLabel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpIwfPotsPortConfigGroup = cpIwfPotsPortConfigGroup.setStatus('current')
cpIwfIsdnBriPortConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 3, 2, 4)).setObjects(("CPIWF-MIB", "cpIwfNumIsdnBriPorts"), ("CPIWF-MIB", "cpIwfIsdnBriPortEncodingSelectionMode"), ("CPIWF-MIB", "isdnBriPhysicalPort"), ("CPIWF-MIB", "isdnBriPortLabel"), ("CPIWF-MIB", "isdnBriPortTestType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpIwfIsdnBriPortConfigGroup = cpIwfIsdnBriPortConfigGroup.setStatus('current')
cpIwfPotsPortCidConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 3, 2, 5)).setObjects(("CPIWF-MIB", "aal2ChannelId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpIwfPotsPortCidConfigGroup = cpIwfPotsPortCidConfigGroup.setStatus('current')
cpIwfIsdnBriPortCidConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 3, 2, 6)).setObjects(("CPIWF-MIB", "aal2ChannelIdD"), ("CPIWF-MIB", "aal2ChannelIdB1"), ("CPIWF-MIB", "aal2ChannelIdB2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpIwfIsdnBriPortCidConfigGroup = cpIwfIsdnBriPortCidConfigGroup.setStatus('current')
cpIwfAal2StatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 3, 2, 7)).setObjects(("CPIWF-MIB", "aal2CpsInPkts"), ("CPIWF-MIB", "aal2CpsOutPkts"), ("CPIWF-MIB", "aal2CpsParityErrors"), ("CPIWF-MIB", "aal2CpsSeqNumErrors"), ("CPIWF-MIB", "aal2CpsOsfMismatchErrors"), ("CPIWF-MIB", "aal2CpsOsfErrors"), ("CPIWF-MIB", "aal2CpsHecOverlapErrors"), ("CPIWF-MIB", "aal2CpsHecErrors"), ("CPIWF-MIB", "aal2CpsOversizedSduErrors"), ("CPIWF-MIB", "aal2CpsReassemblyErrors"), ("CPIWF-MIB", "aal2CpsUuiErrors"), ("CPIWF-MIB", "aal2CpsCidErrors"), ("CPIWF-MIB", "aal2SscsOversizedSssarSduErrors"), ("CPIWF-MIB", "aal2SscsSssarRasTimerExpiryErrors"), ("CPIWF-MIB", "aal2SscsUndersizedSstedPduErrors"), ("CPIWF-MIB", "aal2SscsSstedPduLengthMismatchErrors"), ("CPIWF-MIB", "aal2SscsSstedCrcMismatchErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpIwfAal2StatsGroup = cpIwfAal2StatsGroup.setStatus('current')
cpIwfPotsPortStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 3, 2, 8)).setObjects(("CPIWF-MIB", "cpIwfPotsPortActiveSeconds"), ("CPIWF-MIB", "cpIwfPotsPortFillerOctets"), ("CPIWF-MIB", "cpIwfPotsPortDroppedOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpIwfPotsPortStatsGroup = cpIwfPotsPortStatsGroup.setStatus('current')
cpIwfIsdnBriPortStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 3, 2, 9)).setObjects(("CPIWF-MIB", "cpIwfIsdnBriPortB1ActiveSeconds"), ("CPIWF-MIB", "cpIwfIsdnBriPortB1FillerOctets"), ("CPIWF-MIB", "cpIwfIsdnBriPortB1DroppedOctets"), ("CPIWF-MIB", "cpIwfIsdnBriPortB2ActiveSeconds"), ("CPIWF-MIB", "cpIwfIsdnBriPortB2FillerOctets"), ("CPIWF-MIB", "cpIwfIsdnBriPortB2DroppedOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpIwfIsdnBriPortStatsGroup = cpIwfIsdnBriPortStatsGroup.setStatus('current')
cpIwfElcpPstnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 3, 2, 10)).setObjects(("CPIWF-MIB", "cpIwfV5PSTNProtocolVariant"), ("CPIWF-MIB", "cpIwfElcpAndPstnChannelBandwidth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpIwfElcpPstnGroup = cpIwfElcpPstnGroup.setStatus('current')
cpIwfPlayoutBufferGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 3, 2, 11)).setObjects(("CPIWF-MIB", "cpIwfPlayoutBufferDepth"), ("CPIWF-MIB", "cpIwfImpairmentInterval"), ("CPIWF-MIB", "cpIwfImpairmentThreshold"), ("CPIWF-MIB", "cpIwfImpairmentPortType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpIwfPlayoutBufferGroup = cpIwfPlayoutBufferGroup.setStatus('current')
cpIwfNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 3, 2, 12)).setObjects(("CPIWF-MIB", "cpIwfInsufficientPhysicalBandwidth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpIwfNotificationsGroup = cpIwfNotificationsGroup.setStatus('current')
cpIwfImpairmentNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 353, 5, 10, 1, 3, 2, 13)).setObjects(("CPIWF-MIB", "cpIwfExcessImpairment"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpIwfImpairmentNotificationsGroup = cpIwfImpairmentNotificationsGroup.setStatus('current')
mibBuilder.exportSymbols("CPIWF-MIB", aal2CpsCidErrors=aal2CpsCidErrors, cpIwfGeneralGroup=cpIwfGeneralGroup, cpIwfAal2ConfigGroup=cpIwfAal2ConfigGroup, cpIwfPotsPortStatsGroup=cpIwfPotsPortStatsGroup, aal2CpsParityErrors=aal2CpsParityErrors, cpIwfIsdnBriPortEntry=cpIwfIsdnBriPortEntry, isdnBriPortNumber=isdnBriPortNumber, cpIwfVpi=cpIwfVpi, aal2SscsMaxSssarSduLength=aal2SscsMaxSssarSduLength, aal2ChannelIdB2=aal2ChannelIdB2, isdnBriPortLabel=isdnBriPortLabel, cpIwfTestResult=cpIwfTestResult, cpIwfImpairmentThreshold=cpIwfImpairmentThreshold, aal2ChannelId=aal2ChannelId, aal2CpsReassemblyErrors=aal2CpsReassemblyErrors, cpIwfTestResultText=cpIwfTestResultText, cpIwfIsdnBriPortStatsGroup=cpIwfIsdnBriPortStatsGroup, cpIwfPlayoutBufferGroup=cpIwfPlayoutBufferGroup, potsPortLabel=potsPortLabel, isdnBriPortTestType=isdnBriPortTestType, aal2CpsHecErrors=aal2CpsHecErrors, aal2SscsSssarRasTimerExpiryErrors=aal2SscsSssarRasTimerExpiryErrors, cpIwfAal2Stats=cpIwfAal2Stats, cpIwfDeviceType=cpIwfDeviceType, aal2CpsOversizedSduErrors=aal2CpsOversizedSduErrors, cpIwfSoftwareVersion=cpIwfSoftwareVersion, cpIwfIsdnBriPortEncodingSelectionMode=cpIwfIsdnBriPortEncodingSelectionMode, cpIwfIsdnBriPortCidConfigGroup=cpIwfIsdnBriPortCidConfigGroup, cpIwfAal2Profile=cpIwfAal2Profile, cpIwfRestart=cpIwfRestart, aal2SscsSstedPduLengthMismatchErrors=aal2SscsSstedPduLengthMismatchErrors, cpIwfMIB=cpIwfMIB, potsPhysicalPort=potsPhysicalPort, cpIwfPotsPortStatsTable=cpIwfPotsPortStatsTable, cpIwfAal2StatsGroup=cpIwfAal2StatsGroup, cpIwfMIBConformance=cpIwfMIBConformance, potsPortTestType=potsPortTestType, aal2CpsOsfMismatchErrors=aal2CpsOsfMismatchErrors, cpIwfPotsPortCidConfigGroup=cpIwfPotsPortCidConfigGroup, aal2SscsFaxDemodulationTransport=aal2SscsFaxDemodulationTransport, cpIwfCurrentConfig=cpIwfCurrentConfig, isdnBriPhysicalPort=isdnBriPhysicalPort, cpIwfMIBNotificationPrefix=cpIwfMIBNotificationPrefix, cpIwfIsdnBriPortConfigGroup=cpIwfIsdnBriPortConfigGroup, cpIwfIsdnBriPortB2ActiveSeconds=cpIwfIsdnBriPortB2ActiveSeconds, signalingMethod=signalingMethod, aal2CpsSeqNumErrors=aal2CpsSeqNumErrors, cpIwfHardwareVersion=cpIwfHardwareVersion, aal2CpsOsfErrors=aal2CpsOsfErrors, cpIwfPortNumber=cpIwfPortNumber, PYSNMP_MODULE_ID=cpIwfMIB, cpIwfPotsPortTable=cpIwfPotsPortTable, aal2CpsCIDLowerLimit=aal2CpsCIDLowerLimit, cpIwfImpairmentNotificationsGroup=cpIwfImpairmentNotificationsGroup, cpIwfPlayoutBufferDepth=cpIwfPlayoutBufferDepth, cpIwfNumIsdnBriPorts=cpIwfNumIsdnBriPorts, cpIwfMIBGroups=cpIwfMIBGroups, cpIwfElcpAndPstnChannelBandwidth=cpIwfElcpAndPstnChannelBandwidth, cpIwfPotsPortConfigGroup=cpIwfPotsPortConfigGroup, aal2CpsHecOverlapErrors=aal2CpsHecOverlapErrors, cpIwfMIBCompliance=cpIwfMIBCompliance, aal2SscsDtmfDigitPacketTransport=aal2SscsDtmfDigitPacketTransport, cpIwfPotsPortFillerOctets=cpIwfPotsPortFillerOctets, aal2CpsMaxSDULength=aal2CpsMaxSDULength, cpIwfOperStatus=cpIwfOperStatus, cpIwfIsdnBriPortB1FillerOctets=cpIwfIsdnBriPortB1FillerOctets, cpIwfV5PSTNProtocolVariant=cpIwfV5PSTNProtocolVariant, aal2SscsProfileSource=aal2SscsProfileSource, cpIwfPotsPortEncodingSelectionMode=cpIwfPotsPortEncodingSelectionMode, aal2ChannelIdD=aal2ChannelIdD, cpIwfPotsPortEntry=cpIwfPotsPortEntry, aal2ApplicationIdentifier=aal2ApplicationIdentifier, aal2SscsSstedCrcMismatchErrors=aal2SscsSstedCrcMismatchErrors, aal2SscsPcmEncoding=aal2SscsPcmEncoding, atmfLoopEmulationService=atmfLoopEmulationService, cpIwfIsdnBriPortB1DroppedOctets=cpIwfIsdnBriPortB1DroppedOctets, cpIwfIsdnBriPortB1ActiveSeconds=cpIwfIsdnBriPortB1ActiveSeconds, cpIwfPotsPortDroppedOctets=cpIwfPotsPortDroppedOctets, aal2CpsCIDUpperLimit=aal2CpsCIDUpperLimit, cpIwfEchoCancellationSupport=cpIwfEchoCancellationSupport, aal2ChannelIdB1=aal2ChannelIdB1, aal2SscsUndersizedSstedPduErrors=aal2SscsUndersizedSstedPduErrors, cpIwf=cpIwf, cpIwfMIBCompliances=cpIwfMIBCompliances, aal2CpsMaxMultiplexedChannels=aal2CpsMaxMultiplexedChannels, aal2CpsOutPkts=aal2CpsOutPkts, cpIwfIsdnBriPortTable=cpIwfIsdnBriPortTable, cpIwfImpairmentPortType=cpIwfImpairmentPortType, cpIwfEocBandwidth=cpIwfEocBandwidth, aal2SscsSsSarAssemblyTimerValue=aal2SscsSsSarAssemblyTimerValue, cpIwfTrapGeneration=cpIwfTrapGeneration, cpIwfMIBObjects=cpIwfMIBObjects, aal2SscsOversizedSssarSduErrors=aal2SscsOversizedSssarSduErrors, cpIwfVci=cpIwfVci, cpIwfTimingReference=cpIwfTimingReference, cpIwfNumPotsPorts=cpIwfNumPotsPorts, potsPortNumber=potsPortNumber, cpIwfVendorName=cpIwfVendorName, cpIwfIsdnBriPortB2DroppedOctets=cpIwfIsdnBriPortB2DroppedOctets, cpIwfAdminStatus=cpIwfAdminStatus, cpIwfUpstreamPhysicalBandwidth=cpIwfUpstreamPhysicalBandwidth, cpIwfInsufficientPhysicalBandwidth=cpIwfInsufficientPhysicalBandwidth, cpIwfMIBNotifications=cpIwfMIBNotifications, cpIwfTestType=cpIwfTestType, cpIwfNotificationsGroup=cpIwfNotificationsGroup, aal2SscsIeeeOui=aal2SscsIeeeOui, aal2SscsPredefinedProfileIdentifier=aal2SscsPredefinedProfileIdentifier, aal2CpsTimerCuValue=aal2CpsTimerCuValue, cpIwfIsdnBriPortB2FillerOctets=cpIwfIsdnBriPortB2FillerOctets, cpIwfIsdnBriPortStatsEntry=cpIwfIsdnBriPortStatsEntry, cpIwfDownstreamPhysicalBandwidth=cpIwfDownstreamPhysicalBandwidth, cpIwfMwdForRestart=cpIwfMwdForRestart, cpIwfPotsPortActiveSeconds=cpIwfPotsPortActiveSeconds, cpIwfElcpPstnGroup=cpIwfElcpPstnGroup, cpIwfExcessImpairment=cpIwfExcessImpairment, aal2CpsInPkts=aal2CpsInPkts, aal2CpsUuiErrors=aal2CpsUuiErrors, cpIwfImpairmentInterval=cpIwfImpairmentInterval, cpIwfIsdnBriPortStatsTable=cpIwfIsdnBriPortStatsTable, aal2CpsOptimisation=aal2CpsOptimisation, atmForum=atmForum, cpIwfPotsPortStatsEntry=cpIwfPotsPortStatsEntry, atmForumNetworkManagement=atmForumNetworkManagement)
