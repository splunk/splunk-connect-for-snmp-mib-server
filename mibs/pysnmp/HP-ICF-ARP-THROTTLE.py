#
# PySNMP MIB module HP-ICF-ARP-THROTTLE (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-ARP-THROTTLE
# Produced by pysmi-0.3.4 at Mon Apr 29 19:20:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, Bits, ModuleIdentity, ObjectIdentity, TimeTicks, Unsigned32, MibIdentifier, IpAddress, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Unsigned32", "MibIdentifier", "IpAddress", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "iso")
RowStatus, TruthValue, MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "MacAddress", "TextualConvention", "DisplayString")
hpicfArpThrottle = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119))
hpicfArpThrottle.setRevisions(('2015-05-07 00:00',))
if mibBuilder.loadTexts: hpicfArpThrottle.setLastUpdated('201505070000Z')
if mibBuilder.loadTexts: hpicfArpThrottle.setOrganization('HP Networking')
hpicfArpThrottleNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 0))
hpicfArpThrottleObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1))
hpicfArpThrottleConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 2))
hpicfArpThrottleExceedThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 0, 1)).setObjects(("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleClientOverThreshold"))
if mibBuilder.loadTexts: hpicfArpThrottleExceedThresholdTrap.setStatus('current')
hpicfArpThrottleClientOverThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfArpThrottleClientOverThreshold.setStatus('current')
hpicfArpThrottleConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 2))
hpicfArpThrottleEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpThrottleEnable.setStatus('current')
hpicfArpThrottleRemediationMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("monitor", 0), ("filter", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpThrottleRemediationMode.setStatus('current')
hpicfArpThrottleThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpThrottleThreshold.setStatus('current')
hpicfArpThrottleBlacklistAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpThrottleBlacklistAgingTime.setStatus('current')
hpicfArpThrottleExcludedMacTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 2, 5), )
if mibBuilder.loadTexts: hpicfArpThrottleExcludedMacTable.setStatus('current')
hpicfArpThrottleExcludedMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 2, 5, 1), ).setIndexNames((0, "HP-ICF-ARP-THROTTLE", "hpicfArpThrottleExcludedMac"))
if mibBuilder.loadTexts: hpicfArpThrottleExcludedMacEntry.setStatus('current')
hpicfArpThrottleExcludedMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 2, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: hpicfArpThrottleExcludedMac.setStatus('current')
hpicfArpThrottleExcludedMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 2, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfArpThrottleExcludedMacStatus.setStatus('current')
hpicfArpThrottleStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 3))
hpicfArpThrottleStatsNumClientsInBlacklist = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfArpThrottleStatsNumClientsInBlacklist.setStatus('current')
hpicfArpThrottleStatsNumClientsBeingTracked = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfArpThrottleStatsNumClientsBeingTracked.setStatus('current')
hpicfArpThrottleGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 2, 1))
hpicfArpThrottleBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 2, 1, 1)).setObjects(("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleEnable"), ("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleRemediationMode"), ("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleThreshold"), ("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleBlacklistAgingTime"), ("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleExcludedMacStatus"), ("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleStatsNumClientsInBlacklist"), ("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleStatsNumClientsBeingTracked"), ("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleClientOverThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfArpThrottleBaseGroup = hpicfArpThrottleBaseGroup.setStatus('current')
hpicfArpThrottleNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 2, 1, 2)).setObjects(("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleExceedThresholdTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfArpThrottleNotificationGroup = hpicfArpThrottleNotificationGroup.setStatus('current')
hpicfArpThrottleCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 2, 2))
hpicfArpThrottleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 119, 2, 2, 1)).setObjects(("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleBaseGroup"), ("HP-ICF-ARP-THROTTLE", "hpicfArpThrottleNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfArpThrottleCompliance = hpicfArpThrottleCompliance.setStatus('current')
mibBuilder.exportSymbols("HP-ICF-ARP-THROTTLE", hpicfArpThrottleExcludedMacEntry=hpicfArpThrottleExcludedMacEntry, PYSNMP_MODULE_ID=hpicfArpThrottle, hpicfArpThrottleStats=hpicfArpThrottleStats, hpicfArpThrottleBlacklistAgingTime=hpicfArpThrottleBlacklistAgingTime, hpicfArpThrottleNotifications=hpicfArpThrottleNotifications, hpicfArpThrottleObjects=hpicfArpThrottleObjects, hpicfArpThrottleBaseGroup=hpicfArpThrottleBaseGroup, hpicfArpThrottleConformance=hpicfArpThrottleConformance, hpicfArpThrottleRemediationMode=hpicfArpThrottleRemediationMode, hpicfArpThrottleExcludedMacStatus=hpicfArpThrottleExcludedMacStatus, hpicfArpThrottleConfig=hpicfArpThrottleConfig, hpicfArpThrottleExcludedMac=hpicfArpThrottleExcludedMac, hpicfArpThrottle=hpicfArpThrottle, hpicfArpThrottleExceedThresholdTrap=hpicfArpThrottleExceedThresholdTrap, hpicfArpThrottleNotificationGroup=hpicfArpThrottleNotificationGroup, hpicfArpThrottleCompliance=hpicfArpThrottleCompliance, hpicfArpThrottleGroups=hpicfArpThrottleGroups, hpicfArpThrottleExcludedMacTable=hpicfArpThrottleExcludedMacTable, hpicfArpThrottleEnable=hpicfArpThrottleEnable, hpicfArpThrottleStatsNumClientsBeingTracked=hpicfArpThrottleStatsNumClientsBeingTracked, hpicfArpThrottleThreshold=hpicfArpThrottleThreshold, hpicfArpThrottleCompliances=hpicfArpThrottleCompliances, hpicfArpThrottleClientOverThreshold=hpicfArpThrottleClientOverThreshold, hpicfArpThrottleStatsNumClientsInBlacklist=hpicfArpThrottleStatsNumClientsInBlacklist)
