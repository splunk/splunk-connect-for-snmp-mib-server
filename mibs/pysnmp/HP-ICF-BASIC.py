#
# PySNMP MIB module HP-ICF-BASIC (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-BASIC
# Produced by pysmi-0.3.4 at Mon Apr 29 19:20:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
entLogicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entLogicalIndex")
hpicfObjectModules, hpicfCommonTrapsPrefix, hpicfCommon = mibBuilder.importSymbols("HP-ICF-OID", "hpicfObjectModules", "hpicfCommonTrapsPrefix", "hpicfCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
alarmEntry, eventEntry = mibBuilder.importSymbols("RMON-MIB", "alarmEntry", "eventEntry")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
snmpTargetAddrEntry, = mibBuilder.importSymbols("SNMP-TARGET-MIB", "snmpTargetAddrEntry")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Unsigned32, NotificationType, Counter32, Integer32, IpAddress, MibIdentifier, Gauge32, ModuleIdentity, Counter64, Bits, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "Counter32", "Integer32", "IpAddress", "MibIdentifier", "Gauge32", "ModuleIdentity", "Counter64", "Bits", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
StorageType, TruthValue, TextualConvention, RowStatus, DisplayString, TDomain, TimeStamp, TimeInterval, TAddress, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "TruthValue", "TextualConvention", "RowStatus", "DisplayString", "TDomain", "TimeStamp", "TimeInterval", "TAddress", "MacAddress")
hpicfBasicMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5))
hpicfBasicMib.setRevisions(('2017-07-03 00:00', '2016-09-16 00:00', '2015-01-31 00:00', '2013-06-12 14:41', '2013-05-29 21:00', '2013-02-10 13:57', '2012-10-11 00:00', '2012-07-10 13:57', '2012-03-27 13:00', '2011-08-30 13:57', '2010-11-11 13:57', '2009-11-02 13:57', '2009-02-23 00:00', '2009-02-10 15:39', '2009-02-03 00:00', '2008-12-04 00:00', '2008-04-04 00:00', '2007-09-13 00:00', '2007-06-07 00:00', '2007-05-30 09:54', '2005-11-17 00:00', '2004-04-12 00:00', '2003-01-09 01:08', '2002-10-10 04:01', '2000-11-14 04:01', '2000-11-03 05:11', '1997-10-21 03:00', '1997-03-06 03:31', '1996-09-10 02:21', '1995-07-13 00:00', '1995-01-18 00:00',))
if mibBuilder.loadTexts: hpicfBasicMib.setLastUpdated('201707030000Z')
if mibBuilder.loadTexts: hpicfBasicMib.setOrganization('HP Networking')
hpicfBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4))
hpicfReset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("noReset", 1), ("normalReset", 2), ("agentReset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfReset.setStatus('current')
hpicfSelfTest = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stSuccess", 1), ("stExecute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSelfTest.setStatus('current')
hpicfTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfTelnetEnable.setStatus('current')
hpicfConfigClear = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("configClear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfConfigClear.setStatus('current')
hpicfSelfTestResult = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 5))
hpicfSelfTestResultCode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("softFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSelfTestResultCode.setStatus('current')
hpicfSelfTestResultText = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSelfTestResultText.setStatus('current')
hpicfSelfTestResultTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 5, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSelfTestResultTime.setStatus('current')
hpicfWebAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfWebAgentEnable.setStatus('current')
hpicfBasicDiscovery = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 7))
hpicfAnnounceTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 7, 1), )
if mibBuilder.loadTexts: hpicfAnnounceTable.setStatus('deprecated')
hpicfAnnounceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 7, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entLogicalIndex"))
if mibBuilder.loadTexts: hpicfAnnounceEntry.setStatus('deprecated')
hpicfAnnounceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 7, 1, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfAnnounceAddress.setStatus('deprecated')
hpicfIfToEntityTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 7, 2), )
if mibBuilder.loadTexts: hpicfIfToEntityTable.setStatus('deprecated')
hpicfIfToEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 7, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfIfToEntityEntry.setStatus('deprecated')
hpicfIfEntLogicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIfEntLogicalIndex.setStatus('deprecated')
hpicfAnnounceDiscoveryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 7, 3), )
if mibBuilder.loadTexts: hpicfAnnounceDiscoveryTable.setStatus('current')
hpicfAnnounceDiscoveryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 7, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfAnnounceDiscoveryEntry.setStatus('current')
hpicfAnnounceDiscoveryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 7, 3, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfAnnounceDiscoveryAddress.setStatus('current')
hpicfBasicIpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8))
hpicfIpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 1), )
if mibBuilder.loadTexts: hpicfIpConfigTable.setStatus('deprecated')
hpicfIpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfIpConfigEntry.setStatus('deprecated')
hpicfIpConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpConfigAddress.setStatus('deprecated')
hpicfIpConfigAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpConfigAddrMask.setStatus('deprecated')
hpicfIpConfigDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpConfigDefaultRouter.setStatus('deprecated')
hpicfIpConfigPingRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpConfigPingRouter.setStatus('deprecated')
hpicfIpConfigMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(68, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpConfigMtu.setStatus('deprecated')
hpicfIpConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("useConfigured", 2), ("learn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpConfigAdminStatus.setStatus('deprecated')
hpicfIpConfigProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpConfigProxyArp.setStatus('deprecated')
hpicfIpConfigLocalProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpConfigLocalProxyArp.setStatus('deprecated')
hpicfIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 2), )
if mibBuilder.loadTexts: hpicfIpAddrTable.setStatus('deprecated')
hpicfIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HP-ICF-BASIC", "hpicfIpAddrAddr"))
if mibBuilder.loadTexts: hpicfIpAddrEntry.setStatus('deprecated')
hpicfIpAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: hpicfIpAddrAddr.setStatus('deprecated')
hpicfIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpAddrMask.setStatus('deprecated')
hpicfIpAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpAddrStatus.setStatus('deprecated')
hpicfIpGlobalDefaultRouter = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpGlobalDefaultRouter.setStatus('current')
hpicfIpGlobalPingRouter = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpGlobalPingRouter.setStatus('current')
hpicfIpZeroBroadcastEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 8, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpZeroBroadcastEnable.setStatus('current')
hpicfBasicIpxConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9))
hpicfIpxConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9, 1), )
if mibBuilder.loadTexts: hpicfIpxConfigTable.setStatus('current')
hpicfIpxConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfIpxConfigEntry.setStatus('current')
hpicfIpxConfigNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpxConfigNodeAddress.setStatus('current')
hpicfIpxConfigDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpxConfigDefaultRouter.setStatus('current')
hpicfIpxConfigRouterEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ethernetII", 1), ("ieee8022", 2), ("snap", 3), ("ieee8023Raw", 4), ("noGateway", 5), ("learn", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpxConfigRouterEncaps.setStatus('current')
hpicfIpxConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpxConfigAdminStatus.setStatus('current')
hpicfIpxNetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9, 2), )
if mibBuilder.loadTexts: hpicfIpxNetTable.setStatus('current')
hpicfIpxNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HP-ICF-BASIC", "hpicfIpxNetEncaps"))
if mibBuilder.loadTexts: hpicfIpxNetEntry.setStatus('current')
hpicfIpxNetEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernetII", 1), ("ieee8022", 2), ("snap", 3), ("ieee8023Raw", 4))))
if mibBuilder.loadTexts: hpicfIpxNetEncaps.setStatus('current')
hpicfIpxNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 9, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfIpxNetNumber.setStatus('current')
hpicfBasicTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10))
hpicfFixedTrapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 1), )
if mibBuilder.loadTexts: hpicfFixedTrapTable.setStatus('current')
hpicfFixedTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 1, 1), ).setIndexNames((0, "HP-ICF-BASIC", "hpicfFixedTrapID"))
if mibBuilder.loadTexts: hpicfFixedTrapEntry.setStatus('current')
hpicfFixedTrapID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 1, 1, 1), ObjectIdentifier())
if mibBuilder.loadTexts: hpicfFixedTrapID.setStatus('current')
hpicfFixedTrapEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfFixedTrapEventIndex.setStatus('current')
hpicfTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2), )
if mibBuilder.loadTexts: hpicfTrapDestTable.setStatus('deprecated')
hpicfTrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2, 1), ).setIndexNames((0, "HP-ICF-BASIC", "hpicfTrapDestIndex"))
if mibBuilder.loadTexts: hpicfTrapDestEntry.setStatus('current')
hpicfTrapDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfTrapDestIndex.setStatus('deprecated')
hpicfTrapDestVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("snmpv1", 1), ("snmpv2c", 2))).clone('snmpv1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTrapDestVersion.setStatus('deprecated')
hpicfTrapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone(hexValue="7075626C6963")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTrapDestCommunity.setStatus('deprecated')
hpicfTrapDestTDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2, 1, 4), TDomain()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTrapDestTDomain.setStatus('deprecated')
hpicfTrapDestTAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2, 1, 5), TAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTrapDestTAddress.setStatus('deprecated')
hpicfTrapDestFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTrapDestFilter.setStatus('deprecated')
hpicfTrapDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTrapDestStatus.setStatus('deprecated')
hpicfTrapDestNotifyType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trap", 1), ("inform", 2))).clone('trap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTrapDestNotifyType.setStatus('deprecated')
hpicfTrapDestRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTrapDestRetries.setStatus('deprecated')
hpicfTrapDestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 10, 2, 1, 10), TimeInterval().clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTrapDestTimeout.setStatus('deprecated')
hpicfBasicRmon = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11))
hpicfBasicAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11, 3))
hpicfBasicAlarmNVCapacity = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfBasicAlarmNVCapacity.setStatus('current')
hpicfBasicAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11, 3, 2), )
if mibBuilder.loadTexts: hpicfBasicAlarmTable.setStatus('current')
hpicfBasicAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11, 3, 2, 1), )
alarmEntry.registerAugmentions(("HP-ICF-BASIC", "hpicfBasicAlarmEntry"))
hpicfBasicAlarmEntry.setIndexNames(*alarmEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfBasicAlarmEntry.setStatus('current')
hpicfBasicAlarmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11, 3, 2, 1, 1), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBasicAlarmStorageType.setStatus('current')
hpicfBasicEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11, 9))
hpicfBasicEventNVCapacity = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfBasicEventNVCapacity.setStatus('current')
hpicfBasicEventTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11, 9, 2), )
if mibBuilder.loadTexts: hpicfBasicEventTable.setStatus('current')
hpicfBasicEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11, 9, 2, 1), )
eventEntry.registerAugmentions(("HP-ICF-BASIC", "hpicfBasicEventEntry"))
hpicfBasicEventEntry.setIndexNames(*eventEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfBasicEventEntry.setStatus('current')
hpicfBasicEventStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 11, 9, 2, 1, 1), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBasicEventStorageType.setStatus('current')
hpicfSelfTestTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 12, 1, 0, 4)).setObjects(("HP-ICF-BASIC", "hpicfSelfTestResultText"))
if mibBuilder.loadTexts: hpicfSelfTestTrap.setStatus('current')
hpicfBasicSnmpTargetAddrLogFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 12))
hpicfSnmpTargetAddrLogFilterTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 12, 1), )
if mibBuilder.loadTexts: hpicfSnmpTargetAddrLogFilterTable.setStatus('current')
hpicfSnmpTargetAddrLogFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 12, 1, 1), )
snmpTargetAddrEntry.registerAugmentions(("HP-ICF-BASIC", "hpicfSnmpTargetAddrLogFilterEntry"))
hpicfSnmpTargetAddrLogFilterEntry.setIndexNames(*snmpTargetAddrEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfSnmpTargetAddrLogFilterEntry.setStatus('current')
hpicfSnmpTargetAddrLogFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfSnmpTargetAddrLogFilter.setStatus('current')
hpicfBannerStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfBannerStatus.setStatus('current')
hpicfBanner = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 14))
hpicfBannerMOTD = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 14, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfBannerMOTD.setStatus('current')
hpicfExecBannerStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfExecBannerStatus.setStatus('current')
hpicfBannerExec = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 14, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfBannerExec.setStatus('deprecated')
hpicfLastLoginBannerStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfLastLoginBannerStatus.setStatus('current')
hpicfBannerExec1 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 14, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfBannerExec1.setStatus('deprecated')
hpicfBasicDNSConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15))
hpicfDNSDefaultDomainSuffix = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDNSDefaultDomainSuffix.setStatus('deprecated')
hpicfDNSNameServerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 2), )
if mibBuilder.loadTexts: hpicfDNSNameServerTable.setStatus('deprecated')
hpicfDNSNameServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 2, 1), ).setIndexNames((0, "HP-ICF-BASIC", "hpicfDNSNameServerAddress"))
if mibBuilder.loadTexts: hpicfDNSNameServerEntry.setStatus('deprecated')
hpicfDNSNameServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: hpicfDNSNameServerAddress.setStatus('deprecated')
hpicfDNSNameServerEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDNSNameServerEntryStatus.setStatus('deprecated')
hpicfInetDNSNameServerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 3), )
if mibBuilder.loadTexts: hpicfInetDNSNameServerTable.setStatus('current')
hpicfInetDNSNameServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 3, 1), ).setIndexNames((0, "HP-ICF-BASIC", "hpicfInetDNSNameServerAddrIndex"), (0, "HP-ICF-BASIC", "hpicfInetDNSNameServerAddrType"), (0, "HP-ICF-BASIC", "hpicfInetDNSNameServerAddress"))
if mibBuilder.loadTexts: hpicfInetDNSNameServerEntry.setStatus('current')
hpicfInetDNSNameServerAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: hpicfInetDNSNameServerAddrIndex.setStatus('current')
hpicfInetDNSNameServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 3, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpicfInetDNSNameServerAddrType.setStatus('current')
hpicfInetDNSNameServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 3, 1, 3), InetAddress())
if mibBuilder.loadTexts: hpicfInetDNSNameServerAddress.setStatus('current')
hpicfInetDNSNameServerEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfInetDNSNameServerEntryStatus.setStatus('current')
hpicfInetDNSNameServerEntryIsOobm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfInetDNSNameServerEntryIsOobm.setStatus('current')
hpicfDNSDefaultDomainSuffixIsOobm = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDNSDefaultDomainSuffixIsOobm.setStatus('current')
hpicfDNSConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dhcp", 1), ("manual", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDNSConfigMode.setStatus('current')
hpicfCurDNSConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 6))
hpicfCurDNSDefaultDomainSuffix = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfCurDNSDefaultDomainSuffix.setStatus('deprecated')
hpicfCurDNSNameServerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 6, 2), )
if mibBuilder.loadTexts: hpicfCurDNSNameServerTable.setStatus('current')
hpicfCurDNSNameServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 6, 2, 1), ).setIndexNames((0, "HP-ICF-BASIC", "hpicfCurDNSNameServerAddrIndex"), (0, "HP-ICF-BASIC", "hpicfCurDNSNameServerAddrType"), (0, "HP-ICF-BASIC", "hpicfCurDNSNameServerAddress"))
if mibBuilder.loadTexts: hpicfCurDNSNameServerEntry.setStatus('current')
hpicfCurDNSNameServerAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: hpicfCurDNSNameServerAddrIndex.setStatus('current')
hpicfCurDNSNameServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 6, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpicfCurDNSNameServerAddrType.setStatus('current')
hpicfCurDNSNameServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 6, 2, 1, 3), InetAddress())
if mibBuilder.loadTexts: hpicfCurDNSNameServerAddress.setStatus('current')
hpicfCurDNSNameServerEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 6, 2, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfCurDNSNameServerEntryStatus.setStatus('current')
hpicfDNSDomainSuffixTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 7), )
if mibBuilder.loadTexts: hpicfDNSDomainSuffixTable.setStatus('current')
hpicfDNSDomainSuffixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 7, 1), ).setIndexNames((0, "HP-ICF-BASIC", "hpicfDNSDomainSuffixIndex"))
if mibBuilder.loadTexts: hpicfDNSDomainSuffixEntry.setStatus('current')
hpicfDNSDomainSuffixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: hpicfDNSDomainSuffixIndex.setStatus('current')
hpicfDNSDomainSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 15, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDNSDomainSuffix.setStatus('current')
hpicfResetDefault = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfResetDefault.setStatus('current')
hpicfTelnet6Enable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfTelnet6Enable.setStatus('deprecated')
hpicfBasicSNMPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 18))
hpSwitchSnmpViewConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSnmpViewConfig.setStatus('current')
hpicfSnmpV2Enable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSnmpV2Enable.setStatus('current')
hpicfSwitchSnmpAllowUnsecuredAccessToMACsec = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 18, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSwitchSnmpAllowUnsecuredAccessToMACsec.setStatus('current')
hpicfSwitchSnmpAllowUnsecuredAccessToIeee8021Secy = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSwitchSnmpAllowUnsecuredAccessToIeee8021Secy.setStatus('current')
hpicfBasicConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 19))
hpicfDisplayLogNumbers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 19, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDisplayLogNumbers.setStatus('current')
hpicfIncludeCredentials = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 19, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("radiusTacacsOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIncludeCredentials.setStatus('current')
hpicfBasicLogFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23))
hpicfBasicLogFiltersTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 1), )
if mibBuilder.loadTexts: hpicfBasicLogFiltersTable.setStatus('current')
hpicfBasicLogFiltersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 1, 1), ).setIndexNames((0, "HP-ICF-BASIC", "hpicfBasicLogFilterName"))
if mibBuilder.loadTexts: hpicfBasicLogFiltersEntry.setStatus('current')
hpicfBasicLogFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: hpicfBasicLogFilterName.setStatus('current')
hpicfBasicLogFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBasicLogFilterEnable.setStatus('current')
hpicfBasicLogFilterDropCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfBasicLogFilterDropCounter.setStatus('current')
hpicfBasicLogFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBasicLogFilterRowStatus.setStatus('current')
hpicfBasicLogSubFiltersTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 2), )
if mibBuilder.loadTexts: hpicfBasicLogSubFiltersTable.setStatus('current')
hpicfBasicLogSubFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 2, 1), ).setIndexNames((0, "HP-ICF-BASIC", "hpicfBasicLogFilterName"), (0, "HP-ICF-BASIC", "hpicfBasicLogSubFilterSeqNum"))
if mibBuilder.loadTexts: hpicfBasicLogSubFilterEntry.setStatus('current')
hpicfBasicLogSubFilterSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)))
if mibBuilder.loadTexts: hpicfBasicLogSubFilterSeqNum.setStatus('current')
hpicfBasicLogSubFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("severity", 1), ("eventNum", 2), ("regExp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBasicLogSubFilterType.setStatus('current')
hpicfBasicLogSubFilterSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fatal", 1), ("warn", 2), ("info", 3), ("debug", 4), ("standard", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBasicLogSubFilterSeverity.setStatus('current')
hpicfBasicLogSubFilterEventNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBasicLogSubFilterEventNum.setStatus('current')
hpicfBasicLogSubFilterRegExp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBasicLogSubFilterRegExp.setStatus('current')
hpicfBasicLogSubFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBasicLogSubFilterAction.setStatus('current')
hpicfBasicLogSubFilterMatchCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfBasicLogSubFilterMatchCounter.setStatus('current')
hpicfBasicLogSubFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBasicLogSubFilterRowStatus.setStatus('current')
hpicfBasicLogFiltersClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfBasicLogFiltersClearCounters.setStatus('current')
hpicfBasicLogPerIpFiltersTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 4), )
if mibBuilder.loadTexts: hpicfBasicLogPerIpFiltersTable.setStatus('current')
hpicfBasicLogPerIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 4, 1), ).setIndexNames((0, "HP-ICF-BASIC", "hpicfBasicLogFilterName"), (0, "HP-ICF-BASIC", "hpicfBasicLogPerIpIndex"))
if mibBuilder.loadTexts: hpicfBasicLogPerIpFilterEntry.setStatus('current')
hpicfBasicLogPerIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpicfBasicLogPerIpIndex.setStatus('current')
hpicfBasicLogPerIpFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("severity", 1), ("eventNum", 2), ("sysMod", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBasicLogPerIpFilterType.setStatus('current')
hpicfBasicLogPerIpFilterSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fatal", 1), ("warn", 2), ("info", 3), ("debug", 4), ("standard", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBasicLogPerIpFilterSeverity.setStatus('current')
hpicfBasicLogPerIpFilterEventList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(876, 876)).setFixedLength(876)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBasicLogPerIpFilterEventList.setStatus('current')
hpicfBasicLogPerIpFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBasicLogPerIpFilterAction.setStatus('current')
hpicfBasicLogPerIpFilterSysModule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBasicLogPerIpFilterSysModule.setStatus('current')
hpicfBasicLogPerIpFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 23, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBasicLogPerIpFilterRowStatus.setStatus('current')
hpicfBasicWebMgmtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 24))
hpicfBasicWebAgentIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 24, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000)).clone(600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfBasicWebAgentIdleTime.setStatus('current')
hpicfBasicWebAgentInterface = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 4, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("traditional", 1), ("improved", 2))).clone('traditional')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfBasicWebAgentInterface.setStatus('current')
hpicfBasicConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1))
hpicfBasicCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1))
hpicfBasicGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2))
hpicfBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 1)).setObjects(("HP-ICF-BASIC", "hpicfBasicGroup"), ("HP-ICF-BASIC", "hpicfTelnetGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicCompliance = hpicfBasicCompliance.setStatus('deprecated')
hpicfNewBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 2)).setObjects(("HP-ICF-BASIC", "hpicfNewBasicGroup"), ("HP-ICF-BASIC", "hpicfBasicIpConfigGroup"), ("HP-ICF-BASIC", "hpicfBasicIpxConfigGroup"), ("HP-ICF-BASIC", "hpicfBasicFixedTrapGroup"), ("HP-ICF-BASIC", "hpicfBasicTrapDestGroup"), ("HP-ICF-BASIC", "hpicfBasicRmonNVGroup"), ("HP-ICF-BASIC", "hpicfBasicSelfTestNotifyGroup"), ("HP-ICF-BASIC", "hpicfDiscoverGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfNewBasicCompliance = hpicfNewBasicCompliance.setStatus('deprecated')
hpicfBasicCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 3)).setObjects(("HP-ICF-BASIC", "hpicfNewBasicGroup"), ("HP-ICF-BASIC", "hpicfBasicIpConfigGroup2"), ("HP-ICF-BASIC", "hpicfBasicFixedTrapGroup"), ("HP-ICF-BASIC", "hpicfBasicTrapDestGroup"), ("HP-ICF-BASIC", "hpicfBasicSelfTestNotifyGroup"), ("HP-ICF-BASIC", "hpicfBasicIpxConfigGroup"), ("HP-ICF-BASIC", "hpicfAnnounceDiscoveryGroup"), ("HP-ICF-BASIC", "hpicfBasicRmonNVGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicCompliance3 = hpicfBasicCompliance3.setStatus('deprecated')
hpicfBasicCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 4)).setObjects(("HP-ICF-BASIC", "hpicfNewBasicGroup"), ("HP-ICF-BASIC", "hpicfBasicIpConfigGroup2"), ("HP-ICF-BASIC", "hpicfBasicFixedTrapGroup"), ("HP-ICF-BASIC", "hpicfBasicSelfTestNotifyGroup"), ("HP-ICF-BASIC", "hpicfBasicIpxConfigGroup"), ("HP-ICF-BASIC", "hpicfAnnounceDiscoveryGroup"), ("HP-ICF-BASIC", "hpicfBasicRmonNVGroup"), ("HP-ICF-BASIC", "hpicfSnmpTargetAddrLogFilterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicCompliance4 = hpicfBasicCompliance4.setStatus('deprecated')
hpicfBasicCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 5)).setObjects(("HP-ICF-BASIC", "hpicfNewBasicGroup"), ("HP-ICF-BASIC", "hpicfBasicIpConfigGroup3"), ("HP-ICF-BASIC", "hpicfBasicFixedTrapGroup"), ("HP-ICF-BASIC", "hpicfBasicSelfTestNotifyGroup"), ("HP-ICF-BASIC", "hpicfBasicBannerGroup"), ("HP-ICF-BASIC", "hpicfBasicIpxConfigGroup"), ("HP-ICF-BASIC", "hpicfAnnounceDiscoveryGroup"), ("HP-ICF-BASIC", "hpicfBasicRmonNVGroup"), ("HP-ICF-BASIC", "hpicfSnmpTargetAddrLogFilterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicCompliance5 = hpicfBasicCompliance5.setStatus('deprecated')
hpicfBasicCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 6)).setObjects(("HP-ICF-BASIC", "hpicfNewBasicGroup"), ("HP-ICF-BASIC", "hpicfBasicIpConfigGroup3"), ("HP-ICF-BASIC", "hpicfBasicFixedTrapGroup"), ("HP-ICF-BASIC", "hpicfBasicSelfTestNotifyGroup"), ("HP-ICF-BASIC", "hpicfBasicIpxConfigGroup"), ("HP-ICF-BASIC", "hpicfAnnounceDiscoveryGroup"), ("HP-ICF-BASIC", "hpicfBasicRmonNVGroup"), ("HP-ICF-BASIC", "hpicfSnmpTargetAddrLogFilterGroup"), ("HP-ICF-BASIC", "hpicfBasicDNSConfigGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicCompliance6 = hpicfBasicCompliance6.setStatus('deprecated')
hpicfBasicCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 7)).setObjects(("HP-ICF-BASIC", "hpicfBasicGroup1"), ("HP-ICF-BASIC", "hpicfBasicIpConfigGroup3"), ("HP-ICF-BASIC", "hpicfBasicFixedTrapGroup"), ("HP-ICF-BASIC", "hpicfBasicSelfTestNotifyGroup"), ("HP-ICF-BASIC", "hpicfBasicIpxConfigGroup"), ("HP-ICF-BASIC", "hpicfAnnounceDiscoveryGroup"), ("HP-ICF-BASIC", "hpicfBasicRmonNVGroup"), ("HP-ICF-BASIC", "hpicfSnmpTargetAddrLogFilterGroup"), ("HP-ICF-BASIC", "hpicfBasicDNSConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicCompliance7 = hpicfBasicCompliance7.setStatus('deprecated')
hpicfBasicSNMPConfigCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 8)).setObjects(("HP-ICF-BASIC", "hpicfSNMPConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicSNMPConfigCompliance = hpicfBasicSNMPConfigCompliance.setStatus('deprecated')
hpicfBasicConfigCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 9)).setObjects(("HP-ICF-BASIC", "hpicfBasicConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicConfigCompliance = hpicfBasicConfigCompliance.setStatus('current')
hpicfBasicComplianceOobm = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 10)).setObjects(("HP-ICF-BASIC", "hpicfInetDNSNameServerOobmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicComplianceOobm = hpicfBasicComplianceOobm.setStatus('current')
hpicfBasicCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 11)).setObjects(("HP-ICF-BASIC", "hpicfBasicObjectsGroup"), ("HP-ICF-BASIC", "hpicfBasicWebAgentGroup"), ("HP-ICF-BASIC", "hpicfBasicProxyArpGroup"), ("HP-ICF-BASIC", "hpicfBasicIpSecondaryGroup"), ("HP-ICF-BASIC", "hpicfBasicObjectsGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicCompliance8 = hpicfBasicCompliance8.setStatus('deprecated')
hpicfBasicCompliance9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 12)).setObjects(("HP-ICF-BASIC", "hpicfBasicDNSGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicCompliance9 = hpicfBasicCompliance9.setStatus('deprecated')
hpicfBasicCompliance10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 13)).setObjects(("HP-ICF-BASIC", "hpicfBasicDNSConfigGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicCompliance10 = hpicfBasicCompliance10.setStatus('current')
hpicfBasicCompliance11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 14)).setObjects(("HP-ICF-BASIC", "hpicfBasicDNSGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicCompliance11 = hpicfBasicCompliance11.setStatus('current')
hpicfBasicCompliance12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 15)).setObjects(("HP-ICF-BASIC", "hpicfBasicObjectsGroup1"), ("HP-ICF-BASIC", "hpicfBasicWebAgentGroup"), ("HP-ICF-BASIC", "hpicfBasicProxyArpGroup"), ("HP-ICF-BASIC", "hpicfBasicIpSecondaryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicCompliance12 = hpicfBasicCompliance12.setStatus('deprecated')
hpicfBasicLogFilterConfigCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 16)).setObjects(("HP-ICF-BASIC", "hpicfBasicLogFilterConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicLogFilterConfigCompliance = hpicfBasicLogFilterConfigCompliance.setStatus('deprecated')
hpicfBasicCompliance13 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 17)).setObjects(("HP-ICF-BASIC", "hpicfBasicObjectsGroup1"), ("HP-ICF-BASIC", "hpicfBasicProxyArpGroup"), ("HP-ICF-BASIC", "hpicfBasicIpSecondaryGroup"), ("HP-ICF-BASIC", "hpicfBasicWebAgentGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicCompliance13 = hpicfBasicCompliance13.setStatus('deprecated')
hpicfBasicSNMPConfigCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 18)).setObjects(("HP-ICF-BASIC", "hpicfSNMPConfigGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicSNMPConfigCompliance1 = hpicfBasicSNMPConfigCompliance1.setStatus('current')
hpicfBasicCompliance19 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 19)).setObjects(("HP-ICF-BASIC", "hpicfBasicObjectsGroup1"), ("HP-ICF-BASIC", "hpicfBasicProxyArpGroup"), ("HP-ICF-BASIC", "hpicfBasicIpSecondaryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicCompliance19 = hpicfBasicCompliance19.setStatus('current')
hpicfBasicLogFilterConfigCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 20)).setObjects(("HP-ICF-BASIC", "hpicfBasicLogFilterConfigGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicLogFilterConfigCompliance2 = hpicfBasicLogFilterConfigCompliance2.setStatus('deprecated')
hpicfBasicWebAgentCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 21)).setObjects(("HP-ICF-BASIC", "hpicfBasicWebAgentGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicWebAgentCompliance1 = hpicfBasicWebAgentCompliance1.setStatus('current')
hpicfBasicCurDNSNameServerCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 22)).setObjects(("HP-ICF-BASIC", "hpicfBasicCurDNSNameServerGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicCurDNSNameServerCompliance1 = hpicfBasicCurDNSNameServerCompliance1.setStatus('current')
hpicfBasicLogFilterConfigCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 1, 23)).setObjects(("HP-ICF-BASIC", "hpicfBasicLogFilterConfigGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicLogFilterConfigCompliance3 = hpicfBasicLogFilterConfigCompliance3.setStatus('current')
hpicfBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 1)).setObjects(("HP-ICF-BASIC", "hpicfReset"), ("HP-ICF-BASIC", "hpicfSelfTest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicGroup = hpicfBasicGroup.setStatus('deprecated')
hpicfTelnetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 2)).setObjects(("HP-ICF-BASIC", "hpicfTelnetEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfTelnetGroup = hpicfTelnetGroup.setStatus('deprecated')
hpicfNewBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 3)).setObjects(("HP-ICF-BASIC", "hpicfReset"), ("HP-ICF-BASIC", "hpicfSelfTest"), ("HP-ICF-BASIC", "hpicfTelnetEnable"), ("HP-ICF-BASIC", "hpicfConfigClear"), ("HP-ICF-BASIC", "hpicfSelfTestResultCode"), ("HP-ICF-BASIC", "hpicfSelfTestResultText"), ("HP-ICF-BASIC", "hpicfSelfTestResultTime"), ("HP-ICF-BASIC", "hpicfBannerStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfNewBasicGroup = hpicfNewBasicGroup.setStatus('deprecated')
hpicfDiscoverGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 4)).setObjects(("HP-ICF-BASIC", "hpicfAnnounceAddress"), ("HP-ICF-BASIC", "hpicfIfEntLogicalIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDiscoverGroup = hpicfDiscoverGroup.setStatus('deprecated')
hpicfBasicIpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 5)).setObjects(("HP-ICF-BASIC", "hpicfIpConfigAddress"), ("HP-ICF-BASIC", "hpicfIpConfigAddrMask"), ("HP-ICF-BASIC", "hpicfIpConfigDefaultRouter"), ("HP-ICF-BASIC", "hpicfIpConfigPingRouter"), ("HP-ICF-BASIC", "hpicfIpConfigMtu"), ("HP-ICF-BASIC", "hpicfIpConfigAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicIpConfigGroup = hpicfBasicIpConfigGroup.setStatus('deprecated')
hpicfBasicIpxConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 6)).setObjects(("HP-ICF-BASIC", "hpicfIpxConfigNodeAddress"), ("HP-ICF-BASIC", "hpicfIpxConfigDefaultRouter"), ("HP-ICF-BASIC", "hpicfIpxConfigRouterEncaps"), ("HP-ICF-BASIC", "hpicfIpxConfigAdminStatus"), ("HP-ICF-BASIC", "hpicfIpxNetNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicIpxConfigGroup = hpicfBasicIpxConfigGroup.setStatus('current')
hpicfBasicFixedTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 7)).setObjects(("HP-ICF-BASIC", "hpicfFixedTrapEventIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicFixedTrapGroup = hpicfBasicFixedTrapGroup.setStatus('current')
hpicfBasicTrapDestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 8)).setObjects(("HP-ICF-BASIC", "hpicfTrapDestVersion"), ("HP-ICF-BASIC", "hpicfTrapDestCommunity"), ("HP-ICF-BASIC", "hpicfTrapDestTDomain"), ("HP-ICF-BASIC", "hpicfTrapDestTAddress"), ("HP-ICF-BASIC", "hpicfTrapDestFilter"), ("HP-ICF-BASIC", "hpicfTrapDestStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicTrapDestGroup = hpicfBasicTrapDestGroup.setStatus('deprecated')
hpicfBasicRmonNVGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 9)).setObjects(("HP-ICF-BASIC", "hpicfBasicAlarmNVCapacity"), ("HP-ICF-BASIC", "hpicfBasicAlarmStorageType"), ("HP-ICF-BASIC", "hpicfBasicEventNVCapacity"), ("HP-ICF-BASIC", "hpicfBasicEventStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicRmonNVGroup = hpicfBasicRmonNVGroup.setStatus('current')
hpicfBasicSelfTestNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 10)).setObjects(("HP-ICF-BASIC", "hpicfSelfTestTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicSelfTestNotifyGroup = hpicfBasicSelfTestNotifyGroup.setStatus('current')
hpicfBasicWebAgentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 11)).setObjects(("HP-ICF-BASIC", "hpicfWebAgentEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicWebAgentGroup = hpicfBasicWebAgentGroup.setStatus('deprecated')
hpicfAnnounceDiscoveryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 12)).setObjects(("HP-ICF-BASIC", "hpicfAnnounceDiscoveryAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfAnnounceDiscoveryGroup = hpicfAnnounceDiscoveryGroup.setStatus('current')
hpicfBasicIpConfigGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 13)).setObjects(("HP-ICF-BASIC", "hpicfIpConfigAddress"), ("HP-ICF-BASIC", "hpicfIpConfigAddrMask"), ("HP-ICF-BASIC", "hpicfIpConfigMtu"), ("HP-ICF-BASIC", "hpicfIpConfigAdminStatus"), ("HP-ICF-BASIC", "hpicfIpGlobalDefaultRouter"), ("HP-ICF-BASIC", "hpicfIpGlobalPingRouter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicIpConfigGroup2 = hpicfBasicIpConfigGroup2.setStatus('deprecated')
hpicfBasicProxyArpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 14)).setObjects(("HP-ICF-BASIC", "hpicfIpConfigProxyArp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicProxyArpGroup = hpicfBasicProxyArpGroup.setStatus('current')
hpicfBasicIpSecondaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 15)).setObjects(("HP-ICF-BASIC", "hpicfIpAddrMask"), ("HP-ICF-BASIC", "hpicfIpAddrStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicIpSecondaryGroup = hpicfBasicIpSecondaryGroup.setStatus('current')
hpicfSnmpTargetAddrLogFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 16)).setObjects(("HP-ICF-BASIC", "hpicfSnmpTargetAddrLogFilter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSnmpTargetAddrLogFilterGroup = hpicfSnmpTargetAddrLogFilterGroup.setStatus('current')
hpicfBasicIpConfigGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 17)).setObjects(("HP-ICF-BASIC", "hpicfIpConfigAddress"), ("HP-ICF-BASIC", "hpicfIpConfigAddrMask"), ("HP-ICF-BASIC", "hpicfIpConfigMtu"), ("HP-ICF-BASIC", "hpicfIpConfigAdminStatus"), ("HP-ICF-BASIC", "hpicfIpGlobalDefaultRouter"), ("HP-ICF-BASIC", "hpicfIpGlobalPingRouter"), ("HP-ICF-BASIC", "hpicfIpZeroBroadcastEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicIpConfigGroup3 = hpicfBasicIpConfigGroup3.setStatus('current')
hpicfBasicBannerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 18)).setObjects(("HP-ICF-BASIC", "hpicfBannerMOTD"), ("HP-ICF-BASIC", "hpicfExecBannerStatus"), ("HP-ICF-BASIC", "hpicfBannerExec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicBannerGroup = hpicfBasicBannerGroup.setStatus('current')
hpicfBasicDNSConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 19)).setObjects(("HP-ICF-BASIC", "hpicfDNSDefaultDomainSuffix"), ("HP-ICF-BASIC", "hpicfDNSNameServerEntryStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicDNSConfigGroup = hpicfBasicDNSConfigGroup.setStatus('deprecated')
hpicfBasicGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 20)).setObjects(("HP-ICF-BASIC", "hpicfReset"), ("HP-ICF-BASIC", "hpicfSelfTest"), ("HP-ICF-BASIC", "hpicfTelnetEnable"), ("HP-ICF-BASIC", "hpicfConfigClear"), ("HP-ICF-BASIC", "hpicfSelfTestResultCode"), ("HP-ICF-BASIC", "hpicfSelfTestResultText"), ("HP-ICF-BASIC", "hpicfSelfTestResultTime"), ("HP-ICF-BASIC", "hpicfBannerStatus"), ("HP-ICF-BASIC", "hpicfResetDefault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicGroup1 = hpicfBasicGroup1.setStatus('current')
hpicfSNMPConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 21)).setObjects(("HP-ICF-BASIC", "hpicfSnmpV2Enable"), ("HP-ICF-BASIC", "hpSwitchSnmpViewConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSNMPConfigGroup = hpicfSNMPConfigGroup.setStatus('deprecated')
hpicfBasicConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 22)).setObjects(("HP-ICF-BASIC", "hpicfDisplayLogNumbers"), ("HP-ICF-BASIC", "hpicfIncludeCredentials"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicConfigGroup = hpicfBasicConfigGroup.setStatus('current')
hpicfInetDNSNameServerOobmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 23)).setObjects(("HP-ICF-BASIC", "hpicfInetDNSNameServerEntryIsOobm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfInetDNSNameServerOobmGroup = hpicfInetDNSNameServerOobmGroup.setStatus('current')
hpicfBasicObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 24)).setObjects(("HP-ICF-BASIC", "hpicfIpConfigLocalProxyArp"), ("HP-ICF-BASIC", "hpicfTrapDestNotifyType"), ("HP-ICF-BASIC", "hpicfTrapDestRetries"), ("HP-ICF-BASIC", "hpicfTrapDestTimeout"), ("HP-ICF-BASIC", "hpicfInetDNSNameServerEntryStatus"), ("HP-ICF-BASIC", "hpicfExecBannerStatus"), ("HP-ICF-BASIC", "hpicfBannerExec"), ("HP-ICF-BASIC", "hpicfTelnet6Enable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicObjectsGroup = hpicfBasicObjectsGroup.setStatus('deprecated')
hpicfBasicDNSGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 25)).setObjects(("HP-ICF-BASIC", "hpicfDNSDefaultDomainSuffixIsOobm"), ("HP-ICF-BASIC", "hpicfDNSConfigMode"), ("HP-ICF-BASIC", "hpicfCurDNSDefaultDomainSuffix"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicDNSGroup1 = hpicfBasicDNSGroup1.setStatus('deprecated')
hpicfBasicDNSConfigGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 26)).setObjects(("HP-ICF-BASIC", "hpicfDNSDomainSuffix"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicDNSConfigGroup1 = hpicfBasicDNSConfigGroup1.setStatus('current')
hpicfBasicObjectsGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 27)).setObjects(("HP-ICF-BASIC", "hpicfIpConfigLocalProxyArp"), ("HP-ICF-BASIC", "hpicfTrapDestNotifyType"), ("HP-ICF-BASIC", "hpicfTrapDestRetries"), ("HP-ICF-BASIC", "hpicfTrapDestTimeout"), ("HP-ICF-BASIC", "hpicfInetDNSNameServerEntryStatus"), ("HP-ICF-BASIC", "hpicfExecBannerStatus"), ("HP-ICF-BASIC", "hpicfBannerExec"), ("HP-ICF-BASIC", "hpicfLastLoginBannerStatus"), ("HP-ICF-BASIC", "hpicfTelnet6Enable"), ("HP-ICF-BASIC", "hpicfBannerExec1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicObjectsGroup1 = hpicfBasicObjectsGroup1.setStatus('current')
hpicfBasicDNSConfigGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 28)).setObjects(("HP-ICF-BASIC", "hpicfDNSNameServerEntryStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicDNSConfigGroup2 = hpicfBasicDNSConfigGroup2.setStatus('current')
hpicfBasicDNSGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 29)).setObjects(("HP-ICF-BASIC", "hpicfDNSDefaultDomainSuffixIsOobm"), ("HP-ICF-BASIC", "hpicfDNSConfigMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicDNSGroup2 = hpicfBasicDNSGroup2.setStatus('current')
hpicfBasicLogFilterConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 30)).setObjects(("HP-ICF-BASIC", "hpicfBasicLogFilterName"), ("HP-ICF-BASIC", "hpicfBasicLogFilterEnable"), ("HP-ICF-BASIC", "hpicfBasicLogFilterDropCounter"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterSeqNum"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterType"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterSeverity"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterEventNum"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterRegExp"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterAction"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterMatchCounter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicLogFilterConfigGroup = hpicfBasicLogFilterConfigGroup.setStatus('deprecated')
hpicfBasicWebAgentGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 31)).setObjects(("HP-ICF-BASIC", "hpicfWebAgentEnable"), ("HP-ICF-BASIC", "hpicfBasicWebAgentIdleTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicWebAgentGroup1 = hpicfBasicWebAgentGroup1.setStatus('deprecated')
hpicfSNMPConfigGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 32)).setObjects(("HP-ICF-BASIC", "hpicfSnmpV2Enable"), ("HP-ICF-BASIC", "hpSwitchSnmpViewConfig"), ("HP-ICF-BASIC", "hpicfSwitchSnmpAllowUnsecuredAccessToMACsec"), ("HP-ICF-BASIC", "hpicfSwitchSnmpAllowUnsecuredAccessToIeee8021Secy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSNMPConfigGroup1 = hpicfSNMPConfigGroup1.setStatus('current')
hpicfBasicLogFilterConfigGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 33)).setObjects(("HP-ICF-BASIC", "hpicfBasicLogFilterEnable"), ("HP-ICF-BASIC", "hpicfBasicLogFilterDropCounter"), ("HP-ICF-BASIC", "hpicfBasicLogFilterRowStatus"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterType"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterSeverity"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterEventNum"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterRegExp"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterAction"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterMatchCounter"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterRowStatus"), ("HP-ICF-BASIC", "hpicfBasicLogFiltersClearCounters"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicLogFilterConfigGroup2 = hpicfBasicLogFilterConfigGroup2.setStatus('deprecated')
hpicfBasicWebAgentGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 34)).setObjects(("HP-ICF-BASIC", "hpicfWebAgentEnable"), ("HP-ICF-BASIC", "hpicfBasicWebAgentIdleTime"), ("HP-ICF-BASIC", "hpicfBasicWebAgentInterface"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicWebAgentGroup2 = hpicfBasicWebAgentGroup2.setStatus('current')
hpicfBasicCurDNSNameServerGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 35)).setObjects(("HP-ICF-BASIC", "hpicfCurDNSNameServerEntryStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicCurDNSNameServerGroup1 = hpicfBasicCurDNSNameServerGroup1.setStatus('current')
hpicfBasicLogFilterConfigGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 5, 1, 2, 36)).setObjects(("HP-ICF-BASIC", "hpicfBasicLogFilterEnable"), ("HP-ICF-BASIC", "hpicfBasicLogFilterDropCounter"), ("HP-ICF-BASIC", "hpicfBasicLogFilterRowStatus"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterType"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterSeverity"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterEventNum"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterRegExp"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterAction"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterMatchCounter"), ("HP-ICF-BASIC", "hpicfBasicLogSubFilterRowStatus"), ("HP-ICF-BASIC", "hpicfBasicLogFiltersClearCounters"), ("HP-ICF-BASIC", "hpicfBasicLogPerIpFilterType"), ("HP-ICF-BASIC", "hpicfBasicLogPerIpFilterSeverity"), ("HP-ICF-BASIC", "hpicfBasicLogPerIpFilterEventList"), ("HP-ICF-BASIC", "hpicfBasicLogPerIpFilterAction"), ("HP-ICF-BASIC", "hpicfBasicLogPerIpFilterSysModule"), ("HP-ICF-BASIC", "hpicfBasicLogPerIpFilterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBasicLogFilterConfigGroup3 = hpicfBasicLogFilterConfigGroup3.setStatus('current')
mibBuilder.exportSymbols("HP-ICF-BASIC", hpicfAnnounceEntry=hpicfAnnounceEntry, hpicfBasicLogPerIpFilterType=hpicfBasicLogPerIpFilterType, hpicfBasicCompliance10=hpicfBasicCompliance10, hpicfAnnounceAddress=hpicfAnnounceAddress, hpicfBasicCompliance9=hpicfBasicCompliance9, hpicfInetDNSNameServerEntryIsOobm=hpicfInetDNSNameServerEntryIsOobm, hpicfTrapDestIndex=hpicfTrapDestIndex, hpicfReset=hpicfReset, hpicfSelfTestTrap=hpicfSelfTestTrap, hpicfBasicSNMPConfig=hpicfBasicSNMPConfig, hpicfIpConfigMtu=hpicfIpConfigMtu, hpicfDNSDomainSuffix=hpicfDNSDomainSuffix, hpicfConfigClear=hpicfConfigClear, hpicfAnnounceDiscoveryTable=hpicfAnnounceDiscoveryTable, hpicfIpConfigPingRouter=hpicfIpConfigPingRouter, hpicfBasicLogPerIpFiltersTable=hpicfBasicLogPerIpFiltersTable, hpicfIpxConfigTable=hpicfIpxConfigTable, hpicfInetDNSNameServerAddrType=hpicfInetDNSNameServerAddrType, hpicfCurDNSNameServerAddress=hpicfCurDNSNameServerAddress, hpicfBasicLogFilterDropCounter=hpicfBasicLogFilterDropCounter, hpicfBasicLogSubFilterRowStatus=hpicfBasicLogSubFilterRowStatus, hpicfSnmpTargetAddrLogFilterGroup=hpicfSnmpTargetAddrLogFilterGroup, hpicfBannerExec1=hpicfBannerExec1, hpicfFixedTrapEntry=hpicfFixedTrapEntry, hpicfIpConfigProxyArp=hpicfIpConfigProxyArp, hpicfBasicLogSubFiltersTable=hpicfBasicLogSubFiltersTable, hpicfBasicLogPerIpFilterEntry=hpicfBasicLogPerIpFilterEntry, hpicfBasicIpConfigGroup=hpicfBasicIpConfigGroup, hpicfBasicWebAgentInterface=hpicfBasicWebAgentInterface, hpicfBasicEvent=hpicfBasicEvent, hpicfBasicDNSGroup2=hpicfBasicDNSGroup2, hpicfIpConfigEntry=hpicfIpConfigEntry, hpicfBasicCompliance=hpicfBasicCompliance, hpicfBasicGroup1=hpicfBasicGroup1, hpicfSelfTestResult=hpicfSelfTestResult, hpicfBasicSelfTestNotifyGroup=hpicfBasicSelfTestNotifyGroup, hpicfTrapDestEntry=hpicfTrapDestEntry, hpicfBasicLogPerIpFilterSeverity=hpicfBasicLogPerIpFilterSeverity, hpicfBasicDNSConfigGroup1=hpicfBasicDNSConfigGroup1, hpicfBasicConformance=hpicfBasicConformance, hpicfCurDNSNameServerAddrType=hpicfCurDNSNameServerAddrType, hpicfBasicLogPerIpIndex=hpicfBasicLogPerIpIndex, hpicfIfToEntityEntry=hpicfIfToEntityEntry, hpicfBasicLogSubFilterEntry=hpicfBasicLogSubFilterEntry, hpicfBasicLogFilterConfigCompliance=hpicfBasicLogFilterConfigCompliance, hpicfBasicWebAgentGroup2=hpicfBasicWebAgentGroup2, hpicfBasicGroups=hpicfBasicGroups, hpicfTrapDestRetries=hpicfTrapDestRetries, hpicfIpAddrStatus=hpicfIpAddrStatus, hpicfFixedTrapTable=hpicfFixedTrapTable, hpicfBasicCompliance3=hpicfBasicCompliance3, hpicfDNSDomainSuffixTable=hpicfDNSDomainSuffixTable, hpicfBasicLogFiltersClearCounters=hpicfBasicLogFiltersClearCounters, hpicfBasicEventTable=hpicfBasicEventTable, hpicfBasicLogSubFilterType=hpicfBasicLogSubFilterType, hpicfBasicLogFilterConfigGroup3=hpicfBasicLogFilterConfigGroup3, hpicfDiscoverGroup=hpicfDiscoverGroup, hpicfSelfTest=hpicfSelfTest, hpicfIpConfigAddress=hpicfIpConfigAddress, hpicfCurDNSNameServerEntry=hpicfCurDNSNameServerEntry, hpicfTrapDestTimeout=hpicfTrapDestTimeout, hpicfBasicLogFiltersEntry=hpicfBasicLogFiltersEntry, hpicfSelfTestResultText=hpicfSelfTestResultText, hpicfSelfTestResultCode=hpicfSelfTestResultCode, hpicfBasicLogFilterConfigGroup=hpicfBasicLogFilterConfigGroup, hpicfBasicProxyArpGroup=hpicfBasicProxyArpGroup, hpicfNewBasicGroup=hpicfNewBasicGroup, hpicfBasicSNMPConfigCompliance=hpicfBasicSNMPConfigCompliance, hpicfTrapDestTDomain=hpicfTrapDestTDomain, hpicfBasicBannerGroup=hpicfBasicBannerGroup, hpicfBasicIpxConfigGroup=hpicfBasicIpxConfigGroup, hpicfBasicLogSubFilterSeqNum=hpicfBasicLogSubFilterSeqNum, hpicfBasicDNSConfigGroup2=hpicfBasicDNSConfigGroup2, hpicfBasicFixedTrapGroup=hpicfBasicFixedTrapGroup, hpicfResetDefault=hpicfResetDefault, hpicfAnnounceDiscoveryAddress=hpicfAnnounceDiscoveryAddress, hpicfBasicLogPerIpFilterEventList=hpicfBasicLogPerIpFilterEventList, hpicfBasicIpConfigGroup2=hpicfBasicIpConfigGroup2, hpicfBasicLogFilters=hpicfBasicLogFilters, hpicfBasicRmon=hpicfBasicRmon, hpicfBasicLogFilterConfigGroup2=hpicfBasicLogFilterConfigGroup2, hpicfIncludeCredentials=hpicfIncludeCredentials, hpicfIfToEntityTable=hpicfIfToEntityTable, hpicfInetDNSNameServerOobmGroup=hpicfInetDNSNameServerOobmGroup, hpicfIpxConfigNodeAddress=hpicfIpxConfigNodeAddress, hpicfLastLoginBannerStatus=hpicfLastLoginBannerStatus, hpicfBasicCompliances=hpicfBasicCompliances, hpicfIfEntLogicalIndex=hpicfIfEntLogicalIndex, hpicfBasicCompliance19=hpicfBasicCompliance19, hpicfInetDNSNameServerAddress=hpicfInetDNSNameServerAddress, hpicfBasicAlarmStorageType=hpicfBasicAlarmStorageType, hpicfDNSNameServerEntry=hpicfDNSNameServerEntry, hpicfBasicAlarmTable=hpicfBasicAlarmTable, hpicfIpxNetEntry=hpicfIpxNetEntry, hpicfCurDNSNameServerTable=hpicfCurDNSNameServerTable, hpicfBasicDNSGroup1=hpicfBasicDNSGroup1, hpicfBasicLogSubFilterMatchCounter=hpicfBasicLogSubFilterMatchCounter, hpicfBasicCurDNSNameServerCompliance1=hpicfBasicCurDNSNameServerCompliance1, hpicfBasicConfig=hpicfBasicConfig, hpicfInetDNSNameServerTable=hpicfInetDNSNameServerTable, hpicfNewBasicCompliance=hpicfNewBasicCompliance, hpicfDNSDefaultDomainSuffixIsOobm=hpicfDNSDefaultDomainSuffixIsOobm, hpicfBasicDiscovery=hpicfBasicDiscovery, hpicfBasicWebAgentGroup=hpicfBasicWebAgentGroup, hpicfFixedTrapID=hpicfFixedTrapID, hpicfBasicDNSConfigGroup=hpicfBasicDNSConfigGroup, hpicfBasicWebMgmtObjects=hpicfBasicWebMgmtObjects, hpicfBasicObjectsGroup1=hpicfBasicObjectsGroup1, hpicfSNMPConfigGroup1=hpicfSNMPConfigGroup1, hpicfBasicTraps=hpicfBasicTraps, hpicfBasicIpConfig=hpicfBasicIpConfig, hpicfBasicCompliance12=hpicfBasicCompliance12, hpicfExecBannerStatus=hpicfExecBannerStatus, hpicfCurDNSNameServerAddrIndex=hpicfCurDNSNameServerAddrIndex, hpicfBasicLogFilterName=hpicfBasicLogFilterName, hpicfTrapDestStatus=hpicfTrapDestStatus, hpicfTrapDestCommunity=hpicfTrapDestCommunity, hpicfBasicAlarm=hpicfBasicAlarm, hpicfBasicMib=hpicfBasicMib, hpicfIpAddrEntry=hpicfIpAddrEntry, hpicfBannerStatus=hpicfBannerStatus, hpicfBasicWebAgentCompliance1=hpicfBasicWebAgentCompliance1, hpicfSwitchSnmpAllowUnsecuredAccessToIeee8021Secy=hpicfSwitchSnmpAllowUnsecuredAccessToIeee8021Secy, hpicfDNSDomainSuffixIndex=hpicfDNSDomainSuffixIndex, hpicfInetDNSNameServerAddrIndex=hpicfInetDNSNameServerAddrIndex, hpicfBasicSnmpTargetAddrLogFilter=hpicfBasicSnmpTargetAddrLogFilter, hpicfTelnet6Enable=hpicfTelnet6Enable, hpicfBasicCurDNSNameServerGroup1=hpicfBasicCurDNSNameServerGroup1, hpicfBasicLogSubFilterAction=hpicfBasicLogSubFilterAction, hpicfBasicRmonNVGroup=hpicfBasicRmonNVGroup, hpicfIpConfigLocalProxyArp=hpicfIpConfigLocalProxyArp, hpicfIpxNetTable=hpicfIpxNetTable, hpicfAnnounceDiscoveryEntry=hpicfAnnounceDiscoveryEntry, hpicfBasicWebAgentGroup1=hpicfBasicWebAgentGroup1, hpicfBasicLogPerIpFilterRowStatus=hpicfBasicLogPerIpFilterRowStatus, hpicfBasicEventStorageType=hpicfBasicEventStorageType, hpicfDNSDomainSuffixEntry=hpicfDNSDomainSuffixEntry, hpicfBasicGroup=hpicfBasicGroup, hpicfBasicIpSecondaryGroup=hpicfBasicIpSecondaryGroup, hpicfBasicDNSConfig=hpicfBasicDNSConfig, hpicfFixedTrapEventIndex=hpicfFixedTrapEventIndex, hpicfBasicLogPerIpFilterAction=hpicfBasicLogPerIpFilterAction, hpicfIpxConfigRouterEncaps=hpicfIpxConfigRouterEncaps, hpicfBasicCompliance11=hpicfBasicCompliance11, hpicfAnnounceDiscoveryGroup=hpicfAnnounceDiscoveryGroup, hpicfBasicIpConfigGroup3=hpicfBasicIpConfigGroup3, hpicfBasicCompliance6=hpicfBasicCompliance6, hpicfBasicConfigCompliance=hpicfBasicConfigCompliance, hpicfBasicComplianceOobm=hpicfBasicComplianceOobm, hpicfBasicObjectsGroup=hpicfBasicObjectsGroup, hpicfDNSNameServerEntryStatus=hpicfDNSNameServerEntryStatus, hpSwitchSnmpViewConfig=hpSwitchSnmpViewConfig, hpicfIpConfigAddrMask=hpicfIpConfigAddrMask, hpicfDNSDefaultDomainSuffix=hpicfDNSDefaultDomainSuffix, hpicfTrapDestTAddress=hpicfTrapDestTAddress, hpicfAnnounceTable=hpicfAnnounceTable, hpicfSNMPConfigGroup=hpicfSNMPConfigGroup, hpicfTrapDestVersion=hpicfTrapDestVersion, hpicfBasicAlarmNVCapacity=hpicfBasicAlarmNVCapacity, hpicfBasicCompliance7=hpicfBasicCompliance7, hpicfWebAgentEnable=hpicfWebAgentEnable, hpicfIpZeroBroadcastEnable=hpicfIpZeroBroadcastEnable, hpicfBasicSNMPConfigCompliance1=hpicfBasicSNMPConfigCompliance1, hpicfIpConfigTable=hpicfIpConfigTable, hpicfIpxConfigDefaultRouter=hpicfIpxConfigDefaultRouter, hpicfInetDNSNameServerEntry=hpicfInetDNSNameServerEntry, hpicfBasicEventEntry=hpicfBasicEventEntry, hpicfSnmpTargetAddrLogFilter=hpicfSnmpTargetAddrLogFilter, hpicfBasicLogSubFilterEventNum=hpicfBasicLogSubFilterEventNum, hpicfInetDNSNameServerEntryStatus=hpicfInetDNSNameServerEntryStatus, hpicfSnmpV2Enable=hpicfSnmpV2Enable, hpicfTelnetEnable=hpicfTelnetEnable, hpicfCurDNSConfig=hpicfCurDNSConfig, hpicfDNSNameServerAddress=hpicfDNSNameServerAddress, hpicfBasicLogPerIpFilterSysModule=hpicfBasicLogPerIpFilterSysModule, hpicfIpGlobalPingRouter=hpicfIpGlobalPingRouter, hpicfIpxConfigAdminStatus=hpicfIpxConfigAdminStatus, hpicfBanner=hpicfBanner, hpicfIpConfigDefaultRouter=hpicfIpConfigDefaultRouter, hpicfBasicCompliance13=hpicfBasicCompliance13, hpicfBannerExec=hpicfBannerExec, hpicfBasicAlarmEntry=hpicfBasicAlarmEntry, hpicfTelnetGroup=hpicfTelnetGroup, hpicfBasicIpxConfig=hpicfBasicIpxConfig, hpicfBasicCompliance8=hpicfBasicCompliance8, hpicfSwitchSnmpAllowUnsecuredAccessToMACsec=hpicfSwitchSnmpAllowUnsecuredAccessToMACsec, hpicfIpAddrAddr=hpicfIpAddrAddr, hpicfDisplayLogNumbers=hpicfDisplayLogNumbers, hpicfIpxNetNumber=hpicfIpxNetNumber, hpicfBannerMOTD=hpicfBannerMOTD, PYSNMP_MODULE_ID=hpicfBasicMib, hpicfIpGlobalDefaultRouter=hpicfIpGlobalDefaultRouter, hpicfBasicLogSubFilterRegExp=hpicfBasicLogSubFilterRegExp, hpicfCurDNSDefaultDomainSuffix=hpicfCurDNSDefaultDomainSuffix, hpicfSnmpTargetAddrLogFilterTable=hpicfSnmpTargetAddrLogFilterTable, hpicfDNSNameServerTable=hpicfDNSNameServerTable, hpicfDNSConfigMode=hpicfDNSConfigMode, hpicfBasicLogFilterEnable=hpicfBasicLogFilterEnable, hpicfIpxNetEncaps=hpicfIpxNetEncaps, hpicfBasicWebAgentIdleTime=hpicfBasicWebAgentIdleTime, hpicfIpAddrMask=hpicfIpAddrMask, hpicfBasicConfigGroup=hpicfBasicConfigGroup, hpicfTrapDestTable=hpicfTrapDestTable, hpicfTrapDestFilter=hpicfTrapDestFilter, hpicfTrapDestNotifyType=hpicfTrapDestNotifyType, hpicfBasic=hpicfBasic, hpicfBasicEventNVCapacity=hpicfBasicEventNVCapacity, hpicfBasicLogFiltersTable=hpicfBasicLogFiltersTable, hpicfIpxConfigEntry=hpicfIpxConfigEntry, hpicfBasicLogSubFilterSeverity=hpicfBasicLogSubFilterSeverity, hpicfCurDNSNameServerEntryStatus=hpicfCurDNSNameServerEntryStatus, hpicfBasicCompliance4=hpicfBasicCompliance4, hpicfSelfTestResultTime=hpicfSelfTestResultTime, hpicfIpConfigAdminStatus=hpicfIpConfigAdminStatus, hpicfBasicLogFilterRowStatus=hpicfBasicLogFilterRowStatus, hpicfBasicTrapDestGroup=hpicfBasicTrapDestGroup, hpicfIpAddrTable=hpicfIpAddrTable, hpicfBasicCompliance5=hpicfBasicCompliance5, hpicfBasicLogFilterConfigCompliance3=hpicfBasicLogFilterConfigCompliance3, hpicfSnmpTargetAddrLogFilterEntry=hpicfSnmpTargetAddrLogFilterEntry, hpicfBasicLogFilterConfigCompliance2=hpicfBasicLogFilterConfigCompliance2)
