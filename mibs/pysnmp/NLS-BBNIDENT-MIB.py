#
# PySNMP MIB module NLS-BBNIDENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NLS-BBNIDENT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:07:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, ObjectIdentity, Gauge32, iso, Counter64, IpAddress, Bits, TimeTicks, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ObjectIdentity", "Gauge32", "iso", "Counter64", "IpAddress", "Bits", "TimeTicks", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
gi = MibIdentifier((1, 3, 6, 1, 4, 1, 1166))
giproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1))
acc4000d = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 1))
anicd = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 2))
item1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 4))
irt1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 5))
nc1500 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 6))
om1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 7))
im1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 8))
mps = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 9))
rpd1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 10))
acpStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 11))
surfBbnh = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 18))
sb2100 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 19))
sb2100D = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 20))
sb2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 21))
saDANIS = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 30))
hdd2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 40))
merlin = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 50))
netSentry = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 99))
bti = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 200))
rfModMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 201))
btiIntMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 202))
dct5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 300))
motoIPNSprodID = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 450))
giproxies = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 3))
gicommon = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 4))
identity = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 4, 1))
state = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 4, 2))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 4, 3))
logs = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 4, 4))
nlsbbn = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 5))
bbnIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 5, 1))
bbnState = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 5, 2))
bbnTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 5, 3))
bbnLogs = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 5, 4))
dns = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 5, 5))
motproxies = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6))
class EntryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

identSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identSerialNumber.setStatus('mandatory')
identChassisNumber = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identChassisNumber.setStatus('mandatory')
identIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfIndex.setStatus('mandatory')
identHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identHardwareVersion.setStatus('mandatory')
identHardwareFeatures = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identHardwareFeatures.setStatus('mandatory')
identInventoryCode = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identInventoryCode.setStatus('mandatory')
identSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identSoftwareVersion.setStatus('mandatory')
identLocationArea = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identLocationArea.setStatus('mandatory')
identLocationRack = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identLocationRack.setStatus('mandatory')
identLocationShelf = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identLocationShelf.setStatus('mandatory')
identMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identMIBVersion.setStatus('mandatory')
identAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identAgentVersion.setStatus('mandatory')
identCommand = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("restart", 1), ("currentlyRestarting", 2), ("unspecified", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identCommand.setStatus('mandatory')
identIfExtensionTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14), )
if mibBuilder.loadTexts: identIfExtensionTable.setStatus('mandatory')
identIfExtensionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1), ).setIndexNames((0, "NLS-BBNIDENT-MIB", "identIfExtensionIndex"))
if mibBuilder.loadTexts: identIfExtensionEntry.setStatus('mandatory')
identIfExtensionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfExtensionIndex.setStatus('mandatory')
identIfSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfSerialNumber.setStatus('mandatory')
identIfHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfHardwareVersion.setStatus('mandatory')
identIfHardwareFeatures = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfHardwareFeatures.setStatus('mandatory')
identIfInventoryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identIfInventoryCode.setStatus('mandatory')
identIfFirmwareVersion1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfFirmwareVersion1.setStatus('mandatory')
identIfFirmwareVersion2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfFirmwareVersion2.setStatus('mandatory')
identIfFirmwareVersion3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfFirmwareVersion3.setStatus('mandatory')
identIfFirmwareVersion4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfFirmwareVersion4.setStatus('mandatory')
identIfSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identIfSlotId.setStatus('mandatory')
identIfCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 1), ("reset", 2), ("restart", 3), ("halt", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identIfCommand.setStatus('mandatory')
identIfAdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("locked", 1), ("unlocked", 2), ("shuttingDown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identIfAdministrativeState.setStatus('mandatory')
identIfOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfOperationalState.setStatus('mandatory')
identIfAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("underRepair", 1), ("critical", 2), ("major", 3), ("minor", 4), ("alarmOutstanding", 5), ("idle", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identIfAlarmStatus.setStatus('mandatory')
identIfAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("inTest", 1), ("failed", 2), ("powerOff", 3), ("offLine", 4), ("offDuty", 5), ("dependency", 6), ("degraded", 7), ("notInstalled", 8), ("logFull", 9), ("available", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfAvailabilityStatus.setStatus('mandatory')
identIfSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 16), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfSpecific.setStatus('mandatory')
identIfEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 17), EntryStatus().clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identIfEntryStatus.setStatus('mandatory')
identUnitModel = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identUnitModel.setStatus('mandatory')
mibBuilder.exportSymbols("NLS-BBNIDENT-MIB", im1000=im1000, bti=bti, identAgentVersion=identAgentVersion, om1000=om1000, netSentry=netSentry, identIfExtensionIndex=identIfExtensionIndex, identIfSerialNumber=identIfSerialNumber, identIfFirmwareVersion4=identIfFirmwareVersion4, identIfAdministrativeState=identIfAdministrativeState, identIfAlarmStatus=identIfAlarmStatus, motproxies=motproxies, identMIBVersion=identMIBVersion, mps=mps, rfModMIB=rfModMIB, identIfHardwareVersion=identIfHardwareVersion, identIfInventoryCode=identIfInventoryCode, motoIPNSprodID=motoIPNSprodID, identChassisNumber=identChassisNumber, identIfFirmwareVersion2=identIfFirmwareVersion2, dct5000=dct5000, acpStatus=acpStatus, identIfOperationalState=identIfOperationalState, identIfAvailabilityStatus=identIfAvailabilityStatus, btiIntMIB=btiIntMIB, logs=logs, identHardwareVersion=identHardwareVersion, identLocationArea=identLocationArea, identSerialNumber=identSerialNumber, identLocationShelf=identLocationShelf, hdd2000=hdd2000, identIfFirmwareVersion1=identIfFirmwareVersion1, identIfEntryStatus=identIfEntryStatus, irt1000=irt1000, sb2000=sb2000, saDANIS=saDANIS, EntryStatus=EntryStatus, item1000=item1000, identIfIndex=identIfIndex, identIfCommand=identIfCommand, identIfSpecific=identIfSpecific, nc1500=nc1500, gicommon=gicommon, sb2100D=sb2100D, acc4000d=acc4000d, dns=dns, giproxies=giproxies, state=state, identIfExtensionEntry=identIfExtensionEntry, identLocationRack=identLocationRack, bbnIdent=bbnIdent, identIfHardwareFeatures=identIfHardwareFeatures, identUnitModel=identUnitModel, bbnTraps=bbnTraps, anicd=anicd, identHardwareFeatures=identHardwareFeatures, traps=traps, nlsbbn=nlsbbn, identIfFirmwareVersion3=identIfFirmwareVersion3, identInventoryCode=identInventoryCode, identIfExtensionTable=identIfExtensionTable, surfBbnh=surfBbnh, merlin=merlin, giproducts=giproducts, identIfSlotId=identIfSlotId, identSoftwareVersion=identSoftwareVersion, identCommand=identCommand, sb2100=sb2100, bbnLogs=bbnLogs, rpd1000=rpd1000, gi=gi, identity=identity, bbnState=bbnState)
