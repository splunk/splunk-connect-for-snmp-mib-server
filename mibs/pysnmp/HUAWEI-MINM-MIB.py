#
# PySNMP MIB module HUAWEI-MINM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-MINM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:35:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
VlanList, = mibBuilder.importSymbols("HUAWEI-L2IF-MIB", "VlanList")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanId, VlanIdOrNone = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId", "VlanIdOrNone")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, Counter32, Unsigned32, Counter64, ModuleIdentity, iso, Bits, IpAddress, Gauge32, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "Counter32", "Unsigned32", "Counter64", "ModuleIdentity", "iso", "Bits", "IpAddress", "Gauge32", "NotificationType", "MibIdentifier")
MacAddress, DisplayString, TextualConvention, TruthValue, RowStatus, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention", "TruthValue", "RowStatus", "TimeStamp")
TransportDomain, TransportAddress = mibBuilder.importSymbols("TRANSPORT-ADDRESS-MIB", "TransportDomain", "TransportAddress")
hwMinMMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1))
if mibBuilder.loadTexts: hwMinMMIB.setLastUpdated('200611230000Z')
if mibBuilder.loadTexts: hwMinMMIB.setOrganization('Huawei Technologies Co., Ltd.')
class HWAdminStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

class HWOperStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

class HwDot1agCfmCcmInterval(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("intervalInvalid", 1), ("interval300Hz", 2), ("interval10ms", 3), ("interval100ms", 4), ("interval1s", 5), ("interval10s", 6), ("interval1min", 7), ("interval10min", 8), ("interval20ms", 9), ("interval30ms", 10), ("interval50ms", 11))

class HwDot1agCfmRelayActionFieldValue(TextualConvention, Integer32):
    reference = '802.1ag clauses 12.14.7.5.3 g), 20.32.2.5, and Table 21-24. RlyHit(1) The LTM reached an MP whose MAC address matches the target MAC address. RlyFDB(2) The Egress Port was determined by consulting the Filtering Database(20.41.1.1:a). RlyMPDB(3) The Egress Port was determined by consulting the MIP CCM Database(20.41.1.1:b). '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("rlyHit", 1), ("rlyFdb", 2), ("rlyMpdb", 3))

class HwLldpChassisIdSubtype(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("chassisComponent", 1), ("interfaceAlias", 2), ("portComponent", 3), ("macAddress", 4), ("networkAddress", 5), ("interfaceName", 6), ("local", 7))

class HwLldpChassisId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 255)

class HwLldpPortIdSubtype(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("interfaceAlias", 1), ("portComponent", 2), ("macAddress", 3), ("networkAddress", 4), ("interfaceName", 5), ("agentCircuitId", 6), ("local", 7))

class HwLldpPortId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 255)

class HwLldpManAddrIfSubtype(TextualConvention, Integer32):
    reference = 'IEEE 802.1AB-2005 9.5.9.5'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("ifIndex", 2), ("systemPortNumber", 3))

class HwLldpManAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 31)

class HwDot1agCfmIngressActionFieldValue(TextualConvention, Integer32):
    reference = '802.1ag clauses 12.14.7.5.3 k), 21.9.9.1, 20.35.2.6 and Table 21-26. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("ingOk", 1), ("ingDown", 2), ("ingBlocked", 3), ("ingVid", 4))

class HwDot1agCfmEgressActionFieldValue(TextualConvention, Integer32):
    reference = '802.1ag clauses 12.14.7.5.3 o), 21.9.10.1 and Table 21-28'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("egrOK", 1), ("egrDown", 2), ("egrBlocked", 3), ("egrVid", 4))

class HWApsInterval(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("apsInterval3dot3ms", 1), ("apsInterval5ms", 2), ("apsInterval10ms", 3), ("apsInterval15ms", 4), ("apsInterval20ms", 5), ("apsInterval30ms", 6))

class HWProtectMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("onePlusOneBidirectional", 1), ("onePlusOneUnidirectional", 2), ("oneToOne", 3))

class HWSwitchOperation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("clear", 1), ("lock", 2), ("force", 3), ("manual", 4), ("null", 5))

class HWProtectProtocol(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("protocolAps", 1), ("protocolOam", 2))

class HWServiceType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("p2p", 1), ("mp2mp", 2))

class HWInterfaceType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("transparent", 1), ("oneToOne", 2), ("bundling", 3))

class HWProcessBehavior(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("discard", 1), ("forward", 2))

class HWStaticMacFwdType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("static", 1), ("blackhole", 2))

class HwDot1agCfmMepIdOrZero(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), )
hwMINM = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133))
hwMinMObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1))
hwMinMSystemObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 1))
hwMinMVirtualMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMinMVirtualMac.setStatus('current')
hwMinMMacTnlBVlanListLow = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 1, 2), VlanList().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMinMMacTnlBVlanListLow.setStatus('current')
hwMinMMacTnlBVlanListHigh = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 1, 3), VlanList().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMinMMacTnlBVlanListHigh.setStatus('current')
hwMinMTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 1, 4), EnabledStatus().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMinMTrapEnable.setStatus('current')
hwMinMMacTnlObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2))
hwMinMMacTnlCfgObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1))
hwMinMMacTnlIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlIndexNext.setStatus('current')
hwMinMMacTnlCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 2), )
if mibBuilder.loadTexts: hwMinMMacTnlCfgTable.setStatus('current')
hwMinMMacTnlCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 2, 1), ).setIndexNames((0, "HUAWEI-MINM-MIB", "hwMinMMacTnlIndex"))
if mibBuilder.loadTexts: hwMinMMacTnlCfgEntry.setStatus('current')
hwMinMMacTnlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwMinMMacTnlIndex.setStatus('current')
hwMinMMacTnlName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlName.setStatus('current')
hwMinMMacTnlDMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 2, 1, 12), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlDMac.setStatus('current')
hwMinMMacTnlBVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 2, 1, 13), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlBVlanID.setStatus('current')
hwMinMMacTnlBVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlBVlanType.setStatus('current')
hwMinMMacTnlPriorityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlPriorityValue.setStatus('current')
hwMinMMacTnlOutgoingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 2, 1, 16), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlOutgoingIfIndex.setStatus('current')
hwMinMMacTnlSplitHorizonEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 2, 1, 17), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlSplitHorizonEnable.setStatus('current')
hwMinMMacTnlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 2, 1, 18), HWAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlAdminStatus.setStatus('current')
hwMinMMacTnlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 2, 1, 19), HWOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlOperStatus.setStatus('current')
hwMinMMacTnlDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlDescription.setStatus('current')
hwMinMMacTnlStatisticsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 2, 1, 21), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlStatisticsReset.setStatus('current')
hwMinMMacTnlPriorityTrustITag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 2, 1, 22), TruthValue().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlPriorityTrustITag.setStatus('current')
hwMinMMacTnlDeiTrustIDei = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 2, 1, 23), TruthValue().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlDeiTrustIDei.setStatus('current')
hwMinMMacTnlDeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 2, 1, 24), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlDeiValue.setStatus('current')
hwMinMMacTnlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 2, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlRowStatus.setStatus('current')
hwMinMMacTnlStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 3), )
if mibBuilder.loadTexts: hwMinMMacTnlStatisticsTable.setStatus('current')
hwMinMMacTnlStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 3, 1), ).setIndexNames((0, "HUAWEI-MINM-MIB", "hwMinMMacTnlIndex"))
if mibBuilder.loadTexts: hwMinMMacTnlStatisticsEntry.setStatus('current')
hwMinMMacTnlInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlInPackets.setStatus('current')
hwMinMMacTnlInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlInBytes.setStatus('current')
hwMinMMacTnlOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlOutPackets.setStatus('current')
hwMinMMacTnlOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlOutBytes.setStatus('current')
hwMacTnlNameToIndexMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 4), )
if mibBuilder.loadTexts: hwMacTnlNameToIndexMappingTable.setStatus('current')
hwMacTnlNameToIndexMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 4, 1), ).setIndexNames((0, "HUAWEI-MINM-MIB", "hwMacTnlName"))
if mibBuilder.loadTexts: hwMacTnlNameToIndexMappingEntry.setStatus('current')
hwMacTnlName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwMacTnlName.setStatus('current')
hwMacTnlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 1, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacTnlIndex.setStatus('current')
hwMinMMacTnlOamObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2))
hwMinMMacTnlCCTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: hwMinMMacTnlCCTable.setStatus('current')
hwMinMMacTnlCCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "HUAWEI-MINM-MIB", "hwMinMMacTnlIndex"))
if mibBuilder.loadTexts: hwMinMMacTnlCCEntry.setStatus('current')
hwMinMMacTnlCfmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 1, 1, 11), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlCfmEnable.setStatus('current')
hwMinMMacTnlCCInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 1, 1, 12), HwDot1agCfmCcmInterval().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlCCInterval.setStatus('current')
hwMinMMacTnlSomeRMepCcmDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlSomeRMepCcmDefect.setStatus('current')
hwMinMMacTnlSomeRdiDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlSomeRdiDefect.setStatus('current')
hwMinMMacTnlCcReceiveEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 1, 1, 15), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlCcReceiveEnabled.setStatus('current')
hwMinMMacTnlCCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 1, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlCCRowStatus.setStatus('current')
hwMinMMacTnlLbTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: hwMinMMacTnlLbTable.setStatus('current')
hwMinMMacTnlLbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "HUAWEI-MINM-MIB", "hwMinMMacTnlIndex"))
if mibBuilder.loadTexts: hwMinMMacTnlLbEntry.setStatus('current')
hwMinMMacTnlLbmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 2, 1, 11), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlLbmEnable.setStatus('current')
hwMinMMacTnlLbmTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 2, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLbmTimeStamp.setStatus('current')
hwMinMMacTnlLbmTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 2, 1, 13), Integer32().clone(2000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlLbmTimeOut.setStatus('current')
hwMinMMacTnlLbmTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 2, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlLbmTimes.setStatus('current')
hwMinMMacTnlLbmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1480)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlLbmSize.setStatus('current')
hwMinMMacTnlLbrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLbrIn.setStatus('current')
hwMinMMacTnlLbmResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 2, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLbmResult.setStatus('current')
hwMinMMacTnlLbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 2, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlLbRowStatus.setStatus('current')
hwMinMMacTnlLbResultTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 3), )
if mibBuilder.loadTexts: hwMinMMacTnlLbResultTable.setStatus('current')
hwMinMMacTnlLbResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 3, 1), ).setIndexNames((0, "HUAWEI-MINM-MIB", "hwMinMMacTnlIndex"))
if mibBuilder.loadTexts: hwMinMMacTnlLbResultEntry.setStatus('current')
hwMinMMacTnlMacPingRTTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlMacPingRTTMin.setStatus('current')
hwMinMMacTnlMacPingRTTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlMacPingRTTMax.setStatus('current')
hwMinMMacTnlMacPingRTTAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlMacPingRTTAvg.setStatus('current')
hwMinMMacTnlMacPingPacketLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlMacPingPacketLossRatio.setStatus('current')
hwMinMMacTnlLtmTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 4), )
if mibBuilder.loadTexts: hwMinMMacTnlLtmTable.setStatus('current')
hwMinMMacTnlLtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 4, 1), ).setIndexNames((0, "HUAWEI-MINM-MIB", "hwMinMMacTnlIndex"))
if mibBuilder.loadTexts: hwMinMMacTnlLtmEntry.setStatus('current')
hwMinMMacTnlLtmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 4, 1, 11), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlLtmEnable.setStatus('current')
hwMinMMacTnlLtmTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 4, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLtmTimeStamp.setStatus('current')
hwMinMMacTnlLtmTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(2000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlLtmTimeOut.setStatus('current')
hwMinMMacTnlLtmTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlLtmTtl.setStatus('current')
hwMinMMacTnlLtmFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 4, 1, 15), Bits().clone(namedValues=NamedValues(("useFDBonly", 0))).clone(namedValues=NamedValues(("useFDBonly", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLtmFlags.setStatus('current')
hwMinMMacTnlLtmSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 4, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLtmSeqNumber.setStatus('current')
hwMinMMacTnlLtmEgressIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 4, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlLtmEgressIdentifier.setStatus('current')
hwMinMMacTnlLtmResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 4, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLtmResult.setStatus('current')
hwMinMMacTnlLtmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 4, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMMacTnlLtmRowStatus.setStatus('current')
hwMinMMacTnlLtrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 5), )
if mibBuilder.loadTexts: hwMinMMacTnlLtrTable.setStatus('current')
hwMinMMacTnlLtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 5, 1), ).setIndexNames((0, "HUAWEI-MINM-MIB", "hwMinMMacTnlIndex"), (0, "HUAWEI-MINM-MIB", "hwMinMMacTnlLtrSeqNumber"), (0, "HUAWEI-MINM-MIB", "hwMinMMacTnlLtrReceiveOrder"))
if mibBuilder.loadTexts: hwMinMMacTnlLtrEntry.setStatus('current')
hwMinMMacTnlLtrSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwMinMMacTnlLtrSeqNumber.setStatus('current')
hwMinMMacTnlLtrReceiveOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hwMinMMacTnlLtrReceiveOrder.setStatus('current')
hwMinMMacTnlLtrTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 5, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLtrTtl.setStatus('current')
hwMinMMacTnlLtrForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 5, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLtrForwarded.setStatus('current')
hwMinMMacTnlLtrLastEgressIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 5, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLtrLastEgressIdentifier.setStatus('current')
hwMinMMacTnlLtrNextEgressIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 5, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLtrNextEgressIdentifier.setStatus('current')
hwMinMMacTnlLtrRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 5, 1, 15), HwDot1agCfmRelayActionFieldValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLtrRelay.setStatus('current')
hwMinMMacTnlLtrIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 5, 1, 16), HwDot1agCfmIngressActionFieldValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLtrIngress.setStatus('current')
hwMinMMacTnlLtrIngressMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 5, 1, 17), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLtrIngressMac.setStatus('current')
hwMinMMacTnlLtrIngressPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 5, 1, 18), HwLldpPortIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLtrIngressPortIdSubtype.setStatus('current')
hwMinMMacTnlLtrIngressPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 5, 1, 19), HwLldpPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLtrIngressPortId.setStatus('current')
hwMinMMacTnlLtrEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 5, 1, 20), HwDot1agCfmEgressActionFieldValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLtrEgress.setStatus('current')
hwMinMMacTnlLtrEgressMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 5, 1, 21), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLtrEgressMac.setStatus('current')
hwMinMMacTnlLtrEgressPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 5, 1, 22), HwLldpPortIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLtrEgressPortIdSubtype.setStatus('current')
hwMinMMacTnlLtrEgressPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 2, 5, 1, 23), HwLldpPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMMacTnlLtrEgressPortId.setStatus('current')
hwMinMMacTnlApsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 3))
hwMinMMacTnlApsCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 3, 1), )
if mibBuilder.loadTexts: hwMinMMacTnlApsCfgTable.setStatus('current')
hwMinMMacTnlApsCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 3, 1, 1), ).setIndexNames((0, "HUAWEI-MINM-MIB", "hwMinMMacTnlIndex"))
if mibBuilder.loadTexts: hwMinMMacTnlApsCfgEntry.setStatus('current')
hwMinMProtectMacTnlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMProtectMacTnlIndex.setStatus('current')
hwMinMProtectMacTnlName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMProtectMacTnlName.setStatus('current')
hwMinMProtectMacTnlDMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 3, 1, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMProtectMacTnlDMac.setStatus('current')
hwMinMProtectMacTnlBVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 3, 1, 1, 14), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMProtectMacTnlBVlanID.setStatus('current')
hwMinMProtectApsSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 3, 1, 1, 15), HWProtectMode().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMProtectApsSwitchMode.setStatus('current')
hwMinMProtectProtocolApsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 3, 1, 1, 16), EnabledStatus().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMProtectProtocolApsEnable.setStatus('current')
hwMinMProtectApsFastInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 3, 1, 1, 17), HWApsInterval().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMProtectApsFastInterval.setStatus('current')
hwMinMProtectHoldoffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMProtectHoldoffTime.setStatus('current')
hwMinMProtectRevMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 3, 1, 1, 19), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMProtectRevMode.setStatus('current')
hwMinMProtectRevWtrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMProtectRevWtrTime.setStatus('current')
hwMinMProtectSwitchOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 3, 1, 1, 21), HWSwitchOperation()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMProtectSwitchOperation.setStatus('current')
hwMinMProtectProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 3, 1, 1, 22), HWProtectProtocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMProtectProtocol.setStatus('current')
hwMinMProtectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 2, 3, 1, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMProtectRowStatus.setStatus('current')
hwMinMSIObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3))
hwMinMSIIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMSIIndexNext.setStatus('current')
hwMinMSICfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2), )
if mibBuilder.loadTexts: hwMinMSICfgTable.setStatus('current')
hwMinMSICfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1), ).setIndexNames((0, "HUAWEI-MINM-MIB", "hwMinMSIIndex"))
if mibBuilder.loadTexts: hwMinMSICfgEntry.setStatus('current')
hwMinMSIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwMinMSIIndex.setStatus('current')
hwMinMSIID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777216))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIID.setStatus('current')
hwMinMSIName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIName.setStatus('current')
hwMinMSIServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 13), HWServiceType().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIServiceType.setStatus('current')
hwMinMSIPriorityTrust8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 14), TruthValue().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIPriorityTrust8021p.setStatus('current')
hwMinMSIPriorityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIPriorityValue.setStatus('current')
hwMinMSIInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 16), HWInterfaceType().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIInterfaceType.setStatus('current')
hwMinMSIAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 17), HWAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIAdminStatus.setStatus('current')
hwMinMSIOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 18), HWOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMSIOperStatus.setStatus('current')
hwMinMSIMacLearningEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 19), EnabledStatus().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIMacLearningEnable.setStatus('current')
hwMinMSIMacLimitAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 20), HWProcessBehavior()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIMacLimitAction.setStatus('current')
hwMinMSIMacLimitAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 21), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIMacLimitAlarm.setStatus('current')
hwMinMSIMacLimitMaxinum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 131072))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIMacLimitMaxinum.setStatus('current')
hwMinMSIL2CtrlProProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 23), Bits().clone(namedValues=NamedValues(("all", 0), ("stp", 1), ("lldp", 2), ("lacp", 3), ("dot3ah", 4), ("dot1ag", 5))).clone(namedValues=NamedValues(("all", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIL2CtrlProProcess.setStatus('current')
hwMinMSIUnknownUnicastEnbale = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 24), EnabledStatus().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIUnknownUnicastEnbale.setStatus('current')
hwMinMSIMulticastEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 25), EnabledStatus().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIMulticastEnable.setStatus('current')
hwMinMSIBroadcastEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 26), EnabledStatus().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIBroadcastEnable.setStatus('current')
hwMinMSIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIDescription.setStatus('current')
hwMinMSIStatisticsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 28), EnabledStatus().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMinMSIStatisticsEnable.setStatus('current')
hwMinMSIStatisticsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 29), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIStatisticsReset.setStatus('current')
hwMinMSIFcsTransparentEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 30), EnabledStatus().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIFcsTransparentEnable.setStatus('current')
hwMinMSIIngressPriorityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 31), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIIngressPriorityValue.setStatus('current')
hwMinMSIEgressPriorityTrustBTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 32), TruthValue().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIEgressPriorityTrustBTag.setStatus('current')
hwMinMSIIngressDeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 33), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIIngressDeiValue.setStatus('current')
hwMinMSIEgressDeiTrustBDei = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 34), TruthValue().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIEgressDeiTrustBDei.setStatus('current')
hwMinMSIIsolateAll = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 35), EnabledStatus().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIIsolateAll.setStatus('current')
hwMinMSIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 2, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIRowStatus.setStatus('current')
hwMinMSIMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 3), )
if mibBuilder.loadTexts: hwMinMSIMappingTable.setStatus('current')
hwMinMSIMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 3, 1), ).setIndexNames((0, "HUAWEI-MINM-MIB", "hwMinMSIIndex"), (0, "HUAWEI-MINM-MIB", "hwMinMSIMappingIfIndex"), (0, "HUAWEI-MINM-MIB", "hwMinMSIMappingVlanPriority"), (0, "HUAWEI-MINM-MIB", "hwMinMSIMappingGlobalVlanID"))
if mibBuilder.loadTexts: hwMinMSIMappingEntry.setStatus('current')
hwMinMSIMappingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 3, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hwMinMSIMappingIfIndex.setStatus('current')
hwMinMSIMappingVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: hwMinMSIMappingVlanPriority.setStatus('current')
hwMinMSIMappingGlobalVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 3, 1, 3), VlanIdOrNone())
if mibBuilder.loadTexts: hwMinMSIMappingGlobalVlanID.setStatus('current')
hwMinMSIMappingVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 3, 1, 11), VlanList().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIMappingVlanListLow.setStatus('current')
hwMinMSIMappingVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 3, 1, 12), VlanList().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIMappingVlanListHigh.setStatus('current')
hwMinMSIMappingUserIsolate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 3, 1, 13), EnabledStatus().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIMappingUserIsolate.setStatus('current')
hwMinMSIMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 3, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIMappingRowStatus.setStatus('current')
hwMinMSIBindMacTnlTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 4), )
if mibBuilder.loadTexts: hwMinMSIBindMacTnlTable.setStatus('current')
hwMinMSIBindMacTnlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 4, 1), ).setIndexNames((0, "HUAWEI-MINM-MIB", "hwMinMSIIndex"), (0, "HUAWEI-MINM-MIB", "hwMinMSIBindMacTnlIndex"))
if mibBuilder.loadTexts: hwMinMSIBindMacTnlEntry.setStatus('current')
hwMinMSIBindMacTnlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwMinMSIBindMacTnlIndex.setStatus('current')
hwMinMSIBindMacTnlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 4, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIBindMacTnlRowStatus.setStatus('current')
hwMinMSIStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 5), )
if mibBuilder.loadTexts: hwMinMSIStatisticsTable.setStatus('current')
hwMinMSIStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 5, 1), ).setIndexNames((0, "HUAWEI-MINM-MIB", "hwMinMSIIndex"))
if mibBuilder.loadTexts: hwMinMSIStatisticsEntry.setStatus('current')
hwMinMSIInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMSIInPackets.setStatus('current')
hwMinMSIInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMSIInBytes.setStatus('current')
hwMinMSIOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMSIOutPackets.setStatus('current')
hwMinMSIOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMinMSIOutBytes.setStatus('current')
hwMinMSIStaticMacFwdTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 6), )
if mibBuilder.loadTexts: hwMinMSIStaticMacFwdTable.setStatus('current')
hwMinMSIStaticMacFwdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 6, 1), ).setIndexNames((0, "HUAWEI-MINM-MIB", "hwMinMSIIndex"), (0, "HUAWEI-MINM-MIB", "hwMinMSIStaticMacFwdCDMac"))
if mibBuilder.loadTexts: hwMinMSIStaticMacFwdEntry.setStatus('current')
hwMinMSIStaticMacFwdCDMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: hwMinMSIStaticMacFwdCDMac.setStatus('current')
hwMinMSIStaticMacFwdMacTnlName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 6, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIStaticMacFwdMacTnlName.setStatus('current')
hwMinMSIStaticMacFwdOutgoingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 6, 1, 12), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIStaticMacFwdOutgoingIfIndex.setStatus('current')
hwMinMSIStaticMacFwdVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 6, 1, 13), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIStaticMacFwdVlanID.setStatus('current')
hwMinMSIStaticMacFwdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 6, 1, 14), HWStaticMacFwdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIStaticMacFwdType.setStatus('current')
hwMinMSIStaticMacFwdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 6, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMinMSIStaticMacFwdRowStatus.setStatus('current')
hwSINameToIndexMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 7), )
if mibBuilder.loadTexts: hwSINameToIndexMappingTable.setStatus('current')
hwSINameToIndexMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 7, 1), ).setIndexNames((0, "HUAWEI-MINM-MIB", "hwSIName"))
if mibBuilder.loadTexts: hwSINameToIndexMappingEntry.setStatus('current')
hwSIName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwSIName.setStatus('current')
hwSIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 1, 3, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIIndex.setStatus('current')
hwMinMNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 2))
hwMinMMacTnlUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 2, 1)).setObjects(("HUAWEI-MINM-MIB", "hwMinMMacTnlName"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlDMac"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlBVlanID"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlAdminStatus"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlOperStatus"))
if mibBuilder.loadTexts: hwMinMMacTnlUp.setStatus('current')
hwMinMMacTnlDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 2, 2)).setObjects(("HUAWEI-MINM-MIB", "hwMinMMacTnlName"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlDMac"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlBVlanID"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlAdminStatus"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlOperStatus"))
if mibBuilder.loadTexts: hwMinMMacTnlDown.setStatus('current')
hwMinMSIUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 2, 3)).setObjects(("HUAWEI-MINM-MIB", "hwMinMSIID"), ("HUAWEI-MINM-MIB", "hwMinMSIName"), ("HUAWEI-MINM-MIB", "hwMinMSIAdminStatus"), ("HUAWEI-MINM-MIB", "hwMinMSIOperStatus"))
if mibBuilder.loadTexts: hwMinMSIUp.setStatus('current')
hwMinMSIDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 2, 4)).setObjects(("HUAWEI-MINM-MIB", "hwMinMSIID"), ("HUAWEI-MINM-MIB", "hwMinMSIName"), ("HUAWEI-MINM-MIB", "hwMinMSIAdminStatus"), ("HUAWEI-MINM-MIB", "hwMinMSIOperStatus"))
if mibBuilder.loadTexts: hwMinMSIDown.setStatus('current')
hwMinMMacTnlCCFaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 2, 5)).setObjects(("HUAWEI-MINM-MIB", "hwMinMMacTnlName"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlDMac"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlBVlanID"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlSomeRMepCcmDefect"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlSomeRdiDefect"))
if mibBuilder.loadTexts: hwMinMMacTnlCCFaultAlarm.setStatus('current')
hwMinMMacTnlSwitch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 2, 6)).setObjects(("HUAWEI-MINM-MIB", "hwMinMMacTnlName"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlDMac"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlBVlanID"), ("HUAWEI-MINM-MIB", "hwMinMProtectMacTnlName"), ("HUAWEI-MINM-MIB", "hwMinMProtectMacTnlDMac"), ("HUAWEI-MINM-MIB", "hwMinMProtectMacTnlBVlanID"), ("HUAWEI-MINM-MIB", "hwMinMProtectSwitchOperation"))
if mibBuilder.loadTexts: hwMinMMacTnlSwitch.setStatus('current')
hwMinMMacTnlRevertive = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 2, 7)).setObjects(("HUAWEI-MINM-MIB", "hwMinMMacTnlName"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlDMac"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlBVlanID"), ("HUAWEI-MINM-MIB", "hwMinMProtectMacTnlName"), ("HUAWEI-MINM-MIB", "hwMinMProtectMacTnlDMac"), ("HUAWEI-MINM-MIB", "hwMinMProtectMacTnlBVlanID"), ("HUAWEI-MINM-MIB", "hwMinMProtectSwitchOperation"))
if mibBuilder.loadTexts: hwMinMMacTnlRevertive.setStatus('current')
hwMinMSIMacLimitNumRaisingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 2, 8)).setObjects(("HUAWEI-MINM-MIB", "hwMinMSIName"), ("HUAWEI-MINM-MIB", "hwMinMSIID"), ("HUAWEI-MINM-MIB", "hwMinMSIMacLimitMaxinum"))
if mibBuilder.loadTexts: hwMinMSIMacLimitNumRaisingThreshold.setStatus('current')
hwMinMConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 3))
hwMinMGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 3, 1))
hwMinMSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 3, 1, 1)).setObjects(("HUAWEI-MINM-MIB", "hwMinMVirtualMac"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlBVlanListLow"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlBVlanListHigh"), ("HUAWEI-MINM-MIB", "hwMinMTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMinMSystemGroup = hwMinMSystemGroup.setStatus('current')
hwMinMMacTnlCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 3, 1, 2)).setObjects(("HUAWEI-MINM-MIB", "hwMinMVirtualMac"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlBVlanListLow"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlBVlanListHigh"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlIndexNext"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlName"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlDMac"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlBVlanID"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlBVlanType"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlPriorityValue"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlOutgoingIfIndex"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlSplitHorizonEnable"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlAdminStatus"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlOperStatus"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlDescription"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlRowStatus"), ("HUAWEI-MINM-MIB", "hwMacTnlIndex"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlStatisticsReset"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlPriorityTrustITag"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlDeiTrustIDei"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlDeiValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMinMMacTnlCfgGroup = hwMinMMacTnlCfgGroup.setStatus('current')
hwMinMMacTnlStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 3, 1, 3)).setObjects(("HUAWEI-MINM-MIB", "hwMinMMacTnlInPackets"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlInBytes"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlOutPackets"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlOutBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMinMMacTnlStatisticsGroup = hwMinMMacTnlStatisticsGroup.setStatus('current')
hwMinMMacTnlOAMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 3, 1, 4)).setObjects(("HUAWEI-MINM-MIB", "hwMinMMacTnlCfmEnable"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlCCInterval"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlSomeRMepCcmDefect"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlSomeRdiDefect"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlCcReceiveEnabled"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlCCRowStatus"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLbmEnable"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLbmTimeStamp"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLbmTimeOut"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLbmTimes"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLbmSize"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLbrIn"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlMacPingRTTMin"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlMacPingRTTMax"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlMacPingRTTAvg"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlMacPingPacketLossRatio"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLbmResult"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLbRowStatus"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtmEnable"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtmTimeStamp"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtmTimeOut"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtmTtl"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtmFlags"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtmSeqNumber"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtmEgressIdentifier"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtmResult"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtmRowStatus"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtrTtl"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtrForwarded"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtrLastEgressIdentifier"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtrNextEgressIdentifier"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtrRelay"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtrIngress"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtrIngressMac"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtrIngressPortIdSubtype"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtrIngressPortId"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtrEgress"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtrEgressMac"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtrEgressPortIdSubtype"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlLtrEgressPortId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMinMMacTnlOAMGroup = hwMinMMacTnlOAMGroup.setStatus('current')
hwMinMMacTnlApsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 3, 1, 5)).setObjects(("HUAWEI-MINM-MIB", "hwMinMProtectMacTnlName"), ("HUAWEI-MINM-MIB", "hwMinMProtectApsSwitchMode"), ("HUAWEI-MINM-MIB", "hwMinMProtectProtocolApsEnable"), ("HUAWEI-MINM-MIB", "hwMinMProtectApsFastInterval"), ("HUAWEI-MINM-MIB", "hwMinMProtectHoldoffTime"), ("HUAWEI-MINM-MIB", "hwMinMProtectRevMode"), ("HUAWEI-MINM-MIB", "hwMinMProtectRevWtrTime"), ("HUAWEI-MINM-MIB", "hwMinMProtectSwitchOperation"), ("HUAWEI-MINM-MIB", "hwMinMProtectProtocol"), ("HUAWEI-MINM-MIB", "hwMinMProtectMacTnlDMac"), ("HUAWEI-MINM-MIB", "hwMinMProtectMacTnlBVlanID"), ("HUAWEI-MINM-MIB", "hwMinMProtectRowStatus"), ("HUAWEI-MINM-MIB", "hwMinMProtectMacTnlIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMinMMacTnlApsGroup = hwMinMMacTnlApsGroup.setStatus('current')
hwMinMSICfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 3, 1, 6)).setObjects(("HUAWEI-MINM-MIB", "hwMinMSIIndexNext"), ("HUAWEI-MINM-MIB", "hwMinMSIID"), ("HUAWEI-MINM-MIB", "hwMinMSIName"), ("HUAWEI-MINM-MIB", "hwMinMSIServiceType"), ("HUAWEI-MINM-MIB", "hwMinMSIPriorityTrust8021p"), ("HUAWEI-MINM-MIB", "hwMinMSIPriorityValue"), ("HUAWEI-MINM-MIB", "hwMinMSIInterfaceType"), ("HUAWEI-MINM-MIB", "hwMinMSIAdminStatus"), ("HUAWEI-MINM-MIB", "hwMinMSIOperStatus"), ("HUAWEI-MINM-MIB", "hwMinMSIMacLearningEnable"), ("HUAWEI-MINM-MIB", "hwMinMSIMacLimitAction"), ("HUAWEI-MINM-MIB", "hwMinMSIMacLimitAlarm"), ("HUAWEI-MINM-MIB", "hwMinMSIMacLimitMaxinum"), ("HUAWEI-MINM-MIB", "hwMinMSIL2CtrlProProcess"), ("HUAWEI-MINM-MIB", "hwMinMSIUnknownUnicastEnbale"), ("HUAWEI-MINM-MIB", "hwMinMSIMulticastEnable"), ("HUAWEI-MINM-MIB", "hwMinMSIBroadcastEnable"), ("HUAWEI-MINM-MIB", "hwMinMSIDescription"), ("HUAWEI-MINM-MIB", "hwMinMSIRowStatus"), ("HUAWEI-MINM-MIB", "hwMinMSIStaticMacFwdOutgoingIfIndex"), ("HUAWEI-MINM-MIB", "hwMinMSIStaticMacFwdVlanID"), ("HUAWEI-MINM-MIB", "hwMinMSIStaticMacFwdType"), ("HUAWEI-MINM-MIB", "hwMinMSIFcsTransparentEnable"), ("HUAWEI-MINM-MIB", "hwMinMSIStaticMacFwdRowStatus"), ("HUAWEI-MINM-MIB", "hwSIIndex"), ("HUAWEI-MINM-MIB", "hwMinMSIBindMacTnlRowStatus"), ("HUAWEI-MINM-MIB", "hwMinMSIStaticMacFwdMacTnlName"), ("HUAWEI-MINM-MIB", "hwMinMSIMappingVlanListLow"), ("HUAWEI-MINM-MIB", "hwMinMSIMappingVlanListHigh"), ("HUAWEI-MINM-MIB", "hwMinMSIMappingUserIsolate"), ("HUAWEI-MINM-MIB", "hwMinMSIIngressPriorityValue"), ("HUAWEI-MINM-MIB", "hwMinMSIEgressPriorityTrustBTag"), ("HUAWEI-MINM-MIB", "hwMinMSIIngressDeiValue"), ("HUAWEI-MINM-MIB", "hwMinMSIEgressDeiTrustBDei"), ("HUAWEI-MINM-MIB", "hwMinMSIIsolateAll"), ("HUAWEI-MINM-MIB", "hwMinMSIMappingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMinMSICfgGroup = hwMinMSICfgGroup.setStatus('current')
hwMinMSIStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 3, 1, 7)).setObjects(("HUAWEI-MINM-MIB", "hwMinMSIInPackets"), ("HUAWEI-MINM-MIB", "hwMinMSIInBytes"), ("HUAWEI-MINM-MIB", "hwMinMSIOutPackets"), ("HUAWEI-MINM-MIB", "hwMinMSIOutBytes"), ("HUAWEI-MINM-MIB", "hwMinMSIStatisticsReset"), ("HUAWEI-MINM-MIB", "hwMinMSIStatisticsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMinMSIStatisticsGroup = hwMinMSIStatisticsGroup.setStatus('current')
hwMinMNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 3, 1, 8)).setObjects(("HUAWEI-MINM-MIB", "hwMinMMacTnlUp"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlDown"), ("HUAWEI-MINM-MIB", "hwMinMSIUp"), ("HUAWEI-MINM-MIB", "hwMinMSIDown"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlCCFaultAlarm"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlSwitch"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlRevertive"), ("HUAWEI-MINM-MIB", "hwMinMSIMacLimitNumRaisingThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMinMNotificationGroup = hwMinMNotificationGroup.setStatus('current')
hwMinMCompliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 133, 1, 3, 2)).setObjects(("HUAWEI-MINM-MIB", "hwMinMSystemGroup"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlCfgGroup"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlOAMGroup"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlApsGroup"), ("HUAWEI-MINM-MIB", "hwMinMSICfgGroup"), ("HUAWEI-MINM-MIB", "hwMinMMacTnlStatisticsGroup"), ("HUAWEI-MINM-MIB", "hwMinMSIStatisticsGroup"), ("HUAWEI-MINM-MIB", "hwMinMNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMinMCompliances = hwMinMCompliances.setStatus('current')
mibBuilder.exportSymbols("HUAWEI-MINM-MIB", hwMinMMacTnlLtrEntry=hwMinMMacTnlLtrEntry, hwMinMMacTnlCfgEntry=hwMinMMacTnlCfgEntry, hwMinMMacTnlObjects=hwMinMMacTnlObjects, hwMinMProtectHoldoffTime=hwMinMProtectHoldoffTime, hwMinMMacTnlLtrTtl=hwMinMMacTnlLtrTtl, hwMinMSIRowStatus=hwMinMSIRowStatus, hwMinMSIL2CtrlProProcess=hwMinMSIL2CtrlProProcess, hwMinMSIDown=hwMinMSIDown, hwSINameToIndexMappingTable=hwSINameToIndexMappingTable, HwDot1agCfmEgressActionFieldValue=HwDot1agCfmEgressActionFieldValue, hwMinMMacTnlLtrEgressPortId=hwMinMMacTnlLtrEgressPortId, hwMinMMacTnlCfgTable=hwMinMMacTnlCfgTable, hwMinMMacTnlCcReceiveEnabled=hwMinMMacTnlCcReceiveEnabled, hwMinMSIBindMacTnlEntry=hwMinMSIBindMacTnlEntry, HWSwitchOperation=HWSwitchOperation, hwMinMMacTnlApsObjects=hwMinMMacTnlApsObjects, hwMinMSIIngressDeiValue=hwMinMSIIngressDeiValue, hwMinMMacTnlBVlanType=hwMinMMacTnlBVlanType, hwMinMMacTnlLtrForwarded=hwMinMMacTnlLtrForwarded, hwMinMMacTnlLbmTimeStamp=hwMinMMacTnlLbmTimeStamp, hwMinMSIMacLimitMaxinum=hwMinMSIMacLimitMaxinum, hwMinMMIB=hwMinMMIB, hwMinMMacTnlCCFaultAlarm=hwMinMMacTnlCCFaultAlarm, hwMinMProtectRevWtrTime=hwMinMProtectRevWtrTime, hwMinMSIOutBytes=hwMinMSIOutBytes, hwMinMMacTnlDeiValue=hwMinMMacTnlDeiValue, HWServiceType=HWServiceType, hwMinMSIStaticMacFwdType=hwMinMSIStaticMacFwdType, hwMinMMacTnlAdminStatus=hwMinMMacTnlAdminStatus, hwMinMMacTnlPriorityTrustITag=hwMinMMacTnlPriorityTrustITag, hwMinMMacTnlUp=hwMinMMacTnlUp, hwMinMMacTnlApsGroup=hwMinMMacTnlApsGroup, hwMinMMacTnlInPackets=hwMinMMacTnlInPackets, HwDot1agCfmCcmInterval=HwDot1agCfmCcmInterval, hwMinMMacTnlName=hwMinMMacTnlName, hwMacTnlName=hwMacTnlName, hwMinMSystemGroup=hwMinMSystemGroup, hwMinMSIID=hwMinMSIID, hwMinMMacTnlOamObjects=hwMinMMacTnlOamObjects, hwMinMSIOperStatus=hwMinMSIOperStatus, hwMinMSIStaticMacFwdTable=hwMinMSIStaticMacFwdTable, HwLldpChassisIdSubtype=HwLldpChassisIdSubtype, hwMinMSIEgressDeiTrustBDei=hwMinMSIEgressDeiTrustBDei, hwMinMMacTnlCCTable=hwMinMMacTnlCCTable, hwMinMMacTnlLbmResult=hwMinMMacTnlLbmResult, hwMinMMacTnlSwitch=hwMinMMacTnlSwitch, hwMinMSIStatisticsEnable=hwMinMSIStatisticsEnable, hwMinMProtectApsSwitchMode=hwMinMProtectApsSwitchMode, HwDot1agCfmMepIdOrZero=HwDot1agCfmMepIdOrZero, hwMinMMacTnlLtrEgressMac=hwMinMMacTnlLtrEgressMac, hwMinMSIMappingGlobalVlanID=hwMinMSIMappingGlobalVlanID, hwMinMMacTnlSplitHorizonEnable=hwMinMMacTnlSplitHorizonEnable, hwMinMMacTnlLbResultEntry=hwMinMMacTnlLbResultEntry, hwMinMMacTnlLbmTimes=hwMinMMacTnlLbmTimes, hwMinMProtectMacTnlIndex=hwMinMProtectMacTnlIndex, hwMinMMacTnlLtmResult=hwMinMMacTnlLtmResult, hwMinMMacTnlLbEntry=hwMinMMacTnlLbEntry, hwMinMMacTnlApsCfgEntry=hwMinMMacTnlApsCfgEntry, hwMinMSIPriorityTrust8021p=hwMinMSIPriorityTrust8021p, hwMinMMacTnlDeiTrustIDei=hwMinMMacTnlDeiTrustIDei, hwMinMMacTnlMacPingPacketLossRatio=hwMinMMacTnlMacPingPacketLossRatio, hwMinMConformance=hwMinMConformance, hwMinMMacTnlRowStatus=hwMinMMacTnlRowStatus, hwMinMSICfgTable=hwMinMSICfgTable, hwMinMMacTnlInBytes=hwMinMMacTnlInBytes, hwMinMSIMappingTable=hwMinMSIMappingTable, hwMinMMacTnlSomeRMepCcmDefect=hwMinMMacTnlSomeRMepCcmDefect, hwMinMSICfgEntry=hwMinMSICfgEntry, hwMinMMacTnlLtrNextEgressIdentifier=hwMinMMacTnlLtrNextEgressIdentifier, hwMinMSystemObjects=hwMinMSystemObjects, hwMinMMacTnlLtrEgress=hwMinMMacTnlLtrEgress, hwMinMMacTnlLbTable=hwMinMMacTnlLbTable, hwMinMMacTnlLtmFlags=hwMinMMacTnlLtmFlags, HWProcessBehavior=HWProcessBehavior, hwMinMProtectApsFastInterval=hwMinMProtectApsFastInterval, hwMinMSICfgGroup=hwMinMSICfgGroup, hwMinMMacTnlStatisticsEntry=hwMinMMacTnlStatisticsEntry, hwMinMObjects=hwMinMObjects, hwMinMMacTnlLbrIn=hwMinMMacTnlLbrIn, hwMinMMacTnlLbmEnable=hwMinMMacTnlLbmEnable, HWProtectProtocol=HWProtectProtocol, hwMinMSIMappingUserIsolate=hwMinMSIMappingUserIsolate, hwSINameToIndexMappingEntry=hwSINameToIndexMappingEntry, hwMinMMacTnlOutgoingIfIndex=hwMinMMacTnlOutgoingIfIndex, hwMinMMacTnlLtrReceiveOrder=hwMinMMacTnlLtrReceiveOrder, hwMinMMacTnlLtmTable=hwMinMMacTnlLtmTable, hwMinMSIServiceType=hwMinMSIServiceType, hwMinMMacTnlMacPingRTTAvg=hwMinMMacTnlMacPingRTTAvg, hwMinMSIStaticMacFwdRowStatus=hwMinMSIStaticMacFwdRowStatus, hwMinMSIStaticMacFwdEntry=hwMinMSIStaticMacFwdEntry, HwDot1agCfmIngressActionFieldValue=HwDot1agCfmIngressActionFieldValue, hwMinMSIMappingIfIndex=hwMinMSIMappingIfIndex, hwMINM=hwMINM, hwMinMMacTnlSomeRdiDefect=hwMinMMacTnlSomeRdiDefect, hwMinMMacTnlLtmRowStatus=hwMinMMacTnlLtmRowStatus, hwMinMMacTnlStatisticsTable=hwMinMMacTnlStatisticsTable, hwMinMMacTnlOperStatus=hwMinMMacTnlOperStatus, hwMinMSIBindMacTnlIndex=hwMinMSIBindMacTnlIndex, hwMinMSIFcsTransparentEnable=hwMinMSIFcsTransparentEnable, hwMinMProtectMacTnlName=hwMinMProtectMacTnlName, HwLldpPortIdSubtype=HwLldpPortIdSubtype, hwMinMSIMacLearningEnable=hwMinMSIMacLearningEnable, hwMinMSIStaticMacFwdVlanID=hwMinMSIStaticMacFwdVlanID, hwMinMMacTnlCCRowStatus=hwMinMMacTnlCCRowStatus, hwMacTnlIndex=hwMacTnlIndex, hwMinMSIMappingEntry=hwMinMSIMappingEntry, hwMinMSIStaticMacFwdMacTnlName=hwMinMSIStaticMacFwdMacTnlName, hwMinMSIInterfaceType=hwMinMSIInterfaceType, hwMinMMacTnlBVlanListLow=hwMinMMacTnlBVlanListLow, hwMinMSIStatisticsTable=hwMinMSIStatisticsTable, hwMinMMacTnlDescription=hwMinMMacTnlDescription, hwMinMMacTnlLtrSeqNumber=hwMinMMacTnlLtrSeqNumber, HWInterfaceType=HWInterfaceType, hwMinMProtectProtocolApsEnable=hwMinMProtectProtocolApsEnable, hwMinMSIObjects=hwMinMSIObjects, hwMinMSIUnknownUnicastEnbale=hwMinMSIUnknownUnicastEnbale, hwMinMTrapEnable=hwMinMTrapEnable, hwMinMSIMappingVlanListHigh=hwMinMSIMappingVlanListHigh, hwSIIndex=hwSIIndex, hwMinMMacTnlOAMGroup=hwMinMMacTnlOAMGroup, hwMinMProtectMacTnlDMac=hwMinMProtectMacTnlDMac, HWApsInterval=HWApsInterval, hwMinMMacTnlMacPingRTTMax=hwMinMMacTnlMacPingRTTMax, hwMinMMacTnlOutBytes=hwMinMMacTnlOutBytes, hwMinMMacTnlLbRowStatus=hwMinMMacTnlLbRowStatus, HwDot1agCfmRelayActionFieldValue=HwDot1agCfmRelayActionFieldValue, hwMinMMacTnlMacPingRTTMin=hwMinMMacTnlMacPingRTTMin, PYSNMP_MODULE_ID=hwMinMMIB, HWProtectMode=HWProtectMode, HwLldpChassisId=HwLldpChassisId, hwMinMSIStatisticsEntry=hwMinMSIStatisticsEntry, HwLldpPortId=HwLldpPortId, hwMinMSIEgressPriorityTrustBTag=hwMinMSIEgressPriorityTrustBTag, hwMinMMacTnlStatisticsGroup=hwMinMMacTnlStatisticsGroup, hwMinMSIPriorityValue=hwMinMSIPriorityValue, hwMinMMacTnlLtmTimeStamp=hwMinMMacTnlLtmTimeStamp, hwMinMSIBindMacTnlRowStatus=hwMinMSIBindMacTnlRowStatus, hwMinMMacTnlCfgObjects=hwMinMMacTnlCfgObjects, hwMinMMacTnlLbmSize=hwMinMMacTnlLbmSize, hwMinMProtectRevMode=hwMinMProtectRevMode, hwMinMMacTnlLbResultTable=hwMinMMacTnlLbResultTable, hwMinMMacTnlOutPackets=hwMinMMacTnlOutPackets, hwMacTnlNameToIndexMappingEntry=hwMacTnlNameToIndexMappingEntry, hwMinMMacTnlCfgGroup=hwMinMMacTnlCfgGroup, hwMinMMacTnlLtrRelay=hwMinMMacTnlLtrRelay, hwMinMSIBroadcastEnable=hwMinMSIBroadcastEnable, hwMinMSIUp=hwMinMSIUp, hwMinMMacTnlLtmEnable=hwMinMMacTnlLtmEnable, hwMinMMacTnlLbmTimeOut=hwMinMMacTnlLbmTimeOut, hwMinMMacTnlLtmEgressIdentifier=hwMinMMacTnlLtmEgressIdentifier, hwMinMMacTnlBVlanListHigh=hwMinMMacTnlBVlanListHigh, hwMinMMacTnlLtrIngress=hwMinMMacTnlLtrIngress, hwMinMSIInPackets=hwMinMSIInPackets, hwMinMMacTnlIndex=hwMinMMacTnlIndex, hwMinMProtectMacTnlBVlanID=hwMinMProtectMacTnlBVlanID, hwMinMProtectRowStatus=hwMinMProtectRowStatus, hwMinMSIIndexNext=hwMinMSIIndexNext, hwMinMSIBindMacTnlTable=hwMinMSIBindMacTnlTable, hwMinMNotificationGroup=hwMinMNotificationGroup, hwMinMMacTnlApsCfgTable=hwMinMMacTnlApsCfgTable, hwMinMSIName=hwMinMSIName, hwMinMSIMacLimitAction=hwMinMSIMacLimitAction, hwMinMNotifications=hwMinMNotifications, hwMinMProtectProtocol=hwMinMProtectProtocol, hwMacTnlNameToIndexMappingTable=hwMacTnlNameToIndexMappingTable, hwSIName=hwSIName, hwMinMMacTnlStatisticsReset=hwMinMMacTnlStatisticsReset, hwMinMSIMacLimitAlarm=hwMinMSIMacLimitAlarm, hwMinMMacTnlLtrTable=hwMinMMacTnlLtrTable, hwMinMSIInBytes=hwMinMSIInBytes, hwMinMProtectSwitchOperation=hwMinMProtectSwitchOperation, hwMinMSIIndex=hwMinMSIIndex, hwMinMMacTnlCfmEnable=hwMinMMacTnlCfmEnable, hwMinMMacTnlDown=hwMinMMacTnlDown, hwMinMSIIsolateAll=hwMinMSIIsolateAll, hwMinMMacTnlDMac=hwMinMMacTnlDMac, hwMinMSIDescription=hwMinMSIDescription, HWOperStatus=HWOperStatus, hwMinMSIMacLimitNumRaisingThreshold=hwMinMSIMacLimitNumRaisingThreshold, hwMinMSIStatisticsReset=hwMinMSIStatisticsReset, hwMinMMacTnlCCInterval=hwMinMMacTnlCCInterval, hwMinMMacTnlIndexNext=hwMinMMacTnlIndexNext, hwMinMMacTnlLtmEntry=hwMinMMacTnlLtmEntry, hwMinMSIAdminStatus=hwMinMSIAdminStatus, hwMinMMacTnlLtrLastEgressIdentifier=hwMinMMacTnlLtrLastEgressIdentifier, HwLldpManAddress=HwLldpManAddress, hwMinMSIMulticastEnable=hwMinMSIMulticastEnable, hwMinMSIStaticMacFwdOutgoingIfIndex=hwMinMSIStaticMacFwdOutgoingIfIndex, hwMinMMacTnlLtmSeqNumber=hwMinMMacTnlLtmSeqNumber, hwMinMSIMappingVlanListLow=hwMinMSIMappingVlanListLow, hwMinMGroups=hwMinMGroups, HWStaticMacFwdType=HWStaticMacFwdType, hwMinMMacTnlLtmTimeOut=hwMinMMacTnlLtmTimeOut, hwMinMSIStatisticsGroup=hwMinMSIStatisticsGroup, hwMinMMacTnlLtrIngressMac=hwMinMMacTnlLtrIngressMac, hwMinMMacTnlBVlanID=hwMinMMacTnlBVlanID, hwMinMMacTnlRevertive=hwMinMMacTnlRevertive, hwMinMSIOutPackets=hwMinMSIOutPackets, hwMinMMacTnlCCEntry=hwMinMMacTnlCCEntry, hwMinMMacTnlLtrIngressPortIdSubtype=hwMinMMacTnlLtrIngressPortIdSubtype, hwMinMCompliances=hwMinMCompliances, hwMinMMacTnlLtmTtl=hwMinMMacTnlLtmTtl, HWAdminStatus=HWAdminStatus, HwLldpManAddrIfSubtype=HwLldpManAddrIfSubtype, hwMinMMacTnlPriorityValue=hwMinMMacTnlPriorityValue, hwMinMSIStaticMacFwdCDMac=hwMinMSIStaticMacFwdCDMac, hwMinMSIMappingRowStatus=hwMinMSIMappingRowStatus, hwMinMSIMappingVlanPriority=hwMinMSIMappingVlanPriority, hwMinMMacTnlLtrEgressPortIdSubtype=hwMinMMacTnlLtrEgressPortIdSubtype, hwMinMVirtualMac=hwMinMVirtualMac, hwMinMSIIngressPriorityValue=hwMinMSIIngressPriorityValue, hwMinMMacTnlLtrIngressPortId=hwMinMMacTnlLtrIngressPortId)
