#
# PySNMP MIB module SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:01:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, ModuleIdentity, MibIdentifier, NotificationType, iso, Bits, Integer32, TimeTicks, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "MibIdentifier", "NotificationType", "iso", "Bits", "Integer32", "TimeTicks", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sonomaATM, = mibBuilder.importSymbols("SONOMASYSTEMS-SONOMA-MIB", "sonomaATM")
sonomaGenericATMGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1))
atmGenericPhysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1))
atmGenericVclGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2))
atmGenericLpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 3))
atmCesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4))
atmAsiPhysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5))
atmAsmPhysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 6))
atmGenPhysTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 1), )
if mibBuilder.loadTexts: atmGenPhysTable.setStatus('mandatory')
atmGenPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "atmGenPhysIndex"))
if mibBuilder.loadTexts: atmGenPhysEntry.setStatus('mandatory')
atmGenPhysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenPhysIndex.setStatus('mandatory')
atmGenPhysAal5Mtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenPhysAal5Mtu.setStatus('mandatory')
atmGenPhysAal5CrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenPhysAal5CrcErrors.setStatus('mandatory')
atmGenPhysAal5OverSizedSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenPhysAal5OverSizedSDUs.setStatus('mandatory')
atmGenPhysAal5DiscardPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenPhysAal5DiscardPDU.setStatus('mandatory')
atmGenPhysHECErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenPhysHECErrors.setStatus('mandatory')
atmGenPhysUnknownProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenPhysUnknownProtocols.setStatus('mandatory')
atmGenPhysCellsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenPhysCellsReceived.setStatus('mandatory')
atmGenPhysCellsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenPhysCellsTransmitted.setStatus('mandatory')
atmGenPhysRxBufStarvation = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenPhysRxBufStarvation.setStatus('mandatory')
atmGenPhysRxFreeze = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenPhysRxFreeze.setStatus('mandatory')
atmGenPhysTxFreeze = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenPhysTxFreeze.setStatus('mandatory')
atmGenRateTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 2), )
if mibBuilder.loadTexts: atmGenRateTable.setStatus('mandatory')
atmGenRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 2, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "atmGenRatePhysIndex"))
if mibBuilder.loadTexts: atmGenRateEntry.setStatus('mandatory')
atmGenRatePhysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenRatePhysIndex.setStatus('mandatory')
atmGenRateQueOne = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 135150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenRateQueOne.setStatus('mandatory')
atmGenRateQueTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 135150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenRateQueTwo.setStatus('mandatory')
atmGenRateQueThree = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 135150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenRateQueThree.setStatus('mandatory')
atmGenRateQueFour = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 135150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenRateQueFour.setStatus('mandatory')
atmGenRateQueFive = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 135150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenRateQueFive.setStatus('mandatory')
atmGenRateQueSix = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 135150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenRateQueSix.setStatus('mandatory')
atmGenRateQueSeven = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 135150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenRateQueSeven.setStatus('mandatory')
atmGenRateQueEight = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 135150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenRateQueEight.setStatus('mandatory')
atmGenRateQTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 3), )
if mibBuilder.loadTexts: atmGenRateQTable.setStatus('mandatory')
atmGenRateQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 3, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "atmGenRateQPhysIndex"), (0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "atmGenRateQNumber"))
if mibBuilder.loadTexts: atmGenRateQEntry.setStatus('mandatory')
atmGenRateQPhysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenRateQPhysIndex.setStatus('mandatory')
atmGenRateQNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenRateQNumber.setStatus('mandatory')
atmGenRateQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 135150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenRateQueue.setStatus('mandatory')
atmGenVclTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 1), )
if mibBuilder.loadTexts: atmGenVclTable.setStatus('mandatory')
atmGenVclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "atmGenVclIfIndex"), (0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "atmGenVclVpi"), (0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "atmGenVclVci"))
if mibBuilder.loadTexts: atmGenVclEntry.setStatus('mandatory')
atmGenVclIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenVclIfIndex.setStatus('mandatory')
atmGenVclVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenVclVpi.setStatus('mandatory')
atmGenVclVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenVclVci.setStatus('mandatory')
atmGenVclRateQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenVclRateQ.setStatus('mandatory')
atmGenVclAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6))).clone(namedValues=NamedValues(("create", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenVclAction.setStatus('mandatory')
atmGenVclTmTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 2), )
if mibBuilder.loadTexts: atmGenVclTmTable.setStatus('mandatory')
atmGenVclTmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 2, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "atmGenVclTmIfIndex"), (0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "atmGenVclTmVpi"), (0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "atmGenVclTmVci"))
if mibBuilder.loadTexts: atmGenVclTmEntry.setStatus('mandatory')
atmGenVclTmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenVclTmIfIndex.setStatus('mandatory')
atmGenVclTmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenVclTmVpi.setStatus('mandatory')
atmGenVclTmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenVclTmVci.setStatus('mandatory')
atmGenVclTmPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenVclTmPCR.setStatus('mandatory')
atmGenVclTmSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenVclTmSCR.setStatus('mandatory')
atmGenVclTmMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenVclTmMBS.setStatus('mandatory')
atmGenVclTmAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6))).clone(namedValues=NamedValues(("create", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenVclTmAction.setStatus('mandatory')
atmGenVclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 3), )
if mibBuilder.loadTexts: atmGenVclStatsTable.setStatus('mandatory')
atmGenVclStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 3, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "atmGenVclStatsIfIndex"), (0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "atmGenVclStatsVpi"), (0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "atmGenVclStatsVci"))
if mibBuilder.loadTexts: atmGenVclStatsEntry.setStatus('mandatory')
atmGenVclStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenVclStatsIfIndex.setStatus('mandatory')
atmGenVclStatsVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenVclStatsVpi.setStatus('mandatory')
atmGenVclStatsVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(35, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenVclStatsVci.setStatus('mandatory')
atmGenVclStatsCellsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenVclStatsCellsReceived.setStatus('mandatory')
atmGenVclStatsCellsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenVclStatsCellsTransmitted.setStatus('mandatory')
atmGenVclStatsOamAisRcvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenVclStatsOamAisRcvCells.setStatus('mandatory')
atmGenVclStatsOamAisXmtCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenVclStatsOamAisXmtCells.setStatus('mandatory')
atmGenVclStatsOamRdiRcvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenVclStatsOamRdiRcvCells.setStatus('mandatory')
atmGenVclStatsOamRdiXmtCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenVclStatsOamRdiXmtCells.setStatus('mandatory')
atmGenVclStatsOamLoopbackRcvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenVclStatsOamLoopbackRcvCells.setStatus('mandatory')
atmGenVclStatsOamLoopbackXmtCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenVclStatsOamLoopbackXmtCells.setStatus('mandatory')
atmGenLogicalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 3, 1), )
if mibBuilder.loadTexts: atmGenLogicalPortTable.setStatus('mandatory')
atmGenLogicalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 3, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "atmGenLpIfIndex"))
if mibBuilder.loadTexts: atmGenLogicalPortEntry.setStatus('mandatory')
atmGenLpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(257, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenLpIfIndex.setStatus('mandatory')
atmGenLpPhysIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenLpPhysIf.setStatus('mandatory')
atmGenLpLoopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenLpLoopTime.setStatus('mandatory')
atmGenLpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("ethernet", 7), ("ethernetII", 8), ("ethernet8023", 9), ("tokenRing", 10), ("fddi", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenLpProtocol.setStatus('mandatory')
atmGenLpAal5EncapsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rfc1483-vc", 1), ("rfc1483-llc", 2))).clone('rfc1483-llc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenLpAal5EncapsType.setStatus('mandatory')
atmGenLpAal5Mtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenLpAal5Mtu.setStatus('mandatory')
atmGenLpAal5RateQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenLpAal5RateQ.setStatus('mandatory')
atmGenLpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmGenLpAdminStatus.setStatus('mandatory')
atmGenLpLoopThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 3, 1, 1, 9), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenLpLoopThreshold.setStatus('mandatory')
atmGenLpLoopTrapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 3, 1, 1, 10), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenLpLoopTrapTime.setStatus('mandatory')
atmGenLpOamGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 3, 1, 1, 11), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmGenLpOamGeneration.setStatus('mandatory')
cesConfTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 1), )
if mibBuilder.loadTexts: cesConfTable.setStatus('mandatory')
cesConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "cesAtmPhysPort"), (0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "cesAtmVpi"), (0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "cesAtmVci"))
if mibBuilder.loadTexts: cesConfEntry.setStatus('mandatory')
cesAtmPhysPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesAtmPhysPort.setStatus('mandatory')
cesAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesAtmVpi.setStatus('mandatory')
cesAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesAtmVci.setStatus('mandatory')
cesCbrService = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unstructured", 1), ("structured", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesCbrService.setStatus('mandatory')
cesCbrClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("synchronous", 1), ("srts-master", 2), ("adaptive", 3), ("srts-slave", 4))).clone('synchronous')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesCbrClockMode.setStatus('mandatory')
cesCas = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("without", 1), ("with", 2))).clone('without')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesCas.setStatus('mandatory')
cesPartialFill = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPartialFill.setStatus('mandatory')
cesBufMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesBufMaxSize.setStatus('mandatory')
cesCdvRxT = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesCdvRxT.setStatus('mandatory')
cesCellLossIntegrationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535)).clone(2500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesCellLossIntegrationPeriod.setStatus('mandatory')
cesConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("pvc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesConnType.setStatus('mandatory')
cesDynBw = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesDynBw.setStatus('mandatory')
cesSigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("fxo-loop", 2), ("fxs-loop", 3), ("fxo-ground", 4), ("fxs-ground", 5), ("e-and-m", 6), ("r2", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesSigType.setStatus('mandatory')
cesConfAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6))).clone(namedValues=NamedValues(("attach", 5), ("remove", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesConfAction.setStatus('mandatory')
cesStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 3), )
if mibBuilder.loadTexts: cesStatsTable.setStatus('mandatory')
cesStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 3, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "cesStatsAtmPhyPort"), (0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "cesStatsAtmVpi"), (0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "cesStatsAtmVci"))
if mibBuilder.loadTexts: cesStatsEntry.setStatus('mandatory')
cesStatsAtmPhyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesStatsAtmPhyPort.setStatus('mandatory')
cesStatsAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesStatsAtmVpi.setStatus('mandatory')
cesStatsAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(35, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesStatsAtmVci.setStatus('mandatory')
cesReassCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesReassCells.setStatus('mandatory')
cesHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesHdrErrors.setStatus('mandatory')
cesPointerReframes = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPointerReframes.setStatus('mandatory')
cesPointerParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPointerParityErrors.setStatus('mandatory')
cesAal1SeqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesAal1SeqErrors.setStatus('mandatory')
cesLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesLostCells.setStatus('mandatory')
cesMisinsertedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesMisinsertedCells.setStatus('mandatory')
cesBufUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesBufUnderflows.setStatus('mandatory')
cesBufOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesBufOverflows.setStatus('mandatory')
cesCellLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLoss", 1), ("loss", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesCellLossStatus.setStatus('deprecated')
cesAttachmentTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 4), )
if mibBuilder.loadTexts: cesAttachmentTable.setStatus('mandatory')
cesAttachmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 4, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "cesAttachmentPhysPort"), (0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "cesAttachmentBundle"), (0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "cesAttachmentChan"))
if mibBuilder.loadTexts: cesAttachmentEntry.setStatus('mandatory')
cesAttachmentPhysPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesAttachmentPhysPort.setStatus('mandatory')
cesAttachmentBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 1536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesAttachmentBundle.setStatus('mandatory')
cesAttachmentChan = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesAttachmentChan.setStatus('mandatory')
cesAttachmentAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6))).clone(namedValues=NamedValues(("attach", 5), ("remove", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesAttachmentAction.setStatus('mandatory')
atmAsiConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 1))
atmAsiStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 2))
atmAsiConfPhyTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 1, 1), )
if mibBuilder.loadTexts: atmAsiConfPhyTable.setStatus('mandatory')
atmAsiConfPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 1, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "atmAsiConfPhysIndex"))
if mibBuilder.loadTexts: atmAsiConfPhyEntry.setStatus('mandatory')
atmAsiConfPhysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAsiConfPhysIndex.setStatus('mandatory')
atmAsiConfLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("esf", 2), ("d4", 3), ("e1", 4), ("e1-crc", 5), ("e1-cas", 6), ("e1-crc-cas", 7))).clone('esf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAsiConfLineType.setStatus('mandatory')
atmAsiConfLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("b8zs", 2), ("hdb3", 3), ("zbtsi", 4), ("ami", 5))).clone('b8zs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAsiConfLineCoding.setStatus('mandatory')
atmAsiConfTxClkSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("line", 2), ("through", 3))).clone('line')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAsiConfTxClkSelect.setStatus('mandatory')
atmAsiConfSignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("robbed-bit", 2), ("bit-oriented", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAsiConfSignalMode.setStatus('mandatory')
atmAsiConfLIUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("t1-long", 1), ("itu-120", 2), ("itu-75", 3), ("dsx1-short", 4))).clone('dsx1-short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAsiConfLIUType.setStatus('mandatory')
atmAsiConfLBOType = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8, 9, 10, 11))).clone(namedValues=NamedValues(("short-133", 1), ("short-266", 2), ("short-399", 3), ("short-533", 4), ("short-655", 5), ("long-0", 8), ("long-75", 9), ("long-150", 10), ("long-225", 11))).clone('short-133')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAsiConfLBOType.setStatus('mandatory')
atmAsiConfIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAsiConfIdlePattern.setStatus('mandatory')
atmAsiConfLoopbackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("internal", 2), ("external", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAsiConfLoopbackMode.setStatus('mandatory')
atmAsiConfStopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("immediate", 1), ("on-idle", 2))).clone('immediate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAsiConfStopMode.setStatus('mandatory')
atmAsiConfRecoveredClkSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fourth-port", 1), ("third-port", 2), ("second-port", 3), ("first-port", 4), ("phy-port", 5))).clone('fourth-port')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAsiConfRecoveredClkSource.setStatus('mandatory')
atmAsiDebugAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAsiDebugAddr.setStatus('mandatory')
atmAsiDebugReadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 1, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAsiDebugReadValue.setStatus('mandatory')
atmAsiDebugWriteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 1, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAsiDebugWriteValue.setStatus('mandatory')
atmAsiDebugRead = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read", 1), ("write", 2))).clone('read')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAsiDebugRead.setStatus('mandatory')
atmAsiStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 2, 1), )
if mibBuilder.loadTexts: atmAsiStatsTable.setStatus('mandatory')
atmAsiStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 2, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "atmAsiStatsPhysIndex"))
if mibBuilder.loadTexts: atmAsiStatsEntry.setStatus('mandatory')
atmAsiStatsPhysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAsiStatsPhysIndex.setStatus('mandatory')
atmAsiStatsNoSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAsiStatsNoSignals.setStatus('mandatory')
atmAsiStatsAISDetects = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAsiStatsAISDetects.setStatus('mandatory')
atmAsiStatsYelAlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAsiStatsYelAlarmCount.setStatus('mandatory')
atmAsiStatsLCVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAsiStatsLCVErrors.setStatus('mandatory')
atmAsiStatsPCVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAsiStatsPCVErrors.setStatus('mandatory')
atmAsiStatsMOSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAsiStatsMOSErrors.setStatus('mandatory')
atmAsiStatsSyncLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAsiStatsSyncLossCount.setStatus('mandatory')
atmAsiStatsHECErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAsiStatsHECErrors.setStatus('mandatory')
atmAsiStatsSignalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAsiStatsSignalLoss.setStatus('mandatory')
atmAsiStatsAISDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAsiStatsAISDetect.setStatus('mandatory')
atmAsiStatsYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAsiStatsYellowAlarm.setStatus('mandatory')
atmAsiStatsSyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAsiStatsSyncLoss.setStatus('mandatory')
atmAsiStatsTxClockLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAsiStatsTxClockLoss.setStatus('mandatory')
atmAsiStatsClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 5, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAsiStatsClearCounters.setStatus('mandatory')
atmAsmPhyConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 6, 1))
atmAsmPhyConfTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 6, 1, 1), )
if mibBuilder.loadTexts: atmAsmPhyConfTable.setStatus('mandatory')
atmAsmPhyConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 6, 1, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", "atmAsmPhyConfIndex"))
if mibBuilder.loadTexts: atmAsmPhyConfEntry.setStatus('mandatory')
atmAsmPhyConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAsmPhyConfIndex.setStatus('mandatory')
atmAsmPhyConfAdminLineUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("ces-udt", 1), ("ces-sdt", 2), ("uni", 4), ("ima", 5))).clone('uni')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmAsmPhyConfAdminLineUsage.setStatus('mandatory')
atmAsmPhyConfOperLineUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 1, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("ces-udt", 1), ("ces-sdt", 2), ("uni", 4), ("ima", 5))).clone('uni')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAsmPhyConfOperLineUsage.setStatus('mandatory')
mibBuilder.exportSymbols("SONOMASYSTEMS-SONOMA-ATM-GENERIC-MIB", atmGenLpAal5Mtu=atmGenLpAal5Mtu, atmGenRateQueThree=atmGenRateQueThree, atmGenVclTmIfIndex=atmGenVclTmIfIndex, atmGenVclTmPCR=atmGenVclTmPCR, atmGenVclStatsTable=atmGenVclStatsTable, cesAttachmentTable=cesAttachmentTable, atmGenVclTmTable=atmGenVclTmTable, cesPartialFill=cesPartialFill, atmAsiStatsSyncLossCount=atmAsiStatsSyncLossCount, atmGenLpLoopTrapTime=atmGenLpLoopTrapTime, atmGenLpLoopTime=atmGenLpLoopTime, atmGenericVclGroup=atmGenericVclGroup, atmGenPhysHECErrors=atmGenPhysHECErrors, atmGenVclStatsOamAisXmtCells=atmGenVclStatsOamAisXmtCells, atmGenLpLoopThreshold=atmGenLpLoopThreshold, atmGenVclStatsOamRdiRcvCells=atmGenVclStatsOamRdiRcvCells, atmAsiConfLineType=atmAsiConfLineType, atmAsiConfLoopbackMode=atmAsiConfLoopbackMode, cesAttachmentPhysPort=cesAttachmentPhysPort, atmAsiConfIdlePattern=atmAsiConfIdlePattern, atmGenPhysEntry=atmGenPhysEntry, atmGenVclAction=atmGenVclAction, atmAsiDebugWriteValue=atmAsiDebugWriteValue, atmGenLpAal5RateQ=atmGenLpAal5RateQ, atmAsiStatsMOSErrors=atmAsiStatsMOSErrors, atmGenVclStatsEntry=atmGenVclStatsEntry, atmGenPhysAal5OverSizedSDUs=atmGenPhysAal5OverSizedSDUs, atmAsiStatsSyncLoss=atmAsiStatsSyncLoss, atmGenVclStatsOamLoopbackXmtCells=atmGenVclStatsOamLoopbackXmtCells, atmGenPhysTxFreeze=atmGenPhysTxFreeze, atmAsiPhysGroup=atmAsiPhysGroup, atmGenRateQueOne=atmGenRateQueOne, atmGenVclVpi=atmGenVclVpi, atmAsiStatsTable=atmAsiStatsTable, atmAsiStatsPhysIndex=atmAsiStatsPhysIndex, atmAsiStatsLCVErrors=atmAsiStatsLCVErrors, atmAsiConfStopMode=atmAsiConfStopMode, cesAttachmentChan=cesAttachmentChan, atmGenericPhysGroup=atmGenericPhysGroup, atmAsiConfLineCoding=atmAsiConfLineCoding, atmGenPhysRxFreeze=atmGenPhysRxFreeze, atmGenPhysTable=atmGenPhysTable, cesStatsAtmVci=cesStatsAtmVci, atmGenRateTable=atmGenRateTable, atmGenRateQNumber=atmGenRateQNumber, atmGenVclTmEntry=atmGenVclTmEntry, atmGenPhysIndex=atmGenPhysIndex, atmAsmPhyConfAdminLineUsage=atmAsmPhyConfAdminLineUsage, cesCdvRxT=cesCdvRxT, atmAsmPhysGroup=atmAsmPhysGroup, atmGenVclStatsOamRdiXmtCells=atmGenVclStatsOamRdiXmtCells, cesCellLossStatus=cesCellLossStatus, cesCellLossIntegrationPeriod=cesCellLossIntegrationPeriod, cesConfAction=cesConfAction, atmAsiConfTxClkSelect=atmAsiConfTxClkSelect, atmAsiConfRecoveredClkSource=atmAsiConfRecoveredClkSource, atmGenRateQueEight=atmGenRateQueEight, cesAtmPhysPort=cesAtmPhysPort, atmGenLpIfIndex=atmGenLpIfIndex, atmAsiConfPhyTable=atmAsiConfPhyTable, cesDynBw=cesDynBw, cesBufOverflows=cesBufOverflows, atmGenRateQTable=atmGenRateQTable, atmGenRateQueFive=atmGenRateQueFive, atmCesGroup=atmCesGroup, cesBufUnderflows=cesBufUnderflows, cesLostCells=cesLostCells, atmGenRateQueSix=atmGenRateQueSix, cesStatsAtmPhyPort=cesStatsAtmPhyPort, atmAsiConfSignalMode=atmAsiConfSignalMode, cesCas=cesCas, atmGenLogicalPortTable=atmGenLogicalPortTable, atmAsmPhyConfEntry=atmAsmPhyConfEntry, atmGenVclStatsOamLoopbackRcvCells=atmGenVclStatsOamLoopbackRcvCells, atmGenVclStatsOamAisRcvCells=atmGenVclStatsOamAisRcvCells, sonomaGenericATMGroup=sonomaGenericATMGroup, atmGenVclRateQ=atmGenVclRateQ, atmGenLpAal5EncapsType=atmGenLpAal5EncapsType, atmAsiStatsNoSignals=atmAsiStatsNoSignals, cesStatsEntry=cesStatsEntry, atmGenVclEntry=atmGenVclEntry, atmGenLpOamGeneration=atmGenLpOamGeneration, atmAsiStatsAISDetect=atmAsiStatsAISDetect, atmGenPhysCellsTransmitted=atmGenPhysCellsTransmitted, cesPointerReframes=cesPointerReframes, atmAsiStatsClearCounters=atmAsiStatsClearCounters, atmGenVclIfIndex=atmGenVclIfIndex, cesAttachmentBundle=cesAttachmentBundle, cesAtmVpi=cesAtmVpi, atmGenPhysUnknownProtocols=atmGenPhysUnknownProtocols, atmGenRateQueue=atmGenRateQueue, atmAsiStatsHECErrors=atmAsiStatsHECErrors, atmGenRateQueFour=atmGenRateQueFour, cesAttachmentEntry=cesAttachmentEntry, atmGenRateEntry=atmGenRateEntry, atmAsiStatsAISDetects=atmAsiStatsAISDetects, atmGenRateQueTwo=atmGenRateQueTwo, atmGenVclStatsCellsReceived=atmGenVclStatsCellsReceived, cesCbrService=cesCbrService, cesAal1SeqErrors=cesAal1SeqErrors, cesCbrClockMode=cesCbrClockMode, atmGenRateQEntry=atmGenRateQEntry, atmGenVclTmAction=atmGenVclTmAction, atmGenRateQPhysIndex=atmGenRateQPhysIndex, atmGenVclStatsCellsTransmitted=atmGenVclStatsCellsTransmitted, atmGenPhysAal5Mtu=atmGenPhysAal5Mtu, atmGenLpProtocol=atmGenLpProtocol, atmGenPhysRxBufStarvation=atmGenPhysRxBufStarvation, cesMisinsertedCells=cesMisinsertedCells, cesSigType=cesSigType, atmGenLogicalPortEntry=atmGenLogicalPortEntry, atmGenLpAdminStatus=atmGenLpAdminStatus, atmGenVclTable=atmGenVclTable, atmGenVclTmVci=atmGenVclTmVci, atmAsiConfLIUType=atmAsiConfLIUType, atmAsiDebugRead=atmAsiDebugRead, atmGenVclStatsVci=atmGenVclStatsVci, atmGenVclTmVpi=atmGenVclTmVpi, cesStatsTable=cesStatsTable, cesAttachmentAction=cesAttachmentAction, cesPointerParityErrors=cesPointerParityErrors, atmAsiDebugAddr=atmAsiDebugAddr, atmGenPhysAal5DiscardPDU=atmGenPhysAal5DiscardPDU, atmAsiStatsEntry=atmAsiStatsEntry, atmGenVclTmMBS=atmGenVclTmMBS, cesConnType=cesConnType, atmGenVclVci=atmGenVclVci, cesHdrErrors=cesHdrErrors, atmAsiConfGroup=atmAsiConfGroup, atmAsiStatsYelAlarmCount=atmAsiStatsYelAlarmCount, cesBufMaxSize=cesBufMaxSize, cesConfTable=cesConfTable, atmGenPhysCellsReceived=atmGenPhysCellsReceived, atmAsmPhyConfOperLineUsage=atmAsmPhyConfOperLineUsage, atmAsiStatsGroup=atmAsiStatsGroup, atmAsiDebugReadValue=atmAsiDebugReadValue, atmAsiStatsTxClockLoss=atmAsiStatsTxClockLoss, atmAsiConfPhysIndex=atmAsiConfPhysIndex, atmAsiConfPhyEntry=atmAsiConfPhyEntry, atmAsmPhyConfIndex=atmAsmPhyConfIndex, atmAsmPhyConfTable=atmAsmPhyConfTable, atmAsiStatsYellowAlarm=atmAsiStatsYellowAlarm, atmGenVclStatsVpi=atmGenVclStatsVpi, cesAtmVci=cesAtmVci, cesReassCells=cesReassCells, atmGenVclStatsIfIndex=atmGenVclStatsIfIndex, atmAsiConfLBOType=atmAsiConfLBOType, atmGenRatePhysIndex=atmGenRatePhysIndex, atmGenLpPhysIf=atmGenLpPhysIf, cesStatsAtmVpi=cesStatsAtmVpi, atmGenPhysAal5CrcErrors=atmGenPhysAal5CrcErrors, atmAsiStatsSignalLoss=atmAsiStatsSignalLoss, atmGenVclTmSCR=atmGenVclTmSCR, cesConfEntry=cesConfEntry, atmAsiStatsPCVErrors=atmAsiStatsPCVErrors, atmGenericLpGroup=atmGenericLpGroup, atmGenRateQueSeven=atmGenRateQueSeven, atmAsmPhyConfGroup=atmAsmPhyConfGroup)
