#
# PySNMP MIB module JUNIPER-IFOTN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-IFOTN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:48:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ifDescr, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
JnxoptIfOTNOChAlarms, JnxoptIfOTNODUkTcmAlarms = mibBuilder.importSymbols("JNX-OPT-IF-EXT-MIB", "JnxoptIfOTNOChAlarms", "JnxoptIfOTNODUkTcmAlarms")
jnxIfOtnNotifications, jnxIfOtnMibRoot = mibBuilder.importSymbols("JUNIPER-SMI", "jnxIfOtnNotifications", "jnxIfOtnMibRoot")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, ModuleIdentity, TimeTicks, Unsigned32, Gauge32, IpAddress, MibIdentifier, Counter32, Bits, Counter64, Integer32, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "TimeTicks", "Unsigned32", "Gauge32", "IpAddress", "MibIdentifier", "Counter32", "Bits", "Counter64", "Integer32", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DateAndTime, TruthValue, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "TruthValue", "DisplayString", "RowStatus")
jnxIfOtnMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1))
jnxIfOtnMib.setRevisions(('2016-09-12 20:15', '2015-06-24 12:27', '2012-01-27 00:00', '2012-01-27 00:00',))
if mibBuilder.loadTexts: jnxIfOtnMib.setLastUpdated('201609122015Z')
if mibBuilder.loadTexts: jnxIfOtnMib.setOrganization('Juniper Networks, Inc.')
class JnxIfAdminStates(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("jnxAdminStateInService", 1), ("jnxAdminStateInServiceMA", 2), ("jnxAdminStateOutofService", 3), ("jnxAdminStateOutofServiceMA", 4))

class JnxIfOperStates(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("jnxOperStateInit", 1), ("jnxOperStateNormal", 2), ("jnxOperStateFault", 3), ("jnxOperStateDegraded", 4))

class JnxIfOtnRate(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("otu0", 1), ("otu1", 2), ("otu2", 3), ("otu2e", 4), ("otu3", 5), ("otu4", 6), ("otu1e", 7), ("otu5", 8))

class JnxIfOtnFecType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("nofec", 0), ("gfec", 1), ("efecI2", 2), ("efecI3", 3), ("efecI4", 4), ("efecI5", 5), ("efecI6", 6), ("efecI7", 7), ("efecI8", 8), ("efecI9", 9), ("gfecandsdfec", 10), ("sdfec", 11), ("hgfec", 12))

class JnxIfOtnLayer(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("jnxOch", 1), ("jnxOTUk", 2), ("jnxODUk", 3), ("jnxTCM", 4))

class JnxIfOtnType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("jnxNearEnd", 1), ("jnxFarEnd", 2))

class JnxIfOtnDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("jnxTxDir", 1), ("jnxRxDir", 2), ("jnxBiDir", 3))

class JnxIfOtnSeverity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("jnxCritical", 1), ("jnxMajor", 2), ("jnxMinor", 3), ("jnxInfo", 4))

class JnxIfOtnServiceStateAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("jnxNotSupported", 0), ("jnxNonServiceAffecting", 1), ("jnxServiceAffecting", 2))

jnxIfOtn = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1))
jnxIfOtnOCh2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2))
jnxIfOtnOChCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1), )
if mibBuilder.loadTexts: jnxIfOtnOChCfgTable.setStatus('current')
jnxIfOtnOChCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1), ).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOChCfgContainerIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOChCfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOChCfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOChCfgL3Index"))
if mibBuilder.loadTexts: jnxIfOtnOChCfgEntry.setStatus('current')
jnxIfOtnOChCfgContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOChCfgContainerIndex.setStatus('current')
jnxIfOtnOChCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOChCfgL1Index.setStatus('current')
jnxIfOtnOChCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOChCfgL2Index.setStatus('current')
jnxIfOtnOChCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOChCfgL3Index.setStatus('current')
jnxIfOtnLocalLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnLocalLoopback.setStatus('current')
jnxIfOtnLineLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnLineLoopback.setStatus('current')
jnxIfOtnPayloadLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnPayloadLoopback.setStatus('current')
jnxIfOtnAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 8), JnxIfAdminStates()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnAdminState.setStatus('current')
jnxIfOtnOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 9), JnxIfOperStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOperState.setStatus('current')
jnxIfOtnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnIndex.setStatus('current')
jnxIfOtnOChStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 11), Bits().clone(namedValues=NamedValues(("los", 0), ("lof", 1), ("lom", 2), ("wavelengthlockerr", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOChStatus.setStatus('current')
jnxIfOtnOChPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOChPortMode.setStatus('current')
jnxIfOtnOTUkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2), )
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgTable.setStatus('current')
jnxIfOtnOTUkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1), ).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOTUkCfgContainerIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOTUkCfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOTUkCfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOTUkCfgL3Index"))
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgEntry.setStatus('current')
jnxIfOtnOTUkCfgContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgContainerIndex.setStatus('current')
jnxIfOtnOTUkCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgL1Index.setStatus('current')
jnxIfOtnOTUkCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgL2Index.setStatus('current')
jnxIfOtnOTUkCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgL3Index.setStatus('current')
jnxIfOtnOTUkCfgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 5), JnxIfOtnRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgRate.setStatus('current')
jnxIfOtnOTUkCfgFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 6), JnxIfOtnFecType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkCfgFecMode.setStatus('current')
jnxIfOtnOTUkEnableAutoFrrByteInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkEnableAutoFrrByteInsert.setStatus('current')
jnxIfOtnOTUkEnableBERFrrSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkEnableBERFrrSupport.setStatus('current')
jnxIfOtnOTUkPreFecBERThresholdMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdMantissa.setStatus('current')
jnxIfOtnOTUkPreFecBERThresholdExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdExponent.setStatus('current')
jnxIfOtnOTUkPreFecBERThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 11), Integer32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdTime.setStatus('current')
jnxIfOtnOTUkTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkTIMActEnabled.setStatus('current')
jnxIfOtnOTUkTxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkTxTTI.setStatus('current')
jnxIfOtnOTUkRxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOTUkRxTTI.setStatus('current')
jnxIfOtnOTUkExpectedRxSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkExpectedRxSapi.setStatus('current')
jnxIfOtnOTUkExpectedRxDapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkExpectedRxDapi.setStatus('current')
jnxIfOtnOTUkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 17), Bits().clone(namedValues=NamedValues(("ais", 0), ("bdi", 1), ("iae", 2), ("ttim", 3), ("sf", 4), ("sd", 5), ("biae", 6), ("tsf", 7), ("ssf", 8), ("fecexcessive", 9), ("fecdegrade", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOTUkStatus.setStatus('current')
jnxIfOtnOTUkPreFecBERThresholdClearMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdClearMantissa.setStatus('current')
jnxIfOtnOTUkPreFecBERThresholdClearExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOTUkPreFecBERThresholdClearExponent.setStatus('current')
jnxIfOtnODUkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3), )
if mibBuilder.loadTexts: jnxIfOtnODUkCfgTable.setStatus('current')
jnxIfOtnODUkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1), ).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkCfgContainerIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkCfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkCfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkCfgL3Index"))
if mibBuilder.loadTexts: jnxIfOtnODUkCfgEntry.setStatus('current')
jnxIfOtnODUkCfgContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnODUkCfgContainerIndex.setStatus('current')
jnxIfOtnODUkCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnODUkCfgL1Index.setStatus('current')
jnxIfOtnODUkCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnODUkCfgL2Index.setStatus('current')
jnxIfOtnODUkCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnODUkCfgL3Index.setStatus('current')
jnxIfOtnODUkAPSPCC0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkAPSPCC0.setStatus('current')
jnxIfOtnODUkAPSPCC1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkAPSPCC1.setStatus('current')
jnxIfOtnODUkAPSPCC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkAPSPCC2.setStatus('current')
jnxIfOtnODUkAPSPCC3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkAPSPCC3.setStatus('current')
jnxIfOtnODUkPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkPayloadType.setStatus('current')
jnxIfOtnODUkTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkTIMActEnabled.setStatus('current')
jnxIfOtnODUkTxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkTxTTI.setStatus('current')
jnxIfOtnODUkRxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnODUkRxTTI.setStatus('current')
jnxIfOtnODUkExpectedRxSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkExpectedRxSapi.setStatus('current')
jnxIfOtnODUkExpectedRxDapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkExpectedRxDapi.setStatus('current')
jnxIfOtnODUkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 15), Bits().clone(namedValues=NamedValues(("ais", 0), ("bdi", 1), ("iae", 2), ("ttim", 3), ("sf", 4), ("sd", 5), ("biae", 6), ("tsf", 7), ("ssf", 8), ("csf", 9), ("oci", 10), ("lck", 11), ("ltc", 12), ("ptm", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnODUkStatus.setStatus('current')
jnxIfOtnODUkRxPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnODUkRxPayloadType.setStatus('current')
jnxIfOtnTcmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4), )
if mibBuilder.loadTexts: jnxIfOtnTcmCfgTable.setStatus('current')
jnxIfOtnTcmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1), ).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnTcmCfgContainerIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnTcmCfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnTcmCfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnTcmCfgL3Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnTcmCfgLevel"))
if mibBuilder.loadTexts: jnxIfOtnTcmCfgEntry.setStatus('current')
jnxIfOtnTcmCfgContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnTcmCfgContainerIndex.setStatus('current')
jnxIfOtnTcmCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnTcmCfgL1Index.setStatus('current')
jnxIfOtnTcmCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnTcmCfgL2Index.setStatus('current')
jnxIfOtnTcmCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnTcmCfgL3Index.setStatus('current')
jnxIfOtnTcmCfgLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: jnxIfOtnTcmCfgLevel.setStatus('current')
jnxIfOtnTCMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnTCMEnable.setStatus('current')
jnxIfOtnTcmTxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnTcmTxTTI.setStatus('current')
jnxIfOtnTcmRxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnTcmRxTTI.setStatus('current')
jnxIfOtnTcmExpectedRxSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnTcmExpectedRxSapi.setStatus('current')
jnxIfOtnTcmExpectedRxDapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnTcmExpectedRxDapi.setStatus('current')
jnxIfOtnTcmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 4, 1, 11), Bits().clone(namedValues=NamedValues(("ais", 0), ("bdi", 1), ("iae", 2), ("ttim", 3), ("biae", 6), ("tsf", 7), ("ssf", 8), ("ltc", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnTcmStatus.setStatus('current')
jnxIfOtnODUkTcmTestTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5), )
if mibBuilder.loadTexts: jnxIfOtnODUkTcmTestTable.setStatus('current')
jnxIfOtnODUkTcmTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkTcmTestLayer"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkTcmTestTCMLevel"))
if mibBuilder.loadTexts: jnxIfOtnODUkTcmTestEntry.setStatus('current')
jnxIfOtnODUkTcmTestLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 1), JnxIfOtnLayer())
if mibBuilder.loadTexts: jnxIfOtnODUkTcmTestLayer.setStatus('current')
jnxIfOtnODUkTcmTestTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: jnxIfOtnODUkTcmTestTCMLevel.setStatus('current')
jnxIfOtnODUkTcmInsertAis = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkTcmInsertAis.setStatus('current')
jnxIfOtnODUkTcmInsertLck = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkTcmInsertLck.setStatus('current')
jnxIfOtnODUkTcmInsertOci = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkTcmInsertOci.setStatus('current')
jnxIfOtnODUkPayloadPRBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnODUkPayloadPRBS.setStatus('current')
jnxIfOtnODUkPayloadPRBSResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 5, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnODUkPayloadPRBSResult.setStatus('current')
jnxIfOtnODUkTcmDMTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6), )
if mibBuilder.loadTexts: jnxIfOtnODUkTcmDMTable.setStatus('current')
jnxIfOtnODUkTcmDMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkTcmDMLayer"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnODUkTcmDMLevel"))
if mibBuilder.loadTexts: jnxIfOtnODUkTcmDMEntry.setStatus('current')
jnxIfOtnODUkTcmDMLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1, 1), JnxIfOtnLayer())
if mibBuilder.loadTexts: jnxIfOtnODUkTcmDMLayer.setStatus('current')
jnxIfOtnODUkTcmDMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: jnxIfOtnODUkTcmDMLevel.setStatus('current')
jnxIfOtnDMConnectionMonitoringEndpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnDMConnectionMonitoringEndpoint.setStatus('current')
jnxIfOtnDMBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnDMBypass.setStatus('current')
jnxIfOtnDMPersistFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnDMPersistFrames.setStatus('current')
jnxIfOtnDMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 6, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnDMEnable.setStatus('current')
jnxIfOtnNotificationTrigDefaultHoldtimeUp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigDefaultHoldtimeUp.setStatus('current')
jnxIfOtnNotificationTrigDefaultHoldtimeDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigDefaultHoldtimeDown.setStatus('current')
jnxIfOtnNotificationTrigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9), )
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigTable.setStatus('current')
jnxIfOtnNotificationTrigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1), ).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigContainerIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigL3Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigLayer"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigTCMLevel"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnNotificationTrigAlmId"))
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigEntry.setStatus('current')
jnxIfOtnNotificationTrigContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigContainerIndex.setStatus('current')
jnxIfOtnNotificationTrigL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigL1Index.setStatus('current')
jnxIfOtnNotificationTrigL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigL2Index.setStatus('current')
jnxIfOtnNotificationTrigL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigL3Index.setStatus('current')
jnxIfOtnNotificationTrigLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 5), JnxIfOtnLayer())
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigLayer.setStatus('current')
jnxIfOtnNotificationTrigTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigTCMLevel.setStatus('current')
jnxIfOtnNotificationTrigAlmId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigAlmId.setStatus('current')
jnxIfOtnNotificationTrigSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 8), JnxIfOtnSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigSeverity.setStatus('current')
jnxIfOtnNotificationTrigIgnore = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigIgnore.setStatus('current')
jnxIfOtnNotificationTrigHoldtimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigHoldtimeUp.setStatus('current')
jnxIfOtnNotificationTrigHoldtimeDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnNotificationTrigHoldtimeDown.setStatus('current')
jnxIfOtnTrigServiceStateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 9, 1, 12), JnxIfOtnServiceStateAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnTrigServiceStateAction.setStatus('current')
jnxOtnClearAllPMs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOtnClearAllPMs.setStatus('current')
jnxOtnClearInterfacePMs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 11), TruthValue()).setMaxAccess("readwrite").setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnClearInterfacePMs.setStatus('current')
jnxOtnClearInterfaceCurrentPM = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 12), TruthValue()).setMaxAccess("readwrite").setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnClearInterfaceCurrentPM.setStatus('current')
jnxOtnClearIfPMsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 13), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnClearIfPMsTable.setStatus('current')
jnxOtnClearIfPMsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnClearIfPMsEntry.setStatus('current')
jnxOtnClearCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 13, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOtnClearCurrent.setStatus('current')
jnxOtnClearInterfaceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 13, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOtnClearInterfaceInterval.setStatus('current')
jnxOtnClearInterfaceDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 13, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOtnClearInterfaceDay.setStatus('current')
jnxOtnClearInterfaceAll = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 1, 13, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxOtnClearInterfaceAll.setStatus('current')
jnxIfOtnOCh2CfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1), )
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgTable.setStatus('obsolete')
jnxIfOtnOCh2CfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1), ).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2CfgContainerIndex"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2CfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2CfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2CfgL3Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2CfgL4Index"))
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgEntry.setStatus('obsolete')
jnxIfOtnOCh2CfgContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgContainerIndex.setStatus('obsolete')
jnxIfOtnOCh2CfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgL1Index.setStatus('obsolete')
jnxIfOtnOCh2CfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgL2Index.setStatus('obsolete')
jnxIfOtnOCh2CfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgL3Index.setStatus('obsolete')
jnxIfOtnOCh2CfgL4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2CfgL4Index.setStatus('obsolete')
jnxIfOtnOCh2LocalLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2LocalLoopback.setStatus('obsolete')
jnxIfOtnOCh2LineLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2LineLoopback.setStatus('obsolete')
jnxIfOtnOCh2PayloadLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2PayloadLoopback.setStatus('obsolete')
jnxIfOtnOCh2AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 9), JnxIfAdminStates()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2AdminState.setStatus('obsolete')
jnxIfOtnOCh2OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 10), JnxIfOperStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2OperState.setStatus('obsolete')
jnxIfOtnOCh2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2Index.setStatus('obsolete')
jnxIfOtnOCh2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 12), Bits().clone(namedValues=NamedValues(("los", 0), ("lof", 1), ("lom", 2), ("wavelengthlockerr", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2Status.setStatus('current')
jnxIfOtnOCh2PortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2PortMode.setStatus('obsolete')
jnxIfOtnOCh2OTUkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2), )
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgTable.setStatus('obsolete')
jnxIfOtnOCh2OTUkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1), ).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2OTUkCfgContIndx"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2OTUkCfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2OTUkCfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2OTUkCfgL3Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2OTUkCfgL4Index"))
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgEntry.setStatus('obsolete')
jnxIfOtnOCh2OTUkCfgContIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgContIndx.setStatus('obsolete')
jnxIfOtnOCh2OTUkCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgL1Index.setStatus('obsolete')
jnxIfOtnOCh2OTUkCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgL2Index.setStatus('obsolete')
jnxIfOtnOCh2OTUkCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgL3Index.setStatus('obsolete')
jnxIfOtnOCh2OTUkCfgL4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgL4Index.setStatus('obsolete')
jnxIfOtnOCh2OTUkCfgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 6), JnxIfOtnRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgRate.setStatus('obsolete')
jnxIfOtnOCh2OTUkCfgFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 7), JnxIfOtnFecType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkCfgFecMode.setStatus('obsolete')
jnxIfOtnOCh2OTUkEnAutoFrrByteIns = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkEnAutoFrrByteIns.setStatus('obsolete')
jnxIfOtnOCh2OTUkEnBERFrrSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkEnBERFrrSupport.setStatus('obsolete')
jnxIfOtnOCh2OTUkPreFecBERThMant = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkPreFecBERThMant.setStatus('obsolete')
jnxIfOtnOCh2OTUkPreFecBERThExpo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkPreFecBERThExpo.setStatus('obsolete')
jnxIfOtnOCh2OTUkPreFecBERThTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 12), Integer32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkPreFecBERThTime.setStatus('obsolete')
jnxIfOtnOCh2OTUkTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkTIMActEnabled.setStatus('obsolete')
jnxIfOtnOCh2OTUkTxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkTxTTI.setStatus('obsolete')
jnxIfOtnOCh2OTUkRxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkRxTTI.setStatus('obsolete')
jnxIfOtnOCh2OTUkExpectedRxSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkExpectedRxSapi.setStatus('obsolete')
jnxIfOtnOCh2OTUkExpectedRxDapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkExpectedRxDapi.setStatus('obsolete')
jnxIfOtnOCh2OTUkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 18), Bits().clone(namedValues=NamedValues(("ais", 0), ("bdi", 1), ("iae", 2), ("ttim", 3), ("sf", 4), ("sd", 5), ("biae", 6), ("tsf", 7), ("ssf", 8), ("fecexcessive", 9), ("fecdegrade", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkStatus.setStatus('obsolete')
jnxIfOtnOCh2OTUkPreFecBERThClrMn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkPreFecBERThClrMn.setStatus('obsolete')
jnxIfOtnOCh2OTUkPreFecBERThClrEx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2OTUkPreFecBERThClrEx.setStatus('obsolete')
jnxIfOtnOCh2ODUkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3), )
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgTable.setStatus('obsolete')
jnxIfOtnOCh2ODUkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1), ).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2ODUkCfgContIndx"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2ODUkCfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2ODUkCfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2ODUkCfgL3Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2ODUkCfgL4Index"))
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgEntry.setStatus('obsolete')
jnxIfOtnOCh2ODUkCfgContIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgContIndx.setStatus('obsolete')
jnxIfOtnOCh2ODUkCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgL1Index.setStatus('obsolete')
jnxIfOtnOCh2ODUkCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgL2Index.setStatus('obsolete')
jnxIfOtnOCh2ODUkCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgL3Index.setStatus('obsolete')
jnxIfOtnOCh2ODUkCfgL4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkCfgL4Index.setStatus('obsolete')
jnxIfOtnOCh2ODUkAPSPCC0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkAPSPCC0.setStatus('obsolete')
jnxIfOtnOCh2ODUkAPSPCC1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkAPSPCC1.setStatus('obsolete')
jnxIfOtnOCh2ODUkAPSPCC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkAPSPCC2.setStatus('obsolete')
jnxIfOtnOCh2ODUkAPSPCC3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkAPSPCC3.setStatus('obsolete')
jnxIfOtnOCh2ODUkPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkPayloadType.setStatus('obsolete')
jnxIfOtnOCh2ODUkTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkTIMActEnabled.setStatus('obsolete')
jnxIfOtnOCh2ODUkTxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkTxTTI.setStatus('obsolete')
jnxIfOtnOCh2ODUkRxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkRxTTI.setStatus('obsolete')
jnxIfOtnOCh2ODUkExpectedRxSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkExpectedRxSapi.setStatus('obsolete')
jnxIfOtnOCh2ODUkExpectedRxDapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkExpectedRxDapi.setStatus('obsolete')
jnxIfOtnOCh2ODUkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 16), Bits().clone(namedValues=NamedValues(("ais", 0), ("bdi", 1), ("iae", 2), ("ttim", 3), ("sf", 4), ("sd", 5), ("biae", 6), ("tsf", 7), ("ssf", 8), ("csf", 9), ("oci", 10), ("lck", 11), ("ltc", 12), ("ptm", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkStatus.setStatus('current')
jnxIfOtnOCh2ODUkRxPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2ODUkRxPayloadType.setStatus('obsolete')
jnxIfOtnOCh2TcmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4), )
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgTable.setStatus('obsolete')
jnxIfOtnOCh2TcmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1), ).setIndexNames((0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2TcmCfgContIndx"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2TcmCfgL1Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2TcmCfgL2Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2TcmCfgL3Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2TcmCfgL4Index"), (0, "JUNIPER-IFOTN-MIB", "jnxIfOtnOCh2TcmCfgLevel"))
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgEntry.setStatus('obsolete')
jnxIfOtnOCh2TcmCfgContIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgContIndx.setStatus('obsolete')
jnxIfOtnOCh2TcmCfgL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgL1Index.setStatus('obsolete')
jnxIfOtnOCh2TcmCfgL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgL2Index.setStatus('obsolete')
jnxIfOtnOCh2TcmCfgL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgL3Index.setStatus('obsolete')
jnxIfOtnOCh2TcmCfgL4Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgL4Index.setStatus('obsolete')
jnxIfOtnOCh2TcmCfgLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmCfgLevel.setStatus('obsolete')
jnxIfOtnOCh2TCMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2TCMEnable.setStatus('obsolete')
jnxIfOtnOCh2TcmTxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmTxTTI.setStatus('obsolete')
jnxIfOtnOCh2TcmRxTTI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmRxTTI.setStatus('obsolete')
jnxIfOtnOCh2TcmExpectedRxSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmExpectedRxSapi.setStatus('obsolete')
jnxIfOtnOCh2TcmExpectedRxDapi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmExpectedRxDapi.setStatus('obsolete')
jnxIfOtnOCh2TcmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 70, 1, 2, 4, 1, 12), Bits().clone(namedValues=NamedValues(("ais", 0), ("bdi", 1), ("iae", 2), ("ttim", 3), ("biae", 6), ("tsf", 7), ("ssf", 8), ("ltc", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIfOtnOCh2TcmStatus.setStatus('obsolete')
jnxIfOtnNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 21, 0))
jnxIfOtnNotificationAdminStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 21, 0, 1)).setObjects(("IF-MIB", "ifDescr"), ("JUNIPER-IFOTN-MIB", "jnxIfOtnAdminState"))
if mibBuilder.loadTexts: jnxIfOtnNotificationAdminStatus.setStatus('current')
jnxIfOtnNotificationOperStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 21, 0, 2)).setObjects(("IF-MIB", "ifDescr"), ("JUNIPER-IFOTN-MIB", "jnxIfOtnOperState"))
if mibBuilder.loadTexts: jnxIfOtnNotificationOperStatus.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-IFOTN-MIB", jnxIfOtnOCh2TcmCfgLevel=jnxIfOtnOCh2TcmCfgLevel, jnxIfOtnNotificationTrigAlmId=jnxIfOtnNotificationTrigAlmId, jnxIfOtnTcmCfgL2Index=jnxIfOtnTcmCfgL2Index, jnxIfOtnOCh2CfgL3Index=jnxIfOtnOCh2CfgL3Index, jnxOtnClearAllPMs=jnxOtnClearAllPMs, jnxIfOtnODUkCfgL3Index=jnxIfOtnODUkCfgL3Index, jnxIfOtnTcmCfgL3Index=jnxIfOtnTcmCfgL3Index, jnxOtnClearInterfaceDay=jnxOtnClearInterfaceDay, JnxIfOtnSeverity=JnxIfOtnSeverity, jnxIfOtnOChPortMode=jnxIfOtnOChPortMode, jnxOtnClearInterfacePMs=jnxOtnClearInterfacePMs, jnxIfOtnIndex=jnxIfOtnIndex, jnxIfOtnOCh2LocalLoopback=jnxIfOtnOCh2LocalLoopback, jnxIfOtnODUkTIMActEnabled=jnxIfOtnODUkTIMActEnabled, jnxIfOtnOCh2ODUkStatus=jnxIfOtnOCh2ODUkStatus, jnxIfOtnNotificationTrigDefaultHoldtimeDown=jnxIfOtnNotificationTrigDefaultHoldtimeDown, jnxIfOtnLineLoopback=jnxIfOtnLineLoopback, jnxIfOtnOCh2TCMEnable=jnxIfOtnOCh2TCMEnable, jnxIfOtnTcmExpectedRxSapi=jnxIfOtnTcmExpectedRxSapi, jnxIfOtnOCh2OTUkTxTTI=jnxIfOtnOCh2OTUkTxTTI, jnxIfOtnMib=jnxIfOtnMib, jnxIfOtnOCh2ODUkCfgContIndx=jnxIfOtnOCh2ODUkCfgContIndx, jnxIfOtnNotificationTrigHoldtimeUp=jnxIfOtnNotificationTrigHoldtimeUp, jnxIfOtnODUkCfgEntry=jnxIfOtnODUkCfgEntry, jnxIfOtnNotificationTrigDefaultHoldtimeUp=jnxIfOtnNotificationTrigDefaultHoldtimeUp, jnxIfOtnOTUkPreFecBERThresholdTime=jnxIfOtnOTUkPreFecBERThresholdTime, jnxIfOtnTcmStatus=jnxIfOtnTcmStatus, jnxIfOtnOCh2OTUkStatus=jnxIfOtnOCh2OTUkStatus, jnxIfOtnOTUkPreFecBERThresholdClearMantissa=jnxIfOtnOTUkPreFecBERThresholdClearMantissa, JnxIfOtnDirection=JnxIfOtnDirection, jnxIfOtnODUkTcmTestLayer=jnxIfOtnODUkTcmTestLayer, jnxIfOtnOTUkStatus=jnxIfOtnOTUkStatus, jnxIfOtnOCh2TcmExpectedRxSapi=jnxIfOtnOCh2TcmExpectedRxSapi, jnxIfOtnOperState=jnxIfOtnOperState, jnxIfOtnOCh2OTUkPreFecBERThExpo=jnxIfOtnOCh2OTUkPreFecBERThExpo, jnxIfOtnTcmTxTTI=jnxIfOtnTcmTxTTI, jnxIfOtnOCh2OTUkCfgL2Index=jnxIfOtnOCh2OTUkCfgL2Index, jnxIfOtnNotificationTrigTCMLevel=jnxIfOtnNotificationTrigTCMLevel, jnxIfOtnODUkCfgTable=jnxIfOtnODUkCfgTable, jnxIfOtnOCh2CfgEntry=jnxIfOtnOCh2CfgEntry, jnxIfOtnOCh2ODUkCfgTable=jnxIfOtnOCh2ODUkCfgTable, jnxIfOtnOTUkCfgL2Index=jnxIfOtnOTUkCfgL2Index, jnxIfOtnAdminState=jnxIfOtnAdminState, jnxIfOtn=jnxIfOtn, jnxOtnClearCurrent=jnxOtnClearCurrent, jnxIfOtnODUkExpectedRxDapi=jnxIfOtnODUkExpectedRxDapi, jnxIfOtnODUkTcmDMTable=jnxIfOtnODUkTcmDMTable, jnxIfOtnOCh2TcmStatus=jnxIfOtnOCh2TcmStatus, jnxIfOtnOCh2PortMode=jnxIfOtnOCh2PortMode, jnxIfOtnODUkRxTTI=jnxIfOtnODUkRxTTI, jnxIfOtnOCh2ODUkExpectedRxDapi=jnxIfOtnOCh2ODUkExpectedRxDapi, jnxIfOtnOCh2ODUkCfgL1Index=jnxIfOtnOCh2ODUkCfgL1Index, jnxIfOtnOChCfgL3Index=jnxIfOtnOChCfgL3Index, jnxIfOtnOCh2ODUkAPSPCC0=jnxIfOtnOCh2ODUkAPSPCC0, jnxIfOtnOCh2ODUkExpectedRxSapi=jnxIfOtnOCh2ODUkExpectedRxSapi, jnxIfOtnOChCfgL2Index=jnxIfOtnOChCfgL2Index, jnxIfOtnODUkStatus=jnxIfOtnODUkStatus, jnxIfOtnOTUkCfgContainerIndex=jnxIfOtnOTUkCfgContainerIndex, jnxIfOtnODUkTxTTI=jnxIfOtnODUkTxTTI, jnxIfOtnNotificationTrigEntry=jnxIfOtnNotificationTrigEntry, jnxIfOtnOCh2OTUkCfgL1Index=jnxIfOtnOCh2OTUkCfgL1Index, jnxOtnClearIfPMsEntry=jnxOtnClearIfPMsEntry, jnxIfOtnOCh2OTUkCfgFecMode=jnxIfOtnOCh2OTUkCfgFecMode, jnxIfOtnOTUkExpectedRxDapi=jnxIfOtnOTUkExpectedRxDapi, jnxIfOtnOCh2OTUkExpectedRxDapi=jnxIfOtnOCh2OTUkExpectedRxDapi, jnxIfOtnODUkAPSPCC1=jnxIfOtnODUkAPSPCC1, jnxIfOtnOCh2TcmCfgContIndx=jnxIfOtnOCh2TcmCfgContIndx, jnxIfOtnOCh2AdminState=jnxIfOtnOCh2AdminState, jnxIfOtnOCh2ODUkAPSPCC1=jnxIfOtnOCh2ODUkAPSPCC1, jnxIfOtnOCh2CfgTable=jnxIfOtnOCh2CfgTable, jnxOtnClearInterfaceInterval=jnxOtnClearInterfaceInterval, JnxIfAdminStates=JnxIfAdminStates, jnxIfOtnOCh2OTUkPreFecBERThClrEx=jnxIfOtnOCh2OTUkPreFecBERThClrEx, JnxIfOtnRate=JnxIfOtnRate, jnxIfOtnOCh2TcmTxTTI=jnxIfOtnOCh2TcmTxTTI, jnxIfOtnODUkTcmDMEntry=jnxIfOtnODUkTcmDMEntry, jnxIfOtnOCh2OTUkCfgL3Index=jnxIfOtnOCh2OTUkCfgL3Index, jnxIfOtnODUkTcmInsertLck=jnxIfOtnODUkTcmInsertLck, jnxIfOtnOCh2CfgL4Index=jnxIfOtnOCh2CfgL4Index, jnxIfOtnOChCfgContainerIndex=jnxIfOtnOChCfgContainerIndex, jnxIfOtnOChCfgTable=jnxIfOtnOChCfgTable, jnxIfOtnOCh2TcmRxTTI=jnxIfOtnOCh2TcmRxTTI, jnxIfOtnNotificationTrigHoldtimeDown=jnxIfOtnNotificationTrigHoldtimeDown, jnxIfOtnOCh2OTUkCfgRate=jnxIfOtnOCh2OTUkCfgRate, jnxIfOtnODUkTcmTestTable=jnxIfOtnODUkTcmTestTable, jnxIfOtnOCh2OTUkEnAutoFrrByteIns=jnxIfOtnOCh2OTUkEnAutoFrrByteIns, jnxIfOtnOCh2ODUkRxTTI=jnxIfOtnOCh2ODUkRxTTI, PYSNMP_MODULE_ID=jnxIfOtnMib, jnxIfOtnTcmRxTTI=jnxIfOtnTcmRxTTI, jnxIfOtnNotificationTrigTable=jnxIfOtnNotificationTrigTable, jnxIfOtnOChCfgEntry=jnxIfOtnOChCfgEntry, jnxIfOtnOCh2OTUkExpectedRxSapi=jnxIfOtnOCh2OTUkExpectedRxSapi, jnxIfOtnOCh2TcmCfgL1Index=jnxIfOtnOCh2TcmCfgL1Index, jnxIfOtnPayloadLoopback=jnxIfOtnPayloadLoopback, jnxIfOtnTCMEnable=jnxIfOtnTCMEnable, jnxIfOtnTcmCfgContainerIndex=jnxIfOtnTcmCfgContainerIndex, jnxIfOtnOCh2ODUkTxTTI=jnxIfOtnOCh2ODUkTxTTI, jnxIfOtnOCh2TcmCfgL4Index=jnxIfOtnOCh2TcmCfgL4Index, jnxOtnClearInterfaceAll=jnxOtnClearInterfaceAll, jnxIfOtnOCh2ODUkCfgEntry=jnxIfOtnOCh2ODUkCfgEntry, jnxIfOtnNotificationTrigContainerIndex=jnxIfOtnNotificationTrigContainerIndex, jnxIfOtnODUkTcmTestEntry=jnxIfOtnODUkTcmTestEntry, jnxIfOtnODUkTcmDMLayer=jnxIfOtnODUkTcmDMLayer, jnxIfOtnOTUkEnableBERFrrSupport=jnxIfOtnOTUkEnableBERFrrSupport, jnxIfOtnTrigServiceStateAction=jnxIfOtnTrigServiceStateAction, jnxIfOtnOTUkRxTTI=jnxIfOtnOTUkRxTTI, jnxIfOtnOCh2TcmCfgL2Index=jnxIfOtnOCh2TcmCfgL2Index, jnxIfOtnOTUkCfgRate=jnxIfOtnOTUkCfgRate, jnxIfOtnOTUkPreFecBERThresholdExponent=jnxIfOtnOTUkPreFecBERThresholdExponent, jnxIfOtnODUkTcmInsertOci=jnxIfOtnODUkTcmInsertOci, jnxIfOtnOTUkCfgFecMode=jnxIfOtnOTUkCfgFecMode, jnxIfOtnOCh2CfgL1Index=jnxIfOtnOCh2CfgL1Index, jnxIfOtnODUkAPSPCC2=jnxIfOtnODUkAPSPCC2, jnxIfOtnOTUkEnableAutoFrrByteInsert=jnxIfOtnOTUkEnableAutoFrrByteInsert, jnxIfOtnOCh2PayloadLoopback=jnxIfOtnOCh2PayloadLoopback, jnxIfOtnNotificationTrigL2Index=jnxIfOtnNotificationTrigL2Index, jnxIfOtnOCh2ODUkCfgL4Index=jnxIfOtnOCh2ODUkCfgL4Index, jnxIfOtnOCh2ODUkAPSPCC2=jnxIfOtnOCh2ODUkAPSPCC2, jnxIfOtnDMConnectionMonitoringEndpoint=jnxIfOtnDMConnectionMonitoringEndpoint, jnxIfOtnNotificationTrigL3Index=jnxIfOtnNotificationTrigL3Index, JnxIfOtnServiceStateAction=JnxIfOtnServiceStateAction, jnxIfOtnOCh2CfgContainerIndex=jnxIfOtnOCh2CfgContainerIndex, jnxIfOtnNotificationOperStatus=jnxIfOtnNotificationOperStatus, jnxIfOtnODUkPayloadPRBSResult=jnxIfOtnODUkPayloadPRBSResult, jnxIfOtnOCh2OTUkPreFecBERThMant=jnxIfOtnOCh2OTUkPreFecBERThMant, jnxOtnClearInterfaceCurrentPM=jnxOtnClearInterfaceCurrentPM, jnxIfOtnOCh2ODUkPayloadType=jnxIfOtnOCh2ODUkPayloadType, jnxIfOtnTcmCfgLevel=jnxIfOtnTcmCfgLevel, jnxIfOtnODUkTcmDMLevel=jnxIfOtnODUkTcmDMLevel, jnxIfOtnOCh2Index=jnxIfOtnOCh2Index, jnxIfOtnOCh2OTUkPreFecBERThClrMn=jnxIfOtnOCh2OTUkPreFecBERThClrMn, jnxIfOtnLocalLoopback=jnxIfOtnLocalLoopback, jnxIfOtnODUkExpectedRxSapi=jnxIfOtnODUkExpectedRxSapi, jnxIfOtnTcmExpectedRxDapi=jnxIfOtnTcmExpectedRxDapi, jnxIfOtnODUkTcmInsertAis=jnxIfOtnODUkTcmInsertAis, jnxIfOtnNotificationTrigSeverity=jnxIfOtnNotificationTrigSeverity, jnxIfOtnOCh2OperState=jnxIfOtnOCh2OperState, jnxIfOtnODUkCfgL2Index=jnxIfOtnODUkCfgL2Index, jnxIfOtnNotificationTrigLayer=jnxIfOtnNotificationTrigLayer, jnxIfOtnNotificationTrigIgnore=jnxIfOtnNotificationTrigIgnore, jnxIfOtnOCh2OTUkCfgContIndx=jnxIfOtnOCh2OTUkCfgContIndx, jnxIfOtnOTUkCfgEntry=jnxIfOtnOTUkCfgEntry, jnxIfOtnOTUkCfgL3Index=jnxIfOtnOTUkCfgL3Index, jnxIfOtnOChStatus=jnxIfOtnOChStatus, jnxIfOtnDMEnable=jnxIfOtnDMEnable, jnxIfOtnOCh2ODUkCfgL3Index=jnxIfOtnOCh2ODUkCfgL3Index, jnxIfOtnODUkAPSPCC0=jnxIfOtnODUkAPSPCC0, jnxIfOtnOCh2=jnxIfOtnOCh2, jnxIfOtnOCh2OTUkPreFecBERThTime=jnxIfOtnOCh2OTUkPreFecBERThTime, jnxIfOtnOChCfgL1Index=jnxIfOtnOChCfgL1Index, jnxIfOtnODUkCfgL1Index=jnxIfOtnODUkCfgL1Index, jnxIfOtnOCh2OTUkRxTTI=jnxIfOtnOCh2OTUkRxTTI, jnxIfOtnOCh2ODUkAPSPCC3=jnxIfOtnOCh2ODUkAPSPCC3, JnxIfOperStates=JnxIfOperStates, jnxIfOtnDMPersistFrames=jnxIfOtnDMPersistFrames, JnxIfOtnFecType=JnxIfOtnFecType, JnxIfOtnType=JnxIfOtnType, jnxIfOtnOTUkPreFecBERThresholdClearExponent=jnxIfOtnOTUkPreFecBERThresholdClearExponent, jnxIfOtnOCh2OTUkCfgTable=jnxIfOtnOCh2OTUkCfgTable, jnxIfOtnOCh2TcmCfgTable=jnxIfOtnOCh2TcmCfgTable, jnxIfOtnOCh2CfgL2Index=jnxIfOtnOCh2CfgL2Index, jnxIfOtnOCh2ODUkTIMActEnabled=jnxIfOtnOCh2ODUkTIMActEnabled, jnxIfOtnOCh2TcmCfgL3Index=jnxIfOtnOCh2TcmCfgL3Index, jnxIfOtnODUkPayloadPRBS=jnxIfOtnODUkPayloadPRBS, jnxIfOtnODUkTcmTestTCMLevel=jnxIfOtnODUkTcmTestTCMLevel, jnxIfOtnOTUkPreFecBERThresholdMantissa=jnxIfOtnOTUkPreFecBERThresholdMantissa, jnxIfOtnOCh2TcmExpectedRxDapi=jnxIfOtnOCh2TcmExpectedRxDapi, JnxIfOtnLayer=JnxIfOtnLayer, jnxIfOtnOCh2LineLoopback=jnxIfOtnOCh2LineLoopback, jnxIfOtnOCh2OTUkEnBERFrrSupport=jnxIfOtnOCh2OTUkEnBERFrrSupport, jnxIfOtnOCh2ODUkCfgL2Index=jnxIfOtnOCh2ODUkCfgL2Index, jnxIfOtnOCh2OTUkCfgL4Index=jnxIfOtnOCh2OTUkCfgL4Index, jnxIfOtnTcmCfgL1Index=jnxIfOtnTcmCfgL1Index, jnxIfOtnOCh2OTUkTIMActEnabled=jnxIfOtnOCh2OTUkTIMActEnabled, jnxIfOtnODUkCfgContainerIndex=jnxIfOtnODUkCfgContainerIndex, jnxIfOtnODUkRxPayloadType=jnxIfOtnODUkRxPayloadType, jnxIfOtnOTUkExpectedRxSapi=jnxIfOtnOTUkExpectedRxSapi, jnxIfOtnTcmCfgEntry=jnxIfOtnTcmCfgEntry, jnxIfOtnOCh2OTUkCfgEntry=jnxIfOtnOCh2OTUkCfgEntry, jnxIfOtnODUkPayloadType=jnxIfOtnODUkPayloadType, jnxIfOtnNotificationTrigL1Index=jnxIfOtnNotificationTrigL1Index, jnxOtnClearIfPMsTable=jnxOtnClearIfPMsTable, jnxIfOtnOTUkCfgL1Index=jnxIfOtnOTUkCfgL1Index, jnxIfOtnNotificationAdminStatus=jnxIfOtnNotificationAdminStatus, jnxIfOtnOTUkTIMActEnabled=jnxIfOtnOTUkTIMActEnabled, jnxIfOtnOCh2TcmCfgEntry=jnxIfOtnOCh2TcmCfgEntry, jnxIfOtnOCh2ODUkRxPayloadType=jnxIfOtnOCh2ODUkRxPayloadType, jnxIfOtnOCh2Status=jnxIfOtnOCh2Status, jnxIfOtnNotificationPrefix=jnxIfOtnNotificationPrefix, jnxIfOtnODUkAPSPCC3=jnxIfOtnODUkAPSPCC3, jnxIfOtnTcmCfgTable=jnxIfOtnTcmCfgTable, jnxIfOtnDMBypass=jnxIfOtnDMBypass, jnxIfOtnOTUkTxTTI=jnxIfOtnOTUkTxTTI, jnxIfOtnOTUkCfgTable=jnxIfOtnOTUkCfgTable)
