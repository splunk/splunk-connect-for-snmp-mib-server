#
# PySNMP MIB module CXCFG-BR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXCFG-BR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:16:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
cxCfgSrBase, Alias, cxCfgDot1dBase = mibBuilder.importSymbols("CXProduct-SMI", "cxCfgSrBase", "Alias", "cxCfgDot1dBase")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, ModuleIdentity, MibIdentifier, TimeTicks, IpAddress, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32, ObjectIdentity, Counter64, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "MibIdentifier", "TimeTicks", "IpAddress", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32", "ObjectIdentity", "Counter64", "Unsigned32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cxCfgDot1dBaseNumOfDBFilterEntries = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 14, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgDot1dBaseNumOfDBFilterEntries.setStatus('mandatory')
cxCfgDot1dBaseNumOfStaticDBFilterEntries = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 14, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgDot1dBaseNumOfStaticDBFilterEntries.setStatus('mandatory')
cxCfgDot1dBasePortTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 14, 3), )
if mibBuilder.loadTexts: cxCfgDot1dBasePortTable.setStatus('mandatory')
cxCfgDot1dBasePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 14, 3, 1), ).setIndexNames((0, "CXCFG-BR-MIB", "cxCfgDot1dBasePort"))
if mibBuilder.loadTexts: cxCfgDot1dBasePortEntry.setStatus('mandatory')
cxCfgDot1dBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCfgDot1dBasePort.setStatus('mandatory')
cxCfgDot1dBasePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 14, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCfgDot1dBasePortIfIndex.setStatus('mandatory')
cxCfgDot1dBasePortSubnetworkSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 14, 3, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgDot1dBasePortSubnetworkSapAlias.setStatus('mandatory')
cxCfgDot1dBasePortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgDot1dBasePortRowStatus.setStatus('mandatory')
cxCfgDot1dBasePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 14, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("onether", 3), ("ontoken", 4))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgDot1dBasePortState.setStatus('mandatory')
cxCfgDot1dBasePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2), ("priority-low", 3), ("priority-high", 4))).clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgDot1dBasePortPriority.setStatus('mandatory')
cxCfgSrBasePortTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 17, 1), )
if mibBuilder.loadTexts: cxCfgSrBasePortTable.setStatus('mandatory')
cxCfgSrBasePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 17, 1, 1), ).setIndexNames((0, "CXCFG-BR-MIB", "cxCfgSrBasePort"))
if mibBuilder.loadTexts: cxCfgSrBasePortEntry.setStatus('mandatory')
cxCfgSrBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCfgSrBasePort.setStatus('mandatory')
cxCfgSrBasePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 17, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCfgSrBasePortIfIndex.setStatus('mandatory')
cxCfgSrBasePortSubnetworkSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 17, 1, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgSrBasePortSubnetworkSapAlias.setStatus('mandatory')
cxCfgSrBasePortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgSrBasePortRowStatus.setStatus('mandatory')
cxCfgSrBasePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 17, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("ontoken", 3))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgSrBasePortState.setStatus('mandatory')
cxCfgSrBasePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2), ("priority-low", 3), ("priority-high", 4))).clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgSrBasePortPriority.setStatus('mandatory')
cxCfgDot1dBaseMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 14, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCfgDot1dBaseMibLevel.setStatus('mandatory')
mibBuilder.exportSymbols("CXCFG-BR-MIB", cxCfgDot1dBasePortState=cxCfgDot1dBasePortState, cxCfgDot1dBaseNumOfDBFilterEntries=cxCfgDot1dBaseNumOfDBFilterEntries, cxCfgDot1dBasePortIfIndex=cxCfgDot1dBasePortIfIndex, cxCfgSrBasePortRowStatus=cxCfgSrBasePortRowStatus, cxCfgDot1dBasePort=cxCfgDot1dBasePort, cxCfgSrBasePort=cxCfgSrBasePort, cxCfgDot1dBasePortPriority=cxCfgDot1dBasePortPriority, cxCfgSrBasePortSubnetworkSapAlias=cxCfgSrBasePortSubnetworkSapAlias, cxCfgSrBasePortIfIndex=cxCfgSrBasePortIfIndex, cxCfgDot1dBaseMibLevel=cxCfgDot1dBaseMibLevel, cxCfgSrBasePortState=cxCfgSrBasePortState, cxCfgDot1dBaseNumOfStaticDBFilterEntries=cxCfgDot1dBaseNumOfStaticDBFilterEntries, cxCfgSrBasePortEntry=cxCfgSrBasePortEntry, cxCfgSrBasePortPriority=cxCfgSrBasePortPriority, cxCfgSrBasePortTable=cxCfgSrBasePortTable, cxCfgDot1dBasePortRowStatus=cxCfgDot1dBasePortRowStatus, cxCfgDot1dBasePortSubnetworkSapAlias=cxCfgDot1dBasePortSubnetworkSapAlias, cxCfgDot1dBasePortTable=cxCfgDot1dBasePortTable, cxCfgDot1dBasePortEntry=cxCfgDot1dBasePortEntry)
