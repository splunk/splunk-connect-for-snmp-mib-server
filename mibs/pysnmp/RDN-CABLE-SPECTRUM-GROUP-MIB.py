#
# PySNMP MIB module RDN-CABLE-SPECTRUM-GROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RDN-CABLE-SPECTRUM-GROUP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:46:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
rdnCableSpectrumObjects, = mibBuilder.importSymbols("RDN-CABLE-SPECTRUM-MIB", "rdnCableSpectrumObjects")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, Bits, Counter32, Gauge32, ObjectIdentity, IpAddress, NotificationType, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "Bits", "Counter32", "Gauge32", "ObjectIdentity", "IpAddress", "NotificationType", "TimeTicks", "Counter64")
DateAndTime, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "RowStatus", "DisplayString", "TextualConvention")
rdnCableSpectrumGroup = ModuleIdentity((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2))
if mibBuilder.loadTexts: rdnCableSpectrumGroup.setLastUpdated('200205250000Z')
if mibBuilder.loadTexts: rdnCableSpectrumGroup.setOrganization('Motorola')
class SchedulingWeekDay(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ("everyday", 8))

class SpectrumHopSelections(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("frequency", 1), ("band", 2), ("power-default", 3), ("power-level", 4), ("modulation-profile", 5), ("channel-width", 6))

class SpecDataArray(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 400)

rdnSpectrumGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 1), )
if mibBuilder.loadTexts: rdnSpectrumGroupTable.setStatus('current')
rdnSpectrumGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 1, 1), ).setIndexNames((0, "RDN-CABLE-SPECTRUM-GROUP-MIB", "rdnSpectrumGroupName"))
if mibBuilder.loadTexts: rdnSpectrumGroupEntry.setStatus('current')
rdnSpectrumGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSpectrumGroupName.setStatus('current')
rdnSpectrumGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSpectrumGroupId.setStatus('current')
rdnSpectrumGroupHopPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 3600)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumGroupHopPeriod.setStatus('current')
rdnSpectrumGroupHopThresholdFlap = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumGroupHopThresholdFlap.setStatus('current')
rdnSpectrumGroupHopThresholdError = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumGroupHopThresholdError.setStatus('current')
rdnSpectrumGroupHopRollbackEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumGroupHopRollbackEnable.setStatus('current')
rdnSpectrumDataCollectResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(200000, 400000)).clone(200000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumDataCollectResolution.setStatus('current')
rdnSpectrumDataCollectInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumDataCollectInterval.setStatus('current')
rdnSpectrumGroupGuardBand = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumGroupGuardBand.setStatus('current')
rdnSpectrumGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumGroupRowStatus.setStatus('current')
rdnOfflineModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnOfflineModemCount.setStatus('current')
rdnOnlineModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnOnlineModemCount.setStatus('current')
rdnActiveModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnActiveModemCount.setStatus('current')
rdnRegisteredModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnRegisteredModemCount.setStatus('current')
rdnProvisionedModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnProvisionedModemCount.setStatus('current')
rdnUnregisteredModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnUnregisteredModemCount.setStatus('current')
rdnSpectrumBandSchedTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 2), )
if mibBuilder.loadTexts: rdnSpectrumBandSchedTable.setStatus('current')
rdnSpectrumBandSchedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 2, 1), ).setIndexNames((0, "RDN-CABLE-SPECTRUM-GROUP-MIB", "rdnSpectrumGroupId"), (0, "RDN-CABLE-SPECTRUM-GROUP-MIB", "rdnSpectrumBandSchedId"), (0, "RDN-CABLE-SPECTRUM-GROUP-MIB", "rdnSpectrumBandSchedAction"))
if mibBuilder.loadTexts: rdnSpectrumBandSchedEntry.setStatus('current')
rdnSpectrumBandSchedId = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: rdnSpectrumBandSchedId.setStatus('current')
rdnSpectrumBandSchedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSpectrumBandSchedAction.setStatus('current')
rdnSpectrumBandFreqLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5000000, 65000000)).clone(5000000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumBandFreqLow.setStatus('current')
rdnSpectrumBandFreqHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5000000, 65000000)).clone(42000000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumBandFreqHigh.setStatus('current')
rdnSpectrumBandSchedWeekDay = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 2, 1, 5), SchedulingWeekDay().clone('everyday')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumBandSchedWeekDay.setStatus('current')
rdnSpectrumBandSchedHour = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumBandSchedHour.setStatus('current')
rdnSpectrumBandSchedMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumBandSchedMinute.setStatus('current')
rdnSpectrumBandSchedSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumBandSchedSecond.setStatus('current')
rdnSpectrumBandSchedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumBandSchedRowStatus.setStatus('current')
rdnSpectrumHopTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 3), )
if mibBuilder.loadTexts: rdnSpectrumHopTable.setStatus('current')
rdnSpectrumHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 3, 1), ).setIndexNames((0, "RDN-CABLE-SPECTRUM-GROUP-MIB", "rdnSpectrumGroupId"), (0, "RDN-CABLE-SPECTRUM-GROUP-MIB", "rdnSpectrumHopId"))
if mibBuilder.loadTexts: rdnSpectrumHopEntry.setStatus('current')
rdnSpectrumHopId = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: rdnSpectrumHopId.setStatus('current')
rdnSpectrumHopSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 3, 1, 2), SpectrumHopSelections().clone('frequency')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumHopSelection.setStatus('current')
rdnSpectrumHopPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(128)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumHopPriority.setStatus('current')
rdnSpectrumHopFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5000000, 65000000)).clone(10000000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumHopFrequency.setStatus('current')
rdnSpectrumHopBandLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5000000, 65000000)).clone(8400000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumHopBandLow.setStatus('current')
rdnSpectrumHopBandHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5000000, 65000000)).clone(42000000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumHopBandHigh.setStatus('current')
rdnSpectrumHopChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(200000, 400000, 800000, 1600000, 3200000))).clone(namedValues=NamedValues(("channel-width1", 200000), ("channel-width2", 400000), ("channel-width3", 800000), ("channel-width4", 1600000), ("channel-width5", 3200000))).clone(3200000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumHopChannelWidth.setStatus('current')
rdnSpectrumHopPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-160, 260))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumHopPowerLevel.setStatus('current')
rdnSpectrumHopModulationProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumHopModulationProfile.setStatus('current')
rdnSpectrumHopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 3, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rdnSpectrumHopRowStatus.setStatus('current')
rdnSpectrumMemberChannelTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 4), )
if mibBuilder.loadTexts: rdnSpectrumMemberChannelTable.setStatus('current')
rdnSpectrumMemberChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rdnSpectrumMemberChannelEntry.setStatus('current')
rdnUsChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnUsChannelId.setStatus('current')
rdnMemChSpectrumGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnMemChSpectrumGroupId.setStatus('current')
rdnMemChSpectrumGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnMemChSpectrumGroupName.setStatus('current')
rdnSpectrumDataTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 5), )
if mibBuilder.loadTexts: rdnSpectrumDataTable.setStatus('current')
rdnSpectrumDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rdnSpectrumDataEntry.setStatus('current')
rdnSpectrumDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSpectrumDataIndex.setStatus('current')
rdnSpecDataUsChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSpecDataUsChannelId.setStatus('current')
rdnSpectrumDataStartFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSpectrumDataStartFrequency.setStatus('current')
rdnSpectrumDataResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSpectrumDataResolution.setStatus('current')
rdnSpectrumDataSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSpectrumDataSamples.setStatus('current')
rdnSpectrumDataLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 5, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSpectrumDataLastUpdate.setStatus('current')
rdnSpectrumDataArray = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 5, 1, 7), SpecDataArray().subtype(subtypeSpec=ValueSizeConstraint(2, 400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSpectrumDataArray.setStatus('current')
rdnSpectrumQualityTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 6), )
if mibBuilder.loadTexts: rdnSpectrumQualityTable.setStatus('current')
rdnSpectrumQualityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rdnSpectrumQualityEntry.setStatus('current')
rdnSpecQualityUsChId = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSpecQualityUsChId.setStatus('current')
rdnSpectrumQualityDataLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 6, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSpectrumQualityDataLastUpdate.setStatus('current')
rdnSpectrumDataInBandPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSpectrumDataInBandPower.setStatus('current')
rdnSpectrumTotCodeWord = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSpectrumTotCodeWord.setStatus('current')
rdnSpectrumErrorCodeWord = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSpectrumErrorCodeWord.setStatus('current')
rdnSpectrumMapTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 7), )
if mibBuilder.loadTexts: rdnSpectrumMapTable.setStatus('current')
rdnSpectrumMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 7, 1), ).setIndexNames((0, "RDN-CABLE-SPECTRUM-GROUP-MIB", "rdnSpectrumGroupId"), (0, "RDN-CABLE-SPECTRUM-GROUP-MIB", "rdnSpectrumMapIndex"))
if mibBuilder.loadTexts: rdnSpectrumMapEntry.setStatus('current')
rdnSpectrumMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: rdnSpectrumMapIndex.setStatus('current')
rdnSpectrumMapStartFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSpectrumMapStartFrequency.setStatus('current')
rdnSpectrumMapStopFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSpectrumMapStopFrequency.setStatus('current')
rdnSpectrumMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 6, 1, 2, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSpectrumMapStatus.setStatus('current')
mibBuilder.exportSymbols("RDN-CABLE-SPECTRUM-GROUP-MIB", rdnSpectrumTotCodeWord=rdnSpectrumTotCodeWord, rdnSpectrumBandSchedAction=rdnSpectrumBandSchedAction, rdnSpectrumBandSchedSecond=rdnSpectrumBandSchedSecond, rdnSpectrumHopPowerLevel=rdnSpectrumHopPowerLevel, rdnSpectrumQualityDataLastUpdate=rdnSpectrumQualityDataLastUpdate, rdnSpectrumGroupTable=rdnSpectrumGroupTable, rdnSpectrumDataStartFrequency=rdnSpectrumDataStartFrequency, rdnSpectrumMapStartFrequency=rdnSpectrumMapStartFrequency, rdnSpectrumGroupHopThresholdError=rdnSpectrumGroupHopThresholdError, rdnSpectrumGroupRowStatus=rdnSpectrumGroupRowStatus, rdnSpectrumDataResolution=rdnSpectrumDataResolution, rdnCableSpectrumGroup=rdnCableSpectrumGroup, rdnSpecQualityUsChId=rdnSpecQualityUsChId, rdnSpectrumGroupEntry=rdnSpectrumGroupEntry, rdnUsChannelId=rdnUsChannelId, rdnSpectrumHopModulationProfile=rdnSpectrumHopModulationProfile, rdnSpectrumBandSchedHour=rdnSpectrumBandSchedHour, rdnMemChSpectrumGroupId=rdnMemChSpectrumGroupId, rdnSpectrumHopEntry=rdnSpectrumHopEntry, rdnOnlineModemCount=rdnOnlineModemCount, rdnSpectrumHopId=rdnSpectrumHopId, rdnSpectrumHopRowStatus=rdnSpectrumHopRowStatus, rdnSpecDataUsChannelId=rdnSpecDataUsChannelId, rdnSpectrumHopBandHigh=rdnSpectrumHopBandHigh, rdnRegisteredModemCount=rdnRegisteredModemCount, rdnSpectrumBandSchedTable=rdnSpectrumBandSchedTable, rdnSpectrumMapStatus=rdnSpectrumMapStatus, rdnMemChSpectrumGroupName=rdnMemChSpectrumGroupName, rdnSpectrumBandFreqHigh=rdnSpectrumBandFreqHigh, rdnSpectrumDataSamples=rdnSpectrumDataSamples, rdnSpectrumDataInBandPower=rdnSpectrumDataInBandPower, rdnSpectrumHopBandLow=rdnSpectrumHopBandLow, rdnSpectrumBandSchedRowStatus=rdnSpectrumBandSchedRowStatus, rdnSpectrumMapIndex=rdnSpectrumMapIndex, rdnSpectrumBandSchedWeekDay=rdnSpectrumBandSchedWeekDay, rdnSpectrumHopSelection=rdnSpectrumHopSelection, rdnSpectrumGroupId=rdnSpectrumGroupId, rdnSpectrumHopChannelWidth=rdnSpectrumHopChannelWidth, rdnSpectrumDataIndex=rdnSpectrumDataIndex, rdnSpectrumGroupHopRollbackEnable=rdnSpectrumGroupHopRollbackEnable, SpecDataArray=SpecDataArray, rdnSpectrumHopPriority=rdnSpectrumHopPriority, rdnSpectrumHopTable=rdnSpectrumHopTable, rdnSpectrumHopFrequency=rdnSpectrumHopFrequency, PYSNMP_MODULE_ID=rdnCableSpectrumGroup, rdnSpectrumBandSchedEntry=rdnSpectrumBandSchedEntry, rdnSpectrumGroupHopThresholdFlap=rdnSpectrumGroupHopThresholdFlap, rdnSpectrumQualityTable=rdnSpectrumQualityTable, rdnSpectrumDataArray=rdnSpectrumDataArray, rdnSpectrumQualityEntry=rdnSpectrumQualityEntry, rdnSpectrumBandFreqLow=rdnSpectrumBandFreqLow, rdnSpectrumMapStopFrequency=rdnSpectrumMapStopFrequency, rdnOfflineModemCount=rdnOfflineModemCount, SpectrumHopSelections=SpectrumHopSelections, rdnSpectrumDataEntry=rdnSpectrumDataEntry, SchedulingWeekDay=SchedulingWeekDay, rdnSpectrumMapEntry=rdnSpectrumMapEntry, rdnSpectrumMemberChannelEntry=rdnSpectrumMemberChannelEntry, rdnSpectrumMapTable=rdnSpectrumMapTable, rdnProvisionedModemCount=rdnProvisionedModemCount, rdnSpectrumGroupName=rdnSpectrumGroupName, rdnSpectrumGroupGuardBand=rdnSpectrumGroupGuardBand, rdnActiveModemCount=rdnActiveModemCount, rdnSpectrumDataTable=rdnSpectrumDataTable, rdnSpectrumDataCollectInterval=rdnSpectrumDataCollectInterval, rdnSpectrumGroupHopPeriod=rdnSpectrumGroupHopPeriod, rdnSpectrumBandSchedId=rdnSpectrumBandSchedId, rdnSpectrumMemberChannelTable=rdnSpectrumMemberChannelTable, rdnSpectrumDataCollectResolution=rdnSpectrumDataCollectResolution, rdnSpectrumErrorCodeWord=rdnSpectrumErrorCodeWord, rdnSpectrumBandSchedMinute=rdnSpectrumBandSchedMinute, rdnUnregisteredModemCount=rdnUnregisteredModemCount, rdnSpectrumDataLastUpdate=rdnSpectrumDataLastUpdate)
