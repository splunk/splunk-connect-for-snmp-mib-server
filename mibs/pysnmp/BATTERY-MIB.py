#
# PySNMP MIB module BATTERY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BATTERY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:18:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32, NotificationType, ModuleIdentity, mib_2, ObjectIdentity, Bits, Counter64, TimeTicks, iso, Gauge32, MibIdentifier, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32", "NotificationType", "ModuleIdentity", "mib-2", "ObjectIdentity", "Bits", "Counter64", "TimeTicks", "iso", "Gauge32", "MibIdentifier", "Integer32", "Unsigned32")
DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention")
batteryMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 233))
batteryMIB.setRevisions(('2015-06-15 00:00',))
if mibBuilder.loadTexts: batteryMIB.setLastUpdated('201506150000Z')
if mibBuilder.loadTexts: batteryMIB.setOrganization('IETF EMAN Working Group')
batteryNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 233, 0))
batteryObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 233, 1))
batteryConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 233, 2))
batteryTable = MibTable((1, 3, 6, 1, 2, 1, 233, 1, 1), )
if mibBuilder.loadTexts: batteryTable.setStatus('current')
batteryEntry = MibTableRow((1, 3, 6, 1, 2, 1, 233, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: batteryEntry.setStatus('current')
batteryIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryIdentifier.setStatus('current')
batteryFirmwareVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryFirmwareVersion.setStatus('current')
batteryType = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("primary", 3), ("rechargeable", 4), ("capacitor", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryType.setStatus('current')
batteryTechnology = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTechnology.setStatus('current')
batteryDesignVoltage = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 5), Unsigned32()).setUnits('millivolt').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryDesignVoltage.setStatus('current')
batteryNumberOfCells = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryNumberOfCells.setStatus('current')
batteryDesignCapacity = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 7), Unsigned32()).setUnits('milliampere hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryDesignCapacity.setStatus('current')
batteryMaxChargingCurrent = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 8), Unsigned32()).setUnits('milliampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMaxChargingCurrent.setStatus('current')
batteryTrickleChargingCurrent = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 9), Unsigned32()).setUnits('milliampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTrickleChargingCurrent.setStatus('current')
batteryActualCapacity = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 10), Unsigned32()).setUnits('milliampere hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryActualCapacity.setStatus('current')
batteryChargingCycleCount = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryChargingCycleCount.setStatus('current')
batteryLastChargingCycleTime = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryLastChargingCycleTime.setStatus('current')
batteryChargingOperState = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("charging", 2), ("maintainingCharge", 3), ("noCharging", 4), ("discharging", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryChargingOperState.setStatus('current')
batteryChargingAdminState = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSet", 1), ("charge", 2), ("doNotCharge", 3), ("discharge", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryChargingAdminState.setStatus('current')
batteryActualCharge = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 15), Unsigned32()).setUnits('milliampere hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryActualCharge.setStatus('current')
batteryActualVoltage = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 16), Unsigned32()).setUnits('millivolt').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryActualVoltage.setStatus('current')
batteryActualCurrent = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 17), Integer32()).setUnits('milliampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryActualCurrent.setStatus('current')
batteryTemperature = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 18), Integer32()).setUnits('deci-degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTemperature.setStatus('current')
batteryAlarmLowCharge = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 19), Unsigned32()).setUnits('milliampere hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAlarmLowCharge.setStatus('current')
batteryAlarmLowVoltage = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 20), Unsigned32()).setUnits('millivolt').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAlarmLowVoltage.setStatus('current')
batteryAlarmLowCapacity = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 21), Unsigned32()).setUnits('milliampere hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAlarmLowCapacity.setStatus('current')
batteryAlarmHighCycleCount = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAlarmHighCycleCount.setStatus('current')
batteryAlarmHighTemperature = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 23), Integer32()).setUnits('deci-degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAlarmHighTemperature.setStatus('current')
batteryAlarmLowTemperature = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 24), Integer32()).setUnits('deci-degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAlarmLowTemperature.setStatus('current')
batteryCellIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 233, 1, 1, 1, 25), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCellIdentifier.setStatus('current')
batteryChargingStateNotification = NotificationType((1, 3, 6, 1, 2, 1, 233, 0, 1)).setObjects(("BATTERY-MIB", "batteryChargingOperState"))
if mibBuilder.loadTexts: batteryChargingStateNotification.setStatus('current')
batteryLowNotification = NotificationType((1, 3, 6, 1, 2, 1, 233, 0, 2)).setObjects(("BATTERY-MIB", "batteryActualCharge"), ("BATTERY-MIB", "batteryActualVoltage"), ("BATTERY-MIB", "batteryCellIdentifier"))
if mibBuilder.loadTexts: batteryLowNotification.setStatus('current')
batteryCriticalNotification = NotificationType((1, 3, 6, 1, 2, 1, 233, 0, 3)).setObjects(("BATTERY-MIB", "batteryActualCharge"), ("BATTERY-MIB", "batteryActualVoltage"), ("BATTERY-MIB", "batteryCellIdentifier"))
if mibBuilder.loadTexts: batteryCriticalNotification.setStatus('current')
batteryTemperatureNotification = NotificationType((1, 3, 6, 1, 2, 1, 233, 0, 4)).setObjects(("BATTERY-MIB", "batteryTemperature"), ("BATTERY-MIB", "batteryCellIdentifier"))
if mibBuilder.loadTexts: batteryTemperatureNotification.setStatus('current')
batteryAgingNotification = NotificationType((1, 3, 6, 1, 2, 1, 233, 0, 5)).setObjects(("BATTERY-MIB", "batteryActualCapacity"), ("BATTERY-MIB", "batteryChargingCycleCount"), ("BATTERY-MIB", "batteryCellIdentifier"))
if mibBuilder.loadTexts: batteryAgingNotification.setStatus('current')
batteryConnectedNotification = NotificationType((1, 3, 6, 1, 2, 1, 233, 0, 6)).setObjects(("BATTERY-MIB", "batteryIdentifier"))
if mibBuilder.loadTexts: batteryConnectedNotification.setStatus('current')
batteryDisconnectedNotification = NotificationType((1, 3, 6, 1, 2, 1, 233, 0, 7))
if mibBuilder.loadTexts: batteryDisconnectedNotification.setStatus('current')
batteryCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 233, 2, 1))
batteryGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 233, 2, 2))
batteryCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 233, 2, 1, 1)).setObjects(("BATTERY-MIB", "batteryDescriptionGroup"), ("BATTERY-MIB", "batteryStatusGroup"), ("BATTERY-MIB", "batteryAlarmThresholdsGroup"), ("BATTERY-MIB", "batteryNotificationsGroup"), ("BATTERY-MIB", "batteryPerCellNotificationsGroup"), ("BATTERY-MIB", "batteryAdminGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    batteryCompliance = batteryCompliance.setStatus('current')
batteryDescriptionGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 233, 2, 2, 1)).setObjects(("BATTERY-MIB", "batteryIdentifier"), ("BATTERY-MIB", "batteryFirmwareVersion"), ("BATTERY-MIB", "batteryType"), ("BATTERY-MIB", "batteryTechnology"), ("BATTERY-MIB", "batteryDesignVoltage"), ("BATTERY-MIB", "batteryNumberOfCells"), ("BATTERY-MIB", "batteryDesignCapacity"), ("BATTERY-MIB", "batteryMaxChargingCurrent"), ("BATTERY-MIB", "batteryTrickleChargingCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    batteryDescriptionGroup = batteryDescriptionGroup.setStatus('current')
batteryStatusGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 233, 2, 2, 2)).setObjects(("BATTERY-MIB", "batteryActualCapacity"), ("BATTERY-MIB", "batteryChargingCycleCount"), ("BATTERY-MIB", "batteryLastChargingCycleTime"), ("BATTERY-MIB", "batteryChargingOperState"), ("BATTERY-MIB", "batteryActualCharge"), ("BATTERY-MIB", "batteryActualVoltage"), ("BATTERY-MIB", "batteryActualCurrent"), ("BATTERY-MIB", "batteryTemperature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    batteryStatusGroup = batteryStatusGroup.setStatus('current')
batteryAdminGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 233, 2, 2, 3)).setObjects(("BATTERY-MIB", "batteryChargingAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    batteryAdminGroup = batteryAdminGroup.setStatus('current')
batteryAlarmThresholdsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 233, 2, 2, 4)).setObjects(("BATTERY-MIB", "batteryAlarmLowCharge"), ("BATTERY-MIB", "batteryAlarmLowVoltage"), ("BATTERY-MIB", "batteryAlarmLowCapacity"), ("BATTERY-MIB", "batteryAlarmHighCycleCount"), ("BATTERY-MIB", "batteryAlarmHighTemperature"), ("BATTERY-MIB", "batteryAlarmLowTemperature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    batteryAlarmThresholdsGroup = batteryAlarmThresholdsGroup.setStatus('current')
batteryNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 233, 2, 2, 5)).setObjects(("BATTERY-MIB", "batteryChargingStateNotification"), ("BATTERY-MIB", "batteryLowNotification"), ("BATTERY-MIB", "batteryCriticalNotification"), ("BATTERY-MIB", "batteryAgingNotification"), ("BATTERY-MIB", "batteryTemperatureNotification"), ("BATTERY-MIB", "batteryConnectedNotification"), ("BATTERY-MIB", "batteryDisconnectedNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    batteryNotificationsGroup = batteryNotificationsGroup.setStatus('current')
batteryPerCellNotificationsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 233, 2, 2, 6)).setObjects(("BATTERY-MIB", "batteryCellIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    batteryPerCellNotificationsGroup = batteryPerCellNotificationsGroup.setStatus('current')
mibBuilder.exportSymbols("BATTERY-MIB", batteryLastChargingCycleTime=batteryLastChargingCycleTime, batteryConformance=batteryConformance, batteryAlarmThresholdsGroup=batteryAlarmThresholdsGroup, batteryMIB=batteryMIB, batteryAdminGroup=batteryAdminGroup, batteryNotifications=batteryNotifications, batteryEntry=batteryEntry, batteryTechnology=batteryTechnology, batteryActualCharge=batteryActualCharge, batteryAlarmLowCharge=batteryAlarmLowCharge, batteryAlarmLowTemperature=batteryAlarmLowTemperature, batteryDesignCapacity=batteryDesignCapacity, batteryCompliances=batteryCompliances, batteryAlarmHighCycleCount=batteryAlarmHighCycleCount, batteryAlarmLowCapacity=batteryAlarmLowCapacity, batteryCompliance=batteryCompliance, batteryActualVoltage=batteryActualVoltage, batteryActualCapacity=batteryActualCapacity, batteryTemperature=batteryTemperature, batteryChargingOperState=batteryChargingOperState, batteryStatusGroup=batteryStatusGroup, batteryObjects=batteryObjects, PYSNMP_MODULE_ID=batteryMIB, batteryAlarmLowVoltage=batteryAlarmLowVoltage, batteryDisconnectedNotification=batteryDisconnectedNotification, batteryGroups=batteryGroups, batteryNotificationsGroup=batteryNotificationsGroup, batteryDescriptionGroup=batteryDescriptionGroup, batteryChargingCycleCount=batteryChargingCycleCount, batteryFirmwareVersion=batteryFirmwareVersion, batteryCriticalNotification=batteryCriticalNotification, batteryConnectedNotification=batteryConnectedNotification, batteryDesignVoltage=batteryDesignVoltage, batteryMaxChargingCurrent=batteryMaxChargingCurrent, batteryLowNotification=batteryLowNotification, batteryIdentifier=batteryIdentifier, batteryTemperatureNotification=batteryTemperatureNotification, batteryNumberOfCells=batteryNumberOfCells, batteryAlarmHighTemperature=batteryAlarmHighTemperature, batteryChargingAdminState=batteryChargingAdminState, batteryTable=batteryTable, batteryChargingStateNotification=batteryChargingStateNotification, batteryPerCellNotificationsGroup=batteryPerCellNotificationsGroup, batteryCellIdentifier=batteryCellIdentifier, batteryAgingNotification=batteryAgingNotification, batteryType=batteryType, batteryTrickleChargingCurrent=batteryTrickleChargingCurrent, batteryActualCurrent=batteryActualCurrent)
