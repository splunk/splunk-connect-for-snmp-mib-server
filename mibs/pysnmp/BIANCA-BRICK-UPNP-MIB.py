#
# PySNMP MIB module BIANCA-BRICK-UPNP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-UPNP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:21:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
DisplayString, = mibBuilder.importSymbols("RFC1158-MIB", "DisplayString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibIdentifier, iso, Counter64, Bits, Counter32, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, Gauge32, Integer32, IpAddress, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "iso", "Counter64", "Bits", "Counter32", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "Gauge32", "Integer32", "IpAddress", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
biboip = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5))
upnp = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5, 45))
upnpGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 10))
upnpGlobStatus = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 10, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20, 30))).clone(namedValues=NamedValues(("enabled", 10), ("restricted", 20), ("disabled", 30))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upnpGlobStatus.setStatus('mandatory')
upnpGlobTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 10, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5678)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upnpGlobTcpPort.setStatus('mandatory')
upnpGlobSsdpTtl = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 10, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upnpGlobSsdpTtl.setStatus('mandatory')
ipNatUPnPTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20), )
if mibBuilder.loadTexts: ipNatUPnPTable.setStatus('mandatory')
ipNatUPnPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10), ).setIndexNames((0, "BIANCA-BRICK-UPNP-MIB", "ipNatUPnPIfIndex"), (0, "BIANCA-BRICK-UPNP-MIB", "ipNatUPnPProtocol"), (0, "BIANCA-BRICK-UPNP-MIB", "ipNatUPnPRemoteAddr"), (0, "BIANCA-BRICK-UPNP-MIB", "ipNatUPnPExtPort"))
if mibBuilder.loadTexts: ipNatUPnPEntry.setStatus('mandatory')
ipNatUPnPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatUPnPIfIndex.setStatus('mandatory')
ipNatUPnPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 17))).clone(namedValues=NamedValues(("tcp", 6), ("udp", 17))).clone('tcp')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatUPnPProtocol.setStatus('mandatory')
ipNatUPnPRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10, 30), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatUPnPRemoteAddr.setStatus('mandatory')
ipNatUPnPExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatUPnPExtPort.setStatus('mandatory')
ipNatUPnPIntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10, 50), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatUPnPIntAddr.setStatus('mandatory')
ipNatUPnPIntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatUPnPIntPort.setStatus('mandatory')
ipNatUPnPLeaseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5184000)).clone(3600)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatUPnPLeaseDuration.setStatus('mandatory')
ipNatUPnPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20, 30))).clone(namedValues=NamedValues(("delete", 10), ("enabled", 20), ("disabled", 30))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNatUPnPStatus.setStatus('mandatory')
ipNatUPnPDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 20, 10, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNatUPnPDescription.setStatus('mandatory')
upnpIfTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 30), )
if mibBuilder.loadTexts: upnpIfTable.setStatus('mandatory')
upnpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 30, 10), ).setIndexNames((0, "BIANCA-BRICK-UPNP-MIB", "upnpIfIndex"))
if mibBuilder.loadTexts: upnpIfEntry.setStatus('mandatory')
upnpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 30, 10, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upnpIfIndex.setStatus('mandatory')
upnpIfClientRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 30, 10, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20))).clone(namedValues=NamedValues(("enabled", 10), ("disabled", 20))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upnpIfClientRequests.setStatus('mandatory')
upnpIfUPnPControlled = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 45, 30, 10, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20))).clone(namedValues=NamedValues(("enabled", 10), ("disabled", 20))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upnpIfUPnPControlled.setStatus('mandatory')
mibBuilder.exportSymbols("BIANCA-BRICK-UPNP-MIB", upnpIfEntry=upnpIfEntry, ipNatUPnPEntry=ipNatUPnPEntry, upnpIfClientRequests=upnpIfClientRequests, upnpGlobals=upnpGlobals, ipNatUPnPLeaseDuration=ipNatUPnPLeaseDuration, ipNatUPnPIfIndex=ipNatUPnPIfIndex, biboip=biboip, ipNatUPnPExtPort=ipNatUPnPExtPort, ipNatUPnPIntPort=ipNatUPnPIntPort, bintec=bintec, bibo=bibo, upnpGlobTcpPort=upnpGlobTcpPort, upnpGlobStatus=upnpGlobStatus, upnpIfTable=upnpIfTable, upnpGlobSsdpTtl=upnpGlobSsdpTtl, ipNatUPnPTable=ipNatUPnPTable, upnpIfIndex=upnpIfIndex, upnpIfUPnPControlled=upnpIfUPnPControlled, ipNatUPnPIntAddr=ipNatUPnPIntAddr, ipNatUPnPRemoteAddr=ipNatUPnPRemoteAddr, ipNatUPnPDescription=ipNatUPnPDescription, upnp=upnp, ipNatUPnPProtocol=ipNatUPnPProtocol, ipNatUPnPStatus=ipNatUPnPStatus)
