#
# PySNMP MIB module ALANTEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALANTEC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:01:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, TimeTicks, NotificationType, Unsigned32, Counter32, iso, Counter64, Gauge32, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, enterprises, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "NotificationType", "Unsigned32", "Counter32", "iso", "Counter64", "Gauge32", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "enterprises", "ModuleIdentity")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

alantec = MibIdentifier((1, 3, 6, 1, 4, 1, 390))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 1))
common = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2))
powerhub = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 1, 1))
powerbits = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 1, 2))
powerhub7000 = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 1, 3))
alsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 1))
albridge = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 2))
almgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 3))
alrip = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 4))
altcp = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 5))
alip = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 6))
alat = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 7))
aldecnet = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 8))
alipx = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 9))
alsnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 10))
alchassis = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 1, 3, 1))
alSlotTable = MibTable((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1), )
if mibBuilder.loadTexts: alSlotTable.setStatus('mandatory')
alSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1), ).setIndexNames((0, "ALANTEC-MIB", "alSlotNumber"))
if mibBuilder.loadTexts: alSlotEntry.setStatus('mandatory')
alSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotNumber.setStatus('mandatory')
alSlotCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("universal-ethernet", 1), ("utp-4X4", 2), ("utp-4X6", 3), ("fddi-dual-das", 4), ("fddi-single-das", 5), ("utp-16X1", 6), ("utp-13X1", 7), ("fddi-dual-universal", 8), ("fddi-single-universal", 9), ("fddi-concentrator", 10), ("cddi-concentrator", 11), ("fast-thernet", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotCardType.setStatus('mandatory')
alSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-equipped", 1), ("not-present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotStatus.setStatus('mandatory')
alSlotModel = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotModel.setStatus('mandatory')
alSlotRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotRevision.setStatus('mandatory')
alSlotIssue = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotIssue.setStatus('mandatory')
alSlotDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotDeviation.setStatus('mandatory')
alSlotSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotSerialNumber.setStatus('mandatory')
alSlotPower5 = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotPower5.setStatus('mandatory')
alSlotPower12 = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotPower12.setStatus('mandatory')
alSlotPower33 = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotPower33.setStatus('mandatory')
alSlotPowerOther = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotPowerOther.setStatus('mandatory')
alVportTable = MibTable((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 2), )
if mibBuilder.loadTexts: alVportTable.setStatus('mandatory')
alVportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 2, 1), ).setIndexNames((0, "ALANTEC-MIB", "alVportNumber"))
if mibBuilder.loadTexts: alVportEntry.setStatus('mandatory')
alVportNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportNumber.setStatus('mandatory')
alVportSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportSlotNumber.setStatus('mandatory')
alVportPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportPortNumber.setStatus('mandatory')
alVportPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 7))).clone(namedValues=NamedValues(("bnc", 1), ("fiber", 2), ("aui", 3), ("not-stuffed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportPortType.setStatus('mandatory')
alVportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bad", 1), ("removed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportStatus.setStatus('mandatory')
alVportControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportControllerType.setStatus('mandatory')
alSlotToVportTable = MibTable((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 3), )
if mibBuilder.loadTexts: alSlotToVportTable.setStatus('mandatory')
alSlotVportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 3, 1), ).setIndexNames((0, "ALANTEC-MIB", "alSlotVportSlotNumber"), (0, "ALANTEC-MIB", "alSlotVportPortNumber"))
if mibBuilder.loadTexts: alSlotVportEntry.setStatus('mandatory')
alSlotVportSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportSlotNumber.setStatus('mandatory')
alSlotVportPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportPortNumber.setStatus('mandatory')
alSlotVportNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportNumber.setStatus('mandatory')
alSlotVportPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportPortType.setStatus('mandatory')
alSlotVportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportStatus.setStatus('mandatory')
alSlotVportControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportControllerType.setStatus('mandatory')
alPSTable = MibTable((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 4), )
if mibBuilder.loadTexts: alPSTable.setStatus('mandatory')
alPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 4, 1), ).setIndexNames((0, "ALANTEC-MIB", "alPSNumber"))
if mibBuilder.loadTexts: alPSEntry.setStatus('mandatory')
alPSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPSNumber.setStatus('mandatory')
alPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPSStatus.setStatus('mandatory')
alCpuSlot = MibScalar((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alCpuSlot.setStatus('mandatory')
alChassisType = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("model3100", 1), ("model3200", 2), ("model3300", 3), ("model3500", 4), ("model3401", 5), ("model3402", 6), ("model3403", 7), ("model3404", 8), ("model3405", 9), ("model3406", 10), ("model3407", 11), ("model3410", 12), ("model3411", 13), ("model3412", 14), ("model3420", 15), ("model3421", 16), ("model3422", 17), ("model3423", 18), ("model3424", 19), ("model3425", 20), ("model5001", 21), ("model5002", 22), ("model5003", 23), ("model5004", 24), ("model5005", 25), ("model5006", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alChassisType.setStatus('mandatory')
alMcpuRtVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMcpuRtVer.setStatus('mandatory')
alMcpuPromVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMcpuPromVer.setStatus('mandatory')
alFcpuOneRtVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alFcpuOneRtVer.setStatus('mandatory')
alFcpuTwoRtVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alFcpuTwoRtVer.setStatus('mandatory')
alFcpuOnePromVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alFcpuOnePromVer.setStatus('mandatory')
alFcpuTwoPromVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alFcpuTwoPromVer.setStatus('mandatory')
alRcpuOneRtVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRcpuOneRtVer.setStatus('mandatory')
alRcpuTwoRtVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRcpuTwoRtVer.setStatus('mandatory')
alRcpuOnePromVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRcpuOnePromVer.setStatus('mandatory')
alRcpuTwoPromVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRcpuTwoPromVer.setStatus('mandatory')
alBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 2, 1), )
if mibBuilder.loadTexts: alBridgeTable.setStatus('mandatory')
alBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 2, 1, 1), ).setIndexNames((0, "ALANTEC-MIB", "alBridgeEntryAddress"))
if mibBuilder.loadTexts: alBridgeEntry.setStatus('mandatory')
alBridgeEntryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alBridgeEntryAddress.setStatus('mandatory')
alBridgeEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alBridgeEntryPort.setStatus('mandatory')
alBridgeEntryLink = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alBridgeEntryLink.setStatus('mandatory')
alBridgeEntryRule = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgeEntryRule.setStatus('mandatory')
alBridgeEntryFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alBridgeEntryFlags.setStatus('mandatory')
alBridgeTblClear = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgeTblClear.setStatus('mandatory')
alBrFlushCache = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBrFlushCache.setStatus('mandatory')
alPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 2, 4), )
if mibBuilder.loadTexts: alPortStatsTable.setStatus('mandatory')
portStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1), ).setIndexNames((0, "ALANTEC-MIB", "portStatsPort"))
if mibBuilder.loadTexts: portStatsEntry.setStatus('mandatory')
portStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPort.setStatus('mandatory')
portStatsPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsIn.setStatus('mandatory')
portStatsPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsOut.setStatus('mandatory')
portStatsOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsOctetsIn.setStatus('mandatory')
portStatsOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsOctetsOut.setStatus('mandatory')
portStatsMultiCastPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsMultiCastPktsIn.setStatus('mandatory')
portStatsMulticastPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsMulticastPktsOut.setStatus('mandatory')
portStatsTableMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsTableMisses.setStatus('mandatory')
portStatsRcvBuffErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsRcvBuffErrs.setStatus('mandatory')
portStatsXmitBuffErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsXmitBuffErrs.setStatus('mandatory')
portStatsTotalCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsTotalCollisions.setStatus('mandatory')
portStatsRcvCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsRcvCollisions.setStatus('mandatory')
portStatsXmitCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsXmitCollisions.setStatus('mandatory')
portStatsXmitQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsXmitQLen.setStatus('mandatory')
portStatsPeakUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPeakUtilization.setStatus('mandatory')
portStatsCurrUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsCurrUtilization.setStatus('mandatory')
portStatsLossOfCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsLossOfCarrier.setStatus('mandatory')
portStatsExcessRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsExcessRetries.setStatus('mandatory')
alBridgeStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgeStatsClear.setStatus('mandatory')
alBridgePPControl = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgePPControl.setStatus('mandatory')
alPortToPortTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 2, 7), )
if mibBuilder.loadTexts: alPortToPortTable.setStatus('mandatory')
portToPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 2, 7, 1), ).setIndexNames((0, "ALANTEC-MIB", "alPPSourecPort"), (0, "ALANTEC-MIB", "alPPDestinationPort"))
if mibBuilder.loadTexts: portToPortEntry.setStatus('mandatory')
alPPSourecPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPPSourecPort.setStatus('mandatory')
alPPDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPPDestinationPort.setStatus('mandatory')
portToPortPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portToPortPackets.setStatus('mandatory')
portToPortOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portToPortOctets.setStatus('mandatory')
alPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 2, 8), )
if mibBuilder.loadTexts: alPortConfigTable.setStatus('mandatory')
portConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 2, 8, 1), ).setIndexNames((0, "ALANTEC-MIB", "portConfigPort"))
if mibBuilder.loadTexts: portConfigEntry.setStatus('mandatory')
portConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfigPort.setStatus('mandatory')
portConfigSrcRule = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigSrcRule.setStatus('mandatory')
portConfigDstRule = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigDstRule.setStatus('mandatory')
portConfigBlockLearnedEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigBlockLearnedEntries.setStatus('mandatory')
alBridgeIpBridging = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgeIpBridging.setStatus('mandatory')
alBrTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 2, 10), )
if mibBuilder.loadTexts: alBrTemplateTable.setStatus('mandatory')
brTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 2, 10, 1), ).setIndexNames((0, "ALANTEC-MIB", "brTemplateNumber"))
if mibBuilder.loadTexts: brTemplateEntry.setStatus('mandatory')
brTemplateNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 10, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTemplateNumber.setStatus('mandatory')
brTemplateOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTemplateOffset.setStatus('mandatory')
brTemplateMask = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 10, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTemplateMask.setStatus('mandatory')
brTemplateComparator = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 10, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTemplateComparator.setStatus('mandatory')
brTemplateOption = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTemplateOption.setStatus('mandatory')
alBrRuleTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 2, 11), )
if mibBuilder.loadTexts: alBrRuleTable.setStatus('mandatory')
brRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 2, 11, 1), ).setIndexNames((0, "ALANTEC-MIB", "brRuleNumber"))
if mibBuilder.loadTexts: brRuleEntry.setStatus('mandatory')
brRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 11, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRuleNumber.setStatus('mandatory')
brRuleStatement = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRuleStatement.setStatus('mandatory')
alBrRuleToNodeTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 2, 12), )
if mibBuilder.loadTexts: alBrRuleToNodeTable.setStatus('mandatory')
alBrRuleToNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 2, 12, 1), ).setIndexNames((0, "ALANTEC-MIB", "brRuleToNodePort"))
if mibBuilder.loadTexts: alBrRuleToNodeEntry.setStatus('mandatory')
brRuleToNodePort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 12, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRuleToNodePort.setStatus('mandatory')
brRuleToNodeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 12, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRuleToNodeMacAddr.setStatus('mandatory')
brRuleToNodeRule = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 12, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRuleToNodeRule.setStatus('mandatory')
alBrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 2, 13), )
if mibBuilder.loadTexts: alBrGroupTable.setStatus('mandatory')
alBrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 2, 13, 1), ).setIndexNames((0, "ALANTEC-MIB", "brGroupNumber"))
if mibBuilder.loadTexts: alBrGroupEntry.setStatus('mandatory')
brGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 13, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brGroupNumber.setStatus('mandatory')
brGroupPortsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 13, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brGroupPortsMask.setStatus('mandatory')
brGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 13, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brGroupName.setStatus('mandatory')
alBridgeSTPControl = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 2, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgeSTPControl.setStatus('mandatory')
alPortStateTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 2, 15), )
if mibBuilder.loadTexts: alPortStateTable.setStatus('mandatory')
portStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 2, 15, 1), ).setIndexNames((0, "ALANTEC-MIB", "portStatePort"))
if mibBuilder.loadTexts: portStateEntry.setStatus('mandatory')
portStatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatePort.setStatus('mandatory')
portStateDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStateDiag.setStatus('mandatory')
portStateMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStateMgmt.setStatus('mandatory')
portStateStp = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStateStp.setStatus('mandatory')
portStatePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 15, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatePortName.setStatus('mandatory')
alLinkStatsCollect = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alLinkStatsCollect.setStatus('mandatory')
alLinkStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alLinkStatsClear.setStatus('mandatory')
alLinkStatsTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 3, 4), )
if mibBuilder.loadTexts: alLinkStatsTable.setStatus('mandatory')
linkStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1), ).setIndexNames((0, "ALANTEC-MIB", "linkStatsPort"), (0, "ALANTEC-MIB", "linkStatsLink"))
if mibBuilder.loadTexts: linkStatsEntry.setStatus('mandatory')
linkStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsPort.setStatus('mandatory')
linkStatsLink = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsLink.setStatus('mandatory')
linkStatsPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsPktsIn.setStatus('mandatory')
linkStatsOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsOctetsIn.setStatus('mandatory')
linkStatsBMCastPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsBMCastPktsIn.setStatus('mandatory')
linkStatsGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsGiantPkts.setStatus('mandatory')
linkStatsFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsFrameErrs.setStatus('mandatory')
linkStatsFCSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsFCSErrs.setStatus('mandatory')
linkStatsRcvCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsRcvCollisions.setStatus('mandatory')
alLinkControlTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 3, 5), )
if mibBuilder.loadTexts: alLinkControlTable.setStatus('mandatory')
linkControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 3, 5, 1), ).setIndexNames((0, "ALANTEC-MIB", "linkControlPort"), (0, "ALANTEC-MIB", "linkControlLink"))
if mibBuilder.loadTexts: linkControlEntry.setStatus('mandatory')
linkControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlPort.setStatus('mandatory')
linkControlLink = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlLink.setStatus('mandatory')
linkControlEnlState = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlEnlState.setStatus('mandatory')
linkControlLinkTest = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlLinkTest.setStatus('mandatory')
linkControlPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlPartition.setStatus('mandatory')
linkControlPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlPolarity.setStatus('mandatory')
linkControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkControlEnable.setStatus('mandatory')
alPortLinkTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 3, 6), )
if mibBuilder.loadTexts: alPortLinkTable.setStatus('mandatory')
portLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 3, 6, 1), ).setIndexNames((0, "ALANTEC-MIB", "portLinkPort"))
if mibBuilder.loadTexts: portLinkEntry.setStatus('mandatory')
portLinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinkPort.setStatus('mandatory')
portLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("aui", 1), ("bnc", 2), ("bnct", 3), ("utp", 4), ("fiber", 5), ("unknown", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLinkType.setStatus('mandatory')
alFiberStatsTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 3, 7), )
if mibBuilder.loadTexts: alFiberStatsTable.setStatus('mandatory')
fiberStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 3, 7, 1), ).setIndexNames((0, "ALANTEC-MIB", "fiberStatsPort"))
if mibBuilder.loadTexts: fiberStatsEntry.setStatus('mandatory')
fiberStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiberStatsPort.setStatus('mandatory')
fiberAuiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiberAuiStatus.setStatus('mandatory')
fiberSecurityViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("detect", 1), ("ignore", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fiberSecurityViolation.setStatus('mandatory')
alPortMonitorClose = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alPortMonitorClose.setStatus('mandatory')
alPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 3, 9), )
if mibBuilder.loadTexts: alPortMonitorTable.setStatus('mandatory')
portMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 3, 9, 1), ).setIndexNames((0, "ALANTEC-MIB", "portMonSrcPort"), (0, "ALANTEC-MIB", "portMonDstPort"))
if mibBuilder.loadTexts: portMonitorEntry.setStatus('mandatory')
portMonSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 9, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMonSrcPort.setStatus('mandatory')
portMonDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 9, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMonDstPort.setStatus('mandatory')
portMonTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("forwarded", 1), ("incoming", 2), ("forwardedincoming", 3), ("generated", 4), ("forwardedgenerated", 5), ("incominggenerated", 6), ("all", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMonTrafficType.setStatus('mandatory')
alReboot = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alReboot.setStatus('mandatory')
alPortMonitorViewTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 3, 11), )
if mibBuilder.loadTexts: alPortMonitorViewTable.setStatus('mandatory')
portMonitorViewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 3, 11, 1), ).setIndexNames((0, "ALANTEC-MIB", "portMonViewSrcPort"), (0, "ALANTEC-MIB", "portMonViewDstPort"))
if mibBuilder.loadTexts: portMonitorViewEntry.setStatus('mandatory')
portMonViewSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMonViewSrcPort.setStatus('mandatory')
portMonViewDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMonViewDstPort.setStatus('mandatory')
portMonViewMonitorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 11, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMonViewMonitorPort.setStatus('mandatory')
alRipConfigTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 4, 1), )
if mibBuilder.loadTexts: alRipConfigTable.setStatus('mandatory')
ripConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 4, 1, 1), ).setIndexNames((0, "ALANTEC-MIB", "ripConfigPort"))
if mibBuilder.loadTexts: ripConfigEntry.setStatus('mandatory')
ripConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripConfigPort.setStatus('mandatory')
ripConfigTalk = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripConfigTalk.setStatus('mandatory')
ripConfigListen = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripConfigListen.setStatus('mandatory')
ripConfigPoison = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripConfigPoison.setStatus('mandatory')
ripConfigRptStaticRt = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripConfigRptStaticRt.setStatus('mandatory')
ripConfigRptDefaultRt = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripConfigRptDefaultRt.setStatus('mandatory')
ripConfigAccptDefaultRt = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripConfigAccptDefaultRt.setStatus('mandatory')
alRipstatsClear = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alRipstatsClear.setStatus('mandatory')
alRipStatPktsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatPktsRcvd.setStatus('mandatory')
alRipStatPktsXmitted = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatPktsXmitted.setStatus('mandatory')
alRipStatReqsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatReqsRcvd.setStatus('mandatory')
alRipStatRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatRespRcvd.setStatus('mandatory')
alRipStatReqsXmitted = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatReqsXmitted.setStatus('mandatory')
alRipStatRespXmitted = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatRespXmitted.setStatus('mandatory')
alRipStatRouteTimeOuts = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatRouteTimeOuts.setStatus('mandatory')
alRipStatShortPkts = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatShortPkts.setStatus('mandatory')
alRipStatBadVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatBadVer.setStatus('mandatory')
alRipStatBadZeroes = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatBadZeroes.setStatus('mandatory')
alRipStatBadSrcPort = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatBadSrcPort.setStatus('mandatory')
alRipStatBadSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatBadSrcIp.setStatus('mandatory')
alRipStatPktsSelf = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatPktsSelf.setStatus('mandatory')
alRipStatPktsQueued = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatPktsQueued.setStatus('mandatory')
alRipStatFreeQueue = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatFreeQueue.setStatus('mandatory')
alRipDynPktsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynPktsRcvd.setStatus('mandatory')
alRipDynPktsXmitted = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynPktsXmitted.setStatus('mandatory')
alRipDynReqsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynReqsRcvd.setStatus('mandatory')
alRipDynRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynRespRcvd.setStatus('mandatory')
alRipDynReqsXmitted = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynReqsXmitted.setStatus('mandatory')
alRipDynRespXmitted = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynRespXmitted.setStatus('mandatory')
alRipDynRouteTimeOuts = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynRouteTimeOuts.setStatus('mandatory')
alRipDynShortPkts = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynShortPkts.setStatus('mandatory')
alRipDynBadVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynBadVer.setStatus('mandatory')
alRipDynBadZeroes = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynBadZeroes.setStatus('mandatory')
alRipDynBadSrcPort = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynBadSrcPort.setStatus('mandatory')
alRipDynBadSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynBadSrcIp.setStatus('mandatory')
alRipDynPktsSelf = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynPktsSelf.setStatus('mandatory')
alRipDynPktsQueued = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynPktsQueued.setStatus('mandatory')
alRipDynFreeQueue = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynFreeQueue.setStatus('mandatory')
alRipAccptFilTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 4, 33), )
if mibBuilder.loadTexts: alRipAccptFilTable.setStatus('mandatory')
ripAccptFilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 4, 33, 1), ).setIndexNames((0, "ALANTEC-MIB", "ripAccptFilNumber"))
if mibBuilder.loadTexts: ripAccptFilEntry.setStatus('mandatory')
ripAccptFilNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 33, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripAccptFilNumber.setStatus('mandatory')
ripAccptFilAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 33, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripAccptFilAddr.setStatus('mandatory')
ripAccptFilMask = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 33, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripAccptFilMask.setStatus('mandatory')
ripAccptFilPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 33, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripAccptFilPort.setStatus('mandatory')
alRipReportFilTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 4, 34), )
if mibBuilder.loadTexts: alRipReportFilTable.setStatus('mandatory')
ripReportFilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 4, 34, 1), ).setIndexNames((0, "ALANTEC-MIB", "ripReportFilNumber"))
if mibBuilder.loadTexts: ripReportFilEntry.setStatus('mandatory')
ripReportFilNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 34, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripReportFilNumber.setStatus('mandatory')
ripReportFilAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 34, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripReportFilAddr.setStatus('mandatory')
ripReportFilMask = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 34, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripReportFilMask.setStatus('mandatory')
ripReportFilPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 34, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripReportFilPort.setStatus('mandatory')
alTcpConnIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alTcpConnIdleTime.setStatus('mandatory')
alTcpKeepAliveInt = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alTcpKeepAliveInt.setStatus('mandatory')
alTcpDisconnectInt = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpDisconnectInt.setStatus('mandatory')
alTcpShortSegRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpShortSegRcvd.setStatus('mandatory')
alTcpStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alTcpStatsClear.setStatus('mandatory')
alTcpConnTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 5, 6), )
if mibBuilder.loadTexts: alTcpConnTable.setStatus('mandatory')
alTcpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 5, 6, 1), ).setIndexNames((0, "ALANTEC-MIB", "alTcpConnId"))
if mibBuilder.loadTexts: alTcpConnEntry.setStatus('mandatory')
alTcpConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpConnId.setStatus('mandatory')
alTcpConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("synSent", 3), ("synReceived", 4), ("established", 5), ("finWait1", 6), ("finWait2", 7), ("closeWait", 8), ("lastAck", 9), ("closing", 10), ("timeWait", 11), ("deleteTCB", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alTcpConnState.setStatus('mandatory')
alTcpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpConnLocalAddress.setStatus('mandatory')
alTcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpConnLocalPort.setStatus('mandatory')
alTcpConnRemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpConnRemAddress.setStatus('mandatory')
alTcpConnRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpConnRemPort.setStatus('mandatory')
alTcpFilTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 5, 7), )
if mibBuilder.loadTexts: alTcpFilTable.setStatus('mandatory')
tcpFilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 5, 7, 1), ).setIndexNames((0, "ALANTEC-MIB", "tcpFilNumber"))
if mibBuilder.loadTexts: tcpFilEntry.setStatus('mandatory')
tcpFilNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 7, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpFilNumber.setStatus('mandatory')
tcpFilSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpFilSrcAddr.setStatus('mandatory')
tcpFilSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpFilSrcMask.setStatus('mandatory')
tcpFilProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpFilProtocol.setStatus('mandatory')
tcpFilDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpFilDstPort.setStatus('mandatory')
alArpTableClear = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alArpTableClear.setStatus('mandatory')
alArpAge = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alArpAge.setStatus('mandatory')
alArpStatReqsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpStatReqsRcvd.setStatus('mandatory')
alArpStatRepliesRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpStatRepliesRcvd.setStatus('mandatory')
alArpStatInvalidOpcodes = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpStatInvalidOpcodes.setStatus('mandatory')
alArpStatRequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpStatRequestsSent.setStatus('mandatory')
alArpStatRepliesSent = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpStatRepliesSent.setStatus('mandatory')
alArpDynReqsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpDynReqsRcvd.setStatus('mandatory')
alArpDynRepliesRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpDynRepliesRcvd.setStatus('mandatory')
alArpDynInvalidOpcodes = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpDynInvalidOpcodes.setStatus('mandatory')
alArpDynRequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpDynRequestsSent.setStatus('mandatory')
alArpDynRepliesSent = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpDynRepliesSent.setStatus('mandatory')
alArpProxyTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 6, 13), )
if mibBuilder.loadTexts: alArpProxyTable.setStatus('mandatory')
arpProxyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 6, 13, 1), ).setIndexNames((0, "ALANTEC-MIB", "arpProxyPort"))
if mibBuilder.loadTexts: arpProxyEntry.setStatus('mandatory')
arpProxyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpProxyPort.setStatus('mandatory')
arpProxyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 13, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpProxyEnable.setStatus('mandatory')
alIpTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 6, 14), )
if mibBuilder.loadTexts: alIpTemplateTable.setStatus('mandatory')
ipTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1), ).setIndexNames((0, "ALANTEC-MIB", "ipTemplateNumber"))
if mibBuilder.loadTexts: ipTemplateEntry.setStatus('mandatory')
ipTemplateNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateNumber.setStatus('mandatory')
ipTemplateDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateDelete.setStatus('mandatory')
ipTemplateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("block", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateAction.setStatus('mandatory')
ipTemplateSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateSrcAddr.setStatus('mandatory')
ipTemplateSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateSrcMask.setStatus('mandatory')
ipTemplateDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateDstAddr.setStatus('mandatory')
ipTemplateDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateDstMask.setStatus('mandatory')
ipTemplateProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateProtocol.setStatus('mandatory')
ipTemplateOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateOperator.setStatus('mandatory')
ipTemplateDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateDstPort.setStatus('mandatory')
alIpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 6, 15), )
if mibBuilder.loadTexts: alIpRuleTable.setStatus('mandatory')
ipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 6, 15, 1), ).setIndexNames((0, "ALANTEC-MIB", "ipRuleNumber"))
if mibBuilder.loadTexts: ipRuleEntry.setStatus('mandatory')
ipRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 15, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRuleNumber.setStatus('mandatory')
ipRuleDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 15, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRuleDelete.setStatus('mandatory')
ipRuleTemplates = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 15, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRuleTemplates.setStatus('mandatory')
ipAcsCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 6, 16), )
if mibBuilder.loadTexts: ipAcsCtrlTable.setStatus('mandatory')
ipAcsCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 6, 16, 1), ).setIndexNames((0, "ALANTEC-MIB", "ipAcsCtrlPort"))
if mibBuilder.loadTexts: ipAcsCtrlEntry.setStatus('mandatory')
ipAcsCtrlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 16, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAcsCtrlPort.setStatus('mandatory')
ipAcsCtrlDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 16, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAcsCtrlDelete.setStatus('mandatory')
ipAcsCtrlSrcRule = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 16, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAcsCtrlSrcRule.setStatus('mandatory')
ipAcsCtrlDstRule = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 16, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAcsCtrlDstRule.setStatus('mandatory')
ipFilStatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 6, 17), )
if mibBuilder.loadTexts: ipFilStatStatsTable.setStatus('mandatory')
ipFilStatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 6, 17, 1), ).setIndexNames((0, "ALANTEC-MIB", "ipFilStatStatsTemplate"))
if mibBuilder.loadTexts: ipFilStatStatsEntry.setStatus('mandatory')
ipFilStatStatsTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilStatStatsTemplate.setStatus('mandatory')
ipFilStatStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilStatStatsInPkts.setStatus('mandatory')
ipFilStatStatsInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilStatStatsInBytes.setStatus('mandatory')
ipFilStatStatsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 17, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilStatStatsOutPkts.setStatus('mandatory')
ipFilStatStatsOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilStatStatsOutBytes.setStatus('mandatory')
ipFilDynStatsTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 6, 18), )
if mibBuilder.loadTexts: ipFilDynStatsTable.setStatus('mandatory')
ipFilDynStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 6, 18, 1), ).setIndexNames((0, "ALANTEC-MIB", "ipFilDynStatsTemplate"))
if mibBuilder.loadTexts: ipFilDynStatsEntry.setStatus('mandatory')
ipFilDynStatsTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilDynStatsTemplate.setStatus('mandatory')
ipFilDynStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilDynStatsInPkts.setStatus('mandatory')
ipFilDynStatsInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 18, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilDynStatsInBytes.setStatus('mandatory')
ipFilDynStatsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilDynStatsOutPkts.setStatus('mandatory')
ipFilDynStatsOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 18, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilDynStatsOutBytes.setStatus('mandatory')
ipFilDynStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 18, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilDynStatsClear.setStatus('mandatory')
alIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 6, 19), )
if mibBuilder.loadTexts: alIpInterfaceTable.setStatus('mandatory')
alIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1), ).setIndexNames((0, "ALANTEC-MIB", "ipInterfaceNumber"), (0, "ALANTEC-MIB", "ipInterfaceAddress"))
if mibBuilder.loadTexts: alIpInterfaceEntry.setStatus('mandatory')
ipInterfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceNumber.setStatus('mandatory')
ipInterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceAddress.setStatus('mandatory')
ipInterfaceSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceSubnetMask.setStatus('mandatory')
ipInterfaceMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceMtu.setStatus('mandatory')
ipInterfaceBroadCast = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceBroadCast.setStatus('mandatory')
ipInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceState.setStatus('mandatory')
ipInterfaceCost = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceCost.setStatus('mandatory')
ipInterfacePktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfacePktsIn.setStatus('mandatory')
ipInterfaceOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceOctetsIn.setStatus('mandatory')
ipInterfacePktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfacePktsOut.setStatus('mandatory')
ipInterfaceOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceOctetsOut.setStatus('mandatory')
alIpRtCacheTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 6, 20), )
if mibBuilder.loadTexts: alIpRtCacheTable.setStatus('mandatory')
alIpRtCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 6, 20, 1), ).setIndexNames((0, "ALANTEC-MIB", "ipRtCachePort"), (0, "ALANTEC-MIB", "ipRtCacheDstAddress"))
if mibBuilder.loadTexts: alIpRtCacheEntry.setStatus('mandatory')
ipRtCachePort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 20, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRtCachePort.setStatus('mandatory')
ipRtCacheDstAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 20, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRtCacheDstAddress.setStatus('mandatory')
ipRtCacheClear = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 20, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRtCacheClear.setStatus('mandatory')
mibBuilder.exportSymbols("ALANTEC-MIB", tcpFilProtocol=tcpFilProtocol, ripReportFilMask=ripReportFilMask, tcpFilEntry=tcpFilEntry, ipTemplateNumber=ipTemplateNumber, ipTemplateEntry=ipTemplateEntry, ipFilDynStatsOutBytes=ipFilDynStatsOutBytes, alLinkStatsClear=alLinkStatsClear, ipAcsCtrlDstRule=ipAcsCtrlDstRule, portStatsXmitCollisions=portStatsXmitCollisions, ripConfigPoison=ripConfigPoison, products=products, brTemplateNumber=brTemplateNumber, alArpAge=alArpAge, linkStatsFrameErrs=linkStatsFrameErrs, portStatePort=portStatePort, alBrRuleToNodeEntry=alBrRuleToNodeEntry, alIpTemplateTable=alIpTemplateTable, ipFilDynStatsClear=ipFilDynStatsClear, ipRuleTemplates=ipRuleTemplates, ripReportFilEntry=ripReportFilEntry, ipTemplateSrcAddr=ipTemplateSrcAddr, alFcpuOneRtVer=alFcpuOneRtVer, portStatsOctetsIn=portStatsOctetsIn, alRipDynFreeQueue=alRipDynFreeQueue, alRipStatPktsRcvd=alRipStatPktsRcvd, ripConfigListen=ripConfigListen, alRipStatPktsSelf=alRipStatPktsSelf, arpProxyEntry=arpProxyEntry, portStatsTableMisses=portStatsTableMisses, ipAcsCtrlSrcRule=ipAcsCtrlSrcRule, alBridgeSTPControl=alBridgeSTPControl, alRipStatBadSrcPort=alRipStatBadSrcPort, alBrFlushCache=alBrFlushCache, alSlotVportStatus=alSlotVportStatus, ripAccptFilMask=ripAccptFilMask, alat=alat, alRipStatBadZeroes=alRipStatBadZeroes, alPSStatus=alPSStatus, alSlotPower12=alSlotPower12, alTcpKeepAliveInt=alTcpKeepAliveInt, ipFilStatStatsOutPkts=ipFilStatStatsOutPkts, alArpStatRepliesRcvd=alArpStatRepliesRcvd, alTcpConnRemAddress=alTcpConnRemAddress, portStateDiag=portStateDiag, alRipStatReqsXmitted=alRipStatReqsXmitted, ipFilStatStatsTable=ipFilStatStatsTable, portLinkPort=portLinkPort, alBridgeEntryLink=alBridgeEntryLink, ipInterfaceOctetsOut=ipInterfaceOctetsOut, brTemplateEntry=brTemplateEntry, alBrGroupEntry=alBrGroupEntry, alantec=alantec, fiberSecurityViolation=fiberSecurityViolation, ipTemplateAction=ipTemplateAction, portConfigDstRule=portConfigDstRule, alBridgeIpBridging=alBridgeIpBridging, alSlotStatus=alSlotStatus, powerbits=powerbits, linkControlPolarity=linkControlPolarity, alRipDynReqsRcvd=alRipDynReqsRcvd, alVportStatus=alVportStatus, portStatePortName=portStatePortName, brTemplateOption=brTemplateOption, ripConfigTalk=ripConfigTalk, alVportEntry=alVportEntry, ipAcsCtrlPort=ipAcsCtrlPort, linkControlEnable=linkControlEnable, ripAccptFilNumber=ripAccptFilNumber, alRcpuOneRtVer=alRcpuOneRtVer, altcp=altcp, alRipDynRespRcvd=alRipDynRespRcvd, portStatsRcvBuffErrs=portStatsRcvBuffErrs, portMonitorViewEntry=portMonitorViewEntry, alSlotVportPortType=alSlotVportPortType, ipFilStatStatsEntry=ipFilStatStatsEntry, ipTemplateProtocol=ipTemplateProtocol, alRipDynReqsXmitted=alRipDynReqsXmitted, linkStatsEntry=linkStatsEntry, portMonSrcPort=portMonSrcPort, alVportPortType=alVportPortType, portConfigSrcRule=portConfigSrcRule, ripAccptFilEntry=ripAccptFilEntry, ipFilDynStatsTemplate=ipFilDynStatsTemplate, alRipDynShortPkts=alRipDynShortPkts, ipTemplateDstAddr=ipTemplateDstAddr, portMonViewDstPort=portMonViewDstPort, alTcpConnState=alTcpConnState, alSlotVportControllerType=alSlotVportControllerType, fiberStatsEntry=fiberStatsEntry, alBrRuleTable=alBrRuleTable, portStatsPktsIn=portStatsPktsIn, ipInterfaceBroadCast=ipInterfaceBroadCast, alip=alip, ipInterfaceState=ipInterfaceState, ripConfigRptDefaultRt=ripConfigRptDefaultRt, alBridgeEntryAddress=alBridgeEntryAddress, ipFilDynStatsTable=ipFilDynStatsTable, linkControlLinkTest=linkControlLinkTest, alRipDynRespXmitted=alRipDynRespXmitted, tcpFilDstPort=tcpFilDstPort, alArpDynReqsRcvd=alArpDynReqsRcvd, ipFilStatStatsOutBytes=ipFilStatStatsOutBytes, alIpInterfaceEntry=alIpInterfaceEntry, portStatsMultiCastPktsIn=portStatsMultiCastPktsIn, ripReportFilNumber=ripReportFilNumber, powerhub=powerhub, portMonDstPort=portMonDstPort, ipInterfaceSubnetMask=ipInterfaceSubnetMask, brRuleToNodePort=brRuleToNodePort, portStatsCurrUtilization=portStatsCurrUtilization, alArpDynRepliesRcvd=alArpDynRepliesRcvd, alRipStatBadVer=alRipStatBadVer, common=common, ipFilDynStatsInBytes=ipFilDynStatsInBytes, alPortConfigTable=alPortConfigTable, ipFilStatStatsTemplate=ipFilStatStatsTemplate, arpProxyEnable=arpProxyEnable, alRipDynRouteTimeOuts=alRipDynRouteTimeOuts, alArpProxyTable=alArpProxyTable, ripConfigRptStaticRt=ripConfigRptStaticRt, linkStatsRcvCollisions=linkStatsRcvCollisions, alPortToPortTable=alPortToPortTable, alPortMonitorClose=alPortMonitorClose, brRuleToNodeRule=brRuleToNodeRule, alArpStatReqsRcvd=alArpStatReqsRcvd, alRipReportFilTable=alRipReportFilTable, ripReportFilAddr=ripReportFilAddr, ipInterfacePktsIn=ipInterfacePktsIn, brTemplateComparator=brTemplateComparator, portConfigBlockLearnedEntries=portConfigBlockLearnedEntries, powerhub7000=powerhub7000, alIpRtCacheEntry=alIpRtCacheEntry, alVportSlotNumber=alVportSlotNumber, alSlotPowerOther=alSlotPowerOther, linkControlEnlState=linkControlEnlState, alArpStatRepliesSent=alArpStatRepliesSent, portStateStp=portStateStp, tcpFilNumber=tcpFilNumber, alBridgeEntry=alBridgeEntry, ipRuleEntry=ipRuleEntry, alRcpuTwoPromVer=alRcpuTwoPromVer, ipFilStatStatsInPkts=ipFilStatStatsInPkts, alPSTable=alPSTable, alSlotPower5=alSlotPower5, alSlotEntry=alSlotEntry, portStatsMulticastPktsOut=portStatsMulticastPktsOut, ripReportFilPort=ripReportFilPort, portLinkType=portLinkType, alchassis=alchassis, alArpDynInvalidOpcodes=alArpDynInvalidOpcodes, alArpDynRepliesSent=alArpDynRepliesSent, alIpRuleTable=alIpRuleTable, alFcpuOnePromVer=alFcpuOnePromVer, alSlotPower33=alSlotPower33, alRipDynBadVer=alRipDynBadVer, portMonViewMonitorPort=portMonViewMonitorPort, alSlotTable=alSlotTable, portMonTrafficType=portMonTrafficType, ipInterfaceCost=ipInterfaceCost, portMonViewSrcPort=portMonViewSrcPort, linkControlPartition=linkControlPartition, portMonitorEntry=portMonitorEntry, alPPSourecPort=alPPSourecPort, alBridgeTable=alBridgeTable, portStatsPktsOut=portStatsPktsOut, alSlotRevision=alSlotRevision, portStatsPeakUtilization=portStatsPeakUtilization, brRuleStatement=brRuleStatement, alRipStatPktsQueued=alRipStatPktsQueued, alRipStatRespXmitted=alRipStatRespXmitted, alRipConfigTable=alRipConfigTable, alTcpFilTable=alTcpFilTable, linkControlLink=linkControlLink, alSlotSerialNumber=alSlotSerialNumber, portStateEntry=portStateEntry, alRipStatBadSrcIp=alRipStatBadSrcIp, alRipstatsClear=alRipstatsClear, linkStatsGiantPkts=linkStatsGiantPkts, brRuleToNodeMacAddr=brRuleToNodeMacAddr, alVportNumber=alVportNumber, ripConfigAccptDefaultRt=ripConfigAccptDefaultRt, portStatsOctetsOut=portStatsOctetsOut, portToPortOctets=portToPortOctets, portStatsEntry=portStatsEntry, alTcpConnLocalAddress=alTcpConnLocalAddress, alSlotNumber=alSlotNumber, alRipDynPktsSelf=alRipDynPktsSelf, alPSNumber=alPSNumber, alBrTemplateTable=alBrTemplateTable, alRipStatRouteTimeOuts=alRipStatRouteTimeOuts, alSlotToVportTable=alSlotToVportTable, alRipDynPktsQueued=alRipDynPktsQueued, almgmt=almgmt, alRipStatPktsXmitted=alRipStatPktsXmitted, alSlotCardType=alSlotCardType, alBridgeEntryPort=alBridgeEntryPort, alMcpuRtVer=alMcpuRtVer, linkStatsOctetsIn=linkStatsOctetsIn, alRipStatShortPkts=alRipStatShortPkts, fiberStatsPort=fiberStatsPort, alBridgeEntryFlags=alBridgeEntryFlags, alSlotModel=alSlotModel, alTcpConnIdleTime=alTcpConnIdleTime, alRipDynBadSrcPort=alRipDynBadSrcPort, alReboot=alReboot, alRipStatFreeQueue=alRipStatFreeQueue, alVportControllerType=alVportControllerType, linkControlEntry=linkControlEntry, ipFilDynStatsEntry=ipFilDynStatsEntry, brTemplateOffset=brTemplateOffset, alTcpConnRemPort=alTcpConnRemPort, alFcpuTwoPromVer=alFcpuTwoPromVer, ipInterfaceOctetsIn=ipInterfaceOctetsIn, ipInterfacePktsOut=ipInterfacePktsOut, alRipDynPktsXmitted=alRipDynPktsXmitted, ipFilStatStatsInBytes=ipFilStatStatsInBytes, ripConfigEntry=ripConfigEntry, alLinkStatsTable=alLinkStatsTable, ipInterfaceNumber=ipInterfaceNumber, portStatsPort=portStatsPort, alVportTable=alVportTable, brGroupName=brGroupName, linkControlPort=linkControlPort, linkStatsBMCastPktsIn=linkStatsBMCastPktsIn, portConfigPort=portConfigPort, ipTemplateDstPort=ipTemplateDstPort, alPortStateTable=alPortStateTable, alRipStatRespRcvd=alRipStatRespRcvd, ipAcsCtrlEntry=ipAcsCtrlEntry, alBridgeTblClear=alBridgeTblClear, alrip=alrip, alipx=alipx, brTemplateMask=brTemplateMask, alPortMonitorViewTable=alPortMonitorViewTable, alPPDestinationPort=alPPDestinationPort, portConfigEntry=portConfigEntry, linkStatsPort=linkStatsPort, ipRtCacheDstAddress=ipRtCacheDstAddress, alTcpConnTable=alTcpConnTable, portToPortEntry=portToPortEntry, tcpFilSrcAddr=tcpFilSrcAddr, alArpStatInvalidOpcodes=alArpStatInvalidOpcodes, brRuleNumber=brRuleNumber, ipRtCacheClear=ipRtCacheClear, ipTemplateOperator=ipTemplateOperator, alRipStatReqsRcvd=alRipStatReqsRcvd, alRipAccptFilTable=alRipAccptFilTable, ipInterfaceMtu=ipInterfaceMtu, ipInterfaceAddress=ipInterfaceAddress, alLinkStatsCollect=alLinkStatsCollect, alsystem=alsystem, alBridgeEntryRule=alBridgeEntryRule, alArpTableClear=alArpTableClear, alArpStatRequestsSent=alArpStatRequestsSent)
mibBuilder.exportSymbols("ALANTEC-MIB", alPortLinkTable=alPortLinkTable, alPortMonitorTable=alPortMonitorTable, alRipDynPktsRcvd=alRipDynPktsRcvd, alChassisType=alChassisType, alBrRuleToNodeTable=alBrRuleToNodeTable, arpProxyPort=arpProxyPort, alSlotVportNumber=alSlotVportNumber, portStatsLossOfCarrier=portStatsLossOfCarrier, linkStatsFCSErrs=linkStatsFCSErrs, albridge=albridge, portLinkEntry=portLinkEntry, alTcpConnEntry=alTcpConnEntry, alSlotVportSlotNumber=alSlotVportSlotNumber, brGroupNumber=brGroupNumber, alTcpConnId=alTcpConnId, alRcpuOnePromVer=alRcpuOnePromVer, ipAcsCtrlDelete=ipAcsCtrlDelete, alSlotDeviation=alSlotDeviation, portStatsExcessRetries=portStatsExcessRetries, MacAddress=MacAddress, aldecnet=aldecnet, alRipDynBadSrcIp=alRipDynBadSrcIp, linkStatsPktsIn=linkStatsPktsIn, portStatsTotalCollisions=portStatsTotalCollisions, alVportPortNumber=alVportPortNumber, ripAccptFilAddr=ripAccptFilAddr, alFiberStatsTable=alFiberStatsTable, alArpDynRequestsSent=alArpDynRequestsSent, ripConfigPort=ripConfigPort, fiberAuiStatus=fiberAuiStatus, portStatsXmitQLen=portStatsXmitQLen, ipFilDynStatsOutPkts=ipFilDynStatsOutPkts, alRipDynBadZeroes=alRipDynBadZeroes, alTcpDisconnectInt=alTcpDisconnectInt, alIpInterfaceTable=alIpInterfaceTable, ipAcsCtrlTable=ipAcsCtrlTable, alPSEntry=alPSEntry, alRcpuTwoRtVer=alRcpuTwoRtVer, tcpFilSrcMask=tcpFilSrcMask, alBridgePPControl=alBridgePPControl, brRuleEntry=brRuleEntry, alCpuSlot=alCpuSlot, ipTemplateDelete=ipTemplateDelete, alBridgeStatsClear=alBridgeStatsClear, ipTemplateSrcMask=ipTemplateSrcMask, ipRtCachePort=ipRtCachePort, alIpRtCacheTable=alIpRtCacheTable, alSlotVportPortNumber=alSlotVportPortNumber, alLinkControlTable=alLinkControlTable, alTcpShortSegRcvd=alTcpShortSegRcvd, alFcpuTwoRtVer=alFcpuTwoRtVer, portStatsRcvCollisions=portStatsRcvCollisions, alMcpuPromVer=alMcpuPromVer, ipRuleDelete=ipRuleDelete, linkStatsLink=linkStatsLink, alBrGroupTable=alBrGroupTable, ipFilDynStatsInPkts=ipFilDynStatsInPkts, portStateMgmt=portStateMgmt, portStatsXmitBuffErrs=portStatsXmitBuffErrs, alTcpConnLocalPort=alTcpConnLocalPort, portToPortPackets=portToPortPackets, alSlotVportEntry=alSlotVportEntry, ipTemplateDstMask=ipTemplateDstMask, brGroupPortsMask=brGroupPortsMask, ripAccptFilPort=ripAccptFilPort, ipRuleNumber=ipRuleNumber, alsnmp=alsnmp, alPortStatsTable=alPortStatsTable, alTcpStatsClear=alTcpStatsClear, alSlotIssue=alSlotIssue)
