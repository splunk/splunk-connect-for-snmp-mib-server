#
# PySNMP MIB module ECS2100-28PP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ECS2100-28PP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:44:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
dot1dStpPortEntry, Timeout, BridgeId, dot1dStpPort = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPortEntry", "Timeout", "BridgeId", "dot1dStpPort")
dot1agCfmMdIndex, dot1agCfmMepDbRMepIdentifier, Dot1agCfmMepId, dot1agCfmMepIdentifier, dot1agCfmMaIndex = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "dot1agCfmMdIndex", "dot1agCfmMepDbRMepIdentifier", "Dot1agCfmMepId", "dot1agCfmMepIdentifier", "dot1agCfmMaIndex")
dot1xAuthConfigEntry, = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "dot1xAuthConfigEntry")
ifIndex, InterfaceIndex, ifOperStatus = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex", "ifOperStatus")
InetAddressType, InetAddress, InetAddressIPv6 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetAddressIPv6")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
pethMainPseEntry, pethPsePortEntry = mibBuilder.importSymbols("POWER-ETHERNET-MIB", "pethMainPseEntry", "pethPsePortEntry")
dot1qVlanStaticEntry, VlanIndex, PortList, dot1vProtocolPortEntry, VlanId = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanStaticEntry", "VlanIndex", "PortList", "dot1vProtocolPortEntry", "VlanId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, TimeTicks, Counter32, ModuleIdentity, Counter64, NotificationType, IpAddress, Bits, Gauge32, enterprises, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "TimeTicks", "Counter32", "ModuleIdentity", "Counter64", "NotificationType", "IpAddress", "Bits", "Gauge32", "enterprises", "Unsigned32")
TruthValue, MacAddress, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "DisplayString", "RowStatus", "TextualConvention")
accton = MibIdentifier((1, 3, 6, 1, 4, 1, 259))
edgecoreNetworks = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10))
edgecoreNetworksMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1))
ecs2100_28ppMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 259, 10, 1, 43)).setLabel("ecs2100-28ppMIB")
ecs2100_28ppMIB.setRevisions(('2015-08-27 00:00',))
if mibBuilder.loadTexts: ecs2100_28ppMIB.setLastUpdated('201508270000Z')
if mibBuilder.loadTexts: ecs2100_28ppMIB.setOrganization('Edgecore Networks, Inc.')
ecs2100_28ppMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1)).setLabel("ecs2100-28ppMIBObjects")
ecs2100_28ppNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2)).setLabel("ecs2100-28ppNotifications")
switchMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1))
portMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2))
trunkMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3))
lacpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 4))
staMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5))
restartMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 7))
mirrorMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8))
igmpSnoopMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9))
ipMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10))
vlanMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12))
priorityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13))
trapDestMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14))
qosMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16))
securityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17))
sysLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19))
lineMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20))
sysTimeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23))
fileMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24))
poeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28))
stormMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33))
sysResourceMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39))
mvrMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44))
dhcpSnoopMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46))
ipSrcGuardMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48))
mldSnoopMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54))
dynamicArpInspectionMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56))
timeRangeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61))
lbdMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63))
ecs2100_10t = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 101)).setLabel("ecs2100-10t")
ecs2100_10pe = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 102)).setLabel("ecs2100-10pe")
ecs2100_10p = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 103)).setLabel("ecs2100-10p")
ecs2100_28t = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 104)).setLabel("ecs2100-28t")
ecs2100_28p = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 105)).setLabel("ecs2100-28p")
ecs2100_28pp = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 106)).setLabel("ecs2100-28pp")
ecs2100_52t = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 107)).setLabel("ecs2100-52t")
ecs2110_26t = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 108)).setLabel("ecs2110-26t")
class KeySegment(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 128)

class ValidStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("valid", 1), ("invalid", 2))

class StaPathCostMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("short", 1), ("long", 2))

switchNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchNumber.setStatus('current')
switchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3), )
if mibBuilder.loadTexts: switchInfoTable.setStatus('current')
switchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "swUnitIndex"))
if mibBuilder.loadTexts: switchInfoEntry.setStatus('current')
swUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: swUnitIndex.setStatus('current')
swHardwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHardwareVer.setStatus('current')
swMicrocodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMicrocodeVer.setStatus('current')
swLoaderVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLoaderVer.setStatus('current')
swBootRomVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBootRomVer.setStatus('current')
swOpCodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swOpCodeVer.setStatus('current')
swPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortNumber.setStatus('current')
swPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internalPower", 1), ("redundantPower", 2), ("internalAndRedundantPower", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPowerStatus.setStatus('current')
swRoleInSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("backupMaster", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRoleInSystem.setStatus('current')
swSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSerialNumber.setStatus('current')
swServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swServiceTag.setStatus('current')
swModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swModelNumber.setStatus('current')
swEpldVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEpldVer.setStatus('current')
switchOperState = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("noncritical", 4), ("critical", 5), ("nonrecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchOperState.setStatus('current')
switchProductId = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 5))
swProdName = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdName.setStatus('current')
swProdManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdManufacturer.setStatus('current')
swProdDescription = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdDescription.setStatus('current')
swProdVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdVersion.setStatus('current')
swProdUrl = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdUrl.setStatus('current')
swIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIdentifier.setStatus('current')
swChassisServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swChassisServiceTag.setStatus('current')
switchIndivPowerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 6), )
if mibBuilder.loadTexts: switchIndivPowerTable.setStatus('current')
switchIndivPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 6, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "swIndivPowerUnitIndex"), (0, "ECS2100-28PP-MIB", "swIndivPowerIndex"))
if mibBuilder.loadTexts: switchIndivPowerEntry.setStatus('current')
swIndivPowerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swIndivPowerUnitIndex.setStatus('current')
swIndivPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internalPower", 1), ("externalPower", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swIndivPowerIndex.setStatus('current')
swIndivPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("green", 2), ("red", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivPowerStatus.setStatus('current')
switchJumboFrameStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchJumboFrameStatus.setStatus('current')
amtrMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 8))
amtrMacAddrAgingStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 8, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amtrMacAddrAgingStatus.setStatus('current')
portTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1), )
if mibBuilder.loadTexts: portTable.setStatus('current')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: portIndex.setStatus('current')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setStatus('current')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("hundredBaseTX", 2), ("hundredBaseFX", 3), ("thousandBaseSX", 4), ("thousandBaseLX", 5), ("thousandBaseT", 6), ("thousandBaseGBIC", 7), ("thousandBaseSfp", 8), ("hundredBaseFxScSingleMode", 9), ("hundredBaseFxScMultiMode", 10), ("thousandBaseCX", 11), ("tenG", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
portSpeedDpxCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("reserved", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7), ("halfDuplex10g", 8), ("fullDuplex10g", 9))).clone('halfDuplex10')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpeedDpxCfg.setStatus('current')
portFlowCtrlCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("tx", 5), ("rx", 6))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowCtrlCfg.setStatus('current')
portCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 6), Bits().clone(namedValues=NamedValues(("portCap10half", 0), ("portCap10full", 1), ("portCap100half", 2), ("portCap100full", 3), ("portCap1000half", 4), ("portCap1000full", 5), ("portCap10gHalf", 6), ("portCap10gFull", 7), ("reserved8", 8), ("reserved9", 9), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("portCapSym", 14), ("portCapFlowCtrl", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCapabilities.setStatus('current')
portAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 7), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAutonegotiation.setStatus('current')
portSpeedDpxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("error", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7), ("halfDuplex10g", 8), ("fullDuplex10g", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeedDpxStatus.setStatus('current')
portFlowCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 1), ("backPressure", 2), ("dot3xFlowControl", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFlowCtrlStatus.setStatus('current')
portTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTrunkIndex.setStatus('current')
portComboForcedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("reserved2", 2), ("reserved3", 3), ("sfpForced", 4), ("reserved5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portComboForcedMode.setStatus('current')
portMasterSlaveModeCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("auto", 3), ("autoPreferMaster", 4), ("autoPreferSlave", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMasterSlaveModeCfg.setStatus('current')
portMacAddrLearningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 17), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMacAddrLearningStatus.setStatus('current')
portMacAddrLearningCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMacAddrLearningCount.setStatus('current')
portUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portUpTime.setStatus('current')
portShutdownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 20), Bits().clone(namedValues=NamedValues(("admin", 0), ("stpLbd", 1), ("stpBpduGuard", 2), ("networkAccessPortLinkDetection", 3), ("networkAccessPortDynamicQos", 4), ("portSec", 5), ("lbd", 6), ("atcBstorm", 7), ("atcMstorm", 8), ("udld", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portShutdownReason.setStatus('current')
cableDiagMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3))
cableDiagCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableDiagCtlAction.setStatus('current')
cableDiagResultTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2), )
if mibBuilder.loadTexts: cableDiagResultTable.setStatus('current')
cableDiagResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "cableDiagResultIfIndex"))
if mibBuilder.loadTexts: cableDiagResultEntry.setStatus('current')
cableDiagResultIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cableDiagResultIfIndex.setStatus('current')
cableDiagResultStatusPairA = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notTestedYet", 1), ("ok", 2), ("open", 3), ("short", 4), ("impedanceMismatch", 8), ("failed", 9), ("notSupported", 10), ("noCable", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagResultStatusPairA.setStatus('current')
cableDiagResultStatusPairB = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notTestedYet", 1), ("ok", 2), ("open", 3), ("short", 4), ("impedanceMismatch", 8), ("failed", 9), ("notSupported", 10), ("noCable", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagResultStatusPairB.setStatus('current')
cableDiagResultStatusPairC = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notTestedYet", 1), ("ok", 2), ("open", 3), ("short", 4), ("impedanceMismatch", 8), ("failed", 9), ("notSupported", 10), ("noCable", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagResultStatusPairC.setStatus('current')
cableDiagResultStatusPairD = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notTestedYet", 1), ("ok", 2), ("open", 3), ("short", 4), ("impedanceMismatch", 8), ("failed", 9), ("notSupported", 10), ("noCable", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagResultStatusPairD.setStatus('current')
cableDiagResultDistancePairA = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagResultDistancePairA.setStatus('current')
cableDiagResultDistancePairB = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagResultDistancePairB.setStatus('current')
cableDiagResultDistancePairC = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagResultDistancePairC.setStatus('current')
cableDiagResultDistancePairD = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagResultDistancePairD.setStatus('current')
cableDiagResultTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagResultTime.setStatus('current')
portUtilTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 6), )
if mibBuilder.loadTexts: portUtilTable.setStatus('current')
portUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 6, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "portUtilIfIndex"))
if mibBuilder.loadTexts: portUtilEntry.setStatus('current')
portUtilIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: portUtilIfIndex.setStatus('current')
portInOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInOctetRate.setStatus('current')
portInPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInPacketRate.setStatus('current')
portInUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInUtil.setStatus('current')
portOutOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOutOctetRate.setStatus('current')
portOutPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOutPacketRate.setStatus('current')
portOutUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOutUtil.setStatus('current')
portHist = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8))
portHistControlTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 1), )
if mibBuilder.loadTexts: portHistControlTable.setStatus('current')
portHistControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "portHistControlIndex"))
if mibBuilder.loadTexts: portHistControlEntry.setStatus('current')
portHistControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistControlIndex.setStatus('current')
portHistControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portHistControlName.setStatus('current')
portHistControlDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 1, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portHistControlDataSource.setStatus('current')
portHistControlInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(1)).setUnits('Minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: portHistControlInterval.setStatus('current')
portHistControlBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portHistControlBucketsRequested.setStatus('current')
portHistControlBucketsGranted = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistControlBucketsGranted.setStatus('current')
portHistControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portHistControlStatus.setStatus('current')
portHistCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2), )
if mibBuilder.loadTexts: portHistCurrentTable.setStatus('current')
portHistCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "portHistCurrentIndex"))
if mibBuilder.loadTexts: portHistCurrentEntry.setStatus('current')
portHistCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentIndex.setStatus('current')
portHistCurrentSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentSampleIndex.setStatus('current')
portHistCurrentIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentIntervalStart.setStatus('current')
portHistCurrentInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentInOctets.setStatus('current')
portHistCurrentInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentInUcastPkts.setStatus('current')
portHistCurrentInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentInMulticastPkts.setStatus('current')
portHistCurrentInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentInBroadcastPkts.setStatus('current')
portHistCurrentInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentInDiscards.setStatus('current')
portHistCurrentInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentInErrors.setStatus('current')
portHistCurrentInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentInUnknownProtos.setStatus('current')
portHistCurrentOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentOutOctets.setStatus('current')
portHistCurrentOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentOutUcastPkts.setStatus('current')
portHistCurrentOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentOutMulticastPkts.setStatus('current')
portHistCurrentOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentOutBroadcastPkts.setStatus('current')
portHistCurrentOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentOutDiscards.setStatus('current')
portHistCurrentOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentOutErrors.setStatus('current')
portHistCurrentInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentInUtilization.setStatus('current')
portHistCurrentOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentOutUtilization.setStatus('current')
portHistPreviousTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3), )
if mibBuilder.loadTexts: portHistPreviousTable.setStatus('current')
portHistPreviousEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "portHistPreviousIndex"), (0, "ECS2100-28PP-MIB", "portHistPreviousSampleIndex"))
if mibBuilder.loadTexts: portHistPreviousEntry.setStatus('current')
portHistPreviousIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousIndex.setStatus('current')
portHistPreviousSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousSampleIndex.setStatus('current')
portHistPreviousIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousIntervalStart.setStatus('current')
portHistPreviousInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousInOctets.setStatus('current')
portHistPreviousInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousInUcastPkts.setStatus('current')
portHistPreviousInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousInMulticastPkts.setStatus('current')
portHistPreviousInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousInBroadcastPkts.setStatus('current')
portHistPreviousInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousInDiscards.setStatus('current')
portHistPreviousInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousInErrors.setStatus('current')
portHistPreviousInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousInUnknownProtos.setStatus('current')
portHistPreviousOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousOutOctets.setStatus('current')
portHistPreviousOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousOutUcastPkts.setStatus('current')
portHistPreviousOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousOutMulticastPkts.setStatus('current')
portHistPreviousOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousOutBroadcastPkts.setStatus('current')
portHistPreviousOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousOutDiscards.setStatus('current')
portHistPreviousOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousOutErrors.setStatus('current')
portHistPreviousInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousInUtilization.setStatus('current')
portHistPreviousOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousOutUtilization.setStatus('current')
portMediaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10), )
if mibBuilder.loadTexts: portMediaInfoTable.setStatus('current')
portMediaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "portMediaInfoIfIndex"))
if mibBuilder.loadTexts: portMediaInfoEntry.setStatus('current')
portMediaInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: portMediaInfoIfIndex.setStatus('current')
portMediaInfoConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoConnectorType.setStatus('current')
portMediaInfoFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoFiberType.setStatus('current')
portMediaInfoEthComplianceCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoEthComplianceCodes.setStatus('current')
portMediaInfoBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoBaudRate.setStatus('current')
portMediaInfoVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoVendorOUI.setStatus('current')
portMediaInfoVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoVendorName.setStatus('current')
portMediaInfoPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoPartNumber.setStatus('current')
portMediaInfoRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoRevision.setStatus('current')
portMediaInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoSerialNumber.setStatus('current')
portMediaInfoDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoDateCode.setStatus('current')
portOpticalMonitoringInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 11), )
if mibBuilder.loadTexts: portOpticalMonitoringInfoTable.setStatus('current')
portOpticalMonitoringInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 11, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "portOpticalMonitoringInfoIfIndex"))
if mibBuilder.loadTexts: portOpticalMonitoringInfoEntry.setStatus('current')
portOpticalMonitoringInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 11, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: portOpticalMonitoringInfoIfIndex.setStatus('current')
portOpticalMonitoringInfoTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOpticalMonitoringInfoTemperature.setStatus('current')
portOpticalMonitoringInfoVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOpticalMonitoringInfoVcc.setStatus('current')
portOpticalMonitoringInfoTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOpticalMonitoringInfoTxBiasCurrent.setStatus('current')
portOpticalMonitoringInfoTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 11, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOpticalMonitoringInfoTxPower.setStatus('current')
portOpticalMonitoringInfoRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 11, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOpticalMonitoringInfoRxPower.setStatus('current')
portTransceiverThresholdInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12), )
if mibBuilder.loadTexts: portTransceiverThresholdInfoTable.setStatus('current')
portTransceiverThresholdInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "portTransceiverThresholdInfoIfIndex"))
if mibBuilder.loadTexts: portTransceiverThresholdInfoEntry.setStatus('current')
portTransceiverThresholdInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: portTransceiverThresholdInfoIfIndex.setStatus('current')
portTransceiverThresholdInfoTemperatureLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTemperatureLowAlarm.setStatus('current')
portTransceiverThresholdInfoTemperatureLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTemperatureLowWarn.setStatus('current')
portTransceiverThresholdInfoTemperatureHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTemperatureHighWarn.setStatus('current')
portTransceiverThresholdInfoTemperatureHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTemperatureHighAlarm.setStatus('current')
portTransceiverThresholdInfoVccLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoVccLowAlarm.setStatus('current')
portTransceiverThresholdInfoVccLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoVccLowWarn.setStatus('current')
portTransceiverThresholdInfoVccHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoVccHighWarn.setStatus('current')
portTransceiverThresholdInfoVccHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoVccHighAlarm.setStatus('current')
portTransceiverThresholdInfoTxBiasCurrentLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxBiasCurrentLowAlarm.setStatus('current')
portTransceiverThresholdInfoTxBiasCurrentLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxBiasCurrentLowWarn.setStatus('current')
portTransceiverThresholdInfoTxBiasCurrentHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxBiasCurrentHighWarn.setStatus('current')
portTransceiverThresholdInfoTxBiasCurrentHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxBiasCurrentHighAlarm.setStatus('current')
portTransceiverThresholdInfoTxPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxPowerLowAlarm.setStatus('current')
portTransceiverThresholdInfoTxPowerLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxPowerLowWarn.setStatus('current')
portTransceiverThresholdInfoTxPowerHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxPowerHighWarn.setStatus('current')
portTransceiverThresholdInfoTxPowerHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxPowerHighAlarm.setStatus('current')
portTransceiverThresholdInfoRxPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoRxPowerLowAlarm.setStatus('current')
portTransceiverThresholdInfoRxPowerLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoRxPowerLowWarn.setStatus('current')
portTransceiverThresholdInfoRxPowerHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoRxPowerHighWarn.setStatus('current')
portTransceiverThresholdInfoRxPowerHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoRxPowerHighAlarm.setStatus('current')
portTransceiverThresholdAutoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdAutoMode.setStatus('current')
powerSavingTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 14), )
if mibBuilder.loadTexts: powerSavingTable.setStatus('current')
powerSavingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 14, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "powerSavingIfIndex"))
if mibBuilder.loadTexts: powerSavingEntry.setStatus('current')
powerSavingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 14, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: powerSavingIfIndex.setStatus('current')
powerSavingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 14, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSavingStatus.setStatus('current')
trunkMaxId = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkMaxId.setStatus('current')
trunkValidNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkValidNumber.setStatus('current')
trunkTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3, 3), )
if mibBuilder.loadTexts: trunkTable.setStatus('current')
trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "trunkIndex"))
if mibBuilder.loadTexts: trunkEntry.setStatus('current')
trunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28)))
if mibBuilder.loadTexts: trunkIndex.setStatus('current')
trunkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3, 3, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkPorts.setStatus('current')
trunkCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkCreation.setStatus('current')
trunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3, 3, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkStatus.setStatus('current')
trunkBalanceMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("macSrc", 1), ("macDst", 2), ("macSrcDst", 3), ("ipSrc", 4), ("ipDst", 5), ("ipSrcDst", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkBalanceMode.setStatus('current')
lacpPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 4, 1), )
if mibBuilder.loadTexts: lacpPortTable.setStatus('current')
lacpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 4, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "lacpPortIndex"))
if mibBuilder.loadTexts: lacpPortEntry.setStatus('current')
lacpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: lacpPortIndex.setStatus('current')
lacpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 4, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpPortStatus.setStatus('current')
staSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 1), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staSystemStatus.setStatus('current')
staPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2), )
if mibBuilder.loadTexts: staPortTable.setStatus('current')
staPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1), )
dot1dStpPortEntry.registerAugmentions(("ECS2100-28PP-MIB", "staPortEntry"))
staPortEntry.setIndexNames(*dot1dStpPortEntry.getIndexNames())
if mibBuilder.loadTexts: staPortEntry.setStatus('current')
staPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortProtocolMigration.setStatus('current')
staPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperEdgePort.setStatus('current')
staPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminPointToPoint.setStatus('current')
staPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperPointToPoint.setStatus('current')
staPortSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 9), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortSystemStatus.setStatus('current')
staPortLongAdminPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortLongAdminPathCost.setStatus('current')
staPortLongOperPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortLongOperPathCost.setStatus('current')
staPortBpduFlooding = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 12), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortBpduFlooding.setStatus('current')
staPortBpduGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 15), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortBpduGuard.setStatus('current')
staPortAdminEdgePortWithAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminEdgePortWithAuto.setStatus('current')
staPortBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 17), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortBpduFilter.setStatus('current')
staPortRootGuardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 18), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortRootGuardStatus.setStatus('current')
staPortBpduGuardAutoRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 19), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortBpduGuardAutoRecovery.setStatus('current')
staPortBpduGuardAutoRecoveryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortBpduGuardAutoRecoveryInterval.setStatus('current')
staPortTcPropStop = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortTcPropStop.setStatus('current')
staProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stp", 1), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staProtocolType.setStatus('current')
staTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staTxHoldCount.setStatus('current')
staPathCostMethod = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 5), StaPathCostMode().clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPathCostMethod.setStatus('current')
xstMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6))
mstName = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstName.setStatus('current')
mstRevision = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstRevision.setStatus('current')
mstMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMaxHops.setStatus('current')
xstInstanceCfgTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4), )
if mibBuilder.loadTexts: xstInstanceCfgTable.setStatus('current')
xstInstanceCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "xstInstanceCfgIndex"))
if mibBuilder.loadTexts: xstInstanceCfgEntry.setStatus('current')
xstInstanceCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: xstInstanceCfgIndex.setStatus('current')
xstInstanceCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstanceCfgPriority.setStatus('current')
xstInstanceCfgTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTimeSinceTopologyChange.setStatus('current')
xstInstanceCfgTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTopChanges.setStatus('current')
xstInstanceCfgDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgDesignatedRoot.setStatus('current')
xstInstanceCfgRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgRootCost.setStatus('current')
xstInstanceCfgRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgRootPort.setStatus('current')
xstInstanceCfgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 8), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgMaxAge.setStatus('current')
xstInstanceCfgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 9), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgHelloTime.setStatus('current')
xstInstanceCfgHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 10), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgHoldTime.setStatus('current')
xstInstanceCfgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgForwardDelay.setStatus('current')
xstInstanceCfgBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeMaxAge.setStatus('current')
xstInstanceCfgBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 13), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeHelloTime.setStatus('current')
xstInstanceCfgBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeForwardDelay.setStatus('current')
xstInstanceCfgTxHoldCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTxHoldCount.setStatus('current')
xstInstanceCfgPathCostMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 16), StaPathCostMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgPathCostMethod.setStatus('current')
xstInstancePortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5), )
if mibBuilder.loadTexts: xstInstancePortTable.setStatus('current')
xstInstancePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "xstInstanceCfgIndex"), (0, "BRIDGE-MIB", "dot1dStpPort"))
if mibBuilder.loadTexts: xstInstancePortEntry.setStatus('current')
xstInstancePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstancePortPriority.setStatus('current')
xstInstancePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortState.setStatus('current')
xstInstancePortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 5), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortEnable.setStatus('current')
xstInstancePortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedRoot.setStatus('current')
xstInstancePortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedCost.setStatus('current')
xstInstancePortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedBridge.setStatus('current')
xstInstancePortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedPort.setStatus('current')
xstInstancePortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortForwardTransitions.setStatus('current')
xstInstancePortPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("root", 2), ("designated", 3), ("alternate", 4), ("backup", 5), ("master", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortPortRole.setStatus('current')
xstInstancePortAdminPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstancePortAdminPathCost.setStatus('current')
xstInstancePortOperPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortOperPathCost.setStatus('current')
mstInstanceEditTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 6), )
if mibBuilder.loadTexts: mstInstanceEditTable.setStatus('current')
mstInstanceEditEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 6, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mstInstanceEditIndex"))
if mibBuilder.loadTexts: mstInstanceEditEntry.setStatus('current')
mstInstanceEditIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: mstInstanceEditIndex.setStatus('current')
mstInstanceEditVlansMap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap.setStatus('current')
mstInstanceEditVlansMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap2k.setStatus('current')
mstInstanceEditVlansMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap3k.setStatus('current')
mstInstanceEditVlansMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap4k.setStatus('current')
mstInstanceEditRemainingHops = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceEditRemainingHops.setStatus('current')
mstInstanceOperTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 7), )
if mibBuilder.loadTexts: mstInstanceOperTable.setStatus('current')
mstInstanceOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 7, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mstInstanceOperIndex"))
if mibBuilder.loadTexts: mstInstanceOperEntry.setStatus('current')
mstInstanceOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: mstInstanceOperIndex.setStatus('current')
mstInstanceOperVlansMap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap.setStatus('current')
mstInstanceOperVlansMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap2k.setStatus('current')
mstInstanceOperVlansMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap3k.setStatus('current')
mstInstanceOperVlansMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap4k.setStatus('current')
staLoopbackDetectionPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 8), )
if mibBuilder.loadTexts: staLoopbackDetectionPortTable.setStatus('current')
staLoopbackDetectionPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 8, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "staLoopbackDetectionPortIfIndex"))
if mibBuilder.loadTexts: staLoopbackDetectionPortEntry.setStatus('current')
staLoopbackDetectionPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 8, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: staLoopbackDetectionPortIfIndex.setStatus('current')
staLoopbackDetectionPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 8, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staLoopbackDetectionPortStatus.setStatus('current')
staLoopbackDetectionPortTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 8, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staLoopbackDetectionPortTrapStatus.setStatus('current')
staLoopbackDetectionPortReleaseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staLoopbackDetectionPortReleaseMode.setStatus('current')
staLoopbackDetectionPortRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noRelease", 1), ("release", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staLoopbackDetectionPortRelease.setStatus('current')
staLoopbackDetectionPortShutdownInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staLoopbackDetectionPortShutdownInterval.setStatus('current')
staSystemBPDUFlooding = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("to-vlan", 1), ("to-all", 2))).clone('to-vlan')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staSystemBPDUFlooding.setStatus('current')
staCiscoPrestandardCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 11), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staCiscoPrestandardCompatibility.setStatus('current')
restartOpCodeFile = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartOpCodeFile.setStatus('current')
restartConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartConfigFile.setStatus('current')
restartControl = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("warmBoot", 2), ("coldBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartControl.setStatus('current')
mirrorTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 1), )
if mibBuilder.loadTexts: mirrorTable.setStatus('current')
mirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mirrorDestinationPort"), (0, "ECS2100-28PP-MIB", "mirrorSourcePort"))
if mibBuilder.loadTexts: mirrorEntry.setStatus('current')
mirrorDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: mirrorDestinationPort.setStatus('current')
mirrorSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: mirrorSourcePort.setStatus('current')
mirrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorType.setStatus('current')
mirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 1, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorStatus.setStatus('current')
rspanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3), )
if mibBuilder.loadTexts: rspanTable.setStatus('current')
rspanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "rspanSessionId"))
if mibBuilder.loadTexts: rspanEntry.setStatus('current')
rspanSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: rspanSessionId.setStatus('current')
rspanSrcTxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rspanSrcTxPorts.setStatus('current')
rspanSrcRxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rspanSrcRxPorts.setStatus('current')
rspanDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rspanDstPort.setStatus('current')
rspanDstPortTag = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("untagged", 2), ("tagged", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rspanDstPortTag.setStatus('current')
rspanSwitchRole = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("source", 2), ("intermediate", 3), ("destination", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rspanSwitchRole.setStatus('current')
rspanRemotePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 7), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rspanRemotePorts.setStatus('current')
rspanRemoteVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rspanRemoteVlanId.setStatus('current')
rspanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rspanOperStatus.setStatus('current')
rspanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 10), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rspanStatus.setStatus('current')
igmpSnoopStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 1), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopStatus.setStatus('current')
igmpSnoopQuerier = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 2), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQuerier.setStatus('current')
igmpSnoopRouterPortExpireTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 500)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopRouterPortExpireTime.setStatus('current')
igmpSnoopVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopVersion.setStatus('current')
igmpSnoopRouterCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 8), )
if mibBuilder.loadTexts: igmpSnoopRouterCurrentTable.setStatus('current')
igmpSnoopRouterCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 8, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopRouterCurrentVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterCurrentEntry.setStatus('current')
igmpSnoopRouterCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopRouterCurrentVlanIndex.setStatus('current')
igmpSnoopRouterCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 8, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterCurrentPorts.setStatus('current')
igmpSnoopRouterCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 8, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterCurrentStatus.setStatus('current')
igmpSnoopRouterStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 9), )
if mibBuilder.loadTexts: igmpSnoopRouterStaticTable.setStatus('current')
igmpSnoopRouterStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 9, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopRouterStaticVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterStaticEntry.setStatus('current')
igmpSnoopRouterStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopRouterStaticVlanIndex.setStatus('current')
igmpSnoopRouterStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 9, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopRouterStaticPorts.setStatus('current')
igmpSnoopRouterStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 9, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopRouterStaticStatus.setStatus('current')
igmpSnoopMulticastStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 11), )
if mibBuilder.loadTexts: igmpSnoopMulticastStaticTable.setStatus('current')
igmpSnoopMulticastStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 11, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopMulticastStaticVlanIndex"), (0, "ECS2100-28PP-MIB", "igmpSnoopMulticastStaticIpAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastStaticEntry.setStatus('current')
igmpSnoopMulticastStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopMulticastStaticVlanIndex.setStatus('current')
igmpSnoopMulticastStaticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 11, 1, 2), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastStaticIpAddress.setStatus('current')
igmpSnoopMulticastStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 11, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticPorts.setStatus('current')
igmpSnoopMulticastStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 11, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticStatus.setStatus('current')
igmpSnoopCurrentVlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14), )
if mibBuilder.loadTexts: igmpSnoopCurrentVlanTable.setStatus('current')
igmpSnoopCurrentVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopCurrentVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopCurrentVlanEntry.setStatus('current')
igmpSnoopCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 1), VlanIndex())
if mibBuilder.loadTexts: igmpSnoopCurrentVlanIndex.setStatus('current')
igmpSnoopCurrentVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanStatus.setStatus('current')
igmpSnoopCurrentVlanImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanImmediateLeave.setStatus('current')
igmpSnoopCurrentVlanGeneralQuerySuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanGeneralQuerySuppression.setStatus('current')
igmpSnoopCurrentVlanLastMemQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanLastMemQueryCount.setStatus('current')
igmpSnoopCurrentVlanLastMemQueryIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31744))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanLastMemQueryIntvl.setStatus('current')
igmpSnoopCurrentVlanProxyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanProxyAddress.setStatus('current')
igmpSnoopCurrentVlanQueryIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 31744))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanQueryIntvl.setStatus('current')
igmpSnoopCurrentVlanQueryRespIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 31740))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanQueryRespIntvl.setStatus('current')
igmpSnoopCurrentVlanProxyReporting = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("default", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanProxyReporting.setStatus('current')
igmpSnoopCurrentVlanVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanVersion.setStatus('current')
igmpSnoopCurrentVlanVersionExclusive = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 12), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanVersionExclusive.setStatus('current')
igmpSnoopCurrentVlanImmediateLeaveByHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 14), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanImmediateLeaveByHostIp.setStatus('current')
igmpSnoopMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 15), )
if mibBuilder.loadTexts: igmpSnoopMulticastGroupTable.setStatus('current')
igmpSnoopMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 15, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopMulticastGroupVlanIndex"), (0, "ECS2100-28PP-MIB", "igmpSnoopMulticastGroupIpAddress"), (0, "ECS2100-28PP-MIB", "igmpSnoopMulticastGroupSourceIPAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastGroupEntry.setStatus('current')
igmpSnoopMulticastGroupVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 15, 1, 1), VlanIndex())
if mibBuilder.loadTexts: igmpSnoopMulticastGroupVlanIndex.setStatus('current')
igmpSnoopMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 15, 1, 2), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastGroupIpAddress.setStatus('current')
igmpSnoopMulticastGroupSourceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 15, 1, 3), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastGroupSourceIPAddress.setStatus('current')
igmpSnoopMulticastGroupPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 15, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastGroupPorts.setStatus('current')
igmpSnoopMulticastGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 15, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastGroupStatus.setStatus('current')
igmpSnoopMulticastGroupPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 15, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastGroupPortCount.setStatus('current')
igmpSnoopFilterStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 17), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopFilterStatus.setStatus('current')
igmpSnoopProfileTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 18), )
if mibBuilder.loadTexts: igmpSnoopProfileTable.setStatus('current')
igmpSnoopProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 18, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopProfileId"))
if mibBuilder.loadTexts: igmpSnoopProfileEntry.setStatus('current')
igmpSnoopProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopProfileId.setStatus('current')
igmpSnoopProfileAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileAction.setStatus('current')
igmpSnoopProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 18, 1, 3), ValidStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileStatus.setStatus('current')
igmpSnoopProfileCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 19))
igmpSnoopProfileCtlId = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 19, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlId.setStatus('current')
igmpSnoopProfileCtlInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 19, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlInetAddressType.setStatus('current')
igmpSnoopProfileCtlStartInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 19, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlStartInetAddress.setStatus('current')
igmpSnoopProfileCtlEndInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 19, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlEndInetAddress.setStatus('current')
igmpSnoopProfileCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 19, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("create", 2), ("destroy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlAction.setStatus('current')
igmpSnoopProfileRangeTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 20), )
if mibBuilder.loadTexts: igmpSnoopProfileRangeTable.setStatus('current')
igmpSnoopProfileRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 20, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopProfileRangeProfileId"), (0, "ECS2100-28PP-MIB", "igmpSnoopProfileRangeInetAddressType"), (0, "ECS2100-28PP-MIB", "igmpSnoopProfileRangeStartInetAddress"))
if mibBuilder.loadTexts: igmpSnoopProfileRangeEntry.setStatus('current')
igmpSnoopProfileRangeProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: igmpSnoopProfileRangeProfileId.setStatus('current')
igmpSnoopProfileRangeInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 20, 1, 2), InetAddressType())
if mibBuilder.loadTexts: igmpSnoopProfileRangeInetAddressType.setStatus('current')
igmpSnoopProfileRangeStartInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 20, 1, 3), InetAddress())
if mibBuilder.loadTexts: igmpSnoopProfileRangeStartInetAddress.setStatus('current')
igmpSnoopProfileRangeEndInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 20, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopProfileRangeEndInetAddress.setStatus('current')
igmpSnoopProfileRangeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopProfileRangeAction.setStatus('current')
igmpSnoopFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 21), )
if mibBuilder.loadTexts: igmpSnoopFilterPortTable.setStatus('current')
igmpSnoopFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 21, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopFilterPortIndex"))
if mibBuilder.loadTexts: igmpSnoopFilterPortEntry.setStatus('current')
igmpSnoopFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 21, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopFilterPortIndex.setStatus('current')
igmpSnoopFilterPortProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 21, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopFilterPortProfileId.setStatus('current')
igmpSnoopThrottlePortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 22), )
if mibBuilder.loadTexts: igmpSnoopThrottlePortTable.setStatus('current')
igmpSnoopThrottlePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 22, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopThrottlePortIndex"))
if mibBuilder.loadTexts: igmpSnoopThrottlePortEntry.setStatus('current')
igmpSnoopThrottlePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 22, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopThrottlePortIndex.setStatus('current')
igmpSnoopThrottlePortRunningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 22, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopThrottlePortRunningStatus.setStatus('current')
igmpSnoopThrottlePortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("replace", 1), ("deny", 2))).clone('deny')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopThrottlePortAction.setStatus('current')
igmpSnoopThrottlePortMaxGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopThrottlePortMaxGroups.setStatus('current')
igmpSnoopThrottlePortCurrentGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 22, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopThrottlePortCurrentGroups.setStatus('current')
igmpSnoopPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27), )
if mibBuilder.loadTexts: igmpSnoopPortTable.setStatus('current')
igmpSnoopPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopPortIndex"))
if mibBuilder.loadTexts: igmpSnoopPortEntry.setStatus('current')
igmpSnoopPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopPortIndex.setStatus('current')
igmpSnoopQueryDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryDrop.setStatus('current')
igmpSnoopMulticastDataDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopMulticastDataDrop.setStatus('current')
igmpSnoopPortNumGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumGroups.setStatus('current')
igmpSnoopPortNumJoinSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumJoinSend.setStatus('current')
igmpSnoopPortNumJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumJoins.setStatus('current')
igmpSnoopPortNumJoinSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumJoinSuccess.setStatus('current')
igmpSnoopPortNumLeavesSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumLeavesSend.setStatus('current')
igmpSnoopPortNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumLeaves.setStatus('current')
igmpSnoopPortNumGeneralQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumGeneralQuerySend.setStatus('current')
igmpSnoopPortNumGeneralQueryRecevied = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumGeneralQueryRecevied.setStatus('current')
igmpSnoopPortNumSepcificQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumSepcificQuerySend.setStatus('current')
igmpSnoopPortNumSpecificQueryReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumSpecificQueryReceived.setStatus('current')
igmpSnoopPortNumInvalidReport = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumInvalidReport.setStatus('current')
igmpSnoopPortClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopPortClearStatistics.setStatus('current')
igmpSnoopGlobalMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 28))
igmpSnoopProxyReporting = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 28, 1), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProxyReporting.setStatus('current')
igmpSnoopRouterAlertOptionCheck = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 28, 2), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopRouterAlertOptionCheck.setStatus('current')
igmpSnoopTcnFlood = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 28, 3), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopTcnFlood.setStatus('current')
igmpSnoopTcnQuerySolicit = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 28, 4), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopTcnQuerySolicit.setStatus('current')
igmpSnoopUnregisteredDataFlood = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 28, 5), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopUnregisteredDataFlood.setStatus('current')
igmpSnoopUnsolicitedReportInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 28, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopUnsolicitedReportInterval.setStatus('current')
igmpSnoopVersionExclusive = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 28, 7), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopVersionExclusive.setStatus('current')
igmpSnoopMrouterForwardMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 28, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopMrouterForwardMode.setStatus('current')
igmpSnoopForwardingPriority = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopForwardingPriority.setStatus('current')
igmpSnoopQueryDropTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 30), )
if mibBuilder.loadTexts: igmpSnoopQueryDropTable.setStatus('current')
igmpSnoopQueryDropEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 30, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopQueryDropPortIndex"))
if mibBuilder.loadTexts: igmpSnoopQueryDropEntry.setStatus('current')
igmpSnoopQueryDropPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 30, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopQueryDropPortIndex.setStatus('current')
igmpSnoopQueryDropVlanBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 30, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 512)).setFixedLength(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryDropVlanBitmap.setStatus('current')
igmpSnoopClearDynamicGroups = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 32), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopClearDynamicGroups.setStatus('current')
igmpSnoopVlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33), )
if mibBuilder.loadTexts: igmpSnoopVlanTable.setStatus('current')
igmpSnoopVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopVlanEntry.setStatus('current')
igmpSnoopVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 1), VlanIndex())
if mibBuilder.loadTexts: igmpSnoopVlanIndex.setStatus('current')
igmpSnoopVlanNumGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumGroups.setStatus('current')
igmpSnoopVlanNumJoinSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumJoinSend.setStatus('current')
igmpSnoopVlanNumJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumJoins.setStatus('current')
igmpSnoopVlanNumJoinSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumJoinSuccess.setStatus('current')
igmpSnoopVlanNumLeavesSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumLeavesSend.setStatus('current')
igmpSnoopVlanNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumLeaves.setStatus('current')
igmpSnoopVlanNumGeneralQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumGeneralQuerySend.setStatus('current')
igmpSnoopVlanNumGeneralQueryRecevied = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumGeneralQueryRecevied.setStatus('current')
igmpSnoopVlanNumSepcificQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumSepcificQuerySend.setStatus('current')
igmpSnoopVlanNumSpecificQueryReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumSpecificQueryReceived.setStatus('current')
igmpSnoopVlanNumInvalidReport = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumInvalidReport.setStatus('current')
igmpSnoopVlanClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopVlanClearStatistics.setStatus('current')
netConfigTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 1), )
if mibBuilder.loadTexts: netConfigTable.setStatus('current')
netConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "netConfigIfIndex"), (0, "ECS2100-28PP-MIB", "netConfigIPAddress"), (0, "ECS2100-28PP-MIB", "netConfigSubnetMask"))
if mibBuilder.loadTexts: netConfigEntry.setStatus('current')
netConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1001, 5097)))
if mibBuilder.loadTexts: netConfigIfIndex.setStatus('current')
netConfigIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: netConfigIPAddress.setStatus('current')
netConfigSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: netConfigSubnetMask.setStatus('current')
netConfigPrimaryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netConfigPrimaryInterface.setStatus('current')
netConfigUnnumbered = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unnumbered", 1), ("notUnnumbered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netConfigUnnumbered.setStatus('current')
netConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netConfigStatus.setStatus('current')
netDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netDefaultGateway.setStatus('current')
ipHttpState = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpState.setStatus('current')
ipHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpPort.setStatus('current')
ipDhcpRestart = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDhcpRestart.setStatus('current')
ipHttpsState = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsState.setStatus('current')
ipHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsPort.setStatus('current')
dhcpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11))
dhcpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 1))
dhcpOption82 = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4))
dhcpcOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 1, 1))
dhcpcInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 1, 1, 1), )
if mibBuilder.loadTexts: dhcpcInterfaceTable.setStatus('current')
dhcpcInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 1, 1, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "dhcpcIfIndex"))
if mibBuilder.loadTexts: dhcpcInterfaceEntry.setStatus('current')
dhcpcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: dhcpcIfIndex.setStatus('current')
dhcpcIfVendorClassIdMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSpecify", 1), ("text", 2), ("hex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpcIfVendorClassIdMode.setStatus('current')
dhcpcIfVendorClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 1, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpcIfVendorClassId.setStatus('current')
dhcpRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 2))
dhcpRelayRestart = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayRestart.setStatus('current')
dhcpRelayServerInetAddrTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 2, 4), )
if mibBuilder.loadTexts: dhcpRelayServerInetAddrTable.setStatus('current')
dhcpRelayServerInetAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 2, 4, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "dhcpRelayServerInetAddrIfIndex"), (0, "ECS2100-28PP-MIB", "dhcpRelayServerInetAddrIndex"))
if mibBuilder.loadTexts: dhcpRelayServerInetAddrEntry.setStatus('current')
dhcpRelayServerInetAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: dhcpRelayServerInetAddrIfIndex.setStatus('current')
dhcpRelayServerInetAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: dhcpRelayServerInetAddrIndex.setStatus('current')
dhcpRelayServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 2, 4, 1, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayServerInetAddressType.setStatus('current')
dhcpRelayServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 2, 4, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayServerInetAddress.setStatus('current')
pingMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15))
pingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingIpAddress.setStatus('current')
pingPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 512)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingPacketSize.setStatus('current')
pingCompleted = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingCompleted.setStatus('current')
pingAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("pingStart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingAction.setStatus('current')
pingProbeCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingProbeCount.setStatus('current')
pingSentPackets = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingSentPackets.setStatus('current')
pingReceivedPackets = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingReceivedPackets.setStatus('current')
pingPacketLossRate = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingPacketLossRate.setStatus('current')
pingHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 10), )
if mibBuilder.loadTexts: pingHistoryTable.setStatus('current')
pingHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 10, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "pingHistoryIndex"))
if mibBuilder.loadTexts: pingHistoryEntry.setStatus('current')
pingHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: pingHistoryIndex.setStatus('current')
pingHistoryResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 10, 1, 2), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pingHistoryResponse.setStatus('current')
dhcpOption82Status = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption82Status.setStatus('current')
dhcpOption82Policy = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("replace", 2), ("keep", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption82Policy.setStatus('current')
dhcpOption82RemoteIDMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("mac-address-in-hex", 1), ("mac-address-in-ascii", 2), ("ip-address-in-hex", 3), ("ip-address-in-ascii", 4), ("configured-string", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption82RemoteIDMode.setStatus('current')
dhcpOption82RemoteIDString = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption82RemoteIDString.setStatus('current')
dhcpOption82EncodeFormat = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("extra-subtype-included", 1), ("no-extra-subtype-included", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption82EncodeFormat.setStatus('current')
dhcpOption82RelayServerAddrTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4, 6), )
if mibBuilder.loadTexts: dhcpOption82RelayServerAddrTable.setStatus('current')
dhcpOption82RelayServerAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4, 6, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "dhcpOption82RelayServerAddrIndex"))
if mibBuilder.loadTexts: dhcpOption82RelayServerAddrEntry.setStatus('current')
dhcpOption82RelayServerAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: dhcpOption82RelayServerAddrIndex.setStatus('current')
dhcpOption82RelayServerAddrServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption82RelayServerAddrServerIp.setStatus('current')
arpCacheDeleteAll = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("noDelete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpCacheDeleteAll.setStatus('current')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 1), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "vlanIndex"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
vlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vlanIndex.setStatus('current')
vlanAddressMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAddressMethod.setStatus('current')
vlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 2), )
if mibBuilder.loadTexts: vlanPortTable.setStatus('current')
vlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 2, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "vlanPortIndex"))
if mibBuilder.loadTexts: vlanPortEntry.setStatus('current')
vlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)))
if mibBuilder.loadTexts: vlanPortIndex.setStatus('current')
vlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hybrid", 1), ("dot1qTrunk", 2), ("access", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortMode.setStatus('current')
vlanPortPrivateVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("isolated", 2), ("community", 3), ("promiscous", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortPrivateVlanType.setStatus('current')
voiceVlanMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6))
voiceVlanOuiTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 1), )
if mibBuilder.loadTexts: voiceVlanOuiTable.setStatus('current')
voiceVlanOuiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "voiceVlanOuiAddress"))
if mibBuilder.loadTexts: voiceVlanOuiEntry.setStatus('current')
voiceVlanOuiAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceVlanOuiAddress.setStatus('current')
voiceVlanOuiMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanOuiMask.setStatus('current')
voiceVlanOuiDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanOuiDescription.setStatus('current')
voiceVlanOuiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 1, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voiceVlanOuiStatus.setStatus('current')
voiceVlanEnabledId = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 4093), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanEnabledId.setStatus('current')
voiceVlanAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 43200)).clone(1440)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanAgingTime.setStatus('current')
voiceVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 7), )
if mibBuilder.loadTexts: voiceVlanPortTable.setStatus('current')
voiceVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 7, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "voiceVlanPortIfIndex"))
if mibBuilder.loadTexts: voiceVlanPortEntry.setStatus('current')
voiceVlanPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: voiceVlanPortIfIndex.setStatus('current')
voiceVlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPortMode.setStatus('current')
voiceVlanPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 7, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPortSecurity.setStatus('current')
voiceVlanPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPortPriority.setStatus('current')
voiceVlanPortRuleOui = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 7, 1, 5), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPortRuleOui.setStatus('current')
voiceVlanPortRuleLldp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 7, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPortRuleLldp.setStatus('current')
voiceVlanPortRemainAge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceVlanPortRemainAge.setStatus('current')
dot1vProtocolExPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 10), )
if mibBuilder.loadTexts: dot1vProtocolExPortTable.setStatus('current')
dot1vProtocolExPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 10, 1), )
dot1vProtocolPortEntry.registerAugmentions(("ECS2100-28PP-MIB", "dot1vProtocolExPortEntry"))
dot1vProtocolExPortEntry.setIndexNames(*dot1vProtocolPortEntry.getIndexNames())
if mibBuilder.loadTexts: dot1vProtocolExPortEntry.setStatus('current')
dot1vProtocolExPortGroupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1vProtocolExPortGroupPriority.setStatus('current')
macVlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 11), )
if mibBuilder.loadTexts: macVlanTable.setStatus('current')
macVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 11, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "macVlanMacMask"), (0, "ECS2100-28PP-MIB", "macVlanMacAddress"))
if mibBuilder.loadTexts: macVlanEntry.setStatus('current')
macVlanMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 11, 1, 1), MacAddress())
if mibBuilder.loadTexts: macVlanMacAddress.setStatus('current')
macVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 11, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macVlanId.setStatus('current')
macVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macVlanPriority.setStatus('current')
macVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 11, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macVlanStatus.setStatus('current')
macVlanMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 11, 1, 5), MacAddress())
if mibBuilder.loadTexts: macVlanMacMask.setStatus('current')
macVlanClearAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noClear", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macVlanClearAction.setStatus('current')
subnetVlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 13), )
if mibBuilder.loadTexts: subnetVlanTable.setStatus('current')
subnetVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 13, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "subnetVlanMask"), (0, "ECS2100-28PP-MIB", "subnetVlanIpAddress"))
if mibBuilder.loadTexts: subnetVlanEntry.setStatus('current')
subnetVlanIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 13, 1, 1), IpAddress())
if mibBuilder.loadTexts: subnetVlanIpAddress.setStatus('current')
subnetVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 13, 1, 2), IpAddress())
if mibBuilder.loadTexts: subnetVlanMask.setStatus('current')
subnetVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subnetVlanId.setStatus('current')
subnetVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subnetVlanPriority.setStatus('current')
subnetVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 13, 1, 5), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subnetVlanStatus.setStatus('current')
subnetVlanClearAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noClear", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetVlanClearAction.setStatus('current')
vlanStaticExtTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 15), )
if mibBuilder.loadTexts: vlanStaticExtTable.setStatus('current')
vlanStaticExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 15, 1), )
dot1qVlanStaticEntry.registerAugmentions(("ECS2100-28PP-MIB", "vlanStaticExtEntry"))
vlanStaticExtEntry.setIndexNames(*dot1qVlanStaticEntry.getIndexNames())
if mibBuilder.loadTexts: vlanStaticExtEntry.setStatus('current')
vlanStaticExtRspanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("destroy", 1), ("vlan", 2), ("rspanVlan", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanStaticExtRspanStatus.setStatus('current')
vlanStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 17), )
if mibBuilder.loadTexts: vlanStaticTable.setStatus('current')
vlanStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 17, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "vlanStaticIndex"))
if mibBuilder.loadTexts: vlanStaticEntry.setStatus('current')
vlanStaticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 17, 1, 1), VlanIndex())
if mibBuilder.loadTexts: vlanStaticIndex.setStatus('current')
vlanStaticInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(135, 136))).clone(namedValues=NamedValues(("l2vlan", 135), ("l3ipvlan", 136))).clone('l2vlan')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanStaticInterfaceType.setStatus('current')
prioWrrPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 12), )
if mibBuilder.loadTexts: prioWrrPortTable.setStatus('current')
prioWrrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 12, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "prioWrrPortIfIndex"), (0, "ECS2100-28PP-MIB", "prioWrrPortTrafficClass"))
if mibBuilder.loadTexts: prioWrrPortEntry.setStatus('current')
prioWrrPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 12, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prioWrrPortIfIndex.setStatus('current')
prioWrrPortTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: prioWrrPortTrafficClass.setStatus('current')
prioWrrPortWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioWrrPortWeight.setStatus('current')
prioWrrPortStrictStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 12, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioWrrPortStrictStatus.setStatus('current')
prioSchedModePortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 15), )
if mibBuilder.loadTexts: prioSchedModePortTable.setStatus('current')
prioSchedModePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 15, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "prioSchedModePortIndex"))
if mibBuilder.loadTexts: prioSchedModePortEntry.setStatus('current')
prioSchedModePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 15, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prioSchedModePortIndex.setStatus('current')
prioSchedModePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("wrr", 1), ("strict", 2), ("strict-wrr", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioSchedModePort.setStatus('current')
trapVar = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2))
trapIpFilterRejectMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("web", 1), ("snmp", 2), ("telnet", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapIpFilterRejectMode.setStatus('current')
trapIpFilterRejectIp = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapIpFilterRejectIp.setStatus('current')
trapVarMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 10), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapVarMacAddr.setStatus('current')
trapVarLoginUserName = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapVarLoginUserName.setStatus('current')
trapVarSessionType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("web", 1), ("snmp", 2), ("telnet", 3), ("console", 4), ("ssh", 5), ("http", 6), ("https", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapVarSessionType.setStatus('current')
trapVarLoginInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 15), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapVarLoginInetAddressType.setStatus('current')
trapVarLoginInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 16), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapVarLoginInetAddress.setStatus('current')
trapIpFilterRejectInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 17), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapIpFilterRejectInetAddressType.setStatus('current')
trapIpFilterRejectInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 18), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapIpFilterRejectInetAddress.setStatus('current')
trapAutoUpgradeResult = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("succeeded", 1), ("failed", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapAutoUpgradeResult.setStatus('current')
trapAutoUpgradeNewVer = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapAutoUpgradeNewVer.setStatus('current')
trapIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 30), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapIfIndex.setStatus('current')
trapVlanId = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 31), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapVlanId.setStatus('current')
trapDhcpClientPortIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 62), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapDhcpClientPortIfIndex.setStatus('current')
trapDhcpServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 63), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapDhcpServerIpAddress.setStatus('current')
trapSfpThresholdAlarmWarnIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 64), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSfpThresholdAlarmWarnIfIndex.setStatus('current')
trapSfpThresholdAlarmWarnType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("rxPowerHighAlarm", 1), ("rxPowerLowAlarm", 2), ("rxPowerHighWarning", 3), ("rxPowerLowWarning", 4), ("txPowerHighAlarm", 5), ("txPowerLowAlarm", 6), ("txPowerHighWarning", 7), ("txPowerLowWarning", 8), ("temperatureHighAlarm", 9), ("temperatureLowAlarm", 10), ("temperatureHighWarning", 11), ("temperatureLowWarning", 12), ("voltageHighAlarm", 13), ("voltageLowAlarm", 14), ("voltageHighWarning", 15), ("voltageLowWarning", 16), ("currentHighAlarm", 17), ("currentLowAlarm", 18), ("currentHighWarning", 19), ("currentLowWarning", 20), ("rxPowerAlarmWarnCease", 21), ("txPowerAlarmWarnCease", 22), ("temperatureAlarmWarnCease", 23), ("voltageAlarmWarnCease", 24), ("currentAlarmWarnCease", 25)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSfpThresholdAlarmWarnType.setStatus('current')
trapUdldPortShutdownReason = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unidirectionalLink", 1), ("mismatchWithNeighbor", 2), ("transmitToReceiveLoop", 3), ("aggressiveModeFailure", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapUdldPortShutdownReason.setStatus('current')
trapDhcpServerMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 67), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapDhcpServerMacAddress.setStatus('current')
trapMacNotifyAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapMacNotifyAction.setStatus('current')
rateLimitMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 1))
rateLimitPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 1, 2), )
if mibBuilder.loadTexts: rateLimitPortTable.setStatus('current')
rateLimitPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 1, 2, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "rlPortIndex"))
if mibBuilder.loadTexts: rateLimitPortEntry.setStatus('current')
rlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlPortIndex.setStatus('current')
rlPortInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 1, 2, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputStatus.setStatus('current')
rlPortOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 1, 2, 1, 7), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputStatus.setStatus('current')
rlPortInputLimitInKilo = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputLimitInKilo.setStatus('current')
rlPortOutputLimitInKilo = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputLimitInKilo.setStatus('current')
rlPortLimitInKiloResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortLimitInKiloResolution.setStatus('current')
cosMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3))
prioIfClassificationModeTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 2), )
if mibBuilder.loadTexts: prioIfClassificationModeTable.setStatus('current')
prioIfClassificationModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 2, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "prioIfClassificationModeIf"))
if mibBuilder.loadTexts: prioIfClassificationModeEntry.setStatus('current')
prioIfClassificationModeIf = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prioIfClassificationModeIf.setStatus('current')
prioIfClassificationModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cos", 0), ("ipPrecedence", 1), ("dscp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIfClassificationModeStatus.setStatus('current')
prioCosToDscpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 3), )
if mibBuilder.loadTexts: prioCosToDscpTable.setStatus('current')
prioCosToDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "prioCosToDscpIfValue"), (0, "ECS2100-28PP-MIB", "prioCosToDscpCosValue"), (0, "ECS2100-28PP-MIB", "prioCosToDscpCFIValue"))
if mibBuilder.loadTexts: prioCosToDscpEntry.setStatus('current')
prioCosToDscpIfValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prioCosToDscpIfValue.setStatus('current')
prioCosToDscpCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: prioCosToDscpCosValue.setStatus('current')
prioCosToDscpCFIValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: prioCosToDscpCFIValue.setStatus('current')
prioCosToDscpPhbValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCosToDscpPhbValue.setStatus('current')
prioDscpToDscpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 5), )
if mibBuilder.loadTexts: prioDscpToDscpTable.setStatus('current')
prioDscpToDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 5, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "prioDscpToDscpIfValue"), (0, "ECS2100-28PP-MIB", "prioDscpToDscpIngressDscpValue"))
if mibBuilder.loadTexts: prioDscpToDscpEntry.setStatus('current')
prioDscpToDscpIfValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prioDscpToDscpIfValue.setStatus('current')
prioDscpToDscpIngressDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: prioDscpToDscpIngressDscpValue.setStatus('current')
prioDscpToDscpPhbValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioDscpToDscpPhbValue.setStatus('current')
diffServMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4))
diffServPolicyMapTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 10), )
if mibBuilder.loadTexts: diffServPolicyMapTable.setStatus('current')
diffServPolicyMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 10, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServPolicyMapIndex"))
if mibBuilder.loadTexts: diffServPolicyMapEntry.setStatus('current')
diffServPolicyMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: diffServPolicyMapIndex.setStatus('current')
diffServPolicyMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapName.setStatus('current')
diffServPolicyMapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapDescription.setStatus('current')
diffServPolicyMapElementIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServPolicyMapElementIndexList.setStatus('current')
diffServPolicyMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapStatus.setStatus('current')
diffServPolicyMapAttachCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 11))
diffServPolicyMapAttachCtlIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPolicyMapAttachCtlIndex.setStatus('current')
diffServPolicyMapAttachCtlElementIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPolicyMapAttachCtlElementIndex.setStatus('current')
diffServPolicyMapAttachCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("attach", 2), ("detach", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPolicyMapAttachCtlAction.setStatus('current')
diffServPolicyMapElementTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 12), )
if mibBuilder.loadTexts: diffServPolicyMapElementTable.setStatus('current')
diffServPolicyMapElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 12, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServPolicyMapElementIndex"))
if mibBuilder.loadTexts: diffServPolicyMapElementEntry.setStatus('current')
diffServPolicyMapElementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: diffServPolicyMapElementIndex.setStatus('current')
diffServPolicyMapElementClassMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapElementClassMapIndex.setStatus('current')
diffServPolicyMapElementMeterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 12, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapElementMeterIndex.setStatus('current')
diffServPolicyMapElementActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapElementActionIndex.setStatus('current')
diffServPolicyMapElementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapElementStatus.setStatus('current')
diffServClassMapTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 13), )
if mibBuilder.loadTexts: diffServClassMapTable.setStatus('current')
diffServClassMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 13, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServClassMapIndex"))
if mibBuilder.loadTexts: diffServClassMapEntry.setStatus('current')
diffServClassMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: diffServClassMapIndex.setStatus('current')
diffServClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassMapName.setStatus('current')
diffServClassMapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassMapDescription.setStatus('current')
diffServClassMapMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("matchAny", 1), ("matchAll", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassMapMatchType.setStatus('current')
diffServClassMapElementIndexTypeList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 13, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServClassMapElementIndexTypeList.setStatus('current')
diffServClassMapElementIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 13, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServClassMapElementIndexList.setStatus('current')
diffServClassMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 13, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassMapStatus.setStatus('current')
diffServClassMapAttachCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 14))
diffServClassMapAttachCtlIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 14, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassMapAttachCtlIndex.setStatus('current')
diffServClassMapAttachCtlElementIndexType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("macAce", 1), ("ipAce", 2), ("acl", 3), ("ipv6Ace", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassMapAttachCtlElementIndexType.setStatus('current')
diffServClassMapAttachCtlElementIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 14, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassMapAttachCtlElementIndex.setStatus('current')
diffServClassMapAttachCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("attach", 2), ("detach", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassMapAttachCtlAction.setStatus('current')
diffServAclTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 15), )
if mibBuilder.loadTexts: diffServAclTable.setStatus('current')
diffServAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 15, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServAclIndex"))
if mibBuilder.loadTexts: diffServAclEntry.setStatus('current')
diffServAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: diffServAclIndex.setStatus('current')
diffServAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServAclName.setStatus('current')
diffServAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mac", 1), ("ipstandard", 2), ("ipextended", 3), ("ipv6standard", 4), ("ipv6extended", 5), ("arp", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServAclType.setStatus('current')
diffServAclAceIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServAclAceIndexList.setStatus('current')
diffServAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 15, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServAclStatus.setStatus('current')
diffServAclAttachCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 16))
diffServAclAttachCtlIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 16, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAclAttachCtlIndex.setStatus('current')
diffServAclAttachCtlAceType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("macAce", 1), ("ipAce", 2), ("ipv6Ace", 3), ("arpAce", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAclAttachCtlAceType.setStatus('current')
diffServAclAttachCtlAceIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 16, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAclAttachCtlAceIndex.setStatus('current')
diffServAclAttachCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 16, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("attach", 2), ("detach", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAclAttachCtlAction.setStatus('current')
diffServIpAceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17), )
if mibBuilder.loadTexts: diffServIpAceTable.setStatus('current')
diffServIpAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServIpAceIndex"))
if mibBuilder.loadTexts: diffServIpAceEntry.setStatus('current')
diffServIpAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: diffServIpAceIndex.setStatus('current')
diffServIpAceType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("extended", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceType.setStatus('current')
diffServIpAceAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceAccess.setStatus('current')
diffServIpAceSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceSourceIpAddr.setStatus('current')
diffServIpAceSourceIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceSourceIpAddrBitmask.setStatus('current')
diffServIpAceDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDestIpAddr.setStatus('current')
diffServIpAceDestIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDestIpAddrBitmask.setStatus('current')
diffServIpAceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceProtocol.setStatus('current')
diffServIpAcePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAcePrec.setStatus('current')
diffServIpAceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDscp.setStatus('current')
diffServIpAceSourcePortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceSourcePortOp.setStatus('current')
diffServIpAceMinSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceMinSourcePort.setStatus('current')
diffServIpAceSourcePortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceSourcePortBitmask.setStatus('current')
diffServIpAceDestPortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDestPortOp.setStatus('current')
diffServIpAceMinDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceMinDestPort.setStatus('current')
diffServIpAceDestPortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDestPortBitmask.setStatus('current')
diffServIpAceControlCode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceControlCode.setStatus('current')
diffServIpAceControlCodeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceControlCodeBitmask.setStatus('current')
diffServIpAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceStatus.setStatus('current')
diffServMacAceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18), )
if mibBuilder.loadTexts: diffServMacAceTable.setStatus('current')
diffServMacAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServMacAceIndex"))
if mibBuilder.loadTexts: diffServMacAceEntry.setStatus('current')
diffServMacAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: diffServMacAceIndex.setStatus('current')
diffServMacAceAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceAccess.setStatus('current')
diffServMacAcePktformat = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("untagged-Eth2", 2), ("untagged802Dot3", 3), ("tagggedEth2", 4), ("tagged802Dot3", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAcePktformat.setStatus('current')
diffServMacAceSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceSourceMacAddr.setStatus('current')
diffServMacAceSourceMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceSourceMacAddrBitmask.setStatus('current')
diffServMacAceDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceDestMacAddr.setStatus('current')
diffServMacAceDestMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceDestMacAddrBitmask.setStatus('current')
diffServMacAceVidOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceVidOp.setStatus('current')
diffServMacAceMinVid = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceMinVid.setStatus('current')
diffServMacAceVidBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceVidBitmask.setStatus('current')
diffServMacAceEtherTypeOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceEtherTypeOp.setStatus('current')
diffServMacAceEtherTypeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceEtherTypeBitmask.setStatus('current')
diffServMacAceMinEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceMinEtherType.setStatus('current')
diffServMacAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceStatus.setStatus('current')
diffServMacAceCosOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceCosOp.setStatus('current')
diffServMacAceCosBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceCosBitmask.setStatus('current')
diffServMacAceMinCos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceMinCos.setStatus('current')
diffServActionTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 19), )
if mibBuilder.loadTexts: diffServActionTable.setStatus('current')
diffServActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 19, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServActionIndex"))
if mibBuilder.loadTexts: diffServActionEntry.setStatus('current')
diffServActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: diffServActionIndex.setStatus('current')
diffServActionList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 19, 1, 2), Bits().clone(namedValues=NamedValues(("actionPktNewPri", 0), ("actionPktNewPhb", 9), ("actionPktNewDscp", 11)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionList.setStatus('current')
diffServActionPktNewPri = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionPktNewPri.setStatus('current')
diffServActionPktNewPhb = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionPktNewPhb.setStatus('current')
diffServActionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 19, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionStatus.setStatus('current')
diffServActionPktNewDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 19, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionPktNewDscp.setStatus('current')
diffServMeterTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 20), )
if mibBuilder.loadTexts: diffServMeterTable.setStatus('current')
diffServMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 20, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServActionIndex"))
if mibBuilder.loadTexts: diffServMeterEntry.setStatus('current')
diffServMeterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 20, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServMeterIndex.setStatus('current')
diffServMeterModel = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8))).clone(namedValues=NamedValues(("default", 0), ("rate", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMeterModel.setStatus('current')
diffServMeterRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMeterRate.setStatus('current')
diffServMeterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 20, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMeterStatus.setStatus('current')
diffServIpv6AceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21), )
if mibBuilder.loadTexts: diffServIpv6AceTable.setStatus('current')
diffServIpv6AceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServIpv6AceIndex"))
if mibBuilder.loadTexts: diffServIpv6AceEntry.setStatus('current')
diffServIpv6AceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: diffServIpv6AceIndex.setStatus('current')
diffServIpv6AceType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("extended", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceType.setStatus('current')
diffServIpv6AceAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceAccess.setStatus('current')
diffServIpv6AceSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceSourceIpAddr.setStatus('current')
diffServIpv6AceSourceIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceSourceIpAddrPrefixLen.setStatus('current')
diffServIpv6AceDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceDestIpAddr.setStatus('current')
diffServIpv6AceDestIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceDestIpAddrPrefixLen.setStatus('current')
diffServIpv6AceNextHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceNextHeader.setStatus('current')
diffServIpv6AceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceDscp.setStatus('current')
diffServIpv6AceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceStatus.setStatus('current')
diffServIpv6AceSourcePortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceSourcePortOp.setStatus('current')
diffServIpv6AceSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: diffServIpv6AceSourcePort.setStatus('current')
diffServIpv6AceSourcePortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceSourcePortBitmask.setStatus('current')
diffServIpv6AceDestPortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceDestPortOp.setStatus('current')
diffServIpv6AceDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceDestPort.setStatus('current')
diffServIpv6AceDestPortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceDestPortBitmask.setStatus('current')
diffServArpAceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23), )
if mibBuilder.loadTexts: diffServArpAceTable.setStatus('current')
diffServArpAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServArpAceIndex"))
if mibBuilder.loadTexts: diffServArpAceEntry.setStatus('current')
diffServArpAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: diffServArpAceIndex.setStatus('current')
diffServArpAceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceAction.setStatus('current')
diffServArpAcePktType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAcePktType.setStatus('current')
diffServArpAceSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceSourceIpAddr.setStatus('current')
diffServArpAceSourceIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceSourceIpAddrBitmask.setStatus('current')
diffServArpAceDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceDestIpAddr.setStatus('current')
diffServArpAceDestIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceDestIpAddrBitmask.setStatus('current')
diffServArpAceSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceSourceMacAddr.setStatus('current')
diffServArpAceSourceMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceSourceMacAddrBitmask.setStatus('current')
diffServArpAceDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceDestMacAddr.setStatus('current')
diffServArpAceDestMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceDestMacAddrBitmask.setStatus('current')
diffServArpAceLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 12), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceLogStatus.setStatus('current')
diffServArpAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceStatus.setStatus('current')
diffServArpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 24), )
if mibBuilder.loadTexts: diffServArpTable.setStatus('current')
diffServArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 24, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServArpAclName"))
if mibBuilder.loadTexts: diffServArpEntry.setStatus('current')
diffServArpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 24, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServArpAclName.setStatus('current')
diffServAclHwCounterTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 26), )
if mibBuilder.loadTexts: diffServAclHwCounterTable.setStatus('current')
diffServAclHwCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 26, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServAclHwCounterIfIndex"), (0, "ECS2100-28PP-MIB", "diffServAclHwCounterDirection"), (0, "ECS2100-28PP-MIB", "diffServAclHwCounterAclIndex"), (0, "ECS2100-28PP-MIB", "diffServAclHwCounterAceIndex"))
if mibBuilder.loadTexts: diffServAclHwCounterEntry.setStatus('current')
diffServAclHwCounterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 26, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServAclHwCounterIfIndex.setStatus('current')
diffServAclHwCounterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ingress", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServAclHwCounterDirection.setStatus('current')
diffServAclHwCounterAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 26, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServAclHwCounterAclIndex.setStatus('current')
diffServAclHwCounterAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 26, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServAclHwCounterAceIndex.setStatus('current')
diffServAclHwCounterAceHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 26, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServAclHwCounterAceHitCount.setStatus('current')
diffServPolicyMapPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 27), )
if mibBuilder.loadTexts: diffServPolicyMapPortTable.setStatus('current')
diffServPolicyMapPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 27, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServPolicyMapPortIfIndex"), (0, "ECS2100-28PP-MIB", "diffServPolicyMapPortDirection"))
if mibBuilder.loadTexts: diffServPolicyMapPortEntry.setStatus('current')
diffServPolicyMapPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 27, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: diffServPolicyMapPortIfIndex.setStatus('current')
diffServPolicyMapPortDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ingress", 1))))
if mibBuilder.loadTexts: diffServPolicyMapPortDirection.setStatus('current')
diffServPolicyMapPortPolicyMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 27, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPolicyMapPortPolicyMapIndex.setStatus('current')
diffServPolicyMapPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 27, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapPortStatus.setStatus('current')
diffServAccessGroupTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 28), )
if mibBuilder.loadTexts: diffServAccessGroupTable.setStatus('current')
diffServAccessGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 28, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServAccessGroupIfIndex"), (0, "ECS2100-28PP-MIB", "diffServAccessGroupDirection"), (0, "ECS2100-28PP-MIB", "diffServAccessGroupType"))
if mibBuilder.loadTexts: diffServAccessGroupEntry.setStatus('current')
diffServAccessGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 28, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: diffServAccessGroupIfIndex.setStatus('current')
diffServAccessGroupDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ingress", 1))))
if mibBuilder.loadTexts: diffServAccessGroupDirection.setStatus('current')
diffServAccessGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac", 1), ("ip", 2), ("ipv6", 3))))
if mibBuilder.loadTexts: diffServAccessGroupType.setStatus('current')
diffServAccessGroupAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 28, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAccessGroupAclIndex.setStatus('current')
diffServAccessGroupTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 28, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAccessGroupTimeRangeName.setStatus('current')
diffServAccessGroupCounterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 28, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAccessGroupCounterStatus.setStatus('current')
diffServAccessGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 28, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServAccessGroupStatus.setStatus('current')
diffServTcamTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 29), )
if mibBuilder.loadTexts: diffServTcamTable.setStatus('current')
diffServTcamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 29, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServTcamUnit"), (0, "ECS2100-28PP-MIB", "diffServTcamDevice"), (0, "ECS2100-28PP-MIB", "diffServTcamPool"))
if mibBuilder.loadTexts: diffServTcamEntry.setStatus('current')
diffServTcamUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: diffServTcamUnit.setStatus('current')
diffServTcamDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 29, 1, 2), Integer32())
if mibBuilder.loadTexts: diffServTcamDevice.setStatus('current')
diffServTcamPool = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 29, 1, 3), Integer32())
if mibBuilder.loadTexts: diffServTcamPool.setStatus('current')
diffServTcamPoolCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 29, 1, 4), Bits().clone(namedValues=NamedValues(("macAcl", 0), ("ipAcl", 1), ("ipv6StdAcl", 2), ("ipv6ExtAcl", 3), ("macDiffServ", 4), ("ipDiffServ", 5), ("ipv6StdDiffServ", 6), ("ipv6ExtDiffServ", 7), ("egressMacAcl", 8), ("egressIpAcl", 9), ("egressIpv6StdAcl", 10), ("egressIpv6ExtAcl", 11), ("egressMacDiffServ", 12), ("egressIpDiffServ", 13), ("egressIpv6StdDiffServ", 14), ("egressIpv6ExtDiffServ", 15), ("webAuth", 16), ("ipSourceGuard", 17), ("ipv6SourceGuard", 18), ("cpuInterface", 19), ("rateLimit", 20), ("linkLocal", 21), ("reserved", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServTcamPoolCapability.setStatus('current')
diffServTcamTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 29, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServTcamTotal.setStatus('current')
diffServTcamFree = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 29, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServTcamFree.setStatus('current')
diffServTcamUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 29, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServTcamUsed.setStatus('current')
privateVlanMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1))
portSecurityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2))
radiusMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4))
tacacsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5))
sshMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6))
ipFilterMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9))
userAuthMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10))
dot1xMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 11))
aaaMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12))
networkAccessMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13))
dosMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16))
privateVlanStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privateVlanStatus.setStatus('current')
privateVlanUplinkPorts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privateVlanUplinkPorts.setStatus('current')
privateVlanDownlinkPorts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privateVlanDownlinkPorts.setStatus('current')
privateVlanVlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 4), )
if mibBuilder.loadTexts: privateVlanVlanTable.setStatus('current')
privateVlanVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 4, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "privateVlanVlanIndex"))
if mibBuilder.loadTexts: privateVlanVlanEntry.setStatus('current')
privateVlanVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: privateVlanVlanIndex.setStatus('current')
privateVlanVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("primary", 2), ("isolated", 3), ("community", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: privateVlanVlanType.setStatus('current')
privateVlanAssoicatedPrimaryVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: privateVlanAssoicatedPrimaryVlan.setStatus('current')
privateVlanPrivatePortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 5), )
if mibBuilder.loadTexts: privateVlanPrivatePortTable.setStatus('current')
privateVlanPrivatePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 5, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "privateVlanPrivatePortIfIndex"))
if mibBuilder.loadTexts: privateVlanPrivatePortEntry.setStatus('current')
privateVlanPrivatePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: privateVlanPrivatePortIfIndex.setStatus('current')
privateVlanPrivatePortSecondaryVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privateVlanPrivatePortSecondaryVlan.setStatus('current')
privateVlanPromPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 6), )
if mibBuilder.loadTexts: privateVlanPromPortTable.setStatus('current')
privateVlanPromPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 6, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "privateVlanPromPortIfIndex"))
if mibBuilder.loadTexts: privateVlanPromPortEntry.setStatus('current')
privateVlanPromPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: privateVlanPromPortIfIndex.setStatus('current')
privateVlanPromPortPrimaryVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privateVlanPromPortPrimaryVlanId.setStatus('current')
privateVlanPromPortSecondaryRemap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: privateVlanPromPortSecondaryRemap.setStatus('current')
privateVlanPromPortSecondaryRemap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: privateVlanPromPortSecondaryRemap2k.setStatus('current')
privateVlanPromPortSecondaryRemap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: privateVlanPromPortSecondaryRemap3k.setStatus('current')
privateVlanPromPortSecondaryRemap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: privateVlanPromPortSecondaryRemap4k.setStatus('current')
privateVlanSessionTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 8), )
if mibBuilder.loadTexts: privateVlanSessionTable.setStatus('current')
privateVlanSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 8, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "privateVlanSessionId"))
if mibBuilder.loadTexts: privateVlanSessionEntry.setStatus('current')
privateVlanSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: privateVlanSessionId.setStatus('current')
privateVlanSessionUplinkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 8, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: privateVlanSessionUplinkPorts.setStatus('current')
privateVlanSessionDownlinkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 8, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: privateVlanSessionDownlinkPorts.setStatus('current')
privateVlanSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 8, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: privateVlanSessionStatus.setStatus('current')
privateVlanUplinkToUplink = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blocking", 1), ("forwarding", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privateVlanUplinkToUplink.setStatus('current')
portSecPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2, 1), )
if mibBuilder.loadTexts: portSecPortTable.setStatus('current')
portSecPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "portSecPortIndex"))
if mibBuilder.loadTexts: portSecPortEntry.setStatus('current')
portSecPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: portSecPortIndex.setStatus('current')
portSecPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecPortStatus.setStatus('current')
portSecAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("trap", 2), ("shutdown", 3), ("trapAndShutdown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecAction.setStatus('current')
portSecMaxMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMaxMacCount.setStatus('current')
portSecMacAsPermanentMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2, 6))
portSecMacAsPermanentPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMacAsPermanentPortIndex.setStatus('current')
portSecMacAsPermanentAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("action", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMacAsPermanentAction.setStatus('current')
radiusServerGlobalAuthPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalAuthPort.setStatus('current')
radiusServerGlobalAcctPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalAcctPort.setStatus('current')
radiusServerGlobalKey = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalKey.setStatus('current')
radiusServerGlobalRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalRetransmit.setStatus('current')
radiusServerGlobalTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalTimeout.setStatus('current')
radiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7), )
if mibBuilder.loadTexts: radiusServerTable.setStatus('current')
radiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "radiusServerIndex"))
if mibBuilder.loadTexts: radiusServerEntry.setStatus('current')
radiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: radiusServerIndex.setStatus('current')
radiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusServerAddress.setStatus('current')
radiusServerAuthPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusServerAuthPortNumber.setStatus('current')
radiusServerAcctPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusServerAcctPortNumber.setStatus('current')
radiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerKey.setStatus('current')
radiusServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerRetransmit.setStatus('current')
radiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerTimeout.setStatus('current')
radiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7, 1, 8), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusServerStatus.setStatus('current')
tacacsPlusServerGlobalPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsPlusServerGlobalPortNumber.setStatus('current')
tacacsPlusServerGlobalKey = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsPlusServerGlobalKey.setStatus('current')
tacacsPlusServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5, 4), )
if mibBuilder.loadTexts: tacacsPlusServerTable.setStatus('current')
tacacsPlusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5, 4, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "tacacsPlusServerIndex"))
if mibBuilder.loadTexts: tacacsPlusServerEntry.setStatus('current')
tacacsPlusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: tacacsPlusServerIndex.setStatus('current')
tacacsPlusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerAddress.setStatus('current')
tacacsPlusServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerPortNumber.setStatus('current')
tacacsPlusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerKey.setStatus('current')
tacacsPlusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5, 4, 1, 8), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerStatus.setStatus('current')
sshServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerStatus.setStatus('current')
sshServerMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMajorVersion.setStatus('current')
sshServerMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMinorVersion.setStatus('current')
sshTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshTimeout.setStatus('current')
sshAuthRetries = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthRetries.setStatus('current')
sshConnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 6), )
if mibBuilder.loadTexts: sshConnInfoTable.setStatus('current')
sshConnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 6, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "sshConnID"))
if mibBuilder.loadTexts: sshConnInfoEntry.setStatus('current')
sshConnID = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: sshConnID.setStatus('current')
sshConnMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnMajorVersion.setStatus('current')
sshConnMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnMinorVersion.setStatus('current')
sshConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("negotiationStart", 1), ("authenticationStart", 2), ("sessionStart", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnStatus.setStatus('current')
sshConnUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnUserName.setStatus('current')
sshDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDisconnect", 1), ("disconnect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshDisconnect.setStatus('current')
sshConnEncryptionTypeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnEncryptionTypeStr.setStatus('current')
sshKeySize = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 896))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshKeySize.setStatus('current')
sshRsaHostKey1 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 8), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey1.setStatus('current')
sshRsaHostKey2 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 9), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey2.setStatus('current')
sshRsaHostKey3 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 10), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey3.setStatus('current')
sshRsaHostKey4 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 11), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey4.setStatus('current')
sshRsaHostKey5 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 12), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey5.setStatus('current')
sshRsaHostKey6 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 13), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey6.setStatus('current')
sshRsaHostKey7 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 14), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey7.setStatus('current')
sshRsaHostKey8 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 15), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey8.setStatus('current')
sshDsaHostKey1 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 16), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey1.setStatus('current')
sshDsaHostKey2 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 17), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey2.setStatus('current')
sshDsaHostKey3 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 18), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey3.setStatus('current')
sshDsaHostKey4 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 19), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey4.setStatus('current')
sshDsaHostKey5 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 20), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey5.setStatus('current')
sshDsaHostKey6 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 21), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey6.setStatus('current')
sshDsaHostKey7 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 22), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey7.setStatus('current')
sshDsaHostKey8 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 23), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey8.setStatus('current')
sshHostKeyGenAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noGen", 1), ("genRsaKey", 2), ("genDsaKey", 3), ("genBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyGenAction.setStatus('current')
sshHostKeyGenStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshHostKeyGenStatus.setStatus('current')
sshHostKeySaveAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSave", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeySaveAction.setStatus('current')
sshHostKeySaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshHostKeySaveStatus.setStatus('current')
sshHostKeyDelAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noDel", 1), ("delRsaKey", 2), ("delDsaKey", 3), ("delBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyDelAction.setStatus('current')
sshUserTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29), )
if mibBuilder.loadTexts: sshUserTable.setStatus('current')
sshUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1), ).setIndexNames((1, "ECS2100-28PP-MIB", "sshUserName"))
if mibBuilder.loadTexts: sshUserEntry.setStatus('current')
sshUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: sshUserName.setStatus('current')
sshUserRsaKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 2), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey1.setStatus('current')
sshUserRsaKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 3), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey2.setStatus('current')
sshUserRsaKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 4), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey3.setStatus('current')
sshUserRsaKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 5), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey4.setStatus('current')
sshUserRsaKey5 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 6), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey5.setStatus('current')
sshUserRsaKey6 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 7), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey6.setStatus('current')
sshUserRsaKey7 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 8), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey7.setStatus('current')
sshUserRsaKey8 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 9), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey8.setStatus('current')
sshUserDsaKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 10), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey1.setStatus('current')
sshUserDsaKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 11), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey2.setStatus('current')
sshUserDsaKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 12), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey3.setStatus('current')
sshUserDsaKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 13), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey4.setStatus('current')
sshUserDsaKey5 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 14), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey5.setStatus('current')
sshUserDsaKey6 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 15), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey6.setStatus('current')
sshUserDsaKey7 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 16), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey7.setStatus('current')
sshUserDsaKey8 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 17), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey8.setStatus('current')
sshUserKeyDelAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noDel", 1), ("delRsaKey", 2), ("delDsaKey", 3), ("delBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserKeyDelAction.setStatus('current')
sshRsaHostKeySHA1FingerPrint = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(65, 65)).setFixedLength(65)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKeySHA1FingerPrint.setStatus('current')
sshRsaHostKeyMD5FingerPrint = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(47, 47)).setFixedLength(47)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKeyMD5FingerPrint.setStatus('current')
sshDsaHostKeySHA1FingerPrint = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(65, 65)).setFixedLength(65)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKeySHA1FingerPrint.setStatus('current')
sshDsaHostKeyMD5FingerPrint = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(47, 47)).setFixedLength(47)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKeyMD5FingerPrint.setStatus('current')
aaaMethodTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 1), )
if mibBuilder.loadTexts: aaaMethodTable.setStatus('current')
aaaMethodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "aaaMethodIndex"))
if mibBuilder.loadTexts: aaaMethodEntry.setStatus('current')
aaaMethodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: aaaMethodIndex.setStatus('current')
aaaMethodName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaMethodName.setStatus('current')
aaaMethodGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaMethodGroupName.setStatus('current')
aaaMethodMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("start-stop", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaMethodMode.setStatus('current')
aaaMethodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 1, 1, 5), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaMethodStatus.setStatus('current')
aaaMethodClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1x", 1), ("exec", 2), ("commands", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaMethodClientType.setStatus('current')
aaaMethodPrivilegeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaMethodPrivilegeLevel.setStatus('current')
aaaRadiusGroupTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 2), )
if mibBuilder.loadTexts: aaaRadiusGroupTable.setStatus('current')
aaaRadiusGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 2, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "aaaRadiusGroupIndex"))
if mibBuilder.loadTexts: aaaRadiusGroupEntry.setStatus('current')
aaaRadiusGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: aaaRadiusGroupIndex.setStatus('current')
aaaRadiusGroupServerBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaRadiusGroupServerBitMap.setStatus('current')
aaaRadiusGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 2, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaRadiusGroupName.setStatus('current')
aaaRadiusGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 2, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaRadiusGroupStatus.setStatus('current')
aaaTacacsPlusGroupTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 3), )
if mibBuilder.loadTexts: aaaTacacsPlusGroupTable.setStatus('current')
aaaTacacsPlusGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "aaaTacacsPlusGroupIndex"))
if mibBuilder.loadTexts: aaaTacacsPlusGroupEntry.setStatus('current')
aaaTacacsPlusGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: aaaTacacsPlusGroupIndex.setStatus('current')
aaaTacacsPlusGroupServerBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaTacacsPlusGroupServerBitMap.setStatus('current')
aaaTacacsPlusGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 3, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaTacacsPlusGroupName.setStatus('current')
aaaTacacsPlusGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 3, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaTacacsPlusGroupStatus.setStatus('current')
aaaUpdate = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaUpdate.setStatus('current')
aaaAccountTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 5), )
if mibBuilder.loadTexts: aaaAccountTable.setStatus('current')
aaaAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 5, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "aaaAccountIfIndex"))
if mibBuilder.loadTexts: aaaAccountEntry.setStatus('current')
aaaAccountIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: aaaAccountIfIndex.setStatus('current')
aaaAccountMethodName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 5, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaAccountMethodName.setStatus('current')
aaaAccountProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaAccountProtocol.setStatus('current')
aaaAccountStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 5, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaAccountStatus.setStatus('current')
aaaCommandPrivilegesTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 8), )
if mibBuilder.loadTexts: aaaCommandPrivilegesTable.setStatus('current')
aaaCommandPrivilegesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 8, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "aaaCommandPrivilegesLevel"), (0, "ECS2100-28PP-MIB", "aaaCommandPrivilegesInterfaceIndex"))
if mibBuilder.loadTexts: aaaCommandPrivilegesEntry.setStatus('current')
aaaCommandPrivilegesLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: aaaCommandPrivilegesLevel.setStatus('current')
aaaCommandPrivilegesInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("console", 1), ("vty", 2))))
if mibBuilder.loadTexts: aaaCommandPrivilegesInterfaceIndex.setStatus('current')
aaaCommandPrivilegesMethodName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaCommandPrivilegesMethodName.setStatus('current')
aaaAccExecTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 9), )
if mibBuilder.loadTexts: aaaAccExecTable.setStatus('current')
aaaAccExecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 9, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "aaaAccExecIndex"))
if mibBuilder.loadTexts: aaaAccExecEntry.setStatus('current')
aaaAccExecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("console", 1), ("vty", 2))))
if mibBuilder.loadTexts: aaaAccExecIndex.setStatus('current')
aaaAccExecMethodName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 9, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaAccExecMethodName.setStatus('current')
userAuthEnablePassword = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthEnablePassword.setStatus('current')
userAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("local", 1), ("localradius", 2), ("localradiustacacs", 3), ("localtacacs", 4), ("localtacacsradius", 5), ("radius", 6), ("radiuslocal", 7), ("radiuslocaltacacs", 8), ("radiustacacs", 9), ("radiustacacslocal", 10), ("tacacs", 11), ("tacacslocal", 12), ("tacacslocalradius", 13), ("tacacsradius", 14), ("tacacsradiuslocal", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthMethod.setStatus('current')
userAuthTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10, 5), )
if mibBuilder.loadTexts: userAuthTable.setStatus('current')
userAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10, 5, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "userAuthUserName"))
if mibBuilder.loadTexts: userAuthEntry.setStatus('current')
userAuthUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: userAuthUserName.setStatus('current')
userAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthPassword.setStatus('current')
userAuthPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthPrivilege.setStatus('current')
userAuthPublicKey = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthPublicKey.setStatus('current')
userAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthStatus.setStatus('current')
ipFilterSnmpInetTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 12), )
if mibBuilder.loadTexts: ipFilterSnmpInetTable.setStatus('current')
ipFilterSnmpInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 12, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "ipFilterSnmpInetAddressType"), (1, "ECS2100-28PP-MIB", "ipFilterSnmpInetAddressStart"))
if mibBuilder.loadTexts: ipFilterSnmpInetEntry.setStatus('current')
ipFilterSnmpInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 12, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipFilterSnmpInetAddressType.setStatus('current')
ipFilterSnmpInetAddressStart = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 12, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipFilterSnmpInetAddressStart.setStatus('current')
ipFilterSnmpInetAddressEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 12, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterSnmpInetAddressEnd.setStatus('current')
ipFilterSnmpInetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 12, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterSnmpInetStatus.setStatus('current')
ipFilterHttpInetTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 13), )
if mibBuilder.loadTexts: ipFilterHttpInetTable.setStatus('current')
ipFilterHttpInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 13, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "ipFilterHttpInetAddressType"), (1, "ECS2100-28PP-MIB", "ipFilterHttpInetAddressStart"))
if mibBuilder.loadTexts: ipFilterHttpInetEntry.setStatus('current')
ipFilterHttpInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 13, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipFilterHttpInetAddressType.setStatus('current')
ipFilterHttpInetAddressStart = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 13, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipFilterHttpInetAddressStart.setStatus('current')
ipFilterHttpInetAddressEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 13, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterHttpInetAddressEnd.setStatus('current')
ipFilterHttpInetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 13, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterHttpInetStatus.setStatus('current')
ipFilterTelnetInetTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 14), )
if mibBuilder.loadTexts: ipFilterTelnetInetTable.setStatus('current')
ipFilterTelnetInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 14, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "ipFilterTelnetInetAddressType"), (1, "ECS2100-28PP-MIB", "ipFilterTelnetInetAddressStart"))
if mibBuilder.loadTexts: ipFilterTelnetInetEntry.setStatus('current')
ipFilterTelnetInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 14, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipFilterTelnetInetAddressType.setStatus('current')
ipFilterTelnetInetAddressStart = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 14, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipFilterTelnetInetAddressStart.setStatus('current')
ipFilterTelnetInetAddressEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 14, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterTelnetInetAddressEnd.setStatus('current')
ipFilterTelnetInetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 14, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterTelnetInetStatus.setStatus('current')
ipFilterAllClientCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 15))
ipFilterAllClientCtlInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 15, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterAllClientCtlInetAddressType.setStatus('current')
ipFilterAllClientCtlInetAddressStart = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 15, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterAllClientCtlInetAddressStart.setStatus('current')
ipFilterAllClientCtlInetAddressEnd = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 15, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterAllClientCtlInetAddressEnd.setStatus('current')
ipFilterAllClientCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("create", 2), ("destroy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterAllClientCtlAction.setStatus('current')
dot1xAuthConfigExtTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 11, 1), )
if mibBuilder.loadTexts: dot1xAuthConfigExtTable.setStatus('current')
dot1xAuthConfigExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 11, 1, 1), )
dot1xAuthConfigEntry.registerAugmentions(("ECS2100-28PP-MIB", "dot1xAuthConfigExtEntry"))
dot1xAuthConfigExtEntry.setIndexNames(*dot1xAuthConfigEntry.getIndexNames())
if mibBuilder.loadTexts: dot1xAuthConfigExtEntry.setStatus('current')
dot1xAuthConfigExtOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("singleHost", 1), ("multiHost", 2), ("macBasedAuth", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthConfigExtOperMode.setStatus('current')
dot1xAuthConfigExtMultiHostMaxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthConfigExtMultiHostMaxCnt.setStatus('current')
dot1xAuthConfigExtPortIntrusionAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block-traffic", 1), ("guest-vlan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthConfigExtPortIntrusionAction.setStatus('current')
networkAccessPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 2), )
if mibBuilder.loadTexts: networkAccessPortTable.setStatus('current')
networkAccessPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 2, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "networkAccessPortPortIndex"))
if mibBuilder.loadTexts: networkAccessPortEntry.setStatus('current')
networkAccessPortPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: networkAccessPortPortIndex.setStatus('current')
networkAccessPortDynamicVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 2, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkAccessPortDynamicVlan.setStatus('current')
networkAccessPortMacFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkAccessPortMacFilter.setStatus('current')
networkAccessPortGuestVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkAccessPortGuestVlan.setStatus('current')
networkAccessPortDynamicQos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 2, 1, 10), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkAccessPortDynamicQos.setStatus('current')
networkAccessClearMacAddressMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 3))
networkAccessClearMacAddressAttribute = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkAccessClearMacAddressAttribute.setStatus('current')
networkAccessClearMacAddressMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 3, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkAccessClearMacAddressMacAddress.setStatus('current')
networkAccessClearMacAddressPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkAccessClearMacAddressPort.setStatus('current')
networkAccessClearMacAddressAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noclear", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkAccessClearMacAddressAction.setStatus('current')
networkAccessMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 4), )
if mibBuilder.loadTexts: networkAccessMacAddressTable.setStatus('current')
networkAccessMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 4, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "networkAccessMacAddressAddress"), (0, "ECS2100-28PP-MIB", "networkAccessMacAddressPort"))
if mibBuilder.loadTexts: networkAccessMacAddressEntry.setStatus('current')
networkAccessMacAddressAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: networkAccessMacAddressAddress.setStatus('current')
networkAccessMacAddressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 4, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: networkAccessMacAddressPort.setStatus('current')
networkAccessMacAddressInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 4, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessMacAddressInetAddressType.setStatus('current')
networkAccessMacAddressRadiusServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 4, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessMacAddressRadiusServerInetAddress.setStatus('current')
networkAccessMacAddressTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessMacAddressTime.setStatus('current')
networkAccessMacAddressAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessMacAddressAttribute.setStatus('current')
networkAccessAging = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 5), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkAccessAging.setStatus('current')
networkAccessMacFilterWithMaskTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 6), )
if mibBuilder.loadTexts: networkAccessMacFilterWithMaskTable.setStatus('current')
networkAccessMacFilterWithMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 6, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "networkAccessMacFilterWithMaskID"), (0, "ECS2100-28PP-MIB", "networkAccessMacFilterWithMaskMacAddress"), (0, "ECS2100-28PP-MIB", "networkAccessMacFilterWithMaskMacAddressMask"))
if mibBuilder.loadTexts: networkAccessMacFilterWithMaskEntry.setStatus('current')
networkAccessMacFilterWithMaskID = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: networkAccessMacFilterWithMaskID.setStatus('current')
networkAccessMacFilterWithMaskMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 6, 1, 2), MacAddress())
if mibBuilder.loadTexts: networkAccessMacFilterWithMaskMacAddress.setStatus('current')
networkAccessMacFilterWithMaskMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 6, 1, 3), MacAddress())
if mibBuilder.loadTexts: networkAccessMacFilterWithMaskMacAddressMask.setStatus('current')
networkAccessMacFilterWithMaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 6, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: networkAccessMacFilterWithMaskStatus.setStatus('current')
system = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1))
dosSmurf = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 3))
dosSmurfStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 3, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosSmurfStatus.setStatus('current')
dosTcpNullScan = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 5))
dosTcpNullScanStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 5, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosTcpNullScanStatus.setStatus('current')
dosTcpSynFinScan = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 6))
dosTcpSynFinScanStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosTcpSynFinScanStatus.setStatus('current')
dosTcpXmasScan = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 7))
dosTcpXmasScanStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 7, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosTcpXmasScanStatus.setStatus('current')
dosTcpUdpPortZero = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 11))
dosTcpUdpPortZeroStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 11, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosTcpUdpPortZeroStatus.setStatus('current')
sysLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogStatus.setStatus('current')
sysLogHistoryFlashLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryFlashLevel.setStatus('current')
sysLogHistoryRamLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryRamLevel.setStatus('current')
remoteLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6))
remoteLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogStatus.setStatus('current')
remoteLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogLevel.setStatus('current')
remoteLogFacilityType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("localUse0", 16), ("localUse1", 17), ("localUse2", 18), ("localUse3", 19), ("localUse4", 20), ("localUse5", 21), ("localUse6", 22), ("localUse7", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogFacilityType.setStatus('current')
remoteLogServerInetTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6, 7), )
if mibBuilder.loadTexts: remoteLogServerInetTable.setStatus('current')
remoteLogServerInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6, 7, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "remoteLogServerInetAddressType"), (0, "ECS2100-28PP-MIB", "remoteLogServerInetAddress"))
if mibBuilder.loadTexts: remoteLogServerInetEntry.setStatus('current')
remoteLogServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6, 7, 1, 1), InetAddressType())
if mibBuilder.loadTexts: remoteLogServerInetAddressType.setStatus('current')
remoteLogServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6, 7, 1, 2), InetAddress())
if mibBuilder.loadTexts: remoteLogServerInetAddress.setStatus('current')
remoteLogServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6, 7, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLogServerStatus.setStatus('current')
remoteLogServerUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogServerUdpPort.setStatus('current')
smtpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7))
smtpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpStatus.setStatus('current')
smtpSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpSeverityLevel.setStatus('current')
smtpSourceEMail = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpSourceEMail.setStatus('current')
smtpServerIpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 4), )
if mibBuilder.loadTexts: smtpServerIpTable.setStatus('current')
smtpServerIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 4, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "smtpServerIp"))
if mibBuilder.loadTexts: smtpServerIpEntry.setStatus('current')
smtpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 4, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: smtpServerIp.setStatus('current')
smtpServerIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 4, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smtpServerIpStatus.setStatus('current')
smtpDestEMailTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 5), )
if mibBuilder.loadTexts: smtpDestEMailTable.setStatus('current')
smtpDestEMailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 5, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "smtpDestEMail"))
if mibBuilder.loadTexts: smtpDestEMailEntry.setStatus('current')
smtpDestEMail = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41)))
if mibBuilder.loadTexts: smtpDestEMail.setStatus('current')
smtpDestEMailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 5, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smtpDestEMailStatus.setStatus('current')
sysLogCommandLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 10), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogCommandLogStatus.setStatus('current')
consoleMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 1))
telnetMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 2))
vtyMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 3))
consoleDataBits = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits7", 1), ("databits8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleDataBits.setStatus('current')
consoleParity = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("partyNone", 1), ("partyEven", 2), ("partyOdd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleParity.setStatus('current')
consoleBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("baudRate9600", 1), ("baudRate19200", 2), ("baudRate38400", 3), ("baudRate57600", 4), ("baudRate115200", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleBaudRate.setStatus('current')
consoleStopBits = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopbits1", 1), ("stopbits2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleStopBits.setStatus('current')
consoleExecTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleExecTimeout.setStatus('current')
consolePasswordThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 120), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePasswordThreshold.setStatus('current')
consoleSilentTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleSilentTime.setStatus('current')
consoleLoginResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleLoginResponseTimeout.setStatus('current')
telnetStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 2, 4), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetStatus.setStatus('current')
telnetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortNumber.setStatus('current')
vtyExecTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtyExecTimeout.setStatus('current')
vtyPasswordThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 120), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtyPasswordThreshold.setStatus('current')
vtyLoginResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtyLoginResponseTimeout.setStatus('current')
vtyMaxSession = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtyMaxSession.setStatus('current')
vtySilentTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtySilentTime.setStatus('current')
sntpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1))
ntpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5))
sntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpStatus.setStatus('current')
sntpServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unicast", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpServiceMode.setStatus('current')
sntpPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpPollInterval.setStatus('current')
sntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1, 4), )
if mibBuilder.loadTexts: sntpServerTable.setStatus('current')
sntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1, 4, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "sntpServerIndex"))
if mibBuilder.loadTexts: sntpServerEntry.setStatus('current')
sntpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: sntpServerIndex.setStatus('current')
sntpServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1, 4, 1, 4), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServerInetAddressType.setStatus('current')
sntpServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1, 4, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServerInetAddress.setStatus('current')
sntpServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1, 4, 1, 6), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sntpServerStatus.setStatus('current')
sysCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCurrentTime.setStatus('current')
sysTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZone.setStatus('current')
sysTimeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZoneName.setStatus('current')
ntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpStatus.setStatus('current')
ntpServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unicast", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServiceMode.setStatus('current')
ntpPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPollInterval.setStatus('current')
ntpAuthenticateStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpAuthenticateStatus.setStatus('current')
ntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 5), )
if mibBuilder.loadTexts: ntpServerTable.setStatus('current')
ntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 5, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "ntpServerIpAddress"))
if mibBuilder.loadTexts: ntpServerEntry.setStatus('current')
ntpServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: ntpServerIpAddress.setStatus('current')
ntpServerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerVersion.setStatus('current')
ntpServerKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerKeyId.setStatus('current')
ntpServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 5, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpServerStatus.setStatus('current')
ntpAuthKeyTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 6), )
if mibBuilder.loadTexts: ntpAuthKeyTable.setStatus('current')
ntpAuthKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 6, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "ntpAuthKeyId"))
if mibBuilder.loadTexts: ntpAuthKeyEntry.setStatus('current')
ntpAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)))
if mibBuilder.loadTexts: ntpAuthKeyId.setStatus('current')
ntpAuthKeyWord = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpAuthKeyWord.setStatus('current')
ntpAuthKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 6, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpAuthKeyStatus.setStatus('current')
fileCopyMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1))
fileInfoMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2))
fileCopySrcOperType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 10))).clone(namedValues=NamedValues(("file", 1), ("runningCfg", 2), ("startUpCfg", 3), ("tftp", 4), ("unit", 5), ("http", 6), ("ftp", 7), ("sftp", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopySrcOperType.setStatus('current')
fileCopySrcFileName = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopySrcFileName.setStatus('current')
fileCopyDestOperType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 10, 15))).clone(namedValues=NamedValues(("file", 1), ("runningCfg", 2), ("startUpCfg", 3), ("tftp", 4), ("unit", 5), ("http", 6), ("ftp", 7), ("sftp", 10), ("addRunningCfg", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyDestOperType.setStatus('current')
fileCopyDestFileName = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyDestFileName.setStatus('current')
fileCopyFileType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("opcode", 1), ("config", 2), ("bootRom", 3), ("loader", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyFileType.setStatus('current')
fileCopyUnitId = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyUnitId.setStatus('current')
fileCopyAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notCopying", 1), ("copy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyAction.setStatus('current')
fileCopyStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56))).clone(namedValues=NamedValues(("fileCopyTftpUndefError", 1), ("fileCopyTftpFileNotFound", 2), ("fileCopyTftpAccessViolation", 3), ("fileCopyTftpDiskFull", 4), ("fileCopyTftpIllegalOperation", 5), ("fileCopyTftpUnkownTransferId", 6), ("fileCopyTftpFileExisted", 7), ("fileCopyTftpNoSuchUser", 8), ("fileCopyTftpTimeout", 9), ("fileCopyTftpSendError", 10), ("fileCopyTftpReceiverError", 11), ("fileCopyTftpSocketOpenError", 12), ("fileCopyTftpSocketBindError", 13), ("fileCopyTftpUserCancel", 14), ("fileCopyTftpCompleted", 15), ("fileCopyParaError", 16), ("fileCopyBusy", 17), ("fileCopyUnknown", 18), ("fileCopyReadFileError", 19), ("fileCopySetStartupError", 20), ("fileCopyFileSizeExceed", 21), ("fileCopyMagicWordError", 22), ("fileCopyImageTypeError", 23), ("fileCopyHeaderChecksumError", 24), ("fileCopyImageChecksumError", 25), ("fileCopyWriteFlashFinish", 26), ("fileCopyWriteFlashError", 27), ("fileCopyWriteFlashProgramming", 28), ("fileCopyError", 29), ("fileCopySuccess", 30), ("fileCopyCompleted", 31), ("fileCopyFileNotFound", 41), ("fileCopyServerPermissionDenied", 42), ("fileCopyStorageFull", 43), ("fileCopyConnectError", 44), ("fileCopyServerNotInService", 45), ("fileCopyDataConnectionOpenError", 46), ("fileCopyLogInError", 47), ("fileCopyInvalidFileName", 48), ("fileCopyServerNotAcceptProvidedCiphers", 49), ("fileCopyServerNotSupportFtps", 50), ("fileCopyFileUnavailable", 51), ("fileCopyUnclassifiedError", 52), ("fileCopyTimeout", 53), ("fileCopyProjectIdError", 54), ("fileCopyFileNumExceed", 55), ("fileCopySameVersion", 56)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCopyStatus.setStatus('current')
fileCopyServerInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 20), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyServerInetAddressType.setStatus('current')
fileCopyServerInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 21), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyServerInetAddress.setStatus('current')
fileCopyServerUserName = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyServerUserName.setStatus('current')
fileCopyServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyServerPassword.setStatus('current')
fileInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2, 1), )
if mibBuilder.loadTexts: fileInfoTable.setStatus('current')
fileInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "fileInfoUnitID"), (1, "ECS2100-28PP-MIB", "fileInfoFileName"))
if mibBuilder.loadTexts: fileInfoEntry.setStatus('current')
fileInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: fileInfoUnitID.setStatus('current')
fileInfoFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: fileInfoFileName.setStatus('current')
fileInfoFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("diag", 1), ("runtime", 2), ("syslog", 3), ("cmdlog", 4), ("config", 5), ("postlog", 6), ("private", 7), ("certificate", 8), ("webarchive", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileType.setStatus('current')
fileInfoIsStartUp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileInfoIsStartUp.setStatus('current')
fileInfoFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2, 1, 1, 5), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileSize.setStatus('current')
fileInfoCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoCreationTime.setStatus('current')
fileInfoDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDelete", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileInfoDelete.setStatus('current')
fileAutoDownloadResultTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 3), )
if mibBuilder.loadTexts: fileAutoDownloadResultTable.setStatus('current')
fileAutoDownloadResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "fileAutoDownloadResultUnitID"))
if mibBuilder.loadTexts: fileAutoDownloadResultEntry.setStatus('current')
fileAutoDownloadResultUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: fileAutoDownloadResultUnitID.setStatus('current')
fileAutoDownloadResultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notCopying", 1), ("copying", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileAutoDownloadResultAction.setStatus('current')
fileAutoDownloadResultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56))).clone(namedValues=NamedValues(("fileCopyTftpUndefError", 1), ("fileCopyTftpFileNotFound", 2), ("fileCopyTftpAccessViolation", 3), ("fileCopyTftpDiskFull", 4), ("fileCopyTftpIllegalOperation", 5), ("fileCopyTftpUnkownTransferId", 6), ("fileCopyTftpFileExisted", 7), ("fileCopyTftpNoSuchUser", 8), ("fileCopyTftpTimeout", 9), ("fileCopyTftpSendError", 10), ("fileCopyTftpReceiverError", 11), ("fileCopyTftpSocketOpenError", 12), ("fileCopyTftpSocketBindError", 13), ("fileCopyTftpUserCancel", 14), ("fileCopyTftpCompleted", 15), ("fileCopyParaError", 16), ("fileCopyBusy", 17), ("fileCopyUnknown", 18), ("fileCopyReadFileError", 19), ("fileCopySetStartupError", 20), ("fileCopyFileSizeExceed", 21), ("fileCopyMagicWordError", 22), ("fileCopyImageTypeError", 23), ("fileCopyHeaderChecksumError", 24), ("fileCopyImageChecksumError", 25), ("fileCopyWriteFlashFinish", 26), ("fileCopyWriteFlashError", 27), ("fileCopyWriteFlashProgramming", 28), ("fileCopyError", 29), ("fileCopySuccess", 30), ("fileCopyCompleted", 31), ("fileCopyFileNotFound", 41), ("fileCopyServerPermissionDenied", 42), ("fileCopyStorageFull", 43), ("fileCopyConnectError", 44), ("fileCopyServerNotInService", 45), ("fileCopyDataConnectionOpenError", 46), ("fileCopyLogInError", 47), ("fileCopyInvalidFileName", 48), ("fileCopyServerNotAcceptProvidedCiphers", 49), ("fileCopyServerNotSupportFtps", 50), ("fileCopyFileUnavailable", 51), ("fileCopyUnclassifiedError", 52), ("fileCopyTimeout", 53), ("fileCopyProjectIdError", 54), ("fileCopyFileNumExceed", 55), ("fileCopySameVersion", 56)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileAutoDownloadResultStatus.setStatus('current')
pethPseMainExtTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 5), )
if mibBuilder.loadTexts: pethPseMainExtTable.setStatus('current')
pethPseMainExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 5, 1), )
pethMainPseEntry.registerAugmentions(("ECS2100-28PP-MIB", "pethPseMainExtEntry"))
pethPseMainExtEntry.setIndexNames(*pethMainPseEntry.getIndexNames())
if mibBuilder.loadTexts: pethPseMainExtEntry.setStatus('current')
pethPseMainExtDllPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("type2Pse", 0), ("type1Pse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPseMainExtDllPowerType.setStatus('current')
pethPseMainExtDllPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPseMainExtDllPowerSource.setStatus('current')
pethPsePortExtTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 6), )
if mibBuilder.loadTexts: pethPsePortExtTable.setStatus('current')
pethPsePortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 6, 1), )
pethPsePortEntry.registerAugmentions(("ECS2100-28PP-MIB", "pethPsePortExtEntry"))
pethPsePortExtEntry.setIndexNames(*pethPsePortEntry.getIndexNames())
if mibBuilder.loadTexts: pethPsePortExtEntry.setStatus('current')
pethPsePortExtMirroredDllPdRequestedPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortExtMirroredDllPdRequestedPowerValue.setStatus('current')
pethPsePortExtDllPseAllocatedPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortExtDllPseAllocatedPowerValue.setStatus('current')
pethPsePortTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethPsePortTimeRange.setStatus('current')
pethPsePortTimeRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortTimeRangeStatus.setStatus('current')
pethPsePortExtMaximumPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3000, 34200))).setUnits('milliwatts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethPsePortExtMaximumPowerValue.setStatus('current')
pethPsePortExtUsedPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 6, 1, 14), Integer32()).setUnits('milliwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortExtUsedPowerValue.setStatus('current')
mcastStormMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 1))
mcastStormTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 1, 1), )
if mibBuilder.loadTexts: mcastStormTable.setStatus('current')
mcastStormEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 1, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mcastStormIfIndex"))
if mibBuilder.loadTexts: mcastStormEntry.setStatus('current')
mcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: mcastStormIfIndex.setStatus('current')
mcastStormStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 1, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastStormStatus.setStatus('current')
mcastStormPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastStormPktRate.setStatus('current')
mcastStormPktRateResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastStormPktRateResolution.setStatus('current')
bcastStormMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 3))
bcastStormTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 3, 1), )
if mibBuilder.loadTexts: bcastStormTable.setStatus('current')
bcastStormEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 3, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "bcastStormIfIndex"))
if mibBuilder.loadTexts: bcastStormEntry.setStatus('current')
bcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bcastStormIfIndex.setStatus('current')
bcastStormStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 3, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormStatus.setStatus('current')
bcastStormPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormPktRate.setStatus('current')
bcastStormPktRateResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcastStormPktRateResolution.setStatus('current')
unknownUcastStormMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 4))
unknownUcastStormTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 4, 1), )
if mibBuilder.loadTexts: unknownUcastStormTable.setStatus('current')
unknownUcastStormEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 4, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "unknownUcastStormIfIndex"))
if mibBuilder.loadTexts: unknownUcastStormEntry.setStatus('current')
unknownUcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: unknownUcastStormIfIndex.setStatus('current')
unknownUcastStormStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 4, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unknownUcastStormStatus.setStatus('current')
unknownUcastStormPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unknownUcastStormPktRate.setStatus('current')
unknownUcastStormPktRateResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownUcastStormPktRateResolution.setStatus('current')
atcMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5))
atcBcastStormTcApplyTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormTcApplyTime.setStatus('current')
atcBcastStormTcReleaseTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormTcReleaseTime.setStatus('current')
atcBcastStormTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3), )
if mibBuilder.loadTexts: atcBcastStormTable.setStatus('current')
atcBcastStormEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "atcBcastStormIfIndex"))
if mibBuilder.loadTexts: atcBcastStormEntry.setStatus('current')
atcBcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atcBcastStormIfIndex.setStatus('current')
atcBcastStormEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormEnable.setStatus('current')
atcBcastStormAutoRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormAutoRelease.setStatus('current')
atcBcastStormSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("packet-rate", 1), ("octet-rate", 2), ("percent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormSampleType.setStatus('current')
atcBcastStormCurrentTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atcBcastStormCurrentTrafficRate.setStatus('current')
atcBcastStormAlarmFireThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormAlarmFireThreshold.setStatus('current')
atcBcastStormAlarmClearThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormAlarmClearThreshold.setStatus('current')
atcBcastStormTcAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate-control", 1), ("shutdown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormTcAction.setStatus('current')
atcBcastStormAlarmFireTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 9), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormAlarmFireTrapStatus.setStatus('current')
atcBcastStormAlarmClearTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 10), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormAlarmClearTrapStatus.setStatus('current')
atcBcastStormTcApplyTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 11), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormTcApplyTrapStatus.setStatus('current')
atcBcastStormTcReleaseTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 12), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormTcReleaseTrapStatus.setStatus('current')
atcMcastStormTcApplyTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormTcApplyTime.setStatus('current')
atcMcastStormTcReleaseTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormTcReleaseTime.setStatus('current')
atcMcastStormTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6), )
if mibBuilder.loadTexts: atcMcastStormTable.setStatus('current')
atcMcastStormEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "atcMcastStormIfIndex"))
if mibBuilder.loadTexts: atcMcastStormEntry.setStatus('current')
atcMcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atcMcastStormIfIndex.setStatus('current')
atcMcastStormEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormEnable.setStatus('current')
atcMcastStormAutoRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormAutoRelease.setStatus('current')
atcMcastStormSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("packet-rate", 1), ("octet-rate", 2), ("percent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormSampleType.setStatus('current')
atcMcastStormCurrentTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atcMcastStormCurrentTrafficRate.setStatus('current')
atcMcastStormAlarmFireThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormAlarmFireThreshold.setStatus('current')
atcMcastStormAlarmClearThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormAlarmClearThreshold.setStatus('current')
atcMcastStormTcAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate-control", 1), ("shutdown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormTcAction.setStatus('current')
atcMcastStormAlarmFireTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 9), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormAlarmFireTrapStatus.setStatus('current')
atcMcastStormAlarmClearTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 10), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormAlarmClearTrapStatus.setStatus('current')
atcMcastStormTcApplyTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 11), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormTcApplyTrapStatus.setStatus('current')
atcMcastStormTcReleaseTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 12), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormTcReleaseTrapStatus.setStatus('current')
cpuStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 2))
memoryStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 3))
cpuCurrentUti = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCurrentUti.setStatus('current')
cpuStatMaxUti = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuStatMaxUti.setStatus('current')
cpuStatAvgUti = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuStatAvgUti.setStatus('current')
cpuPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuPeakTime.setStatus('current')
cpuPeakDuration = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 2, 5), Integer32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuPeakDuration.setStatus('current')
cpuUtiRisingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuUtiRisingThreshold.setStatus('current')
cpuUtiFallingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuUtiFallingThreshold.setStatus('current')
memoryTotal = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryTotal.setStatus('current')
memoryAllocated = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryAllocated.setStatus('current')
memoryFreed = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryFreed.setStatus('current')
memoryFreedInPercent = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryFreedInPercent.setStatus('current')
memoryUtiRisingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: memoryUtiRisingThreshold.setStatus('current')
memoryUtiFallingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: memoryUtiFallingThreshold.setStatus('current')
taskCpuTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 4), )
if mibBuilder.loadTexts: taskCpuTable.setStatus('current')
taskCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 4, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "taskCpuName"))
if mibBuilder.loadTexts: taskCpuEntry.setStatus('current')
taskCpuName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)))
if mibBuilder.loadTexts: taskCpuName.setStatus('current')
taskCpuCurrentUti = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskCpuCurrentUti.setStatus('current')
taskCpuStatMaxUti = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskCpuStatMaxUti.setStatus('current')
taskCpuStatAvgUti = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskCpuStatAvgUti.setStatus('current')
cpuGuard = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 5))
cpuGuardStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 5, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuGuardStatus.setStatus('current')
cpuGuardHighWatermark = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuGuardHighWatermark.setStatus('current')
cpuGuardLowWatermark = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuGuardLowWatermark.setStatus('current')
cpuGuardMaxThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuGuardMaxThreshold.setStatus('current')
cpuGuardMinThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuGuardMinThreshold.setStatus('current')
cpuGuardTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 5, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuGuardTrapStatus.setStatus('current')
cpuGuardCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuGuardCurrentThreshold.setStatus('current')
mvrForwardingPriority = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrForwardingPriority.setStatus('current')
mvrDomainTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 20), )
if mibBuilder.loadTexts: mvrDomainTable.setStatus('current')
mvrDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 20, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mvrDomainId"))
if mibBuilder.loadTexts: mvrDomainEntry.setStatus('current')
mvrDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mvrDomainId.setStatus('current')
mvrDomainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 20, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrDomainStatus.setStatus('current')
mvrDomainRunningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrDomainRunningStatus.setStatus('current')
mvrDomainVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 20, 1, 4), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrDomainVlanId.setStatus('current')
mvrDomainUpstreamSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 20, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrDomainUpstreamSourceIp.setStatus('current')
mvrDomainClearDynamicGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 20, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrDomainClearDynamicGroups.setStatus('current')
mvrDomainPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 21), )
if mibBuilder.loadTexts: mvrDomainPortTable.setStatus('current')
mvrDomainPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 21, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mvrPortDomainId"), (0, "ECS2100-28PP-MIB", "mvrDomainIfIndex"))
if mibBuilder.loadTexts: mvrDomainPortEntry.setStatus('current')
mvrPortDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mvrPortDomainId.setStatus('current')
mvrDomainIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 21, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: mvrDomainIfIndex.setStatus('current')
mvrDomainPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("source", 1), ("receiver", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrDomainPortType.setStatus('current')
mvrDomainPortImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 21, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrDomainPortImmediateLeave.setStatus('current')
mvrDomainPortActive = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrDomainPortActive.setStatus('current')
mvrDomainPortImmediateLeaveByHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 21, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrDomainPortImmediateLeaveByHostIp.setStatus('current')
mvrProfileTable = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22))
mvrProfileCtlTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 1), )
if mibBuilder.loadTexts: mvrProfileCtlTable.setStatus('current')
mvrProfileCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mvrProfileCtlId"))
if mibBuilder.loadTexts: mvrProfileCtlEntry.setStatus('current')
mvrProfileCtlId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: mvrProfileCtlId.setStatus('current')
mvrProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrProfileName.setStatus('current')
mvrProfileCtlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAction", 0), ("create", 1), ("destory", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrProfileCtlAction.setStatus('current')
mvrProfileGroupCtlTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 2), )
if mibBuilder.loadTexts: mvrProfileGroupCtlTable.setStatus('current')
mvrProfileGroupCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 2, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mvrProfileGropuCtlProfileId"), (0, "ECS2100-28PP-MIB", "mvrProfileGroupCtlId"))
if mibBuilder.loadTexts: mvrProfileGroupCtlEntry.setStatus('current')
mvrProfileGropuCtlProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: mvrProfileGropuCtlProfileId.setStatus('current')
mvrProfileGroupCtlId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: mvrProfileGroupCtlId.setStatus('current')
mvrProfileGroupStartIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrProfileGroupStartIPAddress.setStatus('current')
mvrProfileGroupEndIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrProfileGroupEndIPAddress.setStatus('current')
mvrProfileGroupCtlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAction", 0), ("create", 1), ("destory", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrProfileGroupCtlAction.setStatus('current')
mvrDomainAssociatedProfileTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 23), )
if mibBuilder.loadTexts: mvrDomainAssociatedProfileTable.setStatus('current')
mvrDomainAssociatedProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 23, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mvrProfileDomainId"), (0, "ECS2100-28PP-MIB", "mvrProfileId"))
if mibBuilder.loadTexts: mvrDomainAssociatedProfileEntry.setStatus('current')
mvrProfileDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mvrProfileDomainId.setStatus('current')
mvrProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: mvrProfileId.setStatus('current')
mvrProfileAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAction", 0), ("create", 1), ("destory", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrProfileAction.setStatus('current')
mvrDomainGroupStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 24), )
if mibBuilder.loadTexts: mvrDomainGroupStaticTable.setStatus('current')
mvrDomainGroupStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 24, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mvrGroupStaticDomainId"), (0, "ECS2100-28PP-MIB", "mvrDomainGroupStaticAddress"), (0, "ECS2100-28PP-MIB", "mvrDomainGroupStaticReceiverVlan"))
if mibBuilder.loadTexts: mvrDomainGroupStaticEntry.setStatus('current')
mvrGroupStaticDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mvrGroupStaticDomainId.setStatus('current')
mvrDomainGroupStaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 24, 1, 2), IpAddress())
if mibBuilder.loadTexts: mvrDomainGroupStaticAddress.setStatus('current')
mvrDomainGroupStaticReceiverVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 24, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: mvrDomainGroupStaticReceiverVlan.setStatus('current')
mvrDomainGroupStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 24, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrDomainGroupStaticPorts.setStatus('current')
mvrDomainGroupCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 25), )
if mibBuilder.loadTexts: mvrDomainGroupCurrentTable.setStatus('current')
mvrDomainGroupCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 25, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mvrGroupCurrenDomainId"), (0, "ECS2100-28PP-MIB", "mvrDomainGroupCurrentAddress"), (0, "ECS2100-28PP-MIB", "mvrDomainGroupCurrentReceiverVlan"))
if mibBuilder.loadTexts: mvrDomainGroupCurrentEntry.setStatus('current')
mvrGroupCurrenDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mvrGroupCurrenDomainId.setStatus('current')
mvrDomainGroupCurrentAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 25, 1, 2), IpAddress())
if mibBuilder.loadTexts: mvrDomainGroupCurrentAddress.setStatus('current')
mvrDomainGroupCurrentReceiverVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 25, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: mvrDomainGroupCurrentReceiverVlan.setStatus('current')
mvrDomainGroupCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 25, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrDomainGroupCurrentPorts.setStatus('current')
mvrProxySwitching = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 27), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrProxySwitching.setStatus('current')
mvrRobustnessValue = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrRobustnessValue.setStatus('current')
mvrProxyQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrProxyQueryInterval.setStatus('current')
mvrSourcePortmode = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrSourcePortmode.setStatus('current')
mvrPortStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32), )
if mibBuilder.loadTexts: mvrPortStatisticsTable.setStatus('current')
mvrPortStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mvrPortStatisticsDomainId"), (0, "ECS2100-28PP-MIB", "mvrPortStatisticsPortIndex"))
if mibBuilder.loadTexts: mvrPortStatisticsEntry.setStatus('current')
mvrPortStatisticsDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mvrPortStatisticsDomainId.setStatus('current')
mvrPortStatisticsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: mvrPortStatisticsPortIndex.setStatus('current')
mvrPortStatisticsNumGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumGroups.setStatus('current')
mvrPortStatisticsNumJoinSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumJoinSend.setStatus('current')
mvrPortStatisticsNumJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumJoins.setStatus('current')
mvrPortStatisticsNumJoinSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumJoinSuccess.setStatus('current')
mvrPortStatisticsNumLeavesSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumLeavesSend.setStatus('current')
mvrPortStatisticsNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumLeaves.setStatus('current')
mvrPortStatisticsNumGeneralQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumGeneralQuerySend.setStatus('current')
mvrPortStatisticsNumGeneralQueryRecevied = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumGeneralQueryRecevied.setStatus('current')
mvrPortStatisticsNumSepcificQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumSepcificQuerySend.setStatus('current')
mvrPortStatisticsNumSpecificQueryReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumSpecificQueryReceived.setStatus('current')
mvrPortStatisticsNumInvalidReport = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumInvalidReport.setStatus('current')
mvrPortStatisticsClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrPortStatisticsClearStatistics.setStatus('current')
mvrVlanStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33), )
if mibBuilder.loadTexts: mvrVlanStatisticsTable.setStatus('current')
mvrVlanStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mvrVlanStatisticsDomainId"), (0, "ECS2100-28PP-MIB", "mvrVlanStatisticsVlanId"))
if mibBuilder.loadTexts: mvrVlanStatisticsEntry.setStatus('current')
mvrVlanStatisticsDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mvrVlanStatisticsDomainId.setStatus('current')
mvrVlanStatisticsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 2), VlanIndex())
if mibBuilder.loadTexts: mvrVlanStatisticsVlanId.setStatus('current')
mvrVlanStatisticsNumGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumGroups.setStatus('current')
mvrVlanStatisticsNumJoinSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumJoinSend.setStatus('current')
mvrVlanStatisticsNumJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumJoins.setStatus('current')
mvrVlanStatisticsNumJoinSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumJoinSuccess.setStatus('current')
mvrVlanStatisticsNumLeavesSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumLeavesSend.setStatus('current')
mvrVlanStatisticsNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumLeaves.setStatus('current')
mvrVlanStatisticsNumGeneralQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumGeneralQuerySend.setStatus('current')
mvrVlanStatisticsNumGeneralQueryRecevied = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumGeneralQueryRecevied.setStatus('current')
mvrVlanStatisticsNumSepcificQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumSepcificQuerySend.setStatus('current')
mvrVlanStatisticsNumSpecificQueryReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumSpecificQueryReceived.setStatus('current')
mvrVlanStatisticsNumInvalidReport = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumInvalidReport.setStatus('current')
mvrVlanStatisticsClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrVlanStatisticsClearStatistics.setStatus('current')
dhcpSnoopGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 1))
dhcpSnoopVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 2))
dhcpSnoopInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 3))
dhcpSnoopBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4))
dhcpSnoopStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 5))
dhcpSnoopEnable = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopEnable.setStatus('current')
dhcpSnoopVerifyMacAddressEnable = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopVerifyMacAddressEnable.setStatus('current')
dhcpSnoopInformationOptionEnable = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopInformationOptionEnable.setStatus('current')
dhcpSnoopInformationOptionPolicy = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("keep", 2), ("replace", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopInformationOptionPolicy.setStatus('current')
dhcpSnoopBindingsTableCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("store", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopBindingsTableCtlAction.setStatus('current')
dhcpSnoopLimitRate = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopLimitRate.setStatus('current')
dhcpSnoopInformationOptionEncodeFormat = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("extra-subtype-included", 1), ("no-extra-subtype-included", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopInformationOptionEncodeFormat.setStatus('current')
dhcpSnoopVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 2, 1), )
if mibBuilder.loadTexts: dhcpSnoopVlanConfigTable.setStatus('current')
dhcpSnoopVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 2, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "dhcpSnoopVlanIndex"))
if mibBuilder.loadTexts: dhcpSnoopVlanConfigEntry.setStatus('current')
dhcpSnoopVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 2, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: dhcpSnoopVlanIndex.setStatus('current')
dhcpSnoopVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 2, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopVlanEnable.setStatus('current')
dhcpSnoopPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 3, 1), )
if mibBuilder.loadTexts: dhcpSnoopPortConfigTable.setStatus('current')
dhcpSnoopPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 3, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "dhcpSnoopPortIfIndex"))
if mibBuilder.loadTexts: dhcpSnoopPortConfigEntry.setStatus('current')
dhcpSnoopPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dhcpSnoopPortIfIndex.setStatus('current')
dhcpSnoopPortTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 3, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopPortTrustEnable.setStatus('current')
dhcpSnoopPortMaxNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopPortMaxNumber.setStatus('current')
dhcpSnoopBindingsTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4, 1), )
if mibBuilder.loadTexts: dhcpSnoopBindingsTable.setStatus('current')
dhcpSnoopBindingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "dhcpSnoopBindingsIpAddress"), (0, "ECS2100-28PP-MIB", "dhcpSnoopBindingsMacAddress"))
if mibBuilder.loadTexts: dhcpSnoopBindingsEntry.setStatus('current')
dhcpSnoopBindingsVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4, 1, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsVlanIndex.setStatus('current')
dhcpSnoopBindingsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: dhcpSnoopBindingsMacAddress.setStatus('current')
dhcpSnoopBindingsAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsAddrType.setStatus('current')
dhcpSnoopBindingsEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsEntryType.setStatus('current')
dhcpSnoopBindingsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4, 1, 1, 5), IpAddress())
if mibBuilder.loadTexts: dhcpSnoopBindingsIpAddress.setStatus('current')
dhcpSnoopBindingsPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4, 1, 1, 6), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsPortIfIndex.setStatus('current')
dhcpSnoopBindingsLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsLeaseTime.setStatus('current')
dhcpSnoopTotalForwardedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopTotalForwardedPkts.setStatus('current')
dhcpSnoopUntrustedPortDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopUntrustedPortDroppedPkts.setStatus('current')
ipSrcGuardConfigTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 1), )
if mibBuilder.loadTexts: ipSrcGuardConfigTable.setStatus('current')
ipSrcGuardConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "ipSrcGuardPortIfIndex"))
if mibBuilder.loadTexts: ipSrcGuardConfigEntry.setStatus('current')
ipSrcGuardPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ipSrcGuardPortIfIndex.setStatus('current')
ipSrcGuardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("diabled", 0), ("srcIp", 1), ("srcIpMac", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSrcGuardMode.setStatus('current')
ipSrcGuardAclTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 3), )
if mibBuilder.loadTexts: ipSrcGuardAclTable.setStatus('current')
ipSrcGuardAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "ipSrcGuardAclBindingIpAddress"), (0, "ECS2100-28PP-MIB", "ipSrcGuardAclBindingMacAddress"), (0, "ECS2100-28PP-MIB", "ipSrcGuardAclBindingEntryType"))
if mibBuilder.loadTexts: ipSrcGuardAclEntry.setStatus('current')
ipSrcGuardAclBindingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipSrcGuardAclBindingIpAddress.setStatus('current')
ipSrcGuardAclBindingMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 3, 1, 2), MacAddress())
if mibBuilder.loadTexts: ipSrcGuardAclBindingMacAddress.setStatus('current')
ipSrcGuardAclBindingEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2), ("bootp", 3))))
if mibBuilder.loadTexts: ipSrcGuardAclBindingEntryType.setStatus('current')
ipSrcGuardAclBindingVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 3, 1, 4), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSrcGuardAclBindingVlanIndex.setStatus('current')
ipSrcGuardAclBindingPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 3, 1, 5), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSrcGuardAclBindingPortIfIndex.setStatus('current')
ipSrcGuardAclBindingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSrcGuardAclBindingStatus.setStatus('current')
daiGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 1))
daiVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 2))
daiInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 3))
daiLog = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4))
daiStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 5))
daiGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiGlobalStatus.setStatus('current')
daiGlobalSrcMacValidation = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiGlobalSrcMacValidation.setStatus('current')
daiGlobalDestMacValidation = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiGlobalDestMacValidation.setStatus('current')
daiGlobalIpAddrValidation = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiGlobalIpAddrValidation.setStatus('current')
daiGlobalLogNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiGlobalLogNumber.setStatus('current')
daiGlobalLogInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiGlobalLogInterval.setStatus('current')
daiGlobalAdditionalValidStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 1, 7), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiGlobalAdditionalValidStatus.setStatus('current')
daiGlobalIpAddrValidationAllowZeros = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 1, 8), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiGlobalIpAddrValidationAllowZeros.setStatus('current')
daiVlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 2, 1), )
if mibBuilder.loadTexts: daiVlanTable.setStatus('current')
daiVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 2, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "daiVlanIndex"))
if mibBuilder.loadTexts: daiVlanEntry.setStatus('current')
daiVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 2, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: daiVlanIndex.setStatus('current')
daiVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 2, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiVlanStatus.setStatus('current')
daiVlanArpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiVlanArpAclName.setStatus('current')
daiVlanArpAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiVlanArpAclStatus.setStatus('current')
daiPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 3, 1), )
if mibBuilder.loadTexts: daiPortTable.setStatus('current')
daiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 3, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "daiPortIfIndex"))
if mibBuilder.loadTexts: daiPortEntry.setStatus('current')
daiPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: daiPortIfIndex.setStatus('current')
daiPortTrustStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 3, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiPortTrustStatus.setStatus('current')
daiPortRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 2048), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiPortRateLimit.setStatus('current')
daiLogTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4, 1), )
if mibBuilder.loadTexts: daiLogTable.setStatus('current')
daiLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "daiLogIndex"))
if mibBuilder.loadTexts: daiLogEntry.setStatus('current')
daiLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: daiLogIndex.setStatus('current')
daiLogVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4, 1, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiLogVlan.setStatus('current')
daiLogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiLogPort.setStatus('current')
daiLogSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiLogSrcIpAddress.setStatus('current')
daiLogDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiLogDestIpAddress.setStatus('current')
daiLogSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiLogSrcMacAddress.setStatus('current')
daiLogDestMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiLogDestMacAddress.setStatus('current')
daiTotalReceivedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiTotalReceivedPkts.setStatus('current')
daiTotalDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiTotalDroppedPkts.setStatus('current')
daiTotalProcessedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiTotalProcessedPkts.setStatus('current')
daiTotalSrcMacDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiTotalSrcMacDroppedPkts.setStatus('current')
daiTotalDestMacDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiTotalDestMacDroppedPkts.setStatus('current')
daiTotalIpAddrDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiTotalIpAddrDroppedPkts.setStatus('current')
daiTotalArpAclDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiTotalArpAclDroppedPkts.setStatus('current')
daiTotalDhcpSnoopingDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiTotalDhcpSnoopingDroppedPkts.setStatus('current')
timeRangeTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 1), )
if mibBuilder.loadTexts: timeRangeTable.setStatus('current')
timeRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "timeRangeIndex"))
if mibBuilder.loadTexts: timeRangeEntry.setStatus('current')
timeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeRangeIndex.setStatus('current')
timeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeName.setStatus('current')
timeRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 1, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeRangeStatus.setStatus('current')
timeRangePeriodicTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2), )
if mibBuilder.loadTexts: timeRangePeriodicTable.setStatus('current')
timeRangePeriodicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "timeRangePeriodicTimeRangeIndex"), (0, "ECS2100-28PP-MIB", "timeRangePeriodicStartDaysOfTheWeek"), (0, "ECS2100-28PP-MIB", "timeRangePeriodicStartHours"), (0, "ECS2100-28PP-MIB", "timeRangePeriodicStartMinutes"), (0, "ECS2100-28PP-MIB", "timeRangePeriodicEndDaysOfTheWeek"), (0, "ECS2100-28PP-MIB", "timeRangePeriodicEndHours"), (0, "ECS2100-28PP-MIB", "timeRangePeriodicEndMinutes"))
if mibBuilder.loadTexts: timeRangePeriodicEntry.setStatus('current')
timeRangePeriodicTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: timeRangePeriodicTimeRangeIndex.setStatus('current')
timeRangePeriodicStartDaysOfTheWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("daily", 7), ("weekdays", 8), ("weekend", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeRangePeriodicStartDaysOfTheWeek.setStatus('current')
timeRangePeriodicStartHours = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: timeRangePeriodicStartHours.setStatus('current')
timeRangePeriodicStartMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59)))
if mibBuilder.loadTexts: timeRangePeriodicStartMinutes.setStatus('current')
timeRangePeriodicEndDaysOfTheWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("daily", 7), ("weekdays", 8), ("weekend", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeRangePeriodicEndDaysOfTheWeek.setStatus('current')
timeRangePeriodicEndHours = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: timeRangePeriodicEndHours.setStatus('current')
timeRangePeriodicEndMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59)))
if mibBuilder.loadTexts: timeRangePeriodicEndMinutes.setStatus('current')
timeRangePeriodicStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2, 1, 8), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeRangePeriodicStatus.setStatus('current')
timeRangeAbsoluteTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3), )
if mibBuilder.loadTexts: timeRangeAbsoluteTable.setStatus('current')
timeRangeAbsoluteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "timeRangeAbsoluteTimeRangeIndex"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteStartYears"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteStartMonths"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteStartDays"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteStartHours"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteStartMinutes"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteEndYears"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteEndMonths"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteEndDays"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteEndHours"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteEndMinutes"))
if mibBuilder.loadTexts: timeRangeAbsoluteEntry.setStatus('current')
timeRangeAbsoluteTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: timeRangeAbsoluteTimeRangeIndex.setStatus('current')
timeRangeAbsoluteStartYears = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2013, 2037), ValueRangeConstraint(65535, 65535), )))
if mibBuilder.loadTexts: timeRangeAbsoluteStartYears.setStatus('current')
timeRangeAbsoluteStartMonths = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 12), ValueRangeConstraint(255, 255), )))
if mibBuilder.loadTexts: timeRangeAbsoluteStartMonths.setStatus('current')
timeRangeAbsoluteStartDays = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 31), ValueRangeConstraint(255, 255), )))
if mibBuilder.loadTexts: timeRangeAbsoluteStartDays.setStatus('current')
timeRangeAbsoluteStartHours = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(255, 255), )))
if mibBuilder.loadTexts: timeRangeAbsoluteStartHours.setStatus('current')
timeRangeAbsoluteStartMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 59), ValueRangeConstraint(255, 255), )))
if mibBuilder.loadTexts: timeRangeAbsoluteStartMinutes.setStatus('current')
timeRangeAbsoluteEndYears = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2013, 2037), ValueRangeConstraint(65535, 65535), )))
if mibBuilder.loadTexts: timeRangeAbsoluteEndYears.setStatus('current')
timeRangeAbsoluteEndMonths = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 12), ValueRangeConstraint(255, 255), )))
if mibBuilder.loadTexts: timeRangeAbsoluteEndMonths.setStatus('current')
timeRangeAbsoluteEndDays = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 31), ValueRangeConstraint(255, 255), )))
if mibBuilder.loadTexts: timeRangeAbsoluteEndDays.setStatus('current')
timeRangeAbsoluteEndHours = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(255, 255), )))
if mibBuilder.loadTexts: timeRangeAbsoluteEndHours.setStatus('current')
timeRangeAbsoluteEndMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 59), ValueRangeConstraint(255, 255), )))
if mibBuilder.loadTexts: timeRangeAbsoluteEndMinutes.setStatus('current')
timeRangeAbsoluteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 12), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeRangeAbsoluteStatus.setStatus('current')
lbdGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 1))
lbdInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 2))
lbdGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdGlobalStatus.setStatus('current')
lbdTransmitInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdTransmitInterval.setStatus('current')
lbdRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdRecoverTime.setStatus('current')
lbdMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port-based", 1), ("vlan-based", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdMode.setStatus('deprecated')
lbdAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("shutdown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdAction.setStatus('current')
lbdTrap = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("detect", 2), ("recover", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdTrap.setStatus('current')
lbdPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 2, 1), )
if mibBuilder.loadTexts: lbdPortTable.setStatus('current')
lbdPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 2, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "lbdPortIfIndex"))
if mibBuilder.loadTexts: lbdPortEntry.setStatus('current')
lbdPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: lbdPortIfIndex.setStatus('current')
lbdPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdPortAdminState.setStatus('current')
lbdPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("looped", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbdPortOperState.setStatus('current')
lbdPortLoopedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbdPortLoopedVlan.setStatus('current')
mldSnoopStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 1), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopStatus.setStatus('current')
mldSnoopQuerier = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 2), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopQuerier.setStatus('current')
mldSnoopRobustness = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopRobustness.setStatus('current')
mldSnoopQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 125)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopQueryInterval.setStatus('current')
mldSnoopQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopQueryMaxResponseTime.setStatus('current')
mldSnoopRouterPortExpireTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 500)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopRouterPortExpireTime.setStatus('current')
mldSnoopVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopVersion.setStatus('current')
mldSnoopUnknownMcastMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flood", 1), ("toRouterPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopUnknownMcastMode.setStatus('current')
mldSnoopRouterCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 9), )
if mibBuilder.loadTexts: mldSnoopRouterCurrentTable.setStatus('current')
mldSnoopRouterCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 9, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopRouterCurrentVlanIndex"))
if mibBuilder.loadTexts: mldSnoopRouterCurrentEntry.setStatus('current')
mldSnoopRouterCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mldSnoopRouterCurrentVlanIndex.setStatus('current')
mldSnoopRouterCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 9, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopRouterCurrentPorts.setStatus('current')
mldSnoopRouterStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 10), )
if mibBuilder.loadTexts: mldSnoopRouterStaticTable.setStatus('current')
mldSnoopRouterStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 10, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopRouterStaticVlanIndex"))
if mibBuilder.loadTexts: mldSnoopRouterStaticEntry.setStatus('current')
mldSnoopRouterStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mldSnoopRouterStaticVlanIndex.setStatus('current')
mldSnoopRouterStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 10, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mldSnoopRouterStaticPorts.setStatus('current')
mldSnoopRouterStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 10, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mldSnoopRouterStaticStatus.setStatus('current')
mldSnoopMulticastCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 11), )
if mibBuilder.loadTexts: mldSnoopMulticastCurrentTable.setStatus('current')
mldSnoopMulticastCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 11, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopMulticastCurrentVlanIndex"), (0, "ECS2100-28PP-MIB", "mldSnoopMulticastCurrentIpAddress"), (0, "ECS2100-28PP-MIB", "mldSnoopMulticastCurrentSourceIpAddress"))
if mibBuilder.loadTexts: mldSnoopMulticastCurrentEntry.setStatus('current')
mldSnoopMulticastCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mldSnoopMulticastCurrentVlanIndex.setStatus('current')
mldSnoopMulticastCurrentIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 11, 1, 2), InetAddressIPv6())
if mibBuilder.loadTexts: mldSnoopMulticastCurrentIpAddress.setStatus('current')
mldSnoopMulticastCurrentSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 11, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: mldSnoopMulticastCurrentSourceIpAddress.setStatus('current')
mldSnoopMulticastCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 11, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopMulticastCurrentPorts.setStatus('current')
mldSnoopMulticastStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 12), )
if mibBuilder.loadTexts: mldSnoopMulticastStaticTable.setStatus('current')
mldSnoopMulticastStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 12, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopMulticastStaticVlanIndex"), (0, "ECS2100-28PP-MIB", "mldSnoopMulticastStaticIpAddress"))
if mibBuilder.loadTexts: mldSnoopMulticastStaticEntry.setStatus('current')
mldSnoopMulticastStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mldSnoopMulticastStaticVlanIndex.setStatus('current')
mldSnoopMulticastStaticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 12, 1, 2), InetAddressIPv6())
if mibBuilder.loadTexts: mldSnoopMulticastStaticIpAddress.setStatus('current')
mldSnoopMulticastStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 12, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mldSnoopMulticastStaticPorts.setStatus('current')
mldSnoopMulticastStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 12, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mldSnoopMulticastStaticStatus.setStatus('current')
mldSnoopCurrentVlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 13), )
if mibBuilder.loadTexts: mldSnoopCurrentVlanTable.setStatus('current')
mldSnoopCurrentVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 13, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopCurrentVlanIndex"))
if mibBuilder.loadTexts: mldSnoopCurrentVlanEntry.setStatus('current')
mldSnoopCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mldSnoopCurrentVlanIndex.setStatus('current')
mldSnoopCurrentVlanImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 13, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopCurrentVlanImmediateLeave.setStatus('current')
mldSnoopCurrentVlanImmediateLeaveByHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 13, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopCurrentVlanImmediateLeaveByHostIp.setStatus('current')
mldSnoopProxyReporting = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 14), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopProxyReporting.setStatus('current')
mldSnoopUnsolicitedReportInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopUnsolicitedReportInterval.setStatus('current')
mldSnoopPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16), )
if mibBuilder.loadTexts: mldSnoopPortTable.setStatus('current')
mldSnoopPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopPortIndex"))
if mibBuilder.loadTexts: mldSnoopPortEntry.setStatus('current')
mldSnoopPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mldSnoopPortIndex.setStatus('current')
mldSnoopQueryDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopQueryDrop.setStatus('current')
mldSnoopMulticastDataDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopMulticastDataDrop.setStatus('current')
mldSnoopPortNumGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumGroups.setStatus('current')
mldSnoopPortNumJoinSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumJoinSend.setStatus('current')
mldSnoopPortNumJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumJoins.setStatus('current')
mldSnoopPortNumJoinSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumJoinSuccess.setStatus('current')
mldSnoopPortNumLeavesSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumLeavesSend.setStatus('current')
mldSnoopPortNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumLeaves.setStatus('current')
mldSnoopPortNumGeneralQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumGeneralQuerySend.setStatus('current')
mldSnoopPortNumGeneralQueryRecevied = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumGeneralQueryRecevied.setStatus('current')
mldSnoopPortNumSepcificQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumSepcificQuerySend.setStatus('current')
mldsnoopPortNumSpecificQueryReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsnoopPortNumSpecificQueryReceived.setStatus('current')
mldSnoopPortNumInvalidReport = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumInvalidReport.setStatus('current')
mldSnoopPortClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopPortClearStatistics.setStatus('current')
mldSnoopFilterStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 17), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopFilterStatus.setStatus('current')
mldSnoopProfileTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 18), )
if mibBuilder.loadTexts: mldSnoopProfileTable.setStatus('current')
mldSnoopProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 18, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopProfileId"))
if mibBuilder.loadTexts: mldSnoopProfileEntry.setStatus('current')
mldSnoopProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mldSnoopProfileId.setStatus('current')
mldSnoopProfileAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopProfileAction.setStatus('current')
mldSnoopProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 18, 1, 3), ValidStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopProfileStatus.setStatus('current')
mldSnoopProfileCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 19))
mldSnoopProfileCtlId = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 19, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopProfileCtlId.setStatus('current')
mldSnoopProfileCtlInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 19, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopProfileCtlInetAddressType.setStatus('current')
mldSnoopProfileCtlStartInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 19, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopProfileCtlStartInetAddress.setStatus('current')
mldSnoopProfileCtlEndInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 19, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopProfileCtlEndInetAddress.setStatus('current')
mldSnoopProfileCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 19, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("create", 2), ("destroy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopProfileCtlAction.setStatus('current')
mldSnoopProfileRangeTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 20), )
if mibBuilder.loadTexts: mldSnoopProfileRangeTable.setStatus('current')
mldSnoopProfileRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 20, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopProfileRangeProfileId"), (0, "ECS2100-28PP-MIB", "mldSnoopProfileRangeInetAddressType"), (0, "ECS2100-28PP-MIB", "mldSnoopProfileRangeStartInetAddress"), (0, "ECS2100-28PP-MIB", "mldSnoopProfileRangeEndInetAddress"))
if mibBuilder.loadTexts: mldSnoopProfileRangeEntry.setStatus('current')
mldSnoopProfileRangeProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: mldSnoopProfileRangeProfileId.setStatus('current')
mldSnoopProfileRangeInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 20, 1, 2), InetAddressType())
if mibBuilder.loadTexts: mldSnoopProfileRangeInetAddressType.setStatus('current')
mldSnoopProfileRangeStartInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 20, 1, 3), InetAddress())
if mibBuilder.loadTexts: mldSnoopProfileRangeStartInetAddress.setStatus('current')
mldSnoopProfileRangeEndInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 20, 1, 4), InetAddress())
if mibBuilder.loadTexts: mldSnoopProfileRangeEndInetAddress.setStatus('current')
mldSnoopProfileRangeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopProfileRangeAction.setStatus('current')
mldSnoopFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 21), )
if mibBuilder.loadTexts: mldSnoopFilterPortTable.setStatus('current')
mldSnoopFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 21, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopFilterPortIndex"))
if mibBuilder.loadTexts: mldSnoopFilterPortEntry.setStatus('current')
mldSnoopFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 21, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mldSnoopFilterPortIndex.setStatus('current')
mldSnoopFilterPortProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 21, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopFilterPortProfileId.setStatus('current')
mldSnoopThrottlePortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 22), )
if mibBuilder.loadTexts: mldSnoopThrottlePortTable.setStatus('current')
mldSnoopThrottlePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 22, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopThrottlePortIndex"))
if mibBuilder.loadTexts: mldSnoopThrottlePortEntry.setStatus('current')
mldSnoopThrottlePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 22, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mldSnoopThrottlePortIndex.setStatus('current')
mldSnoopThrottlePortRunningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 22, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopThrottlePortRunningStatus.setStatus('current')
mldSnoopThrottlePortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("replace", 1), ("deny", 2))).clone('deny')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopThrottlePortAction.setStatus('current')
mldSnoopThrottlePortMaxGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopThrottlePortMaxGroups.setStatus('current')
mldSnoopThrottlePortCurrentGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 22, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopThrottlePortCurrentGroups.setStatus('current')
mldSnoopClearDynamicGroups = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopClearDynamicGroups.setStatus('current')
mldSnoopVlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24), )
if mibBuilder.loadTexts: mldSnoopVlanTable.setStatus('current')
mldSnoopVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopVlanIndex"))
if mibBuilder.loadTexts: mldSnoopVlanEntry.setStatus('current')
mldSnoopVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 1), VlanIndex())
if mibBuilder.loadTexts: mldSnoopVlanIndex.setStatus('current')
mldSnoopVlanNumGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumGroups.setStatus('current')
mldSnoopVlanNumJoinSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumJoinSend.setStatus('current')
mldSnoopVlanNumJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumJoins.setStatus('current')
mldSnoopVlanNumJoinSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumJoinSuccess.setStatus('current')
mldSnoopVlanNumLeavesSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumLeavesSend.setStatus('current')
mldSnoopVlanNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumLeaves.setStatus('current')
mldSnoopVlanNumGeneralQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumGeneralQuerySend.setStatus('current')
mldSnoopVlanNumGeneralQueryRecevied = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumGeneralQueryRecevied.setStatus('current')
mldSnoopVlanNumSepcificQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumSepcificQuerySend.setStatus('current')
mldsnoopVlanNumSpecificQueryReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsnoopVlanNumSpecificQueryReceived.setStatus('current')
mldSnoopVlanNumInvalidReport = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumInvalidReport.setStatus('current')
mldSnoopVlanClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopVlanClearStatistics.setStatus('current')
ecs2100_28ppTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1)).setLabel("ecs2100-28ppTraps")
ecs2100_28ppTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0)).setLabel("ecs2100-28ppTrapsPrefix")
swPowerStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 1)).setObjects(("ECS2100-28PP-MIB", "swIndivPowerUnitIndex"), ("ECS2100-28PP-MIB", "swIndivPowerIndex"), ("ECS2100-28PP-MIB", "swIndivPowerStatus"))
if mibBuilder.loadTexts: swPowerStatusChangeTrap.setStatus('current')
swPortSecurityTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 36)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: swPortSecurityTrap.setStatus('current')
swIpFilterRejectTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 40)).setObjects(("ECS2100-28PP-MIB", "trapIpFilterRejectMode"), ("ECS2100-28PP-MIB", "trapIpFilterRejectIp"))
if mibBuilder.loadTexts: swIpFilterRejectTrap.setStatus('current')
pethPsePortOnOffNotification = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 43)).setObjects(("ECS2100-28PP-MIB", "pethPsePortDetectionStatus"))
if mibBuilder.loadTexts: pethPsePortOnOffNotification.setStatus('current')
pethPsePortPowerMaintenanceStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 44)).setObjects(("ECS2100-28PP-MIB", "pethPsePortPowerMaintenanceStatus"))
if mibBuilder.loadTexts: pethPsePortPowerMaintenanceStatusNotification.setStatus('current')
pethMainPowerUsageOnNotification = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 45)).setObjects(("ECS2100-28PP-MIB", "pethMainPseConsumptionPower"))
if mibBuilder.loadTexts: pethMainPowerUsageOnNotification.setStatus('current')
pethMainPowerUsageOffNotification = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 46)).setObjects(("ECS2100-28PP-MIB", "pethMainPseConsumptionPower"))
if mibBuilder.loadTexts: pethMainPowerUsageOffNotification.setStatus('current')
swAtcBcastStormAlarmFireTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 70)).setObjects(("ECS2100-28PP-MIB", "atcBcastStormIfIndex"), ("ECS2100-28PP-MIB", "atcBcastStormSampleType"), ("ECS2100-28PP-MIB", "atcBcastStormCurrentTrafficRate"), ("ECS2100-28PP-MIB", "atcBcastStormAlarmFireThreshold"))
if mibBuilder.loadTexts: swAtcBcastStormAlarmFireTrap.setStatus('current')
swAtcBcastStormAlarmClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 71)).setObjects(("ECS2100-28PP-MIB", "atcBcastStormIfIndex"), ("ECS2100-28PP-MIB", "atcBcastStormSampleType"), ("ECS2100-28PP-MIB", "atcBcastStormCurrentTrafficRate"), ("ECS2100-28PP-MIB", "atcBcastStormAlarmClearThreshold"))
if mibBuilder.loadTexts: swAtcBcastStormAlarmClearTrap.setStatus('current')
swAtcBcastStormTcApplyTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 72)).setObjects(("ECS2100-28PP-MIB", "atcBcastStormIfIndex"), ("ECS2100-28PP-MIB", "atcBcastStormSampleType"), ("ECS2100-28PP-MIB", "atcBcastStormCurrentTrafficRate"), ("ECS2100-28PP-MIB", "atcBcastStormAlarmFireThreshold"), ("ECS2100-28PP-MIB", "atcBcastStormTcApplyTime"))
if mibBuilder.loadTexts: swAtcBcastStormTcApplyTrap.setStatus('current')
swAtcBcastStormTcReleaseTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 73)).setObjects(("ECS2100-28PP-MIB", "atcBcastStormIfIndex"), ("ECS2100-28PP-MIB", "atcBcastStormSampleType"), ("ECS2100-28PP-MIB", "atcBcastStormCurrentTrafficRate"), ("ECS2100-28PP-MIB", "atcBcastStormAlarmClearThreshold"), ("ECS2100-28PP-MIB", "atcBcastStormTcReleaseTime"))
if mibBuilder.loadTexts: swAtcBcastStormTcReleaseTrap.setStatus('current')
swAtcMcastStormAlarmFireTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 74)).setObjects(("ECS2100-28PP-MIB", "atcMcastStormIfIndex"), ("ECS2100-28PP-MIB", "atcMcastStormSampleType"), ("ECS2100-28PP-MIB", "atcMcastStormCurrentTrafficRate"), ("ECS2100-28PP-MIB", "atcMcastStormAlarmFireThreshold"))
if mibBuilder.loadTexts: swAtcMcastStormAlarmFireTrap.setStatus('current')
swAtcMcastStormAlarmClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 75)).setObjects(("ECS2100-28PP-MIB", "atcMcastStormIfIndex"), ("ECS2100-28PP-MIB", "atcMcastStormSampleType"), ("ECS2100-28PP-MIB", "atcMcastStormCurrentTrafficRate"), ("ECS2100-28PP-MIB", "atcMcastStormAlarmClearThreshold"))
if mibBuilder.loadTexts: swAtcMcastStormAlarmClearTrap.setStatus('current')
swAtcMcastStormTcApplyTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 76)).setObjects(("ECS2100-28PP-MIB", "atcMcastStormIfIndex"), ("ECS2100-28PP-MIB", "atcMcastStormSampleType"), ("ECS2100-28PP-MIB", "atcMcastStormCurrentTrafficRate"), ("ECS2100-28PP-MIB", "atcMcastStormAlarmFireThreshold"), ("ECS2100-28PP-MIB", "atcMcastStormTcApplyTime"))
if mibBuilder.loadTexts: swAtcMcastStormTcApplyTrap.setStatus('current')
swAtcMcastStormTcReleaseTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 77)).setObjects(("ECS2100-28PP-MIB", "atcMcastStormIfIndex"), ("ECS2100-28PP-MIB", "atcMcastStormSampleType"), ("ECS2100-28PP-MIB", "atcMcastStormCurrentTrafficRate"), ("ECS2100-28PP-MIB", "atcMcastStormAlarmClearThreshold"), ("ECS2100-28PP-MIB", "atcMcastStormTcReleaseTime"))
if mibBuilder.loadTexts: swAtcMcastStormTcReleaseTrap.setStatus('current')
stpBpduGuardPortShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 91)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: stpBpduGuardPortShutdownTrap.setStatus('current')
swLoopbackDetectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 95)).setObjects(("ECS2100-28PP-MIB", "staLoopbackDetectionPortIfIndex"))
if mibBuilder.loadTexts: swLoopbackDetectionTrap.setStatus('current')
networkAccessPortLinkDetectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 96)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifOperStatus"), ("ECS2100-28PP-MIB", "networkAccessPortLinkDetectionMode"), ("ECS2100-28PP-MIB", "networkAccessPortLinkDetectionAciton"))
if mibBuilder.loadTexts: networkAccessPortLinkDetectionTrap.setStatus('current')
dot1agCfmMepUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 97)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMepDbRMepIdentifier"))
if mibBuilder.loadTexts: dot1agCfmMepUpTrap.setStatus('current')
dot1agCfmMepDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 98)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMepDbRMepIdentifier"))
if mibBuilder.loadTexts: dot1agCfmMepDownTrap.setStatus('current')
dot1agCfmConfigFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 99)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"))
if mibBuilder.loadTexts: dot1agCfmConfigFailTrap.setStatus('current')
dot1agCfmLoopFindTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 100)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"))
if mibBuilder.loadTexts: dot1agCfmLoopFindTrap.setStatus('current')
dot1agCfmMepUnknownTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 101)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"))
if mibBuilder.loadTexts: dot1agCfmMepUnknownTrap.setStatus('current')
dot1agCfmMepMissingTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 102)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMepDbRMepIdentifier"))
if mibBuilder.loadTexts: dot1agCfmMepMissingTrap.setStatus('current')
dot1agCfmMaUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 103)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMaIndex"))
if mibBuilder.loadTexts: dot1agCfmMaUpTrap.setStatus('current')
autoUpgradeTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 104)).setObjects(("ECS2100-28PP-MIB", "fileCopyFileType"), ("ECS2100-28PP-MIB", "trapAutoUpgradeResult"), ("ECS2100-28PP-MIB", "trapAutoUpgradeNewVer"))
if mibBuilder.loadTexts: autoUpgradeTrap.setStatus('current')
swCpuUtiRisingNotification = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 107))
if mibBuilder.loadTexts: swCpuUtiRisingNotification.setStatus('current')
swCpuUtiFallingNotification = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 108))
if mibBuilder.loadTexts: swCpuUtiFallingNotification.setStatus('current')
swMemoryUtiRisingThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 109))
if mibBuilder.loadTexts: swMemoryUtiRisingThresholdNotification.setStatus('current')
swMemoryUtiFallingThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 110))
if mibBuilder.loadTexts: swMemoryUtiFallingThresholdNotification.setStatus('current')
dhcpRogueServerAttackTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 114)).setObjects(("ECS2100-28PP-MIB", "trapDhcpClientPortIfIndex"), ("ECS2100-28PP-MIB", "trapDhcpServerIpAddress"), ("ECS2100-28PP-MIB", "trapDhcpServerMacAddress"))
if mibBuilder.loadTexts: dhcpRogueServerAttackTrap.setStatus('current')
macNotificationTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 138)).setObjects(("ECS2100-28PP-MIB", "trapIfIndex"), ("ECS2100-28PP-MIB", "trapVlanId"), ("ECS2100-28PP-MIB", "trapVarMacAddr"), ("ECS2100-28PP-MIB", "trapMacNotifyAction"))
if mibBuilder.loadTexts: macNotificationTrap.setStatus('current')
lbdDetectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 141)).setObjects(("ECS2100-28PP-MIB", "trapIfIndex"), ("ECS2100-28PP-MIB", "trapVlanId"))
if mibBuilder.loadTexts: lbdDetectionTrap.setStatus('current')
lbdRecoveryTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 142)).setObjects(("ECS2100-28PP-MIB", "trapIfIndex"))
if mibBuilder.loadTexts: lbdRecoveryTrap.setStatus('current')
sfpThresholdAlarmWarnTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 189)).setObjects(("ECS2100-28PP-MIB", "trapSfpThresholdAlarmWarnIfIndex"), ("ECS2100-28PP-MIB", "trapSfpThresholdAlarmWarnType"))
if mibBuilder.loadTexts: sfpThresholdAlarmWarnTrap.setStatus('current')
udldPortShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 192)).setObjects(("ECS2100-28PP-MIB", "udldPortIndex"), ("ECS2100-28PP-MIB", "trapUdldPortShutdownReason"))
if mibBuilder.loadTexts: udldPortShutdownTrap.setStatus('current')
userAuthenticationFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 199)).setObjects(("ECS2100-28PP-MIB", "trapVarLoginUserName"), ("ECS2100-28PP-MIB", "trapVarSessionType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddressType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddress"))
if mibBuilder.loadTexts: userAuthenticationFailureTrap.setStatus('current')
userAuthenticationSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 200)).setObjects(("ECS2100-28PP-MIB", "trapVarLoginUserName"), ("ECS2100-28PP-MIB", "trapVarSessionType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddressType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddress"))
if mibBuilder.loadTexts: userAuthenticationSuccessTrap.setStatus('current')
loginTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 201)).setObjects(("ECS2100-28PP-MIB", "trapVarLoginUserName"), ("ECS2100-28PP-MIB", "trapVarSessionType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddressType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddress"))
if mibBuilder.loadTexts: loginTrap.setStatus('current')
logoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 202)).setObjects(("ECS2100-28PP-MIB", "trapVarLoginUserName"), ("ECS2100-28PP-MIB", "trapVarSessionType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddressType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddress"))
if mibBuilder.loadTexts: logoutTrap.setStatus('current')
fileCopyTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 208)).setObjects(("ECS2100-28PP-MIB", "trapVarLoginUserName"), ("ECS2100-28PP-MIB", "trapVarSessionType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddressType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddress"), ("ECS2100-28PP-MIB", "fileCopySrcOperType"), ("ECS2100-28PP-MIB", "fileCopySrcFileName"), ("ECS2100-28PP-MIB", "fileCopyDestOperType"), ("ECS2100-28PP-MIB", "fileCopyDestFileName"), ("ECS2100-28PP-MIB", "fileCopyFileType"), ("ECS2100-28PP-MIB", "fileCopyUnitId"), ("ECS2100-28PP-MIB", "fileCopyStatus"), ("ECS2100-28PP-MIB", "fileCopyServerInetAddressType"), ("ECS2100-28PP-MIB", "fileCopyServerInetAddress"))
if mibBuilder.loadTexts: fileCopyTrap.setStatus('current')
userauthCreateUserTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 209)).setObjects(("ECS2100-28PP-MIB", "userAuthUserName"))
if mibBuilder.loadTexts: userauthCreateUserTrap.setStatus('current')
userauthDeleteUserTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 210)).setObjects(("ECS2100-28PP-MIB", "userAuthUserName"))
if mibBuilder.loadTexts: userauthDeleteUserTrap.setStatus('current')
userauthModifyUserPrivilegeTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 211)).setObjects(("ECS2100-28PP-MIB", "userAuthUserName"), ("ECS2100-28PP-MIB", "userAuthPrivilege"))
if mibBuilder.loadTexts: userauthModifyUserPrivilegeTrap.setStatus('current')
cpuGuardControlTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 213))
if mibBuilder.loadTexts: cpuGuardControlTrap.setStatus('current')
cpuGuardReleaseTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 214))
if mibBuilder.loadTexts: cpuGuardReleaseTrap.setStatus('current')
mibBuilder.exportSymbols("ECS2100-28PP-MIB", igmpSnoopFilterPortProfileId=igmpSnoopFilterPortProfileId, rspanSrcTxPorts=rspanSrcTxPorts, igmpSnoopMulticastGroupTable=igmpSnoopMulticastGroupTable, trapVarLoginInetAddress=trapVarLoginInetAddress, diffServMacAceEntry=diffServMacAceEntry, mvrVlanStatisticsNumGroups=mvrVlanStatisticsNumGroups, xstInstanceCfgBridgeForwardDelay=xstInstanceCfgBridgeForwardDelay, memoryFreed=memoryFreed, mvrPortStatisticsNumLeaves=mvrPortStatisticsNumLeaves, dhcpSnoopVlanIndex=dhcpSnoopVlanIndex, mldSnoopThrottlePortEntry=mldSnoopThrottlePortEntry, diffServActionPktNewDscp=diffServActionPktNewDscp, macVlanClearAction=macVlanClearAction, userAuthTable=userAuthTable, atcBcastStormIfIndex=atcBcastStormIfIndex, prioWrrPortIfIndex=prioWrrPortIfIndex, taskCpuStatAvgUti=taskCpuStatAvgUti, aaaAccountMethodName=aaaAccountMethodName, daiGlobalAdditionalValidStatus=daiGlobalAdditionalValidStatus, networkAccessClearMacAddressPort=networkAccessClearMacAddressPort, mvrProxyQueryInterval=mvrProxyQueryInterval, trapAutoUpgradeResult=trapAutoUpgradeResult, macVlanPriority=macVlanPriority, networkAccessMgt=networkAccessMgt, trunkEntry=trunkEntry, voiceVlanPortIfIndex=voiceVlanPortIfIndex, sshDsaHostKey1=sshDsaHostKey1, ipHttpsState=ipHttpsState, rspanDstPort=rspanDstPort, diffServAclAttachCtlIndex=diffServAclAttachCtlIndex, portTrunkIndex=portTrunkIndex, radiusServerAddress=radiusServerAddress, igmpSnoopCurrentVlanVersionExclusive=igmpSnoopCurrentVlanVersionExclusive, sntpServerInetAddressType=sntpServerInetAddressType, diffServAclEntry=diffServAclEntry, fileInfoFileType=fileInfoFileType, diffServAclHwCounterAclIndex=diffServAclHwCounterAclIndex, diffServIpAceSourcePortBitmask=diffServIpAceSourcePortBitmask, dhcpSnoopPortConfigEntry=dhcpSnoopPortConfigEntry, trapIfIndex=trapIfIndex, vlanPortPrivateVlanType=vlanPortPrivateVlanType, trapDhcpServerMacAddress=trapDhcpServerMacAddress, aaaRadiusGroupStatus=aaaRadiusGroupStatus, tacacsPlusServerGlobalKey=tacacsPlusServerGlobalKey, ntpStatus=ntpStatus, consoleLoginResponseTimeout=consoleLoginResponseTimeout, sshUserName=sshUserName, atcMcastStormTcReleaseTime=atcMcastStormTcReleaseTime, aaaMgt=aaaMgt, cableDiagMgt=cableDiagMgt, swLoaderVer=swLoaderVer, subnetVlanIpAddress=subnetVlanIpAddress, aaaMethodGroupName=aaaMethodGroupName, igmpSnoopProfileCtlAction=igmpSnoopProfileCtlAction, diffServMacAceSourceMacAddr=diffServMacAceSourceMacAddr, sshUserDsaKey8=sshUserDsaKey8, xstInstancePortAdminPathCost=xstInstancePortAdminPathCost, KeySegment=KeySegment, portHistControlName=portHistControlName, ntpServerVersion=ntpServerVersion, aaaCommandPrivilegesEntry=aaaCommandPrivilegesEntry, aaaAccExecIndex=aaaAccExecIndex, bcastStormStatus=bcastStormStatus, switchJumboFrameStatus=switchJumboFrameStatus, mldSnoopProfileTable=mldSnoopProfileTable, portHistPreviousTable=portHistPreviousTable, mldSnoopRouterCurrentVlanIndex=mldSnoopRouterCurrentVlanIndex, ntpAuthKeyTable=ntpAuthKeyTable, cableDiagResultDistancePairA=cableDiagResultDistancePairA, mldsnoopVlanNumSpecificQueryReceived=mldsnoopVlanNumSpecificQueryReceived, prioDscpToDscpTable=prioDscpToDscpTable, prioCosToDscpTable=prioCosToDscpTable, mldSnoopMulticastStaticEntry=mldSnoopMulticastStaticEntry, mldSnoopProfileRangeStartInetAddress=mldSnoopProfileRangeStartInetAddress, igmpSnoopRouterCurrentEntry=igmpSnoopRouterCurrentEntry, mvrDomainUpstreamSourceIp=mvrDomainUpstreamSourceIp, mldSnoopProfileCtl=mldSnoopProfileCtl, staPortOperEdgePort=staPortOperEdgePort, dhcpOption82RemoteIDMode=dhcpOption82RemoteIDMode, mldsnoopPortNumSpecificQueryReceived=mldsnoopPortNumSpecificQueryReceived, ipFilterSnmpInetEntry=ipFilterSnmpInetEntry, portFlowCtrlStatus=portFlowCtrlStatus, ntpAuthKeyEntry=ntpAuthKeyEntry, mldSnoopMulticastCurrentTable=mldSnoopMulticastCurrentTable, timeRangeAbsoluteTimeRangeIndex=timeRangeAbsoluteTimeRangeIndex, cableDiagResultTable=cableDiagResultTable, privateVlanPrivatePortTable=privateVlanPrivatePortTable, fileInfoFileSize=fileInfoFileSize, mldSnoopVlanNumGeneralQueryRecevied=mldSnoopVlanNumGeneralQueryRecevied, diffServMacAceVidBitmask=diffServMacAceVidBitmask, mvrGroupStaticDomainId=mvrGroupStaticDomainId, smtpDestEMailEntry=smtpDestEMailEntry, fileCopySrcFileName=fileCopySrcFileName, timeRangePeriodicEndMinutes=timeRangePeriodicEndMinutes, userAuthPrivilege=userAuthPrivilege, sshServerStatus=sshServerStatus, mldSnoopProfileCtlStartInetAddress=mldSnoopProfileCtlStartInetAddress, diffServActionList=diffServActionList, cableDiagResultDistancePairC=cableDiagResultDistancePairC, daiGlobalDestMacValidation=daiGlobalDestMacValidation, aaaUpdate=aaaUpdate, voiceVlanEnabledId=voiceVlanEnabledId, timeRangePeriodicTimeRangeIndex=timeRangePeriodicTimeRangeIndex, mldSnoopRouterCurrentPorts=mldSnoopRouterCurrentPorts, mvrPortStatisticsNumGeneralQuerySend=mvrPortStatisticsNumGeneralQuerySend, portHistCurrentInDiscards=portHistCurrentInDiscards, mldSnoopPortNumGeneralQuerySend=mldSnoopPortNumGeneralQuerySend, vlanPortMode=vlanPortMode, mcastStormPktRate=mcastStormPktRate, fileInfoCreationTime=fileInfoCreationTime, trapVarLoginInetAddressType=trapVarLoginInetAddressType, diffServIpv6AceSourceIpAddrPrefixLen=diffServIpv6AceSourceIpAddrPrefixLen, aaaMethodEntry=aaaMethodEntry, staSystemBPDUFlooding=staSystemBPDUFlooding, ntpServiceMode=ntpServiceMode, swAtcBcastStormTcReleaseTrap=swAtcBcastStormTcReleaseTrap, privateVlanPromPortSecondaryRemap3k=privateVlanPromPortSecondaryRemap3k, staPortBpduFlooding=staPortBpduFlooding, portSecPortIndex=portSecPortIndex, ntpAuthKeyStatus=ntpAuthKeyStatus, dhcpSnoopStatistics=dhcpSnoopStatistics, dhcpSnoopInterface=dhcpSnoopInterface, daiVlanEntry=daiVlanEntry, lacpPortIndex=lacpPortIndex, sysLogStatus=sysLogStatus, subnetVlanClearAction=subnetVlanClearAction, privateVlanAssoicatedPrimaryVlan=privateVlanAssoicatedPrimaryVlan, portHistPreviousInUnknownProtos=portHistPreviousInUnknownProtos, radiusServerRetransmit=radiusServerRetransmit, pethPsePortExtMirroredDllPdRequestedPowerValue=pethPsePortExtMirroredDllPdRequestedPowerValue, mldSnoopUnknownMcastMode=mldSnoopUnknownMcastMode, igmpSnoopQueryDrop=igmpSnoopQueryDrop, mldSnoopVlanNumSepcificQuerySend=mldSnoopVlanNumSepcificQuerySend, sshUserRsaKey1=sshUserRsaKey1, swPowerStatusChangeTrap=swPowerStatusChangeTrap, igmpSnoopProfileRangeInetAddressType=igmpSnoopProfileRangeInetAddressType, prioCosToDscpCFIValue=prioCosToDscpCFIValue, ipFilterHttpInetTable=ipFilterHttpInetTable, fileAutoDownloadResultAction=fileAutoDownloadResultAction, radiusServerGlobalKey=radiusServerGlobalKey, radiusServerStatus=radiusServerStatus, vtySilentTime=vtySilentTime, mldSnoopRouterStaticVlanIndex=mldSnoopRouterStaticVlanIndex, swProdName=swProdName, diffServPolicyMapIndex=diffServPolicyMapIndex, portHistCurrentInErrors=portHistCurrentInErrors, ipFilterTelnetInetAddressType=ipFilterTelnetInetAddressType, atcBcastStormAlarmFireThreshold=atcBcastStormAlarmFireThreshold, mvrPortStatisticsEntry=mvrPortStatisticsEntry, diffServAclAttachCtlAceIndex=diffServAclAttachCtlAceIndex, bcastStormEntry=bcastStormEntry, diffServIpv6AceDestPort=diffServIpv6AceDestPort, dot1agCfmMepMissingTrap=dot1agCfmMepMissingTrap, ipSrcGuardMgt=ipSrcGuardMgt, portSecPortStatus=portSecPortStatus, dhcpRelayServerInetAddrIfIndex=dhcpRelayServerInetAddrIfIndex, accton=accton, diffServMacAceCosOp=diffServMacAceCosOp, diffServArpAceSourceMacAddrBitmask=diffServArpAceSourceMacAddrBitmask, ecs2100_28ppMIB=ecs2100_28ppMIB, prioCosToDscpIfValue=prioCosToDscpIfValue, diffServAclName=diffServAclName, sshRsaHostKeySHA1FingerPrint=sshRsaHostKeySHA1FingerPrint, sshConnID=sshConnID, portOutPacketRate=portOutPacketRate, networkAccessPortEntry=networkAccessPortEntry, sshRsaHostKey2=sshRsaHostKey2, trunkStatus=trunkStatus, aaaMethodName=aaaMethodName, ipSrcGuardAclBindingPortIfIndex=ipSrcGuardAclBindingPortIfIndex, prioWrrPortTrafficClass=prioWrrPortTrafficClass, staLoopbackDetectionPortStatus=staLoopbackDetectionPortStatus, dosTcpXmasScanStatus=dosTcpXmasScanStatus, staPortBpduGuardAutoRecoveryInterval=staPortBpduGuardAutoRecoveryInterval, diffServIpv6AceDestIpAddr=diffServIpv6AceDestIpAddr, mvrDomainRunningStatus=mvrDomainRunningStatus, networkAccessMacAddressAddress=networkAccessMacAddressAddress, lacpPortEntry=lacpPortEntry, igmpSnoopMulticastGroupPortCount=igmpSnoopMulticastGroupPortCount, diffServArpAceDestMacAddr=diffServArpAceDestMacAddr, timeRangePeriodicTable=timeRangePeriodicTable, diffServAclHwCounterDirection=diffServAclHwCounterDirection, ntpPollInterval=ntpPollInterval, cpuGuardLowWatermark=cpuGuardLowWatermark, diffServPolicyMapDescription=diffServPolicyMapDescription, daiVlan=daiVlan, dhcpSnoopBindings=dhcpSnoopBindings, mldSnoopVersion=mldSnoopVersion, vlanTable=vlanTable, mldSnoopProfileCtlId=mldSnoopProfileCtlId, mvrDomainAssociatedProfileTable=mvrDomainAssociatedProfileTable, diffServClassMapStatus=diffServClassMapStatus, unknownUcastStormTable=unknownUcastStormTable, mvrVlanStatisticsNumSpecificQueryReceived=mvrVlanStatisticsNumSpecificQueryReceived, igmpSnoopProfileEntry=igmpSnoopProfileEntry, xstInstanceCfgBridgeMaxAge=xstInstanceCfgBridgeMaxAge, igmpSnoopVlanNumJoinSuccess=igmpSnoopVlanNumJoinSuccess, mldSnoopQuerier=mldSnoopQuerier, portMacAddrLearningStatus=portMacAddrLearningStatus, lbdMode=lbdMode, diffServActionPktNewPhb=diffServActionPktNewPhb, unknownUcastStormPktRateResolution=unknownUcastStormPktRateResolution, networkAccessMacAddressRadiusServerInetAddress=networkAccessMacAddressRadiusServerInetAddress, ntpAuthKeyId=ntpAuthKeyId, portSecAction=portSecAction, userAuthenticationSuccessTrap=userAuthenticationSuccessTrap, ipFilterAllClientCtlInetAddressStart=ipFilterAllClientCtlInetAddressStart, mvrMgt=mvrMgt, mldSnoopRouterCurrentTable=mldSnoopRouterCurrentTable, mldSnoopFilterPortProfileId=mldSnoopFilterPortProfileId, diffServArpAceTable=diffServArpAceTable, staLoopbackDetectionPortShutdownInterval=staLoopbackDetectionPortShutdownInterval, switchIndivPowerTable=switchIndivPowerTable, portEntry=portEntry, sshTimeout=sshTimeout, swEpldVer=swEpldVer, pingHistoryResponse=pingHistoryResponse, mldSnoopProfileEntry=mldSnoopProfileEntry, xstInstancePortOperPathCost=xstInstancePortOperPathCost, mldSnoopThrottlePortIndex=mldSnoopThrottlePortIndex, mvrDomainStatus=mvrDomainStatus, dosTcpSynFinScanStatus=dosTcpSynFinScanStatus, sntpServerIndex=sntpServerIndex, igmpSnoopMulticastStaticPorts=igmpSnoopMulticastStaticPorts, privateVlanDownlinkPorts=privateVlanDownlinkPorts, igmpSnoopRouterCurrentVlanIndex=igmpSnoopRouterCurrentVlanIndex, atcMcastStormTable=atcMcastStormTable, mvrPortStatisticsNumJoinSuccess=mvrPortStatisticsNumJoinSuccess, ipSrcGuardAclBindingMacAddress=ipSrcGuardAclBindingMacAddress, dhcpSnoopBindingsLeaseTime=dhcpSnoopBindingsLeaseTime, dot1xAuthConfigExtEntry=dot1xAuthConfigExtEntry, swProdManufacturer=swProdManufacturer, igmpSnoopThrottlePortRunningStatus=igmpSnoopThrottlePortRunningStatus, rateLimitPortEntry=rateLimitPortEntry, networkAccessClearMacAddressMacAddress=networkAccessClearMacAddressMacAddress, diffServArpAceDestIpAddrBitmask=diffServArpAceDestIpAddrBitmask, daiVlanArpAclName=daiVlanArpAclName, vlanAddressMethod=vlanAddressMethod, atcBcastStormAlarmClearTrapStatus=atcBcastStormAlarmClearTrapStatus, timeRangeAbsoluteStartYears=timeRangeAbsoluteStartYears, mldSnoopQueryDrop=mldSnoopQueryDrop, diffServPolicyMapPortDirection=diffServPolicyMapPortDirection, ipSrcGuardAclTable=ipSrcGuardAclTable, portComboForcedMode=portComboForcedMode, daiTotalProcessedPkts=daiTotalProcessedPkts, mvrDomainGroupCurrentPorts=mvrDomainGroupCurrentPorts, lbdDetectionTrap=lbdDetectionTrap, trunkIndex=trunkIndex, diffServMacAceSourceMacAddrBitmask=diffServMacAceSourceMacAddrBitmask, daiTotalArpAclDroppedPkts=daiTotalArpAclDroppedPkts, smtpSourceEMail=smtpSourceEMail, cpuGuardTrapStatus=cpuGuardTrapStatus, tacacsPlusServerGlobalPortNumber=tacacsPlusServerGlobalPortNumber, cableDiagResultTime=cableDiagResultTime)
mibBuilder.exportSymbols("ECS2100-28PP-MIB", sshHostKeyDelAction=sshHostKeyDelAction, aaaTacacsPlusGroupName=aaaTacacsPlusGroupName, mvrVlanStatisticsNumJoins=mvrVlanStatisticsNumJoins, staCiscoPrestandardCompatibility=staCiscoPrestandardCompatibility, dot1vProtocolExPortGroupPriority=dot1vProtocolExPortGroupPriority, networkAccessMacFilterWithMaskMacAddressMask=networkAccessMacFilterWithMaskMacAddressMask, remoteLogStatus=remoteLogStatus, diffServPolicyMapElementClassMapIndex=diffServPolicyMapElementClassMapIndex, sshHostKeySaveStatus=sshHostKeySaveStatus, ecs2100_28t=ecs2100_28t, dhcpOption82RelayServerAddrServerIp=dhcpOption82RelayServerAddrServerIp, diffServAclAttachCtlAceType=diffServAclAttachCtlAceType, daiLogSrcMacAddress=daiLogSrcMacAddress, cpuGuardStatus=cpuGuardStatus, userAuthEntry=userAuthEntry, dosSmurf=dosSmurf, diffServPolicyMapPortEntry=diffServPolicyMapPortEntry, mldSnoopProfileRangeEntry=mldSnoopProfileRangeEntry, lbdInterface=lbdInterface, dhcpClient=dhcpClient, diffServArpAcePktType=diffServArpAcePktType, sshKeySize=sshKeySize, swPortSecurityTrap=swPortSecurityTrap, igmpSnoopThrottlePortTable=igmpSnoopThrottlePortTable, portTransceiverThresholdInfoVccHighAlarm=portTransceiverThresholdInfoVccHighAlarm, igmpSnoopVlanNumLeavesSend=igmpSnoopVlanNumLeavesSend, xstInstanceCfgBridgeHelloTime=xstInstanceCfgBridgeHelloTime, smtpServerIpEntry=smtpServerIpEntry, aaaMethodStatus=aaaMethodStatus, remoteLogServerInetEntry=remoteLogServerInetEntry, swIdentifier=swIdentifier, mvrDomainGroupStaticReceiverVlan=mvrDomainGroupStaticReceiverVlan, dot1agCfmConfigFailTrap=dot1agCfmConfigFailTrap, dhcpSnoopLimitRate=dhcpSnoopLimitRate, mvrProfileId=mvrProfileId, rspanEntry=rspanEntry, aaaAccExecEntry=aaaAccExecEntry, portHistControlDataSource=portHistControlDataSource, ecs2100_28ppTrapsPrefix=ecs2100_28ppTrapsPrefix, atcBcastStormCurrentTrafficRate=atcBcastStormCurrentTrafficRate, rlPortInputLimitInKilo=rlPortInputLimitInKilo, swPowerStatus=swPowerStatus, smtpServerIp=smtpServerIp, vlanPortTable=vlanPortTable, xstInstancePortPriority=xstInstancePortPriority, diffServArpTable=diffServArpTable, radiusServerKey=radiusServerKey, networkAccessPortMacFilter=networkAccessPortMacFilter, diffServTcamPool=diffServTcamPool, sshRsaHostKey1=sshRsaHostKey1, staLoopbackDetectionPortTrapStatus=staLoopbackDetectionPortTrapStatus, portMediaInfoEthComplianceCodes=portMediaInfoEthComplianceCodes, aaaTacacsPlusGroupEntry=aaaTacacsPlusGroupEntry, igmpSnoopMulticastGroupIpAddress=igmpSnoopMulticastGroupIpAddress, dhcpSnoopInformationOptionPolicy=dhcpSnoopInformationOptionPolicy, sntpPollInterval=sntpPollInterval, igmpSnoopQueryDropVlanBitmap=igmpSnoopQueryDropVlanBitmap, aaaCommandPrivilegesMethodName=aaaCommandPrivilegesMethodName, timeRangeMgt=timeRangeMgt, portTransceiverThresholdAutoMode=portTransceiverThresholdAutoMode, staLoopbackDetectionPortReleaseMode=staLoopbackDetectionPortReleaseMode, sshConnMinorVersion=sshConnMinorVersion, portHistControlIndex=portHistControlIndex, voiceVlanPortMode=voiceVlanPortMode, portTransceiverThresholdInfoVccHighWarn=portTransceiverThresholdInfoVccHighWarn, sshHostKeySaveAction=sshHostKeySaveAction, portSecMacAsPermanentAction=portSecMacAsPermanentAction, diffServClassMapAttachCtlElementIndexType=diffServClassMapAttachCtlElementIndexType, portSecPortEntry=portSecPortEntry, mcastStormPktRateResolution=mcastStormPktRateResolution, igmpSnoopMulticastGroupStatus=igmpSnoopMulticastGroupStatus, diffServAclHwCounterTable=diffServAclHwCounterTable, sshRsaHostKey4=sshRsaHostKey4, diffServArpEntry=diffServArpEntry, fileCopyFileType=fileCopyFileType, mvrVlanStatisticsClearStatistics=mvrVlanStatisticsClearStatistics, pethPseMainExtDllPowerType=pethPseMainExtDllPowerType, mvrPortStatisticsNumJoinSend=mvrPortStatisticsNumJoinSend, rspanTable=rspanTable, dot1vProtocolExPortEntry=dot1vProtocolExPortEntry, memoryTotal=memoryTotal, mcastStormTable=mcastStormTable, vtyLoginResponseTimeout=vtyLoginResponseTimeout, trapIpFilterRejectInetAddressType=trapIpFilterRejectInetAddressType, rspanStatus=rspanStatus, sshUserDsaKey2=sshUserDsaKey2, dhcpSnoopPortConfigTable=dhcpSnoopPortConfigTable, igmpSnoopProfileRangeEndInetAddress=igmpSnoopProfileRangeEndInetAddress, pethMainPowerUsageOffNotification=pethMainPowerUsageOffNotification, dhcpSnoopPortMaxNumber=dhcpSnoopPortMaxNumber, prioCosToDscpPhbValue=prioCosToDscpPhbValue, prioDscpToDscpIngressDscpValue=prioDscpToDscpIngressDscpValue, pethPsePortExtTable=pethPsePortExtTable, PYSNMP_MODULE_ID=ecs2100_28ppMIB, swAtcMcastStormAlarmFireTrap=swAtcMcastStormAlarmFireTrap, networkAccessMacFilterWithMaskTable=networkAccessMacFilterWithMaskTable, mldSnoopRouterStaticStatus=mldSnoopRouterStaticStatus, diffServMacAceMinEtherType=diffServMacAceMinEtherType, diffServIpAceDestIpAddrBitmask=diffServIpAceDestIpAddrBitmask, igmpSnoopVlanTable=igmpSnoopVlanTable, daiGlobalIpAddrValidationAllowZeros=daiGlobalIpAddrValidationAllowZeros, aaaMethodMode=aaaMethodMode, aaaRadiusGroupIndex=aaaRadiusGroupIndex, portTable=portTable, igmpSnoopRouterCurrentPorts=igmpSnoopRouterCurrentPorts, igmpSnoopGlobalMgt=igmpSnoopGlobalMgt, trapMacNotifyAction=trapMacNotifyAction, portInPacketRate=portInPacketRate, subnetVlanEntry=subnetVlanEntry, atcBcastStormTcReleaseTime=atcBcastStormTcReleaseTime, diffServActionIndex=diffServActionIndex, mldSnoopVlanNumGeneralQuerySend=mldSnoopVlanNumGeneralQuerySend, igmpSnoopProfileRangeProfileId=igmpSnoopProfileRangeProfileId, pingProbeCount=pingProbeCount, ipFilterSnmpInetAddressType=ipFilterSnmpInetAddressType, diffServTcamFree=diffServTcamFree, igmpSnoopCurrentVlanLastMemQueryIntvl=igmpSnoopCurrentVlanLastMemQueryIntvl, mvrDomainPortTable=mvrDomainPortTable, xstInstanceCfgMaxAge=xstInstanceCfgMaxAge, netConfigTable=netConfigTable, portInUtil=portInUtil, diffServPolicyMapElementMeterIndex=diffServPolicyMapElementMeterIndex, portHistCurrentSampleIndex=portHistCurrentSampleIndex, atcMcastStormTcAction=atcMcastStormTcAction, cpuGuard=cpuGuard, qosMgt=qosMgt, portHistCurrentInOctets=portHistCurrentInOctets, radiusServerGlobalTimeout=radiusServerGlobalTimeout, daiLogEntry=daiLogEntry, diffServIpAceType=diffServIpAceType, portHistCurrentEntry=portHistCurrentEntry, networkAccessMacAddressTable=networkAccessMacAddressTable, userAuthEnablePassword=userAuthEnablePassword, ipSrcGuardAclBindingEntryType=ipSrcGuardAclBindingEntryType, atcMcastStormAlarmClearTrapStatus=atcMcastStormAlarmClearTrapStatus, igmpSnoopPortEntry=igmpSnoopPortEntry, mvrPortStatisticsNumSepcificQuerySend=mvrPortStatisticsNumSepcificQuerySend, swAtcBcastStormAlarmFireTrap=swAtcBcastStormAlarmFireTrap, igmpSnoopPortNumLeavesSend=igmpSnoopPortNumLeavesSend, diffServArpAceStatus=diffServArpAceStatus, igmpSnoopProfileRangeTable=igmpSnoopProfileRangeTable, diffServIpAceAccess=diffServIpAceAccess, diffServMeterIndex=diffServMeterIndex, igmpSnoopVlanClearStatistics=igmpSnoopVlanClearStatistics, portHistPreviousOutUtilization=portHistPreviousOutUtilization, dosTcpUdpPortZero=dosTcpUdpPortZero, unknownUcastStormMgt=unknownUcastStormMgt, netConfigUnnumbered=netConfigUnnumbered, taskCpuStatMaxUti=taskCpuStatMaxUti, mstInstanceEditRemainingHops=mstInstanceEditRemainingHops, mvrDomainPortEntry=mvrDomainPortEntry, mldSnoopRobustness=mldSnoopRobustness, trapDhcpClientPortIfIndex=trapDhcpClientPortIfIndex, fileInfoDelete=fileInfoDelete, igmpSnoopClearDynamicGroups=igmpSnoopClearDynamicGroups, vlanStaticIndex=vlanStaticIndex, mldSnoopPortClearStatistics=mldSnoopPortClearStatistics, trapDestMgt=trapDestMgt, restartControl=restartControl, mldSnoopMulticastStaticIpAddress=mldSnoopMulticastStaticIpAddress, mirrorMgt=mirrorMgt, diffServIpv6AceSourceIpAddr=diffServIpv6AceSourceIpAddr, dosTcpUdpPortZeroStatus=dosTcpUdpPortZeroStatus, sysLogHistoryFlashLevel=sysLogHistoryFlashLevel, diffServIpAceTable=diffServIpAceTable, lbdRecoverTime=lbdRecoverTime, sshConnInfoEntry=sshConnInfoEntry, mstInstanceEditIndex=mstInstanceEditIndex, diffServMeterTable=diffServMeterTable, dhcpSnoopMgt=dhcpSnoopMgt, autoUpgradeTrap=autoUpgradeTrap, dhcpRogueServerAttackTrap=dhcpRogueServerAttackTrap, swAtcMcastStormAlarmClearTrap=swAtcMcastStormAlarmClearTrap, ipFilterSnmpInetAddressEnd=ipFilterSnmpInetAddressEnd, cableDiagResultStatusPairC=cableDiagResultStatusPairC, ipFilterHttpInetAddressStart=ipFilterHttpInetAddressStart, mvrPortStatisticsNumInvalidReport=mvrPortStatisticsNumInvalidReport, igmpSnoopPortNumJoinSuccess=igmpSnoopPortNumJoinSuccess, diffServIpv6AceDestIpAddrPrefixLen=diffServIpv6AceDestIpAddrPrefixLen, fileInfoTable=fileInfoTable, diffServTcamPoolCapability=diffServTcamPoolCapability, diffServAccessGroupType=diffServAccessGroupType, staPortLongOperPathCost=staPortLongOperPathCost, pethPsePortExtMaximumPowerValue=pethPsePortExtMaximumPowerValue, mirrorStatus=mirrorStatus, aaaMethodClientType=aaaMethodClientType, mvrDomainPortActive=mvrDomainPortActive, diffServIpAceEntry=diffServIpAceEntry, mldSnoopCurrentVlanEntry=mldSnoopCurrentVlanEntry, aaaRadiusGroupTable=aaaRadiusGroupTable, diffServPolicyMapEntry=diffServPolicyMapEntry, tacacsPlusServerAddress=tacacsPlusServerAddress, trapDhcpServerIpAddress=trapDhcpServerIpAddress, sshDsaHostKey5=sshDsaHostKey5, trapVlanId=trapVlanId, mvrPortStatisticsNumGroups=mvrPortStatisticsNumGroups, portMediaInfoSerialNumber=portMediaInfoSerialNumber, powerSavingEntry=powerSavingEntry, igmpSnoopVlanNumLeaves=igmpSnoopVlanNumLeaves, igmpSnoopProfileRangeAction=igmpSnoopProfileRangeAction, ipSrcGuardAclBindingVlanIndex=ipSrcGuardAclBindingVlanIndex, privateVlanPrivatePortEntry=privateVlanPrivatePortEntry, mcastStormIfIndex=mcastStormIfIndex, portTransceiverThresholdInfoTemperatureLowAlarm=portTransceiverThresholdInfoTemperatureLowAlarm, portHistPreviousInDiscards=portHistPreviousInDiscards, mvrDomainGroupCurrentEntry=mvrDomainGroupCurrentEntry, mvrPortStatisticsNumGeneralQueryRecevied=mvrPortStatisticsNumGeneralQueryRecevied, portHistCurrentOutErrors=portHistCurrentOutErrors, fileCopyServerInetAddress=fileCopyServerInetAddress, fileCopyAction=fileCopyAction, daiVlanStatus=daiVlanStatus, staPortBpduGuardAutoRecovery=staPortBpduGuardAutoRecovery, igmpSnoopMulticastStaticStatus=igmpSnoopMulticastStaticStatus, privateVlanPromPortSecondaryRemap4k=privateVlanPromPortSecondaryRemap4k, mvrVlanStatisticsNumJoinSuccess=mvrVlanStatisticsNumJoinSuccess, diffServAclTable=diffServAclTable, igmpSnoopVlanNumInvalidReport=igmpSnoopVlanNumInvalidReport, netConfigSubnetMask=netConfigSubnetMask, restartOpCodeFile=restartOpCodeFile, cpuCurrentUti=cpuCurrentUti, edgecoreNetworksMgt=edgecoreNetworksMgt, portHistCurrentOutMulticastPkts=portHistCurrentOutMulticastPkts, voiceVlanPortPriority=voiceVlanPortPriority, diffServActionPktNewPri=diffServActionPktNewPri, portHistControlBucketsRequested=portHistControlBucketsRequested, ecs2100_28pp=ecs2100_28pp, ecs2100_28ppMIBObjects=ecs2100_28ppMIBObjects, trapVarSessionType=trapVarSessionType, xstInstancePortState=xstInstancePortState, timeRangeAbsoluteStartDays=timeRangeAbsoluteStartDays, mldSnoopQueryInterval=mldSnoopQueryInterval, mvrVlanStatisticsNumGeneralQuerySend=mvrVlanStatisticsNumGeneralQuerySend, networkAccessPortGuestVlan=networkAccessPortGuestVlan, portTransceiverThresholdInfoEntry=portTransceiverThresholdInfoEntry, mldSnoopMulticastCurrentPorts=mldSnoopMulticastCurrentPorts, sshServerMajorVersion=sshServerMajorVersion, diffServIpAceControlCodeBitmask=diffServIpAceControlCodeBitmask, lbdGlobalStatus=lbdGlobalStatus, networkAccessMacFilterWithMaskID=networkAccessMacFilterWithMaskID, trunkMgt=trunkMgt, pingReceivedPackets=pingReceivedPackets, privateVlanVlanType=privateVlanVlanType, ipFilterAllClientCtlInetAddressType=ipFilterAllClientCtlInetAddressType, pethPsePortTimeRange=pethPsePortTimeRange, sshUserKeyDelAction=sshUserKeyDelAction, userauthModifyUserPrivilegeTrap=userauthModifyUserPrivilegeTrap, portHistCurrentInUcastPkts=portHistCurrentInUcastPkts, igmpSnoopVlanIndex=igmpSnoopVlanIndex, tacacsPlusServerEntry=tacacsPlusServerEntry, sshUserRsaKey5=sshUserRsaKey5, ecs2100_10pe=ecs2100_10pe, portHistControlEntry=portHistControlEntry, daiLogDestMacAddress=daiLogDestMacAddress, pethPsePortExtEntry=pethPsePortExtEntry)
mibBuilder.exportSymbols("ECS2100-28PP-MIB", diffServMacAceIndex=diffServMacAceIndex, daiGlobalLogInterval=daiGlobalLogInterval, igmpSnoopProxyReporting=igmpSnoopProxyReporting, mldSnoopVlanNumLeaves=mldSnoopVlanNumLeaves, rspanDstPortTag=rspanDstPortTag, vtyExecTimeout=vtyExecTimeout, mldSnoopProfileCtlInetAddressType=mldSnoopProfileCtlInetAddressType, swOpCodeVer=swOpCodeVer, diffServArpAceLogStatus=diffServArpAceLogStatus, timeRangePeriodicEntry=timeRangePeriodicEntry, vlanStaticTable=vlanStaticTable, udldPortShutdownTrap=udldPortShutdownTrap, pingCompleted=pingCompleted, pethMainPowerUsageOnNotification=pethMainPowerUsageOnNotification, igmpSnoopFilterPortTable=igmpSnoopFilterPortTable, mldSnoopMulticastCurrentEntry=mldSnoopMulticastCurrentEntry, dot1agCfmMepDownTrap=dot1agCfmMepDownTrap, ipFilterHttpInetAddressEnd=ipFilterHttpInetAddressEnd, mvrProfileGroupCtlAction=mvrProfileGroupCtlAction, userauthCreateUserTrap=userauthCreateUserTrap, staTxHoldCount=staTxHoldCount, fileInfoFileName=fileInfoFileName, lacpPortStatus=lacpPortStatus, portTransceiverThresholdInfoTxBiasCurrentHighWarn=portTransceiverThresholdInfoTxBiasCurrentHighWarn, memoryFreedInPercent=memoryFreedInPercent, voiceVlanMgt=voiceVlanMgt, sshUserDsaKey4=sshUserDsaKey4, privateVlanVlanEntry=privateVlanVlanEntry, dosTcpNullScanStatus=dosTcpNullScanStatus, prioWrrPortTable=prioWrrPortTable, diffServClassMapDescription=diffServClassMapDescription, diffServMacAceMinCos=diffServMacAceMinCos, ipFilterTelnetInetTable=ipFilterTelnetInetTable, mstMaxHops=mstMaxHops, diffServIpv6AceIndex=diffServIpv6AceIndex, mldSnoopVlanClearStatistics=mldSnoopVlanClearStatistics, portHistPreviousOutDiscards=portHistPreviousOutDiscards, swRoleInSystem=swRoleInSystem, timeRangeAbsoluteEndYears=timeRangeAbsoluteEndYears, aaaTacacsPlusGroupStatus=aaaTacacsPlusGroupStatus, swProdDescription=swProdDescription, atcMcastStormTcReleaseTrapStatus=atcMcastStormTcReleaseTrapStatus, aaaMethodTable=aaaMethodTable, portTransceiverThresholdInfoTemperatureLowWarn=portTransceiverThresholdInfoTemperatureLowWarn, igmpSnoopProfileId=igmpSnoopProfileId, portHistPreviousIndex=portHistPreviousIndex, lbdPortLoopedVlan=lbdPortLoopedVlan, diffServAclHwCounterEntry=diffServAclHwCounterEntry, daiVlanArpAclStatus=daiVlanArpAclStatus, atcBcastStormEntry=atcBcastStormEntry, mvrDomainGroupStaticAddress=mvrDomainGroupStaticAddress, daiLogSrcIpAddress=daiLogSrcIpAddress, userAuthUserName=userAuthUserName, swProdVersion=swProdVersion, igmpSnoopCurrentVlanVersion=igmpSnoopCurrentVlanVersion, igmpSnoopRouterStaticStatus=igmpSnoopRouterStaticStatus, ipHttpState=ipHttpState, system=system, diffServIpAceMinDestPort=diffServIpAceMinDestPort, mldSnoopMgt=mldSnoopMgt, diffServMeterEntry=diffServMeterEntry, pethPseMainExtEntry=pethPseMainExtEntry, diffServAclAttachCtl=diffServAclAttachCtl, priorityMgt=priorityMgt, trapSfpThresholdAlarmWarnIfIndex=trapSfpThresholdAlarmWarnIfIndex, timeRangeEntry=timeRangeEntry, mldSnoopStatus=mldSnoopStatus, staPortAdminEdgePortWithAuto=staPortAdminEdgePortWithAuto, mvrProfileCtlEntry=mvrProfileCtlEntry, daiLog=daiLog, portHistCurrentIntervalStart=portHistCurrentIntervalStart, igmpSnoopCurrentVlanProxyReporting=igmpSnoopCurrentVlanProxyReporting, mldSnoopVlanIndex=mldSnoopVlanIndex, timeRangePeriodicStartMinutes=timeRangePeriodicStartMinutes, xstMgt=xstMgt, portSecPortTable=portSecPortTable, igmpSnoopThrottlePortIndex=igmpSnoopThrottlePortIndex, portHistPreviousOutMulticastPkts=portHistPreviousOutMulticastPkts, igmpSnoopQueryDropTable=igmpSnoopQueryDropTable, atcBcastStormEnable=atcBcastStormEnable, mvrDomainId=mvrDomainId, igmpSnoopRouterStaticVlanIndex=igmpSnoopRouterStaticVlanIndex, mvrVlanStatisticsNumLeaves=mvrVlanStatisticsNumLeaves, ValidStatus=ValidStatus, rlPortIndex=rlPortIndex, fileCopyDestFileName=fileCopyDestFileName, xstInstancePortDesignatedPort=xstInstancePortDesignatedPort, igmpSnoopPortNumInvalidReport=igmpSnoopPortNumInvalidReport, ecs2100_28ppNotifications=ecs2100_28ppNotifications, pethPsePortOnOffNotification=pethPsePortOnOffNotification, trapIpFilterRejectIp=trapIpFilterRejectIp, mldSnoopMulticastCurrentSourceIpAddress=mldSnoopMulticastCurrentSourceIpAddress, portName=portName, mldSnoopThrottlePortMaxGroups=mldSnoopThrottlePortMaxGroups, dhcpSnoopEnable=dhcpSnoopEnable, staMgt=staMgt, diffServMacAceEtherTypeOp=diffServMacAceEtherTypeOp, timeRangeAbsoluteEndMonths=timeRangeAbsoluteEndMonths, mcastStormMgt=mcastStormMgt, prioIfClassificationModeEntry=prioIfClassificationModeEntry, timeRangePeriodicStartDaysOfTheWeek=timeRangePeriodicStartDaysOfTheWeek, mldSnoopMulticastCurrentVlanIndex=mldSnoopMulticastCurrentVlanIndex, diffServIpAceProtocol=diffServIpAceProtocol, smtpMgt=smtpMgt, portHistCurrentOutUtilization=portHistCurrentOutUtilization, trunkTable=trunkTable, sshRsaHostKeyMD5FingerPrint=sshRsaHostKeyMD5FingerPrint, diffServTcamUnit=diffServTcamUnit, ntpServerKeyId=ntpServerKeyId, diffServTcamUsed=diffServTcamUsed, dot1vProtocolExPortTable=dot1vProtocolExPortTable, sysTimeZoneName=sysTimeZoneName, telnetStatus=telnetStatus, prioIfClassificationModeStatus=prioIfClassificationModeStatus, diffServIpv6AceStatus=diffServIpv6AceStatus, mldSnoopVlanNumGroups=mldSnoopVlanNumGroups, diffServActionTable=diffServActionTable, dot1agCfmMepUpTrap=dot1agCfmMepUpTrap, swIndivPowerUnitIndex=swIndivPowerUnitIndex, igmpSnoopRouterStaticEntry=igmpSnoopRouterStaticEntry, fileCopySrcOperType=fileCopySrcOperType, mldSnoopPortNumLeaves=mldSnoopPortNumLeaves, mldSnoopFilterPortIndex=mldSnoopFilterPortIndex, daiLogIndex=daiLogIndex, atcBcastStormTcApplyTrapStatus=atcBcastStormTcApplyTrapStatus, powerSavingStatus=powerSavingStatus, diffServClassMapIndex=diffServClassMapIndex, sshRsaHostKey6=sshRsaHostKey6, dosMgt=dosMgt, cpuUtiRisingThreshold=cpuUtiRisingThreshold, portTransceiverThresholdInfoTxPowerHighWarn=portTransceiverThresholdInfoTxPowerHighWarn, pingSentPackets=pingSentPackets, mvrSourcePortmode=mvrSourcePortmode, vlanMgt=vlanMgt, dhcpSnoopInformationOptionEncodeFormat=dhcpSnoopInformationOptionEncodeFormat, mstInstanceOperVlansMap3k=mstInstanceOperVlansMap3k, privateVlanPromPortSecondaryRemap=privateVlanPromPortSecondaryRemap, mstInstanceOperIndex=mstInstanceOperIndex, unknownUcastStormIfIndex=unknownUcastStormIfIndex, cableDiagResultDistancePairB=cableDiagResultDistancePairB, sysLogCommandLogStatus=sysLogCommandLogStatus, mvrGroupCurrenDomainId=mvrGroupCurrenDomainId, igmpSnoopPortNumSpecificQueryReceived=igmpSnoopPortNumSpecificQueryReceived, sshUserEntry=sshUserEntry, atcBcastStormTable=atcBcastStormTable, trapVar=trapVar, pethPsePortPowerMaintenanceStatusNotification=pethPsePortPowerMaintenanceStatusNotification, cpuUtiFallingThreshold=cpuUtiFallingThreshold, dhcpSnoopBindingsTable=dhcpSnoopBindingsTable, fileMgt=fileMgt, diffServPolicyMapPortTable=diffServPolicyMapPortTable, igmpSnoopTcnFlood=igmpSnoopTcnFlood, igmpSnoopVlanNumJoins=igmpSnoopVlanNumJoins, mvrRobustnessValue=mvrRobustnessValue, switchInfoTable=switchInfoTable, cpuGuardMinThreshold=cpuGuardMinThreshold, swMemoryUtiRisingThresholdNotification=swMemoryUtiRisingThresholdNotification, prioSchedModePort=prioSchedModePort, privateVlanPromPortIfIndex=privateVlanPromPortIfIndex, sshDsaHostKey2=sshDsaHostKey2, portTransceiverThresholdInfoRxPowerLowAlarm=portTransceiverThresholdInfoRxPowerLowAlarm, igmpSnoopProfileCtl=igmpSnoopProfileCtl, dhcpSnoopBindingsPortIfIndex=dhcpSnoopBindingsPortIfIndex, rlPortInputStatus=rlPortInputStatus, portHistCurrentOutUcastPkts=portHistCurrentOutUcastPkts, mvrPortStatisticsNumLeavesSend=mvrPortStatisticsNumLeavesSend, diffServIpv6AceNextHeader=diffServIpv6AceNextHeader, pingHistoryIndex=pingHistoryIndex, subnetVlanPriority=subnetVlanPriority, diffServIpv6AceSourcePort=diffServIpv6AceSourcePort, daiLogVlan=daiLogVlan, smtpStatus=smtpStatus, portHistPreviousInUtilization=portHistPreviousInUtilization, pingHistoryTable=pingHistoryTable, prioDscpToDscpIfValue=prioDscpToDscpIfValue, sshUserDsaKey5=sshUserDsaKey5, mvrForwardingPriority=mvrForwardingPriority, dhcpRelayRestart=dhcpRelayRestart, diffServIpAceSourceIpAddr=diffServIpAceSourceIpAddr, voiceVlanPortRuleOui=voiceVlanPortRuleOui, dhcpRelayServerInetAddrIndex=dhcpRelayServerInetAddrIndex, ntpServerStatus=ntpServerStatus, diffServIpAceSourceIpAddrBitmask=diffServIpAceSourceIpAddrBitmask, xstInstanceCfgTxHoldCount=xstInstanceCfgTxHoldCount, mvrDomainGroupStaticEntry=mvrDomainGroupStaticEntry, mldSnoopProfileCtlAction=mldSnoopProfileCtlAction, xstInstanceCfgForwardDelay=xstInstanceCfgForwardDelay, mvrProfileDomainId=mvrProfileDomainId, fileInfoUnitID=fileInfoUnitID, ipFilterTelnetInetAddressStart=ipFilterTelnetInetAddressStart, ipFilterMgt=ipFilterMgt, mvrDomainEntry=mvrDomainEntry, netConfigIPAddress=netConfigIPAddress, sshHostKeyGenAction=sshHostKeyGenAction, xstInstancePortDesignatedRoot=xstInstancePortDesignatedRoot, macVlanMacAddress=macVlanMacAddress, swAtcMcastStormTcReleaseTrap=swAtcMcastStormTcReleaseTrap, dhcpSnoopPortTrustEnable=dhcpSnoopPortTrustEnable, sntpServerTable=sntpServerTable, rspanRemoteVlanId=rspanRemoteVlanId, rateLimitPortTable=rateLimitPortTable, dhcpSnoopTotalForwardedPkts=dhcpSnoopTotalForwardedPkts, cpuStatus=cpuStatus, diffServAccessGroupEntry=diffServAccessGroupEntry, portMediaInfoTable=portMediaInfoTable, ipFilterSnmpInetAddressStart=ipFilterSnmpInetAddressStart, diffServIpv6AceTable=diffServIpv6AceTable, timeRangeAbsoluteEndMinutes=timeRangeAbsoluteEndMinutes, sshHostKeyGenStatus=sshHostKeyGenStatus, portOpticalMonitoringInfoTxBiasCurrent=portOpticalMonitoringInfoTxBiasCurrent, xstInstanceCfgEntry=xstInstanceCfgEntry, swMemoryUtiFallingThresholdNotification=swMemoryUtiFallingThresholdNotification, portMediaInfoRevision=portMediaInfoRevision, sysTimeZone=sysTimeZone, macVlanEntry=macVlanEntry, networkAccessAging=networkAccessAging, portHistCurrentOutDiscards=portHistCurrentOutDiscards, aaaAccountEntry=aaaAccountEntry, mldSnoopMulticastDataDrop=mldSnoopMulticastDataDrop, igmpSnoopProfileTable=igmpSnoopProfileTable, igmpSnoopThrottlePortAction=igmpSnoopThrottlePortAction, mvrPortStatisticsTable=mvrPortStatisticsTable, mldSnoopPortNumJoins=mldSnoopPortNumJoins, ipFilterAllClientCtlAction=ipFilterAllClientCtlAction, igmpSnoopRouterAlertOptionCheck=igmpSnoopRouterAlertOptionCheck, taskCpuTable=taskCpuTable, diffServAccessGroupCounterStatus=diffServAccessGroupCounterStatus, mvrProfileName=mvrProfileName, sysLogMgt=sysLogMgt, mldSnoopCurrentVlanImmediateLeaveByHostIp=mldSnoopCurrentVlanImmediateLeaveByHostIp, diffServTcamEntry=diffServTcamEntry, mvrProxySwitching=mvrProxySwitching, diffServIpv6AceAccess=diffServIpv6AceAccess, networkAccessPortDynamicQos=networkAccessPortDynamicQos, sshUserDsaKey7=sshUserDsaKey7, voiceVlanOuiAddress=voiceVlanOuiAddress, sysCurrentTime=sysCurrentTime, mldSnoopMulticastCurrentIpAddress=mldSnoopMulticastCurrentIpAddress, portMgt=portMgt, igmpSnoopPortNumGroups=igmpSnoopPortNumGroups, mldSnoopRouterStaticTable=mldSnoopRouterStaticTable, mvrVlanStatisticsNumSepcificQuerySend=mvrVlanStatisticsNumSepcificQuerySend, igmpSnoopCurrentVlanGeneralQuerySuppression=igmpSnoopCurrentVlanGeneralQuerySuppression, igmpSnoopPortNumGeneralQueryRecevied=igmpSnoopPortNumGeneralQueryRecevied, timeRangeAbsoluteStartMinutes=timeRangeAbsoluteStartMinutes, igmpSnoopMulticastGroupSourceIPAddress=igmpSnoopMulticastGroupSourceIPAddress, portTransceiverThresholdInfoTxBiasCurrentLowAlarm=portTransceiverThresholdInfoTxBiasCurrentLowAlarm, igmpSnoopCurrentVlanQueryIntvl=igmpSnoopCurrentVlanQueryIntvl, ecs2100_28ppTraps=ecs2100_28ppTraps, portHistPreviousInMulticastPkts=portHistPreviousInMulticastPkts, prioSchedModePortIndex=prioSchedModePortIndex, vlanStaticInterfaceType=vlanStaticInterfaceType, dhcpSnoopVerifyMacAddressEnable=dhcpSnoopVerifyMacAddressEnable, diffServArpAceSourceMacAddr=diffServArpAceSourceMacAddr)
mibBuilder.exportSymbols("ECS2100-28PP-MIB", igmpSnoopUnsolicitedReportInterval=igmpSnoopUnsolicitedReportInterval, diffServPolicyMapElementTable=diffServPolicyMapElementTable, atcBcastStormAlarmFireTrapStatus=atcBcastStormAlarmFireTrapStatus, tacacsPlusServerKey=tacacsPlusServerKey, sshUserRsaKey2=sshUserRsaKey2, igmpSnoopMgt=igmpSnoopMgt, edgecoreNetworks=edgecoreNetworks, userAuthPassword=userAuthPassword, portTransceiverThresholdInfoIfIndex=portTransceiverThresholdInfoIfIndex, cableDiagResultStatusPairB=cableDiagResultStatusPairB, diffServClassMapMatchType=diffServClassMapMatchType, portFlowCtrlCfg=portFlowCtrlCfg, daiLogPort=daiLogPort, diffServIpv6AceSourcePortBitmask=diffServIpv6AceSourcePortBitmask, fileInfoEntry=fileInfoEntry, atcMcastStormEntry=atcMcastStormEntry, mldSnoopUnsolicitedReportInterval=mldSnoopUnsolicitedReportInterval, fileCopyServerUserName=fileCopyServerUserName, pingAction=pingAction, igmpSnoopPortNumGeneralQuerySend=igmpSnoopPortNumGeneralQuerySend, fileCopyStatus=fileCopyStatus, dhcpOption82RelayServerAddrIndex=dhcpOption82RelayServerAddrIndex, igmpSnoopCurrentVlanIndex=igmpSnoopCurrentVlanIndex, lbdPortEntry=lbdPortEntry, privateVlanSessionTable=privateVlanSessionTable, portSpeedDpxStatus=portSpeedDpxStatus, diffServClassMapAttachCtl=diffServClassMapAttachCtl, dosTcpSynFinScan=dosTcpSynFinScan, staPathCostMethod=staPathCostMethod, prioCosToDscpCosValue=prioCosToDscpCosValue, dhcpRelayServerInetAddress=dhcpRelayServerInetAddress, igmpSnoopProfileCtlEndInetAddress=igmpSnoopProfileCtlEndInetAddress, networkAccessMacAddressPort=networkAccessMacAddressPort, macVlanId=macVlanId, diffServArpAceSourceIpAddr=diffServArpAceSourceIpAddr, cpuPeakTime=cpuPeakTime, privateVlanPromPortSecondaryRemap2k=privateVlanPromPortSecondaryRemap2k, sntpServerStatus=sntpServerStatus, fileCopyServerInetAddressType=fileCopyServerInetAddressType, prioDscpToDscpPhbValue=prioDscpToDscpPhbValue, staPortOperPointToPoint=staPortOperPointToPoint, networkAccessMacAddressTime=networkAccessMacAddressTime, diffServPolicyMapPortIfIndex=diffServPolicyMapPortIfIndex, dhcpOption82Policy=dhcpOption82Policy, mldSnoopRouterCurrentEntry=mldSnoopRouterCurrentEntry, aaaAccExecTable=aaaAccExecTable, voiceVlanOuiMask=voiceVlanOuiMask, atcBcastStormTcAction=atcBcastStormTcAction, diffServMacAceDestMacAddr=diffServMacAceDestMacAddr, dot1xAuthConfigExtTable=dot1xAuthConfigExtTable, restartConfigFile=restartConfigFile, trunkMaxId=trunkMaxId, staPortTcPropStop=staPortTcPropStop, diffServAccessGroupDirection=diffServAccessGroupDirection, fileCopyDestOperType=fileCopyDestOperType, diffServAccessGroupStatus=diffServAccessGroupStatus, ntpServerIpAddress=ntpServerIpAddress, xstInstanceCfgPathCostMethod=xstInstanceCfgPathCostMethod, igmpSnoopPortNumSepcificQuerySend=igmpSnoopPortNumSepcificQuerySend, mvrDomainGroupCurrentAddress=mvrDomainGroupCurrentAddress, ipSrcGuardMode=ipSrcGuardMode, networkAccessPortPortIndex=networkAccessPortPortIndex, logoutTrap=logoutTrap, daiInterface=daiInterface, atcMcastStormAutoRelease=atcMcastStormAutoRelease, mstInstanceOperVlansMap4k=mstInstanceOperVlansMap4k, cableDiagResultDistancePairD=cableDiagResultDistancePairD, atcMcastStormTcApplyTime=atcMcastStormTcApplyTime, bcastStormPktRateResolution=bcastStormPktRateResolution, mvrDomainIfIndex=mvrDomainIfIndex, igmpSnoopPortNumLeaves=igmpSnoopPortNumLeaves, staPortBpduGuard=staPortBpduGuard, fileAutoDownloadResultTable=fileAutoDownloadResultTable, vtyMaxSession=vtyMaxSession, sntpServerEntry=sntpServerEntry, cpuPeakDuration=cpuPeakDuration, lacpMgt=lacpMgt, cableDiagResultEntry=cableDiagResultEntry, ntpServerTable=ntpServerTable, memoryUtiRisingThreshold=memoryUtiRisingThreshold, ecs2110_26t=ecs2110_26t, diffServIpAceDestPortBitmask=diffServIpAceDestPortBitmask, radiusServerGlobalAcctPort=radiusServerGlobalAcctPort, stormMgt=stormMgt, vtyMgt=vtyMgt, mvrVlanStatisticsVlanId=mvrVlanStatisticsVlanId, diffServAclAttachCtlAction=diffServAclAttachCtlAction, tacacsPlusServerTable=tacacsPlusServerTable, mldSnoopThrottlePortCurrentGroups=mldSnoopThrottlePortCurrentGroups, prioSchedModePortEntry=prioSchedModePortEntry, atcMcastStormSampleType=atcMcastStormSampleType, diffServPolicyMapElementStatus=diffServPolicyMapElementStatus, dynamicArpInspectionMgt=dynamicArpInspectionMgt, sshConnEncryptionTypeStr=sshConnEncryptionTypeStr, trunkValidNumber=trunkValidNumber, mldSnoopPortNumGroups=mldSnoopPortNumGroups, portHistPreviousInErrors=portHistPreviousInErrors, diffServClassMapEntry=diffServClassMapEntry, dot1xMgt=dot1xMgt, trapVarLoginUserName=trapVarLoginUserName, mldSnoopClearDynamicGroups=mldSnoopClearDynamicGroups, mstInstanceEditEntry=mstInstanceEditEntry, remoteLogServerInetAddressType=remoteLogServerInetAddressType, diffServMacAceStatus=diffServMacAceStatus, prioWrrPortWeight=prioWrrPortWeight, diffServClassMapAttachCtlAction=diffServClassMapAttachCtlAction, igmpSnoopVlanEntry=igmpSnoopVlanEntry, rspanOperStatus=rspanOperStatus, tacacsPlusServerPortNumber=tacacsPlusServerPortNumber, mvrProfileGropuCtlProfileId=mvrProfileGropuCtlProfileId, portOpticalMonitoringInfoIfIndex=portOpticalMonitoringInfoIfIndex, consoleExecTimeout=consoleExecTimeout, sshDsaHostKeyMD5FingerPrint=sshDsaHostKeyMD5FingerPrint, mldSnoopVlanEntry=mldSnoopVlanEntry, prioIfClassificationModeIf=prioIfClassificationModeIf, mldSnoopPortNumLeavesSend=mldSnoopPortNumLeavesSend, privateVlanPrivatePortSecondaryVlan=privateVlanPrivatePortSecondaryVlan, rspanSwitchRole=rspanSwitchRole, fileCopyTrap=fileCopyTrap, swHardwareVer=swHardwareVer, poeMgt=poeMgt, radiusServerEntry=radiusServerEntry, sshConnUserName=sshConnUserName, diffServMeterStatus=diffServMeterStatus, memoryStatus=memoryStatus, diffServIpv6AceDestPortBitmask=diffServIpv6AceDestPortBitmask, portTransceiverThresholdInfoTable=portTransceiverThresholdInfoTable, mvrProfileGroupStartIPAddress=mvrProfileGroupStartIPAddress, rspanRemotePorts=rspanRemotePorts, privateVlanSessionId=privateVlanSessionId, consolePasswordThreshold=consolePasswordThreshold, timeRangePeriodicStatus=timeRangePeriodicStatus, rlPortOutputLimitInKilo=rlPortOutputLimitInKilo, lbdPortIfIndex=lbdPortIfIndex, diffServClassMapElementIndexTypeList=diffServClassMapElementIndexTypeList, lbdTransmitInterval=lbdTransmitInterval, swCpuUtiRisingNotification=swCpuUtiRisingNotification, igmpSnoopVersionExclusive=igmpSnoopVersionExclusive, xstInstanceCfgTimeSinceTopologyChange=xstInstanceCfgTimeSinceTopologyChange, privateVlanSessionUplinkPorts=privateVlanSessionUplinkPorts, mstInstanceOperVlansMap2k=mstInstanceOperVlansMap2k, diffServIpv6AceSourcePortOp=diffServIpv6AceSourcePortOp, igmpSnoopCurrentVlanStatus=igmpSnoopCurrentVlanStatus, swIndivPowerIndex=swIndivPowerIndex, netConfigIfIndex=netConfigIfIndex, xstInstanceCfgRootCost=xstInstanceCfgRootCost, vlanStaticExtEntry=vlanStaticExtEntry, dhcpRelayServerInetAddrTable=dhcpRelayServerInetAddrTable, mldSnoopFilterStatus=mldSnoopFilterStatus, daiGlobalStatus=daiGlobalStatus, sfpThresholdAlarmWarnTrap=sfpThresholdAlarmWarnTrap, igmpSnoopRouterPortExpireTime=igmpSnoopRouterPortExpireTime, switchMgt=switchMgt, igmpSnoopUnregisteredDataFlood=igmpSnoopUnregisteredDataFlood, diffServMacAceDestMacAddrBitmask=diffServMacAceDestMacAddrBitmask, swServiceTag=swServiceTag, mvrProfileCtlId=mvrProfileCtlId, portMacAddrLearningCount=portMacAddrLearningCount, taskCpuEntry=taskCpuEntry, StaPathCostMode=StaPathCostMode, mldSnoopCurrentVlanImmediateLeave=mldSnoopCurrentVlanImmediateLeave, portHistPreviousEntry=portHistPreviousEntry, portSecMacAsPermanentMgt=portSecMacAsPermanentMgt, ecs2100_10t=ecs2100_10t, timeRangeName=timeRangeName, igmpSnoopThrottlePortCurrentGroups=igmpSnoopThrottlePortCurrentGroups, netConfigPrimaryInterface=netConfigPrimaryInterface, mstInstanceEditVlansMap2k=mstInstanceEditVlansMap2k, diffServMeterModel=diffServMeterModel, daiGlobalLogNumber=daiGlobalLogNumber, networkAccessMacAddressEntry=networkAccessMacAddressEntry, mldSnoopProfileRangeTable=mldSnoopProfileRangeTable, mirrorEntry=mirrorEntry, portTransceiverThresholdInfoTemperatureHighWarn=portTransceiverThresholdInfoTemperatureHighWarn, dot1agCfmLoopFindTrap=dot1agCfmLoopFindTrap, igmpSnoopMulticastDataDrop=igmpSnoopMulticastDataDrop, diffServPolicyMapStatus=diffServPolicyMapStatus, networkAccessClearMacAddressAction=networkAccessClearMacAddressAction, sntpServiceMode=sntpServiceMode, switchOperState=switchOperState, mvrVlanStatisticsEntry=mvrVlanStatisticsEntry, sshDsaHostKey8=sshDsaHostKey8, trapIpFilterRejectInetAddress=trapIpFilterRejectInetAddress, dhcpOption82Status=dhcpOption82Status, bcastStormPktRate=bcastStormPktRate, diffServIpAceIndex=diffServIpAceIndex, diffServIpv6AceDscp=diffServIpv6AceDscp, portOpticalMonitoringInfoVcc=portOpticalMonitoringInfoVcc, diffServMacAcePktformat=diffServMacAcePktformat, mstInstanceOperVlansMap=mstInstanceOperVlansMap, ipFilterSnmpInetTable=ipFilterSnmpInetTable, mvrVlanStatisticsDomainId=mvrVlanStatisticsDomainId, aaaTacacsPlusGroupTable=aaaTacacsPlusGroupTable, unknownUcastStormStatus=unknownUcastStormStatus, atcMgt=atcMgt, cableDiagResultIfIndex=cableDiagResultIfIndex, daiPortEntry=daiPortEntry, dhcpSnoopBindingsVlanIndex=dhcpSnoopBindingsVlanIndex, timeRangePeriodicEndDaysOfTheWeek=timeRangePeriodicEndDaysOfTheWeek, prioWrrPortStrictStatus=prioWrrPortStrictStatus, dhcpMgt=dhcpMgt, swPortNumber=swPortNumber, mldSnoopQueryMaxResponseTime=mldSnoopQueryMaxResponseTime, dhcpSnoopGlobal=dhcpSnoopGlobal, mldSnoopVlanNumInvalidReport=mldSnoopVlanNumInvalidReport, portTransceiverThresholdInfoRxPowerHighWarn=portTransceiverThresholdInfoRxPowerHighWarn, voiceVlanOuiEntry=voiceVlanOuiEntry, sshRsaHostKey3=sshRsaHostKey3, sshUserRsaKey3=sshUserRsaKey3, diffServMacAceAccess=diffServMacAceAccess, diffServPolicyMapPortStatus=diffServPolicyMapPortStatus, cpuGuardControlTrap=cpuGuardControlTrap, staProtocolType=staProtocolType, daiTotalReceivedPkts=daiTotalReceivedPkts, ecs2100_52t=ecs2100_52t, memoryUtiFallingThreshold=memoryUtiFallingThreshold, portMasterSlaveModeCfg=portMasterSlaveModeCfg, sshUserTable=sshUserTable, diffServAclHwCounterAceIndex=diffServAclHwCounterAceIndex, mldSnoopVlanNumLeavesSend=mldSnoopVlanNumLeavesSend, ipFilterHttpInetEntry=ipFilterHttpInetEntry, igmpSnoopTcnQuerySolicit=igmpSnoopTcnQuerySolicit, rspanSrcRxPorts=rspanSrcRxPorts, userAuthPublicKey=userAuthPublicKey, cpuGuardHighWatermark=cpuGuardHighWatermark, trunkCreation=trunkCreation, remoteLogServerInetTable=remoteLogServerInetTable, consoleMgt=consoleMgt, mvrProfileGroupEndIPAddress=mvrProfileGroupEndIPAddress, igmpSnoopProfileRangeEntry=igmpSnoopProfileRangeEntry, portSecMacAsPermanentPortIndex=portSecMacAsPermanentPortIndex, portMediaInfoVendorName=portMediaInfoVendorName, mvrDomainPortType=mvrDomainPortType, mvrDomainTable=mvrDomainTable, mvrPortDomainId=mvrPortDomainId, daiTotalSrcMacDroppedPkts=daiTotalSrcMacDroppedPkts, smtpServerIpStatus=smtpServerIpStatus, mvrDomainPortImmediateLeave=mvrDomainPortImmediateLeave, dhcpSnoopBindingsEntryType=dhcpSnoopBindingsEntryType, diffServPolicyMapElementEntry=diffServPolicyMapElementEntry, portHistPreviousOutOctets=portHistPreviousOutOctets, radiusServerTable=radiusServerTable, sshDsaHostKey6=sshDsaHostKey6, sshRsaHostKey8=sshRsaHostKey8, diffServArpAceDestMacAddrBitmask=diffServArpAceDestMacAddrBitmask, remoteLogServerInetAddress=remoteLogServerInetAddress, diffServMacAceCosBitmask=diffServMacAceCosBitmask, diffServIpAceMinSourcePort=diffServIpAceMinSourcePort, radiusServerTimeout=radiusServerTimeout, atcMcastStormEnable=atcMcastStormEnable, voiceVlanOuiTable=voiceVlanOuiTable, diffServPolicyMapAttachCtlAction=diffServPolicyMapAttachCtlAction, mldSnoopMulticastStaticPorts=mldSnoopMulticastStaticPorts, vlanStaticExtTable=vlanStaticExtTable)
mibBuilder.exportSymbols("ECS2100-28PP-MIB", dhcpSnoopUntrustedPortDroppedPkts=dhcpSnoopUntrustedPortDroppedPkts, timeRangePeriodicStartHours=timeRangePeriodicStartHours, dhcpOption82RemoteIDString=dhcpOption82RemoteIDString, diffServAclHwCounterAceHitCount=diffServAclHwCounterAceHitCount, portHistControlTable=portHistControlTable, sshAuthRetries=sshAuthRetries, igmpSnoopQuerier=igmpSnoopQuerier, igmpSnoopCurrentVlanTable=igmpSnoopCurrentVlanTable, userAuthMgt=userAuthMgt, portUtilEntry=portUtilEntry, ntpServerEntry=ntpServerEntry, mirrorTable=mirrorTable, netDefaultGateway=netDefaultGateway, voiceVlanPortTable=voiceVlanPortTable, trapVarMacAddr=trapVarMacAddr, diffServPolicyMapElementIndexList=diffServPolicyMapElementIndexList, portMediaInfoIfIndex=portMediaInfoIfIndex, fileAutoDownloadResultStatus=fileAutoDownloadResultStatus, atcBcastStormSampleType=atcBcastStormSampleType, vlanEntry=vlanEntry, igmpSnoopPortTable=igmpSnoopPortTable, aaaAccountIfIndex=aaaAccountIfIndex, networkAccessPortTable=networkAccessPortTable, fileCopyUnitId=fileCopyUnitId, mvrDomainAssociatedProfileEntry=mvrDomainAssociatedProfileEntry, igmpSnoopThrottlePortEntry=igmpSnoopThrottlePortEntry, smtpDestEMailTable=smtpDestEMailTable, portMediaInfoConnectorType=portMediaInfoConnectorType, timeRangePeriodicEndHours=timeRangePeriodicEndHours, diffServClassMapTable=diffServClassMapTable, atcBcastStormTcApplyTime=atcBcastStormTcApplyTime, voiceVlanOuiStatus=voiceVlanOuiStatus, igmpSnoopRouterCurrentTable=igmpSnoopRouterCurrentTable, diffServTcamDevice=diffServTcamDevice, mirrorDestinationPort=mirrorDestinationPort, atcBcastStormTcReleaseTrapStatus=atcBcastStormTcReleaseTrapStatus, mstRevision=mstRevision, igmpSnoopRouterStaticPorts=igmpSnoopRouterStaticPorts, dhcpOption82RelayServerAddrTable=dhcpOption82RelayServerAddrTable, radiusServerGlobalAuthPort=radiusServerGlobalAuthPort, portSecMaxMacCount=portSecMaxMacCount, privateVlanVlanIndex=privateVlanVlanIndex, mldSnoopCurrentVlanIndex=mldSnoopCurrentVlanIndex, ipHttpPort=ipHttpPort, privateVlanUplinkPorts=privateVlanUplinkPorts, portTransceiverThresholdInfoTxPowerHighAlarm=portTransceiverThresholdInfoTxPowerHighAlarm, igmpSnoopMulticastStaticVlanIndex=igmpSnoopMulticastStaticVlanIndex, igmpSnoopPortClearStatistics=igmpSnoopPortClearStatistics, mstInstanceEditTable=mstInstanceEditTable, dhcpSnoopVlanEnable=dhcpSnoopVlanEnable, dhcpcIfIndex=dhcpcIfIndex, restartMgt=restartMgt, staPortTable=staPortTable, mstInstanceEditVlansMap3k=mstInstanceEditVlansMap3k, atcMcastStormAlarmFireTrapStatus=atcMcastStormAlarmFireTrapStatus, portTransceiverThresholdInfoTxPowerLowWarn=portTransceiverThresholdInfoTxPowerLowWarn, timeRangeStatus=timeRangeStatus, diffServArpAceEntry=diffServArpAceEntry, telnetMgt=telnetMgt, remoteLogLevel=remoteLogLevel, remoteLogFacilityType=remoteLogFacilityType, pethPsePortExtUsedPowerValue=pethPsePortExtUsedPowerValue, sshMgt=sshMgt, portInOctetRate=portInOctetRate, portMediaInfoEntry=portMediaInfoEntry, ntpMgt=ntpMgt, consoleStopBits=consoleStopBits, netConfigEntry=netConfigEntry, networkAccessPortDynamicVlan=networkAccessPortDynamicVlan, ntpAuthenticateStatus=ntpAuthenticateStatus, diffServAccessGroupAclIndex=diffServAccessGroupAclIndex, lbdAction=lbdAction, dot1xAuthConfigExtOperMode=dot1xAuthConfigExtOperMode, trapUdldPortShutdownReason=trapUdldPortShutdownReason, mvrProfileCtlAction=mvrProfileCtlAction, mldSnoopPortNumSepcificQuerySend=mldSnoopPortNumSepcificQuerySend, switchNumber=switchNumber, timeRangeAbsoluteTable=timeRangeAbsoluteTable, ipHttpsPort=ipHttpsPort, switchIndivPowerEntry=switchIndivPowerEntry, xstInstancePortDesignatedBridge=xstInstancePortDesignatedBridge, smtpDestEMailStatus=smtpDestEMailStatus, powerSavingIfIndex=powerSavingIfIndex, portHistPreviousIntervalStart=portHistPreviousIntervalStart, cableDiagResultStatusPairA=cableDiagResultStatusPairA, sshRsaHostKey7=sshRsaHostKey7, sshConnStatus=sshConnStatus, privateVlanSessionDownlinkPorts=privateVlanSessionDownlinkPorts, staPortAdminPointToPoint=staPortAdminPointToPoint, daiStatistics=daiStatistics, privateVlanPromPortPrimaryVlanId=privateVlanPromPortPrimaryVlanId, remoteLogServerUdpPort=remoteLogServerUdpPort, radiusServerAuthPortNumber=radiusServerAuthPortNumber, swIpFilterRejectTrap=swIpFilterRejectTrap, radiusServerAcctPortNumber=radiusServerAcctPortNumber, mvrProfileGroupCtlTable=mvrProfileGroupCtlTable, diffServPolicyMapElementIndex=diffServPolicyMapElementIndex, staPortRootGuardStatus=staPortRootGuardStatus, portHistCurrentInBroadcastPkts=portHistCurrentInBroadcastPkts, atcMcastStormIfIndex=atcMcastStormIfIndex, portHistCurrentTable=portHistCurrentTable, mvrVlanStatisticsTable=mvrVlanStatisticsTable, userAuthenticationFailureTrap=userAuthenticationFailureTrap, xstInstanceCfgHelloTime=xstInstanceCfgHelloTime, pingMgt=pingMgt, portOutUtil=portOutUtil, staPortLongAdminPathCost=staPortLongAdminPathCost, staLoopbackDetectionPortTable=staLoopbackDetectionPortTable, voiceVlanPortEntry=voiceVlanPortEntry, staSystemStatus=staSystemStatus, cpuGuardReleaseTrap=cpuGuardReleaseTrap, atcMcastStormTcApplyTrapStatus=atcMcastStormTcApplyTrapStatus, daiTotalDroppedPkts=daiTotalDroppedPkts, timeRangeAbsoluteStartHours=timeRangeAbsoluteStartHours, atcBcastStormAutoRelease=atcBcastStormAutoRelease, privateVlanVlanTable=privateVlanVlanTable, sntpMgt=sntpMgt, mldSnoopProfileAction=mldSnoopProfileAction, mldSnoopFilterPortEntry=mldSnoopFilterPortEntry, dhcpSnoopVlanConfigEntry=dhcpSnoopVlanConfigEntry, diffServClassMapAttachCtlIndex=diffServClassMapAttachCtlIndex, igmpSnoopForwardingPriority=igmpSnoopForwardingPriority, portOpticalMonitoringInfoTxPower=portOpticalMonitoringInfoTxPower, mvrDomainPortImmediateLeaveByHostIp=mvrDomainPortImmediateLeaveByHostIp, mstInstanceEditVlansMap4k=mstInstanceEditVlansMap4k, switchProductId=switchProductId, diffServArpAceAction=diffServArpAceAction, sshUserDsaKey3=sshUserDsaKey3, consoleSilentTime=consoleSilentTime, staPortBpduFilter=staPortBpduFilter, sntpStatus=sntpStatus, networkAccessMacFilterWithMaskEntry=networkAccessMacFilterWithMaskEntry, mldSnoopPortNumJoinSuccess=mldSnoopPortNumJoinSuccess, xstInstancePortPortRole=xstInstancePortPortRole, diffServIpv6AceDestPortOp=diffServIpv6AceDestPortOp, mcastStormEntry=mcastStormEntry, portHistPreviousInOctets=portHistPreviousInOctets, lbdTrap=lbdTrap, igmpSnoopCurrentVlanProxyAddress=igmpSnoopCurrentVlanProxyAddress, igmpSnoopCurrentVlanLastMemQueryCount=igmpSnoopCurrentVlanLastMemQueryCount, timeRangeAbsoluteStatus=timeRangeAbsoluteStatus, swAtcMcastStormTcApplyTrap=swAtcMcastStormTcApplyTrap, mvrProfileTable=mvrProfileTable, swCpuUtiFallingNotification=swCpuUtiFallingNotification, lbdMgt=lbdMgt, mldSnoopProfileRangeProfileId=mldSnoopProfileRangeProfileId, dhcpOption82EncodeFormat=dhcpOption82EncodeFormat, voiceVlanAgingTime=voiceVlanAgingTime, mstInstanceEditVlansMap=mstInstanceEditVlansMap, igmpSnoopStatus=igmpSnoopStatus, mstInstanceOperEntry=mstInstanceOperEntry, taskCpuCurrentUti=taskCpuCurrentUti, timeRangeAbsoluteEndDays=timeRangeAbsoluteEndDays, igmpSnoopQueryDropEntry=igmpSnoopQueryDropEntry, fileAutoDownloadResultUnitID=fileAutoDownloadResultUnitID, atcMcastStormCurrentTrafficRate=atcMcastStormCurrentTrafficRate, radiusServerGlobalRetransmit=radiusServerGlobalRetransmit, networkAccessPortLinkDetectionTrap=networkAccessPortLinkDetectionTrap, portTransceiverThresholdInfoTxPowerLowAlarm=portTransceiverThresholdInfoTxPowerLowAlarm, diffServAclType=diffServAclType, mldSnoopVlanNumJoinSuccess=mldSnoopVlanNumJoinSuccess, ipSrcGuardConfigEntry=ipSrcGuardConfigEntry, mvrDomainGroupStaticPorts=mvrDomainGroupStaticPorts, igmpSnoopCurrentVlanImmediateLeave=igmpSnoopCurrentVlanImmediateLeave, dhcpcInterfaceTable=dhcpcInterfaceTable, portCapabilities=portCapabilities, radiusServerIndex=radiusServerIndex, telnetPortNumber=telnetPortNumber, dhcpcIfVendorClassId=dhcpcIfVendorClassId, igmpSnoopQueryDropPortIndex=igmpSnoopQueryDropPortIndex, portOpticalMonitoringInfoTemperature=portOpticalMonitoringInfoTemperature, mvrPortStatisticsNumSpecificQueryReceived=mvrPortStatisticsNumSpecificQueryReceived, ipDhcpRestart=ipDhcpRestart, voiceVlanOuiDescription=voiceVlanOuiDescription, igmpSnoopVlanNumGeneralQueryRecevied=igmpSnoopVlanNumGeneralQueryRecevied, sysTimeMgt=sysTimeMgt, mldSnoopPortIndex=mldSnoopPortIndex, dhcpSnoopVlanConfigTable=dhcpSnoopVlanConfigTable, dhcpSnoopInformationOptionEnable=dhcpSnoopInformationOptionEnable, portSecurityMgt=portSecurityMgt, smtpSeverityLevel=smtpSeverityLevel, ntpAuthKeyWord=ntpAuthKeyWord, dhcpcIfVendorClassIdMode=dhcpcIfVendorClassIdMode, mldSnoopRouterStaticEntry=mldSnoopRouterStaticEntry, atcBcastStormAlarmClearThreshold=atcBcastStormAlarmClearThreshold, dot1agCfmMepUnknownTrap=dot1agCfmMepUnknownTrap, ipFilterTelnetInetEntry=ipFilterTelnetInetEntry, dhcpSnoopPortIfIndex=dhcpSnoopPortIfIndex, mldSnoopProfileRangeAction=mldSnoopProfileRangeAction, igmpSnoopVlanNumSepcificQuerySend=igmpSnoopVlanNumSepcificQuerySend, cosMgt=cosMgt, mvrVlanStatisticsNumLeavesSend=mvrVlanStatisticsNumLeavesSend, userAuthStatus=userAuthStatus, networkAccessMacFilterWithMaskMacAddress=networkAccessMacFilterWithMaskMacAddress, xstInstancePortEnable=xstInstancePortEnable, mldSnoopThrottlePortTable=mldSnoopThrottlePortTable, portHistCurrentIndex=portHistCurrentIndex, daiTotalDhcpSnoopingDroppedPkts=daiTotalDhcpSnoopingDroppedPkts, swUnitIndex=swUnitIndex, aaaRadiusGroupEntry=aaaRadiusGroupEntry, swModelNumber=swModelNumber, mldSnoopMulticastStaticStatus=mldSnoopMulticastStaticStatus, mldSnoopProfileCtlEndInetAddress=mldSnoopProfileCtlEndInetAddress, cableDiagResultStatusPairD=cableDiagResultStatusPairD, sshDsaHostKey4=sshDsaHostKey4, aaaRadiusGroupServerBitMap=aaaRadiusGroupServerBitMap, unknownUcastStormPktRate=unknownUcastStormPktRate, diffServMacAceTable=diffServMacAceTable, sshDsaHostKeySHA1FingerPrint=sshDsaHostKeySHA1FingerPrint, taskCpuName=taskCpuName, staLoopbackDetectionPortRelease=staLoopbackDetectionPortRelease, mldSnoopProfileRangeInetAddressType=mldSnoopProfileRangeInetAddressType, sshUserRsaKey7=sshUserRsaKey7, dot1xAuthConfigExtPortIntrusionAction=dot1xAuthConfigExtPortIntrusionAction, diffServTcamTable=diffServTcamTable, cpuGuardMaxThreshold=cpuGuardMaxThreshold, pingPacketLossRate=pingPacketLossRate, dhcpSnoopBindingsAddrType=dhcpSnoopBindingsAddrType, lbdPortTable=lbdPortTable, sysResourceMgt=sysResourceMgt, pethPsePortTimeRangeStatus=pethPsePortTimeRangeStatus, privateVlanMgt=privateVlanMgt, igmpSnoopFilterStatus=igmpSnoopFilterStatus, radiusMgt=radiusMgt, fileInfoIsStartUp=fileInfoIsStartUp, swAtcBcastStormAlarmClearTrap=swAtcBcastStormAlarmClearTrap, dhcpSnoopVlan=dhcpSnoopVlan, fileCopyServerPassword=fileCopyServerPassword, staPortSystemStatus=staPortSystemStatus, diffServClassMapAttachCtlElementIndex=diffServClassMapAttachCtlElementIndex, igmpSnoopMulticastGroupEntry=igmpSnoopMulticastGroupEntry, diffServArpAceSourceIpAddrBitmask=diffServArpAceSourceIpAddrBitmask, diffServAccessGroupTable=diffServAccessGroupTable, daiGlobal=daiGlobal, aaaAccExecMethodName=aaaAccExecMethodName, daiPortIfIndex=daiPortIfIndex, consoleDataBits=consoleDataBits, portTransceiverThresholdInfoVccLowWarn=portTransceiverThresholdInfoVccLowWarn, ipFilterAllClientCtl=ipFilterAllClientCtl, mvrPortStatisticsPortIndex=mvrPortStatisticsPortIndex, subnetVlanMask=subnetVlanMask, privateVlanPromPortTable=privateVlanPromPortTable, diffServIpAceControlCode=diffServIpAceControlCode, dosSmurfStatus=dosSmurfStatus, sshDsaHostKey3=sshDsaHostKey3, xstInstanceCfgHoldTime=xstInstanceCfgHoldTime, remoteLogServerStatus=remoteLogServerStatus, portHistPreviousOutBroadcastPkts=portHistPreviousOutBroadcastPkts, diffServIpv6AceEntry=diffServIpv6AceEntry, igmpSnoopProfileStatus=igmpSnoopProfileStatus, daiLogTable=daiLogTable, cableDiagCtlAction=cableDiagCtlAction, timeRangeAbsoluteEndHours=timeRangeAbsoluteEndHours, swChassisServiceTag=swChassisServiceTag)
mibBuilder.exportSymbols("ECS2100-28PP-MIB", daiVlanIndex=daiVlanIndex, pingHistoryEntry=pingHistoryEntry, igmpSnoopProfileCtlId=igmpSnoopProfileCtlId, ipFilterAllClientCtlInetAddressEnd=ipFilterAllClientCtlInetAddressEnd, mldSnoopPortNumGeneralQueryRecevied=mldSnoopPortNumGeneralQueryRecevied, diffServActionStatus=diffServActionStatus, portTransceiverThresholdInfoVccLowAlarm=portTransceiverThresholdInfoVccLowAlarm, ipSrcGuardPortIfIndex=ipSrcGuardPortIfIndex, portTransceiverThresholdInfoRxPowerLowWarn=portTransceiverThresholdInfoRxPowerLowWarn, ipFilterTelnetInetAddressEnd=ipFilterTelnetInetAddressEnd, mvrPortStatisticsDomainId=mvrPortStatisticsDomainId, sshUserRsaKey6=sshUserRsaKey6, trunkBalanceMode=trunkBalanceMode, mcastStormStatus=mcastStormStatus, portTransceiverThresholdInfoTxBiasCurrentLowWarn=portTransceiverThresholdInfoTxBiasCurrentLowWarn, trapSfpThresholdAlarmWarnType=trapSfpThresholdAlarmWarnType, networkAccessClearMacAddressMgt=networkAccessClearMacAddressMgt, igmpSnoopCurrentVlanQueryRespIntvl=igmpSnoopCurrentVlanQueryRespIntvl, daiPortTable=daiPortTable, diffServIpAceDscp=diffServIpAceDscp, ipSrcGuardAclBindingStatus=ipSrcGuardAclBindingStatus, diffServAccessGroupTimeRangeName=diffServAccessGroupTimeRangeName, igmpSnoopCurrentVlanImmediateLeaveByHostIp=igmpSnoopCurrentVlanImmediateLeaveByHostIp, diffServAclStatus=diffServAclStatus, aaaRadiusGroupName=aaaRadiusGroupName, igmpSnoopPortNumJoinSend=igmpSnoopPortNumJoinSend, diffServClassMapElementIndexList=diffServClassMapElementIndexList, cpuStatAvgUti=cpuStatAvgUti, mldSnoopRouterStaticPorts=mldSnoopRouterStaticPorts, diffServActionEntry=diffServActionEntry, timeRangeAbsoluteEntry=timeRangeAbsoluteEntry, mldSnoopProfileId=mldSnoopProfileId, dhcpSnoopBindingsMacAddress=dhcpSnoopBindingsMacAddress, mstName=mstName, lbdRecoveryTrap=lbdRecoveryTrap, xstInstanceCfgIndex=xstInstanceCfgIndex, sshDsaHostKey7=sshDsaHostKey7, mldSnoopFilterPortTable=mldSnoopFilterPortTable, xstInstanceCfgPriority=xstInstanceCfgPriority, swProdUrl=swProdUrl, userauthDeleteUserTrap=userauthDeleteUserTrap, swBootRomVer=swBootRomVer, igmpSnoopVlanNumGroups=igmpSnoopVlanNumGroups, mvrDomainClearDynamicGroups=mvrDomainClearDynamicGroups, portUtilTable=portUtilTable, mldSnoopCurrentVlanTable=mldSnoopCurrentVlanTable, igmpSnoopRouterStaticTable=igmpSnoopRouterStaticTable, diffServMacAceEtherTypeBitmask=diffServMacAceEtherTypeBitmask, aaaCommandPrivilegesTable=aaaCommandPrivilegesTable, switchInfoEntry=switchInfoEntry, timeRangeAbsoluteStartMonths=timeRangeAbsoluteStartMonths, portOutOctetRate=portOutOctetRate, xstInstanceCfgTopChanges=xstInstanceCfgTopChanges, staLoopbackDetectionPortIfIndex=staLoopbackDetectionPortIfIndex, igmpSnoopPortIndex=igmpSnoopPortIndex, aaaCommandPrivilegesInterfaceIndex=aaaCommandPrivilegesInterfaceIndex, dhcpOption82=dhcpOption82, vlanStaticExtRspanStatus=vlanStaticExtRspanStatus, consoleBaudRate=consoleBaudRate, portHistCurrentOutOctets=portHistCurrentOutOctets, rlPortOutputStatus=rlPortOutputStatus, igmpSnoopFilterPortIndex=igmpSnoopFilterPortIndex, portHistPreviousOutErrors=portHistPreviousOutErrors, staLoopbackDetectionPortEntry=staLoopbackDetectionPortEntry, diffServClassMapName=diffServClassMapName, portHistCurrentInMulticastPkts=portHistCurrentInMulticastPkts, fileCopyMgt=fileCopyMgt, sshUserDsaKey6=sshUserDsaKey6, lbdPortAdminState=lbdPortAdminState, mvrVlanStatisticsNumGeneralQueryRecevied=mvrVlanStatisticsNumGeneralQueryRecevied, diffServTcamTotal=diffServTcamTotal, ipFilterHttpInetStatus=ipFilterHttpInetStatus, swIndivPowerStatus=swIndivPowerStatus, loginTrap=loginTrap, portMediaInfoDateCode=portMediaInfoDateCode, daiTotalDestMacDroppedPkts=daiTotalDestMacDroppedPkts, portHistCurrentInUnknownProtos=portHistCurrentInUnknownProtos, swMicrocodeVer=swMicrocodeVer, xstInstanceCfgTable=xstInstanceCfgTable, portOpticalMonitoringInfoTable=portOpticalMonitoringInfoTable, atcMcastStormAlarmFireThreshold=atcMcastStormAlarmFireThreshold, portOpticalMonitoringInfoEntry=portOpticalMonitoringInfoEntry, networkAccessMacAddressInetAddressType=networkAccessMacAddressInetAddressType, dhcpSnoopBindingsIpAddress=dhcpSnoopBindingsIpAddress, ipSrcGuardAclBindingIpAddress=ipSrcGuardAclBindingIpAddress, tacacsMgt=tacacsMgt, mvrPortStatisticsNumJoins=mvrPortStatisticsNumJoins, portAutonegotiation=portAutonegotiation, lineMgt=lineMgt, dosTcpXmasScan=dosTcpXmasScan, pethPsePortExtDllPseAllocatedPowerValue=pethPsePortExtDllPseAllocatedPowerValue, diffServIpAcePrec=diffServIpAcePrec, vlanStaticEntry=vlanStaticEntry, privateVlanSessionStatus=privateVlanSessionStatus, diffServPolicyMapAttachCtlElementIndex=diffServPolicyMapAttachCtlElementIndex, privateVlanUplinkToUplink=privateVlanUplinkToUplink, diffServMeterRate=diffServMeterRate, portTransceiverThresholdInfoTxBiasCurrentHighAlarm=portTransceiverThresholdInfoTxBiasCurrentHighAlarm, consoleParity=consoleParity, mvrVlanStatisticsNumInvalidReport=mvrVlanStatisticsNumInvalidReport, macVlanMacMask=macVlanMacMask, sysLogHistoryRamLevel=sysLogHistoryRamLevel, ipFilterTelnetInetStatus=ipFilterTelnetInetStatus, arpCacheDeleteAll=arpCacheDeleteAll, portUpTime=portUpTime, aaaMethodPrivilegeLevel=aaaMethodPrivilegeLevel, portHistPreviousInUcastPkts=portHistPreviousInUcastPkts, voiceVlanPortRuleLldp=voiceVlanPortRuleLldp, dhcpRelayServerInetAddrEntry=dhcpRelayServerInetAddrEntry, pethPseMainExtDllPowerSource=pethPseMainExtDllPowerSource, igmpSnoopMulticastStaticTable=igmpSnoopMulticastStaticTable, swLoopbackDetectionTrap=swLoopbackDetectionTrap, portShutdownReason=portShutdownReason, xstInstancePortForwardTransitions=xstInstancePortForwardTransitions, mirrorSourcePort=mirrorSourcePort, igmpSnoopMulticastGroupPorts=igmpSnoopMulticastGroupPorts, voiceVlanPortRemainAge=voiceVlanPortRemainAge, unknownUcastStormEntry=unknownUcastStormEntry, aaaTacacsPlusGroupIndex=aaaTacacsPlusGroupIndex, subnetVlanStatus=subnetVlanStatus, macVlanStatus=macVlanStatus, portHistControlInterval=portHistControlInterval, dot1agCfmMaUpTrap=dot1agCfmMaUpTrap, cpuStatMaxUti=cpuStatMaxUti, portHistPreviousOutUcastPkts=portHistPreviousOutUcastPkts, swAtcBcastStormTcApplyTrap=swAtcBcastStormTcApplyTrap, diffServIpAceDestPortOp=diffServIpAceDestPortOp, mvrDomainGroupCurrentReceiverVlan=mvrDomainGroupCurrentReceiverVlan, xstInstancePortTable=xstInstancePortTable, mvrDomainVlanId=mvrDomainVlanId, subnetVlanTable=subnetVlanTable, rlPortLimitInKiloResolution=rlPortLimitInKiloResolution, portOpticalMonitoringInfoRxPower=portOpticalMonitoringInfoRxPower, privateVlanSessionEntry=privateVlanSessionEntry, sshConnMajorVersion=sshConnMajorVersion, privateVlanPrivatePortIfIndex=privateVlanPrivatePortIfIndex, mvrVlanStatisticsNumJoinSend=mvrVlanStatisticsNumJoinSend, portHistCurrentInUtilization=portHistCurrentInUtilization, ipSrcGuardConfigTable=ipSrcGuardConfigTable, timeRangeIndex=timeRangeIndex, mvrProfileAction=mvrProfileAction, igmpSnoopCurrentVlanEntry=igmpSnoopCurrentVlanEntry, daiLogDestIpAddress=daiLogDestIpAddress, memoryAllocated=memoryAllocated, sshUserRsaKey4=sshUserRsaKey4, timeRangeTable=timeRangeTable, voiceVlanPortSecurity=voiceVlanPortSecurity, daiGlobalIpAddrValidation=daiGlobalIpAddrValidation, portType=portType, mvrDomainGroupStaticTable=mvrDomainGroupStaticTable, dhcpRelay=dhcpRelay, mldSnoopProxyReporting=mldSnoopProxyReporting, portMediaInfoPartNumber=portMediaInfoPartNumber, mstInstanceOperTable=mstInstanceOperTable, igmpSnoopProfileCtlInetAddressType=igmpSnoopProfileCtlInetAddressType, fileInfoMgt=fileInfoMgt, dosTcpNullScan=dosTcpNullScan, securityMgt=securityMgt, rateLimitMgt=rateLimitMgt, diffServPolicyMapName=diffServPolicyMapName, aaaAccountStatus=aaaAccountStatus, pingIpAddress=pingIpAddress, prioIfClassificationModeTable=prioIfClassificationModeTable, diffServMacAceVidOp=diffServMacAceVidOp, smtpServerIpTable=smtpServerIpTable, igmpSnoopProfileCtlStartInetAddress=igmpSnoopProfileCtlStartInetAddress, mldSnoopThrottlePortRunningStatus=mldSnoopThrottlePortRunningStatus, dhcpOption82RelayServerAddrEntry=dhcpOption82RelayServerAddrEntry, sshServerMinorVersion=sshServerMinorVersion, ipSrcGuardAclEntry=ipSrcGuardAclEntry, mvrPortStatisticsClearStatistics=mvrPortStatisticsClearStatistics, privateVlanStatus=privateVlanStatus, sshDisconnect=sshDisconnect, mldSnoopProfileStatus=mldSnoopProfileStatus, lacpPortTable=lacpPortTable, netConfigStatus=netConfigStatus, subnetVlanId=subnetVlanId, diffServPolicyMapAttachCtlIndex=diffServPolicyMapAttachCtlIndex, prioSchedModePortTable=prioSchedModePortTable, igmpSnoopProfileAction=igmpSnoopProfileAction, prioCosToDscpEntry=prioCosToDscpEntry, amtrMgt=amtrMgt, staPortEntry=staPortEntry, trapAutoUpgradeNewVer=trapAutoUpgradeNewVer, mvrProfileGroupCtlEntry=mvrProfileGroupCtlEntry, swSerialNumber=swSerialNumber, vlanPortEntry=vlanPortEntry, igmpSnoopMulticastGroupVlanIndex=igmpSnoopMulticastGroupVlanIndex, igmpSnoopVlanNumGeneralQuerySend=igmpSnoopVlanNumGeneralQuerySend, ipFilterHttpInetAddressType=ipFilterHttpInetAddressType, diffServIpAceDestIpAddr=diffServIpAceDestIpAddr, lbdGlobal=lbdGlobal, portTransceiverThresholdInfoRxPowerHighAlarm=portTransceiverThresholdInfoRxPowerHighAlarm, sshUserRsaKey8=sshUserRsaKey8, portHistControlStatus=portHistControlStatus, lbdPortOperState=lbdPortOperState, portTransceiverThresholdInfoTemperatureHighAlarm=portTransceiverThresholdInfoTemperatureHighAlarm, portHistPreviousInBroadcastPkts=portHistPreviousInBroadcastPkts, igmpSnoopMrouterForwardMode=igmpSnoopMrouterForwardMode, mldSnoopMulticastStaticVlanIndex=mldSnoopMulticastStaticVlanIndex, diffServMgt=diffServMgt, ecs2100_28p=ecs2100_28p, diffServAclHwCounterIfIndex=diffServAclHwCounterIfIndex, mirrorType=mirrorType, rspanSessionId=rspanSessionId, trunkPorts=trunkPorts, mldSnoopPortNumJoinSend=mldSnoopPortNumJoinSend, portMediaInfoBaudRate=portMediaInfoBaudRate, diffServIpAceSourcePortOp=diffServIpAceSourcePortOp, mvrDomainGroupCurrentTable=mvrDomainGroupCurrentTable, dot1xAuthConfigExtMultiHostMaxCnt=dot1xAuthConfigExtMultiHostMaxCnt, daiVlanTable=daiVlanTable, ecs2100_10p=ecs2100_10p, igmpSnoopMulticastStaticIpAddress=igmpSnoopMulticastStaticIpAddress, userAuthMethod=userAuthMethod, diffServPolicyMapTable=diffServPolicyMapTable, ipMgt=ipMgt, mldSnoopPortNumInvalidReport=mldSnoopPortNumInvalidReport, networkAccessClearMacAddressAttribute=networkAccessClearMacAddressAttribute, portHist=portHist, portHistCurrentOutBroadcastPkts=portHistCurrentOutBroadcastPkts, diffServAclAceIndexList=diffServAclAceIndexList, tacacsPlusServerIndex=tacacsPlusServerIndex, sshUserDsaKey1=sshUserDsaKey1, mldSnoopVlanNumJoins=mldSnoopVlanNumJoins, igmpSnoopVersion=igmpSnoopVersion, portHistControlBucketsGranted=portHistControlBucketsGranted, daiTotalIpAddrDroppedPkts=daiTotalIpAddrDroppedPkts, sshRsaHostKey5=sshRsaHostKey5, portMediaInfoVendorOUI=portMediaInfoVendorOUI, cpuGuardCurrentThreshold=cpuGuardCurrentThreshold, mldSnoopPortEntry=mldSnoopPortEntry, diffServIpv6AceType=diffServIpv6AceType, aaaMethodIndex=aaaMethodIndex, igmpSnoopPortNumJoins=igmpSnoopPortNumJoins, xstInstancePortDesignatedCost=xstInstancePortDesignatedCost, pethPseMainExtTable=pethPseMainExtTable, diffServAclIndex=diffServAclIndex, networkAccessMacFilterWithMaskStatus=networkAccessMacFilterWithMaskStatus, prioDscpToDscpEntry=prioDscpToDscpEntry, dhcpcInterfaceEntry=dhcpcInterfaceEntry, staPortProtocolMigration=staPortProtocolMigration, bcastStormIfIndex=bcastStormIfIndex, trapIpFilterRejectMode=trapIpFilterRejectMode, remoteLogMgt=remoteLogMgt, networkAccessMacAddressAttribute=networkAccessMacAddressAttribute, stpBpduGuardPortShutdownTrap=stpBpduGuardPortShutdownTrap, mldSnoopMulticastStaticTable=mldSnoopMulticastStaticTable, diffServPolicyMapAttachCtl=diffServPolicyMapAttachCtl, macVlanTable=macVlanTable, diffServArpAclName=diffServArpAclName, portMediaInfoFiberType=portMediaInfoFiberType, igmpSnoopVlanNumSpecificQueryReceived=igmpSnoopVlanNumSpecificQueryReceived, privateVlanPromPortEntry=privateVlanPromPortEntry)
mibBuilder.exportSymbols("ECS2100-28PP-MIB", mldSnoopRouterPortExpireTime=mldSnoopRouterPortExpireTime, dhcpSnoopBindingsTableCtlAction=dhcpSnoopBindingsTableCtlAction, mvrProfileGroupCtlId=mvrProfileGroupCtlId, igmpSnoopFilterPortEntry=igmpSnoopFilterPortEntry, mldSnoopVlanNumJoinSend=mldSnoopVlanNumJoinSend, diffServArpAceDestIpAddr=diffServArpAceDestIpAddr, bcastStormMgt=bcastStormMgt, xstInstanceCfgRootPort=xstInstanceCfgRootPort, portUtilIfIndex=portUtilIfIndex, smtpDestEMail=smtpDestEMail, macNotificationTrap=macNotificationTrap, daiPortRateLimit=daiPortRateLimit, pingPacketSize=pingPacketSize, igmpSnoopMulticastStaticEntry=igmpSnoopMulticastStaticEntry, igmpSnoopRouterCurrentStatus=igmpSnoopRouterCurrentStatus, igmpSnoopProfileRangeStartInetAddress=igmpSnoopProfileRangeStartInetAddress, amtrMacAddrAgingStatus=amtrMacAddrAgingStatus, mldSnoopVlanTable=mldSnoopVlanTable, portSpeedDpxCfg=portSpeedDpxCfg, diffServMacAceMinVid=diffServMacAceMinVid, sshConnInfoTable=sshConnInfoTable, mldSnoopProfileRangeEndInetAddress=mldSnoopProfileRangeEndInetAddress, mldSnoopPortTable=mldSnoopPortTable, atcMcastStormAlarmClearThreshold=atcMcastStormAlarmClearThreshold, diffServPolicyMapElementActionIndex=diffServPolicyMapElementActionIndex, diffServIpAceStatus=diffServIpAceStatus, prioWrrPortEntry=prioWrrPortEntry, powerSavingTable=powerSavingTable, xstInstanceCfgDesignatedRoot=xstInstanceCfgDesignatedRoot, diffServArpAceIndex=diffServArpAceIndex, bcastStormTable=bcastStormTable, dhcpRelayServerInetAddressType=dhcpRelayServerInetAddressType, portIndex=portIndex, ipFilterSnmpInetStatus=ipFilterSnmpInetStatus, diffServAccessGroupIfIndex=diffServAccessGroupIfIndex, vtyPasswordThreshold=vtyPasswordThreshold, daiGlobalSrcMacValidation=daiGlobalSrcMacValidation, dhcpSnoopBindingsEntry=dhcpSnoopBindingsEntry, aaaAccountTable=aaaAccountTable, portHistPreviousSampleIndex=portHistPreviousSampleIndex, vlanIndex=vlanIndex, daiPortTrustStatus=daiPortTrustStatus, aaaCommandPrivilegesLevel=aaaCommandPrivilegesLevel, igmpSnoopThrottlePortMaxGroups=igmpSnoopThrottlePortMaxGroups, aaaTacacsPlusGroupServerBitMap=aaaTacacsPlusGroupServerBitMap, tacacsPlusServerStatus=tacacsPlusServerStatus, dhcpcOptions=dhcpcOptions, vlanPortIndex=vlanPortIndex, fileAutoDownloadResultEntry=fileAutoDownloadResultEntry, sntpServerInetAddress=sntpServerInetAddress, xstInstancePortEntry=xstInstancePortEntry, mldSnoopThrottlePortAction=mldSnoopThrottlePortAction, mvrProfileCtlTable=mvrProfileCtlTable, igmpSnoopVlanNumJoinSend=igmpSnoopVlanNumJoinSend, diffServPolicyMapPortPolicyMapIndex=diffServPolicyMapPortPolicyMapIndex, aaaAccountProtocol=aaaAccountProtocol)
