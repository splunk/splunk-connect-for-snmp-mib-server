#
# PySNMP MIB module JUNIPER-DFC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-DFC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:48:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
jnxDfcNotifications, jnxMibs = mibBuilder.importSymbols("JUNIPER-SMI", "jnxDfcNotifications", "jnxMibs")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, TimeTicks, Counter32, NotificationType, ModuleIdentity, Unsigned32, IpAddress, MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "Counter32", "NotificationType", "ModuleIdentity", "Unsigned32", "IpAddress", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "ObjectIdentity", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxDfc = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 33))
if mibBuilder.loadTexts: jnxDfc.setLastUpdated('200507082153Z')
if mibBuilder.loadTexts: jnxDfc.setOrganization('Juniper Networks, Inc.')
jnxDfcCSTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1), )
if mibBuilder.loadTexts: jnxDfcCSTable.setStatus('current')
jnxDfcCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1), ).setIndexNames((0, "JUNIPER-DFC-MIB", "jnxDfcGrpName"), (0, "JUNIPER-DFC-MIB", "jnxDfcCSId"))
if mibBuilder.loadTexts: jnxDfcCSEntry.setStatus('current')
jnxDfcGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: jnxDfcGrpName.setStatus('current')
jnxDfcCSId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48)))
if mibBuilder.loadTexts: jnxDfcCSId.setStatus('current')
jnxDfcCSControlProtocolAddRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSControlProtocolAddRequests.setStatus('current')
jnxDfcCSCriteriaAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaAdded.setStatus('current')
jnxDfcCSCriteriaAdditionFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaAdditionFailed.setStatus('current')
jnxDfcCSControlProtocolDeleteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSControlProtocolDeleteRequests.setStatus('current')
jnxDfcCSCriteriaDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaDeleted.setStatus('current')
jnxDfcCSCriteriaDeletionFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaDeletionFailed.setStatus('current')
jnxDfcCSCriteriaDeletedTimeoutIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaDeletedTimeoutIdle.setStatus('current')
jnxDfcCSCriteriaDeletedTimeoutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaDeletedTimeoutTotal.setStatus('current')
jnxDfcCSCriteriaDeletedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaDeletedPackets.setStatus('current')
jnxDfcCSCriteriaDeletedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaDeletedBytes.setStatus('current')
jnxDfcCSControlProtocolRefreshRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSControlProtocolRefreshRequests.setStatus('current')
jnxDfcCSCriteriaRefreshed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaRefreshed.setStatus('current')
jnxDfcCSCriteriaRefreshFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSCriteriaRefreshFailed.setStatus('current')
jnxDfcCSControlProtocolListRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSControlProtocolListRequests.setStatus('current')
jnxDfcCSListSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSListSuccess.setStatus('current')
jnxDfcCSListFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSListFailed.setStatus('current')
jnxDfcCSControlProtocolNoopRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSControlProtocolNoopRequests.setStatus('current')
jnxDfcCSNoopSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSNoopSuccess.setStatus('current')
jnxDfcCSNoopFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSNoopFailed.setStatus('current')
jnxDfcCSDynamicCriteriaActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSDynamicCriteriaActive.setStatus('current')
jnxDfcCSStaticCriteriaActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSStaticCriteriaActive.setStatus('current')
jnxDfcCSBadRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSBadRequest.setStatus('current')
jnxDfcCSResponseSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSResponseSuccessful.setStatus('current')
jnxDfcCSResponseImproperCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSResponseImproperCriteria.setStatus('current')
jnxDfcCSResponseUnknownContentDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSResponseUnknownContentDest.setStatus('current')
jnxDfcCSResponseUnknownCriteriaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSResponseUnknownCriteriaId.setStatus('current')
jnxDfcCSResponseImproperTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSResponseImproperTimeout.setStatus('current')
jnxDfcCSResponseInvalidAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSResponseInvalidAuthentication.setStatus('current')
jnxDfcCSResponseInvalidSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSResponseInvalidSequenceNumber.setStatus('current')
jnxDfcCSResponseInternalError = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSResponseInternalError.setStatus('current')
jnxDfcCSNotificationRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSNotificationRestart.setStatus('current')
jnxDfcCSNotificationRollover = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSNotificationRollover.setStatus('current')
jnxDfcCSNotificationNoop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSNotificationNoop.setStatus('current')
jnxDfcCSNotificationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSNotificationTimeout.setStatus('current')
jnxDfcCSNotificationCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSNotificationCongestion.setStatus('current')
jnxDfcCSNotificationCongestionDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSNotificationCongestionDelete.setStatus('current')
jnxDfcCSNotificationDuplicatesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSNotificationDuplicatesDropped.setStatus('current')
jnxDfcCSAddRequestRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSAddRequestRate.setStatus('current')
jnxDfcCSAddRequestPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSAddRequestPeakRate.setStatus('current')
jnxDfcCSAggrCriteriaBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSAggrCriteriaBandwidth.setStatus('current')
jnxDfcCSSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 1, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCSSequenceNumber.setStatus('current')
jnxDfcCDTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 33, 2), )
if mibBuilder.loadTexts: jnxDfcCDTable.setStatus('current')
jnxDfcCDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 33, 2, 1), ).setIndexNames((0, "JUNIPER-DFC-MIB", "jnxDfcGrpName"), (0, "JUNIPER-DFC-MIB", "jnxDfcCDId"))
if mibBuilder.loadTexts: jnxDfcCDEntry.setStatus('current')
jnxDfcCDId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48)))
if mibBuilder.loadTexts: jnxDfcCDId.setStatus('current')
jnxDfcCDCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCDCriteria.setStatus('current')
jnxDfcCDByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCDByteRate.setStatus('current')
jnxDfcCDMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCDMatchedPackets.setStatus('current')
jnxDfcCDMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCDMatchedBytes.setStatus('current')
jnxDfcCDCongestionNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 33, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDfcCDCongestionNotification.setStatus('current')
jnxDfcNotifyVars = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3))
if mibBuilder.loadTexts: jnxDfcNotifyVars.setStatus('current')
jnxDfcInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxDfcInterfaceName.setStatus('current')
jnxDfcInputPktRate = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxDfcInputPktRate.setStatus('current')
jnxDfcPpsSoftOverloadLowWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxDfcPpsSoftOverloadLowWatermark.setStatus('current')
jnxDfcPpsSoftOverloadHighWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxDfcPpsSoftOverloadHighWatermark.setStatus('current')
jnxDfcPpsHardOverloadLowWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 5), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxDfcPpsHardOverloadLowWatermark.setStatus('current')
jnxDfcPpsHardOverloadHighWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 6), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxDfcPpsHardOverloadHighWatermark.setStatus('current')
jnxDfcFlowsUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 7), Unsigned32()).setUnits('percent').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxDfcFlowsUsage.setStatus('current')
jnxDfcCriteriaUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 8), Unsigned32()).setUnits('percent').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxDfcCriteriaUsage.setStatus('current')
jnxDfcMemSoftOverloadLowWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 9), Unsigned32()).setUnits('percent').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxDfcMemSoftOverloadLowWatermark.setStatus('current')
jnxDfcMemSoftOverloadHighWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 10), Unsigned32()).setUnits('percent').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxDfcMemSoftOverloadHighWatermark.setStatus('current')
jnxDfcFlowLowWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 11), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxDfcFlowLowWatermark.setStatus('current')
jnxDfcFlowHighWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 12), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxDfcFlowHighWatermark.setStatus('current')
jnxDfcCriteriaLowWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 13), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxDfcCriteriaLowWatermark.setStatus('current')
jnxDfcCriteriaHighWatermark = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 33, 3, 14), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxDfcCriteriaHighWatermark.setStatus('current')
jnxDfcNotificationPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 4, 11, 0))
if mibBuilder.loadTexts: jnxDfcNotificationPrefix.setStatus('current')
jnxDfcSoftPpsThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 11, 0, 1)).setObjects(("JUNIPER-DFC-MIB", "jnxDfcInterfaceName"), ("JUNIPER-DFC-MIB", "jnxDfcInputPktRate"), ("JUNIPER-DFC-MIB", "jnxDfcPpsSoftOverloadLowWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcPpsSoftOverloadHighWatermark"))
if mibBuilder.loadTexts: jnxDfcSoftPpsThresholdExceeded.setStatus('current')
jnxDfcSoftPpsUnderThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 11, 0, 2)).setObjects(("JUNIPER-DFC-MIB", "jnxDfcInterfaceName"), ("JUNIPER-DFC-MIB", "jnxDfcInputPktRate"), ("JUNIPER-DFC-MIB", "jnxDfcPpsSoftOverloadLowWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcPpsSoftOverloadHighWatermark"))
if mibBuilder.loadTexts: jnxDfcSoftPpsUnderThreshold.setStatus('current')
jnxDfcHardPpsThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 11, 0, 3)).setObjects(("JUNIPER-DFC-MIB", "jnxDfcInterfaceName"), ("JUNIPER-DFC-MIB", "jnxDfcInputPktRate"), ("JUNIPER-DFC-MIB", "jnxDfcPpsHardOverloadLowWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcPpsHardOverloadHighWatermark"))
if mibBuilder.loadTexts: jnxDfcHardPpsThresholdExceeded.setStatus('current')
jnxDfcHardPpsUnderThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 11, 0, 4)).setObjects(("JUNIPER-DFC-MIB", "jnxDfcInterfaceName"), ("JUNIPER-DFC-MIB", "jnxDfcInputPktRate"), ("JUNIPER-DFC-MIB", "jnxDfcPpsHardOverloadLowWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcPpsHardOverloadHighWatermark"))
if mibBuilder.loadTexts: jnxDfcHardPpsUnderThreshold.setStatus('current')
jnxDfcSoftMemThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 11, 0, 5)).setObjects(("JUNIPER-DFC-MIB", "jnxDfcInterfaceName"), ("JUNIPER-DFC-MIB", "jnxDfcFlowsUsage"), ("JUNIPER-DFC-MIB", "jnxDfcCriteriaUsage"), ("JUNIPER-DFC-MIB", "jnxDfcMemSoftOverloadLowWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcMemSoftOverloadHighWatermark"))
if mibBuilder.loadTexts: jnxDfcSoftMemThresholdExceeded.setStatus('current')
jnxDfcSoftMemUnderThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 11, 0, 6)).setObjects(("JUNIPER-DFC-MIB", "jnxDfcInterfaceName"), ("JUNIPER-DFC-MIB", "jnxDfcFlowsUsage"), ("JUNIPER-DFC-MIB", "jnxDfcCriteriaUsage"), ("JUNIPER-DFC-MIB", "jnxDfcMemSoftOverloadLowWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcMemSoftOverloadHighWatermark"))
if mibBuilder.loadTexts: jnxDfcSoftMemUnderThreshold.setStatus('current')
jnxDfcHardMemThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 11, 0, 7)).setObjects(("JUNIPER-DFC-MIB", "jnxDfcInterfaceName"), ("JUNIPER-DFC-MIB", "jnxDfcFlowsUsage"), ("JUNIPER-DFC-MIB", "jnxDfcFlowLowWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcFlowHighWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcCriteriaUsage"), ("JUNIPER-DFC-MIB", "jnxDfcCriteriaLowWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcCriteriaHighWatermark"))
if mibBuilder.loadTexts: jnxDfcHardMemThresholdExceeded.setStatus('current')
jnxDfcHardMemUnderThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 11, 0, 8)).setObjects(("JUNIPER-DFC-MIB", "jnxDfcInterfaceName"), ("JUNIPER-DFC-MIB", "jnxDfcFlowsUsage"), ("JUNIPER-DFC-MIB", "jnxDfcFlowLowWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcFlowHighWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcCriteriaUsage"), ("JUNIPER-DFC-MIB", "jnxDfcCriteriaLowWatermark"), ("JUNIPER-DFC-MIB", "jnxDfcCriteriaHighWatermark"))
if mibBuilder.loadTexts: jnxDfcHardMemUnderThreshold.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-DFC-MIB", jnxDfcCSCriteriaRefreshFailed=jnxDfcCSCriteriaRefreshFailed, jnxDfcCDEntry=jnxDfcCDEntry, jnxDfcCSStaticCriteriaActive=jnxDfcCSStaticCriteriaActive, jnxDfcCSCriteriaAdded=jnxDfcCSCriteriaAdded, jnxDfcCSResponseUnknownContentDest=jnxDfcCSResponseUnknownContentDest, jnxDfcCSNotificationCongestion=jnxDfcCSNotificationCongestion, jnxDfcMemSoftOverloadHighWatermark=jnxDfcMemSoftOverloadHighWatermark, jnxDfcCSResponseSuccessful=jnxDfcCSResponseSuccessful, jnxDfcCSBadRequest=jnxDfcCSBadRequest, jnxDfcCSResponseUnknownCriteriaId=jnxDfcCSResponseUnknownCriteriaId, jnxDfcCriteriaHighWatermark=jnxDfcCriteriaHighWatermark, jnxDfcCSControlProtocolListRequests=jnxDfcCSControlProtocolListRequests, jnxDfcCSListSuccess=jnxDfcCSListSuccess, jnxDfcFlowsUsage=jnxDfcFlowsUsage, jnxDfcSoftPpsThresholdExceeded=jnxDfcSoftPpsThresholdExceeded, jnxDfcCDId=jnxDfcCDId, jnxDfcHardMemUnderThreshold=jnxDfcHardMemUnderThreshold, jnxDfcCSTable=jnxDfcCSTable, jnxDfcCSCriteriaDeletedPackets=jnxDfcCSCriteriaDeletedPackets, jnxDfcFlowHighWatermark=jnxDfcFlowHighWatermark, jnxDfcCSCriteriaDeletedTimeoutTotal=jnxDfcCSCriteriaDeletedTimeoutTotal, jnxDfcCSNotificationNoop=jnxDfcCSNotificationNoop, jnxDfcCDCongestionNotification=jnxDfcCDCongestionNotification, jnxDfcNotifyVars=jnxDfcNotifyVars, jnxDfcCSDynamicCriteriaActive=jnxDfcCSDynamicCriteriaActive, jnxDfcInterfaceName=jnxDfcInterfaceName, jnxDfcNotificationPrefix=jnxDfcNotificationPrefix, jnxDfcCSCriteriaDeletedTimeoutIdle=jnxDfcCSCriteriaDeletedTimeoutIdle, jnxDfcCSResponseImproperTimeout=jnxDfcCSResponseImproperTimeout, jnxDfcCSCriteriaDeleted=jnxDfcCSCriteriaDeleted, jnxDfcCSNotificationCongestionDelete=jnxDfcCSNotificationCongestionDelete, jnxDfcCSNoopSuccess=jnxDfcCSNoopSuccess, jnxDfcCSCriteriaDeletionFailed=jnxDfcCSCriteriaDeletionFailed, jnxDfcSoftMemUnderThreshold=jnxDfcSoftMemUnderThreshold, jnxDfcCSControlProtocolDeleteRequests=jnxDfcCSControlProtocolDeleteRequests, jnxDfcCSNotificationTimeout=jnxDfcCSNotificationTimeout, jnxDfcCriteriaLowWatermark=jnxDfcCriteriaLowWatermark, jnxDfcCSNotificationRestart=jnxDfcCSNotificationRestart, jnxDfcCSAggrCriteriaBandwidth=jnxDfcCSAggrCriteriaBandwidth, jnxDfcPpsSoftOverloadHighWatermark=jnxDfcPpsSoftOverloadHighWatermark, jnxDfcCSListFailed=jnxDfcCSListFailed, jnxDfcCSCriteriaAdditionFailed=jnxDfcCSCriteriaAdditionFailed, jnxDfcCSResponseInvalidSequenceNumber=jnxDfcCSResponseInvalidSequenceNumber, jnxDfcCSNotificationDuplicatesDropped=jnxDfcCSNotificationDuplicatesDropped, jnxDfcFlowLowWatermark=jnxDfcFlowLowWatermark, jnxDfcCSResponseImproperCriteria=jnxDfcCSResponseImproperCriteria, jnxDfcCSAddRequestRate=jnxDfcCSAddRequestRate, jnxDfcCSNotificationRollover=jnxDfcCSNotificationRollover, jnxDfcInputPktRate=jnxDfcInputPktRate, jnxDfcMemSoftOverloadLowWatermark=jnxDfcMemSoftOverloadLowWatermark, jnxDfcCDCriteria=jnxDfcCDCriteria, jnxDfcCSResponseInvalidAuthentication=jnxDfcCSResponseInvalidAuthentication, PYSNMP_MODULE_ID=jnxDfc, jnxDfcPpsHardOverloadHighWatermark=jnxDfcPpsHardOverloadHighWatermark, jnxDfcCSSequenceNumber=jnxDfcCSSequenceNumber, jnxDfcCSCriteriaRefreshed=jnxDfcCSCriteriaRefreshed, jnxDfcCSAddRequestPeakRate=jnxDfcCSAddRequestPeakRate, jnxDfcHardPpsThresholdExceeded=jnxDfcHardPpsThresholdExceeded, jnxDfcCSId=jnxDfcCSId, jnxDfcHardPpsUnderThreshold=jnxDfcHardPpsUnderThreshold, jnxDfcCSControlProtocolNoopRequests=jnxDfcCSControlProtocolNoopRequests, jnxDfcCSControlProtocolRefreshRequests=jnxDfcCSControlProtocolRefreshRequests, jnxDfcCDMatchedPackets=jnxDfcCDMatchedPackets, jnxDfcHardMemThresholdExceeded=jnxDfcHardMemThresholdExceeded, jnxDfcGrpName=jnxDfcGrpName, jnxDfcCSNoopFailed=jnxDfcCSNoopFailed, jnxDfcCSCriteriaDeletedBytes=jnxDfcCSCriteriaDeletedBytes, jnxDfcPpsHardOverloadLowWatermark=jnxDfcPpsHardOverloadLowWatermark, jnxDfc=jnxDfc, jnxDfcCDTable=jnxDfcCDTable, jnxDfcCriteriaUsage=jnxDfcCriteriaUsage, jnxDfcCDByteRate=jnxDfcCDByteRate, jnxDfcPpsSoftOverloadLowWatermark=jnxDfcPpsSoftOverloadLowWatermark, jnxDfcCSEntry=jnxDfcCSEntry, jnxDfcCSControlProtocolAddRequests=jnxDfcCSControlProtocolAddRequests, jnxDfcCSResponseInternalError=jnxDfcCSResponseInternalError, jnxDfcSoftMemThresholdExceeded=jnxDfcSoftMemThresholdExceeded, jnxDfcSoftPpsUnderThreshold=jnxDfcSoftPpsUnderThreshold, jnxDfcCDMatchedBytes=jnxDfcCDMatchedBytes)
