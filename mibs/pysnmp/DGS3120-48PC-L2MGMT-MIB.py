#
# PySNMP MIB module DGS3120-48PC-L2MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS3120-48PC-L2MGMT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:30:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
AgentNotifyLevel, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "AgentNotifyLevel")
swPortSecPortIndex, = mibBuilder.importSymbols("PORT-SECURITY-MIB", "swPortSecPortIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Integer32, iso, MibIdentifier, TimeTicks, Gauge32, ObjectIdentity, Unsigned32, Counter32, Counter64, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Integer32", "iso", "MibIdentifier", "TimeTicks", "Gauge32", "ObjectIdentity", "Unsigned32", "Counter32", "Counter64", "Bits", "IpAddress")
RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
dlink_Dgs3120Proj_Dgs3120_48PC, = mibBuilder.importSymbols("SWDGS3120PRIMGMT-MIB", "dlink-Dgs3120Proj-Dgs3120-48PC")
swL2MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2))
if mibBuilder.loadTexts: swL2MgmtMIB.setLastUpdated('1003031006Z')
if mibBuilder.loadTexts: swL2MgmtMIB.setOrganization('D-Link Corp.')
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

swL2DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1))
swL2VLANMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2))
swL2PortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3))
swL2TrunkMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9))
swL2MirrorMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 10))
swL2IGMPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 11))
swL2TrafficSegMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 14))
swL2MulticastFilterMode = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 17))
swL2DhcpLocalRelayMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 24))
swL2MgmtMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 100))
class IANAifMauAutoNegCapBits(TextualConvention, Bits):
    reference = '[IEEE802.3], Section 30.6.1.1.5'
    status = 'current'
    namedValues = NamedValues(("bOther", 0), ("b10baseT", 1), ("b10baseTFD", 2), ("b100baseT4", 3), ("b100baseTX", 4), ("b100baseTXFD", 5), ("b100baseT2", 6), ("b100baseT2FD", 7), ("bFdxPause", 8), ("bFdxAPause", 9), ("bFdxSPause", 10), ("bFdxBPause", 11), ("b1000baseX", 12), ("b1000baseXFD", 13), ("b1000baseT", 14), ("b1000baseTFD", 15))

swL2DevInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 1))
swDevInfoTotalNumOfPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setStatus('current')
swDevInfoNumOfPortInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoNumOfPortInUse.setStatus('current')
swL2DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2))
swL2DevCtrlSnmpTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlSnmpTrapState.setStatus('current')
swL2DevCtrlCleanAllStatisticCounter = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setStatus('current')
swL2DevCtrlVlanIdOfFDBTbl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 7), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVlanIdOfFDBTbl.setStatus('current')
swL2MACNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyState.setStatus('current')
swL2MACNotifyHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setStatus('current')
swL2MACNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyInterval.setStatus('current')
swL2DevCtrlAsymVlanState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlAsymVlanState.setStatus('current')
swL2DevCtrlTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 14))
swL2DevCtrlTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setStatus('current')
swL2DevCtrlTelnetTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetTcpPort.setStatus('current')
swL2DevCtrlManagementVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 16), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlManagementVlanId.setStatus('current')
swL2DevCtrlWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 17))
swL2DevCtrlWebState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebState.setStatus('current')
swL2DevCtrlWebTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 17, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebTcpPort.setStatus('current')
swL2DevCtrlLLDPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPState.setStatus('current')
swL2DevCtrlLLDPForwardMessageState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPForwardMessageState.setStatus('current')
swL2DevCtrlIpAutoconfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIpAutoconfig.setStatus('current')
swL2DevCtrlCFM = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 21))
swL2DevCtrlCFMState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCFMState.setStatus('current')
swL2DevCtrlCFMPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 21, 2), )
if mibBuilder.loadTexts: swL2DevCtrlCFMPortTable.setStatus('current')
swL2DevCtrlCFMPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 21, 2, 1), ).setIndexNames((0, "DGS3120-48PC-L2MGMT-MIB", "swL2DevCtrlCFMPortIndex"))
if mibBuilder.loadTexts: swL2DevCtrlCFMPortEntry.setStatus('current')
swL2DevCtrlCFMPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 21, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: swL2DevCtrlCFMPortIndex.setStatus('current')
swL2DevCtrlCFMPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 21, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCFMPortState.setStatus('current')
swL2DevCtrlVLANTrunkState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVLANTrunkState.setStatus('current')
swL2DevAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 3))
swL2DevAlarmNewRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setStatus('current')
swL2DevAlarmTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setStatus('current')
swL2DevAlarmLinkChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setStatus('current')
swL2VlanStaticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 1), )
if mibBuilder.loadTexts: swL2VlanStaticTable.setStatus('current')
swL2VlanStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 1, 1), ).setIndexNames((0, "DGS3120-48PC-L2MGMT-MIB", "swL2VlanIndex"))
if mibBuilder.loadTexts: swL2VlanStaticEntry.setStatus('current')
swL2VlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 1, 1, 1), VlanId())
if mibBuilder.loadTexts: swL2VlanIndex.setStatus('current')
swL2VLANAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VLANAdvertisement.setStatus('current')
swL2PVIDAutoAssignmentState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PVIDAutoAssignmentState.setStatus('current')
swL2VlanPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 3), )
if mibBuilder.loadTexts: swL2VlanPortInfoTable.setStatus('current')
swL2VlanPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 3, 1), ).setIndexNames((0, "DGS3120-48PC-L2MGMT-MIB", "swL2VlanPortInfoPortIndex"), (0, "DGS3120-48PC-L2MGMT-MIB", "swL2VlanPortInfoVid"))
if mibBuilder.loadTexts: swL2VlanPortInfoEntry.setStatus('current')
swL2VlanPortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortInfoPortIndex.setStatus('current')
swL2VlanPortInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 3, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortInfoVid.setStatus('current')
swL2VlanPortInfoPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("untagged", 2), ("tagged", 3), ("dynamic", 4), ("forbidden", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortInfoPortRole.setStatus('current')
swL2SubnetVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 4), )
if mibBuilder.loadTexts: swL2SubnetVLANTable.setStatus('current')
swL2SubnetVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 4, 1), ).setIndexNames((0, "DGS3120-48PC-L2MGMT-MIB", "swL2SubnetVLANIPAddress"), (0, "DGS3120-48PC-L2MGMT-MIB", "swL2SubnetVLANIPMask"))
if mibBuilder.loadTexts: swL2SubnetVLANEntry.setStatus('current')
swL2SubnetVLANIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2SubnetVLANIPAddress.setStatus('current')
swL2SubnetVLANIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2SubnetVLANIPMask.setStatus('current')
swL2SubnetVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 4, 1, 3), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2SubnetVLANID.setStatus('current')
swL2SubnetVLANPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2SubnetVLANPriority.setStatus('current')
swL2SubnetVLANRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2SubnetVLANRowStatus.setStatus('current')
swL2VlanPrecedenceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 5), )
if mibBuilder.loadTexts: swL2VlanPrecedenceTable.setStatus('current')
swL2VlanPrecedenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 5, 1), ).setIndexNames((0, "DGS3120-48PC-L2MGMT-MIB", "swL2VlanPrecedencePortIndex"))
if mibBuilder.loadTexts: swL2VlanPrecedenceEntry.setStatus('current')
swL2VlanPrecedencePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPrecedencePortIndex.setStatus('current')
swL2VlanPrecedenceClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac-based", 1), ("subnet-based", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanPrecedenceClassification.setStatus('current')
swL2NniGvrpBpduAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot1d", 1), ("dot1ad", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2NniGvrpBpduAddress.setStatus('current')
swL2PortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 1), )
if mibBuilder.loadTexts: swL2PortInfoTable.setStatus('current')
swL2PortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 1, 1), ).setIndexNames((0, "DGS3120-48PC-L2MGMT-MIB", "swL2PortInfoPortIndex"), (0, "DGS3120-48PC-L2MGMT-MIB", "swL2PortInfoMediumType"))
if mibBuilder.loadTexts: swL2PortInfoEntry.setStatus('current')
swL2PortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setStatus('current')
swL2PortInfoMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoMediumType.setStatus('current')
swL2PortInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoUnitID.setStatus('current')
swL2PortInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("portType-none", 0), ("portType-100Base-T", 2), ("portType-100Base-X", 3), ("portType-1000Base-T", 4), ("portType-1000Base-X", 5), ("portType-10GBase-R", 6), ("portType-10GBase-CX4", 7), ("portType-SIO", 8), ("portType-module-empty", 9), ("portType-user-last", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoType.setStatus('current')
swL2PortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setStatus('current')
swL2PortInfoNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("link-down", 0), ("full-10Mbps-8023x", 1), ("full-10Mbps-none", 2), ("half-10Mbps-backp", 3), ("half-10Mbps-none", 4), ("full-100Mbps-8023x", 5), ("full-100Mbps-none", 6), ("half-100Mbps-backp", 7), ("half-100Mbps-none", 8), ("full-1Gigabps-8023x", 9), ("full-1Gigabps-none", 10), ("half-1Gigabps-backp", 11), ("half-1Gigabps-none", 12), ("full-10Gigabps-8023x", 13), ("full-10Gigabps-none", 14), ("half-10Gigabps-8023x", 15), ("half-10Gigabps-none", 16), ("empty", 17), ("err-disabled", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setStatus('current')
swL2PortInfoErrorDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("storm", 1), ("stp-lbd", 2), ("ctp-lbd", 3), ("ddm", 4), ("bpdu-protection", 5), ("unknow", 6), ("power-saving", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoErrorDisabled.setStatus('current')
swL2PortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 2), )
if mibBuilder.loadTexts: swL2PortCtrlTable.setStatus('current')
swL2PortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 2, 1), ).setIndexNames((0, "DGS3120-48PC-L2MGMT-MIB", "swL2PortCtrlPortIndex"), (0, "DGS3120-48PC-L2MGMT-MIB", "swL2PortCtrlMediumType"))
if mibBuilder.loadTexts: swL2PortCtrlEntry.setStatus('current')
swL2PortCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setStatus('current')
swL2PortCtrlMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlMediumType.setStatus('current')
swL2PortCtrlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setStatus('current')
swL2PortCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setStatus('current')
swL2PortCtrlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6), ("nway-disabled-1Gigabps-Half", 7), ("nway-disabled-1Gigabps-Full", 8), ("nway-disabled-1Gigabps-Full-master", 9), ("nway-disabled-1Gigabps-Full-slave", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setStatus('current')
swL2PortCtrlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setStatus('current')
swL2PortCtrlLearningState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlLearningState.setStatus('current')
swL2PortCtrlMACNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setStatus('current')
swL2PortCtrlMDIXState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("normal", 2), ("cross", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMDIXState.setStatus('current')
swL2PortCtrlJumboFrame = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrame.setStatus('current')
swL2PortCtrlJumboFrameMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrameMaxSize.setStatus('current')
swL2PortCounterCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 6), )
if mibBuilder.loadTexts: swL2PortCounterCtrlTable.setStatus('current')
swL2PortCounterCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 6, 1), ).setIndexNames((0, "DGS3120-48PC-L2MGMT-MIB", "swL2PortCounterCtrlPortIndex"))
if mibBuilder.loadTexts: swL2PortCounterCtrlEntry.setStatus('current')
swL2PortCounterCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCounterCtrlPortIndex.setStatus('current')
swL2PortCounterClearCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCounterClearCtrl.setStatus('current')
swL2TrunkMaxSupportedEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkMaxSupportedEntries.setStatus('current')
swL2TrunkCurrentNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkCurrentNumEntries.setStatus('current')
swL2TrunkCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9, 3), )
if mibBuilder.loadTexts: swL2TrunkCtrlTable.setStatus('current')
swL2TrunkCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9, 3, 1), ).setIndexNames((0, "DGS3120-48PC-L2MGMT-MIB", "swL2TrunkIndex"))
if mibBuilder.loadTexts: swL2TrunkCtrlEntry.setStatus('current')
swL2TrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkIndex.setStatus('current')
swL2TrunkMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMasterPort.setStatus('current')
swL2TrunkMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9, 3, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMember.setStatus('current')
swL2TrunkFloodingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkFloodingPort.setStatus('current')
swL2TrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("lacp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkType.setStatus('current')
swL2TrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkState.setStatus('current')
swL2TrunkAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("mac-source", 2), ("mac-destination", 3), ("mac-source-dest", 4), ("ip-source", 5), ("ip-destination", 6), ("ip-source-dest", 7), ("l4-source-port", 8), ("l4-destination-port", 9), ("l4-source-dest-port", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setStatus('current')
swL2TrunkLACPPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9, 5), )
if mibBuilder.loadTexts: swL2TrunkLACPPortTable.setStatus('current')
swL2TrunkLACPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9, 5, 1), ).setIndexNames((0, "DGS3120-48PC-L2MGMT-MIB", "swL2TrunkLACPPortIndex"))
if mibBuilder.loadTexts: swL2TrunkLACPPortEntry.setStatus('current')
swL2TrunkLACPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkLACPPortIndex.setStatus('current')
swL2TrunkLACPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkLACPPortState.setStatus('current')
swL2TrunkVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9, 6), )
if mibBuilder.loadTexts: swL2TrunkVLANTable.setStatus('current')
swL2TrunkVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9, 6, 1), ).setIndexNames((0, "DGS3120-48PC-L2MGMT-MIB", "swL2TrunkVLANPort"))
if mibBuilder.loadTexts: swL2TrunkVLANEntry.setStatus('current')
swL2TrunkVLANPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkVLANPort.setStatus('current')
swL2TrunkVLANState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 9, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkVLANState.setStatus('current')
swL2MirrorLogicTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorLogicTargetPort.setStatus('current')
swL2MirrorPortSourceIngress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 10, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceIngress.setStatus('current')
swL2MirrorPortSourceEgress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 10, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceEgress.setStatus('current')
swL2MirrorPortState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortState.setStatus('current')
swL2IGMPAccessAuthTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 11, 13), )
if mibBuilder.loadTexts: swL2IGMPAccessAuthTable.setStatus('current')
swL2IGMPAccessAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 11, 13, 1), ).setIndexNames((0, "DGS3120-48PC-L2MGMT-MIB", "swL2IGMPAccessAuthPort"))
if mibBuilder.loadTexts: swL2IGMPAccessAuthEntry.setStatus('current')
swL2IGMPAccessAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 11, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPAccessAuthPort.setStatus('current')
swL2IGMPAccessAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 11, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPAccessAuthState.setStatus('current')
swL2TrafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 14, 1), )
if mibBuilder.loadTexts: swL2TrafficSegTable.setStatus('current')
swL2TrafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 14, 1, 1), ).setIndexNames((0, "DGS3120-48PC-L2MGMT-MIB", "swL2TrafficSegPort"))
if mibBuilder.loadTexts: swL2TrafficSegEntry.setStatus('current')
swL2TrafficSegPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficSegPort.setStatus('current')
swL2TrafficSegForwardPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 14, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setStatus('current')
swL2MulticastFilterModeVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 17, 1), )
if mibBuilder.loadTexts: swL2MulticastFilterModeVlanTable.setStatus('current')
swL2MulticastFilterModeVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 17, 1, 1), ).setIndexNames((0, "DGS3120-48PC-L2MGMT-MIB", "swL2MulticastFilterVid"))
if mibBuilder.loadTexts: swL2MulticastFilterModeVlanEntry.setStatus('current')
swL2MulticastFilterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterVid.setStatus('current')
swL2MulticastFilterVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward-all-groups", 1), ("forward-unregistered-groups", 2), ("filter-unregistered-groups", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MulticastFilterVlanMode.setStatus('current')
swL2DhcpLocalRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpLocalRelayState.setStatus('current')
swL2DhcpLocalRelayVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 24, 2), )
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANTable.setStatus('current')
swL2DhcpLocalRelayVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 24, 2, 1), ).setIndexNames((0, "DGS3120-48PC-L2MGMT-MIB", "swL2DhcpLocalRelayVLANID"))
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANEntry.setStatus('current')
swL2DhcpLocalRelayVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANID.setStatus('current')
swL2DhcpLocalRelayVLANState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 24, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANState.setStatus('current')
swL2Notify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 100, 1))
swL2NotifyMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 100, 1, 1))
swL2NotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 100, 1, 2))
swL2NotifFirmware = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 100, 1, 2, 0))
swL2macNotificationSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 100, 1, 1, 1), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2macNotificationSeverity.setStatus('current')
swL2PortSecurityViolationSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 100, 1, 1, 2), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityViolationSeverity.setStatus('current')
swL2macNotification = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 100, 1, 2, 0, 1)).setObjects(("DGS3120-48PC-L2MGMT-MIB", "swL2macNotifyInfo"))
if mibBuilder.loadTexts: swL2macNotification.setStatus('current')
swL2PortSecurityViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 100, 1, 2, 0, 2)).setObjects(("PORT-SECURITY-MIB", "swPortSecPortIndex"), ("DGS3120-48PC-L2MGMT-MIB", "swL2PortSecurityViolationMac"))
if mibBuilder.loadTexts: swL2PortSecurityViolationTrap.setStatus('current')
swl2NotificationBidings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 100, 1, 2, 1))
swL2macNotifyInfo = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 100, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2macNotifyInfo.setStatus('current')
swL2PortSecurityViolationMac = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 117, 1, 5, 2, 100, 1, 2, 1, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2PortSecurityViolationMac.setStatus('current')
mibBuilder.exportSymbols("DGS3120-48PC-L2MGMT-MIB", swL2DhcpLocalRelayVLANState=swL2DhcpLocalRelayVLANState, swL2macNotificationSeverity=swL2macNotificationSeverity, swL2NotifyMgmt=swL2NotifyMgmt, swL2VlanPrecedenceClassification=swL2VlanPrecedenceClassification, swL2PortInfoPortIndex=swL2PortInfoPortIndex, swL2DevCtrlWebTcpPort=swL2DevCtrlWebTcpPort, swL2DevCtrlCFMPortState=swL2DevCtrlCFMPortState, swL2IGMPAccessAuthEntry=swL2IGMPAccessAuthEntry, swL2DevCtrlVLANTrunkState=swL2DevCtrlVLANTrunkState, swL2PortInfoUnitID=swL2PortInfoUnitID, swL2DevCtrlWebState=swL2DevCtrlWebState, swL2DevCtrlIpAutoconfig=swL2DevCtrlIpAutoconfig, swL2PortCounterCtrlTable=swL2PortCounterCtrlTable, swL2SubnetVLANTable=swL2SubnetVLANTable, swDevInfoTotalNumOfPort=swDevInfoTotalNumOfPort, swL2MulticastFilterModeVlanEntry=swL2MulticastFilterModeVlanEntry, swL2DhcpLocalRelayVLANID=swL2DhcpLocalRelayVLANID, swL2TrunkCtrlTable=swL2TrunkCtrlTable, swL2VLANMgmt=swL2VLANMgmt, swL2DevCtrlSnmpTrapState=swL2DevCtrlSnmpTrapState, swL2DevCtrlTelnet=swL2DevCtrlTelnet, swL2DhcpLocalRelayMgmt=swL2DhcpLocalRelayMgmt, swL2PortCtrlNwayState=swL2PortCtrlNwayState, swL2PortInfoMediumType=swL2PortInfoMediumType, swL2TrafficSegTable=swL2TrafficSegTable, swL2IGMPMgmt=swL2IGMPMgmt, swL2MgmtMIB=swL2MgmtMIB, swL2MirrorPortSourceEgress=swL2MirrorPortSourceEgress, swL2VlanPrecedenceEntry=swL2VlanPrecedenceEntry, swL2PortCtrlMACNotifyState=swL2PortCtrlMACNotifyState, swL2SubnetVLANID=swL2SubnetVLANID, swL2DhcpLocalRelayVLANTable=swL2DhcpLocalRelayVLANTable, swL2TrunkVLANTable=swL2TrunkVLANTable, swL2DevCtrlAsymVlanState=swL2DevCtrlAsymVlanState, swL2MulticastFilterVlanMode=swL2MulticastFilterVlanMode, swL2DevCtrlWeb=swL2DevCtrlWeb, swDevInfoNumOfPortInUse=swDevInfoNumOfPortInUse, swL2TrunkLACPPortIndex=swL2TrunkLACPPortIndex, swL2IGMPAccessAuthPort=swL2IGMPAccessAuthPort, swL2SubnetVLANIPMask=swL2SubnetVLANIPMask, swL2MACNotifyInterval=swL2MACNotifyInterval, swL2DevAlarmNewRoot=swL2DevAlarmNewRoot, swL2PortCtrlPortIndex=swL2PortCtrlPortIndex, swL2PortCtrlTable=swL2PortCtrlTable, swL2PortInfoEntry=swL2PortInfoEntry, MacAddress=MacAddress, swL2VlanPrecedenceTable=swL2VlanPrecedenceTable, swL2TrafficSegEntry=swL2TrafficSegEntry, swL2TrafficSegPort=swL2TrafficSegPort, swL2DevAlarmTopologyChange=swL2DevAlarmTopologyChange, swL2TrunkVLANEntry=swL2TrunkVLANEntry, swL2VlanStaticEntry=swL2VlanStaticEntry, swL2TrunkVLANState=swL2TrunkVLANState, swL2DevCtrlCFMState=swL2DevCtrlCFMState, swL2VlanIndex=swL2VlanIndex, swL2PortCtrlLearningState=swL2PortCtrlLearningState, swL2DhcpLocalRelayState=swL2DhcpLocalRelayState, swL2DevCtrlCFMPortEntry=swL2DevCtrlCFMPortEntry, swL2SubnetVLANPriority=swL2SubnetVLANPriority, swL2DevCtrlCFMPortIndex=swL2DevCtrlCFMPortIndex, swL2PVIDAutoAssignmentState=swL2PVIDAutoAssignmentState, swL2PortCtrlEntry=swL2PortCtrlEntry, swL2PortCtrlUnitIndex=swL2PortCtrlUnitIndex, swL2PortMgmt=swL2PortMgmt, swL2TrunkVLANPort=swL2TrunkVLANPort, swL2DevCtrlVlanIdOfFDBTbl=swL2DevCtrlVlanIdOfFDBTbl, swL2DevCtrlLLDPState=swL2DevCtrlLLDPState, swL2MulticastFilterMode=swL2MulticastFilterMode, swL2MACNotifyState=swL2MACNotifyState, swL2PortCtrlAdminState=swL2PortCtrlAdminState, swL2SubnetVLANIPAddress=swL2SubnetVLANIPAddress, swL2MirrorPortSourceIngress=swL2MirrorPortSourceIngress, swL2MACNotifyHistorySize=swL2MACNotifyHistorySize, swL2Notify=swL2Notify, swL2PortCounterClearCtrl=swL2PortCounterClearCtrl, swL2DevCtrlCFMPortTable=swL2DevCtrlCFMPortTable, VlanId=VlanId, swL2TrunkMgmt=swL2TrunkMgmt, swL2DevCtrlTelnetTcpPort=swL2DevCtrlTelnetTcpPort, swL2TrunkLACPPortTable=swL2TrunkLACPPortTable, swL2PortCtrlMDIXState=swL2PortCtrlMDIXState, swL2MulticastFilterVid=swL2MulticastFilterVid, swL2DevInfo=swL2DevInfo, swL2DevAlarmLinkChange=swL2DevAlarmLinkChange, swL2PortCounterCtrlPortIndex=swL2PortCounterCtrlPortIndex, swL2TrunkLACPPortEntry=swL2TrunkLACPPortEntry, swL2IGMPAccessAuthState=swL2IGMPAccessAuthState, swL2VlanPortInfoPortRole=swL2VlanPortInfoPortRole, swL2DevCtrlManagementVlanId=swL2DevCtrlManagementVlanId, swL2VlanPortInfoTable=swL2VlanPortInfoTable, swL2PortSecurityViolationSeverity=swL2PortSecurityViolationSeverity, swL2DevCtrlCFM=swL2DevCtrlCFM, swL2MirrorPortState=swL2MirrorPortState, swL2VlanPortInfoVid=swL2VlanPortInfoVid, IANAifMauAutoNegCapBits=IANAifMauAutoNegCapBits, swL2TrunkState=swL2TrunkState, swL2VlanStaticTable=swL2VlanStaticTable, swL2PortSecurityViolationTrap=swL2PortSecurityViolationTrap, swL2PortCtrlJumboFrameMaxSize=swL2PortCtrlJumboFrameMaxSize, swL2TrunkFloodingPort=swL2TrunkFloodingPort, swL2MgmtMIBTraps=swL2MgmtMIBTraps, swL2TrafficSegForwardPorts=swL2TrafficSegForwardPorts, swL2macNotifyInfo=swL2macNotifyInfo, swL2NotifFirmware=swL2NotifFirmware, swL2PortInfoNwayStatus=swL2PortInfoNwayStatus, swL2TrunkMaxSupportedEntries=swL2TrunkMaxSupportedEntries, swL2PortCtrlMediumType=swL2PortCtrlMediumType, swL2MirrorMgmt=swL2MirrorMgmt, swL2TrunkCurrentNumEntries=swL2TrunkCurrentNumEntries, swL2PortInfoTable=swL2PortInfoTable, swL2TrunkType=swL2TrunkType, swL2MulticastFilterModeVlanTable=swL2MulticastFilterModeVlanTable, swL2TrunkMasterPort=swL2TrunkMasterPort, swL2PortSecurityViolationMac=swL2PortSecurityViolationMac, swL2IGMPAccessAuthTable=swL2IGMPAccessAuthTable, swL2macNotification=swL2macNotification, swL2PortInfoType=swL2PortInfoType, swL2TrunkCtrlEntry=swL2TrunkCtrlEntry, swL2SubnetVLANRowStatus=swL2SubnetVLANRowStatus, PYSNMP_MODULE_ID=swL2MgmtMIB, swL2DevCtrl=swL2DevCtrl, swL2DevMgmt=swL2DevMgmt, PortList=PortList, swL2TrunkIndex=swL2TrunkIndex, swL2TrunkAlgorithm=swL2TrunkAlgorithm, swL2VlanPortInfoEntry=swL2VlanPortInfoEntry, swL2DhcpLocalRelayVLANEntry=swL2DhcpLocalRelayVLANEntry, swL2DevAlarm=swL2DevAlarm, swL2PortCounterCtrlEntry=swL2PortCounterCtrlEntry, swL2TrafficSegMgmt=swL2TrafficSegMgmt, swL2TrunkLACPPortState=swL2TrunkLACPPortState, swL2VlanPrecedencePortIndex=swL2VlanPrecedencePortIndex, swL2TrunkMember=swL2TrunkMember, swL2MirrorLogicTargetPort=swL2MirrorLogicTargetPort, swL2DevCtrlTelnetState=swL2DevCtrlTelnetState, swL2NotifyPrefix=swL2NotifyPrefix, swl2NotificationBidings=swl2NotificationBidings, swL2NniGvrpBpduAddress=swL2NniGvrpBpduAddress, swL2PortInfoErrorDisabled=swL2PortInfoErrorDisabled, swL2DevCtrlLLDPForwardMessageState=swL2DevCtrlLLDPForwardMessageState, swL2VlanPortInfoPortIndex=swL2VlanPortInfoPortIndex, swL2PortCtrlFlowCtrlState=swL2PortCtrlFlowCtrlState, swL2PortInfoLinkStatus=swL2PortInfoLinkStatus, swL2PortCtrlJumboFrame=swL2PortCtrlJumboFrame, swL2DevCtrlCleanAllStatisticCounter=swL2DevCtrlCleanAllStatisticCounter, swL2VLANAdvertisement=swL2VLANAdvertisement, swL2SubnetVLANEntry=swL2SubnetVLANEntry)
