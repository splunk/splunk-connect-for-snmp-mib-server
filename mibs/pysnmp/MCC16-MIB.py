#
# PySNMP MIB module MCC16-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MCC16-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:00:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, IpAddress, Counter64, NotificationType, Counter32, NotificationType, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, Integer32, Bits, TimeTicks, enterprises, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "Counter64", "NotificationType", "Counter32", "NotificationType", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "Integer32", "Bits", "TimeTicks", "enterprises", "Unsigned32")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class CpsConnector(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))
    namedValues = NamedValues(("rj-45", 10), ("stmm", 11), ("stsm", 12), ("scmm", 13), ("scsm", 14), ("scsmlh", 15), ("scsmelh", 16), ("scsmlhlw", 17), ("mtrjmm", 18), ("lc", 19), ("bnc", 20), ("stsmlh", 21), ("stsmelh", 22), ("scmm1300", 23), ("stmm1300", 24), ("mtrjsm", 25), ("serial26", 26), ("stmmlh", 27), ("scsmsh", 28), ("scsimplex", 29), ("bncdual", 30), ("db9rsxxx", 31), ("termblock", 32), ("rj11", 33), ("sc40km", 34), ("sc125km", 35))

transition = MibIdentifier((1, 3, 6, 1, 4, 1, 868))
productId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1))
chassisProdsId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4))
chassisSlotTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1))
chSlMc20p = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1))
chSlcps = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2))
chassisMcc16Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 2))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2))
ceTbtFrl03Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 1))
ceCxTbt04Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 2))
ceCxFrl04Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 3))
cfSmMm02Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 4))
cfSmMm05Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 5))
caCf02Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 6))
cfSmMm06Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 7))
ct1e1Cf01Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 8))
ceRTxFx01Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 9))
ce100BtxFx04Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 10))
cpsCf01Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 12))
cbCf01Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 13))
carCf01Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 14))
carCf02Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 15))
cePswFx03Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 16))
cePswSx01Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 17))
cRs232Cf01Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 18))
cfSmMm04Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 24))
ce100BtxSx01Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 26))
ce100BtxFx04MtId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 27))
cfdCd01Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 28))
ctrCf01Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 29))
ce100BtxFrl03Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 30))
mc20pEmptyId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 31))
mc20pErrorId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 32))
mc20pDblWideId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 33))
chstrCf01Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 34))
ceTxSx02Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 35))
ceTbtFrl04Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 1, 36))
cpsmM100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 1))
cpsmM200Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 2))
cettf100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 3))
cfetf100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 4))
cfmff100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 5))
cpsmp100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 6))
csetf100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 7))
cgetf100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 8))
csdtf100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 9))
cpsmp110Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 10))
cbftf100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 11))
cetct100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 12))
ccscf100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 13))
cfetf105Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 14))
smacf100PId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 15))
cpsld100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 16))
cdftf100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 17))
cpsvt100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 18))
cemtf100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 19))
captf100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 20))
cfetf205Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 21))
cbftf150Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 22))
cgfeb100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 23))
crmfe100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 24))
crs2f100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 25))
crs4f100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 26))
cmefg100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 27))
cpsEmptyId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 1001))
cpsDblWideId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 1002))
cpsUnknownDeviceId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 1003))
chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 4))
card = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 4, 1))
slotMc20p = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1))
slotCps = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2))
backplane = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 4, 2))
mcc16 = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 1))
mcc16Common = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 1, 1))
mcc16Ver1 = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 1, 2))
cps = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2))
cpsSlotSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 1))
cpsSlotDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2))
chassisCpsmc1800Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 3))
chassisCpsmc1850Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 4))
chassisCpsmc0800Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 5))
chassisCpsmc1300Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 6))
chassisCpsmc0200Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 7))
chassisSmacf100LCId = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 8))
chassisCpsmc1900Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 9))
chassisSmacf100Id = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 1, 4, 10))
cpsCabSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 1))
cpsCabDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2))
cpsAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 3))
ceTbtFrl03Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 1), )
if mibBuilder.loadTexts: ceTbtFrl03Table.setStatus('mandatory')
ceTbtFrl03Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 1, 1), ).setIndexNames((0, "MCC16-MIB", "ceTbtFrl03Index"))
if mibBuilder.loadTexts: ceTbtFrl03Entry.setStatus('mandatory')
ceTbtFrl03Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceTbtFrl03Index.setStatus('mandatory')
ceTbtFrl03FiberRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceTbtFrl03FiberRecv.setStatus('mandatory')
ceTbtFrl03FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceTbtFrl03FiberLink.setStatus('mandatory')
ceTbtFrl03TPRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceTbtFrl03TPRecv.setStatus('mandatory')
ceTbtFrl03TPLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceTbtFrl03TPLink.setStatus('mandatory')
ceTbtFrl03Power = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceTbtFrl03Power.setStatus('mandatory')
ceCxTbt04Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 2), )
if mibBuilder.loadTexts: ceCxTbt04Table.setStatus('mandatory')
ceCxTbt04Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 2, 1), ).setIndexNames((0, "MCC16-MIB", "ceCxTbt04Index"))
if mibBuilder.loadTexts: ceCxTbt04Entry.setStatus('mandatory')
ceCxTbt04Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceCxTbt04Index.setStatus('mandatory')
ceCxTbt04Jabber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceCxTbt04Jabber.setStatus('mandatory')
ceCxTbt04CoaxRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceCxTbt04CoaxRecv.setStatus('mandatory')
ceCxTbt04TPRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceCxTbt04TPRecv.setStatus('mandatory')
ceCxTbt04TPLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceCxTbt04TPLink.setStatus('mandatory')
ceCxTbt04Power = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceCxTbt04Power.setStatus('mandatory')
ceCxFrl04Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 3), )
if mibBuilder.loadTexts: ceCxFrl04Table.setStatus('mandatory')
ceCxFrl04Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 3, 1), ).setIndexNames((0, "MCC16-MIB", "ceCxFrl04Index"))
if mibBuilder.loadTexts: ceCxFrl04Entry.setStatus('mandatory')
ceCxFrl04Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceCxFrl04Index.setStatus('mandatory')
ceCxFrl04Jabber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceCxFrl04Jabber.setStatus('mandatory')
ceCxFrl04CoaxRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceCxFrl04CoaxRecv.setStatus('mandatory')
ceCxFrl04FLRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceCxFrl04FLRecv.setStatus('mandatory')
ceCxFrl04FLLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceCxFrl04FLLink.setStatus('mandatory')
ceCxFrl04Power = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceCxFrl04Power.setStatus('mandatory')
cfSmMm02Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 4), )
if mibBuilder.loadTexts: cfSmMm02Table.setStatus('mandatory')
cfSmMm02Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 4, 1), ).setIndexNames((0, "MCC16-MIB", "cfSmMm02Index"))
if mibBuilder.loadTexts: cfSmMm02Entry.setStatus('mandatory')
cfSmMm02Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSmMm02Index.setStatus('mandatory')
cfSmMm02MMSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSmMm02MMSignalDetect.setStatus('mandatory')
cfSmMm02SMSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSmMm02SMSignalDetect.setStatus('mandatory')
cfSmMm02Power = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSmMm02Power.setStatus('mandatory')
cfSmMm05Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 5), )
if mibBuilder.loadTexts: cfSmMm05Table.setStatus('mandatory')
cfSmMm05Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 5, 1), ).setIndexNames((0, "MCC16-MIB", "cfSmMm05Index"))
if mibBuilder.loadTexts: cfSmMm05Entry.setStatus('mandatory')
cfSmMm05Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSmMm05Index.setStatus('mandatory')
cfSmMm05SMSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSmMm05SMSignalDetect.setStatus('mandatory')
cfSmMm05MMSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSmMm05MMSignalDetect.setStatus('mandatory')
cfSmMm05Power = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSmMm05Power.setStatus('mandatory')
caCf02Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 6), )
if mibBuilder.loadTexts: caCf02Table.setStatus('mandatory')
caCf02Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 6, 1), ).setIndexNames((0, "MCC16-MIB", "caCf02Index"))
if mibBuilder.loadTexts: caCf02Entry.setStatus('mandatory')
caCf02Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caCf02Index.setStatus('mandatory')
caCf02CopperSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caCf02CopperSignalDetect.setStatus('mandatory')
caCf02FiberSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caCf02FiberSignalDetect.setStatus('mandatory')
caCf02Power = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caCf02Power.setStatus('mandatory')
cfSmMm06Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 7), )
if mibBuilder.loadTexts: cfSmMm06Table.setStatus('mandatory')
cfSmMm06Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 7, 1), ).setIndexNames((0, "MCC16-MIB", "cfSmMm06Index"))
if mibBuilder.loadTexts: cfSmMm06Entry.setStatus('mandatory')
cfSmMm06Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSmMm06Index.setStatus('mandatory')
cfSmMm06MMSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSmMm06MMSignalDetect.setStatus('mandatory')
cfSmMm06SMSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSmMm06SMSignalDetect.setStatus('mandatory')
cfSmMm06Power = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSmMm06Power.setStatus('mandatory')
ct1e1Cf01Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 8), )
if mibBuilder.loadTexts: ct1e1Cf01Table.setStatus('mandatory')
ct1e1Cf01Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 8, 1), ).setIndexNames((0, "MCC16-MIB", "ct1e1Cf01Index"))
if mibBuilder.loadTexts: ct1e1Cf01Entry.setStatus('mandatory')
ct1e1Cf01Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ct1e1Cf01Index.setStatus('mandatory')
ct1e1Cf01CopperSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ct1e1Cf01CopperSignalDetect.setStatus('mandatory')
ct1e1Cf01FiberSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ct1e1Cf01FiberSignalDetect.setStatus('mandatory')
ct1e1Cf01CoaxActive = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ct1e1Cf01CoaxActive.setStatus('mandatory')
ceRTxFx01Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 9), )
if mibBuilder.loadTexts: ceRTxFx01Table.setStatus('mandatory')
ceRTxFx01Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 9, 1), ).setIndexNames((0, "MCC16-MIB", "ceRTxFx01Index"))
if mibBuilder.loadTexts: ceRTxFx01Entry.setStatus('mandatory')
ceRTxFx01Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRTxFx01Index.setStatus('mandatory')
ceRTxFx01TPPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRTxFx01TPPrimary.setStatus('mandatory')
ceRTxFx01FiberPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRTxFx01FiberPrimary.setStatus('mandatory')
ceRTxFx01TPSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRTxFx01TPSignalDetect.setStatus('mandatory')
ceRTxFx01FiberSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceRTxFx01FiberSignalDetect.setStatus('mandatory')
ce100BtxFx04Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 10), )
if mibBuilder.loadTexts: ce100BtxFx04Table.setStatus('mandatory')
ce100BtxFx04Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 10, 1), ).setIndexNames((0, "MCC16-MIB", "ce100BtxFx04Index"))
if mibBuilder.loadTexts: ce100BtxFx04Entry.setStatus('mandatory')
ce100BtxFx04Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxFx04Index.setStatus('mandatory')
ce100BtxFx04TPRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxFx04TPRecv.setStatus('mandatory')
ce100BtxFx04FiberRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxFx04FiberRecv.setStatus('mandatory')
ce100BtxFx04TPSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxFx04TPSignalDetect.setStatus('mandatory')
ce100BtxFx04FiberSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxFx04FiberSignalDetect.setStatus('mandatory')
ce100BtxFx04Power = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxFx04Power.setStatus('mandatory')
cpsCf01Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 12), )
if mibBuilder.loadTexts: cpsCf01Table.setStatus('mandatory')
cpsCf01Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 12, 1), ).setIndexNames((0, "MCC16-MIB", "cpsCf01Index"))
if mibBuilder.loadTexts: cpsCf01Entry.setStatus('mandatory')
cpsCf01Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCf01Index.setStatus('mandatory')
cpsCf01FiberRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCf01FiberRecv.setStatus('mandatory')
cpsCf01TPRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCf01TPRecv.setStatus('mandatory')
cpsCf01Power = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCf01Power.setStatus('mandatory')
cbCf01Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 13), )
if mibBuilder.loadTexts: cbCf01Table.setStatus('mandatory')
cbCf01Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 13, 1), ).setIndexNames((0, "MCC16-MIB", "cbCf01Index"))
if mibBuilder.loadTexts: cbCf01Entry.setStatus('mandatory')
cbCf01Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCf01Index.setStatus('mandatory')
cbCf01FiberRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCf01FiberRecv.setStatus('mandatory')
cbCf01TPCoaxRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCf01TPCoaxRecv.setStatus('mandatory')
cbCf01Power = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbCf01Power.setStatus('mandatory')
carCf01Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 14), )
if mibBuilder.loadTexts: carCf01Table.setStatus('mandatory')
carCf01Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 14, 1), ).setIndexNames((0, "MCC16-MIB", "carCf01Index"))
if mibBuilder.loadTexts: carCf01Entry.setStatus('mandatory')
carCf01Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carCf01Index.setStatus('mandatory')
carCf01FiberRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carCf01FiberRecv.setStatus('mandatory')
carCf01TPRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carCf01TPRecv.setStatus('mandatory')
carCf01Power = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carCf01Power.setStatus('mandatory')
carCf02Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 15), )
if mibBuilder.loadTexts: carCf02Table.setStatus('mandatory')
carCf02Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 15, 1), ).setIndexNames((0, "MCC16-MIB", "carCf02Index"))
if mibBuilder.loadTexts: carCf02Entry.setStatus('mandatory')
carCf02Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carCf02Index.setStatus('mandatory')
carCf02FiberRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carCf02FiberRecv.setStatus('mandatory')
carCf02CoaxRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carCf02CoaxRecv.setStatus('mandatory')
carCf02Power = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: carCf02Power.setStatus('mandatory')
cePswFx03Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 16), )
if mibBuilder.loadTexts: cePswFx03Table.setStatus('mandatory')
cePswFx03Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 16, 1), ).setIndexNames((0, "MCC16-MIB", "cePswFx03Index"))
if mibBuilder.loadTexts: cePswFx03Entry.setStatus('mandatory')
cePswFx03Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cePswFx03Index.setStatus('mandatory')
cePswFx03TPFullDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cePswFx03TPFullDuplex.setStatus('mandatory')
cePswFx03FiberFullDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cePswFx03FiberFullDuplex.setStatus('mandatory')
cePswFx03TPLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cePswFx03TPLink.setStatus('mandatory')
cePswFx03FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cePswFx03FiberLink.setStatus('mandatory')
cePswFx03TP100Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cePswFx03TP100Mbps.setStatus('mandatory')
cePswSx01Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 17), )
if mibBuilder.loadTexts: cePswSx01Table.setStatus('mandatory')
cePswSx01Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 17, 1), ).setIndexNames((0, "MCC16-MIB", "cePswSx01Index"))
if mibBuilder.loadTexts: cePswSx01Entry.setStatus('mandatory')
cePswSx01Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cePswSx01Index.setStatus('mandatory')
cePswSx01TPFullDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cePswSx01TPFullDuplex.setStatus('mandatory')
cePswSx01FiberFullDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cePswSx01FiberFullDuplex.setStatus('mandatory')
cePswSx01TPLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cePswSx01TPLink.setStatus('mandatory')
cePswSx01FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cePswSx01FiberLink.setStatus('mandatory')
cePswSx01TP100Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cePswSx01TP100Mbps.setStatus('mandatory')
cRs232Cf01Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 18), )
if mibBuilder.loadTexts: cRs232Cf01Table.setStatus('mandatory')
cRs232Cf01Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 18, 1), ).setIndexNames((0, "MCC16-MIB", "cRs232Cf01Index"))
if mibBuilder.loadTexts: cRs232Cf01Entry.setStatus('mandatory')
cRs232Cf01Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRs232Cf01Index.setStatus('mandatory')
cRs232Cf01FiberLock = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRs232Cf01FiberLock.setStatus('mandatory')
cfSmMm04Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 24), )
if mibBuilder.loadTexts: cfSmMm04Table.setStatus('mandatory')
cfSmMm04Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 24, 1), ).setIndexNames((0, "MCC16-MIB", "cfSmMm04Index"))
if mibBuilder.loadTexts: cfSmMm04Entry.setStatus('mandatory')
cfSmMm04Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSmMm04Index.setStatus('mandatory')
cfSmMm04MMSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSmMm04MMSignalDetect.setStatus('mandatory')
cfSmMm04SMSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSmMm04SMSignalDetect.setStatus('mandatory')
cfSmMm04Power = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSmMm04Power.setStatus('mandatory')
ce100BtxSx01Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 26), )
if mibBuilder.loadTexts: ce100BtxSx01Table.setStatus('mandatory')
ce100BtxSx01Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 26, 1), ).setIndexNames((0, "MCC16-MIB", "ce100BtxSx01Index"))
if mibBuilder.loadTexts: ce100BtxSx01Entry.setStatus('mandatory')
ce100BtxSx01Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxSx01Index.setStatus('mandatory')
ce100BtxSx01TPRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxSx01TPRecv.setStatus('mandatory')
ce100BtxSx01FiberRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxSx01FiberRecv.setStatus('mandatory')
ce100BtxSx01TPSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 26, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxSx01TPSignalDetect.setStatus('mandatory')
ce100BtxSx01FiberSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 26, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxSx01FiberSignalDetect.setStatus('mandatory')
ce100BtxSx01Power = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 26, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxSx01Power.setStatus('mandatory')
ce100BtxFx04MtTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 27), )
if mibBuilder.loadTexts: ce100BtxFx04MtTable.setStatus('mandatory')
ce100BtxFx04MtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 27, 1), ).setIndexNames((0, "MCC16-MIB", "ce100BtxFx04MtIndex"))
if mibBuilder.loadTexts: ce100BtxFx04MtEntry.setStatus('mandatory')
ce100BtxFx04MtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxFx04MtIndex.setStatus('mandatory')
ce100BtxFx04MtTPRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxFx04MtTPRecv.setStatus('mandatory')
ce100BtxFx04MtFiberRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxFx04MtFiberRecv.setStatus('mandatory')
ce100BtxFx04MtTPSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxFx04MtTPSignalDetect.setStatus('mandatory')
ce100BtxFx04MtFiberSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 27, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxFx04MtFiberSignalDetect.setStatus('mandatory')
ce100BtxFx04MtPower = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 27, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxFx04MtPower.setStatus('mandatory')
cfdCd01Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 28), )
if mibBuilder.loadTexts: cfdCd01Table.setStatus('mandatory')
cfdCd01Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 28, 1), ).setIndexNames((0, "MCC16-MIB", "cfdCd01Index"))
if mibBuilder.loadTexts: cfdCd01Entry.setStatus('mandatory')
cfdCd01Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 28, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdCd01Index.setStatus('mandatory')
cfdCd01Lock = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdCd01Lock.setStatus('mandatory')
cfdCd01TPRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdCd01TPRecv.setStatus('mandatory')
cfdCd01FiberRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 28, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdCd01FiberRecv.setStatus('mandatory')
cfdCd01TPSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 28, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdCd01TPSignalDetect.setStatus('mandatory')
cfdCd01FiberSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 28, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfdCd01FiberSignalDetect.setStatus('mandatory')
ctrCf01Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 29), )
if mibBuilder.loadTexts: ctrCf01Table.setStatus('mandatory')
ctrCf01Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 29, 1), ).setIndexNames((0, "MCC16-MIB", "ctrCf01Index"))
if mibBuilder.loadTexts: ctrCf01Entry.setStatus('mandatory')
ctrCf01Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrCf01Index.setStatus('mandatory')
ctrCf01FiberinOK = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 29, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrCf01FiberinOK.setStatus('mandatory')
ctrCf01TPinOK = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrCf01TPinOK.setStatus('mandatory')
ctrCf01Inserted = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 29, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrCf01Inserted.setStatus('mandatory')
ce100BtxFrl03Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 30), )
if mibBuilder.loadTexts: ce100BtxFrl03Table.setStatus('mandatory')
ce100BtxFrl03Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 30, 1), ).setIndexNames((0, "MCC16-MIB", "ce100BtxFrl03Index"))
if mibBuilder.loadTexts: ce100BtxFrl03Entry.setStatus('mandatory')
ce100BtxFrl03Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 30, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxFrl03Index.setStatus('mandatory')
ce100BtxFrl03Lock = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxFrl03Lock.setStatus('mandatory')
ce100BtxFrl03TPRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxFrl03TPRecv.setStatus('mandatory')
ce100BtxFrl03FiberRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxFrl03FiberRecv.setStatus('mandatory')
ce100BtxFrl03TPSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 30, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxFrl03TPSignalDetect.setStatus('mandatory')
ce100BtxFrl03FiberSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 30, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ce100BtxFrl03FiberSignalDetect.setStatus('mandatory')
chstrCf01Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 34), )
if mibBuilder.loadTexts: chstrCf01Table.setStatus('mandatory')
chstrCf01Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 34, 1), ).setIndexNames((0, "MCC16-MIB", "chstrCf01Index"))
if mibBuilder.loadTexts: chstrCf01Entry.setStatus('mandatory')
chstrCf01Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 34, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chstrCf01Index.setStatus('mandatory')
chstrCf01TPRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 34, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chstrCf01TPRecv.setStatus('mandatory')
chstrCf01FiberRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 34, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chstrCf01FiberRecv.setStatus('mandatory')
chstrCf01TPSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 34, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chstrCf01TPSignalDetect.setStatus('mandatory')
chstrCf01FiberSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 34, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chstrCf01FiberSignalDetect.setStatus('mandatory')
ceTxSx02Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 35), )
if mibBuilder.loadTexts: ceTxSx02Table.setStatus('mandatory')
ceTxSx02Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 35, 1), ).setIndexNames((0, "MCC16-MIB", "ceTxSx02Index"))
if mibBuilder.loadTexts: ceTxSx02Entry.setStatus('mandatory')
ceTxSx02Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 35, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceTxSx02Index.setStatus('mandatory')
ceTxSx02TPLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 35, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceTxSx02TPLink.setStatus('mandatory')
ceTxSx02FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceTxSx02FiberLink.setStatus('mandatory')
ceTxSx02100Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 35, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceTxSx02100Mbps.setStatus('mandatory')
ceTbtFrl04Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 36), )
if mibBuilder.loadTexts: ceTbtFrl04Table.setStatus('mandatory')
ceTbtFrl04Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 36, 1), ).setIndexNames((0, "MCC16-MIB", "ceTbtFrl04Index"))
if mibBuilder.loadTexts: ceTbtFrl04Entry.setStatus('mandatory')
ceTbtFrl04Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 36, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceTbtFrl04Index.setStatus('mandatory')
ceTbtFrl04FiberRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 36, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceTbtFrl04FiberRecv.setStatus('mandatory')
ceTbtFrl04FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 36, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceTbtFrl04FiberLink.setStatus('mandatory')
ceTbtFrl04TPRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 36, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceTbtFrl04TPRecv.setStatus('mandatory')
ceTbtFrl04TPLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 1, 36, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceTbtFrl04TPLink.setStatus('mandatory')
cpsModuleTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 1, 1), )
if mibBuilder.loadTexts: cpsModuleTable.setStatus('mandatory')
cpsModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 1, 1, 1), ).setIndexNames((0, "MCC16-MIB", "cpsModuleBiaIndex"), (0, "MCC16-MIB", "cpsModuleSlotIndex"))
if mibBuilder.loadTexts: cpsModuleEntry.setStatus('mandatory')
cpsModuleBiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsModuleBiaIndex.setStatus('mandatory')
cpsModuleSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsModuleSlotIndex.setStatus('mandatory')
cpsModuleModel = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 1, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsModuleModel.setStatus('mandatory')
cpsmm100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1), )
if mibBuilder.loadTexts: cpsmm100Table.setStatus('mandatory')
cpsmm100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1), ).setIndexNames((0, "MCC16-MIB", "cpsmm100BiaIndex"), (0, "MCC16-MIB", "cpsmm100SlotIndex"))
if mibBuilder.loadTexts: cpsmm100Entry.setStatus('mandatory')
cpsmm100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm100BiaIndex.setStatus('mandatory')
cpsmm100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm100SlotIndex.setStatus('mandatory')
cpsmm100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmm100Groups.setStatus('mandatory')
cpsmm100Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noReset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmm100Reset.setStatus('mandatory')
cpsmm100SaveConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saveConfig", 1), ("noSaveConfig", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmm100SaveConfig.setStatus('mandatory')
cpsmm100HwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm100HwRevision.setStatus('mandatory')
cpsmm100SwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm100SwRevision.setStatus('mandatory')
cpsmm100IPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmm100IPAddress.setStatus('mandatory')
cpsmm100SubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmm100SubnetMask.setStatus('mandatory')
cpsmm100Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmm100Gateway.setStatus('mandatory')
cpsmm100IsPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm100IsPrimary.setStatus('mandatory')
cpsmm100WantPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("always", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmm100WantPrimary.setStatus('mandatory')
cpsmm100CanPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm100CanPrimary.setStatus('mandatory')
cpsmm100EthernetLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm100EthernetLink.setStatus('mandatory')
cpsmm100TntRIP = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm100TntRIP.setStatus('mandatory')
cpsmm100TntRIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm100TntRIPMask.setStatus('mandatory')
cpsmm100SNMPTrapMgr = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmm100SNMPTrapMgr.setStatus('mandatory')
cpsmm100SNMPTrapInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmm100SNMPTrapInterval.setStatus('mandatory')
cpsmm100SysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm100SysUpTime.setStatus('mandatory')
cpsmm100SysContact = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmm100SysContact.setStatus('mandatory')
cpsmm100SysName = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmm100SysName.setStatus('mandatory')
cpsmm100SysLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmm100SysLocation.setStatus('mandatory')
cpsmm100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmm100CfgMatch.setStatus('mandatory')
cpsmm100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm100SerialNumber.setStatus('mandatory')
cpsmm100ICIF = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm100ICIF.setStatus('mandatory')
cpsmm100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm100MRevision.setStatus('mandatory')
cpsmm100LastGasp = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm100LastGasp.setStatus('mandatory')
cpsmm100SNMPTrapMgr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmm100SNMPTrapMgr2.setStatus('mandatory')
cpsmm100SNMPTrapMgr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmm100SNMPTrapMgr3.setStatus('mandatory')
cpsmm100SNMPTrapMgr4 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 30), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmm100SNMPTrapMgr4.setStatus('mandatory')
cpsmm100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm100CacheClean.setStatus('mandatory')
cpsmm200Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 2), )
if mibBuilder.loadTexts: cpsmm200Table.setStatus('mandatory')
cpsmm200Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 2, 1), ).setIndexNames((0, "MCC16-MIB", "cpsmm200BiaIndex"), (0, "MCC16-MIB", "cpsmm200SlotIndex"))
if mibBuilder.loadTexts: cpsmm200Entry.setStatus('mandatory')
cpsmm200BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm200BiaIndex.setStatus('mandatory')
cpsmm200SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm200SlotIndex.setStatus('mandatory')
cpsmm200SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm200SerialNumber.setStatus('mandatory')
cpsmm200ICIF = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm200ICIF.setStatus('mandatory')
cpsmm200MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmm200MRevision.setStatus('mandatory')
cettf100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3), )
if mibBuilder.loadTexts: cettf100Table.setStatus('mandatory')
cettf100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3, 1), ).setIndexNames((0, "MCC16-MIB", "cettf100BiaIndex"), (0, "MCC16-MIB", "cettf100SlotIndex"))
if mibBuilder.loadTexts: cettf100Entry.setStatus('mandatory')
cettf100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cettf100BiaIndex.setStatus('mandatory')
cettf100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cettf100SlotIndex.setStatus('mandatory')
cettf100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cettf100Groups.setStatus('mandatory')
cettf100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cettf100MRevision.setStatus('mandatory')
cettf100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cettf100CfgMatch.setStatus('mandatory')
cettf100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cettf100SerialNumber.setStatus('mandatory')
cettf100ConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3, 1, 7), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cettf100ConnA.setStatus('mandatory')
cettf100ConnB = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3, 1, 8), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cettf100ConnB.setStatus('mandatory')
cettf100TPLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cettf100TPLink.setStatus('mandatory')
cettf100FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cettf100FiberLink.setStatus('mandatory')
cettf100Fault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cettf100Fault.setStatus('mandatory')
cettf100TPActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cettf100TPActivity.setStatus('mandatory')
cettf100FiberActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cettf100FiberActivity.setStatus('mandatory')
cettf100AutoCross = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cettf100AutoCross.setStatus('mandatory')
cettf100LinkPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cettf100LinkPassThrough.setStatus('mandatory')
cettf100ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cettf100ConfigMode.setStatus('mandatory')
cettf100Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cettf100Enabled.setStatus('mandatory')
cettf100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cettf100CacheClean.setStatus('mandatory')
cfetf100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4), )
if mibBuilder.loadTexts: cfetf100Table.setStatus('mandatory')
cfetf100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1), ).setIndexNames((0, "MCC16-MIB", "cfetf100BiaIndex"), (0, "MCC16-MIB", "cfetf100SlotIndex"))
if mibBuilder.loadTexts: cfetf100Entry.setStatus('mandatory')
cfetf100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf100BiaIndex.setStatus('mandatory')
cfetf100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf100SlotIndex.setStatus('mandatory')
cfetf100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfetf100Groups.setStatus('mandatory')
cfetf100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf100MRevision.setStatus('mandatory')
cfetf100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf100CfgMatch.setStatus('mandatory')
cfetf100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf100SerialNumber.setStatus('mandatory')
cfetf100ConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 7), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf100ConnA.setStatus('mandatory')
cfetf100ConnB = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 8), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf100ConnB.setStatus('mandatory')
cfetf100TPLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf100TPLink.setStatus('mandatory')
cfetf100FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf100FiberLink.setStatus('mandatory')
cfetf100Fault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf100Fault.setStatus('mandatory')
cfetf100FastLinkPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autonegotiate", 1), ("hdx100Btx", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfetf100FastLinkPulse.setStatus('mandatory')
cfetf100Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfetf100Enabled.setStatus('mandatory')
cfetf100Pause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfetf100Pause.setStatus('mandatory')
cfetf100LinkPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfetf100LinkPassThrough.setStatus('mandatory')
cfetf100AutoCross = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfetf100AutoCross.setStatus('mandatory')
cfetf100TPActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf100TPActivity.setStatus('mandatory')
cfetf100FiberActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf100FiberActivity.setStatus('mandatory')
cfetf100ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf100ConfigMode.setStatus('mandatory')
cfetf100FarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfetf100FarEndFault.setStatus('mandatory')
cfetf100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf100CacheClean.setStatus('mandatory')
cfmff100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 5), )
if mibBuilder.loadTexts: cfmff100Table.setStatus('mandatory')
cfmff100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 5, 1), ).setIndexNames((0, "MCC16-MIB", "cfmff100BiaIndex"), (0, "MCC16-MIB", "cfmff100SlotIndex"))
if mibBuilder.loadTexts: cfmff100Entry.setStatus('mandatory')
cfmff100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmff100BiaIndex.setStatus('mandatory')
cfmff100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmff100SlotIndex.setStatus('mandatory')
cfmff100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmff100Groups.setStatus('mandatory')
cfmff100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmff100MRevision.setStatus('mandatory')
cfmff100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmff100CfgMatch.setStatus('mandatory')
cfmff100ConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 5, 1, 6), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmff100ConnA.setStatus('mandatory')
cfmff100ConnB = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 5, 1, 7), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmff100ConnB.setStatus('mandatory')
cfmff100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmff100SerialNumber.setStatus('mandatory')
cfmff100SMSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signalUp", 1), ("signalDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmff100SMSignal.setStatus('mandatory')
cfmff100MMSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signalUp", 1), ("signalDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmff100MMSignal.setStatus('mandatory')
cfmff100Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("yes", 1), ("noP1", 2), ("noP2", 3), ("no", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfmff100Enabled.setStatus('mandatory')
cfmff100PortShutOff = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmff100PortShutOff.setStatus('mandatory')
cfmff100ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmff100ConfigMode.setStatus('mandatory')
cfmff100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmff100CacheClean.setStatus('mandatory')
cpsmp100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 6), )
if mibBuilder.loadTexts: cpsmp100Table.setStatus('mandatory')
cpsmp100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 6, 1), ).setIndexNames((0, "MCC16-MIB", "cpsmp100BiaIndex"), (0, "MCC16-MIB", "cpsmp100SlotIndex"))
if mibBuilder.loadTexts: cpsmp100Entry.setStatus('mandatory')
cpsmp100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp100BiaIndex.setStatus('mandatory')
cpsmp100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp100SlotIndex.setStatus('mandatory')
cpsmp100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmp100Groups.setStatus('mandatory')
cpsmp100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp100MRevision.setStatus('mandatory')
cpsmp100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp100CfgMatch.setStatus('mandatory')
cpsmp100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp100SerialNumber.setStatus('mandatory')
cpsmp100Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmp100Mode.setStatus('mandatory')
cpsmp100ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp100ConfigMode.setStatus('mandatory')
cpsmp100RemoteFan = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("installed", 1), ("notInstalled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp100RemoteFan.setStatus('mandatory')
cpsmp100PowerOK = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp100PowerOK.setStatus('mandatory')
cpsmp100InUse = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp100InUse.setStatus('mandatory')
cpsmp100ChassisPower = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp100ChassisPower.setStatus('mandatory')
cpsmp100ChassisTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp100ChassisTemp.setStatus('mandatory')
cpsmp100RFanFault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp100RFanFault.setStatus('mandatory')
cpsmp100LFanFault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp100LFanFault.setStatus('mandatory')
cpsmp100SupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ac", 1), ("dc48", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp100SupplyType.setStatus('mandatory')
cpsmp100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp100CacheClean.setStatus('mandatory')
csetf100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 7), )
if mibBuilder.loadTexts: csetf100Table.setStatus('mandatory')
csetf100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 7, 1), ).setIndexNames((0, "MCC16-MIB", "csetf100BiaIndex"), (0, "MCC16-MIB", "csetf100SlotIndex"))
if mibBuilder.loadTexts: csetf100Entry.setStatus('mandatory')
csetf100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csetf100BiaIndex.setStatus('mandatory')
csetf100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csetf100SlotIndex.setStatus('mandatory')
csetf100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csetf100Groups.setStatus('mandatory')
csetf100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csetf100MRevision.setStatus('mandatory')
csetf100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csetf100CfgMatch.setStatus('mandatory')
csetf100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csetf100SerialNumber.setStatus('mandatory')
csetf100ConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 7, 1, 7), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csetf100ConnA.setStatus('mandatory')
csetf100ConnB = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 7, 1, 8), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csetf100ConnB.setStatus('mandatory')
csetf100TPLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csetf100TPLink.setStatus('mandatory')
csetf100FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csetf100FiberLink.setStatus('mandatory')
csetf100AutoCross = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csetf100AutoCross.setStatus('mandatory')
csetf100SpeedConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("mbps10", 2), ("mbps100", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csetf100SpeedConfig.setStatus('mandatory')
csetf100Speed100Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csetf100Speed100Mbps.setStatus('mandatory')
csetf100TPActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activity", 1), ("noActivity", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csetf100TPActivity.setStatus('mandatory')
csetf100FiberActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activity", 1), ("noActivity", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csetf100FiberActivity.setStatus('mandatory')
csetf100ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csetf100ConfigMode.setStatus('mandatory')
csetf100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csetf100CacheClean.setStatus('mandatory')
cgetf100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8), )
if mibBuilder.loadTexts: cgetf100Table.setStatus('mandatory')
cgetf100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1), ).setIndexNames((0, "MCC16-MIB", "cgetf100BiaIndex"), (0, "MCC16-MIB", "cgetf100SlotIndex"))
if mibBuilder.loadTexts: cgetf100Entry.setStatus('mandatory')
cgetf100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgetf100BiaIndex.setStatus('mandatory')
cgetf100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgetf100SlotIndex.setStatus('mandatory')
cgetf100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgetf100Groups.setStatus('mandatory')
cgetf100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgetf100MRevision.setStatus('mandatory')
cgetf100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgetf100CfgMatch.setStatus('mandatory')
cgetf100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgetf100SerialNumber.setStatus('mandatory')
cgetf100ConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 7), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgetf100ConnA.setStatus('mandatory')
cgetf100ConnB = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 8), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgetf100ConnB.setStatus('mandatory')
cgetf100TPLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgetf100TPLink.setStatus('mandatory')
cgetf100FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgetf100FiberLink.setStatus('mandatory')
cgetf100Fault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgetf100Fault.setStatus('mandatory')
cgetf100Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgetf100Enabled.setStatus('mandatory')
cgetf100Pause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgetf100Pause.setStatus('mandatory')
cgetf100LinkPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgetf100LinkPassThrough.setStatus('mandatory')
cgetf100FullDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgetf100FullDuplex.setStatus('mandatory')
cgetf100ClockMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgetf100ClockMaster.setStatus('mandatory')
cgetf100ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgetf100ConfigMode.setStatus('mandatory')
cgetf100TPLength = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ln-lt50", 1), ("ln-50-80", 2), ("ln-80-110", 3), ("ln-110-140", 4), ("ln-gt140", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgetf100TPLength.setStatus('mandatory')
cgetf100FiberAutoNegot = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgetf100FiberAutoNegot.setStatus('mandatory')
cgetf100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgetf100CacheClean.setStatus('mandatory')
cgetf100PauseType = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 8, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("symmetric", 1), ("asymRX", 2), ("asymTX", 3), ("disabled", 4), ("notApplicable", 5), ("symmetricRO", 6), ("asymRXRO", 7), ("asymTXRO", 8), ("disabledRO", 9), ("all", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgetf100PauseType.setStatus('mandatory')
csdtf100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9), )
if mibBuilder.loadTexts: csdtf100Table.setStatus('mandatory')
csdtf100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1), ).setIndexNames((0, "MCC16-MIB", "csdtf100BiaIndex"), (0, "MCC16-MIB", "csdtf100SlotIndex"))
if mibBuilder.loadTexts: csdtf100Entry.setStatus('mandatory')
csdtf100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100BiaIndex.setStatus('mandatory')
csdtf100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100SlotIndex.setStatus('mandatory')
csdtf100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csdtf100Groups.setStatus('mandatory')
csdtf100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100MRevision.setStatus('mandatory')
csdtf100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100CfgMatch.setStatus('mandatory')
csdtf100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100SerialNumber.setStatus('mandatory')
csdtf100ConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 7), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100ConnA.setStatus('mandatory')
csdtf100ConnB = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 8), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100ConnB.setStatus('mandatory')
csdtf100CopperLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100CopperLink.setStatus('mandatory')
csdtf100FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100FiberLink.setStatus('mandatory')
csdtf100Fault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100Fault.setStatus('mandatory')
csdtf100TAOSFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csdtf100TAOSFiber.setStatus('mandatory')
csdtf100TAOSCopper = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csdtf100TAOSCopper.setStatus('mandatory')
csdtf100AISFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100AISFiber.setStatus('mandatory')
csdtf100AISCopper = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100AISCopper.setStatus('mandatory')
csdtf100CopperLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csdtf100CopperLoopback.setStatus('mandatory')
csdtf100CopperLongHaul = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100CopperLongHaul.setStatus('mandatory')
csdtf100T1E1 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1", 1), ("e1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100T1E1.setStatus('mandatory')
csdtf100ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100ConfigMode.setStatus('mandatory')
csdtf100TPCoax = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tp", 1), ("coax", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100TPCoax.setStatus('mandatory')
csdtf100CopperLineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("e13-0V120ohm", 1), ("e12-37V75ohm", 2), ("t1SH-DSX-0-133ANSIT1403", 3), ("t1SH-DSX-133-266", 4), ("t1SH-DSX-266-399", 5), ("t1SH-DSX-399-533", 6), ("t1SH-DSX-533-655", 7), ("t1SH-DSX-6V", 8), ("t1LH-0dB", 9), ("t1LH-m7-5dB", 10), ("t1LH-m15dB", 11), ("t1LH-m22-5dB", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100CopperLineBuildout.setStatus('mandatory')
csdtf100FiberLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csdtf100FiberLoopback.setStatus('mandatory')
csdtf100RmtSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100RmtSupported.setStatus('mandatory')
csdtf100RmtDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100RmtDetected.setStatus('mandatory')
csdtf100RmtMRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100RmtMRevision.setStatus('mandatory')
csdtf100RmtSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100RmtSerialNumber.setStatus('mandatory')
csdtf100RmtConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 27), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100RmtConnA.setStatus('mandatory')
csdtf100RmtConnB = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 28), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100RmtConnB.setStatus('mandatory')
csdtf100RmtCopperLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100RmtCopperLink.setStatus('mandatory')
csdtf100RmtFiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100RmtFiberLink.setStatus('mandatory')
csdtf100RmtFault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100RmtFault.setStatus('mandatory')
csdtf100RmtTAOSFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csdtf100RmtTAOSFiber.setStatus('mandatory')
csdtf100RmtTAOSCopper = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csdtf100RmtTAOSCopper.setStatus('mandatory')
csdtf100RmtAISFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100RmtAISFiber.setStatus('mandatory')
csdtf100RmtAISCopper = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100RmtAISCopper.setStatus('mandatory')
csdtf100RmtCopperLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csdtf100RmtCopperLoopback.setStatus('mandatory')
csdtf100RmtCopperLongHaul = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100RmtCopperLongHaul.setStatus('mandatory')
csdtf100RmtConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100RmtConfigMode.setStatus('mandatory')
csdtf100RmtTPCoax = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tp", 1), ("coax", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100RmtTPCoax.setStatus('mandatory')
csdtf100RmtCopperLineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("e13-0V120ohm", 1), ("e12-37V75ohm", 2), ("t1SH-DSX-0-133ANSIT1403", 3), ("t1SH-DSX-133-266", 4), ("t1SH-DSX-266-399", 5), ("t1SH-DSX-399-533", 6), ("t1SH-DSX-533-655", 7), ("t1SH-DSX-6V", 8), ("t1LH-0dB", 9), ("t1LH-m7-5dB", 10), ("t1LH-m15dB", 11), ("t1LH-m22-5dB", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100RmtCopperLineBuildout.setStatus('mandatory')
csdtf100RmtFiberLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csdtf100RmtFiberLoopback.setStatus('mandatory')
csdtf100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 9, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csdtf100CacheClean.setStatus('mandatory')
cpsmp110Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10), )
if mibBuilder.loadTexts: cpsmp110Table.setStatus('mandatory')
cpsmp110Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1), ).setIndexNames((0, "MCC16-MIB", "cpsmp110SubDeviceIndex"), (0, "MCC16-MIB", "cpsmp110BiaIndex"), (0, "MCC16-MIB", "cpsmp110SlotIndex"))
if mibBuilder.loadTexts: cpsmp110Entry.setStatus('mandatory')
cpsmp110SubDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110SubDeviceIndex.setStatus('mandatory')
cpsmp110BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110BiaIndex.setStatus('mandatory')
cpsmp110SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110SlotIndex.setStatus('mandatory')
cpsmp110Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmp110Groups.setStatus('mandatory')
cpsmp110MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110MRevision.setStatus('mandatory')
cpsmp110CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110CfgMatch.setStatus('mandatory')
cpsmp110SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110SerialNumber.setStatus('mandatory')
cpsmp110ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110ConfigMode.setStatus('mandatory')
cpsmp110MasterTempFault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110MasterTempFault.setStatus('mandatory')
cpsmp110MasterCurrentFault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110MasterCurrentFault.setStatus('mandatory')
cpsmp110MasterFanFault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110MasterFanFault.setStatus('mandatory')
cpsmp110FirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110FirmwareRevision.setStatus('mandatory')
cpsmp110PSSupplyTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ac", 1), ("dc", 2), ("reserved3", 3), ("reserved4", 4), ("notInstalled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110PSSupplyTbl.setStatus('mandatory')
cpsmp110PSRoleTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("shared", 3), ("notInstalled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmp110PSRoleTbl.setStatus('mandatory')
cpsmp110PSReadyTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110PSReadyTbl.setStatus('mandatory')
cpsmp110PSInUseTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110PSInUseTbl.setStatus('mandatory')
cpsmp110TemperatureTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110TemperatureTbl.setStatus('mandatory')
cpsmp110CurrentTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110CurrentTbl.setStatus('mandatory')
cpsmp110FanStatusTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("fault", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110FanStatusTbl.setStatus('mandatory')
cpsmp110TempFaultTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110TempFaultTbl.setStatus('mandatory')
cpsmp110CurrFaultTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110CurrFaultTbl.setStatus('mandatory')
cpsmp110PSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110PSCount.setStatus('mandatory')
cpsmp110TempSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110TempSensorCount.setStatus('mandatory')
cpsmp110CurrSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110CurrSensorCount.setStatus('mandatory')
cpsmp110FanCount = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110FanCount.setStatus('mandatory')
cpsmp110CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 10, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmp110CacheClean.setStatus('mandatory')
cbftf100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11), )
if mibBuilder.loadTexts: cbftf100Table.setStatus('mandatory')
cbftf100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1), ).setIndexNames((0, "MCC16-MIB", "cbftf100SubDeviceIndex"), (0, "MCC16-MIB", "cbftf100BiaIndex"), (0, "MCC16-MIB", "cbftf100SlotIndex"))
if mibBuilder.loadTexts: cbftf100Entry.setStatus('mandatory')
cbftf100SubDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf100SubDeviceIndex.setStatus('mandatory')
cbftf100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf100BiaIndex.setStatus('mandatory')
cbftf100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf100SlotIndex.setStatus('mandatory')
cbftf100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf100Groups.setStatus('mandatory')
cbftf100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf100MRevision.setStatus('mandatory')
cbftf100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf100CfgMatch.setStatus('mandatory')
cbftf100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf100SerialNumber.setStatus('mandatory')
cbftf100ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf100ConfigMode.setStatus('mandatory')
cbftf100FirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf100FirmwareRevision.setStatus('mandatory')
cbftf100SelfTestFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf100SelfTestFailed.setStatus('mandatory')
cbftf100SpanningTree = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf100SpanningTree.setStatus('mandatory')
cbftf100MirrorCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf100MirrorCfg.setStatus('mandatory')
cbftf100SACMasterCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf100SACMasterCfg.setStatus('mandatory')
cbftf100FormFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("s1W2a", 1), ("s1W1N2a", 2), ("s1W1N1a", 3), ("s2W2N4a", 4), ("s2W1N5a", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf100FormFactor.setStatus('mandatory')
cbftf100AutoNegotTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf100AutoNegotTbl.setStatus('mandatory')
cbftf100FullDuplexTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("negotiating", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf100FullDuplexTbl.setStatus('mandatory')
cbftf100100MbpsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mbps100", 1), ("mbps10", 2), ("negotiating", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf100100MbpsTbl.setStatus('mandatory')
cbftf100Adv10HDXTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf100Adv10HDXTbl.setStatus('mandatory')
cbftf100Adv10FDXTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf100Adv10FDXTbl.setStatus('mandatory')
cbftf100Adv100HDXTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf100Adv100HDXTbl.setStatus('mandatory')
cbftf100Adv100FDXTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf100Adv100FDXTbl.setStatus('mandatory')
cbftf100CrossTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("mdi", 2), ("mdix", 3), ("notSupported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf100CrossTbl.setStatus('mandatory')
cbftf100PauseCfgTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf100PauseCfgTbl.setStatus('mandatory')
cbftf100PauseStatTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("paused", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf100PauseStatTbl.setStatus('mandatory')
cbftf100FarEndFaultTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf100FarEndFaultTbl.setStatus('mandatory')
cbftf100ConnectorTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 26), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf100ConnectorTbl.setStatus('mandatory')
cbftf100SACCfgTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf100SACCfgTbl.setStatus('mandatory')
cbftf100SACStatTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("changed", 1), ("same", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf100SACStatTbl.setStatus('mandatory')
cbftf100MirrorSelTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mirror", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf100MirrorSelTbl.setStatus('mandatory')
cbftf100MirrorInTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mirrorIn", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf100MirrorInTbl.setStatus('mandatory')
cbftf100MirrorOutTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mirrorOut", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf100MirrorOutTbl.setStatus('mandatory')
cbftf100LinkTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf100LinkTbl.setStatus('mandatory')
cbftf100PortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf100PortCount.setStatus('mandatory')
cbftf100LinkPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf100LinkPassThrough.setStatus('mandatory')
cbftf100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf100CacheClean.setStatus('mandatory')
cbftf100RedundantPath = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 11, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf100RedundantPath.setStatus('mandatory')
cetct100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 12), )
if mibBuilder.loadTexts: cetct100Table.setStatus('mandatory')
cetct100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 12, 1), ).setIndexNames((0, "MCC16-MIB", "cetct100BiaIndex"), (0, "MCC16-MIB", "cetct100SlotIndex"))
if mibBuilder.loadTexts: cetct100Entry.setStatus('mandatory')
cetct100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cetct100BiaIndex.setStatus('mandatory')
cetct100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cetct100SlotIndex.setStatus('mandatory')
cetct100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 12, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cetct100Groups.setStatus('mandatory')
cetct100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cetct100MRevision.setStatus('mandatory')
cetct100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cetct100CfgMatch.setStatus('mandatory')
cetct100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cetct100SerialNumber.setStatus('mandatory')
cetct100ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cetct100ConfigMode.setStatus('mandatory')
cetct100FirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cetct100FirmwareRevision.setStatus('mandatory')
cetct100TPLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cetct100TPLink.setStatus('mandatory')
cetct100Collision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cetct100Collision.setStatus('mandatory')
cetct100CoaxActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cetct100CoaxActivity.setStatus('mandatory')
cetct100TPActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 12, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cetct100TPActivity.setStatus('mandatory')
cetct100CollisionsPerMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cetct100CollisionsPerMinute.setStatus('mandatory')
cetct100CollisionsPerHour = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cetct100CollisionsPerHour.setStatus('mandatory')
cetct100ConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 12, 1, 15), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cetct100ConnA.setStatus('mandatory')
cetct100ConnB = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 12, 1, 16), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cetct100ConnB.setStatus('mandatory')
cetct100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 12, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cetct100CacheClean.setStatus('mandatory')
ccscf100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13), )
if mibBuilder.loadTexts: ccscf100Table.setStatus('mandatory')
ccscf100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13, 1), ).setIndexNames((0, "MCC16-MIB", "ccscf100BiaIndex"), (0, "MCC16-MIB", "ccscf100SlotIndex"))
if mibBuilder.loadTexts: ccscf100Entry.setStatus('mandatory')
ccscf100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccscf100BiaIndex.setStatus('mandatory')
ccscf100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccscf100SlotIndex.setStatus('mandatory')
ccscf100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccscf100Groups.setStatus('mandatory')
ccscf100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccscf100MRevision.setStatus('mandatory')
ccscf100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccscf100CfgMatch.setStatus('mandatory')
ccscf100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccscf100SerialNumber.setStatus('mandatory')
ccscf100ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccscf100ConfigMode.setStatus('mandatory')
ccscf100FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccscf100FiberLink.setStatus('mandatory')
ccscf100CopperLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccscf100CopperLink.setStatus('mandatory')
ccscf100AISFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccscf100AISFiber.setStatus('mandatory')
ccscf100AISCopper = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccscf100AISCopper.setStatus('mandatory')
ccscf100DS3LineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("boost", 1), ("normal", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccscf100DS3LineBuildout.setStatus('mandatory')
ccscf100E3DS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("e3", 1), ("ds3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccscf100E3DS3.setStatus('mandatory')
ccscf100CopperLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccscf100CopperLoopback.setStatus('mandatory')
ccscf100FiberLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccscf100FiberLoopback.setStatus('mandatory')
ccscf100ConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13, 1, 16), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccscf100ConnA.setStatus('mandatory')
ccscf100ConnB = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13, 1, 17), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccscf100ConnB.setStatus('mandatory')
ccscf100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 13, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccscf100CacheClean.setStatus('mandatory')
cfetf105Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 14), )
if mibBuilder.loadTexts: cfetf105Table.setStatus('mandatory')
cfetf105Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 14, 1), ).setIndexNames((0, "MCC16-MIB", "cfetf105BiaIndex"), (0, "MCC16-MIB", "cfetf105SlotIndex"))
if mibBuilder.loadTexts: cfetf105Entry.setStatus('mandatory')
cfetf105BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf105BiaIndex.setStatus('mandatory')
cfetf105SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf105SlotIndex.setStatus('mandatory')
cfetf105Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 14, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfetf105Groups.setStatus('mandatory')
cfetf105MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf105MRevision.setStatus('mandatory')
cfetf105CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf105CfgMatch.setStatus('mandatory')
cfetf105SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf105SerialNumber.setStatus('mandatory')
cfetf105ConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 14, 1, 7), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf105ConnA.setStatus('mandatory')
cfetf105ConnB = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 14, 1, 8), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf105ConnB.setStatus('mandatory')
cfetf105TPLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf105TPLink.setStatus('mandatory')
cfetf105FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf105FiberLink.setStatus('mandatory')
cfetf105AutoNegot = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfetf105AutoNegot.setStatus('mandatory')
cfetf105LinkPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfetf105LinkPassThrough.setStatus('mandatory')
cfetf105AutoCross = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 14, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfetf105AutoCross.setStatus('mandatory')
cfetf105TPActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf105TPActivity.setStatus('mandatory')
cfetf105FiberActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 14, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf105FiberActivity.setStatus('mandatory')
cfetf105ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 14, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf105ConfigMode.setStatus('mandatory')
cfetf105CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 14, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf105CacheClean.setStatus('mandatory')
smacf100PTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15), )
if mibBuilder.loadTexts: smacf100PTable.setStatus('mandatory')
smacf100PEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1), ).setIndexNames((0, "MCC16-MIB", "smacf100PSubDeviceIndex"), (0, "MCC16-MIB", "smacf100PBiaIndex"), (0, "MCC16-MIB", "smacf100PSlotIndex"))
if mibBuilder.loadTexts: smacf100PEntry.setStatus('mandatory')
smacf100PSubDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PSubDeviceIndex.setStatus('mandatory')
smacf100PBiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PBiaIndex.setStatus('mandatory')
smacf100PSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PSlotIndex.setStatus('mandatory')
smacf100PGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100PGroups.setStatus('mandatory')
smacf100PCfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PCfgMatch.setStatus('mandatory')
smacf100PConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 6), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PConnA.setStatus('mandatory')
smacf100PLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PLink.setStatus('mandatory')
smacf100P100Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mbps100", 1), ("mbps10", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100P100Mbps.setStatus('mandatory')
smacf100PFullDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("negotiating", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100PFullDuplex.setStatus('mandatory')
smacf100PSACStat = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("changed", 1), ("same", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PSACStat.setStatus('mandatory')
smacf100PEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100PEnabled.setStatus('mandatory')
smacf100PAutoNegot = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100PAutoNegot.setStatus('mandatory')
smacf100PAdv10HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100PAdv10HDX.setStatus('mandatory')
smacf100PAdv10FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100PAdv10FDX.setStatus('mandatory')
smacf100PAdv100HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100PAdv100HDX.setStatus('mandatory')
smacf100PAdv100FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100PAdv100FDX.setStatus('mandatory')
smacf100PSTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notSupported", 1), ("disabled", 2), ("blocking", 3), ("listening", 4), ("learning", 5), ("forwarding", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100PSTPState.setStatus('mandatory')
smacf100PLastMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 18), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PLastMAC.setStatus('mandatory')
smacf100PFarEndFaultCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100PFarEndFaultCfg.setStatus('mandatory')
smacf100PFarEndFaultStat = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PFarEndFaultStat.setStatus('mandatory')
smacf100PTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PTxOctets.setStatus('mandatory')
smacf100PWrapTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PWrapTxOctets.setStatus('mandatory')
smacf100PRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PRxOctets.setStatus('mandatory')
smacf100PWrapRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PWrapRxOctets.setStatus('mandatory')
smacf100PSACCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100PSACCfg.setStatus('mandatory')
smacf100PBlockMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block", 1), ("pass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100PBlockMgmt.setStatus('mandatory')
smacf100PBlockPort = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block", 1), ("pass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100PBlockPort.setStatus('mandatory')
smacf100PTxDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PTxDropPkts.setStatus('mandatory')
smacf100PTxBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PTxBroadcastPkts.setStatus('mandatory')
smacf100PTxMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PTxMulticastPkts.setStatus('mandatory')
smacf100PTxUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PTxUnicastPkts.setStatus('mandatory')
smacf100PTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PTxCollisions.setStatus('mandatory')
smacf100PTxSingleCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PTxSingleCollision.setStatus('mandatory')
smacf100PTxMultipleCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PTxMultipleCollision.setStatus('mandatory')
smacf100PTxDeferredTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PTxDeferredTransmit.setStatus('mandatory')
smacf100PTxLateCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PTxLateCollision.setStatus('mandatory')
smacf100PTxExcessiveCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PTxExcessiveCollision.setStatus('mandatory')
smacf100PTxFrameInDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PTxFrameInDisc.setStatus('mandatory')
smacf100PTxPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100PTxPausePkts.setStatus('mandatory')
smacf100PRxUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PRxUndersizePkts.setStatus('mandatory')
smacf100PRxPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100PRxPausePkts.setStatus('mandatory')
smacf100PPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PPkts64Octets.setStatus('mandatory')
smacf100PPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PPkts65to127Octets.setStatus('mandatory')
smacf100PPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PPkts128to255Octets.setStatus('mandatory')
smacf100PPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PPkts256to511Octets.setStatus('mandatory')
smacf100PPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PPkts512to1023Octets.setStatus('mandatory')
smacf100PPkts1024to1522Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PPkts1024to1522Octets.setStatus('mandatory')
smacf100PRxOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PRxOversizePkts.setStatus('mandatory')
smacf100PRxJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PRxJabbers.setStatus('mandatory')
smacf100PRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PRxAlignmentErrors.setStatus('mandatory')
smacf100PRxFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PRxFCSErrors.setStatus('mandatory')
smacf100PRxGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PRxGoodOctets.setStatus('mandatory')
smacf100PWrapRxGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PWrapRxGoodOctets.setStatus('mandatory')
smacf100PRxDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PRxDropPkts.setStatus('mandatory')
smacf100PRxUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PRxUnicastPkts.setStatus('mandatory')
smacf100PRxMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PRxMulticastPkts.setStatus('mandatory')
smacf100PRxBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PRxBroadcastPkts.setStatus('mandatory')
smacf100PRxSAChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PRxSAChanges.setStatus('mandatory')
smacf100PRxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PRxFragments.setStatus('mandatory')
smacf100PRxExcessSizeDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PRxExcessSizeDisc.setStatus('mandatory')
smacf100PRxSymbolError = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PRxSymbolError.setStatus('mandatory')
smacf100PQosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100PQosPriority.setStatus('mandatory')
smacf100PQosPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100PQosPause.setStatus('mandatory')
smacf100PAdvPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 64), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100PAdvPause.setStatus('mandatory')
smacf100PCacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 15, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100PCacheClean.setStatus('mandatory')
cpsld100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 16), )
if mibBuilder.loadTexts: cpsld100Table.setStatus('mandatory')
cpsld100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 16, 1), ).setIndexNames((0, "MCC16-MIB", "cpsld100BiaIndex"), (0, "MCC16-MIB", "cpsld100SlotIndex"))
if mibBuilder.loadTexts: cpsld100Entry.setStatus('mandatory')
cpsld100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsld100BiaIndex.setStatus('mandatory')
cpsld100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsld100SlotIndex.setStatus('mandatory')
cpsld100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsld100SerialNumber.setStatus('mandatory')
cpsld100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsld100MRevision.setStatus('mandatory')
cpsld100Ps1Power = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsld100Ps1Power.setStatus('mandatory')
cpsld100Ps1InUse = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsld100Ps1InUse.setStatus('mandatory')
cpsld100Ps2Power = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsld100Ps2Power.setStatus('mandatory')
cpsld100Ps2InUse = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsld100Ps2InUse.setStatus('mandatory')
cdftf100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 17), )
if mibBuilder.loadTexts: cdftf100Table.setStatus('mandatory')
cdftf100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 17, 1), ).setIndexNames((0, "MCC16-MIB", "cdftf100SubDeviceIndex"), (0, "MCC16-MIB", "cdftf100BiaIndex"), (0, "MCC16-MIB", "cdftf100SlotIndex"))
if mibBuilder.loadTexts: cdftf100Entry.setStatus('mandatory')
cdftf100SubDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdftf100SubDeviceIndex.setStatus('mandatory')
cdftf100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdftf100BiaIndex.setStatus('mandatory')
cdftf100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdftf100SlotIndex.setStatus('mandatory')
cdftf100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 17, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdftf100Groups.setStatus('mandatory')
cdftf100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdftf100CfgMatch.setStatus('mandatory')
cdftf100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdftf100SerialNumber.setStatus('mandatory')
cdftf100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 17, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdftf100MRevision.setStatus('mandatory')
cdftf100TPLinkTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdftf100TPLinkTbl.setStatus('mandatory')
cdftf100FiberLinkTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdftf100FiberLinkTbl.setStatus('mandatory')
cdftf100TPActivityTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdftf100TPActivityTbl.setStatus('mandatory')
cdftf100FiberActivityTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 17, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdftf100FiberActivityTbl.setStatus('mandatory')
cdftf100ConnectorTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 17, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdftf100ConnectorTbl.setStatus('mandatory')
cdftf100FirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 17, 1, 13), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdftf100FirmwareRevision.setStatus('mandatory')
cdftf100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 17, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdftf100CacheClean.setStatus('mandatory')
cpsvt100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18), )
if mibBuilder.loadTexts: cpsvt100Table.setStatus('mandatory')
cpsvt100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1), ).setIndexNames((0, "MCC16-MIB", "cpsvt100BiaIndex"), (0, "MCC16-MIB", "cpsvt100SlotIndex"))
if mibBuilder.loadTexts: cpsvt100Entry.setStatus('mandatory')
cpsvt100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100BiaIndex.setStatus('mandatory')
cpsvt100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100SlotIndex.setStatus('mandatory')
cpsvt100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsvt100Groups.setStatus('mandatory')
cpsvt100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100MRevision.setStatus('mandatory')
cpsvt100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100CfgMatch.setStatus('mandatory')
cpsvt100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100SerialNumber.setStatus('mandatory')
cpsvt100FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100FiberLink.setStatus('mandatory')
cpsvt100CopperLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100CopperLink.setStatus('mandatory')
cpsvt100Fault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100Fault.setStatus('mandatory')
cpsvt100ConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 10), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100ConnA.setStatus('mandatory')
cpsvt100ConnB = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 11), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100ConnB.setStatus('mandatory')
cpsvt100TermTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("rxc", 1), ("kbps56", 2), ("kbps64", 3), ("kbps112", 4), ("kbps128", 5), ("kbps256", 6), ("kbps384", 7), ("kbps512", 8), ("kbps768", 9), ("kbps1024", 10), ("kbps1554", 11), ("kbps2048", 12), ("kbps3072", 13), ("kbps4096", 14), ("kbps6144", 15), ("asynchronous", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsvt100TermTiming.setStatus('mandatory')
cpsvt100LoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsvt100LoopBack.setStatus('mandatory')
cpsvt100CableMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notValid", 1), ("rs-530A", 2), ("rs-530", 3), ("x-21", 4), ("v-35", 5), ("rs-449", 6), ("rs-232", 7), ("disconnected", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100CableMode.setStatus('mandatory')
cpsvt100DCE = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100DCE.setStatus('mandatory')
cpsvt100InvertTX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rising", 1), ("falling", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100InvertTX.setStatus('mandatory')
cpsvt100InvertRX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rising", 1), ("falling", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100InvertRX.setStatus('mandatory')
cpsvt100ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100ConfigMode.setStatus('mandatory')
cpsvt100FirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100FirmwareRev.setStatus('mandatory')
cpsvt100RmtDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100RmtDetected.setStatus('mandatory')
cpsvt100RmtTermTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("rxc", 1), ("kbps56", 2), ("kbps64", 3), ("kbps112", 4), ("kbps128", 5), ("kbps256", 6), ("kbps384", 7), ("kbps512", 8), ("kbps768", 9), ("kbps1024", 10), ("kbps1554", 11), ("kbps2048", 12), ("kbps3072", 13), ("kbps4096", 14), ("kbps6144", 15), ("asynchronous", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsvt100RmtTermTiming.setStatus('mandatory')
cpsvt100RmtLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsvt100RmtLoopBack.setStatus('mandatory')
cpsvt100RmtCableMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsvt100RmtCableMode.setStatus('mandatory')
cpsvt100RmtDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsvt100RmtDCE.setStatus('mandatory')
cpsvt100RmtInvertTX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsvt100RmtInvertTX.setStatus('mandatory')
cpsvt100RmtInvertRX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsvt100RmtInvertRX.setStatus('mandatory')
cpsvt100RmtConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100RmtConfigMode.setStatus('mandatory')
cpsvt100RmtFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100RmtFirmwareRev.setStatus('mandatory')
cpsvt100RmtCopperLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100RmtCopperLink.setStatus('mandatory')
cpsvt100RmtFiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100RmtFiberLink.setStatus('mandatory')
cpsvt100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 18, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsvt100CacheClean.setStatus('mandatory')
cemtf100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 19), )
if mibBuilder.loadTexts: cemtf100Table.setStatus('mandatory')
cemtf100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 19, 1), ).setIndexNames((0, "MCC16-MIB", "cemtf100BiaIndex"), (0, "MCC16-MIB", "cemtf100SlotIndex"))
if mibBuilder.loadTexts: cemtf100Entry.setStatus('mandatory')
cemtf100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cemtf100BiaIndex.setStatus('mandatory')
cemtf100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cemtf100SlotIndex.setStatus('mandatory')
cemtf100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 19, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cemtf100Groups.setStatus('mandatory')
cemtf100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cemtf100MRevision.setStatus('mandatory')
cemtf100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cemtf100CfgMatch.setStatus('mandatory')
cemtf100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 19, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cemtf100SerialNumber.setStatus('mandatory')
cemtf100FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cemtf100FiberLink.setStatus('mandatory')
cemtf100OffHook = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 19, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cemtf100OffHook.setStatus('mandatory')
cemtf100Fault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 19, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cemtf100Fault.setStatus('mandatory')
cemtf100ConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 19, 1, 10), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cemtf100ConnA.setStatus('mandatory')
cemtf100ConnB = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 19, 1, 11), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cemtf100ConnB.setStatus('mandatory')
cemtf100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 19, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cemtf100CacheClean.setStatus('mandatory')
captf100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 20), )
if mibBuilder.loadTexts: captf100Table.setStatus('mandatory')
captf100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 20, 1), ).setIndexNames((0, "MCC16-MIB", "captf100BiaIndex"), (0, "MCC16-MIB", "captf100SlotIndex"))
if mibBuilder.loadTexts: captf100Entry.setStatus('mandatory')
captf100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captf100BiaIndex.setStatus('mandatory')
captf100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captf100SlotIndex.setStatus('mandatory')
captf100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 20, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: captf100Groups.setStatus('mandatory')
captf100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captf100MRevision.setStatus('mandatory')
captf100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: captf100CfgMatch.setStatus('mandatory')
captf100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 20, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captf100SerialNumber.setStatus('mandatory')
captf100FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: captf100FiberLink.setStatus('mandatory')
captf100InUse = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: captf100InUse.setStatus('mandatory')
captf100Fault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 20, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: captf100Fault.setStatus('mandatory')
captf100ConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 20, 1, 10), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captf100ConnA.setStatus('mandatory')
captf100ConnB = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 20, 1, 11), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captf100ConnB.setStatus('mandatory')
captf100FirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 20, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captf100FirmwareRev.setStatus('mandatory')
captf100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 20, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: captf100CacheClean.setStatus('mandatory')
captf100Emulates = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 20, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phone", 1), ("coStandard", 2), ("coAutoRingDown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: captf100Emulates.setStatus('mandatory')
cfetf205Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21), )
if mibBuilder.loadTexts: cfetf205Table.setStatus('mandatory')
cfetf205Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1), ).setIndexNames((0, "MCC16-MIB", "cfetf205BiaIndex"), (0, "MCC16-MIB", "cfetf205SlotIndex"))
if mibBuilder.loadTexts: cfetf205Entry.setStatus('mandatory')
cfetf205BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf205BiaIndex.setStatus('mandatory')
cfetf205SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf205SlotIndex.setStatus('mandatory')
cfetf205Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfetf205Groups.setStatus('mandatory')
cfetf205MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf205MRevision.setStatus('mandatory')
cfetf205CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf205CfgMatch.setStatus('mandatory')
cfetf205SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf205SerialNumber.setStatus('mandatory')
cfetf205ConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 7), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf205ConnA.setStatus('mandatory')
cfetf205ConnB = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 8), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf205ConnB.setStatus('mandatory')
cfetf205TPLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf205TPLink.setStatus('mandatory')
cfetf205FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf205FiberLink.setStatus('mandatory')
cfetf205Fault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf205Fault.setStatus('mandatory')
cfetf205FastLinkPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autonegotiate", 1), ("hdx100Btx", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfetf205FastLinkPulse.setStatus('mandatory')
cfetf205Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfetf205Enabled.setStatus('mandatory')
cfetf205Pause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfetf205Pause.setStatus('mandatory')
cfetf205LinkPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfetf205LinkPassThrough.setStatus('mandatory')
cfetf205AutoCross = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfetf205AutoCross.setStatus('mandatory')
cfetf205TPActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf205TPActivity.setStatus('mandatory')
cfetf205FiberActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf205FiberActivity.setStatus('mandatory')
cfetf205ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf205ConfigMode.setStatus('mandatory')
cfetf205FarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfetf205FarEndFault.setStatus('mandatory')
cfetf205CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 21, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfetf205CacheClean.setStatus('mandatory')
cbftf150Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22), )
if mibBuilder.loadTexts: cbftf150Table.setStatus('mandatory')
cbftf150Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1), ).setIndexNames((0, "MCC16-MIB", "cbftf150SubDeviceIndex"), (0, "MCC16-MIB", "cbftf150BiaIndex"), (0, "MCC16-MIB", "cbftf150SlotIndex"))
if mibBuilder.loadTexts: cbftf150Entry.setStatus('mandatory')
cbftf150SubDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf150SubDeviceIndex.setStatus('mandatory')
cbftf150BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf150BiaIndex.setStatus('mandatory')
cbftf150SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf150SlotIndex.setStatus('mandatory')
cbftf150Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf150Groups.setStatus('mandatory')
cbftf150MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf150MRevision.setStatus('mandatory')
cbftf150CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf150CfgMatch.setStatus('mandatory')
cbftf150SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf150SerialNumber.setStatus('mandatory')
cbftf150ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf150ConfigMode.setStatus('mandatory')
cbftf150FirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf150FirmwareRevision.setStatus('mandatory')
cbftf150FormFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("s1W2a", 1), ("s1W1N2a", 2), ("s1W1N1a", 3), ("s2W2N4a", 4), ("s2W1N5a", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf150FormFactor.setStatus('mandatory')
cbftf150AutoNegotTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf150AutoNegotTbl.setStatus('mandatory')
cbftf150FullDuplexTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("negotiating", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf150FullDuplexTbl.setStatus('mandatory')
cbftf150100MbpsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mbps100", 1), ("mbps10", 2), ("negotiating", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf150100MbpsTbl.setStatus('mandatory')
cbftf150CrossTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("mdi", 2), ("mdix", 3), ("notSupported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf150CrossTbl.setStatus('mandatory')
cbftf150FarEndFaultTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbftf150FarEndFaultTbl.setStatus('mandatory')
cbftf150ConnectorTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1, 16), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf150ConnectorTbl.setStatus('mandatory')
cbftf150LinkTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf150LinkTbl.setStatus('mandatory')
cbftf150PortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf150PortCount.setStatus('mandatory')
cbftf150CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 22, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbftf150CacheClean.setStatus('mandatory')
cgfeb100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23), )
if mibBuilder.loadTexts: cgfeb100Table.setStatus('mandatory')
cgfeb100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1), ).setIndexNames((0, "MCC16-MIB", "cgfeb100BiaIndex"), (0, "MCC16-MIB", "cgfeb100SlotIndex"))
if mibBuilder.loadTexts: cgfeb100Entry.setStatus('mandatory')
cgfeb100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100BiaIndex.setStatus('mandatory')
cgfeb100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100SlotIndex.setStatus('mandatory')
cgfeb100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100Groups.setStatus('mandatory')
cgfeb100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100MRevision.setStatus('mandatory')
cgfeb100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100CfgMatch.setStatus('mandatory')
cgfeb100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100SerialNumber.setStatus('mandatory')
cgfeb100ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100ConfigMode.setStatus('mandatory')
cgfeb100FirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100FirmwareRevision.setStatus('mandatory')
cgfeb100SelfTestFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100SelfTestFailed.setStatus('mandatory')
cgfeb100MonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fiber", 1), ("twistedPair", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100MonitorType.setStatus('mandatory')
cgfeb100LinkPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100LinkPassThrough.setStatus('mandatory')
cgfeb100QosEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100QosEnabled.setStatus('mandatory')
cgfeb100QosHPThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100QosHPThreshold.setStatus('mandatory')
cgfeb100QosLqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100QosLqWeight.setStatus('mandatory')
cgfeb100QosHqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100QosHqWeight.setStatus('mandatory')
cgfeb100ConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 16), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100ConnA.setStatus('mandatory')
cgfeb100TPLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100TPLink.setStatus('mandatory')
cgfeb100TPSpeedCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mbps10", 1), ("mbps100", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100TPSpeedCfg.setStatus('mandatory')
cgfeb100TPSpeedStat = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mbps10", 1), ("mbps100", 2), ("mbps1000", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100TPSpeedStat.setStatus('mandatory')
cgfeb100TPFullDuplexCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fdx", 1), ("hdx", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100TPFullDuplexCfg.setStatus('mandatory')
cgfeb100TPFullDuplexStat = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fdx", 1), ("hdx", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100TPFullDuplexStat.setStatus('mandatory')
cgfeb100TPCrossCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mdi", 1), ("mdix", 2), ("auto", 3), ("notApplicable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100TPCrossCfg.setStatus('mandatory')
cgfeb100TPCrossStat = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mdi", 1), ("mdix", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100TPCrossStat.setStatus('mandatory')
cgfeb100TPAutoNegot = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100TPAutoNegot.setStatus('mandatory')
cgfeb100TPAdv10HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3), ("enabledRO", 4), ("disabledRO", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100TPAdv10HDX.setStatus('mandatory')
cgfeb100TPAdv10FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3), ("enabledRO", 4), ("disabledRO", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100TPAdv10FDX.setStatus('mandatory')
cgfeb100TPAdv100HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3), ("enabledRO", 4), ("disabledRO", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100TPAdv100HDX.setStatus('mandatory')
cgfeb100TPAdv100FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3), ("enabledRO", 4), ("disabledRO", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100TPAdv100FDX.setStatus('mandatory')
cgfeb100TPAdv1000HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3), ("enabledRO", 4), ("disabledRO", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100TPAdv1000HDX.setStatus('mandatory')
cgfeb100TPAdv1000FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3), ("enabledRO", 4), ("disabledRO", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100TPAdv1000FDX.setStatus('mandatory')
cgfeb100TPLpAdvPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("symetric", 1), ("asymRX", 2), ("asymTX", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100TPLpAdvPause.setStatus('mandatory')
cgfeb100TPLpAdv10HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100TPLpAdv10HDX.setStatus('mandatory')
cgfeb100TPLpAdv10FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100TPLpAdv10FDX.setStatus('mandatory')
cgfeb100TPLpAdv100HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100TPLpAdv100HDX.setStatus('mandatory')
cgfeb100TPLpAdv100FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100TPLpAdv100FDX.setStatus('mandatory')
cgfeb100TPLpAdv1000HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100TPLpAdv1000HDX.setStatus('mandatory')
cgfeb100TPLpAdv1000FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100TPLpAdv1000FDX.setStatus('mandatory')
cgfeb100TPAdvPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("symetric", 1), ("asymRX", 2), ("asymTX", 3), ("disabled", 4), ("notApplicable", 5), ("symmetricRO", 6), ("asymRXRO", 7), ("asymTXRO", 8), ("disabledRO", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100TPAdvPause.setStatus('mandatory')
cgfeb100TPQosPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100TPQosPause.setStatus('mandatory')
cgfeb100TPSacCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100TPSacCfg.setStatus('mandatory')
cgfeb100TPSacStat = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("changed", 1), ("constant", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100TPSacStat.setStatus('mandatory')
cgfeb100ConnB = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 42), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100ConnB.setStatus('mandatory')
cgfeb100FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100FiberLink.setStatus('mandatory')
cgfeb100FiberFullDuplexCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fdx", 1), ("hdx", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100FiberFullDuplexCfg.setStatus('mandatory')
cgfeb100FiberFullDuplexStat = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fdx", 1), ("hdx", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100FiberFullDuplexStat.setStatus('mandatory')
cgfeb100FiberAutoNegot = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100FiberAutoNegot.setStatus('mandatory')
cgfeb100FiberAdv1000HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100FiberAdv1000HDX.setStatus('mandatory')
cgfeb100FiberAdv1000FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3), ("enabledRO", 4), ("disabledRO", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100FiberAdv1000FDX.setStatus('mandatory')
cgfeb100FiberLpAdv1000HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3), ("enabledRO", 4), ("disabledRO", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100FiberLpAdv1000HDX.setStatus('mandatory')
cgfeb100FiberLpAdv1000FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100FiberLpAdv1000FDX.setStatus('mandatory')
cgfeb100FiberLpAdvPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("symetric", 1), ("asymRX", 2), ("asymTX", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100FiberLpAdvPause.setStatus('mandatory')
cgfeb100FiberAdvPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("symetric", 1), ("asymRX", 2), ("asymTX", 3), ("disabled", 4), ("notApplicable", 5), ("symetricRO", 6), ("asymRXRO", 7), ("asymTXRO", 8), ("disabledRO", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100FiberAdvPause.setStatus('mandatory')
cgfeb100FiberQosPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100FiberQosPause.setStatus('mandatory')
cgfeb100FiberSacCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100FiberSacCfg.setStatus('mandatory')
cgfeb100FiberSacStat = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("changed", 1), ("constant", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100FiberSacStat.setStatus('mandatory')
cgfeb100MonitorTap = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transmit", 1), ("receive", 2), ("notInstalled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgfeb100MonitorTap.setStatus('mandatory')
cgfeb100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 23, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgfeb100CacheClean.setStatus('mandatory')
crmfe100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24), )
if mibBuilder.loadTexts: crmfe100Table.setStatus('mandatory')
crmfe100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1), ).setIndexNames((0, "MCC16-MIB", "crmfe100BiaIndex"), (0, "MCC16-MIB", "crmfe100SlotIndex"))
if mibBuilder.loadTexts: crmfe100Entry.setStatus('mandatory')
crmfe100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100BiaIndex.setStatus('mandatory')
crmfe100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100SlotIndex.setStatus('mandatory')
crmfe100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100Groups.setStatus('mandatory')
crmfe100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100MRevision.setStatus('mandatory')
crmfe100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100CfgMatch.setStatus('mandatory')
crmfe100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100SerialNumber.setStatus('mandatory')
crmfe100ConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 7), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100ConnA.setStatus('mandatory')
crmfe100ConnB = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 8), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100ConnB.setStatus('mandatory')
crmfe100TPLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100TPLink.setStatus('mandatory')
crmfe100FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100FiberLink.setStatus('mandatory')
crmfe100Fault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100Fault.setStatus('mandatory')
crmfe100Autonegot = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100Autonegot.setStatus('mandatory')
crmfe100Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100Enabled.setStatus('mandatory')
crmfe100Pause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100Pause.setStatus('mandatory')
crmfe100LinkPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100LinkPassThrough.setStatus('mandatory')
crmfe100AutoCross = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100AutoCross.setStatus('mandatory')
crmfe100TPActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100TPActivity.setStatus('mandatory')
crmfe100FiberActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100FiberActivity.setStatus('mandatory')
crmfe100ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100ConfigMode.setStatus('mandatory')
crmfe100FarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100FarEndFault.setStatus('mandatory')
crmfe100NetworkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tokenRing", 1), ("ethernet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100NetworkMode.setStatus('mandatory')
crmfe100UpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 22), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100UpTime.setStatus('mandatory')
crmfe100FirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100FirmwareRevision.setStatus('mandatory')
crmfe100RmtDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("detected", 1), ("notDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100RmtDetected.setStatus('mandatory')
crmfe100RmtTPLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100RmtTPLink.setStatus('mandatory')
crmfe100RmtFiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100RmtFiberLink.setStatus('mandatory')
crmfe100RmtFault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100RmtFault.setStatus('mandatory')
crmfe100RmtAutonegot = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100RmtAutonegot.setStatus('mandatory')
crmfe100RmtPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100RmtPause.setStatus('mandatory')
crmfe100RmtLinkPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100RmtLinkPassThrough.setStatus('mandatory')
crmfe100RmtAutoCross = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100RmtAutoCross.setStatus('mandatory')
crmfe100RmtTPActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100RmtTPActivity.setStatus('mandatory')
crmfe100RmtFiberActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100RmtFiberActivity.setStatus('mandatory')
crmfe100RmtConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100RmtConfigMode.setStatus('mandatory')
crmfe100RmtFarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100RmtFarEndFault.setStatus('mandatory')
crmfe100RmtLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100RmtLoopback.setStatus('mandatory')
crmfe100RmtNetworkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tokenRing", 1), ("ethernet", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100RmtNetworkMode.setStatus('mandatory')
crmfe100RmtUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 38), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100RmtUpTime.setStatus('mandatory')
crmfe100TxFxBwa = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100TxFxBwa.setStatus('mandatory')
crmfe100FxTxBwa = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100FxTxBwa.setStatus('mandatory')
crmfe100TxBytesH = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100TxBytesH.setStatus('mandatory')
crmfe100TxBytesL = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100TxBytesL.setStatus('mandatory')
crmfe100FxBytesH = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100FxBytesH.setStatus('mandatory')
crmfe100FxBytesL = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100FxBytesL.setStatus('mandatory')
crmfe100MscRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100MscRxBytes.setStatus('mandatory')
crmfe100MscTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100MscTxBytes.setStatus('mandatory')
crmfe100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crmfe100CacheClean.setStatus('mandatory')
crmfe100MbTxFxBwa = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100MbTxFxBwa.setStatus('mandatory')
crmfe100MbFxTxBwa = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 24, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crmfe100MbFxTxBwa.setStatus('mandatory')
crs2f100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25), )
if mibBuilder.loadTexts: crs2f100Table.setStatus('mandatory')
crs2f100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1), ).setIndexNames((0, "MCC16-MIB", "crs2f100BiaIndex"), (0, "MCC16-MIB", "crs2f100SlotIndex"))
if mibBuilder.loadTexts: crs2f100Entry.setStatus('mandatory')
crs2f100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs2f100BiaIndex.setStatus('mandatory')
crs2f100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs2f100SlotIndex.setStatus('mandatory')
crs2f100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crs2f100Groups.setStatus('mandatory')
crs2f100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs2f100MRevision.setStatus('mandatory')
crs2f100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs2f100CfgMatch.setStatus('mandatory')
crs2f100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs2f100SerialNumber.setStatus('mandatory')
crs2f100ConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 7), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs2f100ConnA.setStatus('mandatory')
crs2f100ConnB = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 8), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs2f100ConnB.setStatus('mandatory')
crs2f100FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs2f100FiberLink.setStatus('mandatory')
crs2f100Fault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs2f100Fault.setStatus('mandatory')
crs2f100FirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs2f100FirmwareRevision.setStatus('mandatory')
crs2f100Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crs2f100Loopback.setStatus('mandatory')
crs2f100DCE = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dCE", 1), ("dTE", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs2f100DCE.setStatus('mandatory')
crs2f100CopperActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs2f100CopperActivity.setStatus('mandatory')
crs2f100ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs2f100ConfigMode.setStatus('mandatory')
crs2f100RmtDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs2f100RmtDetected.setStatus('mandatory')
crs2f100RmtLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crs2f100RmtLoopback.setStatus('mandatory')
crs2f100RmtDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dCE", 1), ("dTE", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs2f100RmtDCE.setStatus('mandatory')
crs2f100RmtCopperActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs2f100RmtCopperActivity.setStatus('mandatory')
crs2f100RmtConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs2f100RmtConfigMode.setStatus('mandatory')
crs2f100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 25, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs2f100CacheClean.setStatus('mandatory')
crs4f100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 26), )
if mibBuilder.loadTexts: crs4f100Table.setStatus('mandatory')
crs4f100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 26, 1), ).setIndexNames((0, "MCC16-MIB", "crs4f100BiaIndex"), (0, "MCC16-MIB", "crs4f100SlotIndex"))
if mibBuilder.loadTexts: crs4f100Entry.setStatus('mandatory')
crs4f100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs4f100BiaIndex.setStatus('mandatory')
crs4f100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs4f100SlotIndex.setStatus('mandatory')
crs4f100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 26, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crs4f100Groups.setStatus('mandatory')
crs4f100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs4f100MRevision.setStatus('mandatory')
crs4f100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 26, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs4f100CfgMatch.setStatus('mandatory')
crs4f100SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 26, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs4f100SerialNumber.setStatus('mandatory')
crs4f100ConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 26, 1, 7), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs4f100ConnA.setStatus('mandatory')
crs4f100ConnB = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 26, 1, 8), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs4f100ConnB.setStatus('mandatory')
crs4f100FiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 26, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs4f100FiberLink.setStatus('mandatory')
crs4f100Fault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 26, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs4f100Fault.setStatus('mandatory')
crs4f100FirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 26, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs4f100FirmwareRevision.setStatus('mandatory')
crs4f100CopperActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 26, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs4f100CopperActivity.setStatus('mandatory')
crs4f100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 26, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean", 1), ("dirty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crs4f100CacheClean.setStatus('mandatory')
cmefg100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27), )
if mibBuilder.loadTexts: cmefg100Table.setStatus('mandatory')
cmefg100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1), ).setIndexNames((0, "MCC16-MIB", "cmefg100SubDeviceIndex"), (0, "MCC16-MIB", "cmefg100BiaIndex"), (0, "MCC16-MIB", "cmefg100SlotIndex"))
if mibBuilder.loadTexts: cmefg100Entry.setStatus('mandatory')
cmefg100SubDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100SubDeviceIndex.setStatus('mandatory')
cmefg100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100BiaIndex.setStatus('mandatory')
cmefg100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100SlotIndex.setStatus('mandatory')
cmefg100Groups = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100Groups.setStatus('mandatory')
cmefg100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100MRevision.setStatus('mandatory')
cmefg100CfgMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100CfgMatch.setStatus('mandatory')
cmefg100ImcLocEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100ImcLocEnable.setStatus('mandatory')
cmefg100ImcLocReset = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("doNothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100ImcLocReset.setStatus('mandatory')
cmefg100ImcRmtEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100ImcRmtEnable.setStatus('mandatory')
cmefg100ImcRmtReset = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("doNothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100ImcRmtReset.setStatus('mandatory')
cmefg100ImcRxAlignmentErrorsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxAlignmentErrorsTbl.setStatus('mandatory')
cmefg100ImcRxBroadcastPktsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxBroadcastPktsTbl.setStatus('mandatory')
cmefg100ImcRxDropPktsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxDropPktsTbl.setStatus('mandatory')
cmefg100ImcRxExcessSizeDiscTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxExcessSizeDiscTbl.setStatus('mandatory')
cmefg100ImcRxFCSErrorsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxFCSErrorsTbl.setStatus('mandatory')
cmefg100ImcRxFragmentsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxFragmentsTbl.setStatus('mandatory')
cmefg100ImcRxGoodOctetsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxGoodOctetsTbl.setStatus('mandatory')
cmefg100ImcRxGoodOctetsWrapTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxGoodOctetsWrapTbl.setStatus('mandatory')
cmefg100ImcRxJabbersTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxJabbersTbl.setStatus('mandatory')
cmefg100ImcRxMulticastPktsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxMulticastPktsTbl.setStatus('mandatory')
cmefg100ImcRxOctetsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxOctetsTbl.setStatus('mandatory')
cmefg100ImcRxOctetsWrapTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxOctetsWrapTbl.setStatus('mandatory')
cmefg100ImcRxOversizePktsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxOversizePktsTbl.setStatus('mandatory')
cmefg100ImcRxPausePktsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxPausePktsTbl.setStatus('mandatory')
cmefg100ImcRxPkts1024to1522OctetsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxPkts1024to1522OctetsTbl.setStatus('mandatory')
cmefg100ImcRxPkts128to255OctetsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxPkts128to255OctetsTbl.setStatus('mandatory')
cmefg100ImcRxPkts256to511OctetsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxPkts256to511OctetsTbl.setStatus('mandatory')
cmefg100ImcRxPkts512to1023OctetsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxPkts512to1023OctetsTbl.setStatus('mandatory')
cmefg100ImcRxPkts64OctetsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxPkts64OctetsTbl.setStatus('mandatory')
cmefg100ImcRxPkts65to127OctetsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxPkts65to127OctetsTbl.setStatus('mandatory')
cmefg100ImcRxQosOctetsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxQosOctetsTbl.setStatus('mandatory')
cmefg100ImcRxQosOctetsWrapTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxQosOctetsWrapTbl.setStatus('mandatory')
cmefg100ImcRxQosPktsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxQosPktsTbl.setStatus('mandatory')
cmefg100ImcRxSAChangesTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxSAChangesTbl.setStatus('mandatory')
cmefg100ImcRxSymbolErrorTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxSymbolErrorTbl.setStatus('mandatory')
cmefg100ImcRxUndersizePktsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxUndersizePktsTbl.setStatus('mandatory')
cmefg100ImcRxUnicastPktsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcRxUnicastPktsTbl.setStatus('mandatory')
cmefg100ImcTxBroadcastPktsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcTxBroadcastPktsTbl.setStatus('mandatory')
cmefg100ImcTxCollisionsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcTxCollisionsTbl.setStatus('mandatory')
cmefg100ImcTxDeferredTransmitTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcTxDeferredTransmitTbl.setStatus('mandatory')
cmefg100ImcTxDropPktsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcTxDropPktsTbl.setStatus('mandatory')
cmefg100ImcTxExcessiveCollisionTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcTxExcessiveCollisionTbl.setStatus('mandatory')
cmefg100ImcTxFrameInDiscTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcTxFrameInDiscTbl.setStatus('mandatory')
cmefg100ImcTxLateCollisionTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcTxLateCollisionTbl.setStatus('mandatory')
cmefg100ImcTxMulticastPktsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcTxMulticastPktsTbl.setStatus('mandatory')
cmefg100ImcTxMultipleCollisionTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcTxMultipleCollisionTbl.setStatus('mandatory')
cmefg100ImcTxOctetsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcTxOctetsTbl.setStatus('mandatory')
cmefg100ImcTxOctetsWrapTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcTxOctetsWrapTbl.setStatus('mandatory')
cmefg100ImcTxPausePktsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcTxPausePktsTbl.setStatus('mandatory')
cmefg100ImcTxQosOctetsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcTxQosOctetsTbl.setStatus('mandatory')
cmefg100ImcTxQosOctetsWrapTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcTxQosOctetsWrapTbl.setStatus('mandatory')
cmefg100ImcTxQosPktsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcTxQosPktsTbl.setStatus('mandatory')
cmefg100ImcTxSingleCollisionTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcTxSingleCollisionTbl.setStatus('mandatory')
cmefg100ImcTxUnicastPktsTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100ImcTxUnicastPktsTbl.setStatus('mandatory')
cmefg100LadCacheCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loadCache", 1), ("doNothing", 2), ("release", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LadCacheCmd.setStatus('mandatory')
cmefg100LadCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ready", 1), ("empty", 2), ("transferring", 3), ("bufferBusy", 4), ("stale", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LadCacheState.setStatus('mandatory')
cmefg100LadEditCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("write", 1), ("delete", 2), ("doNothing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LadEditCmd.setStatus('mandatory')
cmefg100LadEditMac = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 58), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LadEditMac.setStatus('mandatory')
cmefg100LadEditPort = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("twistedPair", 1), ("fiber", 2), ("drop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LadEditPort.setStatus('mandatory')
cmefg100LadEditVid = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LadEditVid.setStatus('mandatory')
cmefg100LadEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LadEntries.setStatus('mandatory')
cmefg100LadMacTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 62), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LadMacTbl.setStatus('mandatory')
cmefg100LadPortTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("twistedPair", 1), ("fiber", 2), ("drop", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LadPortTbl.setStatus('mandatory')
cmefg100LadStaticTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LadStaticTbl.setStatus('mandatory')
cmefg100LadVidTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LadVidTbl.setStatus('mandatory')
cmefg100LocColdstart = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocColdstart.setStatus('mandatory')
cmefg100LocDmiRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocDmiRxPower.setStatus('mandatory')
cmefg100LocDmiRxPowerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("notSupported", 2), ("lowWarn", 3), ("highWarn", 4), ("lowAlarm", 5), ("highAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocDmiRxPowerAlarm.setStatus('mandatory')
cmefg100LocDmiTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocDmiTemp.setStatus('mandatory')
cmefg100LocDmiTempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("notSupported", 2), ("lowWarn", 3), ("highWarn", 4), ("lowAlarm", 5), ("highAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocDmiTempAlarm.setStatus('mandatory')
cmefg100LocDmiTxBiasAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("notSupported", 2), ("lowWarn", 3), ("highWarn", 4), ("lowAlarm", 5), ("highAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocDmiTxBiasAlarm.setStatus('mandatory')
cmefg100LocDmiTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocDmiTxBiasCurrent.setStatus('mandatory')
cmefg100LocDmiTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocDmiTxPower.setStatus('mandatory')
cmefg100LocDmiTxPowerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("notSupported", 2), ("lowWarn", 3), ("highWarn", 4), ("lowAlarm", 5), ("highAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocDmiTxPowerAlarm.setStatus('mandatory')
cmefg100LocFiberAdv1000FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocFiberAdv1000FDX.setStatus('mandatory')
cmefg100LocFiberAdv1000HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocFiberAdv1000HDX.setStatus('mandatory')
cmefg100LocFiberAutoNegot = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocFiberAutoNegot.setStatus('mandatory')
cmefg100LocFiberConnA = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 78), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocFiberConnA.setStatus('mandatory')
cmefg100LocFiberDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("forceFDX", 1), ("forceHDX", 2), ("autoFDX", 3), ("autoHDX", 4), ("negotiating", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocFiberDuplex.setStatus('mandatory')
cmefg100LocFiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocFiberLink.setStatus('mandatory')
cmefg100LocFiberPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("asymmetricRx", 1), ("asymmetricTx", 2), ("symmetric", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocFiberPause.setStatus('mandatory')
cmefg100LocFiberQosPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocFiberQosPause.setStatus('mandatory')
cmefg100LocFiberSacEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocFiberSacEnable.setStatus('mandatory')
cmefg100LocFiberSacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("changed", 1), ("constant", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocFiberSacStatus.setStatus('mandatory')
cmefg100LocFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocFirmwareRevision.setStatus('mandatory')
cmefg100LocFpgaRev = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocFpgaRev.setStatus('mandatory')
cmefg100LocFxTxBwaKb = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 122112))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocFxTxBwaKb.setStatus('mandatory')
cmefg100LocFxTxBwaMb = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocFxTxBwaMb.setStatus('mandatory')
cmefg100LocOamActiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamActiveMode.setStatus('mandatory')
cmefg100LocOamAdminControl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocOamAdminControl.setStatus('mandatory')
cmefg100LocOamConfigRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamConfigRevision.setStatus('mandatory')
cmefg100LocOamControlInUnknownOpcodes = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamControlInUnknownOpcodes.setStatus('mandatory')
cmefg100LocOamCriticalEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("critical", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamCriticalEvent.setStatus('mandatory')
cmefg100LocOamDuplicateEventNotificationRx = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamDuplicateEventNotificationRx.setStatus('mandatory')
cmefg100LocOamFramesLostDueToOamError = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamFramesLostDueToOamError.setStatus('mandatory')
cmefg100LocOamInformationRx = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 96), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamInformationRx.setStatus('mandatory')
cmefg100LocOamInformationTx = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamInformationTx.setStatus('mandatory')
cmefg100LocOamLastGasp = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failure", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamLastGasp.setStatus('mandatory')
cmefg100LocOamLinkEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamLinkEvents.setStatus('mandatory')
cmefg100LocOamLinkFault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fault", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamLinkFault.setStatus('mandatory')
cmefg100LocOamLocDteDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("completed", 1), ("notCompleted", 2), ("unsatisfied", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamLocDteDisc.setStatus('mandatory')
cmefg100LocOamLoopbackControlRx = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamLoopbackControlRx.setStatus('mandatory')
cmefg100LocOamLoopbackControlTx = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 103), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamLoopbackControlTx.setStatus('mandatory')
cmefg100LocOamMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 104), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamMacAddress.setStatus('mandatory')
cmefg100LocOamMaxOamPduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamMaxOamPduSize.setStatus('mandatory')
cmefg100LocOamMultiplexorState = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("discarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamMultiplexorState.setStatus('mandatory')
cmefg100LocOamOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("linkFault", 1), ("activeSendLocal", 2), ("passiveWait", 3), ("sendLocalRemote", 4), ("sendLocalRemoteOk", 5), ("sendAny", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamOperStatus.setStatus('mandatory')
cmefg100LocOamOrgSpecificRx = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamOrgSpecificRx.setStatus('mandatory')
cmefg100LocOamOrgSpecificTx = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 109), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamOrgSpecificTx.setStatus('mandatory')
cmefg100LocOamParserState = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forwarding", 1), ("discarding", 2), ("looping", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamParserState.setStatus('mandatory')
cmefg100LocOamRmtDteDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("completed", 1), ("notCompleted", 2), ("unsatisfied", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamRmtDteDisc.setStatus('mandatory')
cmefg100LocOamRmtLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamRmtLoopback.setStatus('mandatory')
cmefg100LocOamUnidirectional = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamUnidirectional.setStatus('mandatory')
cmefg100LocOamVarRetrieval = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocOamVarRetrieval.setStatus('mandatory')
cmefg100LocSelfTestFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocSelfTestFailed.setStatus('mandatory')
cmefg100LocSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 116), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocSerialNumber.setStatus('mandatory')
cmefg100LocTpAdv1000FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 117), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocTpAdv1000FDX.setStatus('mandatory')
cmefg100LocTpAdv1000HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 118), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocTpAdv1000HDX.setStatus('mandatory')
cmefg100LocTpAdv100FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocTpAdv100FDX.setStatus('mandatory')
cmefg100LocTpAdv100HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 120), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocTpAdv100HDX.setStatus('mandatory')
cmefg100LocTpAdv10FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 121), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocTpAdv10FDX.setStatus('mandatory')
cmefg100LocTpAdv10HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 122), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocTpAdv10HDX.setStatus('mandatory')
cmefg100LocTpAutoNegot = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 123), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocTpAutoNegot.setStatus('mandatory')
cmefg100LocTpConnB = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 124), CpsConnector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocTpConnB.setStatus('mandatory')
cmefg100LocTpCross = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 125), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceMDI", 1), ("forceMDI-X", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocTpCross.setStatus('mandatory')
cmefg100LocTpDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 126), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("forceFDX", 1), ("forceHDX", 2), ("autoFDX", 3), ("autoHDX", 4), ("negotiating", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocTpDuplex.setStatus('mandatory')
cmefg100LocTpLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 127), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocTpLink.setStatus('mandatory')
cmefg100LocTpPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 128), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("asymmetricRx", 1), ("asymmetricTx", 2), ("symmetric", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocTpPause.setStatus('mandatory')
cmefg100LocTpQosPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 129), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocTpQosPause.setStatus('mandatory')
cmefg100LocTpSacEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocTpSacEnable.setStatus('mandatory')
cmefg100LocTpSacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 131), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("changed", 1), ("constant", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100LocTpSacStatus.setStatus('mandatory')
cmefg100LocTpSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 132), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("force10Mbps", 1), ("force100Mbps", 2), ("auto10Mbps", 3), ("auto100Mbps", 4), ("auto1000Mbps", 5), ("negotiating", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocTpSpeed.setStatus('mandatory')
cmefg100LocTxFxBwaKb = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 133), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 122112))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocTxFxBwaKb.setStatus('mandatory')
cmefg100LocTxFxBwaMb = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 134), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocTxFxBwaMb.setStatus('mandatory')
cmefg100LocUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 135), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100LocUptime.setStatus('mandatory')
cmefg100QosHqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 136), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100QosHqWeight.setStatus('mandatory')
cmefg100QosLqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 137), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100QosLqWeight.setStatus('mandatory')
cmefg100QosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 138), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100QosPriority.setStatus('mandatory')
cmefg100RmtColdStart = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 139), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtColdStart.setStatus('mandatory')
cmefg100RmtDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 140), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtDetected.setStatus('mandatory')
cmefg100RmtDmiRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 141), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtDmiRxPower.setStatus('mandatory')
cmefg100RmtDmiRxPowerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 142), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("notSupported", 2), ("lowWarn", 3), ("highWarn", 4), ("lowAlarm", 5), ("highAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtDmiRxPowerAlarm.setStatus('mandatory')
cmefg100RmtDmiTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 143), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtDmiTemp.setStatus('mandatory')
cmefg100RmtDmiTempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 144), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("notSupported", 2), ("lowWarn", 3), ("highWarn", 4), ("lowAlarm", 5), ("highAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtDmiTempAlarm.setStatus('mandatory')
cmefg100RmtDmiTxBiasAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 145), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("notSupported", 2), ("lowWarn", 3), ("highWarn", 4), ("lowAlarm", 5), ("highAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtDmiTxBiasAlarm.setStatus('mandatory')
cmefg100RmtDmiTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 146), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtDmiTxBiasCurrent.setStatus('mandatory')
cmefg100RmtDmiTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 147), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtDmiTxPower.setStatus('mandatory')
cmefg100RmtDmiTxPowerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 148), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("notSupported", 2), ("lowWarn", 3), ("highWarn", 4), ("lowAlarm", 5), ("highAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtDmiTxPowerAlarm.setStatus('mandatory')
cmefg100RmtFactoryReset = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 149), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("doNothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100RmtFactoryReset.setStatus('mandatory')
cmefg100RmtFiberAutoNegot = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 150), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100RmtFiberAutoNegot.setStatus('mandatory')
cmefg100RmtFiberLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 151), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtFiberLink.setStatus('mandatory')
cmefg100RmtFiberPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 152), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("asymmetricRx", 1), ("asymmetricTx", 2), ("symmetric", 3), ("notSupported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100RmtFiberPause.setStatus('mandatory')
cmefg100RmtFiberQosPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 153), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100RmtFiberQosPause.setStatus('mandatory')
cmefg100RmtFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 154), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtFirmwareRevision.setStatus('mandatory')
cmefg100RmtFpgaRev = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 155), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtFpgaRev.setStatus('mandatory')
cmefg100RmtOamActiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 156), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtOamActiveMode.setStatus('mandatory')
cmefg100RmtOamCriticalEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 157), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("critical", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtOamCriticalEvent.setStatus('mandatory')
cmefg100RmtOamLastGasp = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 158), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failure", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtOamLastGasp.setStatus('mandatory')
cmefg100RmtOamLinkEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 159), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtOamLinkEvents.setStatus('mandatory')
cmefg100RmtOamLinkFault = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 160), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fault", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtOamLinkFault.setStatus('mandatory')
cmefg100RmtOamLocDteDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 161), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("completed", 1), ("notCompleted", 2), ("unsatisfied", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtOamLocDteDisc.setStatus('mandatory')
cmefg100RmtOamPeerConfigRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 162), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtOamPeerConfigRevision.setStatus('mandatory')
cmefg100RmtOamPeerMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 163), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtOamPeerMacAddress.setStatus('mandatory')
cmefg100RmtOamPeerMaxOamPduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 164), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtOamPeerMaxOamPduSize.setStatus('mandatory')
cmefg100RmtOamPeerMultiplexorState = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 165), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("discarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtOamPeerMultiplexorState.setStatus('mandatory')
cmefg100RmtOamPeerParserState = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 166), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forwarding", 1), ("discarding", 2), ("looping", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtOamPeerParserState.setStatus('mandatory')
cmefg100RmtOamPeerVendorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 167), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtOamPeerVendorInfo.setStatus('mandatory')
cmefg100RmtOamPeerVendorOui = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 168), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtOamPeerVendorOui.setStatus('mandatory')
cmefg100RmtOamRmtDteDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 169), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("completed", 1), ("notCompleted", 2), ("unsatisfied", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtOamRmtDteDisc.setStatus('mandatory')
cmefg100RmtOamRmtLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 170), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabledOam", 1), ("enabledAlternate", 2), ("disabled", 3), ("notSupported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100RmtOamRmtLoopback.setStatus('mandatory')
cmefg100RmtOamUnidirectional = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 171), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtOamUnidirectional.setStatus('mandatory')
cmefg100RmtOamVarRetrieval = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 172), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtOamVarRetrieval.setStatus('mandatory')
cmefg100RmtSelfTestFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 173), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtSelfTestFailed.setStatus('mandatory')
cmefg100RmtSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 174), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtSerialNumber.setStatus('mandatory')
cmefg100RmtTpAdv1000FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 175), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100RmtTpAdv1000FDX.setStatus('mandatory')
cmefg100RmtTpAdv1000HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 176), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100RmtTpAdv1000HDX.setStatus('mandatory')
cmefg100RmtTpAdv100FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 177), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100RmtTpAdv100FDX.setStatus('mandatory')
cmefg100RmtTpAdv100HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 178), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100RmtTpAdv100HDX.setStatus('mandatory')
cmefg100RmtTpAdv10FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 179), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100RmtTpAdv10FDX.setStatus('mandatory')
cmefg100RmtTpAdv10HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 180), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100RmtTpAdv10HDX.setStatus('mandatory')
cmefg100RmtTpAutoNegot = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 181), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100RmtTpAutoNegot.setStatus('mandatory')
cmefg100RmtTpCross = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 182), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceMDI", 1), ("forceMDI-X", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100RmtTpCross.setStatus('mandatory')
cmefg100RmtTpDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 183), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("forceFDX", 1), ("forceHDX", 2), ("autoFDX", 3), ("autoHDX", 4), ("negotiating", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100RmtTpDuplex.setStatus('mandatory')
cmefg100RmtTpLink = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 184), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100RmtTpLink.setStatus('mandatory')
cmefg100RmtTpPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 185), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("asymmetricRx", 1), ("asymmetricTx", 2), ("symmetric", 3), ("notSupported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100RmtTpPause.setStatus('mandatory')
cmefg100RmtTpQosPause = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 186), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100RmtTpQosPause.setStatus('mandatory')
cmefg100RmtTpSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 187), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("force10Mbps", 1), ("force100Mbps", 2), ("auto10Mbps", 3), ("auto100Mbps", 4), ("auto1000Mbps", 5), ("negotiating", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100RmtTpSpeed.setStatus('mandatory')
cmefg100RmtUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 188), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100RmtUptime.setStatus('mandatory')
cmefg100VlanCacheCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 189), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loadCache", 1), ("doNothing", 2), ("release", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100VlanCacheCmd.setStatus('mandatory')
cmefg100VlanCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 190), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 1), ("empty", 2), ("transferring", 3), ("bufferBusy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100VlanCacheState.setStatus('mandatory')
cmefg100VlanEditCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 191), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("write", 1), ("delete", 2), ("doNothing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100VlanEditCmd.setStatus('mandatory')
cmefg100VlanEditFwdFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 192), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("forward", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100VlanEditFwdFiber.setStatus('mandatory')
cmefg100VlanEditFwdTp = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 193), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("forward", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100VlanEditFwdTp.setStatus('mandatory')
cmefg100VlanEditUntagFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 194), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("untag", 1), ("asIs", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100VlanEditUntagFiber.setStatus('mandatory')
cmefg100VlanEditUntagTp = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 195), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("untag", 1), ("asIs", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100VlanEditUntagTp.setStatus('mandatory')
cmefg100VlanEditVid = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 196), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100VlanEditVid.setStatus('mandatory')
cmefg100VlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 197), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100VlanEnable.setStatus('mandatory')
cmefg100VlanEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 198), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100VlanEntries.setStatus('mandatory')
cmefg100VlanFiberDefaultPri = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 199), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100VlanFiberDefaultPri.setStatus('mandatory')
cmefg100VlanFiberDefaultVid = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 200), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100VlanFiberDefaultVid.setStatus('mandatory')
cmefg100VlanFiberInUntaggedDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 201), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("forward", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100VlanFiberInUntaggedDrop.setStatus('mandatory')
cmefg100VlanFwdFiberTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 202), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("forward", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100VlanFwdFiberTbl.setStatus('mandatory')
cmefg100VlanFwdTpTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 203), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("forward", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100VlanFwdTpTbl.setStatus('mandatory')
cmefg100VlanIngressVidHitNoMem = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 204), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward", 1), ("drop", 2), ("learn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100VlanIngressVidHitNoMem.setStatus('mandatory')
cmefg100VlanIngressVidMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 205), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flood", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100VlanIngressVidMiss.setStatus('mandatory')
cmefg100VlanPriMapTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 206), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100VlanPriMapTbl.setStatus('mandatory')
cmefg100VlanPriTagCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 207), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("asIs", 1), ("remapPriority", 2), ("remapVid", 3), ("remapBoth", 4), ("notApplicable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100VlanPriTagCtrl.setStatus('mandatory')
cmefg100VlanSetFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 208), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100VlanSetFailed.setStatus('mandatory')
cmefg100VlanTagIn = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 209), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tag", 1), ("noTag", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100VlanTagIn.setStatus('mandatory')
cmefg100VlanTpDefaultPri = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 210), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100VlanTpDefaultPri.setStatus('mandatory')
cmefg100VlanTpDefaultVid = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 211), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100VlanTpDefaultVid.setStatus('mandatory')
cmefg100VlanTpInUntaggedDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 212), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100VlanTpInUntaggedDrop.setStatus('mandatory')
cmefg100VlanUntagFiberTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 213), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("untag", 1), ("asIs", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100VlanUntagFiberTbl.setStatus('mandatory')
cmefg100VlanUntagTpTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 214), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("untag", 1), ("asIs", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100VlanUntagTpTbl.setStatus('mandatory')
cmefg100VlanVidTagCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 215), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("asIs", 1), ("remapPriority", 2), ("remapVid", 3), ("remapBoth", 4), ("notApplicable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100VlanVidTagCtrl.setStatus('mandatory')
cmefg100VlanVidTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 216), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmefg100VlanVidTbl.setStatus('mandatory')
cmefg100CacheClean = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 1, 2, 2, 27, 1, 217), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmefg100CacheClean.setStatus('mandatory')
mcc16ComHwReset = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcc16ComHwReset.setStatus('mandatory')
mcc16ComMgmtHwRev = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcc16ComMgmtHwRev.setStatus('mandatory')
mcc16ComMgmtSwRev = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcc16ComMgmtSwRev.setStatus('mandatory')
mcc16ComIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcc16ComIpAddr.setStatus('mandatory')
mcc16ComNetMask = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcc16ComNetMask.setStatus('mandatory')
mcc16ComGateway = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcc16ComGateway.setStatus('mandatory')
mcc16ComPS1Power = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcc16ComPS1Power.setStatus('mandatory')
mcc16ComPS1InUse = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcc16ComPS1InUse.setStatus('mandatory')
mcc16ComPS2Power = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcc16ComPS2Power.setStatus('mandatory')
mcc16ComPS2InUse = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcc16ComPS2InUse.setStatus('mandatory')
mcc16ComNotes = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcc16ComNotes.setStatus('mandatory')
mcc16SlotTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 1, 2, 1), )
if mibBuilder.loadTexts: mcc16SlotTable.setStatus('mandatory')
mcc16SlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 1, 2, 1, 1), ).setIndexNames((0, "MCC16-MIB", "mcc16Index"))
if mibBuilder.loadTexts: mcc16SlotEntry.setStatus('mandatory')
mcc16Index = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcc16Index.setStatus('mandatory')
mcc16DeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 1, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcc16DeviceType.setStatus('mandatory')
mcc16Error = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 4, 2) + (0,101))
mcc16ErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 4, 2) + (0,102))
mcc16PSState = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 4, 2) + (0,103))
pSError = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 1) + (0,111))
pSErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 1) + (0,112))
pSDeviceInserted = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 1) + (0,113))
pSDeviceRemoved = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 1) + (0,114))
pSDeviceColdStart = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 1) + (0,115))
pSPowerLost = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 1) + (0,116))
pSCabinetAdded = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 1) + (0,117))
pSCabinetRemoved = NotificationType((1, 3, 6, 1, 4, 1, 868, 1, 4, 1, 2, 1) + (0,118))
cpsCabinetTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 1, 1), )
if mibBuilder.loadTexts: cpsCabinetTable.setStatus('mandatory')
cpsCabinetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 1, 1, 1), ).setIndexNames((0, "MCC16-MIB", "cpsCabinetBiaIndex"))
if mibBuilder.loadTexts: cpsCabinetEntry.setStatus('mandatory')
cpsCabinetBiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCabinetBiaIndex.setStatus('mandatory')
cpsCabinetModel = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 1, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCabinetModel.setStatus('mandatory')
cpsCabinetDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 1, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsCabinetDescription.setStatus('mandatory')
cpsCabinetSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCabinetSequence.setStatus('mandatory')
cpsMc1800Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 1), )
if mibBuilder.loadTexts: cpsMc1800Table.setStatus('mandatory')
cpsMc1800Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 1, 1), ).setIndexNames((0, "MCC16-MIB", "cpsMc1800BiaIndex"))
if mibBuilder.loadTexts: cpsMc1800Entry.setStatus('mandatory')
cpsMc1800BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc1800BiaIndex.setStatus('mandatory')
cpsMc1800Description = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc1800Description.setStatus('mandatory')
cpsMc1800PSPower1 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc1800PSPower1.setStatus('mandatory')
cpsMc1800PSInUse1 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc1800PSInUse1.setStatus('mandatory')
cpsMc1800PSPower2 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc1800PSPower2.setStatus('mandatory')
cpsMc1800PSInUse2 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc1800PSInUse2.setStatus('mandatory')
cpsMc1800MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc1800MRevision.setStatus('mandatory')
cpsMc1300Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 2), )
if mibBuilder.loadTexts: cpsMc1300Table.setStatus('mandatory')
cpsMc1300Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 2, 1), ).setIndexNames((0, "MCC16-MIB", "cpsMc1300BiaIndex"))
if mibBuilder.loadTexts: cpsMc1300Entry.setStatus('mandatory')
cpsMc1300BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc1300BiaIndex.setStatus('mandatory')
cpsMc1300Description = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc1300Description.setStatus('mandatory')
cpsMc1300PSPower1 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc1300PSPower1.setStatus('mandatory')
cpsMc1300PSInUse1 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc1300PSInUse1.setStatus('mandatory')
cpsMc1300PSPower2 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc1300PSPower2.setStatus('mandatory')
cpsMc1300PSInUse2 = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc1300PSInUse2.setStatus('mandatory')
cpsMc1300MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc1300MRevision.setStatus('mandatory')
cpsMc0200Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 3), )
if mibBuilder.loadTexts: cpsMc0200Table.setStatus('mandatory')
cpsMc0200Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 3, 1), ).setIndexNames((0, "MCC16-MIB", "cpsMc0200BiaIndex"))
if mibBuilder.loadTexts: cpsMc0200Entry.setStatus('mandatory')
cpsMc0200BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc0200BiaIndex.setStatus('mandatory')
cpsMc0200Description = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc0200Description.setStatus('mandatory')
cpsMc0200MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc0200MRevision.setStatus('mandatory')
cpsMc1900Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 4), )
if mibBuilder.loadTexts: cpsMc1900Table.setStatus('mandatory')
cpsMc1900Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 4, 1), ).setIndexNames((0, "MCC16-MIB", "cpsMc1900BiaIndex"))
if mibBuilder.loadTexts: cpsMc1900Entry.setStatus('mandatory')
cpsMc1900BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc1900BiaIndex.setStatus('mandatory')
cpsMc1900Description = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc1900Description.setStatus('mandatory')
cpsMc1900MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc1900MRevision.setStatus('mandatory')
smacf100Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 5), )
if mibBuilder.loadTexts: smacf100Table.setStatus('mandatory')
smacf100Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 5, 1), ).setIndexNames((0, "MCC16-MIB", "smacf100BiaIndex"))
if mibBuilder.loadTexts: smacf100Entry.setStatus('mandatory')
smacf100BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100BiaIndex.setStatus('mandatory')
smacf100Description = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100Description.setStatus('mandatory')
smacf100MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100MRevision.setStatus('mandatory')
smacf100SpanningTree = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100SpanningTree.setStatus('mandatory')
smacf100ResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("doNothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100ResetCounters.setStatus('mandatory')
smacf100SelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("selfTest", 1), ("doNothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100SelfTest.setStatus('mandatory')
smacf100QosEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100QosEnable.setStatus('mandatory')
smacf100QosHPThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100QosHPThreshold.setStatus('mandatory')
smacf100QosLqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100QosLqWeight.setStatus('mandatory')
smacf100QosHqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100QosHqWeight.setStatus('mandatory')
smacf100SNMPModuleInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smacf100SNMPModuleInstalled.setStatus('mandatory')
smacf100AgingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smacf100AgingTimer.setStatus('mandatory')
cpsMc0800Table = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 6), )
if mibBuilder.loadTexts: cpsMc0800Table.setStatus('mandatory')
cpsMc0800Entry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 6, 1), ).setIndexNames((0, "MCC16-MIB", "cpsMc0800BiaIndex"))
if mibBuilder.loadTexts: cpsMc0800Entry.setStatus('mandatory')
cpsMc0800BiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc0800BiaIndex.setStatus('mandatory')
cpsMc0800Description = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc0800Description.setStatus('mandatory')
cpsMc0800MRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsMc0800MRevision.setStatus('mandatory')
cpsGroupCtrl = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsGroupCtrl.setStatus('mandatory')
cpsSlotPwrTable = MibTable((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 3, 2), )
if mibBuilder.loadTexts: cpsSlotPwrTable.setStatus('mandatory')
cpsSlotPwrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 3, 2, 1), ).setIndexNames((0, "MCC16-MIB", "cpsSlotPwrBiaIndex"), (0, "MCC16-MIB", "cpsSlotPwrSlotIndex"))
if mibBuilder.loadTexts: cpsSlotPwrEntry.setStatus('mandatory')
cpsSlotPwrBiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsSlotPwrBiaIndex.setStatus('mandatory')
cpsSlotPwrSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsSlotPwrSlotIndex.setStatus('mandatory')
cpsSlotPwrState = MibTableColumn((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSlotPwrState.setStatus('mandatory')
cpsIsPrimary = MibScalar((1, 3, 6, 1, 4, 1, 868, 2, 4, 2, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsIsPrimary.setStatus('mandatory')
mibBuilder.exportSymbols("MCC16-MIB", smacf100PPkts64Octets=smacf100PPkts64Octets, cdftf100TPLinkTbl=cdftf100TPLinkTbl, cpsmm100SysUpTime=cpsmm100SysUpTime, csetf100AutoCross=csetf100AutoCross, cdftf100SlotIndex=cdftf100SlotIndex, ce100BtxSx01TPSignalDetect=ce100BtxSx01TPSignalDetect, crmfe100Groups=crmfe100Groups, cmefg100LocOamOperStatus=cmefg100LocOamOperStatus, cpsmp110SlotIndex=cpsmp110SlotIndex, cfetf205Groups=cfetf205Groups, cbftf100MirrorSelTbl=cbftf100MirrorSelTbl, cettf100Entry=cettf100Entry, cmefg100MRevision=cmefg100MRevision, cetct100Groups=cetct100Groups, cfmff100ConnB=cfmff100ConnB, ceTbtFrl04FiberRecv=ceTbtFrl04FiberRecv, cbftf100FarEndFaultTbl=cbftf100FarEndFaultTbl, cetct100SlotIndex=cetct100SlotIndex, cmefg100RmtOamLinkFault=cmefg100RmtOamLinkFault, cbftf150FarEndFaultTbl=cbftf150FarEndFaultTbl, ceTbtFrl04TPLink=ceTbtFrl04TPLink, ce100BtxFx04Id=ce100BtxFx04Id, cfdCd01Entry=cfdCd01Entry, chassisCpsmc1300Id=chassisCpsmc1300Id, cemtf100Entry=cemtf100Entry, ceCxTbt04Jabber=ceCxTbt04Jabber, cfetf100Groups=cfetf100Groups, cmefg100ImcRmtEnable=cmefg100ImcRmtEnable, cgfeb100TPLpAdv100FDX=cgfeb100TPLpAdv100FDX, ce100BtxFx04MtId=ce100BtxFx04MtId, cpsmp100SerialNumber=cpsmp100SerialNumber, cgfeb100FiberSacCfg=cgfeb100FiberSacCfg, chassisCpsmc1900Id=chassisCpsmc1900Id, cpsDblWideId=cpsDblWideId, cgfeb100TPSpeedCfg=cgfeb100TPSpeedCfg, mcc16=mcc16, cbftf100100MbpsTbl=cbftf100100MbpsTbl, cpsld100Ps2InUse=cpsld100Ps2InUse, smacf100PRxBroadcastPkts=smacf100PRxBroadcastPkts, cpsMc1800PSInUse2=cpsMc1800PSInUse2, cmefg100LocTpDuplex=cmefg100LocTpDuplex, cfetf100FiberLink=cfetf100FiberLink, crmfe100FiberActivity=crmfe100FiberActivity, cfetf105CfgMatch=cfetf105CfgMatch, cpsmp110CurrSensorCount=cpsmp110CurrSensorCount, cemtf100CacheClean=cemtf100CacheClean, cfetf105ConnB=cfetf105ConnB, cbftf100PauseCfgTbl=cbftf100PauseCfgTbl, cpsmm200BiaIndex=cpsmm200BiaIndex, captf100SerialNumber=captf100SerialNumber, cmefg100ImcRxQosOctetsTbl=cmefg100ImcRxQosOctetsTbl, cgfeb100QosEnabled=cgfeb100QosEnabled, cpsMc1900Description=cpsMc1900Description, ccscf100AISCopper=ccscf100AISCopper, cemtf100FiberLink=cemtf100FiberLink, cmefg100RmtDmiRxPower=cmefg100RmtDmiRxPower, cdftf100BiaIndex=cdftf100BiaIndex, cmefg100LocTpAdv1000HDX=cmefg100LocTpAdv1000HDX, cfdCd01Table=cfdCd01Table, cfetf205SlotIndex=cfetf205SlotIndex, cmefg100LocFiberPause=cmefg100LocFiberPause, ccscf100AISFiber=ccscf100AISFiber, ceRTxFx01FiberSignalDetect=ceRTxFx01FiberSignalDetect, cpsmp110PSSupplyTbl=cpsmp110PSSupplyTbl, cfetf105FiberLink=cfetf105FiberLink, cgfeb100TPCrossCfg=cgfeb100TPCrossCfg, ccscf100Entry=ccscf100Entry, cfmff100Groups=cfmff100Groups, ceTbtFrl04FiberLink=ceTbtFrl04FiberLink, crs2f100ConnB=crs2f100ConnB, cfmff100MMSignal=cfmff100MMSignal, smacf100PTxBroadcastPkts=smacf100PTxBroadcastPkts, crmfe100FxBytesH=crmfe100FxBytesH, cpsMc1800BiaIndex=cpsMc1800BiaIndex, cpsModuleSlotIndex=cpsModuleSlotIndex, cmefg100ImcTxOctetsWrapTbl=cmefg100ImcTxOctetsWrapTbl, csdtf100FiberLoopback=csdtf100FiberLoopback, smacf100PTable=smacf100PTable, csdtf100ConnA=csdtf100ConnA, smacf100PPkts128to255Octets=smacf100PPkts128to255Octets, csdtf100RmtConfigMode=csdtf100RmtConfigMode, cmefg100ImcRmtReset=cmefg100ImcRmtReset, cpsmp110Entry=cpsmp110Entry, cpsvt100InvertRX=cpsvt100InvertRX, csetf100Groups=csetf100Groups, cgfeb100ConfigMode=cgfeb100ConfigMode, cmefg100LocFirmwareRevision=cmefg100LocFirmwareRevision, cgfeb100TPLpAdv10FDX=cgfeb100TPLpAdv10FDX, cgfeb100BiaIndex=cgfeb100BiaIndex, cmefg100RmtColdStart=cmefg100RmtColdStart, cbftf150FirmwareRevision=cbftf150FirmwareRevision, cmefg100RmtDmiTxBiasAlarm=cmefg100RmtDmiTxBiasAlarm, cbCf01FiberRecv=cbCf01FiberRecv, cetct100SerialNumber=cetct100SerialNumber, cpsmp110FanCount=cpsmp110FanCount, smacf100PLink=smacf100PLink, cePswSx01FiberFullDuplex=cePswSx01FiberFullDuplex, ce100BtxFrl03TPSignalDetect=ce100BtxFrl03TPSignalDetect, cfetf205LinkPassThrough=cfetf205LinkPassThrough, cmefg100RmtTpPause=cmefg100RmtTpPause, cmefg100LocOamInformationRx=cmefg100LocOamInformationRx, cbftf100MRevision=cbftf100MRevision, cmefg100LocOamCriticalEvent=cmefg100LocOamCriticalEvent, cpsvt100FiberLink=cpsvt100FiberLink, cmefg100LocTpAutoNegot=cmefg100LocTpAutoNegot, cpsmp110CfgMatch=cpsmp110CfgMatch, cmefg100LocOamLinkEvents=cmefg100LocOamLinkEvents, cgfeb100TPAdvPause=cgfeb100TPAdvPause, smacf100PWrapRxGoodOctets=smacf100PWrapRxGoodOctets, cetct100CacheClean=cetct100CacheClean, cfetf105FiberActivity=cfetf105FiberActivity, cmefg100VlanTpDefaultVid=cmefg100VlanTpDefaultVid, cetct100MRevision=cetct100MRevision, cpsMc0200BiaIndex=cpsMc0200BiaIndex, cfetf100ConnB=cfetf100ConnB, cpsmm100SNMPTrapMgr2=cpsmm100SNMPTrapMgr2, mcc16Index=mcc16Index, ceRTxFx01Id=ceRTxFx01Id, chSlMc20p=chSlMc20p, cfetf100Entry=cfetf100Entry, ceTbtFrl03TPLink=ceTbtFrl03TPLink, cbCf01Table=cbCf01Table, cePswSx01Table=cePswSx01Table, smacf100PCfgMatch=smacf100PCfgMatch, cRs232Cf01Index=cRs232Cf01Index, crmfe100RmtFarEndFault=crmfe100RmtFarEndFault, mcc16ComPS1Power=mcc16ComPS1Power, cpsMc1800PSPower1=cpsMc1800PSPower1, crmfe100RmtDetected=crmfe100RmtDetected, crmfe100MscRxBytes=crmfe100MscRxBytes, cbCf01Id=cbCf01Id, ce100BtxFx04MtIndex=ce100BtxFx04MtIndex, cmefg100RmtDmiTemp=cmefg100RmtDmiTemp, cfetf205Table=cfetf205Table, cpsCabinetModel=cpsCabinetModel, cmefg100ImcTxMultipleCollisionTbl=cmefg100ImcTxMultipleCollisionTbl, cpsmm100SlotIndex=cpsmm100SlotIndex, cpsmm100ICIF=cpsmm100ICIF, MacAddress=MacAddress, cfetf205TPLink=cfetf205TPLink, ce100BtxFrl03TPRecv=ce100BtxFrl03TPRecv, cmefg100LadStaticTbl=cmefg100LadStaticTbl, cpsMc1300PSInUse1=cpsMc1300PSInUse1, csdtf100RmtTAOSFiber=csdtf100RmtTAOSFiber, cePswFx03TPFullDuplex=cePswFx03TPFullDuplex, crs4f100SerialNumber=crs4f100SerialNumber, cmefg100VlanIngressVidMiss=cmefg100VlanIngressVidMiss, cpsMc1800PSInUse1=cpsMc1800PSInUse1, cgfeb100TPAdv1000HDX=cgfeb100TPAdv1000HDX, carCf01Table=carCf01Table, cgfeb100CacheClean=cgfeb100CacheClean, cgfeb100FiberSacStat=cgfeb100FiberSacStat, cpsmp110SerialNumber=cpsmp110SerialNumber, cpsMc0200Table=cpsMc0200Table, ceTxSx02TPLink=ceTxSx02TPLink, csdtf100TPCoax=csdtf100TPCoax, chstrCf01Id=chstrCf01Id, cmefg100LocOamMacAddress=cmefg100LocOamMacAddress, cmefg100RmtDmiTxPowerAlarm=cmefg100RmtDmiTxPowerAlarm, cmefg100LocDmiRxPower=cmefg100LocDmiRxPower, cmefg100LocOamAdminControl=cmefg100LocOamAdminControl, ceTbtFrl03TPRecv=ceTbtFrl03TPRecv, cetct100FirmwareRevision=cetct100FirmwareRevision, smacf100Description=smacf100Description, cemtf100Fault=cemtf100Fault, cetct100Id=cetct100Id, caCf02CopperSignalDetect=caCf02CopperSignalDetect, cdftf100CacheClean=cdftf100CacheClean, cpsmp100RemoteFan=cpsmp100RemoteFan, smacf100PRxMulticastPkts=smacf100PRxMulticastPkts, cpsMc1300PSInUse2=cpsMc1300PSInUse2, cfetf100Table=cfetf100Table, cpsmp110PSRoleTbl=cpsmp110PSRoleTbl, products=products, ce100BtxSx01Table=ce100BtxSx01Table, cpsld100MRevision=cpsld100MRevision, cbftf100PortCount=cbftf100PortCount, chstrCf01TPRecv=chstrCf01TPRecv, cmefg100ImcTxQosOctetsTbl=cmefg100ImcTxQosOctetsTbl, crmfe100FxTxBwa=crmfe100FxTxBwa, cpsmm100SysName=cpsmm100SysName, ce100BtxFx04MtTPRecv=ce100BtxFx04MtTPRecv, pSErrorClear=pSErrorClear, ceCxFrl04Jabber=ceCxFrl04Jabber, smacf100QosHPThreshold=smacf100QosHPThreshold, cpsModuleTable=cpsModuleTable, crmfe100TxBytesH=crmfe100TxBytesH, crs2f100RmtLoopback=crs2f100RmtLoopback, cgfeb100TPLink=cgfeb100TPLink, cpsModuleModel=cpsModuleModel, cpsmm100Gateway=cpsmm100Gateway, cgetf100ConfigMode=cgetf100ConfigMode, cemtf100MRevision=cemtf100MRevision, cpsvt100Groups=cpsvt100Groups, ceTbtFrl03Index=ceTbtFrl03Index, cmefg100RmtOamRmtLoopback=cmefg100RmtOamRmtLoopback, smacf100PGroups=smacf100PGroups, cmefg100ImcRxPkts1024to1522OctetsTbl=cmefg100ImcRxPkts1024to1522OctetsTbl, smacf100PRxAlignmentErrors=smacf100PRxAlignmentErrors, cpsmm100Groups=cpsmm100Groups, ce100BtxFx04MtFiberSignalDetect=ce100BtxFx04MtFiberSignalDetect, cfmff100CfgMatch=cfmff100CfgMatch, cmefg100LocOamLoopbackControlTx=cmefg100LocOamLoopbackControlTx, crmfe100Autonegot=crmfe100Autonegot, cbftf100AutoNegotTbl=cbftf100AutoNegotTbl, ceTbtFrl03FiberLink=ceTbtFrl03FiberLink, ceCxFrl04CoaxRecv=ceCxFrl04CoaxRecv, cpsCabinetDescription=cpsCabinetDescription, cmefg100Groups=cmefg100Groups, cmefg100RmtOamActiveMode=cmefg100RmtOamActiveMode, cmefg100ImcRxOctetsWrapTbl=cmefg100ImcRxOctetsWrapTbl, ceTbtFrl03Power=ceTbtFrl03Power, smacf100PAdv10HDX=smacf100PAdv10HDX, cfdCd01FiberRecv=cfdCd01FiberRecv, ce100BtxFx04Index=ce100BtxFx04Index, cpsMc1800Entry=cpsMc1800Entry, cmefg100VlanIngressVidHitNoMem=cmefg100VlanIngressVidHitNoMem, cpsvt100CfgMatch=cpsvt100CfgMatch, cetct100BiaIndex=cetct100BiaIndex, cmefg100RmtTpAdv10FDX=cmefg100RmtTpAdv10FDX, chstrCf01Entry=chstrCf01Entry, cpsmp110TempSensorCount=cpsmp110TempSensorCount, cfSmMm06Entry=cfSmMm06Entry, cpsmp110SubDeviceIndex=cpsmp110SubDeviceIndex, cpsCf01FiberRecv=cpsCf01FiberRecv, cfSmMm05MMSignalDetect=cfSmMm05MMSignalDetect, cpsmm100TntRIP=cpsmm100TntRIP, cmefg100LocFpgaRev=cmefg100LocFpgaRev, cettf100Groups=cettf100Groups, cbftf150SlotIndex=cbftf150SlotIndex, cemtf100SlotIndex=cemtf100SlotIndex, ceTxSx02FiberLink=ceTxSx02FiberLink, smacf100SNMPModuleInstalled=smacf100SNMPModuleInstalled, crmfe100CacheClean=crmfe100CacheClean, crmfe100Table=crmfe100Table, cmefg100LocFiberQosPause=cmefg100LocFiberQosPause, csdtf100Groups=csdtf100Groups, cmefg100RmtOamPeerVendorInfo=cmefg100RmtOamPeerVendorInfo, crs2f100RmtDCE=crs2f100RmtDCE, cfetf100TPLink=cfetf100TPLink, cpsvt100ConnA=cpsvt100ConnA, cgetf100ClockMaster=cgetf100ClockMaster, crs4f100FirmwareRevision=crs4f100FirmwareRevision, slotCps=slotCps, crs4f100Id=crs4f100Id, cfSmMm04Table=cfSmMm04Table, cfSmMm02Power=cfSmMm02Power, csetf100SpeedConfig=csetf100SpeedConfig, cpsCf01Entry=cpsCf01Entry, mcc16ComMgmtHwRev=mcc16ComMgmtHwRev, csetf100FiberActivity=csetf100FiberActivity, cmefg100LocTpLink=cmefg100LocTpLink, crmfe100Id=crmfe100Id, cpsmm100EthernetLink=cpsmm100EthernetLink)
mibBuilder.exportSymbols("MCC16-MIB", card=card, csetf100Speed100Mbps=csetf100Speed100Mbps, caCf02Table=caCf02Table, cgfeb100TPAdv100FDX=cgfeb100TPAdv100FDX, cmefg100RmtFiberAutoNegot=cmefg100RmtFiberAutoNegot, cgfeb100ConnA=cgfeb100ConnA, crmfe100FirmwareRevision=crmfe100FirmwareRevision, cmefg100LocTxFxBwaMb=cmefg100LocTxFxBwaMb, cmefg100RmtOamPeerConfigRevision=cmefg100RmtOamPeerConfigRevision, cmefg100ImcRxUnicastPktsTbl=cmefg100ImcRxUnicastPktsTbl, cfSmMm02MMSignalDetect=cfSmMm02MMSignalDetect, cmefg100Table=cmefg100Table, cpsMc0200Description=cpsMc0200Description, ceCxFrl04Index=ceCxFrl04Index, cfmff100SMSignal=cfmff100SMSignal, carCf02Table=carCf02Table, cetct100ConnA=cetct100ConnA, transition=transition, mcc16ComGateway=mcc16ComGateway, crmfe100MscTxBytes=crmfe100MscTxBytes, ceTbtFrl04Entry=ceTbtFrl04Entry, cbftf100CacheClean=cbftf100CacheClean, cpsvt100Fault=cpsvt100Fault, cmefg100LocFiberSacStatus=cmefg100LocFiberSacStatus, csetf100MRevision=csetf100MRevision, cpsCf01Power=cpsCf01Power, cgfeb100TPAutoNegot=cgfeb100TPAutoNegot, cpsMc1300PSPower1=cpsMc1300PSPower1, smacf100PTxExcessiveCollision=smacf100PTxExcessiveCollision, cmefg100ImcRxDropPktsTbl=cmefg100ImcRxDropPktsTbl, cfdCd01TPRecv=cfdCd01TPRecv, cfdCd01TPSignalDetect=cfdCd01TPSignalDetect, cRs232Cf01Id=cRs232Cf01Id, cbftf100SelfTestFailed=cbftf100SelfTestFailed, chassisCpsmc0200Id=chassisCpsmc0200Id, cpsvt100InvertTX=cpsvt100InvertTX, crs2f100CfgMatch=crs2f100CfgMatch, carCf02Entry=carCf02Entry, cgfeb100FiberAdv1000HDX=cgfeb100FiberAdv1000HDX, cbftf150SerialNumber=cbftf150SerialNumber, cpsvt100FirmwareRev=cpsvt100FirmwareRev, cpsMc0200MRevision=cpsMc0200MRevision, cettf100FiberLink=cettf100FiberLink, cmefg100ImcRxFCSErrorsTbl=cmefg100ImcRxFCSErrorsTbl, csdtf100ConnB=csdtf100ConnB, cgfeb100Table=cgfeb100Table, cbftf150LinkTbl=cbftf150LinkTbl, cfetf205Fault=cfetf205Fault, cbftf150CrossTbl=cbftf150CrossTbl, cmefg100VlanEditFwdFiber=cmefg100VlanEditFwdFiber, cfetf100FiberActivity=cfetf100FiberActivity, cfetf100AutoCross=cfetf100AutoCross, cgetf100MRevision=cgetf100MRevision, smacf100PTxPausePkts=smacf100PTxPausePkts, cetct100Table=cetct100Table, ctrCf01Id=ctrCf01Id, smacf100QosHqWeight=smacf100QosHqWeight, ctrCf01Index=ctrCf01Index, crmfe100MbTxFxBwa=crmfe100MbTxFxBwa, cfetf100ConfigMode=cfetf100ConfigMode, cpsvt100TermTiming=cpsvt100TermTiming, cpsCf01TPRecv=cpsCf01TPRecv, chassisSmacf100Id=chassisSmacf100Id, cmefg100ImcRxExcessSizeDiscTbl=cmefg100ImcRxExcessSizeDiscTbl, cfSmMm06Index=cfSmMm06Index, cpsCabinetBiaIndex=cpsCabinetBiaIndex, ce100BtxSx01TPRecv=ce100BtxSx01TPRecv, ceCxTbt04Index=ceCxTbt04Index, mcc16ComMgmtSwRev=mcc16ComMgmtSwRev, cpsld100BiaIndex=cpsld100BiaIndex, cpsSlotPwrTable=cpsSlotPwrTable, cmefg100VlanSetFailed=cmefg100VlanSetFailed, cpsCf01Table=cpsCf01Table, smacf100PSubDeviceIndex=smacf100PSubDeviceIndex, cmefg100CacheClean=cmefg100CacheClean, smacf100PPkts65to127Octets=smacf100PPkts65to127Octets, cfetf100CfgMatch=cfetf100CfgMatch, cePswFx03FiberFullDuplex=cePswFx03FiberFullDuplex, ceCxFrl04Entry=ceCxFrl04Entry, ceTbtFrl03Table=ceTbtFrl03Table, cmefg100LadVidTbl=cmefg100LadVidTbl, ct1e1Cf01Index=ct1e1Cf01Index, carCf01FiberRecv=carCf01FiberRecv, cmefg100RmtUptime=cmefg100RmtUptime, cmefg100LocFiberAutoNegot=cmefg100LocFiberAutoNegot, crs2f100FiberLink=crs2f100FiberLink, cmefg100RmtFactoryReset=cmefg100RmtFactoryReset, cpsvt100RmtConfigMode=cpsvt100RmtConfigMode, cgfeb100FirmwareRevision=cgfeb100FirmwareRevision, crs2f100Groups=crs2f100Groups, crs2f100ConnA=crs2f100ConnA, smacf100PQosPriority=smacf100PQosPriority, cpsmm100CacheClean=cpsmm100CacheClean, crmfe100RmtConfigMode=crmfe100RmtConfigMode, cdftf100Entry=cdftf100Entry, ce100BtxFx04FiberRecv=ce100BtxFx04FiberRecv, cmefg100RmtOamLocDteDisc=cmefg100RmtOamLocDteDisc, cfetf100FarEndFault=cfetf100FarEndFault, smacf100PRxFCSErrors=smacf100PRxFCSErrors, cmefg100LadCacheCmd=cmefg100LadCacheCmd, ceTxSx02Table=ceTxSx02Table, csdtf100SlotIndex=csdtf100SlotIndex, ccscf100E3DS3=ccscf100E3DS3, mcc16Error=mcc16Error, smacf100PBiaIndex=smacf100PBiaIndex, ce100BtxFx04MtTable=ce100BtxFx04MtTable, cgfeb100TPSacCfg=cgfeb100TPSacCfg, crs4f100CacheClean=crs4f100CacheClean, cettf100MRevision=cettf100MRevision, smacf100PCacheClean=smacf100PCacheClean, cpsmp100CfgMatch=cpsmp100CfgMatch, cgetf100CfgMatch=cgetf100CfgMatch, ceRTxFx01Index=ceRTxFx01Index, cgfeb100LinkPassThrough=cgfeb100LinkPassThrough, cmefg100SubDeviceIndex=cmefg100SubDeviceIndex, cmefg100RmtDmiRxPowerAlarm=cmefg100RmtDmiRxPowerAlarm, cmefg100VlanUntagTpTbl=cmefg100VlanUntagTpTbl, cePswSx01Id=cePswSx01Id, ce100BtxSx01Power=ce100BtxSx01Power, cmefg100LocTpQosPause=cmefg100LocTpQosPause, cmefg100LocTxFxBwaKb=cmefg100LocTxFxBwaKb, cetct100CoaxActivity=cetct100CoaxActivity, cpsvt100RmtTermTiming=cpsvt100RmtTermTiming, cgfeb100TPLpAdv100HDX=cgfeb100TPLpAdv100HDX, cgfeb100QosHPThreshold=cgfeb100QosHPThreshold, csdtf100BiaIndex=csdtf100BiaIndex, cpsmM200Id=cpsmM200Id, smacf100PSACCfg=smacf100PSACCfg, cfmff100ConnA=cfmff100ConnA, cfSmMm06Id=cfSmMm06Id, crs4f100ConnA=crs4f100ConnA, csetf100Table=csetf100Table, cgfeb100TPFullDuplexStat=cgfeb100TPFullDuplexStat, cfetf100MRevision=cfetf100MRevision, crs4f100MRevision=crs4f100MRevision, ct1e1Cf01CoaxActive=ct1e1Cf01CoaxActive, crs4f100FiberLink=crs4f100FiberLink, cmefg100LocTpSacEnable=cmefg100LocTpSacEnable, cmefg100RmtTpSpeed=cmefg100RmtTpSpeed, cgfeb100FiberAutoNegot=cgfeb100FiberAutoNegot, smacf100PRxPausePkts=smacf100PRxPausePkts, carCf01TPRecv=carCf01TPRecv, cettf100BiaIndex=cettf100BiaIndex, cmefg100ImcTxQosOctetsWrapTbl=cmefg100ImcTxQosOctetsWrapTbl, csetf100TPActivity=csetf100TPActivity, cemtf100ConnA=cemtf100ConnA, cpsMc0800Description=cpsMc0800Description, cpsmp110CurrentTbl=cpsmp110CurrentTbl, cmefg100RmtOamVarRetrieval=cmefg100RmtOamVarRetrieval, cmefg100RmtSerialNumber=cmefg100RmtSerialNumber, cgetf100Id=cgetf100Id, smacf100PEntry=smacf100PEntry, cfSmMm04Power=cfSmMm04Power, cmefg100VlanFwdFiberTbl=cmefg100VlanFwdFiberTbl, crmfe100TPActivity=crmfe100TPActivity, cbftf150Id=cbftf150Id, chassisSmacf100LCId=chassisSmacf100LCId, captf100BiaIndex=captf100BiaIndex, captf100Id=captf100Id, cmefg100LocDmiTxPowerAlarm=cmefg100LocDmiTxPowerAlarm, csdtf100Fault=csdtf100Fault, cbftf100Groups=cbftf100Groups, cmefg100RmtTpQosPause=cmefg100RmtTpQosPause, cfSmMm02Id=cfSmMm02Id, crmfe100SerialNumber=crmfe100SerialNumber, cpsCabinetEntry=cpsCabinetEntry, mcc16ComNetMask=mcc16ComNetMask, cmefg100LadMacTbl=cmefg100LadMacTbl, cmefg100LocColdstart=cmefg100LocColdstart, cettf100Fault=cettf100Fault, ccscf100CfgMatch=ccscf100CfgMatch, cmefg100ImcTxQosPktsTbl=cmefg100ImcTxQosPktsTbl, mc20pErrorId=mc20pErrorId, smacf100PRxJabbers=smacf100PRxJabbers, cpsvt100RmtDetected=cpsvt100RmtDetected, cgfeb100TPSpeedStat=cgfeb100TPSpeedStat, cmefg100LocFiberAdv1000FDX=cmefg100LocFiberAdv1000FDX, cpsmp110Table=cpsmp110Table, smacf100QosEnable=smacf100QosEnable, cgetf100Table=cgetf100Table, cmefg100ImcTxFrameInDiscTbl=cmefg100ImcTxFrameInDiscTbl, crs4f100CfgMatch=crs4f100CfgMatch, cpsSlotDetail=cpsSlotDetail, cfetf205ConfigMode=cfetf205ConfigMode, crs2f100DCE=crs2f100DCE, mcc16SlotEntry=mcc16SlotEntry, cbftf100SerialNumber=cbftf100SerialNumber, cdftf100FiberLinkTbl=cdftf100FiberLinkTbl, cmefg100BiaIndex=cmefg100BiaIndex, cbftf100SACStatTbl=cbftf100SACStatTbl, ctrCf01TPinOK=ctrCf01TPinOK, ceCxFrl04Id=ceCxFrl04Id, cmefg100LocDmiTemp=cmefg100LocDmiTemp, mcc16PSState=mcc16PSState, cePswFx03TP100Mbps=cePswFx03TP100Mbps, csetf100CfgMatch=csetf100CfgMatch, smacf100PFarEndFaultCfg=smacf100PFarEndFaultCfg, cePswFx03Table=cePswFx03Table, csdtf100RmtSerialNumber=csdtf100RmtSerialNumber, csdtf100ConfigMode=csdtf100ConfigMode, cpsMc0800BiaIndex=cpsMc0800BiaIndex, cfetf105Entry=cfetf105Entry, cbftf100Adv10HDXTbl=cbftf100Adv10HDXTbl, ccscf100CacheClean=ccscf100CacheClean, cfetf105CacheClean=cfetf105CacheClean, cmefg100ImcTxLateCollisionTbl=cmefg100ImcTxLateCollisionTbl, smacf100PLastMAC=smacf100PLastMAC, cpsmm100SysContact=cpsmm100SysContact, ceTbtFrl04Table=ceTbtFrl04Table, cfmff100Table=cfmff100Table, cfSmMm04SMSignalDetect=cfSmMm04SMSignalDetect, cbftf100Table=cbftf100Table, cpsmp100InUse=cpsmp100InUse, ceCxFrl04FLLink=ceCxFrl04FLLink, carCf01Power=carCf01Power, smacf100PRxOctets=smacf100PRxOctets, cdftf100Table=cdftf100Table, csdtf100MRevision=csdtf100MRevision, cgfeb100TPCrossStat=cgfeb100TPCrossStat, csdtf100CopperLink=csdtf100CopperLink, cmefg100VlanFwdTpTbl=cmefg100VlanFwdTpTbl, smacf100PRxUnicastPkts=smacf100PRxUnicastPkts, smacf100PTxUnicastPkts=smacf100PTxUnicastPkts, cbftf150FormFactor=cbftf150FormFactor, cmefg100LocDmiTxBiasAlarm=cmefg100LocDmiTxBiasAlarm, cePswFx03TPLink=cePswFx03TPLink, cmefg100LocOamInformationTx=cmefg100LocOamInformationTx, chstrCf01TPSignalDetect=chstrCf01TPSignalDetect, cmefg100RmtTpAdv1000FDX=cmefg100RmtTpAdv1000FDX, ce100BtxFrl03Id=ce100BtxFrl03Id, cpsmp100BiaIndex=cpsmp100BiaIndex, crmfe100FiberLink=crmfe100FiberLink, cbftf150AutoNegotTbl=cbftf150AutoNegotTbl, cmefg100LocOamRmtLoopback=cmefg100LocOamRmtLoopback, cePswFx03Id=cePswFx03Id, cpsvt100CableMode=cpsvt100CableMode, cePswSx01TP100Mbps=cePswSx01TP100Mbps, cpsMc1300BiaIndex=cpsMc1300BiaIndex, cmefg100ImcRxJabbersTbl=cmefg100ImcRxJabbersTbl, csetf100SlotIndex=csetf100SlotIndex, crmfe100UpTime=crmfe100UpTime, cmefg100VlanEntries=cmefg100VlanEntries, cmefg100LocFxTxBwaKb=cmefg100LocFxTxBwaKb, cpsmm100CanPrimary=cpsmm100CanPrimary, cmefg100QosPriority=cmefg100QosPriority, ct1e1Cf01Entry=ct1e1Cf01Entry, cdftf100FiberActivityTbl=cdftf100FiberActivityTbl, cgfeb100TPAdv10FDX=cgfeb100TPAdv10FDX, cmefg100CfgMatch=cmefg100CfgMatch, cpsMc1300Description=cpsMc1300Description, csdtf100AISFiber=csdtf100AISFiber, mcc16Common=mcc16Common, cmefg100LocTpPause=cmefg100LocTpPause, cpsmm100SNMPTrapMgr4=cpsmm100SNMPTrapMgr4)
mibBuilder.exportSymbols("MCC16-MIB", cmefg100ImcRxOctetsTbl=cmefg100ImcRxOctetsTbl, csdtf100RmtTAOSCopper=csdtf100RmtTAOSCopper, smacf100PRxSAChanges=smacf100PRxSAChanges, cbftf100MirrorInTbl=cbftf100MirrorInTbl, cgfeb100SelfTestFailed=cgfeb100SelfTestFailed, smacf100PRxFragments=smacf100PRxFragments, ceRTxFx01Entry=ceRTxFx01Entry, ccscf100CopperLoopback=ccscf100CopperLoopback, smacf100PFarEndFaultStat=smacf100PFarEndFaultStat, smacf100PEnabled=smacf100PEnabled, cpsmm200MRevision=cpsmm200MRevision, smacf100Table=smacf100Table, chstrCf01FiberRecv=chstrCf01FiberRecv, cfmff100CacheClean=cfmff100CacheClean, crmfe100RmtLinkPassThrough=crmfe100RmtLinkPassThrough, cdftf100Id=cdftf100Id, cmefg100ImcRxGoodOctetsTbl=cmefg100ImcRxGoodOctetsTbl, cemtf100OffHook=cemtf100OffHook, ccscf100Id=ccscf100Id, cgetf100PauseType=cgetf100PauseType, captf100CacheClean=captf100CacheClean, cmefg100LocOamParserState=cmefg100LocOamParserState, ce100BtxFx04TPSignalDetect=ce100BtxFx04TPSignalDetect, ccscf100SerialNumber=ccscf100SerialNumber, cgetf100SerialNumber=cgetf100SerialNumber, cettf100CacheClean=cettf100CacheClean, cpsmm200SerialNumber=cpsmm200SerialNumber, cettf100Enabled=cettf100Enabled, smacf100PPkts512to1023Octets=smacf100PPkts512to1023Octets, crmfe100LinkPassThrough=crmfe100LinkPassThrough, cpsMc0800Entry=cpsMc0800Entry, crmfe100RmtTPLink=crmfe100RmtTPLink, cpsmp110TempFaultTbl=cpsmp110TempFaultTbl, cbftf100MirrorCfg=cbftf100MirrorCfg, crmfe100AutoCross=crmfe100AutoCross, ceCxTbt04Entry=ceCxTbt04Entry, carCf02CoaxRecv=carCf02CoaxRecv, cbftf100SlotIndex=cbftf100SlotIndex, crmfe100RmtAutoCross=crmfe100RmtAutoCross, cmefg100RmtTpAdv100HDX=cmefg100RmtTpAdv100HDX, cbftf100SpanningTree=cbftf100SpanningTree, cbftf100Adv100FDXTbl=cbftf100Adv100FDXTbl, ccscf100BiaIndex=ccscf100BiaIndex, ccscf100MRevision=ccscf100MRevision, cpsCabSummary=cpsCabSummary, crmfe100RmtAutonegot=crmfe100RmtAutonegot, cpsvt100RmtFiberLink=cpsvt100RmtFiberLink, crmfe100RmtFiberActivity=crmfe100RmtFiberActivity, cpsvt100RmtDCE=cpsvt100RmtDCE, chassisCpsmc0800Id=chassisCpsmc0800Id, smacf100PId=smacf100PId, cpsmp100PowerOK=cpsmp100PowerOK, cfetf100ConnA=cfetf100ConnA, cpsSlotPwrEntry=cpsSlotPwrEntry, cpsModuleBiaIndex=cpsModuleBiaIndex, crmfe100MRevision=crmfe100MRevision, cpsMc1300PSPower2=cpsMc1300PSPower2, cmefg100ImcTxExcessiveCollisionTbl=cmefg100ImcTxExcessiveCollisionTbl, cetct100TPActivity=cetct100TPActivity, cbftf150Entry=cbftf150Entry, pSDeviceInserted=pSDeviceInserted, cfetf205BiaIndex=cfetf205BiaIndex, crs4f100Fault=crs4f100Fault, pSPowerLost=pSPowerLost, cpsmm100SNMPTrapInterval=cpsmm100SNMPTrapInterval, captf100ConnB=captf100ConnB, cmefg100LocTpAdv1000FDX=cmefg100LocTpAdv1000FDX, cetct100CollisionsPerHour=cetct100CollisionsPerHour, cpsmp100ChassisTemp=cpsmp100ChassisTemp, smacf100PSlotIndex=smacf100PSlotIndex, cgfeb100FiberFullDuplexStat=cgfeb100FiberFullDuplexStat, cfSmMm02SMSignalDetect=cfSmMm02SMSignalDetect, cpsmp110BiaIndex=cpsmp110BiaIndex, cpsvt100RmtInvertTX=cpsvt100RmtInvertTX, cpsmm100BiaIndex=cpsmm100BiaIndex, cgetf100LinkPassThrough=cgetf100LinkPassThrough, cmefg100ImcRxPausePktsTbl=cmefg100ImcRxPausePktsTbl, ceRTxFx01TPPrimary=ceRTxFx01TPPrimary, csdtf100RmtSupported=csdtf100RmtSupported, cmefg100ImcRxGoodOctetsWrapTbl=cmefg100ImcRxGoodOctetsWrapTbl, productId=productId, ce100BtxSx01FiberRecv=ce100BtxSx01FiberRecv, cbftf100BiaIndex=cbftf100BiaIndex, cpsld100SerialNumber=cpsld100SerialNumber, cfetf205CacheClean=cfetf205CacheClean, chassisMcc16Id=chassisMcc16Id, cmefg100RmtFiberLink=cmefg100RmtFiberLink, cpsvt100MRevision=cpsvt100MRevision, cpsld100SlotIndex=cpsld100SlotIndex, cpsMc1300Table=cpsMc1300Table, cpsvt100RmtCopperLink=cpsvt100RmtCopperLink, cgfeb100MonitorType=cgfeb100MonitorType, crs2f100CopperActivity=crs2f100CopperActivity, cfetf205CfgMatch=cfetf205CfgMatch, cpsvt100BiaIndex=cpsvt100BiaIndex, cgetf100SlotIndex=cgetf100SlotIndex, cpsvt100ConfigMode=cpsvt100ConfigMode, ce100BtxFrl03Lock=ce100BtxFrl03Lock, cpsmm200Table=cpsmm200Table, cpsld100Entry=cpsld100Entry, captf100MRevision=captf100MRevision, smacf100PPkts256to511Octets=smacf100PPkts256to511Octets, cmefg100LocOamVarRetrieval=cmefg100LocOamVarRetrieval, caCf02FiberSignalDetect=caCf02FiberSignalDetect, ce100BtxFrl03Entry=ce100BtxFrl03Entry, cmefg100ImcTxPausePktsTbl=cmefg100ImcTxPausePktsTbl, csetf100TPLink=csetf100TPLink, csdtf100RmtAISCopper=csdtf100RmtAISCopper, csdtf100AISCopper=csdtf100AISCopper, ccscf100DS3LineBuildout=ccscf100DS3LineBuildout, smacf100Entry=smacf100Entry, cfetf205Enabled=cfetf205Enabled, cmefg100Entry=cmefg100Entry, cmefg100LocFiberConnA=cmefg100LocFiberConnA, ceCxTbt04TPLink=ceCxTbt04TPLink, csetf100BiaIndex=csetf100BiaIndex, cgfeb100FiberFullDuplexCfg=cgfeb100FiberFullDuplexCfg, cetct100Entry=cetct100Entry, cfetf205ConnB=cfetf205ConnB, ctrCf01Entry=ctrCf01Entry, mcc16DeviceType=mcc16DeviceType, smacf100SpanningTree=smacf100SpanningTree, cbCf01Index=cbCf01Index, cmefg100RmtDmiTxBiasCurrent=cmefg100RmtDmiTxBiasCurrent, csdtf100RmtCopperLineBuildout=csdtf100RmtCopperLineBuildout, mcc16ComPS2InUse=mcc16ComPS2InUse, cmefg100RmtOamRmtDteDisc=cmefg100RmtOamRmtDteDisc, cpsMc1900MRevision=cpsMc1900MRevision, cmefg100ImcTxBroadcastPktsTbl=cmefg100ImcTxBroadcastPktsTbl, cmefg100ImcRxPkts512to1023OctetsTbl=cmefg100ImcRxPkts512to1023OctetsTbl, captf100SlotIndex=captf100SlotIndex, csetf100Id=csetf100Id, smacf100QosLqWeight=smacf100QosLqWeight, cfetf100CacheClean=cfetf100CacheClean, cfetf100FastLinkPulse=cfetf100FastLinkPulse, cmefg100VlanUntagFiberTbl=cmefg100VlanUntagFiberTbl, cmefg100Id=cmefg100Id, cettf100CfgMatch=cettf100CfgMatch, cfetf205SerialNumber=cfetf205SerialNumber, cmefg100ImcRxSymbolErrorTbl=cmefg100ImcRxSymbolErrorTbl, cpsSlotSummary=cpsSlotSummary, cgetf100Pause=cgetf100Pause, smacf100P100Mbps=smacf100P100Mbps, cmefg100LocDmiTxBiasCurrent=cmefg100LocDmiTxBiasCurrent, cpsmp110CurrFaultTbl=cpsmp110CurrFaultTbl, crmfe100SlotIndex=crmfe100SlotIndex, cpsCabinetTable=cpsCabinetTable, cgfeb100FiberLink=cgfeb100FiberLink, cbCf01Power=cbCf01Power, cmefg100LocTpAdv100FDX=cmefg100LocTpAdv100FDX, chassisProdsId=chassisProdsId, cpsmp100MRevision=cpsmp100MRevision, smacf100PTxMulticastPkts=smacf100PTxMulticastPkts, cmefg100ImcTxCollisionsTbl=cmefg100ImcTxCollisionsTbl, cdftf100FirmwareRevision=cdftf100FirmwareRevision, csetf100CacheClean=csetf100CacheClean, cmefg100LocSerialNumber=cmefg100LocSerialNumber, ce100BtxFx04Table=ce100BtxFx04Table, cpsvt100CopperLink=cpsvt100CopperLink, cgfeb100MonitorTap=cgfeb100MonitorTap, cmefg100ImcLocEnable=cmefg100ImcLocEnable, cmefg100ImcRxAlignmentErrorsTbl=cmefg100ImcRxAlignmentErrorsTbl, cfetf205Id=cfetf205Id, cgfeb100FiberAdv1000FDX=cgfeb100FiberAdv1000FDX, cfetf100BiaIndex=cfetf100BiaIndex, pSError=pSError, captf100Table=captf100Table, smacf100PRxSymbolError=smacf100PRxSymbolError, captf100InUse=captf100InUse, ce100BtxFx04MtTPSignalDetect=ce100BtxFx04MtTPSignalDetect, csdtf100RmtFault=csdtf100RmtFault, cpsvt100SlotIndex=cpsvt100SlotIndex, smacf100PConnA=smacf100PConnA, cfetf205MRevision=cfetf205MRevision, smacf100PTxMultipleCollision=smacf100PTxMultipleCollision, cpsmm100TntRIPMask=cpsmm100TntRIPMask, cfetf105ConfigMode=cfetf105ConfigMode, cePswSx01Index=cePswSx01Index, cpsMc1900Table=cpsMc1900Table, cfSmMm04Entry=cfSmMm04Entry, cmefg100ImcTxOctetsTbl=cmefg100ImcTxOctetsTbl, mcc16ComHwReset=mcc16ComHwReset, cmefg100ImcRxOversizePktsTbl=cmefg100ImcRxOversizePktsTbl, cpsmm100CfgMatch=cpsmm100CfgMatch, cmefg100ImcRxBroadcastPktsTbl=cmefg100ImcRxBroadcastPktsTbl, cpsvt100DCE=cpsvt100DCE, cpsUnknownDeviceId=cpsUnknownDeviceId, cettf100ConnA=cettf100ConnA, cfmff100SerialNumber=cfmff100SerialNumber, crs2f100Table=crs2f100Table, cgetf100TPLink=cgetf100TPLink, cfetf205ConnA=cfetf205ConnA, cmefg100RmtDetected=cmefg100RmtDetected, cmefg100LocOamConfigRevision=cmefg100LocOamConfigRevision, csdtf100CopperLongHaul=csdtf100CopperLongHaul, cpsvt100SerialNumber=cpsvt100SerialNumber, cmefg100QosHqWeight=cmefg100QosHqWeight, smacf100PRxExcessSizeDisc=smacf100PRxExcessSizeDisc, mcc16ComPS1InUse=mcc16ComPS1InUse, smacf100PRxOversizePkts=smacf100PRxOversizePkts, cbftf100FirmwareRevision=cbftf100FirmwareRevision, ceCxFrl04Table=ceCxFrl04Table, ceCxTbt04Power=ceCxTbt04Power, ct1e1Cf01CopperSignalDetect=ct1e1Cf01CopperSignalDetect, cmefg100ImcRxSAChangesTbl=cmefg100ImcRxSAChangesTbl, carCf01Index=carCf01Index, csdtf100RmtCopperLoopback=csdtf100RmtCopperLoopback, cemtf100SerialNumber=cemtf100SerialNumber, captf100ConnA=captf100ConnA, cpsmp110MasterFanFault=cpsmp110MasterFanFault, cgetf100FiberAutoNegot=cgetf100FiberAutoNegot, cmefg100LocOamLoopbackControlRx=cmefg100LocOamLoopbackControlRx, cpsmm100Table=cpsmm100Table, cfetf105Id=cfetf105Id, cbftf150Table=cbftf150Table, crmfe100TxBytesL=crmfe100TxBytesL, carCf01Entry=carCf01Entry, captf100Fault=captf100Fault, cmefg100LocTpSpeed=cmefg100LocTpSpeed, ct1e1Cf01Id=ct1e1Cf01Id, ctrCf01Inserted=ctrCf01Inserted, cpsAgent=cpsAgent, cgetf100Groups=cgetf100Groups, pSDeviceColdStart=pSDeviceColdStart, cfmff100PortShutOff=cfmff100PortShutOff, cmefg100LocOamMaxOamPduSize=cmefg100LocOamMaxOamPduSize, ceCxFrl04FLRecv=ceCxFrl04FLRecv, cmefg100ImcLocReset=cmefg100ImcLocReset, cmefg100VlanVidTagCtrl=cmefg100VlanVidTagCtrl, cfmff100BiaIndex=cfmff100BiaIndex, cePswFx03Entry=cePswFx03Entry, smacf100SelfTest=smacf100SelfTest, cmefg100LocTpConnB=cmefg100LocTpConnB, cePswSx01TPFullDuplex=cePswSx01TPFullDuplex, cbftf100Adv100HDXTbl=cbftf100Adv100HDXTbl, smacf100PTxDropPkts=smacf100PTxDropPkts, ce100BtxFx04MtPower=ce100BtxFx04MtPower, ceTxSx02Index=ceTxSx02Index, cgetf100Fault=cgetf100Fault, cemtf100BiaIndex=cemtf100BiaIndex, smacf100PAdv10FDX=smacf100PAdv10FDX, cgfeb100Entry=cgfeb100Entry, cdftf100TPActivityTbl=cdftf100TPActivityTbl, cettf100ConnB=cettf100ConnB, mc20pDblWideId=mc20pDblWideId, cpsmm100SaveConfig=cpsmm100SaveConfig, cpsmp110CacheClean=cpsmp110CacheClean, ccscf100ConnB=ccscf100ConnB, cgfeb100FiberLpAdvPause=cgfeb100FiberLpAdvPause, smacf100PSTPState=smacf100PSTPState, cpsGroupCtrl=cpsGroupCtrl, cgfeb100SlotIndex=cgfeb100SlotIndex, csdtf100T1E1=csdtf100T1E1, cRs232Cf01Entry=cRs232Cf01Entry)
mibBuilder.exportSymbols("MCC16-MIB", cbftf100LinkTbl=cbftf100LinkTbl, crs2f100BiaIndex=crs2f100BiaIndex, crs2f100Loopback=crs2f100Loopback, cmefg100LocOamRmtDteDisc=cmefg100LocOamRmtDteDisc, ce100BtxSx01Index=ce100BtxSx01Index, cmefg100VlanEnable=cmefg100VlanEnable, csdtf100RmtCopperLongHaul=csdtf100RmtCopperLongHaul, captf100FiberLink=captf100FiberLink, cfetf100LinkPassThrough=cfetf100LinkPassThrough, cpsMc1300MRevision=cpsMc1300MRevision, slotMc20p=slotMc20p, cmefg100VlanPriMapTbl=cmefg100VlanPriMapTbl, cpsSlotPwrState=cpsSlotPwrState, cmefg100RmtOamLinkEvents=cmefg100RmtOamLinkEvents, cpsmm200SlotIndex=cpsmm200SlotIndex, cgfeb100TPAdv1000FDX=cgfeb100TPAdv1000FDX, cpsmp100CacheClean=cpsmp100CacheClean, cePswFx03Index=cePswFx03Index, cbftf150FullDuplexTbl=cbftf150FullDuplexTbl, ceTbtFrl04Id=ceTbtFrl04Id, cmefg100LadPortTbl=cmefg100LadPortTbl, cfetf105AutoCross=cfetf105AutoCross, cgetf100TPLength=cgetf100TPLength, cfetf205TPActivity=cfetf205TPActivity, cbftf100FullDuplexTbl=cbftf100FullDuplexTbl, ceRTxFx01FiberPrimary=ceRTxFx01FiberPrimary, ceTbtFrl03Id=ceTbtFrl03Id, cpsmp100RFanFault=cpsmp100RFanFault, cetct100TPLink=cetct100TPLink, cfetf105TPLink=cfetf105TPLink, cdftf100CfgMatch=cdftf100CfgMatch, cfSmMm05Table=cfSmMm05Table, csdtf100Id=csdtf100Id, cmefg100VlanTpDefaultPri=cmefg100VlanTpDefaultPri, cmefg100ImcRxPkts65to127OctetsTbl=cmefg100ImcRxPkts65to127OctetsTbl, ceTxSx02100Mbps=ceTxSx02100Mbps, cmefg100LadEntries=cmefg100LadEntries, cmefg100LocOamLinkFault=cmefg100LocOamLinkFault, cmefg100ImcTxSingleCollisionTbl=cmefg100ImcTxSingleCollisionTbl, cePswSx01Entry=cePswSx01Entry, cpsld100Id=cpsld100Id, cfetf105LinkPassThrough=cfetf105LinkPassThrough, cmefg100RmtOamPeerMaxOamPduSize=cmefg100RmtOamPeerMaxOamPduSize, cmefg100ImcRxFragmentsTbl=cmefg100ImcRxFragmentsTbl, cpsMc0800MRevision=cpsMc0800MRevision, cfSmMm04Index=cfSmMm04Index, cfetf205FiberActivity=cfetf205FiberActivity, crs4f100SlotIndex=crs4f100SlotIndex, chstrCf01Table=chstrCf01Table, caCf02Entry=caCf02Entry, cmefg100ImcTxUnicastPktsTbl=cmefg100ImcTxUnicastPktsTbl, cpsMc1800Table=cpsMc1800Table, csdtf100RmtFiberLink=csdtf100RmtFiberLink, cpsmm100MRevision=cpsmm100MRevision, cpsMc1800MRevision=cpsMc1800MRevision, ceCxFrl04Power=ceCxFrl04Power, cpsMc1300Entry=cpsMc1300Entry, csetf100Entry=csetf100Entry, cettf100Id=cettf100Id, cfSmMm06Table=cfSmMm06Table, crs4f100CopperActivity=crs4f100CopperActivity, cmefg100RmtTpDuplex=cmefg100RmtTpDuplex, ceTbtFrl04Index=ceTbtFrl04Index, cmefg100ImcRxMulticastPktsTbl=cmefg100ImcRxMulticastPktsTbl, cfetf105BiaIndex=cfetf105BiaIndex, cmefg100ImcRxPkts128to255OctetsTbl=cmefg100ImcRxPkts128to255OctetsTbl, cmefg100LocFiberAdv1000HDX=cmefg100LocFiberAdv1000HDX, crmfe100CfgMatch=crmfe100CfgMatch, ctrCf01FiberinOK=ctrCf01FiberinOK, cfetf105Table=cfetf105Table, mcc16ComIpAddr=mcc16ComIpAddr, cgetf100ConnA=cgetf100ConnA, cetct100ConfigMode=cetct100ConfigMode, crs2f100Entry=crs2f100Entry, cRs232Cf01Table=cRs232Cf01Table, cmefg100LadEditMac=cmefg100LadEditMac, caCf02Power=caCf02Power, cpsSlotPwrBiaIndex=cpsSlotPwrBiaIndex, ccscf100SlotIndex=ccscf100SlotIndex, ccscf100Table=ccscf100Table, csdtf100Entry=csdtf100Entry, cpsmp110PSInUseTbl=cpsmp110PSInUseTbl, cfetf105MRevision=cfetf105MRevision, cfdCd01FiberSignalDetect=cfdCd01FiberSignalDetect, cemtf100Id=cemtf100Id, captf100FirmwareRev=captf100FirmwareRev, mcc16ErrorClear=mcc16ErrorClear, ce100BtxFx04Entry=ce100BtxFx04Entry, cbftf150Groups=cbftf150Groups, ce100BtxSx01Id=ce100BtxSx01Id, crs4f100Groups=crs4f100Groups, cmefg100VlanFiberDefaultPri=cmefg100VlanFiberDefaultPri, chassisCpsmc1850Id=chassisCpsmc1850Id, cgfeb100TPQosPause=cgfeb100TPQosPause, cePswSx01FiberLink=cePswSx01FiberLink, cfetf205FastLinkPulse=cfetf205FastLinkPulse, cgetf100ConnB=cgetf100ConnB, cbftf150ConnectorTbl=cbftf150ConnectorTbl, cpsmp100Id=cpsmp100Id, cgfeb100TPSacStat=cgfeb100TPSacStat, cpsvt100ConnB=cpsvt100ConnB, carCf01Id=carCf01Id, captf100Emulates=captf100Emulates, cfSmMm06SMSignalDetect=cfSmMm06SMSignalDetect, cpsmp110FanStatusTbl=cpsmp110FanStatusTbl, cettf100SerialNumber=cettf100SerialNumber, cfetf100Enabled=cfetf100Enabled, ce100BtxFrl03FiberRecv=ce100BtxFrl03FiberRecv, chassisCpsmc1800Id=chassisCpsmc1800Id, ceCxTbt04Id=ceCxTbt04Id, cmefg100ImcRxUndersizePktsTbl=cmefg100ImcRxUndersizePktsTbl, cfSmMm02Index=cfSmMm02Index, cpsmp110PSCount=cpsmp110PSCount, chstrCf01Index=chstrCf01Index, crmfe100NetworkMode=crmfe100NetworkMode, csdtf100Table=csdtf100Table, cpsmm100WantPrimary=cpsmm100WantPrimary, cpsmM100Id=cpsmM100Id, cettf100TPLink=cettf100TPLink, smacf100PRxUndersizePkts=smacf100PRxUndersizePkts, cgfeb100QosHqWeight=cgfeb100QosHqWeight, cgfeb100MRevision=cgfeb100MRevision, smacf100PBlockPort=smacf100PBlockPort, csdtf100TAOSFiber=csdtf100TAOSFiber, ceCxTbt04Table=ceCxTbt04Table, ccscf100FiberLink=ccscf100FiberLink, cpsmp110TemperatureTbl=cpsmp110TemperatureTbl, carCf02Id=carCf02Id, cpsvt100Id=cpsvt100Id, ceCxTbt04CoaxRecv=ceCxTbt04CoaxRecv, cbftf100PauseStatTbl=cbftf100PauseStatTbl, cmefg100RmtOamPeerParserState=cmefg100RmtOamPeerParserState, crmfe100ConfigMode=crmfe100ConfigMode, crmfe100RmtLoopback=crmfe100RmtLoopback, smacf100PAutoNegot=smacf100PAutoNegot, cbftf150PortCount=cbftf150PortCount, cmefg100RmtTpLink=cmefg100RmtTpLink, cmefg100RmtOamPeerMultiplexorState=cmefg100RmtOamPeerMultiplexorState, crs4f100ConnB=crs4f100ConnB, cmefg100LocDmiTempAlarm=cmefg100LocDmiTempAlarm, cmefg100LocSelfTestFailed=cmefg100LocSelfTestFailed, cpsEmptyId=cpsEmptyId, crs2f100SerialNumber=crs2f100SerialNumber, cdftf100MRevision=cdftf100MRevision, cfSmMm05Power=cfSmMm05Power, mcc16ComNotes=mcc16ComNotes, ce100BtxFrl03Table=ce100BtxFrl03Table, crmfe100Entry=crmfe100Entry, ct1e1Cf01Table=ct1e1Cf01Table, crs4f100Table=crs4f100Table, backplane=backplane, pSCabinetRemoved=pSCabinetRemoved, csdtf100RmtConnB=csdtf100RmtConnB, cemtf100Groups=cemtf100Groups, crs2f100RmtDetected=crs2f100RmtDetected, cmefg100ImcTxMulticastPktsTbl=cmefg100ImcTxMulticastPktsTbl, crmfe100ConnB=crmfe100ConnB, cetct100CollisionsPerMinute=cetct100CollisionsPerMinute, ccscf100ConfigMode=ccscf100ConfigMode, crs2f100Fault=crs2f100Fault, crmfe100FarEndFault=crmfe100FarEndFault, cbftf150CfgMatch=cbftf150CfgMatch, cmefg100LocTpAdv100HDX=cmefg100LocTpAdv100HDX, cmefg100VlanCacheState=cmefg100VlanCacheState, cmefg100LocOamOrgSpecificTx=cmefg100LocOamOrgSpecificTx, smacf100BiaIndex=smacf100BiaIndex, csdtf100SerialNumber=csdtf100SerialNumber, crmfe100RmtFault=crmfe100RmtFault, cfSmMm02Entry=cfSmMm02Entry, cmefg100LocOamControlInUnknownOpcodes=cmefg100LocOamControlInUnknownOpcodes, chassisSlotTypes=chassisSlotTypes, csdtf100RmtMRevision=csdtf100RmtMRevision, cpsvt100CacheClean=cpsvt100CacheClean, crmfe100Fault=crmfe100Fault, cePswFx03FiberLink=cePswFx03FiberLink, cmefg100ImcRxQosPktsTbl=cmefg100ImcRxQosPktsTbl, csdtf100CacheClean=csdtf100CacheClean, cpsmm100SysLocation=cpsmm100SysLocation, csetf100ConnB=csetf100ConnB, chstrCf01FiberSignalDetect=chstrCf01FiberSignalDetect, cmefg100LocFxTxBwaMb=cmefg100LocFxTxBwaMb, cgfeb100CfgMatch=cgfeb100CfgMatch, mcc16SlotTable=mcc16SlotTable, csdtf100CfgMatch=csdtf100CfgMatch, cmefg100LadEditCmd=cmefg100LadEditCmd, cpsmm200Entry=cpsmm200Entry, cmefg100RmtFiberQosPause=cmefg100RmtFiberQosPause, cmefg100VlanFiberInUntaggedDrop=cmefg100VlanFiberInUntaggedDrop, cpsMc1800PSPower2=cpsMc1800PSPower2, cgfeb100TPLpAdvPause=cgfeb100TPLpAdvPause, cpsmm100SwRevision=cpsmm100SwRevision, cpsmp110Id=cpsmp110Id, smacf100PTxSingleCollision=smacf100PTxSingleCollision, cpsMc0200Entry=cpsMc0200Entry, csdtf100RmtConnA=csdtf100RmtConnA, csdtf100RmtCopperLink=csdtf100RmtCopperLink, cpsCabDetail=cpsCabDetail, cmefg100VlanCacheCmd=cmefg100VlanCacheCmd, cmefg100LocOamLastGasp=cmefg100LocOamLastGasp, cpsmp100ConfigMode=cpsmp100ConfigMode, cpsld100Ps1Power=cpsld100Ps1Power, cettf100AutoCross=cettf100AutoCross, cfetf105SlotIndex=cfetf105SlotIndex, cfSmMm04MMSignalDetect=cfSmMm04MMSignalDetect, ceTbtFrl04TPRecv=ceTbtFrl04TPRecv, cfSmMm02Table=cfSmMm02Table, ceRTxFx01TPSignalDetect=ceRTxFx01TPSignalDetect, cpsld100Ps1InUse=cpsld100Ps1InUse, cmefg100RmtTpAdv1000HDX=cmefg100RmtTpAdv1000HDX, cfSmMm05Id=cfSmMm05Id, cpsvt100RmtCableMode=cpsvt100RmtCableMode, ceTbtFrl03FiberRecv=ceTbtFrl03FiberRecv, cettf100TPActivity=cettf100TPActivity, cetct100CfgMatch=cetct100CfgMatch, cfmff100Enabled=cfmff100Enabled, crmfe100BiaIndex=crmfe100BiaIndex, cbftf100ConnectorTbl=cbftf100ConnectorTbl, cbftf100RedundantPath=cbftf100RedundantPath, cmefg100LocOamActiveMode=cmefg100LocOamActiveMode, cfdCd01Index=cfdCd01Index, cmefg100RmtOamUnidirectional=cmefg100RmtOamUnidirectional, cbftf100Id=cbftf100Id, crs2f100CacheClean=crs2f100CacheClean, cpsmm100SubnetMask=cpsmm100SubnetMask, ce100BtxFx04FiberSignalDetect=ce100BtxFx04FiberSignalDetect, csdtf100RmtDetected=csdtf100RmtDetected, csdtf100CopperLoopback=csdtf100CopperLoopback, smacf100PFullDuplex=smacf100PFullDuplex, crs2f100Id=crs2f100Id, cgfeb100FiberLpAdv1000HDX=cgfeb100FiberLpAdv1000HDX, cpsmp100Groups=cpsmp100Groups, cbftf100Entry=cbftf100Entry, cfetf205Entry=cfetf205Entry, cpsmp110PSReadyTbl=cpsmp110PSReadyTbl, cmefg100LocOamUnidirectional=cmefg100LocOamUnidirectional, cpsmp100LFanFault=cpsmp100LFanFault, cpsmp110Groups=cpsmp110Groups, smacf100PWrapTxOctets=smacf100PWrapTxOctets, cpsvt100LoopBack=cpsvt100LoopBack, cpsmp100ChassisPower=cpsmp100ChassisPower, cmefg100LocFiberSacEnable=cmefg100LocFiberSacEnable, cfSmMm06Power=cfSmMm06Power, captf100Entry=captf100Entry, ccscf100ConnA=ccscf100ConnA, ct1e1Cf01FiberSignalDetect=ct1e1Cf01FiberSignalDetect, crs4f100BiaIndex=crs4f100BiaIndex, cmefg100RmtTpAdv100FDX=cmefg100RmtTpAdv100FDX, cfSmMm04Id=cfSmMm04Id, cgfeb100QosLqWeight=cgfeb100QosLqWeight, cgetf100Entry=cgetf100Entry, csdtf100RmtTPCoax=csdtf100RmtTPCoax, smacf100PTxLateCollision=smacf100PTxLateCollision, smacf100PRxDropPkts=smacf100PRxDropPkts, ctrCf01Table=ctrCf01Table)
mibBuilder.exportSymbols("MCC16-MIB", cfetf205FiberLink=cfetf205FiberLink, cmefg100ImcTxDropPktsTbl=cmefg100ImcTxDropPktsTbl, cettf100LinkPassThrough=cettf100LinkPassThrough, cbftf100CrossTbl=cbftf100CrossTbl, cmefg100LocTpCross=cmefg100LocTpCross, cbftf100ConfigMode=cbftf100ConfigMode, cbftf100LinkPassThrough=cbftf100LinkPassThrough, cmefg100VlanEditUntagFiber=cmefg100VlanEditUntagFiber, smacf100PPkts1024to1522Octets=smacf100PPkts1024to1522Octets, cpsmp100SlotIndex=cpsmp100SlotIndex, smacf100PTxDeferredTransmit=smacf100PTxDeferredTransmit, cmefg100RmtDmiTempAlarm=cmefg100RmtDmiTempAlarm, ce100BtxFx04Power=ce100BtxFx04Power, cfmff100Id=cfmff100Id, cfetf105AutoNegot=cfetf105AutoNegot, crmfe100TxFxBwa=crmfe100TxFxBwa, cmefg100ImcRxPkts64OctetsTbl=cmefg100ImcRxPkts64OctetsTbl, cfmff100MRevision=cfmff100MRevision, carCf02Power=carCf02Power, cbftf150SubDeviceIndex=cbftf150SubDeviceIndex, csetf100SerialNumber=csetf100SerialNumber, cePswSx01TPLink=cePswSx01TPLink, cgfeb100FiberQosPause=cgfeb100FiberQosPause, smacf100AgingTimer=smacf100AgingTimer, cmefg100LocUptime=cmefg100LocUptime, crmfe100FxBytesL=crmfe100FxBytesL, cfetf100Fault=cfetf100Fault, cpsmm100IPAddress=cpsmm100IPAddress, cbftf100SACCfgTbl=cbftf100SACCfgTbl, smacf100PAdv100FDX=smacf100PAdv100FDX, crs2f100FirmwareRevision=crs2f100FirmwareRevision, ccscf100CopperLink=ccscf100CopperLink, smacf100PAdvPause=smacf100PAdvPause, cmefg100LocDmiTxPower=cmefg100LocDmiTxPower, cfetf205Pause=cfetf205Pause, cemtf100Table=cemtf100Table, cpsCabinetSequence=cpsCabinetSequence, csdtf100RmtAISFiber=csdtf100RmtAISFiber, caCf02Index=caCf02Index, cpsmp110FirmwareRevision=cpsmp110FirmwareRevision, cpsmm100HwRevision=cpsmm100HwRevision, cpsmm100SerialNumber=cpsmm100SerialNumber, ce100BtxSx01FiberSignalDetect=ce100BtxSx01FiberSignalDetect, cgfeb100ConnB=cgfeb100ConnB, ceRTxFx01Table=ceRTxFx01Table, cmefg100SlotIndex=cmefg100SlotIndex, cmefg100LocTpAdv10HDX=cmefg100LocTpAdv10HDX, crs2f100RmtConfigMode=crs2f100RmtConfigMode, cetct100Collision=cetct100Collision, csdtf100TAOSCopper=csdtf100TAOSCopper, cfmff100ConfigMode=cfmff100ConfigMode, cgfeb100Id=cgfeb100Id, cmefg100LocFiberLink=cmefg100LocFiberLink, cfetf205FarEndFault=cfetf205FarEndFault, cpsIsPrimary=cpsIsPrimary, cmefg100RmtTpCross=cmefg100RmtTpCross, smacf100PQosPause=smacf100PQosPause, pSDeviceRemoved=pSDeviceRemoved, cbftf100Adv10FDXTbl=cbftf100Adv10FDXTbl, smacf100PTxCollisions=smacf100PTxCollisions, cpsmm100Entry=cpsmm100Entry, smacf100PAdv100HDX=smacf100PAdv100HDX, cgetf100CacheClean=cgetf100CacheClean, cbftf100MirrorOutTbl=cbftf100MirrorOutTbl, csetf100FiberLink=csetf100FiberLink, ccscf100Groups=ccscf100Groups, ce100BtxFx04TPRecv=ce100BtxFx04TPRecv, mcc16Ver1=mcc16Ver1, cgfeb100SerialNumber=cgfeb100SerialNumber, ccscf100FiberLoopback=ccscf100FiberLoopback, smacf100PTxOctets=smacf100PTxOctets, cettf100FiberActivity=cettf100FiberActivity, cmefg100LadEditVid=cmefg100LadEditVid, cmefg100RmtFirmwareRevision=cmefg100RmtFirmwareRevision, cfdCd01Id=cfdCd01Id, cdftf100Groups=cdftf100Groups, cmefg100LocOamMultiplexorState=cmefg100LocOamMultiplexorState, cdftf100SerialNumber=cdftf100SerialNumber, carCf02FiberRecv=carCf02FiberRecv, cmefg100ImcRxQosOctetsWrapTbl=cmefg100ImcRxQosOctetsWrapTbl, crmfe100MbFxTxBwa=crmfe100MbFxTxBwa, cfmff100Entry=cfmff100Entry, cpsvt100Table=cpsvt100Table, chSlcps=chSlcps, csetf100ConfigMode=csetf100ConfigMode, smacf100PTxFrameInDisc=smacf100PTxFrameInDisc, cmefg100RmtSelfTestFailed=cmefg100RmtSelfTestFailed, captf100CfgMatch=captf100CfgMatch, cgfeb100TPAdv10HDX=cgfeb100TPAdv10HDX, mc20pEmptyId=mc20pEmptyId, cmefg100LadCacheState=cmefg100LadCacheState, crmfe100RmtPause=crmfe100RmtPause, captf100Groups=captf100Groups, cgfeb100TPLpAdv1000FDX=cgfeb100TPLpAdv1000FDX, cpsmp110MasterCurrentFault=cpsmp110MasterCurrentFault, cfSmMm05SMSignalDetect=cfSmMm05SMSignalDetect, smacf100PWrapRxOctets=smacf100PWrapRxOctets, cfetf105TPActivity=cfetf105TPActivity, cpsCf01Index=cpsCf01Index, cfetf105Groups=cfetf105Groups, cpsMc1900Entry=cpsMc1900Entry, cfetf105ConnA=cfetf105ConnA, cbftf100FormFactor=cbftf100FormFactor, cmefg100LocDmiRxPowerAlarm=cmefg100LocDmiRxPowerAlarm, carCf02Index=carCf02Index, cfetf100Id=cfetf100Id, cpsMc1900BiaIndex=cpsMc1900BiaIndex, mcc16ComPS2Power=mcc16ComPS2Power, cpsvt100RmtLoopBack=cpsvt100RmtLoopBack, crmfe100RmtUpTime=crmfe100RmtUpTime, cmefg100LocTpAdv10FDX=cmefg100LocTpAdv10FDX, crs2f100ConfigMode=crs2f100ConfigMode, cettf100ConfigMode=cettf100ConfigMode, smacf100PSACStat=smacf100PSACStat, cfSmMm05Entry=cfSmMm05Entry, csetf100ConnA=csetf100ConnA, cmefg100VlanEditUntagTp=cmefg100VlanEditUntagTp, cpsMc1800Description=cpsMc1800Description, cgfeb100TPFullDuplexCfg=cgfeb100TPFullDuplexCfg, cpsvt100Entry=cpsvt100Entry, cpsmm100SNMPTrapMgr3=cpsmm100SNMPTrapMgr3, cbftf100CfgMatch=cbftf100CfgMatch, cgetf100FullDuplex=cgetf100FullDuplex, smacf100PBlockMgmt=smacf100PBlockMgmt, cpsvt100RmtInvertRX=cpsvt100RmtInvertRX, ceTxSx02Id=ceTxSx02Id, pSCabinetAdded=pSCabinetAdded, crmfe100Pause=crmfe100Pause, ce100BtxSx01Entry=ce100BtxSx01Entry, cbftf150100MbpsTbl=cbftf150100MbpsTbl, cfetf105SerialNumber=cfetf105SerialNumber, cmefg100QosLqWeight=cmefg100QosLqWeight, cRs232Cf01FiberLock=cRs232Cf01FiberLock, cbftf150BiaIndex=cbftf150BiaIndex, cgetf100Enabled=cgetf100Enabled, crs2f100SlotIndex=crs2f100SlotIndex, cmefg100VlanEditFwdTp=cmefg100VlanEditFwdTp, cpsCf01Id=cpsCf01Id, cmefg100RmtDmiTxPower=cmefg100RmtDmiTxPower, cbftf150CacheClean=cbftf150CacheClean, cmefg100LadEditPort=cmefg100LadEditPort, cmefg100RmtTpAutoNegot=cmefg100RmtTpAutoNegot, cgetf100BiaIndex=cgetf100BiaIndex, cpsmp100Table=cpsmp100Table, smacf100PRxGoodOctets=smacf100PRxGoodOctets, cmefg100LocOamLocDteDisc=cmefg100LocOamLocDteDisc, cpsmm100SNMPTrapMgr=cpsmm100SNMPTrapMgr, cmefg100ImcTxDeferredTransmitTbl=cmefg100ImcTxDeferredTransmitTbl, cmefg100LocFiberDuplex=cmefg100LocFiberDuplex, cemtf100CfgMatch=cemtf100CfgMatch, cfetf205AutoCross=cfetf205AutoCross, cmefg100VlanPriTagCtrl=cmefg100VlanPriTagCtrl, cfetf100SlotIndex=cfetf100SlotIndex, ceTxSx02Entry=ceTxSx02Entry, crmfe100RmtFiberLink=crmfe100RmtFiberLink, cmefg100RmtOamPeerMacAddress=cmefg100RmtOamPeerMacAddress, cmefg100RmtOamLastGasp=cmefg100RmtOamLastGasp, cpsmm200ICIF=cpsmm200ICIF, cmefg100RmtFiberPause=cmefg100RmtFiberPause, crmfe100TPLink=crmfe100TPLink, cfmff100SlotIndex=cfmff100SlotIndex, cfetf100TPActivity=cfetf100TPActivity, csdtf100FiberLink=csdtf100FiberLink, ceCxTbt04TPRecv=ceCxTbt04TPRecv, cmefg100RmtTpAdv10HDX=cmefg100RmtTpAdv10HDX, crs2f100RmtCopperActivity=crs2f100RmtCopperActivity, ce100BtxFrl03Index=ce100BtxFrl03Index, cpsmp110ConfigMode=cpsmp110ConfigMode, caCf02Id=caCf02Id, cmefg100RmtOamPeerVendorOui=cmefg100RmtOamPeerVendorOui, cfdCd01Lock=cfdCd01Lock, cpsvt100RmtFirmwareRev=cpsvt100RmtFirmwareRev, csdtf100RmtFiberLoopback=csdtf100RmtFiberLoopback, cmefg100ImcRxPkts256to511OctetsTbl=cmefg100ImcRxPkts256to511OctetsTbl, cgfeb100FiberLpAdv1000FDX=cgfeb100FiberLpAdv1000FDX, cgfeb100TPAdv100HDX=cgfeb100TPAdv100HDX, cbCf01Entry=cbCf01Entry, cbftf150ConfigMode=cbftf150ConfigMode, cmefg100VlanTpInUntaggedDrop=cmefg100VlanTpInUntaggedDrop, cbftf100SubDeviceIndex=cbftf100SubDeviceIndex, cpsmm100LastGasp=cpsmm100LastGasp, cgfeb100FiberAdvPause=cgfeb100FiberAdvPause, cgfeb100Groups=cgfeb100Groups, cpsmm100Reset=cpsmm100Reset, ce100BtxFx04MtEntry=ce100BtxFx04MtEntry, cdftf100ConnectorTbl=cdftf100ConnectorTbl, cetct100ConnB=cetct100ConnB, cpsld100Table=cpsld100Table, cfSmMm05Index=cfSmMm05Index, crmfe100RmtTPActivity=crmfe100RmtTPActivity, cmefg100LocOamOrgSpecificRx=cmefg100LocOamOrgSpecificRx, cpsld100Ps2Power=cpsld100Ps2Power, cmefg100VlanEditVid=cmefg100VlanEditVid, cmefg100LocOamDuplicateEventNotificationRx=cmefg100LocOamDuplicateEventNotificationRx, cdftf100SubDeviceIndex=cdftf100SubDeviceIndex, smacf100ResetCounters=smacf100ResetCounters, cgfeb100TPLpAdv10HDX=cgfeb100TPLpAdv10HDX, crmfe100Enabled=crmfe100Enabled, cbftf150MRevision=cbftf150MRevision, cpsMc0800Table=cpsMc0800Table, cmefg100RmtOamCriticalEvent=cmefg100RmtOamCriticalEvent, CpsConnector=CpsConnector, smacf100MRevision=smacf100MRevision, ce100BtxFrl03FiberSignalDetect=ce100BtxFrl03FiberSignalDetect, cps=cps, cmefg100VlanFiberDefaultVid=cmefg100VlanFiberDefaultVid, cpsModuleEntry=cpsModuleEntry, cettf100SlotIndex=cettf100SlotIndex, cmefg100VlanEditCmd=cmefg100VlanEditCmd, cfetf100Pause=cfetf100Pause, cmefg100RmtFpgaRev=cmefg100RmtFpgaRev, cpsmp110MRevision=cpsmp110MRevision, cpsSlotPwrSlotIndex=cpsSlotPwrSlotIndex, cmefg100VlanVidTbl=cmefg100VlanVidTbl, cemtf100ConnB=cemtf100ConnB, cmefg100LocTpSacStatus=cmefg100LocTpSacStatus, ceTbtFrl03Entry=ceTbtFrl03Entry, cbCf01TPCoaxRecv=cbCf01TPCoaxRecv, ce100BtxFx04MtFiberRecv=ce100BtxFx04MtFiberRecv, cpsmp110MasterTempFault=cpsmp110MasterTempFault, cfetf100SerialNumber=cfetf100SerialNumber, cpsmp100Mode=cpsmp100Mode, cgfeb100TPLpAdv1000HDX=cgfeb100TPLpAdv1000HDX, chassis=chassis, cpsmp100SupplyType=cpsmp100SupplyType, cettf100Table=cettf100Table, cpsmp100Entry=cpsmp100Entry, cmefg100LocOamFramesLostDueToOamError=cmefg100LocOamFramesLostDueToOamError, crs2f100MRevision=crs2f100MRevision, cgetf100FiberLink=cgetf100FiberLink, cpsmm100IsPrimary=cpsmm100IsPrimary, crmfe100RmtNetworkMode=crmfe100RmtNetworkMode, crs4f100Entry=crs4f100Entry, cfSmMm06MMSignalDetect=cfSmMm06MMSignalDetect, cmefg100VlanTagIn=cmefg100VlanTagIn, cbftf100SACMasterCfg=cbftf100SACMasterCfg, csdtf100CopperLineBuildout=csdtf100CopperLineBuildout, crmfe100ConnA=crmfe100ConnA)
