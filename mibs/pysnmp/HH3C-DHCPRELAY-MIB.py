#
# PySNMP MIB module HH3C-DHCPRELAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-DHCPRELAY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:12:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Bits, Gauge32, MibIdentifier, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, Unsigned32, ModuleIdentity, Counter32, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "Gauge32", "MibIdentifier", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "Unsigned32", "ModuleIdentity", "Counter32", "ObjectIdentity", "Integer32")
RowStatus, TextualConvention, TruthValue, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue", "DisplayString", "MacAddress")
hh3cDhcpRelay = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 58))
hh3cDhcpRelay.setRevisions(('2005-06-08 00:00',))
if mibBuilder.loadTexts: hh3cDhcpRelay.setLastUpdated('200506080000Z')
if mibBuilder.loadTexts: hh3cDhcpRelay.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cDHCPRMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1))
hh3cDHCPRIfSelectTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 1), )
if mibBuilder.loadTexts: hh3cDHCPRIfSelectTable.setStatus('current')
hh3cDHCPRIfSelectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cDHCPRIfSelectEntry.setStatus('current')
hh3cDHCPRIfSelectRelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPRIfSelectRelayMode.setStatus('current')
hh3cDHCPRIpToGroupTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 2), )
if mibBuilder.loadTexts: hh3cDHCPRIpToGroupTable.setStatus('current')
hh3cDHCPRIpToGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 2, 1), ).setIndexNames((0, "HH3C-DHCPRELAY-MIB", "hh3cDHCPRIpToGroupGroupId"), (0, "HH3C-DHCPRELAY-MIB", "hh3cDHCPRIpToGroupServerIpType"), (0, "HH3C-DHCPRELAY-MIB", "hh3cDHCPRIpToGroupServerIp"))
if mibBuilder.loadTexts: hh3cDHCPRIpToGroupEntry.setStatus('current')
hh3cDHCPRIpToGroupGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 19)))
if mibBuilder.loadTexts: hh3cDHCPRIpToGroupGroupId.setStatus('current')
hh3cDHCPRIpToGroupServerIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hh3cDHCPRIpToGroupServerIpType.setStatus('current')
hh3cDHCPRIpToGroupServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 2, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: hh3cDHCPRIpToGroupServerIp.setStatus('current')
hh3cDHCPRIpToGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPRIpToGroupRowStatus.setStatus('current')
hh3cDHCPRIfToGroupTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 3), )
if mibBuilder.loadTexts: hh3cDHCPRIfToGroupTable.setStatus('current')
hh3cDHCPRIfToGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cDHCPRIfToGroupEntry.setStatus('current')
hh3cDHCPRIfToGroupGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPRIfToGroupGroupId.setStatus('current')
hh3cDHCPRIfToGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPRIfToGroupRowStatus.setStatus('current')
hh3cDHCPRAddrCheckTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 4), )
if mibBuilder.loadTexts: hh3cDHCPRAddrCheckTable.setStatus('current')
hh3cDHCPRAddrCheckEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cDHCPRAddrCheckEntry.setStatus('current')
hh3cDHCPRAddrCheckSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPRAddrCheckSwitch.setStatus('current')
hh3cDHCPRSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 5), )
if mibBuilder.loadTexts: hh3cDHCPRSecurityTable.setStatus('current')
hh3cDHCPRSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 5, 1), ).setIndexNames((0, "HH3C-DHCPRELAY-MIB", "hh3cDHCPRSecurityClientIpAddrType"), (0, "HH3C-DHCPRELAY-MIB", "hh3cDHCPRSecurityClientIpAddr"))
if mibBuilder.loadTexts: hh3cDHCPRSecurityEntry.setStatus('current')
hh3cDHCPRSecurityClientIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hh3cDHCPRSecurityClientIpAddrType.setStatus('current')
hh3cDHCPRSecurityClientIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 5, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: hh3cDHCPRSecurityClientIpAddr.setStatus('current')
hh3cDHCPRSecurityClientMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 5, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPRSecurityClientMacAddr.setStatus('current')
hh3cDHCPRSecurityClientProperty = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPRSecurityClientProperty.setStatus('current')
hh3cDHCPRSecurityClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPRSecurityClientRowStatus.setStatus('current')
hh3cDHCPRStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 6))
hh3cDHCPRRxClientPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 6, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPRRxClientPktNum.setStatus('current')
hh3cDHCPRTxClientPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 6, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPRTxClientPktNum.setStatus('current')
hh3cDHCPRRxServerPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 6, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPRRxServerPktNum.setStatus('current')
hh3cDHCPRTxServerPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 6, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPRTxServerPktNum.setStatus('current')
hh3cDHCPRDiscoverPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 6, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPRDiscoverPktNum.setStatus('current')
hh3cDHCPRRequestPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 6, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPRRequestPktNum.setStatus('current')
hh3cDHCPRDeclinePktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 6, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPRDeclinePktNum.setStatus('current')
hh3cDHCPRReleasePktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 6, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPRReleasePktNum.setStatus('current')
hh3cDHCPRInformPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 6, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPRInformPktNum.setStatus('current')
hh3cDHCPROfferPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 6, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPROfferPktNum.setStatus('current')
hh3cDHCPRAckPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 6, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPRAckPktNum.setStatus('current')
hh3cDHCPRNakPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 6, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPRNakPktNum.setStatus('current')
hh3cDHCPRStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 6, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPRStatisticsReset.setStatus('current')
hh3cDHCPRCycleGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 7))
hh3cDHCPRCycleStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPRCycleStatus.setStatus('current')
hh3cDHCPRConfigOption82Group = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 8))
hh3cDHCPROption82Switch = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPROption82Switch.setStatus('current')
hh3cDHCPROption82HandleStrategy = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("keep", 2), ("replace", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPROption82HandleStrategy.setStatus('current')
hh3cDHCPRConfigOption82IfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 8, 3), )
if mibBuilder.loadTexts: hh3cDHCPRConfigOption82IfTable.setStatus('current')
hh3cDHCPRConfigOption82IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 8, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cDHCPRConfigOption82IfEntry.setStatus('current')
hh3cDHCPROption82IfSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPROption82IfSwitch.setStatus('current')
hh3cDHCPROption82IfStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("keep", 2), ("replace", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPROption82IfStrategy.setStatus('current')
hh3cDHCPROption82IfFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("verbose", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPROption82IfFormat.setStatus('current')
hh3cDHCPROption82IfNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("mac", 2), ("sysname", 3), ("userdefine", 4))).clone('invalid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPROption82IfNodeType.setStatus('current')
hh3cDHCPROption82IfUsrDefString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 58, 1, 8, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPROption82IfUsrDefString.setStatus('current')
mibBuilder.exportSymbols("HH3C-DHCPRELAY-MIB", hh3cDhcpRelay=hh3cDhcpRelay, hh3cDHCPRTxServerPktNum=hh3cDHCPRTxServerPktNum, hh3cDHCPRRequestPktNum=hh3cDHCPRRequestPktNum, hh3cDHCPRConfigOption82IfEntry=hh3cDHCPRConfigOption82IfEntry, hh3cDHCPRIpToGroupTable=hh3cDHCPRIpToGroupTable, hh3cDHCPRSecurityTable=hh3cDHCPRSecurityTable, hh3cDHCPROption82IfUsrDefString=hh3cDHCPROption82IfUsrDefString, hh3cDHCPRCycleStatus=hh3cDHCPRCycleStatus, hh3cDHCPROfferPktNum=hh3cDHCPROfferPktNum, hh3cDHCPRIfSelectEntry=hh3cDHCPRIfSelectEntry, PYSNMP_MODULE_ID=hh3cDhcpRelay, hh3cDHCPRSecurityClientRowStatus=hh3cDHCPRSecurityClientRowStatus, hh3cDHCPRReleasePktNum=hh3cDHCPRReleasePktNum, hh3cDHCPRTxClientPktNum=hh3cDHCPRTxClientPktNum, hh3cDHCPRIfSelectTable=hh3cDHCPRIfSelectTable, hh3cDHCPRMibObject=hh3cDHCPRMibObject, hh3cDHCPRIpToGroupRowStatus=hh3cDHCPRIpToGroupRowStatus, hh3cDHCPRSecurityClientMacAddr=hh3cDHCPRSecurityClientMacAddr, hh3cDHCPRNakPktNum=hh3cDHCPRNakPktNum, hh3cDHCPRAddrCheckEntry=hh3cDHCPRAddrCheckEntry, hh3cDHCPRCycleGroup=hh3cDHCPRCycleGroup, hh3cDHCPRConfigOption82Group=hh3cDHCPRConfigOption82Group, hh3cDHCPROption82IfStrategy=hh3cDHCPROption82IfStrategy, hh3cDHCPROption82HandleStrategy=hh3cDHCPROption82HandleStrategy, hh3cDHCPRAddrCheckTable=hh3cDHCPRAddrCheckTable, hh3cDHCPROption82IfNodeType=hh3cDHCPROption82IfNodeType, hh3cDHCPRStatisticsGroup=hh3cDHCPRStatisticsGroup, hh3cDHCPROption82Switch=hh3cDHCPROption82Switch, hh3cDHCPRRxClientPktNum=hh3cDHCPRRxClientPktNum, hh3cDHCPRIpToGroupGroupId=hh3cDHCPRIpToGroupGroupId, hh3cDHCPRRxServerPktNum=hh3cDHCPRRxServerPktNum, hh3cDHCPROption82IfSwitch=hh3cDHCPROption82IfSwitch, hh3cDHCPRIpToGroupServerIp=hh3cDHCPRIpToGroupServerIp, hh3cDHCPRDeclinePktNum=hh3cDHCPRDeclinePktNum, hh3cDHCPRAddrCheckSwitch=hh3cDHCPRAddrCheckSwitch, hh3cDHCPRIfToGroupEntry=hh3cDHCPRIfToGroupEntry, hh3cDHCPRSecurityClientProperty=hh3cDHCPRSecurityClientProperty, hh3cDHCPROption82IfFormat=hh3cDHCPROption82IfFormat, hh3cDHCPRIfToGroupGroupId=hh3cDHCPRIfToGroupGroupId, hh3cDHCPRSecurityClientIpAddr=hh3cDHCPRSecurityClientIpAddr, hh3cDHCPRDiscoverPktNum=hh3cDHCPRDiscoverPktNum, hh3cDHCPRIfToGroupRowStatus=hh3cDHCPRIfToGroupRowStatus, hh3cDHCPRSecurityClientIpAddrType=hh3cDHCPRSecurityClientIpAddrType, hh3cDHCPRSecurityEntry=hh3cDHCPRSecurityEntry, hh3cDHCPRIpToGroupEntry=hh3cDHCPRIpToGroupEntry, hh3cDHCPRIfToGroupTable=hh3cDHCPRIfToGroupTable, hh3cDHCPRStatisticsReset=hh3cDHCPRStatisticsReset, hh3cDHCPRIpToGroupServerIpType=hh3cDHCPRIpToGroupServerIpType, hh3cDHCPRConfigOption82IfTable=hh3cDHCPRConfigOption82IfTable, hh3cDHCPRAckPktNum=hh3cDHCPRAckPktNum, hh3cDHCPRInformPktNum=hh3cDHCPRInformPktNum, hh3cDHCPRIfSelectRelayMode=hh3cDHCPRIfSelectRelayMode)
