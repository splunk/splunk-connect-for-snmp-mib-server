#
# PySNMP MIB module ZhoneVdsl-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZhoneVdsl-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:46:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
HCPerfIntervalCount, HCPerfCurrentCount, HCPerfTimeElapsed = mibBuilder.importSymbols("HC-PerfHist-TC-MIB", "HCPerfIntervalCount", "HCPerfCurrentCount", "HCPerfTimeElapsed")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, NotificationType, iso, ModuleIdentity, transmission, IpAddress, Counter64, ObjectIdentity, TimeTicks, Gauge32, MibIdentifier, Counter32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "iso", "ModuleIdentity", "transmission", "IpAddress", "Counter64", "ObjectIdentity", "TimeTicks", "Gauge32", "MibIdentifier", "Counter32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
RowStatus, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue", "DisplayString")
zhoneVdsl, zhoneModules = mibBuilder.importSymbols("Zhone", "zhoneVdsl", "zhoneModules")
zhoneVdslMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 110))
zhoneVdslMib.setRevisions(('2013-10-08 06:43', '2013-02-27 18:00', '2013-02-11 14:15', '2011-12-01 05:59', '2011-11-16 12:14', '2011-10-18 11:13', '2011-10-14 11:24', '2011-04-28 11:55', '2010-11-05 07:16', '2010-10-13 04:59', '2010-06-07 11:29', '2010-05-31 00:11', '2010-04-02 06:40', '2010-03-29 05:54', '2010-03-02 08:44', '2008-04-14 12:28', '2008-02-05 08:56', '2007-10-23 16:53', '2007-10-05 13:24', '2007-06-20 10:56', '2007-03-14 16:08', '2006-12-05 15:09', '2006-11-10 08:58', '2006-10-10 15:25', '2006-09-10 11:16', '2006-08-22 17:21', '2006-06-15 15:29', '2004-02-19 00:00',))
if mibBuilder.loadTexts: zhoneVdslMib.setLastUpdated('201302271600Z')
if mibBuilder.loadTexts: zhoneVdslMib.setOrganization('ADSLMIB Working Group')
class ZhoneVdslLineCodingType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("mcm", 2), ("scm", 3))

class ZhoneVdslLineEntity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("vtuc", 1), ("vtur", 2))

zhoneVdslLineMib = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1))
zhoneVdslNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0))
vdslXtucPerf15MinLofsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 1)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinLofs"))
if mibBuilder.loadTexts: vdslXtucPerf15MinLofsThreshTrap.setStatus('current')
vdslXtucPerf15MinLossThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 2)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinLoss"))
if mibBuilder.loadTexts: vdslXtucPerf15MinLossThreshTrap.setStatus('current')
vdslXtucPerf15MinLprsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 3)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinLprs"))
if mibBuilder.loadTexts: vdslXtucPerf15MinLprsThreshTrap.setStatus('current')
vdslXtucPerf15MinLolsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 4)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinLols"))
if mibBuilder.loadTexts: vdslXtucPerf15MinLolsThreshTrap.setStatus('current')
vdslXtucPerf15MinESsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 5)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinESs"))
if mibBuilder.loadTexts: vdslXtucPerf15MinESsThreshTrap.setStatus('current')
vdslXtucPerf15MinSESsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 6)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinSESs"))
if mibBuilder.loadTexts: vdslXtucPerf15MinSESsThreshTrap.setStatus('current')
vdslXtucPerf15MinUASsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 7)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinUASs"))
if mibBuilder.loadTexts: vdslXtucPerf15MinUASsThreshTrap.setStatus('current')
vdslXtucPerf1DayLofsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 8)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayLofs"))
if mibBuilder.loadTexts: vdslXtucPerf1DayLofsThreshTrap.setStatus('current')
vdslXtucPerf1DayLossThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 9)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayLoss"))
if mibBuilder.loadTexts: vdslXtucPerf1DayLossThreshTrap.setStatus('current')
vdslXtucPerf1DayLprsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 10)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayLprs"))
if mibBuilder.loadTexts: vdslXtucPerf1DayLprsThreshTrap.setStatus('current')
vdslXtucPerf1DayLolsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 11)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayLols"))
if mibBuilder.loadTexts: vdslXtucPerf1DayLolsThreshTrap.setStatus('current')
vdslXtucPerf1DayESsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 12)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayESs"))
if mibBuilder.loadTexts: vdslXtucPerf1DayESsThreshTrap.setStatus('current')
vdslXtucPerf1DaySESsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 13)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DaySESs"))
if mibBuilder.loadTexts: vdslXtucPerf1DaySESsThreshTrap.setStatus('current')
vdslXtucPerf1DayUASsThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 14)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayUASs"))
if mibBuilder.loadTexts: vdslXtucPerf1DayUASsThreshTrap.setStatus('current')
zhoneVdslInitFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 15)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslPerfDataInits"))
if mibBuilder.loadTexts: zhoneVdslInitFailureTrap.setStatus('current')
vdslXtucMinTxThresholdAlarmFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 16)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslChanCurrTxRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMinTxThresholdAlarm"))
if mibBuilder.loadTexts: vdslXtucMinTxThresholdAlarmFailureTrap.setStatus('current')
vdslXturMinTxThresholdAlarmFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 0, 17)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslChanCurrTxRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMinTxThresholdAlarm"))
if mibBuilder.loadTexts: vdslXturMinTxThresholdAlarmFailureTrap.setStatus('current')
zhoneVdslMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1))
zhoneVdslLineTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 1), )
if mibBuilder.loadTexts: zhoneVdslLineTable.setStatus('current')
zhoneVdslLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneVdslLineEntry.setStatus('current')
zhoneVdslLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 1, 1, 1), ZhoneVdslLineCodingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslLineCoding.setStatus('current')
zhoneVdslLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noChannel", 1), ("fastOnly", 2), ("interleavedOnly", 3), ("fastOrInterleaved", 4), ("fastAndInterleaved", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslLineType.setStatus('current')
zhoneVdslLineConfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVdslLineConfProfile.setStatus('current')
zhoneVdslLineAlarmConfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('DEFVAL')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfProfile.setStatus('current')
zhoneVdslPhysTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2), )
if mibBuilder.loadTexts: zhoneVdslPhysTable.setStatus('current')
zhoneVdslPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZhoneVdsl-MIB", "zhoneVdslPhysSide"))
if mibBuilder.loadTexts: zhoneVdslPhysEntry.setStatus('current')
zhoneVdslPhysSide = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 1), ZhoneVdslLineEntity())
if mibBuilder.loadTexts: zhoneVdslPhysSide.setStatus('current')
zhoneVdslPhysInvSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysInvSerialNumber.setStatus('current')
zhoneVdslPhysInvVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysInvVendorID.setStatus('current')
zhoneVdslPhysInvVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysInvVersionNumber.setStatus('current')
zhoneVdslPhysCurrSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 127))).setUnits('0.10dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysCurrSnrMgn.setStatus('current')
zhoneVdslPhysCurrAtn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('0.10dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysCurrAtn.setStatus('current')
zhoneVdslPhysCurrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 7), Bits().clone(namedValues=NamedValues(("noDefect", 0), ("lossOfFraming", 1), ("lossOfSignal", 2), ("lossOfPower", 3), ("lossOfSignalQuality", 4), ("lossOfLink", 5), ("dataInitFailure", 6), ("configInitFailure", 7), ("protocolInitFailure", 8), ("noPeerVtuPresent", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysCurrStatus.setStatus('current')
zhoneVdslPhysCurrOutputPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160))).setUnits('0.1dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysCurrOutputPwr.setStatus('current')
zhoneVdslPhysCurrAttainableRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 9), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysCurrAttainableRate.setStatus('current')
zhoneVdslPhysCurrLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 10), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysCurrLineRate.setStatus('current')
zhoneVdslPhysCurrConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("not-connected", 2), ("invalid", 3), ("adsl", 4), ("adsl2", 5), ("adsl2-annexm", 6), ("adsl2plus", 7), ("adsl2plus-annexm", 8), ("vdsl1", 9), ("vdsl2", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysCurrConnType.setStatus('current')
zhoneVdslPhysCurrProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("g993-2-8a", 1), ("g993-2-8b", 2), ("g993-2-8c", 3), ("g993-2-8d", 4), ("g993-2-12a", 5), ("g993-2-12b", 6), ("g993-2-17a", 7), ("g993-2-30a", 8), ("no-vdsl-connection", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysCurrProfile.setStatus('current')
zhoneVdslPhysPhyRActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysPhyRActive.setStatus('current')
zhoneVdslPhysGinpActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysGinpActive.setStatus('current')
zhoneVdslPhysTransportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atm", 1), ("ptm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhysTransportMode.setStatus('current')
zhoneVdslChanTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 3), )
if mibBuilder.loadTexts: zhoneVdslChanTable.setStatus('current')
zhoneVdslChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZhoneVdsl-MIB", "zhoneVdslPhysSide"))
if mibBuilder.loadTexts: zhoneVdslChanEntry.setStatus('current')
zhoneVdslChanInterleaveDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 3, 1, 1), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanInterleaveDelay.setStatus('current')
zhoneVdslChanCrcBlockLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 3, 1, 2), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCrcBlockLength.setStatus('current')
zhoneVdslChanCurrTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 3, 1, 3), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCurrTxRate.setStatus('current')
zhoneVdslChanCurrTxSlowBurstProtect = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 3, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1275))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCurrTxSlowBurstProtect.setStatus('current')
zhoneVdslChanCurrTxFastFec = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 3, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCurrTxFastFec.setStatus('current')
zhoneVdslPerfDataTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4), )
if mibBuilder.loadTexts: zhoneVdslPerfDataTable.setStatus('current')
zhoneVdslPerfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZhoneVdsl-MIB", "zhoneVdslPhysSide"))
if mibBuilder.loadTexts: zhoneVdslPerfDataEntry.setStatus('current')
zhoneVdslPerfDataValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setUnits('intervals').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataValidIntervals.setStatus('current')
zhoneVdslPerfDataInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setUnits('intervals').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataInvalidIntervals.setStatus('current')
zhoneVdslPerfDataLofs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataLofs.setStatus('current')
zhoneVdslPerfDataLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataLoss.setStatus('current')
zhoneVdslPerfDataLprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataLprs.setStatus('current')
zhoneVdslPerfDataLols = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataLols.setStatus('current')
zhoneVdslPerfDataESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataESs.setStatus('current')
zhoneVdslPerfDataSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataSESs.setStatus('current')
zhoneVdslPerfDataUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataUASs.setStatus('current')
zhoneVdslPerfDataInits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 10), Unsigned32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataInits.setStatus('current')
zhoneVdslPerfDataCurr15MinTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinTimeElapsed.setStatus('current')
zhoneVdslPerfDataCurr15MinLofs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 12), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinLofs.setStatus('current')
zhoneVdslPerfDataCurr15MinLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 13), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinLoss.setStatus('current')
zhoneVdslPerfDataCurr15MinLprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 14), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinLprs.setStatus('current')
zhoneVdslPerfDataCurr15MinLols = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 15), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinLols.setStatus('current')
zhoneVdslPerfDataCurr15MinESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 16), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinESs.setStatus('current')
zhoneVdslPerfDataCurr15MinSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 17), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinSESs.setStatus('current')
zhoneVdslPerfDataCurr15MinUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 18), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinUASs.setStatus('current')
zhoneVdslPerfDataCurr15MinInits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 19), Unsigned32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr15MinInits.setStatus('current')
zhoneVdslPerfData1DayValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setUnits('intervals').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfData1DayValidIntervals.setStatus('current')
zhoneVdslPerfData1DayInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setUnits('intervals').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfData1DayInvalidIntervals.setStatus('current')
zhoneVdslPerfDataCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayTimeElapsed.setStatus('current')
zhoneVdslPerfDataCurr1DayLofs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 23), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayLofs.setStatus('current')
zhoneVdslPerfDataCurr1DayLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 24), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayLoss.setStatus('current')
zhoneVdslPerfDataCurr1DayLprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 25), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayLprs.setStatus('current')
zhoneVdslPerfDataCurr1DayLols = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 26), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayLols.setStatus('current')
zhoneVdslPerfDataCurr1DayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 27), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayESs.setStatus('current')
zhoneVdslPerfDataCurr1DaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 28), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DaySESs.setStatus('current')
zhoneVdslPerfDataCurr1DayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 29), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayUASs.setStatus('current')
zhoneVdslPerfDataCurr1DayInits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 30), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfDataCurr1DayInits.setStatus('current')
zhoneVdslPhyrRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrRetransmittedCodewords.setStatus('current')
zhoneVdslPhyrCorrectedRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrCorrectedRetransmittedCodewords.setStatus('current')
zhoneVdslPhyrUncorrectableRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrUncorrectableRetransmittedCodewords.setStatus('current')
zhoneVdslPhyrCurr15MinRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrCurr15MinRetransmittedCodewords.setStatus('current')
zhoneVdslPhyrCurr15MinCorrectedRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrCurr15MinCorrectedRetransmittedCodewords.setStatus('current')
zhoneVdslPhyrCurr15MinUncorrectableRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrCurr15MinUncorrectableRetransmittedCodewords.setStatus('current')
zhoneVdslPhyrCurr1DayRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrCurr1DayRetransmittedCodewords.setStatus('current')
zhoneVdslPhyrCurr1DayCorrectedRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrCurr1DayCorrectedRetransmittedCodewords.setStatus('current')
zhoneVdslPhyrCurr1DayUncorrectableRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrCurr1DayUncorrectableRetransmittedCodewords.setStatus('current')
zhoneVdslPhyrPrev1DayRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrPrev1DayRetransmittedCodewords.setStatus('current')
zhoneVdslPhyrPrev1DayCorrectedRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrPrev1DayCorrectedRetransmittedCodewords.setStatus('current')
zhoneVdslPhyrPrev1DayUncorrectableRetransmittedCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPhyrPrev1DayUncorrectableRetransmittedCodewords.setStatus('current')
zhoneVdslGinpLeftrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpLeftrSecs.setStatus('current')
zhoneVdslGinpErrorFreeBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpErrorFreeBits.setStatus('current')
zhoneVdslGinpMinEftr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpMinEftr.setStatus('current')
zhoneVdslGinpCurr15MinLeftrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpCurr15MinLeftrSecs.setStatus('current')
zhoneVdslGinpCurr15MinErrorFreeBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpCurr15MinErrorFreeBits.setStatus('current')
zhoneVdslGinpCurr15MinMinEftr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 48), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpCurr15MinMinEftr.setStatus('current')
zhoneVdslGinpCurr1DayLeftrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpCurr1DayLeftrSecs.setStatus('current')
zhoneVdslGinpCurr1DayErrorFreeBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpCurr1DayErrorFreeBits.setStatus('current')
zhoneVdslGinpCurr1DayMinEftr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 51), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpCurr1DayMinEftr.setStatus('current')
zhoneVdslGinpPrev1DayLeftrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpPrev1DayLeftrSecs.setStatus('current')
zhoneVdslGinpPrev1DayErrorFreeBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpPrev1DayErrorFreeBits.setStatus('current')
zhoneVdslGinpPrev1DayMinEftr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 4, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslGinpPrev1DayMinEftr.setStatus('current')
zhoneVdslPerfIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5), )
if mibBuilder.loadTexts: zhoneVdslPerfIntervalTable.setStatus('current')
zhoneVdslPerfIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZhoneVdsl-MIB", "zhoneVdslPhysSide"), (0, "ZhoneVdsl-MIB", "zhoneVdslPerfIntervalNumber"))
if mibBuilder.loadTexts: zhoneVdslPerfIntervalEntry.setStatus('current')
zhoneVdslPerfIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: zhoneVdslPerfIntervalNumber.setStatus('current')
zhoneVdslPerfIntervalLofs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1, 2), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfIntervalLofs.setStatus('current')
zhoneVdslPerfIntervalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1, 3), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfIntervalLoss.setStatus('current')
zhoneVdslPerfIntervalLprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1, 4), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfIntervalLprs.setStatus('current')
zhoneVdslPerfIntervalLols = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1, 5), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfIntervalLols.setStatus('current')
zhoneVdslPerfIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1, 6), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfIntervalESs.setStatus('current')
zhoneVdslPerfIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1, 7), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfIntervalSESs.setStatus('current')
zhoneVdslPerfIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1, 8), HCPerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfIntervalUASs.setStatus('current')
zhoneVdslPerfIntervalInits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 5, 1, 9), HCPerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerfIntervalInits.setStatus('current')
zhoneVdslPerf1DayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6), )
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalTable.setStatus('current')
zhoneVdslPerf1DayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZhoneVdsl-MIB", "zhoneVdslPhysSide"), (0, "ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalNumber"))
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalEntry.setStatus('current')
zhoneVdslPerf1DayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalNumber.setStatus('current')
zhoneVdslPerf1DayIntervalMoniSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 2), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalMoniSecs.setStatus('current')
zhoneVdslPerf1DayIntervalLofs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalLofs.setStatus('current')
zhoneVdslPerf1DayIntervalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalLoss.setStatus('current')
zhoneVdslPerf1DayIntervalLprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalLprs.setStatus('current')
zhoneVdslPerf1DayIntervalLols = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalLols.setStatus('current')
zhoneVdslPerf1DayIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalESs.setStatus('current')
zhoneVdslPerf1DayIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalSESs.setStatus('current')
zhoneVdslPerf1DayIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalUASs.setStatus('current')
zhoneVdslPerf1DayIntervalInits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 6, 1, 10), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslPerf1DayIntervalInits.setStatus('current')
zhoneVdslChanPerfDataTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7), )
if mibBuilder.loadTexts: zhoneVdslChanPerfDataTable.setStatus('current')
zhoneVdslChanPerfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZhoneVdsl-MIB", "zhoneVdslPhysSide"))
if mibBuilder.loadTexts: zhoneVdslChanPerfDataEntry.setStatus('current')
zhoneVdslChanValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setUnits('intervals').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanValidIntervals.setStatus('current')
zhoneVdslChanInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setUnits('intervals').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanInvalidIntervals.setStatus('current')
zhoneVdslChanFixedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 3), Integer32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanFixedOctets.setStatus('current')
zhoneVdslChanBadBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 4), Integer32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanBadBlks.setStatus('current')
zhoneVdslChanCurr15MinTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCurr15MinTimeElapsed.setStatus('current')
zhoneVdslChanCurr15MinFixedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 6), Integer32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCurr15MinFixedOctets.setStatus('current')
zhoneVdslChanCurr15MinBadBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 7), Integer32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCurr15MinBadBlks.setStatus('current')
zhoneVdslChan1DayValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChan1DayValidIntervals.setStatus('current')
zhoneVdslChan1DayInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChan1DayInvalidIntervals.setStatus('current')
zhoneVdslChanCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCurr1DayTimeElapsed.setStatus('current')
zhoneVdslChanCurr1DayFixedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 11), Integer32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCurr1DayFixedOctets.setStatus('current')
zhoneVdslChanCurr1DayBadBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 7, 1, 12), Integer32()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanCurr1DayBadBlks.setStatus('current')
zhoneVdslChanIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 8), )
if mibBuilder.loadTexts: zhoneVdslChanIntervalTable.setStatus('current')
zhoneVdslChanIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZhoneVdsl-MIB", "zhoneVdslPhysSide"), (0, "ZhoneVdsl-MIB", "zhoneVdslChanIntervalNumber"))
if mibBuilder.loadTexts: zhoneVdslChanIntervalEntry.setStatus('current')
zhoneVdslChanIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: zhoneVdslChanIntervalNumber.setStatus('current')
zhoneVdslChanIntervalFixedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 8, 1, 2), HCPerfIntervalCount()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanIntervalFixedOctets.setStatus('current')
zhoneVdslChanIntervalBadBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 8, 1, 3), HCPerfIntervalCount()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChanIntervalBadBlks.setStatus('current')
zhoneVdslChan1DayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 9), )
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalTable.setStatus('current')
zhoneVdslChan1DayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZhoneVdsl-MIB", "zhoneVdslPhysSide"), (0, "ZhoneVdsl-MIB", "zhoneVdslChan1DayIntervalNumber"))
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalEntry.setStatus('current')
zhoneVdslChan1DayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalNumber.setStatus('current')
zhoneVdslChan1DayIntervalMoniSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 9, 1, 2), HCPerfTimeElapsed()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalMoniSecs.setStatus('current')
zhoneVdslChan1DayIntervalFixedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 9, 1, 3), HCPerfCurrentCount()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalFixedOctets.setStatus('current')
zhoneVdslChan1DayIntervalBadBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 9, 1, 4), HCPerfCurrentCount()).setUnits('blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslChan1DayIntervalBadBlks.setStatus('current')
zhoneVdslLineConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11), )
if mibBuilder.loadTexts: zhoneVdslLineConfProfileTable.setStatus('current')
zhoneVdslLineConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneVdslLineConfProfileEntry.setStatus('current')
zhoneVdslLineConfProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: zhoneVdslLineConfProfileName.setStatus('current')
zhoneVdslLineConfDownRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("adapt-at-init", 2), ("dynamic", 3))).clone('dynamic')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownRateMode.setStatus('current')
zhoneVdslLineConfUpRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("adapt-at-init", 2), ("dynamic", 3))).clone('dynamic')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpRateMode.setStatus('current')
zhoneVdslLineConfDownMaxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 200)).clone(145)).setUnits('0.10dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxPwr.setStatus('current')
zhoneVdslLineConfUpMaxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-130, 200)).clone(145)).setUnits('0.10dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxPwr.setStatus('current')
zhoneVdslLineConfDownMaxSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(160)).setUnits('0.10dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxSnrMgn.setStatus('current')
zhoneVdslLineConfDownMinSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.10dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMinSnrMgn.setStatus('current')
zhoneVdslLineConfDownTargetSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(24)).setUnits('0.10dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownTargetSnrMgn.setStatus('current')
zhoneVdslLineConfUpMaxSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(160)).setUnits('0.10dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxSnrMgn.setStatus('current')
zhoneVdslLineConfUpMinSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('0.10dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMinSnrMgn.setStatus('current')
zhoneVdslLineConfUpTargetSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(24)).setUnits('0.10dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpTargetSnrMgn.setStatus('current')
zhoneVdslLineConfDownFastMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000)).clone(200000)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownFastMaxDataRate.setStatus('current')
zhoneVdslLineConfDownFastMinDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownFastMinDataRate.setStatus('current')
zhoneVdslLineConfDownSlowMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000)).clone(200000)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownSlowMaxDataRate.setStatus('current')
zhoneVdslLineConfDownSlowMinDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownSlowMinDataRate.setStatus('current')
zhoneVdslLineConfUpFastMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000)).clone(200000)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpFastMaxDataRate.setStatus('current')
zhoneVdslLineConfUpFastMinDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpFastMinDataRate.setStatus('current')
zhoneVdslLineConfUpSlowMaxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000)).clone(200000)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpSlowMaxDataRate.setStatus('current')
zhoneVdslLineConfUpSlowMinDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpSlowMinDataRate.setStatus('current')
zhoneVdslLineConfDownRateRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownRateRatio.setStatus('current')
zhoneVdslLineConfUpRateRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpRateRatio.setStatus('current')
zhoneVdslLineConfDownMaxInterDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(80)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxInterDelay.setStatus('current')
zhoneVdslLineConfUpMaxInterDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(80)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxInterDelay.setStatus('current')
zhoneVdslLineConfDownPboControl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("auto", 2), ("manual", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPboControl.setStatus('current')
zhoneVdslLineConfUpPboControl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("auto", 2), ("manual", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboControl.setStatus('current')
zhoneVdslLineConfDownPboLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 160))).setUnits('0.25dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPboLevel.setStatus('current')
zhoneVdslLineConfUpPboLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 160))).setUnits('0.25dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboLevel.setStatus('current')
zhoneVdslLineConfDeploymentScenario = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fttCab", 1), ("fttEx", 2), ("other", 3))).clone('fttCab')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDeploymentScenario.setStatus('current')
zhoneVdslLineConfAdslPresence = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("adslOverPots", 2), ("adslOverISDN", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfAdslPresence.setStatus('current')
zhoneVdslLineConfApplicableStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ansi", 1), ("etsi", 2), ("itu", 3), ("other", 4))).clone('ansi')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfApplicableStandard.setStatus('current')
zhoneVdslLineConfBandPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("bandPlan997", 1), ("bandPlan998", 2), ("bandPlanFx", 3), ("other", 4), ("bandPlan997-2", 5), ("bandPlan997-3", 6), ("bandPlan998-2", 7), ("bandPlan998-3", 8), ("bandPlan998-17-6", 9), ("fx-2", 10), ("fx-3", 11), ("china-a-2", 12), ("china-a-3", 13), ("china-b-2", 14), ("china-b-3", 15))).clone('bandPlan998')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfBandPlan.setStatus('current')
zhoneVdslLineConfBandPlanFx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3750, 12000)).clone(3750)).setUnits('kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfBandPlanFx.setStatus('current')
zhoneVdslLineConfBandOptUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unused", 1), ("upstream", 2), ("downstream", 3), ("upstream-forced", 4))).clone('upstream')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfBandOptUsage.setStatus('current')
zhoneVdslLineConfUpPsdTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ansi-fftex-m1", 3), ("ansi-fftex-m2", 4), ("ansi-fftcab-m1", 5), ("fftcab-m2", 6), ("etsi-m1", 7), ("etsi-m2", 8), ("psd-custom", 9))).clone('ansi-fftcab-m1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPsdTemplate.setStatus('current')
zhoneVdslLineConfDownPsdTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("ansi-fftex-m1", 3), ("ansi-fftex-m2", 4), ("ansi-fftcab-m1", 5), ("fftcab-m2", 6), ("fftcab-m1-adsl", 7), ("fftcab-m1-adslplus", 8), ("fftcab-m2-adsl", 9), ("fftcab-m2-adslplus", 10), ("etsi-pexp1-m1", 11), ("etsi-pexp1-m2", 12), ("etsi-pexp2-m1", 13), ("etsi-pexp2-m2", 14), ("psd-custom", 15), ("etsi-pexm2-sample1", 16), ("etsi-pexm2-sample2", 17), ("etsi-pexm2-sample3", 18), ("etsi-pexm2-sample4", 19), ("etsi-pcab-m1", 20), ("etsi-pcab-m2", 21))).clone('ansi-fftcab-m1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPsdTemplate.setStatus('current')
zhoneVdslLineConfHamBandMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 36), Bits().clone(namedValues=NamedValues(("customNotch1", 0), ("customNotch2", 1), ("amateurBand30m", 2), ("amateurBand40m", 3), ("amateurBand80m", 4), ("amateurBand160m", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfHamBandMask.setStatus('current')
zhoneVdslLineConfCustomNotch1Start = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 37), Unsigned32()).setUnits('kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfCustomNotch1Start.setStatus('current')
zhoneVdslLineConfCustomNotch1Stop = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 38), Unsigned32()).setUnits('kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfCustomNotch1Stop.setStatus('current')
zhoneVdslLineConfCustomNotch2Start = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 39), Unsigned32()).setUnits('kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfCustomNotch2Start.setStatus('current')
zhoneVdslLineConfCustomNotch2Stop = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 40), Unsigned32()).setUnits('kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfCustomNotch2Stop.setStatus('current')
zhoneVdslLineConfDownTargetSlowBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1275)).clone(5)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownTargetSlowBurst.setStatus('current')
zhoneVdslLineConfUpTargetSlowBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1275)).clone(5)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpTargetSlowBurst.setStatus('current')
zhoneVdslLineConfDownMaxFastFec = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxFastFec.setStatus('current')
zhoneVdslLineConfUpMaxFastFec = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setUnits('%').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxFastFec.setStatus('current')
zhoneVdslLineConfLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noChannel", 1), ("fastOnly", 2), ("interleavedOnly", 3), ("fastOrInterleaved", 4), ("fastAndInterleaved", 5))).clone('fastOnly')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfLineType.setStatus('current')
zhoneVdslLineConfProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 47), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfProfRowStatus.setStatus('current')
zhoneVdslLineConfTransmissionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("autoNegotiateMode", 1), ("vdslMode", 2), ("vdsl2Mode", 3), ("adsl2PlusMode", 4), ("adsl2Mode", 5), ("gdmtMode", 6))).clone('autoNegotiateMode')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfTransmissionMode.setStatus('current')
zhoneVdslLineConfVdsl2Profile = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("g993-2-8a", 1), ("g993-2-8b", 2), ("g993-2-8c", 3), ("g993-2-8d", 4), ("g993-2-12a", 5), ("g993-2-12b", 6), ("g993-2-17a", 7), ("g993-2-30a", 8))).clone('g993-2-12a')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfVdsl2Profile.setStatus('current')
zhoneVdslLineConfVdslMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("standard", 1), ("long-reach-8k", 2), ("r8k", 3), ("std-8k", 4), ("lr-8k", 5), ("std-lr", 6), ("std-lr-8k", 7))).clone('standard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfVdslMode.setStatus('current')
zhoneVdslLineConfPboElectricalOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(256)).setUnits('.5 dBm/Mhz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfPboElectricalOverride.setStatus('current')
zhoneVdslLineConfAutoModeCrtrn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crtrn-chip-prop", 1), ("optimize-us", 2), ("optimize-ds", 3))).clone('optimize-us')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfAutoModeCrtrn.setStatus('current')
zhoneVdslLineConfNetworkTimingRef = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslLineConfNetworkTimingRef.setStatus('current')
zhoneVdslLineConfAdslBandMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allowed", 1), ("not-allowed", 2))).clone('allowed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfAdslBandMode.setStatus('current')
zhoneVdslLineConfAdslBandModeEndFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(276, 2208)).clone(1104)).setUnits('kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfAdslBandModeEndFreq.setStatus('current')
zhoneVdslLineConfSeltEchoMeasurementTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 240)).clone(50)).setUnits('secs').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfSeltEchoMeasurementTime.setStatus('current')
zhoneVdslLineConfSeltNoiseMeasurementTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 240)).clone(50)).setUnits('secs').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfSeltNoiseMeasurementTime.setStatus('current')
zhoneVdslLineConfSeltAgc = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('1 dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfSeltAgc.setStatus('current')
zhoneVdslLineConfDownTrellis = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownTrellis.setStatus('current')
zhoneVdslLineConfUpTrellis = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpTrellis.setStatus('current')
zhoneVdslLineConfDownMaxAggregateTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4))).clone(namedValues=NamedValues(("unlimited", 4))).clone('unlimited')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxAggregateTxPwr.setStatus('current')
zhoneVdslLineConfUpMaxAggregateTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4))).clone(namedValues=NamedValues(("unlimited", 4))).clone('unlimited')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxAggregateTxPwr.setStatus('current')
zhoneVdslLineConfDownMaxPsd = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-955, 0)).clone(-1)).setUnits('.1 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxPsd.setStatus('current')
zhoneVdslLineConfUpMaxPsd = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-955, 0)).clone(-1)).setUnits('.1 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxPsd.setStatus('current')
zhoneVdslLineConfDownPsdShape = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("custom-psd", 1), ("region-a-psd", 2), ("region-c-psd", 3), ("region-b-m1-a-psd", 4), ("region-b-m1-b-psd", 5), ("region-b-m1-us0-psd", 6), ("region-b-m2-a-psd", 7), ("region-b-m2-m-psd", 8), ("region-b-m2-b-psd", 9), ("region-b-m2-us0-psd", 10))).clone('region-a-psd')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPsdShape.setStatus('current')
zhoneVdslLineConfUpPsdShape = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("custom-psd", 1), ("region-a-psd", 2), ("region-c-psd", 3), ("region-b-m1-a-psd", 4), ("region-b-m1-b-psd", 5), ("region-b-m1-us0-psd", 6), ("region-b-m2-a-psd", 7), ("region-b-m2-m-psd", 8), ("region-b-m2-b-psd", 9), ("region-b-m2-us0-psd", 10))).clone('region-a-psd')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPsdShape.setStatus('current')
zhoneVdslLineConfDownVirtualNoiseSnrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode1", 1), ("mode2", 2), ("mode3", 3))).clone('mode1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownVirtualNoiseSnrMode.setStatus('current')
zhoneVdslLineConfUpVirtualNoiseSnrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode1", 1), ("mode2", 2), ("mode3", 3))).clone('mode1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpVirtualNoiseSnrMode.setStatus('current')
zhoneVdslLineConfDownErasureDetectionFast = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownErasureDetectionFast.setStatus('current')
zhoneVdslLineConfUpErasureDetectionFast = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpErasureDetectionFast.setStatus('current')
zhoneVdslLineConfDownErasureDetectionInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownErasureDetectionInterleave.setStatus('current')
zhoneVdslLineConfUpErasureDetectionInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpErasureDetectionInterleave.setStatus('current')
zhoneVdslLineConfDownGhsA43TonePwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("auto", 2), ("manual", 3))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsA43TonePwr.setStatus('current')
zhoneVdslLineConfDownGhsB43TonePwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("auto", 2), ("manual", 3))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsB43TonePwr.setStatus('current')
zhoneVdslLineConfDownGhsA43cTonePwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("auto", 2), ("manual", 3))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsA43cTonePwr.setStatus('current')
zhoneVdslLineConfDownGhsV43TonePwr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("auto", 2), ("manual", 3))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsV43TonePwr.setStatus('current')
zhoneVdslLineConfDownGhsA43TonePwrMaxLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -40)).clone(-99)).setUnits('0.5 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsA43TonePwrMaxLvl.setStatus('current')
zhoneVdslLineConfDownGhsB43TonePwrMaxLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -40)).clone(-99)).setUnits('0.5 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsB43TonePwrMaxLvl.setStatus('current')
zhoneVdslLineConfDownGhsA43cTonePwrMaxLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -40)).clone(-99)).setUnits('0.5 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsA43cTonePwrMaxLvl.setStatus('current')
zhoneVdslLineConfDownGhsV43TonePwrMaxLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -40)).clone(-99)).setUnits('0.5 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGhsV43TonePwrMaxLvl.setStatus('current')
zhoneVdslLineConfDownRsCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownRsCoding.setStatus('current')
zhoneVdslLineConfUpRsCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpRsCoding.setStatus('current')
zhoneVdslLineConfUpPboPsdTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ansi-a", 1), ("ansi-f", 2), ("etsi-a", 3), ("etsi-b", 4), ("etsi-c", 5), ("etsi-d", 6), ("etsi-e", 7), ("etsi-f", 8), ("custom", 9), ("ab-param", 10))).clone('ansi-a')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdTemplate.setStatus('current')
zhoneVdslLineConfUpPboPsdParamA1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 8589)).clone(4000)).setUnits('.01 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamA1.setStatus('current')
zhoneVdslLineConfUpPboPsdParamA2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 8589)).clone(4000)).setUnits('.01 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamA2.setStatus('current')
zhoneVdslLineConfUpPboPsdParamB1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8589)).clone(4000)).setUnits('.01 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamB1.setStatus('current')
zhoneVdslLineConfUpPboPsdParamB2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8589)).clone(4000)).setUnits('.01 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamB2.setStatus('current')
zhoneVdslLineConfDownDownshiftSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(30)).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownDownshiftSnrMgn.setStatus('current')
zhoneVdslLineConfDownUpshiftSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(90)).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownUpshiftSnrMgn.setStatus('current')
zhoneVdslLineConfDownMinDownshiftTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMinDownshiftTime.setStatus('current')
zhoneVdslLineConfDownMinUpshiftTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMinUpshiftTime.setStatus('current')
zhoneVdslLineConfUpDownshiftSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(30)).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpDownshiftSnrMgn.setStatus('current')
zhoneVdslLineConfUpUpshiftSnrMgn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310)).clone(90)).setUnits('tenth dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpUpshiftSnrMgn.setStatus('current')
zhoneVdslLineConfUpMinDownshiftTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMinDownshiftTime.setStatus('current')
zhoneVdslLineConfUpMinUpshiftTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMinUpshiftTime.setStatus('current')
zhoneVdslLineConfDownMinTxThresholdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 96), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMinTxThresholdAlarm.setStatus('current')
zhoneVdslLineConfUpMinTxThresholdAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 97), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMinTxThresholdAlarm.setStatus('current')
zhoneVdslLineConfPotsBypassRelayMaxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(60)).setUnits('secs').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfPotsBypassRelayMaxDuration.setStatus('current')
zhoneVdslLineConfDMTConfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("echocancel", 1), ("freqdivmux", 2))).clone('freqdivmux')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDMTConfMode.setStatus('current')
zhoneVdslLineConfDownBitSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownBitSwap.setStatus('current')
zhoneVdslLineConfUpBitSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpBitSwap.setStatus('current')
zhoneVdslLineConfAdslAnnexMModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 102), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfAdslAnnexMModeEnabled.setStatus('current')
zhoneVdslLineConfAdslAnnexMPsdMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("eu64", 1), ("eu60", 2), ("eu56", 3), ("eu52", 4), ("eu48", 5), ("eu44", 6), ("eu40", 7), ("eu36", 8), ("eu32", 9), ("all", 10))).clone('eu32')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfAdslAnnexMPsdMask.setStatus('current')
zhoneVdslLineConfUs0BoundaryTone = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("d32", 1), ("d36", 2), ("d40", 3), ("d44", 4), ("d48", 5), ("d52", 6), ("d56", 7), ("d64", 8))).clone('d32')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUs0BoundaryTone.setStatus('current')
zhoneVdslLineConfDownInp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("noProtection", 1), ("halfSymbol", 2), ("singleSymbol", 3), ("twoSymbols", 4), ("threeSymbols", 5), ("fourSymbols", 6), ("fiveSymbols", 7), ("sixSymbols", 8), ("sevenSymbols", 9), ("eightSymbols", 10), ("nineSymbols", 11), ("tenSymbols", 12), ("elevenSymbols", 13), ("twelveSymbols", 14), ("thirteenSymbols", 15), ("fourteenSymbols", 16), ("fifteenSymbols", 17), ("sixteenSymbols", 18))).clone('twoSymbols')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownInp.setStatus('current')
zhoneVdslLineConfUpInp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("noProtection", 1), ("halfSymbol", 2), ("singleSymbol", 3), ("twoSymbols", 4), ("fourSymbols", 5), ("eightSymbols", 6), ("sixteenSymbols", 7), ("threeSymbols", 8), ("fiveSymbols", 9), ("sixSymbols", 10), ("sevenSymbols", 11), ("nineSymbols", 12), ("tenSymbols", 13), ("elevenSymbols", 14), ("twelveSymbols", 15), ("thirteenSymbols", 16), ("fourteenSymbols", 17), ("fifteenSymbols", 18))).clone('twoSymbols')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpInp.setStatus('current')
zhoneVdslLineConfDownMaxInterleavingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 107), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownMaxInterleavingDelay.setStatus('current')
zhoneVdslLineConfUpMaxInterleavingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 108), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpMaxInterleavingDelay.setStatus('current')
zhoneVdslLineConfDownPsdMaskEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 109), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("standard", 2), ("mod", 3), ("modFallback", 4))).clone('standard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPsdMaskEnable.setStatus('current')
zhoneVdslLineConfUpPsdMaskEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("standard", 2), ("mod", 3), ("modFallback", 4))).clone('standard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPsdMaskEnable.setStatus('current')
zhoneVdslLineConfDownPsdMaskSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))).clone(namedValues=NamedValues(("custom", 1), ("customMOD", 2), ("dmtPSDCOMSK2", 3), ("dmtPSDFLATMSK", 4), ("dmtPSDCABMSK2", 5), ("dmtPSDCOMSK2RFI", 6), ("dmtPSDFLATMSKRFI", 7), ("dmtPSDCABMSK2RFI", 8), ("dmtPSDADSL2NONOVLPM1", 9), ("dmtPSDADSL2NONOVLPM2", 10), ("dmtPSDADSL2NONOVLPFLAT", 11), ("g993RegionC", 12), ("g993RegionA", 13), ("g993RegionA-E17a-D-32", 14), ("g993RegionA-E17a-D-48", 15), ("g993RegionA-E17a-D-64", 16), ("g993RegionA-E17a-D-128", 17), ("g998RegionB-M1x-A", 18), ("g998RegionB-M1x-B", 19), ("g998RegionB-M1x-NUS0", 20), ("g998RegionB-M2x-A", 21), ("g998RegionB-M2x-M", 22), ("g998RegionB-M2x-B", 23), ("g998RegionB-M2x-NUS0", 24), ("g998RegionB-E17-M2x-NUS0", 25), ("g998RegionB-E17-M2x-NUS0-M", 26), ("g998RegionB-ADE17-M2x-NUS0-M", 27), ("g998RegionB-ADE17-M2x-A", 28), ("g998RegionB-ADE17-M2x-B", 29), ("g998RegionB-E30-M2x-NUS0", 30), ("g998RegionB-E30-M2x-NUS0-M", 31), ("g998RegionB-ADE30-M2x-NUS0-M", 32), ("g998RegionB-ADE30-M2x-NUS0-A", 33), ("g998RegionB-NONSTD-E17-M2x", 34), ("g998RegionB-NONSTD-E17-M2x-M", 35), ("g997RegionB-M1c-A-7", 36), ("g997RegionB-M1x-M-8", 37), ("g997RegionB-M1x-M", 38), ("g997RegionB-M2x-M-8", 39), ("g997RegionB-M2x-A", 40), ("g997RegionB-M2x-M", 41), ("g997RegionB-HPE17-M1-NUS0", 42), ("g997RegionB-HPE30-M1-NUS0", 43), ("g997RegionB-E17-M2x-A", 44), ("g997RegionB-E30-M2x-NUS0", 45))).clone('g993RegionA')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPsdMaskSelect.setStatus('current')
zhoneVdslLineConfUpPsdMaskSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57))).clone(namedValues=NamedValues(("custom", 1), ("g993J-ADLU-32", 2), ("g993J-ADLU-36", 3), ("g993J-ADLU-40", 4), ("g993J-ADLU-44", 5), ("g993J-ADLU-48", 6), ("g993J-ADLU-52", 7), ("g993J-ADLU-60", 8), ("g993J-ADLU-64", 9), ("g993JM-EU-32", 10), ("g993JM-EU-36", 11), ("g993JM-EU-40", 12), ("g993JM-EU-44", 13), ("g993JM-EU-48", 14), ("g993JM-EU-52", 15), ("g993JM-EU-60", 16), ("g993JM-EU-64", 17), ("dmtExtended", 18), ("dmtJJ100", 19), ("dmtStandard", 20), ("g993RegionA-EU-32", 21), ("g993RegionA-EU-36", 22), ("g993RegionA-EU-40", 23), ("g993RegionA-EU-44", 24), ("g993RegionA-EU-48", 25), ("g993RegionA-EU-52", 26), ("g993RegionA-EU-56", 27), ("g993RegionA-EU-60", 28), ("g993RegionA-EU-64", 29), ("g998RegionB-M1x-A", 30), ("g998RegionB-M1x-B", 31), ("g998RegionB-M1x-NUS0", 32), ("g998RegionB-M2x-A", 33), ("g998RegionB-M2x-M", 34), ("g998RegionB-M2x-B", 35), ("g998RegionB-M2x-NUS0", 36), ("g998RegionB-E17-M2x-NUS0", 37), ("g998RegionB-E17-M2x-NUS0-M", 38), ("g998RegionB-ADE17-M2x-NUS0-M", 39), ("g998RegionB-ADE17-M2x-A", 40), ("g998RegionB-ADE17-M2x-B", 41), ("g998RegionB-E30-M2x-NUS0", 42), ("g998RegionB-E30-M2x-NUS0-M", 43), ("g998RegionB-ADE30-M2x-NUS0-M", 44), ("g998RegionB-ADE30-M2x-NUS0-A", 45), ("g998RegionB-NONSTD-E17-M2x", 46), ("g998RegionB-NONSTD-E17-M2x-M", 47), ("g997RegionB-M1c-A-7", 48), ("g997RegionB-M1x-M-8", 49), ("g997RegionB-M1x-M", 50), ("g997RegionB-M2x-M-8", 51), ("g997RegionB-M2x-A", 52), ("g997RegionB-M2x-M", 53), ("g997RegionB-HPE17-M1-NUS0", 54), ("g997RegionB-HPE30-M1-NUS0", 55), ("g997RegionB-E17-M2x-A", 56), ("g997RegionB-E30-M2x-NUS0", 57))).clone('g993RegionA-EU-32')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPsdMaskSelect.setStatus('current')
zhoneVdslLineEnableTrellisCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 113), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineEnableTrellisCoding.setStatus('current')
zhoneVdslLineEnableRsCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 114), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineEnableRsCoding.setStatus('current')
zhoneVdslLineConfPsdShape = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55))).clone(namedValues=NamedValues(("region-a-nus0", 1), ("region-a-eu-32", 2), ("region-a-eu-36", 3), ("region-a-eu-40", 4), ("region-a-eu-44", 5), ("region-a-eu-48", 6), ("region-a-eu-52", 7), ("region-a-eu-56", 8), ("region-a-eu-60", 9), ("region-a-eu-64", 10), ("region-a-eu-128", 11), ("region-a-adlu-32", 12), ("region-a-adlu-36", 13), ("region-a-adlu-40", 14), ("region-a-adlu-44", 15), ("region-a-adlu-48", 16), ("region-a-adlu-52", 17), ("region-a-adlu-56", 18), ("region-a-adlu-60", 19), ("region-a-adlu-64", 20), ("region-a-adlu-128", 21), ("region-b-998-m1x-a", 22), ("region-b-998-m1x-b", 23), ("region-b-998-m1x-nus0", 24), ("region-b-998-m2x-a", 25), ("region-b-998-m2x-m", 26), ("region-b-998-m2x-b", 27), ("region-b-998-m2x-nus0", 28), ("region-b-998-e17-m2x-nus0", 29), ("region-b-998-e17-m2x-nus0-m", 30), ("region-b-998-ade17-m2x-nus0-m", 31), ("region-b-998-ade17-m2x-a", 32), ("region-b-998-ade17-m2x-b", 33), ("region-b-998-e30-m2x-nus0", 34), ("region-b-998-e30-m2x-nus0-m", 35), ("region-b-998-ade30-m2x-nus0-m", 36), ("region-b-998-ade30-m2x-nus0-a", 37), ("region-b-997-m1c-a-7", 38), ("region-b-997-m1x-m-8", 39), ("region-b-997-m1x-m", 40), ("region-b-997-m2x-m-8", 41), ("region-b-997-m2x-a", 42), ("region-b-997-m2x-m", 43), ("region-b-997-hpe17-m1-nus0", 44), ("region-b-997-hpe30-m1-nus0", 45), ("region-b-997-e17-m2x-a", 46), ("region-b-997-e30-m2x-nus0", 47), ("region-b-997-bt-anfp", 48), ("region-c-138-b", 49), ("region-c-276-b", 50), ("region-c-138-co", 51), ("region-c-276-co", 52), ("region-c-tcmisdn", 53), ("region-c-1104-co-17a", 54), ("region-c-1104-co-30a", 55))).clone('region-a-eu-32')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfPsdShape.setStatus('current')
zhoneVdslLineConfDownPhyRSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPhyRSupport.setStatus('current')
zhoneVdslLineConfUpPhyRSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 117), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPhyRSupport.setStatus('current')
zhoneVdslLineConfDownPhyRmaxINP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 118), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 160), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPhyRmaxINP.setStatus('current')
zhoneVdslLineConfUpPhyRmaxINP = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 160), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPhyRmaxINP.setStatus('current')
zhoneVdslLineConfDownPhyRminRSoverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 120), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPhyRminRSoverhead.setStatus('current')
zhoneVdslLineConfUpPhyRminRSoverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 121), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPhyRminRSoverhead.setStatus('current')
zhoneVdslLineConfDownPhyRRtxRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 122), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownPhyRRtxRatio.setStatus('current')
zhoneVdslLineConfUpPhyRRtxRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 123), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPhyRRtxRatio.setStatus('current')
zhoneVdslLineConfUpPboPsdParamA3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 124), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 8096)).clone(4000)).setUnits('.01 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamA3.setStatus('current')
zhoneVdslLineConfUpPboPsdParamA4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 125), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 8096)).clone(4000)).setUnits('.01 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamA4.setStatus('current')
zhoneVdslLineConfUpPboPsdParamB3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 126), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(4000)).setUnits('.01 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamB3.setStatus('current')
zhoneVdslLineConfUpPboPsdParamB4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 127), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(4000)).setUnits('.01 dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpPboPsdParamB4.setStatus('current')
zhoneVdslLineConfFallbackDefaultVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 128), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfFallbackDefaultVpi.setStatus('current')
zhoneVdslLineConfFallbackDefaultVci = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 129), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(35)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfFallbackDefaultVci.setStatus('current')
zhoneVdslLineConfDownGinpSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpSupport.setStatus('current')
zhoneVdslLineConfUpGinpSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 131), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpSupport.setStatus('current')
zhoneVdslLineConfDownGinpEtrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 132), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 200000)).clone(100000)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpEtrMax.setStatus('current')
zhoneVdslLineConfUpGinpEtrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 133), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 2000000)).clone(60000)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpEtrMax.setStatus('current')
zhoneVdslLineConfDownGinpEtrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 134), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 200000)).clone(64)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpEtrMin.setStatus('current')
zhoneVdslLineConfUpGinpEtrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 135), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 200000)).clone(64)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpEtrMin.setStatus('current')
zhoneVdslLineConfDownGinpNdrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 136), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 200000)).clone(100000)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpNdrMax.setStatus('current')
zhoneVdslLineConfUpGinpNdrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 137), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 200000)).clone(60000)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpNdrMax.setStatus('current')
zhoneVdslLineConfDownGinpShineRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 138), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setUnits('ratio').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpShineRatio.setStatus('current')
zhoneVdslLineConfUpGinpShineRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 139), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setUnits('ratio').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpShineRatio.setStatus('current')
zhoneVdslLineConfDownGinpLeftrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 140), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setUnits('ratio').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpLeftrThreshold.setStatus('current')
zhoneVdslLineConfUpGinpLeftrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 141), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setUnits('ratio').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpLeftrThreshold.setStatus('current')
zhoneVdslLineConfDownGinpMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 142), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)).clone(20)).setUnits('mSecs').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpMaxDelay.setStatus('current')
zhoneVdslLineConfUpGinpMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 143), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)).clone(20)).setUnits('mSecs').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpMaxDelay.setStatus('current')
zhoneVdslLineConfDownGinpMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 144), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setUnits('mSecs').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpMinDelay.setStatus('current')
zhoneVdslLineConfUpGinpMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 145), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setUnits('mSecs').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpMinDelay.setStatus('current')
zhoneVdslLineConfDownGinpMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 146), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(4)).setUnits('symbols').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpMin.setStatus('current')
zhoneVdslLineConfUpGinpMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 147), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(4)).setUnits('symbols').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpMin.setStatus('current')
zhoneVdslLineConfDownGinpMinRSoverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 148), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setUnits('ratio').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpMinRSoverhead.setStatus('current')
zhoneVdslLineConfUpGinpMinRSoverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 149), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setUnits('ratio').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpMinRSoverhead.setStatus('current')
zhoneVdslLineConfDownGinpReinCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 150), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setUnits('symbols').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpReinCfg.setStatus('current')
zhoneVdslLineConfUpGinpReinCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 151), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setUnits('symbols').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpReinCfg.setStatus('current')
zhoneVdslLineConfDownGinpReinFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 152), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freq100hz", 1), ("freq120hz", 2))).clone('freq120hz')).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpReinFreq.setStatus('current')
zhoneVdslLineConfUpGinpReinFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 153), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freq100hz", 1), ("freq120hz", 2))).clone('freq120hz')).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpReinFreq.setStatus('current')
zhoneVdslLineConfDownGinpRtxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 154), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("forbidden", 1), ("preferred", 2), ("forced", 3), ("testmode", 4))).clone('preferred')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfDownGinpRtxMode.setStatus('current')
zhoneVdslLineConfUpGinpRtxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 11, 1, 155), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("forbidden", 1), ("preferred", 2), ("forced", 3), ("testmode", 4))).clone('preferred')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineConfUpGinpRtxMode.setStatus('current')
zhoneVdslLineAlarmConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20), )
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfProfileTable.setStatus('current')
zhoneVdslLineAlarmConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfProfileEntry.setStatus('current')
zhoneVdslLineAlarmConfProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfProfileName.setStatus('current')
zhoneVdslLineAlarmConfThresh15MinLofs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinLofs.setStatus('current')
zhoneVdslLineAlarmConfThresh15MinLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinLoss.setStatus('current')
zhoneVdslLineAlarmConfThresh15MinLprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinLprs.setStatus('current')
zhoneVdslLineAlarmConfThresh15MinLols = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinLols.setStatus('current')
zhoneVdslLineAlarmConfThresh15MinESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinESs.setStatus('current')
zhoneVdslLineAlarmConfThresh15MinSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinSESs.setStatus('current')
zhoneVdslLineAlarmConfThresh15MinUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh15MinUASs.setStatus('current')
zhoneVdslLineAlarmConfInitFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfInitFailure.setStatus('current')
zhoneVdslLineAlarmConfProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfProfRowStatus.setStatus('current')
zhoneVdslLineAlarmConfThresh1DayLofs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayLofs.setStatus('current')
zhoneVdslLineAlarmConfThresh1DayLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayLoss.setStatus('current')
zhoneVdslLineAlarmConfThresh1DayLprs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayLprs.setStatus('current')
zhoneVdslLineAlarmConfThresh1DayLols = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayLols.setStatus('current')
zhoneVdslLineAlarmConfThresh1DayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayESs.setStatus('current')
zhoneVdslLineAlarmConfThresh1DaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DaySESs.setStatus('current')
zhoneVdslLineAlarmConfThresh1DayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayUASs.setStatus('current')
zhoneVdslLineAlarmConfThresh1DayInitFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 20, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslLineAlarmConfThresh1DayInitFailure.setStatus('current')
zhoneVdslCustomNotchConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 21), )
if mibBuilder.loadTexts: zhoneVdslCustomNotchConfProfileTable.setStatus('current')
zhoneVdslCustomNotchConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 21, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZhoneVdsl-MIB", "zhoneVdslCustomNotchConfId"))
if mibBuilder.loadTexts: zhoneVdslCustomNotchConfProfileEntry.setStatus('current')
zhoneVdslCustomNotchConfId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslCustomNotchConfId.setStatus('current')
zhoneVdslCustomNotchConfStart = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setUnits('kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslCustomNotchConfStart.setStatus('current')
zhoneVdslCustomNotchConfStop = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 21, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setUnits('kHz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneVdslCustomNotchConfStop.setStatus('current')
zhoneVdslVectDataTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 22), )
if mibBuilder.loadTexts: zhoneVdslVectDataTable.setStatus('current')
zhoneVdslVectDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zhoneVdslVectDataEntry.setStatus('current')
zhoneVdslVectDataEsDsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslVectDataEsDsCounter.setStatus('current')
zhoneVdslVectDataEsUsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslVectDataEsUsCounter.setStatus('current')
zhoneVdslVectDataIsDsFeValid = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 22, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslVectDataIsDsFeValid.setStatus('current')
zhoneVdslVectDataEsFeDsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 1, 22, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneVdslVectDataEsFeDsCounter.setStatus('current')
zhoneVdslConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 3))
zhoneVdslGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 3, 1))
zhoneVdslGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 3, 1, 1)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslLineCoding"), ("ZhoneVdsl-MIB", "zhoneVdslLineType"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfProfile"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfProfile"), ("ZhoneVdsl-MIB", "zhoneVdslPhysInvSerialNumber"), ("ZhoneVdsl-MIB", "zhoneVdslPhysInvVendorID"), ("ZhoneVdsl-MIB", "zhoneVdslPhysInvVersionNumber"), ("ZhoneVdsl-MIB", "zhoneVdslPhysCurrSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslPhysCurrAtn"), ("ZhoneVdsl-MIB", "zhoneVdslPhysCurrStatus"), ("ZhoneVdsl-MIB", "zhoneVdslPhysCurrOutputPwr"), ("ZhoneVdsl-MIB", "zhoneVdslPhysCurrAttainableRate"), ("ZhoneVdsl-MIB", "zhoneVdslPhysCurrLineRate"), ("ZhoneVdsl-MIB", "zhoneVdslChanInterleaveDelay"), ("ZhoneVdsl-MIB", "zhoneVdslChanCrcBlockLength"), ("ZhoneVdsl-MIB", "zhoneVdslChanCurrTxRate"), ("ZhoneVdsl-MIB", "zhoneVdslChanCurrTxSlowBurstProtect"), ("ZhoneVdsl-MIB", "zhoneVdslChanCurrTxFastFec"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataValidIntervals"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataInvalidIntervals"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataLofs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataLoss"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataLprs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataLols"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataSESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataUASs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataInits"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinTimeElapsed"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinLofs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinLoss"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinLprs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinLols"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinSESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinUASs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr15MinInits"), ("ZhoneVdsl-MIB", "zhoneVdslPerfData1DayValidIntervals"), ("ZhoneVdsl-MIB", "zhoneVdslPerfData1DayInvalidIntervals"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayTimeElapsed"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayLofs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayLoss"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayLprs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayLols"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DaySESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayUASs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfDataCurr1DayInits"), ("ZhoneVdsl-MIB", "zhoneVdslPerfIntervalLofs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfIntervalLoss"), ("ZhoneVdsl-MIB", "zhoneVdslPerfIntervalLprs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfIntervalLols"), ("ZhoneVdsl-MIB", "zhoneVdslPerfIntervalESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfIntervalSESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfIntervalUASs"), ("ZhoneVdsl-MIB", "zhoneVdslPerfIntervalInits"), ("ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalMoniSecs"), ("ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalLofs"), ("ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalLoss"), ("ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalLprs"), ("ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalLols"), ("ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalSESs"), ("ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalUASs"), ("ZhoneVdsl-MIB", "zhoneVdslPerf1DayIntervalInits"), ("ZhoneVdsl-MIB", "zhoneVdslChanValidIntervals"), ("ZhoneVdsl-MIB", "zhoneVdslChanInvalidIntervals"), ("ZhoneVdsl-MIB", "zhoneVdslChanFixedOctets"), ("ZhoneVdsl-MIB", "zhoneVdslChanBadBlks"), ("ZhoneVdsl-MIB", "zhoneVdslChanCurr15MinTimeElapsed"), ("ZhoneVdsl-MIB", "zhoneVdslChanCurr15MinFixedOctets"), ("ZhoneVdsl-MIB", "zhoneVdslChanCurr15MinBadBlks"), ("ZhoneVdsl-MIB", "zhoneVdslChan1DayValidIntervals"), ("ZhoneVdsl-MIB", "zhoneVdslChan1DayInvalidIntervals"), ("ZhoneVdsl-MIB", "zhoneVdslChanCurr1DayTimeElapsed"), ("ZhoneVdsl-MIB", "zhoneVdslChanCurr1DayFixedOctets"), ("ZhoneVdsl-MIB", "zhoneVdslChanCurr1DayBadBlks"), ("ZhoneVdsl-MIB", "zhoneVdslChanIntervalFixedOctets"), ("ZhoneVdsl-MIB", "zhoneVdslChanIntervalBadBlks"), ("ZhoneVdsl-MIB", "zhoneVdslChan1DayIntervalMoniSecs"), ("ZhoneVdsl-MIB", "zhoneVdslChan1DayIntervalFixedOctets"), ("ZhoneVdsl-MIB", "zhoneVdslChan1DayIntervalBadBlks"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownRateMode"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpRateMode"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMaxPwr"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMaxPwr"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMaxSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMinSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownTargetSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMaxSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMinSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpTargetSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownFastMaxDataRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownFastMinDataRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownSlowMaxDataRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownSlowMinDataRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpFastMaxDataRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpFastMinDataRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpSlowMaxDataRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpSlowMinDataRate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownRateRatio"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpRateRatio"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMaxInterDelay"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMaxInterDelay"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPboControl"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboControl"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPboLevel"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboLevel"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDeploymentScenario"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfAdslPresence"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfApplicableStandard"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfBandPlan"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfBandPlanFx"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfBandOptUsage"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPsdTemplate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPsdTemplate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfHamBandMask"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfCustomNotch1Start"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfCustomNotch1Stop"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfCustomNotch2Start"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfCustomNotch2Stop"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownTargetSlowBurst"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpTargetSlowBurst"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMaxFastFec"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMaxFastFec"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfLineType"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfProfRowStatus"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh15MinLofs"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh15MinLoss"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh15MinLprs"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh15MinLols"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh15MinESs"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh15MinSESs"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh15MinUASs"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfInitFailure"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh1DayLofs"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh1DayLoss"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh1DayLprs"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh1DayLols"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh1DayInitFailure"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfAutoModeCrtrn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfAdslBandMode"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfAdslBandModeEndFreq"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfSeltAgc"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfVdsl2Profile"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfVdslMode"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfPboElectricalOverride"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMaxPsd"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMaxAggregateTxPwr"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPsdShape"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownVirtualNoiseSnrMode"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownGhsA43TonePwr"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownErasureDetectionFast"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownErasureDetectionInterleave"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownGhsB43TonePwr"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownGhsV43TonePwr"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownGhsA43TonePwrMaxLvl"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownGhsA43cTonePwrMaxLvl"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownGhsB43TonePwrMaxLvl"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownGhsV43TonePwrMaxLvl"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownRsCoding"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfProfRowStatus"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpErasureDetectionFast"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboPsdParamB1"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboPsdParamA1"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboPsdParamA2"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboPsdParamB2"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpVirtualNoiseSnrMode"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpErasureDetectionInterleave"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpRsCoding"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPsdShape"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboPsdTemplate"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfNetworkTimingRef"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMaxAggregateTxPwr"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownTrellis"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpTrellis"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMaxPsd"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh1DayESs"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh1DaySESs"), ("ZhoneVdsl-MIB", "zhoneVdslLineAlarmConfThresh1DayUASs"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfSeltEchoMeasurementTime"), ("ZhoneVdsl-MIB", "zhoneVdslCustomNotchConfStop"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfSeltNoiseMeasurementTime"), ("ZhoneVdsl-MIB", "zhoneVdslCustomNotchConfStart"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfTransmissionMode"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownDownshiftSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownUpshiftSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMinDownshiftTime"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMinUpshiftTime"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpDownshiftSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpUpshiftSnrMgn"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMinDownshiftTime"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMinUpshiftTime"), ("ZhoneVdsl-MIB", "zhoneVdslCustomNotchConfId"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownGhsA43cTonePwr"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDMTConfMode"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfPotsBypassRelayMaxDuration"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownBitSwap"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpBitSwap"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfAdslAnnexMModeEnabled"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfAdslAnnexMPsdMask"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUs0BoundaryTone"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownInp"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpInp"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMaxInterleavingDelay"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMaxInterleavingDelay"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPsdMaskEnable"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPsdMaskEnable"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPsdMaskSelect"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPsdMaskSelect"), ("ZhoneVdsl-MIB", "zhoneVdslPhysCurrProfile"), ("ZhoneVdsl-MIB", "zhoneVdslPhysCurrConnType"), ("ZhoneVdsl-MIB", "zhoneVdslLineEnableTrellisCoding"), ("ZhoneVdsl-MIB", "zhoneVdslLineEnableRsCoding"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfPsdShape"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPhyRSupport"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPhyRSupport"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPhyRmaxINP"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPhyRmaxINP"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPhyRminRSoverhead"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPhyRminRSoverhead"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownPhyRRtxRatio"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPhyRRtxRatio"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboPsdParamA3"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboPsdParamA4"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboPsdParamB3"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpPboPsdParamB4"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfFallbackDefaultVpi"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfFallbackDefaultVci"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfUpMinTxThresholdAlarm"), ("ZhoneVdsl-MIB", "zhoneVdslLineConfDownMinTxThresholdAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneVdslGroup = zhoneVdslGroup.setStatus('current')
zhoneVdslNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 3, 1, 2)).setObjects(("ZhoneVdsl-MIB", "vdslXtucPerf15MinLofsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf15MinLossThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf15MinLprsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf15MinLolsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf15MinESsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf15MinSESsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf15MinUASsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf1DayLofsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf1DayLossThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf1DayLprsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf1DayLolsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf1DayESsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf1DaySESsThreshTrap"), ("ZhoneVdsl-MIB", "vdslXtucPerf1DayUASsThreshTrap"), ("ZhoneVdsl-MIB", "zhoneVdslInitFailureTrap"), ("ZhoneVdsl-MIB", "vdslXtucMinTxThresholdAlarmFailureTrap"), ("ZhoneVdsl-MIB", "vdslXturMinTxThresholdAlarmFailureTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneVdslNotificationGroup = zhoneVdslNotificationGroup.setStatus('current')
zhoneVdslCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 3, 2))
zhoneVdslLineMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5504, 5, 13, 1, 3, 2, 1)).setObjects(("ZhoneVdsl-MIB", "zhoneVdslGroup"), ("ZhoneVdsl-MIB", "zhoneVdslNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneVdslLineMibCompliance = zhoneVdslLineMibCompliance.setStatus('current')
mibBuilder.exportSymbols("ZhoneVdsl-MIB", zhoneVdslPerf1DayIntervalUASs=zhoneVdslPerf1DayIntervalUASs, zhoneVdslGroup=zhoneVdslGroup, zhoneVdslLineAlarmConfThresh1DayUASs=zhoneVdslLineAlarmConfThresh1DayUASs, zhoneVdslPerfDataLprs=zhoneVdslPerfDataLprs, zhoneVdslLineConfDownPsdMaskEnable=zhoneVdslLineConfDownPsdMaskEnable, zhoneVdslLineConfBandPlan=zhoneVdslLineConfBandPlan, zhoneVdslLineConfDownGinpEtrMin=zhoneVdslLineConfDownGinpEtrMin, zhoneVdslChan1DayInvalidIntervals=zhoneVdslChan1DayInvalidIntervals, zhoneVdslLineConfUpDownshiftSnrMgn=zhoneVdslLineConfUpDownshiftSnrMgn, vdslXtucMinTxThresholdAlarmFailureTrap=vdslXtucMinTxThresholdAlarmFailureTrap, zhoneVdslLineConfUpPhyRminRSoverhead=zhoneVdslLineConfUpPhyRminRSoverhead, zhoneVdslLineConfUpMaxAggregateTxPwr=zhoneVdslLineConfUpMaxAggregateTxPwr, zhoneVdslPhyrCurr15MinUncorrectableRetransmittedCodewords=zhoneVdslPhyrCurr15MinUncorrectableRetransmittedCodewords, zhoneVdslLineConfUpPboPsdParamB2=zhoneVdslLineConfUpPboPsdParamB2, zhoneVdslLineConfUpFastMaxDataRate=zhoneVdslLineConfUpFastMaxDataRate, zhoneVdslPerfDataCurr15MinSESs=zhoneVdslPerfDataCurr15MinSESs, zhoneVdslLineConfUpPsdShape=zhoneVdslLineConfUpPsdShape, zhoneVdslLineConfDownTargetSnrMgn=zhoneVdslLineConfDownTargetSnrMgn, zhoneVdslLineConfDownUpshiftSnrMgn=zhoneVdslLineConfDownUpshiftSnrMgn, zhoneVdslChan1DayIntervalBadBlks=zhoneVdslChan1DayIntervalBadBlks, zhoneVdslLineConfUpMaxPsd=zhoneVdslLineConfUpMaxPsd, zhoneVdslChan1DayIntervalMoniSecs=zhoneVdslChan1DayIntervalMoniSecs, zhoneVdslLineConfUpVirtualNoiseSnrMode=zhoneVdslLineConfUpVirtualNoiseSnrMode, zhoneVdslLineConfUpPsdMaskSelect=zhoneVdslLineConfUpPsdMaskSelect, zhoneVdslPerfData1DayValidIntervals=zhoneVdslPerfData1DayValidIntervals, zhoneVdslLineConfDownGhsV43TonePwr=zhoneVdslLineConfDownGhsV43TonePwr, zhoneVdslLineConfVdsl2Profile=zhoneVdslLineConfVdsl2Profile, zhoneVdslLineConfDownPhyRRtxRatio=zhoneVdslLineConfDownPhyRRtxRatio, zhoneVdslPhysInvSerialNumber=zhoneVdslPhysInvSerialNumber, zhoneVdslGinpPrev1DayErrorFreeBits=zhoneVdslGinpPrev1DayErrorFreeBits, zhoneVdslNotifications=zhoneVdslNotifications, zhoneVdslConformance=zhoneVdslConformance, zhoneVdslChanCurr15MinFixedOctets=zhoneVdslChanCurr15MinFixedOctets, zhoneVdslLineConfUpPboLevel=zhoneVdslLineConfUpPboLevel, zhoneVdslLineConfUpPboPsdTemplate=zhoneVdslLineConfUpPboPsdTemplate, zhoneVdslLineAlarmConfProfileEntry=zhoneVdslLineAlarmConfProfileEntry, zhoneVdslPerfDataLols=zhoneVdslPerfDataLols, zhoneVdslPerfDataLofs=zhoneVdslPerfDataLofs, zhoneVdslChan1DayIntervalFixedOctets=zhoneVdslChan1DayIntervalFixedOctets, zhoneVdslLineConfUpRateMode=zhoneVdslLineConfUpRateMode, zhoneVdslLineConfAdslAnnexMPsdMask=zhoneVdslLineConfAdslAnnexMPsdMask, zhoneVdslLineConfDownMaxInterDelay=zhoneVdslLineConfDownMaxInterDelay, zhoneVdslLineConfSeltEchoMeasurementTime=zhoneVdslLineConfSeltEchoMeasurementTime, PYSNMP_MODULE_ID=zhoneVdslMib, vdslXtucPerf1DaySESsThreshTrap=vdslXtucPerf1DaySESsThreshTrap, zhoneVdslLineAlarmConfInitFailure=zhoneVdslLineAlarmConfInitFailure, vdslXtucPerf1DayLolsThreshTrap=vdslXtucPerf1DayLolsThreshTrap, zhoneVdslLineConfUpPhyRmaxINP=zhoneVdslLineConfUpPhyRmaxINP, zhoneVdslLineConfUpGinpLeftrThreshold=zhoneVdslLineConfUpGinpLeftrThreshold, zhoneVdslLineConfUpPboPsdParamA3=zhoneVdslLineConfUpPboPsdParamA3, zhoneVdslLineConfUpPboPsdParamB3=zhoneVdslLineConfUpPboPsdParamB3, zhoneVdslChanPerfDataTable=zhoneVdslChanPerfDataTable, zhoneVdslPerfDataCurr15MinLoss=zhoneVdslPerfDataCurr15MinLoss, zhoneVdslLineConfCustomNotch2Start=zhoneVdslLineConfCustomNotch2Start, zhoneVdslLineConfDownGinpNdrMax=zhoneVdslLineConfDownGinpNdrMax, zhoneVdslPerfDataCurr1DayTimeElapsed=zhoneVdslPerfDataCurr1DayTimeElapsed, zhoneVdslLineConfFallbackDefaultVpi=zhoneVdslLineConfFallbackDefaultVpi, zhoneVdslChanCurrTxSlowBurstProtect=zhoneVdslChanCurrTxSlowBurstProtect, zhoneVdslLineConfUpMaxInterleavingDelay=zhoneVdslLineConfUpMaxInterleavingDelay, zhoneVdslPerfDataCurr1DayLoss=zhoneVdslPerfDataCurr1DayLoss, zhoneVdslPhysCurrLineRate=zhoneVdslPhysCurrLineRate, zhoneVdslPhysSide=zhoneVdslPhysSide, zhoneVdslPhysGinpActive=zhoneVdslPhysGinpActive, zhoneVdslVectDataEsUsCounter=zhoneVdslVectDataEsUsCounter, zhoneVdslPhyrCurr1DayUncorrectableRetransmittedCodewords=zhoneVdslPhyrCurr1DayUncorrectableRetransmittedCodewords, zhoneVdslGroups=zhoneVdslGroups, zhoneVdslChanCurrTxFastFec=zhoneVdslChanCurrTxFastFec, zhoneVdslLineConfDownGinpRtxMode=zhoneVdslLineConfDownGinpRtxMode, zhoneVdslLineAlarmConfThresh1DaySESs=zhoneVdslLineAlarmConfThresh1DaySESs, zhoneVdslLineConfDownFastMaxDataRate=zhoneVdslLineConfDownFastMaxDataRate, zhoneVdslGinpErrorFreeBits=zhoneVdslGinpErrorFreeBits, zhoneVdslLineConfLineType=zhoneVdslLineConfLineType, zhoneVdslLineConfUpPboPsdParamA2=zhoneVdslLineConfUpPboPsdParamA2, vdslXtucPerf15MinUASsThreshTrap=vdslXtucPerf15MinUASsThreshTrap, ZhoneVdslLineCodingType=ZhoneVdslLineCodingType, zhoneVdslPerfIntervalNumber=zhoneVdslPerfIntervalNumber, zhoneVdslLineConfUpRateRatio=zhoneVdslLineConfUpRateRatio, zhoneVdslLineConfDownMaxFastFec=zhoneVdslLineConfDownMaxFastFec, zhoneVdslLineConfDownMaxAggregateTxPwr=zhoneVdslLineConfDownMaxAggregateTxPwr, zhoneVdslLineConfUpGinpSupport=zhoneVdslLineConfUpGinpSupport, zhoneVdslGinpCurr1DayLeftrSecs=zhoneVdslGinpCurr1DayLeftrSecs, zhoneVdslLineConfAdslAnnexMModeEnabled=zhoneVdslLineConfAdslAnnexMModeEnabled, zhoneVdslLineConfDownMaxPsd=zhoneVdslLineConfDownMaxPsd, zhoneVdslLineConfUpPhyRSupport=zhoneVdslLineConfUpPhyRSupport, zhoneVdslVectDataEsFeDsCounter=zhoneVdslVectDataEsFeDsCounter, zhoneVdslLineConfUpMaxPwr=zhoneVdslLineConfUpMaxPwr, zhoneVdslPhyrCurr1DayCorrectedRetransmittedCodewords=zhoneVdslPhyrCurr1DayCorrectedRetransmittedCodewords, zhoneVdslLineConfTransmissionMode=zhoneVdslLineConfTransmissionMode, zhoneVdslLineConfPsdShape=zhoneVdslLineConfPsdShape, zhoneVdslLineConfDownRsCoding=zhoneVdslLineConfDownRsCoding, zhoneVdslLineConfDownMinSnrMgn=zhoneVdslLineConfDownMinSnrMgn, zhoneVdslLineConfDownPboControl=zhoneVdslLineConfDownPboControl, zhoneVdslLineConfAdslPresence=zhoneVdslLineConfAdslPresence, zhoneVdslLineConfDownMinDownshiftTime=zhoneVdslLineConfDownMinDownshiftTime, zhoneVdslPhysEntry=zhoneVdslPhysEntry, zhoneVdslLineConfDownPboLevel=zhoneVdslLineConfDownPboLevel, zhoneVdslPerf1DayIntervalLoss=zhoneVdslPerf1DayIntervalLoss, zhoneVdslLineConfDownGhsB43TonePwrMaxLvl=zhoneVdslLineConfDownGhsB43TonePwrMaxLvl, zhoneVdslLineConfDownPhyRminRSoverhead=zhoneVdslLineConfDownPhyRminRSoverhead, zhoneVdslLineConfDownDownshiftSnrMgn=zhoneVdslLineConfDownDownshiftSnrMgn, zhoneVdslLineConfDownMaxSnrMgn=zhoneVdslLineConfDownMaxSnrMgn, vdslXturMinTxThresholdAlarmFailureTrap=vdslXturMinTxThresholdAlarmFailureTrap, zhoneVdslPerfIntervalLoss=zhoneVdslPerfIntervalLoss, zhoneVdslLineConfUpPboPsdParamB4=zhoneVdslLineConfUpPboPsdParamB4, zhoneVdslLineConfDownGhsV43TonePwrMaxLvl=zhoneVdslLineConfDownGhsV43TonePwrMaxLvl, zhoneVdslLineAlarmConfThresh1DayLofs=zhoneVdslLineAlarmConfThresh1DayLofs, zhoneVdslLineConfDownGhsA43cTonePwr=zhoneVdslLineConfDownGhsA43cTonePwr, ZhoneVdslLineEntity=ZhoneVdslLineEntity, zhoneVdslChanInvalidIntervals=zhoneVdslChanInvalidIntervals, zhoneVdslLineConfCustomNotch1Stop=zhoneVdslLineConfCustomNotch1Stop, zhoneVdslPhysCurrSnrMgn=zhoneVdslPhysCurrSnrMgn, zhoneVdslInitFailureTrap=zhoneVdslInitFailureTrap, zhoneVdslLineConfUpTrellis=zhoneVdslLineConfUpTrellis, zhoneVdslPhysPhyRActive=zhoneVdslPhysPhyRActive, zhoneVdslLineConfUpGinpShineRatio=zhoneVdslLineConfUpGinpShineRatio, zhoneVdslLineAlarmConfThresh15MinLprs=zhoneVdslLineAlarmConfThresh15MinLprs, zhoneVdslLineConfUpMinDownshiftTime=zhoneVdslLineConfUpMinDownshiftTime, zhoneVdslGinpMinEftr=zhoneVdslGinpMinEftr, zhoneVdslLineConfUpPboPsdParamB1=zhoneVdslLineConfUpPboPsdParamB1, zhoneVdslCustomNotchConfProfileTable=zhoneVdslCustomNotchConfProfileTable, zhoneVdslLineConfDownGhsA43cTonePwrMaxLvl=zhoneVdslLineConfDownGhsA43cTonePwrMaxLvl, zhoneVdslLineConfDownPsdMaskSelect=zhoneVdslLineConfDownPsdMaskSelect, zhoneVdslLineConfUpPhyRRtxRatio=zhoneVdslLineConfUpPhyRRtxRatio, zhoneVdslChan1DayIntervalEntry=zhoneVdslChan1DayIntervalEntry, zhoneVdslChanIntervalTable=zhoneVdslChanIntervalTable, zhoneVdslLineConfUpErasureDetectionInterleave=zhoneVdslLineConfUpErasureDetectionInterleave, zhoneVdslMib=zhoneVdslMib, zhoneVdslPerfIntervalTable=zhoneVdslPerfIntervalTable, zhoneVdslLineConfCustomNotch1Start=zhoneVdslLineConfCustomNotch1Start, zhoneVdslLineConfDownMaxInterleavingDelay=zhoneVdslLineConfDownMaxInterleavingDelay, zhoneVdslChan1DayIntervalNumber=zhoneVdslChan1DayIntervalNumber, zhoneVdslLineConfUpPsdMaskEnable=zhoneVdslLineConfUpPsdMaskEnable, zhoneVdslLineConfUpGinpMin=zhoneVdslLineConfUpGinpMin, zhoneVdslLineConfDownMinUpshiftTime=zhoneVdslLineConfDownMinUpshiftTime, zhoneVdslLineConfAdslBandMode=zhoneVdslLineConfAdslBandMode, zhoneVdslLineConfSeltNoiseMeasurementTime=zhoneVdslLineConfSeltNoiseMeasurementTime, zhoneVdslPhyrCurr15MinRetransmittedCodewords=zhoneVdslPhyrCurr15MinRetransmittedCodewords, vdslXtucPerf15MinLprsThreshTrap=vdslXtucPerf15MinLprsThreshTrap, zhoneVdslLineConfUs0BoundaryTone=zhoneVdslLineConfUs0BoundaryTone, zhoneVdslLineConfAutoModeCrtrn=zhoneVdslLineConfAutoModeCrtrn, zhoneVdslPerfDataCurr15MinLols=zhoneVdslPerfDataCurr15MinLols, zhoneVdslLineConfDownGinpReinCfg=zhoneVdslLineConfDownGinpReinCfg, zhoneVdslPerf1DayIntervalMoniSecs=zhoneVdslPerf1DayIntervalMoniSecs, zhoneVdslPerfDataCurr1DayLprs=zhoneVdslPerfDataCurr1DayLprs, zhoneVdslGinpPrev1DayMinEftr=zhoneVdslGinpPrev1DayMinEftr, zhoneVdslPerfDataTable=zhoneVdslPerfDataTable, zhoneVdslChanTable=zhoneVdslChanTable, zhoneVdslLineConfDownGinpEtrMax=zhoneVdslLineConfDownGinpEtrMax, zhoneVdslChanCurr1DayTimeElapsed=zhoneVdslChanCurr1DayTimeElapsed, zhoneVdslLineConfDownTargetSlowBurst=zhoneVdslLineConfDownTargetSlowBurst, zhoneVdslLineConfDownSlowMinDataRate=zhoneVdslLineConfDownSlowMinDataRate, zhoneVdslPerfIntervalSESs=zhoneVdslPerfIntervalSESs, zhoneVdslPhyrPrev1DayUncorrectableRetransmittedCodewords=zhoneVdslPhyrPrev1DayUncorrectableRetransmittedCodewords, zhoneVdslLineAlarmConfThresh15MinESs=zhoneVdslLineAlarmConfThresh15MinESs, zhoneVdslLineConfUpGinpMinRSoverhead=zhoneVdslLineConfUpGinpMinRSoverhead, zhoneVdslLineAlarmConfThresh1DayLoss=zhoneVdslLineAlarmConfThresh1DayLoss, zhoneVdslLineConfDownGinpShineRatio=zhoneVdslLineConfDownGinpShineRatio, zhoneVdslLineConfDownGhsB43TonePwr=zhoneVdslLineConfDownGhsB43TonePwr, zhoneVdslChanBadBlks=zhoneVdslChanBadBlks, vdslXtucPerf1DayLprsThreshTrap=vdslXtucPerf1DayLprsThreshTrap, zhoneVdslLineConfDownFastMinDataRate=zhoneVdslLineConfDownFastMinDataRate, zhoneVdslLineConfDMTConfMode=zhoneVdslLineConfDMTConfMode, zhoneVdslLineAlarmConfThresh15MinSESs=zhoneVdslLineAlarmConfThresh15MinSESs, zhoneVdslChanPerfDataEntry=zhoneVdslChanPerfDataEntry, zhoneVdslVectDataEntry=zhoneVdslVectDataEntry, zhoneVdslLineConfDownPhyRSupport=zhoneVdslLineConfDownPhyRSupport, zhoneVdslPerf1DayIntervalLols=zhoneVdslPerf1DayIntervalLols, zhoneVdslGinpCurr15MinMinEftr=zhoneVdslGinpCurr15MinMinEftr, zhoneVdslLineConfProfile=zhoneVdslLineConfProfile, zhoneVdslPerfDataCurr1DayESs=zhoneVdslPerfDataCurr1DayESs, zhoneVdslGinpCurr1DayMinEftr=zhoneVdslGinpCurr1DayMinEftr, zhoneVdslGinpLeftrSecs=zhoneVdslGinpLeftrSecs, zhoneVdslCustomNotchConfStart=zhoneVdslCustomNotchConfStart, zhoneVdslPhysTable=zhoneVdslPhysTable, zhoneVdslLineConfUpGinpNdrMax=zhoneVdslLineConfUpGinpNdrMax, zhoneVdslLineConfUpGinpEtrMax=zhoneVdslLineConfUpGinpEtrMax, zhoneVdslPerfIntervalLols=zhoneVdslPerfIntervalLols, zhoneVdslLineConfUpTargetSnrMgn=zhoneVdslLineConfUpTargetSnrMgn, zhoneVdslPerfDataEntry=zhoneVdslPerfDataEntry, zhoneVdslPerfIntervalEntry=zhoneVdslPerfIntervalEntry, zhoneVdslPerf1DayIntervalInits=zhoneVdslPerf1DayIntervalInits, zhoneVdslLineConfDownErasureDetectionFast=zhoneVdslLineConfDownErasureDetectionFast, zhoneVdslLineConfBandPlanFx=zhoneVdslLineConfBandPlanFx, zhoneVdslLineAlarmConfThresh1DayESs=zhoneVdslLineAlarmConfThresh1DayESs, zhoneVdslChanCurrTxRate=zhoneVdslChanCurrTxRate, zhoneVdslLineConfDownRateMode=zhoneVdslLineConfDownRateMode, zhoneVdslChanCurr1DayFixedOctets=zhoneVdslChanCurr1DayFixedOctets, zhoneVdslLineConfNetworkTimingRef=zhoneVdslLineConfNetworkTimingRef, zhoneVdslCompliances=zhoneVdslCompliances, zhoneVdslLineAlarmConfProfRowStatus=zhoneVdslLineAlarmConfProfRowStatus, zhoneVdslPhysInvVersionNumber=zhoneVdslPhysInvVersionNumber, zhoneVdslPerfDataInits=zhoneVdslPerfDataInits, zhoneVdslPerfDataESs=zhoneVdslPerfDataESs, zhoneVdslChan1DayValidIntervals=zhoneVdslChan1DayValidIntervals, zhoneVdslPhyrCorrectedRetransmittedCodewords=zhoneVdslPhyrCorrectedRetransmittedCodewords, zhoneVdslCustomNotchConfId=zhoneVdslCustomNotchConfId, zhoneVdslPhyrCurr1DayRetransmittedCodewords=zhoneVdslPhyrCurr1DayRetransmittedCodewords, zhoneVdslPerfDataCurr15MinESs=zhoneVdslPerfDataCurr15MinESs, zhoneVdslLineConfDownPsdTemplate=zhoneVdslLineConfDownPsdTemplate, zhoneVdslLineConfUpGinpRtxMode=zhoneVdslLineConfUpGinpRtxMode, zhoneVdslVectDataIsDsFeValid=zhoneVdslVectDataIsDsFeValid, zhoneVdslPhyrPrev1DayCorrectedRetransmittedCodewords=zhoneVdslPhyrPrev1DayCorrectedRetransmittedCodewords, zhoneVdslChanCurr1DayBadBlks=zhoneVdslChanCurr1DayBadBlks, zhoneVdslPerfDataValidIntervals=zhoneVdslPerfDataValidIntervals, zhoneVdslPerfIntervalInits=zhoneVdslPerfIntervalInits, zhoneVdslLineConfDownMaxPwr=zhoneVdslLineConfDownMaxPwr, zhoneVdslLineConfDownGinpReinFreq=zhoneVdslLineConfDownGinpReinFreq, zhoneVdslPerf1DayIntervalNumber=zhoneVdslPerf1DayIntervalNumber, zhoneVdslLineConfDownGhsA43TonePwr=zhoneVdslLineConfDownGhsA43TonePwr, zhoneVdslNotificationGroup=zhoneVdslNotificationGroup, zhoneVdslPerf1DayIntervalLofs=zhoneVdslPerf1DayIntervalLofs, zhoneVdslGinpPrev1DayLeftrSecs=zhoneVdslGinpPrev1DayLeftrSecs, zhoneVdslGinpCurr1DayErrorFreeBits=zhoneVdslGinpCurr1DayErrorFreeBits, zhoneVdslLineConfUpSlowMinDataRate=zhoneVdslLineConfUpSlowMinDataRate, zhoneVdslPhysCurrAttainableRate=zhoneVdslPhysCurrAttainableRate, zhoneVdslLineConfProfileEntry=zhoneVdslLineConfProfileEntry, zhoneVdslLineConfDownErasureDetectionInterleave=zhoneVdslLineConfDownErasureDetectionInterleave, zhoneVdslLineConfProfileTable=zhoneVdslLineConfProfileTable, zhoneVdslLineCoding=zhoneVdslLineCoding, zhoneVdslLineConfDownGinpSupport=zhoneVdslLineConfDownGinpSupport, zhoneVdslPerfDataCurr15MinTimeElapsed=zhoneVdslPerfDataCurr15MinTimeElapsed, zhoneVdslLineAlarmConfThresh1DayInitFailure=zhoneVdslLineAlarmConfThresh1DayInitFailure, zhoneVdslLineConfUpSlowMaxDataRate=zhoneVdslLineConfUpSlowMaxDataRate, zhoneVdslChanCrcBlockLength=zhoneVdslChanCrcBlockLength, zhoneVdslPerf1DayIntervalEntry=zhoneVdslPerf1DayIntervalEntry, zhoneVdslPhysCurrProfile=zhoneVdslPhysCurrProfile, zhoneVdslLineConfUpBitSwap=zhoneVdslLineConfUpBitSwap, zhoneVdslLineAlarmConfProfileName=zhoneVdslLineAlarmConfProfileName, zhoneVdslLineConfDeploymentScenario=zhoneVdslLineConfDeploymentScenario, zhoneVdslPhysCurrAtn=zhoneVdslPhysCurrAtn, zhoneVdslLineConfSeltAgc=zhoneVdslLineConfSeltAgc, zhoneVdslLineConfUpGinpReinFreq=zhoneVdslLineConfUpGinpReinFreq, zhoneVdslLineConfDownGinpMin=zhoneVdslLineConfDownGinpMin, zhoneVdslPerfData1DayInvalidIntervals=zhoneVdslPerfData1DayInvalidIntervals, zhoneVdslPerfDataSESs=zhoneVdslPerfDataSESs, zhoneVdslLineConfPboElectricalOverride=zhoneVdslLineConfPboElectricalOverride, zhoneVdslLineConfDownGinpMinDelay=zhoneVdslLineConfDownGinpMinDelay, zhoneVdslLineConfUpGinpEtrMin=zhoneVdslLineConfUpGinpEtrMin, zhoneVdslLineConfDownBitSwap=zhoneVdslLineConfDownBitSwap, zhoneVdslPerf1DayIntervalSESs=zhoneVdslPerf1DayIntervalSESs, zhoneVdslLineConfUpMaxInterDelay=zhoneVdslLineConfUpMaxInterDelay, zhoneVdslPerfDataCurr15MinUASs=zhoneVdslPerfDataCurr15MinUASs, zhoneVdslPerf1DayIntervalESs=zhoneVdslPerf1DayIntervalESs, zhoneVdslPerf1DayIntervalLprs=zhoneVdslPerf1DayIntervalLprs, zhoneVdslLineConfUpUpshiftSnrMgn=zhoneVdslLineConfUpUpshiftSnrMgn, zhoneVdslLineConfUpPboPsdParamA1=zhoneVdslLineConfUpPboPsdParamA1, zhoneVdslCustomNotchConfProfileEntry=zhoneVdslCustomNotchConfProfileEntry, zhoneVdslChanCurr15MinTimeElapsed=zhoneVdslChanCurr15MinTimeElapsed, zhoneVdslPhysTransportMode=zhoneVdslPhysTransportMode, zhoneVdslChanIntervalEntry=zhoneVdslChanIntervalEntry, zhoneVdslPerfDataCurr1DayInits=zhoneVdslPerfDataCurr1DayInits, vdslXtucPerf15MinSESsThreshTrap=vdslXtucPerf15MinSESsThreshTrap, zhoneVdslPerfIntervalESs=zhoneVdslPerfIntervalESs, zhoneVdslPerfIntervalLprs=zhoneVdslPerfIntervalLprs)
mibBuilder.exportSymbols("ZhoneVdsl-MIB", zhoneVdslLineAlarmConfThresh15MinLols=zhoneVdslLineAlarmConfThresh15MinLols, zhoneVdslLineConfHamBandMask=zhoneVdslLineConfHamBandMask, zhoneVdslPhysCurrStatus=zhoneVdslPhysCurrStatus, zhoneVdslLineConfUpMinTxThresholdAlarm=zhoneVdslLineConfUpMinTxThresholdAlarm, zhoneVdslLineConfDownGinpMaxDelay=zhoneVdslLineConfDownGinpMaxDelay, zhoneVdslLineAlarmConfThresh15MinLofs=zhoneVdslLineAlarmConfThresh15MinLofs, zhoneVdslLineConfProfRowStatus=zhoneVdslLineConfProfRowStatus, zhoneVdslLineConfUpErasureDetectionFast=zhoneVdslLineConfUpErasureDetectionFast, zhoneVdslLineConfDownGinpMinRSoverhead=zhoneVdslLineConfDownGinpMinRSoverhead, zhoneVdslPerfIntervalLofs=zhoneVdslPerfIntervalLofs, vdslXtucPerf15MinESsThreshTrap=vdslXtucPerf15MinESsThreshTrap, zhoneVdslLineConfUpMaxFastFec=zhoneVdslLineConfUpMaxFastFec, zhoneVdslLineConfUpPboPsdParamA4=zhoneVdslLineConfUpPboPsdParamA4, vdslXtucPerf1DayESsThreshTrap=vdslXtucPerf1DayESsThreshTrap, zhoneVdslLineConfApplicableStandard=zhoneVdslLineConfApplicableStandard, zhoneVdslLineType=zhoneVdslLineType, zhoneVdslChanInterleaveDelay=zhoneVdslChanInterleaveDelay, zhoneVdslLineConfUpRsCoding=zhoneVdslLineConfUpRsCoding, zhoneVdslChanEntry=zhoneVdslChanEntry, zhoneVdslChanCurr15MinBadBlks=zhoneVdslChanCurr15MinBadBlks, zhoneVdslPhyrCurr15MinCorrectedRetransmittedCodewords=zhoneVdslPhyrCurr15MinCorrectedRetransmittedCodewords, zhoneVdslLineConfUpMinUpshiftTime=zhoneVdslLineConfUpMinUpshiftTime, zhoneVdslPerfDataInvalidIntervals=zhoneVdslPerfDataInvalidIntervals, zhoneVdslGinpCurr15MinLeftrSecs=zhoneVdslGinpCurr15MinLeftrSecs, zhoneVdslLineConfUpMaxSnrMgn=zhoneVdslLineConfUpMaxSnrMgn, zhoneVdslLineConfUpTargetSlowBurst=zhoneVdslLineConfUpTargetSlowBurst, zhoneVdslLineAlarmConfThresh1DayLols=zhoneVdslLineAlarmConfThresh1DayLols, zhoneVdslLineConfUpGinpMinDelay=zhoneVdslLineConfUpGinpMinDelay, zhoneVdslLineConfDownRateRatio=zhoneVdslLineConfDownRateRatio, zhoneVdslLineConfDownVirtualNoiseSnrMode=zhoneVdslLineConfDownVirtualNoiseSnrMode, zhoneVdslLineAlarmConfThresh15MinLoss=zhoneVdslLineAlarmConfThresh15MinLoss, zhoneVdslLineConfAdslBandModeEndFreq=zhoneVdslLineConfAdslBandModeEndFreq, zhoneVdslLineEntry=zhoneVdslLineEntry, zhoneVdslLineConfUpGinpMaxDelay=zhoneVdslLineConfUpGinpMaxDelay, zhoneVdslLineConfDownInp=zhoneVdslLineConfDownInp, zhoneVdslLineConfDownMinTxThresholdAlarm=zhoneVdslLineConfDownMinTxThresholdAlarm, zhoneVdslLineConfUpFastMinDataRate=zhoneVdslLineConfUpFastMinDataRate, vdslXtucPerf15MinLofsThreshTrap=vdslXtucPerf15MinLofsThreshTrap, zhoneVdslPhysCurrConnType=zhoneVdslPhysCurrConnType, vdslXtucPerf1DayUASsThreshTrap=vdslXtucPerf1DayUASsThreshTrap, zhoneVdslChanIntervalFixedOctets=zhoneVdslChanIntervalFixedOctets, zhoneVdslLineConfDownTrellis=zhoneVdslLineConfDownTrellis, zhoneVdslLineConfUpPboControl=zhoneVdslLineConfUpPboControl, zhoneVdslPerfDataLoss=zhoneVdslPerfDataLoss, zhoneVdslMibObjects=zhoneVdslMibObjects, zhoneVdslLineAlarmConfThresh15MinUASs=zhoneVdslLineAlarmConfThresh15MinUASs, zhoneVdslPerf1DayIntervalTable=zhoneVdslPerf1DayIntervalTable, vdslXtucPerf15MinLossThreshTrap=vdslXtucPerf15MinLossThreshTrap, zhoneVdslChanFixedOctets=zhoneVdslChanFixedOctets, zhoneVdslChanIntervalBadBlks=zhoneVdslChanIntervalBadBlks, zhoneVdslPhysInvVendorID=zhoneVdslPhysInvVendorID, zhoneVdslGinpCurr15MinErrorFreeBits=zhoneVdslGinpCurr15MinErrorFreeBits, zhoneVdslCustomNotchConfStop=zhoneVdslCustomNotchConfStop, zhoneVdslPerfDataCurr1DayUASs=zhoneVdslPerfDataCurr1DayUASs, zhoneVdslLineConfUpInp=zhoneVdslLineConfUpInp, zhoneVdslLineEnableTrellisCoding=zhoneVdslLineEnableTrellisCoding, zhoneVdslLineMib=zhoneVdslLineMib, zhoneVdslLineConfDownGhsA43TonePwrMaxLvl=zhoneVdslLineConfDownGhsA43TonePwrMaxLvl, zhoneVdslLineConfUpPsdTemplate=zhoneVdslLineConfUpPsdTemplate, zhoneVdslLineConfUpGinpReinCfg=zhoneVdslLineConfUpGinpReinCfg, zhoneVdslPhyrRetransmittedCodewords=zhoneVdslPhyrRetransmittedCodewords, zhoneVdslChanIntervalNumber=zhoneVdslChanIntervalNumber, zhoneVdslLineConfDownGinpLeftrThreshold=zhoneVdslLineConfDownGinpLeftrThreshold, zhoneVdslChanValidIntervals=zhoneVdslChanValidIntervals, zhoneVdslVectDataEsDsCounter=zhoneVdslVectDataEsDsCounter, zhoneVdslLineConfUpMinSnrMgn=zhoneVdslLineConfUpMinSnrMgn, vdslXtucPerf1DayLofsThreshTrap=vdslXtucPerf1DayLofsThreshTrap, zhoneVdslPerfDataCurr1DaySESs=zhoneVdslPerfDataCurr1DaySESs, zhoneVdslPerfDataCurr15MinInits=zhoneVdslPerfDataCurr15MinInits, zhoneVdslPhyrPrev1DayRetransmittedCodewords=zhoneVdslPhyrPrev1DayRetransmittedCodewords, zhoneVdslPerfDataCurr15MinLofs=zhoneVdslPerfDataCurr15MinLofs, zhoneVdslVectDataTable=zhoneVdslVectDataTable, zhoneVdslLineMibCompliance=zhoneVdslLineMibCompliance, zhoneVdslChan1DayIntervalTable=zhoneVdslChan1DayIntervalTable, vdslXtucPerf1DayLossThreshTrap=vdslXtucPerf1DayLossThreshTrap, zhoneVdslLineAlarmConfThresh1DayLprs=zhoneVdslLineAlarmConfThresh1DayLprs, zhoneVdslPerfDataCurr1DayLols=zhoneVdslPerfDataCurr1DayLols, zhoneVdslLineConfDownSlowMaxDataRate=zhoneVdslLineConfDownSlowMaxDataRate, zhoneVdslPhysCurrOutputPwr=zhoneVdslPhysCurrOutputPwr, zhoneVdslLineConfPotsBypassRelayMaxDuration=zhoneVdslLineConfPotsBypassRelayMaxDuration, zhoneVdslLineConfFallbackDefaultVci=zhoneVdslLineConfFallbackDefaultVci, zhoneVdslPhyrUncorrectableRetransmittedCodewords=zhoneVdslPhyrUncorrectableRetransmittedCodewords, zhoneVdslLineAlarmConfProfileTable=zhoneVdslLineAlarmConfProfileTable, zhoneVdslLineConfDownPhyRmaxINP=zhoneVdslLineConfDownPhyRmaxINP, zhoneVdslLineConfBandOptUsage=zhoneVdslLineConfBandOptUsage, zhoneVdslLineAlarmConfProfile=zhoneVdslLineAlarmConfProfile, zhoneVdslPerfDataCurr1DayLofs=zhoneVdslPerfDataCurr1DayLofs, zhoneVdslLineConfVdslMode=zhoneVdslLineConfVdslMode, zhoneVdslLineEnableRsCoding=zhoneVdslLineEnableRsCoding, zhoneVdslLineTable=zhoneVdslLineTable, zhoneVdslLineConfDownPsdShape=zhoneVdslLineConfDownPsdShape, zhoneVdslPerfIntervalUASs=zhoneVdslPerfIntervalUASs, zhoneVdslLineConfProfileName=zhoneVdslLineConfProfileName, zhoneVdslLineConfCustomNotch2Stop=zhoneVdslLineConfCustomNotch2Stop, zhoneVdslPerfDataCurr15MinLprs=zhoneVdslPerfDataCurr15MinLprs, zhoneVdslPerfDataUASs=zhoneVdslPerfDataUASs, vdslXtucPerf15MinLolsThreshTrap=vdslXtucPerf15MinLolsThreshTrap)
