#
# PySNMP MIB module ERI-DNX-OCTAL-HIGH-SPEED-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ERI-DNX-OCTAL-HIGH-SPEED-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:51:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
LinkPortAddress, FunctionSwitch, DecisionType, ConnectionSpeed, devices, trapSequence, LinkCmdStatus, PortStatus = mibBuilder.importSymbols("ERI-DNX-SMC-MIB", "LinkPortAddress", "FunctionSwitch", "DecisionType", "ConnectionSpeed", "devices", "trapSequence", "LinkCmdStatus", "PortStatus")
eriMibs, = mibBuilder.importSymbols("ERI-ROOT-SMI", "eriMibs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, ModuleIdentity, NotificationType, TimeTicks, Bits, Gauge32, MibIdentifier, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "ModuleIdentity", "NotificationType", "TimeTicks", "Bits", "Gauge32", "MibIdentifier", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "iso", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
eriDNXOctalHSMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 644, 3, 6))
eriDNXOctalHSMIB.setRevisions(('2003-02-05 00:00', '2002-05-13 00:00', '2002-03-11 00:00', '2001-08-01 00:00', '2001-06-25 00:00', '2001-03-01 00:00',))
if mibBuilder.loadTexts: eriDNXOctalHSMIB.setLastUpdated('200302050000Z')
if mibBuilder.loadTexts: eriDNXOctalHSMIB.setOrganization('Eastern Research, Inc.')
dnxOHS = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5))
ohsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1))
ohsDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 2))
oHSConfigTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1), )
if mibBuilder.loadTexts: oHSConfigTable.setStatus('current')
oHSConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1), ).setIndexNames((0, "ERI-DNX-OCTAL-HIGH-SPEED-MIB", "oHSCfgPortAddr"))
if mibBuilder.loadTexts: oHSConfigEntry.setStatus('current')
oHSCfgPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 1), LinkPortAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oHSCfgPortAddr.setStatus('current')
oHSCfgResource = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oHSCfgResource.setStatus('current')
oHSCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgPortName.setStatus('current')
oHSCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 4), PortStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgStatus.setStatus('current')
oHSCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("nxDs0", 0), ("ds0-A", 1), ("nxDs0-Special", 2), ("ds0-A-Special", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgMode.setStatus('current')
oHSCfgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 6), ConnectionSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oHSCfgSpeed.setStatus('obsolete')
oHSCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 13, 14, 15, 16))).clone(namedValues=NamedValues(("eia232", 2), ("eia422", 4), ("eia530", 13), ("ituV-35", 14), ("eia530A", 15), ("ituX-21", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgType.setStatus('current')
oHSCfgData = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("invert", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgData.setStatus('current')
oHSCfgClock = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("invert", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgClock.setStatus('current')
oHSCfgNetLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 10), FunctionSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgNetLoop.setStatus('current')
oHSCfgTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("internal", 0), ("int-ext", 1), ("external", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgTiming.setStatus('current')
oHSCfgDcd = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("forced-off", 0), ("forced-on", 1), ("track-RTS", 2), ("drop-carrier", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgDcd.setStatus('current')
oHSCfgDsr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forced-off", 0), ("forced-on", 1), ("track-DTR", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgDsr.setStatus('current')
oHSCfgCtsIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forced-off", 0), ("forced-on", 1), ("track-RTS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgCtsIndication.setStatus('current')
oHSCfgDTELoop = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 15), FunctionSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgDTELoop.setStatus('current')
oHSCfgCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 16), LinkCmdStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgCmdStatus.setStatus('current')
oHSCfgClockEdgeErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 1, 1, 1, 17), DecisionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oHSCfgClockEdgeErrs.setStatus('current')
dnxOHSEnterprise = ObjectIdentity((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 0))
if mibBuilder.loadTexts: dnxOHSEnterprise.setStatus('current')
oHSConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 5, 0, 1)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-OCTAL-HIGH-SPEED-MIB", "oHSCfgPortAddr"), ("ERI-DNX-OCTAL-HIGH-SPEED-MIB", "oHSCfgCmdStatus"))
if mibBuilder.loadTexts: oHSConfigTrap.setStatus('current')
mibBuilder.exportSymbols("ERI-DNX-OCTAL-HIGH-SPEED-MIB", oHSCfgResource=oHSCfgResource, oHSCfgCtsIndication=oHSCfgCtsIndication, PYSNMP_MODULE_ID=eriDNXOctalHSMIB, oHSCfgCmdStatus=oHSCfgCmdStatus, ohsDiag=ohsDiag, ohsConfig=ohsConfig, oHSCfgPortAddr=oHSCfgPortAddr, oHSCfgClockEdgeErrs=oHSCfgClockEdgeErrs, oHSCfgClock=oHSCfgClock, oHSCfgDsr=oHSCfgDsr, dnxOHS=dnxOHS, oHSCfgTiming=oHSCfgTiming, oHSCfgStatus=oHSCfgStatus, oHSCfgData=oHSCfgData, eriDNXOctalHSMIB=eriDNXOctalHSMIB, oHSCfgDcd=oHSCfgDcd, oHSCfgNetLoop=oHSCfgNetLoop, oHSCfgMode=oHSCfgMode, oHSCfgSpeed=oHSCfgSpeed, oHSCfgPortName=oHSCfgPortName, oHSCfgType=oHSCfgType, dnxOHSEnterprise=dnxOHSEnterprise, oHSConfigTrap=oHSConfigTrap, oHSConfigTable=oHSConfigTable, oHSConfigEntry=oHSConfigEntry, oHSCfgDTELoop=oHSCfgDTELoop)
