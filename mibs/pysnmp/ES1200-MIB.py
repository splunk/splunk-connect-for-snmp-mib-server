#
# PySNMP MIB module ES1200-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ES1200-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:52:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
MacAddress, dot1dBasePort = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress", "dot1dBasePort")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, IpAddress, Counter32, Gauge32, Integer32, NotificationType, Unsigned32, MibIdentifier, iso, Bits, NotificationType, ModuleIdentity, Counter64, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "Counter32", "Gauge32", "Integer32", "NotificationType", "Unsigned32", "MibIdentifier", "iso", "Bits", "NotificationType", "ModuleIdentity", "Counter64", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(12, 12)
    fixedLength = 12

class VlanIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

fore = MibIdentifier((1, 3, 6, 1, 4, 1, 326))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2))
ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20))
edge = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1))
edgecommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 1))
golf = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2))
golfproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1))
es1200 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1, 2))
golfcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2))
fore_products = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1)).setLabel("fore-products")
fore_es1200Prod = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25)).setLabel("fore-es1200Prod")
swProperty = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 1))
swModule = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 1, 1))
es1200DevRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 2))
es1200Device = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 2, 1))
es1200UnitRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 3))
es1200Master = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 3, 1))
es1210Slave1 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 3, 2))
es1210Slave2 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 3, 3))
es1210Slave3 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 3, 4))
es1200ModuleRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4))
es1200ModuleMainboardTx = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 1))
es1200ModuleTxTwoPort = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 2))
es1200ModuleFxSC = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 3))
es1200ModuleFxMTRJ = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 4))
es1200ModuleSIO = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 5))
es1200ModuleSXGIGAOnePort = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 6))
es1200ModuleSXGIGATwoPort = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 7))
es1200ModuleLXGIGAOnePort = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 8))
es1200ModuleLXGIGATwoPort = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 9))
es1200ModuleTXGIGAOnePort = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 10))
es1200ModuleTXGIGATwoPort = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 11))
es1200ModuleNone = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 12))
es1210ModuleRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 5))
es1210ModuleMainboardTx = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 5, 1))
es1210ModuleTxTwoPort = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 5, 2))
es1210ModuleFxSC = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 5, 3))
es1210ModuleFxMTRJ = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 5, 4))
es1210ModuleSIO = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 5, 5))
es1210ModuleNone = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 5, 6))
es1200PortRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 6))
es1200Port_10_100TX = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 6, 1)).setLabel("es1200Port-10-100TX")
es1200Port_100_SC = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 6, 2)).setLabel("es1200Port-100-SC")
es1200Port_100_MTRJ = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 6, 3)).setLabel("es1200Port-100-MTRJ")
es1200Port_1000_SX = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 6, 4)).setLabel("es1200Port-1000-SX")
es1200Port_1000_LX = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 6, 5)).setLabel("es1200Port-1000-LX")
es1200Port_1000_TX = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 6, 6)).setLabel("es1200Port-1000-TX")
es1210PortRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 7))
es1210Port_10_100TX = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 7, 1)).setLabel("es1210Port-10-100TX")
es1210Port_100_SC = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 7, 2)).setLabel("es1210Port-100-SC")
es1210Port_100_MTRJ = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 7, 3)).setLabel("es1210Port-100-MTRJ")
es1200PowerSupplyRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 8))
es1200PowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 8, 1))
es1210PowerSupplyRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 9))
es1210PowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 9, 1))
es1200FanRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 10))
es1200Fan = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 10, 1))
es1210FanRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 11))
es1210Fan = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 11, 1))
es1200SlotRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 12))
es1200Slot1 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 12, 1))
es1200Slot2 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 12, 2))
es1200Slot3 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 12, 3))
es1210SlotRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 13))
es1210Slot1 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 13, 1))
es1210Slot2 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 13, 2))
es1200SensorRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 14))
es1200BackplaneRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 15))
fore_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2)).setLabel("fore-mgmt")
es1200Mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25))
swL2Mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2))
swStructure = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1))
swStructInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 1))
swStructDevType = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructDevType.setStatus('mandatory')
swStructDevDescr = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructDevDescr.setStatus('mandatory')
swStructPortEncodingFactor = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructPortEncodingFactor.setStatus('mandatory')
swStructUnitTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2), )
if mibBuilder.loadTexts: swStructUnitTable.setStatus('mandatory')
swStructUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1), ).setIndexNames((0, "ES1200-MIB", "swStructUnitIndex"))
if mibBuilder.loadTexts: swStructUnitEntry.setStatus('mandatory')
swStructUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructUnitIndex.setStatus('mandatory')
swStructUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructUnitType.setStatus('mandatory')
swStructUnitDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructUnitDescr.setStatus('mandatory')
swStructUnitLedInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructUnitLedInfo.setStatus('mandatory')
swStructUnitMaxModuleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructUnitMaxModuleNum.setStatus('mandatory')
swStructUnitMaxPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructUnitMaxPortNum.setStatus('mandatory')
swStructUnitNumOfPortInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructUnitNumOfPortInUse.setStatus('mandatory')
swStructUnitOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("notAvail", 2), ("removed", 3), ("disabled", 4), ("normal", 5), ("nonFatalErr", 9), ("fatalErr", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructUnitOperStatus.setStatus('mandatory')
swStructUnitLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructUnitLastChange.setStatus('mandatory')
swStructModuleTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3), )
if mibBuilder.loadTexts: swStructModuleTable.setStatus('mandatory')
swStructModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1), ).setIndexNames((0, "ES1200-MIB", "swStructModuleUnitIndex"), (0, "ES1200-MIB", "swStructModuleIndex"), (0, "ES1200-MIB", "swStructModuleSubMduIndex"))
if mibBuilder.loadTexts: swStructModuleEntry.setStatus('mandatory')
swStructModuleUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleUnitIndex.setStatus('mandatory')
swStructModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleIndex.setStatus('mandatory')
swStructModuleSubMduIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleSubMduIndex.setStatus('mandatory')
swStructModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleType.setStatus('mandatory')
swStructModuleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleDescr.setStatus('mandatory')
swStructModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleVersion.setStatus('mandatory')
swStructModuleMaxPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleMaxPortNum.setStatus('mandatory')
swStructModuleEncodingOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleEncodingOffset.setStatus('mandatory')
swStructModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("notAvail", 2), ("removed", 3), ("disabled", 4), ("normal", 5), ("nonFatalErr", 9), ("fatalErr", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleOperStatus.setStatus('mandatory')
swStructModuleLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleLastChange.setStatus('mandatory')
swStructPowerTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 4), )
if mibBuilder.loadTexts: swStructPowerTable.setStatus('mandatory')
swStructPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 4, 1), ).setIndexNames((0, "ES1200-MIB", "swStructPowerUnitIndex"), (0, "ES1200-MIB", "swStructPowerIndex"))
if mibBuilder.loadTexts: swStructPowerEntry.setStatus('mandatory')
swStructPowerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructPowerUnitIndex.setStatus('mandatory')
swStructPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructPowerIndex.setStatus('mandatory')
swStructPowerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("notAvail", 2), ("removed", 3), ("disabled", 4), ("normal", 5), ("nonFatalErr", 9), ("fatalErr", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructPowerOperStatus.setStatus('mandatory')
swStructFanTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 5), )
if mibBuilder.loadTexts: swStructFanTable.setStatus('mandatory')
swStructFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 5, 1), ).setIndexNames((0, "ES1200-MIB", "swStructFanUnitIndex"), (0, "ES1200-MIB", "swStructFanIndex"))
if mibBuilder.loadTexts: swStructFanEntry.setStatus('mandatory')
swStructFanUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructFanUnitIndex.setStatus('mandatory')
swStructFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructFanIndex.setStatus('mandatory')
swStructFanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("notAvail", 2), ("removed", 3), ("disabled", 4), ("normal", 5), ("nonFatalErr", 9), ("fatalErr", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructFanOperStatus.setStatus('mandatory')
swFDB = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9))
endOfMIB = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 9999), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfMIB.setStatus('optional')
swFdbStaticTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 1), )
if mibBuilder.loadTexts: swFdbStaticTable.setStatus('mandatory')
swFdbStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 1, 1), ).setIndexNames((0, "ES1200-MIB", "swFdbStaticVid"), (0, "ES1200-MIB", "swFdbStaticAddress"))
if mibBuilder.loadTexts: swFdbStaticEntry.setStatus('mandatory')
swFdbStaticVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticVid.setStatus('mandatory')
swFdbStaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticAddress.setStatus('mandatory')
swFdbStaticPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFdbStaticPortMap.setStatus('mandatory')
swFdbStaticJoinIGMPSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFdbStaticJoinIGMPSnooping.setStatus('mandatory')
swFdbStaticState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFdbStaticState.setStatus('mandatory')
swFdbStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("apply", 2), ("not-apply", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticStatus.setStatus('mandatory')
swFdbStaticMemberTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 2), )
if mibBuilder.loadTexts: swFdbStaticMemberTable.setStatus('mandatory')
swFdbStaticMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 2, 1), ).setIndexNames((0, "ES1200-MIB", "swFdbStaticMemberVid"), (0, "ES1200-MIB", "swFdbStaticMemberAddress"), (0, "ES1200-MIB", "swFdbStaticMemberUnitIndex"), (0, "ES1200-MIB", "swFdbStaticMemberModuleIndex"), (0, "ES1200-MIB", "swFdbStaticMemberPortIndex"))
if mibBuilder.loadTexts: swFdbStaticMemberEntry.setStatus('mandatory')
swFdbStaticMemberVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticMemberVid.setStatus('mandatory')
swFdbStaticMemberAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticMemberAddress.setStatus('mandatory')
swFdbStaticMemberUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticMemberUnitIndex.setStatus('mandatory')
swFdbStaticMemberModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticMemberModuleIndex.setStatus('mandatory')
swFdbStaticMemberPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticMemberPortIndex.setStatus('mandatory')
swFdbFilterTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 3), )
if mibBuilder.loadTexts: swFdbFilterTable.setStatus('mandatory')
swFdbFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 3, 1), ).setIndexNames((0, "ES1200-MIB", "swFdbFilterVid"), (0, "ES1200-MIB", "swFdbFilterAddress"))
if mibBuilder.loadTexts: swFdbFilterEntry.setStatus('mandatory')
swFdbFilterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbFilterVid.setStatus('mandatory')
swFdbFilterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbFilterAddress.setStatus('mandatory')
swFdbFilterState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3), ("dst-src-addr", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFdbFilterState.setStatus('mandatory')
swL2PortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4))
swL2PortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 1), )
if mibBuilder.loadTexts: swL2PortInfoTable.setStatus('mandatory')
swL2PortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 1, 1), ).setIndexNames((0, "ES1200-MIB", "swL2PortInfoUnitIndex"), (0, "ES1200-MIB", "swL2PortInfoModuleIndex"), (0, "ES1200-MIB", "swL2PortInfoIndex"))
if mibBuilder.loadTexts: swL2PortInfoEntry.setStatus('mandatory')
swL2PortInfoUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoUnitIndex.setStatus('mandatory')
swL2PortInfoModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoModuleIndex.setStatus('mandatory')
swL2PortInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoIndex.setStatus('mandatory')
swL2PortInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("portType-100TX", 1), ("portType-100FXSC", 2), ("portType-100FXMTRJ", 3), ("portType-GIGASX", 4), ("portType-GIGALX", 5), ("portType-GIGATX", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoType.setStatus('mandatory')
swL2PortInfoDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoDescr.setStatus('mandatory')
swL2PortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setStatus('mandatory')
swL2PortInfoNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("half-10Mbps", 2), ("full-10Mbps", 3), ("half-100Mbps", 4), ("full-100Mbps", 5), ("half-1Gigabps", 6), ("full-1Gigabps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setStatus('mandatory')
swL2PortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2), )
if mibBuilder.loadTexts: swL2PortCtrlTable.setStatus('mandatory')
swL2PortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1), ).setIndexNames((0, "ES1200-MIB", "swL2PortCtrlUnitIndex"), (0, "ES1200-MIB", "swL2PortCtrlModuleIndex"), (0, "ES1200-MIB", "swL2PortCtrlIndex"))
if mibBuilder.loadTexts: swL2PortCtrlEntry.setStatus('mandatory')
swL2PortCtrlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setStatus('mandatory')
swL2PortCtrlModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlModuleIndex.setStatus('mandatory')
swL2PortCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlIndex.setStatus('mandatory')
swL2PortCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setStatus('mandatory')
swL2PortCtrlLinkStatusAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlLinkStatusAlarmState.setStatus('mandatory')
swL2PortCtrlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6), ("nway-disabled-1Gigabps-Half", 7), ("nway-disabled-1Gigabps-Full", 8), ("notAvailable", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setStatus('mandatory')
swL2PortCtrlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setStatus('mandatory')
swL2PortCtrlBackPressState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlBackPressState.setStatus('mandatory')
swL2PortCtrlLockState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlLockState.setStatus('mandatory')
swL2PortCtrlPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("default", 2), ("force-low-priority", 3), ("force-high-priority", 4), ("notAvailable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlPriority.setStatus('mandatory')
swL2PortCtrlStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlStpState.setStatus('mandatory')
swL2PortCtrlHOLState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlHOLState.setStatus('mandatory')
swL2PortCtrlBcastRisingAct = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("do-nothing", 2), ("blocking", 3), ("blocking-trap", 4), ("notAvailable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlBcastRisingAct.setStatus('mandatory')
swL2PortCtrlBcastFallingAct = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("do-nothing", 2), ("forwarding", 3), ("forwarding-trap", 4), ("notAvailable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlBcastFallingAct.setStatus('mandatory')
swL2PortStTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3), )
if mibBuilder.loadTexts: swL2PortStTable.setStatus('mandatory')
swL2PortStEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1), ).setIndexNames((0, "ES1200-MIB", "swL2PortStUnitIndex"), (0, "ES1200-MIB", "swL2PortStModuleIndex"), (0, "ES1200-MIB", "swL2PortStIndex"))
if mibBuilder.loadTexts: swL2PortStEntry.setStatus('mandatory')
swL2PortStUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStUnitIndex.setStatus('mandatory')
swL2PortStModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStModuleIndex.setStatus('mandatory')
swL2PortStIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStIndex.setStatus('mandatory')
swL2PortStByteRx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStByteRx.setStatus('mandatory')
swL2PortStByteTx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStByteTx.setStatus('mandatory')
swL2PortStFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFrameRx.setStatus('mandatory')
swL2PortStFrameTx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFrameTx.setStatus('mandatory')
swL2PortStTotalBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStTotalBytesRx.setStatus('mandatory')
swL2PortStTotalFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStTotalFramesRx.setStatus('mandatory')
swL2PortStBroadcastFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStBroadcastFramesRx.setStatus('mandatory')
swL2PortStMulticastFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStMulticastFramesRx.setStatus('mandatory')
swL2PortStCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStCRCError.setStatus('mandatory')
swL2PortStOversizeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStOversizeFrames.setStatus('mandatory')
swL2PortStFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFragments.setStatus('mandatory')
swL2PortStJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStJabber.setStatus('mandatory')
swL2PortStCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStCollision.setStatus('mandatory')
swL2PortStLateCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStLateCollision.setStatus('mandatory')
swL2PortStFrames_64_bytes = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 18), Counter32()).setLabel("swL2PortStFrames-64-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFrames_64_bytes.setStatus('mandatory')
swL2PortStFrames_65_127_bytes = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 19), Counter32()).setLabel("swL2PortStFrames-65-127-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFrames_65_127_bytes.setStatus('mandatory')
swL2PortStFrames_128_255_bytes = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 20), Counter32()).setLabel("swL2PortStFrames-128-255-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFrames_128_255_bytes.setStatus('mandatory')
swL2PortStFrames_256_511_bytes = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 21), Counter32()).setLabel("swL2PortStFrames-256-511-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFrames_256_511_bytes.setStatus('mandatory')
swL2PortStFrames_512_1023_bytes = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 22), Counter32()).setLabel("swL2PortStFrames-512-1023-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFrames_512_1023_bytes.setStatus('mandatory')
swL2PortStFrames_1024_1536_bytes = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 23), Counter32()).setLabel("swL2PortStFrames-1024-1536-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFrames_1024_1536_bytes.setStatus('mandatory')
swL2PortStFramesDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFramesDroppedFrames.setStatus('mandatory')
swL2PortStMulticastFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStMulticastFramesTx.setStatus('mandatory')
swL2PortStBroadcastFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStBroadcastFramesTx.setStatus('mandatory')
swL2PortStUndersizeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStUndersizeFrames.setStatus('mandatory')
swEventPortPartition = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1, 2) + (0,1)).setObjects(("ES1200-MIB", "swL2PortInfoUnitIndex"), ("ES1200-MIB", "swL2PortInfoModuleIndex"), ("ES1200-MIB", "swL2PortInfoIndex"))
swEventlinkChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1, 2) + (0,2)).setObjects(("ES1200-MIB", "swL2PortInfoUnitIndex"), ("ES1200-MIB", "swL2PortInfoModuleIndex"), ("ES1200-MIB", "swL2PortInfoIndex"))
swEventBcastRisingStorm = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1, 2) + (0,3)).setObjects(("ES1200-MIB", "swL2PortInfoUnitIndex"), ("ES1200-MIB", "swL2PortInfoModuleIndex"), ("ES1200-MIB", "swL2PortInfoIndex"))
swEventBcastFallingStorm = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1, 2) + (0,4)).setObjects(("ES1200-MIB", "swL2PortInfoUnitIndex"), ("ES1200-MIB", "swL2PortInfoModuleIndex"), ("ES1200-MIB", "swL2PortInfoIndex"))
swIGMP = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7))
swIGMPCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 1))
swIGMPAdminState = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPAdminState.setStatus('mandatory')
swIGMPTimeout = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 1, 2), Integer32().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPTimeout.setStatus('mandatory')
swIGMPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 2), )
if mibBuilder.loadTexts: swIGMPInfoTable.setStatus('mandatory')
swIGMPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 2, 1), ).setIndexNames((0, "ES1200-MIB", "swIGMPInfoIndex"))
if mibBuilder.loadTexts: swIGMPInfoEntry.setStatus('mandatory')
swIGMPInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoIndex.setStatus('mandatory')
swIGMPInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoVid.setStatus('mandatory')
swIGMPInfoQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoQueryCount.setStatus('mandatory')
swIGMPInfoTxQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoTxQueryCount.setStatus('mandatory')
swIGMPTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 3), )
if mibBuilder.loadTexts: swIGMPTable.setStatus('mandatory')
swIGMPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 3, 1), ).setIndexNames((0, "ES1200-MIB", "swIGMPVid"), (0, "ES1200-MIB", "swIGMPGroupIpAddr"))
if mibBuilder.loadTexts: swIGMPEntry.setStatus('mandatory')
swIGMPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPVid.setStatus('mandatory')
swIGMPGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPGroupIpAddr.setStatus('mandatory')
swIGMPGroupMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPGroupMacAddr.setStatus('mandatory')
swIGMPPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 3, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPPortMap.setStatus('mandatory')
swIGMPIpGroupReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPIpGroupReportCount.setStatus('mandatory')
swIGMPCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 4), )
if mibBuilder.loadTexts: swIGMPCtrlTable.setStatus('mandatory')
swIGMPCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 4, 1), ).setIndexNames((0, "ES1200-MIB", "swIGMPCtrlIndex"))
if mibBuilder.loadTexts: swIGMPCtrlEntry.setStatus('mandatory')
swIGMPCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPCtrlIndex.setStatus('mandatory')
swIGMPCtrlVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPCtrlVid.setStatus('mandatory')
swIGMPCtrlTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 9999)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPCtrlTimer.setStatus('mandatory')
swIGMPCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("deleted", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPCtrlState.setStatus('mandatory')
swL2DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1))
swL2DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 1))
swL2DevCtrlStpState = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlStpState.setStatus('mandatory')
swL2DevCtrlPartitionModeState = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlPartitionModeState.setStatus('mandatory')
swL2DevCtrlTableLockState = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTableLockState.setStatus('mandatory')
swL2DevCtrlHOLState = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlHOLState.setStatus('mandatory')
swL2DevCtrlAddrLookupModesAndHitRate = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level0", 1), ("level1", 2), ("level2", 3), ("level3", 4), ("level4", 5), ("level5", 6), ("level6", 7), ("level7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlAddrLookupModesAndHitRate.setStatus('mandatory')
swL2DevCtrlUploadImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlUploadImageFileName.setStatus('mandatory')
swL2DevCtrlUploadImage = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 1, 7), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: swL2DevCtrlUploadImage.setStatus('mandatory')
swL2DevCtrlClearAddressTable = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlClearAddressTable.setStatus('mandatory')
swL2DevAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 2))
swL2DevAlarmPartition = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmPartition.setStatus('mandatory')
swL2DevAlarmNewRoot = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setStatus('mandatory')
swL2DevAlarmTopChange = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmTopChange.setStatus('mandatory')
swL2DevAlarmLinkChange = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setStatus('mandatory')
swVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8))
pBridgeMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4))
class EnabledStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class TimeInterval(Integer32):
    pass

dot1dExtBase = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 1))
dot1dPriority = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 2))
dot1dGarp = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 3))
dot1dGmrp = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 4))
dot1dDeviceCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dDeviceCapabilities.setStatus('mandatory')
dot1dTrafficClassesEnabled = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 1, 2), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTrafficClassesEnabled.setStatus('mandatory')
dot1dGmrpStatus = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 1, 3), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dGmrpStatus.setStatus('mandatory')
dot1dPortCapabilitiesTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 1, 4), )
if mibBuilder.loadTexts: dot1dPortCapabilitiesTable.setStatus('mandatory')
dot1dPortCapabilitiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 1, 4, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: dot1dPortCapabilitiesEntry.setStatus('mandatory')
dot1dPortCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dPortCapabilities.setStatus('mandatory')
dot1dPortPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 2, 1), )
if mibBuilder.loadTexts: dot1dPortPriorityTable.setStatus('mandatory')
dot1dPortPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 2, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: dot1dPortPriorityEntry.setStatus('mandatory')
dot1dPortNumTrafficClasses = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dPortNumTrafficClasses.setStatus('mandatory')
dot1dPortGarpTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 3, 1), )
if mibBuilder.loadTexts: dot1dPortGarpTable.setStatus('mandatory')
dot1dPortGarpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 3, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: dot1dPortGarpEntry.setStatus('mandatory')
dot1dPortGarpJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 3, 1, 1, 1), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(20, 65535)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortGarpJoinTime.setStatus('mandatory')
dot1dPortGarpLeaveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 3, 1, 1, 2), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(20, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortGarpLeaveTime.setStatus('mandatory')
dot1dPortGarpLeaveAllTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 3, 1, 1, 3), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(20, 65535)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortGarpLeaveAllTime.setStatus('mandatory')
dot1dPortGmrpTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 4, 1), )
if mibBuilder.loadTexts: dot1dPortGmrpTable.setStatus('mandatory')
dot1dPortGmrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 4, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: dot1dPortGmrpEntry.setStatus('mandatory')
dot1dPortGmrpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 4, 1, 1, 1), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortGmrpStatus.setStatus('mandatory')
dot1dPortGmrpFailedRegistrations = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dPortGmrpFailedRegistrations.setStatus('mandatory')
dot1dPortGmrpLastPduOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 4, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dPortGmrpLastPduOrigin.setStatus('mandatory')
qBridgeMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5))
class Unsigned32(Integer32):
    pass

class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class TimeFilter(Integer32):
    pass

dot1qBase = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 1))
dot1qTp = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2))
dot1qStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 3))
dot1qVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4))
dot1qVlanVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("version1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanVersionNumber.setStatus('mandatory')
dot1qMaxVlanId = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qMaxVlanId.setStatus('mandatory')
dot1qMaxSupportedVlans = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qMaxSupportedVlans.setStatus('mandatory')
dot1qNumVlans = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qNumVlans.setStatus('mandatory')
dot1qGvrpStatus = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 1, 5), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qGvrpStatus.setStatus('mandatory')
dot1qFdbTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 1), )
if mibBuilder.loadTexts: dot1qFdbTable.setStatus('mandatory')
dot1qFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 1, 1), ).setIndexNames((0, "ES1200-MIB", "dot1qFdbId"))
if mibBuilder.loadTexts: dot1qFdbEntry.setStatus('mandatory')
dot1qFdbId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dot1qFdbId.setStatus('mandatory')
dot1qFdbDynamicCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qFdbDynamicCount.setStatus('mandatory')
dot1qTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 2), )
if mibBuilder.loadTexts: dot1qTpFdbTable.setStatus('mandatory')
dot1qTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 2, 1), ).setIndexNames((0, "ES1200-MIB", "dot1qFdbId"), (0, "ES1200-MIB", "dot1qTpFdbAddress"))
if mibBuilder.loadTexts: dot1qTpFdbEntry.setStatus('mandatory')
dot1qTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: dot1qTpFdbAddress.setStatus('mandatory')
dot1qTpFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qTpFdbPort.setStatus('mandatory')
dot1qTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qTpFdbStatus.setStatus('mandatory')
dot1qTpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 3), )
if mibBuilder.loadTexts: dot1qTpGroupTable.setStatus('mandatory')
dot1qTpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 3, 1), ).setIndexNames((0, "ES1200-MIB", "dot1qVlanIndex"), (0, "ES1200-MIB", "dot1qTpGroupAddress"))
if mibBuilder.loadTexts: dot1qTpGroupEntry.setStatus('mandatory')
dot1qTpGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: dot1qTpGroupAddress.setStatus('mandatory')
dot1qTpGroupEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 3, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qTpGroupEgressPorts.setStatus('mandatory')
dot1qTpGroupLearnt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 3, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qTpGroupLearnt.setStatus('mandatory')
dot1qStaticMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 3, 2), )
if mibBuilder.loadTexts: dot1qStaticMulticastTable.setStatus('mandatory')
dot1qStaticMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 3, 2, 1), ).setIndexNames((0, "ES1200-MIB", "dot1qVlanIndex"), (0, "ES1200-MIB", "dot1qStaticMulticastAddress"), (0, "ES1200-MIB", "dot1qStaticMulticastReceivePort"))
if mibBuilder.loadTexts: dot1qStaticMulticastEntry.setStatus('mandatory')
dot1qStaticMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 3, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: dot1qStaticMulticastAddress.setStatus('mandatory')
dot1qStaticMulticastReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dot1qStaticMulticastReceivePort.setStatus('mandatory')
dot1qStaticMulticastStaticEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 3, 2, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qStaticMulticastStaticEgressPorts.setStatus('mandatory')
dot1qStaticMulticastForbiddenEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 3, 2, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qStaticMulticastForbiddenEgressPorts.setStatus('mandatory')
dot1qStaticMulticastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5))).clone('permanent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qStaticMulticastStatus.setStatus('mandatory')
dot1qVlanNumDeletes = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanNumDeletes.setStatus('mandatory')
dot1qVlanCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 2), )
if mibBuilder.loadTexts: dot1qVlanCurrentTable.setStatus('mandatory')
dot1qVlanCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 2, 1), ).setIndexNames((0, "ES1200-MIB", "dot1qVlanTimeMark"), (0, "ES1200-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: dot1qVlanCurrentEntry.setStatus('mandatory')
dot1qVlanTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 2, 1, 1), TimeFilter())
if mibBuilder.loadTexts: dot1qVlanTimeMark.setStatus('mandatory')
dot1qVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 2, 1, 2), VlanIndex())
if mibBuilder.loadTexts: dot1qVlanIndex.setStatus('mandatory')
dot1qVlanFdbId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanFdbId.setStatus('mandatory')
dot1qVlanCurrentEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 2, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanCurrentEgressPorts.setStatus('mandatory')
dot1qVlanCurrentUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 2, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanCurrentUntaggedPorts.setStatus('mandatory')
dot1qVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("permanent", 2), ("dynamicGvrp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanStatus.setStatus('mandatory')
dot1qVlanCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanCreationTime.setStatus('mandatory')
dot1qVlanStaticTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 3), )
if mibBuilder.loadTexts: dot1qVlanStaticTable.setStatus('mandatory')
dot1qVlanStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 3, 1), ).setIndexNames((0, "ES1200-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: dot1qVlanStaticEntry.setStatus('mandatory')
dot1qVlanStaticName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanStaticName.setStatus('mandatory')
dot1qVlanStaticEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 3, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanStaticEgressPorts.setStatus('mandatory')
dot1qVlanForbiddenEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 3, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanForbiddenEgressPorts.setStatus('mandatory')
dot1qVlanStaticUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 3, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanStaticUntaggedPorts.setStatus('mandatory')
dot1qVlanStaticRowState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanStaticRowState.setStatus('mandatory')
dot1qPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 4), )
if mibBuilder.loadTexts: dot1qPortVlanTable.setStatus('mandatory')
dot1qPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 4, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: dot1qPortVlanEntry.setStatus('mandatory')
dot1qPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 4, 1, 1), VlanIndex().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qPvid.setStatus('mandatory')
dot1qPortIngressFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qPortIngressFiltering.setStatus('mandatory')
dot1qPortGvrpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 4, 1, 3), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qPortGvrpStatus.setStatus('mandatory')
dot1qPortGvrpFailedRegistrations = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qPortGvrpFailedRegistrations.setStatus('mandatory')
dot1qPortGvrpLastPduOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 4, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qPortGvrpLastPduOrigin.setStatus('mandatory')
swPortSniff = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 5))
swSniffCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 5, 1), )
if mibBuilder.loadTexts: swSniffCtrlTable.setStatus('mandatory')
swSniffCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 5, 1, 1), ).setIndexNames((0, "ES1200-MIB", "swSniffIndex"))
if mibBuilder.loadTexts: swSniffCtrlEntry.setStatus('mandatory')
swSniffIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSniffIndex.setStatus('mandatory')
swSniffSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSniffSourcePort.setStatus('mandatory')
swSniffTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSniffTargetPort.setStatus('mandatory')
swSniffState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSniffState.setStatus('mandatory')
swPortTrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6))
swPortTrunkCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 1), )
if mibBuilder.loadTexts: swPortTrunkCtrlTable.setStatus('mandatory')
swPortTrunkCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 1, 1), ).setIndexNames((0, "ES1200-MIB", "swPortTrunkCtrlIndex"))
if mibBuilder.loadTexts: swPortTrunkCtrlEntry.setStatus('mandatory')
swPortTrunkCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkCtrlIndex.setStatus('mandatory')
swPortTrunkCtrlAnchorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortTrunkCtrlAnchorPort.setStatus('mandatory')
swPortTrunkCtrlMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkCtrlMasterPort.setStatus('mandatory')
swPortTrunkCtrlName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortTrunkCtrlName.setStatus('mandatory')
swPortTrunkCtrlMember = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 1, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortTrunkCtrlMember.setStatus('mandatory')
swPortTrunkCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortTrunkCtrlState.setStatus('mandatory')
swPortTrunkMemberTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 2), )
if mibBuilder.loadTexts: swPortTrunkMemberTable.setStatus('mandatory')
swPortTrunkMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 2, 1), ).setIndexNames((0, "ES1200-MIB", "swPortTrunkMemberIndex"), (0, "ES1200-MIB", "swPortTrunkMemberUnitIndex"), (0, "ES1200-MIB", "swPortTrunkMemberModuleIndex"), (0, "ES1200-MIB", "swPortTrunkMemberPortIndex"))
if mibBuilder.loadTexts: swPortTrunkMemberEntry.setStatus('mandatory')
swPortTrunkMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMemberIndex.setStatus('mandatory')
swPortTrunkMemberUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMemberUnitIndex.setStatus('mandatory')
swPortTrunkMemberModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMemberModuleIndex.setStatus('mandatory')
swPortTrunkMemberPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMemberPortIndex.setStatus('mandatory')
swVlanCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 1))
swMacBaseVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2))
swPortBaseVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3))
swVlanCtrlMode = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("mac-base", 3), ("ieee8021q", 4), ("port-base", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swVlanCtrlMode.setStatus('mandatory')
swVlanInfoStatus = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("mac-base", 3), ("ieee8021q", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVlanInfoStatus.setStatus('mandatory')
swVlanSnmpPortVlan = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 1, 3), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swVlanSnmpPortVlan.setStatus('mandatory')
swMacBaseVlanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 1))
swMacBaseVlanMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBaseVlanMaxNum.setStatus('mandatory')
swMacBaseVlanAddrMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBaseVlanAddrMaxNum.setStatus('mandatory')
swMacBaseVlanCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 2), )
if mibBuilder.loadTexts: swMacBaseVlanCtrlTable.setStatus('mandatory')
swMacBaseVlanCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 2, 1), ).setIndexNames((0, "ES1200-MIB", "swMacBaseVlanDesc"))
if mibBuilder.loadTexts: swMacBaseVlanCtrlEntry.setStatus('mandatory')
swMacBaseVlanDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBaseVlanDesc.setStatus('mandatory')
swMacBaseVlanMacMember = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBaseVlanMacMember.setStatus('mandatory')
swMacBaseVlanCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBaseVlanCtrlState.setStatus('mandatory')
swMacBaseVlanAddrTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 3), )
if mibBuilder.loadTexts: swMacBaseVlanAddrTable.setStatus('mandatory')
swMacBaseVlanAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 3, 1), ).setIndexNames((0, "ES1200-MIB", "swMacBaseVlanAddr"))
if mibBuilder.loadTexts: swMacBaseVlanAddrEntry.setStatus('mandatory')
swMacBaseVlanAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBaseVlanAddr.setStatus('mandatory')
swMacBaseVlanAddrVlanDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBaseVlanAddrVlanDesc.setStatus('mandatory')
swMacBaseVlanAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBaseVlanAddrState.setStatus('mandatory')
swMacBaseVlanAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("apply", 2), ("not-apply", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBaseVlanAddrStatus.setStatus('mandatory')
swPortBaseVlanTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortBaseVlanTotalNum.setStatus('mandatory')
swPortBaseVlanDefaultVlanTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 2), )
if mibBuilder.loadTexts: swPortBaseVlanDefaultVlanTable.setStatus('mandatory')
swPortBaseVlanDefaultVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 2, 1), ).setIndexNames((0, "ES1200-MIB", "swPortBaseVlanDefaultPvid"))
if mibBuilder.loadTexts: swPortBaseVlanDefaultVlanEntry.setStatus('mandatory')
swPortBaseVlanDefaultPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortBaseVlanDefaultPvid.setStatus('mandatory')
swPortBaseVlanDefaultDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortBaseVlanDefaultDesc.setStatus('mandatory')
swPortBaseVlanDefaultPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 2, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortBaseVlanDefaultPortList.setStatus('mandatory')
swPortBaseVlanDefaultPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortBaseVlanDefaultPortNumber.setStatus('mandatory')
swPortBaseVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 3), )
if mibBuilder.loadTexts: swPortBaseVlanConfigTable.setStatus('mandatory')
swPortBaseVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 3, 1), ).setIndexNames((0, "ES1200-MIB", "swPortBaseVlanConfigPvid"))
if mibBuilder.loadTexts: swPortBaseVlanConfigEntry.setStatus('mandatory')
swPortBaseVlanConfigPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortBaseVlanConfigPvid.setStatus('mandatory')
swPortBaseVlanConfigDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortBaseVlanConfigDesc.setStatus('mandatory')
swPortBaseVlanConfigPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 3, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortBaseVlanConfigPortList.setStatus('mandatory')
swPortBaseVlanConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortBaseVlanConfigPortNumber.setStatus('mandatory')
mibBuilder.exportSymbols("ES1200-MIB", swEventPortPartition=swEventPortPartition, es1200PortRegistration=es1200PortRegistration, swStructPowerUnitIndex=swStructPowerUnitIndex, swMacBaseVlanCtrlState=swMacBaseVlanCtrlState, dot1qStatic=dot1qStatic, swPortTrunkCtrlName=swPortTrunkCtrlName, es1200ModuleMainboardTx=es1200ModuleMainboardTx, swMacBaseVlanAddrStatus=swMacBaseVlanAddrStatus, swIGMPCtrl=swIGMPCtrl, es1200DevRegistration=es1200DevRegistration, dot1qTpFdbStatus=dot1qTpFdbStatus, swMacBaseVlanDesc=swMacBaseVlanDesc, VlanId=VlanId, swPortBaseVlanConfigDesc=swPortBaseVlanConfigDesc, swL2DevCtrlTableLockState=swL2DevCtrlTableLockState, es1200Port_1000_LX=es1200Port_1000_LX, swPortTrunkCtrlAnchorPort=swPortTrunkCtrlAnchorPort, swPortTrunkMemberEntry=swPortTrunkMemberEntry, dot1dTrafficClassesEnabled=dot1dTrafficClassesEnabled, swL2PortStFragments=swL2PortStFragments, dot1qVlanStaticName=dot1qVlanStaticName, Unsigned32=Unsigned32, dot1qBase=dot1qBase, dot1qTpGroupAddress=dot1qTpGroupAddress, PortList=PortList, swPortTrunk=swPortTrunk, fore=fore, swStructUnitType=swStructUnitType, dot1dPortPriorityEntry=dot1dPortPriorityEntry, dot1qVlanStaticEntry=dot1qVlanStaticEntry, swStructPowerIndex=swStructPowerIndex, swPortBaseVlanConfigPvid=swPortBaseVlanConfigPvid, swL2PortStJabber=swL2PortStJabber, dot1dDeviceCapabilities=dot1dDeviceCapabilities, swMacBaseVlanCtrlTable=swMacBaseVlanCtrlTable, TimeInterval=TimeInterval, swPortTrunkCtrlTable=swPortTrunkCtrlTable, swL2PortStUnitIndex=swL2PortStUnitIndex, swStructure=swStructure, swVlanCtrl=swVlanCtrl, swL2PortStByteTx=swL2PortStByteTx, swMacBaseVlanAddrEntry=swMacBaseVlanAddrEntry, swIGMPEntry=swIGMPEntry, swStructUnitLastChange=swStructUnitLastChange, dot1dPortGarpJoinTime=dot1dPortGarpJoinTime, dot1dPortCapabilitiesTable=dot1dPortCapabilitiesTable, swIGMPCtrlState=swIGMPCtrlState, swPortBaseVlanDefaultDesc=swPortBaseVlanDefaultDesc, swL2PortInfoTable=swL2PortInfoTable, swL2PortCtrlLinkStatusAlarmState=swL2PortCtrlLinkStatusAlarmState, dot1qVlanStaticUntaggedPorts=dot1qVlanStaticUntaggedPorts, swL2PortCtrlStpState=swL2PortCtrlStpState, edgecommon=edgecommon, es1200ModuleFxMTRJ=es1200ModuleFxMTRJ, swIGMPTable=swIGMPTable, swProperty=swProperty, swFdbFilterState=swFdbFilterState, dot1dPriority=dot1dPriority, swStructUnitIndex=swStructUnitIndex, dot1qVlanTimeMark=dot1qVlanTimeMark, swL2PortStLateCollision=swL2PortStLateCollision, swStructPowerEntry=swStructPowerEntry, es1210Port_100_MTRJ=es1210Port_100_MTRJ, swPortBaseVlanConfigPortList=swPortBaseVlanConfigPortList, dot1qPortGvrpFailedRegistrations=dot1qPortGvrpFailedRegistrations, EnabledStatus=EnabledStatus, swL2PortInfoDescr=swL2PortInfoDescr, swL2PortCtrlTable=swL2PortCtrlTable, swFdbStaticAddress=swFdbStaticAddress, dot1dPortCapabilitiesEntry=dot1dPortCapabilitiesEntry, swL2DevMgmt=swL2DevMgmt, es1210Slot1=es1210Slot1, es1210Slave2=es1210Slave2, swL2PortStUndersizeFrames=swL2PortStUndersizeFrames, es1210ModuleMainboardTx=es1210ModuleMainboardTx, swPortTrunkCtrlEntry=swPortTrunkCtrlEntry, swStructModuleVersion=swStructModuleVersion, swL2PortCtrlPriority=swL2PortCtrlPriority, swL2PortCtrlAdminState=swL2PortCtrlAdminState, es1200Slot3=es1200Slot3, swMacBaseVlanAddr=swMacBaseVlanAddr, swPortBaseVlanConfigEntry=swPortBaseVlanConfigEntry, swStructModuleOperStatus=swStructModuleOperStatus, dot1qVlanVersionNumber=dot1qVlanVersionNumber, es1210SlotRegistration=es1210SlotRegistration, swL2DevAlarm=swL2DevAlarm, es1210Fan=es1210Fan, dot1qTpGroupTable=dot1qTpGroupTable, dot1qTp=dot1qTp, swL2PortStFrames_512_1023_bytes=swL2PortStFrames_512_1023_bytes, es1200Slot1=es1200Slot1, es1210Slave3=es1210Slave3, dot1qStaticMulticastTable=dot1qStaticMulticastTable, dot1dPortGarpEntry=dot1dPortGarpEntry, swFDB=swFDB, swL2DevCtrlPartitionModeState=swL2DevCtrlPartitionModeState, swL2PortStEntry=swL2PortStEntry, swPortTrunkMemberPortIndex=swPortTrunkMemberPortIndex, es1210ModuleFxSC=es1210ModuleFxSC, swIGMPCtrlTimer=swIGMPCtrlTimer, dot1qMaxSupportedVlans=dot1qMaxSupportedVlans, es1200PowerSupply=es1200PowerSupply, dot1qGvrpStatus=dot1qGvrpStatus, swStructUnitEntry=swStructUnitEntry, VlanIndex=VlanIndex, dot1qTpFdbTable=dot1qTpFdbTable, swMacBaseVlanAddrVlanDesc=swMacBaseVlanAddrVlanDesc, es1210ModuleFxMTRJ=es1210ModuleFxMTRJ, swStructUnitLedInfo=swStructUnitLedInfo, es1200=es1200, es1210ModuleSIO=es1210ModuleSIO, swEventBcastFallingStorm=swEventBcastFallingStorm, swMacBaseVlanAddrMaxNum=swMacBaseVlanAddrMaxNum, fore_mgmt=fore_mgmt, dot1qVlanStaticRowState=dot1qVlanStaticRowState, swStructFanOperStatus=swStructFanOperStatus, swStructDevDescr=swStructDevDescr, dot1qVlan=dot1qVlan, swStructUnitMaxPortNum=swStructUnitMaxPortNum, es1200SensorRegistration=es1200SensorRegistration, dot1qVlanStaticEgressPorts=dot1qVlanStaticEgressPorts, dot1qVlanCurrentUntaggedPorts=dot1qVlanCurrentUntaggedPorts, dot1dPortGarpLeaveAllTime=dot1dPortGarpLeaveAllTime, swL2PortStIndex=swL2PortStIndex, dot1qStaticMulticastStatus=dot1qStaticMulticastStatus, swVlan=swVlan, swL2PortStCollision=swL2PortStCollision, systems=systems, dot1qStaticMulticastEntry=dot1qStaticMulticastEntry, swSniffCtrlTable=swSniffCtrlTable, swMacBaseVlanAddrState=swMacBaseVlanAddrState, swL2PortStFramesDroppedFrames=swL2PortStFramesDroppedFrames, swIGMPAdminState=swIGMPAdminState, dot1dPortNumTrafficClasses=dot1dPortNumTrafficClasses, swSniffCtrlEntry=swSniffCtrlEntry, swSniffTargetPort=swSniffTargetPort, swL2PortStTotalBytesRx=swL2PortStTotalBytesRx, swL2PortStMulticastFramesTx=swL2PortStMulticastFramesTx, swPortTrunkCtrlMasterPort=swPortTrunkCtrlMasterPort, swVlanSnmpPortVlan=swVlanSnmpPortVlan, swL2PortStBroadcastFramesTx=swL2PortStBroadcastFramesTx, swL2PortStBroadcastFramesRx=swL2PortStBroadcastFramesRx, swPortTrunkMemberUnitIndex=swPortTrunkMemberUnitIndex, swFdbStaticMemberEntry=swFdbStaticMemberEntry, dot1dGarp=dot1dGarp, swL2PortInfoNwayStatus=swL2PortInfoNwayStatus, swL2DevAlarmPartition=swL2DevAlarmPartition, golf=golf, dot1qPortGvrpLastPduOrigin=dot1qPortGvrpLastPduOrigin, swSniffSourcePort=swSniffSourcePort, es1200SlotRegistration=es1200SlotRegistration, swL2Mgmt=swL2Mgmt, swFdbStaticMemberModuleIndex=swFdbStaticMemberModuleIndex, swL2PortInfoIndex=swL2PortInfoIndex, swStructModuleUnitIndex=swStructModuleUnitIndex, dot1qStaticMulticastForbiddenEgressPorts=dot1qStaticMulticastForbiddenEgressPorts, dot1dPortGmrpEntry=dot1dPortGmrpEntry, dot1dGmrpStatus=dot1dGmrpStatus, es1210ModuleTxTwoPort=es1210ModuleTxTwoPort, endOfMIB=endOfMIB, swModule=swModule, dot1dPortGmrpFailedRegistrations=dot1dPortGmrpFailedRegistrations, swL2DevCtrlHOLState=swL2DevCtrlHOLState, swL2PortStFrames_64_bytes=swL2PortStFrames_64_bytes, swStructDevType=swStructDevType, es1200UnitRegistration=es1200UnitRegistration, es1200Port_10_100TX=es1200Port_10_100TX, dot1dPortCapabilities=dot1dPortCapabilities, swStructUnitOperStatus=swStructUnitOperStatus, swPortTrunkMemberIndex=swPortTrunkMemberIndex, swIGMPInfoVid=swIGMPInfoVid, es1210PowerSupply=es1210PowerSupply, swL2PortCtrlEntry=swL2PortCtrlEntry, swL2PortInfoUnitIndex=swL2PortInfoUnitIndex, es1200Port_1000_SX=es1200Port_1000_SX, es1200Port_100_SC=es1200Port_100_SC, swL2DevCtrlUploadImage=swL2DevCtrlUploadImage, dot1qTpFdbPort=dot1qTpFdbPort, swFdbStaticMemberUnitIndex=swFdbStaticMemberUnitIndex, es1200PowerSupplyRegistration=es1200PowerSupplyRegistration, swMacBaseVlanInfo=swMacBaseVlanInfo, swStructModuleEntry=swStructModuleEntry, qBridgeMIBObjects=qBridgeMIBObjects, swL2PortStTotalFramesRx=swL2PortStTotalFramesRx, swPortTrunkMemberModuleIndex=swPortTrunkMemberModuleIndex, swL2PortStFrameTx=swL2PortStFrameTx, ethernet=ethernet, swL2PortStFrameRx=swL2PortStFrameRx, swFdbStaticVid=swFdbStaticVid, swStructModuleLastChange=swStructModuleLastChange, swL2DevCtrlAddrLookupModesAndHitRate=swL2DevCtrlAddrLookupModesAndHitRate, swStructModuleTable=swStructModuleTable, dot1qVlanNumDeletes=dot1qVlanNumDeletes, swFdbStaticMemberAddress=swFdbStaticMemberAddress, swPortSniff=swPortSniff, swL2PortStFrames_1024_1536_bytes=swL2PortStFrames_1024_1536_bytes, es1200ModuleFxSC=es1200ModuleFxSC, swFdbStaticStatus=swFdbStaticStatus, swL2PortCtrlLockState=swL2PortCtrlLockState, es1200ModuleSXGIGAOnePort=es1200ModuleSXGIGAOnePort, dot1qPortGvrpStatus=dot1qPortGvrpStatus, es1200ModuleTXGIGAOnePort=es1200ModuleTXGIGAOnePort, swPortBaseVlanDefaultVlanTable=swPortBaseVlanDefaultVlanTable, swIGMPCtrlTable=swIGMPCtrlTable, es1210PortRegistration=es1210PortRegistration, swStructUnitMaxModuleNum=swStructUnitMaxModuleNum, es1200ModuleLXGIGATwoPort=es1200ModuleLXGIGATwoPort, dot1dPortGmrpTable=dot1dPortGmrpTable, dot1dPortGmrpLastPduOrigin=dot1dPortGmrpLastPduOrigin, es1200Port_100_MTRJ=es1200Port_100_MTRJ, es1210ModuleNone=es1210ModuleNone, swL2PortStFrames_65_127_bytes=swL2PortStFrames_65_127_bytes, swL2PortCtrlBcastRisingAct=swL2PortCtrlBcastRisingAct, dot1qVlanCurrentEgressPorts=dot1qVlanCurrentEgressPorts, pBridgeMIBObjects=pBridgeMIBObjects, swL2PortStFrames_256_511_bytes=swL2PortStFrames_256_511_bytes, dot1qVlanIndex=dot1qVlanIndex, swStructPowerOperStatus=swStructPowerOperStatus, swIGMP=swIGMP, swL2PortCtrlModuleIndex=swL2PortCtrlModuleIndex, swPortBaseVlanConfigTable=swPortBaseVlanConfigTable, swStructUnitDescr=swStructUnitDescr, swStructUnitNumOfPortInUse=swStructUnitNumOfPortInUse, dot1qStaticMulticastStaticEgressPorts=dot1qStaticMulticastStaticEgressPorts, swEventBcastRisingStorm=swEventBcastRisingStorm, es1200Master=es1200Master, es1200ModuleSXGIGATwoPort=es1200ModuleSXGIGATwoPort, swPortTrunkCtrlState=swPortTrunkCtrlState, es1200ModuleLXGIGAOnePort=es1200ModuleLXGIGAOnePort, swL2PortInfoType=swL2PortInfoType, swL2PortInfoModuleIndex=swL2PortInfoModuleIndex, swL2DevCtrlStpState=swL2DevCtrlStpState, swL2PortCtrlNwayState=swL2PortCtrlNwayState, swStructModuleMaxPortNum=swStructModuleMaxPortNum, swStructModuleDescr=swStructModuleDescr, swFdbStaticMemberTable=swFdbStaticMemberTable, swPortBaseVlanConfigPortNumber=swPortBaseVlanConfigPortNumber, fore_products=fore_products, swMacBaseVlanCtrlEntry=swMacBaseVlanCtrlEntry, golfproducts=golfproducts, dot1dPortPriorityTable=dot1dPortPriorityTable, swMacBaseVlan=swMacBaseVlan, dot1dPortGmrpStatus=dot1dPortGmrpStatus, swL2DevAlarmTopChange=swL2DevAlarmTopChange, es1210ModuleRegistration=es1210ModuleRegistration, swIGMPCtrlVid=swIGMPCtrlVid, swPortBaseVlanTotalNum=swPortBaseVlanTotalNum, es1200ModuleRegistration=es1200ModuleRegistration, swIGMPVid=swIGMPVid, swStructFanIndex=swStructFanIndex, swL2DevAlarmNewRoot=swL2DevAlarmNewRoot, dot1qStaticMulticastReceivePort=dot1qStaticMulticastReceivePort, swIGMPInfoIndex=swIGMPInfoIndex, es1200Slot2=es1200Slot2)
mibBuilder.exportSymbols("ES1200-MIB", dot1qVlanStaticTable=dot1qVlanStaticTable, swL2PortStCRCError=swL2PortStCRCError, dot1qFdbEntry=dot1qFdbEntry, dot1qFdbId=dot1qFdbId, swL2DevAlarmLinkChange=swL2DevAlarmLinkChange, edge=edge, TruthValue=TruthValue, es1210Port_10_100TX=es1210Port_10_100TX, dot1qVlanCreationTime=dot1qVlanCreationTime, swFdbStaticEntry=swFdbStaticEntry, swL2PortStByteRx=swL2PortStByteRx, dot1qPortIngressFiltering=dot1qPortIngressFiltering, swStructInfo=swStructInfo, golfcommon=golfcommon, es1200BackplaneRegistration=es1200BackplaneRegistration, swStructUnitTable=swStructUnitTable, swL2PortCtrlHOLState=swL2PortCtrlHOLState, swFdbStaticState=swFdbStaticState, swL2PortStModuleIndex=swL2PortStModuleIndex, dot1dGmrp=dot1dGmrp, swStructFanUnitIndex=swStructFanUnitIndex, swFdbStaticTable=swFdbStaticTable, swIGMPGroupIpAddr=swIGMPGroupIpAddr, dot1dPortGarpTable=dot1dPortGarpTable, es1210Slot2=es1210Slot2, swL2PortCtrlBcastFallingAct=swL2PortCtrlBcastFallingAct, es1200FanRegistration=es1200FanRegistration, swStructModuleSubMduIndex=swStructModuleSubMduIndex, dot1qPvid=dot1qPvid, es1200Fan=es1200Fan, swVlanCtrlMode=swVlanCtrlMode, fore_es1200Prod=fore_es1200Prod, swStructModuleType=swStructModuleType, dot1qVlanStatus=dot1qVlanStatus, swPortTrunkMemberTable=swPortTrunkMemberTable, swL2PortStFrames_128_255_bytes=swL2PortStFrames_128_255_bytes, swIGMPGroupMacAddr=swIGMPGroupMacAddr, swIGMPPortMap=swIGMPPortMap, swStructFanEntry=swStructFanEntry, swFdbStaticJoinIGMPSnooping=swFdbStaticJoinIGMPSnooping, swL2PortMgmt=swL2PortMgmt, swPortBaseVlanDefaultPortNumber=swPortBaseVlanDefaultPortNumber, dot1dPortGarpLeaveTime=dot1dPortGarpLeaveTime, es1200ModuleNone=es1200ModuleNone, es1210PowerSupplyRegistration=es1210PowerSupplyRegistration, swL2PortCtrlUnitIndex=swL2PortCtrlUnitIndex, swL2PortStOversizeFrames=swL2PortStOversizeFrames, swL2PortCtrlFlowCtrlState=swL2PortCtrlFlowCtrlState, dot1qTpFdbAddress=dot1qTpFdbAddress, swIGMPInfoTxQueryCount=swIGMPInfoTxQueryCount, dot1qTpGroupLearnt=dot1qTpGroupLearnt, swL2PortCtrlIndex=swL2PortCtrlIndex, swVlanInfoStatus=swVlanInfoStatus, swEventlinkChangeEvent=swEventlinkChangeEvent, es1200Device=es1200Device, swSniffIndex=swSniffIndex, es1200Port_1000_TX=es1200Port_1000_TX, swL2PortStMulticastFramesRx=swL2PortStMulticastFramesRx, dot1qTpFdbEntry=dot1qTpFdbEntry, swL2DevCtrlUploadImageFileName=swL2DevCtrlUploadImageFileName, swMacBaseVlanAddrTable=swMacBaseVlanAddrTable, swIGMPInfoTable=swIGMPInfoTable, swL2PortInfoLinkStatus=swL2PortInfoLinkStatus, es1210FanRegistration=es1210FanRegistration, swFdbFilterEntry=swFdbFilterEntry, swIGMPCtrlIndex=swIGMPCtrlIndex, swStructPortEncodingFactor=swStructPortEncodingFactor, swIGMPTimeout=swIGMPTimeout, swMacBaseVlanMaxNum=swMacBaseVlanMaxNum, dot1qVlanFdbId=dot1qVlanFdbId, es1200ModuleTxTwoPort=es1200ModuleTxTwoPort, swFdbFilterVid=swFdbFilterVid, swPortTrunkCtrlIndex=swPortTrunkCtrlIndex, dot1qNumVlans=dot1qNumVlans, dot1qFdbTable=dot1qFdbTable, swIGMPInfoQueryCount=swIGMPInfoQueryCount, swPortBaseVlanDefaultPortList=swPortBaseVlanDefaultPortList, dot1qVlanCurrentTable=dot1qVlanCurrentTable, swIGMPCtrlEntry=swIGMPCtrlEntry, swPortBaseVlan=swPortBaseVlan, es1200ModuleTXGIGATwoPort=es1200ModuleTXGIGATwoPort, swFdbFilterTable=swFdbFilterTable, swFdbStaticMemberVid=swFdbStaticMemberVid, swFdbStaticPortMap=swFdbStaticPortMap, swStructModuleIndex=swStructModuleIndex, swFdbStaticMemberPortIndex=swFdbStaticMemberPortIndex, es1200ModuleSIO=es1200ModuleSIO, swPortTrunkCtrlMember=swPortTrunkCtrlMember, swMacBaseVlanMacMember=swMacBaseVlanMacMember, dot1qPortVlanTable=dot1qPortVlanTable, swL2PortInfoEntry=swL2PortInfoEntry, dot1qPortVlanEntry=dot1qPortVlanEntry, swPortBaseVlanDefaultVlanEntry=swPortBaseVlanDefaultVlanEntry, dot1qMaxVlanId=dot1qMaxVlanId, dot1qStaticMulticastAddress=dot1qStaticMulticastAddress, TimeFilter=TimeFilter, es1210Slave1=es1210Slave1, swStructPowerTable=swStructPowerTable, swL2DevCtrlClearAddressTable=swL2DevCtrlClearAddressTable, swL2PortStTable=swL2PortStTable, swIGMPInfoEntry=swIGMPInfoEntry, dot1qTpGroupEgressPorts=dot1qTpGroupEgressPorts, es1210Port_100_SC=es1210Port_100_SC, swIGMPIpGroupReportCount=swIGMPIpGroupReportCount, swSniffState=swSniffState, es1200Mgmt=es1200Mgmt, swPortBaseVlanDefaultPvid=swPortBaseVlanDefaultPvid, dot1qVlanCurrentEntry=dot1qVlanCurrentEntry, dot1qTpGroupEntry=dot1qTpGroupEntry, swStructFanTable=swStructFanTable, dot1qVlanForbiddenEgressPorts=dot1qVlanForbiddenEgressPorts, swStructModuleEncodingOffset=swStructModuleEncodingOffset, swL2PortCtrlBackPressState=swL2PortCtrlBackPressState, dot1qFdbDynamicCount=dot1qFdbDynamicCount, dot1dExtBase=dot1dExtBase, swFdbFilterAddress=swFdbFilterAddress, swL2DevCtrl=swL2DevCtrl)
