#
# PySNMP MIB module OMNI-gx2drr4x-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2drr4x-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:24:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
gx2Drr4x, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Drr4x")
trapNetworkElemAlarmStatus, trapChangedObjectId, trapNETrapLastTrapTimeStamp, trapNetworkElemOperState, trapPerceivedSeverity, trapText, trapNetworkElemAvailStatus, trapNetworkElemSerialNum, trapIdentifier, trapNetworkElemAdminState, trapNetworkElemModelNumber, trapChangedValueDisplayString, trapChangedValueInteger = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus", "trapChangedObjectId", "trapNETrapLastTrapTimeStamp", "trapNetworkElemOperState", "trapPerceivedSeverity", "trapText", "trapNetworkElemAvailStatus", "trapNetworkElemSerialNum", "trapIdentifier", "trapNetworkElemAdminState", "trapNetworkElemModelNumber", "trapChangedValueDisplayString", "trapChangedValueInteger")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter32, Gauge32, IpAddress, iso, Counter64, Unsigned32, Bits, NotificationType, MibIdentifier, TimeTicks, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "Gauge32", "IpAddress", "iso", "Counter64", "Unsigned32", "Bits", "NotificationType", "MibIdentifier", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Float(Counter32):
    pass

gx2drr4xDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 1))
gx2drr4xAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2), )
if mibBuilder.loadTexts: gx2drr4xAnalogTable.setStatus('mandatory')
gx2drr4xAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1), ).setIndexNames((0, "OMNI-gx2drr4x-MIB", "gx2drr4xAnalogTableIndex"))
if mibBuilder.loadTexts: gx2drr4xAnalogEntry.setStatus('mandatory')
gx2drr4xDigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3), )
if mibBuilder.loadTexts: gx2drr4xDigitalTable.setStatus('mandatory')
gx2drr4xDigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2), ).setIndexNames((0, "OMNI-gx2drr4x-MIB", "gx2drr4xDigitalTableIndex"))
if mibBuilder.loadTexts: gx2drr4xDigitalEntry.setStatus('mandatory')
gx2drr4xStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4), )
if mibBuilder.loadTexts: gx2drr4xStatusTable.setStatus('mandatory')
gx2drr4xStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3), ).setIndexNames((0, "OMNI-gx2drr4x-MIB", "gx2drr4xStatusTableIndex"))
if mibBuilder.loadTexts: gx2drr4xStatusEntry.setStatus('mandatory')
gx2drr4xFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5), )
if mibBuilder.loadTexts: gx2drr4xFactoryTable.setStatus('mandatory')
gx2drr4xFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4), ).setIndexNames((0, "OMNI-gx2drr4x-MIB", "gx2drr4xFactoryTableIndex"))
if mibBuilder.loadTexts: gx2drr4xFactoryEntry.setStatus('mandatory')
gx2drr4xAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2drr4xAnalogTableIndex.setStatus('mandatory')
drr4xlabelRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelRFAAttenuation.setStatus('optional')
drr4xuomRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xuomRFAAttenuation.setStatus('optional')
drr4xmajorHighRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorHighRFAAttenuation.setStatus('obsolete')
drr4xmajorLowRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorLowRFAAttenuation.setStatus('obsolete')
drr4xminorHighRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorHighRFAAttenuation.setStatus('obsolete')
drr4xminorLowRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorLowRFAAttenuation.setStatus('obsolete')
drr4xcurrentValueRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 8), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drr4xcurrentValueRFAAttenuation.setStatus('mandatory')
drr4xstateFlagRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateFlagRFAAttenuation.setStatus('mandatory')
drr4xminValueRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminValueRFAAttenuation.setStatus('mandatory')
drr4xmaxValueRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmaxValueRFAAttenuation.setStatus('mandatory')
drr4xalarmStateRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xalarmStateRFAAttenuation.setStatus('mandatory')
drr4xlabelRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelRFBAttenuation.setStatus('optional')
drr4xuomRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xuomRFBAttenuation.setStatus('optional')
drr4xmajorHighRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorHighRFBAttenuation.setStatus('obsolete')
drr4xmajorLowRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorLowRFBAttenuation.setStatus('obsolete')
drr4xminorHighRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorHighRFBAttenuation.setStatus('obsolete')
drr4xminorLowRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorLowRFBAttenuation.setStatus('obsolete')
drr4xcurrentValueRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 19), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drr4xcurrentValueRFBAttenuation.setStatus('mandatory')
drr4xstateFlagRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateFlagRFBAttenuation.setStatus('mandatory')
drr4xminValueRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminValueRFBAttenuation.setStatus('mandatory')
drr4xmaxValueRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmaxValueRFBAttenuation.setStatus('mandatory')
drr4xalarmStateRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xalarmStateRFBAttenuation.setStatus('mandatory')
drr4xlabelRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelRFCAttenuation.setStatus('optional')
drr4xuomRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xuomRFCAttenuation.setStatus('optional')
drr4xmajorHighRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorHighRFCAttenuation.setStatus('obsolete')
drr4xmajorLowRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorLowRFCAttenuation.setStatus('obsolete')
drr4xminorHighRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorHighRFCAttenuation.setStatus('obsolete')
drr4xminorLowRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorLowRFCAttenuation.setStatus('obsolete')
drr4xcurrentValueRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 30), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drr4xcurrentValueRFCAttenuation.setStatus('mandatory')
drr4xstateFlagRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateFlagRFCAttenuation.setStatus('mandatory')
drr4xminValueRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminValueRFCAttenuation.setStatus('mandatory')
drr4xmaxValueRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmaxValueRFCAttenuation.setStatus('mandatory')
drr4xalarmStateRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xalarmStateRFCAttenuation.setStatus('mandatory')
drr4xlabelRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelRFDAttenuation.setStatus('optional')
drr4xuomRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xuomRFDAttenuation.setStatus('optional')
drr4xmajorHighRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorHighRFDAttenuation.setStatus('obsolete')
drr4xmajorLowRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorLowRFDAttenuation.setStatus('obsolete')
drr4xminorHighRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorHighRFDAttenuation.setStatus('obsolete')
drr4xminorLowRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorLowRFDAttenuation.setStatus('obsolete')
drr4xcurrentValueRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 41), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drr4xcurrentValueRFDAttenuation.setStatus('mandatory')
drr4xstateFlagRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateFlagRFDAttenuation.setStatus('mandatory')
drr4xminValueRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminValueRFDAttenuation.setStatus('mandatory')
drr4xmaxValueRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmaxValueRFDAttenuation.setStatus('mandatory')
drr4xalarmStateRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xalarmStateRFDAttenuation.setStatus('mandatory')
drr4xlabelTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelTrippointLevel.setStatus('optional')
drr4xuomTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xuomTrippointLevel.setStatus('optional')
drr4xmajorHighTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorHighTrippointLevel.setStatus('obsolete')
drr4xmajorLowTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorLowTrippointLevel.setStatus('obsolete')
drr4xminorHighTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorHighTrippointLevel.setStatus('obsolete')
drr4xminorLowTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorLowTrippointLevel.setStatus('obsolete')
drr4xcurrentValueTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 52), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drr4xcurrentValueTrippointLevel.setStatus('mandatory')
drr4xstateFlagTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateFlagTrippointLevel.setStatus('mandatory')
drr4xminValueTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminValueTrippointLevel.setStatus('mandatory')
drr4xmaxValueTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmaxValueTrippointLevel.setStatus('mandatory')
drr4xalarmStateTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xalarmStateTrippointLevel.setStatus('mandatory')
drr4xlabelOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelOptCurrent.setStatus('optional')
drr4xuomOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xuomOptCurrent.setStatus('optional')
drr4xmajorHighOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorHighOptCurrent.setStatus('mandatory')
drr4xmajorLowOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorLowOptCurrent.setStatus('mandatory')
drr4xminorHighOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorHighOptCurrent.setStatus('obsolete')
drr4xminorLowOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorLowOptCurrent.setStatus('obsolete')
drr4xcurrentValueOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xcurrentValueOptCurrent.setStatus('mandatory')
drr4xstateFlagOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateFlagOptCurrent.setStatus('mandatory')
drr4xminValueOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminValueOptCurrent.setStatus('mandatory')
drr4xmaxValueOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmaxValueOptCurrent.setStatus('mandatory')
drr4xalarmStateOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xalarmStateOptCurrent.setStatus('mandatory')
drr4xlabel12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabel12VCurrent.setStatus('optional')
drr4xuom12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xuom12VCurrent.setStatus('optional')
drr4xmajorHigh12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorHigh12VCurrent.setStatus('mandatory')
drr4xmajorLow12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorLow12VCurrent.setStatus('mandatory')
drr4xminorHigh12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorHigh12VCurrent.setStatus('mandatory')
drr4xminorLow12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorLow12VCurrent.setStatus('mandatory')
drr4xcurrentValue12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xcurrentValue12VCurrent.setStatus('mandatory')
drr4xstateFlag12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateFlag12VCurrent.setStatus('mandatory')
drr4xminValue12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminValue12VCurrent.setStatus('mandatory')
drr4xmaxValue12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmaxValue12VCurrent.setStatus('mandatory')
drr4xalarmState12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xalarmState12VCurrent.setStatus('mandatory')
drr4xlabelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelModTemp.setStatus('optional')
drr4xuomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xuomModTemp.setStatus('optional')
drr4xmajorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 81), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorHighModTemp.setStatus('mandatory')
drr4xmajorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 82), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorLowModTemp.setStatus('mandatory')
drr4xminorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 83), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorHighModTemp.setStatus('mandatory')
drr4xminorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 84), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorLowModTemp.setStatus('mandatory')
drr4xcurrentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 85), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xcurrentValueModTemp.setStatus('mandatory')
drr4xstateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateFlagModTemp.setStatus('mandatory')
drr4xminValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 87), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminValueModTemp.setStatus('mandatory')
drr4xmaxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 88), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmaxValueModTemp.setStatus('mandatory')
drr4xalarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xalarmStateModTemp.setStatus('mandatory')
drr4xlabelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelFanCurrent.setStatus('optional')
drr4xuomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xuomFanCurrent.setStatus('optional')
drr4xmajorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 92), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorHighFanCurrent.setStatus('mandatory')
drr4xmajorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 93), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorLowFanCurrent.setStatus('mandatory')
drr4xminorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 94), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorHighFanCurrent.setStatus('obsolete')
drr4xminorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 95), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorLowFanCurrent.setStatus('obsolete')
drr4xcurrentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 96), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xcurrentValueFanCurrent.setStatus('mandatory')
drr4xstateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateFlagFanCurrent.setStatus('mandatory')
drr4xminValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 98), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminValueFanCurrent.setStatus('mandatory')
drr4xmaxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 99), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmaxValueFanCurrent.setStatus('mandatory')
drr4xalarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xalarmStateFanCurrent.setStatus('mandatory')
gx2drr4xDigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2drr4xDigitalTableIndex.setStatus('mandatory')
drr4xlabelTrippointMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelTrippointMode.setStatus('optional')
drr4xenumTrippointMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xenumTrippointMode.setStatus('optional')
drr4xvalueTrippointMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarmOnly", 2), ("alarm-and-Switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drr4xvalueTrippointMode.setStatus('mandatory')
drr4xstateflagTrippointMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagTrippointMode.setStatus('mandatory')
drr4xlabelFactoryDefaultReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelFactoryDefaultReset.setStatus('optional')
drr4xenumFactoryDefaultReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xenumFactoryDefaultReset.setStatus('optional')
drr4xvalueFactoryDefaultReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drr4xvalueFactoryDefaultReset.setStatus('mandatory')
drr4xstateflagFactoryDefaultReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagFactoryDefaultReset.setStatus('mandatory')
gx2drr4xStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2drr4xStatusTableIndex.setStatus('mandatory')
drr4xlabelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelBoot.setStatus('optional')
drr4xvalueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xvalueBoot.setStatus('mandatory')
drr4xstateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagBoot.setStatus('mandatory')
drr4xlabelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelFlash.setStatus('optional')
drr4xvalueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xvalueFlash.setStatus('mandatory')
drr4xstateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagFlash.setStatus('mandatory')
drr4xlabelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelFactoryDataCRC.setStatus('optional')
drr4xvalueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xvalueFactoryDataCRC.setStatus('mandatory')
drr4xstateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagFactoryDataCRC.setStatus('mandatory')
drr4xlabelAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelAlarmDataCrc.setStatus('optional')
drr4xvalueAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xvalueAlarmDataCrc.setStatus('mandatory')
drr4xstateflagAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagAlarmDataCrc.setStatus('mandatory')
drr4xlabelCalibrationDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelCalibrationDataCrc.setStatus('optional')
drr4xvalueCalibrationDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xvalueCalibrationDataCrc.setStatus('mandatory')
drr4xstateflagCalibrationDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagCalibrationDataCrc.setStatus('mandatory')
drr4xlabelHardwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelHardwareStatus.setStatus('optional')
drr4xvalueHardwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xvalueHardwareStatus.setStatus('mandatory')
drr4xstateflagHardwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagHardwareStatus.setStatus('mandatory')
drr4xlabelOpticTripPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelOpticTripPointStatus.setStatus('optional')
drr4xvalueOpticTripPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xvalueOpticTripPointStatus.setStatus('mandatory')
drr4xstateflagOpticTripPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagOpticTripPointStatus.setStatus('mandatory')
drr4xlabelLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelLinkStatus.setStatus('optional')
drr4xvalueLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xvalueLinkStatus.setStatus('mandatory')
drr4xstateflagLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagLinkStatus.setStatus('mandatory')
gx2drr4xFactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2drr4xFactoryTableIndex.setStatus('mandatory')
drr4xbootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xbootControlByte.setStatus('mandatory')
drr4xbootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xbootStatusByte.setStatus('mandatory')
drr4xbank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xbank1CRC.setStatus('mandatory')
drr4xbank2CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xbank2CRC.setStatus('mandatory')
drr4xprgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xprgEEPROMByte.setStatus('mandatory')
drr4xfactoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xfactoryCRC.setStatus('mandatory')
drr4xcalculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("alarm", 2), ("calibration", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xcalculateCRC.setStatus('mandatory')
drr4xhourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xhourMeter.setStatus('mandatory')
drr4xflashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xflashPrgCntA.setStatus('mandatory')
drr4xflashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xflashPrgCntB.setStatus('mandatory')
drr4xflashBankARev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xflashBankARev.setStatus('mandatory')
drr4xflashBankBRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xflashBankBRev.setStatus('mandatory')
drr4xSubAgentRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xSubAgentRev.setStatus('mandatory')
trapdrrConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdrrConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdrr12VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdrrModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdrrFanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdrrFlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdrrBankBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdrrAlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdrrHardwareErrAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdrrOpticalSignalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdrrFactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdrrResetFactoryDefaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdrrTripPointAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdrrLinkAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapdrrCalibrationDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2drr4x-MIB", drr4xminorLowRFCAttenuation=drr4xminorLowRFCAttenuation, trapdrrConfigChangeInteger=trapdrrConfigChangeInteger, drr4xstateFlagFanCurrent=drr4xstateFlagFanCurrent, drr4xlabelModTemp=drr4xlabelModTemp, drr4xbootStatusByte=drr4xbootStatusByte, drr4xminorHighRFBAttenuation=drr4xminorHighRFBAttenuation, drr4xstateflagBoot=drr4xstateflagBoot, drr4xuomOptCurrent=drr4xuomOptCurrent, drr4xlabelHardwareStatus=drr4xlabelHardwareStatus, trapdrrModuleTempAlarm=trapdrrModuleTempAlarm, drr4xstateflagTrippointMode=drr4xstateflagTrippointMode, drr4xmajorHighTrippointLevel=drr4xmajorHighTrippointLevel, drr4xbank1CRC=drr4xbank1CRC, drr4xstateflagOpticTripPointStatus=drr4xstateflagOpticTripPointStatus, drr4xstateflagLinkStatus=drr4xstateflagLinkStatus, drr4xvalueFactoryDefaultReset=drr4xvalueFactoryDefaultReset, drr4xlabelFactoryDataCRC=drr4xlabelFactoryDataCRC, drr4xcalculateCRC=drr4xcalculateCRC, drr4xstateFlagRFCAttenuation=drr4xstateFlagRFCAttenuation, drr4xminorLowRFDAttenuation=drr4xminorLowRFDAttenuation, drr4xmajorHighFanCurrent=drr4xmajorHighFanCurrent, drr4xalarmStateRFAAttenuation=drr4xalarmStateRFAAttenuation, drr4xuomRFAAttenuation=drr4xuomRFAAttenuation, drr4xmaxValueModTemp=drr4xmaxValueModTemp, drr4xflashPrgCntB=drr4xflashPrgCntB, drr4xminorLow12VCurrent=drr4xminorLow12VCurrent, drr4xmajorHighModTemp=drr4xmajorHighModTemp, drr4xmaxValueFanCurrent=drr4xmaxValueFanCurrent, drr4xlabelTrippointMode=drr4xlabelTrippointMode, drr4xalarmStateModTemp=drr4xalarmStateModTemp, drr4xalarmStateOptCurrent=drr4xalarmStateOptCurrent, drr4xlabelOpticTripPointStatus=drr4xlabelOpticTripPointStatus, drr4xalarmStateTrippointLevel=drr4xalarmStateTrippointLevel, trapdrr12VCurrentAlarm=trapdrr12VCurrentAlarm, drr4xmajorHigh12VCurrent=drr4xmajorHigh12VCurrent, gx2drr4xStatusTableIndex=gx2drr4xStatusTableIndex, drr4xminValueOptCurrent=drr4xminValueOptCurrent, drr4xminorLowRFBAttenuation=drr4xminorLowRFBAttenuation, drr4xlabelLinkStatus=drr4xlabelLinkStatus, drr4xminorLowRFAAttenuation=drr4xminorLowRFAAttenuation, gx2drr4xAnalogEntry=gx2drr4xAnalogEntry, drr4xlabelBoot=drr4xlabelBoot, drr4xcurrentValueRFCAttenuation=drr4xcurrentValueRFCAttenuation, drr4xalarmStateRFBAttenuation=drr4xalarmStateRFBAttenuation, drr4xminorHighTrippointLevel=drr4xminorHighTrippointLevel, drr4xcurrentValueOptCurrent=drr4xcurrentValueOptCurrent, drr4xminValueRFDAttenuation=drr4xminValueRFDAttenuation, drr4xlabelOptCurrent=drr4xlabelOptCurrent, drr4xminorLowOptCurrent=drr4xminorLowOptCurrent, drr4xuomModTemp=drr4xuomModTemp, drr4xuomRFBAttenuation=drr4xuomRFBAttenuation, drr4xstateFlagRFDAttenuation=drr4xstateFlagRFDAttenuation, drr4xfactoryCRC=drr4xfactoryCRC, drr4xprgEEPROMByte=drr4xprgEEPROMByte, drr4xvalueCalibrationDataCrc=drr4xvalueCalibrationDataCrc, gx2drr4xFactoryTableIndex=gx2drr4xFactoryTableIndex, drr4xminorHighModTemp=drr4xminorHighModTemp, drr4xlabel12VCurrent=drr4xlabel12VCurrent, gx2drr4xAnalogTable=gx2drr4xAnalogTable, gx2drr4xAnalogTableIndex=gx2drr4xAnalogTableIndex, drr4xlabelCalibrationDataCrc=drr4xlabelCalibrationDataCrc, drr4xminorLowTrippointLevel=drr4xminorLowTrippointLevel, trapdrrFactoryDataCRCAlarm=trapdrrFactoryDataCRCAlarm, drr4xminorHighRFAAttenuation=drr4xminorHighRFAAttenuation, drr4xstateflagFactoryDataCRC=drr4xstateflagFactoryDataCRC, drr4xlabelFlash=drr4xlabelFlash, drr4xvalueLinkStatus=drr4xvalueLinkStatus, drr4xlabelRFAAttenuation=drr4xlabelRFAAttenuation, drr4xcurrentValueRFAAttenuation=drr4xcurrentValueRFAAttenuation, drr4xvalueTrippointMode=drr4xvalueTrippointMode, trapdrrOpticalSignalAlarm=trapdrrOpticalSignalAlarm, trapdrrTripPointAlarm=trapdrrTripPointAlarm, drr4xlabelFanCurrent=drr4xlabelFanCurrent, drr4xminorLowModTemp=drr4xminorLowModTemp, drr4xmajorHighRFAAttenuation=drr4xmajorHighRFAAttenuation, drr4xmajorLow12VCurrent=drr4xmajorLow12VCurrent, drr4xflashPrgCntA=drr4xflashPrgCntA, drr4xmajorHighRFBAttenuation=drr4xmajorHighRFBAttenuation, gx2drr4xDescriptor=gx2drr4xDescriptor, drr4xmajorLowRFAAttenuation=drr4xmajorLowRFAAttenuation, drr4xflashBankARev=drr4xflashBankARev, drr4xlabelRFDAttenuation=drr4xlabelRFDAttenuation, drr4xuomRFDAttenuation=drr4xuomRFDAttenuation, drr4xstateflagFlash=drr4xstateflagFlash, drr4xminorHighFanCurrent=drr4xminorHighFanCurrent, drr4xvalueHardwareStatus=drr4xvalueHardwareStatus, drr4xstateflagAlarmDataCrc=drr4xstateflagAlarmDataCrc, drr4xcurrentValueRFDAttenuation=drr4xcurrentValueRFDAttenuation, drr4xlabelFactoryDefaultReset=drr4xlabelFactoryDefaultReset, trapdrrCalibrationDataCRCAlarm=trapdrrCalibrationDataCRCAlarm, drr4xlabelTrippointLevel=drr4xlabelTrippointLevel, drr4xlabelRFCAttenuation=drr4xlabelRFCAttenuation, drr4xstateFlagOptCurrent=drr4xstateFlagOptCurrent, drr4xstateFlagRFAAttenuation=drr4xstateFlagRFAAttenuation, trapdrrFlashAlarm=trapdrrFlashAlarm, drr4xmajorLowRFDAttenuation=drr4xmajorLowRFDAttenuation, drr4xcurrentValueTrippointLevel=drr4xcurrentValueTrippointLevel, trapdrrAlarmDataCRCAlarm=trapdrrAlarmDataCRCAlarm, drr4xminorHigh12VCurrent=drr4xminorHigh12VCurrent, drr4xmajorLowOptCurrent=drr4xmajorLowOptCurrent, drr4xmajorLowModTemp=drr4xmajorLowModTemp, Float=Float, drr4xminValueModTemp=drr4xminValueModTemp, drr4xuomRFCAttenuation=drr4xuomRFCAttenuation, drr4xcurrentValueFanCurrent=drr4xcurrentValueFanCurrent, drr4xmajorLowRFCAttenuation=drr4xmajorLowRFCAttenuation, drr4xminValueFanCurrent=drr4xminValueFanCurrent, drr4xlabelRFBAttenuation=drr4xlabelRFBAttenuation, drr4xmaxValueRFDAttenuation=drr4xmaxValueRFDAttenuation, drr4xminValue12VCurrent=drr4xminValue12VCurrent, drr4xstateflagCalibrationDataCrc=drr4xstateflagCalibrationDataCrc, drr4xminValueRFBAttenuation=drr4xminValueRFBAttenuation, trapdrrHardwareErrAlarm=trapdrrHardwareErrAlarm, drr4xmajorLowFanCurrent=drr4xmajorLowFanCurrent, drr4xmaxValue12VCurrent=drr4xmaxValue12VCurrent, drr4xminorLowFanCurrent=drr4xminorLowFanCurrent, drr4xmajorHighRFCAttenuation=drr4xmajorHighRFCAttenuation, drr4xstateFlagModTemp=drr4xstateFlagModTemp, drr4xalarmStateFanCurrent=drr4xalarmStateFanCurrent, drr4xhourMeter=drr4xhourMeter, gx2drr4xDigitalTable=gx2drr4xDigitalTable, drr4xalarmStateRFDAttenuation=drr4xalarmStateRFDAttenuation, drr4xstateFlag12VCurrent=drr4xstateFlag12VCurrent, drr4xcurrentValueRFBAttenuation=drr4xcurrentValueRFBAttenuation, drr4xvalueOpticTripPointStatus=drr4xvalueOpticTripPointStatus, drr4xminValueTrippointLevel=drr4xminValueTrippointLevel, drr4xmajorHighOptCurrent=drr4xmajorHighOptCurrent, drr4xenumFactoryDefaultReset=drr4xenumFactoryDefaultReset, drr4xvalueFactoryDataCRC=drr4xvalueFactoryDataCRC, drr4xlabelAlarmDataCrc=drr4xlabelAlarmDataCrc, drr4xstateflagHardwareStatus=drr4xstateflagHardwareStatus, drr4xalarmState12VCurrent=drr4xalarmState12VCurrent, gx2drr4xFactoryEntry=gx2drr4xFactoryEntry, drr4xSubAgentRev=drr4xSubAgentRev, trapdrrConfigChangeDisplayString=trapdrrConfigChangeDisplayString, drr4xmajorHighRFDAttenuation=drr4xmajorHighRFDAttenuation, drr4xminValueRFAAttenuation=drr4xminValueRFAAttenuation, drr4xenumTrippointMode=drr4xenumTrippointMode, gx2drr4xDigitalEntry=gx2drr4xDigitalEntry, trapdrrResetFactoryDefaultAlarm=trapdrrResetFactoryDefaultAlarm, trapdrrBankBootAlarm=trapdrrBankBootAlarm, drr4xmaxValueRFCAttenuation=drr4xmaxValueRFCAttenuation, gx2drr4xStatusTable=gx2drr4xStatusTable, drr4xstateFlagTrippointLevel=drr4xstateFlagTrippointLevel, drr4xmaxValueTrippointLevel=drr4xmaxValueTrippointLevel, drr4xuom12VCurrent=drr4xuom12VCurrent, drr4xminorHighRFDAttenuation=drr4xminorHighRFDAttenuation, drr4xuomTrippointLevel=drr4xuomTrippointLevel, drr4xalarmStateRFCAttenuation=drr4xalarmStateRFCAttenuation, gx2drr4xStatusEntry=gx2drr4xStatusEntry, gx2drr4xFactoryTable=gx2drr4xFactoryTable, drr4xmajorLowRFBAttenuation=drr4xmajorLowRFBAttenuation, trapdrrFanCurrentAlarm=trapdrrFanCurrentAlarm, drr4xmaxValueRFAAttenuation=drr4xmaxValueRFAAttenuation, drr4xcurrentValueModTemp=drr4xcurrentValueModTemp, drr4xmaxValueRFBAttenuation=drr4xmaxValueRFBAttenuation, drr4xuomFanCurrent=drr4xuomFanCurrent, drr4xvalueFlash=drr4xvalueFlash, drr4xvalueAlarmDataCrc=drr4xvalueAlarmDataCrc, drr4xvalueBoot=drr4xvalueBoot, drr4xflashBankBRev=drr4xflashBankBRev, drr4xminorHighRFCAttenuation=drr4xminorHighRFCAttenuation, drr4xminorHighOptCurrent=drr4xminorHighOptCurrent, drr4xbank2CRC=drr4xbank2CRC, drr4xbootControlByte=drr4xbootControlByte, drr4xstateFlagRFBAttenuation=drr4xstateFlagRFBAttenuation, drr4xmajorLowTrippointLevel=drr4xmajorLowTrippointLevel, drr4xstateflagFactoryDefaultReset=drr4xstateflagFactoryDefaultReset, gx2drr4xDigitalTableIndex=gx2drr4xDigitalTableIndex, drr4xminValueRFCAttenuation=drr4xminValueRFCAttenuation, drr4xmaxValueOptCurrent=drr4xmaxValueOptCurrent, trapdrrLinkAlarm=trapdrrLinkAlarm, drr4xcurrentValue12VCurrent=drr4xcurrentValue12VCurrent)
