#
# PySNMP MIB module LIEBERT-SITENET-INTEGRATOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LIEBERT-SITENET-INTEGRATOR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:56:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
TruthValue, = mibBuilder.importSymbols("RFC1253-MIB", "TruthValue")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, enterprises, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, NotificationType, Counter32, Gauge32, MibIdentifier, iso, TimeTicks, ModuleIdentity, Bits, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "enterprises", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "NotificationType", "Counter32", "Gauge32", "MibIdentifier", "iso", "TimeTicks", "ModuleIdentity", "Bits", "Unsigned32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
emerson = MibIdentifier((1, 3, 6, 1, 4, 1, 476))
liebertCorp = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1))
liebertUps = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 1))
liebertEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2))
leExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1))
leExperimental = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 2))
lePrivate = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 3))
leSiteNet01 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1))
envMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1))
envIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 1))
envIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envIdentManufacturer.setStatus('mandatory')
envIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envIdentModel.setStatus('mandatory')
envIdentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envIdentSoftwareVersion.setStatus('mandatory')
envIdentSpecific = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envIdentSpecific.setStatus('mandatory')
envDigitalInputs = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2))
envDigInput1 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 1))
envDigInput1State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envDigInput1State.setStatus('mandatory')
envDigInput1Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput1Label.setStatus('mandatory')
envDigInput1Polarity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("activeHigh", 1), ("activeLow", 2), ("notDefined", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput1Polarity.setStatus('mandatory')
envDigInput1TrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput1TrapEnabled.setStatus('mandatory')
envDigInput2 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 2))
envDigInput2State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envDigInput2State.setStatus('mandatory')
envDigInput2Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput2Label.setStatus('mandatory')
envDigInput2Polarity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("activeHigh", 1), ("activeLow", 2), ("notDefined", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput2Polarity.setStatus('mandatory')
envDigInput2TrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 2, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput2TrapEnabled.setStatus('mandatory')
envDigInput3 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 3))
envDigInput3State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envDigInput3State.setStatus('mandatory')
envDigInput3Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput3Label.setStatus('mandatory')
envDigInput3Polarity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("activeHigh", 1), ("activeLow", 2), ("notDefined", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput3Polarity.setStatus('mandatory')
envDigInput3TrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 3, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput3TrapEnabled.setStatus('mandatory')
envDigInput4 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 4))
envDigInput4State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envDigInput4State.setStatus('mandatory')
envDigInput4Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput4Label.setStatus('mandatory')
envDigInput4Polarity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("activeHigh", 1), ("activeLow", 2), ("notDefined", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput4Polarity.setStatus('mandatory')
envDigInput4TrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 4, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput4TrapEnabled.setStatus('mandatory')
envDigInput5 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 5))
envDigInput5State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envDigInput5State.setStatus('mandatory')
envDigInput5Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput5Label.setStatus('mandatory')
envDigInput5Polarity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("activeHigh", 1), ("activeLow", 2), ("notDefined", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput5Polarity.setStatus('mandatory')
envDigInput5TrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 5, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput5TrapEnabled.setStatus('mandatory')
envDigInput6 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 6))
envDigInput6State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envDigInput6State.setStatus('mandatory')
envDigInput6Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput6Label.setStatus('mandatory')
envDigInput6Polarity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("activeHigh", 1), ("activeLow", 2), ("notDefined", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput6Polarity.setStatus('mandatory')
envDigInput6TrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 6, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput6TrapEnabled.setStatus('mandatory')
envDigInput7 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 7))
envDigInput7State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envDigInput7State.setStatus('mandatory')
envDigInput7Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 7, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput7Label.setStatus('mandatory')
envDigInput7Polarity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("activeHigh", 1), ("activeLow", 2), ("notDefined", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput7Polarity.setStatus('mandatory')
envDigInput7TrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 7, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput7TrapEnabled.setStatus('mandatory')
envDigInput8 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 8))
envDigInput8State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envDigInput8State.setStatus('mandatory')
envDigInput8Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 8, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput8Label.setStatus('mandatory')
envDigInput8Polarity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("activeHigh", 1), ("activeLow", 2), ("notDefined", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput8Polarity.setStatus('mandatory')
envDigInput8TrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 8, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput8TrapEnabled.setStatus('mandatory')
envDigInput9 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 9))
envDigInput9State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envDigInput9State.setStatus('mandatory')
envDigInput9Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput9Label.setStatus('mandatory')
envDigInput9Polarity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("activeHigh", 1), ("activeLow", 2), ("notDefined", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput9Polarity.setStatus('mandatory')
envDigInput9TrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 9, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput9TrapEnabled.setStatus('mandatory')
envDigInput10 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 10))
envDigInput10State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notInstalled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envDigInput10State.setStatus('mandatory')
envDigInput10Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 10, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput10Label.setStatus('mandatory')
envDigInput10Polarity = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("activeHigh", 1), ("activeLow", 2), ("notDefined", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput10Polarity.setStatus('mandatory')
envDigInput10TrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 2, 10, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envDigInput10TrapEnabled.setStatus('mandatory')
envRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 3))
envRelay1 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 3, 1))
envRelay1State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envRelay1State.setStatus('mandatory')
envRelay1Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envRelay1Label.setStatus('mandatory')
envRelay1Control = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envRelay1Control.setStatus('mandatory')
envRelay2 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 3, 2))
envRelay2State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envRelay2State.setStatus('mandatory')
envRelay2Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 3, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envRelay2Label.setStatus('mandatory')
envRelay2Control = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envRelay2Control.setStatus('mandatory')
envOutputs = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 4))
envAudible = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 4, 1))
envAudibleState = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envAudibleState.setStatus('mandatory')
envAudibleControl = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envAudibleControl.setStatus('mandatory')
envLED1 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 4, 2))
envLED1State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envLED1State.setStatus('mandatory')
envLED1Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 4, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envLED1Label.setStatus('mandatory')
envLED1Control = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envLED1Control.setStatus('mandatory')
envLED2 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 4, 3))
envLED2State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envLED2State.setStatus('mandatory')
envLED2Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 4, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envLED2Label.setStatus('mandatory')
envLED2Control = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 4, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envLED2Control.setStatus('mandatory')
envLED3 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 4, 4))
envLED3State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envLED3State.setStatus('mandatory')
envLED3Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 4, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envLED3Label.setStatus('mandatory')
envLED3Control = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envLED3Control.setStatus('mandatory')
envReceptacles = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 5))
envReceptacle1 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 5, 1))
envReceptacle1State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envReceptacle1State.setStatus('mandatory')
envReceptacle1Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envReceptacle1Label.setStatus('mandatory')
envReceptacle2 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 5, 2))
envReceptacle2State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envReceptacle2State.setStatus('mandatory')
envReceptacle2Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 5, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envReceptacle2Label.setStatus('mandatory')
envReceptacle3 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 5, 3))
envReceptacle3State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envReceptacle3State.setStatus('mandatory')
envReceptacle3Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 5, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envReceptacle3Label.setStatus('mandatory')
envReceptacle4 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 5, 4))
envReceptacle4State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envReceptacle4State.setStatus('mandatory')
envReceptacle4Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 5, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envReceptacle4Label.setStatus('mandatory')
envAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 6))
envSummaryAlarm = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envSummaryAlarm.setStatus('mandatory')
envTemperatureSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7))
envTemperature1 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 1))
envTemperature1State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("installed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemperature1State.setStatus('mandatory')
envTemperature1F = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTemperature1F.setStatus('mandatory')
envTemperature1C = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTemperature1C.setStatus('mandatory')
envTemperature1Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemperature1Label.setStatus('mandatory')
envTemperature1OffsetF = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemperature1OffsetF.setStatus('mandatory')
envTemperature1OffsetC = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemperature1OffsetC.setStatus('mandatory')
envTemp1HighLimitF = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemp1HighLimitF.setStatus('mandatory')
envTemp1HighLimitC = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemp1HighLimitC.setStatus('mandatory')
envTemp1LowLimitF = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemp1LowLimitF.setStatus('mandatory')
envTemp1LowLimitC = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemp1LowLimitC.setStatus('mandatory')
envTemperature2 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 2))
envTemperature2State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("installed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemperature2State.setStatus('mandatory')
envTemperature2F = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTemperature2F.setStatus('mandatory')
envTemperature2C = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTemperature2C.setStatus('mandatory')
envTemperature2Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemperature2Label.setStatus('mandatory')
envTemperature2OffsetF = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemperature2OffsetF.setStatus('mandatory')
envTemperature2OffsetC = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemperature2OffsetC.setStatus('mandatory')
envTemp2HighLimitF = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemp2HighLimitF.setStatus('mandatory')
envTemp2HighLimitC = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemp2HighLimitC.setStatus('mandatory')
envTemp2LowLimitF = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemp2LowLimitF.setStatus('mandatory')
envTemp2LowLimitC = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemp2LowLimitC.setStatus('mandatory')
envTemperature3 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 3))
envTemperature3State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notInstalled", 1), ("airSensorInstalled", 2), ("waterSensorInstalled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemperature3State.setStatus('mandatory')
envTemperature3F = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTemperature3F.setStatus('mandatory')
envTemperature3C = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTemperature3C.setStatus('mandatory')
envTemperature3Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemperature3Label.setStatus('mandatory')
envTemperature3OffsetF = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemperature3OffsetF.setStatus('mandatory')
envTemperature3OffsetC = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemperature3OffsetC.setStatus('mandatory')
envTemp3HighLimitF = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemp3HighLimitF.setStatus('mandatory')
envTemp3HighLimitC = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemp3HighLimitC.setStatus('mandatory')
envTemp3LowLimitF = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemp3LowLimitF.setStatus('mandatory')
envTemp3LowLimitC = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemp3LowLimitC.setStatus('mandatory')
envTemp3Calibrate = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 7, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envTemp3Calibrate.setStatus('mandatory')
envHumiditySensors = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 8))
envHumidity1 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 8, 1))
envHumidity1State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("installed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envHumidity1State.setStatus('mandatory')
envHumidity1RH = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envHumidity1RH.setStatus('mandatory')
envHumidity1Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 8, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envHumidity1Label.setStatus('mandatory')
envHumidity1Offset = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envHumidity1Offset.setStatus('mandatory')
envHumidity1HighLimit = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envHumidity1HighLimit.setStatus('mandatory')
envHumidity1LowLimit = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envHumidity1LowLimit.setStatus('mandatory')
envHumidity2 = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 8, 2))
envHumidity2State = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 8, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInstalled", 1), ("installed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envHumidity2State.setStatus('mandatory')
envHumidity2RH = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 8, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envHumidity2RH.setStatus('mandatory')
envHumidity2Label = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 8, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envHumidity2Label.setStatus('mandatory')
envHumidity2Offset = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 8, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envHumidity2Offset.setStatus('mandatory')
envHumidity2HighLimit = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 8, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envHumidity2HighLimit.setStatus('mandatory')
envHumidity2LowLimit = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 8, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envHumidity2LowLimit.setStatus('mandatory')
envTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11))
envSummaryAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,1))
envDigInput1TrueTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,2))
envDigInput1FalseTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,3))
envDigInput2TrueTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,4))
envDigInput2FalseTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,5))
envDigInput3TrueTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,6))
envDigInput3FalseTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,7))
envDigInput4TrueTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,8))
envDigInput4FalseTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,9))
envDigInput5TrueTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,10))
envDigInput5FalseTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,11))
envDigInput6TrueTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,12))
envDigInput6FalseTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,13))
envDigInput7TrueTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,14))
envDigInput7FalseTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,15))
envDigInput8TrueTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,16))
envDigInput8FalseTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,17))
envDigInput9TrueTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,18))
envDigInput9FalseTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,19))
envDigInput10TrueTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,20))
envDigInput10FalseTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,21))
envTemperature1HighTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,22))
envTemperature1LowTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,23))
envTemperature1NormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,24))
envTemperature2HighTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,25))
envTemperature2LowTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,26))
envTemperature2NormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,27))
envTemperature3HighTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,28))
envTemperature3LowTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,29))
envTemperature3NormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,30))
envHumidity1HighTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,31))
envHumidity1LowTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,32))
envHumidity1NormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,33))
envHumidity2HighTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,34))
envHumidity2LowTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,35))
envHumidity2NormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 476, 1, 2, 1, 1, 1, 11) + (0,36))
mibBuilder.exportSymbols("LIEBERT-SITENET-INTEGRATOR-MIB", envTemperature1=envTemperature1, envDigInput8=envDigInput8, envDigInput2State=envDigInput2State, envDigInput5State=envDigInput5State, envLED2=envLED2, envDigInput3=envDigInput3, envTemperature1OffsetF=envTemperature1OffsetF, envReceptacle1Label=envReceptacle1Label, envTemperature1LowTrap=envTemperature1LowTrap, envTemperature2Label=envTemperature2Label, envReceptacle1=envReceptacle1, envHumidity2NormalTrap=envHumidity2NormalTrap, envOutputs=envOutputs, envDigInput2Polarity=envDigInput2Polarity, envRelays=envRelays, leExtensions=leExtensions, envTemperature2C=envTemperature2C, envDigInput10TrapEnabled=envDigInput10TrapEnabled, envLED2State=envLED2State, envDigInput7Label=envDigInput7Label, envDigInput10FalseTrap=envDigInput10FalseTrap, envDigInput3TrueTrap=envDigInput3TrueTrap, envLED1Label=envLED1Label, envReceptacle3=envReceptacle3, envDigInput4FalseTrap=envDigInput4FalseTrap, envDigInput10=envDigInput10, envDigInput7TrueTrap=envDigInput7TrueTrap, envTemp2HighLimitF=envTemp2HighLimitF, envTemp1HighLimitF=envTemp1HighLimitF, envTemperature3State=envTemperature3State, envDigInput7=envDigInput7, envTemperature3Label=envTemperature3Label, envTemperature3NormalTrap=envTemperature3NormalTrap, liebertEnvironment=liebertEnvironment, envDigInput3Polarity=envDigInput3Polarity, envDigInput6=envDigInput6, envHumidity1LowTrap=envHumidity1LowTrap, envTemperature2=envTemperature2, envLED2Label=envLED2Label, leSiteNet01=leSiteNet01, envReceptacle2=envReceptacle2, envTemperature3HighTrap=envTemperature3HighTrap, envDigInput10Label=envDigInput10Label, envRelay2Label=envRelay2Label, envDigInput2TrapEnabled=envDigInput2TrapEnabled, envHumidity1HighTrap=envHumidity1HighTrap, envDigInput9FalseTrap=envDigInput9FalseTrap, envIdentModel=envIdentModel, envHumidity2LowTrap=envHumidity2LowTrap, envDigInput9=envDigInput9, envLED3Control=envLED3Control, envDigInput8State=envDigInput8State, envAudibleControl=envAudibleControl, envDigInput10State=envDigInput10State, envTemp1HighLimitC=envTemp1HighLimitC, envHumidity2Offset=envHumidity2Offset, envDigInput1State=envDigInput1State, envReceptacle4=envReceptacle4, envHumidity1LowLimit=envHumidity1LowLimit, envHumidity2LowLimit=envHumidity2LowLimit, envDigInput1FalseTrap=envDigInput1FalseTrap, envDigInput10TrueTrap=envDigInput10TrueTrap, envReceptacle2State=envReceptacle2State, envRelay1Label=envRelay1Label, envTemp2LowLimitC=envTemp2LowLimitC, envTemperature3OffsetF=envTemperature3OffsetF, envTemp3LowLimitC=envTemp3LowLimitC, envDigInput8TrueTrap=envDigInput8TrueTrap, envTemperature3F=envTemperature3F, envDigInput9State=envDigInput9State, envLED3State=envLED3State, leExperimental=leExperimental, envTemperature1HighTrap=envTemperature1HighTrap, envTemperature2HighTrap=envTemperature2HighTrap, envHumidity1HighLimit=envHumidity1HighLimit, envDigInput8TrapEnabled=envDigInput8TrapEnabled, envDigInput1Polarity=envDigInput1Polarity, envDigInput6State=envDigInput6State, envHumidity2=envHumidity2, envDigInput2=envDigInput2, envTemperatureSensors=envTemperatureSensors, envSummaryAlarm=envSummaryAlarm, envReceptacle1State=envReceptacle1State, envRelay2State=envRelay2State, envTemperature3LowTrap=envTemperature3LowTrap, envDigInput5=envDigInput5, envDigInput4Polarity=envDigInput4Polarity, envTemperature2LowTrap=envTemperature2LowTrap, envHumidity1RH=envHumidity1RH, envDigInput3FalseTrap=envDigInput3FalseTrap, envTemperature1Label=envTemperature1Label, envTraps=envTraps, envReceptacle4State=envReceptacle4State, envTemp3LowLimitF=envTemp3LowLimitF, envDigInput5TrueTrap=envDigInput5TrueTrap, envIdent=envIdent, envSummaryAlarmTrap=envSummaryAlarmTrap, envTemperature2OffsetC=envTemperature2OffsetC, envRelay1State=envRelay1State, envDigInput6Label=envDigInput6Label, envDigInput7State=envDigInput7State, envReceptacle3Label=envReceptacle3Label, envDigInput5Label=envDigInput5Label, envDigInput4Label=envDigInput4Label, envTemp1LowLimitC=envTemp1LowLimitC, envDigInput9TrapEnabled=envDigInput9TrapEnabled, envDigInput4TrapEnabled=envDigInput4TrapEnabled, envTemp3Calibrate=envTemp3Calibrate, liebertUps=liebertUps, envDigInput2TrueTrap=envDigInput2TrueTrap, envDigInput5FalseTrap=envDigInput5FalseTrap, envReceptacle2Label=envReceptacle2Label, envIdentSpecific=envIdentSpecific, envDigInput1TrapEnabled=envDigInput1TrapEnabled, envReceptacle3State=envReceptacle3State, envTemperature3C=envTemperature3C, envTemperature1F=envTemperature1F, envDigitalInputs=envDigitalInputs, envRelay2Control=envRelay2Control, envReceptacles=envReceptacles, envAlarms=envAlarms, envDigInput8FalseTrap=envDigInput8FalseTrap, envDigInput5TrapEnabled=envDigInput5TrapEnabled, envTemperature3=envTemperature3, envTemperature2F=envTemperature2F, envTemperature1C=envTemperature1C, envDigInput6FalseTrap=envDigInput6FalseTrap, envDigInput5Polarity=envDigInput5Polarity, envDigInput4=envDigInput4, emerson=emerson, envDigInput1TrueTrap=envDigInput1TrueTrap, envDigInput9Label=envDigInput9Label, envDigInput4State=envDigInput4State, envDigInput3State=envDigInput3State, envDigInput7FalseTrap=envDigInput7FalseTrap, lePrivate=lePrivate, envHumidity2RH=envHumidity2RH, envTemperature1State=envTemperature1State, envDigInput7TrapEnabled=envDigInput7TrapEnabled, envHumiditySensors=envHumiditySensors, envHumidity1NormalTrap=envHumidity1NormalTrap, envHumidity1Offset=envHumidity1Offset, envDigInput6TrapEnabled=envDigInput6TrapEnabled, envIdentManufacturer=envIdentManufacturer, envHumidity1State=envHumidity1State, envTemperature2OffsetF=envTemperature2OffsetF, envIdentSoftwareVersion=envIdentSoftwareVersion, envTemperature1OffsetC=envTemperature1OffsetC, envRelay1=envRelay1, envDigInput2Label=envDigInput2Label, envTemperature1NormalTrap=envTemperature1NormalTrap, envDigInput4TrueTrap=envDigInput4TrueTrap, envTemp3HighLimitC=envTemp3HighLimitC, envDigInput3Label=envDigInput3Label, envMIB=envMIB, envAudible=envAudible, envTemperature3OffsetC=envTemperature3OffsetC, envDigInput3TrapEnabled=envDigInput3TrapEnabled, envTemp2LowLimitF=envTemp2LowLimitF, envDigInput9Polarity=envDigInput9Polarity, envLED1=envLED1, envTemp3HighLimitF=envTemp3HighLimitF, envHumidity2HighTrap=envHumidity2HighTrap, envDigInput8Label=envDigInput8Label, envTemp2HighLimitC=envTemp2HighLimitC, envLED1State=envLED1State, envDigInput9TrueTrap=envDigInput9TrueTrap, envDigInput10Polarity=envDigInput10Polarity, envDigInput7Polarity=envDigInput7Polarity, envReceptacle4Label=envReceptacle4Label, envTemp1LowLimitF=envTemp1LowLimitF, envLED3Label=envLED3Label, envHumidity2HighLimit=envHumidity2HighLimit, envAudibleState=envAudibleState, envDigInput2FalseTrap=envDigInput2FalseTrap, envDigInput8Polarity=envDigInput8Polarity, envRelay1Control=envRelay1Control, envDigInput1=envDigInput1, envLED1Control=envLED1Control, envLED3=envLED3, envTemperature2NormalTrap=envTemperature2NormalTrap, envHumidity1=envHumidity1, liebertCorp=liebertCorp, envLED2Control=envLED2Control, envDigInput6TrueTrap=envDigInput6TrueTrap, envHumidity2State=envHumidity2State, envDigInput1Label=envDigInput1Label, envRelay2=envRelay2, envDigInput6Polarity=envDigInput6Polarity, envHumidity2Label=envHumidity2Label, envTemperature2State=envTemperature2State, envHumidity1Label=envHumidity1Label)
