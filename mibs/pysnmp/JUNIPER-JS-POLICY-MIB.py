#
# PySNMP MIB module JUNIPER-JS-POLICY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-JS-POLICY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:48:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
jnxJsPolicies, = mibBuilder.importSymbols("JUNIPER-JS-SMI", "jnxJsPolicies")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, ModuleIdentity, iso, Gauge32, NotificationType, IpAddress, TimeTicks, Counter32, Unsigned32, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "ModuleIdentity", "iso", "Gauge32", "NotificationType", "IpAddress", "TimeTicks", "Counter32", "Unsigned32", "MibIdentifier", "Integer32")
TextualConvention, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TimeStamp")
jnxJsSecPolicyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1))
jnxJsSecPolicyMIB.setRevisions(('2006-12-14 00:00',))
if mibBuilder.loadTexts: jnxJsSecPolicyMIB.setLastUpdated('200705071840Z')
if mibBuilder.loadTexts: jnxJsSecPolicyMIB.setOrganization('Juniper Networks, Inc.')
jnxJsPolicyNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 0))
jnxJsPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1))
jnxJsPolicyTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 2))
jnxJsPolicyNumber = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyNumber.setStatus('current')
jnxJsPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2), )
if mibBuilder.loadTexts: jnxJsPolicyTable.setStatus('current')
jnxJsPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1), ).setIndexNames((0, "JUNIPER-JS-POLICY-MIB", "jnxJsPolicyFromZone"), (0, "JUNIPER-JS-POLICY-MIB", "jnxJsPolicyToZone"), (0, "JUNIPER-JS-POLICY-MIB", "jnxJsPolicyName"))
if mibBuilder.loadTexts: jnxJsPolicyEntry.setStatus('current')
jnxJsPolicyFromZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)))
if mibBuilder.loadTexts: jnxJsPolicyFromZone.setStatus('current')
jnxJsPolicyToZone = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)))
if mibBuilder.loadTexts: jnxJsPolicyToZone.setStatus('current')
jnxJsPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)))
if mibBuilder.loadTexts: jnxJsPolicyName.setStatus('current')
jnxJsPolicySequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicySequenceNumber.setStatus('current')
jnxJsPolicyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2), ("reject", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyAction.setStatus('current')
jnxJsPolicyScheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyScheduler.setStatus('current')
jnxJsPolicyState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("unavailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyState.setStatus('current')
jnxJsPolicyStatsAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("unavailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsAvailability.setStatus('current')
jnxJsPolicyPerSecBytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyPerSecBytesThreshold.setStatus('current')
jnxJsPolicyPerMinKbytesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyPerMinKbytesThreshold.setStatus('current')
jnxJsPolicyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3), )
if mibBuilder.loadTexts: jnxJsPolicyStatsTable.setStatus('current')
jnxJsPolicyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1), ).setIndexNames((0, "JUNIPER-JS-POLICY-MIB", "jnxJsPolicyFromZone"), (0, "JUNIPER-JS-POLICY-MIB", "jnxJsPolicyToZone"), (0, "JUNIPER-JS-POLICY-MIB", "jnxJsPolicyName"))
if mibBuilder.loadTexts: jnxJsPolicyStatsEntry.setStatus('current')
jnxJsPolicyStatsCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsCreationTime.setStatus('current')
jnxJsPolicyStatsInputBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsInputBytes.setStatus('current')
jnxJsPolicyStatsInputByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsInputByteRate.setStatus('current')
jnxJsPolicyStatsOutputBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsOutputBytes.setStatus('current')
jnxJsPolicyStatsOutputByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsOutputByteRate.setStatus('current')
jnxJsPolicyStatsInputPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsInputPackets.setStatus('current')
jnxJsPolicyStatsInputPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsInputPacketRate.setStatus('current')
jnxJsPolicyStatsOutputPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsOutputPackets.setStatus('current')
jnxJsPolicyStatsOutputPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsOutputPacketRate.setStatus('current')
jnxJsPolicyStatsNumSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsNumSessions.setStatus('current')
jnxJsPolicyStatsSessionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsSessionRate.setStatus('current')
jnxJsPolicyStatsSessionDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsSessionDeleted.setStatus('current')
jnxJsPolicyStatsLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsLookups.setStatus('current')
jnxJsPolicyStatsCountAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 4, 1, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsPolicyStatsCountAlarm.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-JS-POLICY-MIB", jnxJsPolicyScheduler=jnxJsPolicyScheduler, jnxJsPolicyName=jnxJsPolicyName, jnxJsPolicyStatsCountAlarm=jnxJsPolicyStatsCountAlarm, jnxJsPolicyStatsSessionRate=jnxJsPolicyStatsSessionRate, jnxJsPolicyStatsLookups=jnxJsPolicyStatsLookups, jnxJsPolicyFromZone=jnxJsPolicyFromZone, jnxJsPolicySequenceNumber=jnxJsPolicySequenceNumber, jnxJsPolicyStatsOutputByteRate=jnxJsPolicyStatsOutputByteRate, jnxJsPolicyAction=jnxJsPolicyAction, PYSNMP_MODULE_ID=jnxJsSecPolicyMIB, jnxJsPolicyStatsInputByteRate=jnxJsPolicyStatsInputByteRate, jnxJsPolicyStatsSessionDeleted=jnxJsPolicyStatsSessionDeleted, jnxJsPolicyTrapVars=jnxJsPolicyTrapVars, jnxJsPolicyEntry=jnxJsPolicyEntry, jnxJsPolicyObjects=jnxJsPolicyObjects, jnxJsPolicyStatsEntry=jnxJsPolicyStatsEntry, jnxJsSecPolicyMIB=jnxJsSecPolicyMIB, jnxJsPolicyStatsOutputPackets=jnxJsPolicyStatsOutputPackets, jnxJsPolicyPerSecBytesThreshold=jnxJsPolicyPerSecBytesThreshold, jnxJsPolicyStatsInputPackets=jnxJsPolicyStatsInputPackets, jnxJsPolicyToZone=jnxJsPolicyToZone, jnxJsPolicyStatsOutputBytes=jnxJsPolicyStatsOutputBytes, jnxJsPolicyStatsOutputPacketRate=jnxJsPolicyStatsOutputPacketRate, jnxJsPolicyTable=jnxJsPolicyTable, jnxJsPolicyNotifications=jnxJsPolicyNotifications, jnxJsPolicyStatsInputPacketRate=jnxJsPolicyStatsInputPacketRate, jnxJsPolicyStatsTable=jnxJsPolicyStatsTable, jnxJsPolicyStatsInputBytes=jnxJsPolicyStatsInputBytes, jnxJsPolicyStatsAvailability=jnxJsPolicyStatsAvailability, jnxJsPolicyNumber=jnxJsPolicyNumber, jnxJsPolicyPerMinKbytesThreshold=jnxJsPolicyPerMinKbytesThreshold, jnxJsPolicyStatsNumSessions=jnxJsPolicyStatsNumSessions, jnxJsPolicyStatsCreationTime=jnxJsPolicyStatsCreationTime, jnxJsPolicyState=jnxJsPolicyState)
