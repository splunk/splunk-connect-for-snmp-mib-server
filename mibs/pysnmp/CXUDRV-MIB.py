#
# PySNMP MIB module CXUDRV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXUDRV-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:18:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
cxUDrv, = mibBuilder.importSymbols("CXProduct-SMI", "cxUDrv")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, NotificationType, IpAddress, Counter32, Counter64, Bits, iso, ModuleIdentity, Unsigned32, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "IpAddress", "Counter32", "Counter64", "Bits", "iso", "ModuleIdentity", "Unsigned32", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
udrvTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 41, 10), )
if mibBuilder.loadTexts: udrvTable.setStatus('mandatory')
udrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 41, 10, 1), ).setIndexNames((0, "CXUDRV-MIB", "udrvSlotNumberIndex"))
if mibBuilder.loadTexts: udrvEntry.setStatus('mandatory')
udrvSlotNumberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 41, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udrvSlotNumberIndex.setStatus('mandatory')
udrvClearStat = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 41, 10, 1, 20), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: udrvClearStat.setStatus('mandatory')
udrvPortUp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 41, 10, 1, 21), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: udrvPortUp.setStatus('mandatory')
udrvPortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 41, 10, 1, 23), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: udrvPortReset.setStatus('mandatory')
udrvPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 41, 10, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portDown", 1), ("portUp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udrvPortStatus.setStatus('mandatory')
udrvFebe = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 41, 10, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udrvFebe.setStatus('mandatory')
udrvNebe = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 41, 10, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udrvNebe.setStatus('mandatory')
udrvActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 41, 10, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udrvActivation.setStatus('mandatory')
udrvDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 41, 10, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udrvDeactivation.setStatus('mandatory')
udrvTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 41, 10, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udrvTransition.setStatus('mandatory')
mibBuilder.exportSymbols("CXUDRV-MIB", udrvPortStatus=udrvPortStatus, udrvDeactivation=udrvDeactivation, udrvActivation=udrvActivation, udrvSlotNumberIndex=udrvSlotNumberIndex, udrvNebe=udrvNebe, udrvEntry=udrvEntry, udrvPortUp=udrvPortUp, udrvFebe=udrvFebe, udrvClearStat=udrvClearStat, udrvTransition=udrvTransition, udrvPortReset=udrvPortReset, udrvTable=udrvTable)
