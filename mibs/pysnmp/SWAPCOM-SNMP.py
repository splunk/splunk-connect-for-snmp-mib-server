#
# PySNMP MIB module SWAPCOM-SNMP (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SWAPCOM-SNMP
# Produced by pysmi-0.3.4 at Mon Apr 29 21:05:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, TimeTicks, enterprises, ObjectIdentity, ModuleIdentity, Counter32, Bits, MibIdentifier, Unsigned32, NotificationType, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "TimeTicks", "enterprises", "ObjectIdentity", "ModuleIdentity", "Counter32", "Bits", "MibIdentifier", "Unsigned32", "NotificationType", "Gauge32", "Integer32")
DisplayString, StorageType, DateAndTime, RowStatus, TextualConvention, TestAndIncr, MacAddress, TimeInterval, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "StorageType", "DateAndTime", "RowStatus", "TextualConvention", "TestAndIncr", "MacAddress", "TimeInterval", "TruthValue")
swapcom = ModuleIdentity((1, 3, 6, 1, 4, 1, 11308))
swapcom.setRevisions(('2005-07-13 18:17',))
if mibBuilder.loadTexts: swapcom.setLastUpdated('200507131817Z')
if mibBuilder.loadTexts: swapcom.setOrganization('SWAPCOM')
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 2))
platform = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 2, 1))
notificationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 2, 1, 1))
defaultNotification = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 1, 1))
if mibBuilder.loadTexts: defaultNotification.setStatus('current')
notificationMessage = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 1, 2), DisplayString())
if mibBuilder.loadTexts: notificationMessage.setStatus('current')
platformPlatformId = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformPlatformId.setStatus('current')
platformPlatformStatus = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("platform-initializing", 0), ("platform-initialized", 1), ("domains-initializing", 2), ("started", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformPlatformStatus.setStatus('current')
platformStart = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 4))
if mibBuilder.loadTexts: platformStart.setStatus('current')
platformStop = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 5))
if mibBuilder.loadTexts: platformStop.setStatus('current')
platformVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 2, 1, 6))
platformVersionProductName = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformVersionProductName.setStatus('current')
platformVersionProductVersion = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformVersionProductVersion.setStatus('current')
platformVersionBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformVersionBuildNumber.setStatus('current')
platformVersionBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 6, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformVersionBuildDate.setStatus('current')
applicationVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 2, 1, 7))
applicationVersionProductName = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationVersionProductName.setStatus('current')
applicationVersionProductVersion = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationVersionProductVersion.setStatus('current')
applicationVersionBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationVersionBuildNumber.setStatus('current')
applicationVersionBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 11308, 2, 1, 7, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationVersionBuildDate.setStatus('current')
logger = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 2, 1, 8))
unknownLog = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 8, 1))
if mibBuilder.loadTexts: unknownLog.setStatus('current')
infoLog = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 8, 2))
if mibBuilder.loadTexts: infoLog.setStatus('current')
warnLog = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 8, 3))
if mibBuilder.loadTexts: warnLog.setStatus('current')
errorLog = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 8, 4))
if mibBuilder.loadTexts: errorLog.setStatus('current')
fatalLog = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 8, 5))
if mibBuilder.loadTexts: fatalLog.setStatus('current')
remotePlatform = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 2, 1, 9))
remotePlatformTable = MibTable((1, 3, 6, 1, 4, 1, 11308, 2, 1, 9, 1), )
if mibBuilder.loadTexts: remotePlatformTable.setStatus('current')
remotePlatformEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11308, 2, 1, 9, 1, 1), ).setIndexNames((0, "SWAPCOM-SNMP", "remotePlatformPlatformId"))
if mibBuilder.loadTexts: remotePlatformEntry.setStatus('current')
remotePlatformPlatformId = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 2, 1, 9, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePlatformPlatformId.setStatus('current')
remotePlatformPlatformProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 2, 1, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePlatformPlatformProtocol.setStatus('current')
remotePlatformPlatformStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 2, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePlatformPlatformStatus.setStatus('current')
remotePlatformUp = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 9, 2))
if mibBuilder.loadTexts: remotePlatformUp.setStatus('current')
remotePlatformDown = NotificationType((1, 3, 6, 1, 4, 1, 11308, 2, 1, 9, 3))
if mibBuilder.loadTexts: remotePlatformDown.setStatus('current')
mibBuilder.exportSymbols("SWAPCOM-SNMP", platform=platform, warnLog=warnLog, unknownLog=unknownLog, applicationVersionProductVersion=applicationVersionProductVersion, applicationVersionBuildNumber=applicationVersionBuildNumber, platformPlatformStatus=platformPlatformStatus, notificationMessage=notificationMessage, defaultNotification=defaultNotification, private=private, remotePlatformPlatformId=remotePlatformPlatformId, platformVersion=platformVersion, applicationVersionBuildDate=applicationVersionBuildDate, PYSNMP_MODULE_ID=swapcom, remotePlatformPlatformStatus=remotePlatformPlatformStatus, platformStart=platformStart, platformStop=platformStop, logger=logger, swapcom=swapcom, platformPlatformId=platformPlatformId, platformVersionBuildDate=platformVersionBuildDate, platformVersionProductVersion=platformVersionProductVersion, remotePlatformTable=remotePlatformTable, notificationGroup=notificationGroup, dod=dod, infoLog=infoLog, errorLog=errorLog, snmp=snmp, remotePlatformPlatformProtocol=remotePlatformPlatformProtocol, platformVersionProductName=platformVersionProductName, internet=internet, fatalLog=fatalLog, applicationVersionProductName=applicationVersionProductName, remotePlatformEntry=remotePlatformEntry, org=org, enterprises=enterprises, platformVersionBuildNumber=platformVersionBuildNumber, remotePlatform=remotePlatform, remotePlatformDown=remotePlatformDown, remotePlatformUp=remotePlatformUp, applicationVersion=applicationVersion)
