#
# PySNMP MIB module TRIPPLITE-12X (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRIPPLITE-12X
# Produced by pysmi-0.3.4 at Mon Apr 29 21:20:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, NotificationType, MibIdentifier, Unsigned32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, iso, Counter64, Counter32, ModuleIdentity, IpAddress, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "MibIdentifier", "Unsigned32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "iso", "Counter64", "Counter32", "ModuleIdentity", "IpAddress", "Bits", "NotificationType")
TextualConvention, DateAndTime, AutonomousType, RowStatus, TimeInterval, VariablePointer, DisplayString, TimeStamp, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "AutonomousType", "RowStatus", "TimeInterval", "VariablePointer", "DisplayString", "TimeStamp", "TruthValue")
tripplite, = mibBuilder.importSymbols("TRIPPLITE", "tripplite")
PositiveInteger, NonNegativeInteger = mibBuilder.importSymbols("UPS-MIB", "PositiveInteger", "NonNegativeInteger")
tlPowerAlert = ModuleIdentity((1, 3, 6, 1, 4, 1, 850, 90))
tlPowerAlert.setRevisions(('2015-07-29 00:00', '2014-10-17 09:30', '2014-09-18 10:00', '2014-08-06 08:30', '2014-05-08 08:30', '2014-04-09 10:00', '2013-10-30 13:00',))
if mibBuilder.loadTexts: tlPowerAlert.setLastUpdated('201507290000Z')
if mibBuilder.loadTexts: tlPowerAlert.setOrganization('Tripp Lite')
tlEnumerations = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2))
tlOperatingSystems = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1))
hpux9 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 1))
sunos4 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 2))
solaris = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 3))
osf = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 4))
ultrix = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 5))
hpux10 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 6))
netbsd1 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 7))
freebsd = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 8))
irix = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 9))
linux = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 10))
bsdi = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 11))
openbsd = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 12))
win32 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 13))
hpux11 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 14))
win9x = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 50))
winnt = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 51))
solspark = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 52))
solintel = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 53))
aix = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 54))
sco = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 55))
osx = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 56))
unknown = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 255))
tlPASystem = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 90, 1))
tlPAContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 90, 1, 1))
tlPAEmailContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1))
tlPANumberOfEmailContacts = MibScalar((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlPANumberOfEmailContacts.setStatus('current')
tlPAEmailContactsTable = MibTable((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 2), )
if mibBuilder.loadTexts: tlPAEmailContactsTable.setStatus('current')
tlPAEmailContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-12X", "tlPAEmailContactIndex"))
if mibBuilder.loadTexts: tlPAEmailContactEntry.setStatus('current')
tlPAEmailContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlPAEmailContactIndex.setStatus('current')
tlPAEmailContactRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPAEmailContactRowStatus.setStatus('current')
tlPAEmailContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPAEmailContactName.setStatus('current')
tlPAEmailContactAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPAEmailContactAddress.setStatus('current')
tlPASnmpContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2))
tlPANumberOfSnmpContacts = MibScalar((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlPANumberOfSnmpContacts.setStatus('current')
tlPASnmpContactsTable = MibTable((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2), )
if mibBuilder.loadTexts: tlPASnmpContactsTable.setStatus('current')
tlPASnmpContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1), ).setIndexNames((0, "TRIPPLITE-12X", "tlPASnmpContactIndex"))
if mibBuilder.loadTexts: tlPASnmpContactEntry.setStatus('current')
tlPASnmpContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlPASnmpContactIndex.setStatus('current')
tlPASnmpContactRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactRowStatus.setStatus('current')
tlPASnmpContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactName.setStatus('current')
tlPASnmpContactIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactIpAddress.setStatus('current')
tlPASnmpContactPort = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 5), PositiveInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactPort.setStatus('current')
tlPASnmpContactSnmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snmpv1", 1), ("snmpv2c", 2), ("snmpv3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactSnmpVersion.setStatus('current')
tlPASnmpContactSecurityName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactSecurityName.setStatus('current')
tlPASnmpContactPrivPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactPrivPassword.setStatus('current')
tlPASnmpContactAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactAuthPassword.setStatus('current')
tlUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100))
tlUpsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1))
tlUpsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 1))
tlUpsIdentUpsSoftwareChecksum = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsIdentUpsSoftwareChecksum.setStatus('current')
tlUpsIdentSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsIdentSerialNum.setStatus('current')
tlUpsIdentID = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsIdentID.setStatus('current')
tlUpsSnmpCardSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsSnmpCardSerialNum.setStatus('current')
tlUpsSelectedDeviceID = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsSelectedDeviceID.setStatus('current')
tlUpsLocation = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsLocation.setStatus('current')
tlUpsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 2))
tlUpsBatteryAge = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsBatteryAge.setStatus('current')
tlUpsTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsTemperatureF.setStatus('current')
tlUpsExternalBatteryAge = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsExternalBatteryAge.setStatus('current')
tlUpsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 3))
tlUpsInputNumVoltages = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsInputNumVoltages.setStatus('current')
tlUpsInputVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 2), )
if mibBuilder.loadTexts: tlUpsInputVoltageTable.setStatus('current')
tlUpsInputVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 2, 1), ).setIndexNames((0, "TRIPPLITE-12X", "tlUpsInputVoltageIndex"))
if mibBuilder.loadTexts: tlUpsInputVoltageEntry.setStatus('current')
tlUpsInputVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: tlUpsInputVoltageIndex.setStatus('current')
tlUpsInputVoltageType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("phaseToNeutral", 0), ("phaseToPhase", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsInputVoltageType.setStatus('current')
tlUpsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 2, 1, 3), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsInputVoltage.setStatus('current')
tlUpsInputSourceSelect = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inputSourceA", 0), ("inputSourceB", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsInputSourceSelect.setStatus('current')
tlUpsPhaseImbalance = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 4), Integer32()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsPhaseImbalance.setStatus('current')
tlUpsInputSourceAvailability = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("inputSourceA", 1), ("inputSourceB", 2), ("inputSourceAB", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsInputSourceAvailability.setStatus('current')
tlUpsInputSourceInUse = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inputSourceA", 0), ("inputSourceB", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsInputSourceInUse.setStatus('current')
tlUpsInputSourceTransitionCount = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 7), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsInputSourceTransitionCount.setStatus('current')
tlUpsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 4))
tlUpsOutputPowerTotal = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 5), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutputPowerTotal.setStatus('current')
tlUpsOutputCircuits = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutputCircuits.setStatus('current')
tlUpsOutputCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 7), )
if mibBuilder.loadTexts: tlUpsOutputCircuitTable.setStatus('current')
tlUpsOutputCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 7, 1), ).setIndexNames((0, "TRIPPLITE-12X", "tlUpsOutputCircuitIndex"))
if mibBuilder.loadTexts: tlUpsOutputCircuitEntry.setStatus('current')
tlUpsOutputCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 7, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: tlUpsOutputCircuitIndex.setStatus('current')
tlUpsOutputCircuitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("closed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutputCircuitStatus.setStatus('current')
tlUpsOutputCircuitLoadCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 7, 1, 3), NonNegativeInteger()).setUnits('0.1 Amperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutputCircuitLoadCurrent.setStatus('current')
tlUpsOutputCircuitVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 7, 1, 4), NonNegativeInteger()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutputCircuitVoltage.setStatus('current')
tlUpsOutputCircuitPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 7, 1, 5), NonNegativeInteger()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutputCircuitPower.setStatus('current')
tlUpsOutputCircuitPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 7, 1, 6), NonNegativeInteger()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutputCircuitPowerFactor.setStatus('current')
tlUpsAggregatePowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 8), PositiveInteger()).setUnits('0.1 Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAggregatePowerFactor.setStatus('current')
tlUpsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 6))
tlUpsAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmsPresent.setStatus('current')
tlUpsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2), )
if mibBuilder.loadTexts: tlUpsAlarmTable.setStatus('current')
tlUpsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1), ).setIndexNames((0, "TRIPPLITE-12X", "tlUpsAlarmId"))
if mibBuilder.loadTexts: tlUpsAlarmEntry.setStatus('current')
tlUpsAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmId.setStatus('current')
tlUpsAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmDescr.setStatus('current')
tlUpsAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmTime.setStatus('current')
tlUpsAlarmDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmDetail.setStatus('current')
tlUpsAlarmDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 5), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmDeviceId.setStatus('current')
tlUpsAlarmDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmDeviceName.setStatus('current')
tlUpsAlarmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmLocation.setStatus('current')
tlUpsAlarmGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("info", 3), ("status", 4), ("offline", 5), ("custom", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmGroup.setStatus('current')
tlUpsAlarmIp = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmIp.setStatus('current')
tlUpsAlarmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmMac.setStatus('current')
tlUpsWellKnownAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3))
tlUpsAlarmPrimaryPowerOutage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 1))
if mibBuilder.loadTexts: tlUpsAlarmPrimaryPowerOutage.setStatus('current')
tlUpsAlarmSecondaryPowerOutage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 2))
if mibBuilder.loadTexts: tlUpsAlarmSecondaryPowerOutage.setStatus('current')
tlUpsAlarmLoadLevelAboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 3))
if mibBuilder.loadTexts: tlUpsAlarmLoadLevelAboveThreshold.setStatus('current')
tlUpsAlarmOutputCurrentChanged = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 4))
if mibBuilder.loadTexts: tlUpsAlarmOutputCurrentChanged.setStatus('current')
tlUpsAlarmBatteryAgeAboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 5))
if mibBuilder.loadTexts: tlUpsAlarmBatteryAgeAboveThreshold.setStatus('current')
tlUpsAlarmLoadOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 6))
if mibBuilder.loadTexts: tlUpsAlarmLoadOff.setStatus('current')
tlUpsAlarmUserDefined = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 7))
if mibBuilder.loadTexts: tlUpsAlarmUserDefined.setStatus('current')
tlUpsAlarmBatteryBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 8))
if mibBuilder.loadTexts: tlUpsAlarmBatteryBad.setStatus('current')
tlUpsAlarmOnBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 9))
if mibBuilder.loadTexts: tlUpsAlarmOnBattery.setStatus('current')
tlUpsAlarmLowBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 10))
if mibBuilder.loadTexts: tlUpsAlarmLowBattery.setStatus('current')
tlUpsAlarmDepletedBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 11))
if mibBuilder.loadTexts: tlUpsAlarmDepletedBattery.setStatus('current')
tlUpsAlarmTempBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 12))
if mibBuilder.loadTexts: tlUpsAlarmTempBad.setStatus('current')
tlUpsAlarmInputBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 13))
if mibBuilder.loadTexts: tlUpsAlarmInputBad.setStatus('current')
tlUpsAlarmOutputBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 14))
if mibBuilder.loadTexts: tlUpsAlarmOutputBad.setStatus('current')
tlUpsAlarmOutputOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 15))
if mibBuilder.loadTexts: tlUpsAlarmOutputOverload.setStatus('current')
tlUpsAlarmOnBypass = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 16))
if mibBuilder.loadTexts: tlUpsAlarmOnBypass.setStatus('current')
tlUpsAlarmBypassBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 17))
if mibBuilder.loadTexts: tlUpsAlarmBypassBad.setStatus('current')
tlUpsAlarmOutputOffAsRequested = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 18))
if mibBuilder.loadTexts: tlUpsAlarmOutputOffAsRequested.setStatus('current')
tlUpsAlarmUpsOffAsRequested = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 19))
if mibBuilder.loadTexts: tlUpsAlarmUpsOffAsRequested.setStatus('current')
tlUpsAlarmChargerFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 20))
if mibBuilder.loadTexts: tlUpsAlarmChargerFailed.setStatus('current')
tlUpsAlarmUpsOutputOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 21))
if mibBuilder.loadTexts: tlUpsAlarmUpsOutputOff.setStatus('current')
tlUpsAlarmUpsSystemOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 22))
if mibBuilder.loadTexts: tlUpsAlarmUpsSystemOff.setStatus('current')
tlUpsAlarmFanFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 23))
if mibBuilder.loadTexts: tlUpsAlarmFanFailure.setStatus('current')
tlUpsAlarmFuseFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 24))
if mibBuilder.loadTexts: tlUpsAlarmFuseFailure.setStatus('current')
tlUpsAlarmGeneralFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 25))
if mibBuilder.loadTexts: tlUpsAlarmGeneralFault.setStatus('current')
tlUpsAlarmDiagnosticTestFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 26))
if mibBuilder.loadTexts: tlUpsAlarmDiagnosticTestFailed.setStatus('current')
tlUpsAlarmCommunicationsLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 27))
if mibBuilder.loadTexts: tlUpsAlarmCommunicationsLost.setStatus('current')
tlUpsAlarmAwaitingPower = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 28))
if mibBuilder.loadTexts: tlUpsAlarmAwaitingPower.setStatus('current')
tlUpsAlarmShutdownPending = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 29))
if mibBuilder.loadTexts: tlUpsAlarmShutdownPending.setStatus('current')
tlUpsAlarmShutdownImminent = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 30))
if mibBuilder.loadTexts: tlUpsAlarmShutdownImminent.setStatus('current')
tlUpsAlarmTestInProgress = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 31))
if mibBuilder.loadTexts: tlUpsAlarmTestInProgress.setStatus('current')
tlUpsAlarmCircuitBreaker1Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 32))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker1Open.setStatus('current')
tlUpsAlarmCircuitBreaker2Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 33))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker2Open.setStatus('current')
tlUpsAlarmCircuitBreaker3Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 34))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker3Open.setStatus('current')
tlUpsAlarmCircuitBreaker4Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 35))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker4Open.setStatus('current')
tlUpsAlarmCircuitBreaker5Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 36))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker5Open.setStatus('current')
tlUpsAlarmCircuitBreaker6Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 37))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker6Open.setStatus('current')
tlUpsAlarmCircuitBreaker7Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 38))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker7Open.setStatus('current')
tlUpsAlarmCircuitBreaker8Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 39))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker8Open.setStatus('current')
tlUpsAlarmCurrent1AboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 40))
if mibBuilder.loadTexts: tlUpsAlarmCurrent1AboveThreshold.setStatus('current')
tlUpsAlarmCurrent2AboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 41))
if mibBuilder.loadTexts: tlUpsAlarmCurrent2AboveThreshold.setStatus('current')
tlUpsAlarmCurrent3AboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 42))
if mibBuilder.loadTexts: tlUpsAlarmCurrent3AboveThreshold.setStatus('current')
tlUpsAlarmRuntimeBelowWarningLevel = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 43))
if mibBuilder.loadTexts: tlUpsAlarmRuntimeBelowWarningLevel.setStatus('current')
tlUpsAlarmBusStartVoltageLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 44))
if mibBuilder.loadTexts: tlUpsAlarmBusStartVoltageLow.setStatus('current')
tlUpsAlarmBusOverVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 45))
if mibBuilder.loadTexts: tlUpsAlarmBusOverVoltage.setStatus('current')
tlUpsAlarmBusUnderVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 46))
if mibBuilder.loadTexts: tlUpsAlarmBusUnderVoltage.setStatus('current')
tlUpsAlarmBusVoltageUnbalanced = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 47))
if mibBuilder.loadTexts: tlUpsAlarmBusVoltageUnbalanced.setStatus('current')
tlUpsAlarmInverterSoftStartBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 48))
if mibBuilder.loadTexts: tlUpsAlarmInverterSoftStartBad.setStatus('current')
tlUpsAlarmInverterOverVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 49))
if mibBuilder.loadTexts: tlUpsAlarmInverterOverVoltage.setStatus('current')
tlUpsAlarmInverterUnderVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 50))
if mibBuilder.loadTexts: tlUpsAlarmInverterUnderVoltage.setStatus('current')
tlUpsAlarmInverterCircuitBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 51))
if mibBuilder.loadTexts: tlUpsAlarmInverterCircuitBad.setStatus('current')
tlUpsAlarmBatteryOverVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 52))
if mibBuilder.loadTexts: tlUpsAlarmBatteryOverVoltage.setStatus('current')
tlUpsAlarmBatteryUnderVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 53))
if mibBuilder.loadTexts: tlUpsAlarmBatteryUnderVoltage.setStatus('current')
tlUpsAlarmSiteWiringFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 54))
if mibBuilder.loadTexts: tlUpsAlarmSiteWiringFault.setStatus('current')
tlUpsAlarmOverTemperatureProtection = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 55))
if mibBuilder.loadTexts: tlUpsAlarmOverTemperatureProtection.setStatus('current')
tlUpsAlarmOverCharged = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 56))
if mibBuilder.loadTexts: tlUpsAlarmOverCharged.setStatus('current')
tlUpsAlarmEPOActive = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 57))
if mibBuilder.loadTexts: tlUpsAlarmEPOActive.setStatus('current')
tlUpsAlarmBypassFrequencyBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 58))
if mibBuilder.loadTexts: tlUpsAlarmBypassFrequencyBad.setStatus('current')
tlUpsAlarmExternalSmartBatteryAgeAboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 59))
if mibBuilder.loadTexts: tlUpsAlarmExternalSmartBatteryAgeAboveThreshold.setStatus('current')
tlUpsAlarmExternalNonSmartBatteryAgeAboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 60))
if mibBuilder.loadTexts: tlUpsAlarmExternalNonSmartBatteryAgeAboveThreshold.setStatus('current')
tlUpsAlarmSmartBatteryCommLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 61))
if mibBuilder.loadTexts: tlUpsAlarmSmartBatteryCommLost.setStatus('current')
tlUpsAlarmSourceAOutage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 62))
if mibBuilder.loadTexts: tlUpsAlarmSourceAOutage.setStatus('current')
tlUpsAlarmSourceBOutage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 63))
if mibBuilder.loadTexts: tlUpsAlarmSourceBOutage.setStatus('current')
tlUpsAlarmWatchdogReset = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 64))
if mibBuilder.loadTexts: tlUpsAlarmWatchdogReset.setStatus('current')
tlUpsAlarmDevName = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmDevName.setStatus('deprecated')
tlUpsAlarmDevLocation = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmDevLocation.setStatus('deprecated')
tlUpsAlarmCategory = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmCategory.setStatus('deprecated')
tlUpsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 7))
tlUpsTestDate = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsTestDate.setStatus('current')
tlUpsTestResultsDetail = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsTestResultsDetail.setStatus('current')
tlUpsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 8))
tlUpsWatchdogSupported = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsWatchdogSupported.setStatus('current')
tlUpsWatchdogSecsBeforeReboot = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 2), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsWatchdogSecsBeforeReboot.setStatus('current')
tlUpsWellKnownControls = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3))
tlUpsControlSelfTest = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsControlSelfTest.setStatus('current')
tlUpsControlRamp = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsControlRamp.setStatus('current')
tlUpsControlShed = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsControlShed.setStatus('current')
tlUpsControlUpsOn = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsControlUpsOn.setStatus('current')
tlUpsControlUpsOff = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsControlUpsOff.setStatus('current')
tlUpsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 9))
tlUpsConfigBattReplDate = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 9, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsConfigBattReplDate.setStatus('current')
tlUpsConfigDisplayUnits = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("english", 0), ("metric", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsConfigDisplayUnits.setStatus('current')
tlUpsConfigExternalBattReplDate = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 9, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsConfigExternalBattReplDate.setStatus('current')
tlUpsOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 10))
tlUpsOutletNumOutlets = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletNumOutlets.setStatus('current')
tlUpsOutletTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2), )
if mibBuilder.loadTexts: tlUpsOutletTable.setStatus('current')
tlUpsOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1), ).setIndexNames((0, "TRIPPLITE-12X", "tlUpsOutletIndex"))
if mibBuilder.loadTexts: tlUpsOutletEntry.setStatus('current')
tlUpsOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletIndex.setStatus('current')
tlUpsOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletState.setStatus('current')
tlUpsOutletType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletType.setStatus('current')
tlUpsOutletControl = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletControl.setStatus('current')
tlUpsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletName.setStatus('current')
tlUpsOutletRampAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("remainOff", 0), ("turnOnAfterDelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletRampAction.setStatus('current')
tlUpsOutletRampDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("delayInSeconds", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletRampDataType.setStatus('current')
tlUpsOutletRampData = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletRampData.setStatus('current')
tlUpsOutletShedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("remainOn", 0), ("turnOffAfterDelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletShedAction.setStatus('current')
tlUpsOutletShedDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("delayInSeconds", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletShedDataType.setStatus('current')
tlUpsOutletShedData = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletShedData.setStatus('current')
tlUpsOutletGroupNdx = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletGroupNdx.setStatus('current')
tlUpsOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 13), PositiveInteger()).setUnits('0.1 RMS Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletCurrent.setStatus('current')
tlUpsOutletPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 14), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletPower.setStatus('current')
tlUpsOutletGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 11))
tlUpsOutletNumOutletGroups = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletNumOutletGroups.setStatus('current')
tlUpsOutletGroupTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2), )
if mibBuilder.loadTexts: tlUpsOutletGroupTable.setStatus('current')
tlUpsOutletGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1), ).setIndexNames((0, "TRIPPLITE-12X", "tlUpsOutletGroupIndex"))
if mibBuilder.loadTexts: tlUpsOutletGroupEntry.setStatus('current')
tlUpsOutletGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletGroupIndex.setStatus('current')
tlUpsOutletGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletGroupRowStatus.setStatus('current')
tlUpsOutletGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletGroupName.setStatus('current')
tlUpsOutletGroupDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletGroupDesc.setStatus('current')
tlUpsOutletGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletGroupState.setStatus('current')
tlUpsOutletGroupControl = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletGroupControl.setStatus('current')
tlUpsMainOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 12))
tlUpsMainOutletState = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsMainOutletState.setStatus('current')
tlUpsMainOutletControllable = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 12, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsMainOutletControllable.setStatus('current')
tlUpsMainOutletControl = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsMainOutletControl.setStatus('current')
tlUpsEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 13))
tlUpsTemperature = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsTemperature.setStatus('current')
tlUpsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 2))
tlUpsTrapAlarmEntryAddedV1 = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2) + (0,3)).setObjects(("TRIPPLITE-12X", "tlUpsAlarmId"), ("TRIPPLITE-12X", "tlUpsAlarmDescr"), ("TRIPPLITE-12X", "tlUpsAlarmDetail"), ("TRIPPLITE-12X", "tlUpsAlarmDeviceId"), ("TRIPPLITE-12X", "tlUpsAlarmDeviceName"), ("TRIPPLITE-12X", "tlUpsAlarmLocation"), ("TRIPPLITE-12X", "tlUpsAlarmGroup"))
tlUpsTrapAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2, 3)).setObjects(("TRIPPLITE-12X", "tlUpsAlarmId"), ("TRIPPLITE-12X", "tlUpsAlarmDescr"), ("TRIPPLITE-12X", "tlUpsAlarmDetail"), ("TRIPPLITE-12X", "tlUpsAlarmDeviceId"), ("TRIPPLITE-12X", "tlUpsAlarmDeviceName"), ("TRIPPLITE-12X", "tlUpsAlarmLocation"), ("TRIPPLITE-12X", "tlUpsAlarmGroup"))
if mibBuilder.loadTexts: tlUpsTrapAlarmEntryAdded.setStatus('current')
tlUpsTrapAlarmEntryRemovedV1 = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2) + (0,4)).setObjects(("TRIPPLITE-12X", "tlUpsAlarmId"), ("TRIPPLITE-12X", "tlUpsAlarmDescr"), ("TRIPPLITE-12X", "tlUpsAlarmDetail"), ("TRIPPLITE-12X", "tlUpsAlarmDeviceId"), ("TRIPPLITE-12X", "tlUpsAlarmDeviceName"), ("TRIPPLITE-12X", "tlUpsAlarmLocation"), ("TRIPPLITE-12X", "tlUpsAlarmGroup"))
tlUpsTrapAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2, 4)).setObjects(("TRIPPLITE-12X", "tlUpsAlarmId"), ("TRIPPLITE-12X", "tlUpsAlarmDescr"), ("TRIPPLITE-12X", "tlUpsAlarmDetail"), ("TRIPPLITE-12X", "tlUpsAlarmDeviceId"), ("TRIPPLITE-12X", "tlUpsAlarmDeviceName"), ("TRIPPLITE-12X", "tlUpsAlarmLocation"), ("TRIPPLITE-12X", "tlUpsAlarmGroup"))
if mibBuilder.loadTexts: tlUpsTrapAlarmEntryRemoved.setStatus('current')
tlUpsTrapSystemStartup = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2, 5))
if mibBuilder.loadTexts: tlUpsTrapSystemStartup.setStatus('current')
tlUpsTrapSystemShutdown = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2, 6))
if mibBuilder.loadTexts: tlUpsTrapSystemShutdown.setStatus('current')
tlEnviroSense = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101))
tlEnvEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101, 1))
tlEnvTemperatureData = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101, 1, 1))
tlEnvTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvTemperatureC.setStatus('current')
tlEnvTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvTemperatureF.setStatus('current')
tlEnvTemperatureLowLimit = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlEnvTemperatureLowLimit.setStatus('current')
tlEnvTemperatureHighLimit = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlEnvTemperatureHighLimit.setStatus('current')
tlEnvTemperatureInAlarm = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvTemperatureInAlarm.setStatus('current')
tlEnvHumidityData = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101, 1, 2))
tlEnvHumidity = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvHumidity.setStatus('current')
tlEnvHumidityLowLimit = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlEnvHumidityLowLimit.setStatus('current')
tlEnvHumidityHighLimit = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlEnvHumidityHighLimit.setStatus('current')
tlEnvHumidityInAlarm = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 2, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvHumidityInAlarm.setStatus('current')
tlEnvContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101, 2))
tlEnvContactTable = MibTable((1, 3, 6, 1, 4, 1, 850, 101, 2, 1), )
if mibBuilder.loadTexts: tlEnvContactTable.setStatus('current')
tlEnvContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1), ).setIndexNames((0, "TRIPPLITE-12X", "tlEnvContactIndex"))
if mibBuilder.loadTexts: tlEnvContactEntry.setStatus('current')
tlEnvContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvContactIndex.setStatus('current')
tlEnvContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlEnvContactName.setStatus('current')
tlEnvContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvContactStatus.setStatus('current')
tlEnvContactConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normallyOpen", 0), ("normallyClosed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlEnvContactConfig.setStatus('current')
tlCooling = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103))
tlCoolingEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 1))
tlCoolingIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 1, 1))
tlCoolingModel = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingModel.setStatus('current')
tlCoolingManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingManufacturer.setStatus('current')
tlCoolingSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingSerialNumber.setStatus('current')
tlCoolingFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingFirmwareVersion.setStatus('current')
tlCoolingHostSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingHostSoftwareVersion.setStatus('current')
tlCoolingName = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingName.setStatus('current')
tlCoolingLocation = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingLocation.setStatus('current')
tlCoolingStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 1, 2))
tlCoolingCondOutletTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCondOutletTemp.setStatus('current')
tlCoolingCondInletTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCondInletTemp.setStatus('current')
tlCoolingRefrigerantTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingRefrigerantTemp.setStatus('current')
tlCoolingEvapSurfaceTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingEvapSurfaceTemp.setStatus('current')
tlCoolingSuctionPressure = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingSuctionPressure.setStatus('current')
tlCoolingDischargePressure = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingDischargePressure.setStatus('current')
tlCoolingEvapFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 0), ("low", 1), ("medLow", 2), ("med", 3), ("medHi", 4), ("hi", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingEvapFanSpeed.setStatus('current')
tlCoolingCondFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("low", 1), ("hi", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCondFanSpeed.setStatus('current')
tlCoolingCompFrequency = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCompFrequency.setStatus('current')
tlCoolingEEVPercentage = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingEEVPercentage.setStatus('current')
tlCoolingUnitCurrent = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingUnitCurrent.setStatus('current')
tlCoolingFanCurrent = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingFanCurrent.setStatus('current')
tlCoolingCompCurrent = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCompCurrent.setStatus('current')
tlCoolingReturnAirTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingReturnAirTemp.setStatus('current')
tlCoolingSuctionTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingSuctionTemp.setStatus('current')
tlCoolingSupplyAirTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingSupplyAirTemp.setStatus('current')
tlCoolingRunTimes = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 1, 3))
tlCoolingAirFilterRunHours = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingAirFilterRunHours.setStatus('current')
tlCoolingEvapFanRunDays = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingEvapFanRunDays.setStatus('current')
tlCoolingCondFanRunDays = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCondFanRunDays.setStatus('current')
tlCoolingCompressorRunDays = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCompressorRunDays.setStatus('current')
tlCoolingCondPumpRunDays = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCondPumpRunDays.setStatus('current')
tlCoolingAtomizerRunDays = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingAtomizerRunDays.setStatus('current')
tlCoolingConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 1, 4))
tlCoolingOnOff = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("turnOffUnit", 0), ("turnOnUnit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingOnOff.setStatus('current')
tlCoolingSetPointTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingSetPointTemp.setStatus('current')
tlCoolingAutoStart = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingAutoStart.setStatus('current')
tlCoolingFanSpeedOverride = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("autoFanSpeed", 0), ("low", 1), ("medLow", 2), ("med", 3), ("medHi", 4), ("hi", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingFanSpeedOverride.setStatus('current')
tlCoolingControlType = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("returnAirTemp", 0), ("remoteTemperature", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingControlType.setStatus('current')
tlCoolingCurrentRemoteTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingCurrentRemoteTemp.setStatus('current')
tlCoolingDisplayUnits = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("metric", 0), ("english", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingDisplayUnits.setStatus('current')
tlCoolingBeepOnKey = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noBeep", 0), ("beepOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingBeepOnKey.setStatus('current')
tlCoolingOutputRelaySource = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("allAlarmsAndWarnings", 1), ("criticalAlarmsOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingOutputRelaySource.setStatus('current')
tlCoolingOffOnLeak = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("turnOff", 0), ("alarmOnly", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingOffOnLeak.setStatus('current')
tlCoolingOffOnInputContact = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("turnOff", 0), ("alarmOnly", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingOffOnInputContact.setStatus('current')
tlCoolingInputContactType = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ncRelay", 0), ("noRelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingInputContactType.setStatus('current')
tlCoolingOutputRelayDefault = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nc", 0), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingOutputRelayDefault.setStatus('current')
tlCoolingAirFilterInterval = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingAirFilterInterval.setStatus('current')
tlCoolingWaterLeakContactType = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noRelay", 0), ("ncRelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingWaterLeakContactType.setStatus('current')
tlCoolingThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 1, 5))
tlCoolingMaxAirFilterRunHours = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingMaxAirFilterRunHours.setStatus('current')
tlCoolingEnableAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingEnableAirFilterAlarm.setStatus('current')
tlCoolingMaxSupplyTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingMaxSupplyTemp.setStatus('current')
tlCoolingMinSupplyTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingMinSupplyTemp.setStatus('current')
tlCoolingTempDiffAlarm = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingTempDiffAlarm.setStatus('current')
tlCoolingMaxReturnAirTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingMaxReturnAirTemp.setStatus('current')
tlCoolingAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 6))
tlCoolingWellKnownAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 6, 3))
tlCoolingSupplyAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 1))
if mibBuilder.loadTexts: tlCoolingSupplyAirSensorFault.setStatus('current')
tlCoolingReturnAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 2))
if mibBuilder.loadTexts: tlCoolingReturnAirSensorFault.setStatus('current')
tlCoolingCondenserInletAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 3))
if mibBuilder.loadTexts: tlCoolingCondenserInletAirSensorFault.setStatus('current')
tlCoolingCondenserOutletAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 4))
if mibBuilder.loadTexts: tlCoolingCondenserOutletAirSensorFault.setStatus('current')
tlCoolingSuctionTemperatureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 5))
if mibBuilder.loadTexts: tlCoolingSuctionTemperatureSensorFault.setStatus('current')
tlCoolingEvaporatorTemperatureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 6))
if mibBuilder.loadTexts: tlCoolingEvaporatorTemperatureSensorFault.setStatus('current')
tlCoolingAirFilterClogged = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 7))
if mibBuilder.loadTexts: tlCoolingAirFilterClogged.setStatus('current')
tlCoolingAirFilterRunHoursViolation = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 8))
if mibBuilder.loadTexts: tlCoolingAirFilterRunHoursViolation.setStatus('current')
tlCoolingSuctionPressureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 9))
if mibBuilder.loadTexts: tlCoolingSuctionPressureSensorFault.setStatus('current')
tlCoolingInverterCommunicationsFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 10))
if mibBuilder.loadTexts: tlCoolingInverterCommunicationsFault.setStatus('current')
tlCoolingRemoteShutdownViaInputContact = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 11))
if mibBuilder.loadTexts: tlCoolingRemoteShutdownViaInputContact.setStatus('current')
tlCoolingCondensatePumpFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 12))
if mibBuilder.loadTexts: tlCoolingCondensatePumpFault.setStatus('current')
tlCoolingLowRefrigerantStartupFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 13))
if mibBuilder.loadTexts: tlCoolingLowRefrigerantStartupFault.setStatus('current')
tlCoolingCondenserFanFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 14))
if mibBuilder.loadTexts: tlCoolingCondenserFanFault.setStatus('current')
tlCoolingCondenserFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 15))
if mibBuilder.loadTexts: tlCoolingCondenserFailure.setStatus('current')
tlCoolingEvaporatorCoolingFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 16))
if mibBuilder.loadTexts: tlCoolingEvaporatorCoolingFailure.setStatus('current')
tlCoolingReturnAirTempHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 17))
if mibBuilder.loadTexts: tlCoolingReturnAirTempHigh.setStatus('current')
tlCoolingSupplyAirTempHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 18))
if mibBuilder.loadTexts: tlCoolingSupplyAirTempHigh.setStatus('current')
tlCoolingEvaporatorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 19))
if mibBuilder.loadTexts: tlCoolingEvaporatorFailure.setStatus('current')
tlCoolingEvaporatorFreezeUp = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 20))
if mibBuilder.loadTexts: tlCoolingEvaporatorFreezeUp.setStatus('current')
tlCoolingDischargePressureHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 21))
if mibBuilder.loadTexts: tlCoolingDischargePressureHigh.setStatus('current')
tlCoolingPressureGaugeFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 22))
if mibBuilder.loadTexts: tlCoolingPressureGaugeFailure.setStatus('current')
tlCoolingDischargePressurePersistentHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 23))
if mibBuilder.loadTexts: tlCoolingDischargePressurePersistentHigh.setStatus('current')
tlCoolingSuctionPressureLowStartFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 24))
if mibBuilder.loadTexts: tlCoolingSuctionPressureLowStartFailure.setStatus('current')
tlCoolingSuctionPressureLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 25))
if mibBuilder.loadTexts: tlCoolingSuctionPressureLow.setStatus('current')
tlCoolingSuctionPressurePersistentLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 26))
if mibBuilder.loadTexts: tlCoolingSuctionPressurePersistentLow.setStatus('current')
tlCoolingStartupLinePressureImbalance = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 27))
if mibBuilder.loadTexts: tlCoolingStartupLinePressureImbalance.setStatus('current')
tlCoolingCompressorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 28))
if mibBuilder.loadTexts: tlCoolingCompressorFailure.setStatus('current')
tlCoolingCurrentLimit = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 29))
if mibBuilder.loadTexts: tlCoolingCurrentLimit.setStatus('current')
tlCoolingWaterLeak = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 30))
if mibBuilder.loadTexts: tlCoolingWaterLeak.setStatus('current')
tlCoolingFanUnderCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 31))
if mibBuilder.loadTexts: tlCoolingFanUnderCurrent.setStatus('current')
tlCoolingFanOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 32))
if mibBuilder.loadTexts: tlCoolingFanOverCurrent.setStatus('current')
tlCoolingDischargePressureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 33))
if mibBuilder.loadTexts: tlCoolingDischargePressureSensorFault.setStatus('current')
tlCoolingWaterFull = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 34))
if mibBuilder.loadTexts: tlCoolingWaterFull.setStatus('current')
tlCoolingAutoCoolingOn = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 35))
if mibBuilder.loadTexts: tlCoolingAutoCoolingOn.setStatus('current')
tlCoolingPowerButtonPressed = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 36))
if mibBuilder.loadTexts: tlCoolingPowerButtonPressed.setStatus('current')
tlCoolingDisconnectedFromDevice = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 37))
if mibBuilder.loadTexts: tlCoolingDisconnectedFromDevice.setStatus('current')
tlSrCoolNet = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 104))
tlSrCoolNetData = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 104, 1))
tlSrCoolNetIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 104, 1, 1))
tlSrCoolNetModel = MibScalar((1, 3, 6, 1, 4, 1, 850, 104, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlSrCoolNetModel.setStatus('current')
tlSrCoolNetManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 850, 104, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlSrCoolNetManufacturer.setStatus('current')
tlSrCoolNetSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 850, 104, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlSrCoolNetSerialNumber.setStatus('current')
tlSrCoolNetHostSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 850, 104, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlSrCoolNetHostSoftwareVersion.setStatus('current')
tlSrCoolNetName = MibScalar((1, 3, 6, 1, 4, 1, 850, 104, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlSrCoolNetName.setStatus('current')
tlSrCoolNetLocation = MibScalar((1, 3, 6, 1, 4, 1, 850, 104, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlSrCoolNetLocation.setStatus('current')
tlSrCoolNetStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 104, 1, 2))
tlSrCoolNetMode = MibScalar((1, 3, 6, 1, 4, 1, 850, 104, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 0), ("idle", 1), ("cooling", 2), ("unknown", 3), ("dehumidifying", 4), ("defrost", 5), ("notconnected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlSrCoolNetMode.setStatus('current')
tlSrCoolNetFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 850, 104, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("low", 1), ("med", 2), ("hi", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlSrCoolNetFanSpeed.setStatus('current')
tlSrCoolNetReturnAirTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 104, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlSrCoolNetReturnAirTemp.setStatus('current')
tlSrCoolNetWaterFull = MibScalar((1, 3, 6, 1, 4, 1, 850, 104, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("waterNotFull", 0), ("waterFull", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlSrCoolNetWaterFull.setStatus('current')
tlSrCoolNetCurrentRemoteTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 104, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlSrCoolNetCurrentRemoteTemp.setStatus('current')
tlSrCoolNetDisplayUnits = MibScalar((1, 3, 6, 1, 4, 1, 850, 104, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("metric", 0), ("english", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlSrCoolNetDisplayUnits.setStatus('current')
tlSrCoolNetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 104, 1, 3))
tlSrCoolNetOnOff = MibScalar((1, 3, 6, 1, 4, 1, 850, 104, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("turnOffUnit", 0), ("turnOnUnit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlSrCoolNetOnOff.setStatus('current')
tlSrCoolSetMode = MibScalar((1, 3, 6, 1, 4, 1, 850, 104, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cooling", 0), ("dehumidifying", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlSrCoolSetMode.setStatus('current')
tlSrCoolNetSetPointTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 104, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlSrCoolNetSetPointTemp.setStatus('current')
tlSrCoolNetRemoteSetPointTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 104, 1, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlSrCoolNetRemoteSetPointTemp.setStatus('current')
tlSrCoolNetFanSpeedSetting = MibScalar((1, 3, 6, 1, 4, 1, 850, 104, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("auto", 0), ("low", 1), ("med", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlSrCoolNetFanSpeedSetting.setStatus('current')
tlSrCoolNetRemoteSetpointEnable = MibScalar((1, 3, 6, 1, 4, 1, 850, 104, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlSrCoolNetRemoteSetpointEnable.setStatus('current')
tlSrCoolNetFanAlwaysOn = MibScalar((1, 3, 6, 1, 4, 1, 850, 104, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlSrCoolNetFanAlwaysOn.setStatus('current')
tlSrCoolNetAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 104, 2))
tlSrCoolNetWellKnownAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 104, 2, 1))
tlSrCoolNetWaterFullAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 104, 2, 1, 1))
if mibBuilder.loadTexts: tlSrCoolNetWaterFullAlarm.setStatus('current')
tlConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20))
tlCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 1))
tlGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2))
tlSubsetGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 1))
tlBasicGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 2))
tlFullGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 3))
tlUpsFullGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100))
tlUpsFullIdentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 1)).setObjects(("TRIPPLITE-12X", "tlUpsIdentUpsSoftwareChecksum"), ("TRIPPLITE-12X", "tlUpsIdentSerialNum"), ("TRIPPLITE-12X", "tlUpsIdentID"), ("TRIPPLITE-12X", "tlUpsSelectedDeviceID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullIdentGroup = tlUpsFullIdentGroup.setStatus('current')
tlUpsFullBatteryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 2)).setObjects(("TRIPPLITE-12X", "tlUpsBatteryAge"), ("TRIPPLITE-12X", "tlUpsTemperatureF"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullBatteryGroup = tlUpsFullBatteryGroup.setStatus('current')
tlUpsFullAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 6))
tlUpsFullAlarmObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 6, 1)).setObjects(("TRIPPLITE-12X", "tlUpsAlarmDevName"), ("TRIPPLITE-12X", "tlUpsAlarmDevLocation"), ("TRIPPLITE-12X", "tlUpsAlarmCategory"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullAlarmObjsGroup = tlUpsFullAlarmObjsGroup.setStatus('current')
tlUpsFullTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 7)).setObjects(("TRIPPLITE-12X", "tlUpsTestDate"), ("TRIPPLITE-12X", "tlUpsTestResultsDetail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullTestGroup = tlUpsFullTestGroup.setStatus('current')
tlUpsFullControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 8)).setObjects(("TRIPPLITE-12X", "tlUpsWatchdogSupported"), ("TRIPPLITE-12X", "tlUpsWatchdogSecsBeforeReboot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullControlGroup = tlUpsFullControlGroup.setStatus('current')
tlUpsFullConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 9)).setObjects(("TRIPPLITE-12X", "tlUpsConfigBattReplDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullConfigGroup = tlUpsFullConfigGroup.setStatus('current')
tlUpsFullOutletGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 10)).setObjects(("TRIPPLITE-12X", "tlUpsOutletNumOutlets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullOutletGroup = tlUpsFullOutletGroup.setStatus('current')
mibBuilder.exportSymbols("TRIPPLITE-12X", tlUpsOutletShedDataType=tlUpsOutletShedDataType, tlUpsWatchdogSupported=tlUpsWatchdogSupported, tlSrCoolSetMode=tlSrCoolSetMode, tlUpsInputVoltageIndex=tlUpsInputVoltageIndex, tlUpsAlarmCircuitBreaker6Open=tlUpsAlarmCircuitBreaker6Open, tlCoolingConfig=tlCoolingConfig, unknown=unknown, tlUpsEnvironment=tlUpsEnvironment, tlCoolingEvapFanSpeed=tlCoolingEvapFanSpeed, tlEnvHumidityLowLimit=tlEnvHumidityLowLimit, tlUpsAlarm=tlUpsAlarm, tlUpsOutletGroupTable=tlUpsOutletGroupTable, tlUpsAlarmInverterCircuitBad=tlUpsAlarmInverterCircuitBad, tlCoolingStartupLinePressureImbalance=tlCoolingStartupLinePressureImbalance, tlPASnmpContactsTable=tlPASnmpContactsTable, tlCoolingEvaporatorTemperatureSensorFault=tlCoolingEvaporatorTemperatureSensorFault, tlUpsAlarmUserDefined=tlUpsAlarmUserDefined, tlUpsOutletRampData=tlUpsOutletRampData, tlCoolingStatus=tlCoolingStatus, tlUpsTemperatureF=tlUpsTemperatureF, tlUpsInput=tlUpsInput, tlUpsOutletGroupNdx=tlUpsOutletGroupNdx, tlCoolingAutoCoolingOn=tlCoolingAutoCoolingOn, tlUpsAlarmShutdownImminent=tlUpsAlarmShutdownImminent, tlCoolingThresholds=tlCoolingThresholds, tlCoolingDischargePressurePersistentHigh=tlCoolingDischargePressurePersistentHigh, tlPAContacts=tlPAContacts, tlUpsSelectedDeviceID=tlUpsSelectedDeviceID, tlUpsTrapAlarmEntryAdded=tlUpsTrapAlarmEntryAdded, tlUpsIdentSerialNum=tlUpsIdentSerialNum, tlCoolingAutoStart=tlCoolingAutoStart, tlUpsAlarmShutdownPending=tlUpsAlarmShutdownPending, tlUpsOutputPowerTotal=tlUpsOutputPowerTotal, tlUpsOutletCurrent=tlUpsOutletCurrent, tlUpsAlarmCurrent3AboveThreshold=tlUpsAlarmCurrent3AboveThreshold, tlUpsMainOutletState=tlUpsMainOutletState, tlSrCoolNet=tlSrCoolNet, tlUpsAlarmSourceBOutage=tlUpsAlarmSourceBOutage, tlCoolingManufacturer=tlCoolingManufacturer, freebsd=freebsd, tlUpsInputVoltageEntry=tlUpsInputVoltageEntry, tlCoolingOffOnLeak=tlCoolingOffOnLeak, tlUpsAlarmDepletedBattery=tlUpsAlarmDepletedBattery, tlCoolingSetPointTemp=tlCoolingSetPointTemp, tlCoolingRemoteShutdownViaInputContact=tlCoolingRemoteShutdownViaInputContact, linux=linux, tlEnumerations=tlEnumerations, tlSrCoolNetOnOff=tlSrCoolNetOnOff, tlUpsAlarmCircuitBreaker8Open=tlUpsAlarmCircuitBreaker8Open, tlUpsAlarmUpsOutputOff=tlUpsAlarmUpsOutputOff, tlCoolingSuctionPressureSensorFault=tlCoolingSuctionPressureSensorFault, tlUpsInputVoltage=tlUpsInputVoltage, tlUpsAlarmGroup=tlUpsAlarmGroup, tlUpsAlarmChargerFailed=tlUpsAlarmChargerFailed, tlSrCoolNetWaterFullAlarm=tlSrCoolNetWaterFullAlarm, tlUpsMainOutlet=tlUpsMainOutlet, winnt=winnt, tlPASnmpContactIndex=tlPASnmpContactIndex, tlUpsOutletPower=tlUpsOutletPower, tlCoolingSuctionPressureLowStartFailure=tlCoolingSuctionPressureLowStartFailure, tlEnvContactIndex=tlEnvContactIndex, tlCoolingReturnAirTemp=tlCoolingReturnAirTemp, tlUpsBatteryAge=tlUpsBatteryAge, tlUpsAlarmFuseFailure=tlUpsAlarmFuseFailure, tlPASnmpContactPrivPassword=tlPASnmpContactPrivPassword, tlUpsAlarmBatteryOverVoltage=tlUpsAlarmBatteryOverVoltage, tlUpsAlarmBusVoltageUnbalanced=tlUpsAlarmBusVoltageUnbalanced, tlCoolingCondenserFailure=tlCoolingCondenserFailure, tlUpsAlarmCurrent2AboveThreshold=tlUpsAlarmCurrent2AboveThreshold, tlUpsOutputCircuits=tlUpsOutputCircuits, tlUpsAlarmBatteryUnderVoltage=tlUpsAlarmBatteryUnderVoltage, tlUpsFullGroups=tlUpsFullGroups, tlUpsAlarmInputBad=tlUpsAlarmInputBad, tlUpsAlarmPrimaryPowerOutage=tlUpsAlarmPrimaryPowerOutage, tlCoolingAirFilterRunHoursViolation=tlCoolingAirFilterRunHoursViolation, tlUpsAlarmDeviceName=tlUpsAlarmDeviceName, tlUpsOutletGroupEntry=tlUpsOutletGroupEntry, tlUpsObjects=tlUpsObjects, tlPAEmailContactIndex=tlPAEmailContactIndex, tlUpsFullBatteryGroup=tlUpsFullBatteryGroup, tlCoolingReturnAirSensorFault=tlCoolingReturnAirSensorFault, tlUpsOutletNumOutletGroups=tlUpsOutletNumOutletGroups, tlCoolingOffOnInputContact=tlCoolingOffOnInputContact, tlUpsAlarmSourceAOutage=tlUpsAlarmSourceAOutage, tlEnvContactEntry=tlEnvContactEntry, tlCoolingMaxReturnAirTemp=tlCoolingMaxReturnAirTemp, tlUpsAlarmBusOverVoltage=tlUpsAlarmBusOverVoltage, tlUpsWatchdogSecsBeforeReboot=tlUpsWatchdogSecsBeforeReboot, tlUpsAlarmWatchdogReset=tlUpsAlarmWatchdogReset, tlSrCoolNetName=tlSrCoolNetName, tlSrCoolNetStatus=tlSrCoolNetStatus, tlUpsControlRamp=tlUpsControlRamp, tlUpsAlarmBusStartVoltageLow=tlUpsAlarmBusStartVoltageLow, tlFullGroups=tlFullGroups, tlUpsAlarmLowBattery=tlUpsAlarmLowBattery, tlUpsOutlet=tlUpsOutlet, tlCoolingAirFilterRunHours=tlCoolingAirFilterRunHours, tlCoolingSuctionPressurePersistentLow=tlCoolingSuctionPressurePersistentLow, tlUpsControlUpsOn=tlUpsControlUpsOn, tlCoolingSuctionPressureLow=tlCoolingSuctionPressureLow, tlUpsAlarmBatteryBad=tlUpsAlarmBatteryBad, tlCoolingFanOverCurrent=tlCoolingFanOverCurrent, tlUpsOutletShedAction=tlUpsOutletShedAction, tlCoolingEnvironment=tlCoolingEnvironment, tlUpsAlarmCircuitBreaker1Open=tlUpsAlarmCircuitBreaker1Open, tlUpsAlarmCurrent1AboveThreshold=tlUpsAlarmCurrent1AboveThreshold, tlUpsOutletGroupControl=tlUpsOutletGroupControl, tlUpsTemperature=tlUpsTemperature, tlPowerAlert=tlPowerAlert, tlUpsInputSourceInUse=tlUpsInputSourceInUse, tlUpsAlarmEntry=tlUpsAlarmEntry, tlUpsAlarmDevLocation=tlUpsAlarmDevLocation, tlUpsMainOutletControl=tlUpsMainOutletControl, tlCoolingCompressorFailure=tlCoolingCompressorFailure, tlBasicGroups=tlBasicGroups, tlUpsTrapAlarmEntryAddedV1=tlUpsTrapAlarmEntryAddedV1, tlCoolingCondenserInletAirSensorFault=tlCoolingCondenserInletAirSensorFault, tlUpsAlarmTable=tlUpsAlarmTable, tlUpsTrapSystemStartup=tlUpsTrapSystemStartup, tlCoolingFirmwareVersion=tlCoolingFirmwareVersion, tlCoolingSuctionTemp=tlCoolingSuctionTemp, tlCoolingUnitCurrent=tlCoolingUnitCurrent, tlCoolingControlType=tlCoolingControlType, tlUpsConfigDisplayUnits=tlUpsConfigDisplayUnits, tlUpsOutputCircuitEntry=tlUpsOutputCircuitEntry, aix=aix, tlSrCoolNetWaterFull=tlSrCoolNetWaterFull, solintel=solintel, tlEnvTemperatureC=tlEnvTemperatureC, tlUpsAlarmSiteWiringFault=tlUpsAlarmSiteWiringFault, tlUpsOutletGroupName=tlUpsOutletGroupName, tlUpsOutputCircuitTable=tlUpsOutputCircuitTable, tlPAEmailContactRowStatus=tlPAEmailContactRowStatus, tlUpsAlarmBypassBad=tlUpsAlarmBypassBad, tlEnvContacts=tlEnvContacts, tlSrCoolNetAlarm=tlSrCoolNetAlarm, bsdi=bsdi, tlSrCoolNetManufacturer=tlSrCoolNetManufacturer, tlUpsOutletRampAction=tlUpsOutletRampAction, tlCoolingOutputRelaySource=tlCoolingOutputRelaySource, tlUpsAlarmCircuitBreaker2Open=tlUpsAlarmCircuitBreaker2Open, tlUpsAlarmCircuitBreaker3Open=tlUpsAlarmCircuitBreaker3Open, tlUpsOutputCircuitIndex=tlUpsOutputCircuitIndex, tlUpsOutletTable=tlUpsOutletTable, tlCoolingEEVPercentage=tlCoolingEEVPercentage, tlUpsControl=tlUpsControl, tlSrCoolNetFanAlwaysOn=tlSrCoolNetFanAlwaysOn, tlCoolingEvaporatorCoolingFailure=tlCoolingEvaporatorCoolingFailure, tlUpsExternalBatteryAge=tlUpsExternalBatteryAge, tlSrCoolNetSetPointTemp=tlSrCoolNetSetPointTemp, tlUpsAlarmTestInProgress=tlUpsAlarmTestInProgress, tlUpsOutputCircuitStatus=tlUpsOutputCircuitStatus, tlSrCoolNetData=tlSrCoolNetData, tlUpsFullAlarmGroup=tlUpsFullAlarmGroup, tlUpsOutletGroupDesc=tlUpsOutletGroupDesc, tlUpsAlarmMac=tlUpsAlarmMac, tlUpsAlarmBatteryAgeAboveThreshold=tlUpsAlarmBatteryAgeAboveThreshold, tlUpsAlarmCommunicationsLost=tlUpsAlarmCommunicationsLost, tlUpsControlShed=tlUpsControlShed, tlPASnmpContacts=tlPASnmpContacts, tlConformance=tlConformance, tlPANumberOfSnmpContacts=tlPANumberOfSnmpContacts, tlCoolingCurrentRemoteTemp=tlCoolingCurrentRemoteTemp, tlUpsWellKnownAlarms=tlUpsWellKnownAlarms, tlUpsOutputCircuitVoltage=tlUpsOutputCircuitVoltage, tlUpsMainOutletControllable=tlUpsMainOutletControllable, tlCoolingDischargePressureSensorFault=tlCoolingDischargePressureSensorFault, tlUpsAlarmCircuitBreaker7Open=tlUpsAlarmCircuitBreaker7Open, tlCoolingAirFilterClogged=tlCoolingAirFilterClogged, tlCoolingFanSpeedOverride=tlCoolingFanSpeedOverride, osx=osx, tlCoolingEnableAirFilterAlarm=tlCoolingEnableAirFilterAlarm, tlUpsAlarmRuntimeBelowWarningLevel=tlUpsAlarmRuntimeBelowWarningLevel, tlUpsOutletRampDataType=tlUpsOutletRampDataType, tlUpsTestDate=tlUpsTestDate, tlCoolingMaxAirFilterRunHours=tlCoolingMaxAirFilterRunHours, tlUpsTestResultsDetail=tlUpsTestResultsDetail, tlSrCoolNetSerialNumber=tlSrCoolNetSerialNumber, tlUpsAlarmLocation=tlUpsAlarmLocation, tlUpsAlarmUpsOffAsRequested=tlUpsAlarmUpsOffAsRequested, netbsd1=netbsd1, tlSrCoolNetRemoteSetPointTemp=tlSrCoolNetRemoteSetPointTemp, tlCoolingModel=tlCoolingModel, tlEnvContactTable=tlEnvContactTable, tlUpsAlarmTime=tlUpsAlarmTime, tlUpsAlarmDetail=tlUpsAlarmDetail, tlEnvTemperatureF=tlEnvTemperatureF, tlPASnmpContactSecurityName=tlPASnmpContactSecurityName, tlUpsFullControlGroup=tlUpsFullControlGroup, tlCoolingSupplyAirTemp=tlCoolingSupplyAirTemp, tlSrCoolNetConfig=tlSrCoolNetConfig, tlSrCoolNetHostSoftwareVersion=tlSrCoolNetHostSoftwareVersion, tlUpsAlarmFanFailure=tlUpsAlarmFanFailure, tlCoolingCondOutletTemp=tlCoolingCondOutletTemp, tlSrCoolNetLocation=tlSrCoolNetLocation, tlCoolingCondensatePumpFault=tlCoolingCondensatePumpFault, tlUpsOutletEntry=tlUpsOutletEntry, tlUpsAlarmOnBattery=tlUpsAlarmOnBattery, tlUpsInputNumVoltages=tlUpsInputNumVoltages, tlUpsOutletIndex=tlUpsOutletIndex, tlUpsAlarmCircuitBreaker4Open=tlUpsAlarmCircuitBreaker4Open, tlCoolingCompFrequency=tlCoolingCompFrequency, tlCoolingTempDiffAlarm=tlCoolingTempDiffAlarm, tlUpsIdentUpsSoftwareChecksum=tlUpsIdentUpsSoftwareChecksum, openbsd=openbsd, sunos4=sunos4, tlPAEmailContactAddress=tlPAEmailContactAddress, tlUpsPhaseImbalance=tlUpsPhaseImbalance, tlSrCoolNetFanSpeed=tlSrCoolNetFanSpeed, tlCoolingWellKnownAlarms=tlCoolingWellKnownAlarms, tlSrCoolNetReturnAirTemp=tlSrCoolNetReturnAirTemp, tlUpsAlarmSmartBatteryCommLost=tlUpsAlarmSmartBatteryCommLost, hpux10=hpux10, tlUpsOutputCircuitPower=tlUpsOutputCircuitPower, ultrix=ultrix, tlEnvTemperatureInAlarm=tlEnvTemperatureInAlarm, tlEnvContactName=tlEnvContactName, tlCoolingCondenserOutletAirSensorFault=tlCoolingCondenserOutletAirSensorFault, tlCoolingPowerButtonPressed=tlCoolingPowerButtonPressed, tlGroups=tlGroups, tlUpsOutletGroupRowStatus=tlUpsOutletGroupRowStatus, tlUpsOutletName=tlUpsOutletName, tlCoolingWaterFull=tlCoolingWaterFull, tlSrCoolNetCurrentRemoteTemp=tlSrCoolNetCurrentRemoteTemp, tlCoolingDischargePressureHigh=tlCoolingDischargePressureHigh, tlCoolingCondenserFanFault=tlCoolingCondenserFanFault, tlCoolingWaterLeak=tlCoolingWaterLeak, tlCoolingOnOff=tlCoolingOnOff, tlCoolingDischargePressure=tlCoolingDischargePressure, win32=win32, tlUpsFullOutletGroup=tlUpsFullOutletGroup, tlPAEmailContactName=tlPAEmailContactName, tlCoolingFanCurrent=tlCoolingFanCurrent, tlPAEmailContactEntry=tlPAEmailContactEntry, tlCoolingAlarm=tlCoolingAlarm, hpux9=hpux9, tlUpsAlarmDevName=tlUpsAlarmDevName, tlUpsControlUpsOff=tlUpsControlUpsOff, tlUpsTraps=tlUpsTraps, tlEnvHumidity=tlEnvHumidity, tlCompliances=tlCompliances, tlCooling=tlCooling, tlCoolingSupplyAirSensorFault=tlCoolingSupplyAirSensorFault, tlCoolingSuctionPressure=tlCoolingSuctionPressure, tlUpsIdent=tlUpsIdent, tlUpsConfig=tlUpsConfig, tlUpsAlarmOutputBad=tlUpsAlarmOutputBad, tlUpsFullAlarmObjsGroup=tlUpsFullAlarmObjsGroup, tlCoolingEvapSurfaceTemp=tlCoolingEvapSurfaceTemp, tlEnviroSense=tlEnviroSense, tlUpsInputSourceAvailability=tlUpsInputSourceAvailability, tlUpsOutletShedData=tlUpsOutletShedData, tlSrCoolNetFanSpeedSetting=tlSrCoolNetFanSpeedSetting, tlEnvContactConfig=tlEnvContactConfig)
mibBuilder.exportSymbols("TRIPPLITE-12X", tlCoolingCondPumpRunDays=tlCoolingCondPumpRunDays, tlCoolingPressureGaugeFailure=tlCoolingPressureGaugeFailure, tlCoolingCondFanRunDays=tlCoolingCondFanRunDays, irix=irix, tlUpsAlarmSecondaryPowerOutage=tlUpsAlarmSecondaryPowerOutage, tlUpsAggregatePowerFactor=tlUpsAggregatePowerFactor, tlCoolingBeepOnKey=tlCoolingBeepOnKey, tlSrCoolNetRemoteSetpointEnable=tlSrCoolNetRemoteSetpointEnable, tlCoolingRunTimes=tlCoolingRunTimes, tlPASnmpContactSnmpVersion=tlPASnmpContactSnmpVersion, tlUpsOutletGroup=tlUpsOutletGroup, tlUpsOutletGroupIndex=tlUpsOutletGroupIndex, tlCoolingEvapFanRunDays=tlCoolingEvapFanRunDays, tlPAEmailContacts=tlPAEmailContacts, tlUpsAlarmsPresent=tlUpsAlarmsPresent, tlUpsAlarmOutputCurrentChanged=tlUpsAlarmOutputCurrentChanged, tlUpsAlarmBypassFrequencyBad=tlUpsAlarmBypassFrequencyBad, tlUpsSnmpCardSerialNum=tlUpsSnmpCardSerialNum, tlUpsAlarmInverterOverVoltage=tlUpsAlarmInverterOverVoltage, tlUpsInputSourceTransitionCount=tlUpsInputSourceTransitionCount, tlCoolingLocation=tlCoolingLocation, tlCoolingAirFilterInterval=tlCoolingAirFilterInterval, tlPAEmailContactsTable=tlPAEmailContactsTable, tlCoolingCurrentLimit=tlCoolingCurrentLimit, tlUpsOutletGroupState=tlUpsOutletGroupState, tlUpsAlarmLoadLevelAboveThreshold=tlUpsAlarmLoadLevelAboveThreshold, tlPASnmpContactIpAddress=tlPASnmpContactIpAddress, tlUpsAlarmGeneralFault=tlUpsAlarmGeneralFault, tlUpsInputVoltageType=tlUpsInputVoltageType, tlEnvTemperatureData=tlEnvTemperatureData, solaris=solaris, tlEnvTemperatureLowLimit=tlEnvTemperatureLowLimit, sco=sco, tlUpsLocation=tlUpsLocation, tlCoolingSuctionTemperatureSensorFault=tlCoolingSuctionTemperatureSensorFault, tlSrCoolNetWellKnownAlarms=tlSrCoolNetWellKnownAlarms, tlCoolingName=tlCoolingName, tlCoolingCompressorRunDays=tlCoolingCompressorRunDays, tlPASnmpContactName=tlPASnmpContactName, tlPASnmpContactRowStatus=tlPASnmpContactRowStatus, tlCoolingMinSupplyTemp=tlCoolingMinSupplyTemp, tlCoolingRefrigerantTemp=tlCoolingRefrigerantTemp, tlUpsOutputCircuitPowerFactor=tlUpsOutputCircuitPowerFactor, win9x=win9x, tlCoolingSerialNumber=tlCoolingSerialNumber, tlCoolingEvaporatorFailure=tlCoolingEvaporatorFailure, tlSrCoolNetMode=tlSrCoolNetMode, tlPASnmpContactAuthPassword=tlPASnmpContactAuthPassword, tlUpsConfigBattReplDate=tlUpsConfigBattReplDate, tlSubsetGroups=tlSubsetGroups, tlUpsAlarmInverterUnderVoltage=tlUpsAlarmInverterUnderVoltage, tlPASnmpContactEntry=tlPASnmpContactEntry, tlCoolingFanUnderCurrent=tlCoolingFanUnderCurrent, tlCoolingHostSoftwareVersion=tlCoolingHostSoftwareVersion, tlUpsControlSelfTest=tlUpsControlSelfTest, tlCoolingWaterLeakContactType=tlCoolingWaterLeakContactType, tlUpsAlarmDiagnosticTestFailed=tlUpsAlarmDiagnosticTestFailed, tlPANumberOfEmailContacts=tlPANumberOfEmailContacts, tlUpsTrapAlarmEntryRemoved=tlUpsTrapAlarmEntryRemoved, tlCoolingMaxSupplyTemp=tlCoolingMaxSupplyTemp, PYSNMP_MODULE_ID=tlPowerAlert, hpux11=hpux11, tlSrCoolNetModel=tlSrCoolNetModel, tlUpsOutputCircuitLoadCurrent=tlUpsOutputCircuitLoadCurrent, tlCoolingCondFanSpeed=tlCoolingCondFanSpeed, tlUpsAlarmCircuitBreaker5Open=tlUpsAlarmCircuitBreaker5Open, tlPASnmpContactPort=tlPASnmpContactPort, tlUpsBattery=tlUpsBattery, tlUpsFullTestGroup=tlUpsFullTestGroup, tlUpsOutletType=tlUpsOutletType, tlUpsTrapAlarmEntryRemovedV1=tlUpsTrapAlarmEntryRemovedV1, tlPASystem=tlPASystem, tlCoolingSupplyAirTempHigh=tlCoolingSupplyAirTempHigh, tlUpsAlarmUpsSystemOff=tlUpsAlarmUpsSystemOff, tlUpsAlarmExternalNonSmartBatteryAgeAboveThreshold=tlUpsAlarmExternalNonSmartBatteryAgeAboveThreshold, tlCoolingInverterCommunicationsFault=tlCoolingInverterCommunicationsFault, tlUpsFullConfigGroup=tlUpsFullConfigGroup, tlUpsTrapSystemShutdown=tlUpsTrapSystemShutdown, tlUpsOutletNumOutlets=tlUpsOutletNumOutlets, tlCoolingReturnAirTempHigh=tlCoolingReturnAirTempHigh, tlUpsAlarmOnBypass=tlUpsAlarmOnBypass, tlSrCoolNetIdent=tlSrCoolNetIdent, tlUpsAlarmLoadOff=tlUpsAlarmLoadOff, tlUpsOutletControl=tlUpsOutletControl, tlUpsAlarmCategory=tlUpsAlarmCategory, tlUpsOutput=tlUpsOutput, tlUpsAlarmOutputOverload=tlUpsAlarmOutputOverload, tlCoolingDisplayUnits=tlCoolingDisplayUnits, tlUpsIdentID=tlUpsIdentID, tlCoolingIdent=tlCoolingIdent, tlUpsInputVoltageTable=tlUpsInputVoltageTable, tlCoolingLowRefrigerantStartupFault=tlCoolingLowRefrigerantStartupFault, tlUpsAlarmAwaitingPower=tlUpsAlarmAwaitingPower, tlUpsFullIdentGroup=tlUpsFullIdentGroup, osf=osf, tlEnvContactStatus=tlEnvContactStatus, tlCoolingCompCurrent=tlCoolingCompCurrent, tlEnvHumidityHighLimit=tlEnvHumidityHighLimit, tlUpsAlarmExternalSmartBatteryAgeAboveThreshold=tlUpsAlarmExternalSmartBatteryAgeAboveThreshold, tlCoolingEvaporatorFreezeUp=tlCoolingEvaporatorFreezeUp, tlUpsAlarmDescr=tlUpsAlarmDescr, tlOperatingSystems=tlOperatingSystems, tlCoolingDisconnectedFromDevice=tlCoolingDisconnectedFromDevice, tlCoolingOutputRelayDefault=tlCoolingOutputRelayDefault, tlUpsAlarmId=tlUpsAlarmId, tlUpsAlarmTempBad=tlUpsAlarmTempBad, tlUpsAlarmOverCharged=tlUpsAlarmOverCharged, tlUpsAlarmEPOActive=tlUpsAlarmEPOActive, tlUpsAlarmIp=tlUpsAlarmIp, tlEnvHumidityInAlarm=tlEnvHumidityInAlarm, tlSrCoolNetDisplayUnits=tlSrCoolNetDisplayUnits, tlCoolingInputContactType=tlCoolingInputContactType, tlUpsAlarmBusUnderVoltage=tlUpsAlarmBusUnderVoltage, tlUpsAlarmOverTemperatureProtection=tlUpsAlarmOverTemperatureProtection, tlCoolingAtomizerRunDays=tlCoolingAtomizerRunDays, tlUpsWellKnownControls=tlUpsWellKnownControls, tlUPS=tlUPS, tlUpsConfigExternalBattReplDate=tlUpsConfigExternalBattReplDate, tlEnvTemperatureHighLimit=tlEnvTemperatureHighLimit, tlUpsAlarmOutputOffAsRequested=tlUpsAlarmOutputOffAsRequested, solspark=solspark, tlUpsTest=tlUpsTest, tlUpsAlarmDeviceId=tlUpsAlarmDeviceId, tlUpsAlarmInverterSoftStartBad=tlUpsAlarmInverterSoftStartBad, tlUpsInputSourceSelect=tlUpsInputSourceSelect, tlUpsOutletState=tlUpsOutletState, tlCoolingCondInletTemp=tlCoolingCondInletTemp, tlEnvEnvironment=tlEnvEnvironment, tlEnvHumidityData=tlEnvHumidityData)
