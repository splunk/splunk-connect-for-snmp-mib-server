#
# PySNMP MIB module DGS-3620-28TC-DC-L3MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS-3620-28TC-DC-L3MGMT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:29:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
TOSType, HelloRange, RouterID, UpToMaxAge, PositiveInteger, Status, AreaID, DesignatedRouterPriority, Metric = mibBuilder.importSymbols("OSPF-MIB", "TOSType", "HelloRange", "RouterID", "UpToMaxAge", "PositiveInteger", "Status", "AreaID", "DesignatedRouterPriority", "Metric")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, ObjectIdentity, MibIdentifier, Gauge32, Unsigned32, Bits, iso, NotificationType, TimeTicks, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "ObjectIdentity", "MibIdentifier", "Gauge32", "Unsigned32", "Bits", "iso", "NotificationType", "TimeTicks", "Counter32", "IpAddress")
TimeStamp, TextualConvention, PhysAddress, TruthValue, MacAddress, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "PhysAddress", "TruthValue", "MacAddress", "DisplayString", "RowStatus")
dlink_Dgs3620Proj_Dgs3620_28TC_DC, = mibBuilder.importSymbols("SWDGS3620PRIMGMT-MIB", "dlink-Dgs3620Proj-Dgs3620-28TC-DC")
swL3MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3))
if mibBuilder.loadTexts: swL3MgmtMIB.setLastUpdated('1308260000Z')
if mibBuilder.loadTexts: swL3MgmtMIB.setOrganization(' ')
class NodeAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class NetAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

swL3DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 1))
swL3IpMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2))
swL3RelayMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 3))
swL3IpMcastMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 6))
swL3OspfLsdbMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13))
swL3VrrpOperMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14))
swL3IpCtrlMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1))
swL3IpFdbMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 2))
swL3RelayDnsMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 3, 3))
swL3OspfECMPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 15))
swL3RIPTimerMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 17))
swL3OspfDefInfoOrigMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 18))
class VrId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 255)

swL3DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 1, 1))
swL3DevCtrlRIPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlRIPState.setStatus('current')
swL3DevCtrlOSPFState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlOSPFState.setStatus('current')
swL3DevCtrlDVMRPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlDVMRPState.setStatus('current')
swL3DevCtrlVRRPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlVRRPState.setStatus('current')
swL3DevCtrlVrrpPingState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlVrrpPingState.setStatus('current')
swL3IpCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3), )
if mibBuilder.loadTexts: swL3IpCtrlTable.setStatus('current')
swL3IpCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3IpCtrlInterfaceName"))
if mibBuilder.loadTexts: swL3IpCtrlEntry.setStatus('current')
swL3IpCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlInterfaceName.setStatus('current')
swL3IpCtrlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlIfIndex.setStatus('current')
swL3IpCtrlIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpAddr.setStatus('current')
swL3IpCtrlIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpSubnetMask.setStatus('current')
swL3IpCtrlVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlVlanName.setStatus('current')
swL3IpCtrlProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlProxyArp.setStatus('current')
swL3IpCtrlSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlSecondary.setStatus('current')
swL3IpCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("bootp", 3), ("dhcp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlMode.setStatus('current')
swL3IpCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlAdminState.setStatus('current')
swL3IpCtrlIpv4AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpv4AdminState.setStatus('current')
swL3IpCtrlIpv6AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpv6AdminState.setStatus('current')
swL3IpCtrlIpv6LinkLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 14), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlIpv6LinkLocalAddress.setStatus('current')
swL3IpCtrlIpv6LinkLocalPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlIpv6LinkLocalPrefixLen.setStatus('current')
swL3IpCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlState.setStatus('current')
swL3IpCtrlIpv6LinkLocalAutoState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpv6LinkLocalAutoState.setStatus('current')
swL3IpCtrlLocalProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlLocalProxyArp.setStatus('current')
swL3IpCtrlIpMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 19), Integer32().clone(1500)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlIpMtu.setStatus('current')
swL3IpCtrlDhcpv6ClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientState.setStatus('current')
swL3IpCtrlIpDirectedBroadcastState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpDirectedBroadcastState.setStatus('current')
swL3IpCtrlIpDhcpOption12State = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpDhcpOption12State.setStatus('current')
swL3IpCtrlIpDhcpOption12HostName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpDhcpOption12HostName.setStatus('current')
swL3IpCtrlDhcpv6ClientPDState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPDState.setStatus('current')
swL3IpCtrlDhcpv6ClientPDPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPDPrefixName.setStatus('current')
swL3IpCtrlDhcpv6ClientPDPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 26), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPDPrefix.setStatus('current')
swL3IpCtrlDhcpv6ClientPDPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPDPrefixLen.setStatus('current')
swL3IpCtrlIpv6AutoConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpv6AutoConfigState.setStatus('current')
swL3IpCtrlIpv6AutoConfigDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlIpv6AutoConfigDefault.setStatus('current')
swL3IpCtrlDhcpv6ClientRapidCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientRapidCommit.setStatus('current')
swL3IpCtrlDhcpv6ClientPDRapidCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 3, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlDhcpv6ClientPDRapidCommit.setStatus('current')
swL3Ipv6CtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 4), )
if mibBuilder.loadTexts: swL3Ipv6CtrlTable.setStatus('current')
swL3Ipv6CtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 4, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3Ipv6CtrlInterfaceName"))
if mibBuilder.loadTexts: swL3Ipv6CtrlEntry.setStatus('current')
swL3Ipv6CtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6CtrlInterfaceName.setStatus('current')
swL3Ipv6CtrlMaxReassmblySize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6CtrlMaxReassmblySize.setStatus('current')
swL3Ipv6CtrlNsRetransTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlNsRetransTimer.setStatus('current')
swL3Ipv6CtrlRaState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaState.setStatus('current')
swL3Ipv6CtrlRaMinRtrAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1350))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaMinRtrAdvInterval.setStatus('current')
swL3Ipv6CtrlRaMaxRtrAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaMaxRtrAdvInterval.setStatus('current')
swL3Ipv6CtrlRaLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaLifeTime.setStatus('current')
swL3Ipv6CtrlRaReachableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaReachableTime.setStatus('current')
swL3Ipv6CtrlRaRetransTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 4, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaRetransTime.setStatus('current')
swL3Ipv6CtrlRaHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaHopLimit.setStatus('current')
swL3Ipv6CtrlRaManagedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaManagedFlag.setStatus('current')
swL3Ipv6CtrlRaOtherConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6CtrlRaOtherConfigFlag.setStatus('current')
swL3Ipv6AddressCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 5), )
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlTable.setStatus('current')
swL3Ipv6AddressCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 5, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3Ipv6AddressCtrlInterfaceName"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3Ipv6Address"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3Ipv6AddressCtrlPrefixLen"))
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlEntry.setStatus('current')
swL3Ipv6AddressCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlInterfaceName.setStatus('current')
swL3Ipv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 5, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6Address.setStatus('current')
swL3Ipv6AddressCtrlPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlPrefixLen.setStatus('current')
swL3Ipv6AddressCtrlPreferredLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlPreferredLifeTime.setStatus('current')
swL3Ipv6AddressCtrlValidLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlValidLifeTime.setStatus('current')
swL3Ipv6AddressCtrlOnLinkFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlOnLinkFlag.setStatus('current')
swL3Ipv6AddressCtrlAutonomousFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlAutonomousFlag.setStatus('current')
swL3Ipv6AddressCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 5, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Ipv6AddressCtrlState.setStatus('current')
swL3Ipv6DHCPv6CPDAddrCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 6), )
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlTable.setStatus('current')
swL3Ipv6DHCPv6CPDAddrCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 6, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3Ipv6DHCPv6CPDAddrCtrlInterfaceName"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3Ipv6DHCPv6CPDAddrCtrlPrefixName"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3Ipv6DHCPv6CPDAddrCtrlIPv6addr"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3Ipv6DHCPv6CPDAddrCtrlPrefixLen"))
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlEntry.setStatus('current')
swL3Ipv6DHCPv6CPDAddrCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlInterfaceName.setStatus('current')
swL3Ipv6DHCPv6CPDAddrCtrlPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlPrefixName.setStatus('current')
swL3Ipv6DHCPv6CPDAddrCtrlIPv6addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 6, 1, 3), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlIPv6addr.setStatus('current')
swL3Ipv6DHCPv6CPDAddrCtrlPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlPrefixLen.setStatus('current')
swL3Ipv6DHCPv6CPDAddrCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Ipv6DHCPv6CPDAddrCtrlState.setStatus('current')
swL3IpCtrlAllIpIfState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpCtrlAllIpIfState.setStatus('current')
swL3LoopBackIpCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 8), )
if mibBuilder.loadTexts: swL3LoopBackIpCtrlTable.setStatus('current')
swL3LoopBackIpCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 8, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3LoopBackIpCtrlInterfaceName"))
if mibBuilder.loadTexts: swL3LoopBackIpCtrlEntry.setStatus('current')
swL3LoopBackIpCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3LoopBackIpCtrlInterfaceName.setStatus('current')
swL3LoopBackIpCtrlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3LoopBackIpCtrlIfIndex.setStatus('current')
swL3LoopBackIpCtrlIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 8, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3LoopBackIpCtrlIpAddr.setStatus('current')
swL3LoopBackIpCtrlIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 8, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3LoopBackIpCtrlIpSubnetMask.setStatus('current')
swL3LoopBackIpCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3LoopBackIpCtrlAdminState.setStatus('current')
swL3LoopBackIpCtrlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 1, 8, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3LoopBackIpCtrlRowStatus.setStatus('current')
swL3IpFdbInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 2, 1), )
if mibBuilder.loadTexts: swL3IpFdbInfoTable.setStatus('current')
swL3IpFdbInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 2, 1, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3IpFdbInfoIpAddr"))
if mibBuilder.loadTexts: swL3IpFdbInfoEntry.setStatus('current')
swL3IpFdbInfoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoIpAddr.setStatus('current')
swL3IpFdbInfoIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoIpSubnetMask.setStatus('current')
swL3IpFdbInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoPort.setStatus('current')
swL3IpFdbInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoType.setStatus('current')
swL3IpArpAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpArpAgingTime.setStatus('current')
swL3IpStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 5), )
if mibBuilder.loadTexts: swL3IpStaticRouteTable.setStatus('current')
swL3IpStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 5, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3IpStaticRouteDest"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3IpStaticRouteMask"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3IpStaticRouteNextHop"))
if mibBuilder.loadTexts: swL3IpStaticRouteEntry.setStatus('current')
swL3IpStaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteDest.setStatus('current')
swL3IpStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteMask.setStatus('current')
swL3IpStaticRouteBkupState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("none", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteBkupState.setStatus('current')
swL3IpStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 5, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteNextHop.setStatus('current')
swL3IpStaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteMetric.setStatus('current')
swL3IpStaticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3), ("active", 4), ("inActive", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteStatus.setStatus('current')
swL3IpStaticRouteWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteWeight.setStatus('current')
swL3IpStaticRouteInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteInterfaceName.setStatus('current')
swL3IpMcastStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 6, 1), )
if mibBuilder.loadTexts: swL3IpMcastStaticRouteTable.setStatus('current')
swL3IpMcastStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 6, 1, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3IpMcastStaticRouteIpmrouteAddr"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3IpMcastStaticRouteIpmrouteMask"))
if mibBuilder.loadTexts: swL3IpMcastStaticRouteEntry.setStatus('current')
swL3IpMcastStaticRouteIpmrouteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 6, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: swL3IpMcastStaticRouteIpmrouteAddr.setStatus('current')
swL3IpMcastStaticRouteIpmrouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 6, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: swL3IpMcastStaticRouteIpmrouteMask.setStatus('current')
swL3IpMcastStaticRouteRpfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 6, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpMcastStaticRouteRpfAddr.setStatus('current')
swL3IpMcastStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpMcastStaticRouteRowStatus.setStatus('current')
swL3IpStaticRouteTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 7), )
if mibBuilder.loadTexts: swL3IpStaticRouteTunnelTable.setStatus('current')
swL3IpStaticRouteTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 7, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3IpStaticRouteDest"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3IpStaticRouteMask"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3IpStaticRouteTunnelInterfaceName"))
if mibBuilder.loadTexts: swL3IpStaticRouteTunnelEntry.setStatus('current')
swL3IpStaticRouteTunnelInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteTunnelInterfaceName.setStatus('current')
swL3IpStaticRouteTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 2, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteTunnelRowStatus.setStatus('current')
swL3RelayDnsState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsState.setStatus('current')
swL3RelayDnsPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 3, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsPrimaryServer.setStatus('current')
swL3RelayDnsSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 3, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsSecondaryServer.setStatus('current')
swL3RelayDnsCacheState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsCacheState.setStatus('current')
swL3RelayDnsStaticTableState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsStaticTableState.setStatus('current')
swL3RelayDnsCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 3, 3, 6), )
if mibBuilder.loadTexts: swL3RelayDnsCtrlTable.setStatus('current')
swL3RelayDnsCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 3, 3, 6, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3RelayDnsCtrlDomainName"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3RelayDnsCtrlIpAddr"))
if mibBuilder.loadTexts: swL3RelayDnsCtrlEntry.setStatus('current')
swL3RelayDnsCtrlDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 3, 3, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RelayDnsCtrlDomainName.setStatus('current')
swL3RelayDnsCtrlIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 3, 3, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RelayDnsCtrlIpAddr.setStatus('current')
swL3RelayDnsCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 3, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsCtrlState.setStatus('current')
swL3Md5Table = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 4), )
if mibBuilder.loadTexts: swL3Md5Table.setStatus('current')
swL3Md5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 4, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3Md5KeyId"))
if mibBuilder.loadTexts: swL3Md5Entry.setStatus('current')
swL3Md5KeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Md5KeyId.setStatus('current')
swL3Md5Key = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Md5Key.setStatus('current')
swL3Md5RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Md5RowStatus.setStatus('current')
swL3RouteRedistriTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 5), )
if mibBuilder.loadTexts: swL3RouteRedistriTable.setStatus('current')
swL3RouteRedistriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 5, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3RouteRedistriSrcProtocol"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3RouteRedistriDstProtocol"))
if mibBuilder.loadTexts: swL3RouteRedistriEntry.setStatus('current')
swL3RouteRedistriSrcProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("rip", 2), ("ospf", 3), ("static", 4), ("local", 5), ("bgp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RouteRedistriSrcProtocol.setStatus('current')
swL3RouteRedistriDstProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6))).clone(namedValues=NamedValues(("other", 1), ("rip", 2), ("ospf", 3), ("bgp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RouteRedistriDstProtocol.setStatus('current')
swL3RouteRedistriType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("all", 2), ("type-1", 3), ("type-2", 4), ("internal", 5), ("external", 6), ("inter-E1", 7), ("inter-E2", 8), ("extType1", 9), ("extType2", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3RouteRedistriType.setStatus('current')
swL3RouteRedistriMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 5, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3RouteRedistriMetric.setStatus('current')
swL3RouteRedistriRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3RouteRedistriRowStatus.setStatus('current')
swL3RouteRedistriRouteMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3RouteRedistriRouteMapName.setStatus('current')
swL3OspfHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 6), )
if mibBuilder.loadTexts: swL3OspfHostTable.setStatus('current')
swL3OspfHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 6, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3OspfHostIpAddress"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3OspfHostTOS"))
if mibBuilder.loadTexts: swL3OspfHostEntry.setStatus('current')
swL3OspfHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfHostIpAddress.setStatus('current')
swL3OspfHostTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 6, 1, 2), TOSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfHostTOS.setStatus('current')
swL3OspfHostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 6, 1, 3), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3OspfHostMetric.setStatus('current')
swL3OspfHostAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 6, 1, 4), AreaID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3OspfHostAreaID.setStatus('current')
swL3OspfHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3OspfHostStatus.setStatus('current')
swL3ospfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 7), )
if mibBuilder.loadTexts: swL3ospfVirtIfTable.setStatus('current')
swL3ospfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 7, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3ospfVirtIfAreaId"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3ospfVirtIfNeighbor"))
if mibBuilder.loadTexts: swL3ospfVirtIfEntry.setStatus('current')
swL3ospfVirtIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 7, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfAreaId.setStatus('current')
swL3ospfVirtIfNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 7, 1, 2), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfNeighbor.setStatus('current')
swL3ospfVirtIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 7, 1, 3), UpToMaxAge().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfTransitDelay.setStatus('current')
swL3ospfVirtIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 7, 1, 4), UpToMaxAge().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfRetransInterval.setStatus('current')
swL3ospfVirtIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 7, 1, 5), HelloRange().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfHelloInterval.setStatus('current')
swL3ospfVirtIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfRtrDeadInterval.setStatus('current')
swL3ospfVirtIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("down", 1), ("pointToPoint", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfState.setStatus('current')
swL3ospfVirtIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfEvents.setStatus('current')
swL3ospfVirtIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfAuthType.setStatus('current')
swL3ospfVirtIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 7, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfAuthKey.setStatus('current')
swL3ospfVirtIfAuthKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfAuthKeyID.setStatus('current')
swL3ospfVirtIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 7, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfStatus.setStatus('current')
swL3ospfIfTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8), )
if mibBuilder.loadTexts: swL3ospfIfTable.setStatus('current')
swL3ospfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3ospfIfIpAddress"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3ospfAddressLessIf"))
if mibBuilder.loadTexts: swL3ospfIfEntry.setStatus('current')
swL3ospfIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfIpAddress.setStatus('current')
swL3ospfAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfAddressLessIf.setStatus('current')
swL3ospfIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 3), AreaID().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfAreaId.setStatus('current')
swL3ospfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointToPoint", 3), ("pointToMultipoint", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfType.setStatus('current')
swL3ospfIfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 5), Status().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfAdminStat.setStatus('current')
swL3ospfIfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 6), DesignatedRouterPriority().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfRtrPriority.setStatus('current')
swL3ospfIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 7), UpToMaxAge().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfTransitDelay.setStatus('current')
swL3ospfIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 8), UpToMaxAge().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfRetransInterval.setStatus('current')
swL3ospfIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 9), HelloRange().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfHelloInterval.setStatus('current')
swL3ospfIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 10), PositiveInteger().clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfRtrDeadInterval.setStatus('current')
swL3ospfIfPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 11), PositiveInteger().clone(120)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfPollInterval.setStatus('current')
swL3ospfIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("loopback", 2), ("waiting", 3), ("pointToPoint", 4), ("designatedRouter", 5), ("backupDesignatedRouter", 6), ("otherDesignatedRouter", 7))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfState.setStatus('current')
swL3ospfIfDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 13), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfDesignatedRouter.setStatus('current')
swL3ospfIfBackupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 14), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfBackupDesignatedRouter.setStatus('current')
swL3ospfIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfEvents.setStatus('current')
swL3ospfIfMulticastForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("blocked", 1), ("multicast", 2), ("unicast", 3))).clone('blocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfMulticastForwarding.setStatus('current')
swL3ospfIfDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 17), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfDemand.setStatus('current')
swL3ospfIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfAuthType.setStatus('current')
swL3ospfIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfAuthKey.setStatus('current')
swL3ospfIfAuthKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfAuthKeyID.setStatus('current')
swL3ospfIfPassiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfPassiveMode.setStatus('current')
swL3ospfIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 23), Metric()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfMetric.setStatus('current')
swL3ospfIfDistributeListInType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("access-list", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfDistributeListInType.setStatus('current')
swL3ospfIfDistributeListInName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfDistributeListInName.setStatus('current')
swL3ospfIfBfdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 8, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfIfBfdStatus.setStatus('current')
swL3RoutePreference = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 9))
swL3RoutePreferenceRIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RoutePreferenceRIP.setStatus('current')
swL3RoutePreferenceOSPFIntra = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RoutePreferenceOSPFIntra.setStatus('current')
swL3RoutePreferenceStatic = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RoutePreferenceStatic.setStatus('current')
swL3RoutePreferenceLocal = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RoutePreferenceLocal.setStatus('current')
swL3RoutePreferenceOSPFInter = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RoutePreferenceOSPFInter.setStatus('current')
swL3RoutePreferenceOSPFExtT1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RoutePreferenceOSPFExtT1.setStatus('current')
swL3RoutePreferenceOSPFExtT2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RoutePreferenceOSPFExtT2.setStatus('current')
swL3RoutePreferenceDefault = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 9, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RoutePreferenceDefault.setStatus('current')
swL3RoutePreferenceEBGP = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 9, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RoutePreferenceEBGP.setStatus('current')
swL3RoutePreferenceIBGP = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 9, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RoutePreferenceIBGP.setStatus('current')
swL3ospfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 10), )
if mibBuilder.loadTexts: swL3ospfAreaTable.setStatus('current')
swL3ospfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 10, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3ospfAreaId"))
if mibBuilder.loadTexts: swL3ospfAreaEntry.setStatus('current')
swL3ospfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 10, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfAreaId.setStatus('current')
swL3ospfAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("stub", 2), ("nssa", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfAreaType.setStatus('obsolete')
swL3ospfAreaSummaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfAreaSummaryState.setStatus('current')
swL3ospfAreaMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3ospfAreaMetric.setStatus('current')
swL3ospfAreaTranslateState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfAreaTranslateState.setStatus('current')
swL3ospfAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 10, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfAreaStatus.setStatus('current')
swL3dvmrpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 12), )
if mibBuilder.loadTexts: swL3dvmrpInterfaceTable.setStatus('current')
swL3dvmrpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 12, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3dvmrpInterfaceIfIndex"))
if mibBuilder.loadTexts: swL3dvmrpInterfaceEntry.setStatus('current')
swL3dvmrpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: swL3dvmrpInterfaceIfIndex.setStatus('current')
swL3dvmrpInterfaceLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 12, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceLocalAddress.setStatus('current')
swL3dvmrpInterfaceMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceMetric.setStatus('current')
swL3dvmrpInterfaceProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceProbe.setStatus('current')
swL3dvmrpInterfaceNbrTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(35)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceNbrTimeout.setStatus('current')
swL3dvmrpInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 12, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceStatus.setStatus('current')
swL3dvmrpInterfaceRcvBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3dvmrpInterfaceRcvBadPkts.setStatus('current')
swL3dvmrpInterfaceRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3dvmrpInterfaceRcvBadRoutes.setStatus('current')
swL3OspfInternalLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 1), )
if mibBuilder.loadTexts: swL3OspfInternalLsdbTable.setStatus('current')
swL3OspfInternalLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 1, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3OspfInternalLsdbAreaId"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3OspfInternalLsdbType"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3OspfInternalLsdbLsid"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3OspfInternalLsdbRouterId"))
if mibBuilder.loadTexts: swL3OspfInternalLsdbEntry.setStatus('current')
swL3OspfInternalLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 1, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfInternalLsdbAreaId.setStatus('current')
swL3OspfInternalLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("routerLink", 1), ("networkLink", 2), ("summaryLink", 3), ("asSummaryLink", 4), ("asExternalLink", 5), ("multicastLink", 6), ("nssaExternalLink", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfInternalLsdbType.setStatus('current')
swL3OspfInternalLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfInternalLsdbLsid.setStatus('current')
swL3OspfInternalLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 1, 1, 4), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfInternalLsdbRouterId.setStatus('current')
swL3OspfInternalLsdbMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfInternalLsdbMetric.setStatus('current')
swL3OspfInternalLsdbSequenceNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfInternalLsdbSequenceNo.setStatus('current')
swL3OspfInternalLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfInternalLsdbAge.setStatus('current')
swL3OspfInternalLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfInternalLsdbChecksum.setStatus('current')
swL3OspfExternalLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 2), )
if mibBuilder.loadTexts: swL3OspfExternalLsdbTable.setStatus('current')
swL3OspfExternalLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 2, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3OspfExternalLsdbType"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3OspfExternalLsdbLsid"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3OspfExternalLsdbRouterId"))
if mibBuilder.loadTexts: swL3OspfExternalLsdbEntry.setStatus('current')
swL3OspfExternalLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 7))).clone(namedValues=NamedValues(("asExternalLink", 5), ("nssaExternalLink", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbType.setStatus('current')
swL3OspfExternalLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbLsid.setStatus('current')
swL3OspfExternalLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 2, 1, 3), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbRouterId.setStatus('current')
swL3OspfExternalLsdbMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbMetric.setStatus('current')
swL3OspfExternalLsdbMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unrecognized", 0), ("type-1", 1), ("type-2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbMetricType.setStatus('current')
swL3OspfExternalLsdbSequenceNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbSequenceNo.setStatus('current')
swL3OspfExternalLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbAge.setStatus('current')
swL3OspfExternalLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbChecksum.setStatus('current')
swL3OspfExternalLsdbForwardingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbForwardingAddress.setStatus('current')
swL3OspfExternalLsdbRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 13, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfExternalLsdbRouteTag.setStatus('current')
swL3VrrpOperTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14, 1), )
if mibBuilder.loadTexts: swL3VrrpOperTable.setStatus('current')
swL3VrrpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14, 1, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3VrrpOperIfIndex"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3VrrpOperVrId"))
if mibBuilder.loadTexts: swL3VrrpOperEntry.setStatus('current')
swL3VrrpOperIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3VrrpOperIfIndex.setStatus('current')
swL3VrrpOperVrId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14, 1, 1, 2), VrId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3VrrpOperVrId.setStatus('current')
swL3VrrpOperVirtualMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3VrrpOperVirtualMacAddr.setStatus('current')
swL3VrrpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initialize", 1), ("backup", 2), ("master", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3VrrpOperState.setStatus('current')
swL3VrrpOperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperAdminState.setStatus('current')
swL3VrrpOperPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperPriority.setStatus('current')
swL3VrrpOperMasterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3VrrpOperMasterIpAddr.setStatus('current')
swL3VrrpOperCriticalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14, 1, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperCriticalIpAddr.setStatus('current')
swL3VrrpOperCheckCriticalIpState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("disabled", 1), ("enabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperCheckCriticalIpState.setStatus('current')
swL3VrrpOperAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthentication", 1), ("simpleTextPassword", 2), ("ipAuthenticationHeader", 3))).clone('noAuthentication')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperAuthType.setStatus('current')
swL3VrrpOperAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperAuthKey.setStatus('current')
swL3VrrpOperAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperAdvertisementInterval.setStatus('current')
swL3VrrpOperPreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14, 1, 1, 13), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperPreemptMode.setStatus('current')
swL3VrrpOperVirtualRouterUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14, 1, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3VrrpOperVirtualRouterUpTime.setStatus('current')
swL3VrrpOperVirtualIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14, 1, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperVirtualIpAddr.setStatus('current')
swL3VrrpOperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14, 1, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperRowStatus.setStatus('current')
swL3VrrpOperBfdPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 14, 1, 1, 17), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3VrrpOperBfdPeerAddr.setStatus('current')
swL3OspfECMPIpDestination = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3OspfECMPIpDestination.setStatus('current')
swL3OspfECMPIpSource = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3OspfECMPIpSource.setStatus('current')
swL3OspfECMPCrcLow = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3OspfECMPCrcLow.setStatus('current')
swL3OspfECMPCrcHigh = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3OspfECMPCrcHigh.setStatus('current')
swL3OspfECMPTCPorUDPport = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3OspfECMPTCPorUDPport.setStatus('current')
swL3OspfECMPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 15, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3OspfECMPState.setStatus('current')
swL3RIPUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 17, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RIPUpdateTime.setStatus('current')
swL3RIPTimeOutTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 17, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RIPTimeOutTime.setStatus('current')
swL3RIPGarbageCollectionTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 17, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RIPGarbageCollectionTime.setStatus('current')
swL3OspfDefInfoOriginate = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("always", 1), ("default", 2), ("none", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3OspfDefInfoOriginate.setStatus('current')
swL3OspfDefInfoOrigMetricType = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type-1", 1), ("type-2", 2))).clone('type-2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3OspfDefInfoOrigMetricType.setStatus('current')
swL3OspfDefInfoOrigMetric = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 18, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3OspfDefInfoOrigMetric.setStatus('current')
swL3RIPInboundRouteFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 19), )
if mibBuilder.loadTexts: swL3RIPInboundRouteFilterTable.setStatus('current')
swL3RIPInboundRouteFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 19, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3RIPInboundRouteFilterIfIpAddress"))
if mibBuilder.loadTexts: swL3RIPInboundRouteFilterEntry.setStatus('current')
swL3RIPInboundRouteFilterIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 19, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RIPInboundRouteFilterIfIpAddress.setStatus('current')
swL3RIPInboundRouteFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("access-list", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RIPInboundRouteFilterType.setStatus('current')
swL3RIPInboundRouteFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 19, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RIPInboundRouteFilterName.setStatus('current')
swL3Route6RedistriTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 20), )
if mibBuilder.loadTexts: swL3Route6RedistriTable.setStatus('current')
swL3Route6RedistriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 20, 1), ).setIndexNames((0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3Route6RedistriSrcProtocol"), (0, "DGS-3620-28TC-DC-L3MGMT-MIB", "swL3Route6RedistriDstProtocol"))
if mibBuilder.loadTexts: swL3Route6RedistriEntry.setStatus('current')
swL3Route6RedistriSrcProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("static", 2), ("ripng", 3), ("ospfv3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Route6RedistriSrcProtocol.setStatus('current')
swL3Route6RedistriDstProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ripng", 1), ("ospfv3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Route6RedistriDstProtocol.setStatus('current')
swL3Route6RedistriType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("type-1", 1), ("type-2", 2), ("all", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Route6RedistriType.setStatus('current')
swL3Route6RedistriMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 20, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Route6RedistriMetric.setStatus('current')
swL3Route6RedistriRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 118, 8, 3, 20, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Route6RedistriRowStatus.setStatus('current')
mibBuilder.exportSymbols("DGS-3620-28TC-DC-L3MGMT-MIB", swL3ospfIfState=swL3ospfIfState, swL3OspfInternalLsdbTable=swL3OspfInternalLsdbTable, swL3IpStaticRouteWeight=swL3IpStaticRouteWeight, swL3IpCtrlProxyArp=swL3IpCtrlProxyArp, swL3OspfHostStatus=swL3OspfHostStatus, swL3Route6RedistriMetric=swL3Route6RedistriMetric, swL3dvmrpInterfaceStatus=swL3dvmrpInterfaceStatus, swL3ospfIfDemand=swL3ospfIfDemand, swL3DevCtrlOSPFState=swL3DevCtrlOSPFState, swL3IpCtrlDhcpv6ClientState=swL3IpCtrlDhcpv6ClientState, swL3OspfExternalLsdbAge=swL3OspfExternalLsdbAge, swL3IpCtrlDhcpv6ClientRapidCommit=swL3IpCtrlDhcpv6ClientRapidCommit, swL3MgmtMIB=swL3MgmtMIB, swL3RoutePreferenceStatic=swL3RoutePreferenceStatic, swL3ospfAreaTranslateState=swL3ospfAreaTranslateState, swL3ospfIfBackupDesignatedRouter=swL3ospfIfBackupDesignatedRouter, swL3dvmrpInterfaceNbrTimeout=swL3dvmrpInterfaceNbrTimeout, swL3IpCtrlAllIpIfState=swL3IpCtrlAllIpIfState, swL3OspfECMPIpDestination=swL3OspfECMPIpDestination, swL3ospfVirtIfRtrDeadInterval=swL3ospfVirtIfRtrDeadInterval, swL3Route6RedistriRowStatus=swL3Route6RedistriRowStatus, swL3IpCtrlIpDhcpOption12State=swL3IpCtrlIpDhcpOption12State, swL3Md5Key=swL3Md5Key, swL3RouteRedistriRowStatus=swL3RouteRedistriRowStatus, swL3OspfDefInfoOrigMetric=swL3OspfDefInfoOrigMetric, swL3IpCtrlIpv6LinkLocalAutoState=swL3IpCtrlIpv6LinkLocalAutoState, swL3RouteRedistriDstProtocol=swL3RouteRedistriDstProtocol, swL3ospfAreaType=swL3ospfAreaType, swL3ospfIfEvents=swL3ospfIfEvents, swL3Ipv6AddressCtrlAutonomousFlag=swL3Ipv6AddressCtrlAutonomousFlag, swL3IpStaticRouteTunnelInterfaceName=swL3IpStaticRouteTunnelInterfaceName, swL3RelayDnsState=swL3RelayDnsState, swL3VrrpOperAdvertisementInterval=swL3VrrpOperAdvertisementInterval, swL3RIPGarbageCollectionTime=swL3RIPGarbageCollectionTime, swL3Route6RedistriEntry=swL3Route6RedistriEntry, swL3Ipv6CtrlRaHopLimit=swL3Ipv6CtrlRaHopLimit, swL3Route6RedistriDstProtocol=swL3Route6RedistriDstProtocol, swL3ospfAreaSummaryState=swL3ospfAreaSummaryState, swL3Ipv6DHCPv6CPDAddrCtrlTable=swL3Ipv6DHCPv6CPDAddrCtrlTable, swL3IpMcastMgmt=swL3IpMcastMgmt, swL3DevMgmt=swL3DevMgmt, swL3Ipv6AddressCtrlEntry=swL3Ipv6AddressCtrlEntry, swL3Ipv6AddressCtrlPrefixLen=swL3Ipv6AddressCtrlPrefixLen, swL3IpCtrlTable=swL3IpCtrlTable, swL3OspfInternalLsdbAreaId=swL3OspfInternalLsdbAreaId, swL3OspfExternalLsdbRouteTag=swL3OspfExternalLsdbRouteTag, swL3RelayDnsPrimaryServer=swL3RelayDnsPrimaryServer, swL3Ipv6DHCPv6CPDAddrCtrlState=swL3Ipv6DHCPv6CPDAddrCtrlState, swL3Ipv6DHCPv6CPDAddrCtrlPrefixLen=swL3Ipv6DHCPv6CPDAddrCtrlPrefixLen, swL3LoopBackIpCtrlEntry=swL3LoopBackIpCtrlEntry, swL3LoopBackIpCtrlIfIndex=swL3LoopBackIpCtrlIfIndex, swL3Ipv6CtrlRaMinRtrAdvInterval=swL3Ipv6CtrlRaMinRtrAdvInterval, swL3LoopBackIpCtrlIpAddr=swL3LoopBackIpCtrlIpAddr, swL3OspfExternalLsdbLsid=swL3OspfExternalLsdbLsid, swL3IpCtrlIpMtu=swL3IpCtrlIpMtu, swL3RelayDnsCtrlDomainName=swL3RelayDnsCtrlDomainName, swL3IpFdbInfoTable=swL3IpFdbInfoTable, swL3ospfVirtIfTransitDelay=swL3ospfVirtIfTransitDelay, swL3RouteRedistriSrcProtocol=swL3RouteRedistriSrcProtocol, swL3RIPUpdateTime=swL3RIPUpdateTime, swL3VrrpOperMgmt=swL3VrrpOperMgmt, swL3IpMcastStaticRouteTable=swL3IpMcastStaticRouteTable, swL3DevCtrlVRRPState=swL3DevCtrlVRRPState, swL3OspfExternalLsdbForwardingAddress=swL3OspfExternalLsdbForwardingAddress, swL3VrrpOperPriority=swL3VrrpOperPriority, swL3DevCtrlVrrpPingState=swL3DevCtrlVrrpPingState, swL3VrrpOperRowStatus=swL3VrrpOperRowStatus, swL3IpStaticRouteDest=swL3IpStaticRouteDest, swL3IpStaticRouteTunnelRowStatus=swL3IpStaticRouteTunnelRowStatus, swL3RelayDnsCtrlTable=swL3RelayDnsCtrlTable, swL3IpCtrlMode=swL3IpCtrlMode, swL3IpStaticRouteStatus=swL3IpStaticRouteStatus, swL3OspfHostTable=swL3OspfHostTable, swL3Ipv6CtrlRaLifeTime=swL3Ipv6CtrlRaLifeTime, swL3OspfExternalLsdbMetricType=swL3OspfExternalLsdbMetricType, swL3IpCtrlDhcpv6ClientPDPrefixName=swL3IpCtrlDhcpv6ClientPDPrefixName, swL3ospfVirtIfAuthKeyID=swL3ospfVirtIfAuthKeyID, swL3VrrpOperVirtualRouterUpTime=swL3VrrpOperVirtualRouterUpTime, swL3OspfInternalLsdbAge=swL3OspfInternalLsdbAge, swL3Ipv6CtrlInterfaceName=swL3Ipv6CtrlInterfaceName, swL3OspfHostTOS=swL3OspfHostTOS, swL3dvmrpInterfaceRcvBadPkts=swL3dvmrpInterfaceRcvBadPkts, swL3RelayDnsCtrlIpAddr=swL3RelayDnsCtrlIpAddr, swL3ospfIfAuthType=swL3ospfIfAuthType, swL3OspfHostEntry=swL3OspfHostEntry, swL3VrrpOperVirtualMacAddr=swL3VrrpOperVirtualMacAddr, swL3RIPInboundRouteFilterName=swL3RIPInboundRouteFilterName, swL3RoutePreferenceOSPFExtT1=swL3RoutePreferenceOSPFExtT1, swL3IpCtrlDhcpv6ClientPDPrefix=swL3IpCtrlDhcpv6ClientPDPrefix, swL3Ipv6DHCPv6CPDAddrCtrlEntry=swL3Ipv6DHCPv6CPDAddrCtrlEntry, swL3OspfInternalLsdbMetric=swL3OspfInternalLsdbMetric, swL3VrrpOperTable=swL3VrrpOperTable, swL3VrrpOperCheckCriticalIpState=swL3VrrpOperCheckCriticalIpState, swL3IpMgmt=swL3IpMgmt, swL3ospfIfRetransInterval=swL3ospfIfRetransInterval, swL3ospfAddressLessIf=swL3ospfAddressLessIf, swL3IpFdbInfoEntry=swL3IpFdbInfoEntry, swL3OspfInternalLsdbEntry=swL3OspfInternalLsdbEntry, swL3Ipv6AddressCtrlValidLifeTime=swL3Ipv6AddressCtrlValidLifeTime, swL3RelayDnsCtrlState=swL3RelayDnsCtrlState, swL3RouteRedistriRouteMapName=swL3RouteRedistriRouteMapName, swL3Ipv6CtrlRaManagedFlag=swL3Ipv6CtrlRaManagedFlag, swL3IpFdbInfoPort=swL3IpFdbInfoPort, swL3RoutePreferenceEBGP=swL3RoutePreferenceEBGP, swL3OspfExternalLsdbChecksum=swL3OspfExternalLsdbChecksum, swL3IpCtrlSecondary=swL3IpCtrlSecondary, swL3ospfIfDistributeListInType=swL3ospfIfDistributeListInType, swL3IpStaticRouteNextHop=swL3IpStaticRouteNextHop, swL3ospfIfRtrPriority=swL3ospfIfRtrPriority, swL3Ipv6AddressCtrlOnLinkFlag=swL3Ipv6AddressCtrlOnLinkFlag, swL3Route6RedistriSrcProtocol=swL3Route6RedistriSrcProtocol, swL3IpCtrlDhcpv6ClientPDRapidCommit=swL3IpCtrlDhcpv6ClientPDRapidCommit, swL3LoopBackIpCtrlRowStatus=swL3LoopBackIpCtrlRowStatus, swL3Md5Entry=swL3Md5Entry, swL3ospfVirtIfEntry=swL3ospfVirtIfEntry, swL3dvmrpInterfaceIfIndex=swL3dvmrpInterfaceIfIndex, swL3ospfAreaTable=swL3ospfAreaTable, swL3Ipv6CtrlRaState=swL3Ipv6CtrlRaState, swL3ospfVirtIfHelloInterval=swL3ospfVirtIfHelloInterval, swL3ospfIfIpAddress=swL3ospfIfIpAddress, swL3dvmrpInterfaceEntry=swL3dvmrpInterfaceEntry, swL3ospfAreaStatus=swL3ospfAreaStatus, swL3OspfExternalLsdbMetric=swL3OspfExternalLsdbMetric, swL3dvmrpInterfaceTable=swL3dvmrpInterfaceTable, swL3Route6RedistriType=swL3Route6RedistriType, swL3OspfInternalLsdbLsid=swL3OspfInternalLsdbLsid, swL3VrrpOperBfdPeerAddr=swL3VrrpOperBfdPeerAddr, swL3IpCtrlInterfaceName=swL3IpCtrlInterfaceName, swL3Ipv6CtrlRaMaxRtrAdvInterval=swL3Ipv6CtrlRaMaxRtrAdvInterval, swL3IpCtrlLocalProxyArp=swL3IpCtrlLocalProxyArp, swL3DevCtrlDVMRPState=swL3DevCtrlDVMRPState, swL3IpFdbInfoIpSubnetMask=swL3IpFdbInfoIpSubnetMask, swL3IpMcastStaticRouteIpmrouteAddr=swL3IpMcastStaticRouteIpmrouteAddr, swL3OspfHostMetric=swL3OspfHostMetric, swL3RoutePreference=swL3RoutePreference, PYSNMP_MODULE_ID=swL3MgmtMIB, swL3RoutePreferenceOSPFInter=swL3RoutePreferenceOSPFInter, swL3dvmrpInterfaceLocalAddress=swL3dvmrpInterfaceLocalAddress, swL3OspfECMPCrcLow=swL3OspfECMPCrcLow, swL3Ipv6CtrlRaReachableTime=swL3Ipv6CtrlRaReachableTime, swL3IpCtrlIpv6AdminState=swL3IpCtrlIpv6AdminState, swL3VrrpOperVrId=swL3VrrpOperVrId, swL3RoutePreferenceOSPFIntra=swL3RoutePreferenceOSPFIntra, swL3RoutePreferenceLocal=swL3RoutePreferenceLocal, swL3LoopBackIpCtrlInterfaceName=swL3LoopBackIpCtrlInterfaceName, swL3OspfInternalLsdbSequenceNo=swL3OspfInternalLsdbSequenceNo, swL3RouteRedistriMetric=swL3RouteRedistriMetric, swL3IpCtrlIpSubnetMask=swL3IpCtrlIpSubnetMask, swL3OspfHostAreaID=swL3OspfHostAreaID, swL3IpCtrlIpv6AutoConfigDefault=swL3IpCtrlIpv6AutoConfigDefault, swL3ospfAreaEntry=swL3ospfAreaEntry, NetAddress=NetAddress, swL3IpStaticRouteInterfaceName=swL3IpStaticRouteInterfaceName, swL3RouteRedistriTable=swL3RouteRedistriTable, swL3RelayDnsMgmt=swL3RelayDnsMgmt, swL3Ipv6DHCPv6CPDAddrCtrlPrefixName=swL3Ipv6DHCPv6CPDAddrCtrlPrefixName, swL3OspfECMPMgmt=swL3OspfECMPMgmt, swL3IpCtrlIpDhcpOption12HostName=swL3IpCtrlIpDhcpOption12HostName, swL3IpArpAgingTime=swL3IpArpAgingTime, swL3ospfIfHelloInterval=swL3ospfIfHelloInterval, swL3OspfLsdbMgmt=swL3OspfLsdbMgmt, swL3IpStaticRouteTunnelEntry=swL3IpStaticRouteTunnelEntry, swL3IpCtrlIpv6LinkLocalAddress=swL3IpCtrlIpv6LinkLocalAddress, swL3Md5KeyId=swL3Md5KeyId, swL3ospfIfRtrDeadInterval=swL3ospfIfRtrDeadInterval, swL3ospfIfPollInterval=swL3ospfIfPollInterval, swL3ospfIfMulticastForwarding=swL3ospfIfMulticastForwarding, swL3RoutePreferenceIBGP=swL3RoutePreferenceIBGP, swL3ospfIfAdminStat=swL3ospfIfAdminStat, swL3IpStaticRouteBkupState=swL3IpStaticRouteBkupState, swL3RelayDnsCacheState=swL3RelayDnsCacheState, swL3IpFdbInfoType=swL3IpFdbInfoType, swL3VrrpOperEntry=swL3VrrpOperEntry, swL3Route6RedistriTable=swL3Route6RedistriTable, swL3IpCtrlVlanName=swL3IpCtrlVlanName, swL3IpCtrlIpv6AutoConfigState=swL3IpCtrlIpv6AutoConfigState, swL3RelayDnsSecondaryServer=swL3RelayDnsSecondaryServer, swL3ospfVirtIfAuthType=swL3ospfVirtIfAuthType, swL3ospfIfEntry=swL3ospfIfEntry, swL3IpMcastStaticRouteRpfAddr=swL3IpMcastStaticRouteRpfAddr, NodeAddress=NodeAddress, swL3IpCtrlDhcpv6ClientPDPrefixLen=swL3IpCtrlDhcpv6ClientPDPrefixLen, swL3RelayMgmt=swL3RelayMgmt, swL3IpMcastStaticRouteRowStatus=swL3IpMcastStaticRouteRowStatus, swL3OspfInternalLsdbChecksum=swL3OspfInternalLsdbChecksum, swL3ospfIfTransitDelay=swL3ospfIfTransitDelay, swL3IpCtrlIpDirectedBroadcastState=swL3IpCtrlIpDirectedBroadcastState, swL3Ipv6CtrlTable=swL3Ipv6CtrlTable, swL3OspfExternalLsdbSequenceNo=swL3OspfExternalLsdbSequenceNo, swL3RIPInboundRouteFilterEntry=swL3RIPInboundRouteFilterEntry, swL3LoopBackIpCtrlTable=swL3LoopBackIpCtrlTable, swL3ospfVirtIfState=swL3ospfVirtIfState, swL3RIPTimerMgmt=swL3RIPTimerMgmt, swL3IpCtrlIpv6LinkLocalPrefixLen=swL3IpCtrlIpv6LinkLocalPrefixLen, swL3OspfDefInfoOrigMetricType=swL3OspfDefInfoOrigMetricType, swL3Ipv6DHCPv6CPDAddrCtrlInterfaceName=swL3Ipv6DHCPv6CPDAddrCtrlInterfaceName, swL3IpStaticRouteTunnelTable=swL3IpStaticRouteTunnelTable, swL3Ipv6CtrlMaxReassmblySize=swL3Ipv6CtrlMaxReassmblySize, swL3VrrpOperAuthKey=swL3VrrpOperAuthKey, swL3ospfIfBfdStatus=swL3ospfIfBfdStatus, swL3ospfIfTable=swL3ospfIfTable, swL3IpCtrlEntry=swL3IpCtrlEntry, swL3Ipv6DHCPv6CPDAddrCtrlIPv6addr=swL3Ipv6DHCPv6CPDAddrCtrlIPv6addr, swL3Ipv6Address=swL3Ipv6Address, swL3LoopBackIpCtrlAdminState=swL3LoopBackIpCtrlAdminState, swL3IpStaticRouteMetric=swL3IpStaticRouteMetric, swL3RouteRedistriEntry=swL3RouteRedistriEntry, swL3OspfHostIpAddress=swL3OspfHostIpAddress, swL3VrrpOperState=swL3VrrpOperState, swL3ospfAreaId=swL3ospfAreaId, swL3IpMcastStaticRouteEntry=swL3IpMcastStaticRouteEntry, swL3RoutePreferenceRIP=swL3RoutePreferenceRIP, swL3OspfECMPTCPorUDPport=swL3OspfECMPTCPorUDPport, swL3OspfECMPCrcHigh=swL3OspfECMPCrcHigh, swL3VrrpOperVirtualIpAddr=swL3VrrpOperVirtualIpAddr, swL3Ipv6AddressCtrlInterfaceName=swL3Ipv6AddressCtrlInterfaceName, swL3RelayDnsStaticTableState=swL3RelayDnsStaticTableState, swL3ospfIfType=swL3ospfIfType, swL3Ipv6AddressCtrlTable=swL3Ipv6AddressCtrlTable, swL3IpFdbMgmt=swL3IpFdbMgmt, swL3RoutePreferenceOSPFExtT2=swL3RoutePreferenceOSPFExtT2, swL3IpCtrlIpAddr=swL3IpCtrlIpAddr, swL3IpFdbInfoIpAddr=swL3IpFdbInfoIpAddr, swL3ospfVirtIfAreaId=swL3ospfVirtIfAreaId, swL3LoopBackIpCtrlIpSubnetMask=swL3LoopBackIpCtrlIpSubnetMask, swL3ospfVirtIfEvents=swL3ospfVirtIfEvents, swL3OspfExternalLsdbType=swL3OspfExternalLsdbType, swL3dvmrpInterfaceRcvBadRoutes=swL3dvmrpInterfaceRcvBadRoutes, swL3OspfInternalLsdbType=swL3OspfInternalLsdbType, swL3RIPTimeOutTime=swL3RIPTimeOutTime, swL3IpCtrlMgmt=swL3IpCtrlMgmt, swL3ospfAreaMetric=swL3ospfAreaMetric, swL3ospfIfMetric=swL3ospfIfMetric, swL3IpStaticRouteTable=swL3IpStaticRouteTable, swL3DevCtrlRIPState=swL3DevCtrlRIPState, swL3IpCtrlAdminState=swL3IpCtrlAdminState, swL3RoutePreferenceDefault=swL3RoutePreferenceDefault, swL3RIPInboundRouteFilterIfIpAddress=swL3RIPInboundRouteFilterIfIpAddress, swL3RelayDnsCtrlEntry=swL3RelayDnsCtrlEntry, swL3IpCtrlIpv4AdminState=swL3IpCtrlIpv4AdminState, swL3Ipv6CtrlRaOtherConfigFlag=swL3Ipv6CtrlRaOtherConfigFlag, swL3OspfECMPState=swL3OspfECMPState, swL3Ipv6CtrlNsRetransTimer=swL3Ipv6CtrlNsRetransTimer, swL3ospfIfDesignatedRouter=swL3ospfIfDesignatedRouter, swL3VrrpOperIfIndex=swL3VrrpOperIfIndex, swL3ospfVirtIfRetransInterval=swL3ospfVirtIfRetransInterval, swL3Md5Table=swL3Md5Table, VrId=VrId, swL3RouteRedistriType=swL3RouteRedistriType, swL3OspfDefInfoOriginate=swL3OspfDefInfoOriginate, swL3VrrpOperMasterIpAddr=swL3VrrpOperMasterIpAddr, swL3ospfVirtIfAuthKey=swL3ospfVirtIfAuthKey, swL3OspfECMPIpSource=swL3OspfECMPIpSource, swL3ospfVirtIfStatus=swL3ospfVirtIfStatus)
mibBuilder.exportSymbols("DGS-3620-28TC-DC-L3MGMT-MIB", swL3IpCtrlDhcpv6ClientPDState=swL3IpCtrlDhcpv6ClientPDState, swL3dvmrpInterfaceMetric=swL3dvmrpInterfaceMetric, swL3ospfIfAreaId=swL3ospfIfAreaId, swL3RIPInboundRouteFilterType=swL3RIPInboundRouteFilterType, swL3IpCtrlIfIndex=swL3IpCtrlIfIndex, swL3dvmrpInterfaceProbe=swL3dvmrpInterfaceProbe, swL3IpStaticRouteEntry=swL3IpStaticRouteEntry, swL3IpMcastStaticRouteIpmrouteMask=swL3IpMcastStaticRouteIpmrouteMask, swL3Md5RowStatus=swL3Md5RowStatus, swL3IpCtrlState=swL3IpCtrlState, swL3RIPInboundRouteFilterTable=swL3RIPInboundRouteFilterTable, swL3OspfExternalLsdbTable=swL3OspfExternalLsdbTable, swL3Ipv6AddressCtrlState=swL3Ipv6AddressCtrlState, swL3IpStaticRouteMask=swL3IpStaticRouteMask, swL3OspfExternalLsdbRouterId=swL3OspfExternalLsdbRouterId, swL3Ipv6CtrlRaRetransTime=swL3Ipv6CtrlRaRetransTime, swL3VrrpOperCriticalIpAddr=swL3VrrpOperCriticalIpAddr, swL3Ipv6CtrlEntry=swL3Ipv6CtrlEntry, swL3VrrpOperAuthType=swL3VrrpOperAuthType, swL3ospfIfPassiveMode=swL3ospfIfPassiveMode, swL3OspfDefInfoOrigMgmt=swL3OspfDefInfoOrigMgmt, swL3ospfIfAuthKeyID=swL3ospfIfAuthKeyID, swL3ospfIfDistributeListInName=swL3ospfIfDistributeListInName, swL3ospfVirtIfNeighbor=swL3ospfVirtIfNeighbor, swL3ospfVirtIfTable=swL3ospfVirtIfTable, swL3OspfInternalLsdbRouterId=swL3OspfInternalLsdbRouterId, swL3VrrpOperPreemptMode=swL3VrrpOperPreemptMode, swL3VrrpOperAdminState=swL3VrrpOperAdminState, swL3DevCtrl=swL3DevCtrl, swL3OspfExternalLsdbEntry=swL3OspfExternalLsdbEntry, swL3ospfIfAuthKey=swL3ospfIfAuthKey, swL3Ipv6AddressCtrlPreferredLifeTime=swL3Ipv6AddressCtrlPreferredLifeTime)
