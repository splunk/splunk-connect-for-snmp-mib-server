#
# PySNMP MIB module HPN-ICF-DHCP-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-DHCP-SERVER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:25:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, TimeTicks, NotificationType, Unsigned32, MibIdentifier, Counter64, ModuleIdentity, iso, Bits, IpAddress, Counter32, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "NotificationType", "Unsigned32", "MibIdentifier", "Counter64", "ModuleIdentity", "iso", "Bits", "IpAddress", "Counter32", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "MacAddress", "DisplayString", "TextualConvention")
hpnicfDHCPServer = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101))
hpnicfDHCPServer.setRevisions(('2009-05-06 00:00',))
if mibBuilder.loadTexts: hpnicfDHCPServer.setLastUpdated('200905060000Z')
if mibBuilder.loadTexts: hpnicfDHCPServer.setOrganization('')
hpnicfDHCPServerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 1))
hpnicfDHCPServerIPPoolUsage = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPServerIPPoolUsage.setStatus('current')
hpnicfDHCPServerReqTimes = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPServerReqTimes.setStatus('current')
hpnicfDHCPServerReqSuccessTimes = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPServerReqSuccessTimes.setStatus('current')
hpnicfDHCPServerAvgIpUseThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPServerAvgIpUseThreshold.setStatus('current')
hpnicfDHCPServerMaxIpUseThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPServerMaxIpUseThreshold.setStatus('current')
hpnicfDHCPServerAllocateThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPServerAllocateThreshold.setStatus('current')
hpnicfDHCPServerTables = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2))
hpnicfDHCPServerPoolName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDHCPServerPoolName.setStatus('current')
hpnicfDHCPSrvGlobalPoolTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 2), )
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolTable.setStatus('current')
hpnicfDHCPSrvGlobalPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-DHCP-SERVER-MIB", "hpnicfDHCPSrvGlobalPoolName"))
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolEntry.setStatus('current')
hpnicfDHCPSrvGlobalPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolName.setStatus('current')
hpnicfDHCPSrvGlobalPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolRowStatus.setStatus('current')
hpnicfDHCPSrvGlobalPoolConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 3), )
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolConfigTable.setStatus('current')
hpnicfDHCPSrvGlobalPoolConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 3, 1), ).setIndexNames((0, "HPN-ICF-DHCP-SERVER-MIB", "hpnicfDHCPSrvGlobalPoolName"))
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolConfigEntry.setStatus('current')
hpnicfDHCPSrvGlobalPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("null", 0), ("host", 1), ("network", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolType.setStatus('current')
hpnicfDHCPSrvGlobalPoolNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolNetwork.setStatus('current')
hpnicfDHCPSrvGlobalPoolNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolNetworkMask.setStatus('current')
hpnicfDHCPSrvGlobalPoolHostIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolHostIPAddr.setStatus('current')
hpnicfDHCPSrvGlobalPoolHostMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolHostMask.setStatus('current')
hpnicfDHCPSrvGlobalPoolHostHAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 3, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolHostHAddr.setStatus('current')
hpnicfDHCPSrvGlobalPoolCfgUndoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undonetworkip", 1), ("undohostip", 2), ("undohosthaddr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolCfgUndoFlag.setStatus('current')
hpnicfDHCPSrvGlobalPoolStartAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 3, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolStartAddr.setStatus('current')
hpnicfDHCPSrvGlobalPoolEndAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 3, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolEndAddr.setStatus('current')
hpnicfDHCPSrvGlobalPoolParaTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4), )
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolParaTable.setStatus('current')
hpnicfDHCPSrvGlobalPoolParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4, 1), ).setIndexNames((0, "HPN-ICF-DHCP-SERVER-MIB", "hpnicfDHCPSrvGlobalPoolName"))
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolParaEntry.setStatus('current')
hpnicfDHCPSrvGlbPoolLeaseDay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolLeaseDay.setStatus('current')
hpnicfDHCPSrvGlbPoolLeaseHour = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolLeaseHour.setStatus('current')
hpnicfDHCPSrvGlbPoolLeaseMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolLeaseMinute.setStatus('current')
hpnicfDHCPSrvGlbPoolLeaseUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("unlimited", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolLeaseUnlimited.setStatus('current')
hpnicfDHCPSrvGlbPoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolDomainName.setStatus('current')
hpnicfDHCPSrvGlbPoolCliGWIPStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolCliGWIPStr.setStatus('current')
hpnicfDHCPSrvGlbPoolCliGWIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolCliGWIPUndo.setStatus('current')
hpnicfDHCPSrvGlbPoolCliDNSIPStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolCliDNSIPStr.setStatus('current')
hpnicfDHCPSrvGlbPoolCliDNSIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolCliDNSIPUndo.setStatus('current')
hpnicfDHCPSrvGlbPoolCliNetbiosType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("null", 0), ("bnode", 1), ("pnode", 2), ("mnode", 4), ("hnode", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolCliNetbiosType.setStatus('current')
hpnicfDHCPSrvGlbPoolCliNbnsIPStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolCliNbnsIPStr.setStatus('current')
hpnicfDHCPSrvGlbPoolCliNbnsIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolCliNbnsIPUndo.setStatus('current')
hpnicfDHCPSrvGlbPoolParaUndoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undoDomain", 1), ("undoLease", 2), ("undoGateway", 3), ("undoDns", 4), ("undoNbns", 5), ("undoNbType", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolParaUndoFlag.setStatus('current')
hpnicfDHCPSrvGlbPoolIPInUseReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolIPInUseReset.setStatus('current')
hpnicfDHCPSrvGlbPoolLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4, 1, 15), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolLeaseTime.setStatus('current')
hpnicfDHCPSrvGlbPoolPrimaryDNSIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolPrimaryDNSIP.setStatus('current')
hpnicfDHCPSrvGlbPoolSecondaryDNSIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolSecondaryDNSIP.setStatus('current')
hpnicfDHCPSrvGlbPoolLeaseSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolLeaseSecond.setStatus('current')
hpnicfDHCPSrvGlobalPoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 5), )
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolOptionTable.setStatus('current')
hpnicfDHCPSrvGlobalPoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 5, 1), ).setIndexNames((0, "HPN-ICF-DHCP-SERVER-MIB", "hpnicfDHCPSrvGlobalPoolName"), (0, "HPN-ICF-DHCP-SERVER-MIB", "hpnicfDHCPSrvGlbPoolOptCode"))
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolOptionEntry.setStatus('current')
hpnicfDHCPSrvGlbPoolOptCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolOptCode.setStatus('current')
hpnicfDHCPSrvGlbPoolOptType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2), ("ip", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolOptType.setStatus('current')
hpnicfDHCPSrvGlbPoolOptAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolOptAscii.setStatus('current')
hpnicfDHCPSrvGlbPoolOptHexString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 573))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolOptHexString.setStatus('current')
hpnicfDHCPSrvGlbPoolOptIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolOptIPString.setStatus('current')
hpnicfDHCPSrvGlbPoolOptRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolOptRowStatus.setStatus('current')
hpnicfDHCPSrvGlobalPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 6), )
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolStatTable.setStatus('current')
hpnicfDHCPSrvGlobalPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 6, 1), ).setIndexNames((0, "HPN-ICF-DHCP-SERVER-MIB", "hpnicfDHCPSrvGlobalPoolName"))
if mibBuilder.loadTexts: hpnicfDHCPSrvGlobalPoolStatEntry.setStatus('current')
hpnicfDHCPSrvGlbPoolIPPoolUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolIPPoolUsage.setStatus('current')
hpnicfDHCPSrvGlbPoolReqTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolReqTimes.setStatus('current')
hpnicfDHCPSrvGlbPoolSuccessTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolSuccessTimes.setStatus('current')
hpnicfDHCPSrvGlbPoolDiscoverTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolDiscoverTimes.setStatus('current')
hpnicfDHCPSrvGlbPoolOfferTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolOfferTimes.setStatus('current')
hpnicfDHCPSrvGlbPoolACKTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolACKTimes.setStatus('current')
hpnicfDHCPSrvGlbPoolTotalIpNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolTotalIpNum.setStatus('current')
hpnicfDHCPSrvGlbPoolInUsedIpNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSrvGlbPoolInUsedIpNum.setStatus('current')
hpnicfDHCPSvrOptionGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 7), )
if mibBuilder.loadTexts: hpnicfDHCPSvrOptionGroupTable.setStatus('current')
hpnicfDHCPSvrOptionGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 7, 1), ).setIndexNames((0, "HPN-ICF-DHCP-SERVER-MIB", "hpnicfDHCPSvrOptionGroupIndex"))
if mibBuilder.loadTexts: hpnicfDHCPSvrOptionGroupEntry.setStatus('current')
hpnicfDHCPSvrOptionGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSvrOptionGroupIndex.setStatus('current')
hpnicfDHCPSvrOptionGroupRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSvrOptionGroupRowstatus.setStatus('current')
hpnicfDHCPSvrOptionTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 8), )
if mibBuilder.loadTexts: hpnicfDHCPSvrOptionTable.setStatus('current')
hpnicfDHCPSvrOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 8, 1), ).setIndexNames((0, "HPN-ICF-DHCP-SERVER-MIB", "hpnicfDHCPSvrOptionGroupIndex"), (0, "HPN-ICF-DHCP-SERVER-MIB", "hpnicfDHCPSvrOptionCode"))
if mibBuilder.loadTexts: hpnicfDHCPSvrOptionEntry.setStatus('current')
hpnicfDHCPSvrOptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSvrOptionCode.setStatus('current')
hpnicfDHCPSvrOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2), ("ip", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSvrOptionType.setStatus('current')
hpnicfDHCPSvrOptionAsciiString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSvrOptionAsciiString.setStatus('current')
hpnicfDHCPSvrOptionHexString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 573))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSvrOptionHexString.setStatus('current')
hpnicfDHCPSvrOptionIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSvrOptionIPString.setStatus('current')
hpnicfDHCPSvrOptionRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 8, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSvrOptionRowstatus.setStatus('current')
hpnicfDHCPSvrVerifyMacTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 9), )
if mibBuilder.loadTexts: hpnicfDHCPSvrVerifyMacTable.setStatus('current')
hpnicfDHCPSvrVerifyMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 9, 1), ).setIndexNames((0, "HPN-ICF-DHCP-SERVER-MIB", "hpnicfDHCPSrvGlobalPoolName"))
if mibBuilder.loadTexts: hpnicfDHCPSvrVerifyMacEntry.setStatus('current')
hpnicfDHCPSvrVerifyMacSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSvrVerifyMacSwitch.setStatus('current')
hpnicfDHCPSvrPoolMacTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 10), )
if mibBuilder.loadTexts: hpnicfDHCPSvrPoolMacTable.setStatus('current')
hpnicfDHCPSvrPoolMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 10, 1), ).setIndexNames((0, "HPN-ICF-DHCP-SERVER-MIB", "hpnicfDHCPSrvGlobalPoolName"), (0, "HPN-ICF-DHCP-SERVER-MIB", "hpnicfDHCPSvrPoolMac"), (0, "HPN-ICF-DHCP-SERVER-MIB", "hpnicfDHCPSvrPoolMacMask"))
if mibBuilder.loadTexts: hpnicfDHCPSvrPoolMacEntry.setStatus('current')
hpnicfDHCPSvrPoolMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 10, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSvrPoolMac.setStatus('current')
hpnicfDHCPSvrPoolMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 10, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPSvrPoolMacMask.setStatus('current')
hpnicfDHCPSvrPoolMacOptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPSvrPoolMacOptIndex.setStatus('current')
hpnicfDHCPSvrPoolMacRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 2, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPSvrPoolMacRowstatus.setStatus('current')
hpnicfDHCPServerTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 3))
hpnicfDHCPServerTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 3, 0))
hpnicfDHCPServerAddrExhaust = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 3, 0, 1)).setObjects(("HPN-ICF-DHCP-SERVER-MIB", "hpnicfDHCPServerPoolName"), ("HPN-ICF-DHCP-SERVER-MIB", "hpnicfDHCPServerFirstTrapTime"))
if mibBuilder.loadTexts: hpnicfDHCPServerAddrExhaust.setStatus('current')
hpnicfDHCPServerAddrExhaustRecover = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 3, 0, 2)).setObjects(("HPN-ICF-DHCP-SERVER-MIB", "hpnicfDHCPServerPoolName"), ("HPN-ICF-DHCP-SERVER-MIB", "hpnicfDHCPServerFirstTrapTime"))
if mibBuilder.loadTexts: hpnicfDHCPServerAddrExhaustRecover.setStatus('current')
hpnicfDHCPServerAvgIpUsageOverflow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 3, 0, 3)).setObjects(("HPN-ICF-DHCP-SERVER-MIB", "hpnicfDHCPServerPoolName"))
if mibBuilder.loadTexts: hpnicfDHCPServerAvgIpUsageOverflow.setStatus('current')
hpnicfDHCPServerMaxIpUsageOverflow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 3, 0, 4)).setObjects(("HPN-ICF-DHCP-SERVER-MIB", "hpnicfDHCPServerPoolName"))
if mibBuilder.loadTexts: hpnicfDHCPServerMaxIpUsageOverflow.setStatus('current')
hpnicfDHCPServerAllocateOverflow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 3, 0, 5))
if mibBuilder.loadTexts: hpnicfDHCPServerAllocateOverflow.setStatus('current')
hpnicfDHCPServerTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 3, 1))
hpnicfDHCPServerFirstTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 101, 3, 1, 1), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDHCPServerFirstTrapTime.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-DHCP-SERVER-MIB", hpnicfDHCPServerAvgIpUsageOverflow=hpnicfDHCPServerAvgIpUsageOverflow, hpnicfDHCPSrvGlbPoolOptIPString=hpnicfDHCPSrvGlbPoolOptIPString, hpnicfDHCPSrvGlobalPoolConfigTable=hpnicfDHCPSrvGlobalPoolConfigTable, hpnicfDHCPSvrOptionCode=hpnicfDHCPSvrOptionCode, hpnicfDHCPSrvGlobalPoolParaTable=hpnicfDHCPSrvGlobalPoolParaTable, hpnicfDHCPSrvGlobalPoolStatEntry=hpnicfDHCPSrvGlobalPoolStatEntry, hpnicfDHCPServerReqSuccessTimes=hpnicfDHCPServerReqSuccessTimes, hpnicfDHCPServerAvgIpUseThreshold=hpnicfDHCPServerAvgIpUseThreshold, hpnicfDHCPSrvGlbPoolCliNbnsIPStr=hpnicfDHCPSrvGlbPoolCliNbnsIPStr, hpnicfDHCPSrvGlbPoolLeaseSecond=hpnicfDHCPSrvGlbPoolLeaseSecond, hpnicfDHCPSrvGlobalPoolCfgUndoFlag=hpnicfDHCPSrvGlobalPoolCfgUndoFlag, hpnicfDHCPSvrOptionType=hpnicfDHCPSvrOptionType, hpnicfDHCPSvrPoolMacMask=hpnicfDHCPSvrPoolMacMask, hpnicfDHCPServerAddrExhaustRecover=hpnicfDHCPServerAddrExhaustRecover, hpnicfDHCPServerAllocateOverflow=hpnicfDHCPServerAllocateOverflow, hpnicfDHCPSrvGlbPoolCliGWIPStr=hpnicfDHCPSrvGlbPoolCliGWIPStr, hpnicfDHCPSrvGlobalPoolParaEntry=hpnicfDHCPSrvGlobalPoolParaEntry, hpnicfDHCPSvrOptionRowstatus=hpnicfDHCPSvrOptionRowstatus, hpnicfDHCPSrvGlbPoolCliDNSIPUndo=hpnicfDHCPSrvGlbPoolCliDNSIPUndo, hpnicfDHCPSrvGlbPoolSecondaryDNSIP=hpnicfDHCPSrvGlbPoolSecondaryDNSIP, hpnicfDHCPSrvGlobalPoolName=hpnicfDHCPSrvGlobalPoolName, hpnicfDHCPSrvGlbPoolOptRowStatus=hpnicfDHCPSrvGlbPoolOptRowStatus, hpnicfDHCPSvrVerifyMacEntry=hpnicfDHCPSvrVerifyMacEntry, hpnicfDHCPSvrPoolMacOptIndex=hpnicfDHCPSvrPoolMacOptIndex, hpnicfDHCPSvrOptionGroupTable=hpnicfDHCPSvrOptionGroupTable, hpnicfDHCPSrvGlbPoolPrimaryDNSIP=hpnicfDHCPSrvGlbPoolPrimaryDNSIP, hpnicfDHCPSrvGlbPoolParaUndoFlag=hpnicfDHCPSrvGlbPoolParaUndoFlag, hpnicfDHCPSrvGlbPoolOptCode=hpnicfDHCPSrvGlbPoolOptCode, hpnicfDHCPSrvGlobalPoolEntry=hpnicfDHCPSrvGlobalPoolEntry, hpnicfDHCPSrvGlobalPoolOptionEntry=hpnicfDHCPSrvGlobalPoolOptionEntry, hpnicfDHCPSrvGlobalPoolStartAddr=hpnicfDHCPSrvGlobalPoolStartAddr, hpnicfDHCPSrvGlobalPoolType=hpnicfDHCPSrvGlobalPoolType, hpnicfDHCPServerReqTimes=hpnicfDHCPServerReqTimes, hpnicfDHCPSrvGlbPoolOptAscii=hpnicfDHCPSrvGlbPoolOptAscii, hpnicfDHCPSrvGlobalPoolNetwork=hpnicfDHCPSrvGlobalPoolNetwork, hpnicfDHCPServerAddrExhaust=hpnicfDHCPServerAddrExhaust, hpnicfDHCPSrvGlbPoolCliNbnsIPUndo=hpnicfDHCPSrvGlbPoolCliNbnsIPUndo, hpnicfDHCPServerPoolName=hpnicfDHCPServerPoolName, hpnicfDHCPSvrOptionIPString=hpnicfDHCPSvrOptionIPString, hpnicfDHCPServerAllocateThreshold=hpnicfDHCPServerAllocateThreshold, hpnicfDHCPSrvGlbPoolLeaseUnlimited=hpnicfDHCPSrvGlbPoolLeaseUnlimited, hpnicfDHCPSvrOptionGroupIndex=hpnicfDHCPSvrOptionGroupIndex, hpnicfDHCPSrvGlbPoolCliGWIPUndo=hpnicfDHCPSrvGlbPoolCliGWIPUndo, hpnicfDHCPServer=hpnicfDHCPServer, hpnicfDHCPSrvGlbPoolLeaseTime=hpnicfDHCPSrvGlbPoolLeaseTime, hpnicfDHCPSvrOptionHexString=hpnicfDHCPSvrOptionHexString, hpnicfDHCPSrvGlbPoolTotalIpNum=hpnicfDHCPSrvGlbPoolTotalIpNum, hpnicfDHCPSrvGlbPoolCliDNSIPStr=hpnicfDHCPSrvGlbPoolCliDNSIPStr, hpnicfDHCPSrvGlbPoolCliNetbiosType=hpnicfDHCPSrvGlbPoolCliNetbiosType, hpnicfDHCPSrvGlbPoolDiscoverTimes=hpnicfDHCPSrvGlbPoolDiscoverTimes, hpnicfDHCPSvrPoolMac=hpnicfDHCPSvrPoolMac, hpnicfDHCPSvrVerifyMacSwitch=hpnicfDHCPSvrVerifyMacSwitch, hpnicfDHCPSrvGlobalPoolHostMask=hpnicfDHCPSrvGlobalPoolHostMask, hpnicfDHCPSrvGlobalPoolRowStatus=hpnicfDHCPSrvGlobalPoolRowStatus, hpnicfDHCPSrvGlbPoolIPInUseReset=hpnicfDHCPSrvGlbPoolIPInUseReset, hpnicfDHCPSrvGlbPoolOptHexString=hpnicfDHCPSrvGlbPoolOptHexString, hpnicfDHCPSrvGlobalPoolOptionTable=hpnicfDHCPSrvGlobalPoolOptionTable, hpnicfDHCPSvrVerifyMacTable=hpnicfDHCPSvrVerifyMacTable, hpnicfDHCPServerTrapObjects=hpnicfDHCPServerTrapObjects, hpnicfDHCPSrvGlbPoolReqTimes=hpnicfDHCPSrvGlbPoolReqTimes, hpnicfDHCPSrvGlbPoolDomainName=hpnicfDHCPSrvGlbPoolDomainName, hpnicfDHCPServerTables=hpnicfDHCPServerTables, hpnicfDHCPSrvGlobalPoolNetworkMask=hpnicfDHCPSrvGlobalPoolNetworkMask, hpnicfDHCPSrvGlobalPoolConfigEntry=hpnicfDHCPSrvGlobalPoolConfigEntry, hpnicfDHCPServerTraps=hpnicfDHCPServerTraps, hpnicfDHCPSvrOptionEntry=hpnicfDHCPSvrOptionEntry, hpnicfDHCPSvrOptionTable=hpnicfDHCPSvrOptionTable, hpnicfDHCPSrvGlobalPoolHostHAddr=hpnicfDHCPSrvGlobalPoolHostHAddr, hpnicfDHCPSrvGlobalPoolEndAddr=hpnicfDHCPSrvGlobalPoolEndAddr, hpnicfDHCPSvrOptionGroupRowstatus=hpnicfDHCPSvrOptionGroupRowstatus, hpnicfDHCPSrvGlbPoolIPPoolUsage=hpnicfDHCPSrvGlbPoolIPPoolUsage, hpnicfDHCPSrvGlobalPoolTable=hpnicfDHCPSrvGlobalPoolTable, hpnicfDHCPSrvGlbPoolACKTimes=hpnicfDHCPSrvGlbPoolACKTimes, hpnicfDHCPServerTrapPrefix=hpnicfDHCPServerTrapPrefix, hpnicfDHCPSrvGlbPoolSuccessTimes=hpnicfDHCPSrvGlbPoolSuccessTimes, hpnicfDHCPSvrPoolMacTable=hpnicfDHCPSvrPoolMacTable, hpnicfDHCPSvrPoolMacRowstatus=hpnicfDHCPSvrPoolMacRowstatus, hpnicfDHCPSrvGlobalPoolHostIPAddr=hpnicfDHCPSrvGlobalPoolHostIPAddr, hpnicfDHCPSrvGlbPoolLeaseHour=hpnicfDHCPSrvGlbPoolLeaseHour, hpnicfDHCPSrvGlbPoolOfferTimes=hpnicfDHCPSrvGlbPoolOfferTimes, hpnicfDHCPServerMaxIpUsageOverflow=hpnicfDHCPServerMaxIpUsageOverflow, hpnicfDHCPSrvGlbPoolLeaseMinute=hpnicfDHCPSrvGlbPoolLeaseMinute, hpnicfDHCPServerIPPoolUsage=hpnicfDHCPServerIPPoolUsage, hpnicfDHCPSvrOptionGroupEntry=hpnicfDHCPSvrOptionGroupEntry, hpnicfDHCPSrvGlobalPoolStatTable=hpnicfDHCPSrvGlobalPoolStatTable, hpnicfDHCPSrvGlbPoolOptType=hpnicfDHCPSrvGlbPoolOptType, hpnicfDHCPServerMaxIpUseThreshold=hpnicfDHCPServerMaxIpUseThreshold, PYSNMP_MODULE_ID=hpnicfDHCPServer, hpnicfDHCPSrvGlbPoolLeaseDay=hpnicfDHCPSrvGlbPoolLeaseDay, hpnicfDHCPServerObjects=hpnicfDHCPServerObjects, hpnicfDHCPSrvGlbPoolInUsedIpNum=hpnicfDHCPSrvGlbPoolInUsedIpNum, hpnicfDHCPSvrPoolMacEntry=hpnicfDHCPSvrPoolMacEntry, hpnicfDHCPSvrOptionAsciiString=hpnicfDHCPSvrOptionAsciiString, hpnicfDHCPServerFirstTrapTime=hpnicfDHCPServerFirstTrapTime)
