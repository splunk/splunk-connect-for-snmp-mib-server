#
# PySNMP MIB module HPN-ICF-DHCP-SNOOP2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-DHCP-SNOOP2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:25:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex")
InetAddressIPv4, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, NotificationType, Bits, Counter32, Unsigned32, Integer32, ObjectIdentity, Counter64, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "NotificationType", "Bits", "Counter32", "Unsigned32", "Integer32", "ObjectIdentity", "Counter64", "MibIdentifier", "ModuleIdentity")
TextualConvention, TruthValue, MacAddress, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "MacAddress", "RowStatus", "DisplayString")
hpnicfDhcpSnoop2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124))
hpnicfDhcpSnoop2.setRevisions(('2013-04-15 00:00',))
if mibBuilder.loadTexts: hpnicfDhcpSnoop2.setLastUpdated('201304150000Z')
if mibBuilder.loadTexts: hpnicfDhcpSnoop2.setOrganization('')
hpnicfDhcpSnoop2ScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 1))
hpnicfDhcpSnoop2ConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 1, 1))
hpnicfDhcpSnoop2Enabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2Enabled.setStatus('current')
hpnicfDhcpSnoop2BindDbName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2BindDbName.setStatus('current')
hpnicfDhcpSnoop2BindRefreshIntvl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 864000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2BindRefreshIntvl.setStatus('current')
hpnicfDhcpSnoop2BindRefresh = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2BindRefresh.setStatus('current')
hpnicfDhcpSnoop2StatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 1, 2))
hpnicfDhcpSnoop2PktSentNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 1, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2PktSentNum.setStatus('current')
hpnicfDhcpSnoop2PktRcvNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 1, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2PktRcvNum.setStatus('current')
hpnicfDhcpSnoop2PktDropNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 1, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2PktDropNum.setStatus('current')
hpnicfDhcpSnoop2Tables = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2))
hpnicfDhcpSnoop2BindTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 1), )
if mibBuilder.loadTexts: hpnicfDhcpSnoop2BindTable.setStatus('current')
hpnicfDhcpSnoop2BindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-DHCP-SNOOP2-MIB", "hpnicfDhcpSnoop2BindIpAddr"), (0, "HPN-ICF-DHCP-SNOOP2-MIB", "hpnicfDhcpSnoop2BindVlanId"), (0, "HPN-ICF-DHCP-SNOOP2-MIB", "hpnicfDhcpSnoop2BindSecVlanId"))
if mibBuilder.loadTexts: hpnicfDhcpSnoop2BindEntry.setStatus('current')
hpnicfDhcpSnoop2BindIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 1, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hpnicfDhcpSnoop2BindIpAddr.setStatus('current')
hpnicfDhcpSnoop2BindVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hpnicfDhcpSnoop2BindVlanId.setStatus('current')
hpnicfDhcpSnoop2BindSecVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(65535, 65535), )))
if mibBuilder.loadTexts: hpnicfDhcpSnoop2BindSecVlanId.setStatus('current')
hpnicfDhcpSnoop2BindMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2BindMacAddr.setStatus('current')
hpnicfDhcpSnoop2BindLease = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2BindLease.setStatus('current')
hpnicfDhcpSnoop2BindPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 1, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2BindPortIndex.setStatus('current')
hpnicfDhcpSnoop2BindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2BindRowStatus.setStatus('current')
hpnicfDhcpSnoop2IfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 2), )
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfConfigTable.setStatus('current')
hpnicfDhcpSnoop2IfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfConfigEntry.setStatus('current')
hpnicfDhcpSnoop2IfTrustStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("untrusted", 0), ("trusted", 1))).clone('untrusted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfTrustStatus.setStatus('current')
hpnicfDhcpSnoop2IfCheckMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfCheckMac.setStatus('current')
hpnicfDhcpSnoop2IfCheckRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfCheckRequest.setStatus('current')
hpnicfDhcpSnoop2IfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfRateLimit.setStatus('current')
hpnicfDhcpSnoop2IfRecordBind = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfRecordBind.setStatus('current')
hpnicfDhcpSnoop2IfMaxLearnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfMaxLearnNum.setStatus('current')
hpnicfDhcpSnoop2IfOpt82Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfOpt82Enable.setStatus('current')
hpnicfDhcpSnoop2IfOpt82Strategy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("keep", 2), ("replace", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfOpt82Strategy.setStatus('current')
hpnicfDhcpSnoop2IfOpt82CIDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("verbose", 2), ("userDefine", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfOpt82CIDMode.setStatus('current')
hpnicfDhcpSnoop2IfOpt82CIDNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("mac", 2), ("sysname", 3), ("userDefine", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfOpt82CIDNodeType.setStatus('current')
hpnicfDhcpSnoop2IfOpt82CIDNodeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfOpt82CIDNodeStr.setStatus('current')
hpnicfDhcpSnoop2IfOpt82CIDStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 2, 1, 12), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(3, 63), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfOpt82CIDStr.setStatus('current')
hpnicfDhcpSnoop2IfOpt82CIDFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hex", 1), ("ascii", 2), ("undefine", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfOpt82CIDFormat.setStatus('current')
hpnicfDhcpSnoop2IfOpt82RIDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("sysname", 2), ("userDefine", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfOpt82RIDMode.setStatus('current')
hpnicfDhcpSnoop2IfOpt82RIDStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfOpt82RIDStr.setStatus('current')
hpnicfDhcpSnoop2IfOpt82RIDFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hex", 1), ("ascii", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfOpt82RIDFormat.setStatus('current')
hpnicfDhcpSnoop2IfVlanCIDTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 3), )
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfVlanCIDTable.setStatus('current')
hpnicfDhcpSnoop2IfVlanCIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-DHCP-SNOOP2-MIB", "hpnicfDhcpSnoop2IfVlanCIDVlanIndex"))
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfVlanCIDEntry.setStatus('current')
hpnicfDhcpSnoop2IfVlanCIDVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfVlanCIDVlanIndex.setStatus('current')
hpnicfDhcpSnoop2IfVlanCIDStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfVlanCIDStr.setStatus('current')
hpnicfDhcpSnoop2IfVlanCIDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfVlanCIDRowStatus.setStatus('current')
hpnicfDhcpSnoop2IfVlanRIDTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 4), )
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfVlanRIDTable.setStatus('current')
hpnicfDhcpSnoop2IfVlanRIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-DHCP-SNOOP2-MIB", "hpnicfDhcpSnoop2IfVlanRIDVlanIndex"))
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfVlanRIDEntry.setStatus('current')
hpnicfDhcpSnoop2IfVlanRIDVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfVlanRIDVlanIndex.setStatus('current')
hpnicfDhcpSnoop2IfVlanRIDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sysname", 1), ("userDefine", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfVlanRIDMode.setStatus('current')
hpnicfDhcpSnoop2IfVlanRIDStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfVlanRIDStr.setStatus('current')
hpnicfDhcpSnoop2IfVlanRIDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 124, 2, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDhcpSnoop2IfVlanRIDRowStatus.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-DHCP-SNOOP2-MIB", hpnicfDhcpSnoop2BindDbName=hpnicfDhcpSnoop2BindDbName, hpnicfDhcpSnoop2Tables=hpnicfDhcpSnoop2Tables, hpnicfDhcpSnoop2ScalarObjects=hpnicfDhcpSnoop2ScalarObjects, hpnicfDhcpSnoop2BindSecVlanId=hpnicfDhcpSnoop2BindSecVlanId, hpnicfDhcpSnoop2IfOpt82CIDNodeType=hpnicfDhcpSnoop2IfOpt82CIDNodeType, hpnicfDhcpSnoop2IfOpt82RIDStr=hpnicfDhcpSnoop2IfOpt82RIDStr, hpnicfDhcpSnoop2IfTrustStatus=hpnicfDhcpSnoop2IfTrustStatus, hpnicfDhcpSnoop2IfVlanRIDMode=hpnicfDhcpSnoop2IfVlanRIDMode, hpnicfDhcpSnoop2IfOpt82CIDFormat=hpnicfDhcpSnoop2IfOpt82CIDFormat, hpnicfDhcpSnoop2BindRowStatus=hpnicfDhcpSnoop2BindRowStatus, hpnicfDhcpSnoop2IfVlanCIDRowStatus=hpnicfDhcpSnoop2IfVlanCIDRowStatus, hpnicfDhcpSnoop2=hpnicfDhcpSnoop2, hpnicfDhcpSnoop2PktSentNum=hpnicfDhcpSnoop2PktSentNum, hpnicfDhcpSnoop2BindTable=hpnicfDhcpSnoop2BindTable, hpnicfDhcpSnoop2IfCheckRequest=hpnicfDhcpSnoop2IfCheckRequest, hpnicfDhcpSnoop2BindPortIndex=hpnicfDhcpSnoop2BindPortIndex, hpnicfDhcpSnoop2BindRefresh=hpnicfDhcpSnoop2BindRefresh, hpnicfDhcpSnoop2IfOpt82Strategy=hpnicfDhcpSnoop2IfOpt82Strategy, hpnicfDhcpSnoop2IfVlanRIDEntry=hpnicfDhcpSnoop2IfVlanRIDEntry, hpnicfDhcpSnoop2IfOpt82CIDNodeStr=hpnicfDhcpSnoop2IfOpt82CIDNodeStr, hpnicfDhcpSnoop2IfMaxLearnNum=hpnicfDhcpSnoop2IfMaxLearnNum, hpnicfDhcpSnoop2ConfigGroup=hpnicfDhcpSnoop2ConfigGroup, hpnicfDhcpSnoop2IfRateLimit=hpnicfDhcpSnoop2IfRateLimit, hpnicfDhcpSnoop2IfOpt82RIDMode=hpnicfDhcpSnoop2IfOpt82RIDMode, hpnicfDhcpSnoop2IfVlanCIDEntry=hpnicfDhcpSnoop2IfVlanCIDEntry, hpnicfDhcpSnoop2PktRcvNum=hpnicfDhcpSnoop2PktRcvNum, hpnicfDhcpSnoop2Enabled=hpnicfDhcpSnoop2Enabled, hpnicfDhcpSnoop2IfOpt82RIDFormat=hpnicfDhcpSnoop2IfOpt82RIDFormat, hpnicfDhcpSnoop2IfVlanRIDRowStatus=hpnicfDhcpSnoop2IfVlanRIDRowStatus, hpnicfDhcpSnoop2IfVlanCIDStr=hpnicfDhcpSnoop2IfVlanCIDStr, hpnicfDhcpSnoop2IfVlanCIDTable=hpnicfDhcpSnoop2IfVlanCIDTable, hpnicfDhcpSnoop2IfConfigTable=hpnicfDhcpSnoop2IfConfigTable, PYSNMP_MODULE_ID=hpnicfDhcpSnoop2, hpnicfDhcpSnoop2StatisticsGroup=hpnicfDhcpSnoop2StatisticsGroup, hpnicfDhcpSnoop2IfOpt82Enable=hpnicfDhcpSnoop2IfOpt82Enable, hpnicfDhcpSnoop2IfCheckMac=hpnicfDhcpSnoop2IfCheckMac, hpnicfDhcpSnoop2BindMacAddr=hpnicfDhcpSnoop2BindMacAddr, hpnicfDhcpSnoop2BindVlanId=hpnicfDhcpSnoop2BindVlanId, hpnicfDhcpSnoop2PktDropNum=hpnicfDhcpSnoop2PktDropNum, hpnicfDhcpSnoop2IfVlanRIDVlanIndex=hpnicfDhcpSnoop2IfVlanRIDVlanIndex, hpnicfDhcpSnoop2BindLease=hpnicfDhcpSnoop2BindLease, hpnicfDhcpSnoop2IfVlanCIDVlanIndex=hpnicfDhcpSnoop2IfVlanCIDVlanIndex, hpnicfDhcpSnoop2BindIpAddr=hpnicfDhcpSnoop2BindIpAddr, hpnicfDhcpSnoop2IfOpt82CIDStr=hpnicfDhcpSnoop2IfOpt82CIDStr, hpnicfDhcpSnoop2IfVlanRIDStr=hpnicfDhcpSnoop2IfVlanRIDStr, hpnicfDhcpSnoop2IfRecordBind=hpnicfDhcpSnoop2IfRecordBind, hpnicfDhcpSnoop2IfVlanRIDTable=hpnicfDhcpSnoop2IfVlanRIDTable, hpnicfDhcpSnoop2BindRefreshIntvl=hpnicfDhcpSnoop2BindRefreshIntvl, hpnicfDhcpSnoop2IfConfigEntry=hpnicfDhcpSnoop2IfConfigEntry, hpnicfDhcpSnoop2BindEntry=hpnicfDhcpSnoop2BindEntry, hpnicfDhcpSnoop2IfOpt82CIDMode=hpnicfDhcpSnoop2IfOpt82CIDMode)
