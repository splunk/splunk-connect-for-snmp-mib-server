#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-X25DteMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-X25DteMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:22:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
Unsigned32, Gauge32, DisplayString, Integer32, InterfaceIndex, Counter32, RowStatus, StorageType = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "Unsigned32", "Gauge32", "DisplayString", "Integer32", "InterfaceIndex", "Counter32", "RowStatus", "StorageType")
PassportCounter64, NonReplicated, AsciiString, Link, HexString, DigitString = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "PassportCounter64", "NonReplicated", "AsciiString", "Link", "HexString", "DigitString")
mscComponents, mscPassportMIBs = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscComponents", "mscPassportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, MibIdentifier, ModuleIdentity, Gauge32, TimeTicks, Counter64, Integer32, Counter32, NotificationType, ObjectIdentity, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "ModuleIdentity", "Gauge32", "TimeTicks", "Counter64", "Integer32", "Counter32", "NotificationType", "ObjectIdentity", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
x25DteMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 48))
mscX25Dte = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90))
mscX25DteRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 1), )
if mibBuilder.loadTexts: mscX25DteRowStatusTable.setStatus('mandatory')
mscX25DteRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"))
if mibBuilder.loadTexts: mscX25DteRowStatusEntry.setStatus('mandatory')
mscX25DteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteRowStatus.setStatus('mandatory')
mscX25DteComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteComponentName.setStatus('mandatory')
mscX25DteStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteStorageType.setStatus('mandatory')
mscX25DteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: mscX25DteIndex.setStatus('mandatory')
mscX25DteCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 20), )
if mibBuilder.loadTexts: mscX25DteCidDataTable.setStatus('mandatory')
mscX25DteCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 20, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"))
if mibBuilder.loadTexts: mscX25DteCidDataEntry.setStatus('mandatory')
mscX25DteCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteCustomerIdentifier.setStatus('mandatory')
mscX25DteIfTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 21), )
if mibBuilder.loadTexts: mscX25DteIfTable.setStatus('mandatory')
mscX25DteIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 21, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"))
if mibBuilder.loadTexts: mscX25DteIfEntry.setStatus('mandatory')
mscX25DteInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2))).clone('dte')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteInterfaceMode.setStatus('mandatory')
mscX25DteMaxActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteMaxActiveChannels.setStatus('mandatory')
mscX25DteNumberOfPLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 21, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteNumberOfPLcn.setStatus('mandatory')
mscX25DtePacketSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modulo8", 1), ("modulo128", 2))).clone('modulo8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePacketSequencing.setStatus('mandatory')
mscX25DteT20RestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 21, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65536000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteT20RestartTimer.setStatus('mandatory')
mscX25DteT21CallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 21, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65536000)).clone(180000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteT21CallTimer.setStatus('mandatory')
mscX25DteT22ResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 21, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65536000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteT22ResetTimer.setStatus('mandatory')
mscX25DteT23ClearTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 21, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65536000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteT23ClearTimer.setStatus('mandatory')
mscX25DteLcnCTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 22), )
if mibBuilder.loadTexts: mscX25DteLcnCTable.setStatus('mandatory')
mscX25DteLcnCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 22, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"))
if mibBuilder.loadTexts: mscX25DteLcnCEntry.setStatus('mandatory')
mscX25DteLowestILChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteLowestILChannelNumber.setStatus('mandatory')
mscX25DteHighestILChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 22, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteHighestILChannelNumber.setStatus('mandatory')
mscX25DteLowestTLChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 22, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteLowestTLChannelNumber.setStatus('mandatory')
mscX25DteHighestTLChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 22, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteHighestTLChannelNumber.setStatus('mandatory')
mscX25DteLowestOLChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 22, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteLowestOLChannelNumber.setStatus('mandatory')
mscX25DteHighestOLChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 22, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteHighestOLChannelNumber.setStatus('mandatory')
mscX25DteDcpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 23), )
if mibBuilder.loadTexts: mscX25DteDcpTable.setStatus('mandatory')
mscX25DteDcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 23, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"))
if mibBuilder.loadTexts: mscX25DteDcpEntry.setStatus('mandatory')
mscX25DteInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 23, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteInPacketSize.setStatus('mandatory')
mscX25DteOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 23, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteOutPacketSize.setStatus('mandatory')
mscX25DteInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 23, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteInWindowSize.setStatus('mandatory')
mscX25DteOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 23, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteOutWindowSize.setStatus('mandatory')
mscX25DteAcceptReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("accept", 2), ("refuse", 3), ("neverAccept", 4))).clone('refuse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteAcceptReverseCharging.setStatus('mandatory')
mscX25DteProposeReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("reverse", 2), ("local", 3))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteProposeReverseCharging.setStatus('mandatory')
mscX25DteOutThroughputClassSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 23, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17))).clone(namedValues=NamedValues(("n75", 3), ("n150", 4), ("n300", 5), ("n600", 6), ("n1200", 7), ("n2400", 8), ("n4800", 9), ("n9600", 10), ("n19200", 11), ("n48000", 12), ("n64000", 13), ("notSpecified", 17))).clone('notSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteOutThroughputClassSize.setStatus('mandatory')
mscX25DteInThroughputClassSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 23, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17))).clone(namedValues=NamedValues(("n75", 3), ("n150", 4), ("n300", 5), ("n600", 6), ("n1200", 7), ("n2400", 8), ("n4800", 9), ("n9600", 10), ("n19200", 11), ("n48000", 12), ("n64000", 13), ("notSpecified", 17))).clone('notSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteInThroughputClassSize.setStatus('mandatory')
mscX25DteCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 23, 1, 10), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteCugIndex.setStatus('mandatory')
mscX25DteCugoaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 23, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteCugoaIndex.setStatus('mandatory')
mscX25DteChargingInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 23, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("notSpecified", 2), ("notRequested", 3), ("requested", 4))).clone('notSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteChargingInformation.setStatus('mandatory')
mscX25DteRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 23, 1, 14), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteRpoa.setStatus('mandatory')
mscX25DteTrnstDlySlctnAInd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 23, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(65536)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteTrnstDlySlctnAInd.setStatus('mandatory')
mscX25DteCallingNetworkFax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 23, 1, 24), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteCallingNetworkFax.setStatus('mandatory')
mscX25DteCalledNetworkFax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 23, 1, 25), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteCalledNetworkFax.setStatus('mandatory')
mscX25DteCallUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 23, 1, 26), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteCallUserData.setStatus('mandatory')
mscX25DteIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 24), )
if mibBuilder.loadTexts: mscX25DteIfEntryTable.setStatus('mandatory')
mscX25DteIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 24, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"))
if mibBuilder.loadTexts: mscX25DteIfEntryEntry.setStatus('mandatory')
mscX25DteIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteIfAdminStatus.setStatus('mandatory')
mscX25DteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 24, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteIfIndex.setStatus('mandatory')
mscX25DteStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 25), )
if mibBuilder.loadTexts: mscX25DteStateTable.setStatus('mandatory')
mscX25DteStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 25, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"))
if mibBuilder.loadTexts: mscX25DteStateEntry.setStatus('mandatory')
mscX25DteAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteAdminState.setStatus('mandatory')
mscX25DteOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteOperationalState.setStatus('mandatory')
mscX25DteUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteUsageState.setStatus('mandatory')
mscX25DteOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 26), )
if mibBuilder.loadTexts: mscX25DteOperStatusTable.setStatus('mandatory')
mscX25DteOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 26, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"))
if mibBuilder.loadTexts: mscX25DteOperStatusEntry.setStatus('mandatory')
mscX25DteSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteSnmpOperStatus.setStatus('mandatory')
mscX25DteOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 27), )
if mibBuilder.loadTexts: mscX25DteOpTable.setStatus('mandatory')
mscX25DteOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 27, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"))
if mibBuilder.loadTexts: mscX25DteOpEntry.setStatus('mandatory')
mscX25DteInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 27, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notReady", 0), ("localRestarting", 1), ("remoteRestarting", 2), ("ready", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteInterfaceState.setStatus('mandatory')
mscX25DteStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28), )
if mibBuilder.loadTexts: mscX25DteStatsTable.setStatus('mandatory')
mscX25DteStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"))
if mibBuilder.loadTexts: mscX25DteStatsEntry.setStatus('mandatory')
mscX25DteInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteInCalls.setStatus('mandatory')
mscX25DteInCallRefusals = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteInCallRefusals.setStatus('mandatory')
mscX25DteInPrvdrInitiatedClrs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteInPrvdrInitiatedClrs.setStatus('mandatory')
mscX25DteInRmtInitiatedRsts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteInRmtInitiatedRsts.setStatus('mandatory')
mscX25DteInPrvdrInitiatedRsts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteInPrvdrInitiatedRsts.setStatus('mandatory')
mscX25DteInRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteInRestarts.setStatus('mandatory')
mscX25DteInDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteInDataPackets.setStatus('mandatory')
mscX25DteInPktsAcusdOfPrtclErr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteInPktsAcusdOfPrtclErr.setStatus('mandatory')
mscX25DteInInterruptPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteInInterruptPackets.setStatus('mandatory')
mscX25DteOutCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteOutCallAttempts.setStatus('mandatory')
mscX25DteOutCallFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteOutCallFailures.setStatus('mandatory')
mscX25DteOutInterruptPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteOutInterruptPackets.setStatus('mandatory')
mscX25DteOutDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteOutDataPackets.setStatus('mandatory')
mscX25DteOutActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteOutActiveChannels.setStatus('mandatory')
mscX25DteInActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteInActiveChannels.setStatus('mandatory')
mscX25DteTwowayActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteTwowayActiveChannels.setStatus('mandatory')
mscX25DteT20RestartTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteT20RestartTimeouts.setStatus('mandatory')
mscX25DteT21CallTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteT21CallTimeouts.setStatus('mandatory')
mscX25DteT22ResetTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteT22ResetTimeouts.setStatus('mandatory')
mscX25DteT23ClearTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 28, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteT23ClearTimeouts.setStatus('mandatory')
mscX25DtePeer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2))
mscX25DtePeerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 1), )
if mibBuilder.loadTexts: mscX25DtePeerRowStatusTable.setStatus('mandatory')
mscX25DtePeerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DtePeerIndex"))
if mibBuilder.loadTexts: mscX25DtePeerRowStatusEntry.setStatus('mandatory')
mscX25DtePeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerRowStatus.setStatus('mandatory')
mscX25DtePeerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DtePeerComponentName.setStatus('mandatory')
mscX25DtePeerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DtePeerStorageType.setStatus('mandatory')
mscX25DtePeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: mscX25DtePeerIndex.setStatus('mandatory')
mscX25DtePeerIfTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 10), )
if mibBuilder.loadTexts: mscX25DtePeerIfTable.setStatus('mandatory')
mscX25DtePeerIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DtePeerIndex"))
if mibBuilder.loadTexts: mscX25DtePeerIfEntry.setStatus('mandatory')
mscX25DtePeerEncAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(204))).clone(namedValues=NamedValues(("ip", 204))).clone('ip')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerEncAddressType.setStatus('mandatory')
mscX25DtePeerEncAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerEncAddress.setStatus('mandatory')
mscX25DtePeerX25Address = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 10, 1, 3), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerX25Address.setStatus('mandatory')
mscX25DtePeerLinkToRemoteGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 10, 1, 4), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerLinkToRemoteGroup.setStatus('mandatory')
mscX25DtePeerCpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 12), )
if mibBuilder.loadTexts: mscX25DtePeerCpTable.setStatus('mandatory')
mscX25DtePeerCpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DtePeerIndex"))
if mibBuilder.loadTexts: mscX25DtePeerCpEntry.setStatus('mandatory')
mscX25DtePeerInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerInPacketSize.setStatus('mandatory')
mscX25DtePeerOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerOutPacketSize.setStatus('mandatory')
mscX25DtePeerInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerInWindowSize.setStatus('mandatory')
mscX25DtePeerOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerOutWindowSize.setStatus('mandatory')
mscX25DtePeerAcceptReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("accept", 2), ("refuse", 3))).clone('refuse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerAcceptReverseCharging.setStatus('mandatory')
mscX25DtePeerProposeReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("reverse", 2), ("local", 3))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerProposeReverseCharging.setStatus('mandatory')
mscX25DtePeerOutThroughputClassSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18))).clone(namedValues=NamedValues(("n75", 3), ("n150", 4), ("n300", 5), ("n600", 6), ("n1200", 7), ("n2400", 8), ("n4800", 9), ("n9600", 10), ("n19200", 11), ("n48000", 12), ("n64000", 13), ("notSpecified", 17), ("default", 18))).clone('notSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerOutThroughputClassSize.setStatus('mandatory')
mscX25DtePeerInThroughputClassSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18))).clone(namedValues=NamedValues(("n75", 3), ("n150", 4), ("n300", 5), ("n600", 6), ("n1200", 7), ("n2400", 8), ("n4800", 9), ("n9600", 10), ("n19200", 11), ("n48000", 12), ("n64000", 13), ("notSpecified", 17), ("default", 18))).clone('notSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerInThroughputClassSize.setStatus('mandatory')
mscX25DtePeerCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 12, 1, 10), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerCugIndex.setStatus('mandatory')
mscX25DtePeerCugoaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerCugoaIndex.setStatus('mandatory')
mscX25DtePeerNetworkUserIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 12, 1, 12), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerNetworkUserIdentifier.setStatus('mandatory')
mscX25DtePeerChargingInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("notSpecified", 2), ("notRequested", 3), ("requested", 4))).clone('notSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerChargingInformation.setStatus('mandatory')
mscX25DtePeerRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 12, 1, 14), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerRpoa.setStatus('mandatory')
mscX25DtePeerTrnstDlySlctnAInd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 12, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65537)).clone(65536)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerTrnstDlySlctnAInd.setStatus('mandatory')
mscX25DtePeerCallingNetworkFax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 12, 1, 24), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerCallingNetworkFax.setStatus('mandatory')
mscX25DtePeerCalledNetworkFax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 12, 1, 25), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerCalledNetworkFax.setStatus('mandatory')
mscX25DtePeerCallUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 12, 1, 26), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DtePeerCallUserData.setStatus('mandatory')
mscX25DtePeerPEncTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 208), )
if mibBuilder.loadTexts: mscX25DtePeerPEncTable.setStatus('mandatory')
mscX25DtePeerPEncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 208, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DtePeerIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DtePeerPEncIndex"))
if mibBuilder.loadTexts: mscX25DtePeerPEncEntry.setStatus('mandatory')
mscX25DtePeerPEncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 208, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: mscX25DtePeerPEncIndex.setStatus('mandatory')
mscX25DtePeerPEncValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 208, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(204))).clone(namedValues=NamedValues(("ip", 204)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePeerPEncValue.setStatus('mandatory')
mscX25DtePeerPEncRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 208, 1, 3), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscX25DtePeerPEncRowStatus.setStatus('mandatory')
mscX25DtePeerLcnTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 209), )
if mibBuilder.loadTexts: mscX25DtePeerLcnTable.setStatus('mandatory')
mscX25DtePeerLcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 209, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DtePeerIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DtePeerLcnValue"))
if mibBuilder.loadTexts: mscX25DtePeerLcnEntry.setStatus('mandatory')
mscX25DtePeerLcnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 2, 209, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DtePeerLcnValue.setStatus('mandatory')
mscX25DtePLcn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 3))
mscX25DtePLcnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 3, 1), )
if mibBuilder.loadTexts: mscX25DtePLcnRowStatusTable.setStatus('mandatory')
mscX25DtePLcnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DtePLcnIndex"))
if mibBuilder.loadTexts: mscX25DtePLcnRowStatusEntry.setStatus('mandatory')
mscX25DtePLcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePLcnRowStatus.setStatus('mandatory')
mscX25DtePLcnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DtePLcnComponentName.setStatus('mandatory')
mscX25DtePLcnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DtePLcnStorageType.setStatus('mandatory')
mscX25DtePLcnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: mscX25DtePLcnIndex.setStatus('mandatory')
mscX25DtePLcnProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 3, 10), )
if mibBuilder.loadTexts: mscX25DtePLcnProvTable.setStatus('mandatory')
mscX25DtePLcnProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DtePLcnIndex"))
if mibBuilder.loadTexts: mscX25DtePLcnProvEntry.setStatus('mandatory')
mscX25DtePLcnEncAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 204))).clone(namedValues=NamedValues(("none", 0), ("ip", 204))).clone('ip')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePLcnEncAddressType.setStatus('mandatory')
mscX25DtePLcnEncAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 3, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePLcnEncAddress.setStatus('mandatory')
mscX25DtePLcnProtocolEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 204, 257))).clone(namedValues=NamedValues(("null", 0), ("ip", 204), ("nscNull", 257))).clone('ip')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePLcnProtocolEncType.setStatus('mandatory')
mscX25DtePLcnLinkToRemoteGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 3, 10, 1, 4), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePLcnLinkToRemoteGroup.setStatus('mandatory')
mscX25DtePLcnInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePLcnInPacketSize.setStatus('mandatory')
mscX25DtePLcnOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 3, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePLcnOutPacketSize.setStatus('mandatory')
mscX25DtePLcnInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 3, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePLcnInWindowSize.setStatus('mandatory')
mscX25DtePLcnOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 3, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePLcnOutWindowSize.setStatus('mandatory')
mscX25DteLcn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4))
mscX25DteLcnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 1), )
if mibBuilder.loadTexts: mscX25DteLcnRowStatusTable.setStatus('mandatory')
mscX25DteLcnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLcnIndex"))
if mibBuilder.loadTexts: mscX25DteLcnRowStatusEntry.setStatus('mandatory')
mscX25DteLcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnRowStatus.setStatus('mandatory')
mscX25DteLcnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnComponentName.setStatus('mandatory')
mscX25DteLcnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnStorageType.setStatus('mandatory')
mscX25DteLcnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: mscX25DteLcnIndex.setStatus('mandatory')
mscX25DteLcnStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 10), )
if mibBuilder.loadTexts: mscX25DteLcnStateTable.setStatus('mandatory')
mscX25DteLcnStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLcnIndex"))
if mibBuilder.loadTexts: mscX25DteLcnStateEntry.setStatus('mandatory')
mscX25DteLcnAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnAdminState.setStatus('mandatory')
mscX25DteLcnOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnOperationalState.setStatus('mandatory')
mscX25DteLcnUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnUsageState.setStatus('mandatory')
mscX25DteLcnCpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 11), )
if mibBuilder.loadTexts: mscX25DteLcnCpTable.setStatus('mandatory')
mscX25DteLcnCpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLcnIndex"))
if mibBuilder.loadTexts: mscX25DteLcnCpEntry.setStatus('mandatory')
mscX25DteLcnInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnInPacketSize.setStatus('mandatory')
mscX25DteLcnOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnOutPacketSize.setStatus('mandatory')
mscX25DteLcnInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnInWindowSize.setStatus('mandatory')
mscX25DteLcnOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnOutWindowSize.setStatus('mandatory')
mscX25DteLcnProposeReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("reverse", 2), ("local", 3))).clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnProposeReverseCharging.setStatus('mandatory')
mscX25DteLcnFastSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("unrestricted", 3), ("restricted", 4), ("no", 5))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnFastSelect.setStatus('mandatory')
mscX25DteLcnOutThroughputClassSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17))).clone(namedValues=NamedValues(("n75", 3), ("n150", 4), ("n300", 5), ("n600", 6), ("n1200", 7), ("n2400", 8), ("n4800", 9), ("n9600", 10), ("n19200", 11), ("n48000", 12), ("n64000", 13), ("notSpecified", 17))).clone('notSpecified')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnOutThroughputClassSize.setStatus('mandatory')
mscX25DteLcnInThroughputClassSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17))).clone(namedValues=NamedValues(("n75", 3), ("n150", 4), ("n300", 5), ("n600", 6), ("n1200", 7), ("n2400", 8), ("n4800", 9), ("n9600", 10), ("n19200", 11), ("n48000", 12), ("n64000", 13), ("notSpecified", 17))).clone('notSpecified')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnInThroughputClassSize.setStatus('mandatory')
mscX25DteLcnCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 11, 1, 9), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnCugIndex.setStatus('mandatory')
mscX25DteLcnCugoaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 11, 1, 10), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnCugoaIndex.setStatus('mandatory')
mscX25DteLcnNetworkUserIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 11, 1, 11), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnNetworkUserIdentifier.setStatus('mandatory')
mscX25DteLcnChargingInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("notSpecified", 2), ("notRequested", 3), ("requested", 4))).clone('notSpecified')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnChargingInformation.setStatus('mandatory')
mscX25DteLcnRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 11, 1, 13), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnRpoa.setStatus('mandatory')
mscX25DteLcnTrnstDlySlctnAInd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 11, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(65536)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnTrnstDlySlctnAInd.setStatus('mandatory')
mscX25DteLcnCallingNetworkFax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 11, 1, 23), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnCallingNetworkFax.setStatus('mandatory')
mscX25DteLcnCalledNetworkFax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 11, 1, 24), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnCalledNetworkFax.setStatus('mandatory')
mscX25DteLcnCallUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 11, 1, 25), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnCallUserData.setStatus('mandatory')
mscX25DteLcnLcnStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 12), )
if mibBuilder.loadTexts: mscX25DteLcnLcnStatusTable.setStatus('mandatory')
mscX25DteLcnLcnStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLcnIndex"))
if mibBuilder.loadTexts: mscX25DteLcnLcnStatusEntry.setStatus('mandatory')
mscX25DteLcnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("closed", 2), ("calling", 3), ("dataTransfer", 4), ("clearing", 5), ("resetting", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnStatus.setStatus('mandatory')
mscX25DteLcnCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("permanentLcn", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnCallDirection.setStatus('mandatory')
mscX25DteLcnCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 12, 1, 4), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnCalledAddress.setStatus('mandatory')
mscX25DteLcnCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 12, 1, 5), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnCallingAddress.setStatus('mandatory')
mscX25DteLcnOriginalCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 12, 1, 6), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnOriginalCalledAddress.setStatus('mandatory')
mscX25DteLcnStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 13), )
if mibBuilder.loadTexts: mscX25DteLcnStatsTable.setStatus('mandatory')
mscX25DteLcnStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLcnIndex"))
if mibBuilder.loadTexts: mscX25DteLcnStatsEntry.setStatus('mandatory')
mscX25DteLcnInUknownProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnInUknownProtocols.setStatus('mandatory')
mscX25DteLcnInDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnInDataOctets.setStatus('mandatory')
mscX25DteLcnInDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnInDataPackets.setStatus('mandatory')
mscX25DteLcnInRmtInitiatedRsts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnInRmtInitiatedRsts.setStatus('mandatory')
mscX25DteLcnInPrvdrInitiatedRsts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnInPrvdrInitiatedRsts.setStatus('mandatory')
mscX25DteLcnInInterruptPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnInInterruptPackets.setStatus('mandatory')
mscX25DteLcnOutDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnOutDataOctets.setStatus('mandatory')
mscX25DteLcnOutDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnOutDataPackets.setStatus('mandatory')
mscX25DteLcnOutInterruptPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnOutInterruptPackets.setStatus('mandatory')
mscX25DteLcnT22ResetTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 4, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLcnT22ResetTimeouts.setStatus('mandatory')
mscX25DteLapb = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5))
mscX25DteLapbRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 1), )
if mibBuilder.loadTexts: mscX25DteLapbRowStatusTable.setStatus('mandatory')
mscX25DteLapbRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLapbIndex"))
if mibBuilder.loadTexts: mscX25DteLapbRowStatusEntry.setStatus('mandatory')
mscX25DteLapbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbRowStatus.setStatus('mandatory')
mscX25DteLapbComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbComponentName.setStatus('mandatory')
mscX25DteLapbStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbStorageType.setStatus('mandatory')
mscX25DteLapbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscX25DteLapbIndex.setStatus('mandatory')
mscX25DteLapbCpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 10), )
if mibBuilder.loadTexts: mscX25DteLapbCpTable.setStatus('mandatory')
mscX25DteLapbCpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLapbIndex"))
if mibBuilder.loadTexts: mscX25DteLapbCpEntry.setStatus('mandatory')
mscX25DteLapbStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteLapbStationType.setStatus('mandatory')
mscX25DteLapbFrameSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modulo8", 1), ("modulo128", 2))).clone('modulo8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteLapbFrameSequencing.setStatus('mandatory')
mscX25DteLapbN1FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(40, 32856)).clone(32856)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteLapbN1FrameSize.setStatus('mandatory')
mscX25DteLapbKWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteLapbKWindowSize.setStatus('mandatory')
mscX25DteLapbN2TransmitLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteLapbN2TransmitLimit.setStatus('mandatory')
mscX25DteLapbT1AckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteLapbT1AckTimer.setStatus('mandatory')
mscX25DteLapbT2AckDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteLapbT2AckDelayTimer.setStatus('mandatory')
mscX25DteLapbT4IdleProbeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteLapbT4IdleProbeTimer.setStatus('mandatory')
mscX25DteLapbActionInitiate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("sendSABM", 1), ("sendDM", 3), ("none", 4))).clone('sendSABM')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteLapbActionInitiate.setStatus('mandatory')
mscX25DteLapbActionRecvDM = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("sendSABM", 1))).clone('sendSABM')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteLapbActionRecvDM.setStatus('mandatory')
mscX25DteLapbTxQDegradeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)).clone(65536)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteLapbTxQDegradeThreshold.setStatus('mandatory')
mscX25DteLapbTxQResetThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 10, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)).clone(65536)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteLapbTxQResetThreshold.setStatus('mandatory')
mscX25DteLapbStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 11), )
if mibBuilder.loadTexts: mscX25DteLapbStateTable.setStatus('mandatory')
mscX25DteLapbStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLapbIndex"))
if mibBuilder.loadTexts: mscX25DteLapbStateEntry.setStatus('mandatory')
mscX25DteLapbAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbAdminState.setStatus('mandatory')
mscX25DteLapbOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbOperationalState.setStatus('mandatory')
mscX25DteLapbUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbUsageState.setStatus('mandatory')
mscX25DteLapbStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 12), )
if mibBuilder.loadTexts: mscX25DteLapbStatusTable.setStatus('mandatory')
mscX25DteLapbStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLapbIndex"))
if mibBuilder.loadTexts: mscX25DteLapbStatusEntry.setStatus('mandatory')
mscX25DteLapbCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("disconnected", 1), ("linkSetup", 2), ("frameReject", 3), ("disconnectRequest", 4), ("informationTransfer", 5), ("waitingAck", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbCurrentState.setStatus('mandatory')
mscX25DteLapbLastStateChangeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notStarted", 1), ("abmEntered", 2), ("abmeEntered", 3), ("abmReset", 4), ("abmeReset", 5), ("dmReceived", 6), ("dmSent", 7), ("discReceived", 8), ("discSent", 9), ("frmrReceived", 10), ("frmrSent", 11), ("n2TimeOut", 12), ("other", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbLastStateChangeReason.setStatus('mandatory')
mscX25DteLapbFrmrTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 12, 1, 3), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 7)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFrmrTransmit.setStatus('mandatory')
mscX25DteLapbFrmrReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 12, 1, 4), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 7)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFrmrReceive.setStatus('mandatory')
mscX25DteLapbCurrentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbCurrentQueueSize.setStatus('mandatory')
mscX25DteLapbStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 13), )
if mibBuilder.loadTexts: mscX25DteLapbStatsTable.setStatus('mandatory')
mscX25DteLapbStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLapbIndex"))
if mibBuilder.loadTexts: mscX25DteLapbStatsEntry.setStatus('mandatory')
mscX25DteLapbStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbStateChanges.setStatus('mandatory')
mscX25DteLapbRemoteBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbRemoteBusy.setStatus('mandatory')
mscX25DteLapbTransmitRejectFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbTransmitRejectFrames.setStatus('mandatory')
mscX25DteLapbReceiveRejectFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbReceiveRejectFrames.setStatus('mandatory')
mscX25DteLapbT1AckTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbT1AckTimeout.setStatus('mandatory')
mscX25DteLapbFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2))
mscX25DteLapbFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 1), )
if mibBuilder.loadTexts: mscX25DteLapbFramerRowStatusTable.setStatus('mandatory')
mscX25DteLapbFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLapbIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLapbFramerIndex"))
if mibBuilder.loadTexts: mscX25DteLapbFramerRowStatusEntry.setStatus('mandatory')
mscX25DteLapbFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerRowStatus.setStatus('mandatory')
mscX25DteLapbFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerComponentName.setStatus('mandatory')
mscX25DteLapbFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerStorageType.setStatus('mandatory')
mscX25DteLapbFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscX25DteLapbFramerIndex.setStatus('mandatory')
mscX25DteLapbFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 10), )
if mibBuilder.loadTexts: mscX25DteLapbFramerProvTable.setStatus('mandatory')
mscX25DteLapbFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLapbIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLapbFramerIndex"))
if mibBuilder.loadTexts: mscX25DteLapbFramerProvEntry.setStatus('mandatory')
mscX25DteLapbFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteLapbFramerInterfaceName.setStatus('mandatory')
mscX25DteLapbFramerLinkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 11), )
if mibBuilder.loadTexts: mscX25DteLapbFramerLinkTable.setStatus('mandatory')
mscX25DteLapbFramerLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLapbIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLapbFramerIndex"))
if mibBuilder.loadTexts: mscX25DteLapbFramerLinkEntry.setStatus('mandatory')
mscX25DteLapbFramerFlagsBetweenFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteLapbFramerFlagsBetweenFrames.setStatus('mandatory')
mscX25DteLapbFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 12), )
if mibBuilder.loadTexts: mscX25DteLapbFramerStateTable.setStatus('mandatory')
mscX25DteLapbFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLapbIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLapbFramerIndex"))
if mibBuilder.loadTexts: mscX25DteLapbFramerStateEntry.setStatus('mandatory')
mscX25DteLapbFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerAdminState.setStatus('mandatory')
mscX25DteLapbFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerOperationalState.setStatus('mandatory')
mscX25DteLapbFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerUsageState.setStatus('mandatory')
mscX25DteLapbFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 13), )
if mibBuilder.loadTexts: mscX25DteLapbFramerStatsTable.setStatus('mandatory')
mscX25DteLapbFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLapbIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLapbFramerIndex"))
if mibBuilder.loadTexts: mscX25DteLapbFramerStatsEntry.setStatus('mandatory')
mscX25DteLapbFramerFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerFrmToIf.setStatus('obsolete')
mscX25DteLapbFramerFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerFrmFromIf.setStatus('obsolete')
mscX25DteLapbFramerOctetFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerOctetFromIf.setStatus('obsolete')
mscX25DteLapbFramerAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerAborts.setStatus('mandatory')
mscX25DteLapbFramerCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerCrcErrors.setStatus('mandatory')
mscX25DteLapbFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerLrcErrors.setStatus('mandatory')
mscX25DteLapbFramerNonOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerNonOctetErrors.setStatus('mandatory')
mscX25DteLapbFramerOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerOverruns.setStatus('mandatory')
mscX25DteLapbFramerUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerUnderruns.setStatus('mandatory')
mscX25DteLapbFramerFrmToIf64 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 13, 1, 14), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerFrmToIf64.setStatus('mandatory')
mscX25DteLapbFramerFrmFromIf64 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 13, 1, 15), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerFrmFromIf64.setStatus('mandatory')
mscX25DteLapbFramerOctetFromIf64 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 13, 1, 16), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerOctetFromIf64.setStatus('mandatory')
mscX25DteLapbFramerUtilTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 14), )
if mibBuilder.loadTexts: mscX25DteLapbFramerUtilTable.setStatus('mandatory')
mscX25DteLapbFramerUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLapbIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteLapbFramerIndex"))
if mibBuilder.loadTexts: mscX25DteLapbFramerUtilEntry.setStatus('mandatory')
mscX25DteLapbFramerNormPrioLinkUtilToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 14, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerNormPrioLinkUtilToIf.setStatus('mandatory')
mscX25DteLapbFramerNormPrioLinkUtilFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 5, 2, 14, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteLapbFramerNormPrioLinkUtilFromIf.setStatus('mandatory')
mscX25DtePle = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 6))
mscX25DtePleRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 6, 1), )
if mibBuilder.loadTexts: mscX25DtePleRowStatusTable.setStatus('mandatory')
mscX25DtePleRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DtePleIndex"))
if mibBuilder.loadTexts: mscX25DtePleRowStatusEntry.setStatus('mandatory')
mscX25DtePleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DtePleRowStatus.setStatus('mandatory')
mscX25DtePleComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DtePleComponentName.setStatus('mandatory')
mscX25DtePleStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DtePleStorageType.setStatus('mandatory')
mscX25DtePleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscX25DtePleIndex.setStatus('mandatory')
mscX25DtePleProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 6, 10), )
if mibBuilder.loadTexts: mscX25DtePleProvTable.setStatus('mandatory')
mscX25DtePleProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DtePleIndex"))
if mibBuilder.loadTexts: mscX25DtePleProvEntry.setStatus('mandatory')
mscX25DtePleInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 6, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536000)).clone(180000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DtePleInactivityTimer.setStatus('mandatory')
mscX25DtePleOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 6, 11), )
if mibBuilder.loadTexts: mscX25DtePleOpTable.setStatus('mandatory')
mscX25DtePleOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 6, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DtePleIndex"))
if mibBuilder.loadTexts: mscX25DtePleOpEntry.setStatus('mandatory')
mscX25DtePleEncAddrToX25LkupFlrs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 6, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DtePleEncAddrToX25LkupFlrs.setStatus('mandatory')
mscX25DtePleLastFailedEncAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 6, 11, 1, 2), HexString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DtePleLastFailedEncAddr.setStatus('mandatory')
mscX25DtePleX25AddrToEncLkupFlrs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 6, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DtePleX25AddrToEncLkupFlrs.setStatus('mandatory')
mscX25DtePleLastFailedX25Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 6, 11, 1, 5), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DtePleLastFailedX25Addr.setStatus('mandatory')
mscX25DteRg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7))
mscX25DteRgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 1), )
if mibBuilder.loadTexts: mscX25DteRgRowStatusTable.setStatus('mandatory')
mscX25DteRgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteRgIndex"))
if mibBuilder.loadTexts: mscX25DteRgRowStatusEntry.setStatus('mandatory')
mscX25DteRgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteRgRowStatus.setStatus('mandatory')
mscX25DteRgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteRgComponentName.setStatus('mandatory')
mscX25DteRgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteRgStorageType.setStatus('mandatory')
mscX25DteRgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)))
if mibBuilder.loadTexts: mscX25DteRgIndex.setStatus('mandatory')
mscX25DteRgIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 10), )
if mibBuilder.loadTexts: mscX25DteRgIfEntryTable.setStatus('mandatory')
mscX25DteRgIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteRgIndex"))
if mibBuilder.loadTexts: mscX25DteRgIfEntryEntry.setStatus('mandatory')
mscX25DteRgIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteRgIfAdminStatus.setStatus('mandatory')
mscX25DteRgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 10, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteRgIfIndex.setStatus('mandatory')
mscX25DteRgProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 11), )
if mibBuilder.loadTexts: mscX25DteRgProvTable.setStatus('mandatory')
mscX25DteRgProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteRgIndex"))
if mibBuilder.loadTexts: mscX25DteRgProvEntry.setStatus('mandatory')
mscX25DteRgLinkToProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 11, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteRgLinkToProtocolPort.setStatus('mandatory')
mscX25DteRgLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 11, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteRgLocalAddress.setStatus('mandatory')
mscX25DteRgMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(576, 9188)).clone(1600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteRgMtuSize.setStatus('mandatory')
mscX25DteRgStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 12), )
if mibBuilder.loadTexts: mscX25DteRgStateTable.setStatus('mandatory')
mscX25DteRgStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteRgIndex"))
if mibBuilder.loadTexts: mscX25DteRgStateEntry.setStatus('mandatory')
mscX25DteRgAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteRgAdminState.setStatus('mandatory')
mscX25DteRgOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteRgOperationalState.setStatus('mandatory')
mscX25DteRgUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteRgUsageState.setStatus('mandatory')
mscX25DteRgOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 13), )
if mibBuilder.loadTexts: mscX25DteRgOperStatusTable.setStatus('mandatory')
mscX25DteRgOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteRgIndex"))
if mibBuilder.loadTexts: mscX25DteRgOperStatusEntry.setStatus('mandatory')
mscX25DteRgSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteRgSnmpOperStatus.setStatus('mandatory')
mscX25DteRgLTPlcnTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 210), )
if mibBuilder.loadTexts: mscX25DteRgLTPlcnTable.setStatus('mandatory')
mscX25DteRgLTPlcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 210, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteRgIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteRgLTPlcnValue"))
if mibBuilder.loadTexts: mscX25DteRgLTPlcnEntry.setStatus('mandatory')
mscX25DteRgLTPlcnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 210, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteRgLTPlcnValue.setStatus('mandatory')
mscX25DteRgLTPlcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 210, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscX25DteRgLTPlcnRowStatus.setStatus('mandatory')
mscX25DteRgLtPeerTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 211), )
if mibBuilder.loadTexts: mscX25DteRgLtPeerTable.setStatus('mandatory')
mscX25DteRgLtPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 211, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteRgIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteRgLtPeerValue"))
if mibBuilder.loadTexts: mscX25DteRgLtPeerEntry.setStatus('mandatory')
mscX25DteRgLtPeerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 211, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscX25DteRgLtPeerValue.setStatus('mandatory')
mscX25DteRgLtPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 211, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscX25DteRgLtPeerRowStatus.setStatus('mandatory')
mscX25DteRgLcnTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 212), )
if mibBuilder.loadTexts: mscX25DteRgLcnTable.setStatus('mandatory')
mscX25DteRgLcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 212, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteRgIndex"), (0, "Nortel-MsCarrier-MscPassport-X25DteMIB", "mscX25DteRgLcnValue"))
if mibBuilder.loadTexts: mscX25DteRgLcnEntry.setStatus('mandatory')
mscX25DteRgLcnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 90, 7, 212, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscX25DteRgLcnValue.setStatus('mandatory')
x25DteGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 48, 1))
x25DteGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 48, 1, 1))
x25DteGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 48, 1, 1, 3))
x25DteGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 48, 1, 1, 3, 2))
x25DteCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 48, 3))
x25DteCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 48, 3, 1))
x25DteCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 48, 3, 1, 3))
x25DteCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 48, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-X25DteMIB", mscX25DteRgIfIndex=mscX25DteRgIfIndex, mscX25DteLcnCallingAddress=mscX25DteLcnCallingAddress, mscX25DtePeerIndex=mscX25DtePeerIndex, mscX25DtePeerProposeReverseCharging=mscX25DtePeerProposeReverseCharging, mscX25DteLapbStateChanges=mscX25DteLapbStateChanges, mscX25DteInWindowSize=mscX25DteInWindowSize, mscX25DteLapbFramerRowStatusEntry=mscX25DteLapbFramerRowStatusEntry, mscX25DteRgProvEntry=mscX25DteRgProvEntry, mscX25DteLapbFramerUnderruns=mscX25DteLapbFramerUnderruns, mscX25DteInCalls=mscX25DteInCalls, x25DteCapabilities=x25DteCapabilities, mscX25DteInCallRefusals=mscX25DteInCallRefusals, mscX25DteLapbFrameSequencing=mscX25DteLapbFrameSequencing, mscX25DtePleLastFailedEncAddr=mscX25DtePleLastFailedEncAddr, mscX25DteLcnRowStatusTable=mscX25DteLcnRowStatusTable, mscX25DteLapbRemoteBusy=mscX25DteLapbRemoteBusy, mscX25DteIndex=mscX25DteIndex, mscX25DteIfIndex=mscX25DteIfIndex, mscX25DteLcnProposeReverseCharging=mscX25DteLcnProposeReverseCharging, mscX25DteComponentName=mscX25DteComponentName, mscX25DteLcnRowStatus=mscX25DteLcnRowStatus, mscX25DteAdminState=mscX25DteAdminState, mscX25DteHighestILChannelNumber=mscX25DteHighestILChannelNumber, mscX25DtePleLastFailedX25Addr=mscX25DtePleLastFailedX25Addr, mscX25DteLapbStatsEntry=mscX25DteLapbStatsEntry, mscX25DteLcnUsageState=mscX25DteLcnUsageState, mscX25DteLapbFrmrReceive=mscX25DteLapbFrmrReceive, mscX25DteRg=mscX25DteRg, mscX25DteLcnTrnstDlySlctnAInd=mscX25DteLcnTrnstDlySlctnAInd, mscX25DteT20RestartTimer=mscX25DteT20RestartTimer, mscX25DtePleOpTable=mscX25DtePleOpTable, mscX25DteOperationalState=mscX25DteOperationalState, mscX25DtePLcnEncAddressType=mscX25DtePLcnEncAddressType, mscX25DteOutWindowSize=mscX25DteOutWindowSize, mscX25DteLcnOutDataOctets=mscX25DteLcnOutDataOctets, mscX25DteLcnOutDataPackets=mscX25DteLcnOutDataPackets, mscX25DtePeerInPacketSize=mscX25DtePeerInPacketSize, mscX25DteIfEntryTable=mscX25DteIfEntryTable, mscX25DtePLcnIndex=mscX25DtePLcnIndex, mscX25DtePLcnStorageType=mscX25DtePLcnStorageType, mscX25DteLapbFramerRowStatus=mscX25DteLapbFramerRowStatus, x25DteMIB=x25DteMIB, mscX25DteOutCallFailures=mscX25DteOutCallFailures, mscX25DteRgIndex=mscX25DteRgIndex, mscX25DteMaxActiveChannels=mscX25DteMaxActiveChannels, mscX25DteLapbFramerUtilTable=mscX25DteLapbFramerUtilTable, mscX25DteRgAdminState=mscX25DteRgAdminState, mscX25DteT23ClearTimer=mscX25DteT23ClearTimer, mscX25DteRgStateTable=mscX25DteRgStateTable, mscX25DteRgLTPlcnValue=mscX25DteRgLTPlcnValue, mscX25DtePeerLinkToRemoteGroup=mscX25DtePeerLinkToRemoteGroup, mscX25DtePeerIfEntry=mscX25DtePeerIfEntry, mscX25DteLcnInThroughputClassSize=mscX25DteLcnInThroughputClassSize, mscX25DteLcnIndex=mscX25DteLcnIndex, mscX25DteRpoa=mscX25DteRpoa, mscX25DteLapbFramerOctetFromIf64=mscX25DteLapbFramerOctetFromIf64, mscX25DteLapbFramerCrcErrors=mscX25DteLapbFramerCrcErrors, mscX25DtePLcnRowStatus=mscX25DtePLcnRowStatus, mscX25DteLapbFramerStateTable=mscX25DteLapbFramerStateTable, mscX25DteLapbStateEntry=mscX25DteLapbStateEntry, mscX25DtePleIndex=mscX25DtePleIndex, mscX25Dte=mscX25Dte, mscX25DteLcnCTable=mscX25DteLcnCTable, mscX25DteInPrvdrInitiatedClrs=mscX25DteInPrvdrInitiatedClrs, mscX25DtePLcnComponentName=mscX25DtePLcnComponentName, mscX25DteLapbFramerAdminState=mscX25DteLapbFramerAdminState, mscX25DteLapbFramerInterfaceName=mscX25DteLapbFramerInterfaceName, mscX25DteRgProvTable=mscX25DteRgProvTable, mscX25DteLcnCEntry=mscX25DteLcnCEntry, x25DteCapabilitiesCA02=x25DteCapabilitiesCA02, mscX25DteRgStateEntry=mscX25DteRgStateEntry, mscX25DteLcnCalledAddress=mscX25DteLcnCalledAddress, mscX25DteRgIfAdminStatus=mscX25DteRgIfAdminStatus, mscX25DteLcnOriginalCalledAddress=mscX25DteLcnOriginalCalledAddress, mscX25DtePeerX25Address=mscX25DtePeerX25Address, mscX25DteLcnCugIndex=mscX25DteLcnCugIndex, mscX25DteCalledNetworkFax=mscX25DteCalledNetworkFax, mscX25DteLcnOutPacketSize=mscX25DteLcnOutPacketSize, mscX25DtePeerPEncTable=mscX25DtePeerPEncTable, mscX25DteCustomerIdentifier=mscX25DteCustomerIdentifier, mscX25DtePeerCallingNetworkFax=mscX25DtePeerCallingNetworkFax, mscX25DteLcnCpEntry=mscX25DteLcnCpEntry, mscX25DteStateEntry=mscX25DteStateEntry, mscX25DteLapb=mscX25DteLapb, mscX25DteLapbOperationalState=mscX25DteLapbOperationalState, mscX25DteLapbFramerOctetFromIf=mscX25DteLapbFramerOctetFromIf, mscX25DteInRmtInitiatedRsts=mscX25DteInRmtInitiatedRsts, mscX25DteInPrvdrInitiatedRsts=mscX25DteInPrvdrInitiatedRsts, mscX25DteLapbFramerUsageState=mscX25DteLapbFramerUsageState, mscX25DteLcnInRmtInitiatedRsts=mscX25DteLcnInRmtInitiatedRsts, mscX25DteCugoaIndex=mscX25DteCugoaIndex, mscX25DteOutCallAttempts=mscX25DteOutCallAttempts, mscX25DteRgLinkToProtocolPort=mscX25DteRgLinkToProtocolPort, mscX25DteRgLcnEntry=mscX25DteRgLcnEntry, mscX25DteLapbFramerUtilEntry=mscX25DteLapbFramerUtilEntry, mscX25DteLapbCpTable=mscX25DteLapbCpTable, mscX25DteLapbFrmrTransmit=mscX25DteLapbFrmrTransmit, x25DteGroupCA=x25DteGroupCA, mscX25DteOutInterruptPackets=mscX25DteOutInterruptPackets, x25DteGroupCA02=x25DteGroupCA02, mscX25DteT22ResetTimeouts=mscX25DteT22ResetTimeouts, mscX25DtePeerCugoaIndex=mscX25DtePeerCugoaIndex, mscX25DteLapbActionInitiate=mscX25DteLapbActionInitiate, mscX25DteLapbFramerProvTable=mscX25DteLapbFramerProvTable, mscX25DtePeerStorageType=mscX25DtePeerStorageType, mscX25DteLapbStatsTable=mscX25DteLapbStatsTable, mscX25DteLapbFramerFrmToIf=mscX25DteLapbFramerFrmToIf, mscX25DteLcnInWindowSize=mscX25DteLcnInWindowSize, mscX25DtePeerCpEntry=mscX25DtePeerCpEntry, mscX25DteLapbComponentName=mscX25DteLapbComponentName, mscX25DteRgLtPeerEntry=mscX25DteRgLtPeerEntry, mscX25DteRgIfEntryTable=mscX25DteRgIfEntryTable, mscX25DteLapbUsageState=mscX25DteLapbUsageState, mscX25DteInterfaceState=mscX25DteInterfaceState, mscX25DtePeerRowStatusTable=mscX25DtePeerRowStatusTable, mscX25DteLowestOLChannelNumber=mscX25DteLowestOLChannelNumber, mscX25DteRgLtPeerRowStatus=mscX25DteRgLtPeerRowStatus, mscX25DtePeerComponentName=mscX25DtePeerComponentName, mscX25DteLapbFramerLrcErrors=mscX25DteLapbFramerLrcErrors, mscX25DteLcnInDataOctets=mscX25DteLcnInDataOctets, mscX25DteLapbFramerNonOctetErrors=mscX25DteLapbFramerNonOctetErrors, mscX25DteSnmpOperStatus=mscX25DteSnmpOperStatus, mscX25DteLapbFramerOverruns=mscX25DteLapbFramerOverruns, mscX25DteLcnStateEntry=mscX25DteLcnStateEntry, mscX25DtePeerCallUserData=mscX25DtePeerCallUserData, mscX25DteLcnRowStatusEntry=mscX25DteLcnRowStatusEntry, mscX25DteLapbT4IdleProbeTimer=mscX25DteLapbT4IdleProbeTimer, mscX25DteRgLtPeerTable=mscX25DteRgLtPeerTable, mscX25DteRgOperStatusEntry=mscX25DteRgOperStatusEntry, mscX25DteLapbFramerLinkTable=mscX25DteLapbFramerLinkTable, mscX25DteDcpTable=mscX25DteDcpTable, mscX25DteRgRowStatusEntry=mscX25DteRgRowStatusEntry, mscX25DtePeerInWindowSize=mscX25DtePeerInWindowSize, mscX25DteRgUsageState=mscX25DteRgUsageState, mscX25DteLcnLcnStatusEntry=mscX25DteLcnLcnStatusEntry, mscX25DteRgOperationalState=mscX25DteRgOperationalState, mscX25DteLapbFramerFrmFromIf64=mscX25DteLapbFramerFrmFromIf64, mscX25DteInPacketSize=mscX25DteInPacketSize, mscX25DteLapbFramerIndex=mscX25DteLapbFramerIndex, mscX25DteLcnChargingInformation=mscX25DteLcnChargingInformation, mscX25DteLapbFramerAborts=mscX25DteLapbFramerAborts, mscX25DtePeerPEncEntry=mscX25DtePeerPEncEntry, mscX25DteLapbStateTable=mscX25DteLapbStateTable, mscX25DteProposeReverseCharging=mscX25DteProposeReverseCharging, mscX25DteLapbFramerNormPrioLinkUtilFromIf=mscX25DteLapbFramerNormPrioLinkUtilFromIf, mscX25DteLapbCurrentState=mscX25DteLapbCurrentState, mscX25DteT21CallTimer=mscX25DteT21CallTimer, mscX25DteLcnStatsEntry=mscX25DteLcnStatsEntry, mscX25DtePleProvTable=mscX25DtePleProvTable, mscX25DtePeerEncAddressType=mscX25DtePeerEncAddressType, mscX25DtePeerCpTable=mscX25DtePeerCpTable, mscX25DteLapbFramerProvEntry=mscX25DteLapbFramerProvEntry, mscX25DtePeerRowStatus=mscX25DtePeerRowStatus, mscX25DteInThroughputClassSize=mscX25DteInThroughputClassSize, mscX25DteRgComponentName=mscX25DteRgComponentName, mscX25DteLcnCallingNetworkFax=mscX25DteLcnCallingNetworkFax, mscX25DteIfEntry=mscX25DteIfEntry, mscX25DtePleRowStatusTable=mscX25DtePleRowStatusTable, mscX25DteLapbFramerComponentName=mscX25DteLapbFramerComponentName, mscX25DteT22ResetTimer=mscX25DteT22ResetTimer, mscX25DteLcnInInterruptPackets=mscX25DteLcnInInterruptPackets, mscX25DteRgLtPeerValue=mscX25DteRgLtPeerValue, mscX25DtePeerCugIndex=mscX25DtePeerCugIndex, mscX25DteLcnFastSelect=mscX25DteLcnFastSelect, mscX25DteLowestTLChannelNumber=mscX25DteLowestTLChannelNumber, mscX25DtePLcn=mscX25DtePLcn, mscX25DteCidDataEntry=mscX25DteCidDataEntry, mscX25DteRowStatusTable=mscX25DteRowStatusTable, mscX25DtePeerPEncIndex=mscX25DtePeerPEncIndex, mscX25DtePLcnInPacketSize=mscX25DtePLcnInPacketSize, mscX25DteStatsEntry=mscX25DteStatsEntry, mscX25DteLapbKWindowSize=mscX25DteLapbKWindowSize, mscX25DteInDataPackets=mscX25DteInDataPackets, mscX25DtePLcnOutPacketSize=mscX25DtePLcnOutPacketSize, mscX25DteCallUserData=mscX25DteCallUserData, mscX25DteInRestarts=mscX25DteInRestarts, mscX25DtePeerLcnEntry=mscX25DtePeerLcnEntry, mscX25DteLapbFramerStorageType=mscX25DteLapbFramerStorageType, mscX25DteAcceptReverseCharging=mscX25DteAcceptReverseCharging, mscX25DtePeerOutWindowSize=mscX25DtePeerOutWindowSize, mscX25DteT21CallTimeouts=mscX25DteT21CallTimeouts, mscX25DtePLcnRowStatusTable=mscX25DtePLcnRowStatusTable, mscX25DteLapbStationType=mscX25DteLapbStationType, mscX25DtePeerOutThroughputClassSize=mscX25DtePeerOutThroughputClassSize, mscX25DtePeerRowStatusEntry=mscX25DtePeerRowStatusEntry, mscX25DtePeer=mscX25DtePeer, mscX25DteInActiveChannels=mscX25DteInActiveChannels, mscX25DtePle=mscX25DtePle, mscX25DteRowStatusEntry=mscX25DteRowStatusEntry, mscX25DtePeerInThroughputClassSize=mscX25DtePeerInThroughputClassSize, mscX25DteDcpEntry=mscX25DteDcpEntry, mscX25DtePLcnOutWindowSize=mscX25DtePLcnOutWindowSize, mscX25DtePeerLcnValue=mscX25DtePeerLcnValue, mscX25DtePeerLcnTable=mscX25DtePeerLcnTable, mscX25DteRgStorageType=mscX25DteRgStorageType, mscX25DteRgIfEntryEntry=mscX25DteRgIfEntryEntry, mscX25DteRgLTPlcnRowStatus=mscX25DteRgLTPlcnRowStatus, mscX25DteIfEntryEntry=mscX25DteIfEntryEntry, mscX25DteLcnInUknownProtocols=mscX25DteLcnInUknownProtocols, mscX25DteTrnstDlySlctnAInd=mscX25DteTrnstDlySlctnAInd, mscX25DteOutActiveChannels=mscX25DteOutActiveChannels, mscX25DteRgLcnTable=mscX25DteRgLcnTable, mscX25DteOutPacketSize=mscX25DteOutPacketSize, mscX25DteLapbStatusEntry=mscX25DteLapbStatusEntry, mscX25DtePleProvEntry=mscX25DtePleProvEntry, mscX25DteLapbFramerFrmToIf64=mscX25DteLapbFramerFrmToIf64, mscX25DteCallingNetworkFax=mscX25DteCallingNetworkFax, mscX25DteLapbT1AckTimer=mscX25DteLapbT1AckTimer, mscX25DteRgMtuSize=mscX25DteRgMtuSize, mscX25DteLcnStorageType=mscX25DteLcnStorageType, mscX25DteOutThroughputClassSize=mscX25DteOutThroughputClassSize, mscX25DteLowestILChannelNumber=mscX25DteLowestILChannelNumber, mscX25DteLapbCpEntry=mscX25DteLapbCpEntry, mscX25DtePacketSequencing=mscX25DtePacketSequencing, mscX25DteLapbFramerRowStatusTable=mscX25DteLapbFramerRowStatusTable, mscX25DteInterfaceMode=mscX25DteInterfaceMode, mscX25DteRgLcnValue=mscX25DteRgLcnValue, mscX25DteRgLTPlcnEntry=mscX25DteRgLTPlcnEntry, mscX25DteLapbIndex=mscX25DteLapbIndex, mscX25DtePleRowStatus=mscX25DtePleRowStatus, mscX25DteLapbT1AckTimeout=mscX25DteLapbT1AckTimeout, mscX25DtePleComponentName=mscX25DtePleComponentName, mscX25DtePLcnRowStatusEntry=mscX25DtePLcnRowStatusEntry, mscX25DtePLcnEncAddress=mscX25DtePLcnEncAddress, mscX25DteLcnOutThroughputClassSize=mscX25DteLcnOutThroughputClassSize, mscX25DtePleStorageType=mscX25DtePleStorageType, mscX25DteLcnLcnStatusTable=mscX25DteLcnLcnStatusTable, mscX25DteIfAdminStatus=mscX25DteIfAdminStatus, mscX25DteLcnCugoaIndex=mscX25DteLcnCugoaIndex, mscX25DteRgRowStatus=mscX25DteRgRowStatus, mscX25DteLcnNetworkUserIdentifier=mscX25DteLcnNetworkUserIdentifier, mscX25DtePleInactivityTimer=mscX25DtePleInactivityTimer, mscX25DteLapbFramerStateEntry=mscX25DteLapbFramerStateEntry, mscX25DtePeerCalledNetworkFax=mscX25DtePeerCalledNetworkFax, mscX25DtePLcnProtocolEncType=mscX25DtePLcnProtocolEncType, mscX25DteRgLTPlcnTable=mscX25DteRgLTPlcnTable, mscX25DteLapbN2TransmitLimit=mscX25DteLapbN2TransmitLimit, x25DteCapabilitiesCA02A=x25DteCapabilitiesCA02A, mscX25DtePeerPEncValue=mscX25DtePeerPEncValue, mscX25DteTwowayActiveChannels=mscX25DteTwowayActiveChannels, mscX25DteLapbRowStatusEntry=mscX25DteLapbRowStatusEntry, mscX25DteCidDataTable=mscX25DteCidDataTable, mscX25DteOutDataPackets=mscX25DteOutDataPackets, mscX25DtePeerTrnstDlySlctnAInd=mscX25DtePeerTrnstDlySlctnAInd, mscX25DteLcnComponentName=mscX25DteLcnComponentName, mscX25DteNumberOfPLcn=mscX25DteNumberOfPLcn, mscX25DteOperStatusTable=mscX25DteOperStatusTable, mscX25DtePLcnProvEntry=mscX25DtePLcnProvEntry, mscX25DtePleOpEntry=mscX25DtePleOpEntry, mscX25DteLcnStatsTable=mscX25DteLcnStatsTable, mscX25DteLapbN1FrameSize=mscX25DteLapbN1FrameSize, mscX25DteLcnInDataPackets=mscX25DteLcnInDataPackets, mscX25DteCugIndex=mscX25DteCugIndex, mscX25DteLcnT22ResetTimeouts=mscX25DteLcnT22ResetTimeouts)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-X25DteMIB", mscX25DteT20RestartTimeouts=mscX25DteT20RestartTimeouts, mscX25DteLapbReceiveRejectFrames=mscX25DteLapbReceiveRejectFrames, mscX25DteRgRowStatusTable=mscX25DteRgRowStatusTable, mscX25DteLcnStatus=mscX25DteLcnStatus, mscX25DteLcnOutWindowSize=mscX25DteLcnOutWindowSize, mscX25DtePLcnLinkToRemoteGroup=mscX25DtePLcnLinkToRemoteGroup, mscX25DteLapbFramerNormPrioLinkUtilToIf=mscX25DteLapbFramerNormPrioLinkUtilToIf, mscX25DteUsageState=mscX25DteUsageState, mscX25DteLapbFramer=mscX25DteLapbFramer, mscX25DtePleRowStatusEntry=mscX25DtePleRowStatusEntry, mscX25DteStatsTable=mscX25DteStatsTable, mscX25DteStorageType=mscX25DteStorageType, mscX25DteLapbAdminState=mscX25DteLapbAdminState, mscX25DtePleEncAddrToX25LkupFlrs=mscX25DtePleEncAddrToX25LkupFlrs, mscX25DtePeerNetworkUserIdentifier=mscX25DtePeerNetworkUserIdentifier, mscX25DtePLcnInWindowSize=mscX25DtePLcnInWindowSize, mscX25DteLcnCalledNetworkFax=mscX25DteLcnCalledNetworkFax, mscX25DteLapbStorageType=mscX25DteLapbStorageType, x25DteGroup=x25DteGroup, mscX25DteLapbTxQResetThreshold=mscX25DteLapbTxQResetThreshold, mscX25DteRgLocalAddress=mscX25DteRgLocalAddress, mscX25DtePeerRpoa=mscX25DtePeerRpoa, mscX25DteLcnAdminState=mscX25DteLcnAdminState, mscX25DteLapbRowStatusTable=mscX25DteLapbRowStatusTable, mscX25DteLcnInPrvdrInitiatedRsts=mscX25DteLcnInPrvdrInitiatedRsts, x25DteGroupCA02A=x25DteGroupCA02A, mscX25DteHighestTLChannelNumber=mscX25DteHighestTLChannelNumber, mscX25DteRgSnmpOperStatus=mscX25DteRgSnmpOperStatus, mscX25DteLapbLastStateChangeReason=mscX25DteLapbLastStateChangeReason, mscX25DteLcnStateTable=mscX25DteLcnStateTable, mscX25DteOperStatusEntry=mscX25DteOperStatusEntry, mscX25DteLapbFramerFlagsBetweenFrames=mscX25DteLapbFramerFlagsBetweenFrames, mscX25DteLapbTransmitRejectFrames=mscX25DteLapbTransmitRejectFrames, mscX25DtePeerPEncRowStatus=mscX25DtePeerPEncRowStatus, mscX25DteLcnCpTable=mscX25DteLcnCpTable, mscX25DteLcnCallDirection=mscX25DteLcnCallDirection, mscX25DteIfTable=mscX25DteIfTable, mscX25DteOpEntry=mscX25DteOpEntry, mscX25DteLcn=mscX25DteLcn, mscX25DteLcnCallUserData=mscX25DteLcnCallUserData, mscX25DteLapbTxQDegradeThreshold=mscX25DteLapbTxQDegradeThreshold, mscX25DteChargingInformation=mscX25DteChargingInformation, mscX25DteLapbFramerOperationalState=mscX25DteLapbFramerOperationalState, mscX25DteLcnRpoa=mscX25DteLcnRpoa, mscX25DteLapbFramerLinkEntry=mscX25DteLapbFramerLinkEntry, mscX25DteStateTable=mscX25DteStateTable, mscX25DteLapbActionRecvDM=mscX25DteLapbActionRecvDM, mscX25DteLcnOperationalState=mscX25DteLcnOperationalState, mscX25DteLapbStatusTable=mscX25DteLapbStatusTable, mscX25DteHighestOLChannelNumber=mscX25DteHighestOLChannelNumber, mscX25DteRgOperStatusTable=mscX25DteRgOperStatusTable, mscX25DteLapbFramerFrmFromIf=mscX25DteLapbFramerFrmFromIf, mscX25DteLapbFramerStatsEntry=mscX25DteLapbFramerStatsEntry, mscX25DtePeerChargingInformation=mscX25DtePeerChargingInformation, mscX25DteLcnOutInterruptPackets=mscX25DteLcnOutInterruptPackets, mscX25DteRowStatus=mscX25DteRowStatus, mscX25DteOpTable=mscX25DteOpTable, mscX25DteInInterruptPackets=mscX25DteInInterruptPackets, mscX25DteT23ClearTimeouts=mscX25DteT23ClearTimeouts, mscX25DtePeerAcceptReverseCharging=mscX25DtePeerAcceptReverseCharging, mscX25DteLcnInPacketSize=mscX25DteLcnInPacketSize, mscX25DtePleX25AddrToEncLkupFlrs=mscX25DtePleX25AddrToEncLkupFlrs, mscX25DteInPktsAcusdOfPrtclErr=mscX25DteInPktsAcusdOfPrtclErr, mscX25DtePLcnProvTable=mscX25DtePLcnProvTable, mscX25DteLapbCurrentQueueSize=mscX25DteLapbCurrentQueueSize, mscX25DteLapbFramerStatsTable=mscX25DteLapbFramerStatsTable, x25DteCapabilitiesCA=x25DteCapabilitiesCA, mscX25DtePeerEncAddress=mscX25DtePeerEncAddress, mscX25DteLapbRowStatus=mscX25DteLapbRowStatus, mscX25DtePeerIfTable=mscX25DtePeerIfTable, mscX25DteLapbT2AckDelayTimer=mscX25DteLapbT2AckDelayTimer, mscX25DtePeerOutPacketSize=mscX25DtePeerOutPacketSize)
