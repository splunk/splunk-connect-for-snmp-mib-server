#
# PySNMP MIB module S5-SWITCH-BAYSECURE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/S5-SWITCH-BAYSECURE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:51:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
s5Com, = mibBuilder.importSymbols("S5-ROOT-MIB", "s5Com")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Unsigned32, NotificationType, ObjectIdentity, iso, Bits, Counter64, Gauge32, MibIdentifier, IpAddress, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "NotificationType", "ObjectIdentity", "iso", "Bits", "Counter64", "Gauge32", "MibIdentifier", "IpAddress", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
TruthValue, DisplayString, TimeInterval, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TimeInterval", "MacAddress", "TextualConvention")
s5SbsAuth = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3))
s5SbsAuth.setRevisions(('2012-09-13 00:00', '2011-01-10 00:00', '2009-05-28 00:00', '2009-02-24 00:00', '2006-09-18 00:00', '2005-03-09 00:00', '2004-09-03 00:00', '2004-07-22 00:00', '2004-07-20 00:00', '2003-02-20 00:00',))
if mibBuilder.loadTexts: s5SbsAuth.setLastUpdated('201209130000Z')
if mibBuilder.loadTexts: s5SbsAuth.setOrganization('Avaya')
class PortSet(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 256)

s5SbsAuthSecurityLock = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("locked", 2), ("notlocked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsAuthSecurityLock.setStatus('current')
s5SbsAuthCtlPartTime = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5SbsAuthCtlPartTime.setStatus('current')
s5SbsSecurityStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5SbsSecurityStatus.setStatus('current')
s5SbsSecurityMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("singleMACperPort", 1), ("macList", 2), ("autoLearn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5SbsSecurityMode.setStatus('current')
s5SbsSecurityAction = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noAction", 1), ("trap", 2), ("partitionPort", 3), ("partitionPortAndsendTrap", 4), ("daFiltering", 5), ("daFilteringAndsendTrap", 6), ("partitionPortAnddaFiltering", 7), ("partitionPortdaFilteringAndsendTrap", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5SbsSecurityAction.setStatus('current')
s5SbsCurrNodesAllowed = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsCurrNodesAllowed.setStatus('current')
s5SbsMaxNodesAllowed = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsMaxNodesAllowed.setStatus('current')
s5SbsCurrNodesBlocked = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsCurrNodesBlocked.setStatus('current')
s5SbsMaxNodesBlocked = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsMaxNodesBlocked.setStatus('current')
s5SbsAuthCfgTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 10), )
if mibBuilder.loadTexts: s5SbsAuthCfgTable.setStatus('current')
s5SbsAuthCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 10, 1), ).setIndexNames((0, "S5-SWITCH-BAYSECURE-MIB", "s5SbsAuthCfgBrdIndx"), (0, "S5-SWITCH-BAYSECURE-MIB", "s5SbsAuthCfgPortIndx"), (0, "S5-SWITCH-BAYSECURE-MIB", "s5SbsAuthCfgMACIndx"))
if mibBuilder.loadTexts: s5SbsAuthCfgEntry.setStatus('current')
s5SbsAuthCfgBrdIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsAuthCfgBrdIndx.setStatus('current')
s5SbsAuthCfgPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsAuthCfgPortIndx.setStatus('current')
s5SbsAuthCfgMACIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 10, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsAuthCfgMACIndx.setStatus('current')
s5SbsAuthCfgAccessCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allowed", 1), ("blocked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5SbsAuthCfgAccessCtrlType.setStatus('current')
s5SbsAuthCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("valid", 1), ("create", 2), ("delete", 3), ("modify", 4), ("createSticky", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5SbsAuthCfgStatus.setStatus('current')
s5SbsAuthCfgSecureList = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5SbsAuthCfgSecureList.setStatus('current')
s5SbsAuthCfgSource = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("autoLearn", 2), ("sticky", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsAuthCfgSource.setStatus('current')
s5SbsAuthCfgLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 10, 1, 8), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsAuthCfgLifetime.setStatus('current')
s5SbsAuthCfgTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5SbsAuthCfgTrunk.setStatus('current')
s5SbsAuthStatusTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 11), )
if mibBuilder.loadTexts: s5SbsAuthStatusTable.setStatus('current')
s5SbsAuthStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 11, 1), ).setIndexNames((0, "S5-SWITCH-BAYSECURE-MIB", "s5SbsAuthStatusBrdIndx"), (0, "S5-SWITCH-BAYSECURE-MIB", "s5SbsAuthStatusPortIndx"), (0, "S5-SWITCH-BAYSECURE-MIB", "s5SbsAuthStatusMACIndx"))
if mibBuilder.loadTexts: s5SbsAuthStatusEntry.setStatus('current')
s5SbsAuthStatusBrdIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsAuthStatusBrdIndx.setStatus('current')
s5SbsAuthStatusPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsAuthStatusPortIndx.setStatus('current')
s5SbsAuthStatusMACIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 11, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsAuthStatusMACIndx.setStatus('current')
s5SbsCurrentAccessCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("block", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsCurrentAccessCtrlType.setStatus('current')
s5SbsCurrentActionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noAction", 1), ("partitionPort", 2), ("partitionPortAndsendTrap", 3), ("daFiltering", 4), ("daFilteringAndsendTrap", 5), ("sendTrap", 6), ("partitionPortAnddaFiltering", 7), ("partitionPortdaFilteringAndsendTrap", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsCurrentActionMode.setStatus('current')
s5SbsCurrentPortSecurStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("portSecure", 2), ("portPartition", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsCurrentPortSecurStatus.setStatus('current')
s5SbsViolationStatusTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 12), )
if mibBuilder.loadTexts: s5SbsViolationStatusTable.setStatus('current')
s5SbsViolationStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 12, 1), ).setIndexNames((0, "S5-SWITCH-BAYSECURE-MIB", "s5SbsViolationStatusBrdIndx"), (0, "S5-SWITCH-BAYSECURE-MIB", "s5SbsViolationStatusPortIndx"))
if mibBuilder.loadTexts: s5SbsViolationStatusEntry.setStatus('current')
s5SbsViolationStatusBrdIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsViolationStatusBrdIndx.setStatus('current')
s5SbsViolationStatusPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsViolationStatusPortIndx.setStatus('current')
s5SbsViolationStatusMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 12, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsViolationStatusMACAddress.setStatus('current')
s5SbsMgmViolationType = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snmp", 1), ("web", 2), ("telnet", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsMgmViolationType.setStatus('current')
s5SbsMgmViolationIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsMgmViolationIpAddress.setStatus('current')
s5SbsPortSecurityStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 15), PortSet()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5SbsPortSecurityStatus.setStatus('current')
s5SbsPortLearnStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 16), PortSet()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5SbsPortLearnStatus.setStatus('current')
s5SbsCurrSecurityLists = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsCurrSecurityLists.setStatus('current')
s5SbsMaxSecurityLists = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsMaxSecurityLists.setStatus('current')
s5SbsSecurityListTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 19), )
if mibBuilder.loadTexts: s5SbsSecurityListTable.setStatus('current')
s5SbsSecurityListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 19, 1), ).setIndexNames((0, "S5-SWITCH-BAYSECURE-MIB", "s5SbsSecurityListIndx"))
if mibBuilder.loadTexts: s5SbsSecurityListEntry.setStatus('current')
s5SbsSecurityListIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsSecurityListIndx.setStatus('current')
s5SbsSecurityListMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 19, 1, 2), PortSet()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5SbsSecurityListMembers.setStatus('current')
s5SbsSecurityListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("create", 2), ("delete", 3), ("modify", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5SbsSecurityListStatus.setStatus('current')
s5SbsMacViolation = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 20))
s5SbsMacViolationClear = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5SbsMacViolationClear.setStatus('current')
s5SbsMacViolationTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 20, 2), )
if mibBuilder.loadTexts: s5SbsMacViolationTable.setStatus('current')
s5SbsMacViolationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 20, 2, 1), ).setIndexNames((0, "S5-SWITCH-BAYSECURE-MIB", "s5SbsMacViolationAddress"))
if mibBuilder.loadTexts: s5SbsMacViolationEntry.setStatus('current')
s5SbsMacViolationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 20, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsMacViolationAddress.setStatus('current')
s5SbsMacViolationBrd = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsMacViolationBrd.setStatus('current')
s5SbsMacViolationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5SbsMacViolationPort.setStatus('current')
s5SbsAutoLearningAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setUnits('Minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5SbsAutoLearningAgingTime.setStatus('current')
s5SbsAutoLearningConfigTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 22), )
if mibBuilder.loadTexts: s5SbsAutoLearningConfigTable.setStatus('current')
s5SbsAutoLearningConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 22, 1), ).setIndexNames((0, "S5-SWITCH-BAYSECURE-MIB", "s5SbsAutoLearningConfigBrd"), (0, "S5-SWITCH-BAYSECURE-MIB", "s5SbsAutoLearningConfigPort"))
if mibBuilder.loadTexts: s5SbsAutoLearningConfigEntry.setStatus('current')
s5SbsAutoLearningConfigBrd = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: s5SbsAutoLearningConfigBrd.setStatus('current')
s5SbsAutoLearningConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: s5SbsAutoLearningConfigPort.setStatus('current')
s5SbsAutoLearningConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 22, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5SbsAutoLearningConfigEnabled.setStatus('current')
s5SbsAutoLearningConfigMaxMacs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5SbsAutoLearningConfigMaxMacs.setStatus('current')
s5SbsAutoLearningPorts = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 23), PortSet()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5SbsAutoLearningPorts.setStatus('current')
s5SbsAutoLearningSticky = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5SbsAutoLearningSticky.setStatus('current')
s5SbsSecurityLockoutPortList = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 3, 25), PortSet()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5SbsSecurityLockoutPortList.setStatus('current')
mibBuilder.exportSymbols("S5-SWITCH-BAYSECURE-MIB", s5SbsCurrentActionMode=s5SbsCurrentActionMode, s5SbsSecurityStatus=s5SbsSecurityStatus, s5SbsMgmViolationIpAddress=s5SbsMgmViolationIpAddress, s5SbsAutoLearningAgingTime=s5SbsAutoLearningAgingTime, s5SbsAuthCfgLifetime=s5SbsAuthCfgLifetime, s5SbsSecurityListIndx=s5SbsSecurityListIndx, PortSet=PortSet, s5SbsAuth=s5SbsAuth, s5SbsAuthStatusTable=s5SbsAuthStatusTable, s5SbsSecurityListMembers=s5SbsSecurityListMembers, s5SbsAuthCfgAccessCtrlType=s5SbsAuthCfgAccessCtrlType, s5SbsCurrSecurityLists=s5SbsCurrSecurityLists, s5SbsAuthCtlPartTime=s5SbsAuthCtlPartTime, s5SbsAuthCfgMACIndx=s5SbsAuthCfgMACIndx, s5SbsAuthStatusMACIndx=s5SbsAuthStatusMACIndx, s5SbsMacViolation=s5SbsMacViolation, s5SbsAuthSecurityLock=s5SbsAuthSecurityLock, s5SbsSecurityAction=s5SbsSecurityAction, s5SbsMaxSecurityLists=s5SbsMaxSecurityLists, s5SbsSecurityListStatus=s5SbsSecurityListStatus, s5SbsAutoLearningSticky=s5SbsAutoLearningSticky, s5SbsAuthCfgTrunk=s5SbsAuthCfgTrunk, s5SbsAuthCfgTable=s5SbsAuthCfgTable, s5SbsSecurityListTable=s5SbsSecurityListTable, s5SbsViolationStatusEntry=s5SbsViolationStatusEntry, s5SbsPortSecurityStatus=s5SbsPortSecurityStatus, s5SbsAutoLearningConfigBrd=s5SbsAutoLearningConfigBrd, s5SbsAutoLearningConfigMaxMacs=s5SbsAutoLearningConfigMaxMacs, s5SbsAutoLearningPorts=s5SbsAutoLearningPorts, s5SbsMacViolationTable=s5SbsMacViolationTable, s5SbsAuthStatusPortIndx=s5SbsAuthStatusPortIndx, s5SbsAuthCfgSource=s5SbsAuthCfgSource, s5SbsAuthStatusEntry=s5SbsAuthStatusEntry, s5SbsAutoLearningConfigPort=s5SbsAutoLearningConfigPort, s5SbsAutoLearningConfigTable=s5SbsAutoLearningConfigTable, s5SbsMaxNodesAllowed=s5SbsMaxNodesAllowed, s5SbsMaxNodesBlocked=s5SbsMaxNodesBlocked, s5SbsMacViolationEntry=s5SbsMacViolationEntry, s5SbsPortLearnStatus=s5SbsPortLearnStatus, PYSNMP_MODULE_ID=s5SbsAuth, s5SbsAuthCfgBrdIndx=s5SbsAuthCfgBrdIndx, s5SbsAuthCfgStatus=s5SbsAuthCfgStatus, s5SbsSecurityMode=s5SbsSecurityMode, s5SbsViolationStatusPortIndx=s5SbsViolationStatusPortIndx, s5SbsCurrNodesBlocked=s5SbsCurrNodesBlocked, s5SbsAuthCfgEntry=s5SbsAuthCfgEntry, s5SbsViolationStatusTable=s5SbsViolationStatusTable, s5SbsCurrentPortSecurStatus=s5SbsCurrentPortSecurStatus, s5SbsViolationStatusMACAddress=s5SbsViolationStatusMACAddress, s5SbsAuthCfgSecureList=s5SbsAuthCfgSecureList, s5SbsAuthStatusBrdIndx=s5SbsAuthStatusBrdIndx, s5SbsSecurityListEntry=s5SbsSecurityListEntry, s5SbsAutoLearningConfigEntry=s5SbsAutoLearningConfigEntry, s5SbsMacViolationAddress=s5SbsMacViolationAddress, s5SbsViolationStatusBrdIndx=s5SbsViolationStatusBrdIndx, s5SbsMgmViolationType=s5SbsMgmViolationType, s5SbsCurrentAccessCtrlType=s5SbsCurrentAccessCtrlType, s5SbsMacViolationBrd=s5SbsMacViolationBrd, s5SbsMacViolationPort=s5SbsMacViolationPort, s5SbsAutoLearningConfigEnabled=s5SbsAutoLearningConfigEnabled, s5SbsSecurityLockoutPortList=s5SbsSecurityLockoutPortList, s5SbsAuthCfgPortIndx=s5SbsAuthCfgPortIndx, s5SbsCurrNodesAllowed=s5SbsCurrNodesAllowed, s5SbsMacViolationClear=s5SbsMacViolationClear)
