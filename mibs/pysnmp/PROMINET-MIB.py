#
# PySNMP MIB module PROMINET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PROMINET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:33:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, iso, Integer32, IpAddress, Counter32, Gauge32, NotificationType, Unsigned32, enterprises, Bits, NotificationType, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "Integer32", "IpAddress", "Counter32", "Gauge32", "NotificationType", "Unsigned32", "enterprises", "Bits", "NotificationType", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter64")
DisplayString, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TextualConvention")
class EventValueType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 1), ("integer", 2), ("longInteger", 3), ("string", 4), ("octets", 5), ("ipAddress", 6), ("macAddress", 7), ("timeTicks", 8))

class ResourceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("system", 1), ("module", 2), ("fan", 3), ("temperatureSensor", 4), ("interface", 5), ("powerSupply", 6), ("display", 7), ("switchPort", 8), ("bridge", 9), ("vlan", 10), ("aft", 11), ("inboundGroupTable", 12), ("outboundGroupTable", 13), ("threeComMappingTable", 14), ("event", 15), ("alarm", 16))

class ResourceId(ObjectIdentifier):
    pass

class DisplayString(OctetString):
    pass

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(Integer32):
    pass

class EventCategory(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("userDefined", 1), ("coldstart", 2), ("warmstart", 3), ("linkUp", 4), ("linkDown", 5), ("newResource", 6), ("deletedResource", 7), ("tempStatus", 8), ("configuration", 9), ("scheduled", 10), ("authentication", 11), ("system", 12), ("risingThreshold", 13), ("fallingThreshold", 14), ("fanStatus", 15), ("powerStatus", 16), ("status", 17), ("bridgeNewRoot", 18), ("bridgeTopChange", 19), ("switchFabricStatus", 20))

dec = MibIdentifier((1, 3, 6, 1, 4, 1, 36))
ema = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2))
mib_extensions_1 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18)).setLabel("mib-extensions-1")
gsEMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 39))
ods = MibIdentifier((1, 3, 6, 1, 4, 1, 50))
odsTPS = MibIdentifier((1, 3, 6, 1, 4, 1, 50, 8))
odsLANBlazer = MibIdentifier((1, 3, 6, 1, 4, 1, 50, 8, 1))
odsLANBlazerMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 50, 8, 1, 2))
odsLANBlazer7000Mib = MibIdentifier((1, 3, 6, 1, 4, 1, 50, 8, 1, 2, 1))
intel = MibIdentifier((1, 3, 6, 1, 4, 1, 343))
mib2ext = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6))
esGigaSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 13))
marconi = MibIdentifier((1, 3, 6, 1, 4, 1, 1012))
ethernetL3 = MibIdentifier((1, 3, 6, 1, 4, 1, 1012, 81))
esrSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 1012, 81, 1))
prominet = MibIdentifier((1, 3, 6, 1, 4, 1, 2167))
promAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 1))
promAgentGen = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 1, 1))
promAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 2167, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promAgentMIBVersion.setStatus('mandatory')
promAgentMgrIndex = MibScalar((1, 3, 6, 1, 4, 1, 2167, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promAgentMgrIndex.setStatus('mandatory')
promAgentCommunity = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 1, 2))
promCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1), )
if mibBuilder.loadTexts: promCommunityTable.setStatus('mandatory')
promCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promCommunityIndex"))
if mibBuilder.loadTexts: promCommunityEntry.setStatus('mandatory')
promCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promCommunityIndex.setStatus('mandatory')
promCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promCommunityString.setStatus('mandatory')
promCommunityAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("any", 1), ("ipv4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promCommunityAddressType.setStatus('mandatory')
promCommunityAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promCommunityAddress.setStatus('mandatory')
promCommunityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("readOnly", 2), ("readWrite", 3), ("moreSpecific", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promCommunityAccess.setStatus('mandatory')
promCommunityTrapReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promCommunityTrapReceiver.setStatus('mandatory')
promCommunitySecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("administrator", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promCommunitySecurityLevel.setStatus('mandatory')
promCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 1, 2, 1, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promCommunityStatus.setStatus('mandatory')
promAgentWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 1, 3))
promAgentWebServerURL = MibScalar((1, 3, 6, 1, 4, 1, 2167, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promAgentWebServerURL.setStatus('mandatory')
promAgentWebServerHelpDirectory = MibScalar((1, 3, 6, 1, 4, 1, 2167, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promAgentWebServerHelpDirectory.setStatus('mandatory')
promChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3))
promChassisGen = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 1))
promChassisType = MibScalar((1, 3, 6, 1, 4, 1, 2167, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("p550", 1), ("p220", 2), ("p660", 3), ("p880", 4), ("p580", 5), ("p882", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promChassisType.setStatus('mandatory')
promChassisSlots = MibScalar((1, 3, 6, 1, 4, 1, 2167, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promChassisSlots.setStatus('mandatory')
promChassisSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 2167, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: promChassisSystemReset.setStatus('mandatory')
promInventory = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 2))
promInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1), )
if mibBuilder.loadTexts: promInventoryTable.setStatus('mandatory')
promInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promInventoryResourceType"), (0, "PROMINET-MIB", "promInventoryResourceIndex"))
if mibBuilder.loadTexts: promInventoryEntry.setStatus('mandatory')
promInventoryResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1, 1, 1), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promInventoryResourceType.setStatus('mandatory')
promInventoryResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1, 1, 2), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promInventoryResourceIndex.setStatus('mandatory')
promInventoryModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promInventoryModelNumber.setStatus('mandatory')
promInventorySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promInventorySerialNumber.setStatus('mandatory')
promInventoryVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promInventoryVersion.setStatus('mandatory')
promInventoryManufactureInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promInventoryManufactureInfo.setStatus('mandatory')
promInventoryScratchPad = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promInventoryScratchPad.setStatus('mandatory')
promInventoryPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promInventoryPowerConsumption.setStatus('mandatory')
promPowerSystems = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 3))
promPowerSupplies = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 3, 1))
promPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 3, 1, 1), )
if mibBuilder.loadTexts: promPowerSupplyTable.setStatus('mandatory')
promPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 3, 1, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPowerSupplyIndex"))
if mibBuilder.loadTexts: promPowerSupplyEntry.setStatus('mandatory')
promPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 3, 1, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPowerSupplyIndex.setStatus('mandatory')
promPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("psA", 2), ("psB", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPowerSupplyType.setStatus('mandatory')
promPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPowerSupplyStatus.setStatus('mandatory')
promPowerSupplyInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPowerSupplyInputStatus.setStatus('mandatory')
promPowerSupplyOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPowerSupplyOutputStatus.setStatus('mandatory')
promPowerSupplyOutputCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPowerSupplyOutputCapacity.setStatus('mandatory')
promPowerMgmtGen = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 3, 2))
promPowerCapacity = MibScalar((1, 3, 6, 1, 4, 1, 2167, 3, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPowerCapacity.setStatus('mandatory')
promPowerUsed = MibScalar((1, 3, 6, 1, 4, 1, 2167, 3, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPowerUsed.setStatus('mandatory')
promPowerMgmtCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 3, 3))
promPowerControlTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 3, 3, 1), )
if mibBuilder.loadTexts: promPowerControlTable.setStatus('obsolete')
promPowerControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 3, 3, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promModuleIndex"))
if mibBuilder.loadTexts: promPowerControlEntry.setStatus('obsolete')
promPowerControlUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPowerControlUsed.setStatus('obsolete')
promPowerControlPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("normal", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPowerControlPriority.setStatus('obsolete')
promPowerControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("poweredDown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPowerControlMode.setStatus('obsolete')
promTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 4))
promTempTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 4, 1), )
if mibBuilder.loadTexts: promTempTable.setStatus('mandatory')
promTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 4, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promTempIndex"))
if mibBuilder.loadTexts: promTempEntry.setStatus('mandatory')
promTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 4, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promTempIndex.setStatus('mandatory')
promTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promTempValue.setStatus('mandatory')
promTempUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promTempUpperLimit.setStatus('mandatory')
promTempUpperWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promTempUpperWarning.setStatus('mandatory')
promTempLowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promTempLowerWarning.setStatus('mandatory')
promTempLowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promTempLowerLimit.setStatus('mandatory')
promModules = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 5))
promModuleTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 5, 1), )
if mibBuilder.loadTexts: promModuleTable.setStatus('mandatory')
promModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 5, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promModuleIndex"))
if mibBuilder.loadTexts: promModuleEntry.setStatus('mandatory')
promModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 5, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promModuleIndex.setStatus('mandatory')
promModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promModuleName.setStatus('mandatory')
promModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 57))).clone(namedValues=NamedValues(("unknown", 1), ("m5502-1000", 2), ("m2206-1000", 3), ("m5520-100TX-QS", 4), ("m5510-100FX", 5), ("m5500-SUP", 6), ("m5504-1000", 7), ("m2201-1000", 8), ("m5520-100TX-I", 9), ("m2202-100FX", 10), ("m5510R-100FX", 11), ("m5512R-100TX", 12), ("m5500R-SUP", 13), ("m5502R-1000", 14), ("m2200-SUP", 15), ("m2204-100TX-I", 16), ("m2224-100TX", 17), ("m5502-OC3", 18), ("m5520-100TX-LUC", 19), ("m2204-100TX-LUC", 20), ("m5548-100TX-BCM", 21), ("m5502-AOC12SMF", 22), ("m5502-AOC12MMF", 23), ("m2201-1000SX", 24), ("m2201-1000LX", 25), ("m2201-1000SLX", 26), ("m5500R-SUPA", 27), ("m8000R-SUP", 28), ("m8002-1000", 29), ("m5500R-HUR", 30), ("m8024-100TX", 31), ("m8048-100TX", 32), ("m8024-100FX", 33), ("m8008-1000", 34), ("m5504-AOC3SMF", 35), ("m5504-AOC3MMF", 36), ("m8004-1000", 37), ("m8001-CMTS", 38), ("m5502-AOC3SMF", 39), ("m5502-AOC3MMF", 40), ("m8000R-HUR", 41), ("m8008R-1000T", 42), ("m8004R-1000T", 43), ("m8024R-100FXW", 44), ("m8002R-AOC12SMF", 45), ("m8002R-AOC12MMF", 46), ("m8002R-AOC3SMF", 47), ("m8002R-AOC3MMF", 48), ("m8048-JB-100TX", 57)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promModuleType.setStatus('mandatory')
promModuleBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("gigabit", 1), ("fastEthernet", 2), ("supervisor", 3), ("unspecified", 4), ("uplink", 5), ("serverSwitching", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promModuleBaseType.setStatus('mandatory')
promModuleSlotWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promModuleSlotWidth.setStatus('mandatory')
promModuleSlotOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promModuleSlotOffset.setStatus('mandatory')
promModulePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promModulePorts.setStatus('mandatory')
promModuleUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 2167, 3, 5, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promModuleUpdateTime.setStatus('mandatory')
promModuleUpdateList = MibScalar((1, 3, 6, 1, 4, 1, 2167, 3, 5, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promModuleUpdateList.setStatus('mandatory')
promPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6))
promPortMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1))
promPortTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1), )
if mibBuilder.loadTexts: promPortTable.setStatus('mandatory')
promPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promPortEntry.setStatus('mandatory')
promPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortIndex.setStatus('mandatory')
promPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortName.setStatus('mandatory')
promPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("internal", 1), ("ether-ten-oneHundred", 2), ("ether-oneHundred", 3), ("ether-gigabit", 4), ("ether-gigabit2", 5), ("ether-gigabit-lxt1000-copper", 6), ("ether-ten-oneHundred-bcm5308-rj71", 7), ("atm", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortType.setStatus('mandatory')
promPortBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("internal", 1), ("ether-ten-oneHundred", 2), ("ether-oneHundred", 3), ("ether-gigabit", 4), ("atm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortBaseType.setStatus('mandatory')
promPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortMode.setStatus('mandatory')
promPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("okay", 2), ("warning", 3), ("disabledButOkay", 4), ("linkFailure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortStatus.setStatus('mandatory')
promPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("internal", 1), ("rj45", 2), ("fiber-ST", 3), ("fiber-SC", 4), ("rs-232", 5), ("aui", 6), ("rj71", 7), ("gbic-1000-SX", 8), ("gbic-1000-LX", 9), ("gbic-1000-LX-LH", 10), ("notPresent", 11), ("unsupported", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortConnector.setStatus('mandatory')
promPortSpeedState = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ten-megabits-per-second", 1), ("one-hundred-megabits-per-second", 2), ("one-hundred-fifty-five-megabits-per-second", 3), ("six-hundred-twenty-two-megabits-per-second", 4), ("one-gigabit-per-second", 5), ("under-negotiation", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortSpeedState.setStatus('mandatory')
promPortDuplexState = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("half-duplex", 1), ("full-duplex", 2), ("under-negotiation", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortDuplexState.setStatus('mandatory')
promPortGroupBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 10), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortGroupBinding.setStatus('mandatory')
promPortFlowControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enable-with-aggressive-backoff", 3), ("enable-send-only", 4), ("enable-respond-only", 5), ("under-negotiation", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortFlowControlState.setStatus('mandatory')
promPortFlowControlMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6, 2))
promPortFlowControlTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 6, 2, 1), )
if mibBuilder.loadTexts: promPortFlowControlTable.setStatus('mandatory')
promPortFlowControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 6, 2, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promPortFlowControlEntry.setStatus('mandatory')
promPortFlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enable-with-aggressive-backoff", 3), ("enable-send-only", 4), ("enable-respond-only", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortFlowControlMode.setStatus('mandatory')
promPortDuplexMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6, 3))
promPortDuplexTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 6, 3, 1), )
if mibBuilder.loadTexts: promPortDuplexTable.setStatus('mandatory')
promPortDuplexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 6, 3, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promPortDuplexEntry.setStatus('mandatory')
promPortDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half-duplex", 1), ("full-duplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortDuplexMode.setStatus('mandatory')
promPortSpeedMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6, 4))
promPortSpeedTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 6, 4, 1), )
if mibBuilder.loadTexts: promPortSpeedTable.setStatus('mandatory')
promPortSpeedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 6, 4, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promPortSpeedEntry.setStatus('mandatory')
promPortSpeedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 4, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ten-megabits-per-second", 1), ("one-hundred-megabits-per-second", 2), ("one-hundred-fifty-five-megabits-per-second", 3), ("six-hundred-twenty-two-megabits-per-second", 4), ("one-gigabit-per-second", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortSpeedMode.setStatus('mandatory')
promPortAutoNegotiationMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6, 5))
promPortAutoNegotiationTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 6, 5, 1), )
if mibBuilder.loadTexts: promPortAutoNegotiationTable.setStatus('mandatory')
promPortAutoNegotiationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 6, 5, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promPortAutoNegotiationEntry.setStatus('mandatory')
promPortAutoNegotiationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 5, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autoNegotiate", 1), ("manualConfiguration", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortAutoNegotiationMode.setStatus('mandatory')
promPortAutoNegotiationSpeedAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 5, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ten-and-one-hundred-megabits-per-second", 1), ("one-hundred-megabits-per-second", 2), ("ten-megabits-per-second", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortAutoNegotiationSpeedAdvertisement.setStatus('mandatory')
promPortAutoNegotiationDuplexAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 5, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full-and-half-duplex", 1), ("half-duplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortAutoNegotiationDuplexAdvertisement.setStatus('mandatory')
promPortAutoNegotiationFlowControlAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 5, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enable-send-only", 3), ("enable-respond-only", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortAutoNegotiationFlowControlAdvertisement.setStatus('mandatory')
promPortRateLimitMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6, 6))
promPortRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 6, 6, 1), )
if mibBuilder.loadTexts: promPortRateLimitTable.setStatus('mandatory')
promPortRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 6, 6, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promPortRateLimitEntry.setStatus('mandatory')
promPortRateLimitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 6, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enableIncludeKnownMulticast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortRateLimitMode.setStatus('mandatory')
promPortRateLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 6, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("one-percent", 1), ("two-percent", 2), ("five-percent", 3), ("ten-percent", 4), ("twenty-percent", 5), ("forty-percent", 6), ("eighty-percent", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortRateLimitRate.setStatus('mandatory')
promPortRateLimitBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 6, 1, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("rateLimit1", 1), ("rateLimit2", 2), ("rateLimit4", 3), ("rateLimit8", 4), ("rateLimit16", 5), ("rateLimit32", 6), ("rateLimit64", 7), ("rateLimit128", 8), ("rateLimit256", 9), ("rateLimit512", 10), ("rateLimit1024", 11), ("rateLimit2048", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortRateLimitBurstSize.setStatus('mandatory')
promPortPacePriorityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6, 7))
promPortPacePriorityTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 6, 7, 1), )
if mibBuilder.loadTexts: promPortPacePriorityTable.setStatus('mandatory')
promPortPacePriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 6, 7, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promPortPacePriorityEntry.setStatus('mandatory')
promPortPacePriorityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 7, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortPacePriorityMode.setStatus('mandatory')
promPortCategoryMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6, 8))
promPortCategoryTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 6, 8, 1), )
if mibBuilder.loadTexts: promPortCategoryTable.setStatus('mandatory')
promPortCategoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 6, 8, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promPortCategoryEntry.setStatus('mandatory')
promPortCategoryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 8, 1, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("userPort", 1), ("servicePort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortCategoryMode.setStatus('mandatory')
promPortRemoteFaultMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 6, 9))
promPortRemoteFaultTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 6, 9, 1), )
if mibBuilder.loadTexts: promPortRemoteFaultTable.setStatus('mandatory')
promPortRemoteFaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 6, 9, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promPortRemoteFaultEntry.setStatus('mandatory')
promPortRemoteFaultDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 6, 9, 1, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortRemoteFaultDetect.setStatus('mandatory')
promBufferMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 3, 7))
promBufferTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1), )
if mibBuilder.loadTexts: promBufferTable.setStatus('mandatory')
promBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promBufferIndex"))
if mibBuilder.loadTexts: promBufferEntry.setStatus('mandatory')
promBufferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferIndex.setStatus('mandatory')
promBufferFabricPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 2), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferFabricPort.setStatus('mandatory')
promBufferFabricPortDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferFabricPortDirection.setStatus('mandatory')
promBufferSwitchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 4), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferSwitchPort.setStatus('mandatory')
promBufferMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferMemory.setStatus('mandatory')
promBufferAgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("quarter-second", 2), ("one-second", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBufferAgeTimer.setStatus('mandatory')
promBufferPriorityServicing = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("strictPriority", 1), ("everyTenThousand", 2), ("everyThousand", 3), ("everyHundred", 4), ("everyFour", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBufferPriorityServicing.setStatus('mandatory')
promBufferPriorityAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("tenPercent", 2), ("twentyPercent", 3), ("thirtyPercent", 4), ("fortyPercent", 5), ("fiftyPercent", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBufferPriorityAllocation.setStatus('mandatory')
promBufferPriorityThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("one", 2), ("two", 3), ("three", 4), ("four", 5), ("five", 6), ("six", 7), ("seven", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBufferPriorityThreshold.setStatus('mandatory')
promBufferCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("informationNotAvailable", 1), ("notCongested", 2), ("congested", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferCongestion.setStatus('mandatory')
promBufferHighOverflowDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferHighOverflowDrops.setStatus('mandatory')
promBufferLowOverflowDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferLowOverflowDrops.setStatus('mandatory')
promBufferHighStaleDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferHighStaleDrops.setStatus('mandatory')
promBufferLowStaleDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferLowStaleDrops.setStatus('mandatory')
promBufferCongestionDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 3, 7, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBufferCongestionDrops.setStatus('mandatory')
promSwitching = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5))
promSwitchingLayerII = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 1))
promSwitchGen = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 1, 1))
promSwitchSTPConfig = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ieee8021dStp", 1), ("stpPerVlan", 2), ("twoLayerStp", 3), ("disable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchSTPConfig.setStatus('mandatory')
promSwitchAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchAgingTime.setStatus('mandatory')
promSwitchSuperAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchSuperAgingTime.setStatus('mandatory')
promBridgeMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2))
promBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1), )
if mibBuilder.loadTexts: promBridgeTable.setStatus('mandatory')
promBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promBridgeIndex"))
if mibBuilder.loadTexts: promBridgeEntry.setStatus('mandatory')
promBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeIndex.setStatus('mandatory')
promBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot1d", 1), ("virtual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeType.setStatus('mandatory')
promBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgeMode.setStatus('mandatory')
promBridgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStatus.setStatus('mandatory')
promBridgeStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgeStpPriority.setStatus('mandatory')
promBridgeStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStpTimeSinceTopologyChange.setStatus('mandatory')
promBridgeStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStpTopChanges.setStatus('mandatory')
promBridgeStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStpDesignatedRoot.setStatus('mandatory')
promBridgeStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStpRootCost.setStatus('mandatory')
promBridgeStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStpRootPort.setStatus('mandatory')
promBridgeStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStpMaxAge.setStatus('mandatory')
promBridgeStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStpHelloTime.setStatus('mandatory')
promBridgeStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStpHoldTime.setStatus('mandatory')
promBridgeStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgeStpForwardDelay.setStatus('mandatory')
promBridgeStpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 15), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgeStpBridgeMaxAge.setStatus('mandatory')
promBridgeStpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 16), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgeStpBridgeHelloTime.setStatus('mandatory')
promBridgeStpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 2, 1, 1, 17), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgeStpBridgeForwardDelay.setStatus('mandatory')
promBridgePortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3))
promBridgePortTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1), )
if mibBuilder.loadTexts: promBridgePortTable.setStatus('mandatory')
promBridgePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promBridgePortIndex"))
if mibBuilder.loadTexts: promBridgePortEntry.setStatus('mandatory')
promBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgePortIndex.setStatus('mandatory')
promBridgePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgePortPriority.setStatus('mandatory')
promBridgePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgePortState.setStatus('mandatory')
promBridgePortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgePortEnable.setStatus('mandatory')
promBridgePortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgePortPathCost.setStatus('mandatory')
promBridgePortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgePortDesignatedRoot.setStatus('mandatory')
promBridgePortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgePortDesignatedCost.setStatus('mandatory')
promBridgePortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgePortDesignatedBridge.setStatus('mandatory')
promBridgePortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgePortDesignatedPort.setStatus('mandatory')
promBridgePortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promBridgePortForwardTransitions.setStatus('mandatory')
promBridgePortFastStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgePortFastStart.setStatus('deprecated')
promBridgePortSetDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useCurrentValues", 1), ("setDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgePortSetDefault.setStatus('mandatory')
promBridgePortEnableChangeDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promBridgePortEnableChangeDetection.setStatus('mandatory')
promL2AddrMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4))
promL2AddrDatabaseMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1))
promL2AddressTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1), )
if mibBuilder.loadTexts: promL2AddressTable.setStatus('mandatory')
promL2AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promL2AddressIndex"))
if mibBuilder.loadTexts: promL2AddressEntry.setStatus('mandatory')
promL2AddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressIndex.setStatus('mandatory')
promL2AddressTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressTableIndex.setStatus('mandatory')
promL2AddressMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressMacAddress.setStatus('mandatory')
promL2AddressPortBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 4), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressPortBinding.setStatus('mandatory')
promL2AddressBindingValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressBindingValid.setStatus('mandatory')
promL2AddressVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressVlanID.setStatus('mandatory')
promL2AddressPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("priorityZero", 1), ("priorityFour", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressPriority.setStatus('mandatory')
promL2AddressForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalForward", 1), ("specialDelivery", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressForward.setStatus('mandatory')
promL2AddressCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalForward", 1), ("copyCPU", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressCopy.setStatus('mandatory')
promL2AddressPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressPersistence.setStatus('mandatory')
promL2AddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("learned", 2), ("self", 3), ("mgmt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressStatus.setStatus('mandatory')
promL2AddrSummaryMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 2))
promL2AddrSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 2, 1), )
if mibBuilder.loadTexts: promL2AddrSummaryTable.setStatus('mandatory')
promL2AddrSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 2, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promL2AddressIndex"))
if mibBuilder.loadTexts: promL2AddrSummaryEntry.setStatus('mandatory')
promL2AddrSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddrSummary.setStatus('mandatory')
promL2AddrControlMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3))
promL2AddressControlTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3, 1), )
if mibBuilder.loadTexts: promL2AddressControlTable.setStatus('mandatory')
promL2AddressControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promAgentMgrIndex"))
if mibBuilder.loadTexts: promL2AddressControlEntry.setStatus('mandatory')
promL2AddressControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressControlIndex.setStatus('mandatory')
promL2AddressControlMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressControlMacAddress.setStatus('mandatory')
promL2AddressControlPortBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3, 1, 1, 3), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressControlPortBinding.setStatus('mandatory')
promL2AddressControlVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressControlVlanID.setStatus('mandatory')
promL2AddressControlPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("priorityZero", 1), ("priorityFour", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressControlPriority.setStatus('mandatory')
promL2AddressControlPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("permanent", 1), ("deleteOnReset", 2), ("deleteOnTimeout", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressControlPersistence.setStatus('mandatory')
promL2AddressControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("createRequest", 1), ("underCreation", 2), ("success", 3), ("otherError", 4), ("entryExistsError", 5), ("invalidMacAddress", 6), ("invalidPortBinding", 7), ("invalidVlanID", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressControlStatus.setStatus('mandatory')
promL2AddrChangeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4))
promL2AddressChangeLast = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressChangeLast.setStatus('mandatory')
promL2AddressChangeWraps = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressChangeWraps.setStatus('mandatory')
promL2AddressChangeMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promL2AddressChangeMaxEntries.setStatus('mandatory')
promL2AddressChangeTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4, 4), )
if mibBuilder.loadTexts: promL2AddressChangeTable.setStatus('mandatory')
promL2AddressChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4, 4, 1), ).setIndexNames((0, "PROMINET-MIB", "promL2AddressChangeWrapCount"), (0, "PROMINET-MIB", "promL2AddressChangeIndex"))
if mibBuilder.loadTexts: promL2AddressChangeEntry.setStatus('mandatory')
promL2AddressChangeWrapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressChangeWrapCount.setStatus('mandatory')
promL2AddressChangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressChangeIndex.setStatus('mandatory')
promL2AddressChangeIndexChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressChangeIndexChanged.setStatus('mandatory')
promL2AddressChangeSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 1, 4, 4, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: promL2AddressChangeSummary.setStatus('mandatory')
promSwitchPortMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 2))
promSwitchPortTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1), )
if mibBuilder.loadTexts: promSwitchPortTable.setStatus('mandatory')
promSwitchPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promSwitchPortIndex"))
if mibBuilder.loadTexts: promSwitchPortEntry.setStatus('mandatory')
promSwitchPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promSwitchPortIndex.setStatus('mandatory')
promSwitchPortSTAPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortSTAPMode.setStatus('mandatory')
promSwitchPortConvertToStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("learnAsDynamic", 1), ("convertToStatic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortConvertToStatic.setStatus('mandatory')
promSwitchPortLearningMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortLearningMode.setStatus('mandatory')
promSwitchPortHuntGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortHuntGroup.setStatus('mandatory')
promSwitchPortPhysicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 6), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promSwitchPortPhysicalPort.setStatus('mandatory')
promSwitchPortKnownMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortKnownMode.setStatus('mandatory')
promSwitchPortMappingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("port-based", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortMappingMethod.setStatus('mandatory')
promSwitchPortTrunkingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("ieee8021q", 2), ("multiLevel", 3), ("trunk3Com", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortTrunkingMode.setStatus('mandatory')
promSwitchPortVlanBindingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("persistent", 2), ("dynamic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortVlanBindingMethod.setStatus('mandatory')
promSwitchPortIgnoreTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useTag", 1), ("ignoreTag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortIgnoreTag.setStatus('mandatory')
promSwitchPortVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortVlanID.setStatus('mandatory')
promSwitchPort3ComMappingTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPort3ComMappingTableIndex.setStatus('mandatory')
promSwitchPortAutoVlanCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortAutoVlanCreation.setStatus('mandatory')
promSwitchPortMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promSwitchPortMirrorMode.setStatus('mandatory')
promSwitchPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promSwitchPortIfIndex.setStatus('mandatory')
promSwitchPortFastStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortFastStart.setStatus('mandatory')
promSwitchPortVtpSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortVtpSnooping.setStatus('mandatory')
promSwitchPortIntrusionTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortIntrusionTrap.setStatus('mandatory')
promSwitchPortIntrusionTrapTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 2, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promSwitchPortIntrusionTrapTimer.setStatus('mandatory')
promHuntGroupMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 4))
promHuntGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 4, 1), )
if mibBuilder.loadTexts: promHuntGroupTable.setStatus('mandatory')
promHuntGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 4, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promHuntGroupIndex"))
if mibBuilder.loadTexts: promHuntGroupEntry.setStatus('mandatory')
promHuntGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promHuntGroupIndex.setStatus('mandatory')
promHuntGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promHuntGroupName.setStatus('mandatory')
promHuntGroupBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 4, 1, 1, 3), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promHuntGroupBasePort.setStatus('mandatory')
promHuntGroupNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promHuntGroupNumberOfPorts.setStatus('mandatory')
promHuntGroupLoadSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promHuntGroupLoadSharing.setStatus('mandatory')
promHuntGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("createRequest", 1), ("underCreation", 2), ("deleteRequest", 3), ("active", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promHuntGroupStatus.setStatus('mandatory')
promPortMirroringMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 5, 5))
promPortMirroringTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 5, 5, 1), )
if mibBuilder.loadTexts: promPortMirroringTable.setStatus('mandatory')
promPortMirroringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 5, 5, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promPortMirroringIndex"))
if mibBuilder.loadTexts: promPortMirroringEntry.setStatus('mandatory')
promPortMirroringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 5, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promPortMirroringIndex.setStatus('mandatory')
promPortMirroringSourceSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortMirroringSourceSubPort.setStatus('mandatory')
promPortMirroringSamplerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("periodic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortMirroringSamplerType.setStatus('mandatory')
promPortMirroringRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortMirroringRate.setStatus('mandatory')
promPortMirroringMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 5, 5, 1, 1, 5), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promPortMirroringMirrorPort.setStatus('mandatory')
promVlanMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 7))
promVlans = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 7, 1))
promVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1), )
if mibBuilder.loadTexts: promVlanTable.setStatus('mandatory')
promVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promVlanID"))
if mibBuilder.loadTexts: promVlanEntry.setStatus('mandatory')
promVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVlanID.setStatus('mandatory')
promVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVlanName.setStatus('mandatory')
promVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVlanIfIndex.setStatus('mandatory')
promVlanAFTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVlanAFTIndex.setStatus('mandatory')
promVlanBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1, 5), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVlanBridgeIndex.setStatus('mandatory')
promVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("createRequest", 1), ("underCreation", 2), ("destroyRequest", 3), ("underDestruction", 4), ("active", 5), ("otherError", 6), ("entryExistsError", 7), ("invalidVlanID", 8), ("invalidVlanName", 9), ("invalidVlanAFTIndex", 10), ("invalidVlanBridgeIndex", 11), ("invalidVlanInitialHashTableSize", 12), ("invalidVlanAutoIncrementHTSize", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVlanStatus.setStatus('mandatory')
promVlanInitialHashTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVlanInitialHashTableSize.setStatus('mandatory')
promVlanAutoIncrementHTSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVlanAutoIncrementHTSize.setStatus('mandatory')
promVlanLearnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notLearned", 1), ("vtpSnooping", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVlanLearnStatus.setStatus('mandatory')
promVlanMappings = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 7, 3))
prom3ComMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 7, 3, 1))
prom3ComMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 7, 3, 1, 1), )
if mibBuilder.loadTexts: prom3ComMappingTable.setStatus('mandatory')
prom3ComMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 7, 3, 1, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "prom3ComMappingTableIndex"))
if mibBuilder.loadTexts: prom3ComMappingEntry.setStatus('mandatory')
prom3ComMappingTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prom3ComMappingTableIndex.setStatus('mandatory')
prom3ComMappingTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 3, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prom3ComMappingTableName.setStatus('mandatory')
prom3ComMappingTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("createRequest", 1), ("destroyRequest", 2), ("active", 3), ("entryExistsError", 4), ("otherError", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prom3ComMappingTableStatus.setStatus('mandatory')
promVlan3ComMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 7, 3, 2))
promVlan3ComMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 7, 3, 2, 1), )
if mibBuilder.loadTexts: promVlan3ComMappingTable.setStatus('mandatory')
promVlan3ComMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 7, 3, 2, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "prom3ComMappingTableIndex"), (0, "PROMINET-MIB", "promVlan3ComMappingIndex"))
if mibBuilder.loadTexts: promVlan3ComMappingEntry.setStatus('mandatory')
promVlan3ComMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVlan3ComMappingIndex.setStatus('mandatory')
promVlan3ComMappingVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVlan3ComMappingVlanID.setStatus('mandatory')
promVlan3ComMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("createRequest", 1), ("destroyRequest", 2), ("active", 3), ("otherError", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVlan3ComMappingStatus.setStatus('mandatory')
promVirtualPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 7, 4))
promVirtualSwitchPortTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 7, 4, 1), )
if mibBuilder.loadTexts: promVirtualSwitchPortTable.setStatus('mandatory')
promVirtualSwitchPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 7, 4, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promVirtualSwitchPortIndex"))
if mibBuilder.loadTexts: promVirtualSwitchPortEntry.setStatus('mandatory')
promVirtualSwitchPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 1, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVirtualSwitchPortIndex.setStatus('mandatory')
promVirtualSwitchPortFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("trunkingFormat", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVirtualSwitchPortFormat.setStatus('mandatory')
promVirtualSwitchPortBridgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 1, 1, 3), ResourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVirtualSwitchPortBridgePort.setStatus('mandatory')
promVirtualSwitchPortBindingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("persistent", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVirtualSwitchPortBindingType.setStatus('mandatory')
promVirtualSwitchPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("createRequest", 1), ("destroyRequest", 2), ("active", 3), ("otherError", 4), ("entryExistsError", 5), ("entryNoExistError", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVirtualSwitchPortStatus.setStatus('mandatory')
promVirtualModulePortTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 7, 4, 2), )
if mibBuilder.loadTexts: promVirtualModulePortTable.setStatus('mandatory')
promVirtualModulePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 7, 4, 2, 1), ).setIndexNames((0, "PROMINET-MIB", "promVlanID"), (0, "PROMINET-MIB", "promPortIndex"))
if mibBuilder.loadTexts: promVirtualModulePortEntry.setStatus('mandatory')
promVirtualModulePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 2, 1, 1), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVirtualModulePortIndex.setStatus('mandatory')
promVirtualModulePortFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("trunkingFormat", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVirtualModulePortFormat.setStatus('mandatory')
promVirtualModulePortBridgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 2, 1, 3), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVirtualModulePortBridgePort.setStatus('mandatory')
promVirtualModulePortBindingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("persistent", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVirtualModulePortBindingType.setStatus('mandatory')
promVirtualModulePortModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVirtualModulePortModuleName.setStatus('mandatory')
promVirtualModulePortPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 7, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVirtualModulePortPortName.setStatus('mandatory')
promEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 10))
promEventMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 10, 1))
promEventTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 10, 1, 1), )
if mibBuilder.loadTexts: promEventTable.setStatus('mandatory')
promEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 10, 1, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promEventIndex"))
if mibBuilder.loadTexts: promEventEntry.setStatus('mandatory')
promEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventIndex.setStatus('mandatory')
promEventMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promEventMode.setStatus('mandatory')
promEventLogAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promEventLogAction.setStatus('mandatory')
promEventTrapAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promEventTrapAction.setStatus('mandatory')
promEventConsoleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promEventConsoleAction.setStatus('mandatory')
promEventLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 10, 2))
promLogTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promLogTableMaxSize.setStatus('mandatory')
promLogLastEntry = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promLogLastEntry.setStatus('mandatory')
promLogWraps = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promLogWraps.setStatus('mandatory')
promEventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 10, 3))
promEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1), )
if mibBuilder.loadTexts: promEventLogTable.setStatus('mandatory')
promEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promEventLogIndex"))
if mibBuilder.loadTexts: promEventLogEntry.setStatus('mandatory')
promEventLogEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogEventIndex.setStatus('mandatory')
promEventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogIndex.setStatus('mandatory')
promEventLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogTime.setStatus('mandatory')
promEventLogDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogDescr.setStatus('mandatory')
promEventLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 5), EventCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogType.setStatus('mandatory')
promEventLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogSeverity.setStatus('mandatory')
promEventLogDTM = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogDTM.setStatus('mandatory')
promEventLogResType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 8), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogResType.setStatus('mandatory')
promEventLogResID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 9), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogResID.setStatus('mandatory')
promEventLogResLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogResLeaf.setStatus('mandatory')
promEventLogValueType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 11), EventValueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogValueType.setStatus('mandatory')
promEventLogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogValue.setStatus('mandatory')
promEventLogEpochTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogEpochTime.setStatus('mandatory')
promEventLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventLogID.setStatus('mandatory')
promShutdownLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 10, 4))
promShutdownLogTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promShutdownLogTableMaxSize.setStatus('mandatory')
promShutdownLogLastEntry = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promShutdownLogLastEntry.setStatus('mandatory')
promShutdownLogAcknowledged = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-acknowledged", 1), ("acknowledged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promShutdownLogAcknowledged.setStatus('mandatory')
promEventShutdownLog = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 10, 5))
promEventShutdownLogTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1), )
if mibBuilder.loadTexts: promEventShutdownLogTable.setStatus('mandatory')
promEventShutdownLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1), ).setIndexNames((0, "PROMINET-MIB", "promEventShutdownLogIndex"))
if mibBuilder.loadTexts: promEventShutdownLogEntry.setStatus('mandatory')
promEventShutdownLogEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogEventIndex.setStatus('mandatory')
promEventShutdownLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogIndex.setStatus('mandatory')
promEventShutdownLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogTime.setStatus('mandatory')
promEventShutdownLogDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogDescr.setStatus('mandatory')
promEventShutdownLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 5), EventCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogType.setStatus('mandatory')
promEventShutdownLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogSeverity.setStatus('mandatory')
promEventShutdownLogDTM = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogDTM.setStatus('mandatory')
promEventShutdownLogResType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 8), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogResType.setStatus('mandatory')
promEventShutdownLogResID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 9), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogResID.setStatus('mandatory')
promEventShutdownLogResLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogResLeaf.setStatus('mandatory')
promEventShutdownLogValueType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 11), EventValueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogValueType.setStatus('mandatory')
promEventShutdownLogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogValue.setStatus('mandatory')
promEventShutdownLogEpochTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogEpochTime.setStatus('mandatory')
promEventShutdownLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 10, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventShutdownLogID.setStatus('mandatory')
promEventTrapMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 10, 6))
promEventTrapEventIndex = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapEventIndex.setStatus('mandatory')
promEventTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapTime.setStatus('mandatory')
promEventTrapDescr = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapDescr.setStatus('mandatory')
promEventTrapType = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 4), EventCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapType.setStatus('mandatory')
promEventTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapSeverity.setStatus('mandatory')
promEventTrapDTM = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapDTM.setStatus('mandatory')
promEventTrapResType = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 7), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapResType.setStatus('mandatory')
promEventTrapResID = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 8), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapResID.setStatus('mandatory')
promEventTrapResLeaf = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapResLeaf.setStatus('mandatory')
promEventTrapValueType = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 10), EventValueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapValueType.setStatus('mandatory')
promEventTrapValue = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapValue.setStatus('mandatory')
promEventTrapEpochTime = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapEpochTime.setStatus('mandatory')
promEventTrapID = MibScalar((1, 3, 6, 1, 4, 1, 2167, 10, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promEventTrapID.setStatus('mandatory')
promAlarmMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 11))
promAlarmGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 11, 1))
promAlarmGeneralActiveEntries = MibScalar((1, 3, 6, 1, 4, 1, 2167, 11, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promAlarmGeneralActiveEntries.setStatus('mandatory')
promAlarmGeneralTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 2167, 11, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promAlarmGeneralTimeStamp.setStatus('mandatory')
promAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 11, 2))
promActiveAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2), )
if mibBuilder.loadTexts: promActiveAlarmTable.setStatus('mandatory')
promActiveAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1), ).setIndexNames((0, "PROMINET-MIB", "promActiveAlarmIndex"))
if mibBuilder.loadTexts: promActiveAlarmEntry.setStatus('mandatory')
promActiveAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promActiveAlarmIndex.setStatus('mandatory')
promActiveAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promActiveAlarmName.setStatus('mandatory')
promActiveAlarmValueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promActiveAlarmValueHigh.setStatus('mandatory')
promActiveAlarmValueLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promActiveAlarmValueLow.setStatus('mandatory')
promActiveAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promActiveAlarmVariable.setStatus('mandatory')
promActiveAlarmResType = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1, 6), ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promActiveAlarmResType.setStatus('mandatory')
promActiveAlarmResID = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1, 7), ResourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promActiveAlarmResID.setStatus('mandatory')
promActiveAlarmLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promActiveAlarmLeaf.setStatus('mandatory')
promActiveAlarmOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2167, 11, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promActiveAlarmOwner.setStatus('mandatory')
promSnmpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 13))
promSystemTrap = NotificationType((1, 3, 6, 1, 4, 1, 2167, 13) + (0,2)).setObjects(("PROMINET-MIB", "promEventTrapEventIndex"), ("PROMINET-MIB", "promEventTrapTime"), ("PROMINET-MIB", "promEventTrapDescr"), ("PROMINET-MIB", "promEventTrapType"), ("PROMINET-MIB", "promEventTrapSeverity"), ("PROMINET-MIB", "promEventTrapDTM"), ("PROMINET-MIB", "promEventTrapResType"), ("PROMINET-MIB", "promEventTrapResID"), ("PROMINET-MIB", "promEventTrapResLeaf"), ("PROMINET-MIB", "promEventTrapValueType"), ("PROMINET-MIB", "promEventTrapValue"), ("PROMINET-MIB", "promEventTrapEpochTime"), ("PROMINET-MIB", "promEventTrapID"))
promConfigurationTrap = NotificationType((1, 3, 6, 1, 4, 1, 2167, 13) + (0,3)).setObjects(("PROMINET-MIB", "promEventTrapEventIndex"), ("PROMINET-MIB", "promEventTrapTime"), ("PROMINET-MIB", "promEventTrapDescr"), ("PROMINET-MIB", "promEventTrapType"), ("PROMINET-MIB", "promEventTrapSeverity"), ("PROMINET-MIB", "promEventTrapDTM"), ("PROMINET-MIB", "promEventTrapResType"), ("PROMINET-MIB", "promEventTrapResID"), ("PROMINET-MIB", "promEventTrapResLeaf"), ("PROMINET-MIB", "promEventTrapValueType"), ("PROMINET-MIB", "promEventTrapValue"), ("PROMINET-MIB", "promEventTrapEpochTime"), ("PROMINET-MIB", "promEventTrapID"))
promTemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2167, 13) + (0,4)).setObjects(("PROMINET-MIB", "promEventTrapEventIndex"), ("PROMINET-MIB", "promEventTrapTime"), ("PROMINET-MIB", "promEventTrapDescr"), ("PROMINET-MIB", "promEventTrapType"), ("PROMINET-MIB", "promEventTrapSeverity"), ("PROMINET-MIB", "promEventTrapDTM"), ("PROMINET-MIB", "promEventTrapResType"), ("PROMINET-MIB", "promEventTrapResID"), ("PROMINET-MIB", "promEventTrapResLeaf"), ("PROMINET-MIB", "promEventTrapValueType"), ("PROMINET-MIB", "promEventTrapValue"), ("PROMINET-MIB", "promEventTrapEpochTime"), ("PROMINET-MIB", "promEventTrapID"))
promResourceTrap = NotificationType((1, 3, 6, 1, 4, 1, 2167, 13) + (0,5)).setObjects(("PROMINET-MIB", "promEventTrapEventIndex"), ("PROMINET-MIB", "promEventTrapTime"), ("PROMINET-MIB", "promEventTrapDescr"), ("PROMINET-MIB", "promEventTrapType"), ("PROMINET-MIB", "promEventTrapSeverity"), ("PROMINET-MIB", "promEventTrapDTM"), ("PROMINET-MIB", "promEventTrapResType"), ("PROMINET-MIB", "promEventTrapResID"), ("PROMINET-MIB", "promEventTrapResLeaf"), ("PROMINET-MIB", "promEventTrapValueType"), ("PROMINET-MIB", "promEventTrapValue"), ("PROMINET-MIB", "promEventTrapEpochTime"), ("PROMINET-MIB", "promEventTrapID"))
promFanTrap = NotificationType((1, 3, 6, 1, 4, 1, 2167, 13) + (0,6)).setObjects(("PROMINET-MIB", "promEventTrapEventIndex"), ("PROMINET-MIB", "promEventTrapTime"), ("PROMINET-MIB", "promEventTrapDescr"), ("PROMINET-MIB", "promEventTrapType"), ("PROMINET-MIB", "promEventTrapSeverity"), ("PROMINET-MIB", "promEventTrapDTM"), ("PROMINET-MIB", "promEventTrapResType"), ("PROMINET-MIB", "promEventTrapResID"), ("PROMINET-MIB", "promEventTrapResLeaf"), ("PROMINET-MIB", "promEventTrapValueType"), ("PROMINET-MIB", "promEventTrapValue"), ("PROMINET-MIB", "promEventTrapEpochTime"), ("PROMINET-MIB", "promEventTrapID"))
promPowerTrap = NotificationType((1, 3, 6, 1, 4, 1, 2167, 13) + (0,9)).setObjects(("PROMINET-MIB", "promEventTrapEventIndex"), ("PROMINET-MIB", "promEventTrapTime"), ("PROMINET-MIB", "promEventTrapDescr"), ("PROMINET-MIB", "promEventTrapType"), ("PROMINET-MIB", "promEventTrapSeverity"), ("PROMINET-MIB", "promEventTrapDTM"), ("PROMINET-MIB", "promEventTrapResType"), ("PROMINET-MIB", "promEventTrapResID"), ("PROMINET-MIB", "promEventTrapResLeaf"), ("PROMINET-MIB", "promEventTrapValueType"), ("PROMINET-MIB", "promEventTrapValue"), ("PROMINET-MIB", "promEventTrapEpochTime"), ("PROMINET-MIB", "promEventTrapID"))
promVtpSnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 14))
promVtpSnoopingSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 14, 1))
promVtpSnoopingState = MibScalar((1, 3, 6, 1, 4, 1, 2167, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVtpSnoopingState.setStatus('mandatory')
promVtpSnoopingDomainName = MibScalar((1, 3, 6, 1, 4, 1, 2167, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promVtpSnoopingDomainName.setStatus('mandatory')
promVtpSnoopingUpdaterId = MibScalar((1, 3, 6, 1, 4, 1, 2167, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVtpSnoopingUpdaterId.setStatus('mandatory')
promVtpSnoopingUpdateTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 2167, 14, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVtpSnoopingUpdateTimeStamp.setStatus('mandatory')
promVtpSnoopingConfigRevNum = MibScalar((1, 3, 6, 1, 4, 1, 2167, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: promVtpSnoopingConfigRevNum.setStatus('mandatory')
promPortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 15))
promTCPPortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2167, 15, 1))
promTCPPortHTTP = MibScalar((1, 3, 6, 1, 4, 1, 2167, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(80, 80), ValueRangeConstraint(9000, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promTCPPortHTTP.setStatus('mandatory')
promTCPPortTelnet = MibScalar((1, 3, 6, 1, 4, 1, 2167, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(23, 23), ValueRangeConstraint(9000, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promTCPPortTelnet.setStatus('mandatory')
mibBuilder.exportSymbols("PROMINET-MIB", promBufferHighStaleDrops=promBufferHighStaleDrops, promEventIndex=promEventIndex, BridgeId=BridgeId, promInventoryResourceIndex=promInventoryResourceIndex, promBufferAgeTimer=promBufferAgeTimer, promVlanInitialHashTableSize=promVlanInitialHashTableSize, mib_extensions_1=mib_extensions_1, promLogWraps=promLogWraps, promEventShutdownLogValue=promEventShutdownLogValue, promTempLowerWarning=promTempLowerWarning, promVirtualModulePortModuleName=promVirtualModulePortModuleName, promEventTrapMgmt=promEventTrapMgmt, promEventMode=promEventMode, promPortRemoteFaultDetect=promPortRemoteFaultDetect, promSwitchGen=promSwitchGen, promEventShutdownLogEntry=promEventShutdownLogEntry, promBridgeStpHelloTime=promBridgeStpHelloTime, promPortTable=promPortTable, promBridgeIndex=promBridgeIndex, promHuntGroupTable=promHuntGroupTable, promPowerControlEntry=promPowerControlEntry, DisplayString=DisplayString, promSwitchPortVlanBindingMethod=promSwitchPortVlanBindingMethod, promSwitchPortVlanID=promSwitchPortVlanID, prom3ComMappingTableName=prom3ComMappingTableName, ResourceId=ResourceId, promSwitchPortLearningMode=promSwitchPortLearningMode, promModuleSlotWidth=promModuleSlotWidth, promL2AddrSummaryTable=promL2AddrSummaryTable, promPortSpeedState=promPortSpeedState, promL2AddrChangeMgt=promL2AddrChangeMgt, promPowerControlPriority=promPowerControlPriority, promPortAutoNegotiationTable=promPortAutoNegotiationTable, promSwitchPortMappingMethod=promSwitchPortMappingMethod, marconi=marconi, odsLANBlazer7000Mib=odsLANBlazer7000Mib, promTempEntry=promTempEntry, promEventLog=promEventLog, promEventTrapResID=promEventTrapResID, promAlarmMgt=promAlarmMgt, promSwitchPortAutoVlanCreation=promSwitchPortAutoVlanCreation, promAgentCommunity=promAgentCommunity, promPortCategoryMgt=promPortCategoryMgt, promLogLastEntry=promLogLastEntry, promVirtualModulePortIndex=promVirtualModulePortIndex, promEventTable=promEventTable, promTempTable=promTempTable, promBufferEntry=promBufferEntry, promL2AddrSummaryEntry=promL2AddrSummaryEntry, promSwitchPortVtpSnooping=promSwitchPortVtpSnooping, promAgentMgrIndex=promAgentMgrIndex, promInventoryScratchPad=promInventoryScratchPad, promAgent=promAgent, promTemperatureTrap=promTemperatureTrap, odsLANBlazer=odsLANBlazer, promBridgePortEnableChangeDetection=promBridgePortEnableChangeDetection, promTempLowerLimit=promTempLowerLimit, promL2AddressMacAddress=promL2AddressMacAddress, promHuntGroupIndex=promHuntGroupIndex, promEventLogResType=promEventLogResType, promEventLogValue=promEventLogValue, promL2AddressPortBinding=promL2AddressPortBinding, promShutdownLogMgt=promShutdownLogMgt, promShutdownLogLastEntry=promShutdownLogLastEntry, promPortMgmt=promPortMgmt, promInventoryVersion=promInventoryVersion, promEvents=promEvents, promVlanMappings=promVlanMappings, promHuntGroupLoadSharing=promHuntGroupLoadSharing, promEventShutdownLogValueType=promEventShutdownLogValueType, promPortSpeedTable=promPortSpeedTable, promPortFlowControlEntry=promPortFlowControlEntry, promL2AddressControlStatus=promL2AddressControlStatus, promPortMirroringMirrorPort=promPortMirroringMirrorPort, promBridgePortEnable=promBridgePortEnable, promVlanID=promVlanID, promEventMgt=promEventMgt, promPortType=promPortType, promPortDuplexMode=promPortDuplexMode, promEventShutdownLogTime=promEventShutdownLogTime, promSnmpTraps=promSnmpTraps, promPortName=promPortName, promPowerControlUsed=promPowerControlUsed, promPortMirroringTable=promPortMirroringTable, promL2AddressIndex=promL2AddressIndex, promEventTrapEventIndex=promEventTrapEventIndex, promEventShutdownLogType=promEventShutdownLogType, promAgentWebServerHelpDirectory=promAgentWebServerHelpDirectory, promPowerSupplies=promPowerSupplies, promVtpSnoopingUpdaterId=promVtpSnoopingUpdaterId, promPortGroupBinding=promPortGroupBinding, promAlarms=promAlarms, promVirtualSwitchPortEntry=promVirtualSwitchPortEntry, promVtpSnoopingUpdateTimeStamp=promVtpSnoopingUpdateTimeStamp, promTCPPortHTTP=promTCPPortHTTP, promInventory=promInventory, promVlanStatus=promVlanStatus, promPortCategoryTable=promPortCategoryTable, intel=intel, promBridgeStpPriority=promBridgeStpPriority, promVlanEntry=promVlanEntry, promL2AddressTableIndex=promL2AddressTableIndex, promBridgeStpBridgeMaxAge=promBridgeStpBridgeMaxAge, promHuntGroupEntry=promHuntGroupEntry, promEventLogIndex=promEventLogIndex, promBufferMgt=promBufferMgt, promBridgePortMgmt=promBridgePortMgmt, promVlanAutoIncrementHTSize=promVlanAutoIncrementHTSize, promEventLogTable=promEventLogTable, promPortRateLimitTable=promPortRateLimitTable, promL2AddrControlMgt=promL2AddrControlMgt, promChassisSystemReset=promChassisSystemReset, promEventTrapType=promEventTrapType, promPortAutoNegotiationMgt=promPortAutoNegotiationMgt, promBridgePortEntry=promBridgePortEntry, promPortCategoryEntry=promPortCategoryEntry, promVirtualSwitchPortFormat=promVirtualSwitchPortFormat, promBufferSwitchPort=promBufferSwitchPort, promPowerMgmtCtl=promPowerMgmtCtl, promPortMirroringEntry=promPortMirroringEntry, promPortAutoNegotiationSpeedAdvertisement=promPortAutoNegotiationSpeedAdvertisement, promPortDuplexMgt=promPortDuplexMgt, promSwitchPortKnownMode=promSwitchPortKnownMode, promPortSpeedMode=promPortSpeedMode, promTCPPortTelnet=promTCPPortTelnet, promModuleIndex=promModuleIndex, promModuleType=promModuleType, promInventorySerialNumber=promInventorySerialNumber, promEventShutdownLogTable=promEventShutdownLogTable, promVlan3ComMappingStatus=promVlan3ComMappingStatus, promVlanTable=promVlanTable, promPowerMgmtGen=promPowerMgmtGen, promChassisSlots=promChassisSlots, promPowerTrap=promPowerTrap, EventValueType=EventValueType, promL2AddressPersistence=promL2AddressPersistence, promModuleEntry=promModuleEntry, promL2AddressForward=promL2AddressForward, promL2AddressChangeLast=promL2AddressChangeLast, Timeout=Timeout, promPortAutoNegotiationDuplexAdvertisement=promPortAutoNegotiationDuplexAdvertisement, promSwitchPortPhysicalPort=promSwitchPortPhysicalPort, promEventConsoleAction=promEventConsoleAction, promL2AddressControlIndex=promL2AddressControlIndex, promBridgePortDesignatedRoot=promBridgePortDesignatedRoot, promEventShutdownLog=promEventShutdownLog, promBridgePortPathCost=promBridgePortPathCost, promSwitchingLayerII=promSwitchingLayerII, promL2AddressTable=promL2AddressTable, promVirtualSwitchPortTable=promVirtualSwitchPortTable, promBridgePortPriority=promBridgePortPriority, promAlarmGeneralActiveEntries=promAlarmGeneralActiveEntries, promBridgeEntry=promBridgeEntry, promVirtualModulePortTable=promVirtualModulePortTable, promEventTrapValueType=promEventTrapValueType, promHuntGroupMgt=promHuntGroupMgt, promPowerControlMode=promPowerControlMode, promL2AddressPriority=promL2AddressPriority, promBridgeType=promBridgeType, promCommunityString=promCommunityString, promBridgePortState=promBridgePortState, promTempUpperWarning=promTempUpperWarning, promEventShutdownLogDTM=promEventShutdownLogDTM, promVlanLearnStatus=promVlanLearnStatus, promSwitchPortIntrusionTrap=promSwitchPortIntrusionTrap, promActiveAlarmLeaf=promActiveAlarmLeaf, promPortRemoteFaultMgt=promPortRemoteFaultMgt, prom3ComMapping=prom3ComMapping, promEventLogResLeaf=promEventLogResLeaf, promEventTrapTime=promEventTrapTime, promModulePorts=promModulePorts, promPortCategoryMode=promPortCategoryMode, promPortFlowControlMgt=promPortFlowControlMgt, promSwitchPortMgt=promSwitchPortMgt, promPortMgt=promPortMgt, promVirtualModulePortBindingType=promVirtualModulePortBindingType, promVlan3ComMapping=promVlan3ComMapping, promActiveAlarmName=promActiveAlarmName, promPowerSupplyIndex=promPowerSupplyIndex, promEventLogEpochTime=promEventLogEpochTime, promPowerSupplyStatus=promPowerSupplyStatus, promActiveAlarmResType=promActiveAlarmResType, promBufferLowStaleDrops=promBufferLowStaleDrops, promBridgeStpRootPort=promBridgeStpRootPort, promSwitchPortTable=promSwitchPortTable, promPortDuplexEntry=promPortDuplexEntry, promVirtualModulePortFormat=promVirtualModulePortFormat, promCommunityIndex=promCommunityIndex, promActiveAlarmValueHigh=promActiveAlarmValueHigh, promSwitchPortIfIndex=promSwitchPortIfIndex, ods=ods, promConfigurationTrap=promConfigurationTrap, promCommunityAccess=promCommunityAccess, promBridgeStpDesignatedRoot=promBridgeStpDesignatedRoot, promVlanMgt=promVlanMgt, promEventShutdownLogDescr=promEventShutdownLogDescr, promActiveAlarmOwner=promActiveAlarmOwner, promPortAutoNegotiationMode=promPortAutoNegotiationMode, promEventLogEventIndex=promEventLogEventIndex, gsEMIB=gsEMIB, promCommunityTable=promCommunityTable, promHuntGroupStatus=promHuntGroupStatus, promActiveAlarmValueLow=promActiveAlarmValueLow, promVtpSnoopingSwitch=promVtpSnoopingSwitch, promL2AddressControlPriority=promL2AddressControlPriority, promEventLogMgt=promEventLogMgt, promHuntGroupBasePort=promHuntGroupBasePort, ema=ema, dec=dec, promPowerSupplyEntry=promPowerSupplyEntry, promPortSpeedEntry=promPortSpeedEntry, promBufferFabricPort=promBufferFabricPort, promEventTrapValue=promEventTrapValue, promL2AddrSummary=promL2AddrSummary, promL2AddressVlanID=promL2AddressVlanID, promPowerCapacity=promPowerCapacity, promPortStatus=promPortStatus, promSwitchPortTrunkingMode=promSwitchPortTrunkingMode, promEventTrapEpochTime=promEventTrapEpochTime, promInventoryModelNumber=promInventoryModelNumber, promEventTrapID=promEventTrapID, promL2AddressChangeIndexChanged=promL2AddressChangeIndexChanged, promEventShutdownLogEventIndex=promEventShutdownLogEventIndex, promBufferTable=promBufferTable, promPortEntry=promPortEntry, ethernetL3=ethernetL3, promPowerUsed=promPowerUsed, promVtpSnoopingDomainName=promVtpSnoopingDomainName, promEventShutdownLogIndex=promEventShutdownLogIndex, promSwitchPortFastStart=promSwitchPortFastStart, promEventLogID=promEventLogID, promPortSpeedMgt=promPortSpeedMgt, promPortRateLimitBurstSize=promPortRateLimitBurstSize, promSwitchAgingTime=promSwitchAgingTime, promEventLogResID=promEventLogResID, promSwitchPort3ComMappingTableIndex=promSwitchPort3ComMappingTableIndex, promBridgePortTable=promBridgePortTable, esrSwitch=esrSwitch, promPortFlowControlState=promPortFlowControlState, promPortAutoNegotiationFlowControlAdvertisement=promPortAutoNegotiationFlowControlAdvertisement, promCommunityStatus=promCommunityStatus, promBridgeStpMaxAge=promBridgeStpMaxAge, promEventShutdownLogSeverity=promEventShutdownLogSeverity, promVtpSnoopingConfigRevNum=promVtpSnoopingConfigRevNum, promPortPacePriorityTable=promPortPacePriorityTable, promVirtualModulePortPortName=promVirtualModulePortPortName, promEventLogSeverity=promEventLogSeverity, promPortMirroringSamplerType=promPortMirroringSamplerType, promEventTrapDTM=promEventTrapDTM, promPowerSystems=promPowerSystems, promVirtualModulePortEntry=promVirtualModulePortEntry, promPortPacePriorityEntry=promPortPacePriorityEntry, promActiveAlarmTable=promActiveAlarmTable, promBufferLowOverflowDrops=promBufferLowOverflowDrops)
mibBuilder.exportSymbols("PROMINET-MIB", promPowerSupplyTable=promPowerSupplyTable, promInventoryResourceType=promInventoryResourceType, promVlan3ComMappingTable=promVlan3ComMappingTable, promEventEntry=promEventEntry, promSwitchPortIndex=promSwitchPortIndex, promPortRemoteFaultTable=promPortRemoteFaultTable, promBridgeStpBridgeHelloTime=promBridgeStpBridgeHelloTime, promVlanIfIndex=promVlanIfIndex, promEventLogDTM=promEventLogDTM, promVlan3ComMappingEntry=promVlan3ComMappingEntry, promBufferIndex=promBufferIndex, promChassisGen=promChassisGen, promPortFlowControlTable=promPortFlowControlTable, promVirtualSwitchPortBridgePort=promVirtualSwitchPortBridgePort, promEventLogEntry=promEventLogEntry, promL2AddressChangeWraps=promL2AddressChangeWraps, promBridgeMode=promBridgeMode, promModuleUpdateList=promModuleUpdateList, promL2AddressChangeIndex=promL2AddressChangeIndex, promVirtualSwitchPortStatus=promVirtualSwitchPortStatus, promBridgePortDesignatedPort=promBridgePortDesignatedPort, ResourceType=ResourceType, promL2AddrMgmt=promL2AddrMgmt, promPortPacePriorityMgt=promPortPacePriorityMgt, promEventShutdownLogResType=promEventShutdownLogResType, prominet=prominet, promEventLogValueType=promEventLogValueType, promModuleBaseType=promModuleBaseType, prom3ComMappingEntry=prom3ComMappingEntry, promCommunitySecurityLevel=promCommunitySecurityLevel, promEventShutdownLogID=promEventShutdownLogID, promChassisType=promChassisType, promBufferMemory=promBufferMemory, promEventShutdownLogEpochTime=promEventShutdownLogEpochTime, promAlarmGeneral=promAlarmGeneral, promBufferCongestionDrops=promBufferCongestionDrops, promBridgePortIndex=promBridgePortIndex, promCommunityEntry=promCommunityEntry, promPortRateLimitMgt=promPortRateLimitMgt, promSwitchPortIntrusionTrapTimer=promSwitchPortIntrusionTrapTimer, promPortIndex=promPortIndex, MacAddress=MacAddress, promL2AddressChangeMaxEntries=promL2AddressChangeMaxEntries, promResourceTrap=promResourceTrap, promVtpSnooping=promVtpSnooping, promVlan3ComMappingVlanID=promVlan3ComMappingVlanID, promEventShutdownLogResID=promEventShutdownLogResID, promAlarmGeneralTimeStamp=promAlarmGeneralTimeStamp, promModuleUpdateTime=promModuleUpdateTime, promPortPacePriorityMode=promPortPacePriorityMode, promSwitchPortMirrorMode=promSwitchPortMirrorMode, promBridgeStpRootCost=promBridgeStpRootCost, promModuleName=promModuleName, promBridgeStpHoldTime=promBridgeStpHoldTime, promL2AddressControlPersistence=promL2AddressControlPersistence, promBridgeStpBridgeForwardDelay=promBridgeStpBridgeForwardDelay, promEventTrapAction=promEventTrapAction, promPortMirroringMgt=promPortMirroringMgt, promBridgePortDesignatedCost=promBridgePortDesignatedCost, promTempUpperLimit=promTempUpperLimit, promBridgePortDesignatedBridge=promBridgePortDesignatedBridge, promPowerSupplyOutputStatus=promPowerSupplyOutputStatus, promSystemTrap=promSystemTrap, promSwitchSuperAgingTime=promSwitchSuperAgingTime, promActiveAlarmResID=promActiveAlarmResID, promL2AddrDatabaseMgt=promL2AddrDatabaseMgt, promVlanName=promVlanName, promAgentWeb=promAgentWeb, promPortRateLimitRate=promPortRateLimitRate, promInventoryTable=promInventoryTable, promBridgePortSetDefault=promBridgePortSetDefault, promBufferHighOverflowDrops=promBufferHighOverflowDrops, promPortConnector=promPortConnector, promBufferPriorityAllocation=promBufferPriorityAllocation, promPortMirroringIndex=promPortMirroringIndex, mib2ext=mib2ext, promVlan3ComMappingIndex=promVlan3ComMappingIndex, promSwitchPortConvertToStatic=promSwitchPortConvertToStatic, promSwitching=promSwitching, promBridgeTable=promBridgeTable, promL2AddrSummaryMgt=promL2AddrSummaryMgt, promVlans=promVlans, promBridgePortForwardTransitions=promBridgePortForwardTransitions, promModuleTable=promModuleTable, promVirtualSwitchPortBindingType=promVirtualSwitchPortBindingType, promCommunityAddressType=promCommunityAddressType, promInventoryEntry=promInventoryEntry, esGigaSwitch=esGigaSwitch, promSwitchPortHuntGroup=promSwitchPortHuntGroup, promL2AddressChangeEntry=promL2AddressChangeEntry, promEventLogDescr=promEventLogDescr, promSwitchPortEntry=promSwitchPortEntry, promVtpSnoopingState=promVtpSnoopingState, promModules=promModules, promBridgeStpTopChanges=promBridgeStpTopChanges, promL2AddressBindingValid=promL2AddressBindingValid, promActiveAlarmIndex=promActiveAlarmIndex, promInventoryManufactureInfo=promInventoryManufactureInfo, promShutdownLogTableMaxSize=promShutdownLogTableMaxSize, promLogTableMaxSize=promLogTableMaxSize, promSwitchSTPConfig=promSwitchSTPConfig, promL2AddressControlMacAddress=promL2AddressControlMacAddress, promPortFlowControlMode=promPortFlowControlMode, promL2AddressChangeWrapCount=promL2AddressChangeWrapCount, promPowerSupplyType=promPowerSupplyType, promL2AddressCopy=promL2AddressCopy, promL2AddressControlTable=promL2AddressControlTable, RowStatus=RowStatus, promCommunityAddress=promCommunityAddress, promPowerControlTable=promPowerControlTable, promEventTrapSeverity=promEventTrapSeverity, promAgentWebServerURL=promAgentWebServerURL, promL2AddressChangeTable=promL2AddressChangeTable, promEventLogType=promEventLogType, promL2AddressChangeSummary=promL2AddressChangeSummary, promBridgePortFastStart=promBridgePortFastStart, promBufferCongestion=promBufferCongestion, promVirtualPorts=promVirtualPorts, promVirtualSwitchPortIndex=promVirtualSwitchPortIndex, promEventTrapResType=promEventTrapResType, promSwitchPortSTAPMode=promSwitchPortSTAPMode, promPortRateLimitEntry=promPortRateLimitEntry, promAgentMIBVersion=promAgentMIBVersion, promL2AddressStatus=promL2AddressStatus, promBridgeStatus=promBridgeStatus, promEventTrapDescr=promEventTrapDescr, prom3ComMappingTable=prom3ComMappingTable, promChassis=promChassis, promActiveAlarmVariable=promActiveAlarmVariable, prom3ComMappingTableIndex=prom3ComMappingTableIndex, odsLANBlazerMibs=odsLANBlazerMibs, promL2AddressControlEntry=promL2AddressControlEntry, promPowerSupplyInputStatus=promPowerSupplyInputStatus, promPortRateLimitMode=promPortRateLimitMode, promHuntGroupName=promHuntGroupName, promBufferPriorityThreshold=promBufferPriorityThreshold, promAgentGen=promAgentGen, promL2AddressControlVlanID=promL2AddressControlVlanID, promShutdownLogAcknowledged=promShutdownLogAcknowledged, promTemperature=promTemperature, promPortMirroringRate=promPortMirroringRate, promPortMirroringSourceSubPort=promPortMirroringSourceSubPort, promBridgeMgmt=promBridgeMgmt, promVirtualModulePortBridgePort=promVirtualModulePortBridgePort, promEventLogAction=promEventLogAction, promPortBaseType=promPortBaseType, promCommunityTrapReceiver=promCommunityTrapReceiver, prom3ComMappingTableStatus=prom3ComMappingTableStatus, promBufferPriorityServicing=promBufferPriorityServicing, promFanTrap=promFanTrap, promPortAutoNegotiationEntry=promPortAutoNegotiationEntry, promPortRemoteFaultEntry=promPortRemoteFaultEntry, promTempValue=promTempValue, promPortMode=promPortMode, promSwitchPortIgnoreTag=promSwitchPortIgnoreTag, promVlanAFTIndex=promVlanAFTIndex, EventCategory=EventCategory, promVlanBridgeIndex=promVlanBridgeIndex, promTempIndex=promTempIndex, promBufferFabricPortDirection=promBufferFabricPortDirection, promPorts=promPorts, promPortDuplexTable=promPortDuplexTable, promBridgeStpTimeSinceTopologyChange=promBridgeStpTimeSinceTopologyChange, promBridgeStpForwardDelay=promBridgeStpForwardDelay, odsTPS=odsTPS, promEventTrapResLeaf=promEventTrapResLeaf, promEventLogTime=promEventLogTime, promPortDuplexState=promPortDuplexState, promTCPPortMgmt=promTCPPortMgmt, promPowerSupplyOutputCapacity=promPowerSupplyOutputCapacity, promEventShutdownLogResLeaf=promEventShutdownLogResLeaf, promL2AddressEntry=promL2AddressEntry, promActiveAlarmEntry=promActiveAlarmEntry, promHuntGroupNumberOfPorts=promHuntGroupNumberOfPorts, promL2AddressControlPortBinding=promL2AddressControlPortBinding, promInventoryPowerConsumption=promInventoryPowerConsumption, promModuleSlotOffset=promModuleSlotOffset)
