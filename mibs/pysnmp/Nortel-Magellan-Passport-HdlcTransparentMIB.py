#
# PySNMP MIB module Nortel-Magellan-Passport-HdlcTransparentMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-HdlcTransparentMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:17:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
PassportCounter64, Integer32, Unsigned32, Gauge32, InterfaceIndex, StorageType, DisplayString, RowStatus, Counter32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "PassportCounter64", "Integer32", "Unsigned32", "Gauge32", "InterfaceIndex", "StorageType", "DisplayString", "RowStatus", "Counter32")
Link, AsciiString, NonReplicated, EnterpriseDateAndTime = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "Link", "AsciiString", "NonReplicated", "EnterpriseDateAndTime")
passportMIBs, components = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs", "components")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Unsigned32, TimeTicks, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, Counter64, ModuleIdentity, Bits, NotificationType, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "TimeTicks", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "Counter64", "ModuleIdentity", "Bits", "NotificationType", "iso", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hdlcTransparentMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 47))
htds = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82))
htdsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 1), )
if mibBuilder.loadTexts: htdsRowStatusTable.setStatus('mandatory')
htdsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsIndex"))
if mibBuilder.loadTexts: htdsRowStatusEntry.setStatus('mandatory')
htdsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsRowStatus.setStatus('mandatory')
htdsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsComponentName.setStatus('mandatory')
htdsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsStorageType.setStatus('mandatory')
htdsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: htdsIndex.setStatus('mandatory')
htdsCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 10), )
if mibBuilder.loadTexts: htdsCidDataTable.setStatus('mandatory')
htdsCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsIndex"))
if mibBuilder.loadTexts: htdsCidDataEntry.setStatus('mandatory')
htdsCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsCustomerIdentifier.setStatus('mandatory')
htdsIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 11), )
if mibBuilder.loadTexts: htdsIfEntryTable.setStatus('mandatory')
htdsIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsIndex"))
if mibBuilder.loadTexts: htdsIfEntryEntry.setStatus('mandatory')
htdsIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsIfAdminStatus.setStatus('mandatory')
htdsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 11, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsIfIndex.setStatus('mandatory')
htdsOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 12), )
if mibBuilder.loadTexts: htdsOperStatusTable.setStatus('mandatory')
htdsOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsIndex"))
if mibBuilder.loadTexts: htdsOperStatusEntry.setStatus('mandatory')
htdsSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsSnmpOperStatus.setStatus('mandatory')
htdsStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 13), )
if mibBuilder.loadTexts: htdsStateTable.setStatus('mandatory')
htdsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsIndex"))
if mibBuilder.loadTexts: htdsStateEntry.setStatus('mandatory')
htdsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsAdminState.setStatus('mandatory')
htdsOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsOperationalState.setStatus('mandatory')
htdsUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsUsageState.setStatus('mandatory')
htdsAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 13, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsAvailabilityStatus.setStatus('mandatory')
htdsProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 13, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsProceduralStatus.setStatus('mandatory')
htdsControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 13, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsControlStatus.setStatus('mandatory')
htdsAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 13, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsAlarmStatus.setStatus('mandatory')
htdsStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsStandbyStatus.setStatus('mandatory')
htdsUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsUnknownStatus.setStatus('mandatory')
htdsFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2))
htdsFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 1), )
if mibBuilder.loadTexts: htdsFramerRowStatusTable.setStatus('mandatory')
htdsFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsIndex"), (0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsFramerIndex"))
if mibBuilder.loadTexts: htdsFramerRowStatusEntry.setStatus('mandatory')
htdsFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsFramerRowStatus.setStatus('mandatory')
htdsFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsFramerComponentName.setStatus('mandatory')
htdsFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsFramerStorageType.setStatus('mandatory')
htdsFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: htdsFramerIndex.setStatus('mandatory')
htdsFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 10), )
if mibBuilder.loadTexts: htdsFramerProvTable.setStatus('mandatory')
htdsFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsIndex"), (0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsFramerIndex"))
if mibBuilder.loadTexts: htdsFramerProvEntry.setStatus('mandatory')
htdsFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsFramerInterfaceName.setStatus('mandatory')
htdsFramerLinkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 11), )
if mibBuilder.loadTexts: htdsFramerLinkTable.setStatus('mandatory')
htdsFramerLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsIndex"), (0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsFramerIndex"))
if mibBuilder.loadTexts: htdsFramerLinkEntry.setStatus('mandatory')
htdsFramerDataInversion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 16))).clone(namedValues=NamedValues(("off", 0), ("on", 16))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsFramerDataInversion.setStatus('mandatory')
htdsFramerNonOctetData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsFramerNonOctetData.setStatus('mandatory')
htdsFramerFrameCrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("crc16", 0), ("crc32", 1), ("noCrc", 2))).clone('crc16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsFramerFrameCrcType.setStatus('mandatory')
htdsFramerFlagsBetweenFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsFramerFlagsBetweenFrames.setStatus('mandatory')
htdsFramerLineSignalTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsFramerLineSignalTransport.setStatus('mandatory')
htdsFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 12), )
if mibBuilder.loadTexts: htdsFramerStateTable.setStatus('mandatory')
htdsFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsIndex"), (0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsFramerIndex"))
if mibBuilder.loadTexts: htdsFramerStateEntry.setStatus('mandatory')
htdsFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsFramerAdminState.setStatus('mandatory')
htdsFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsFramerOperationalState.setStatus('mandatory')
htdsFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsFramerUsageState.setStatus('mandatory')
htdsFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 13), )
if mibBuilder.loadTexts: htdsFramerStatsTable.setStatus('mandatory')
htdsFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsIndex"), (0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsFramerIndex"))
if mibBuilder.loadTexts: htdsFramerStatsEntry.setStatus('mandatory')
htdsFramerFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsFramerFrmToIf.setStatus('mandatory')
htdsFramerFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsFramerFrmFromIf.setStatus('mandatory')
htdsFramerOctetFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsFramerOctetFromIf.setStatus('mandatory')
htdsFramerAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsFramerAborts.setStatus('mandatory')
htdsFramerCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsFramerCrcErrors.setStatus('mandatory')
htdsFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsFramerLrcErrors.setStatus('mandatory')
htdsFramerNonOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsFramerNonOctetErrors.setStatus('mandatory')
htdsFramerOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsFramerOverruns.setStatus('mandatory')
htdsFramerUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsFramerUnderruns.setStatus('mandatory')
htdsFramerLargeFrmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsFramerLargeFrmErrors.setStatus('mandatory')
htdsFramerUtilTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 14), )
if mibBuilder.loadTexts: htdsFramerUtilTable.setStatus('mandatory')
htdsFramerUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsIndex"), (0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsFramerIndex"))
if mibBuilder.loadTexts: htdsFramerUtilEntry.setStatus('mandatory')
htdsFramerNormPrioLinkUtilToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 14, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsFramerNormPrioLinkUtilToIf.setStatus('mandatory')
htdsFramerNormPrioLinkUtilFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 2, 14, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsFramerNormPrioLinkUtilFromIf.setStatus('mandatory')
htdsPlc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3))
htdsPlcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 1), )
if mibBuilder.loadTexts: htdsPlcRowStatusTable.setStatus('mandatory')
htdsPlcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsIndex"), (0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsPlcIndex"))
if mibBuilder.loadTexts: htdsPlcRowStatusEntry.setStatus('mandatory')
htdsPlcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsPlcRowStatus.setStatus('mandatory')
htdsPlcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsPlcComponentName.setStatus('mandatory')
htdsPlcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsPlcStorageType.setStatus('mandatory')
htdsPlcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: htdsPlcIndex.setStatus('mandatory')
htdsPlcProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10), )
if mibBuilder.loadTexts: htdsPlcProvTable.setStatus('mandatory')
htdsPlcProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsIndex"), (0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsPlcIndex"))
if mibBuilder.loadTexts: htdsPlcProvEntry.setStatus('mandatory')
htdsPlcRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsPlcRemoteName.setStatus('mandatory')
htdsPlcSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsPlcSetupPriority.setStatus('mandatory')
htdsPlcHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsPlcHoldingPriority.setStatus('mandatory')
htdsPlcRequiredTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsPlcRequiredTxBandwidth.setStatus('mandatory')
htdsPlcRequiredRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsPlcRequiredRxBandwidth.setStatus('mandatory')
htdsPlcRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7))).clone('data')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsPlcRequiredTrafficType.setStatus('mandatory')
htdsPlcPermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f8")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsPlcPermittedTrunkTypes.setStatus('mandatory')
htdsPlcRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsPlcRequiredSecurity.setStatus('mandatory')
htdsPlcRequiredCustomerParm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsPlcRequiredCustomerParm.setStatus('mandatory')
htdsPlcPathAttributeToMinimize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cost", 0), ("delay", 1))).clone('cost')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsPlcPathAttributeToMinimize.setStatus('mandatory')
htdsPlcMaximumAcceptableCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1280)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsPlcMaximumAcceptableCost.setStatus('mandatory')
htdsPlcMaximumAcceptableDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(100000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsPlcMaximumAcceptableDelay.setStatus('mandatory')
htdsPlcEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsPlcEmissionPriority.setStatus('mandatory')
htdsPlcDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsPlcDiscardPriority.setStatus('mandatory')
htdsPlcPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("manual", 1), ("forced", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsPlcPathType.setStatus('mandatory')
htdsPlcPathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1))).clone('reRoutePath')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsPlcPathFailureAction.setStatus('mandatory')
htdsPlcBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1))).clone('bumpWhenNecessary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsPlcBumpPreference.setStatus('mandatory')
htdsPlcOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsPlcOptimization.setStatus('mandatory')
htdsPlcMpathTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 265), )
if mibBuilder.loadTexts: htdsPlcMpathTable.setStatus('mandatory')
htdsPlcMpathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 265, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsIndex"), (0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsPlcIndex"), (0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsPlcMpathIndex"))
if mibBuilder.loadTexts: htdsPlcMpathEntry.setStatus('mandatory')
htdsPlcMpathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 265, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: htdsPlcMpathIndex.setStatus('mandatory')
htdsPlcMpathValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 3, 265, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsPlcMpathValue.setStatus('mandatory')
htdsLCo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4))
htdsLCoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 1), )
if mibBuilder.loadTexts: htdsLCoRowStatusTable.setStatus('mandatory')
htdsLCoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsIndex"), (0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsLCoIndex"))
if mibBuilder.loadTexts: htdsLCoRowStatusEntry.setStatus('mandatory')
htdsLCoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoRowStatus.setStatus('mandatory')
htdsLCoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoComponentName.setStatus('mandatory')
htdsLCoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoStorageType.setStatus('mandatory')
htdsLCoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: htdsLCoIndex.setStatus('mandatory')
htdsLCoPathDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10), )
if mibBuilder.loadTexts: htdsLCoPathDataTable.setStatus('mandatory')
htdsLCoPathDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsIndex"), (0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsLCoIndex"))
if mibBuilder.loadTexts: htdsLCoPathDataEntry.setStatus('mandatory')
htdsLCoState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("pathDown", 0), ("selectingRoute", 1), ("connecting", 2), ("pathUp", 3), ("pathDownRetrying", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoState.setStatus('mandatory')
htdsLCoOverrideRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: htdsLCoOverrideRemoteName.setStatus('mandatory')
htdsLCoEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("calling", 0), ("called", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoEnd.setStatus('mandatory')
htdsLCoCostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoCostMetric.setStatus('mandatory')
htdsLCoDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoDelayMetric.setStatus('mandatory')
htdsLCoRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoRoundTripDelay.setStatus('mandatory')
htdsLCoSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoSetupPriority.setStatus('mandatory')
htdsLCoHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoHoldingPriority.setStatus('mandatory')
htdsLCoRequiredTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoRequiredTxBandwidth.setStatus('mandatory')
htdsLCoRequiredRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoRequiredRxBandwidth.setStatus('mandatory')
htdsLCoRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoRequiredTrafficType.setStatus('mandatory')
htdsLCoPermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoPermittedTrunkTypes.setStatus('mandatory')
htdsLCoRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoRequiredSecurity.setStatus('mandatory')
htdsLCoRequiredCustomerParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoRequiredCustomerParameter.setStatus('mandatory')
htdsLCoEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoEmissionPriority.setStatus('mandatory')
htdsLCoDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoDiscardPriority.setStatus('mandatory')
htdsLCoPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("manual", 1), ("forced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoPathType.setStatus('mandatory')
htdsLCoRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoRetryCount.setStatus('mandatory')
htdsLCoPathFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoPathFailureCount.setStatus('mandatory')
htdsLCoReasonForNoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("destinationNameTooLong", 1), ("destinationNotSpecified", 2), ("unknownDestinationName", 3), ("incorrectDestination", 4), ("incorrectDestinationEndPoint", 5), ("unknownSource", 6), ("unknownDestination", 7), ("sameNode", 8), ("routeCostTooMuch", 9), ("routesDelayTooLong", 10), ("attributesNotMet", 11), ("anError", 12), ("attributeProfileProblem", 13), ("manualPathIndexProblem", 14))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoReasonForNoRoute.setStatus('mandatory')
htdsLCoLastTearDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("none", 0), ("normalShutDown", 1), ("insufficientTxLcOrBandwidth", 2), ("insufficientRxLcOrBandwidth", 3), ("trunkFailure", 4), ("trunkCardFailure", 5), ("operatorForced", 6), ("lostLcnClash", 7), ("networkCongestion", 8), ("trunkNotFound", 9), ("farEndNotFound", 10), ("wrongModuleReached", 11), ("farEndBusy", 12), ("callLoopedBack", 13), ("unknownReason", 14), ("farEndNotReady", 15), ("remoteNameMismatch", 16), ("serviceTypeMismatch", 17), ("reconnectFromFarEnd", 18), ("bumped", 19), ("accessCardFailure", 20), ("optimized", 21), ("overrideRemoteName", 22), ("trunkOrFarEndDidNotSupportMode", 23))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoLastTearDownReason.setStatus('mandatory')
htdsLCoPathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoPathFailureAction.setStatus('mandatory')
htdsLCoBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoBumpPreference.setStatus('mandatory')
htdsLCoOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoOptimization.setStatus('mandatory')
htdsLCoPathUpDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 10, 1, 25), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoPathUpDateTime.setStatus('mandatory')
htdsLCoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 11), )
if mibBuilder.loadTexts: htdsLCoStatsTable.setStatus('mandatory')
htdsLCoStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsIndex"), (0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsLCoIndex"))
if mibBuilder.loadTexts: htdsLCoStatsEntry.setStatus('mandatory')
htdsLCoPktsToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 11, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoPktsToNetwork.setStatus('mandatory')
htdsLCoBytesToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 11, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoBytesToNetwork.setStatus('mandatory')
htdsLCoPktsFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 11, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoPktsFromNetwork.setStatus('mandatory')
htdsLCoBytesFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoBytesFromNetwork.setStatus('mandatory')
htdsLCoPathTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 264), )
if mibBuilder.loadTexts: htdsLCoPathTable.setStatus('mandatory')
htdsLCoPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 264, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsIndex"), (0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsLCoIndex"), (0, "Nortel-Magellan-Passport-HdlcTransparentMIB", "htdsLCoPathValue"))
if mibBuilder.loadTexts: htdsLCoPathEntry.setStatus('mandatory')
htdsLCoPathValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 82, 4, 264, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: htdsLCoPathValue.setStatus('mandatory')
hdlcTransparentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 47, 1))
hdlcTransparentGroupBC = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 47, 1, 3))
hdlcTransparentGroupBC03 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 47, 1, 3, 4))
hdlcTransparentGroupBC03A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 47, 1, 3, 4, 2))
hdlcTransparentCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 47, 3))
hdlcTransparentCapabilitiesBC = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 47, 3, 3))
hdlcTransparentCapabilitiesBC03 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 47, 3, 3, 4))
hdlcTransparentCapabilitiesBC03A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 47, 3, 3, 4, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-HdlcTransparentMIB", htdsAvailabilityStatus=htdsAvailabilityStatus, htdsIfIndex=htdsIfIndex, htdsFramerUtilEntry=htdsFramerUtilEntry, htdsLCoSetupPriority=htdsLCoSetupPriority, htdsPlcSetupPriority=htdsPlcSetupPriority, htdsFramerLargeFrmErrors=htdsFramerLargeFrmErrors, htdsPlcProvEntry=htdsPlcProvEntry, htdsLCoRowStatus=htdsLCoRowStatus, htdsLCoPathFailureAction=htdsLCoPathFailureAction, htds=htds, htdsLCoPermittedTrunkTypes=htdsLCoPermittedTrunkTypes, htdsFramerProvEntry=htdsFramerProvEntry, htdsFramerStatsEntry=htdsFramerStatsEntry, htdsPlcIndex=htdsPlcIndex, htdsPlcHoldingPriority=htdsPlcHoldingPriority, htdsLCoStatsEntry=htdsLCoStatsEntry, htdsFramerLrcErrors=htdsFramerLrcErrors, htdsLCoReasonForNoRoute=htdsLCoReasonForNoRoute, htdsFramerAborts=htdsFramerAborts, htdsLCoPathType=htdsLCoPathType, hdlcTransparentCapabilitiesBC03A=hdlcTransparentCapabilitiesBC03A, htdsLCoComponentName=htdsLCoComponentName, htdsFramerStatsTable=htdsFramerStatsTable, htdsStateEntry=htdsStateEntry, htdsOperationalState=htdsOperationalState, htdsLCoPathValue=htdsLCoPathValue, htdsFramerNonOctetErrors=htdsFramerNonOctetErrors, htdsFramerOverruns=htdsFramerOverruns, htdsLCoRequiredSecurity=htdsLCoRequiredSecurity, htdsPlcPathAttributeToMinimize=htdsPlcPathAttributeToMinimize, htdsFramerFrameCrcType=htdsFramerFrameCrcType, htdsRowStatusTable=htdsRowStatusTable, htdsOperStatusTable=htdsOperStatusTable, htdsFramerStorageType=htdsFramerStorageType, htdsProceduralStatus=htdsProceduralStatus, htdsFramer=htdsFramer, htdsPlcRowStatusEntry=htdsPlcRowStatusEntry, htdsLCoRequiredRxBandwidth=htdsLCoRequiredRxBandwidth, htdsCustomerIdentifier=htdsCustomerIdentifier, htdsLCoBytesFromNetwork=htdsLCoBytesFromNetwork, htdsCidDataEntry=htdsCidDataEntry, htdsAlarmStatus=htdsAlarmStatus, htdsFramerRowStatusTable=htdsFramerRowStatusTable, htdsLCoPathUpDateTime=htdsLCoPathUpDateTime, htdsLCoRequiredTrafficType=htdsLCoRequiredTrafficType, htdsPlcDiscardPriority=htdsPlcDiscardPriority, htdsPlcRequiredTxBandwidth=htdsPlcRequiredTxBandwidth, htdsLCoEnd=htdsLCoEnd, hdlcTransparentGroupBC=hdlcTransparentGroupBC, htdsPlcRowStatusTable=htdsPlcRowStatusTable, htdsLCoRetryCount=htdsLCoRetryCount, htdsLCoRequiredTxBandwidth=htdsLCoRequiredTxBandwidth, htdsStandbyStatus=htdsStandbyStatus, hdlcTransparentGroupBC03A=hdlcTransparentGroupBC03A, htdsLCoPathFailureCount=htdsLCoPathFailureCount, htdsFramerAdminState=htdsFramerAdminState, htdsFramerLinkTable=htdsFramerLinkTable, hdlcTransparentMIB=hdlcTransparentMIB, htdsLCoHoldingPriority=htdsLCoHoldingPriority, hdlcTransparentCapabilities=hdlcTransparentCapabilities, htdsPlcMpathIndex=htdsPlcMpathIndex, htdsUsageState=htdsUsageState, htdsLCoIndex=htdsLCoIndex, htdsPlcOptimization=htdsPlcOptimization, htdsStorageType=htdsStorageType, htdsRowStatusEntry=htdsRowStatusEntry, htdsFramerComponentName=htdsFramerComponentName, htdsRowStatus=htdsRowStatus, htdsPlcComponentName=htdsPlcComponentName, htdsLCoLastTearDownReason=htdsLCoLastTearDownReason, htdsLCoPathTable=htdsLCoPathTable, htdsLCoState=htdsLCoState, htdsFramerIndex=htdsFramerIndex, htdsLCoPktsToNetwork=htdsLCoPktsToNetwork, htdsOperStatusEntry=htdsOperStatusEntry, htdsFramerDataInversion=htdsFramerDataInversion, htdsLCoRowStatusEntry=htdsLCoRowStatusEntry, htdsPlcPathFailureAction=htdsPlcPathFailureAction, htdsPlcRequiredRxBandwidth=htdsPlcRequiredRxBandwidth, hdlcTransparentGroup=hdlcTransparentGroup, htdsFramerOctetFromIf=htdsFramerOctetFromIf, htdsLCoPathDataTable=htdsLCoPathDataTable, htdsComponentName=htdsComponentName, htdsFramerRowStatusEntry=htdsFramerRowStatusEntry, htdsLCoCostMetric=htdsLCoCostMetric, htdsLCoDiscardPriority=htdsLCoDiscardPriority, htdsPlc=htdsPlc, htdsPlcStorageType=htdsPlcStorageType, htdsPlcMpathTable=htdsPlcMpathTable, htdsIfAdminStatus=htdsIfAdminStatus, htdsLCoRequiredCustomerParameter=htdsLCoRequiredCustomerParameter, htdsPlcMpathValue=htdsPlcMpathValue, htdsStateTable=htdsStateTable, htdsFramerStateEntry=htdsFramerStateEntry, htdsPlcRequiredTrafficType=htdsPlcRequiredTrafficType, htdsFramerFrmToIf=htdsFramerFrmToIf, htdsFramerLineSignalTransport=htdsFramerLineSignalTransport, htdsLCoStorageType=htdsLCoStorageType, htdsSnmpOperStatus=htdsSnmpOperStatus, htdsFramerUsageState=htdsFramerUsageState, htdsFramerUtilTable=htdsFramerUtilTable, htdsPlcRequiredSecurity=htdsPlcRequiredSecurity, htdsLCoBytesToNetwork=htdsLCoBytesToNetwork, htdsLCoPathDataEntry=htdsLCoPathDataEntry, htdsFramerFrmFromIf=htdsFramerFrmFromIf, htdsFramerOperationalState=htdsFramerOperationalState, htdsPlcPathType=htdsPlcPathType, htdsLCoOverrideRemoteName=htdsLCoOverrideRemoteName, htdsFramerNonOctetData=htdsFramerNonOctetData, htdsPlcRequiredCustomerParm=htdsPlcRequiredCustomerParm, htdsLCoPktsFromNetwork=htdsLCoPktsFromNetwork, htdsFramerFlagsBetweenFrames=htdsFramerFlagsBetweenFrames, htdsPlcRemoteName=htdsPlcRemoteName, htdsFramerProvTable=htdsFramerProvTable, htdsLCoDelayMetric=htdsLCoDelayMetric, hdlcTransparentCapabilitiesBC=hdlcTransparentCapabilitiesBC, htdsFramerCrcErrors=htdsFramerCrcErrors, htdsPlcRowStatus=htdsPlcRowStatus, htdsPlcMaximumAcceptableCost=htdsPlcMaximumAcceptableCost, htdsFramerNormPrioLinkUtilToIf=htdsFramerNormPrioLinkUtilToIf, hdlcTransparentCapabilitiesBC03=hdlcTransparentCapabilitiesBC03, htdsLCoRowStatusTable=htdsLCoRowStatusTable, htdsFramerNormPrioLinkUtilFromIf=htdsFramerNormPrioLinkUtilFromIf, htdsFramerLinkEntry=htdsFramerLinkEntry, htdsPlcEmissionPriority=htdsPlcEmissionPriority, htdsFramerStateTable=htdsFramerStateTable, htdsPlcPermittedTrunkTypes=htdsPlcPermittedTrunkTypes, htdsCidDataTable=htdsCidDataTable, htdsIfEntryTable=htdsIfEntryTable, htdsPlcMaximumAcceptableDelay=htdsPlcMaximumAcceptableDelay, htdsLCoStatsTable=htdsLCoStatsTable, hdlcTransparentGroupBC03=hdlcTransparentGroupBC03, htdsPlcMpathEntry=htdsPlcMpathEntry, htdsIfEntryEntry=htdsIfEntryEntry, htdsPlcProvTable=htdsPlcProvTable, htdsLCo=htdsLCo, htdsUnknownStatus=htdsUnknownStatus, htdsLCoBumpPreference=htdsLCoBumpPreference, htdsPlcBumpPreference=htdsPlcBumpPreference, htdsFramerUnderruns=htdsFramerUnderruns, htdsLCoPathEntry=htdsLCoPathEntry, htdsAdminState=htdsAdminState, htdsFramerRowStatus=htdsFramerRowStatus, htdsFramerInterfaceName=htdsFramerInterfaceName, htdsLCoRoundTripDelay=htdsLCoRoundTripDelay, htdsLCoEmissionPriority=htdsLCoEmissionPriority, htdsIndex=htdsIndex, htdsControlStatus=htdsControlStatus, htdsLCoOptimization=htdsLCoOptimization)
