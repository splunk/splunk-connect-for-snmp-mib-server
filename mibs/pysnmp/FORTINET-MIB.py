#
# PySNMP MIB module FORTINET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FORTINET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:01:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Bits, TimeTicks, Unsigned32, IpAddress, NotificationType, Integer32, Gauge32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, Counter64, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "TimeTicks", "Unsigned32", "IpAddress", "NotificationType", "Integer32", "Gauge32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "Counter64", "MibIdentifier", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class AuthAlgorithm(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("null", 1), ("md5", 2), ("sha1", 3), ("aes128", 4), ("aes192", 5), ("aes256", 6))

class EncrytionAlgorithm(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("null", 1), ("des", 2), ("tripleDes", 3), ("aes128", 4), ("aes192", 5), ("aes256", 6))

class LanguageCode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("western", 1), ("simplifiedChinese", 2), ("traditionalChinese", 3), ("japanese", 4), ("kerean", 5), ("default", 6))

class ItemState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

fortinet = MibIdentifier((1, 3, 6, 1, 4, 1, 12356))
fnSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1))
fnFirewall = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2))
fnUser = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 3))
fnVpn = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 4))
fnNIDS = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 5))
fnAntiVirus = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 6))
fnWebFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 7))
fnAntiSpam = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 8))
fnLogAndRpt = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9))
fortinetTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 10))
fortinetProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15))
fortigateGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 1))
fortigate50 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 50))
fortigate60 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 60))
fortigate100 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 100))
fortigate200 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 200))
fortigate300 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 300))
fortigate400 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 400))
fortigate420 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 420))
fortigate500 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 500))
fortigate1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 1000))
fortigate2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 2000))
fortigate3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 3000))
fortigate3600 = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15, 3600))
fnSysStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 1))
fnSysUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 2))
fnSysNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 3))
fnSysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 4))
fnSysSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 5))
fnFirewallPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2, 1))
fnFirewallAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2, 2))
fnFirewallService = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2, 3))
fnFirewallSchedule = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2, 4))
fnFirewallVirtualIP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2, 5))
fnFirewallIpPool = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2, 6))
fnFirewallIPMACBinding = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2, 7))
fnFirewallContProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2, 8))
fnUserLocalTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 3, 1), )
if mibBuilder.loadTexts: fnUserLocalTable.setStatus('mandatory')
fnUserLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 3, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnUserLocalIndex"))
if mibBuilder.loadTexts: fnUserLocalEntry.setStatus('mandatory')
fnUserLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserLocalIndex.setStatus('mandatory')
fnUserLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserLocalName.setStatus('mandatory')
fnUserLocalPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserLocalPasswd.setStatus('mandatory')
fnUserLocalState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 1, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserLocalState.setStatus('mandatory')
fnUserLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("radius", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserLocalType.setStatus('mandatory')
fnUserLocalRadiusSrv = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserLocalRadiusSrv.setStatus('mandatory')
fnUserLocalRadiusOther = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 1, 1, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserLocalRadiusOther.setStatus('mandatory')
fnUserRadiusSrvTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 3, 2), )
if mibBuilder.loadTexts: fnUserRadiusSrvTable.setStatus('mandatory')
fnUserRadiusSrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 3, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnUserRadIndex"))
if mibBuilder.loadTexts: fnUserRadiusSrvEntry.setStatus('mandatory')
fnUserRadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnUserRadIndex.setStatus('mandatory')
fnUserRadName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserRadName.setStatus('mandatory')
fnUserRadAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserRadAddr.setStatus('mandatory')
fnUserRadSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserRadSecret.setStatus('mandatory')
fnUserGrpTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 3, 3), )
if mibBuilder.loadTexts: fnUserGrpTable.setStatus('mandatory')
fnUserGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 3, 3, 1), ).setIndexNames((0, "FORTINET-MIB", "fnUserGrpIndex"))
if mibBuilder.loadTexts: fnUserGrpEntry.setStatus('mandatory')
fnUserGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnUserGrpIndex.setStatus('mandatory')
fnUserGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserGrpName.setStatus('mandatory')
fnUserGrpMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserGrpMembers.setStatus('mandatory')
fnVpnIPSEC = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 4, 1))
fnVpnPPTP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 4, 2))
fnVpnL2TP = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 4, 3))
fnVpnCert = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 4, 4))
fnNidsDetection = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 5, 1))
fnNidsPrevention = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 5, 2))
fnNidsResponse = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 5, 3))
fnAvFileBlock = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 6, 1))
fnAvQuatantine = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 6, 2))
fnAVConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 6, 3))
fnWebFilterBWords = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 7, 1))
fnWebFilterUrlBlk = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 7, 2))
fnWebFilterScripts = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 7, 3))
fnWebFilterExemptUrl = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 7, 4))
fnWebFilterCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 7, 5))
fnWfCfgMsgTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 7, 5, 1), )
if mibBuilder.loadTexts: fnWfCfgMsgTable.setStatus('mandatory')
fnWfCfgMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 7, 5, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnWfCfgMsgIndex"))
if mibBuilder.loadTexts: fnWfCfgMsgEntry.setStatus('mandatory')
fnWfCfgMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnWfCfgMsgIndex.setStatus('mandatory')
fnWfCfgMsgName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWfCfgMsgName.setStatus('mandatory')
fnWfCfgMsgService = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWfCfgMsgService.setStatus('mandatory')
fnWfCfgMsgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWfCfgMsgDescription.setStatus('mandatory')
fnAntiSpamBlkTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 8, 1), )
if mibBuilder.loadTexts: fnAntiSpamBlkTable.setStatus('mandatory')
fnAntiSpamBlkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 8, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnAntiSpamBlkIndex"))
if mibBuilder.loadTexts: fnAntiSpamBlkEntry.setStatus('mandatory')
fnAntiSpamBlkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnAntiSpamBlkIndex.setStatus('mandatory')
fnAntiSpamBlkPat = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAntiSpamBlkPat.setStatus('mandatory')
fnAntiSpamBlkImapState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 1, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAntiSpamBlkImapState.setStatus('mandatory')
fnAntiSpamBlkPop3State = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 1, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAntiSpamBlkPop3State.setStatus('mandatory')
fnAntiSpamExemptTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 8, 2), )
if mibBuilder.loadTexts: fnAntiSpamExemptTable.setStatus('mandatory')
fnAntiSpamExemptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 8, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnAntiSpamExemptIndex"))
if mibBuilder.loadTexts: fnAntiSpamExemptEntry.setStatus('mandatory')
fnAntiSpamExemptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnAntiSpamExemptIndex.setStatus('mandatory')
fnAntiSpamBanWordPat = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAntiSpamBanWordPat.setStatus('mandatory')
fnAntiSpamExemptImapState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 2, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAntiSpamExemptImapState.setStatus('mandatory')
fnAntiSpamExemptPop3State = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 2, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAntiSpamExemptPop3State.setStatus('mandatory')
fnAntiSpamBanWordTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 8, 3), )
if mibBuilder.loadTexts: fnAntiSpamBanWordTable.setStatus('mandatory')
fnAntiSpamBanWordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 8, 3, 1), ).setIndexNames((0, "FORTINET-MIB", "fnAntiSpamBanWordIndex"))
if mibBuilder.loadTexts: fnAntiSpamBanWordEntry.setStatus('mandatory')
fnAntiSpamBanWordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnAntiSpamBanWordIndex.setStatus('mandatory')
fnAntiSpamBanWordImapState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 3, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAntiSpamBanWordImapState.setStatus('mandatory')
fnAntiSpamBanWordPop3State = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 8, 3, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAntiSpamBanWordPop3State.setStatus('mandatory')
fnAntiSpamCfgSubTag = MibScalar((1, 3, 6, 1, 4, 1, 12356, 8, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAntiSpamCfgSubTag.setStatus('mandatory')
fnLogSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 1))
fnLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 2))
fnAlertEmai = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 3))
fnSysStatusOpMode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nat", 1), ("transparent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysStatusOpMode.setStatus('mandatory')
fnSysStatusVersion = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysStatusVersion.setStatus('mandatory')
fnSysStatusAVDBVersion = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysStatusAVDBVersion.setStatus('mandatory')
fnSysStatusNIDSDBVersion = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysStatusNIDSDBVersion.setStatus('mandatory')
fnSysStatusSN = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysStatusSN.setStatus('mandatory')
fnSysMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6))
fnSysUpdateConnStatus1 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdateConnStatus1.setStatus('mandatory')
fnSysUpdateConnStatus2 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdateConnStatus2.setStatus('mandatory')
fnSysUpdatePushUpState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("disallow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdatePushUpState.setStatus('mandatory')
fnSysUpdatePeriodicUpState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdatePeriodicUpState.setStatus('mandatory')
fnSysUpdatePeriodicUpFreq = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("daily", 1), ("weekly", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdatePeriodicUpFreq.setStatus('mandatory')
fnSysUpdatePeriodicUpDay = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdatePeriodicUpDay.setStatus('mandatory')
fnSysUpdatePeriodicUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdatePeriodicUpTime.setStatus('mandatory')
fnSysUpdateVirusDefUpStatus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdateVirusDefUpStatus.setStatus('mandatory')
fnSysUpdateVirusDefUpLast = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdateVirusDefUpLast.setStatus('mandatory')
fnSysUpdateIdsUpStatus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdateIdsUpStatus.setStatus('mandatory')
fnSysUpdateIdsUpLast = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdateIdsUpLast.setStatus('mandatory')
fnSysUpdateSpamDefUpStatus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdateSpamDefUpStatus.setStatus('mandatory')
fnSysUpdateSpamDefUpLast = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysUpdateSpamDefUpLast.setStatus('mandatory')
fnSysNetworkIfTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1), )
if mibBuilder.loadTexts: fnSysNetworkIfTable.setStatus('mandatory')
fnSysNetworkIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysNetworkIfIndex"))
if mibBuilder.loadTexts: fnSysNetworkIfEntry.setStatus('mandatory')
fnSysNetworkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfIndex.setStatus('mandatory')
fnSysNetworkIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfName.setStatus('mandatory')
fnSysNetworkIfIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfIp.setStatus('mandatory')
fnSysNetworkIfNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfNetmask.setStatus('mandatory')
fnSysNetworkIfMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfMAC.setStatus('mandatory')
fnSysNetworkIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfSpeed.setStatus('mandatory')
fnSysNetworkIfOutFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfOutFrag.setStatus('mandatory')
fnSysNetworkIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfStatus.setStatus('mandatory')
fnSysNetworkIfAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("dhcp", 2), ("pppoe", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfAddrMode.setStatus('mandatory')
fnSysNetworkIfAccHttps = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 10), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfAccHttps.setStatus('mandatory')
fnSysNetworkIfAccPing = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 11), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfAccPing.setStatus('mandatory')
fnSysNetworkIfAccSsh = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 12), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfAccSsh.setStatus('mandatory')
fnSysNetworkIfAccSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 13), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfAccSnmp.setStatus('mandatory')
fnSysNetworkIfAccHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 14), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfAccHttp.setStatus('mandatory')
fnSysNetworkIfAccTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 15), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfAccTelnet.setStatus('mandatory')
fnSysNetworkIfPingSrvState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 16), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfPingSrvState.setStatus('mandatory')
fnSysNetworkIfPingSrvAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfPingSrvAddr.setStatus('mandatory')
fnSysNetworkIfIp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfIp2.setStatus('mandatory')
fnSysNetworkIfNetmask2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfNetmask2.setStatus('mandatory')
fnSysNetworkIfPingSrvState2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 20), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfPingSrvState2.setStatus('mandatory')
fnSysNetworkIfPingSrvAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 1, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkIfPingSrvAddr2.setStatus('mandatory')
fnSysNetworkVlanTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2), )
if mibBuilder.loadTexts: fnSysNetworkVlanTable.setStatus('mandatory')
fnSysNetworkVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysNetworkVlanIndex"), (0, "FORTINET-MIB", "fnSysNetworkVlanName"))
if mibBuilder.loadTexts: fnSysNetworkVlanEntry.setStatus('mandatory')
fnSysNetworkVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnSysNetworkVlanIndex.setStatus('mandatory')
fnSysNetworkVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: fnSysNetworkVlanName.setStatus('mandatory')
fnSysNetworkVlanIf = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanIf.setStatus('mandatory')
fnSysNetworkVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanId.setStatus('mandatory')
fnSysNetworkVlanIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanIp.setStatus('mandatory')
fnSysNetworkVlanNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanNetmask.setStatus('mandatory')
fnSysNetworkVlanAccHttps = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanAccHttps.setStatus('mandatory')
fnSysNetworkVlanAccPing = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 8), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanAccPing.setStatus('mandatory')
fnSysNetworkVlanAccSsh = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 9), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanAccSsh.setStatus('mandatory')
fnSysNetworkVlanAccSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 10), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanAccSnmp.setStatus('mandatory')
fnSysNetworkVlanAccHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 11), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanAccHttp.setStatus('mandatory')
fnSysNetworkVlanAccTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 2, 1, 12), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkVlanAccTelnet.setStatus('mandatory')
fnSysNetworkAccessTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 3, 3), )
if mibBuilder.loadTexts: fnSysNetworkAccessTable.setStatus('mandatory')
fnSysNetworkAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 3, 3, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysNetworkAccessIfName"))
if mibBuilder.loadTexts: fnSysNetworkAccessEntry.setStatus('mandatory')
fnSysNetworkAccessIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkAccessIfName.setStatus('mandatory')
fnSysNetworkAccessHttps = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 3, 1, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkAccessHttps.setStatus('mandatory')
fnSysNetworkAccessPing = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 3, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkAccessPing.setStatus('mandatory')
fnSysNetworkAccessSsh = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 3, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkAccessSsh.setStatus('mandatory')
fnSysNetworkAccessSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 3, 1, 5), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkAccessSnmp.setStatus('mandatory')
fnSysNetworkAccessHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 3, 1, 6), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkAccessHttp.setStatus('mandatory')
fnSysNetworkAccessTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 3, 1, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkAccessTelnet.setStatus('mandatory')
fnSysNetworkRouting = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4))
fnSysNetworkDhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5))
fnSysZoneTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 3, 6), )
if mibBuilder.loadTexts: fnSysZoneTable.setStatus('mandatory')
fnSysZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 3, 6, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysZoneId"))
if mibBuilder.loadTexts: fnSysZoneEntry.setStatus('mandatory')
fnSysZoneId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnSysZoneId.setStatus('mandatory')
fnSysZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysZoneName.setStatus('mandatory')
fnSysZoneSecLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysZoneSecLevel.setStatus('mandatory')
fnSysZoneBlkTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 6, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysZoneBlkTraffic.setStatus('mandatory')
fnSysZoneLogTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 6, 1, 5), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysZoneLogTraffic.setStatus('mandatory')
fnSysNetworkDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 3, 7))
fnSysConfigTime = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 4, 1))
fnSysConfigOpts = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 4, 2))
fnSysConfigAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 4, 3))
fnSysConfigHA = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 4, 4))
fnSysSnmpGen = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1))
fnSysSnmpv3AccCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2))
fnSysSnmpSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3))
fnSysSnmpViewTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 5, 4), )
if mibBuilder.loadTexts: fnSysSnmpViewTable.setStatus('mandatory')
fnSysSnmpViewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 5, 4, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysSnmpViewName"))
if mibBuilder.loadTexts: fnSysSnmpViewEntry.setStatus('mandatory')
fnSysSnmpViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnSysSnmpViewName.setStatus('mandatory')
fnSysSnmpViewSubtreeOid = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpViewSubtreeOid.setStatus('mandatory')
fnSysSnmpViewMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpViewMask.setStatus('mandatory')
fnSysSnmpViewType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("included", 1), ("excluded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpViewType.setStatus('mandatory')
fnFirewallPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1), )
if mibBuilder.loadTexts: fnFirewallPolicyTable.setStatus('mandatory')
fnFirewallPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallPolicyIndex"))
if mibBuilder.loadTexts: fnFirewallPolicyEntry.setStatus('mandatory')
fnFirewallPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyIndex.setStatus('mandatory')
fnFirewallPolicySrcZone = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicySrcZone.setStatus('mandatory')
fnFirewallPolicyDestZone = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyDestZone.setStatus('mandatory')
fnFirewallPolicySrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicySrcAddr.setStatus('mandatory')
fnFirewallPolicyDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyDestAddr.setStatus('mandatory')
fnFirewallPolicySchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicySchedule.setStatus('mandatory')
fnFirewallPolicyService = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyService.setStatus('mandatory')
fnFirewallPolicyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyAction.setStatus('mandatory')
fnFirewallPolicyNAT = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyNAT.setStatus('mandatory')
fnFirewallPolicyDipPool = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyDipPool.setStatus('mandatory')
fnFirewallPolicyFixPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyFixPort.setStatus('mandatory')
fnFirewallPolicyAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyAuth.setStatus('mandatory')
fnFirewallPolicyVpnTunName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyVpnTunName.setStatus('mandatory')
fnFirewallPolicyVpnAllowIn = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyVpnAllowIn.setStatus('mandatory')
fnFirewallPolicyVpnAllowOut = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyVpnAllowOut.setStatus('mandatory')
fnFirewallPolicyVpnInNat = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyVpnInNat.setStatus('mandatory')
fnFirewallPolicyVpnOutNat = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyVpnOutNat.setStatus('mandatory')
fnFirewallPolicyLog = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyLog.setStatus('mandatory')
fnFirewallPolicyAV = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyAV.setStatus('mandatory')
fnFirewallPolicyGBand = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyGBand.setStatus('mandatory')
fnFirewallPolicyMBand = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyMBand.setStatus('mandatory')
fnFirewallPolicyTrafficPri = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyTrafficPri.setStatus('mandatory')
fnFirewallPolicyProf = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 1, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallPolicyProf.setStatus('mandatory')
fnFirewallAddrTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1), )
if mibBuilder.loadTexts: fnFirewallAddrTable.setStatus('mandatory')
fnFirewallAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallAddrName"))
if mibBuilder.loadTexts: fnFirewallAddrEntry.setStatus('mandatory')
fnFirewallAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallAddrName.setStatus('mandatory')
fnFirewallAddrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallAddrIp.setStatus('mandatory')
fnFirewallAddressNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallAddressNetmask.setStatus('mandatory')
fnFirewallAddrZone = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallAddrZone.setStatus('mandatory')
fnFirewallAddrVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallAddrVlanId.setStatus('mandatory')
fnFirewallAddrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 2, 2), )
if mibBuilder.loadTexts: fnFirewallAddrGrpTable.setStatus('mandatory')
fnFirewallAddrGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 2, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallAddrGrpIndex"), (0, "FORTINET-MIB", "fnFirewallAddrGrpZone"), (0, "FORTINET-MIB", "fnFirewallAddrGrpName"))
if mibBuilder.loadTexts: fnFirewallAddrGrpEntry.setStatus('mandatory')
fnFirewallAddrGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnFirewallAddrGrpIndex.setStatus('mandatory')
fnFirewallAddrGrpZone = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallAddrGrpZone.setStatus('mandatory')
fnFirewallAddrGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: fnFirewallAddrGrpName.setStatus('mandatory')
fnFirewallAddrGrpMems = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25555))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallAddrGrpMems.setStatus('mandatory')
fnFirewallServiceTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1), )
if mibBuilder.loadTexts: fnFirewallServiceTable.setStatus('mandatory')
fnFirewallServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallServiceIndex"))
if mibBuilder.loadTexts: fnFirewallServiceEntry.setStatus('mandatory')
fnFirewallServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceIndex.setStatus('mandatory')
fnFirewallServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceName.setStatus('mandatory')
fnFirewallServiceProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceProto.setStatus('mandatory')
fnFirewallServiceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("used", 1), ("unused", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceUsed.setStatus('mandatory')
fnFirewallServiceSrcPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceSrcPortLow.setStatus('mandatory')
fnFirewallServiceSrcPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceSrcPortHigh.setStatus('mandatory')
fnFirewallServiceDstPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceDstPortLow.setStatus('mandatory')
fnFirewallServiceDstPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceDstPortHigh.setStatus('mandatory')
fnFirewallServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("predefined", 1), ("custom", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceType.setStatus('mandatory')
fnFirewallServiceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 3, 2), )
if mibBuilder.loadTexts: fnFirewallServiceGroupTable.setStatus('mandatory')
fnFirewallServiceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 3, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallServiceGroupIndex"))
if mibBuilder.loadTexts: fnFirewallServiceGroupEntry.setStatus('mandatory')
fnFirewallServiceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceGroupIndex.setStatus('mandatory')
fnFirewallServiceGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceGroupName.setStatus('mandatory')
fnFirewallServiceGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceGroupValue.setStatus('mandatory')
fnFirewallServiceGroupUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("used", 1), ("unused", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallServiceGroupUsed.setStatus('mandatory')
fnFirewallSchOneTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 4, 1), )
if mibBuilder.loadTexts: fnFirewallSchOneTable.setStatus('mandatory')
fnFirewallSchOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 4, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallSchOneIndex"))
if mibBuilder.loadTexts: fnFirewallSchOneEntry.setStatus('mandatory')
fnFirewallSchOneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchOneIndex.setStatus('mandatory')
fnFirewallSchOneName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchOneName.setStatus('mandatory')
fnFirewallSchOneStartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchOneStartDay.setStatus('mandatory')
fnFirewallSchOneStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchOneStartTime.setStatus('mandatory')
fnFirewallSchOneEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchOneEndDay.setStatus('mandatory')
fnFirewallSchOneEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchOneEndTime.setStatus('mandatory')
fnFirewallSchOneUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("used", 1), ("unused", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchOneUsed.setStatus('mandatory')
fnFirewallSchRecurTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 4, 2), )
if mibBuilder.loadTexts: fnFirewallSchRecurTable.setStatus('mandatory')
fnFirewallSchRecurEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 4, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallSchRecurIndex"))
if mibBuilder.loadTexts: fnFirewallSchRecurEntry.setStatus('mandatory')
fnFirewallSchRecurIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchRecurIndex.setStatus('mandatory')
fnFirewallSchRecurName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchRecurName.setStatus('mandatory')
fnFirewallSchRecurWeekdays = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchRecurWeekdays.setStatus('mandatory')
fnFirewallSchRecurStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchRecurStartTime.setStatus('mandatory')
fnFirewallSchRecurEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchRecurEndTime.setStatus('mandatory')
fnFirewallSchRecurUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("used", 1), ("unused", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallSchRecurUsed.setStatus('mandatory')
fnFirewallVIPTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1), )
if mibBuilder.loadTexts: fnFirewallVIPTable.setStatus('mandatory')
fnFirewallVIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallVIPIndex"))
if mibBuilder.loadTexts: fnFirewallVIPEntry.setStatus('mandatory')
fnFirewallVIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallVIPIndex.setStatus('mandatory')
fnFirewallVIPName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallVIPName.setStatus('mandatory')
fnFirewallVIPExtIf = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallVIPExtIf.setStatus('mandatory')
fnFirewallVIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("staticNat", 1), ("portForwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallVIPType.setStatus('mandatory')
fnFirewallVIPExtIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallVIPExtIP.setStatus('mandatory')
fnFirewallVIPExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallVIPExtPort.setStatus('mandatory')
fnFirewallVIPMapIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallVIPMapIP.setStatus('mandatory')
fnFirewallVIPMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallVIPMapPort.setStatus('mandatory')
fnFirewallVIPProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallVIPProto.setStatus('mandatory')
fnFirewallIpPoolTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 6, 1), )
if mibBuilder.loadTexts: fnFirewallIpPoolTable.setStatus('mandatory')
fnFirewallIpPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 6, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallIpPoolIndex"))
if mibBuilder.loadTexts: fnFirewallIpPoolEntry.setStatus('mandatory')
fnFirewallIpPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnFirewallIpPoolIndex.setStatus('mandatory')
fnFirewallIpPoolIf = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIpPoolIf.setStatus('mandatory')
fnFirewallIpPoolStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 6, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIpPoolStartIp.setStatus('mandatory')
fnFirewallIpPoolEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 6, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIpPoolEndIp.setStatus('mandatory')
fnFirewallIPMACBindingTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 7, 1), )
if mibBuilder.loadTexts: fnFirewallIPMACBindingTable.setStatus('mandatory')
fnFirewallIPMACBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 7, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFirewallIPMACIndex"))
if mibBuilder.loadTexts: fnFirewallIPMACBindingEntry.setStatus('mandatory')
fnFirewallIPMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACIndex.setStatus('mandatory')
fnFirewallIPMACName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACName.setStatus('mandatory')
fnFirewallIPMACIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 7, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACIp.setStatus('mandatory')
fnFirewallIPMACMac = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 7, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACMac.setStatus('mandatory')
fnFirewallIPMACState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACState.setStatus('mandatory')
fnFirewallIPMACStatus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACStatus.setStatus('mandatory')
fnFirewallIPMACAction = MibScalar((1, 3, 6, 1, 4, 1, 12356, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("block", 0), ("pass", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACAction.setStatus('mandatory')
fnFirewallIPMACToFw = MibScalar((1, 3, 6, 1, 4, 1, 12356, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACToFw.setStatus('mandatory')
fnFirewallIPMACThruFw = MibScalar((1, 3, 6, 1, 4, 1, 12356, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACThruFw.setStatus('mandatory')
fnFirewallIPMACTraffic = MibScalar((1, 3, 6, 1, 4, 1, 12356, 2, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("block", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFirewallIPMACTraffic.setStatus('mandatory')
fnFwContProfTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1), )
if mibBuilder.loadTexts: fnFwContProfTable.setStatus('mandatory')
fnFwContProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnFwContProfName"))
if mibBuilder.loadTexts: fnFwContProfEntry.setStatus('mandatory')
fnFwContProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: fnFwContProfName.setStatus('mandatory')
fnFwContProfAvScan = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfAvScan.setStatus('mandatory')
fnFwContProfFileBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfFileBlk.setStatus('mandatory')
fnFwContProfQuarantine = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfQuarantine.setStatus('mandatory')
fnFwContProfUrlBlkState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 5), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfUrlBlkState.setStatus('mandatory')
fnFwContProfBannedWordState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 6), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfBannedWordState.setStatus('mandatory')
fnFwContProfRemvScriptState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfRemvScriptState.setStatus('mandatory')
fnFwContProfExptListState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 8), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfExptListState.setStatus('mandatory')
fnFwContProfSpamFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfSpamFilter.setStatus('mandatory')
fnFwContProfSpamBlkList = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfSpamBlkList.setStatus('mandatory')
fnFwContProfSpamExptList = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfSpamExptList.setStatus('mandatory')
fnFwContProfSpamBanWord = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfSpamBanWord.setStatus('mandatory')
fnFwContProfBigFileBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfBigFileBlk.setStatus('mandatory')
fnFwContProfPassFragEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 8, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnFwContProfPassFragEmail.setStatus('mandatory')
fnVpnIKETable = MibTable((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2), )
if mibBuilder.loadTexts: fnVpnIKETable.setStatus('mandatory')
fnVpnIKEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnVpnIKEIndex"))
if mibBuilder.loadTexts: fnVpnIKEEntry.setStatus('mandatory')
fnVpnIKEIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEIndex.setStatus('mandatory')
fnVpnIKEName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEName.setStatus('mandatory')
fnVpnIKEGW1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEGW1.setStatus('mandatory')
fnVpnIKEPh2Encrp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 5), EncrytionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEPh2Encrp1.setStatus('mandatory')
fnVpnIKEPh2Auth1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 6), AuthAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEPh2Auth1.setStatus('mandatory')
fnVpnIKEPh2Encrp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 7), EncrytionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEPh2Encrp2.setStatus('mandatory')
fnVpnIKEPh2Auth2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 8), AuthAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEPh2Auth2.setStatus('mandatory')
fnVpnIKEPh2Encrp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 9), EncrytionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEPh2Encrp3.setStatus('mandatory')
fnVpnIKEPh2Auth3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 10), AuthAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEPh2Auth3.setStatus('mandatory')
fnVpnIKEReplayDet = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 11), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEReplayDet.setStatus('mandatory')
fnVpnIKEPFSState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 12), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEPFSState.setStatus('mandatory')
fnVpnIKEDHGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("group1", 1), ("group2", 2), ("group5", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEDHGrp.setStatus('mandatory')
fnVpnIKEKeylifeType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seconds", 1), ("kbs", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEKeylifeType.setStatus('mandatory')
fnVpnIKEKLifeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(180, 700000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEKLifeSec.setStatus('mandatory')
fnVpnIKEKeylifeKb = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEKeylifeKb.setStatus('mandatory')
fnVpnIKEKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 17), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEKeepAlive.setStatus('mandatory')
fnVpnIKEGW2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEGW2.setStatus('mandatory')
fnVpnIKEGW3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEGW3.setStatus('mandatory')
fnVpnIKEConcentrator = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEConcentrator.setStatus('mandatory')
fnVpnIKEStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKEStatus.setStatus('mandatory')
fnVpnIKETimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnIKETimeout.setStatus('mandatory')
fnVpnManualKeyTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3), )
if mibBuilder.loadTexts: fnVpnManualKeyTable.setStatus('mandatory')
fnVpnManualKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1), ).setIndexNames((0, "FORTINET-MIB", "fnVpnManualKeyIndex"))
if mibBuilder.loadTexts: fnVpnManualKeyEntry.setStatus('mandatory')
fnVpnManualKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnManualKeyIndex.setStatus('mandatory')
fnVpnManualKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnManualKeyName.setStatus('mandatory')
fnVpnManualKeyEngage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnManualKeyEngage.setStatus('mandatory')
fnVpnManualKeyLocalSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnManualKeyLocalSPI.setStatus('mandatory')
fnVpnManualKeyRemoteSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnManualKeyRemoteSPI.setStatus('mandatory')
fnVpnManualKeyRgw = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnManualKeyRgw.setStatus('mandatory')
fnVpnManualKeyReplayDet = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnManualKeyReplayDet.setStatus('mandatory')
fnVpnManualKeyEncrpAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnManualKeyEncrpAlgorithm.setStatus('mandatory')
fnVpnManualKeyConcentrator = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnManualKeyConcentrator.setStatus('mandatory')
fnVpnRemoteGWTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4), )
if mibBuilder.loadTexts: fnVpnRemoteGWTable.setStatus('mandatory')
fnVpnRemoteGWEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1), ).setIndexNames((0, "FORTINET-MIB", "fnVpnRemoteGWIndex"))
if mibBuilder.loadTexts: fnVpnRemoteGWEntry.setStatus('mandatory')
fnVpnRemoteGWIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnVpnRemoteGWIndex.setStatus('mandatory')
fnVpnRemoteGWName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWName.setStatus('mandatory')
fnVpnRemoteGWIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWIp.setStatus('mandatory')
fnVpnRemoteGWMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("aggressive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWMode.setStatus('mandatory')
fnVpnRemoteGWPh1Encrp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 5), EncrytionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPh1Encrp1.setStatus('mandatory')
fnVpnRemoteGWPh1Auth1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 6), AuthAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPh1Auth1.setStatus('mandatory')
fnVpnRemoteGWPh1Encrp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 7), EncrytionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPh1Encrp2.setStatus('mandatory')
fnVpnRemoteGWPh1Auth2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 8), AuthAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPh1Auth2.setStatus('mandatory')
fnVpnRemoteGWPh1Encrp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 9), EncrytionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPh1Encrp3.setStatus('mandatory')
fnVpnRemoteGWPh1Auth3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 10), AuthAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPh1Auth3.setStatus('mandatory')
fnVpnRemoteGWDhGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("group1", 1), ("group2", 2), ("group5", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWDhGrp.setStatus('mandatory')
fnVpnRemoteGWKeylife = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(180, 180000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWKeylife.setStatus('mandatory')
fnVpnRemoteGWPreKey = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPreKey.setStatus('mandatory')
fnVpnRemoteGWLocalID = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWLocalID.setStatus('optional')
fnVpnRemoteGWNatT = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 15), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWNatT.setStatus('mandatory')
fnVpnRemoteGWKAFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWKAFreq.setStatus('mandatory')
fnVpnRemoteGWType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("staticIP", 1), ("dialupUser", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWType.setStatus('mandatory')
fnVpnRemoteGWUserGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWUserGrp.setStatus('mandatory')
fnVpnRemoteGWAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("preshared-key", 1), ("rsa", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWAuthMethod.setStatus('mandatory')
fnVpnRemoteGWCertName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("preshared-key", 1), ("rsa", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWCertName.setStatus('mandatory')
fnVpnRemoteGWPeerOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acceptAnyPeerId", 1), ("acceptThisPeerId", 2), ("acceptPeerIdInGrp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPeerOpt.setStatus('mandatory')
fnVpnRemoteGWPeerGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acceptAnyPeerId", 1), ("acceptThisPeerId", 2), ("acceptPeerIdInGrp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPeerGrpName.setStatus('mandatory')
fnVpnRemoteGWPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWPeerId.setStatus('mandatory')
fnVpnRemoteGWXAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableAsClient", 1), ("enableAsServer", 2), ("diable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWXAuth.setStatus('mandatory')
fnVpnRemoteGWXAuthUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWXAuthUserName.setStatus('mandatory')
fnVpnRemoteGWXAuthPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWXAuthPasswd.setStatus('mandatory')
fnVpnRemoteGWXAuthPap = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pap", 1), ("chap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWXAuthPap.setStatus('mandatory')
fnVpnRemoteGWDeadPeerDet = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 28), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWDeadPeerDet.setStatus('mandatory')
fnVpnRemoteGWDpdIdleWorry = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWDpdIdleWorry.setStatus('mandatory')
fnVpnRemoteGWDpdRetryCound = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWDpdRetryCound.setStatus('mandatory')
fnVpnRemoteGWDpdRetryInt = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWDpdRetryInt.setStatus('mandatory')
fnVpnRemoteGWDpdIdleCleanup = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 4, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnRemoteGWDpdIdleCleanup.setStatus('mandatory')
fnVpnConTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 4, 1, 5), )
if mibBuilder.loadTexts: fnVpnConTable.setStatus('mandatory')
fnVpnConEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 4, 1, 5, 1), ).setIndexNames((0, "FORTINET-MIB", "fnVpnConIndex"))
if mibBuilder.loadTexts: fnVpnConEntry.setStatus('mandatory')
fnVpnConIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnVpnConIndex.setStatus('mandatory')
fnVpnConName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnConName.setStatus('mandatory')
fnVpnConMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnConMembers.setStatus('mandatory')
fnVpnDialupMonTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 4, 1, 6), )
if mibBuilder.loadTexts: fnVpnDialupMonTable.setStatus('mandatory')
fnVpnDialupMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 4, 1, 6, 1), ).setIndexNames((0, "FORTINET-MIB", "fnVpnDialupMonIndex"))
if mibBuilder.loadTexts: fnVpnDialupMonEntry.setStatus('mandatory')
fnVpnDialupMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnVpnDialupMonIndex.setStatus('mandatory')
fnVpnDialupMonRGwName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupMonRGwName.setStatus('mandatory')
fnVpnDialupMonLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupMonLifetime.setStatus('mandatory')
fnVpnDialupMonTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupMonTimeout.setStatus('mandatory')
fnVpnDialupMonProxyIdSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupMonProxyIdSrc.setStatus('mandatory')
fnVpnDialupMonProxyIdDst = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 1, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupMonProxyIdDst.setStatus('mandatory')
fnVpnPPTPStatus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 4, 2, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnPPTPStatus.setStatus('mandatory')
fnVpnPPTPUserGrp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 4, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnPPTPUserGrp.setStatus('mandatory')
fnVpnPPTPStartIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 4, 2, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnPPTPStartIp.setStatus('mandatory')
fnVpnPPTPEndIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 4, 2, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnPPTPEndIp.setStatus('mandatory')
fnVpnL2TPStatus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 4, 3, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnL2TPStatus.setStatus('mandatory')
fnVpnL2TPUserGrp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnL2TPUserGrp.setStatus('mandatory')
fnVpnL2TPStartIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 4, 3, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnL2TPStartIp.setStatus('mandatory')
fnVpnL2TPEndIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 4, 3, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnL2TPEndIp.setStatus('mandatory')
fnVpnCertTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 4, 4, 1), )
if mibBuilder.loadTexts: fnVpnCertTable.setStatus('mandatory')
fnVpnCertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 4, 4, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnVpnCertName"))
if mibBuilder.loadTexts: fnVpnCertEntry.setStatus('mandatory')
fnVpnCertName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)))
if mibBuilder.loadTexts: fnVpnCertName.setStatus('mandatory')
fnVpnCertIssuer = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnCertIssuer.setStatus('mandatory')
fnVpnCertCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnCertCommonName.setStatus('mandatory')
fnVpnCertType = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnCertType.setStatus('mandatory')
fnVpnCertSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnCertSerialNo.setStatus('mandatory')
fnVpnCertExpDate = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnCertExpDate.setStatus('mandatory')
fnVpnCertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("pending", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnCertStatus.setStatus('mandatory')
fnNidsGen = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 5, 1, 1))
fnNidsSigTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 5, 1, 2), )
if mibBuilder.loadTexts: fnNidsSigTable.setStatus('mandatory')
fnNidsSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 5, 1, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnNidsSigGrpName"), (0, "FORTINET-MIB", "fnNidsSigAttackId"))
if mibBuilder.loadTexts: fnNidsSigEntry.setStatus('mandatory')
fnNidsSigGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: fnNidsSigGrpName.setStatus('mandatory')
fnNidsSigAttackId = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnNidsSigAttackId.setStatus('mandatory')
fnNidsSigAttackName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsSigAttackName.setStatus('mandatory')
fnNidsSigAttackRuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 1, 2, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsSigAttackRuleState.setStatus('mandatory')
fnNidsSigUserDefTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 5, 1, 3), )
if mibBuilder.loadTexts: fnNidsSigUserDefTable.setStatus('mandatory')
fnNidsSigUserDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 5, 1, 3, 1), ).setIndexNames((0, "FORTINET-MIB", "fnNidsSigUserDefName"))
if mibBuilder.loadTexts: fnNidsSigUserDefEntry.setStatus('mandatory')
fnNidsSigUserDefName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnNidsSigUserDefName.setStatus('mandatory')
fnNidsSigUserDefSum = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsSigUserDefSum.setStatus('mandatory')
fnNidsSigUserDefProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsSigUserDefProto.setStatus('mandatory')
fnNidsIdpState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 2, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsIdpState.setStatus('mandatory')
fnNidsIdpTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 5, 2, 2), )
if mibBuilder.loadTexts: fnNidsIdpTable.setStatus('mandatory')
fnNidsIdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 5, 2, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnNidsIdpSigName"))
if mibBuilder.loadTexts: fnNidsIdpEntry.setStatus('mandatory')
fnNidsIdpSigName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)))
if mibBuilder.loadTexts: fnNidsIdpSigName.setStatus('mandatory')
fnNidsIdpSigSum = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsIdpSigSum.setStatus('mandatory')
fnNidsIdpSigProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsIdpSigProto.setStatus('mandatory')
fnNidsIdpSigState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 2, 2, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsIdpSigState.setStatus('mandatory')
fnNidsIdpSigThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsIdpSigThreshold.setStatus('mandatory')
fnNidsIdpSigQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsIdpSigQSize.setStatus('mandatory')
fnNidsIdpSigKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 5, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsIdpSigKeepAlive.setStatus('mandatory')
fnNidsRespCfg = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("tcp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsRespCfg.setStatus('mandatory')
fnNidsRespAlertMsg = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("summary", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsRespAlertMsg.setStatus('mandatory')
fnNidsRespAlertSrcAddrState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 3, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsRespAlertSrcAddrState.setStatus('mandatory')
fnNidsRespAlertDstAddrState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 3, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsRespAlertDstAddrState.setStatus('mandatory')
fnNidsRespLogMsg = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("summary", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsRespLogMsg.setStatus('mandatory')
fnNidsRespLogSrcAddrState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 3, 6), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsRespLogSrcAddrState.setStatus('mandatory')
fnNidsRespLogDstAddrState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 3, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsRespLogDstAddrState.setStatus('mandatory')
fnAvFileBlkRuleTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 6, 1, 1), )
if mibBuilder.loadTexts: fnAvFileBlkRuleTable.setStatus('mandatory')
fnAvFileBlkRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 6, 1, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnAvFbRuleIndex"))
if mibBuilder.loadTexts: fnAvFileBlkRuleEntry.setStatus('mandatory')
fnAvFbRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)))
if mibBuilder.loadTexts: fnAvFbRuleIndex.setStatus('mandatory')
fnAvFbRuleFilePat = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvFbRuleFilePat.setStatus('mandatory')
fnAvFbRuleHttpBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 1, 1, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvFbRuleHttpBlk.setStatus('mandatory')
fnAvFbRuleFtpBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 1, 1, 1, 5), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvFbRuleFtpBlk.setStatus('mandatory')
fnAvFbRuleSmtpBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 1, 1, 1, 6), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvFbRuleSmtpBlk.setStatus('mandatory')
fnAvFbRulePop3Blk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 1, 1, 1, 9), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvFbRulePop3Blk.setStatus('mandatory')
fnAvFbRuleImapBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 1, 1, 1, 12), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvFbRuleImapBlk.setStatus('mandatory')
fnAvQuarantineTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1), )
if mibBuilder.loadTexts: fnAvQuarantineTable.setStatus('mandatory')
fnAvQuarantineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnAvQuarIndex"))
if mibBuilder.loadTexts: fnAvQuarantineEntry.setStatus('mandatory')
fnAvQuarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnAvQuarIndex.setStatus('mandatory')
fnAvQuarFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarFileName.setStatus('mandatory')
fnAvQuarTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarTime.setStatus('mandatory')
fnAvQuarService = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarService.setStatus('mandatory')
fnAvQuarStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarStatus.setStatus('mandatory')
fnAvQuarStatusDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarStatusDetail.setStatus('mandatory')
fnAvQuarDc = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarDc.setStatus('mandatory')
fnAvQuarTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarTtl.setStatus('mandatory')
fnAvQuarantineCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2))
fnAVVirusListTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 6, 3, 1), )
if mibBuilder.loadTexts: fnAVVirusListTable.setStatus('mandatory')
fnAVVirusListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 6, 3, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnAvVirusIndex"))
if mibBuilder.loadTexts: fnAVVirusListEntry.setStatus('mandatory')
fnAvVirusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnAvVirusIndex.setStatus('mandatory')
fnAvVirusName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvVirusName.setStatus('mandatory')
fnAvCfgMsgTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 6, 3, 2), )
if mibBuilder.loadTexts: fnAvCfgMsgTable.setStatus('mandatory')
fnAvCfgMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 6, 3, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnAvCfgMsgIndex"))
if mibBuilder.loadTexts: fnAvCfgMsgEntry.setStatus('mandatory')
fnAvCfgMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnAvCfgMsgIndex.setStatus('mandatory')
fnAvCfgMsgName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvCfgMsgName.setStatus('mandatory')
fnAvCfgMsgService = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvCfgMsgService.setStatus('mandatory')
fnAvCfgMsgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 6, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvCfgMsgDescription.setStatus('mandatory')
fnAvCfgBlkFileHttp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvCfgBlkFileHttp.setStatus('mandatory')
fnAvCfgBlkFileFtp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvCfgBlkFileFtp.setStatus('mandatory')
fnAvCfgBlkEmailImap = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvCfgBlkEmailImap.setStatus('mandatory')
fnAvCfgBlkEmailPop3 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvCfgBlkEmailPop3.setStatus('mandatory')
fnAvCfgBlkEmailSmtp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvCfgBlkEmailSmtp.setStatus('mandatory')
fnWebFilterBannedWordsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 7, 1, 1), )
if mibBuilder.loadTexts: fnWebFilterBannedWordsTable.setStatus('mandatory')
fnWebfilterBannedWordsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 7, 1, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnWebFilterBannedWordIndex"))
if mibBuilder.loadTexts: fnWebfilterBannedWordsEntry.setStatus('mandatory')
fnWebFilterBannedWordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnWebFilterBannedWordIndex.setStatus('mandatory')
fnWebFilterBannedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterBannedWords.setStatus('mandatory')
fnWebFilterBannedWordLan = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 1, 1, 1, 3), LanguageCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterBannedWordLan.setStatus('mandatory')
fnWebFilterBannedWordState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 1, 1, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterBannedWordState.setStatus('mandatory')
fnWebFilterUrlBlkState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 7, 2, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterUrlBlkState.setStatus('mandatory')
fnWebFilterUrlBlkTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 7, 2, 2), )
if mibBuilder.loadTexts: fnWebFilterUrlBlkTable.setStatus('mandatory')
fnWebFilterUrlBlkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 7, 2, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnWebFilterUrlBlkIndex"))
if mibBuilder.loadTexts: fnWebFilterUrlBlkEntry.setStatus('mandatory')
fnWebFilterUrlBlkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnWebFilterUrlBlkIndex.setStatus('mandatory')
fnWebFilterUrlPat = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterUrlPat.setStatus('mandatory')
fnWebFilterUrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 2, 2, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterUrlState.setStatus('mandatory')
fnWebFilterApplet = MibScalar((1, 3, 6, 1, 4, 1, 12356, 7, 3, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterApplet.setStatus('mandatory')
fnWebFilterCookie = MibScalar((1, 3, 6, 1, 4, 1, 12356, 7, 3, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterCookie.setStatus('mandatory')
fnWebFilterActiveX = MibScalar((1, 3, 6, 1, 4, 1, 12356, 7, 3, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterActiveX.setStatus('mandatory')
fnWebFilterExemptUrlTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 7, 4, 1), )
if mibBuilder.loadTexts: fnWebFilterExemptUrlTable.setStatus('mandatory')
fnWebFilterExemptUrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 7, 4, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnWebFilterExemptUrlIndex"))
if mibBuilder.loadTexts: fnWebFilterExemptUrlEntry.setStatus('mandatory')
fnWebFilterExemptUrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnWebFilterExemptUrlIndex.setStatus('mandatory')
fnWebFilterExemptUrlPat = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterExemptUrlPat.setStatus('mandatory')
fnWebFilterExemptUrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 7, 4, 1, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnWebFilterExemptUrlState.setStatus('mandatory')
fnLogToRemHostState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogToRemHostState.setStatus('mandatory')
fnLogToRemHostAddr = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogToRemHostAddr.setStatus('mandatory')
fnLogToWebtrendsSrvState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogToWebtrendsSrvState.setStatus('mandatory')
fnLogToWebtrendsSrvAddr = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogToWebtrendsSrvAddr.setStatus('mandatory')
fnLogToLocalState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 5), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogToLocalState.setStatus('mandatory')
fnLogTrafficIntToFw = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 6), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogTrafficIntToFw.setStatus('mandatory')
fnLogTrafficExtToFw = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogTrafficExtToFw.setStatus('mandatory')
fnLogAllEvents = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 8), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogAllEvents.setStatus('mandatory')
fnLogVirusEvents = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 9), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogVirusEvents.setStatus('mandatory')
fnLogIntrusions = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 10), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogIntrusions.setStatus('mandatory')
fnLogToLocalFileSize = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogToLocalFileSize.setStatus('mandatory')
fnLogToLocalTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 12), Integer32().clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogToLocalTime.setStatus('mandatory')
fnLogToLocalOpt = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("overWrite", 1), ("blockTraffic", 2), ("doNotLog", 3))).clone('overWrite')).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogToLocalOpt.setStatus('mandatory')
fnLogSettingFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14))
fnLSTrafficAddrTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15), )
if mibBuilder.loadTexts: fnLSTrafficAddrTable.setStatus('mandatory')
fnLSTrafficAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15, 1), ).setIndexNames((0, "FORTINET-MIB", "fnLSTrafficEntryIndex"))
if mibBuilder.loadTexts: fnLSTrafficAddrEntry.setStatus('mandatory')
fnLSTrafficEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnLSTrafficEntryIndex.setStatus('mandatory')
fnLSTrafficSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficSrcAddr.setStatus('mandatory')
fnLSTrafficSrcNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficSrcNetmask.setStatus('mandatory')
fnLSTrafficSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficSrcPort.setStatus('mandatory')
fnLSTrafficDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficDstAddr.setStatus('mandatory')
fnLSTrafficDstNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficDstNetmask.setStatus('mandatory')
fnLSTrafficDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficDstPort.setStatus('mandatory')
fnLSTrafficProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficProto.setStatus('mandatory')
fnLogHDTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 9, 2, 1), )
if mibBuilder.loadTexts: fnLogHDTable.setStatus('mandatory')
fnLogHDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 9, 2, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnLogHDEntryIndex"))
if mibBuilder.loadTexts: fnLogHDEntry.setStatus('mandatory')
fnLogHDEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnLogHDEntryIndex.setStatus('mandatory')
fnLogHDLastAccTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogHDLastAccTime.setStatus('mandatory')
fnLogHDFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogHDFileSize.setStatus('mandatory')
fnLogHDFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogHDFileName.setStatus('mandatory')
fnLogMemTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 9, 2, 2), )
if mibBuilder.loadTexts: fnLogMemTable.setStatus('mandatory')
fnLogMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 9, 2, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnLogMemEntryIndex"))
if mibBuilder.loadTexts: fnLogMemEntry.setStatus('mandatory')
fnLogMemEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnLogMemEntryIndex.setStatus('mandatory')
fnLogMemDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogMemDetail.setStatus('mandatory')
fnAlertEmaiCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 3, 1))
fnAlertEmailCat = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 3, 2))
fnSysMonCPUUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonCPUUsage.setStatus('mandatory')
fnSysMonCPUIdle = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonCPUIdle.setStatus('mandatory')
fnSysMonCPUInt = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonCPUInt.setStatus('mandatory')
fnSysMonMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonMemUsage.setStatus('mandatory')
fnSysMonUpTime = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonUpTime.setStatus('mandatory')
fnSysMonSessionNum = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonSessionNum.setStatus('mandatory')
fnSysMonConnTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 7), )
if mibBuilder.loadTexts: fnSysMonConnTable.setStatus('mandatory')
fnSysMonConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 7, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysMonConnIndex"))
if mibBuilder.loadTexts: fnSysMonConnEntry.setStatus('mandatory')
fnSysMonConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnSysMonConnIndex.setStatus('mandatory')
fnSysMonConnProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonConnProto.setStatus('mandatory')
fnSysMonConnFromAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonConnFromAddr.setStatus('mandatory')
fnSysMonConnFromPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonConnFromPort.setStatus('mandatory')
fnSysMonConnToAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 7, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonConnToAddr.setStatus('mandatory')
fnSysMonConnToPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonConnToPort.setStatus('mandatory')
fnSysMonConnExp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 1, 6, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMonConnExp.setStatus('mandatory')
fnSysNetworkRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1), )
if mibBuilder.loadTexts: fnSysNetworkRoutingTable.setStatus('mandatory')
fnSysNetworkRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysNetworkRoutingIndex"))
if mibBuilder.loadTexts: fnSysNetworkRoutingEntry.setStatus('mandatory')
fnSysNetworkRoutingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingIndex.setStatus('mandatory')
fnSysNetworkRoutingSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingSrcIP.setStatus('mandatory')
fnSysNetworkRoutingSrcNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingSrcNetmask.setStatus('mandatory')
fnSysNetworkRoutingDstIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingDstIP.setStatus('mandatory')
fnSysNetworkRoutingDstNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingDstNetmask.setStatus('mandatory')
fnSysNetworkRoutingGW1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingGW1.setStatus('mandatory')
fnSysNetworkRoutingGW2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingGW2.setStatus('mandatory')
fnSysNetworkRoutingDev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingDev1.setStatus('mandatory')
fnSysNetworkRoutingDev2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingDev2.setStatus('mandatory')
fnSysNetworkRoutingRIPSrv = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("disable", 2), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingRIPSrv.setStatus('mandatory')
fnSysNetworkRoutingGWTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 4), )
if mibBuilder.loadTexts: fnSysNetworkRoutingGWTable.setStatus('mandatory')
fnSysNetworkRoutingGWEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 4, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysNetworkRoutingGWIndex"))
if mibBuilder.loadTexts: fnSysNetworkRoutingGWEntry.setStatus('mandatory')
fnSysNetworkRoutingGWIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnSysNetworkRoutingGWIndex.setStatus('mandatory')
fnSysNetworkRoutingGWIP = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingGWIP.setStatus('mandatory')
fnSysNetworkRoutingGWDeadDet = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 3, 4, 4, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkRoutingGWDeadDet.setStatus('mandatory')
fnSysNetworkDhcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpStatus.setStatus('mandatory')
fnSysNetworkDhcpSip = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpSip.setStatus('mandatory')
fnSysNetworkDhcpEip = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpEip.setStatus('mandatory')
fnSysNetworkDhcpLeaseDur = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpLeaseDur.setStatus('mandatory')
fnSysNetworkDhcpDomain = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpDomain.setStatus('mandatory')
fnSysNetworkDhcpDNS1 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpDNS1.setStatus('mandatory')
fnSysNetworkDhcpDNS2 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpDNS2.setStatus('mandatory')
fnSysNetworkDhcpDNS3 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpDNS3.setStatus('mandatory')
fnSysNetworkDhcpDefRoute = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpDefRoute.setStatus('mandatory')
fnSysNetworkDhcpExclRange1S = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpExclRange1S.setStatus('mandatory')
fnSysNetworkDhcpExclRange1E = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpExclRange1E.setStatus('mandatory')
fnSysNetworkDhcpExclRange2S = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpExclRange2S.setStatus('mandatory')
fnSysNetworkDhcpExclRange2E = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpExclRange2E.setStatus('mandatory')
fnSysNetworkDhcpExclRange3S = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpExclRange3S.setStatus('mandatory')
fnSysNetworkDhcpExclRange3E = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 5, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDhcpExclRange3E.setStatus('mandatory')
fnSysNetworkDNSPri = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 7, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDNSPri.setStatus('mandatory')
fnSysNetworkDNSSecPri = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3, 7, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysNetworkDNSSecPri.setStatus('mandatory')
fnSysConfigTimeVal = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigTimeVal.setStatus('mandatory')
fnSysConfigTimezone = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigTimezone.setStatus('mandatory')
fnSysConfigTimeDST = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigTimeDST.setStatus('mandatory')
fnSysConfigTimeNTPSrv = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigTimeNTPSrv.setStatus('mandatory')
fnSysConfigTimeNTPInt = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigTimeNTPInt.setStatus('mandatory')
fnSysConfigNTPState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 1, 6), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigNTPState.setStatus('mandatory')
fnSysConfigOptsIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigOptsIdleTimeout.setStatus('mandatory')
fnSysConfigOptsAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigOptsAuthTimeout.setStatus('mandatory')
fnSysConfigOptsLan = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 2, 3), LanguageCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigOptsLan.setStatus('mandatory')
fnSysConfigOptsLcdProt = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 2, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigOptsLcdProt.setStatus('mandatory')
fnSysConfigOptsLcdProtPin = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 2, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigOptsLcdProtPin.setStatus('mandatory')
fnSysConfigAdminUserTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 4, 3, 1), )
if mibBuilder.loadTexts: fnSysConfigAdminUserTable.setStatus('mandatory')
fnSysConfigAdminUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 4, 3, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysConfigAdminUserIndex"))
if mibBuilder.loadTexts: fnSysConfigAdminUserEntry.setStatus('mandatory')
fnSysConfigAdminUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigAdminUserIndex.setStatus('mandatory')
fnSysConfigAdminUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 4, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigAdminUserName.setStatus('mandatory')
fnSysConfigAdminUserIp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 4, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigAdminUserIp.setStatus('mandatory')
fnSysConfigAdminUserNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 4, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigAdminUserNetmask.setStatus('mandatory')
fnSysConfigAdminUserPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 2))).clone(namedValues=NamedValues(("read", 1), ("all", 3), ("readWrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigAdminUserPermission.setStatus('mandatory')
fnSysConfigHAMode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("standalone", 0), ("activeActive", 2), ("activePassive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigHAMode.setStatus('mandatory')
fnSysConfigHAGrpId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigHAGrpId.setStatus('mandatory')
fnSysConfigHAPasswd = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 4, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigHAPasswd.setStatus('mandatory')
fnSysConfigHAMonIf = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigHAMonIf.setStatus('mandatory')
fnSysConfigHASchedule = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("hub", 2), ("leastConn", 3), ("roundRobin", 4), ("weightRoundRobin", 5), ("random", 6), ("ip", 7), ("ipPort", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysConfigHASchedule.setStatus('mandatory')
fnSysSnmpState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpState.setStatus('mandatory')
fnSysSnmpSysName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpSysName.setStatus('mandatory')
fnSysSnmpSysLoc = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpSysLoc.setStatus('mandatory')
fnSysSnmpInfo = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpInfo.setStatus('mandatory')
fnSysSnmpGetCom = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpGetCom.setStatus('mandatory')
fnSysSnmpTrapCom = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpTrapCom.setStatus('mandatory')
fnSysSnmp1stTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmp1stTrapIp.setStatus('mandatory')
fnSysSnmp2ndTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmp2ndTrapIp.setStatus('mandatory')
fnSysSnmp3rdTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmp3rdTrapIp.setStatus('mandatory')
fnSysSnmpv3ACState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpv3ACState.setStatus('mandatory')
fnSysSnmpv3ACTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2), )
if mibBuilder.loadTexts: fnSysSnmpv3ACTable.setStatus('mandatory')
fnSysSnmpv3ACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysSnmpACIndex"))
if mibBuilder.loadTexts: fnSysSnmpv3ACEntry.setStatus('mandatory')
fnSysSnmpACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: fnSysSnmpACIndex.setStatus('mandatory')
fnSysSnmpACGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpACGrpName.setStatus('mandatory')
fnSysSnmpACSecLevelAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpACSecLevelAuth.setStatus('mandatory')
fnSysSnmpACSecLevelPriv = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpACSecLevelPriv.setStatus('mandatory')
fnSysSnmpACContexPre = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpACContexPre.setStatus('mandatory')
fnSysSnmpACContextMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("exact", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpACContextMatch.setStatus('mandatory')
fnSysSnmpACRv = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpACRv.setStatus('mandatory')
fnSysSnmpACWv = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpACWv.setStatus('mandatory')
fnSysSnmpACNv = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 2, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpACNv.setStatus('mandatory')
fnSysSnmpSecUserTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 1), )
if mibBuilder.loadTexts: fnSysSnmpSecUserTable.setStatus('mandatory')
fnSysSnmpSecUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 1, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysSnmpSecUserName"))
if mibBuilder.loadTexts: fnSysSnmpSecUserEntry.setStatus('mandatory')
fnSysSnmpSecUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: fnSysSnmpSecUserName.setStatus('mandatory')
fnSysSnmpSecUserSecLevelAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 1, 1, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpSecUserSecLevelAuth.setStatus('mandatory')
fnSysSnmpSecUserSecLevelPriv = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 1, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpSecUserSecLevelPriv.setStatus('mandatory')
fnSysSnmpSecUserAuthPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpSecUserAuthPasswd.setStatus('mandatory')
fnSysSnmpSecUserAuthProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hmac-md5-96", 1), ("hmac-sha-96", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpSecUserAuthProto.setStatus('mandatory')
fnSysSnmpSecUserPrivPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpSecUserPrivPasswd.setStatus('mandatory')
fnSysSnmpSecGrpTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 2), )
if mibBuilder.loadTexts: fnSysSnmpSecGrpTable.setStatus('mandatory')
fnSysSnmpSecGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 2, 1), ).setIndexNames((0, "FORTINET-MIB", "fnSysSnmpSecGrpName"))
if mibBuilder.loadTexts: fnSysSnmpSecGrpEntry.setStatus('mandatory')
fnSysSnmpSecGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: fnSysSnmpSecGrpName.setStatus('mandatory')
fnSysSnmpSecGrpMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 5, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSnmpSecGrpMembers.setStatus('mandatory')
fnNidsMonIfs = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsMonIfs.setStatus('mandatory')
fnNidsTypeIP = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 1, 1, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsTypeIP.setStatus('mandatory')
fnNidsTypeTcp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 1, 1, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsTypeTcp.setStatus('mandatory')
fnNidsTypeUdp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 1, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsTypeUdp.setStatus('mandatory')
fnNidsTypeIcmp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 5, 1, 1, 5), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNidsTypeIcmp.setStatus('mandatory')
fnAvQuarCfgInfecFileHttp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgInfecFileHttp.setStatus('mandatory')
fnAvQuarCfgInfecFileFtp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgInfecFileFtp.setStatus('mandatory')
fnAvQuarCfgInfecFileImap = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgInfecFileImap.setStatus('mandatory')
fnAvQuarCfgInfecFilePop3 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgInfecFilePop3.setStatus('mandatory')
fnAvQuarCfgInfecFileSmtp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 5), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgInfecFileSmtp.setStatus('mandatory')
fnAvQuarCfgBlkFileHttp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 6), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgBlkFileHttp.setStatus('mandatory')
fnAvQuarCfgBlkFileFtp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgBlkFileFtp.setStatus('mandatory')
fnAvQuarCfgBlkFileImap = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 8), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgBlkFileImap.setStatus('mandatory')
fnAvQuarCfgBlkFilePop3 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 9), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgBlkFilePop3.setStatus('mandatory')
fnAvQuarCfgBlkFileSmtp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 10), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgBlkFileSmtp.setStatus('mandatory')
fnAvQuarCfgAgeLimit = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgAgeLimit.setStatus('mandatory')
fnAvQuarCfgMaxFileSize = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgMaxFileSize.setStatus('mandatory')
fnAvQuarCfgLowDiskOpt = MibScalar((1, 3, 6, 1, 4, 1, 12356, 6, 2, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("overwriteOldestFile", 1), ("dropNewFile", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAvQuarCfgLowDiskOpt.setStatus('mandatory')
fnLogSettingTrafficFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 1))
fnLogSettingEventFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2))
fnLogSettingVirusFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 3))
fnLogSettingWebFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 4))
fnLSIdsFilterState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 5), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSIdsFilterState.setStatus('mandatory')
fnLSFilterSeverity = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("emergency", 2), ("alert", 3), ("critical", 4), ("error", 5), ("warning", 6), ("notification", 7), ("infomation", 8), ("debugging", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSFilterSeverity.setStatus('mandatory')
fnAlertEmaiCfgSmtpSrv = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAlertEmaiCfgSmtpSrv.setStatus('mandatory')
fnAlertEmaiCfgSmtpUser = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAlertEmaiCfgSmtpUser.setStatus('mandatory')
fnAlertEmaiCfgSmtpPasswd = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAlertEmaiCfgSmtpPasswd.setStatus('mandatory')
fnAlertEmaiCfgEmai1 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAlertEmaiCfgEmai1.setStatus('mandatory')
fnAlertEmaiCfgEmail2 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAlertEmaiCfgEmail2.setStatus('mandatory')
fnAlertEmaiCfgEmail3 = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAlertEmaiCfgEmail3.setStatus('mandatory')
fnAlearEmaiCatVirus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 3, 2, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAlearEmaiCatVirus.setStatus('mandatory')
fnAlertEmailCatNids = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 3, 2, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAlertEmailCatNids.setStatus('mandatory')
fnAlearEmailCatCrit = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 3, 2, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAlearEmailCatCrit.setStatus('mandatory')
fnLSTrafficFilterState = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 1, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficFilterState.setStatus('mandatory')
fnLSTrafficFilterType = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficFilterType.setStatus('mandatory')
fnLSTrafficFilterDisplay = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portNumber", 1), ("serviceName", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficFilterDisplay.setStatus('mandatory')
fnLSTrafficFilterResolveIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 1, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSTrafficFilterResolveIp.setStatus('mandatory')
fnLSEventFilterCfgChg = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterCfgChg.setStatus('mandatory')
fnLSEventFilterIpsecNeg = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterIpsecNeg.setStatus('mandatory')
fnLSEventFilterDhcpService = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterDhcpService.setStatus('mandatory')
fnLSEventFilterPppoeService = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 4), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterPppoeService.setStatus('mandatory')
fnLSEventFilterAdminLogin = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 5), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterAdminLogin.setStatus('mandatory')
fnLSEventFilterIpmacStatus = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 6), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterIpmacStatus.setStatus('mandatory')
fnLSEventFilterSysAct = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 7), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterSysAct.setStatus('mandatory')
fnLSEventFilterHaAct = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 8), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterHaAct.setStatus('mandatory')
fnLSEventFilterFwAuth = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 9), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterFwAuth.setStatus('mandatory')
fnLSEventFilterGwConn = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 2, 10), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSEventFilterGwConn.setStatus('mandatory')
fnLSVirusFilterDet = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 3, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSVirusFilterDet.setStatus('mandatory')
fnLSVirusFilterSigUpdate = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 3, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSVirusFilterSigUpdate.setStatus('mandatory')
fnLSWebFilterBanDet = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 4, 1), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSWebFilterBanDet.setStatus('mandatory')
fnLSWebFilterScriptDet = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 4, 2), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSWebFilterScriptDet.setStatus('mandatory')
fnLSWebFilterPageBlk = MibScalar((1, 3, 6, 1, 4, 1, 12356, 9, 1, 14, 4, 3), ItemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLSWebFilterPageBlk.setStatus('mandatory')
mibBuilder.exportSymbols("FORTINET-MIB", fnSysMonUpTime=fnSysMonUpTime, fnAntiSpamBanWordTable=fnAntiSpamBanWordTable, fnNidsResponse=fnNidsResponse, fnFirewallPolicyAV=fnFirewallPolicyAV, fnAvFbRuleFtpBlk=fnAvFbRuleFtpBlk, fnWebFilterUrlBlkIndex=fnWebFilterUrlBlkIndex, fnSysNetworkRoutingDstIP=fnSysNetworkRoutingDstIP, fnSysConfigOptsLcdProt=fnSysConfigOptsLcdProt, fnFirewallServiceSrcPortLow=fnFirewallServiceSrcPortLow, fnVpnIKEGW2=fnVpnIKEGW2, fnLSTrafficSrcNetmask=fnLSTrafficSrcNetmask, fnVpnIKEName=fnVpnIKEName, fnFirewallIPMACAction=fnFirewallIPMACAction, fnSysNetworkAccessSsh=fnSysNetworkAccessSsh, fnUserLocalRadiusSrv=fnUserLocalRadiusSrv, fnAvQuarCfgBlkFileImap=fnAvQuarCfgBlkFileImap, fnWfCfgMsgService=fnWfCfgMsgService, fnLogVirusEvents=fnLogVirusEvents, fnVpnRemoteGWName=fnVpnRemoteGWName, fnAvQuarantineTable=fnAvQuarantineTable, fnFirewallAddrGrpMems=fnFirewallAddrGrpMems, fnSysStatusNIDSDBVersion=fnSysStatusNIDSDBVersion, fnUserGrpName=fnUserGrpName, fnNidsIdpSigKeepAlive=fnNidsIdpSigKeepAlive, fnSysSnmpv3ACState=fnSysSnmpv3ACState, fnVpnIKEDHGrp=fnVpnIKEDHGrp, fortigate50=fortigate50, fnFirewallIPMACStatus=fnFirewallIPMACStatus, fnFirewallVIPEntry=fnFirewallVIPEntry, fnLSEventFilterFwAuth=fnLSEventFilterFwAuth, fnSysSnmp=fnSysSnmp, fnNidsSigAttackId=fnNidsSigAttackId, fnAvFbRuleHttpBlk=fnAvFbRuleHttpBlk, fnLogHDEntryIndex=fnLogHDEntryIndex, fnLogSettingTrafficFilter=fnLogSettingTrafficFilter, fnFwContProfSpamBlkList=fnFwContProfSpamBlkList, fnAvQuarCfgLowDiskOpt=fnAvQuarCfgLowDiskOpt, fnSysNetworkVlanAccPing=fnSysNetworkVlanAccPing, fnNidsSigTable=fnNidsSigTable, fnSysSnmp3rdTrapIp=fnSysSnmp3rdTrapIp, fnVpnIKEKeylifeKb=fnVpnIKEKeylifeKb, fnLSTrafficFilterDisplay=fnLSTrafficFilterDisplay, fnSysConfigTimeDST=fnSysConfigTimeDST, fnSysNetworkIfOutFrag=fnSysNetworkIfOutFrag, fnUser=fnUser, fnFirewallServiceGroupName=fnFirewallServiceGroupName, fnSysNetworkDhcpSip=fnSysNetworkDhcpSip, fnSysSnmpSecUserPrivPasswd=fnSysSnmpSecUserPrivPasswd, fnSysSnmpViewName=fnSysSnmpViewName, fnNidsIdpSigState=fnNidsIdpSigState, fnAvCfgMsgName=fnAvCfgMsgName, fnSysNetworkRoutingTable=fnSysNetworkRoutingTable, fnSysNetworkAccessHttp=fnSysNetworkAccessHttp, fnSysConfig=fnSysConfig, fnLogAllEvents=fnLogAllEvents, fnAntiSpamExemptIndex=fnAntiSpamExemptIndex, fnFirewallPolicyMBand=fnFirewallPolicyMBand, fortinetProducts=fortinetProducts, fnSysNetworkVlanEntry=fnSysNetworkVlanEntry, fnSysSnmp1stTrapIp=fnSysSnmp1stTrapIp, fnSysNetworkIfAccHttps=fnSysNetworkIfAccHttps, fnAntiSpamBanWordImapState=fnAntiSpamBanWordImapState, fnFirewallSchRecurTable=fnFirewallSchRecurTable, fnAntiSpamExemptImapState=fnAntiSpamExemptImapState, fnVpnIKEReplayDet=fnVpnIKEReplayDet, fnFirewallServiceSrcPortHigh=fnFirewallServiceSrcPortHigh, fnVpnRemoteGWXAuth=fnVpnRemoteGWXAuth, fnSysNetworkDhcpDNS1=fnSysNetworkDhcpDNS1, fnLogSettingEventFilter=fnLogSettingEventFilter, fnFwContProfAvScan=fnFwContProfAvScan, fnWebFilterBannedWords=fnWebFilterBannedWords, fnSysSnmpACContextMatch=fnSysSnmpACContextMatch, fnSysNetworkRoutingDev2=fnSysNetworkRoutingDev2, fnSysConfigTimeVal=fnSysConfigTimeVal, fnNidsSigAttackRuleState=fnNidsSigAttackRuleState, fnVpnRemoteGWCertName=fnVpnRemoteGWCertName, fnAvQuarantineCfg=fnAvQuarantineCfg, fnSysNetworkVlanAccSnmp=fnSysNetworkVlanAccSnmp, fnWebFilterBannedWordIndex=fnWebFilterBannedWordIndex, fnSysSnmpSecUserSecLevelPriv=fnSysSnmpSecUserSecLevelPriv, fnVpnManualKeyRgw=fnVpnManualKeyRgw, fnSysSnmpInfo=fnSysSnmpInfo, fnLogSettingFilter=fnLogSettingFilter, fortigate60=fortigate60, fnAVConfig=fnAVConfig, fnFirewallPolicyIndex=fnFirewallPolicyIndex, fnVpnCertEntry=fnVpnCertEntry, fnSysMonCPUInt=fnSysMonCPUInt, fnLSTrafficFilterState=fnLSTrafficFilterState, fnVpnIKEPh2Auth3=fnVpnIKEPh2Auth3, fnWebFilterBannedWordState=fnWebFilterBannedWordState, fnSysNetworkVlanAccTelnet=fnSysNetworkVlanAccTelnet, fnUserLocalType=fnUserLocalType, fnLSTrafficFilterType=fnLSTrafficFilterType, fnWebFilterExemptUrl=fnWebFilterExemptUrl, fnAvQuarCfgMaxFileSize=fnAvQuarCfgMaxFileSize, fnFwContProfRemvScriptState=fnFwContProfRemvScriptState, fnLogToLocalState=fnLogToLocalState, fnAlertEmailCatNids=fnAlertEmailCatNids, fnSysNetworkIfSpeed=fnSysNetworkIfSpeed, fnSysNetworkAccessTable=fnSysNetworkAccessTable, fnNidsSigUserDefTable=fnNidsSigUserDefTable, fnSysStatusOpMode=fnSysStatusOpMode, fnLogToWebtrendsSrvState=fnLogToWebtrendsSrvState, fnVpn=fnVpn, fnLogMemEntry=fnLogMemEntry, fnVpnCertTable=fnVpnCertTable, fnLSTrafficEntryIndex=fnLSTrafficEntryIndex, fnFirewallSchRecurEntry=fnFirewallSchRecurEntry, fnSysNetworkIfAccSsh=fnSysNetworkIfAccSsh, fnFirewallPolicyTable=fnFirewallPolicyTable, fnVpnIKETimeout=fnVpnIKETimeout, fnSysNetworkDNSSecPri=fnSysNetworkDNSSecPri, fnFirewallSchRecurIndex=fnFirewallSchRecurIndex, fnFirewallSchOneUsed=fnFirewallSchOneUsed, fnSysNetworkIfPingSrvState=fnSysNetworkIfPingSrvState, fnSysUpdateConnStatus2=fnSysUpdateConnStatus2, fortigate2000=fortigate2000, fnFwContProfEntry=fnFwContProfEntry, fnAntiSpamBanWordIndex=fnAntiSpamBanWordIndex, fnSysNetworkVlanId=fnSysNetworkVlanId, fnSysNetworkIfIp=fnSysNetworkIfIp, fnLSWebFilterBanDet=fnLSWebFilterBanDet, fortigate400=fortigate400, fnFirewallServiceEntry=fnFirewallServiceEntry, fnVpnRemoteGWMode=fnVpnRemoteGWMode, fnNidsIdpSigQSize=fnNidsIdpSigQSize, fnSysMonConnExp=fnSysMonConnExp, fnVpnIKEKLifeSec=fnVpnIKEKLifeSec, fnAntiSpamExemptEntry=fnAntiSpamExemptEntry, fnSysNetworkAccessHttps=fnSysNetworkAccessHttps, fnVpnL2TPStatus=fnVpnL2TPStatus, AuthAlgorithm=AuthAlgorithm, fnLSEventFilterSysAct=fnLSEventFilterSysAct, fnFirewallIPMACIndex=fnFirewallIPMACIndex, fnWebFilterUrlBlkTable=fnWebFilterUrlBlkTable, fnSysUpdatePeriodicUpTime=fnSysUpdatePeriodicUpTime, fnWebFilterExemptUrlEntry=fnWebFilterExemptUrlEntry, fnNidsSigGrpName=fnNidsSigGrpName, fnVpnIKEPh2Encrp3=fnVpnIKEPh2Encrp3, fnWebFilterUrlBlk=fnWebFilterUrlBlk, fnAvFileBlkRuleEntry=fnAvFileBlkRuleEntry, fnAvFileBlkRuleTable=fnAvFileBlkRuleTable, fnAvQuarCfgInfecFileImap=fnAvQuarCfgInfecFileImap, fnLogAndRpt=fnLogAndRpt, fnNidsRespAlertSrcAddrState=fnNidsRespAlertSrcAddrState, fnAntiSpam=fnAntiSpam, fnAntiSpamExemptPop3State=fnAntiSpamExemptPop3State, fnLSTrafficProto=fnLSTrafficProto, fnVpnPPTPStartIp=fnVpnPPTPStartIp, fnLogMemEntryIndex=fnLogMemEntryIndex, fnLogHDTable=fnLogHDTable, fnAlertEmailCat=fnAlertEmailCat, fnNidsTypeUdp=fnNidsTypeUdp, fnVpnL2TPUserGrp=fnVpnL2TPUserGrp, fnSysUpdatePeriodicUpState=fnSysUpdatePeriodicUpState, fnSysNetworkIfAccHttp=fnSysNetworkIfAccHttp, fnVpnRemoteGWPh1Encrp3=fnVpnRemoteGWPh1Encrp3, fnNidsSigAttackName=fnNidsSigAttackName, fnSysNetworkAccessEntry=fnSysNetworkAccessEntry, fnWebFilterBannedWordsTable=fnWebFilterBannedWordsTable, fnAntiSpamBlkIndex=fnAntiSpamBlkIndex, fnFirewallIPMACThruFw=fnFirewallIPMACThruFw, fnNidsIdpSigProto=fnNidsIdpSigProto, fnAntiVirus=fnAntiVirus, fnUserLocalEntry=fnUserLocalEntry, fnLogToLocalTime=fnLogToLocalTime, fnSysSnmpACSecLevelPriv=fnSysSnmpACSecLevelPriv, fnLogHDFileName=fnLogHDFileName, fnSysConfigAdminUserPermission=fnSysConfigAdminUserPermission, fnFirewallServiceTable=fnFirewallServiceTable, fnSysSnmpACGrpName=fnSysSnmpACGrpName, fnFirewallSchRecurEndTime=fnFirewallSchRecurEndTime, fnFirewallPolicyService=fnFirewallPolicyService, fnSysSnmpGen=fnSysSnmpGen, fnSysSnmpSecUserEntry=fnSysSnmpSecUserEntry, fnFirewallIPMACBinding=fnFirewallIPMACBinding, fnLSTrafficSrcAddr=fnLSTrafficSrcAddr, fnSysNetworkDhcpEip=fnSysNetworkDhcpEip, fnUserGrpMembers=fnUserGrpMembers, fnWebFilterCfg=fnWebFilterCfg, fnLogSettingVirusFilter=fnLogSettingVirusFilter, fnLSEventFilterGwConn=fnLSEventFilterGwConn, fnNidsSigEntry=fnNidsSigEntry, fortigate1000=fortigate1000, fnFirewallIPMACMac=fnFirewallIPMACMac, fnSysSnmpv3AccCtrl=fnSysSnmpv3AccCtrl, fnFirewallSchOneEndDay=fnFirewallSchOneEndDay, fnSysNetworkIfPingSrvAddr=fnSysNetworkIfPingSrvAddr, fnVpnConIndex=fnVpnConIndex, fnSysSnmpSecGrpEntry=fnSysSnmpSecGrpEntry, fnAntiSpamBlkPat=fnAntiSpamBlkPat, fnSysNetworkIfName=fnSysNetworkIfName, fnSysZoneBlkTraffic=fnSysZoneBlkTraffic, fnSysStatusAVDBVersion=fnSysStatusAVDBVersion, fnSysConfigNTPState=fnSysConfigNTPState, fnNidsRespLogDstAddrState=fnNidsRespLogDstAddrState, fnWebFilterUrlBlkState=fnWebFilterUrlBlkState, fnSysMonMemUsage=fnSysMonMemUsage, fnSysNetworkRoutingDstNetmask=fnSysNetworkRoutingDstNetmask, fnSysNetworkIfStatus=fnSysNetworkIfStatus, fnSysSnmpv3ACTable=fnSysSnmpv3ACTable, fnFirewallPolicySchedule=fnFirewallPolicySchedule, fnAvQuarCfgAgeLimit=fnAvQuarCfgAgeLimit, fortigate500=fortigate500, fnFirewallAddrGrpIndex=fnFirewallAddrGrpIndex, fnVpnRemoteGWUserGrp=fnVpnRemoteGWUserGrp, fnNidsIdpSigThreshold=fnNidsIdpSigThreshold, fnNidsTypeTcp=fnNidsTypeTcp, fnSysSnmp2ndTrapIp=fnSysSnmp2ndTrapIp, fnFirewallAddrGrpZone=fnFirewallAddrGrpZone, fnSysConfigHAMonIf=fnSysConfigHAMonIf, fnFwContProfUrlBlkState=fnFwContProfUrlBlkState, fnSysConfigHA=fnSysConfigHA, fnVpnIKEKeylifeType=fnVpnIKEKeylifeType, fnFwContProfSpamExptList=fnFwContProfSpamExptList, fnFirewallPolicyVpnTunName=fnFirewallPolicyVpnTunName, fnAvCfgMsgService=fnAvCfgMsgService, fnSysStatusVersion=fnSysStatusVersion, fnAvQuarantineEntry=fnAvQuarantineEntry, fnSysZoneSecLevel=fnSysZoneSecLevel, fnSysConfigTime=fnSysConfigTime, fnLSVirusFilterSigUpdate=fnLSVirusFilterSigUpdate, fnAvQuatantine=fnAvQuatantine, fnNIDS=fnNIDS, fnVpnRemoteGWPh1Auth1=fnVpnRemoteGWPh1Auth1, fnSysSnmpACIndex=fnSysSnmpACIndex, fnLSEventFilterIpmacStatus=fnLSEventFilterIpmacStatus, fnNidsIdpState=fnNidsIdpState, fnVpnRemoteGWDpdIdleWorry=fnVpnRemoteGWDpdIdleWorry, fnAlertEmaiCfgSmtpUser=fnAlertEmaiCfgSmtpUser, fnFirewallPolicyEntry=fnFirewallPolicyEntry, fnAvCfgMsgEntry=fnAvCfgMsgEntry, fnFirewallSchOneStartTime=fnFirewallSchOneStartTime, fnLog=fnLog, fortigateGeneric=fortigateGeneric, fnSysConfigAdmin=fnSysConfigAdmin, fnSysNetworkIfAddrMode=fnSysNetworkIfAddrMode, fnSysNetworkIfAccTelnet=fnSysNetworkIfAccTelnet, fnFirewallPolicySrcZone=fnFirewallPolicySrcZone, fnWfCfgMsgTable=fnWfCfgMsgTable, fnSysNetworkAccessPing=fnSysNetworkAccessPing, fnAvQuarTtl=fnAvQuarTtl, fnLSTrafficAddrEntry=fnLSTrafficAddrEntry, fnAvQuarFileName=fnAvQuarFileName, fnSysNetworkVlanAccHttp=fnSysNetworkVlanAccHttp, fnFirewallAddrZone=fnFirewallAddrZone, fnSysMonConnFromPort=fnSysMonConnFromPort, fnWebFilterScripts=fnWebFilterScripts, fnVpnIKEPFSState=fnVpnIKEPFSState, fnAvFbRuleIndex=fnAvFbRuleIndex, fnFirewallIpPoolIndex=fnFirewallIpPoolIndex, fnLSVirusFilterDet=fnLSVirusFilterDet, fnAvQuarIndex=fnAvQuarIndex)
mibBuilder.exportSymbols("FORTINET-MIB", fnFwContProfBannedWordState=fnFwContProfBannedWordState, fnNidsRespAlertMsg=fnNidsRespAlertMsg, fnSysNetworkAccessTelnet=fnSysNetworkAccessTelnet, fnLSTrafficAddrTable=fnLSTrafficAddrTable, fnAvCfgMsgDescription=fnAvCfgMsgDescription, fnLogHDFileSize=fnLogHDFileSize, fnSysUpdateVirusDefUpLast=fnSysUpdateVirusDefUpLast, fnVpnIKEIndex=fnVpnIKEIndex, fnSysZoneId=fnSysZoneId, fnFirewallIPMACTraffic=fnFirewallIPMACTraffic, fnFirewallSchOneIndex=fnFirewallSchOneIndex, fnWebfilterBannedWordsEntry=fnWebfilterBannedWordsEntry, fnSysSnmpGetCom=fnSysSnmpGetCom, fnSysSnmpSecUserName=fnSysSnmpSecUserName, fnAvQuarService=fnAvQuarService, fnVpnRemoteGWDeadPeerDet=fnVpnRemoteGWDeadPeerDet, fnFirewall=fnFirewall, fnFirewallPolicyVpnAllowOut=fnFirewallPolicyVpnAllowOut, fnLogToLocalFileSize=fnLogToLocalFileSize, fnVpnIKEPh2Encrp1=fnVpnIKEPh2Encrp1, fnFirewallIPMACName=fnFirewallIPMACName, fnUserRadIndex=fnUserRadIndex, fnSysSnmpSysLoc=fnSysSnmpSysLoc, fnSysNetworkVlanAccSsh=fnSysNetworkVlanAccSsh, fnVpnConMembers=fnVpnConMembers, fnAvVirusName=fnAvVirusName, fnFwContProfQuarantine=fnFwContProfQuarantine, fnNidsRespLogMsg=fnNidsRespLogMsg, fnFirewallServiceGroupIndex=fnFirewallServiceGroupIndex, fnFirewallPolicyTrafficPri=fnFirewallPolicyTrafficPri, fnFwContProfTable=fnFwContProfTable, fnVpnPPTPUserGrp=fnVpnPPTPUserGrp, fnAvFbRuleFilePat=fnAvFbRuleFilePat, fnVpnRemoteGWKeylife=fnVpnRemoteGWKeylife, fnSysConfigAdminUserEntry=fnSysConfigAdminUserEntry, fnVpnCertSerialNo=fnVpnCertSerialNo, fnSysNetworkRoutingGW2=fnSysNetworkRoutingGW2, fnNidsSigUserDefEntry=fnNidsSigUserDefEntry, fnSysSnmpSecUserAuthProto=fnSysSnmpSecUserAuthProto, fnFirewallPolicyNAT=fnFirewallPolicyNAT, fnFirewallPolicyAuth=fnFirewallPolicyAuth, fnWebFilterUrlState=fnWebFilterUrlState, fnAvQuarCfgBlkFileHttp=fnAvQuarCfgBlkFileHttp, fnFirewallVIPType=fnFirewallVIPType, fnAvQuarCfgBlkFileSmtp=fnAvQuarCfgBlkFileSmtp, fnSysSnmpViewType=fnSysSnmpViewType, fnVpnDialupMonRGwName=fnVpnDialupMonRGwName, fnFirewallPolicyLog=fnFirewallPolicyLog, fnFirewallAddrGrpName=fnFirewallAddrGrpName, fortigate3600=fortigate3600, fnVpnRemoteGWDpdIdleCleanup=fnVpnRemoteGWDpdIdleCleanup, fnAntiSpamBlkImapState=fnAntiSpamBlkImapState, fortigate200=fortigate200, fnLSTrafficDstPort=fnLSTrafficDstPort, fnFwContProfExptListState=fnFwContProfExptListState, fnVpnRemoteGWPh1Encrp2=fnVpnRemoteGWPh1Encrp2, fnSysNetworkDhcpDNS2=fnSysNetworkDhcpDNS2, fnVpnIKETable=fnVpnIKETable, fnSysSnmpViewMask=fnSysSnmpViewMask, fnFirewallAddrGrpTable=fnFirewallAddrGrpTable, fnFirewallIPMACBindingEntry=fnFirewallIPMACBindingEntry, fnSysSnmpSecGrpTable=fnSysSnmpSecGrpTable, fnAvQuarCfgBlkFileFtp=fnAvQuarCfgBlkFileFtp, fnVpnRemoteGWPreKey=fnVpnRemoteGWPreKey, fnSysNetworkVlanTable=fnSysNetworkVlanTable, fnVpnManualKeyEngage=fnVpnManualKeyEngage, fnSysNetworkIfMAC=fnSysNetworkIfMAC, fnVpnRemoteGWXAuthPasswd=fnVpnRemoteGWXAuthPasswd, fnAvCfgBlkEmailPop3=fnAvCfgBlkEmailPop3, fnSysConfigTimeNTPSrv=fnSysConfigTimeNTPSrv, fnFirewallServiceDstPortHigh=fnFirewallServiceDstPortHigh, fnFirewallVIPExtIf=fnFirewallVIPExtIf, fnSysNetworkDhcpExclRange1S=fnSysNetworkDhcpExclRange1S, fnSysNetworkDhcpExclRange2E=fnSysNetworkDhcpExclRange2E, fnSystem=fnSystem, fnFirewallAddrName=fnFirewallAddrName, fnSysSnmpACContexPre=fnSysSnmpACContexPre, fnSysNetworkIfIp2=fnSysNetworkIfIp2, fortinet=fortinet, fnVpnConName=fnVpnConName, fnVpnIKEPh2Auth1=fnVpnIKEPh2Auth1, fnSysConfigHASchedule=fnSysConfigHASchedule, fnSysNetworkIfNetmask2=fnSysNetworkIfNetmask2, fnFirewallVIPMapPort=fnFirewallVIPMapPort, fnAvFbRuleSmtpBlk=fnAvFbRuleSmtpBlk, fnNidsRespLogSrcAddrState=fnNidsRespLogSrcAddrState, fortinetTrap=fortinetTrap, fnSysZoneTable=fnSysZoneTable, fortigate3000=fortigate3000, fnAvQuarTime=fnAvQuarTime, fnFirewallPolicyGBand=fnFirewallPolicyGBand, fnFirewallServiceIndex=fnFirewallServiceIndex, fnFirewallIpPool=fnFirewallIpPool, fnNidsSigUserDefName=fnNidsSigUserDefName, fnAvCfgBlkFileHttp=fnAvCfgBlkFileHttp, fnSysConfigAdminUserName=fnSysConfigAdminUserName, fnSysNetworkIfNetmask=fnSysNetworkIfNetmask, fnAvCfgBlkEmailSmtp=fnAvCfgBlkEmailSmtp, fnFirewallAddrEntry=fnFirewallAddrEntry, fnFwContProfFileBlk=fnFwContProfFileBlk, fnVpnL2TPEndIp=fnVpnL2TPEndIp, fnSysConfigOpts=fnSysConfigOpts, fnFirewallServiceGroupValue=fnFirewallServiceGroupValue, fnVpnCertExpDate=fnVpnCertExpDate, fnLogMemTable=fnLogMemTable, fnFirewallPolicySrcAddr=fnFirewallPolicySrcAddr, fnWebFilterExemptUrlTable=fnWebFilterExemptUrlTable, fnWebFilterBannedWordLan=fnWebFilterBannedWordLan, fnSysConfigHAGrpId=fnSysConfigHAGrpId, fnAvCfgMsgIndex=fnAvCfgMsgIndex, fnLogHDEntry=fnLogHDEntry, fnAntiSpamBlkPop3State=fnAntiSpamBlkPop3State, fnLogToWebtrendsSrvAddr=fnLogToWebtrendsSrvAddr, fnVpnDialupMonEntry=fnVpnDialupMonEntry, fnSysNetworkVlanName=fnSysNetworkVlanName, fnFirewallSchRecurUsed=fnFirewallSchRecurUsed, fnSysConfigHAMode=fnSysConfigHAMode, fnSysZoneName=fnSysZoneName, fnSysNetworkRoutingGWIP=fnSysNetworkRoutingGWIP, fnUserRadSecret=fnUserRadSecret, fnNidsRespCfg=fnNidsRespCfg, fnAvQuarCfgInfecFileFtp=fnAvQuarCfgInfecFileFtp, fortigate100=fortigate100, fnUserLocalRadiusOther=fnUserLocalRadiusOther, fnWebFilterApplet=fnWebFilterApplet, fnSysSnmpSecGrpMembers=fnSysSnmpSecGrpMembers, fnFirewallVIPExtIP=fnFirewallVIPExtIP, fnLogToRemHostState=fnLogToRemHostState, fnFwContProfSpamBanWord=fnFwContProfSpamBanWord, fnSysSnmpSecurity=fnSysSnmpSecurity, fortigate300=fortigate300, fnLogToLocalOpt=fnLogToLocalOpt, fnAntiSpamBanWordPat=fnAntiSpamBanWordPat, fnSysMonConnIndex=fnSysMonConnIndex, fnSysNetworkRoutingSrcNetmask=fnSysNetworkRoutingSrcNetmask, fnSysNetworkDNSPri=fnSysNetworkDNSPri, fnSysConfigOptsIdleTimeout=fnSysConfigOptsIdleTimeout, fnWebFilterExemptUrlState=fnWebFilterExemptUrlState, fnSysUpdatePeriodicUpDay=fnSysUpdatePeriodicUpDay, fnVpnConEntry=fnVpnConEntry, fnSysUpdateVirusDefUpStatus=fnSysUpdateVirusDefUpStatus, fnNidsSigUserDefProto=fnNidsSigUserDefProto, fnVpnRemoteGWAuthMethod=fnVpnRemoteGWAuthMethod, fnSysConfigTimezone=fnSysConfigTimezone, fnVpnRemoteGWKAFreq=fnVpnRemoteGWKAFreq, fnVpnPPTPEndIp=fnVpnPPTPEndIp, fnSysNetworkRoutingIndex=fnSysNetworkRoutingIndex, fnVpnCertName=fnVpnCertName, fnSysUpdatePushUpState=fnSysUpdatePushUpState, fnAntiSpamBanWordEntry=fnAntiSpamBanWordEntry, fnAvVirusIndex=fnAvVirusIndex, fnSysConfigAdminUserNetmask=fnSysConfigAdminUserNetmask, fnAvCfgBlkEmailImap=fnAvCfgBlkEmailImap, fnSysMonConnFromAddr=fnSysMonConnFromAddr, fnWfCfgMsgEntry=fnWfCfgMsgEntry, fnVpnDialupMonTimeout=fnVpnDialupMonTimeout, fnFirewallAddressNetmask=fnFirewallAddressNetmask, LanguageCode=LanguageCode, fnSysNetworkRoutingEntry=fnSysNetworkRoutingEntry, fnAVVirusListEntry=fnAVVirusListEntry, fnVpnManualKeyEntry=fnVpnManualKeyEntry, fnSysSnmpv3ACEntry=fnSysSnmpv3ACEntry, fnLSFilterSeverity=fnLSFilterSeverity, fnSysNetworkVlanIndex=fnSysNetworkVlanIndex, fnAvCfgBlkFileFtp=fnAvCfgBlkFileFtp, fnLSEventFilterHaAct=fnLSEventFilterHaAct, fnAvQuarStatus=fnAvQuarStatus, fnFwContProfPassFragEmail=fnFwContProfPassFragEmail, fnSysNetworkIfAccPing=fnSysNetworkIfAccPing, fnAvQuarCfgBlkFilePop3=fnAvQuarCfgBlkFilePop3, fnLSEventFilterCfgChg=fnLSEventFilterCfgChg, fnAlertEmaiCfgSmtpSrv=fnAlertEmaiCfgSmtpSrv, fnSysMonConnToPort=fnSysMonConnToPort, fnVpnIKEPh2Encrp2=fnVpnIKEPh2Encrp2, fnVpnConTable=fnVpnConTable, fnSysSnmpState=fnSysSnmpState, fnVpnRemoteGWXAuthUserName=fnVpnRemoteGWXAuthUserName, fnSysNetworkDhcpExclRange1E=fnSysNetworkDhcpExclRange1E, fnFirewallAddrIp=fnFirewallAddrIp, fnAvFileBlock=fnAvFileBlock, fnFirewallSchOneStartDay=fnFirewallSchOneStartDay, fnFirewallAddrTable=fnFirewallAddrTable, fnSysNetworkDhcpExclRange2S=fnSysNetworkDhcpExclRange2S, fnVpnCertIssuer=fnVpnCertIssuer, fnSysUpdateIdsUpLast=fnSysUpdateIdsUpLast, fnVpnManualKeyReplayDet=fnVpnManualKeyReplayDet, fnVpnL2TPStartIp=fnVpnL2TPStartIp, fnSysNetworkIfPingSrvState2=fnSysNetworkIfPingSrvState2, fnLogTrafficExtToFw=fnLogTrafficExtToFw, fnFirewallIPMACBindingTable=fnFirewallIPMACBindingTable, fnVpnRemoteGWIndex=fnVpnRemoteGWIndex, fnNidsSigUserDefSum=fnNidsSigUserDefSum, fnFwContProfBigFileBlk=fnFwContProfBigFileBlk, fnLSWebFilterScriptDet=fnLSWebFilterScriptDet, fnFirewallPolicy=fnFirewallPolicy, fnVpnL2TP=fnVpnL2TP, fnUserRadiusSrvEntry=fnUserRadiusSrvEntry, fnSysUpdateConnStatus1=fnSysUpdateConnStatus1, fnFirewallIPMACIp=fnFirewallIPMACIp, fnFirewallServiceName=fnFirewallServiceName, fnVpnIKEGW1=fnVpnIKEGW1, fnLSWebFilterPageBlk=fnLSWebFilterPageBlk, fnFirewallAddrGrpEntry=fnFirewallAddrGrpEntry, fnVpnRemoteGWEntry=fnVpnRemoteGWEntry, fnFirewallPolicyProf=fnFirewallPolicyProf, fnSysSnmpViewTable=fnSysSnmpViewTable, fnSysNetworkAccessIfName=fnSysNetworkAccessIfName, fnSysConfigAdminUserIp=fnSysConfigAdminUserIp, fnVpnDialupMonIndex=fnVpnDialupMonIndex, fnAvFbRulePop3Blk=fnAvFbRulePop3Blk, fnSysNetworkVlanIp=fnSysNetworkVlanIp, fnVpnRemoteGWIp=fnVpnRemoteGWIp, fnAntiSpamBanWordPop3State=fnAntiSpamBanWordPop3State, fnAlearEmaiCatVirus=fnAlearEmaiCatVirus, fnWebFilterCookie=fnWebFilterCookie, fnAntiSpamBlkEntry=fnAntiSpamBlkEntry, fnSysZoneEntry=fnSysZoneEntry, fnVpnIPSEC=fnVpnIPSEC, fnNidsIdpEntry=fnNidsIdpEntry, fnFirewallVIPExtPort=fnFirewallVIPExtPort, fnSysSnmpSecUserTable=fnSysSnmpSecUserTable, fnNidsTypeIP=fnNidsTypeIP, fnAntiSpamCfgSubTag=fnAntiSpamCfgSubTag, fnSysNetworkIfEntry=fnSysNetworkIfEntry, fnSysSnmpTrapCom=fnSysSnmpTrapCom, fnSysUpdateIdsUpStatus=fnSysUpdateIdsUpStatus, fnNidsDetection=fnNidsDetection, fnSysNetworkDhcpLeaseDur=fnSysNetworkDhcpLeaseDur, fnLSTrafficSrcPort=fnLSTrafficSrcPort, fnSysNetworkDhcpDNS3=fnSysNetworkDhcpDNS3, fnSysNetworkDhcpExclRange3E=fnSysNetworkDhcpExclRange3E, fnSysUpdateSpamDefUpLast=fnSysUpdateSpamDefUpLast, fnSysMonConnProto=fnSysMonConnProto, fnAlertEmaiCfgEmai1=fnAlertEmaiCfgEmai1, fnFirewallVIPProto=fnFirewallVIPProto, fnFirewallSchRecurWeekdays=fnFirewallSchRecurWeekdays, fnVpnRemoteGWLocalID=fnVpnRemoteGWLocalID, fnSysNetworkVlanAccHttps=fnSysNetworkVlanAccHttps, fnVpnRemoteGWPh1Auth2=fnVpnRemoteGWPh1Auth2, fnLogMemDetail=fnLogMemDetail, fnLSIdsFilterState=fnLSIdsFilterState, fnWebFilter=fnWebFilter, fnSysSnmpACWv=fnSysSnmpACWv, fnVpnDialupMonLifetime=fnVpnDialupMonLifetime, fnSysNetworkRoutingGWEntry=fnSysNetworkRoutingGWEntry, fnVpnIKEKeepAlive=fnVpnIKEKeepAlive, fnWfCfgMsgIndex=fnWfCfgMsgIndex, fnLogSetting=fnLogSetting, fnSysUpdate=fnSysUpdate, fnFirewallIPMACToFw=fnFirewallIPMACToFw, fnAlertEmai=fnAlertEmai, fnSysNetworkDhcpStatus=fnSysNetworkDhcpStatus, fnFirewallSchOneName=fnFirewallSchOneName, fnUserRadAddr=fnUserRadAddr)
mibBuilder.exportSymbols("FORTINET-MIB", fnVpnCertType=fnVpnCertType, fnAntiSpamBlkTable=fnAntiSpamBlkTable, fnSysSnmpACNv=fnSysSnmpACNv, fnSysNetworkVlanNetmask=fnSysNetworkVlanNetmask, fnNidsMonIfs=fnNidsMonIfs, fnAntiSpamExemptTable=fnAntiSpamExemptTable, fnUserRadName=fnUserRadName, fnNidsTypeIcmp=fnNidsTypeIcmp, fnSysStatusSN=fnSysStatusSN, fnSysNetworkRoutingGWIndex=fnSysNetworkRoutingGWIndex, fnSysSnmpSecGrpName=fnSysSnmpSecGrpName, fnWfCfgMsgName=fnWfCfgMsgName, fnSysNetworkIfAccSnmp=fnSysNetworkIfAccSnmp, fnVpnRemoteGWPeerId=fnVpnRemoteGWPeerId, fnSysMonSessionNum=fnSysMonSessionNum, fnWebFilterExemptUrlIndex=fnWebFilterExemptUrlIndex, fnVpnRemoteGWType=fnVpnRemoteGWType, fnFirewallIpPoolTable=fnFirewallIpPoolTable, fnFirewallAddress=fnFirewallAddress, fnSysNetworkRouting=fnSysNetworkRouting, fnSysNetworkDNS=fnSysNetworkDNS, fnSysNetworkRoutingGW1=fnSysNetworkRoutingGW1, fnSysConfigTimeNTPInt=fnSysConfigTimeNTPInt, fnVpnManualKeyIndex=fnVpnManualKeyIndex, fnVpnDialupMonProxyIdSrc=fnVpnDialupMonProxyIdSrc, fnFirewallServiceType=fnFirewallServiceType, fnVpnDialupMonProxyIdDst=fnVpnDialupMonProxyIdDst, fnVpnDialupMonTable=fnVpnDialupMonTable, fnSysNetworkDhcpDomain=fnSysNetworkDhcpDomain, fnLSTrafficDstNetmask=fnLSTrafficDstNetmask, fnFirewallIPMACState=fnFirewallIPMACState, fnFirewallServiceUsed=fnFirewallServiceUsed, fnSysNetworkDhcp=fnSysNetworkDhcp, fnFirewallSchedule=fnFirewallSchedule, fnAvQuarStatusDetail=fnAvQuarStatusDetail, fnLSEventFilterIpsecNeg=fnLSEventFilterIpsecNeg, fnLSEventFilterAdminLogin=fnLSEventFilterAdminLogin, fnVpnRemoteGWDpdRetryInt=fnVpnRemoteGWDpdRetryInt, fnVpnRemoteGWPh1Auth3=fnVpnRemoteGWPh1Auth3, fnSysNetworkAccessSnmp=fnSysNetworkAccessSnmp, fnFirewallPolicyDestAddr=fnFirewallPolicyDestAddr, fnAVVirusListTable=fnAVVirusListTable, fnFirewallVIPMapIP=fnFirewallVIPMapIP, fnSysConfigHAPasswd=fnSysConfigHAPasswd, fnSysUpdatePeriodicUpFreq=fnSysUpdatePeriodicUpFreq, fnSysNetworkIfIndex=fnSysNetworkIfIndex, fnUserGrpTable=fnUserGrpTable, fnLogTrafficIntToFw=fnLogTrafficIntToFw, fnAlearEmailCatCrit=fnAlearEmailCatCrit, fnFirewallVIPTable=fnFirewallVIPTable, fnVpnRemoteGWXAuthPap=fnVpnRemoteGWXAuthPap, fnAvFbRuleImapBlk=fnAvFbRuleImapBlk, fnVpnIKEGW3=fnVpnIKEGW3, fnFirewallPolicyFixPort=fnFirewallPolicyFixPort, fnFirewallPolicyVpnAllowIn=fnFirewallPolicyVpnAllowIn, fnWebFilterExemptUrlPat=fnWebFilterExemptUrlPat, fnVpnIKEConcentrator=fnVpnIKEConcentrator, fnSysSnmpSecUserAuthPasswd=fnSysSnmpSecUserAuthPasswd, fnSysSnmpACRv=fnSysSnmpACRv, fnLSEventFilterDhcpService=fnLSEventFilterDhcpService, fnUserLocalState=fnUserLocalState, fnLogSettingWebFilter=fnLogSettingWebFilter, fnSysNetworkRoutingGWTable=fnSysNetworkRoutingGWTable, fnNidsIdpTable=fnNidsIdpTable, fnSysNetworkRoutingDev1=fnSysNetworkRoutingDev1, fnSysConfigOptsLcdProtPin=fnSysConfigOptsLcdProtPin, fnSysSnmpViewEntry=fnSysSnmpViewEntry, fnSysConfigAdminUserTable=fnSysConfigAdminUserTable, fnVpnRemoteGWNatT=fnVpnRemoteGWNatT, fnLogHDLastAccTime=fnLogHDLastAccTime, fnSysZoneLogTraffic=fnSysZoneLogTraffic, fnFirewallAddrVlanId=fnFirewallAddrVlanId, fnAlertEmaiCfgEmail3=fnAlertEmaiCfgEmail3, fnVpnCertStatus=fnVpnCertStatus, fnFirewallContProfiles=fnFirewallContProfiles, fnAlertEmaiCfg=fnAlertEmaiCfg, fnVpnIKEEntry=fnVpnIKEEntry, fnLSTrafficDstAddr=fnLSTrafficDstAddr, fnSysConfigAdminUserIndex=fnSysConfigAdminUserIndex, fnSysMonConnToAddr=fnSysMonConnToAddr, fnVpnCert=fnVpnCert, fnSysNetworkRoutingSrcIP=fnSysNetworkRoutingSrcIP, fnSysConfigOptsAuthTimeout=fnSysConfigOptsAuthTimeout, fnFirewallSchRecurName=fnFirewallSchRecurName, fnSysUpdateSpamDefUpStatus=fnSysUpdateSpamDefUpStatus, fnFirewallSchOneEndTime=fnFirewallSchOneEndTime, fnFirewallIpPoolStartIp=fnFirewallIpPoolStartIp, fnFirewallService=fnFirewallService, fnFirewallPolicyDestZone=fnFirewallPolicyDestZone, fnFirewallSchOneTable=fnFirewallSchOneTable, fnVpnIKEPh2Auth2=fnVpnIKEPh2Auth2, fnVpnIKEStatus=fnVpnIKEStatus, fnVpnManualKeyLocalSPI=fnVpnManualKeyLocalSPI, fnAvQuarCfgInfecFilePop3=fnAvQuarCfgInfecFilePop3, fnUserLocalTable=fnUserLocalTable, fnFirewallVIPName=fnFirewallVIPName, fnFirewallPolicyVpnInNat=fnFirewallPolicyVpnInNat, fnFirewallPolicyDipPool=fnFirewallPolicyDipPool, fnVpnManualKeyRemoteSPI=fnVpnManualKeyRemoteSPI, fnVpnPPTPStatus=fnVpnPPTPStatus, fnNidsRespAlertDstAddrState=fnNidsRespAlertDstAddrState, fnFirewallIpPoolEndIp=fnFirewallIpPoolEndIp, fnSysSnmpViewSubtreeOid=fnSysSnmpViewSubtreeOid, fnFwContProfName=fnFwContProfName, fnFirewallIpPoolEntry=fnFirewallIpPoolEntry, fnVpnRemoteGWPh1Encrp1=fnVpnRemoteGWPh1Encrp1, fnSysNetworkDhcpDefRoute=fnSysNetworkDhcpDefRoute, fnFirewallServiceDstPortLow=fnFirewallServiceDstPortLow, fnFirewallSchOneEntry=fnFirewallSchOneEntry, fnAlertEmaiCfgSmtpPasswd=fnAlertEmaiCfgSmtpPasswd, fnAvQuarDc=fnAvQuarDc, fnWebFilterUrlPat=fnWebFilterUrlPat, fnSysMonConnEntry=fnSysMonConnEntry, fortigate420=fortigate420, fnSysNetwork=fnSysNetwork, fnAlertEmaiCfgEmail2=fnAlertEmaiCfgEmail2, fnVpnRemoteGWPeerOpt=fnVpnRemoteGWPeerOpt, fnSysNetworkRoutingGWDeadDet=fnSysNetworkRoutingGWDeadDet, fnVpnRemoteGWDhGrp=fnVpnRemoteGWDhGrp, fnAvQuarCfgInfecFileHttp=fnAvQuarCfgInfecFileHttp, fnVpnManualKeyEncrpAlgorithm=fnVpnManualKeyEncrpAlgorithm, fnVpnRemoteGWTable=fnVpnRemoteGWTable, fnFwContProfSpamFilter=fnFwContProfSpamFilter, fnVpnManualKeyName=fnVpnManualKeyName, fnUserRadiusSrvTable=fnUserRadiusSrvTable, fnSysMonitor=fnSysMonitor, fnFirewallPolicyVpnOutNat=fnFirewallPolicyVpnOutNat, fnNidsIdpSigName=fnNidsIdpSigName, fnSysNetworkDhcpExclRange3S=fnSysNetworkDhcpExclRange3S, fnLSTrafficFilterResolveIp=fnLSTrafficFilterResolveIp, fnLogToRemHostAddr=fnLogToRemHostAddr, fnWebFilterUrlBlkEntry=fnWebFilterUrlBlkEntry, EncrytionAlgorithm=EncrytionAlgorithm, fnFirewallIpPoolIf=fnFirewallIpPoolIf, fnWfCfgMsgDescription=fnWfCfgMsgDescription, fnLSEventFilterPppoeService=fnLSEventFilterPppoeService, fnUserGrpIndex=fnUserGrpIndex, fnSysNetworkIfPingSrvAddr2=fnSysNetworkIfPingSrvAddr2, fnNidsGen=fnNidsGen, fnSysSnmpSecUserSecLevelAuth=fnSysSnmpSecUserSecLevelAuth, fnFirewallPolicyAction=fnFirewallPolicyAction, fnFirewallVirtualIP=fnFirewallVirtualIP, fnVpnManualKeyConcentrator=fnVpnManualKeyConcentrator, fnUserLocalName=fnUserLocalName, fnVpnRemoteGWDpdRetryCound=fnVpnRemoteGWDpdRetryCound, fnSysNetworkIfTable=fnSysNetworkIfTable, fnSysNetworkVlanIf=fnSysNetworkVlanIf, fnAvQuarCfgInfecFileSmtp=fnAvQuarCfgInfecFileSmtp, fnNidsPrevention=fnNidsPrevention, fnSysNetworkRoutingRIPSrv=fnSysNetworkRoutingRIPSrv, fnFirewallServiceGroupUsed=fnFirewallServiceGroupUsed, fnSysMonCPUIdle=fnSysMonCPUIdle, fnFirewallServiceProto=fnFirewallServiceProto, fnFirewallVIPIndex=fnFirewallVIPIndex, fnNidsIdpSigSum=fnNidsIdpSigSum, fnVpnPPTP=fnVpnPPTP, fnWebFilterBWords=fnWebFilterBWords, fnUserLocalIndex=fnUserLocalIndex, fnFirewallServiceGroupTable=fnFirewallServiceGroupTable, fnFirewallSchRecurStartTime=fnFirewallSchRecurStartTime, fnAvCfgMsgTable=fnAvCfgMsgTable, fnSysMonCPUUsage=fnSysMonCPUUsage, fnSysSnmpACSecLevelAuth=fnSysSnmpACSecLevelAuth, fnSysConfigOptsLan=fnSysConfigOptsLan, fnFirewallServiceGroupEntry=fnFirewallServiceGroupEntry, fnWebFilterActiveX=fnWebFilterActiveX, fnSysStatus=fnSysStatus, fnVpnManualKeyTable=fnVpnManualKeyTable, fnVpnCertCommonName=fnVpnCertCommonName, fnSysSnmpSysName=fnSysSnmpSysName, ItemState=ItemState, fnVpnRemoteGWPeerGrpName=fnVpnRemoteGWPeerGrpName, fnUserGrpEntry=fnUserGrpEntry, fnSysMonConnTable=fnSysMonConnTable, fnUserLocalPasswd=fnUserLocalPasswd, fnLogIntrusions=fnLogIntrusions)
