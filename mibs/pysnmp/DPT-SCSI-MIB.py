#
# PySNMP MIB module DPT-SCSI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DPT-SCSI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:39:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, ObjectIdentity, MibIdentifier, ModuleIdentity, Gauge32, Unsigned32, IpAddress, Integer32, NotificationType, Counter64, iso, enterprises, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Gauge32", "Unsigned32", "IpAddress", "Integer32", "NotificationType", "Counter64", "iso", "enterprises", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

class DptSignature(DisplayString):
    pass

class HostBusType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid", 1), ("isa", 2), ("eisa", 3), ("pci-32", 4), ("pci-64", 5))

class ScsiBusType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid", 1), ("singleEnded", 2), ("differential", 3), ("lvd", 4), ("fibreChannel", 5))

class IrqType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("invalid", 1), ("level", 2), ("edge", 3))

class DrqNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("zero", 3), ("five", 4), ("six", 5), ("seven", 6))

class MemoryBankType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("empty", 3), ("standard-SIMM", 4), ("standard-DIMM", 5), ("sm4000DPT-ECC-SIMM", 6), ("sm4041DPT-ECC-DIMM", 7), ("sm4050DPT-ECC-EDO-SIMM", 8), ("dm4050DPT-ECC-EDO-SO-DIMM", 9), ("dm4070DPT-ECC-SD-DIMM", 10))

class MemoryBankSize(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("empty", 3), ("oneMB", 4), ("fourMB", 5), ("sixteenMB", 6), ("thirtytwoMB", 7), ("sixtyfourMB", 8), ("hundredtwentyeightMB", 9), ("twohundredfiftysixMB", 10), ("fivehundredtwelveMB", 11), ("thousandtwentyfourMB", 12))

class CachingModule(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("none", 3), ("cm4000", 4), ("rc4040", 5), ("rc4041", 6), ("embedded", 7), ("ra4050", 8), ("ra4060", 9))

class RaidModule(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("none", 3), ("dm4000", 4), ("rc4040", 5), ("rc4041", 6), ("embedded", 7), ("ra4050", 8), ("ra4060", 9))

class BatteryBackupModule(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("none", 3), ("embedded", 4), ("bb4050", 5), ("bb4060", 6))

class RaidType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("invalid", 1), ("notAssigned", 2), ("raid-0", 3), ("raid-1", 4), ("raid-5", 5), ("redirected", 6), ("hotSpare", 7))

class SoftwareType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("firmware", 1), ("driver", 2), ("operatingSystem", 3), ("application", 4))

class BusWidth(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("invalid", 1), ("serial", 2), ("narrow", 3), ("wide", 4), ("wide32", 5), ("notApplicable", 6))

class BusTerminationType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid", 1), ("on", 2), ("off", 3), ("highOnly", 4), ("auto", 5))

class ScsiVersion(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("invalid", 1), ("scsi-I", 2), ("scsi-II", 3), ("scsi-III", 4))

class DeviceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 97, 98, 99))
    namedValues = NamedValues(("disk", 1), ("tape", 2), ("printer", 3), ("processor", 4), ("writeOnce", 5), ("cdRom", 6), ("scanner", 7), ("optical", 8), ("jukebox", 9), ("commDev", 10), ("graphicsType10", 11), ("graphicsType11", 12), ("scc", 13), ("ses", 14), ("saf-te", 97), ("host", 98), ("unknown", 99))

class DeviceStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("invalid", 1), ("optimal", 2), ("verifying", 3), ("failed", 4), ("warning", 5), ("formatting", 6), ("formatCertifying", 7), ("missing", 8), ("notCreated", 9), ("degraded", 10), ("building", 11), ("rebuilding", 12), ("verifyFixing", 13), ("abortActivity", 14))

class DeviceWriteMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("writeBack", 3), ("writeThrough", 4), ("noCache", 5))

class YesNoStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("notSupported", 3), ("yes", 4), ("no", 5))

class LowHighStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("notSupported", 3), ("low", 4), ("normal", 5), ("high", 6), ("veryHigh", 7))

class BatteryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("invalid", 1), ("notApplicable", 2), ("none", 3), ("trickleCharge", 4), ("fastCharge", 5), ("discharge", 6), ("bad", 7), ("full", 8), ("initCharge", 9), ("initDischarge", 10), ("initRecharge", 11), ("maintenanceDischarge", 12), ("maintenanceCharge", 13))

class HbaGenStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid", 1), ("notSupported", 2), ("ok", 3), ("fail", 4), ("error", 5))

class CommandType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("hostCmd", 1), ("scsiCmd", 2))

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("invalid", 1), ("active", 2), ("notInService", 3), ("notReady", 4), ("createAndGo", 5), ("createAndWait", 6), ("destroy", 7))

dpt = MibIdentifier((1, 3, 6, 1, 4, 1, 1597))
dptScsi = MibIdentifier((1, 3, 6, 1, 4, 1, 1597, 1))
dptScsiSys = MibIdentifier((1, 3, 6, 1, 4, 1, 1597, 1, 1))
dptScsiHba = MibIdentifier((1, 3, 6, 1, 4, 1, 1597, 1, 2))
dptScsiBus = MibIdentifier((1, 3, 6, 1, 4, 1, 1597, 1, 3))
dptScsiDev = MibIdentifier((1, 3, 6, 1, 4, 1, 1597, 1, 4))
dptScsiArr = MibIdentifier((1, 3, 6, 1, 4, 1, 1597, 1, 5))
dptScsiStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1597, 1, 6))
dptScsiEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 1597, 1, 7))
dptScsiDummy = MibIdentifier((1, 3, 6, 1, 4, 1, 1597, 1, 8))
dptScsiSysRevLevel = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 1, 1), DptSignature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiSysRevLevel.setStatus('mandatory')
dptScsiSysEngineSignature = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 1, 2), DptSignature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiSysEngineSignature.setStatus('mandatory')
dptScsiSysDriverSignature = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 1, 3), DptSignature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiSysDriverSignature.setStatus('mandatory')
dptScsiSysEventLoggerSignature = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 1, 4), DptSignature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiSysEventLoggerSignature.setStatus('mandatory')
dptScsiSysMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiSysMibRevMajor.setStatus('mandatory')
dptScsiSysMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiSysMibRevMinor.setStatus('mandatory')
dptScsiHbaTable = MibTable((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1), )
if mibBuilder.loadTexts: dptScsiHbaTable.setStatus('mandatory')
dptScsiHbaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1), ).setIndexNames((0, "DPT-SCSI-MIB", "dptScsiHbaNumber"))
if mibBuilder.loadTexts: dptScsiHbaEntry.setStatus('mandatory')
dptScsiHbaNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaNumber.setStatus('mandatory')
dptScsiHbaVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaVendor.setStatus('mandatory')
dptScsiHbaModel = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaModel.setStatus('mandatory')
dptScsiHbaFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaFirmware.setStatus('mandatory')
dptScsiHbaSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaSerialNumber.setStatus('mandatory')
dptScsiHbaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaAddress.setStatus('mandatory')
dptScsiHbaHostBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 7), HostBusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaHostBusType.setStatus('mandatory')
dptScsiHbaHostBusMaxTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaHostBusMaxTransferRate.setStatus('mandatory')
dptScsiHbaIrq = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaIrq.setStatus('mandatory')
dptScsiHbaIrqType = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 10), IrqType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaIrqType.setStatus('mandatory')
dptScsiHbaDrq = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 11), DrqNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaDrq.setStatus('deprecated')
dptScsiHbaRaidModule = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 12), RaidModule()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaRaidModule.setStatus('mandatory')
dptScsiHbaCachingModule = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 13), CachingModule()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaCachingModule.setStatus('deprecated')
dptScsiHbaAudibleAlarmOn = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 14), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaAudibleAlarmOn.setStatus('mandatory')
dptScsiHbaUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaUpTime.setStatus('mandatory')
dptScsiHbaEccEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 16), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaEccEnabled.setStatus('mandatory')
dptScsiHbaBackgroundTaskPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaBackgroundTaskPriority.setStatus('mandatory')
dptScsiHbaExclusionPeriodEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 18), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaExclusionPeriodEnabled.setStatus('deprecated')
dptScsiHbaExclusionPeriodStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaExclusionPeriodStart.setStatus('deprecated')
dptScsiHbaExclusionPeriodEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaExclusionPeriodEnd.setStatus('deprecated')
dptScsiHbaMaxReadAheadPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaMaxReadAheadPercentage.setStatus('deprecated')
dptScsiHbaMaxDirtyPagesPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaMaxDirtyPagesPercentage.setStatus('deprecated')
dptScsiHbaWriteBackDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaWriteBackDelay.setStatus('deprecated')
dptScsiHbaTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 24), LowHighStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaTemperature.setStatus('mandatory')
dptScsiHbaVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 25), LowHighStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaVoltage.setStatus('mandatory')
dptScsiHbaBadMemoryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaBadMemoryAddress.setStatus('mandatory')
dptScsiHbaBatteryModule = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 27), BatteryBackupModule()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaBatteryModule.setStatus('mandatory')
dptScsiHbaBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 28), BatteryStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaBatteryStatus.setStatus('mandatory')
dptScsiHbaHighestBusWithDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaHighestBusWithDevices.setStatus('mandatory')
dptScsiHbaGeneralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 30), HbaGenStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaGeneralStatus.setStatus('mandatory')
dptScsiHbaSmorSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 31), DptSignature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaSmorSignature.setStatus('mandatory')
dptScsiHbaBiosSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 32), DptSignature()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaBiosSignature.setStatus('mandatory')
dptScsiHbaNvramLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 1, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaNvramLayout.setStatus('mandatory')
dptScsiHbaCacheSocketTable = MibTable((1, 3, 6, 1, 4, 1, 1597, 1, 2, 2), )
if mibBuilder.loadTexts: dptScsiHbaCacheSocketTable.setStatus('mandatory')
dptScsiHbaCacheSocketEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1597, 1, 2, 2, 1), ).setIndexNames((0, "DPT-SCSI-MIB", "dptScsiHbaNumber"), (0, "DPT-SCSI-MIB", "dptScsiHbaCacheSocketNumber"))
if mibBuilder.loadTexts: dptScsiHbaCacheSocketEntry.setStatus('mandatory')
dptScsiHbaCacheSocketNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaCacheSocketNumber.setStatus('mandatory')
dptScsiHbaCacheModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 2, 1, 2), MemoryBankType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaCacheModuleType.setStatus('mandatory')
dptScsiHbaCacheModuleSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 2, 2, 1, 3), MemoryBankSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiHbaCacheModuleSize.setStatus('mandatory')
dptScsiBusTable = MibTable((1, 3, 6, 1, 4, 1, 1597, 1, 3, 1), )
if mibBuilder.loadTexts: dptScsiBusTable.setStatus('mandatory')
dptScsiBusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1597, 1, 3, 1, 1), ).setIndexNames((0, "DPT-SCSI-MIB", "dptScsiHbaNumber"), (0, "DPT-SCSI-MIB", "dptScsiBusNumber"))
if mibBuilder.loadTexts: dptScsiBusEntry.setStatus('mandatory')
dptScsiBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiBusNumber.setStatus('mandatory')
dptScsiBusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 3, 1, 1, 2), BusWidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiBusWidth.setStatus('mandatory')
dptScsiBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 3, 1, 1, 3), ScsiBusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiBusType.setStatus('mandatory')
dptScsiBusMaxTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiBusMaxTransferRate.setStatus('mandatory')
dptScsiBusHbaScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiBusHbaScsiId.setStatus('mandatory')
dptScsiBusHbaTermPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 3, 1, 1, 6), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiBusHbaTermPower.setStatus('mandatory')
dptScsiBusHbaTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 3, 1, 1, 7), BusTerminationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiBusHbaTermination.setStatus('mandatory')
dptScsiDevTable = MibTable((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1), )
if mibBuilder.loadTexts: dptScsiDevTable.setStatus('mandatory')
dptScsiDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1), ).setIndexNames((0, "DPT-SCSI-MIB", "dptScsiHbaNumber"), (0, "DPT-SCSI-MIB", "dptScsiBusNumber"), (0, "DPT-SCSI-MIB", "dptScsiDevId"), (0, "DPT-SCSI-MIB", "dptScsiDevLun"), (0, "DPT-SCSI-MIB", "dptScsiDevLevel"))
if mibBuilder.loadTexts: dptScsiDevEntry.setStatus('mandatory')
dptScsiDevId = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevId.setStatus('mandatory')
dptScsiDevLun = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevLun.setStatus('mandatory')
dptScsiDevLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevLevel.setStatus('mandatory')
dptScsiDevVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevVendor.setStatus('mandatory')
dptScsiDevModel = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevModel.setStatus('mandatory')
dptScsiDevRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevRevision.setStatus('mandatory')
dptScsiDevSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevSerialNumber.setStatus('mandatory')
dptScsiDevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 8), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevStatus.setStatus('mandatory')
dptScsiDevBusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 9), BusWidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevBusWidth.setStatus('mandatory')
dptScsiDevCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevCapacity.setStatus('mandatory')
dptScsiDevLogicalBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevLogicalBlockSize.setStatus('mandatory')
dptScsiDevPhysicalBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevPhysicalBlockSize.setStatus('mandatory')
dptScsiDevNegTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevNegTransferRate.setStatus('mandatory')
dptScsiDevRemovable = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 14), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevRemovable.setStatus('mandatory')
dptScsiDevEccEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 15), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevEccEnabled.setStatus('deprecated')
dptScsiDevScsiVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 16), ScsiVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevScsiVersion.setStatus('mandatory')
dptScsiDevSoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 17), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevSoftReset.setStatus('mandatory')
dptScsiDevCmdQueuing = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 18), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevCmdQueuing.setStatus('mandatory')
dptScsiDevLinkedCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 19), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevLinkedCmds.setStatus('mandatory')
dptScsiDevSynchronous = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 20), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevSynchronous.setStatus('mandatory')
dptScsiDevRelAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 21), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevRelAddr.setStatus('mandatory')
dptScsiDevSMART = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 22), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevSMART.setStatus('mandatory')
dptScsiDevSCAM = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 23), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevSCAM.setStatus('deprecated')
dptScsiDevBadBlockNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevBadBlockNumber.setStatus('mandatory')
dptScsiDevBadBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevBadBlockCount.setStatus('mandatory')
dptScsiDevErrorsAboveThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 26), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevErrorsAboveThreshold.setStatus('deprecated')
dptScsiDevDriveLockingOn = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 27), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevDriveLockingOn.setStatus('deprecated')
dptScsiDevLastReqSenseInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevLastReqSenseInfo.setStatus('mandatory')
dptScsiDevReadCachingOn = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 29), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevReadCachingOn.setStatus('deprecated')
dptScsiDevReadCacheMaxRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevReadCacheMaxRecord.setStatus('deprecated')
dptScsiDevWriteCachingOn = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 31), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevWriteCachingOn.setStatus('deprecated')
dptScsiDevWriteCacheMaxRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevWriteCacheMaxRecord.setStatus('deprecated')
dptScsiDevWriteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 33), DeviceWriteMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevWriteMode.setStatus('mandatory')
dptScsiDevSmartStatusOk = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 34), YesNoStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevSmartStatusOk.setStatus('mandatory')
dptScsiDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 4, 1, 1, 35), DeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiDevType.setStatus('mandatory')
dptScsiArrTable = MibTable((1, 3, 6, 1, 4, 1, 1597, 1, 5, 1), )
if mibBuilder.loadTexts: dptScsiArrTable.setStatus('mandatory')
dptScsiArrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1597, 1, 5, 1, 1), ).setIndexNames((0, "DPT-SCSI-MIB", "dptScsiHbaNumber"), (0, "DPT-SCSI-MIB", "dptScsiBusNumber"), (0, "DPT-SCSI-MIB", "dptScsiDevId"), (0, "DPT-SCSI-MIB", "dptScsiDevLun"), (0, "DPT-SCSI-MIB", "dptScsiDevLevel"))
if mibBuilder.loadTexts: dptScsiArrEntry.setStatus('mandatory')
dptScsiArrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 5, 1, 1, 1), RaidType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiArrType.setStatus('mandatory')
dptScsiArrOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 5, 1, 1, 2), SoftwareType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiArrOwner.setStatus('mandatory')
dptScsiArrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiArrName.setStatus('mandatory')
dptScsiArrBackgroundProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiArrBackgroundProgress.setStatus('mandatory')
dptScsiArrEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 5, 1, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiArrEntryStatus.setStatus('mandatory')
dptScsiHbaNumberMember = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: dptScsiHbaNumberMember.setStatus('mandatory')
dptScsiBusNumberMember = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: dptScsiBusNumberMember.setStatus('mandatory')
dptScsiDevIdMember = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: dptScsiDevIdMember.setStatus('mandatory')
dptScsiDevLunMember = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: dptScsiDevLunMember.setStatus('mandatory')
dptScsiDevLevelMember = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: dptScsiDevLevelMember.setStatus('mandatory')
dptScsiArrMemberTable = MibTable((1, 3, 6, 1, 4, 1, 1597, 1, 5, 2), )
if mibBuilder.loadTexts: dptScsiArrMemberTable.setStatus('mandatory')
dptScsiArrMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1597, 1, 5, 2, 1), ).setIndexNames((0, "DPT-SCSI-MIB", "dptScsiHbaNumber"), (0, "DPT-SCSI-MIB", "dptScsiBusNumber"), (0, "DPT-SCSI-MIB", "dptScsiDevId"), (0, "DPT-SCSI-MIB", "dptScsiDevLun"), (0, "DPT-SCSI-MIB", "dptScsiDevLevel"), (0, "DPT-SCSI-MIB", "dptScsiHbaNumberMember"), (0, "DPT-SCSI-MIB", "dptScsiBusNumberMember"), (0, "DPT-SCSI-MIB", "dptScsiDevIdMember"), (0, "DPT-SCSI-MIB", "dptScsiDevLunMember"), (0, "DPT-SCSI-MIB", "dptScsiDevLevelMember"))
if mibBuilder.loadTexts: dptScsiArrMemberEntry.setStatus('mandatory')
dptScsiArrMemberStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiArrMemberStripeSize.setStatus('mandatory')
dptScsiArrMemberEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 5, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiArrMemberEntryStatus.setStatus('mandatory')
dptScsiStatsHbaTable = MibTable((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1), )
if mibBuilder.loadTexts: dptScsiStatsHbaTable.setStatus('mandatory')
dptScsiStatsHbaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1), ).setIndexNames((0, "DPT-SCSI-MIB", "dptScsiHbaNumber"))
if mibBuilder.loadTexts: dptScsiStatsHbaEntry.setStatus('mandatory')
dptScsiStatsHbaCacheTotalPages = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsHbaCacheTotalPages.setStatus('mandatory')
dptScsiStatsHbaCacheUsedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsHbaCacheUsedPages.setStatus('mandatory')
dptScsiStatsHbaCacheDirtyPages = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsHbaCacheDirtyPages.setStatus('mandatory')
dptScsiStatsHbaCacheReadAheadPages = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsHbaCacheReadAheadPages.setStatus('mandatory')
dptScsiStatsHbaCacheLockedPages = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsHbaCacheLockedPages.setStatus('mandatory')
dptScsiStatsHbaCacheEccFaultPages = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsHbaCacheEccFaultPages.setStatus('mandatory')
dptScsiStatsHbaCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsHbaCommands.setStatus('mandatory')
dptScsiStatsHbaMisAlignedTransfers = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsHbaMisAlignedTransfers.setStatus('mandatory')
dptScsiStatsHbaScsiResets = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsHbaScsiResets.setStatus('mandatory')
dptScsiStatsDevTable = MibTable((1, 3, 6, 1, 4, 1, 1597, 1, 6, 2), )
if mibBuilder.loadTexts: dptScsiStatsDevTable.setStatus('mandatory')
dptScsiStatsDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1597, 1, 6, 2, 1), ).setIndexNames((0, "DPT-SCSI-MIB", "dptScsiHbaNumber"), (0, "DPT-SCSI-MIB", "dptScsiBusNumber"), (0, "DPT-SCSI-MIB", "dptScsiDevId"), (0, "DPT-SCSI-MIB", "dptScsiDevLun"), (0, "DPT-SCSI-MIB", "dptScsiDevLevel"))
if mibBuilder.loadTexts: dptScsiStatsDevEntry.setStatus('mandatory')
dptScsiStatsDevReadTotalSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevReadTotalSectors.setStatus('mandatory')
dptScsiStatsDevReadCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevReadCacheHits.setStatus('mandatory')
dptScsiStatsDevReadAheadHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevReadAheadHits.setStatus('mandatory')
dptScsiStatsDevWriteTotalSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWriteTotalSectors.setStatus('mandatory')
dptScsiStatsDevWriteCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWriteCacheHits.setStatus('mandatory')
dptScsiStatsDevWriteBacks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWriteBacks.setStatus('mandatory')
dptScsiStatsDevStripesCrosseds = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevStripesCrosseds.setStatus('mandatory')
dptScsiStatsDevRWCmdsTable = MibTable((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3), )
if mibBuilder.loadTexts: dptScsiStatsDevRWCmdsTable.setStatus('mandatory')
dptScsiStatsDevRWCmdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1), ).setIndexNames((0, "DPT-SCSI-MIB", "dptScsiHbaNumber"), (0, "DPT-SCSI-MIB", "dptScsiBusNumber"), (0, "DPT-SCSI-MIB", "dptScsiDevId"), (0, "DPT-SCSI-MIB", "dptScsiDevLun"), (0, "DPT-SCSI-MIB", "dptScsiDevLevel"), (0, "DPT-SCSI-MIB", "dptScsiStatsDevRWCmdsType"))
if mibBuilder.loadTexts: dptScsiStatsDevRWCmdsEntry.setStatus('mandatory')
dptScsiStatsDevRWCmdsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 1), CommandType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRWCmdsType.setStatus('mandatory')
dptScsiStatsDevRead1Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead1Ks.setStatus('mandatory')
dptScsiStatsDevRead2Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead2Ks.setStatus('mandatory')
dptScsiStatsDevRead4Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead4Ks.setStatus('mandatory')
dptScsiStatsDevRead8Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead8Ks.setStatus('mandatory')
dptScsiStatsDevRead16Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead16Ks.setStatus('mandatory')
dptScsiStatsDevRead32Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead32Ks.setStatus('mandatory')
dptScsiStatsDevRead64Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead64Ks.setStatus('mandatory')
dptScsiStatsDevRead128Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead128Ks.setStatus('mandatory')
dptScsiStatsDevRead256Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead256Ks.setStatus('mandatory')
dptScsiStatsDevRead512Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead512Ks.setStatus('mandatory')
dptScsiStatsDevRead1MBs = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevRead1MBs.setStatus('mandatory')
dptScsiStatsDevReadGreater1MBs = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevReadGreater1MBs.setStatus('mandatory')
dptScsiStatsDevWrite1Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite1Ks.setStatus('mandatory')
dptScsiStatsDevWrite2Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite2Ks.setStatus('mandatory')
dptScsiStatsDevWrite4Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite4Ks.setStatus('mandatory')
dptScsiStatsDevWrite8Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite8Ks.setStatus('mandatory')
dptScsiStatsDevWrite16Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite16Ks.setStatus('mandatory')
dptScsiStatsDevWrite32Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite32Ks.setStatus('mandatory')
dptScsiStatsDevWrite64Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite64Ks.setStatus('mandatory')
dptScsiStatsDevWrite128Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite128Ks.setStatus('mandatory')
dptScsiStatsDevWrite256Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite256Ks.setStatus('mandatory')
dptScsiStatsDevWrite512Ks = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite512Ks.setStatus('mandatory')
dptScsiStatsDevWrite1MBs = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWrite1MBs.setStatus('mandatory')
dptScsiStatsDevWriteGreater1MBs = MibTableColumn((1, 3, 6, 1, 4, 1, 1597, 1, 6, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiStatsDevWriteGreater1MBs.setStatus('mandatory')
dptScsiEventInfo = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dptScsiEventInfo.setStatus('mandatory')
dptScsiEventAuxVoltage = MibScalar((1, 3, 6, 1, 4, 1, 1597, 1, 7, 2), LowHighStatus())
if mibBuilder.loadTexts: dptScsiEventAuxVoltage.setStatus('mandatory')
dptHbaTemperatureVeryHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,400)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaTemperature"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
dptArrayStatusChangeFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,401)).setObjects(("DPT-SCSI-MIB", "dptScsiDevStatus"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
dptHbaVoltageChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,300)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaVoltage"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
dptHbaTemperatureHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,301)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaTemperature"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
dptHbaEccRAMErrorUncorrectableTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,302)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaBadMemoryAddress"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
dptArrayStatusChangeDegradedTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,303)).setObjects(("DPT-SCSI-MIB", "dptScsiDevStatus"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
dptDevReqSenseSeriousErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,304)).setObjects(("DPT-SCSI-MIB", "dptScsiDevLastReqSenseInfo"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
dptDevArrayDataInconsistencyTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,305)).setObjects(("DPT-SCSI-MIB", "dptScsiDevBadBlockNumber"), ("DPT-SCSI-MIB", "dptScsiDevBadBlockCount"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
dptHbaErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,306)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaNumber"))
dptDevFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,307)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
dptDevSmartFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,308)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
dptHbaAuxVoltageChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,309)).setObjects(("DPT-SCSI-MIB", "dptScsiEventAuxVoltage"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
dptHbaEccRAMErrorCorrectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,200)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaBadMemoryAddress"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
dptDevBlockReassignedTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,201)).setObjects(("DPT-SCSI-MIB", "dptScsiDevBadBlockNumber"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
dptDevReqSenseErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,202)).setObjects(("DPT-SCSI-MIB", "dptScsiDevLastReqSenseInfo"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
dptHbaVoltageNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,100)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaVoltage"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
dptHbaTemperatureNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,101)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaTemperature"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
dptHbaEccRAMErrorNotFoundTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,102)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaBadMemoryAddress"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
dptDevStatusChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,103)).setObjects(("DPT-SCSI-MIB", "dptScsiDevStatus"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
dptDevReqSenseTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,104)).setObjects(("DPT-SCSI-MIB", "dptScsiDevLastReqSenseInfo"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
dptArrayChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,105)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiBusNumber"), ("DPT-SCSI-MIB", "dptScsiDevId"), ("DPT-SCSI-MIB", "dptScsiDevLun"), ("DPT-SCSI-MIB", "dptScsiDevLevel"))
dptBatteryChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,106)).setObjects(("DPT-SCSI-MIB", "dptScsiHbaNumber"), ("DPT-SCSI-MIB", "dptScsiHbaBatteryStatus"))
dptHbaAuxVoltageNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,107)).setObjects(("DPT-SCSI-MIB", "dptScsiEventAuxVoltage"), ("DPT-SCSI-MIB", "dptScsiHbaNumber"))
dptOtherTrap = NotificationType((1, 3, 6, 1, 4, 1, 1597) + (0,14)).setObjects(("DPT-SCSI-MIB", "dptScsiEventInfo"))
mibBuilder.exportSymbols("DPT-SCSI-MIB", dptScsiArrOwner=dptScsiArrOwner, dptScsiHbaMaxReadAheadPercentage=dptScsiHbaMaxReadAheadPercentage, dptScsiStatsHbaCacheReadAheadPages=dptScsiStatsHbaCacheReadAheadPages, dptScsiStatsDevRWCmdsType=dptScsiStatsDevRWCmdsType, dptHbaAuxVoltageChangeTrap=dptHbaAuxVoltageChangeTrap, dptScsiStatsHbaMisAlignedTransfers=dptScsiStatsHbaMisAlignedTransfers, dptScsiHbaIrqType=dptScsiHbaIrqType, dptScsiStatsDevRead32Ks=dptScsiStatsDevRead32Ks, dptScsiArrMemberStripeSize=dptScsiArrMemberStripeSize, dptScsiStatsHbaCacheUsedPages=dptScsiStatsHbaCacheUsedPages, dptHbaVoltageChangeTrap=dptHbaVoltageChangeTrap, dptScsiHbaBackgroundTaskPriority=dptScsiHbaBackgroundTaskPriority, dptScsiDevTable=dptScsiDevTable, dptHbaTemperatureNormalTrap=dptHbaTemperatureNormalTrap, dptScsiHbaCacheSocketEntry=dptScsiHbaCacheSocketEntry, dptScsiStatsHbaCommands=dptScsiStatsHbaCommands, dptScsiArrName=dptScsiArrName, dptScsiDevStatus=dptScsiDevStatus, dptScsiSysRevLevel=dptScsiSysRevLevel, dptArrayStatusChangeDegradedTrap=dptArrayStatusChangeDegradedTrap, dptScsiDevLevelMember=dptScsiDevLevelMember, dptScsiStatsHbaCacheTotalPages=dptScsiStatsHbaCacheTotalPages, dptScsiDevWriteCachingOn=dptScsiDevWriteCachingOn, dptScsiStatsDevWrite4Ks=dptScsiStatsDevWrite4Ks, dptScsiDevSerialNumber=dptScsiDevSerialNumber, dptScsiDevModel=dptScsiDevModel, dptScsiDevLogicalBlockSize=dptScsiDevLogicalBlockSize, dptScsiDevBadBlockCount=dptScsiDevBadBlockCount, dptScsiHba=dptScsiHba, DptSignature=DptSignature, dptScsiHbaTemperature=dptScsiHbaTemperature, dptScsiArrMemberEntryStatus=dptScsiArrMemberEntryStatus, dptScsiStatsDevWrite16Ks=dptScsiStatsDevWrite16Ks, LowHighStatus=LowHighStatus, dptScsiStatsDevReadTotalSectors=dptScsiStatsDevReadTotalSectors, dptScsiHbaBiosSignature=dptScsiHbaBiosSignature, dptScsiStatsHbaCacheLockedPages=dptScsiStatsHbaCacheLockedPages, dptHbaTemperatureVeryHighTrap=dptHbaTemperatureVeryHighTrap, dptDevBlockReassignedTrap=dptDevBlockReassignedTrap, dptScsiSysMibRevMajor=dptScsiSysMibRevMajor, dptScsiDevReadCachingOn=dptScsiDevReadCachingOn, dptArrayChangeTrap=dptArrayChangeTrap, dptScsiDevId=dptScsiDevId, dptScsiHbaVendor=dptScsiHbaVendor, BusTerminationType=BusTerminationType, dptScsiStatsHbaTable=dptScsiStatsHbaTable, dptScsiStatsDevWrite128Ks=dptScsiStatsDevWrite128Ks, dptScsiDevBusWidth=dptScsiDevBusWidth, dptScsiDevEccEnabled=dptScsiDevEccEnabled, dptScsiStatsHbaScsiResets=dptScsiStatsHbaScsiResets, dptOtherTrap=dptOtherTrap, dptScsi=dptScsi, dptScsiStatsDevTable=dptScsiStatsDevTable, dptScsiStatsDevRWCmdsTable=dptScsiStatsDevRWCmdsTable, dptScsiHbaCacheSocketNumber=dptScsiHbaCacheSocketNumber, dptScsiHbaBatteryStatus=dptScsiHbaBatteryStatus, dptScsiDevCmdQueuing=dptScsiDevCmdQueuing, dptScsiStatsDevRead512Ks=dptScsiStatsDevRead512Ks, dptScsiSysEventLoggerSignature=dptScsiSysEventLoggerSignature, dptScsiStatsDevWriteTotalSectors=dptScsiStatsDevWriteTotalSectors, dptScsiBusNumber=dptScsiBusNumber, dptScsiDevLevel=dptScsiDevLevel, dptScsiSysMibRevMinor=dptScsiSysMibRevMinor, dptScsiSysDriverSignature=dptScsiSysDriverSignature, dptScsiDevNegTransferRate=dptScsiDevNegTransferRate, dptScsiStatsDevWrite32Ks=dptScsiStatsDevWrite32Ks, dptScsiStatsDevWrite1MBs=dptScsiStatsDevWrite1MBs, dptScsiStats=dptScsiStats, dptScsiBus=dptScsiBus, dptScsiStatsDevStripesCrosseds=dptScsiStatsDevStripesCrosseds, dptScsiStatsDevRead128Ks=dptScsiStatsDevRead128Ks, dptScsiDevLunMember=dptScsiDevLunMember, dptBatteryChangeTrap=dptBatteryChangeTrap, dptScsiHbaNumber=dptScsiHbaNumber, dptScsiStatsDevWrite2Ks=dptScsiStatsDevWrite2Ks, dptScsiEventAuxVoltage=dptScsiEventAuxVoltage, dptScsiDevType=dptScsiDevType, dptScsiStatsDevWriteCacheHits=dptScsiStatsDevWriteCacheHits, dptScsiStatsDevRead1MBs=dptScsiStatsDevRead1MBs, dptScsiSys=dptScsiSys, RaidType=RaidType, dptDevFailedTrap=dptDevFailedTrap, dptScsiStatsDevRead64Ks=dptScsiStatsDevRead64Ks, dptScsiHbaHighestBusWithDevices=dptScsiHbaHighestBusWithDevices, dptScsiBusNumberMember=dptScsiBusNumberMember, dptScsiStatsDevRead4Ks=dptScsiStatsDevRead4Ks, dptScsiStatsDevRead256Ks=dptScsiStatsDevRead256Ks, dptScsiBusMaxTransferRate=dptScsiBusMaxTransferRate, dptScsiStatsDevWrite8Ks=dptScsiStatsDevWrite8Ks, RaidModule=RaidModule, dptScsiHbaCacheModuleSize=dptScsiHbaCacheModuleSize, dptScsiStatsHbaCacheEccFaultPages=dptScsiStatsHbaCacheEccFaultPages, dptScsiDummy=dptScsiDummy, dptScsiDevLun=dptScsiDevLun, HostBusType=HostBusType, dptScsiArr=dptScsiArr, dptScsiHbaCacheModuleType=dptScsiHbaCacheModuleType, dptScsiDevVendor=dptScsiDevVendor, dptScsiDevReadCacheMaxRecord=dptScsiDevReadCacheMaxRecord, dptScsiDevWriteMode=dptScsiDevWriteMode, dptHbaVoltageNormalTrap=dptHbaVoltageNormalTrap, dptScsiArrType=dptScsiArrType, dptDevArrayDataInconsistencyTrap=dptDevArrayDataInconsistencyTrap, dptScsiHbaEccEnabled=dptScsiHbaEccEnabled, dptScsiStatsDevEntry=dptScsiStatsDevEntry, dptScsiHbaMaxDirtyPagesPercentage=dptScsiHbaMaxDirtyPagesPercentage, dptScsiStatsDevReadAheadHits=dptScsiStatsDevReadAheadHits, dptScsiHbaTable=dptScsiHbaTable, dptScsiHbaBadMemoryAddress=dptScsiHbaBadMemoryAddress, dptScsiDevBadBlockNumber=dptScsiDevBadBlockNumber, dptScsiHbaBatteryModule=dptScsiHbaBatteryModule, dptScsiDevPhysicalBlockSize=dptScsiDevPhysicalBlockSize, dptScsiHbaRaidModule=dptScsiHbaRaidModule, dptScsiDevSMART=dptScsiDevSMART, dptScsiHbaCacheSocketTable=dptScsiHbaCacheSocketTable, DrqNumber=DrqNumber, dptScsiArrBackgroundProgress=dptScsiArrBackgroundProgress, dptScsiStatsDevRead16Ks=dptScsiStatsDevRead16Ks, dptHbaEccRAMErrorUncorrectableTrap=dptHbaEccRAMErrorUncorrectableTrap, dptScsiHbaDrq=dptScsiHbaDrq, dptScsiArrTable=dptScsiArrTable, dptScsiStatsDevReadGreater1MBs=dptScsiStatsDevReadGreater1MBs, dptHbaErrorTrap=dptHbaErrorTrap, dptScsiStatsDevWrite512Ks=dptScsiStatsDevWrite512Ks, dptDevSmartFailedTrap=dptDevSmartFailedTrap, dptScsiStatsDevWrite64Ks=dptScsiStatsDevWrite64Ks, dptDevReqSenseSeriousErrorTrap=dptDevReqSenseSeriousErrorTrap, dptScsiDevErrorsAboveThreshold=dptScsiDevErrorsAboveThreshold, DeviceStatus=DeviceStatus, DeviceWriteMode=DeviceWriteMode, dptScsiHbaWriteBackDelay=dptScsiHbaWriteBackDelay, dptScsiDev=dptScsiDev, dptScsiDevSoftReset=dptScsiDevSoftReset, dptDevStatusChangedTrap=dptDevStatusChangedTrap, dptScsiHbaHostBusMaxTransferRate=dptScsiHbaHostBusMaxTransferRate, dptScsiStatsDevWriteGreater1MBs=dptScsiStatsDevWriteGreater1MBs, dptScsiArrMemberTable=dptScsiArrMemberTable, BatteryBackupModule=BatteryBackupModule, dptScsiBusWidth=dptScsiBusWidth, CommandType=CommandType, dptDevReqSenseErrorTrap=dptDevReqSenseErrorTrap, YesNoStatus=YesNoStatus, dptScsiBusHbaTermination=dptScsiBusHbaTermination, dptScsiStatsDevRWCmdsEntry=dptScsiStatsDevRWCmdsEntry, dptScsiDevRevision=dptScsiDevRevision, MemoryBankType=MemoryBankType, HbaGenStatus=HbaGenStatus, BusWidth=BusWidth, dptScsiDevWriteCacheMaxRecord=dptScsiDevWriteCacheMaxRecord, dptScsiDevEntry=dptScsiDevEntry, dptScsiStatsHbaEntry=dptScsiStatsHbaEntry, BatteryStatus=BatteryStatus, dptScsiStatsDevRead8Ks=dptScsiStatsDevRead8Ks, dptScsiDevLastReqSenseInfo=dptScsiDevLastReqSenseInfo, dptScsiHbaAudibleAlarmOn=dptScsiHbaAudibleAlarmOn, dptScsiHbaUpTime=dptScsiHbaUpTime, dptScsiHbaExclusionPeriodEnabled=dptScsiHbaExclusionPeriodEnabled, dptScsiEvent=dptScsiEvent, IrqType=IrqType, dptScsiDevScsiVersion=dptScsiDevScsiVersion, dptScsiArrEntryStatus=dptScsiArrEntryStatus, dptScsiHbaNumberMember=dptScsiHbaNumberMember, dptScsiStatsDevWrite256Ks=dptScsiStatsDevWrite256Ks, dptScsiStatsDevReadCacheHits=dptScsiStatsDevReadCacheHits, dptScsiDevRelAddr=dptScsiDevRelAddr, dptScsiHbaAddress=dptScsiHbaAddress, dptScsiHbaNvramLayout=dptScsiHbaNvramLayout, dptScsiHbaModel=dptScsiHbaModel, dptScsiStatsDevRead2Ks=dptScsiStatsDevRead2Ks, dptScsiHbaIrq=dptScsiHbaIrq, dptScsiHbaSmorSignature=dptScsiHbaSmorSignature, dptScsiHbaHostBusType=dptScsiHbaHostBusType, dptScsiDevCapacity=dptScsiDevCapacity, dptScsiStatsDevWrite1Ks=dptScsiStatsDevWrite1Ks, DisplayString=DisplayString, RowStatus=RowStatus, dptScsiDevIdMember=dptScsiDevIdMember, dptDevReqSenseTrap=dptDevReqSenseTrap, ScsiVersion=ScsiVersion, dptScsiHbaVoltage=dptScsiHbaVoltage, dptArrayStatusChangeFailedTrap=dptArrayStatusChangeFailedTrap, dptScsiStatsDevRead1Ks=dptScsiStatsDevRead1Ks, CachingModule=CachingModule, dptScsiHbaExclusionPeriodEnd=dptScsiHbaExclusionPeriodEnd, dptScsiDevLinkedCmds=dptScsiDevLinkedCmds, dptScsiArrMemberEntry=dptScsiArrMemberEntry, dptHbaTemperatureHighTrap=dptHbaTemperatureHighTrap, dptScsiHbaEntry=dptScsiHbaEntry, DeviceType=DeviceType, dptScsiSysEngineSignature=dptScsiSysEngineSignature, dptScsiBusTable=dptScsiBusTable, dptScsiDevSynchronous=dptScsiDevSynchronous, dptScsiHbaSerialNumber=dptScsiHbaSerialNumber, dptScsiHbaExclusionPeriodStart=dptScsiHbaExclusionPeriodStart, dptHbaEccRAMErrorNotFoundTrap=dptHbaEccRAMErrorNotFoundTrap, dptScsiHbaGeneralStatus=dptScsiHbaGeneralStatus, dptScsiArrEntry=dptScsiArrEntry, dptScsiDevSmartStatusOk=dptScsiDevSmartStatusOk, dptScsiHbaCachingModule=dptScsiHbaCachingModule, dptScsiBusEntry=dptScsiBusEntry, dptHbaAuxVoltageNormalTrap=dptHbaAuxVoltageNormalTrap, dptScsiStatsDevWriteBacks=dptScsiStatsDevWriteBacks, MemoryBankSize=MemoryBankSize, dptScsiStatsHbaCacheDirtyPages=dptScsiStatsHbaCacheDirtyPages, dptScsiBusType=dptScsiBusType, dptScsiDevDriveLockingOn=dptScsiDevDriveLockingOn, dptScsiDevSCAM=dptScsiDevSCAM, ScsiBusType=ScsiBusType, dptScsiBusHbaScsiId=dptScsiBusHbaScsiId, dptScsiEventInfo=dptScsiEventInfo, dptScsiHbaFirmware=dptScsiHbaFirmware, dptScsiBusHbaTermPower=dptScsiBusHbaTermPower, SoftwareType=SoftwareType, dptScsiDevRemovable=dptScsiDevRemovable, dptHbaEccRAMErrorCorrectedTrap=dptHbaEccRAMErrorCorrectedTrap, dpt=dpt)
