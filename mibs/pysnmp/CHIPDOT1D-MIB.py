#
# PySNMP MIB module CHIPDOT1D-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHIPDOT1D-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:31:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
DisplayString, = mibBuilder.importSymbols("RFC1155-SMI", "DisplayString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, Integer32, Unsigned32, MibIdentifier, IpAddress, Counter64, Bits, ObjectIdentity, TimeTicks, Counter32, Gauge32, ModuleIdentity, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "Integer32", "Unsigned32", "MibIdentifier", "IpAddress", "Counter64", "Bits", "ObjectIdentity", "TimeTicks", "Counter32", "Gauge32", "ModuleIdentity", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(Integer32):
    pass

chipcom = MibIdentifier((1, 3, 6, 1, 4, 1, 49))
chipmib02 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2))
chipGen = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 1))
chipEcho = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 2))
chipProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3))
chipExperiment = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4))
chipTTY = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 5))
chipTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 6))
chipDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 7))
online = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1))
oebm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 2))
midnight = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 3))
workGroupHub = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4))
emm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 5))
chipBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 6))
trmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 7))
fmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 8))
focus1 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 9))
oeim = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 10))
chipExpTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1))
dot1dBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 14))
dot5 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1))
olAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1))
olConc = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2))
olEnv = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3))
olModules = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4))
olNets = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5))
olGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6))
olAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7))
olSpecMods = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4))
ol50nnMCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3))
ol51nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4))
ol51nnMFIB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5))
ol51nnMUTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6))
ol51nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7))
ol51nnMBNC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8))
ol51nnBEE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9))
ol51nnRES = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10))
ol51nnREE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11))
ol51nnMAUIF = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12))
ol51nnMAUIM = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13))
ol5208MTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14))
ol51nnMFP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15))
ol51nnMFBP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16))
ol51nnMTPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17))
ol51nnMTPPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18))
ol52nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19))
ol52nnMFR = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20))
ol51nnMTS = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21))
ol51nnMFL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22))
ol50nnMRCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23))
ol51nnMFB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24))
ol53nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25))
ol53nnMFBMIC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26))
ol53nnMFIBST = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27))
ol53nnMSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28))
ol51nnMTPCL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29))
ol52nnBTT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30))
ol51nnIx = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31))
ol52nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32))
ol50nnMHCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33))
olNet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1))
olEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2))
olTRnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3))
olFDDInet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4))
hubSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 1))
hardwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 2))
softwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 3))
hubGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 4))
boardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 5))
portGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 6))
alarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 7))
olThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1))
olThreshControl = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1))
chipBridgeSideSwitchMode = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chipBridgeSideSwitchMode.setStatus('mandatory')
dot1dBase = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 1))
dot1dStp = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2))
dot1dTp = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 4))
dot1dStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 5))
dot1dBaseBridgeAddress = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBaseBridgeAddress.setStatus('mandatory')
dot1dBaseNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBaseNumPorts.setStatus('mandatory')
dot1dBaseType = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparent-only", 2), ("sourceroute-only", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBaseType.setStatus('mandatory')
dot1dBasePortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 1, 4), )
if mibBuilder.loadTexts: dot1dBasePortTable.setStatus('mandatory')
dot1dBasePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 1, 4, 1), ).setIndexNames((0, "CHIPDOT1D-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: dot1dBasePortEntry.setStatus('mandatory')
dot1dBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBasePort.setStatus('mandatory')
dot1dBasePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBasePortIfIndex.setStatus('mandatory')
dot1dBasePortCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 1, 4, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBasePortCircuit.setStatus('mandatory')
dot1dBasePortDelayExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBasePortDelayExceededDiscards.setStatus('mandatory')
dot1dBasePortMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBasePortMtuExceededDiscards.setStatus('mandatory')
dot1dStpProtocolSpecification = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpProtocolSpecification.setStatus('mandatory')
dot1dStpPriority = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpPriority.setStatus('mandatory')
dot1dStpTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpTimeSinceTopologyChange.setStatus('mandatory')
dot1dStpTopChanges = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpTopChanges.setStatus('mandatory')
dot1dStpDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpDesignatedRoot.setStatus('mandatory')
dot1dStpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpRootCost.setStatus('mandatory')
dot1dStpRootPort = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpRootPort.setStatus('mandatory')
dot1dStpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 8), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpMaxAge.setStatus('mandatory')
dot1dStpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 9), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpHelloTime.setStatus('mandatory')
dot1dStpHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpHoldTime.setStatus('mandatory')
dot1dStpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpForwardDelay.setStatus('mandatory')
dot1dStpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 12), Timeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpBridgeMaxAge.setStatus('mandatory')
dot1dStpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 13), Timeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpBridgeHelloTime.setStatus('mandatory')
dot1dStpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 14), Timeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpBridgeForwardDelay.setStatus('mandatory')
dot1dStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 15), )
if mibBuilder.loadTexts: dot1dStpPortTable.setStatus('mandatory')
dot1dStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 15, 1), ).setIndexNames((0, "CHIPDOT1D-MIB", "dot1dStpPort"))
if mibBuilder.loadTexts: dot1dStpPortEntry.setStatus('mandatory')
dot1dStpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpPort.setStatus('mandatory')
dot1dStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 15, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpPortPriority.setStatus('mandatory')
dot1dStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpPortState.setStatus('mandatory')
dot1dStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpPortEnable.setStatus('mandatory')
dot1dStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 15, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpPortPathCost.setStatus('mandatory')
dot1dStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 15, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpPortDesignatedRoot.setStatus('mandatory')
dot1dStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpPortDesignatedCost.setStatus('mandatory')
dot1dStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 15, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpPortDesignatedBridge.setStatus('mandatory')
dot1dStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 15, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpPortDesignatedPort.setStatus('mandatory')
dot1dStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 2, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpPortForwardTransitions.setStatus('mandatory')
dot1dTpLearnedEntryDiscards = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpLearnedEntryDiscards.setStatus('mandatory')
dot1dTpAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dTpAgingTime.setStatus('mandatory')
dot1dTpPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 4, 4), )
if mibBuilder.loadTexts: dot1dTpPortTable.setStatus('mandatory')
dot1dTpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 4, 4, 1), ).setIndexNames((0, "CHIPDOT1D-MIB", "dot1dTpPort"))
if mibBuilder.loadTexts: dot1dTpPortEntry.setStatus('mandatory')
dot1dTpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPort.setStatus('mandatory')
dot1dTpPortMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPortMaxInfo.setStatus('mandatory')
dot1dTpPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPortInFrames.setStatus('mandatory')
dot1dTpPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPortOutFrames.setStatus('mandatory')
dot1dTpPortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 14, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPortInDiscards.setStatus('mandatory')
newRoot = NotificationType((1, 3, 6, 1, 4, 1, 49, 2, 4, 14) + (0,1))
topologyChange = NotificationType((1, 3, 6, 1, 4, 1, 49, 2, 4, 14) + (0,2))
mibBuilder.exportSymbols("CHIPDOT1D-MIB", MacAddress=MacAddress, dot1dBasePortCircuit=dot1dBasePortCircuit, ol51nnIx=ol51nnIx, chipTFTP=chipTFTP, ol51nnMMGT=ol51nnMMGT, dot1dTpPortInDiscards=dot1dTpPortInDiscards, dot1dStpBridgeForwardDelay=dot1dStpBridgeForwardDelay, online=online, dot1dStpProtocolSpecification=dot1dStpProtocolSpecification, olSpecMods=olSpecMods, midnight=midnight, dot1dStpBridgeMaxAge=dot1dStpBridgeMaxAge, ol51nnMTP=ol51nnMTP, dot1dStpPortDesignatedBridge=dot1dStpPortDesignatedBridge, boardGroup=boardGroup, dot1dBaseType=dot1dBaseType, ol52nnMMGT=ol52nnMMGT, dot1dBaseNumPorts=dot1dBaseNumPorts, ol53nnMSTP=ol53nnMSTP, dot1dBasePortTable=dot1dBasePortTable, dot1dBridge=dot1dBridge, ol50nnMCTL=ol50nnMCTL, chipBridgeSideSwitchMode=chipBridgeSideSwitchMode, dot1dTpPort=dot1dTpPort, ol51nnMAUIF=ol51nnMAUIF, ol51nnMFBP=ol51nnMFBP, chipBridge=chipBridge, ol53nnMMGT=ol53nnMMGT, dot1dStpPortState=dot1dStpPortState, ol51nnMTPCL=ol51nnMTPCL, dot1dStpPortPriority=dot1dStpPortPriority, dot1dTpAgingTime=dot1dTpAgingTime, olTRnet=olTRnet, dot1dBasePort=dot1dBasePort, chipcom=chipcom, emm=emm, dot1dStatic=dot1dStatic, dot1dBasePortDelayExceededDiscards=dot1dBasePortDelayExceededDiscards, dot1dStpBridgeHelloTime=dot1dStpBridgeHelloTime, chipTTY=chipTTY, dot1dBaseBridgeAddress=dot1dBaseBridgeAddress, dot1dStpForwardDelay=dot1dStpForwardDelay, olNets=olNets, ol51nnMFB=ol51nnMFB, topologyChange=topologyChange, ol53nnMFIBST=ol53nnMFIBST, dot1dBasePortEntry=dot1dBasePortEntry, ol52nnMTP=ol52nnMTP, ol51nnBEE=ol51nnBEE, dot1dTp=dot1dTp, ol51nnMBNC=ol51nnMBNC, dot1dStpPortTable=dot1dStpPortTable, chipProducts=chipProducts, chipExperiment=chipExperiment, ol52nnMFR=ol52nnMFR, dot1dStpMaxAge=dot1dStpMaxAge, dot1dBasePortMtuExceededDiscards=dot1dBasePortMtuExceededDiscards, ol51nnMTPL=ol51nnMTPL, olFDDInet=olFDDInet, dot1dStpPortDesignatedRoot=dot1dStpPortDesignatedRoot, dot1dStpPort=dot1dStpPort, ol51nnMTS=ol51nnMTS, dot1dStpTopChanges=dot1dStpTopChanges, chipDownload=chipDownload, dot1dStpHoldTime=dot1dStpHoldTime, dot1dTpPortOutFrames=dot1dTpPortOutFrames, focus1=focus1, dot1dBase=dot1dBase, workGroupHub=workGroupHub, oebm=oebm, trmm=trmm, hubGroup=hubGroup, olAlarm=olAlarm, ol50nnMRCTL=ol50nnMRCTL, dot1dStpTimeSinceTopologyChange=dot1dStpTimeSinceTopologyChange, oeim=oeim, olAgents=olAgents, dot1dTpPortMaxInfo=dot1dTpPortMaxInfo, chipExpTokenRing=chipExpTokenRing, ol52nnBTT=ol52nnBTT, BridgeId=BridgeId, dot1dStpPriority=dot1dStpPriority, dot1dStpRootPort=dot1dStpRootPort, hubSysGroup=hubSysGroup, ol51nnMFIB=ol51nnMFIB, ol51nnREE=ol51nnREE, ol51nnMFP=ol51nnMFP, olThreshControl=olThreshControl, dot1dStpPortEnable=dot1dStpPortEnable, ol51nnMTPPL=ol51nnMTPPL, ol51nnRES=ol51nnRES, dot1dBasePortIfIndex=dot1dBasePortIfIndex, ol51nnMUTP=ol51nnMUTP, dot1dStpHelloTime=dot1dStpHelloTime, alarmGroup=alarmGroup, olEnet=olEnet, Timeout=Timeout, dot1dTpPortEntry=dot1dTpPortEntry, dot1dStpPortDesignatedPort=dot1dStpPortDesignatedPort, olEnv=olEnv, dot5=dot5, ol5208MTP=ol5208MTP, dot1dStpDesignatedRoot=dot1dStpDesignatedRoot, dot1dStpPortForwardTransitions=dot1dStpPortForwardTransitions, olGroups=olGroups, dot1dStpPortPathCost=dot1dStpPortPathCost, olNet=olNet, chipGen=chipGen, dot1dStp=dot1dStp, dot1dTpLearnedEntryDiscards=dot1dTpLearnedEntryDiscards, ol53nnMFBMIC=ol53nnMFBMIC, dot1dStpRootCost=dot1dStpRootCost, newRoot=newRoot, dot1dTpPortTable=dot1dTpPortTable, chipEcho=chipEcho, fmm=fmm, chipmib02=chipmib02, dot1dStpPortEntry=dot1dStpPortEntry, olModules=olModules, dot1dStpPortDesignatedCost=dot1dStpPortDesignatedCost, ol51nnMFL=ol51nnMFL, ol51nnMAUIM=ol51nnMAUIM, ol50nnMHCTL=ol50nnMHCTL, softwareGroup=softwareGroup, olConc=olConc, hardwareGroup=hardwareGroup, portGroup=portGroup, dot1dTpPortInFrames=dot1dTpPortInFrames, olThresh=olThresh)
