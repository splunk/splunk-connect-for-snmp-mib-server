#
# PySNMP MIB module CXCFG-IPX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXCFG-IPX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:16:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
Alias, cxIpx = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "cxIpx")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Gauge32, ObjectIdentity, Unsigned32, TimeTicks, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, Counter32, Integer32, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "ObjectIdentity", "Unsigned32", "TimeTicks", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "Counter32", "Integer32", "Counter64", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cxCfgIpx = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1))
class NetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

cxCfgIpxNumClockTicksPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxNumClockTicksPerSecond.setStatus('mandatory')
cxCfgIpxPortTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2), )
if mibBuilder.loadTexts: cxCfgIpxPortTable.setStatus('mandatory')
cxCfgIpxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1), ).setIndexNames((0, "CXCFG-IPX-MIB", "cxCfgIpxPort"))
if mibBuilder.loadTexts: cxCfgIpxPortEntry.setStatus('mandatory')
cxCfgIpxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCfgIpxPort.setStatus('mandatory')
cxCfgIpxPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCfgIpxPortIfIndex.setStatus('mandatory')
cxCfgIpxPortSubnetworkSAPAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortSubnetworkSAPAlias.setStatus('mandatory')
cxCfgIpxPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortState.setStatus('mandatory')
cxCfgIpxPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortRowStatus.setStatus('mandatory')
cxCfgIpxPortTransportTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortTransportTime.setStatus('mandatory')
cxCfgIpxPortMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortMaxHops.setStatus('mandatory')
cxCfgIpxPortIntNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 8), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortIntNetNum.setStatus('mandatory')
cxCfgIpxPortPerSapBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortPerSapBcast.setStatus('mandatory')
cxCfgIpxPortPerRipBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortPerRipBcast.setStatus('mandatory')
cxCfgIpxPortSapBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortSapBcast.setStatus('mandatory')
cxCfgIpxPortRipBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortRipBcast.setStatus('mandatory')
cxCfgIpxPortDiagPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortDiagPackets.setStatus('mandatory')
cxCfgIpxPortPerRipTxTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortPerRipTxTimer.setStatus('mandatory')
cxCfgIpxPortPerSapTxTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortPerSapTxTimer.setStatus('mandatory')
cxCfgIpxPortRipAgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortRipAgeTimer.setStatus('mandatory')
cxCfgIpxPortSapAgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortSapAgeTimer.setStatus('mandatory')
cxCfgIpxPortFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("raw-802-3", 1), ("ethernet-II", 2), ("llc-802-2", 3), ("snap", 4))).clone('raw-802-3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortFrameType.setStatus('mandatory')
cxCfgIpxPortWatchSpoof = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortWatchSpoof.setStatus('mandatory')
cxCfgIpxPortSpxWatchSpoof = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortSpxWatchSpoof.setStatus('mandatory')
cxCfgIpxPortSerialSpoof = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortSerialSpoof.setStatus('mandatory')
cxCfgIpxPortSRSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxCfgIpxPortSRSupport.setStatus('mandatory')
cxCfgIpxMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 13, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxCfgIpxMibLevel.setStatus('mandatory')
mibBuilder.exportSymbols("CXCFG-IPX-MIB", cxCfgIpxPortSapBcast=cxCfgIpxPortSapBcast, NetNumber=NetNumber, cxCfgIpxPortSubnetworkSAPAlias=cxCfgIpxPortSubnetworkSAPAlias, cxCfgIpxNumClockTicksPerSecond=cxCfgIpxNumClockTicksPerSecond, cxCfgIpxPortFrameType=cxCfgIpxPortFrameType, cxCfgIpxPortTable=cxCfgIpxPortTable, cxCfgIpxPortSRSupport=cxCfgIpxPortSRSupport, cxCfgIpxPortPerRipBcast=cxCfgIpxPortPerRipBcast, cxCfgIpxMibLevel=cxCfgIpxMibLevel, cxCfgIpxPortRipAgeTimer=cxCfgIpxPortRipAgeTimer, cxCfgIpxPort=cxCfgIpxPort, cxCfgIpxPortRowStatus=cxCfgIpxPortRowStatus, cxCfgIpxPortWatchSpoof=cxCfgIpxPortWatchSpoof, cxCfgIpxPortPerSapTxTimer=cxCfgIpxPortPerSapTxTimer, cxCfgIpxPortDiagPackets=cxCfgIpxPortDiagPackets, cxCfgIpxPortTransportTime=cxCfgIpxPortTransportTime, cxCfgIpxPortIfIndex=cxCfgIpxPortIfIndex, cxCfgIpxPortSapAgeTimer=cxCfgIpxPortSapAgeTimer, cxCfgIpxPortPerRipTxTimer=cxCfgIpxPortPerRipTxTimer, cxCfgIpxPortPerSapBcast=cxCfgIpxPortPerSapBcast, cxCfgIpxPortState=cxCfgIpxPortState, cxCfgIpx=cxCfgIpx, cxCfgIpxPortEntry=cxCfgIpxPortEntry, cxCfgIpxPortRipBcast=cxCfgIpxPortRipBcast, cxCfgIpxPortSpxWatchSpoof=cxCfgIpxPortSpxWatchSpoof, cxCfgIpxPortMaxHops=cxCfgIpxPortMaxHops, cxCfgIpxPortSerialSpoof=cxCfgIpxPortSerialSpoof, cxCfgIpxPortIntNetNum=cxCfgIpxPortIntNetNum)
