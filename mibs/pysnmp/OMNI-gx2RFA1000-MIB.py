#
# PySNMP MIB module OMNI-gx2RFA1000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2RFA1000-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:24:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
gx2Rfa1000, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Rfa1000")
trapNetworkElemAlarmStatus, trapChangedValueInteger, trapChangedObjectId, trapNetworkElemOperState, trapChangedValueDisplayString, trapNETrapLastTrapTimeStamp, trapNetworkElemSerialNum, trapNetworkElemAdminState, trapNetworkElemAvailStatus, trapText, trapNetworkElemModelNumber, trapPerceivedSeverity, trapIdentifier = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus", "trapChangedValueInteger", "trapChangedObjectId", "trapNetworkElemOperState", "trapChangedValueDisplayString", "trapNETrapLastTrapTimeStamp", "trapNetworkElemSerialNum", "trapNetworkElemAdminState", "trapNetworkElemAvailStatus", "trapText", "trapNetworkElemModelNumber", "trapPerceivedSeverity", "trapIdentifier")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, ObjectIdentity, IpAddress, Counter64, Gauge32, TimeTicks, Integer32, Counter32, MibIdentifier, ModuleIdentity, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "IpAddress", "Counter64", "Gauge32", "TimeTicks", "Integer32", "Counter32", "MibIdentifier", "ModuleIdentity", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class Float(Counter32):
    pass

gx2Rfa1000Descriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 1))
gx2Rfa1000AnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2), )
if mibBuilder.loadTexts: gx2Rfa1000AnalogTable.setStatus('mandatory')
gx2Rfa1000AnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1), ).setIndexNames((0, "OMNI-gx2RFA1000-MIB", "rfagx2Rfa1000AnalogTableIndex"))
if mibBuilder.loadTexts: gx2Rfa1000AnalogEntry.setStatus('mandatory')
gx2Rfa1000DigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 3), )
if mibBuilder.loadTexts: gx2Rfa1000DigitalTable.setStatus('mandatory')
gx2Rfa1000DigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 3, 2), ).setIndexNames((0, "OMNI-gx2RFA1000-MIB", "rfagx2Rfa1000DigitalTableIndex"))
if mibBuilder.loadTexts: gx2Rfa1000DigitalEntry.setStatus('mandatory')
gx2Rfa1000StatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4), )
if mibBuilder.loadTexts: gx2Rfa1000StatusTable.setStatus('mandatory')
gx2Rfa1000StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3), ).setIndexNames((0, "OMNI-gx2RFA1000-MIB", "rfagx2Rfa1000StatusTableIndex"))
if mibBuilder.loadTexts: gx2Rfa1000StatusEntry.setStatus('mandatory')
gx2Rfa1000FactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 5), )
if mibBuilder.loadTexts: gx2Rfa1000FactoryTable.setStatus('mandatory')
gx2Rfa1000FactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 5, 4), ).setIndexNames((0, "OMNI-gx2RFA1000-MIB", "rfagx2Rfa1000FactoryTableIndex"))
if mibBuilder.loadTexts: gx2Rfa1000FactoryEntry.setStatus('mandatory')
gx2Rfa1000HoldTimeTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 6), )
if mibBuilder.loadTexts: gx2Rfa1000HoldTimeTable.setStatus('mandatory')
gx2Rfa1000HoldTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 6, 5), ).setIndexNames((0, "OMNI-gx2RFA1000-MIB", "gx2Rfa1000HoldTimeTableIndex"), (0, "OMNI-gx2RFA1000-MIB", "gx2Rfa1000HoldTimeSpecIndex"))
if mibBuilder.loadTexts: gx2Rfa1000HoldTimeEntry.setStatus('mandatory')
rfagx2Rfa1000AnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfagx2Rfa1000AnalogTableIndex.setStatus('mandatory')
rfalabelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfalabelModTemp.setStatus('optional')
rfauomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfauomModTemp.setStatus('optional')
rfamajorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfamajorHighModTemp.setStatus('mandatory')
rfamajorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfamajorLowModTemp.setStatus('mandatory')
rfaminorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfaminorHighModTemp.setStatus('mandatory')
rfaminorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfaminorLowModTemp.setStatus('mandatory')
rfacurrentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfacurrentValueModTemp.setStatus('mandatory')
rfastateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfastateFlagModTemp.setStatus('mandatory')
rfaminValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfaminValueModTemp.setStatus('mandatory')
rfamaxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfamaxValueModTemp.setStatus('mandatory')
rfaalarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfaalarmStateModTemp.setStatus('mandatory')
rfalabelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfalabelFanCurrent.setStatus('optional')
rfauomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfauomFanCurrent.setStatus('optional')
rfamajorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfamajorHighFanCurrent.setStatus('mandatory')
rfamajorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfamajorLowFanCurrent.setStatus('mandatory')
rfaminorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfaminorHighFanCurrent.setStatus('obsolete')
rfaminorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfaminorLowFanCurrent.setStatus('obsolete')
rfacurrentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 19), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfacurrentValueFanCurrent.setStatus('mandatory')
rfastateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfastateFlagFanCurrent.setStatus('mandatory')
rfaminValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfaminValueFanCurrent.setStatus('mandatory')
rfamaxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfamaxValueFanCurrent.setStatus('mandatory')
rfaalarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfaalarmStateFanCurrent.setStatus('mandatory')
rfalabel12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfalabel12Volt.setStatus('optional')
rfauom12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfauom12Volt.setStatus('optional')
rfamajorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfamajorHigh12Volt.setStatus('mandatory')
rfamajorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfamajorLow12Volt.setStatus('mandatory')
rfaminorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfaminorHigh12Volt.setStatus('mandatory')
rfaminorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfaminorLow12Volt.setStatus('mandatory')
rfacurrentValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfacurrentValue12Volt.setStatus('mandatory')
rfastateFlag12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfastateFlag12Volt.setStatus('mandatory')
rfaminValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfaminValue12Volt.setStatus('mandatory')
rfamaxValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfamaxValue12Volt.setStatus('mandatory')
rfaalarmState12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfaalarmState12Volt.setStatus('mandatory')
rfagx2Rfa1000DigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfagx2Rfa1000DigitalTableIndex.setStatus('mandatory')
rfalabelSlopeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfalabelSlopeSetting.setStatus('optional')
rfaenumSlopeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfaenumSlopeSetting.setStatus('optional')
rfavalueSlopeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("db1point0", 1), ("db1point5", 2), ("db2point0", 3), ("db2point5", 4), ("db3point0", 5), ("db3point5", 6), ("db4point0", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfavalueSlopeSetting.setStatus('mandatory')
rfastateFlagSlopeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfastateFlagSlopeSetting.setStatus('mandatory')
rfalabelAttnSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfalabelAttnSetting.setStatus('optional')
rfaenumAttnSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfaenumAttnSetting.setStatus('optional')
rfavalueAttnSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("db0point00", 1), ("db0point25", 2), ("db0point50", 3), ("db0point75", 4), ("db1point00", 5), ("db1point25", 6), ("db1point50", 7), ("db1point75", 8), ("db2point00", 9), ("db2point25", 10), ("db2point50", 11), ("db2point75", 12), ("db3point00", 13), ("db3point25", 14), ("db3point50", 15), ("db3point75", 16), ("db4point00", 17), ("db4point25", 18), ("db4point50", 19), ("db4point75", 20), ("db5point00", 21)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfavalueAttnSetting.setStatus('mandatory')
rfastateFlagAttnSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfastateFlagAttnSetting.setStatus('mandatory')
rfalabelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfalabelFactoryDefault.setStatus('optional')
rfaenumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfaenumFactoryDefault.setStatus('optional')
rfavalueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfavalueFactoryDefault.setStatus('mandatory')
rfastateFlagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfastateFlagFactoryDefault.setStatus('mandatory')
rfagx2Rfa1000StatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfagx2Rfa1000StatusTableIndex.setStatus('mandatory')
rfalabelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfalabelBoot.setStatus('optional')
rfavalueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfavalueBoot.setStatus('mandatory')
rfastateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfastateflagBoot.setStatus('mandatory')
rfalabelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfalabelFlash.setStatus('optional')
rfavalueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfavalueFlash.setStatus('mandatory')
rfastateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfastateflagFlash.setStatus('mandatory')
rfalabelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfalabelFactoryDataCRC.setStatus('optional')
rfavalueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfavalueFactoryDataCRC.setStatus('mandatory')
rfastateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfastateflagFactoryDataCRC.setStatus('mandatory')
rfalabelAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfalabelAlarmDataCRC.setStatus('optional')
rfavalueAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfavalueAlarmDataCRC.setStatus('mandatory')
rfastateflagAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfastateflagAlarmDataCRC.setStatus('mandatory')
rfalabelSlopeCalDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfalabelSlopeCalDataCRC.setStatus('optional')
rfavalueSlopeCalDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfavalueSlopeCalDataCRC.setStatus('mandatory')
rfastateflagSlopeCalDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfastateflagSlopeCalDataCRC.setStatus('mandatory')
rfalabelAttnCalDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfalabelAttnCalDataCRC.setStatus('optional')
rfavalueAttnCalDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfavalueAttnCalDataCRC.setStatus('mandatory')
rfastateflagAttnCalDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfastateflagAttnCalDataCRC.setStatus('mandatory')
rfagx2Rfa1000FactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfagx2Rfa1000FactoryTableIndex.setStatus('mandatory')
rfabootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfabootControlByte.setStatus('mandatory')
rfabootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfabootStatusByte.setStatus('mandatory')
rfabank0CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfabank0CRC.setStatus('mandatory')
rfabank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfabank1CRC.setStatus('mandatory')
rfaprgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfaprgEEPROMByte.setStatus('mandatory')
rfafactoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfafactoryCRC.setStatus('mandatory')
rfacalculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("factory", 1), ("calibration", 2), ("alarmdata", 3), ("calSetting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfacalculateCRC.setStatus('obsolete')
rfahourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfahourMeter.setStatus('mandatory')
rfaflashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfaflashPrgCntA.setStatus('mandatory')
rfaflashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfaflashPrgCntB.setStatus('mandatory')
rfafwRev0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfafwRev0.setStatus('mandatory')
rfafwRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfafwRev1.setStatus('mandatory')
gx2Rfa1000HoldTimeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rfa1000HoldTimeTableIndex.setStatus('mandatory')
gx2Rfa1000HoldTimeSpecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 6, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rfa1000HoldTimeSpecIndex.setStatus('mandatory')
gx2Rfa1000HoldTimeData = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22, 6, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gx2Rfa1000HoldTimeData.setStatus('mandatory')
trapRFA1000ConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRFA1000ConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRFA1000ModuleTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRFA1000FanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRFA1000Plus12CurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRFA1000Boot0Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRFA1000Boot1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRFA1000FlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRFA1000AlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRFA1000FactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRFA1000SlopeCalDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRFA1000AttnCalDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRFA1000ResetFacDefault = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 22) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2RFA1000-MIB", rfamaxValueModTemp=rfamaxValueModTemp, gx2Rfa1000StatusEntry=gx2Rfa1000StatusEntry, gx2Rfa1000HoldTimeTable=gx2Rfa1000HoldTimeTable, rfastateFlagSlopeSetting=rfastateFlagSlopeSetting, rfastateflagFlash=rfastateflagFlash, rfavalueFactoryDefault=rfavalueFactoryDefault, trapRFA1000Boot1Alarm=trapRFA1000Boot1Alarm, trapRFA1000ConfigChangeDisplayString=trapRFA1000ConfigChangeDisplayString, trapRFA1000FlashAlarm=trapRFA1000FlashAlarm, rfamajorLow12Volt=rfamajorLow12Volt, rfastateFlagFactoryDefault=rfastateFlagFactoryDefault, rfafwRev1=rfafwRev1, rfaenumFactoryDefault=rfaenumFactoryDefault, rfastateFlagAttnSetting=rfastateFlagAttnSetting, rfaflashPrgCntA=rfaflashPrgCntA, trapRFA1000Boot0Alarm=trapRFA1000Boot0Alarm, rfagx2Rfa1000FactoryTableIndex=rfagx2Rfa1000FactoryTableIndex, rfauomModTemp=rfauomModTemp, trapRFA1000FanCurrentAlarm=trapRFA1000FanCurrentAlarm, rfaalarmStateFanCurrent=rfaalarmStateFanCurrent, rfamaxValue12Volt=rfamaxValue12Volt, rfabank0CRC=rfabank0CRC, rfavalueSlopeCalDataCRC=rfavalueSlopeCalDataCRC, rfabootStatusByte=rfabootStatusByte, trapRFA1000AlarmDataCRCAlarm=trapRFA1000AlarmDataCRCAlarm, rfaflashPrgCntB=rfaflashPrgCntB, rfaminorLowFanCurrent=rfaminorLowFanCurrent, rfalabelAlarmDataCRC=rfalabelAlarmDataCRC, trapRFA1000ModuleTemperatureAlarm=trapRFA1000ModuleTemperatureAlarm, gx2Rfa1000FactoryEntry=gx2Rfa1000FactoryEntry, rfagx2Rfa1000DigitalTableIndex=rfagx2Rfa1000DigitalTableIndex, rfaminorLowModTemp=rfaminorLowModTemp, rfamajorLowModTemp=rfamajorLowModTemp, rfauom12Volt=rfauom12Volt, Float=Float, rfalabelBoot=rfalabelBoot, rfalabelFlash=rfalabelFlash, rfafwRev0=rfafwRev0, rfavalueSlopeSetting=rfavalueSlopeSetting, rfaalarmStateModTemp=rfaalarmStateModTemp, rfahourMeter=rfahourMeter, rfaminValue12Volt=rfaminValue12Volt, rfaminorHighModTemp=rfaminorHighModTemp, rfaminValueFanCurrent=rfaminValueFanCurrent, rfaenumAttnSetting=rfaenumAttnSetting, trapRFA1000AttnCalDataCRCAlarm=trapRFA1000AttnCalDataCRCAlarm, trapRFA1000FactoryDataCRCAlarm=trapRFA1000FactoryDataCRCAlarm, rfavalueFactoryDataCRC=rfavalueFactoryDataCRC, rfaenumSlopeSetting=rfaenumSlopeSetting, rfastateFlagModTemp=rfastateFlagModTemp, rfalabelModTemp=rfalabelModTemp, rfaprgEEPROMByte=rfaprgEEPROMByte, rfastateflagAlarmDataCRC=rfastateflagAlarmDataCRC, gx2Rfa1000FactoryTable=gx2Rfa1000FactoryTable, rfagx2Rfa1000StatusTableIndex=rfagx2Rfa1000StatusTableIndex, rfavalueBoot=rfavalueBoot, rfastateflagBoot=rfastateflagBoot, rfaalarmState12Volt=rfaalarmState12Volt, gx2Rfa1000DigitalEntry=gx2Rfa1000DigitalEntry, rfamaxValueFanCurrent=rfamaxValueFanCurrent, rfacurrentValueModTemp=rfacurrentValueModTemp, rfalabelFactoryDataCRC=rfalabelFactoryDataCRC, rfastateflagAttnCalDataCRC=rfastateflagAttnCalDataCRC, gx2Rfa1000HoldTimeTableIndex=gx2Rfa1000HoldTimeTableIndex, rfastateFlagFanCurrent=rfastateFlagFanCurrent, gx2Rfa1000HoldTimeData=gx2Rfa1000HoldTimeData, gx2Rfa1000HoldTimeEntry=gx2Rfa1000HoldTimeEntry, rfalabelFactoryDefault=rfalabelFactoryDefault, rfalabelSlopeCalDataCRC=rfalabelSlopeCalDataCRC, rfavalueAttnCalDataCRC=rfavalueAttnCalDataCRC, rfavalueAttnSetting=rfavalueAttnSetting, rfacurrentValueFanCurrent=rfacurrentValueFanCurrent, gx2Rfa1000Descriptor=gx2Rfa1000Descriptor, rfalabelFanCurrent=rfalabelFanCurrent, rfavalueAlarmDataCRC=rfavalueAlarmDataCRC, rfaminorHigh12Volt=rfaminorHigh12Volt, gx2Rfa1000AnalogTable=gx2Rfa1000AnalogTable, rfaminValueModTemp=rfaminValueModTemp, trapRFA1000Plus12CurrentAlarm=trapRFA1000Plus12CurrentAlarm, trapRFA1000SlopeCalDataCRCAlarm=trapRFA1000SlopeCalDataCRCAlarm, rfastateflagFactoryDataCRC=rfastateflagFactoryDataCRC, rfabootControlByte=rfabootControlByte, rfalabelAttnCalDataCRC=rfalabelAttnCalDataCRC, rfalabelAttnSetting=rfalabelAttnSetting, rfavalueFlash=rfavalueFlash, rfabank1CRC=rfabank1CRC, rfastateFlag12Volt=rfastateFlag12Volt, rfacurrentValue12Volt=rfacurrentValue12Volt, gx2Rfa1000AnalogEntry=gx2Rfa1000AnalogEntry, gx2Rfa1000DigitalTable=gx2Rfa1000DigitalTable, gx2Rfa1000StatusTable=gx2Rfa1000StatusTable, rfaminorHighFanCurrent=rfaminorHighFanCurrent, rfastateflagSlopeCalDataCRC=rfastateflagSlopeCalDataCRC, trapRFA1000ConfigChangeInteger=trapRFA1000ConfigChangeInteger, rfagx2Rfa1000AnalogTableIndex=rfagx2Rfa1000AnalogTableIndex, rfalabel12Volt=rfalabel12Volt, rfamajorHighModTemp=rfamajorHighModTemp, rfamajorHighFanCurrent=rfamajorHighFanCurrent, rfaminorLow12Volt=rfaminorLow12Volt, rfalabelSlopeSetting=rfalabelSlopeSetting, rfacalculateCRC=rfacalculateCRC, rfamajorLowFanCurrent=rfamajorLowFanCurrent, rfafactoryCRC=rfafactoryCRC, trapRFA1000ResetFacDefault=trapRFA1000ResetFacDefault, rfauomFanCurrent=rfauomFanCurrent, rfamajorHigh12Volt=rfamajorHigh12Volt, gx2Rfa1000HoldTimeSpecIndex=gx2Rfa1000HoldTimeSpecIndex)
