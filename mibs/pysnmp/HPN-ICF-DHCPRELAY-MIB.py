#
# PySNMP MIB module HPN-ICF-DHCPRELAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-DHCPRELAY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:25:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter64, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, TimeTicks, Counter32, NotificationType, IpAddress, Gauge32, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "TimeTicks", "Counter32", "NotificationType", "IpAddress", "Gauge32", "iso", "Unsigned32")
TextualConvention, DisplayString, MacAddress, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "TruthValue", "RowStatus")
hpnicfDhcpRelay = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58))
hpnicfDhcpRelay.setRevisions(('2005-06-08 00:00',))
if mibBuilder.loadTexts: hpnicfDhcpRelay.setLastUpdated('200506080000Z')
if mibBuilder.loadTexts: hpnicfDhcpRelay.setOrganization('')
hpnicfDHCPRMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1))
hpnicfDHCPRIfSelectTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 1), )
if mibBuilder.loadTexts: hpnicfDHCPRIfSelectTable.setStatus('current')
hpnicfDHCPRIfSelectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfDHCPRIfSelectEntry.setStatus('current')
hpnicfDHCPRIfSelectRelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPRIfSelectRelayMode.setStatus('current')
hpnicfDHCPRIpToGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 2), )
if mibBuilder.loadTexts: hpnicfDHCPRIpToGroupTable.setStatus('current')
hpnicfDHCPRIpToGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-DHCPRELAY-MIB", "hpnicfDHCPRIpToGroupGroupId"), (0, "HPN-ICF-DHCPRELAY-MIB", "hpnicfDHCPRIpToGroupServerIpType"), (0, "HPN-ICF-DHCPRELAY-MIB", "hpnicfDHCPRIpToGroupServerIp"))
if mibBuilder.loadTexts: hpnicfDHCPRIpToGroupEntry.setStatus('current')
hpnicfDHCPRIpToGroupGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 19)))
if mibBuilder.loadTexts: hpnicfDHCPRIpToGroupGroupId.setStatus('current')
hpnicfDHCPRIpToGroupServerIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpnicfDHCPRIpToGroupServerIpType.setStatus('current')
hpnicfDHCPRIpToGroupServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 2, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: hpnicfDHCPRIpToGroupServerIp.setStatus('current')
hpnicfDHCPRIpToGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPRIpToGroupRowStatus.setStatus('current')
hpnicfDHCPRIfToGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 3), )
if mibBuilder.loadTexts: hpnicfDHCPRIfToGroupTable.setStatus('current')
hpnicfDHCPRIfToGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfDHCPRIfToGroupEntry.setStatus('current')
hpnicfDHCPRIfToGroupGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPRIfToGroupGroupId.setStatus('current')
hpnicfDHCPRIfToGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPRIfToGroupRowStatus.setStatus('current')
hpnicfDHCPRAddrCheckTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 4), )
if mibBuilder.loadTexts: hpnicfDHCPRAddrCheckTable.setStatus('current')
hpnicfDHCPRAddrCheckEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfDHCPRAddrCheckEntry.setStatus('current')
hpnicfDHCPRAddrCheckSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPRAddrCheckSwitch.setStatus('current')
hpnicfDHCPRSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 5), )
if mibBuilder.loadTexts: hpnicfDHCPRSecurityTable.setStatus('current')
hpnicfDHCPRSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 5, 1), ).setIndexNames((0, "HPN-ICF-DHCPRELAY-MIB", "hpnicfDHCPRSecurityClientIpAddrType"), (0, "HPN-ICF-DHCPRELAY-MIB", "hpnicfDHCPRSecurityClientIpAddr"))
if mibBuilder.loadTexts: hpnicfDHCPRSecurityEntry.setStatus('current')
hpnicfDHCPRSecurityClientIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpnicfDHCPRSecurityClientIpAddrType.setStatus('current')
hpnicfDHCPRSecurityClientIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 5, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: hpnicfDHCPRSecurityClientIpAddr.setStatus('current')
hpnicfDHCPRSecurityClientMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 5, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPRSecurityClientMacAddr.setStatus('current')
hpnicfDHCPRSecurityClientProperty = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPRSecurityClientProperty.setStatus('current')
hpnicfDHCPRSecurityClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDHCPRSecurityClientRowStatus.setStatus('current')
hpnicfDHCPRStatisticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 6))
hpnicfDHCPRRxClientPktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 6, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPRRxClientPktNum.setStatus('current')
hpnicfDHCPRTxClientPktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 6, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPRTxClientPktNum.setStatus('current')
hpnicfDHCPRRxServerPktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 6, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPRRxServerPktNum.setStatus('current')
hpnicfDHCPRTxServerPktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 6, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPRTxServerPktNum.setStatus('current')
hpnicfDHCPRDiscoverPktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 6, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPRDiscoverPktNum.setStatus('current')
hpnicfDHCPRRequestPktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 6, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPRRequestPktNum.setStatus('current')
hpnicfDHCPRDeclinePktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 6, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPRDeclinePktNum.setStatus('current')
hpnicfDHCPRReleasePktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 6, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPRReleasePktNum.setStatus('current')
hpnicfDHCPRInformPktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 6, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPRInformPktNum.setStatus('current')
hpnicfDHCPROfferPktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 6, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPROfferPktNum.setStatus('current')
hpnicfDHCPRAckPktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 6, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPRAckPktNum.setStatus('current')
hpnicfDHCPRNakPktNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 6, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDHCPRNakPktNum.setStatus('current')
hpnicfDHCPRStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 6, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPRStatisticsReset.setStatus('current')
hpnicfDHCPRCycleGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 7))
hpnicfDHCPRCycleStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPRCycleStatus.setStatus('current')
hpnicfDHCPRConfigOption82Group = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 8))
hpnicfDHCPROption82Switch = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPROption82Switch.setStatus('current')
hpnicfDHCPROption82HandleStrategy = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("keep", 2), ("replace", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPROption82HandleStrategy.setStatus('current')
hpnicfDHCPRConfigOption82IfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 8, 3), )
if mibBuilder.loadTexts: hpnicfDHCPRConfigOption82IfTable.setStatus('current')
hpnicfDHCPRConfigOption82IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 8, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfDHCPRConfigOption82IfEntry.setStatus('current')
hpnicfDHCPROption82IfSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPROption82IfSwitch.setStatus('current')
hpnicfDHCPROption82IfStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("keep", 2), ("replace", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPROption82IfStrategy.setStatus('current')
hpnicfDHCPROption82IfFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("verbose", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPROption82IfFormat.setStatus('current')
hpnicfDHCPROption82IfNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("mac", 2), ("sysname", 3), ("userdefine", 4))).clone('invalid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPROption82IfNodeType.setStatus('current')
hpnicfDHCPROption82IfUsrDefString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 58, 1, 8, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDHCPROption82IfUsrDefString.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-DHCPRELAY-MIB", hpnicfDHCPRAckPktNum=hpnicfDHCPRAckPktNum, hpnicfDHCPRAddrCheckTable=hpnicfDHCPRAddrCheckTable, hpnicfDHCPRSecurityClientMacAddr=hpnicfDHCPRSecurityClientMacAddr, hpnicfDHCPROption82IfNodeType=hpnicfDHCPROption82IfNodeType, hpnicfDHCPRSecurityClientRowStatus=hpnicfDHCPRSecurityClientRowStatus, hpnicfDHCPRSecurityClientIpAddrType=hpnicfDHCPRSecurityClientIpAddrType, hpnicfDHCPRRxClientPktNum=hpnicfDHCPRRxClientPktNum, hpnicfDHCPRAddrCheckEntry=hpnicfDHCPRAddrCheckEntry, hpnicfDHCPRIpToGroupRowStatus=hpnicfDHCPRIpToGroupRowStatus, hpnicfDHCPRIfSelectRelayMode=hpnicfDHCPRIfSelectRelayMode, hpnicfDHCPRTxClientPktNum=hpnicfDHCPRTxClientPktNum, hpnicfDHCPRCycleGroup=hpnicfDHCPRCycleGroup, hpnicfDHCPRSecurityClientIpAddr=hpnicfDHCPRSecurityClientIpAddr, hpnicfDHCPRRxServerPktNum=hpnicfDHCPRRxServerPktNum, hpnicfDHCPRIfToGroupGroupId=hpnicfDHCPRIfToGroupGroupId, hpnicfDHCPRIpToGroupGroupId=hpnicfDHCPRIpToGroupGroupId, hpnicfDhcpRelay=hpnicfDhcpRelay, hpnicfDHCPRDiscoverPktNum=hpnicfDHCPRDiscoverPktNum, hpnicfDHCPRInformPktNum=hpnicfDHCPRInformPktNum, hpnicfDHCPRDeclinePktNum=hpnicfDHCPRDeclinePktNum, hpnicfDHCPRIpToGroupEntry=hpnicfDHCPRIpToGroupEntry, hpnicfDHCPRStatisticsGroup=hpnicfDHCPRStatisticsGroup, hpnicfDHCPRConfigOption82Group=hpnicfDHCPRConfigOption82Group, hpnicfDHCPRSecurityTable=hpnicfDHCPRSecurityTable, hpnicfDHCPROption82HandleStrategy=hpnicfDHCPROption82HandleStrategy, hpnicfDHCPROption82IfStrategy=hpnicfDHCPROption82IfStrategy, hpnicfDHCPROfferPktNum=hpnicfDHCPROfferPktNum, hpnicfDHCPRTxServerPktNum=hpnicfDHCPRTxServerPktNum, hpnicfDHCPRIpToGroupServerIp=hpnicfDHCPRIpToGroupServerIp, hpnicfDHCPRIfToGroupEntry=hpnicfDHCPRIfToGroupEntry, hpnicfDHCPRIfToGroupTable=hpnicfDHCPRIfToGroupTable, hpnicfDHCPROption82IfSwitch=hpnicfDHCPROption82IfSwitch, hpnicfDHCPRMibObject=hpnicfDHCPRMibObject, hpnicfDHCPRStatisticsReset=hpnicfDHCPRStatisticsReset, hpnicfDHCPRIfToGroupRowStatus=hpnicfDHCPRIfToGroupRowStatus, hpnicfDHCPROption82Switch=hpnicfDHCPROption82Switch, PYSNMP_MODULE_ID=hpnicfDhcpRelay, hpnicfDHCPRIfSelectTable=hpnicfDHCPRIfSelectTable, hpnicfDHCPRConfigOption82IfEntry=hpnicfDHCPRConfigOption82IfEntry, hpnicfDHCPRAddrCheckSwitch=hpnicfDHCPRAddrCheckSwitch, hpnicfDHCPRSecurityEntry=hpnicfDHCPRSecurityEntry, hpnicfDHCPRConfigOption82IfTable=hpnicfDHCPRConfigOption82IfTable, hpnicfDHCPROption82IfFormat=hpnicfDHCPROption82IfFormat, hpnicfDHCPRRequestPktNum=hpnicfDHCPRRequestPktNum, hpnicfDHCPRNakPktNum=hpnicfDHCPRNakPktNum, hpnicfDHCPRCycleStatus=hpnicfDHCPRCycleStatus, hpnicfDHCPRIpToGroupServerIpType=hpnicfDHCPRIpToGroupServerIpType, hpnicfDHCPRReleasePktNum=hpnicfDHCPRReleasePktNum, hpnicfDHCPROption82IfUsrDefString=hpnicfDHCPROption82IfUsrDefString, hpnicfDHCPRIfSelectEntry=hpnicfDHCPRIfSelectEntry, hpnicfDHCPRSecurityClientProperty=hpnicfDHCPRSecurityClientProperty, hpnicfDHCPRIpToGroupTable=hpnicfDHCPRIpToGroupTable)
