#
# PySNMP MIB module EICON-DIALER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EICON-DIALER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:45:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, ModuleIdentity, Counter32, NotificationType, enterprises, IpAddress, Counter64, ObjectIdentity, TimeTicks, Unsigned32, Bits, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "Counter32", "NotificationType", "enterprises", "IpAddress", "Counter64", "ObjectIdentity", "TimeTicks", "Unsigned32", "Bits", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
eicon = MibIdentifier((1, 3, 6, 1, 4, 1, 434))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2))
mibv2 = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2))
module = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 4))
class PortRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 48)

class ActionState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("done", 1), ("failed", 2), ("in-progress", 3))

class DataEncoding(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("nrz", 1), ("nrzi", 2), ("fm0", 3), ("fm1", 4))

class ClockType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("external", 1), ("internal", 2), ("ext-dpll", 3), ("int-dpll", 4))

class OnOff(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class FalseTrue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("false", 1), ("true", 2))

class DisEnable(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disable", 1), ("enable", 2))

class PrimBitRate(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("speed1200", 1), ("speed2400", 2), ("speed4800", 3), ("speed7200", 4), ("speed9600", 5), ("speed12000", 6), ("speed14400", 7), ("not-supported", 8))

class PrimCfg(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("v22bis", 1), ("v32", 2), ("v32tcm", 3), ("v32bis", 4), ("not-supported", 5))

class IsdnSpidStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("uninit", 1), ("init", 2), ("blocked", 3), ("illegal", 4))

class IsdnDnType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("unknown", 1), ("international", 2), ("national", 3), ("net-specific", 4), ("subscriber", 5), ("abbreviated", 6), ("illegal", 7))

class IsdnDnPlan(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("unknown", 1), ("isdn-numbering", 2), ("data-numbering", 3), ("private-net", 4), ("telex-numbering", 5), ("nat-numbering", 6), ("illegal", 7))

class IsdnSubType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("nsap", 1), ("user-specified", 2), ("osi", 3), ("illegal", 4))

class IsdnTnsNetId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("user-specified", 1), ("national", 2), ("international", 3), ("illegal", 4))

class IsdnTnsIdPlan(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("interlata", 2), ("data", 3), ("illegal", 4))

class IsdnCallType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("circuit-switched", 1), ("packet-switched", 2), ("nailed-packet", 3), ("circuit-spv", 4), ("fax-3", 5), ("fax-4", 6), ("btx", 7), ("teletex", 8), ("videotex", 9), ("illegal", 10))

class IsdnCallSpeed(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("speed-56k", 1), ("speed-64k", 2), ("speed-illegal", 3))

class IsdnBChannels(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("b1-channel", 1), ("b2-channel", 2), ("illegal", 3))

class IsdnAnsEnable(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2), ("enabled-illegal", 3))

class IsdnScrStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2), ("illegal", 3))

class IsdnCallOpt(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("opt", 1), ("option", 2), ("call-opt", 3))

class IsdnStoDefined(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("stored", 1))

class IsdnTeiStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unassigned", 1), ("outstanding", 2), ("assigned", 3), ("illegal", 4))

class IsdnL2State(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("null-state", 1), ("tei-unassigned", 2), ("assign-awaiting-tei", 3), ("establish-awaiting-tei", 4), ("tei-assigned", 5), ("awaiting-established", 6), ("awaiting-release", 7), ("mutiple-frame-established", 8), ("timer-recovery", 9), ("illegal", 10))

class IsdnL3State(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37))
    namedValues = NamedValues(("null-state", 1), ("call-init", 2), ("overlap-sending", 3), ("out-call-proc", 4), ("call-delivered", 5), ("undefined-state-5", 6), ("call-present", 7), ("call-received", 8), ("connect-request", 9), ("in-call-proc", 10), ("call-active", 11), ("disconnect-request", 12), ("disconnect-ind", 13), ("undefined-state-13", 14), ("call-passive", 15), ("suspend-request", 16), ("undefined-state-16", 17), ("resume-request", 18), ("undefined-state-18", 19), ("release-request", 20), ("register-request", 21), ("cancel-request", 22), ("undefined-state-22", 23), ("undefined-state-23", 24), ("undefined-state-24", 25), ("overlap-receive", 26), ("idle-state", 27), ("establish-wait", 28), ("asai-tr1-state", 29), ("u10-hold-request", 30), ("u10-transfer-request", 31), ("u10-conference-request", 32), ("u10-reconnect-request", 33), ("u10-awaiting-disc", 34), ("u10-call-on-hold", 35), ("broadcast-state", 36), ("illegal", 37))

class IsdnP3State(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("closed", 1), ("opening", 2), ("opened", 3), ("tei-establishment", 4), ("sw-activation", 5), ("activated", 6), ("deactivated", 7), ("closing", 8), ("illegal", 9))

class IsdnActState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("deactivated", 1), ("activating", 2), ("active", 3), ("call-failed", 4), ("activ-failed", 5), ("illegal", 6))

class IsdnNI1BCcState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("null-state", 1), ("idle", 2), ("ringing", 3), ("connected", 4), ("dialing", 5), ("lockout", 6), ("offhook-releasing", 7), ("onhook-releasing", 8), ("originate", 9), ("routing", 10), ("call-queued", 11), ("illegal", 12))

class IsdnTR6BCcState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("null-state", 1), ("idle", 2), ("ringing", 3), ("connecting", 4), ("connected", 5), ("lockout", 6), ("offhook-releasing", 7), ("onhook-releasing", 8), ("originate", 9), ("routing", 10), ("call-queued", 11), ("illegal", 12))

class IsdnVN3BCcState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("null-state", 1), ("idle", 2), ("ringing", 3), ("connecting", 4), ("connected", 5), ("lockout", 6), ("offhook-releasing", 7), ("onhook-releasing", 8), ("originate", 9), ("routing", 10), ("call-queued", 11), ("illegal", 12))

class IsdnNET3BCcState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("null-state", 1), ("idle", 2), ("ringing", 3), ("connecting", 4), ("connected", 5), ("lockout", 6), ("offhook-releasing", 7), ("onhook-releasing", 8), ("originate", 9), ("routingout", 10), ("call-queued", 11), ("bell-releasing", 12), ("illegal", 13))

class IsdnTPHBCcState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("null-state", 1), ("idle", 2), ("ringing", 3), ("connected", 4), ("dialing", 5), ("lockout", 6), ("offhook-releasing", 7), ("onhook-releasing", 8), ("originate", 9), ("routing", 10), ("call-queued", 11), ("illegal", 12))

dialer = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16))
dialerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 1), )
if mibBuilder.loadTexts: dialerInfoTable.setStatus('mandatory')
dialerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 1, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerInfoPortRef"))
if mibBuilder.loadTexts: dialerInfoEntry.setStatus('mandatory')
dialerInfoPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 1, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerInfoPortRef.setStatus('mandatory')
dialerInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("direct", 1), ("v25bis", 2), ("v22bis", 3), ("at-cmd", 4), ("isdn-stat", 5), ("v32bis", 6), ("none", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerInfoType.setStatus('mandatory')
dialerInfoTimeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerInfoTimeStart.setStatus('mandatory')
dialerInfoTimeConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerInfoTimeConnect.setStatus('mandatory')
dialerInfoLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerInfoLineSpeed.setStatus('mandatory')
dialerInfoDataEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 1, 1, 6), DataEncoding()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerInfoDataEncoding.setStatus('mandatory')
dialerInfoClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 1, 1, 7), ClockType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerInfoClockType.setStatus('mandatory')
dialerDirectInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 2), )
if mibBuilder.loadTexts: dialerDirectInfoTable.setStatus('mandatory')
dialerDirectInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 2, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerDirectPortRef"))
if mibBuilder.loadTexts: dialerDirectInfoEntry.setStatus('mandatory')
dialerDirectPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 2, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectPortRef.setStatus('mandatory')
dialerDirectIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rs232", 1), ("v35", 2), ("x21", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectIfType.setStatus('mandatory')
dialerDirectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leased", 1), ("dial", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectMode.setStatus('mandatory')
dialerDirectConnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectConnDelay.setStatus('mandatory')
dialerDirectRtsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectRtsDelay.setStatus('mandatory')
dialerDirectState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("closed", 1), ("opening", 2), ("answering", 3), ("delaying", 4), ("opened", 5), ("closing", 6), ("ringing", 7), ("answer-wait", 8), ("originating", 9), ("connecting", 10), ("connect-delay", 11), ("connected", 12), ("disconnecting", 13), ("remote-disc", 14), ("local-disc", 15), ("connect-req", 16), ("incomming-call", 17), ("outgoing-call", 18), ("outgoing-delay", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectState.setStatus('mandatory')
dialerDirectRs232InfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 3), )
if mibBuilder.loadTexts: dialerDirectRs232InfoTable.setStatus('mandatory')
dialerDirectRs232InfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 3, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerDirectRs232PortRef"))
if mibBuilder.loadTexts: dialerDirectRs232InfoEntry.setStatus('mandatory')
dialerDirectRs232PortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 3, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectRs232PortRef.setStatus('mandatory')
dialerDirectRs232DbounceDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectRs232DbounceDelay.setStatus('mandatory')
dialerDirectRs232DtrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 3, 1, 3), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectRs232DtrSignal.setStatus('mandatory')
dialerDirectRs232DsrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 3, 1, 4), OnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerDirectRs232DsrSignal.setStatus('mandatory')
dialerDirectRs232RiSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 3, 1, 5), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectRs232RiSignal.setStatus('mandatory')
dialerDirectX21InfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 4), )
if mibBuilder.loadTexts: dialerDirectX21InfoTable.setStatus('mandatory')
dialerDirectX21InfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 4, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerDirectX21PortRef"))
if mibBuilder.loadTexts: dialerDirectX21InfoEntry.setStatus('mandatory')
dialerDirectX21PortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 4, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectX21PortRef.setStatus('mandatory')
dialerDirectX21CtrlSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 4, 1, 2), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectX21CtrlSignal.setStatus('mandatory')
dialerDirectX21IndicSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 4, 1, 3), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerDirectX21IndicSignal.setStatus('mandatory')
dialerV25bisInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5), )
if mibBuilder.loadTexts: dialerV25bisInfoTable.setStatus('mandatory')
dialerV25bisInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerV25bisPortRef"))
if mibBuilder.loadTexts: dialerV25bisInfoEntry.setStatus('mandatory')
dialerV25bisPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisPortRef.setStatus('mandatory')
dialerV25bisPrimaryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV25bisPrimaryNum.setStatus('mandatory')
dialerV25bisSecondaryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV25bisSecondaryNum.setStatus('mandatory')
dialerV25bisAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 4), FalseTrue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV25bisAnsEnable.setStatus('mandatory')
dialerV25bisRetryAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 5), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisRetryAllowed.setStatus('mandatory')
dialerV25bisMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisMaxRetries.setStatus('mandatory')
dialerV25bisRetryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisRetryDelay.setStatus('mandatory')
dialerV25bisConnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisConnDelay.setStatus('mandatory')
dialerV25bisOnOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisOnOffDelay.setStatus('mandatory')
dialerV25bisLossDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisLossDelay.setStatus('mandatory')
dialerV25bisMinDsrOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisMinDsrOnDelay.setStatus('mandatory')
dialerV25bisRiDtrDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisRiDtrDelay.setStatus('mandatory')
dialerV25bisHangupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisHangupDelay.setStatus('mandatory')
dialerV25bisDeltaRiDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisDeltaRiDelay.setStatus('mandatory')
dialerV25bisCtsOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisCtsOnDelay.setStatus('mandatory')
dialerV25bisDtrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 16), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisDtrSignal.setStatus('mandatory')
dialerV25bisDsrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 17), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisDsrSignal.setStatus('mandatory')
dialerV25bisCtsSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 18), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisCtsSignal.setStatus('mandatory')
dialerV25bisRiSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 19), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisRiSignal.setStatus('mandatory')
dialerV25bisState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("on-hook", 1), ("ready", 2), ("dialing", 3), ("connect", 4), ("data-tran", 5), ("retrying", 6), ("ringing", 7), ("ans-start", 8), ("ans-cplt", 9), ("hanging-up", 10), ("ignore-ring", 11), ("collision", 12), ("ans-accepting", 13), ("prog-rdy", 14), ("program", 15), ("prog-ring", 16), ("prog-not-rdy", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV25bisState.setStatus('mandatory')
dialerAtCmdInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6), )
if mibBuilder.loadTexts: dialerAtCmdInfoTable.setStatus('mandatory')
dialerAtCmdInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerAtCmdPortRef"))
if mibBuilder.loadTexts: dialerAtCmdInfoEntry.setStatus('mandatory')
dialerAtCmdPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdPortRef.setStatus('mandatory')
dialerAtCmdPrimaryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerAtCmdPrimaryNum.setStatus('mandatory')
dialerAtCmdSecondaryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerAtCmdSecondaryNum.setStatus('mandatory')
dialerAtCmdAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 4), FalseTrue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerAtCmdAnsEnable.setStatus('mandatory')
dialerAtCmdRetryAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 5), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdRetryAllowed.setStatus('mandatory')
dialerAtCmdMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdMaxRetries.setStatus('mandatory')
dialerAtCmdRetryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdRetryDelay.setStatus('mandatory')
dialerAtCmdConnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdConnDelay.setStatus('mandatory')
dialerAtCmdOnOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdOnOffDelay.setStatus('mandatory')
dialerAtCmdLossDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdLossDelay.setStatus('mandatory')
dialerAtCmdMinDsrOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdMinDsrOnDelay.setStatus('mandatory')
dialerAtCmdRiDtrDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdRiDtrDelay.setStatus('mandatory')
dialerAtCmdHangupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdHangupDelay.setStatus('mandatory')
dialerAtCmdDeltaRiDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdDeltaRiDelay.setStatus('mandatory')
dialerAtCmdParity = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdParity.setStatus('mandatory')
dialerAtCmdBitsPerByte = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data7", 1), ("data8", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdBitsPerByte.setStatus('mandatory')
dialerAtCmdModemSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdModemSpeed.setStatus('mandatory')
dialerAtCmdDtrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 18), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdDtrSignal.setStatus('mandatory')
dialerAtCmdDsrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 19), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdDsrSignal.setStatus('mandatory')
dialerAtCmdRiSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 20), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdRiSignal.setStatus('mandatory')
dialerAtCmdState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("on-hook", 1), ("dialing", 2), ("answering", 3), ("ringing", 4), ("retrying", 5), ("off-hook", 6), ("hanging-up", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerAtCmdState.setStatus('mandatory')
dialerV22BisDnaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7), )
if mibBuilder.loadTexts: dialerV22BisDnaInfoTable.setStatus('mandatory')
dialerV22BisDnaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerV22BisDnaPortRef"))
if mibBuilder.loadTexts: dialerV22BisDnaInfoEntry.setStatus('mandatory')
dialerV22BisDnaPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaPortRef.setStatus('mandatory')
dialerV22BisDnaPrimaryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV22BisDnaPrimaryNum.setStatus('mandatory')
dialerV22BisDnaSecondaryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV22BisDnaSecondaryNum.setStatus('mandatory')
dialerV22BisDnaAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 4), FalseTrue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV22BisDnaAnsEnable.setStatus('mandatory')
dialerV22BisDnaRetryAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 5), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaRetryAllowed.setStatus('mandatory')
dialerV22BisDnaMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaMaxRetries.setStatus('mandatory')
dialerV22BisDnaCallProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 7), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaCallProgress.setStatus('mandatory')
dialerV22BisDnaDecadic = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 8), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaDecadic.setStatus('mandatory')
dialerV22BisDnaMakeBreakRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaMakeBreakRatio.setStatus('mandatory')
dialerV22BisDnaRetryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaRetryDelay.setStatus('mandatory')
dialerV22BisDnaMinDialDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaMinDialDelay.setStatus('mandatory')
dialerV22BisDnaWaitDialTone = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaWaitDialTone.setStatus('mandatory')
dialerV22BisDnaWaitCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaWaitCarrier.setStatus('mandatory')
dialerV22BisDnaHndshkAbortTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaHndshkAbortTimer.setStatus('mandatory')
dialerV22BisDnaGuardTone = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaGuardTone.setStatus('mandatory')
dialerV22BisDnaPulseDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaPulseDelay.setStatus('mandatory')
dialerV22BisDnaDTMFDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaDTMFDuration.setStatus('mandatory')
dialerV22BisDnaDTMFDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaDTMFDelay.setStatus('mandatory')
dialerV22BisDnaDTMFLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaDTMFLevel.setStatus('mandatory')
dialerV22BisDnaTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaTxLevel.setStatus('mandatory')
dialerV22BisDnaRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 21), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaRxLevel.setStatus('mandatory')
dialerV22BisDnaRiNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaRiNbr.setStatus('mandatory')
dialerV22BisDnaDeltaRiDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaDeltaRiDelay.setStatus('mandatory')
dialerV22BisDnaRiDtrDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaRiDtrDelay.setStatus('mandatory')
dialerV22BisDnaDsrRtsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaDsrRtsDelay.setStatus('mandatory')
dialerV22BisDnaModemSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaModemSpeed.setStatus('mandatory')
dialerV22BisDnaDtrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 27), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaDtrSignal.setStatus('mandatory')
dialerV22BisDnaDsrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 28), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaDsrSignal.setStatus('mandatory')
dialerV22BisDnaRiSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 29), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaRiSignal.setStatus('mandatory')
dialerV22BisDnaCdSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 30), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaCdSignal.setStatus('mandatory')
dialerV22BisDnaToneInd = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 31), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaToneInd.setStatus('mandatory')
dialerV22BisDnaDloInd = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 32), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaDloInd.setStatus('mandatory')
dialerV22BisDnaState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 7, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("dialing-phone", 1), ("dialing-mdm", 2), ("retrying", 3), ("ringing", 4), ("line-busy", 5), ("off-hook", 6), ("on-hook", 7), ("answering", 8), ("delaying", 9), ("voice-com", 10), ("handshaking", 11), ("wait-ringback", 12), ("initialising", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisDnaState.setStatus('mandatory')
dialerV22BisImcInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8), )
if mibBuilder.loadTexts: dialerV22BisImcInfoTable.setStatus('mandatory')
dialerV22BisImcInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerV22BisImcPortRef"))
if mibBuilder.loadTexts: dialerV22BisImcInfoEntry.setStatus('mandatory')
dialerV22BisImcPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcPortRef.setStatus('mandatory')
dialerV22BisImcPrimaryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV22BisImcPrimaryNum.setStatus('mandatory')
dialerV22BisImcSecondaryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV22BisImcSecondaryNum.setStatus('mandatory')
dialerV22BisImcAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 4), FalseTrue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV22BisImcAnsEnable.setStatus('mandatory')
dialerV22BisImcRetryAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 5), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcRetryAllowed.setStatus('mandatory')
dialerV22BisImcMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcMaxRetries.setStatus('mandatory')
dialerV22BisImcCallProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 7), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcCallProgress.setStatus('mandatory')
dialerV22BisImcDecadic = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 8), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcDecadic.setStatus('mandatory')
dialerV22BisImcMakeBreakRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcMakeBreakRatio.setStatus('mandatory')
dialerV22BisImcRetryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcRetryDelay.setStatus('mandatory')
dialerV22BisImcMinDialDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcMinDialDelay.setStatus('mandatory')
dialerV22BisImcWaitDialTone = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcWaitDialTone.setStatus('mandatory')
dialerV22BisImcWaitCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcWaitCarrier.setStatus('mandatory')
dialerV22BisImcHndshkAbortTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcHndshkAbortTimer.setStatus('mandatory')
dialerV22BisImcGuardTone = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcGuardTone.setStatus('mandatory')
dialerV22BisImcPulseDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcPulseDelay.setStatus('mandatory')
dialerV22BisImcDTMFDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcDTMFDuration.setStatus('mandatory')
dialerV22BisImcDTMFDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcDTMFDelay.setStatus('mandatory')
dialerV22BisImcDTMFLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcDTMFLevel.setStatus('mandatory')
dialerV22BisImcTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcTxLevel.setStatus('mandatory')
dialerV22BisImcRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcRxLevel.setStatus('mandatory')
dialerV22BisImcRiNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcRiNbr.setStatus('mandatory')
dialerV22BisImcDeltaRiDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcDeltaRiDelay.setStatus('mandatory')
dialerV22BisImcRiDtrDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcRiDtrDelay.setStatus('mandatory')
dialerV22BisImcDsrRtsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcDsrRtsDelay.setStatus('mandatory')
dialerV22BisImcModemSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcModemSpeed.setStatus('mandatory')
dialerV22BisImcDtrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 27), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcDtrSignal.setStatus('mandatory')
dialerV22BisImcDsrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 28), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcDsrSignal.setStatus('mandatory')
dialerV22BisImcRiSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 29), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcRiSignal.setStatus('mandatory')
dialerV22BisImcCdSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 30), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcCdSignal.setStatus('mandatory')
dialerV22BisImcToneInd = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 31), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcToneInd.setStatus('mandatory')
dialerV22BisImcDloInd = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 32), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcDloInd.setStatus('mandatory')
dialerV22BisImcLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dial", 1), ("leased", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcLineType.setStatus('mandatory')
dialerV22BisImcLeasedOpertn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("answer", 1), ("originate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcLeasedOpertn.setStatus('mandatory')
dialerV22BisImcSpeakerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcSpeakerLevel.setStatus('mandatory')
dialerV22BisImcState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 8, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("dialing-phone", 1), ("dialing-mdm", 2), ("retrying", 3), ("ringing", 4), ("line-busy", 5), ("off-hook", 6), ("on-hook", 7), ("answering", 8), ("delaying", 9), ("voice-com", 10), ("handshaking", 11), ("wait-ringback", 12), ("initialising", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV22BisImcState.setStatus('mandatory')
dialerV32BisInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9), )
if mibBuilder.loadTexts: dialerV32BisInfoTable.setStatus('mandatory')
dialerV32BisInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerV32BisPortRef"))
if mibBuilder.loadTexts: dialerV32BisInfoEntry.setStatus('mandatory')
dialerV32BisPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisPortRef.setStatus('mandatory')
dialerV32BisPrimNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV32BisPrimNum.setStatus('mandatory')
dialerV32BisSecNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV32BisSecNum.setStatus('mandatory')
dialerV32BisOverrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisOverrNum.setStatus('mandatory')
dialerV32BisCurrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCurrNum.setStatus('mandatory')
dialerV32BisPrimBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 6), PrimBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisPrimBitRate.setStatus('mandatory')
dialerV32BisSecBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 7), PrimBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisSecBitRate.setStatus('mandatory')
dialerV32BisOverrBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 8), PrimBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisOverrBitRate.setStatus('mandatory')
dialerV32BisCurrBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 9), PrimBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCurrBitRate.setStatus('mandatory')
dialerV32BisPrimConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 10), PrimCfg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisPrimConfig.setStatus('mandatory')
dialerV32BisSecConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 11), PrimCfg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisSecConfig.setStatus('mandatory')
dialerV32BisOverrConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 12), PrimCfg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisOverrConfig.setStatus('mandatory')
dialerV32BisCurrConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 13), PrimCfg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCurrConfig.setStatus('mandatory')
dialerV32BisCurrRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCurrRetry.setStatus('mandatory')
dialerV32BisRingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisRingCount.setStatus('mandatory')
dialerV32BisAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 16), FalseTrue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerV32BisAnsEnable.setStatus('mandatory')
dialerV32BisDialMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtmf", 1), ("pulse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDialMethod.setStatus('mandatory')
dialerV32BisRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 18), FalseTrue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisRetry.setStatus('mandatory')
dialerV32BisCallFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCallFailure.setStatus('mandatory')
dialerV32BisCarrierDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCarrierDetect.setStatus('mandatory')
dialerV32BisCarrierWait = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCarrierWait.setStatus('mandatory')
dialerV32BisHangupVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisHangupVerify.setStatus('mandatory')
dialerV32BisHangupSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 23), DisEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisHangupSignal.setStatus('mandatory')
dialerV32BisTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisTxLevel.setStatus('mandatory')
dialerV32BisRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisRxLevel.setStatus('mandatory')
dialerV32BisGuardTone = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisGuardTone.setStatus('mandatory')
dialerV32BisLeasedLine = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("two-w-ll", 1), ("four-w-ll", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisLeasedLine.setStatus('mandatory')
dialerV32BisLeaseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("answer", 1), ("originate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisLeaseMode.setStatus('mandatory')
dialerV32BisLLTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisLLTxLevel.setStatus('mandatory')
dialerV32BisLLConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 30), PrimCfg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisLLConfig.setStatus('mandatory')
dialerV32BisLLBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 31), PrimBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisLLBitRate.setStatus('mandatory')
dialerV32BisCallingTone = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 32), DisEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCallingTone.setStatus('mandatory')
dialerV32BisAutoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 33), DisEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisAutoMode.setStatus('mandatory')
dialerV32BisRetryAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 34), DisEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisRetryAllowed.setStatus('mandatory')
dialerV32BisMaxRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisMaxRetry.setStatus('mandatory')
dialerV32BisDialTone = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 36), DisEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDialTone.setStatus('mandatory')
dialerV32BisDialToneWait = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDialToneWait.setStatus('mandatory')
dialerV32BisRetryWait = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisRetryWait.setStatus('mandatory')
dialerV32BisHangupWait = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisHangupWait.setStatus('mandatory')
dialerV32BisDialPauseWait = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDialPauseWait.setStatus('mandatory')
dialerV32BisDeltaRiWait = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDeltaRiWait.setStatus('mandatory')
dialerV32BisDTMFDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDTMFDuration.setStatus('mandatory')
dialerV32BisDTMFDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDTMFDelay.setStatus('mandatory')
dialerV32BisDTMFFreq1Level = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDTMFFreq1Level.setStatus('mandatory')
dialerV32BisDTMFFreq2Level = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDTMFFreq2Level.setStatus('mandatory')
dialerV32BisPulseMakeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisPulseMakeTime.setStatus('mandatory')
dialerV32BisPulseBreakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisPulseBreakTime.setStatus('mandatory')
dialerV32BisPulseDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisPulseDelay.setStatus('mandatory')
dialerV32BisSpeakerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisSpeakerLevel.setStatus('mandatory')
dialerV32BisRiToAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisRiToAnswer.setStatus('mandatory')
dialerV32BisAnswerBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 51), PrimBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisAnswerBitRate.setStatus('mandatory')
dialerV32BisAnswerConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 52), PrimCfg()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisAnswerConfig.setStatus('mandatory')
dialerV32BisRetrain = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 53), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisRetrain.setStatus('mandatory')
dialerV32BisEqmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("low-quality", 2), ("medium-quality", 3), ("high-quality", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisEqmLevel.setStatus('mandatory')
dialerV32BisRiOnOffDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 55), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisRiOnOffDetect.setStatus('mandatory')
dialerV32BisCdDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 56), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCdDetect.setStatus('mandatory')
dialerV32BisRingbackDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 57), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisRingbackDetect.setStatus('mandatory')
dialerV32BisAnswerDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 58), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisAnswerDetect.setStatus('mandatory')
dialerV32BisBusyDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 59), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisBusyDetect.setStatus('mandatory')
dialerV32BisDiscDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 60), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDiscDetect.setStatus('mandatory')
dialerV32BisCdSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 61), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisCdSignal.setStatus('mandatory')
dialerV32BisDsrSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 62), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisDsrSignal.setStatus('mandatory')
dialerV32BisState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 9, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("m-closed", 1), ("m-opened", 2), ("m-local-test", 3), ("m-ringing", 4), ("m-dialing", 5), ("m-answering", 6), ("m-originating", 7), ("m-retrying", 8), ("m-connected", 9), ("m-retraining", 10), ("m-remote-test", 11), ("m-remote-disc", 12), ("m-local-disc", 13), ("m-hangup-idle", 14), ("m-closing", 15), ("m-offhook-idle", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerV32BisState.setStatus('mandatory')
dialerControlTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10), )
if mibBuilder.loadTexts: dialerControlTable.setStatus('mandatory')
dialerControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerCtrlPortRef"))
if mibBuilder.loadTexts: dialerControlEntry.setStatus('mandatory')
dialerCtrlPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerCtrlPortRef.setStatus('mandatory')
dialerCtrlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("exec", 1), ("dial", 2), ("hangup", 3), ("start", 4), ("idle", 5), ("store", 6), ("other", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlAction.setStatus('mandatory')
dialerCtrlAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 3), FalseTrue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlAnsEnable.setStatus('mandatory')
dialerCtrlDirectDSROnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 4), OnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlDirectDSROnOff.setStatus('mandatory')
dialerCtrlNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlNumber.setStatus('mandatory')
dialerCtrlScriptFile = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlScriptFile.setStatus('mandatory')
dialerCtrlActionState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 7), ActionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerCtrlActionState.setStatus('mandatory')
dialerCtrlActionError = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerCtrlActionError.setStatus('mandatory')
dialerCtrlConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 9), PrimCfg()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlConfig.setStatus('mandatory')
dialerCtrlBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 10), PrimBitRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlBitRate.setStatus('mandatory')
dialerCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 11), IsdnDnType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlType.setStatus('mandatory')
dialerCtrlPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 12), IsdnDnPlan()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlPlan.setStatus('mandatory')
dialerCtrlSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlSub.setStatus('mandatory')
dialerCtrlSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 14), IsdnSubType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlSubType.setStatus('mandatory')
dialerCtrlTns = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerCtrlTns.setStatus('mandatory')
dialerCtrlNumberTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerCtrlNumberTemp.setStatus('mandatory')
dialerCtrlDialMask = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerCtrlDialMask.setStatus('mandatory')
dialerCtrlCallSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 10, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerCtrlCallSpeed.setStatus('mandatory')
dialerIsdnStatusTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 11), )
if mibBuilder.loadTexts: dialerIsdnStatusTable.setStatus('mandatory')
dialerIsdnStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 11, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerIsdnStatusPortRef"))
if mibBuilder.loadTexts: dialerIsdnStatusEntry.setStatus('mandatory')
dialerIsdnStatusPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 11, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnStatusPortRef.setStatus('mandatory')
dialerIsdnStatusSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ni1", 1), ("nt", 2), ("att", 3), ("tr6", 4), ("vn3", 5), ("net3", 6), ("tph", 7), ("illegal", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnStatusSwitchType.setStatus('mandatory')
dialerIsdnStatusChType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("b-channel", 1), ("d-channel", 2), ("illegal", 3), ("unused", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnStatusChType.setStatus('mandatory')
dialerIsdnStatusL1State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("deactivated", 1), ("await-info2", 2), ("await-info4", 3), ("activate", 4), ("illegal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnStatusL1State.setStatus('mandatory')
dialerIsdnStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("isdn-deact-closed", 1), ("isdn-deact-opened", 2), ("isdn-wait-act-closed", 3), ("isdn-wait-act-opened", 4), ("isdn-release-closed", 5), ("isdn-release-opened", 6), ("isdn-closed", 7), ("isdn-opened", 8), ("isdn-connecting", 9), ("isdn-connected", 10), ("isdn-ringing", 11), ("isdn-disconnecting", 12), ("isdn-closing", 13), ("isdn-loopback", 14), ("isdn-linking-deact", 15), ("isdn-linking-act", 16), ("isdn-test", 17), ("isdn-linking-ring", 18), ("isdn-illegal", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnStatusState.setStatus('mandatory')
dialerIsdnNI1BChTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12), )
if mibBuilder.loadTexts: dialerIsdnNI1BChTable.setStatus('mandatory')
dialerIsdnNI1BChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerIsdnNI1BChPortRef"))
if mibBuilder.loadTexts: dialerIsdnNI1BChEntry.setStatus('mandatory')
dialerIsdnNI1BChPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChPortRef.setStatus('mandatory')
dialerIsdnNI1BChSpid = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChSpid.setStatus('mandatory')
dialerIsdnNI1BChSpidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 3), IsdnSpidStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChSpidStatus.setStatus('mandatory')
dialerIsdnNI1BChLocalDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChLocalDn.setStatus('mandatory')
dialerIsdnNI1BChLocalSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChLocalSub.setStatus('mandatory')
dialerIsdnNI1BChTnsDigs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNI1BChTnsDigs.setStatus('mandatory')
dialerIsdnNI1BChRemoteDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNI1BChRemoteDn.setStatus('mandatory')
dialerIsdnNI1BChRemoteSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNI1BChRemoteSub.setStatus('mandatory')
dialerIsdnNI1BChCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 9), IsdnCallType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChCallType.setStatus('mandatory')
dialerIsdnNI1BChCallSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 10), IsdnCallSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNI1BChCallSpeed.setStatus('mandatory')
dialerIsdnNI1BChBChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 11), IsdnBChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChBChannel.setStatus('mandatory')
dialerIsdnNI1BChAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 12), IsdnAnsEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChAnsEnable.setStatus('mandatory')
dialerIsdnNI1BChCcState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 13), IsdnNI1BCcState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChCcState.setStatus('mandatory')
dialerIsdnNI1BChCcNbCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChCcNbCause.setStatus('mandatory')
dialerIsdnNI1BChCcCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChCcCause.setStatus('mandatory')
dialerIsdnNI1BChL3State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 16), IsdnL3State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChL3State.setStatus('mandatory')
dialerIsdnNI1BChL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 17), IsdnL2State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChL2State.setStatus('mandatory')
dialerIsdnNI1BChTeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChTeiValue.setStatus('mandatory')
dialerIsdnNI1BChTeiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 19), IsdnTeiStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChTeiStatus.setStatus('mandatory')
dialerIsdnNI1BChLocalDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 20), IsdnDnType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChLocalDnType.setStatus('mandatory')
dialerIsdnNI1BChLocalDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 21), IsdnDnPlan()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChLocalDnPlan.setStatus('mandatory')
dialerIsdnNI1BChLocalSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 22), IsdnSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChLocalSubType.setStatus('mandatory')
dialerIsdnNI1BChTnsNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 23), IsdnTnsNetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChTnsNetId.setStatus('mandatory')
dialerIsdnNI1BChTnsIdPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 24), IsdnTnsIdPlan()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChTnsIdPlan.setStatus('mandatory')
dialerIsdnNI1BChRemoteDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 25), IsdnDnType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNI1BChRemoteDnType.setStatus('mandatory')
dialerIsdnNI1BChRemoteDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 26), IsdnDnPlan()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNI1BChRemoteDnPlan.setStatus('mandatory')
dialerIsdnNI1BChRemoteSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 27), IsdnSubType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNI1BChRemoteSubType.setStatus('mandatory')
dialerIsdnNI1BChScrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 28), IsdnScrStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChScrStatus.setStatus('mandatory')
dialerIsdnNI1BChCallOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 29), IsdnCallOpt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChCallOpt.setStatus('mandatory')
dialerIsdnNI1BChStoDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 30), IsdnStoDefined()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoDefined.setStatus('mandatory')
dialerIsdnNI1BChStoDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoDnType.setStatus('mandatory')
dialerIsdnNI1BChStoDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoDnPlan.setStatus('mandatory')
dialerIsdnNI1BChStoDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoDn.setStatus('mandatory')
dialerIsdnNI1BChStoSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoSubType.setStatus('mandatory')
dialerIsdnNI1BChStoSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoSub.setStatus('mandatory')
dialerIsdnNI1BChStoTnsNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoTnsNetId.setStatus('mandatory')
dialerIsdnNI1BChStoTnsPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoTnsPlan.setStatus('mandatory')
dialerIsdnNI1BChStoDigs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoDigs.setStatus('mandatory')
dialerIsdnNI1BChStoBcType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoBcType.setStatus('mandatory')
dialerIsdnNI1BChStoBcOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 12, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1BChStoBcOpt.setStatus('mandatory')
dialerIsdnNI1DChTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 13), )
if mibBuilder.loadTexts: dialerIsdnNI1DChTable.setStatus('mandatory')
dialerIsdnNI1DChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 13, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerIsdnNI1DChPortRef"))
if mibBuilder.loadTexts: dialerIsdnNI1DChEntry.setStatus('mandatory')
dialerIsdnNI1DChPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 13, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1DChPortRef.setStatus('mandatory')
dialerIsdnNI1DChTeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1DChTeiValue.setStatus('mandatory')
dialerIsdnNI1DChTeiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 13, 1, 3), IsdnTeiStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1DChTeiStatus.setStatus('mandatory')
dialerIsdnNI1DChL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 13, 1, 4), IsdnL2State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1DChL2State.setStatus('mandatory')
dialerIsdnNI1DChP3State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 13, 1, 5), IsdnP3State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1DChP3State.setStatus('mandatory')
dialerIsdnNI1DChActState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 13, 1, 6), IsdnActState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNI1DChActState.setStatus('mandatory')
dialerIsdnTR6BChTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14), )
if mibBuilder.loadTexts: dialerIsdnTR6BChTable.setStatus('mandatory')
dialerIsdnTR6BChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerIsdnTR6BChPortRef"))
if mibBuilder.loadTexts: dialerIsdnTR6BChEntry.setStatus('mandatory')
dialerIsdnTR6BChPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChPortRef.setStatus('mandatory')
dialerIsdnTR6BChLocalDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChLocalDn.setStatus('mandatory')
dialerIsdnTR6BChRemoteDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTR6BChRemoteDn.setStatus('mandatory')
dialerIsdnTR6BChCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 4), IsdnCallType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChCallType.setStatus('mandatory')
dialerIsdnTR6BChCallSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 5), IsdnCallSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTR6BChCallSpeed.setStatus('mandatory')
dialerIsdnTR6BChBChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 6), IsdnBChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChBChannel.setStatus('mandatory')
dialerIsdnTR6BChAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 7), IsdnAnsEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChAnsEnable.setStatus('mandatory')
dialerIsdnTR6BChCcState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 8), IsdnTR6BCcState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChCcState.setStatus('mandatory')
dialerIsdnTR6BChCcNbCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChCcNbCause.setStatus('mandatory')
dialerIsdnTR6BChCcCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChCcCause.setStatus('mandatory')
dialerIsdnTR6BChL3State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 11), IsdnL3State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChL3State.setStatus('mandatory')
dialerIsdnTR6BChL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 12), IsdnL2State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChL2State.setStatus('mandatory')
dialerIsdnTR6BChLocalDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 13), IsdnDnType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChLocalDnType.setStatus('mandatory')
dialerIsdnTR6BChLocalDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 14), IsdnDnPlan()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChLocalDnPlan.setStatus('mandatory')
dialerIsdnTR6BChRemoteDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 15), IsdnDnType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTR6BChRemoteDnType.setStatus('mandatory')
dialerIsdnTR6BChRemoteDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 16), IsdnDnPlan()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTR6BChRemoteDnPlan.setStatus('mandatory')
dialerIsdnTR6BChScrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 17), IsdnScrStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChScrStatus.setStatus('mandatory')
dialerIsdnTR6BChCallOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 18), IsdnCallOpt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChCallOpt.setStatus('mandatory')
dialerIsdnTR6BChTeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChTeiValue.setStatus('mandatory')
dialerIsdnTR6BChTeiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 20), IsdnTeiStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChTeiStatus.setStatus('mandatory')
dialerIsdnTR6BChStoDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 21), IsdnStoDefined()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChStoDefined.setStatus('mandatory')
dialerIsdnTR6BChStoDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChStoDnType.setStatus('mandatory')
dialerIsdnTR6BChStoDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChStoDnPlan.setStatus('mandatory')
dialerIsdnTR6BChStoDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChStoDn.setStatus('mandatory')
dialerIsdnTR6BChStoBcType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChStoBcType.setStatus('mandatory')
dialerIsdnTR6BChStoBcOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 14, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTR6BChStoBcOpt.setStatus('mandatory')
dialerIsdnVN3BChTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15), )
if mibBuilder.loadTexts: dialerIsdnVN3BChTable.setStatus('mandatory')
dialerIsdnVN3BChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerIsdnVN3BChPortRef"))
if mibBuilder.loadTexts: dialerIsdnVN3BChEntry.setStatus('mandatory')
dialerIsdnVN3BChPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChPortRef.setStatus('mandatory')
dialerIsdnVN3BChLocalDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 2), IsdnDnType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChLocalDnType.setStatus('mandatory')
dialerIsdnVN3BChLocalDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 3), IsdnDnPlan()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChLocalDnPlan.setStatus('mandatory')
dialerIsdnVN3BChLocalDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChLocalDn.setStatus('mandatory')
dialerIsdnVN3BChLocalSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 5), IsdnSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChLocalSubType.setStatus('mandatory')
dialerIsdnVN3BChLocalSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChLocalSub.setStatus('mandatory')
dialerIsdnVN3BChRemoteDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 7), IsdnDnType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnVN3BChRemoteDnType.setStatus('mandatory')
dialerIsdnVN3BChRemoteDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 8), IsdnDnPlan()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnVN3BChRemoteDnPlan.setStatus('mandatory')
dialerIsdnVN3BChRemoteDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnVN3BChRemoteDn.setStatus('mandatory')
dialerIsdnVN3BChRemoteSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 10), IsdnSubType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnVN3BChRemoteSubType.setStatus('mandatory')
dialerIsdnVN3BChRemoteSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnVN3BChRemoteSub.setStatus('mandatory')
dialerIsdnVN3BChCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 12), IsdnCallType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChCallType.setStatus('mandatory')
dialerIsdnVN3BChCallSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 13), IsdnCallSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnVN3BChCallSpeed.setStatus('mandatory')
dialerIsdnVN3BChBChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 14), IsdnBChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChBChannel.setStatus('mandatory')
dialerIsdnVN3BChAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 15), IsdnAnsEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChAnsEnable.setStatus('mandatory')
dialerIsdnVN3BChScrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 16), IsdnScrStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChScrStatus.setStatus('mandatory')
dialerIsdnVN3BChCallOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 17), IsdnCallOpt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChCallOpt.setStatus('mandatory')
dialerIsdnVN3BChCcState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 18), IsdnVN3BCcState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChCcState.setStatus('mandatory')
dialerIsdnVN3BChCcNbCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChCcNbCause.setStatus('mandatory')
dialerIsdnVN3BChCcCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChCcCause.setStatus('mandatory')
dialerIsdnVN3BChL3State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 21), IsdnL3State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChL3State.setStatus('mandatory')
dialerIsdnVN3BChL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 22), IsdnL2State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChL2State.setStatus('mandatory')
dialerIsdnVN3BChTeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChTeiValue.setStatus('mandatory')
dialerIsdnVN3BChTeiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 24), IsdnTeiStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChTeiStatus.setStatus('mandatory')
dialerIsdnVN3BChStoDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 25), IsdnStoDefined()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChStoDefined.setStatus('mandatory')
dialerIsdnVN3BChStoDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChStoDnType.setStatus('mandatory')
dialerIsdnVN3BChStoDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChStoDnPlan.setStatus('mandatory')
dialerIsdnVN3BChStoDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChStoDn.setStatus('mandatory')
dialerIsdnVN3BChStoSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChStoSubType.setStatus('mandatory')
dialerIsdnVN3BChStoSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChStoSub.setStatus('mandatory')
dialerIsdnVN3BChStoBcType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChStoBcType.setStatus('mandatory')
dialerIsdnVN3BChStoBcOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 15, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3BChStoBcOpt.setStatus('mandatory')
dialerIsdnVN3DChTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 16), )
if mibBuilder.loadTexts: dialerIsdnVN3DChTable.setStatus('mandatory')
dialerIsdnVN3DChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 16, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerIsdnVN3DChPortRef"))
if mibBuilder.loadTexts: dialerIsdnVN3DChEntry.setStatus('mandatory')
dialerIsdnVN3DChPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 16, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3DChPortRef.setStatus('mandatory')
dialerIsdnVN3DChTeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3DChTeiValue.setStatus('mandatory')
dialerIsdnVN3DChTeiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 16, 1, 3), IsdnTeiStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3DChTeiStatus.setStatus('mandatory')
dialerIsdnVN3DChL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 16, 1, 4), IsdnL2State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3DChL2State.setStatus('mandatory')
dialerIsdnVN3DChP3State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 16, 1, 5), IsdnP3State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnVN3DChP3State.setStatus('mandatory')
dialerIsdnNET3BChTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17), )
if mibBuilder.loadTexts: dialerIsdnNET3BChTable.setStatus('mandatory')
dialerIsdnNET3BChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerIsdnNET3BChPortRef"))
if mibBuilder.loadTexts: dialerIsdnNET3BChEntry.setStatus('mandatory')
dialerIsdnNET3BChPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChPortRef.setStatus('mandatory')
dialerIsdnNET3BChLocalDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 2), IsdnDnType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChLocalDnType.setStatus('mandatory')
dialerIsdnNET3BChLocalDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 3), IsdnDnPlan()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChLocalDnPlan.setStatus('mandatory')
dialerIsdnNET3BChLocalDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChLocalDn.setStatus('mandatory')
dialerIsdnNET3BChLocalSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 5), IsdnSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChLocalSubType.setStatus('mandatory')
dialerIsdnNET3BChLocalSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChLocalSub.setStatus('mandatory')
dialerIsdnNET3BChRemoteDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 7), IsdnDnType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNET3BChRemoteDnType.setStatus('mandatory')
dialerIsdnNET3BChRemoteDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 8), IsdnDnPlan()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNET3BChRemoteDnPlan.setStatus('mandatory')
dialerIsdnNET3BChRemoteDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNET3BChRemoteDn.setStatus('mandatory')
dialerIsdnNET3BChRemoteSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 10), IsdnSubType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNET3BChRemoteSubType.setStatus('mandatory')
dialerIsdnNET3BChRemoteSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNET3BChRemoteSub.setStatus('mandatory')
dialerIsdnNET3BChCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 12), IsdnCallType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChCallType.setStatus('mandatory')
dialerIsdnNET3BChCallSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 13), IsdnCallSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNET3BChCallSpeed.setStatus('mandatory')
dialerIsdnNET3BChBChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 14), IsdnBChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChBChannel.setStatus('mandatory')
dialerIsdnNET3BChAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 15), IsdnAnsEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChAnsEnable.setStatus('mandatory')
dialerIsdnNET3BChTnsNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 16), IsdnTnsNetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChTnsNetId.setStatus('mandatory')
dialerIsdnNET3BChTnsIdPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 17), IsdnTnsIdPlan()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChTnsIdPlan.setStatus('mandatory')
dialerIsdnNET3BChTnsDigs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnNET3BChTnsDigs.setStatus('mandatory')
dialerIsdnNET3BChScrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 19), IsdnScrStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChScrStatus.setStatus('mandatory')
dialerIsdnNET3BChCallOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 20), IsdnCallOpt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChCallOpt.setStatus('mandatory')
dialerIsdnNET3BChCcState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 21), IsdnNET3BCcState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChCcState.setStatus('mandatory')
dialerIsdnNET3BChCcNbCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChCcNbCause.setStatus('mandatory')
dialerIsdnNET3BChCcCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChCcCause.setStatus('mandatory')
dialerIsdnNET3BChL3State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 24), IsdnL3State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChL3State.setStatus('mandatory')
dialerIsdnNET3BChL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 25), IsdnL2State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChL2State.setStatus('mandatory')
dialerIsdnNET3BChTeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChTeiValue.setStatus('mandatory')
dialerIsdnNET3BChTeiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 27), IsdnTeiStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChTeiStatus.setStatus('mandatory')
dialerIsdnNET3BChStoDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 28), IsdnStoDefined()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoDefined.setStatus('mandatory')
dialerIsdnNET3BChStoDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoDnType.setStatus('mandatory')
dialerIsdnNET3BChStoDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoDnPlan.setStatus('mandatory')
dialerIsdnNET3BChStoDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoDn.setStatus('mandatory')
dialerIsdnNET3BChStoSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoSubType.setStatus('mandatory')
dialerIsdnNET3BChStoSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoSub.setStatus('mandatory')
dialerIsdnNET3BChStoTnsNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoTnsNetId.setStatus('mandatory')
dialerIsdnNET3BChStoTnsPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoTnsPlan.setStatus('mandatory')
dialerIsdnNET3BChStoDigs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoDigs.setStatus('mandatory')
dialerIsdnNET3BChStoBcType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoBcType.setStatus('mandatory')
dialerIsdnNET3BChStoBcOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 17, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnNET3BChStoBcOpt.setStatus('mandatory')
dialerIsdnTPHBChTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18), )
if mibBuilder.loadTexts: dialerIsdnTPHBChTable.setStatus('mandatory')
dialerIsdnTPHBChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerIsdnTPHBChPortRef"))
if mibBuilder.loadTexts: dialerIsdnTPHBChEntry.setStatus('mandatory')
dialerIsdnTPHBChPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChPortRef.setStatus('mandatory')
dialerIsdnTPHBChLocalDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 2), IsdnDnType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChLocalDnType.setStatus('mandatory')
dialerIsdnTPHBChLocalDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 3), IsdnDnPlan()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChLocalDnPlan.setStatus('mandatory')
dialerIsdnTPHBChLocalDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChLocalDn.setStatus('mandatory')
dialerIsdnTPHBChLocalSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 5), IsdnSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChLocalSubType.setStatus('mandatory')
dialerIsdnTPHBChLocalSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChLocalSub.setStatus('mandatory')
dialerIsdnTPHBChRemoteDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 7), IsdnDnType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTPHBChRemoteDnType.setStatus('mandatory')
dialerIsdnTPHBChRemoteDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 8), IsdnDnPlan()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTPHBChRemoteDnPlan.setStatus('mandatory')
dialerIsdnTPHBChRemoteDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTPHBChRemoteDn.setStatus('mandatory')
dialerIsdnTPHBChRemoteSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 10), IsdnSubType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTPHBChRemoteSubType.setStatus('mandatory')
dialerIsdnTPHBChRemoteSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTPHBChRemoteSub.setStatus('mandatory')
dialerIsdnTPHBChCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 12), IsdnCallType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChCallType.setStatus('mandatory')
dialerIsdnTPHBChCallSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 13), IsdnCallSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialerIsdnTPHBChCallSpeed.setStatus('mandatory')
dialerIsdnTPHBChBChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 14), IsdnBChannels()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChBChannel.setStatus('mandatory')
dialerIsdnTPHBChAnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 15), IsdnAnsEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChAnsEnable.setStatus('mandatory')
dialerIsdnTPHBChScrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 16), IsdnScrStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChScrStatus.setStatus('mandatory')
dialerIsdnTPHBChCallOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 17), IsdnCallOpt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChCallOpt.setStatus('mandatory')
dialerIsdnTPHBChCcState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 18), IsdnTPHBCcState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChCcState.setStatus('mandatory')
dialerIsdnTPHBChCcNbCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChCcNbCause.setStatus('mandatory')
dialerIsdnTPHBChCcCause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChCcCause.setStatus('mandatory')
dialerIsdnTPHBChL3State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 21), IsdnL3State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChL3State.setStatus('mandatory')
dialerIsdnTPHBChL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 22), IsdnL2State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChL2State.setStatus('mandatory')
dialerIsdnTPHBChTeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChTeiValue.setStatus('mandatory')
dialerIsdnTPHBChTeiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 24), IsdnTeiStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChTeiStatus.setStatus('mandatory')
dialerIsdnTPHBChStoDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 25), IsdnStoDefined()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChStoDefined.setStatus('mandatory')
dialerIsdnTPHBChStoDnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChStoDnType.setStatus('mandatory')
dialerIsdnTPHBChStoDnPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChStoDnPlan.setStatus('mandatory')
dialerIsdnTPHBChStoDn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChStoDn.setStatus('mandatory')
dialerIsdnTPHBChStoSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChStoSubType.setStatus('mandatory')
dialerIsdnTPHBChStoSub = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChStoSub.setStatus('mandatory')
dialerIsdnTPHBChStoBcType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChStoBcType.setStatus('mandatory')
dialerIsdnTPHBChStoBcOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 18, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHBChStoBcOpt.setStatus('mandatory')
dialerIsdnTPHDChTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 19), )
if mibBuilder.loadTexts: dialerIsdnTPHDChTable.setStatus('mandatory')
dialerIsdnTPHDChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 19, 1), ).setIndexNames((0, "EICON-DIALER-MIB", "dialerIsdnTPHDChPortRef"))
if mibBuilder.loadTexts: dialerIsdnTPHDChEntry.setStatus('mandatory')
dialerIsdnTPHDChPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 19, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHDChPortRef.setStatus('mandatory')
dialerIsdnTPHDChTeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHDChTeiValue.setStatus('mandatory')
dialerIsdnTPHDChTeiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 19, 1, 3), IsdnTeiStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHDChTeiStatus.setStatus('mandatory')
dialerIsdnTPHDChL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 19, 1, 4), IsdnL2State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHDChL2State.setStatus('mandatory')
dialerIsdnTPHDChP3State = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 16, 19, 1, 5), IsdnP3State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialerIsdnTPHDChP3State.setStatus('mandatory')
mibBuilder.exportSymbols("EICON-DIALER-MIB", dialerIsdnVN3BChPortRef=dialerIsdnVN3BChPortRef, dialerIsdnVN3BChAnsEnable=dialerIsdnVN3BChAnsEnable, dialerDirectConnDelay=dialerDirectConnDelay, dialerIsdnNET3BChLocalDnType=dialerIsdnNET3BChLocalDnType, dialerIsdnNI1DChTable=dialerIsdnNI1DChTable, dialerCtrlPortRef=dialerCtrlPortRef, dialerIsdnVN3BChScrStatus=dialerIsdnVN3BChScrStatus, dialerIsdnVN3DChTeiValue=dialerIsdnVN3DChTeiValue, dialerV32BisTxLevel=dialerV32BisTxLevel, dialerCtrlAction=dialerCtrlAction, dialerIsdnNET3BChStoDigs=dialerIsdnNET3BChStoDigs, dialerAtCmdModemSpeed=dialerAtCmdModemSpeed, dialerIsdnTR6BChStoBcOpt=dialerIsdnTR6BChStoBcOpt, dialerIsdnTR6BChCallSpeed=dialerIsdnTR6BChCallSpeed, dialerIsdnNI1BChStoSub=dialerIsdnNI1BChStoSub, dialerIsdnTPHBChStoBcOpt=dialerIsdnTPHBChStoBcOpt, dialerV22BisImcCallProgress=dialerV22BisImcCallProgress, dialerV22BisImcDTMFDelay=dialerV22BisImcDTMFDelay, dialerV22BisDnaMaxRetries=dialerV22BisDnaMaxRetries, dialerCtrlNumber=dialerCtrlNumber, dialerDirectX21CtrlSignal=dialerDirectX21CtrlSignal, dialerIsdnNI1DChTeiStatus=dialerIsdnNI1DChTeiStatus, dialerIsdnTR6BChRemoteDn=dialerIsdnTR6BChRemoteDn, dialerIsdnVN3BChStoDnPlan=dialerIsdnVN3BChStoDnPlan, dialerV32BisInfoEntry=dialerV32BisInfoEntry, dialerV22BisDnaState=dialerV22BisDnaState, DisEnable=DisEnable, dialerV22BisDnaPortRef=dialerV22BisDnaPortRef, dialerV32BisRetryWait=dialerV32BisRetryWait, dialerV22BisImcDsrSignal=dialerV22BisImcDsrSignal, IsdnCallSpeed=IsdnCallSpeed, dialerCtrlSub=dialerCtrlSub, dialerInfoClockType=dialerInfoClockType, IsdnCallOpt=IsdnCallOpt, dialerAtCmdConnDelay=dialerAtCmdConnDelay, dialerV22BisDnaAnsEnable=dialerV22BisDnaAnsEnable, dialerIsdnNET3BChLocalDnPlan=dialerIsdnNET3BChLocalDnPlan, dialerIsdnNI1BChTnsIdPlan=dialerIsdnNI1BChTnsIdPlan, dialerDirectState=dialerDirectState, dialer=dialer, dialerIsdnNI1BChRemoteSub=dialerIsdnNI1BChRemoteSub, dialerV22BisImcSpeakerLevel=dialerV22BisImcSpeakerLevel, dialerV32BisHangupWait=dialerV32BisHangupWait, dialerV32BisRingCount=dialerV32BisRingCount, dialerIsdnNI1BChLocalDnPlan=dialerIsdnNI1BChLocalDnPlan, dialerV25bisDsrSignal=dialerV25bisDsrSignal, dialerIsdnVN3BChCallOpt=dialerIsdnVN3BChCallOpt, dialerIsdnTPHBChCcState=dialerIsdnTPHBChCcState, dialerAtCmdInfoEntry=dialerAtCmdInfoEntry, dialerInfoPortRef=dialerInfoPortRef, IsdnNET3BCcState=IsdnNET3BCcState, dialerIsdnNI1BChStoDn=dialerIsdnNI1BChStoDn, dialerAtCmdRetryAllowed=dialerAtCmdRetryAllowed, dialerV25bisRetryDelay=dialerV25bisRetryDelay, dialerIsdnNI1BChAnsEnable=dialerIsdnNI1BChAnsEnable, dialerIsdnTPHBChScrStatus=dialerIsdnTPHBChScrStatus, dialerIsdnVN3BChStoDnType=dialerIsdnVN3BChStoDnType, dialerV25bisInfoTable=dialerV25bisInfoTable, dialerIsdnVN3BChStoSubType=dialerIsdnVN3BChStoSubType, dialerIsdnStatusPortRef=dialerIsdnStatusPortRef, dialerV22BisDnaSecondaryNum=dialerV22BisDnaSecondaryNum, dialerDirectX21InfoTable=dialerDirectX21InfoTable, dialerV32BisRingbackDetect=dialerV32BisRingbackDetect, dialerIsdnNI1BChCallOpt=dialerIsdnNI1BChCallOpt, dialerIsdnVN3BChRemoteSubType=dialerIsdnVN3BChRemoteSubType, dialerV22BisDnaRiNbr=dialerV22BisDnaRiNbr, dialerIsdnNI1DChEntry=dialerIsdnNI1DChEntry, dialerIsdnTPHBChRemoteDnPlan=dialerIsdnTPHBChRemoteDnPlan, dialerV32BisLeasedLine=dialerV32BisLeasedLine, dialerV32BisDTMFFreq2Level=dialerV32BisDTMFFreq2Level, dialerIsdnNI1BChLocalDn=dialerIsdnNI1BChLocalDn, dialerDirectMode=dialerDirectMode, dialerIsdnNET3BChTnsIdPlan=dialerIsdnNET3BChTnsIdPlan, dialerIsdnTR6BChEntry=dialerIsdnTR6BChEntry, dialerIsdnVN3BChEntry=dialerIsdnVN3BChEntry, dialerIsdnVN3BChTeiValue=dialerIsdnVN3BChTeiValue, dialerIsdnNI1BChLocalDnType=dialerIsdnNI1BChLocalDnType, dialerDirectX21InfoEntry=dialerDirectX21InfoEntry, dialerIsdnNET3BChTnsNetId=dialerIsdnNET3BChTnsNetId, dialerIsdnNET3BChCallType=dialerIsdnNET3BChCallType, dialerV32BisDialPauseWait=dialerV32BisDialPauseWait, dialerIsdnVN3BChTeiStatus=dialerIsdnVN3BChTeiStatus, dialerIsdnTPHBChCcCause=dialerIsdnTPHBChCcCause, dialerV32BisOverrConfig=dialerV32BisOverrConfig, dialerV25bisRiDtrDelay=dialerV25bisRiDtrDelay, dialerIsdnNET3BChLocalDn=dialerIsdnNET3BChLocalDn, dialerIsdnNI1BChTeiValue=dialerIsdnNI1BChTeiValue, dialerV32BisCdDetect=dialerV32BisCdDetect, dialerIsdnTR6BChStoBcType=dialerIsdnTR6BChStoBcType, dialerIsdnNET3BChAnsEnable=dialerIsdnNET3BChAnsEnable, dialerIsdnNET3BChRemoteDn=dialerIsdnNET3BChRemoteDn, dialerV32BisDTMFDelay=dialerV32BisDTMFDelay, dialerDirectRs232DtrSignal=dialerDirectRs232DtrSignal, dialerIsdnTPHBChRemoteSub=dialerIsdnTPHBChRemoteSub, dialerIsdnNI1BChRemoteSubType=dialerIsdnNI1BChRemoteSubType, dialerIsdnTPHBChCcNbCause=dialerIsdnTPHBChCcNbCause, dialerIsdnNET3BChStoSubType=dialerIsdnNET3BChStoSubType, dialerV22BisDnaMinDialDelay=dialerV22BisDnaMinDialDelay, dialerIsdnVN3BChLocalSubType=dialerIsdnVN3BChLocalSubType, dialerIsdnNET3BChCcCause=dialerIsdnNET3BChCcCause, dialerIsdnVN3BChL2State=dialerIsdnVN3BChL2State, dialerAtCmdDsrSignal=dialerAtCmdDsrSignal, dialerV32BisDeltaRiWait=dialerV32BisDeltaRiWait, dialerIsdnNET3BChStoDnType=dialerIsdnNET3BChStoDnType, dialerV25bisPortRef=dialerV25bisPortRef, dialerDirectRs232PortRef=dialerDirectRs232PortRef, dialerV22BisImcDecadic=dialerV22BisImcDecadic, dialerV22BisImcLineType=dialerV22BisImcLineType, dialerIsdnVN3BChCallSpeed=dialerIsdnVN3BChCallSpeed, dialerInfoTimeStart=dialerInfoTimeStart, dialerIsdnTPHDChPortRef=dialerIsdnTPHDChPortRef, dialerIsdnNI1BChCallType=dialerIsdnNI1BChCallType, dialerIsdnNET3BChStoTnsNetId=dialerIsdnNET3BChStoTnsNetId, dialerV32BisPrimBitRate=dialerV32BisPrimBitRate, dialerIsdnTR6BChStoDnPlan=dialerIsdnTR6BChStoDnPlan, IsdnTeiStatus=IsdnTeiStatus, dialerV32BisSecConfig=dialerV32BisSecConfig, dialerV32BisOverrNum=dialerV32BisOverrNum, dialerAtCmdPrimaryNum=dialerAtCmdPrimaryNum, dialerV22BisDnaInfoTable=dialerV22BisDnaInfoTable, dialerV22BisImcInfoEntry=dialerV22BisImcInfoEntry, dialerDirectRs232InfoTable=dialerDirectRs232InfoTable, dialerV22BisImcWaitDialTone=dialerV22BisImcWaitDialTone, dialerIsdnVN3BChStoBcType=dialerIsdnVN3BChStoBcType, dialerIsdnNI1BChCcNbCause=dialerIsdnNI1BChCcNbCause, dialerV22BisImcDtrSignal=dialerV22BisImcDtrSignal, dialerIsdnNI1DChActState=dialerIsdnNI1DChActState, IsdnTPHBCcState=IsdnTPHBCcState, dialerAtCmdRiSignal=dialerAtCmdRiSignal, IsdnNI1BCcState=IsdnNI1BCcState, dialerV25bisRetryAllowed=dialerV25bisRetryAllowed, dialerV22BisDnaDTMFDuration=dialerV22BisDnaDTMFDuration, dialerV32BisHangupSignal=dialerV32BisHangupSignal, dialerIsdnNI1BChTeiStatus=dialerIsdnNI1BChTeiStatus, dialerIsdnTPHBChCallOpt=dialerIsdnTPHBChCallOpt, dialerIsdnTR6BChStoDn=dialerIsdnTR6BChStoDn, dialerInfoEntry=dialerInfoEntry, dialerIsdnStatusSwitchType=dialerIsdnStatusSwitchType, dialerV32BisSecNum=dialerV32BisSecNum, dialerIsdnTPHBChLocalSub=dialerIsdnTPHBChLocalSub, dialerIsdnVN3BChStoDn=dialerIsdnVN3BChStoDn, dialerIsdnTR6BChPortRef=dialerIsdnTR6BChPortRef, dialerIsdnNET3BChLocalSubType=dialerIsdnNET3BChLocalSubType, dialerIsdnNI1BChBChannel=dialerIsdnNI1BChBChannel, dialerIsdnNI1BChLocalSubType=dialerIsdnNI1BChLocalSubType, dialerIsdnNET3BChTable=dialerIsdnNET3BChTable, dialerV25bisAnsEnable=dialerV25bisAnsEnable, dialerIsdnTR6BChL2State=dialerIsdnTR6BChL2State, dialerAtCmdRetryDelay=dialerAtCmdRetryDelay, dialerIsdnNI1BChCcCause=dialerIsdnNI1BChCcCause, dialerIsdnVN3BChCcState=dialerIsdnVN3BChCcState, dialerIsdnTPHBChStoSubType=dialerIsdnTPHBChStoSubType, dialerIsdnNET3BChRemoteSub=dialerIsdnNET3BChRemoteSub, dialerV25bisOnOffDelay=dialerV25bisOnOffDelay, dialerIsdnNI1BChLocalSub=dialerIsdnNI1BChLocalSub, dialerIsdnNET3BChCallOpt=dialerIsdnNET3BChCallOpt, dialerIsdnVN3BChRemoteSub=dialerIsdnVN3BChRemoteSub, dialerIsdnNI1BChStoDefined=dialerIsdnNI1BChStoDefined, dialerV22BisImcMaxRetries=dialerV22BisImcMaxRetries, IsdnActState=IsdnActState, dialerIsdnTPHBChRemoteSubType=dialerIsdnTPHBChRemoteSubType, dialerV22BisImcAnsEnable=dialerV22BisImcAnsEnable, dialerAtCmdLossDelay=dialerAtCmdLossDelay, dialerIsdnTPHBChRemoteDn=dialerIsdnTPHBChRemoteDn, dialerIsdnTPHBChLocalSubType=dialerIsdnTPHBChLocalSubType, IsdnTnsIdPlan=IsdnTnsIdPlan, dialerV22BisImcRxLevel=dialerV22BisImcRxLevel, dialerCtrlNumberTemp=dialerCtrlNumberTemp, dialerIsdnTPHDChTable=dialerIsdnTPHDChTable, dialerV32BisHangupVerify=dialerV32BisHangupVerify, dialerAtCmdInfoTable=dialerAtCmdInfoTable, dialerIsdnTR6BChLocalDn=dialerIsdnTR6BChLocalDn, dialerV32BisState=dialerV32BisState, dialerCtrlAnsEnable=dialerCtrlAnsEnable, dialerV32BisCurrConfig=dialerV32BisCurrConfig, dialerIsdnTR6BChAnsEnable=dialerIsdnTR6BChAnsEnable, dialerIsdnStatusState=dialerIsdnStatusState, dialerDirectRtsDelay=dialerDirectRtsDelay, dialerV32BisBusyDetect=dialerV32BisBusyDetect, dialerV22BisImcToneInd=dialerV22BisImcToneInd, dialerIsdnNI1BChStoDnPlan=dialerIsdnNI1BChStoDnPlan, dialerV22BisDnaPrimaryNum=dialerV22BisDnaPrimaryNum, IsdnTnsNetId=IsdnTnsNetId, dialerV22BisImcMinDialDelay=dialerV22BisImcMinDialDelay, dialerV22BisDnaDsrSignal=dialerV22BisDnaDsrSignal, dialerIsdnNET3BChStoDefined=dialerIsdnNET3BChStoDefined, dialerIsdnNET3BChTnsDigs=dialerIsdnNET3BChTnsDigs, dialerAtCmdBitsPerByte=dialerAtCmdBitsPerByte, dialerV22BisImcDsrRtsDelay=dialerV22BisImcDsrRtsDelay, dialerIsdnTR6BChTable=dialerIsdnTR6BChTable, dialerIsdnVN3BChLocalSub=dialerIsdnVN3BChLocalSub, dialerV25bisMaxRetries=dialerV25bisMaxRetries, dialerV32BisGuardTone=dialerV32BisGuardTone, dialerIsdnNI1BChStoTnsNetId=dialerIsdnNI1BChStoTnsNetId, dialerV32BisCallFailure=dialerV32BisCallFailure, dialerV22BisDnaRetryDelay=dialerV22BisDnaRetryDelay, dialerV22BisDnaCallProgress=dialerV22BisDnaCallProgress, dialerInfoTimeConnect=dialerInfoTimeConnect, IsdnScrStatus=IsdnScrStatus, dialerIsdnTR6BChTeiStatus=dialerIsdnTR6BChTeiStatus, dialerIsdnTPHDChTeiValue=dialerIsdnTPHDChTeiValue, dialerDirectRs232RiSignal=dialerDirectRs232RiSignal, dialerIsdnNI1BChSpid=dialerIsdnNI1BChSpid, dialerV22BisDnaDecadic=dialerV22BisDnaDecadic, dialerCtrlTns=dialerCtrlTns, dialerDirectX21PortRef=dialerDirectX21PortRef, dialerV25bisRiSignal=dialerV25bisRiSignal, dialerAtCmdPortRef=dialerAtCmdPortRef, dialerIsdnNI1BChL2State=dialerIsdnNI1BChL2State, dialerV32BisPulseBreakTime=dialerV32BisPulseBreakTime, IsdnTR6BCcState=IsdnTR6BCcState, dialerIsdnTPHBChAnsEnable=dialerIsdnTPHBChAnsEnable, dialerV32BisLLConfig=dialerV32BisLLConfig, dialerIsdnTR6BChScrStatus=dialerIsdnTR6BChScrStatus, dialerV22BisDnaRiDtrDelay=dialerV22BisDnaRiDtrDelay, dialerV32BisLLBitRate=dialerV32BisLLBitRate, dialerIsdnVN3BChCallType=dialerIsdnVN3BChCallType, dialerV22BisImcModemSpeed=dialerV22BisImcModemSpeed, dialerIsdnNI1BChRemoteDnPlan=dialerIsdnNI1BChRemoteDnPlan, dialerIsdnTPHBChPortRef=dialerIsdnTPHBChPortRef, dialerV32BisDsrSignal=dialerV32BisDsrSignal, dialerV32BisMaxRetry=dialerV32BisMaxRetry, dialerV32BisRiOnOffDetect=dialerV32BisRiOnOffDetect, dialerV22BisImcMakeBreakRatio=dialerV22BisImcMakeBreakRatio, dialerV32BisCurrBitRate=dialerV32BisCurrBitRate, dialerIsdnNI1BChCallSpeed=dialerIsdnNI1BChCallSpeed, dialerIsdnTPHBChLocalDn=dialerIsdnTPHBChLocalDn, dialerV32BisAnswerDetect=dialerV32BisAnswerDetect, dialerAtCmdMinDsrOnDelay=dialerAtCmdMinDsrOnDelay, dialerIsdnTR6BChBChannel=dialerIsdnTR6BChBChannel, dialerV22BisImcPortRef=dialerV22BisImcPortRef, dialerIsdnNI1BChL3State=dialerIsdnNI1BChL3State, dialerIsdnTR6BChLocalDnType=dialerIsdnTR6BChLocalDnType, dialerV22BisDnaHndshkAbortTimer=dialerV22BisDnaHndshkAbortTimer, dialerIsdnVN3DChEntry=dialerIsdnVN3DChEntry, dialerIsdnTR6BChStoDefined=dialerIsdnTR6BChStoDefined, IsdnBChannels=IsdnBChannels, dialerIsdnNET3BChLocalSub=dialerIsdnNET3BChLocalSub, dialerDirectRs232InfoEntry=dialerDirectRs232InfoEntry, dialerIsdnNI1BChStoDigs=dialerIsdnNI1BChStoDigs, dialerIsdnTPHBChCallSpeed=dialerIsdnTPHBChCallSpeed, FalseTrue=FalseTrue, dialerDirectIfType=dialerDirectIfType, dialerIsdnVN3DChL2State=dialerIsdnVN3DChL2State, dialerDirectRs232DsrSignal=dialerDirectRs232DsrSignal, IsdnSubType=IsdnSubType, dialerIsdnVN3DChP3State=dialerIsdnVN3DChP3State, OnOff=OnOff, dialerIsdnTPHBChLocalDnPlan=dialerIsdnTPHBChLocalDnPlan, dialerV32BisAnswerConfig=dialerV32BisAnswerConfig, dialerIsdnVN3BChRemoteDn=dialerIsdnVN3BChRemoteDn, dialerV32BisPulseDelay=dialerV32BisPulseDelay, dialerIsdnVN3BChL3State=dialerIsdnVN3BChL3State, dialerIsdnVN3BChRemoteDnType=dialerIsdnVN3BChRemoteDnType)
mibBuilder.exportSymbols("EICON-DIALER-MIB", dialerIsdnVN3BChStoDefined=dialerIsdnVN3BChStoDefined, dialerIsdnTPHBChL3State=dialerIsdnTPHBChL3State, dialerV32BisLeaseMode=dialerV32BisLeaseMode, dialerV32BisLLTxLevel=dialerV32BisLLTxLevel, dialerControlTable=dialerControlTable, dialerCtrlBitRate=dialerCtrlBitRate, dialerIsdnTPHDChTeiStatus=dialerIsdnTPHDChTeiStatus, dialerIsdnVN3BChCcCause=dialerIsdnVN3BChCcCause, dialerIsdnTR6BChRemoteDnType=dialerIsdnTR6BChRemoteDnType, PortRef=PortRef, dialerV22BisImcSecondaryNum=dialerV22BisImcSecondaryNum, dialerIsdnNET3BChRemoteDnPlan=dialerIsdnNET3BChRemoteDnPlan, ClockType=ClockType, dialerIsdnTPHBChStoSub=dialerIsdnTPHBChStoSub, dialerIsdnNI1DChL2State=dialerIsdnNI1DChL2State, IsdnL2State=IsdnL2State, management=management, dialerV22BisDnaPulseDelay=dialerV22BisDnaPulseDelay, dialerV22BisImcRiNbr=dialerV22BisImcRiNbr, dialerIsdnTR6BChCcNbCause=dialerIsdnTR6BChCcNbCause, dialerIsdnNI1BChCcState=dialerIsdnNI1BChCcState, dialerCtrlType=dialerCtrlType, dialerIsdnNI1DChPortRef=dialerIsdnNI1DChPortRef, dialerIsdnNET3BChStoSub=dialerIsdnNET3BChStoSub, dialerIsdnNET3BChStoDn=dialerIsdnNET3BChStoDn, dialerIsdnTR6BChStoDnType=dialerIsdnTR6BChStoDnType, dialerAtCmdDtrSignal=dialerAtCmdDtrSignal, dialerIsdnTR6BChTeiValue=dialerIsdnTR6BChTeiValue, dialerIsdnTPHBChStoDn=dialerIsdnTPHBChStoDn, dialerIsdnNI1BChStoDnType=dialerIsdnNI1BChStoDnType, dialerIsdnNET3BChEntry=dialerIsdnNET3BChEntry, dialerDirectRs232DbounceDelay=dialerDirectRs232DbounceDelay, PrimBitRate=PrimBitRate, dialerDirectPortRef=dialerDirectPortRef, dialerIsdnNET3BChCcNbCause=dialerIsdnNET3BChCcNbCause, dialerV22BisImcPrimaryNum=dialerV22BisImcPrimaryNum, dialerIsdnNI1BChRemoteDnType=dialerIsdnNI1BChRemoteDnType, IsdnSpidStatus=IsdnSpidStatus, dialerIsdnNET3BChRemoteSubType=dialerIsdnNET3BChRemoteSubType, dialerIsdnNI1BChPortRef=dialerIsdnNI1BChPortRef, dialerV32BisSpeakerLevel=dialerV32BisSpeakerLevel, dialerIsdnTR6BChCcState=dialerIsdnTR6BChCcState, dialerIsdnNET3BChRemoteDnType=dialerIsdnNET3BChRemoteDnType, dialerV32BisCurrNum=dialerV32BisCurrNum, dialerIsdnVN3BChLocalDnType=dialerIsdnVN3BChLocalDnType, dialerV22BisImcDeltaRiDelay=dialerV22BisImcDeltaRiDelay, dialerV32BisPulseMakeTime=dialerV32BisPulseMakeTime, dialerV32BisEqmLevel=dialerV32BisEqmLevel, dialerIsdnNI1BChStoTnsPlan=dialerIsdnNI1BChStoTnsPlan, dialerCtrlConfig=dialerCtrlConfig, dialerIsdnNI1BChTable=dialerIsdnNI1BChTable, dialerIsdnVN3BChRemoteDnPlan=dialerIsdnVN3BChRemoteDnPlan, dialerIsdnNI1BChEntry=dialerIsdnNI1BChEntry, dialerIsdnNET3BChTeiValue=dialerIsdnNET3BChTeiValue, dialerV22BisImcRiDtrDelay=dialerV22BisImcRiDtrDelay, dialerV32BisRetryAllowed=dialerV32BisRetryAllowed, dialerIsdnTR6BChRemoteDnPlan=dialerIsdnTR6BChRemoteDnPlan, dialerV25bisConnDelay=dialerV25bisConnDelay, dialerIsdnTPHBChRemoteDnType=dialerIsdnTPHBChRemoteDnType, dialerIsdnTR6BChL3State=dialerIsdnTR6BChL3State, dialerV32BisPortRef=dialerV32BisPortRef, dialerIsdnTPHDChP3State=dialerIsdnTPHDChP3State, dialerIsdnNI1BChStoBcOpt=dialerIsdnNI1BChStoBcOpt, dialerAtCmdSecondaryNum=dialerAtCmdSecondaryNum, dialerIsdnTPHBChTeiValue=dialerIsdnTPHBChTeiValue, PrimCfg=PrimCfg, dialerV22BisDnaDTMFLevel=dialerV22BisDnaDTMFLevel, dialerV32BisRxLevel=dialerV32BisRxLevel, dialerAtCmdParity=dialerAtCmdParity, dialerCtrlPlan=dialerCtrlPlan, dialerV25bisSecondaryNum=dialerV25bisSecondaryNum, dialerAtCmdOnOffDelay=dialerAtCmdOnOffDelay, dialerInfoType=dialerInfoType, dialerIsdnVN3BChLocalDn=dialerIsdnVN3BChLocalDn, dialerIsdnTPHBChTeiStatus=dialerIsdnTPHBChTeiStatus, module=module, dialerDirectInfoTable=dialerDirectInfoTable, mibv2=mibv2, dialerIsdnTPHBChCallType=dialerIsdnTPHBChCallType, dialerV22BisImcRetryAllowed=dialerV22BisImcRetryAllowed, dialerV22BisImcDloInd=dialerV22BisImcDloInd, dialerAtCmdState=dialerAtCmdState, dialerV22BisImcRiSignal=dialerV22BisImcRiSignal, dialerAtCmdRiDtrDelay=dialerAtCmdRiDtrDelay, dialerIsdnTPHBChStoDnType=dialerIsdnTPHBChStoDnType, dialerV22BisDnaDTMFDelay=dialerV22BisDnaDTMFDelay, dialerIsdnNI1DChTeiValue=dialerIsdnNI1DChTeiValue, dialerV25bisPrimaryNum=dialerV25bisPrimaryNum, dialerV22BisDnaTxLevel=dialerV22BisDnaTxLevel, dialerV32BisDialMethod=dialerV32BisDialMethod, dialerIsdnVN3DChTeiStatus=dialerIsdnVN3DChTeiStatus, dialerIsdnTPHBChEntry=dialerIsdnTPHBChEntry, dialerIsdnTR6BChLocalDnPlan=dialerIsdnTR6BChLocalDnPlan, dialerV22BisImcRetryDelay=dialerV22BisImcRetryDelay, dialerV22BisDnaRxLevel=dialerV22BisDnaRxLevel, dialerIsdnNI1DChP3State=dialerIsdnNI1DChP3State, dialerIsdnNET3BChStoBcOpt=dialerIsdnNET3BChStoBcOpt, dialerIsdnNET3BChL2State=dialerIsdnNET3BChL2State, dialerIsdnStatusTable=dialerIsdnStatusTable, dialerIsdnNET3BChStoTnsPlan=dialerIsdnNET3BChStoTnsPlan, dialerV32BisCallingTone=dialerV32BisCallingTone, dialerIsdnNET3BChPortRef=dialerIsdnNET3BChPortRef, dialerIsdnNI1BChSpidStatus=dialerIsdnNI1BChSpidStatus, dialerV22BisImcInfoTable=dialerV22BisImcInfoTable, dialerV22BisDnaModemSpeed=dialerV22BisDnaModemSpeed, dialerV22BisImcDTMFLevel=dialerV22BisImcDTMFLevel, dialerCtrlActionState=dialerCtrlActionState, dialerV25bisState=dialerV25bisState, dialerIsdnTPHBChL2State=dialerIsdnTPHBChL2State, dialerIsdnVN3DChTable=dialerIsdnVN3DChTable, dialerV22BisDnaGuardTone=dialerV22BisDnaGuardTone, dialerCtrlActionError=dialerCtrlActionError, dialerIsdnVN3BChStoBcOpt=dialerIsdnVN3BChStoBcOpt, dialerV22BisDnaWaitDialTone=dialerV22BisDnaWaitDialTone, dialerIsdnTPHBChTable=dialerIsdnTPHBChTable, dialerIsdnTPHBChStoDefined=dialerIsdnTPHBChStoDefined, dialerV32BisDTMFFreq1Level=dialerV32BisDTMFFreq1Level, dialerV25bisLossDelay=dialerV25bisLossDelay, dialerIsdnVN3DChPortRef=dialerIsdnVN3DChPortRef, dialerV22BisDnaMakeBreakRatio=dialerV22BisDnaMakeBreakRatio, dialerInfoDataEncoding=dialerInfoDataEncoding, dialerV22BisImcLeasedOpertn=dialerV22BisImcLeasedOpertn, dialerCtrlSubType=dialerCtrlSubType, dialerIsdnStatusEntry=dialerIsdnStatusEntry, dialerV25bisCtsSignal=dialerV25bisCtsSignal, dialerV32BisDialTone=dialerV32BisDialTone, dialerV22BisDnaInfoEntry=dialerV22BisDnaInfoEntry, dialerV32BisAnsEnable=dialerV32BisAnsEnable, dialerV22BisImcCdSignal=dialerV22BisImcCdSignal, dialerV22BisImcHndshkAbortTimer=dialerV22BisImcHndshkAbortTimer, dialerV22BisDnaDsrRtsDelay=dialerV22BisDnaDsrRtsDelay, dialerV32BisRiToAnswer=dialerV32BisRiToAnswer, dialerIsdnTPHBChBChannel=dialerIsdnTPHBChBChannel, dialerIsdnTR6BChCcCause=dialerIsdnTR6BChCcCause, dialerIsdnNI1BChRemoteDn=dialerIsdnNI1BChRemoteDn, dialerIsdnNET3BChStoDnPlan=dialerIsdnNET3BChStoDnPlan, dialerV22BisDnaRetryAllowed=dialerV22BisDnaRetryAllowed, dialerIsdnNI1BChScrStatus=dialerIsdnNI1BChScrStatus, dialerIsdnTPHBChStoDnPlan=dialerIsdnTPHBChStoDnPlan, dialerAtCmdMaxRetries=dialerAtCmdMaxRetries, dialerIsdnTPHDChL2State=dialerIsdnTPHDChL2State, dialerV32BisDTMFDuration=dialerV32BisDTMFDuration, DataEncoding=DataEncoding, dialerCtrlDialMask=dialerCtrlDialMask, dialerIsdnNET3BChScrStatus=dialerIsdnNET3BChScrStatus, dialerAtCmdHangupDelay=dialerAtCmdHangupDelay, eicon=eicon, dialerCtrlScriptFile=dialerCtrlScriptFile, dialerAtCmdDeltaRiDelay=dialerAtCmdDeltaRiDelay, dialerIsdnNI1BChTnsDigs=dialerIsdnNI1BChTnsDigs, dialerV22BisDnaDtrSignal=dialerV22BisDnaDtrSignal, IsdnP3State=IsdnP3State, dialerV32BisCarrierWait=dialerV32BisCarrierWait, dialerV22BisDnaRiSignal=dialerV22BisDnaRiSignal, dialerIsdnTR6BChCallOpt=dialerIsdnTR6BChCallOpt, dialerV32BisAnswerBitRate=dialerV32BisAnswerBitRate, dialerIsdnTPHDChEntry=dialerIsdnTPHDChEntry, IsdnCallType=IsdnCallType, IsdnDnType=IsdnDnType, dialerV32BisPrimConfig=dialerV32BisPrimConfig, ActionState=ActionState, dialerV22BisImcTxLevel=dialerV22BisImcTxLevel, dialerV32BisSecBitRate=dialerV32BisSecBitRate, dialerIsdnNET3BChCcState=dialerIsdnNET3BChCcState, dialerV25bisDtrSignal=dialerV25bisDtrSignal, dialerV32BisPrimNum=dialerV32BisPrimNum, dialerV25bisInfoEntry=dialerV25bisInfoEntry, dialerIsdnNET3BChCallSpeed=dialerIsdnNET3BChCallSpeed, dialerIsdnVN3BChStoSub=dialerIsdnVN3BChStoSub, dialerIsdnNET3BChBChannel=dialerIsdnNET3BChBChannel, dialerInfoLineSpeed=dialerInfoLineSpeed, dialerDirectX21IndicSignal=dialerDirectX21IndicSignal, dialerIsdnTPHBChLocalDnType=dialerIsdnTPHBChLocalDnType, dialerInfoTable=dialerInfoTable, dialerIsdnNET3BChL3State=dialerIsdnNET3BChL3State, dialerV22BisImcState=dialerV22BisImcState, dialerV32BisAutoMode=dialerV32BisAutoMode, dialerV25bisHangupDelay=dialerV25bisHangupDelay, dialerV25bisMinDsrOnDelay=dialerV25bisMinDsrOnDelay, dialerV32BisCurrRetry=dialerV32BisCurrRetry, dialerV22BisImcPulseDelay=dialerV22BisImcPulseDelay, dialerV22BisDnaToneInd=dialerV22BisDnaToneInd, IsdnVN3BCcState=IsdnVN3BCcState, dialerV25bisDeltaRiDelay=dialerV25bisDeltaRiDelay, dialerV25bisCtsOnDelay=dialerV25bisCtsOnDelay, dialerIsdnTPHBChStoBcType=dialerIsdnTPHBChStoBcType, dialerCtrlCallSpeed=dialerCtrlCallSpeed, dialerV22BisImcWaitCarrier=dialerV22BisImcWaitCarrier, dialerIsdnTR6BChCallType=dialerIsdnTR6BChCallType, dialerIsdnNI1BChStoSubType=dialerIsdnNI1BChStoSubType, dialerV32BisRetry=dialerV32BisRetry, dialerV32BisInfoTable=dialerV32BisInfoTable, dialerV22BisImcDTMFDuration=dialerV22BisImcDTMFDuration, IsdnAnsEnable=IsdnAnsEnable, dialerIsdnNET3BChTeiStatus=dialerIsdnNET3BChTeiStatus, IsdnDnPlan=IsdnDnPlan, dialerV32BisCarrierDetect=dialerV32BisCarrierDetect, dialerIsdnVN3BChBChannel=dialerIsdnVN3BChBChannel, dialerAtCmdAnsEnable=dialerAtCmdAnsEnable, dialerV22BisDnaWaitCarrier=dialerV22BisDnaWaitCarrier, dialerDirectInfoEntry=dialerDirectInfoEntry, dialerV22BisImcGuardTone=dialerV22BisImcGuardTone, dialerIsdnStatusL1State=dialerIsdnStatusL1State, dialerV32BisOverrBitRate=dialerV32BisOverrBitRate, dialerIsdnNI1BChTnsNetId=dialerIsdnNI1BChTnsNetId, dialerCtrlDirectDSROnOff=dialerCtrlDirectDSROnOff, dialerV32BisDialToneWait=dialerV32BisDialToneWait, dialerV22BisDnaCdSignal=dialerV22BisDnaCdSignal, dialerIsdnNET3BChStoBcType=dialerIsdnNET3BChStoBcType, dialerV22BisDnaDeltaRiDelay=dialerV22BisDnaDeltaRiDelay, dialerV32BisDiscDetect=dialerV32BisDiscDetect, dialerIsdnStatusChType=dialerIsdnStatusChType, dialerV32BisCdSignal=dialerV32BisCdSignal, dialerV22BisDnaDloInd=dialerV22BisDnaDloInd, dialerV32BisRetrain=dialerV32BisRetrain, dialerIsdnVN3BChCcNbCause=dialerIsdnVN3BChCcNbCause, dialerControlEntry=dialerControlEntry, dialerIsdnNI1BChStoBcType=dialerIsdnNI1BChStoBcType, dialerIsdnVN3BChLocalDnPlan=dialerIsdnVN3BChLocalDnPlan, dialerIsdnVN3BChTable=dialerIsdnVN3BChTable, IsdnL3State=IsdnL3State, IsdnStoDefined=IsdnStoDefined)
