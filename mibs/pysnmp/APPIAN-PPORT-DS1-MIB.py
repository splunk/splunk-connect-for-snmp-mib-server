#
# PySNMP MIB module APPIAN-PPORT-DS1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-PPORT-DS1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:07:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acChassisRingId, acChassisCurrentTime = mibBuilder.importSymbols("APPIAN-CHASSIS-MIB", "acChassisRingId", "acChassisCurrentTime")
AcSlotNumber, AcNodeId, AcAdminStatus, AcPortNumber, AcOpStatus, acPport = mibBuilder.importSymbols("APPIAN-SMI-MIB", "AcSlotNumber", "AcNodeId", "AcAdminStatus", "AcPortNumber", "AcOpStatus", "acPport")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
PerfIntervalCount, = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter32, MibIdentifier, Integer32, Gauge32, IpAddress, Counter64, Bits, iso, TimeTicks, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "MibIdentifier", "Integer32", "Gauge32", "IpAddress", "Counter64", "Bits", "iso", "TimeTicks", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
TimeStamp, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "TruthValue", "DisplayString")
acDs1 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4))
if mibBuilder.loadTexts: acDs1.setLastUpdated('0009070000Z')
if mibBuilder.loadTexts: acDs1.setOrganization('Appian Communications, Inc.')
acDs1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1), )
if mibBuilder.loadTexts: acDs1ConfigTable.setStatus('current')
acDs1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-DS1-MIB", "acDs1ConfigNodeId"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1ConfigSlot"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1ConfigPort"))
if mibBuilder.loadTexts: acDs1ConfigEntry.setStatus('current')
acDs1ConfigNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1ConfigNodeId.setStatus('current')
acDs1ConfigSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1ConfigSlot.setStatus('current')
acDs1ConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1ConfigPort.setStatus('current')
acDs1ConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 4), AcAdminStatus().clone('inactivate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs1ConfigAdminStatus.setStatus('current')
acDs1ConfigOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 5), AcOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigOpStatus.setStatus('current')
acDs1ConfigTimeElapsedInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigTimeElapsedInterval.setStatus('current')
acDs1ConfigValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigValidIntervals.setStatus('current')
acDs1ConfigTimeElapsedDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigTimeElapsedDay.setStatus('current')
acDs1ConfigValidDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigValidDays.setStatus('current')
acDs1ConfigTimeElapsedFarEndInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigTimeElapsedFarEndInterval.setStatus('current')
acDs1ConfigValidFarEndIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigValidFarEndIntervals.setStatus('current')
acDs1ConfigTimeElapsedFarEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigTimeElapsedFarEndDay.setStatus('current')
acDs1ConfigValidFarEndDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigValidFarEndDays.setStatus('current')
acDs1ConfigLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("esf", 1), ("d4", 2))).clone('esf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs1ConfigLineType.setStatus('current')
acDs1ConfigLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2))).clone('b8zs')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs1ConfigLineCoding.setStatus('current')
acDs1ConfigCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs1ConfigCircuitIdentifier.setStatus('current')
acDs1ConfigLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("payload", 2), ("facility", 3), ("other", 4), ("terminal", 5), ("dual", 6))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs1ConfigLoopbackConfig.setStatus('current')
acDs1ConfigLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 131071))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigLineStatus.setStatus('current')
acDs1ConfigSignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("message", 2), ("other", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigSignalMode.setStatus('current')
acDs1ConfigTransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bits", 1), ("local", 2), ("through", 3))).clone('through')).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigTransmitClockSource.setStatus('current')
acDs1ConfigFdl = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigFdl.setStatus('current')
acDs1ConfigInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigInvalidIntervals.setStatus('current')
acDs1ConfigInvalidDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigInvalidDays.setStatus('current')
acDs1ConfigInvalidFarEndIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigInvalidFarEndIntervals.setStatus('current')
acDs1ConfigInvalidFarEndDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigInvalidFarEndDays.setStatus('current')
acDs1ConfigLineStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 26), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigLineStatusLastChange.setStatus('current')
acDs1ConfigLineStatusChangeTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs1ConfigLineStatusChangeTrapEnable.setStatus('current')
acDs1ConfigLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1ConfigLoopbackStatus.setStatus('current')
acDs1ConfigInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('DS-1/TDM Interface')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs1ConfigInterfaceName.setStatus('current')
acDs1ConfigTimeSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 1, 1, 30), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acDs1ConfigTimeSlotIndex.setStatus('current')
acDs1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2), )
if mibBuilder.loadTexts: acDs1IntervalTable.setStatus('current')
acDs1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-DS1-MIB", "acDs1IntervalNodeId"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1IntervalSlot"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1IntervalPort"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1IntervalNumber"))
if mibBuilder.loadTexts: acDs1IntervalEntry.setStatus('current')
acDs1IntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1IntervalNodeId.setStatus('current')
acDs1IntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1IntervalSlot.setStatus('current')
acDs1IntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1IntervalPort.setStatus('current')
acDs1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1IntervalNumber.setStatus('current')
acDs1IntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalValidStats.setStatus('current')
acDs1IntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1IntervalResetStats.setStatus('current')
acDs1IntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalESs.setStatus('current')
acDs1IntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalSESs.setStatus('current')
acDs1IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalSEFSs.setStatus('current')
acDs1IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalUASs.setStatus('current')
acDs1IntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalCSSs.setStatus('current')
acDs1IntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalPCVs.setStatus('current')
acDs1IntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalLESs.setStatus('current')
acDs1IntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalBESs.setStatus('current')
acDs1IntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalDMs.setStatus('current')
acDs1IntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 2, 1, 16), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1IntervalLCVs.setStatus('current')
acDs1DayTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3), )
if mibBuilder.loadTexts: acDs1DayTable.setStatus('current')
acDs1DayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1), ).setIndexNames((0, "APPIAN-PPORT-DS1-MIB", "acDs1DayNodeId"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1DaySlot"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1DayPort"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1DayNumber"))
if mibBuilder.loadTexts: acDs1DayEntry.setStatus('current')
acDs1DayNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1DayNodeId.setStatus('current')
acDs1DaySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1DaySlot.setStatus('current')
acDs1DayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1DayPort.setStatus('current')
acDs1DayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1DayNumber.setStatus('current')
acDs1DayValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DayValidStats.setStatus('current')
acDs1DayResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1DayResetStats.setStatus('current')
acDs1DayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DayESs.setStatus('current')
acDs1DaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DaySESs.setStatus('current')
acDs1DaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DaySEFSs.setStatus('current')
acDs1DayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DayUASs.setStatus('current')
acDs1DayCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DayCSSs.setStatus('current')
acDs1DayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DayPCVs.setStatus('current')
acDs1DayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DayLESs.setStatus('current')
acDs1DayBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DayBESs.setStatus('current')
acDs1DayDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DayDMs.setStatus('current')
acDs1DayLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 3, 1, 16), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1DayLCVs.setStatus('current')
acDs1FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4), )
if mibBuilder.loadTexts: acDs1FarEndIntervalTable.setStatus('current')
acDs1FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1), ).setIndexNames((0, "APPIAN-PPORT-DS1-MIB", "acDs1FarEndIntervalNodeId"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1FarEndIntervalSlot"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1FarEndIntervalPort"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1FarEndIntervalNumber"))
if mibBuilder.loadTexts: acDs1FarEndIntervalEntry.setStatus('current')
acDs1FarEndIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1FarEndIntervalNodeId.setStatus('current')
acDs1FarEndIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1FarEndIntervalSlot.setStatus('current')
acDs1FarEndIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1FarEndIntervalPort.setStatus('current')
acDs1FarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1FarEndIntervalNumber.setStatus('current')
acDs1FarEndIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalValidStats.setStatus('current')
acDs1FarEndIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1FarEndIntervalResetStats.setStatus('current')
acDs1FarEndIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalESs.setStatus('current')
acDs1FarEndIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalSESs.setStatus('current')
acDs1FarEndIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalSEFSs.setStatus('current')
acDs1FarEndIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalUASs.setStatus('current')
acDs1FarEndIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalCSSs.setStatus('current')
acDs1FarEndIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalLESs.setStatus('current')
acDs1FarEndIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalPCVs.setStatus('current')
acDs1FarEndIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalBESs.setStatus('current')
acDs1FarEndIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 4, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndIntervalDMs.setStatus('current')
acDs1FarEndDayTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5), )
if mibBuilder.loadTexts: acDs1FarEndDayTable.setStatus('current')
acDs1FarEndDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1), ).setIndexNames((0, "APPIAN-PPORT-DS1-MIB", "acDs1FarEndDayNodeId"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1FarEndDaySlot"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1FarEndDayPort"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1FarEndDayNumber"))
if mibBuilder.loadTexts: acDs1FarEndDayEntry.setStatus('current')
acDs1FarEndDayNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1FarEndDayNodeId.setStatus('current')
acDs1FarEndDaySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1FarEndDaySlot.setStatus('current')
acDs1FarEndDayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1FarEndDayPort.setStatus('current')
acDs1FarEndDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1FarEndDayNumber.setStatus('current')
acDs1FarEndDayValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDayValidStats.setStatus('current')
acDs1FarEndDayResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1FarEndDayResetStats.setStatus('current')
acDs1FarEndDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDayESs.setStatus('current')
acDs1FarEndDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDaySESs.setStatus('current')
acDs1FarEndDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDaySEFSs.setStatus('current')
acDs1FarEndDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDayUASs.setStatus('current')
acDs1FarEndDayCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDayCSSs.setStatus('current')
acDs1FarEndDayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDayLESs.setStatus('current')
acDs1FarEndDayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDayPCVs.setStatus('current')
acDs1FarEndDayBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDayBESs.setStatus('current')
acDs1FarEndDayDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 5, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDs1FarEndDayDMs.setStatus('current')
acDs1ThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6), )
if mibBuilder.loadTexts: acDs1ThresholdTable.setStatus('current')
acDs1ThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1), ).setIndexNames((0, "APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), (0, "APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ThresholdEntry.setStatus('current')
acDs1ThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1ThresholdNodeId.setStatus('current')
acDs1ThresholdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1ThresholdSlot.setStatus('current')
acDs1ThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acDs1ThresholdPort.setStatus('current')
acDs1ThresholdNEIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalESs.setStatus('current')
acDs1ThresholdNEIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalSESs.setStatus('current')
acDs1ThresholdNEIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalSEFSs.setStatus('current')
acDs1ThresholdNEIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalUASs.setStatus('current')
acDs1ThresholdNEIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalCSSs.setStatus('current')
acDs1ThresholdNEIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalPCVs.setStatus('current')
acDs1ThresholdNEIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalLESs.setStatus('current')
acDs1ThresholdNEIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalBESs.setStatus('current')
acDs1ThresholdNEIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalDMs.setStatus('current')
acDs1ThresholdNEIntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEIntervalLCVs.setStatus('current')
acDs1ThresholdNEDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDayESs.setStatus('current')
acDs1ThresholdNEDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDaySESs.setStatus('current')
acDs1ThresholdNEDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDaySEFSs.setStatus('current')
acDs1ThresholdNEDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDayUASs.setStatus('current')
acDs1ThresholdNEDayCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDayCSSs.setStatus('current')
acDs1ThresholdNEDayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDayPCVs.setStatus('current')
acDs1ThresholdNEDayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDayLESs.setStatus('current')
acDs1ThresholdNEDayBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDayBESs.setStatus('current')
acDs1ThresholdNEDayDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDayDMs.setStatus('current')
acDs1ThresholdNEDayLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdNEDayLCVs.setStatus('current')
acDs1ThresholdFEIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalESs.setStatus('current')
acDs1ThresholdFEIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalSESs.setStatus('current')
acDs1ThresholdFEIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalSEFSs.setStatus('current')
acDs1ThresholdFEIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalUASs.setStatus('current')
acDs1ThresholdFEIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalCSSs.setStatus('current')
acDs1ThresholdFEIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalLESs.setStatus('current')
acDs1ThresholdFEIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalPCVs.setStatus('current')
acDs1ThresholdFEIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalBESs.setStatus('current')
acDs1ThresholdFEIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEIntervalDMs.setStatus('current')
acDs1ThresholdFEDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEDayESs.setStatus('current')
acDs1ThresholdFEDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEDaySESs.setStatus('current')
acDs1ThresholdFEDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEDaySEFSs.setStatus('current')
acDs1ThresholdFEDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEDayUASs.setStatus('current')
acDs1ThresholdFEDayCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEDayCSSs.setStatus('current')
acDs1ThresholdFEDayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEDayLESs.setStatus('current')
acDs1ThresholdFEDayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEDayPCVs.setStatus('current')
acDs1ThresholdFEDayBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEDayBESs.setStatus('current')
acDs1ThresholdFEDayDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 6, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDs1ThresholdFEDayDMs.setStatus('current')
acDs1Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0))
acDs1LineStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigPort"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigLineStatus"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigLineStatusLastChange"))
if mibBuilder.loadTexts: acDs1LineStatusChangeTrap.setStatus('current')
acDs1StatsResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigPort"))
if mibBuilder.loadTexts: acDs1StatsResetTrap.setStatus('current')
acDs1CfgErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 3)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigPort"))
if mibBuilder.loadTexts: acDs1CfgErrorTrap.setStatus('current')
acDs1LinkDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 4)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigPort"))
if mibBuilder.loadTexts: acDs1LinkDownTrap.setStatus('current')
acDs1LinkUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 5)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ConfigPort"))
if mibBuilder.loadTexts: acDs1LinkUpTrap.setStatus('current')
acDs1ExceededThresholdNEIntervalESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 7)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalESsTrap.setStatus('current')
acDs1ExceededThresholdNEIntervalSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 8)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalSESsTrap.setStatus('current')
acDs1ExceededThresholdNEIntervalSEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 9)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalSEFSsTrap.setStatus('current')
acDs1ExceededThresholdNEIntervalUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 10)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalUASsTrap.setStatus('current')
acDs1ExceededThresholdNEIntervalCSSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 11)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalCSSsTrap.setStatus('current')
acDs1ExceededThresholdNEIntervalPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 12)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalPCVsTrap.setStatus('current')
acDs1ExceededThresholdNEIntervalLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 13)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalLESsTrap.setStatus('current')
acDs1ExceededThresholdNEIntervalBESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 14)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalBESsTrap.setStatus('current')
acDs1ExceededThresholdNEIntervalDMsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 15)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalDMsTrap.setStatus('current')
acDs1ExceededThresholdNEIntervalLCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 16)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEIntervalLCVsTrap.setStatus('current')
acDs1ExceededThresholdNEDayESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 17)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayESsTrap.setStatus('current')
acDs1ExceededThresholdNEDaySESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 18)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDaySESsTrap.setStatus('current')
acDs1ExceededThresholdNEDaySEFSTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 19)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDaySEFSTrap.setStatus('current')
acDs1ExceededThresholdNEDayUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 20)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayUASsTrap.setStatus('current')
acDs1ExceededThresholdNEDayCSSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 21)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayCSSsTrap.setStatus('current')
acDs1ExceededThresholdNEDayPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 22)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayPCVsTrap.setStatus('current')
acDs1ExceededThresholdNEDayLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 23)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayLESsTrap.setStatus('current')
acDs1ExceededThresholdNEDayBESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 24)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayBESsTrap.setStatus('current')
acDs1ExceededThresholdNEDayDMsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 25)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayDMsTrap.setStatus('current')
acDs1ExceededThresholdNEDayLCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 26)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdNEDayLCVsTrap.setStatus('current')
acDs1ExceededThresholdFEIntervalESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 27)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalESsTrap.setStatus('current')
acDs1ExceededThresholdFEIntervalSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 28)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalSESsTrap.setStatus('current')
acDs1ExceededThresholdFEIntervalSEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 29)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalSEFSsTrap.setStatus('current')
acDs1ExceededThresholdFEIntervalUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 30)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalUASsTrap.setStatus('current')
acDs1ExceededThresholdFEIntervalCSSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 31)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalCSSsTrap.setStatus('current')
acDs1ExceededThresholdFEIntervalLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 32)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalLESsTrap.setStatus('current')
acDs1ExceededThresholdFEIntervalPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 33)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalPCVsTrap.setStatus('current')
acDs1ExceededThresholdFEIntervalBESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 34)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalBESsTrap.setStatus('current')
acDs1ExceededThresholdFEIntervalDMsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 35)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEIntervalDMsTrap.setStatus('current')
acDs1ExceededThresholdFEDayESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 36)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayESsTrap.setStatus('current')
acDs1ExceededThresholdFEDaySESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 37)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDaySESsTrap.setStatus('current')
acDs1ExceededThresholdFEDaySEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 38)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDaySEFSsTrap.setStatus('current')
acDs1ExceededThresholdFEDayUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 39)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayUASsTrap.setStatus('current')
acDs1ExceededThresholdFEDayCSSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 40)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayCSSsTrap.setStatus('current')
acDs1ExceededThresholdFEDayLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 41)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayLESsTrap.setStatus('current')
acDs1ExceededThresholdFEDayPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 42)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayPCVsTrap.setStatus('current')
acDs1ExceededThresholdFEDayBESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 43)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayBESsTrap.setStatus('current')
acDs1ExceededThresholdFEDayDMsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 4, 0, 44)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdNodeId"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdSlot"), ("APPIAN-PPORT-DS1-MIB", "acDs1ThresholdPort"))
if mibBuilder.loadTexts: acDs1ExceededThresholdFEDayDMsTrap.setStatus('current')
mibBuilder.exportSymbols("APPIAN-PPORT-DS1-MIB", acDs1=acDs1, acDs1IntervalNodeId=acDs1IntervalNodeId, acDs1IntervalResetStats=acDs1IntervalResetStats, acDs1ExceededThresholdFEDayUASsTrap=acDs1ExceededThresholdFEDayUASsTrap, acDs1ThresholdNEDayESs=acDs1ThresholdNEDayESs, acDs1ThresholdNEDayLCVs=acDs1ThresholdNEDayLCVs, acDs1ThresholdFEDayUASs=acDs1ThresholdFEDayUASs, acDs1ConfigTimeElapsedInterval=acDs1ConfigTimeElapsedInterval, acDs1IntervalDMs=acDs1IntervalDMs, acDs1ExceededThresholdFEDaySEFSsTrap=acDs1ExceededThresholdFEDaySEFSsTrap, acDs1ConfigInvalidFarEndDays=acDs1ConfigInvalidFarEndDays, acDs1DayPCVs=acDs1DayPCVs, acDs1DaySlot=acDs1DaySlot, acDs1FarEndDayESs=acDs1FarEndDayESs, acDs1ConfigEntry=acDs1ConfigEntry, acDs1ThresholdEntry=acDs1ThresholdEntry, acDs1ThresholdFEDayBESs=acDs1ThresholdFEDayBESs, acDs1ExceededThresholdNEIntervalPCVsTrap=acDs1ExceededThresholdNEIntervalPCVsTrap, acDs1ExceededThresholdFEDayPCVsTrap=acDs1ExceededThresholdFEDayPCVsTrap, acDs1IntervalUASs=acDs1IntervalUASs, acDs1ExceededThresholdFEDayCSSsTrap=acDs1ExceededThresholdFEDayCSSsTrap, acDs1ExceededThresholdFEDayBESsTrap=acDs1ExceededThresholdFEDayBESsTrap, acDs1ConfigPort=acDs1ConfigPort, acDs1ThresholdNEDaySEFSs=acDs1ThresholdNEDaySEFSs, acDs1ExceededThresholdNEDaySEFSTrap=acDs1ExceededThresholdNEDaySEFSTrap, acDs1DayLESs=acDs1DayLESs, acDs1ExceededThresholdNEDayBESsTrap=acDs1ExceededThresholdNEDayBESsTrap, acDs1FarEndDayTable=acDs1FarEndDayTable, acDs1DayLCVs=acDs1DayLCVs, acDs1IntervalSESs=acDs1IntervalSESs, acDs1Traps=acDs1Traps, acDs1ExceededThresholdFEIntervalBESsTrap=acDs1ExceededThresholdFEIntervalBESsTrap, acDs1StatsResetTrap=acDs1StatsResetTrap, acDs1ExceededThresholdNEDayUASsTrap=acDs1ExceededThresholdNEDayUASsTrap, acDs1ConfigInvalidFarEndIntervals=acDs1ConfigInvalidFarEndIntervals, acDs1ExceededThresholdNEIntervalESsTrap=acDs1ExceededThresholdNEIntervalESsTrap, acDs1FarEndDayNodeId=acDs1FarEndDayNodeId, acDs1ExceededThresholdNEIntervalLCVsTrap=acDs1ExceededThresholdNEIntervalLCVsTrap, acDs1ExceededThresholdFEDayLESsTrap=acDs1ExceededThresholdFEDayLESsTrap, acDs1ThresholdNEIntervalSESs=acDs1ThresholdNEIntervalSESs, acDs1IntervalPort=acDs1IntervalPort, acDs1ThresholdFEDayPCVs=acDs1ThresholdFEDayPCVs, acDs1ConfigTimeElapsedFarEndDay=acDs1ConfigTimeElapsedFarEndDay, acDs1ExceededThresholdNEIntervalLESsTrap=acDs1ExceededThresholdNEIntervalLESsTrap, acDs1IntervalPCVs=acDs1IntervalPCVs, acDs1ThresholdFEDaySEFSs=acDs1ThresholdFEDaySEFSs, acDs1ConfigLineStatusChangeTrapEnable=acDs1ConfigLineStatusChangeTrapEnable, acDs1ThresholdNEIntervalESs=acDs1ThresholdNEIntervalESs, acDs1ThresholdNEIntervalSEFSs=acDs1ThresholdNEIntervalSEFSs, acDs1ExceededThresholdFEIntervalLESsTrap=acDs1ExceededThresholdFEIntervalLESsTrap, acDs1FarEndIntervalValidStats=acDs1FarEndIntervalValidStats, acDs1FarEndDayPort=acDs1FarEndDayPort, acDs1FarEndIntervalSESs=acDs1FarEndIntervalSESs, acDs1ThresholdNEIntervalUASs=acDs1ThresholdNEIntervalUASs, acDs1ExceededThresholdNEDaySESsTrap=acDs1ExceededThresholdNEDaySESsTrap, acDs1ExceededThresholdNEIntervalUASsTrap=acDs1ExceededThresholdNEIntervalUASsTrap, acDs1FarEndIntervalSEFSs=acDs1FarEndIntervalSEFSs, acDs1ThresholdNEDayBESs=acDs1ThresholdNEDayBESs, acDs1FarEndDayLESs=acDs1FarEndDayLESs, acDs1ConfigOpStatus=acDs1ConfigOpStatus, acDs1IntervalLCVs=acDs1IntervalLCVs, acDs1FarEndDayPCVs=acDs1FarEndDayPCVs, acDs1ThresholdFEIntervalPCVs=acDs1ThresholdFEIntervalPCVs, acDs1ConfigTransmitClockSource=acDs1ConfigTransmitClockSource, acDs1ExceededThresholdFEIntervalDMsTrap=acDs1ExceededThresholdFEIntervalDMsTrap, acDs1ThresholdNEIntervalLCVs=acDs1ThresholdNEIntervalLCVs, acDs1ThresholdFEIntervalSEFSs=acDs1ThresholdFEIntervalSEFSs, acDs1CfgErrorTrap=acDs1CfgErrorTrap, acDs1DaySESs=acDs1DaySESs, acDs1IntervalCSSs=acDs1IntervalCSSs, acDs1ExceededThresholdFEIntervalCSSsTrap=acDs1ExceededThresholdFEIntervalCSSsTrap, acDs1FarEndIntervalESs=acDs1FarEndIntervalESs, acDs1ThresholdFEDayESs=acDs1ThresholdFEDayESs, acDs1ConfigInvalidDays=acDs1ConfigInvalidDays, acDs1DayNumber=acDs1DayNumber, acDs1ThresholdFEIntervalLESs=acDs1ThresholdFEIntervalLESs, acDs1FarEndDaySEFSs=acDs1FarEndDaySEFSs, acDs1ConfigTimeSlotIndex=acDs1ConfigTimeSlotIndex, acDs1FarEndDayNumber=acDs1FarEndDayNumber, acDs1FarEndDayUASs=acDs1FarEndDayUASs, PYSNMP_MODULE_ID=acDs1, acDs1ExceededThresholdFEIntervalUASsTrap=acDs1ExceededThresholdFEIntervalUASsTrap, acDs1IntervalESs=acDs1IntervalESs, acDs1FarEndIntervalEntry=acDs1FarEndIntervalEntry, acDs1ThresholdNEDaySESs=acDs1ThresholdNEDaySESs, acDs1IntervalSlot=acDs1IntervalSlot, acDs1ConfigTimeElapsedDay=acDs1ConfigTimeElapsedDay, acDs1ThresholdFEIntervalBESs=acDs1ThresholdFEIntervalBESs, acDs1ThresholdNEIntervalDMs=acDs1ThresholdNEIntervalDMs, acDs1ConfigLoopbackConfig=acDs1ConfigLoopbackConfig, acDs1ExceededThresholdFEIntervalSESsTrap=acDs1ExceededThresholdFEIntervalSESsTrap, acDs1FarEndIntervalUASs=acDs1FarEndIntervalUASs, acDs1ThresholdNEIntervalBESs=acDs1ThresholdNEIntervalBESs, acDs1ThresholdFEIntervalDMs=acDs1ThresholdFEIntervalDMs, acDs1ThresholdNEDayUASs=acDs1ThresholdNEDayUASs, acDs1ConfigValidIntervals=acDs1ConfigValidIntervals, acDs1FarEndDaySlot=acDs1FarEndDaySlot, acDs1DaySEFSs=acDs1DaySEFSs, acDs1IntervalBESs=acDs1IntervalBESs, acDs1DayCSSs=acDs1DayCSSs, acDs1ThresholdNEIntervalCSSs=acDs1ThresholdNEIntervalCSSs, acDs1FarEndDayValidStats=acDs1FarEndDayValidStats, acDs1ThresholdFEIntervalESs=acDs1ThresholdFEIntervalESs, acDs1ExceededThresholdNEIntervalBESsTrap=acDs1ExceededThresholdNEIntervalBESsTrap, acDs1ExceededThresholdFEIntervalESsTrap=acDs1ExceededThresholdFEIntervalESsTrap, acDs1ConfigInterfaceName=acDs1ConfigInterfaceName, acDs1ThresholdFEIntervalUASs=acDs1ThresholdFEIntervalUASs, acDs1FarEndIntervalLESs=acDs1FarEndIntervalLESs, acDs1ThresholdFEDaySESs=acDs1ThresholdFEDaySESs, acDs1ConfigLineStatus=acDs1ConfigLineStatus, acDs1FarEndIntervalBESs=acDs1FarEndIntervalBESs, acDs1DayTable=acDs1DayTable, acDs1ConfigLineCoding=acDs1ConfigLineCoding, acDs1LinkUpTrap=acDs1LinkUpTrap, acDs1ExceededThresholdNEIntervalDMsTrap=acDs1ExceededThresholdNEIntervalDMsTrap, acDs1DayEntry=acDs1DayEntry, acDs1FarEndDayEntry=acDs1FarEndDayEntry, acDs1ConfigInvalidIntervals=acDs1ConfigInvalidIntervals, acDs1FarEndIntervalNumber=acDs1FarEndIntervalNumber, acDs1DayResetStats=acDs1DayResetStats, acDs1ConfigTimeElapsedFarEndInterval=acDs1ConfigTimeElapsedFarEndInterval, acDs1ExceededThresholdFEIntervalPCVsTrap=acDs1ExceededThresholdFEIntervalPCVsTrap, acDs1FarEndIntervalDMs=acDs1FarEndIntervalDMs, acDs1ThresholdTable=acDs1ThresholdTable, acDs1ExceededThresholdFEDayESsTrap=acDs1ExceededThresholdFEDayESsTrap, acDs1ThresholdNEIntervalPCVs=acDs1ThresholdNEIntervalPCVs, acDs1ConfigValidDays=acDs1ConfigValidDays, acDs1ExceededThresholdNEIntervalCSSsTrap=acDs1ExceededThresholdNEIntervalCSSsTrap, acDs1IntervalNumber=acDs1IntervalNumber, acDs1ThresholdFEIntervalSESs=acDs1ThresholdFEIntervalSESs, acDs1IntervalSEFSs=acDs1IntervalSEFSs, acDs1ExceededThresholdNEDayCSSsTrap=acDs1ExceededThresholdNEDayCSSsTrap, acDs1IntervalValidStats=acDs1IntervalValidStats, acDs1FarEndIntervalTable=acDs1FarEndIntervalTable, acDs1IntervalLESs=acDs1IntervalLESs, acDs1ExceededThresholdNEDayLCVsTrap=acDs1ExceededThresholdNEDayLCVsTrap, acDs1ExceededThresholdNEDayLESsTrap=acDs1ExceededThresholdNEDayLESsTrap, acDs1ConfigCircuitIdentifier=acDs1ConfigCircuitIdentifier, acDs1DayNodeId=acDs1DayNodeId, acDs1ExceededThresholdFEDaySESsTrap=acDs1ExceededThresholdFEDaySESsTrap, acDs1FarEndDayBESs=acDs1FarEndDayBESs, acDs1ThresholdNEIntervalLESs=acDs1ThresholdNEIntervalLESs, acDs1ThresholdNEDayLESs=acDs1ThresholdNEDayLESs, acDs1ThresholdFEDayDMs=acDs1ThresholdFEDayDMs, acDs1DayBESs=acDs1DayBESs, acDs1ExceededThresholdNEIntervalSEFSsTrap=acDs1ExceededThresholdNEIntervalSEFSsTrap, acDs1ExceededThresholdNEDayDMsTrap=acDs1ExceededThresholdNEDayDMsTrap, acDs1ConfigAdminStatus=acDs1ConfigAdminStatus, acDs1ThresholdFEDayLESs=acDs1ThresholdFEDayLESs, acDs1ConfigTable=acDs1ConfigTable, acDs1DayUASs=acDs1DayUASs, acDs1FarEndDaySESs=acDs1FarEndDaySESs, acDs1ThresholdSlot=acDs1ThresholdSlot, acDs1ConfigSignalMode=acDs1ConfigSignalMode, acDs1ThresholdNEDayCSSs=acDs1ThresholdNEDayCSSs, acDs1DayValidStats=acDs1DayValidStats, acDs1ThresholdNEDayPCVs=acDs1ThresholdNEDayPCVs, acDs1DayESs=acDs1DayESs, acDs1FarEndDayCSSs=acDs1FarEndDayCSSs, acDs1ThresholdFEIntervalCSSs=acDs1ThresholdFEIntervalCSSs, acDs1FarEndIntervalSlot=acDs1FarEndIntervalSlot, acDs1ThresholdFEDayCSSs=acDs1ThresholdFEDayCSSs, acDs1ExceededThresholdFEIntervalSEFSsTrap=acDs1ExceededThresholdFEIntervalSEFSsTrap, acDs1ExceededThresholdNEDayESsTrap=acDs1ExceededThresholdNEDayESsTrap, acDs1FarEndIntervalNodeId=acDs1FarEndIntervalNodeId, acDs1DayDMs=acDs1DayDMs, acDs1ConfigValidFarEndDays=acDs1ConfigValidFarEndDays, acDs1ConfigFdl=acDs1ConfigFdl, acDs1FarEndIntervalPCVs=acDs1FarEndIntervalPCVs, acDs1ExceededThresholdNEIntervalSESsTrap=acDs1ExceededThresholdNEIntervalSESsTrap, acDs1LinkDownTrap=acDs1LinkDownTrap, acDs1ConfigNodeId=acDs1ConfigNodeId, acDs1ThresholdNodeId=acDs1ThresholdNodeId, acDs1IntervalTable=acDs1IntervalTable, acDs1ConfigLineType=acDs1ConfigLineType, acDs1FarEndIntervalResetStats=acDs1FarEndIntervalResetStats, acDs1LineStatusChangeTrap=acDs1LineStatusChangeTrap, acDs1FarEndIntervalPort=acDs1FarEndIntervalPort, acDs1FarEndIntervalCSSs=acDs1FarEndIntervalCSSs, acDs1ConfigLoopbackStatus=acDs1ConfigLoopbackStatus, acDs1IntervalEntry=acDs1IntervalEntry, acDs1DayPort=acDs1DayPort, acDs1FarEndDayDMs=acDs1FarEndDayDMs, acDs1ConfigValidFarEndIntervals=acDs1ConfigValidFarEndIntervals, acDs1ConfigSlot=acDs1ConfigSlot, acDs1FarEndDayResetStats=acDs1FarEndDayResetStats, acDs1ExceededThresholdFEDayDMsTrap=acDs1ExceededThresholdFEDayDMsTrap, acDs1ConfigLineStatusLastChange=acDs1ConfigLineStatusLastChange, acDs1ExceededThresholdNEDayPCVsTrap=acDs1ExceededThresholdNEDayPCVsTrap, acDs1ThresholdPort=acDs1ThresholdPort, acDs1ThresholdNEDayDMs=acDs1ThresholdNEDayDMs)
