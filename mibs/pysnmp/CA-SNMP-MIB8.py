#
# PySNMP MIB module CA-SNMP-MIB8 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CA-SNMP-MIB8
# Produced by pysmi-0.3.4 at Mon Apr 29 17:26:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, Unsigned32, ModuleIdentity, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, enterprises, Bits, TimeTicks, MibIdentifier, iso, NotificationType, Opaque, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "enterprises", "Bits", "TimeTicks", "MibIdentifier", "iso", "NotificationType", "Opaque", "Integer32", "Counter32")
TimeStamp, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "TruthValue", "DisplayString")
arrayNetworks = ModuleIdentity((1, 3, 6, 1, 4, 1, 7564))
arrayNetworks.setRevisions(('2005-09-14 00:00', '1999-12-09 00:00',))
if mibBuilder.loadTexts: arrayNetworks.setLastUpdated('201203090000Z')
if mibBuilder.loadTexts: arrayNetworks.setOrganization('Array Networks, Inc.')
class Float(TextualConvention, Opaque):
    status = 'current'
    subtypeSpec = Opaque.subtypeSpec + ValueSizeConstraint(7, 7)
    fixedLength = 7

caTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 251))
caStart = NotificationType((1, 3, 6, 1, 4, 1, 7564, 251, 1))
if mibBuilder.loadTexts: caStart.setStatus('current')
caShutdown = NotificationType((1, 3, 6, 1, 4, 1, 7564, 251, 2))
if mibBuilder.loadTexts: caShutdown.setStatus('current')
licenseRemainingDays = NotificationType((1, 3, 6, 1, 4, 1, 7564, 251, 3))
if mibBuilder.loadTexts: licenseRemainingDays.setStatus('current')
revProxyCache = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 16))
cacheBasicStats = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 16, 1))
cacheStatus = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheStatus.setStatus('current')
requestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestsReceived.setStatus('current')
getRequests = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: getRequests.setStatus('current')
headRequests = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: headRequests.setStatus('current')
purgeRequests = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: purgeRequests.setStatus('current')
postRequests = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postRequests.setStatus('current')
clientEstabConn = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientEstabConn.setStatus('current')
serverEstabConn = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverEstabConn.setStatus('current')
requestsToHttps = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestsToHttps.setStatus('current')
requestsOnRegex = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestsOnRegex.setStatus('current')
requestsToUrl = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestsToUrl.setStatus('current')
responsesToHttps = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: responsesToHttps.setStatus('current')
responsesOnRegex = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: responsesOnRegex.setStatus('current')
cacheSkip = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSkip.setStatus('current')
hitsReply = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hitsReply.setStatus('current')
hitsReplyWNotModified = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hitsReplyWNotModified.setStatus('current')
hitsReplyWPreFailed = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hitsReplyWPreFailed.setStatus('current')
hitRevalidate = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hitRevalidate.setStatus('current')
cacheMissWNoncacheReq = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMissWNoncacheReq.setStatus('current')
cacheMissWNewEntry = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMissWNewEntry.setStatus('current')
cacheMissWRespNo = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMissWRespNo.setStatus('current')
cacheHitRatio = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHitRatio.setStatus('current')
slbMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 19))
slbGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 19, 1))
slbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 19, 2))
realServer = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1))
virtualServer = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2))
groupCurCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 19, 1, 3))
realStats = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1))
virtualStats = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2))
groupStats = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 19, 2, 3))
rsCount = MibScalar((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCount.setStatus('current')
rsTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2), )
if mibBuilder.loadTexts: rsTable.setStatus('current')
rsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "rsIndex"))
if mibBuilder.loadTexts: rsEntry.setStatus('current')
rsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIndex.setStatus('current')
rsID = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsID.setStatus('current')
rsProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("tcp", 0), ("udp", 1), ("ftp", 2), ("ftps", 3), ("http", 4), ("https", 5), ("tcps", 6), ("dns", 7), ("l2ip", 8), ("l2mac", 9), ("ip", 10), ("siptcp", 11), ("sipudp", 12), ("radacct", 13), ("radauth", 14), ("rtsp", 15), ("vlink", 16), ("rdp", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsProtocol.setStatus('current')
rsIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpAddr.setStatus('current')
rsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPort.setStatus('current')
rsMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 6), Integer32().clone(1000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxConn.setStatus('current')
rsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("up", 1), ("down", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsStatus.setStatus('current')
rsAvgRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsAvgRespTime.setStatus('current')
rsIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpAddressType.setStatus('current')
rsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpAddress.setStatus('current')
vsCount = MibScalar((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsCount.setStatus('current')
vsTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2), )
if mibBuilder.loadTexts: vsTable.setStatus('current')
vsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "vsIndex"))
if mibBuilder.loadTexts: vsEntry.setStatus('current')
vsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsIndex.setStatus('current')
vsID = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsID.setStatus('current')
vsProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("tcp", 0), ("udp", 1), ("ftp", 2), ("ftps", 3), ("http", 4), ("https", 5), ("tcps", 6), ("dns", 7), ("l2ip", 8), ("l2mac", 9), ("ip", 10), ("siptcp", 11), ("sipudp", 12), ("radacct", 13), ("radauth", 14), ("rtsp", 15), ("vlink", 16), ("rdp", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsProtocol.setStatus('current')
vsIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsIpAddr.setStatus('current')
vsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsPort.setStatus('current')
vsMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsMaxConn.setStatus('current')
vsIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsIpAddressType.setStatus('current')
vsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsIpAddress.setStatus('current')
groupCount = MibScalar((1, 3, 6, 1, 4, 1, 7564, 19, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupCount.setStatus('current')
gpTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 19, 1, 3, 2), )
if mibBuilder.loadTexts: gpTable.setStatus('current')
gpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 19, 1, 3, 2, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "gpIndex"))
if mibBuilder.loadTexts: gpEntry.setStatus('current')
gpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpIndex.setStatus('current')
gpID = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpID.setStatus('current')
realID = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realID.setStatus('current')
gpMetrics = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("invalid", 0), ("rr", 1), ("lc", 2), ("sr", 3), ("pu", 4), ("ph", 5), ("pi", 6), ("pc", 7), ("hc", 8), ("hh", 9), ("ic", 10), ("rc", 11), ("sslsid", 12), ("hi", 13), ("hip", 14), ("chi", 15), ("prox", 16), ("snmp", 17), ("sipcid", 18), ("sipuid", 19), ("ec", 20), ("chh", 21), ("radchu", 22), ("radchs", 23), ("hq", 24), ("rdprt", 25), ("persistence", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpMetrics.setStatus('current')
rsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1), )
if mibBuilder.loadTexts: rsStatsTable.setStatus('current')
rsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "realIndex"))
if mibBuilder.loadTexts: rsStatsEntry.setStatus('current')
realIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realIndex.setStatus('current')
realServerID = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerID.setStatus('current')
realAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realAddr.setStatus('current')
realPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: realPort.setStatus('current')
rsCntOfReq = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCntOfReq.setStatus('current')
rsConnCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsConnCnt.setStatus('current')
rsTotalHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTotalHits.setStatus('current')
realStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("up", 1), ("down", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: realStatus.setStatus('current')
realAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realAddressType.setStatus('current')
realAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realAddress.setStatus('current')
vsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1), )
if mibBuilder.loadTexts: vsStatsTable.setStatus('current')
vsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "virtualIndex"))
if mibBuilder.loadTexts: vsStatsEntry.setStatus('current')
virtualIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIndex.setStatus('current')
virtServerID = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtServerID.setStatus('current')
virtualAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAddr.setStatus('current')
virtualPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPort.setStatus('current')
vsURLHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsURLHits.setStatus('current')
vsHostnameHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsHostnameHits.setStatus('current')
vsPerstntCookieHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsPerstntCookieHits.setStatus('current')
vsQosCookieHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsQosCookieHits.setStatus('current')
vsDefaultHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsDefaultHits.setStatus('current')
vsPerstntURLHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsPerstntURLHits.setStatus('current')
vsStaticHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsStaticHits.setStatus('current')
vsQosNetworkHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsQosNetworkHits.setStatus('current')
vsQosURLHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsQosURLHits.setStatus('current')
vsBackupHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsBackupHits.setStatus('current')
vsCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsCacheHits.setStatus('current')
vsRegexHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRegexHits.setStatus('current')
vsRCookieHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRCookieHits.setStatus('current')
vsICookieHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsICookieHits.setStatus('current')
vsConnCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsConnCnt.setStatus('current')
virtualAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 20), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAddressType.setStatus('current')
virtualAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 21), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAddress.setStatus('current')
vsQosClientPortHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsQosClientPortHits.setStatus('current')
vsQosBodyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsQosBodyHits.setStatus('current')
vsHeaderHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsHeaderHits.setStatus('current')
vsHashURLHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsHashURLHits.setStatus('current')
vsRedirectHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRedirectHits.setStatus('current')
gpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 19, 2, 3, 1), )
if mibBuilder.loadTexts: gpStatsTable.setStatus('current')
gpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 19, 2, 3, 1, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "groupIndex"))
if mibBuilder.loadTexts: gpStatsEntry.setStatus('current')
groupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupIndex.setStatus('current')
groupID = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupID.setStatus('current')
gpTotalHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpTotalHits.setStatus('current')
healthCheck = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 27))
hcStats = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 27, 1))
hcRSCount = MibScalar((1, 3, 6, 1, 4, 1, 7564, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcRSCount.setStatus('current')
hcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2), )
if mibBuilder.loadTexts: hcStatsTable.setStatus('current')
hcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "hcIndex"))
if mibBuilder.loadTexts: hcStatsEntry.setStatus('current')
hcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcIndex.setStatus('current')
hcName = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcName.setStatus('current')
hcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcAddr.setStatus('current')
hcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcPort.setStatus('current')
hcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("up", 1), ("down", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcStatus.setStatus('current')
hcCause = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcCause.setStatus('current')
hcNumDowns = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcNumDowns.setStatus('current')
hcNumUps = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcNumUps.setStatus('current')
hcConnAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcConnAttempt.setStatus('current')
hcConnSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcConnSuccess.setStatus('current')
hcConnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcConnFail.setStatus('current')
hcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcAddressType.setStatus('current')
hcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcAddress.setStatus('current')
compression = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 28))
totalBytesRcvd = MibScalar((1, 3, 6, 1, 4, 1, 7564, 28, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesRcvd.setStatus('current')
totalBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 7564, 28, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesSent.setStatus('current')
rcvdBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 28, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvdBytesPerSec.setStatus('current')
sentBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 28, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sentBytesPerSec.setStatus('current')
peakRcvdBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 28, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakRcvdBytesPerSec.setStatus('current')
peakSentBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 28, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakSentBytesPerSec.setStatus('current')
activeTransac = MibScalar((1, 3, 6, 1, 4, 1, 7564, 28, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeTransac.setStatus('current')
memory = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 4))
sysMemory = MibScalar((1, 3, 6, 1, 4, 1, 7564, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemory.setStatus('current')
sysMemoryUtilization = MibScalar((1, 3, 6, 1, 4, 1, 7564, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemoryUtilization.setStatus('current')
sysSwapUsed = MibScalar((1, 3, 6, 1, 4, 1, 7564, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwapUsed.setStatus('current')
sysSwapCapacity = MibScalar((1, 3, 6, 1, 4, 1, 7564, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwapCapacity.setStatus('current')
performance = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 30))
cpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 7564, 30, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilization.setStatus('current')
connectionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 30, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionsPerSec.setStatus('current')
requestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 30, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestsPerSec.setStatus('current')
monitor = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 32))
cputemp = MibScalar((1, 3, 6, 1, 4, 1, 7564, 32, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cputemp.setStatus('current')
fanspeed = MibScalar((1, 3, 6, 1, 4, 1, 7564, 32, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanspeed.setStatus('current')
powerstate = MibScalar((1, 3, 6, 1, 4, 1, 7564, 32, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("one-of-the-power-supply-modules-has-failed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerstate.setStatus('current')
sdns = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 31))
totalReq = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalReq.setStatus('current')
totalSucc = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalSucc.setStatus('current')
totalFail = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalFail.setStatus('current')
reqLastSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqLastSec.setStatus('current')
succLastSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succLastSec.setStatus('current')
failLastSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failLastSec.setStatus('current')
reqPeakSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqPeakSec.setStatus('current')
succPeakSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succPeakSec.setStatus('current')
reqLastMin = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqLastMin.setStatus('current')
succLastMin = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succLastMin.setStatus('current')
failLastMin = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failLastMin.setStatus('current')
reqPeakMin = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqPeakMin.setStatus('current')
succPeakMin = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succPeakMin.setStatus('current')
reqLastHour = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqLastHour.setStatus('current')
succLastHour = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succLastHour.setStatus('current')
failLastHour = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failLastHour.setStatus('current')
reqPeakHour = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqPeakHour.setStatus('current')
succPeakHour = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succPeakHour.setStatus('current')
reqLastDay = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqLastDay.setStatus('current')
succLastDay = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succLastDay.setStatus('current')
failLastDay = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failLastDay.setStatus('current')
reqPeakDay = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqPeakDay.setStatus('current')
succPeakDay = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succPeakDay.setStatus('current')
reqLastSec5 = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqLastSec5.setStatus('current')
succLastSec5 = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succLastSec5.setStatus('current')
failLastSec5 = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failLastSec5.setStatus('current')
reqPeakSec5 = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqPeakSec5.setStatus('current')
succPeakSec5 = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succPeakSec5.setStatus('current')
vrrp = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 18))
clusterVrrp = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 18, 1))
maxCluster = MibScalar((1, 3, 6, 1, 4, 1, 7564, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxCluster.setStatus('current')
clusterNum = MibScalar((1, 3, 6, 1, 4, 1, 7564, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterNum.setStatus('current')
vrrpTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3), )
if mibBuilder.loadTexts: vrrpTable.setStatus('current')
vrrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "clusterVirIndex"))
if mibBuilder.loadTexts: vrrpEntry.setStatus('current')
clusterVirIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirIndex.setStatus('current')
clusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterId.setStatus('current')
clusterVirState = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("incomplete", 0), ("reserverd", 1), ("init", 2), ("backup", 3), ("master", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirState.setStatus('current')
clusterVirIfname = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirIfname.setStatus('current')
clusterVirAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirAddr.setStatus('current')
clusterVirAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("simple-text-password", 1))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirAuthType.setStatus('current')
clusterVirAuthPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirAuthPasswd.setStatus('current')
clusterVirPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirPreempt.setStatus('current')
clusterVirInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 60)).clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirInterval.setStatus('current')
clusterVirPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirPriority.setStatus('current')
clusterVirAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 11), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirAddressType.setStatus('current')
clusterVirAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirAddress.setStatus('current')
sslMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 20))
sslGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 20, 1))
sslStats = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 20, 2))
vhostNum = MibScalar((1, 3, 6, 1, 4, 1, 7564, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vhostNum.setStatus('current')
totalOpenSSLConns = MibScalar((1, 3, 6, 1, 4, 1, 7564, 20, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalOpenSSLConns.setStatus('current')
totalAcceptedConns = MibScalar((1, 3, 6, 1, 4, 1, 7564, 20, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalAcceptedConns.setStatus('current')
totalRequestedConns = MibScalar((1, 3, 6, 1, 4, 1, 7564, 20, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRequestedConns.setStatus('current')
sslTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4), )
if mibBuilder.loadTexts: sslTable.setStatus('current')
sslEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "sslIndex"))
if mibBuilder.loadTexts: sslEntry.setStatus('current')
sslIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslIndex.setStatus('current')
vhostName = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vhostName.setStatus('current')
openSSLConns = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: openSSLConns.setStatus('current')
acceptedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acceptedConns.setStatus('current')
requestedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestedConns.setStatus('current')
resumedSess = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resumedSess.setStatus('current')
resumableSess = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resumableSess.setStatus('current')
missSess = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: missSess.setStatus('current')
connsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connsPerSec.setStatus('current')
caSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 24))
logBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 24, 1))
logHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 24, 2))
caSyslogTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 24, 3))
class SyslogSeverity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7))

logNotificationsSent = MibScalar((1, 3, 6, 1, 4, 1, 7564, 24, 1, 1), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: logNotificationsSent.setStatus('current')
logNotificationsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 7564, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: logNotificationsEnabled.setStatus('current')
logMaxSeverity = MibScalar((1, 3, 6, 1, 4, 1, 7564, 24, 1, 3), SyslogSeverity().clone('warning')).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMaxSeverity.setStatus('current')
logHistTableMaxLength = MibScalar((1, 3, 6, 1, 4, 1, 7564, 24, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(1)).setUnits('entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: logHistTableMaxLength.setStatus('current')
logHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 24, 2, 2), )
if mibBuilder.loadTexts: logHistoryTable.setStatus('current')
logHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 24, 2, 2, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "index"))
if mibBuilder.loadTexts: logHistoryEntry.setStatus('current')
index = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 24, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: index.setStatus('current')
severity = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 24, 2, 2, 1, 2), SyslogSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: severity.setStatus('current')
msgText = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 24, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgText.setStatus('current')
syslogTrap = NotificationType((1, 3, 6, 1, 4, 1, 7564, 24, 3, 1)).setObjects(("CA-SNMP-MIB8", "severity"), ("CA-SNMP-MIB8", "msgText"))
if mibBuilder.loadTexts: syslogTrap.setStatus('current')
vipStats = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 22))
vipStatus = MibScalar((1, 3, 6, 1, 4, 1, 7564, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipStatus.setStatus('current')
hostName = MibScalar((1, 3, 6, 1, 4, 1, 7564, 22, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostName.setStatus('current')
currentTime = MibScalar((1, 3, 6, 1, 4, 1, 7564, 22, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentTime.setStatus('current')
totalIPPktsIn = MibScalar((1, 3, 6, 1, 4, 1, 7564, 22, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalIPPktsIn.setStatus('current')
totalIPPktsOut = MibScalar((1, 3, 6, 1, 4, 1, 7564, 22, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalIPPktsOut.setStatus('current')
totalIPBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 7564, 22, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalIPBytesIn.setStatus('current')
totalIPBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 7564, 22, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalIPBytesOut.setStatus('current')
ipStatsTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 22, 8), )
if mibBuilder.loadTexts: ipStatsTable.setStatus('current')
ipStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "ipAddrType"), (0, "CA-SNMP-MIB8", "ipAddr"))
if mibBuilder.loadTexts: ipStatsEntry.setStatus('current')
ipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIndex.setStatus('current')
ipAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddress.setStatus('current')
ipPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPktsIn.setStatus('current')
ipBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipBytesIn.setStatus('current')
ipPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPktsOut.setStatus('current')
ipBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipBytesOut.setStatus('current')
startTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: startTime.setStatus('current')
ipAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddrType.setStatus('current')
ipAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddr.setStatus('current')
ifTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 23))
infNumber = MibScalar((1, 3, 6, 1, 4, 1, 7564, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infNumber.setStatus('current')
infTotalInOctets = MibScalar((1, 3, 6, 1, 4, 1, 7564, 23, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infTotalInOctets.setStatus('current')
infTotalOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 7564, 23, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infTotalOutOctets.setStatus('current')
infTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 23, 4), )
if mibBuilder.loadTexts: infTable.setStatus('current')
infEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "infIndex"))
if mibBuilder.loadTexts: infEntry.setStatus('current')
infIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infIndex.setStatus('current')
infDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infDescr.setStatus('current')
infOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infOperStatus.setStatus('current')
infAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infAddress.setStatus('current')
infInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infInOctets.setStatus('current')
infInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infInUcastPkts.setStatus('current')
infInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infInNUcastPkts.setStatus('deprecated')
infInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infInDiscards.setStatus('current')
infInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infInErrors.setStatus('current')
infInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infInUnknownProtos.setStatus('current')
infOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infOutOctets.setStatus('current')
infOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infOutUcastPkts.setStatus('current')
infOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infOutNUcastPkts.setStatus('deprecated')
infOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infOutErrors.setStatus('current')
infIpv4AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 15), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infIpv4AddressType.setStatus('current')
infIpv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 16), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infIpv4Address.setStatus('current')
infIpv6AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infIpv6AddressType.setStatus('current')
infIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infIpv6Address.setStatus('current')
infInBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infInBandwidth.setStatus('deprecated')
infOutBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infOutBandwidth.setStatus('deprecated')
infInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infInMcastPkts.setStatus('current')
infOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infOutMcastPkts.setStatus('current')
infInBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infInBcastPkts.setStatus('current')
infOutBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infOutBcastPkts.setStatus('current')
clickTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 25))
ctcpActiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpActiveOpens.setStatus('current')
ctcpPassiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpPassiveOpens.setStatus('current')
ctcpAttemptFails = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpAttemptFails.setStatus('current')
ctcpEstabResets = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpEstabResets.setStatus('current')
ctcpCurrEstab = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpCurrEstab.setStatus('current')
ctcpInSegs = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpInSegs.setStatus('current')
ctcpOutSegs = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpOutSegs.setStatus('current')
ctcpRetransSegs = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpRetransSegs.setStatus('current')
ctcpInErrs = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpInErrs.setStatus('current')
ctcpOutRsts = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpOutRsts.setStatus('current')
ctcpConnTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 25, 11), )
if mibBuilder.loadTexts: ctcpConnTable.setStatus('current')
ctcpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "ctcpIndex"))
if mibBuilder.loadTexts: ctcpConnEntry.setStatus('current')
ctcpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpIndex.setStatus('current')
ctcpConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("synSent", 3), ("synReceived", 4), ("established", 5), ("finWait1", 6), ("finWait2", 7), ("closeWait", 8), ("lastAck", 9), ("closing", 10), ("timeWait", 11), ("deleteTCB", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpConnState.setStatus('current')
ctcpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpConnLocalAddress.setStatus('current')
ctcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpConnLocalPort.setStatus('current')
ctcpConnRemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpConnRemAddress.setStatus('current')
ctcpConnRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpConnRemPort.setStatus('current')
ctcpConnLocalAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpConnLocalAddrType.setStatus('current')
ctcpConnLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpConnLocalAddr.setStatus('current')
ctcpConnRemAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpConnRemAddrType.setStatus('current')
ctcpConnRemAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpConnRemAddr.setStatus('current')
systemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 3))
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 7564, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
mibBuilder.exportSymbols("CA-SNMP-MIB8", gpStatsTable=gpStatsTable, realStatus=realStatus, virtualServer=virtualServer, rsTotalHits=rsTotalHits, realServer=realServer, ctcpConnState=ctcpConnState, hcNumUps=hcNumUps, virtualIndex=virtualIndex, reqPeakMin=reqPeakMin, vrrpEntry=vrrpEntry, cacheBasicStats=cacheBasicStats, hcStatus=hcStatus, rsStatsTable=rsStatsTable, groupIndex=groupIndex, totalReq=totalReq, slbGeneral=slbGeneral, gpTotalHits=gpTotalHits, caSyslogTrap=caSyslogTrap, failLastHour=failLastHour, gpMetrics=gpMetrics, headRequests=headRequests, requestsReceived=requestsReceived, vsICookieHits=vsICookieHits, realServerID=realServerID, hcIndex=hcIndex, getRequests=getRequests, reqPeakHour=reqPeakHour, rsIpAddr=rsIpAddr, ctcpRetransSegs=ctcpRetransSegs, gpTable=gpTable, rsConnCnt=rsConnCnt, succLastMin=succLastMin, cputemp=cputemp, vsIndex=vsIndex, maxCluster=maxCluster, realAddr=realAddr, rsProtocol=rsProtocol, reqPeakSec5=reqPeakSec5, slbMIB=slbMIB, rcvdBytesPerSec=rcvdBytesPerSec, infInDiscards=infInDiscards, requestsOnRegex=requestsOnRegex, sysSwapUsed=sysSwapUsed, succPeakSec5=succPeakSec5, startTime=startTime, vsTable=vsTable, clientEstabConn=clientEstabConn, reqPeakDay=reqPeakDay, ctcpActiveOpens=ctcpActiveOpens, openSSLConns=openSSLConns, infInNUcastPkts=infInNUcastPkts, infInBandwidth=infInBandwidth, cacheMissWRespNo=cacheMissWRespNo, rsAvgRespTime=rsAvgRespTime, ipIndex=ipIndex, totalRequestedConns=totalRequestedConns, succPeakDay=succPeakDay, totalBytesSent=totalBytesSent, vipStats=vipStats, groupStats=groupStats, gpStatsEntry=gpStatsEntry, hcName=hcName, totalIPBytesIn=totalIPBytesIn, vrrp=vrrp, clusterVirAuthType=clusterVirAuthType, virtualAddressType=virtualAddressType, SyslogSeverity=SyslogSeverity, infDescr=infDescr, failLastMin=failLastMin, currentTime=currentTime, vhostNum=vhostNum, ctcpCurrEstab=ctcpCurrEstab, requestedConns=requestedConns, vsDefaultHits=vsDefaultHits, failLastDay=failLastDay, totalAcceptedConns=totalAcceptedConns, hcPort=hcPort, connectionsPerSec=connectionsPerSec, totalBytesRcvd=totalBytesRcvd, licenseRemainingDays=licenseRemainingDays, hcRSCount=hcRSCount, reqLastSec5=reqLastSec5, connsPerSec=connsPerSec, performance=performance, logNotificationsSent=logNotificationsSent, vsPerstntCookieHits=vsPerstntCookieHits, succLastSec5=succLastSec5, ipStatsEntry=ipStatsEntry, vsQosURLHits=vsQosURLHits, rsID=rsID, Float=Float, resumableSess=resumableSess, hcConnFail=hcConnFail, clusterVirAddressType=clusterVirAddressType, virtualPort=virtualPort, activeTransac=activeTransac, gpEntry=gpEntry, missSess=missSess, ifTraffic=ifTraffic, vsBackupHits=vsBackupHits, infInUnknownProtos=infInUnknownProtos, realStats=realStats, groupCurCfg=groupCurCfg, ctcpInErrs=ctcpInErrs, totalFail=totalFail, vsIpAddr=vsIpAddr, reqLastDay=reqLastDay, revProxyCache=revProxyCache, ctcpConnTable=ctcpConnTable, vsURLHits=vsURLHits, cacheSkip=cacheSkip, vsIpAddress=vsIpAddress, ctcpConnRemPort=ctcpConnRemPort, hcStatsEntry=hcStatsEntry, slbStats=slbStats, succPeakHour=succPeakHour, sslIndex=sslIndex, ipAddress=ipAddress, vsEntry=vsEntry, purgeRequests=purgeRequests, acceptedConns=acceptedConns, PYSNMP_MODULE_ID=arrayNetworks, infIpv4AddressType=infIpv4AddressType, vsQosCookieHits=vsQosCookieHits, infOutBandwidth=infOutBandwidth, realIndex=realIndex, ipBytesOut=ipBytesOut, index=index, sysSwapCapacity=sysSwapCapacity, infOperStatus=infOperStatus, rsIpAddressType=rsIpAddressType, failLastSec=failLastSec, clusterVirAuthPasswd=clusterVirAuthPasswd, cacheMissWNoncacheReq=cacheMissWNoncacheReq, infTotalOutOctets=infTotalOutOctets, vsPerstntURLHits=vsPerstntURLHits, vsCount=vsCount, cacheMissWNewEntry=cacheMissWNewEntry, monitor=monitor, clusterVirIfname=clusterVirIfname, syslogTrap=syslogTrap, ipAddrType=ipAddrType, requestsToHttps=requestsToHttps, totalSucc=totalSucc, requestsToUrl=requestsToUrl, vrrpTable=vrrpTable, logHistoryEntry=logHistoryEntry, vsPort=vsPort, requestsPerSec=requestsPerSec, ipAddr=ipAddr, infIpv4Address=infIpv4Address, rsTable=rsTable, totalIPPktsIn=totalIPPktsIn, failLastSec5=failLastSec5, rsIndex=rsIndex, caStart=caStart, infOutMcastPkts=infOutMcastPkts, ctcpConnLocalAddrType=ctcpConnLocalAddrType, virtualAddr=virtualAddr, ctcpPassiveOpens=ctcpPassiveOpens, cacheStatus=cacheStatus, clusterNum=clusterNum, ctcpConnLocalAddr=ctcpConnLocalAddr, infOutNUcastPkts=infOutNUcastPkts, reqLastHour=reqLastHour, vsMaxConn=vsMaxConn, sslTable=sslTable, rsEntry=rsEntry, clusterVirPreempt=clusterVirPreempt, infTable=infTable, postRequests=postRequests, vsRedirectHits=vsRedirectHits, gpIndex=gpIndex, hcCause=hcCause, rsCntOfReq=rsCntOfReq, vsRCookieHits=vsRCookieHits, clusterVirState=clusterVirState, infOutErrors=infOutErrors, reqPeakSec=reqPeakSec, groupCount=groupCount, infOutOctets=infOutOctets, infOutBcastPkts=infOutBcastPkts, hitRevalidate=hitRevalidate, clusterVirIndex=clusterVirIndex, succLastDay=succLastDay, totalIPPktsOut=totalIPPktsOut, ctcpConnRemAddrType=ctcpConnRemAddrType, vsStatsEntry=vsStatsEntry, hcAddressType=hcAddressType, realID=realID, sdns=sdns, resumedSess=resumedSess, vsProtocol=vsProtocol, virtualStats=virtualStats, virtualAddress=virtualAddress, ctcpConnEntry=ctcpConnEntry, infEntry=infEntry, totalIPBytesOut=totalIPBytesOut, fanspeed=fanspeed, memory=memory, infInErrors=infInErrors, sslGeneral=sslGeneral, clusterVirAddress=clusterVirAddress, ctcpConnLocalAddress=ctcpConnLocalAddress, infTotalInOctets=infTotalInOctets, hcAddr=hcAddr, infOutUcastPkts=infOutUcastPkts, clusterVirAddr=clusterVirAddr, rsCount=rsCount, succLastSec=succLastSec, msgText=msgText, logHistoryTable=logHistoryTable, succLastHour=succLastHour, vsHeaderHits=vsHeaderHits, vsHashURLHits=vsHashURLHits, ctcpOutSegs=ctcpOutSegs, vipStatus=vipStatus, ipPktsIn=ipPktsIn, infIpv6AddressType=infIpv6AddressType, realAddress=realAddress, severity=severity, sslStats=sslStats, cpuUtilization=cpuUtilization, groupID=groupID, reqLastSec=reqLastSec, ctcpAttemptFails=ctcpAttemptFails, rsMaxConn=rsMaxConn, infIpv6Address=infIpv6Address, serialNumber=serialNumber, hcConnAttempt=hcConnAttempt, vsStaticHits=vsStaticHits, ctcpEstabResets=ctcpEstabResets, infInBcastPkts=infInBcastPkts, ctcpOutRsts=ctcpOutRsts, hcConnSuccess=hcConnSuccess, sysMemory=sysMemory, sentBytesPerSec=sentBytesPerSec, clusterVirInterval=clusterVirInterval, ctcpConnRemAddress=ctcpConnRemAddress, realAddressType=realAddressType, serverEstabConn=serverEstabConn, infAddress=infAddress, succPeakSec=succPeakSec, logMaxSeverity=logMaxSeverity, compression=compression, hcStatsTable=hcStatsTable, ctcpConnRemAddr=ctcpConnRemAddr, ipStatsTable=ipStatsTable, infInUcastPkts=infInUcastPkts, caTraps=caTraps, vsHostnameHits=vsHostnameHits, rsStatus=rsStatus, clusterId=clusterId, ctcpConnLocalPort=ctcpConnLocalPort)
mibBuilder.exportSymbols("CA-SNMP-MIB8", hcNumDowns=hcNumDowns, vsID=vsID, ctcpInSegs=ctcpInSegs, arrayNetworks=arrayNetworks, logBasic=logBasic, caShutdown=caShutdown, logHistory=logHistory, infInMcastPkts=infInMcastPkts, hostName=hostName, sysMemoryUtilization=sysMemoryUtilization, logNotificationsEnabled=logNotificationsEnabled, rsIpAddress=rsIpAddress, healthCheck=healthCheck, responsesOnRegex=responsesOnRegex, sslMIB=sslMIB, succPeakMin=succPeakMin, cacheHitRatio=cacheHitRatio, ctcpIndex=ctcpIndex, hcAddress=hcAddress, hitsReply=hitsReply, hitsReplyWPreFailed=hitsReplyWPreFailed, clusterVrrp=clusterVrrp, rsPort=rsPort, vsStatsTable=vsStatsTable, hcStats=hcStats, ipPktsOut=ipPktsOut, virtServerID=virtServerID, realPort=realPort, totalOpenSSLConns=totalOpenSSLConns, systemInfo=systemInfo, caSyslog=caSyslog, vsQosClientPortHits=vsQosClientPortHits, infInOctets=infInOctets, infIndex=infIndex, hitsReplyWNotModified=hitsReplyWNotModified, responsesToHttps=responsesToHttps, vsCacheHits=vsCacheHits, peakSentBytesPerSec=peakSentBytesPerSec, vsQosNetworkHits=vsQosNetworkHits, powerstate=powerstate, reqLastMin=reqLastMin, peakRcvdBytesPerSec=peakRcvdBytesPerSec, sslEntry=sslEntry, vhostName=vhostName, gpID=gpID, vsConnCnt=vsConnCnt, clickTcp=clickTcp, vsQosBodyHits=vsQosBodyHits, vsRegexHits=vsRegexHits, logHistTableMaxLength=logHistTableMaxLength, ipBytesIn=ipBytesIn, infNumber=infNumber, rsStatsEntry=rsStatsEntry, vsIpAddressType=vsIpAddressType, clusterVirPriority=clusterVirPriority)
