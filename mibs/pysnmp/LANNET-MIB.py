#
# PySNMP MIB module LANNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LANNET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:55:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
DisplayString, = mibBuilder.importSymbols("RFC1158-MIB", "DisplayString")
MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("RFC1212", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, ModuleIdentity, Counter64, TimeTicks, Integer32, NotificationType, Unsigned32, IpAddress, Bits, Counter32, MibIdentifier, ObjectIdentity, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "ModuleIdentity", "Counter64", "TimeTicks", "Integer32", "NotificationType", "Unsigned32", "IpAddress", "Bits", "Counter32", "MibIdentifier", "ObjectIdentity", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
lannet = MibIdentifier((1, 3, 6, 1, 4, 1, 81))
chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 7))
genGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 8))
genPort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 9))
genIntPort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 10))
softRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 11))
eth = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 12))
tok = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 13))
ts = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 14))
ltalk = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 15))
cl = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 16))
lntOID = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 17))
chHWType = MibScalar((1, 3, 6, 1, 4, 1, 81, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 255))).clone(namedValues=NamedValues(("let18", 1), ("let3", 2), ("let36", 3), ("let18Extended", 4), ("lert40", 5), ("let10", 6), ("fdx100", 7), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chHWType.setStatus('mandatory')
chNumberOfSlots = MibScalar((1, 3, 6, 1, 4, 1, 81, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumberOfSlots.setStatus('mandatory')
chNumberOfEthernetBuses = MibScalar((1, 3, 6, 1, 4, 1, 81, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumberOfEthernetBuses.setStatus('mandatory')
chNumberOfTRBuses = MibScalar((1, 3, 6, 1, 4, 1, 81, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumberOfTRBuses.setStatus('mandatory')
chNumberOfFDDIBuses = MibScalar((1, 3, 6, 1, 4, 1, 81, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumberOfFDDIBuses.setStatus('mandatory')
chNumberOfLocalTalkBuses = MibScalar((1, 3, 6, 1, 4, 1, 81, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumberOfLocalTalkBuses.setStatus('mandatory')
chReset = MibScalar((1, 3, 6, 1, 4, 1, 81, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chReset.setStatus('mandatory')
chFullConfig = MibScalar((1, 3, 6, 1, 4, 1, 81, 7, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFullConfig.setStatus('mandatory')
chAg = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 7, 9))
chGenAgTable = MibTable((1, 3, 6, 1, 4, 1, 81, 7, 9, 1), )
if mibBuilder.loadTexts: chGenAgTable.setStatus('mandatory')
chGenAgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 7, 9, 1, 1), ).setIndexNames((0, "LANNET-MIB", "chGenAgId"))
if mibBuilder.loadTexts: chGenAgEntry.setStatus('mandatory')
chGenAgId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chGenAgId.setStatus('mandatory')
chGenAgType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 255))).clone(namedValues=NamedValues(("nma1-et", 1), ("nma1-et-e", 2), ("nma1-tr", 3), ("nma2-et", 4), ("nma2-tr", 5), ("nma2-fddi", 6), ("ielb", 7), ("itlb", 8), ("lts16", 9), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chGenAgType.setStatus('mandatory')
chGenAgMgmtIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 255))).clone(namedValues=NamedValues(("none", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10MBit", 12), ("proteon-80MBit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("t1-carrier", 18), ("cept", 19), ("basicIsdn", 20), ("primaryIsdn", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ip", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chGenAgMgmtIfType.setStatus('mandatory')
chGenAgAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chGenAgAddr.setStatus('mandatory')
chGenAgSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 1, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chGenAgSpecificOID.setStatus('mandatory')
chLntAgTable = MibTable((1, 3, 6, 1, 4, 1, 81, 7, 9, 2), )
if mibBuilder.loadTexts: chLntAgTable.setStatus('mandatory')
chLntAgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1), ).setIndexNames((0, "LANNET-MIB", "chLntAgId"))
if mibBuilder.loadTexts: chLntAgEntry.setStatus('mandatory')
chLntAgId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chLntAgId.setStatus('mandatory')
chLntAgSLIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chLntAgSLIPAddress.setStatus('mandatory')
chLntAgSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chLntAgSWVersion.setStatus('mandatory')
chLntAgKernelVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chLntAgKernelVersion.setStatus('mandatory')
chLntAgCoprocSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chLntAgCoprocSWVersion.setStatus('mandatory')
chLntAgSWFault = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chLntAgSWFault.setStatus('mandatory')
chLntAgMgmtBusSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chLntAgMgmtBusSelection.setStatus('mandatory')
chLntAgCoprocCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("commProblems", 2), ("timeout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chLntAgCoprocCommStatus.setStatus('mandatory')
chLntAgCommDebugMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chLntAgCommDebugMode.setStatus('mandatory')
chLntAgConfigChangeTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chLntAgConfigChangeTraps.setStatus('mandatory')
chLntAgFaultTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chLntAgFaultTraps.setStatus('mandatory')
chLntAgTrafficThreshTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chLntAgTrafficThreshTraps.setStatus('mandatory')
chLntAgGroupEnrollDeenrollTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chLntAgGroupEnrollDeenrollTraps.setStatus('mandatory')
chLntAgSoftFaultTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chLntAgSoftFaultTraps.setStatus('mandatory')
chLntAgHubEnrollTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chLntAgHubEnrollTraps.setStatus('mandatory')
chLntAgTempThreshTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chLntAgTempThreshTraps.setStatus('mandatory')
chLntAgSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 17), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chLntAgSpecificOID.setStatus('mandatory')
chLntAgLastAddrConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chLntAgLastAddrConfig.setStatus('mandatory')
chLntAgSecAddrConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chLntAgSecAddrConfig.setStatus('mandatory')
chLntAgSoftwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unLoadable", 1), ("loaded", 2), ("downLoading", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chLntAgSoftwareStatus.setStatus('mandatory')
chLntAgConfigurationSymbol = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chLntAgConfigurationSymbol.setStatus('mandatory')
chLntAgIntTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chLntAgIntTemp.setStatus('mandatory')
chLntAgBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 9, 2, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chLntAgBootVersion.setStatus('mandatory')
chMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 7, 10))
chMgrTrapRepStatus = MibScalar((1, 3, 6, 1, 4, 1, 81, 7, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chMgrTrapRepStatus.setStatus('mandatory')
chMgrContPerfRep = MibScalar((1, 3, 6, 1, 4, 1, 81, 7, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chMgrContPerfRep.setStatus('mandatory')
chMgrMngmtState = MibScalar((1, 3, 6, 1, 4, 1, 81, 7, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chMgrMngmtState.setStatus('mandatory')
chHW = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 7, 11))
chHWPSUTable = MibTable((1, 3, 6, 1, 4, 1, 81, 7, 11, 1), )
if mibBuilder.loadTexts: chHWPSUTable.setStatus('mandatory')
chHWPSUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 7, 11, 1, 1), ).setIndexNames((0, "LANNET-MIB", "chHWPSUId"))
if mibBuilder.loadTexts: chHWPSUEntry.setStatus('mandatory')
chHWPSUId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chHWPSUId.setStatus('mandatory')
chHWPSUActivityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notActive", 1), ("dormant", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chHWPSUActivityStatus.setStatus('mandatory')
chHWPSULocation = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chHWPSULocation.setStatus('mandatory')
chHWPSUVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 7, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chHWPSUVoltage.setStatus('mandatory')
chHWIntTempWarning = MibScalar((1, 3, 6, 1, 4, 1, 81, 7, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("exceeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chHWIntTempWarning.setStatus('mandatory')
chHWIntTempThresh = MibScalar((1, 3, 6, 1, 4, 1, 81, 7, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chHWIntTempThresh.setStatus('mandatory')
chHWPeakIntTemp = MibScalar((1, 3, 6, 1, 4, 1, 81, 7, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chHWPeakIntTemp.setStatus('mandatory')
genGroupTable = MibTable((1, 3, 6, 1, 4, 1, 81, 8, 1), )
if mibBuilder.loadTexts: genGroupTable.setStatus('mandatory')
genGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 8, 1, 1), ).setIndexNames((0, "LANNET-MIB", "genGroupId"))
if mibBuilder.loadTexts: genGroupEntry.setStatus('mandatory')
genGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupId.setStatus('mandatory')
genGroupSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupSWVersion.setStatus('mandatory')
genGroupKernelVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupKernelVersion.setStatus('mandatory')
genGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 255))).clone(namedValues=NamedValues(("le10b", 1), ("le10b-2", 2), ("le10c", 3), ("le10c-2", 4), ("le15", 5), ("le15-2", 6), ("le20", 7), ("le30x", 8), ("le30x-2", 9), ("le30xd", 10), ("le40x", 11), ("le40xt", 12), ("ltr4-RJ45", 13), ("ltr4-D9", 14), ("ltr4-D25", 15), ("ltr4-FO", 16), ("ltrio-RJ45", 19), ("ltrio-D9", 20), ("ltrio-D25", 21), ("ltrio-FO", 22), ("ltrio-Con1", 23), ("ltrio-Con2", 24), ("le10b-2r", 25), ("le10c-2r", 26), ("le80xt", 27), ("le140xt", 28), ("ielb", 29), ("ltrf4", 30), ("ltrf16", 31), ("lts16", 32), ("le20n", 33), ("ltr104-RJ45", 34), ("le20r", 35), ("llt8", 36), ("le20s", 37), ("le10b2n", 38), ("ltr104-D9", 39), ("ltr104-D25", 40), ("ltrt-RJ45", 41), ("ltrt-D9", 42), ("ltr104f", 43), ("itlb", 44), ("le140xtf", 45), ("le120r", 46), ("le120r-2", 47), ("le140xtc", 48), ("le110b", 49), ("le110bq", 50), ("lcl100", 51), ("le140xtq", 52), ("le20n-fb", 53), ("le20s-fb", 54), ("le140xtf-fb", 55), ("ltr104s", 56), ("lert40-AUI", 57), ("lert40-10BASET", 58), ("lfd104-mic", 59), ("lfd104-stm", 60), ("lfd104-stl", 61), ("lfd104-stp", 62), ("lfd104-utp", 63), ("lfd102-mic", 64), ("lfd102-stm", 65), ("lfd102-sts", 66), ("le140xtn", 67), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupType.setStatus('mandatory')
genGroupDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupDescr.setStatus('mandatory')
genGroupNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupNumberOfPorts.setStatus('mandatory')
genGroupNumberOfIntPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupNumberOfIntPorts.setStatus('mandatory')
genGroupReset = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genGroupReset.setStatus('mandatory')
genGroupAutoMan = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("man", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupAutoMan.setStatus('mandatory')
genGroupFullConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupFullConfig.setStatus('mandatory')
genGroupRedun12 = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genGroupRedun12.setStatus('mandatory')
genGroupRedun34 = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genGroupRedun34.setStatus('mandatory')
genGroupRedun13_14 = MibScalar((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setLabel("genGroupRedun13-14").setMaxAccess("readwrite")
if mibBuilder.loadTexts: genGroupRedun13_14.setStatus('mandatory')
genGroupStandAloneMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genGroupStandAloneMode.setStatus('mandatory')
genGroupInterProcCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("ok", 1), ("commProblems", 2), ("noCommunication", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupInterProcCommStatus.setStatus('mandatory')
genGroupCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("ok", 1), ("commProblems", 2), ("noCommunication", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupCommStatus.setStatus('mandatory')
genGroupHWStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ok", 1), ("hardwareProblems", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupHWStatus.setStatus('mandatory')
genGroupSupplyVoltageFault = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupSupplyVoltageFault.setStatus('mandatory')
genGroupIntTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupIntTemp.setStatus('mandatory')
genGroupSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 20), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupSpecificOID.setStatus('mandatory')
genGroupConfigurationSymbol = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 8, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genGroupConfigurationSymbol.setStatus('mandatory')
genPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 9, 1), )
if mibBuilder.loadTexts: genPortTable.setStatus('mandatory')
genPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 9, 1, 1), ).setIndexNames((0, "LANNET-MIB", "genPortGroupId"), (0, "LANNET-MIB", "genPortId"))
if mibBuilder.loadTexts: genPortEntry.setStatus('mandatory')
genPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genPortGroupId.setStatus('mandatory')
genPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genPortId.setStatus('mandatory')
genPortFunctionality = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("private", 1), ("repeaterAUI", 2), ("repeaterThin", 3), ("repeater10BaseT", 4), ("tenBaseFSyncAct", 5), ("foirl", 6), ("xcvr", 7), ("lobe", 8), ("ri", 9), ("ro", 10), ("serial", 11), ("localTalk", 12), ("fddi", 13), ("clock", 14), ("genTokenRing", 15), ("dte", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genPortFunctionality.setStatus('mandatory')
genPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 255))).clone(namedValues=NamedValues(("le10bPort", 1), ("le10cPort", 2), ("le15Port", 3), ("le20Port", 4), ("le30xPort", 5), ("le30xdPort", 6), ("le40xPort", 7), ("le40xtPort", 8), ("lobeRJ45", 9), ("lobeD9", 10), ("lobeD25", 11), ("lobeFO", 12), ("ri104D25", 13), ("ro104D25", 14), ("riRJ45", 15), ("riD9", 16), ("riD25", 17), ("riFO", 18), ("ri104RJ45", 19), ("ri104D9", 20), ("roRJ45", 21), ("roD9", 22), ("roD25", 23), ("roFO", 24), ("ro104RJ45", 25), ("ro104D9", 26), ("le80xtPort", 27), ("le140xtPort", 28), ("ielb-AUIPort", 29), ("ielb-10btPort", 30), ("ltrf4Port", 31), ("ltrf16Port", 32), ("lts16Port", 33), ("llt8Port", 34), ("le20rPort", 35), ("itlbRoPort", 36), ("itlbRiPort", 37), ("itlbDTEPort", 38), ("starFO", 39), ("le10bnPort", 40), ("le120rPort", 41), ("le140xtf-foPort", 42), ("le140xtf-10btPort", 43), ("le140xtcPort", 44), ("le110bPort", 45), ("le110bqPort", 46), ("le140xtqPort", 47), ("lert40-AUIPort", 48), ("lert40-10btPort", 49), ("clock-int", 50), ("clock-ext", 51), ("ri104RJ45S", 52), ("r0104RJ45S", 53), ("lobe104RJ45S", 54), ("le20fbPort", 55), ("le140xtf-fofbPort", 56), ("fddi-micPort1", 57), ("fddi-micPort2", 58), ("fddi-micPort3", 59), ("fddi-stmPort1", 60), ("fddi-stmPort2", 61), ("fddi-stmPort3", 62), ("fddi-stlPort1", 63), ("fddi-stlPort2", 64), ("fddi-stlPort3", 65), ("fddi-stpPort1", 66), ("fddi-stpPort2", 67), ("fddi-stpPort3", 68), ("fddi-utpPort1", 69), ("fddi-utpPort2", 70), ("fddi-utpPort3", 71), ("fddi-stsPort1", 72), ("fddi-stsPort2", 73), ("fddi-stsPort3", 74), ("le140xtnPort", 75), ("unknownPort", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genPortType.setStatus('mandatory')
genPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 9, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genPortDescr.setStatus('mandatory')
genPortActivityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("notActive", 1), ("dormant", 2), ("active", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genPortActivityStatus.setStatus('mandatory')
genPortSecurityPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 9, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genPortSecurityPolicy.setStatus('mandatory')
genPortSecureAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 9, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genPortSecureAddresses.setStatus('mandatory')
genPortIntPortConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genPortIntPortConnection.setStatus('mandatory')
genPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genPortAdminStatus.setStatus('mandatory')
genPortSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 9, 1, 1, 11), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genPortSpecificOID.setStatus('mandatory')
genIntPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 10, 1), )
if mibBuilder.loadTexts: genIntPortTable.setStatus('mandatory')
genIntPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 10, 1, 1), ).setIndexNames((0, "LANNET-MIB", "genIntPortGroupId"), (0, "LANNET-MIB", "genIntPortId"))
if mibBuilder.loadTexts: genIntPortEntry.setStatus('mandatory')
genIntPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genIntPortGroupId.setStatus('mandatory')
genIntPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genIntPortId.setStatus('mandatory')
genIntPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genIntPortAdminStatus.setStatus('mandatory')
genIntPortActivityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("notActive", 1), ("dormant", 2), ("active", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genIntPortActivityStatus.setStatus('mandatory')
genIntPortBusConnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genIntPortBusConnNumber.setStatus('mandatory')
genIntPortBusConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("ethernet", 1), ("token-ring", 2), ("local-talk", 3), ("fddi", 4), ("other", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genIntPortBusConnType.setStatus('mandatory')
genIntPortSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 10, 1, 1, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genIntPortSpecificOID.setStatus('mandatory')
softRedundancyTable = MibTable((1, 3, 6, 1, 4, 1, 81, 11, 1), )
if mibBuilder.loadTexts: softRedundancyTable.setStatus('mandatory')
softRedundancyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 11, 1, 1), ).setIndexNames((0, "LANNET-MIB", "softRedundancyId"))
if mibBuilder.loadTexts: softRedundancyEntry.setStatus('mandatory')
softRedundancyId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softRedundancyId.setStatus('mandatory')
softRedundancyName = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 11, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softRedundancyName.setStatus('mandatory')
softRedundancyGroupId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softRedundancyGroupId1.setStatus('mandatory')
softRedundancyPortId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softRedundancyPortId1.setStatus('mandatory')
softRedundancyGroupId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softRedundancyGroupId2.setStatus('mandatory')
softRedundancyPortId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softRedundancyPortId2.setStatus('mandatory')
softRedundancyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softRedundancyStatus.setStatus('mandatory')
ethAg = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 12, 1))
ethAgTable = MibTable((1, 3, 6, 1, 4, 1, 81, 12, 1, 1), )
if mibBuilder.loadTexts: ethAgTable.setStatus('mandatory')
ethAgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 12, 1, 1, 1), ).setIndexNames((0, "LANNET-MIB", "ethAgId"))
if mibBuilder.loadTexts: ethAgEntry.setStatus('mandatory')
ethAgId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethAgId.setStatus('mandatory')
ethAgPerfBusSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethAgPerfBusSelection.setStatus('mandatory')
ethGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 12, 2))
ethGroupTable = MibTable((1, 3, 6, 1, 4, 1, 81, 12, 2, 1), )
if mibBuilder.loadTexts: ethGroupTable.setStatus('mandatory')
ethGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1), ).setIndexNames((0, "LANNET-MIB", "ethGroupId"))
if mibBuilder.loadTexts: ethGroupEntry.setStatus('mandatory')
ethGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupId.setStatus('mandatory')
ethGroupFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupFIFO.setStatus('mandatory')
ethGroup10BTPlus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroup10BTPlus.setStatus('mandatory')
ethGroupIntPortsRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroupIntPortsRedundancy.setStatus('mandatory')
ethGroupBackboneMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroupBackboneMode.setStatus('mandatory')
ethGroupFOIRLPlusMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroupFOIRLPlusMode.setStatus('mandatory')
ethGroupWrongPortSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupWrongPortSelection.setStatus('mandatory')
ethGroupBackupBus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroupBackupBus.setStatus('mandatory')
ethGroupSingleBusMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupSingleBusMode.setStatus('mandatory')
ethGroupSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 2, 1, 1, 10), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupSpecificOID.setStatus('mandatory')
ethPort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 12, 3))
ethPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 12, 3, 1), )
if mibBuilder.loadTexts: ethPortTable.setStatus('mandatory')
ethPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1), ).setIndexNames((0, "LANNET-MIB", "ethPortGroupId"), (0, "LANNET-MIB", "ethPortId"))
if mibBuilder.loadTexts: ethPortEntry.setStatus('mandatory')
ethPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortGroupId.setStatus('mandatory')
ethPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortId.setStatus('mandatory')
ethPortFunctionalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 255))).clone(namedValues=NamedValues(("ok", 1), ("rld", 2), ("localJabber", 3), ("tld", 4), ("remoteJabber", 5), ("illSeq", 6), ("shortCirc", 7), ("partitionOrLocalJabber", 8), ("remoteFaultOrLockLost", 9), ("remoteFault", 10), ("lockLost", 11), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortFunctionalStatus.setStatus('mandatory')
ethPortManPart = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethPortManPart.setStatus('mandatory')
ethPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortJabber.setStatus('mandatory')
ethPortNoAUILoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortNoAUILoop.setStatus('mandatory')
ethPortMJLP = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortMJLP.setStatus('mandatory')
ethPortFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortFIFO.setStatus('mandatory')
ethPortAutoPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("autoPartition", 1), ("notAutoPartition", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortAutoPartitionState.setStatus('mandatory')
ethPortSQETest = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethPortSQETest.setStatus('mandatory')
ethPortLastSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortLastSourceAddr.setStatus('mandatory')
ethPortUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("singleUser", 1), ("multiUser", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortUserStatus.setStatus('mandatory')
ethPortMainBusSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethPortMainBusSelection.setStatus('mandatory')
ethPortTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortTraffic.setStatus('mandatory')
ethPortFramesReceivedOK = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortFramesReceivedOK.setStatus('mandatory')
ethPortRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortRunts.setStatus('mandatory')
ethPortPacketErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortPacketErrors.setStatus('mandatory')
ethPortSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 3, 1, 1, 18), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortSpecificOID.setStatus('mandatory')
ethIntPort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 12, 4))
ethIntPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 12, 4, 1), )
if mibBuilder.loadTexts: ethIntPortTable.setStatus('mandatory')
ethIntPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 12, 4, 1, 1), ).setIndexNames((0, "LANNET-MIB", "ethIntPortGroupId"), (0, "LANNET-MIB", "ethIntPortId"))
if mibBuilder.loadTexts: ethIntPortEntry.setStatus('mandatory')
ethIntPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntPortGroupId.setStatus('mandatory')
ethIntPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntPortId.setStatus('mandatory')
ethIntPortPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntPortPartition.setStatus('mandatory')
ethIntPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntPortJabber.setStatus('mandatory')
ethIntPortBackedUp = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIntPortBackedUp.setStatus('mandatory')
ethBus = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 12, 5))
ethBusPerfTable = MibTable((1, 3, 6, 1, 4, 1, 81, 12, 5, 1), )
if mibBuilder.loadTexts: ethBusPerfTable.setStatus('mandatory')
ethBusPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1), ).setIndexNames((0, "LANNET-MIB", "ethBusPerfAgId"), (0, "LANNET-MIB", "ethBusPerfId"))
if mibBuilder.loadTexts: ethBusPerfEntry.setStatus('mandatory')
ethBusPerfAgId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusPerfAgId.setStatus('mandatory')
ethBusPerfId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusPerfId.setStatus('mandatory')
ethBusTrafficBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusTrafficBuffer.setStatus('mandatory')
ethBusTrafficThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethBusTrafficThresh.setStatus('mandatory')
ethBusPeakTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusPeakTraffic.setStatus('mandatory')
ethBusTotalCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusTotalCollisions.setStatus('mandatory')
ethBusTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusTotalPackets.setStatus('mandatory')
ethBusTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusTotalErrors.setStatus('mandatory')
ethBusTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusTraffic.setStatus('mandatory')
ethBusClockTable = MibTable((1, 3, 6, 1, 4, 1, 81, 12, 5, 2), )
if mibBuilder.loadTexts: ethBusClockTable.setStatus('mandatory')
ethBusClockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 12, 5, 2, 1), ).setIndexNames((0, "LANNET-MIB", "ethBusClockBusId"), (0, "LANNET-MIB", "ethBusClockId"))
if mibBuilder.loadTexts: ethBusClockEntry.setStatus('mandatory')
ethBusClockBusId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusClockBusId.setStatus('mandatory')
ethBusClockId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusClockId.setStatus('mandatory')
ethBusClockTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 12, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("ok", 1), ("clockFailure", 2), ("busFailure", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusClockTestResult.setStatus('mandatory')
tokRing = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 13, 1))
tokRingTable = MibTable((1, 3, 6, 1, 4, 1, 81, 13, 1, 1), )
if mibBuilder.loadTexts: tokRingTable.setStatus('mandatory')
tokRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1), ).setIndexNames((0, "LANNET-MIB", "tokRingAgId"), (0, "LANNET-MIB", "tokRingId"))
if mibBuilder.loadTexts: tokRingEntry.setStatus('mandatory')
tokRingAgId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingAgId.setStatus('mandatory')
tokRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingId.setStatus('mandatory')
tokRingLeftSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingLeftSlot.setStatus('mandatory')
tokRingRightSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokRingRightSlot.setStatus('mandatory')
tokRingTrafficBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingTrafficBuffer.setStatus('mandatory')
tokRingTrafficThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokRingTrafficThresh.setStatus('mandatory')
tokRingPeakTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingPeakTraffic.setStatus('mandatory')
tokRingNumberOfStations = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingNumberOfStations.setStatus('mandatory')
tokRingConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingConfiguration.setStatus('mandatory')
tokRingBeaconing = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingBeaconing.setStatus('mandatory')
tokRingBeaconingStation = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingBeaconingStation.setStatus('mandatory')
tokRingStationsMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingStationsMatch.setStatus('mandatory')
tokRingTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingTraffic.setStatus('mandatory')
tokGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 13, 2))
tokGroupTable = MibTable((1, 3, 6, 1, 4, 1, 81, 13, 2, 1), )
if mibBuilder.loadTexts: tokGroupTable.setStatus('mandatory')
tokGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1), ).setIndexNames((0, "LANNET-MIB", "tokGroupId"))
if mibBuilder.loadTexts: tokGroupEntry.setStatus('mandatory')
tokGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupId.setStatus('mandatory')
tokGroupAutoRightLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupAutoRightLoop.setStatus('mandatory')
tokGroupAutoLeftLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupAutoLeftLoop.setStatus('mandatory')
tokGroupManRightLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupManRightLoop.setStatus('mandatory')
tokGroupManLeftLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupManLeftLoop.setStatus('mandatory')
tokGroupRightNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exist", 1), ("notExist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupRightNeighbor.setStatus('mandatory')
tokGroupLeftNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exist", 1), ("notExist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupLeftNeighbor.setStatus('mandatory')
tokGroupIOMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 255))).clone(namedValues=NamedValues(("single", 1), ("dualRingIn", 2), ("dualRingOut", 3), ("illegalMode", 4), ("lobe", 5), ("intRepeater", 6), ("star", 7), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupIOMode.setStatus('mandatory')
tokGroupBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("modeA", 1), ("modeB", 2), ("modeC", 3), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupBridgeMode.setStatus('mandatory')
tokGroupManLinkLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupManLinkLoop.setStatus('mandatory')
tokGroupManBusLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupManBusLoop.setStatus('mandatory')
tokGroupAutoLinkLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupAutoLinkLoop.setStatus('mandatory')
tokGroupAutoBusLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupAutoBusLoop.setStatus('mandatory')
tokGroupSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 1, 1, 14), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupSpecificOID.setStatus('mandatory')
tokGroupRingTable = MibTable((1, 3, 6, 1, 4, 1, 81, 13, 2, 2), )
if mibBuilder.loadTexts: tokGroupRingTable.setStatus('mandatory')
tokGroupRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 13, 2, 2, 1), ).setIndexNames((0, "LANNET-MIB", "tokGroupRingGroupId"), (0, "LANNET-MIB", "tokGroupRingId"))
if mibBuilder.loadTexts: tokGroupRingEntry.setStatus('mandatory')
tokGroupRingGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupRingGroupId.setStatus('mandatory')
tokGroupRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupRingId.setStatus('mandatory')
tokGroupRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("oneMegabit", 2), ("fourMegabit", 3), ("sixteenMegabit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupRingSpeed.setStatus('mandatory')
tokGroupRingInserted = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInserted", 1), ("inserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupRingInserted.setStatus('mandatory')
tokPort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 13, 3))
tokPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 13, 3, 1), )
if mibBuilder.loadTexts: tokPortTable.setStatus('mandatory')
tokPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1), ).setIndexNames((0, "LANNET-MIB", "tokPortGroupId"), (0, "LANNET-MIB", "tokPortId"))
if mibBuilder.loadTexts: tokPortEntry.setStatus('mandatory')
tokPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortGroupId.setStatus('mandatory')
tokPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortId.setStatus('mandatory')
tokPortBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokPortBypass.setStatus('mandatory')
tokPortConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("connected", 1), ("notConnected", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortConnected.setStatus('mandatory')
tokPortTCP = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokPortTCP.setStatus('mandatory')
tokPortCableFault = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortCableFault.setStatus('mandatory')
tokPortFunctionalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 255))).clone(namedValues=NamedValues(("ok", 1), ("rld", 2), ("tld", 4), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortFunctionalStatus.setStatus('mandatory')
tokPortLastSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortLastSourceAddr.setStatus('mandatory')
tokPortSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 13, 3, 1, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortSpecificOID.setStatus('mandatory')
tsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 14, 1))
tsGroupTable = MibTable((1, 3, 6, 1, 4, 1, 81, 14, 1, 1), )
if mibBuilder.loadTexts: tsGroupTable.setStatus('mandatory')
tsGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 14, 1, 1, 1), ).setIndexNames((0, "LANNET-MIB", "tsGroupId"))
if mibBuilder.loadTexts: tsGroupEntry.setStatus('mandatory')
tsGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 14, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsGroupId.setStatus('mandatory')
tsGroupLATStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 14, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsGroupLATStatus.setStatus('mandatory')
tsGroupOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 14, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("diagnostics", 1), ("diagnosticsFailure", 2), ("loading", 3), ("loadingFailure", 4), ("operational", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsGroupOperationMode.setStatus('mandatory')
ltalkPort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 15, 1))
ltalkPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 15, 1, 1), )
if mibBuilder.loadTexts: ltalkPortTable.setStatus('mandatory')
ltalkPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 15, 1, 1, 1), ).setIndexNames((0, "LANNET-MIB", "ltalkPortGroupId"), (0, "LANNET-MIB", "ltalkPortId"))
if mibBuilder.loadTexts: ltalkPortEntry.setStatus('mandatory')
ltalkPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltalkPortGroupId.setStatus('mandatory')
ltalkPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 15, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltalkPortId.setStatus('mandatory')
ltalkPortTest = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltalkPortTest.setStatus('mandatory')
ltalkPortTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 15, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltalkPortTestResult.setStatus('mandatory')
ltalkPortJam = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 15, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltalkPortJam.setStatus('mandatory')
clGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 16, 1))
clGroupTable = MibTable((1, 3, 6, 1, 4, 1, 81, 16, 1, 1), )
if mibBuilder.loadTexts: clGroupTable.setStatus('mandatory')
clGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 16, 1, 1, 1), ).setIndexNames((0, "LANNET-MIB", "clGroupId"))
if mibBuilder.loadTexts: clGroupEntry.setStatus('mandatory')
clGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 16, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clGroupId.setStatus('mandatory')
clGroupClockRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 16, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clGroupClockRedundancy.setStatus('mandatory')
clGroupMainClock = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 16, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clGroupMainClock.setStatus('mandatory')
clGroupTestClocks = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 16, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clGroupTestClocks.setStatus('mandatory')
clPort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 16, 2))
clPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 16, 2, 1), )
if mibBuilder.loadTexts: clPortTable.setStatus('mandatory')
clPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 16, 2, 1, 1), ).setIndexNames((0, "LANNET-MIB", "clPortGroupId"), (0, "LANNET-MIB", "clPortId"))
if mibBuilder.loadTexts: clPortEntry.setStatus('mandatory')
clPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 16, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clPortGroupId.setStatus('mandatory')
clPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 16, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clPortId.setStatus('mandatory')
clPortFunctionalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 16, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clPortFunctionalStatus.setStatus('mandatory')
lBoxOID = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 17, 1))
lUnknownBoxOID = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 17, 1, 1))
lLET18BoxOID = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 17, 1, 2))
lLET3BoxOID = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 17, 1, 3))
lLET36BoxOID = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 17, 1, 4))
lLET18EBoxOID = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 17, 1, 5))
lLERT40BoxOID = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 17, 1, 6))
lLET10BoxOID = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 17, 1, 7))
lFDX100BoxOID = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 17, 1, 8))
mibBuilder.exportSymbols("LANNET-MIB", ltalkPortId=ltalkPortId, chMgrContPerfRep=chMgrContPerfRep, softRedundancyTable=softRedundancyTable, lLET36BoxOID=lLET36BoxOID, genGroupSpecificOID=genGroupSpecificOID, ethPortFunctionalStatus=ethPortFunctionalStatus, softRedundancyPortId1=softRedundancyPortId1, ethGroupBackboneMode=ethGroupBackboneMode, tokGroupRingGroupId=tokGroupRingGroupId, ethGroupIntPortsRedundancy=ethGroupIntPortsRedundancy, tokGroupAutoBusLoop=tokGroupAutoBusLoop, ethBusClockId=ethBusClockId, clGroupTable=clGroupTable, ethAg=ethAg, chReset=chReset, chGenAgEntry=chGenAgEntry, ethBusClockTestResult=ethBusClockTestResult, tokRingConfiguration=tokRingConfiguration, clGroup=clGroup, chLntAgKernelVersion=chLntAgKernelVersion, ltalkPortJam=ltalkPortJam, chNumberOfFDDIBuses=chNumberOfFDDIBuses, softRedundancyEntry=softRedundancyEntry, tokGroupRightNeighbor=tokGroupRightNeighbor, genPortActivityStatus=genPortActivityStatus, genGroupRedun12=genGroupRedun12, clPortFunctionalStatus=clPortFunctionalStatus, softRedundancyPortId2=softRedundancyPortId2, tsGroupOperationMode=tsGroupOperationMode, ethBusPerfAgId=ethBusPerfAgId, tokGroupId=tokGroupId, genGroupStandAloneMode=genGroupStandAloneMode, genIntPortGroupId=genIntPortGroupId, chLntAgIntTemp=chLntAgIntTemp, chLntAgId=chLntAgId, genIntPortBusConnType=genIntPortBusConnType, ethPortId=ethPortId, ethBusPerfTable=ethBusPerfTable, genGroup=genGroup, tokRingTrafficThresh=tokRingTrafficThresh, ethGroupFIFO=ethGroupFIFO, ethPortNoAUILoop=ethPortNoAUILoop, genPortIntPortConnection=genPortIntPortConnection, tokGroupManLeftLoop=tokGroupManLeftLoop, genGroupTable=genGroupTable, chLntAgBootVersion=chLntAgBootVersion, ethBusPerfEntry=ethBusPerfEntry, ethBusTrafficThresh=ethBusTrafficThresh, chLntAgLastAddrConfig=chLntAgLastAddrConfig, ethIntPort=ethIntPort, tokRingBeaconingStation=tokRingBeaconingStation, clGroupEntry=clGroupEntry, chHWPSUActivityStatus=chHWPSUActivityStatus, ethPortAutoPartitionState=ethPortAutoPartitionState, genGroupFullConfig=genGroupFullConfig, softRedundancyName=softRedundancyName, clPort=clPort, clPortGroupId=clPortGroupId, chLntAgConfigChangeTraps=chLntAgConfigChangeTraps, chLntAgSpecificOID=chLntAgSpecificOID, clGroupId=clGroupId, chassis=chassis, softRedundancyId=softRedundancyId, tsGroup=tsGroup, ethPortGroupId=ethPortGroupId, tokPortBypass=tokPortBypass, chLntAgEntry=chLntAgEntry, softRedundancy=softRedundancy, chGenAgSpecificOID=chGenAgSpecificOID, ethIntPortEntry=ethIntPortEntry, tokRingId=tokRingId, genGroupAutoMan=genGroupAutoMan, genGroupConfigurationSymbol=genGroupConfigurationSymbol, ethIntPortPartition=ethIntPortPartition, clGroupTestClocks=clGroupTestClocks, ethBusClockTable=ethBusClockTable, tokGroupAutoLeftLoop=tokGroupAutoLeftLoop, ethPortMainBusSelection=ethPortMainBusSelection, chLntAgSecAddrConfig=chLntAgSecAddrConfig, tokPortLastSourceAddr=tokPortLastSourceAddr, ethGroupEntry=ethGroupEntry, tokGroup=tokGroup, chNumberOfTRBuses=chNumberOfTRBuses, chLntAgMgmtBusSelection=chLntAgMgmtBusSelection, tokRingEntry=tokRingEntry, tokRingTrafficBuffer=tokRingTrafficBuffer, clGroupClockRedundancy=clGroupClockRedundancy, lBoxOID=lBoxOID, lUnknownBoxOID=lUnknownBoxOID, ethIntPortGroupId=ethIntPortGroupId, ethBusTotalCollisions=ethBusTotalCollisions, tokGroupRingTable=tokGroupRingTable, genGroupReset=genGroupReset, chNumberOfLocalTalkBuses=chNumberOfLocalTalkBuses, genPortSecurityPolicy=genPortSecurityPolicy, tokGroupLeftNeighbor=tokGroupLeftNeighbor, tokGroupIOMode=tokGroupIOMode, chLntAgCoprocCommStatus=chLntAgCoprocCommStatus, genGroupInterProcCommStatus=genGroupInterProcCommStatus, genGroupKernelVersion=genGroupKernelVersion, genGroupType=genGroupType, chHWType=chHWType, chNumberOfSlots=chNumberOfSlots, tokRingRightSlot=tokRingRightSlot, chHWPSUId=chHWPSUId, chAg=chAg, softRedundancyGroupId2=softRedundancyGroupId2, cl=cl, chHW=chHW, eth=eth, ethGroupSpecificOID=ethGroupSpecificOID, ethPortMJLP=ethPortMJLP, ethGroupSingleBusMode=ethGroupSingleBusMode, ethGroup=ethGroup, genPortDescr=genPortDescr, genGroupSupplyVoltageFault=genGroupSupplyVoltageFault, ethAgPerfBusSelection=ethAgPerfBusSelection, chMgrTrapRepStatus=chMgrTrapRepStatus, ethAgEntry=ethAgEntry, tsGroupLATStatus=tsGroupLATStatus, tokGroupRingInserted=tokGroupRingInserted, ethPortTraffic=ethPortTraffic, tokPortGroupId=tokPortGroupId, chLntAgTable=chLntAgTable, lLET18BoxOID=lLET18BoxOID, ethPort=ethPort, tokGroupManRightLoop=tokGroupManRightLoop, tokPortEntry=tokPortEntry, ethIntPortTable=ethIntPortTable, chHWPSUEntry=chHWPSUEntry, genPortTable=genPortTable, genGroupNumberOfIntPorts=genGroupNumberOfIntPorts, genIntPortAdminStatus=genIntPortAdminStatus, chLntAgSoftFaultTraps=chLntAgSoftFaultTraps, genGroupCommStatus=genGroupCommStatus, lLET18EBoxOID=lLET18EBoxOID, ltalk=ltalk, chGenAgTable=chGenAgTable, genIntPortBusConnNumber=genIntPortBusConnNumber, tokGroupManLinkLoop=tokGroupManLinkLoop, tokRingNumberOfStations=tokRingNumberOfStations, ethGroupWrongPortSelection=ethGroupWrongPortSelection, ethBusClockBusId=ethBusClockBusId, ethPortSQETest=ethPortSQETest, tokGroupTable=tokGroupTable, tokPortCableFault=tokPortCableFault, tokGroupAutoLinkLoop=tokGroupAutoLinkLoop, chGenAgAddr=chGenAgAddr, ethPortTable=ethPortTable, tokGroupRingSpeed=tokGroupRingSpeed, tsGroupEntry=tsGroupEntry, genPortGroupId=genPortGroupId, tokPortTable=tokPortTable, clPortId=clPortId, tokRingStationsMatch=tokRingStationsMatch, chHWPSUVoltage=chHWPSUVoltage, genGroupId=genGroupId, chLntAgSLIPAddress=chLntAgSLIPAddress, genIntPort=genIntPort, ethGroup10BTPlus=ethGroup10BTPlus, ltalkPort=ltalkPort, genPortFunctionality=genPortFunctionality, chGenAgId=chGenAgId, ethPortJabber=ethPortJabber, genIntPortSpecificOID=genIntPortSpecificOID, chLntAgTempThreshTraps=chLntAgTempThreshTraps, ethIntPortId=ethIntPortId, tokRingBeaconing=tokRingBeaconing, chLntAgSWFault=chLntAgSWFault, chMgr=chMgr, tokPortConnected=tokPortConnected, tokPort=tokPort, tokPortId=tokPortId, genGroupDescr=genGroupDescr, chNumberOfEthernetBuses=chNumberOfEthernetBuses, genGroupRedun34=genGroupRedun34, ethPortRunts=ethPortRunts, chLntAgSWVersion=chLntAgSWVersion, chLntAgCoprocSWVersion=chLntAgCoprocSWVersion, ltalkPortEntry=ltalkPortEntry, chLntAgConfigurationSymbol=chLntAgConfigurationSymbol, tokRingPeakTraffic=tokRingPeakTraffic, ltalkPortGroupId=ltalkPortGroupId, lannet=lannet, tokGroupAutoRightLoop=tokGroupAutoRightLoop, genGroupRedun13_14=genGroupRedun13_14, chLntAgHubEnrollTraps=chLntAgHubEnrollTraps, ethBusPerfId=ethBusPerfId, genIntPortId=genIntPortId, tsGroupId=tsGroupId, ethPortFIFO=ethPortFIFO, genPortAdminStatus=genPortAdminStatus, ethGroupTable=ethGroupTable, genIntPortEntry=genIntPortEntry, ethIntPortJabber=ethIntPortJabber, ethBusTraffic=ethBusTraffic, ethPortEntry=ethPortEntry, chHWIntTempThresh=chHWIntTempThresh, lFDX100BoxOID=lFDX100BoxOID, ethBusTotalPackets=ethBusTotalPackets, ethBus=ethBus, genPort=genPort, lLET3BoxOID=lLET3BoxOID, clGroupMainClock=clGroupMainClock, ethPortSpecificOID=ethPortSpecificOID, genPortEntry=genPortEntry, tokPortTCP=tokPortTCP, tokRingLeftSlot=tokRingLeftSlot, chLntAgTrafficThreshTraps=chLntAgTrafficThreshTraps, chLntAgSoftwareStatus=chLntAgSoftwareStatus, chLntAgFaultTraps=chLntAgFaultTraps, tokRingTraffic=tokRingTraffic, clPortTable=clPortTable, tokGroupEntry=tokGroupEntry, ethPortUserStatus=ethPortUserStatus, ethIntPortBackedUp=ethIntPortBackedUp, genIntPortActivityStatus=genIntPortActivityStatus, tokGroupBridgeMode=tokGroupBridgeMode, chHWPeakIntTemp=chHWPeakIntTemp, chLntAgGroupEnrollDeenrollTraps=chLntAgGroupEnrollDeenrollTraps, ethPortLastSourceAddr=ethPortLastSourceAddr, chHWPSULocation=chHWPSULocation, genGroupNumberOfPorts=genGroupNumberOfPorts, tok=tok, tokGroupRingEntry=tokGroupRingEntry, ethPortFramesReceivedOK=ethPortFramesReceivedOK, genPortType=genPortType, ethAgTable=ethAgTable, genPortId=genPortId, ethBusClockEntry=ethBusClockEntry, chHWPSUTable=chHWPSUTable, genPortSpecificOID=genPortSpecificOID, ethAgId=ethAgId, ltalkPortTable=ltalkPortTable, ts=ts, genGroupIntTemp=genGroupIntTemp, ltalkPortTestResult=ltalkPortTestResult, ethGroupFOIRLPlusMode=ethGroupFOIRLPlusMode, genGroupHWStatus=genGroupHWStatus, tsGroupTable=tsGroupTable, genGroupSWVersion=genGroupSWVersion, tokGroupSpecificOID=tokGroupSpecificOID, tokPortFunctionalStatus=tokPortFunctionalStatus, lntOID=lntOID, chMgrMngmtState=chMgrMngmtState, chGenAgMgmtIfType=chGenAgMgmtIfType, clPortEntry=clPortEntry, genGroupEntry=genGroupEntry, chGenAgType=chGenAgType, ethPortPacketErrors=ethPortPacketErrors, ethBusTotalErrors=ethBusTotalErrors, tokPortSpecificOID=tokPortSpecificOID, lLET10BoxOID=lLET10BoxOID, chLntAgCommDebugMode=chLntAgCommDebugMode)
mibBuilder.exportSymbols("LANNET-MIB", tokRing=tokRing, ethGroupId=ethGroupId, ethBusTrafficBuffer=ethBusTrafficBuffer, softRedundancyGroupId1=softRedundancyGroupId1, ltalkPortTest=ltalkPortTest, lLERT40BoxOID=lLERT40BoxOID, ethGroupBackupBus=ethGroupBackupBus, genIntPortTable=genIntPortTable, chHWIntTempWarning=chHWIntTempWarning, tokRingAgId=tokRingAgId, softRedundancyStatus=softRedundancyStatus, tokGroupManBusLoop=tokGroupManBusLoop, tokRingTable=tokRingTable, chFullConfig=chFullConfig, ethPortManPart=ethPortManPart, ethBusPeakTraffic=ethBusPeakTraffic, tokGroupRingId=tokGroupRingId, genPortSecureAddresses=genPortSecureAddresses)
