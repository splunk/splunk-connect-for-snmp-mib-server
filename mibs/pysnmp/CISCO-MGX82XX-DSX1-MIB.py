#
# PySNMP MIB module CISCO-MGX82XX-DSX1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MGX82XX-DSX1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:50:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
dsx1Line, = mibBuilder.importSymbols("BASIS-MIB", "dsx1Line")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, Counter32, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity, Counter64, ObjectIdentity, Integer32, MibIdentifier, iso, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity", "Counter64", "ObjectIdentity", "Integer32", "MibIdentifier", "iso", "Unsigned32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoMgx82xxDsx1MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 58))
ciscoMgx82xxDsx1MIB.setRevisions(('2003-03-31 00:00',))
if mibBuilder.loadTexts: ciscoMgx82xxDsx1MIB.setLastUpdated('200303310000Z')
if mibBuilder.loadTexts: ciscoMgx82xxDsx1MIB.setOrganization('Cisco Systems, Inc.')
dsx1CnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1))
dsx1AlmCnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2))
dsx1AlmGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3))
dsx1CntGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 4))
dsx1CnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1), )
if mibBuilder.loadTexts: dsx1CnfGrpTable.setStatus('current')
dsx1CnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-DSX1-MIB", "lineNum"))
if mibBuilder.loadTexts: dsx1CnfGrpEntry.setStatus('current')
lineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineNum.setStatus('current')
lineConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("db15", 1), ("bnc", 2), ("rj48", 3), ("unused", 4), ("smb", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineConnectorType.setStatus('current')
lineEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("modify", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineEnable.setStatus('current')
lineType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("dsx1ESF", 1), ("dsx1D4", 2), ("dsx1E1", 3), ("dsx1E1CRC", 4), ("dsx1E1MF", 5), ("dsx1E1CRC-MF", 6), ("dsx1E1clearchannel", 7), ("dsx1E1Q50", 8), ("dsx1E1Q50CRC", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineType.setStatus('current')
lineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dsx1JBZS", 1), ("dsx1B8ZS", 2), ("dsx1HDB3", 3), ("dsx1AMI", 4), ("unused", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineCoding.setStatus('current')
lineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("lineLength0To110Feet", 1), ("lineLength110To220Feet", 2), ("lineLength220To330Feet", 3), ("lineLength330To440Feet", 4), ("lineLength440To550Feet", 5), ("lineLength550To660Feet", 6), ("lineLength660FeetPlus", 7), ("lineLength-75-Ohm", 8), ("lineLength-120-Ohm", 9), ("lineLength0To131Feet", 10), ("lineLength131To262Feet", 11), ("lineLength262To393Feet", 12), ("lineLength393To524Feet", 13), ("lineLength524To655Feet", 14), ("lineLength655FeetPlus", 15), ("notRequired", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineLength.setStatus('current')
lineXmtClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2))).clone('loopTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineXmtClockSource.setStatus('current')
lineLoopbackCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dsx1NoLoop", 1), ("dsx1RemoteLoop", 2), ("dsx1LocalLoop", 3), ("dsx1PayloadLoop", 4))).clone('dsx1NoLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineLoopbackCommand.setStatus('current')
lineSendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dsx1SendNoCode", 1), ("dsx1SendLineCode", 2), ("dsx1SendPayloadCode", 3), ("dsx1SendResetCode", 4))).clone('dsx1SendNoCode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineSendCode.setStatus('current')
lineUsedTimeslotsBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineUsedTimeslotsBitMap.setStatus('current')
lineLoopbackCodeDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("codeDetectDisabled", 1), ("codeDetectEnabled", 2))).clone('codeDetectDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineLoopbackCodeDetection.setStatus('current')
lineBERTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineBERTEnable.setStatus('current')
lineBERTPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("allZeros", 1), ("allOnes", 2), ("alternateONeZero", 3), ("doubleOneZero", 4), ("userOneWords", 5), ("userTwoWords", 6), ("userThreeWords", 7), ("userFourWords", 8), ("fifteenBit", 9), ("twentyBit", 10), ("twentyBitQRSS", 11), ("twentythreeBit", 12))).clone('allZeros')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineBERTPattern.setStatus('current')
lineBERTResult = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("passed", 2))).clone('failed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineBERTResult.setStatus('current')
bERTResultClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("clear", 2))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bERTResultClrButton.setStatus('current')
lineNumofValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineNumofValidEntries.setStatus('current')
dsx1CntGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 4, 1), )
if mibBuilder.loadTexts: dsx1CntGrpTable.setStatus('current')
dsx1CntGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-DSX1-MIB", "cntLineNum"))
if mibBuilder.loadTexts: dsx1CntGrpEntry.setStatus('current')
cntLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntLineNum.setStatus('current')
rcvLOSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvLOSCount.setStatus('current')
rcvOOFCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvOOFCount.setStatus('current')
rcvRAICount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvRAICount.setStatus('current')
rcvFECount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFECount.setStatus('current')
counterClearButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: counterClearButton.setStatus('current')
dsx1AlmCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1), )
if mibBuilder.loadTexts: dsx1AlmCnfGrpTable.setStatus('current')
dsx1AlmCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-DSX1-MIB", "almCnfLineNum"))
if mibBuilder.loadTexts: dsx1AlmCnfGrpEntry.setStatus('current')
almCnfLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: almCnfLineNum.setStatus('current')
redSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minor", 1), ("major", 2))).clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redSeverity.setStatus('current')
rAISeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minor", 1), ("major", 2))).clone('minor')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rAISeverity.setStatus('current')
nEAlarmUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nEAlarmUpCount.setStatus('current')
nEAlarmDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nEAlarmDownCount.setStatus('current')
nEAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nEAlarmThreshold.setStatus('current')
fEAlarmUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fEAlarmUpCount.setStatus('current')
fEAlarmDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fEAlarmDownCount.setStatus('current')
fEAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fEAlarmThreshold.setStatus('current')
statisticalAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("minor", 1), ("major", 2), ("inhibit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statisticalAlarmSeverity.setStatus('current')
lCV15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lCV15MinThreshold.setStatus('current')
lCV24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(134)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lCV24HrThreshold.setStatus('current')
lES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lES15MinThreshold.setStatus('current')
lES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(121)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lES24HrThreshold.setStatus('current')
lSES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSES15MinThreshold.setStatus('current')
lSES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSES24HrThreshold.setStatus('current')
cRC15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cRC15MinThreshold.setStatus('current')
cRC24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(134)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cRC24HrThreshold.setStatus('current')
cRCES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cRCES15MinThreshold.setStatus('current')
cRCES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(121)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cRCES24HrThreshold.setStatus('current')
cRCSES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cRCSES15MinThreshold.setStatus('current')
cRCSES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cRCSES24HrThreshold.setStatus('current')
sEFS15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sEFS15MinThreshold.setStatus('current')
sEFS24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sEFS24HrThreshold.setStatus('current')
aISS15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aISS15MinThreshold.setStatus('current')
aISS24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aISS24HrThreshold.setStatus('current')
uAS15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uAS15MinThreshold.setStatus('current')
uAS24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uAS24HrThreshold.setStatus('current')
dsx1AlmGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1), )
if mibBuilder.loadTexts: dsx1AlmGrpTable.setStatus('current')
dsx1AlmGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-DSX1-MIB", "almLineNum"))
if mibBuilder.loadTexts: dsx1AlmGrpEntry.setStatus('current')
almLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: almLineNum.setStatus('current')
lineAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineAlarmState.setStatus('current')
lineStatisticalAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineStatisticalAlarmState.setStatus('current')
lCVCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lCVCurrent.setStatus('current')
lCV15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lCV15MinBucket.setStatus('current')
lCV24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lCV24HrBucket.setStatus('current')
lESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lESCurrent.setStatus('current')
lES15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lES15MinBucket.setStatus('current')
lES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lES24HrBucket.setStatus('current')
lSESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSESCurrent.setStatus('current')
lSES15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSES15MinBucket.setStatus('current')
lSES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSES24HrBucket.setStatus('current')
cRCCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRCCurrent.setStatus('current')
cRC15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRC15MinBucket.setStatus('current')
cRC24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRC24HrBucket.setStatus('current')
cRCESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRCESCurrent.setStatus('current')
cRCES15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRCES15MinBucket.setStatus('current')
cRCES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRCES24HrBucket.setStatus('current')
cRCSESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRCSESCurrent.setStatus('current')
cRCSES15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRCSES15MinBucket.setStatus('current')
cRCSES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRCSES24HrBucket.setStatus('current')
sEFSCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sEFSCurrent.setStatus('current')
sEFS15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sEFS15MinBucket.setStatus('current')
sEFS24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sEFS24HrBucket.setStatus('current')
aISSCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aISSCurrent.setStatus('current')
aISS15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aISS15MinBucket.setStatus('current')
aISS24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aISS24HrBucket.setStatus('current')
uASCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uASCurrent.setStatus('current')
uAS15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uAS15MinBucket.setStatus('current')
uAS24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uAS24HrBucket.setStatus('current')
percentEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: percentEFS.setStatus('current')
alarmClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmClrButton.setStatus('current')
cmDsx1MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 58, 2))
cmDsx1MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 58, 2, 1))
cmDsx1MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 58, 2, 2))
cmDsx1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 58, 2, 2, 1)).setObjects(("CISCO-MGX82XX-DSX1-MIB", "cmDsx1GeneralGroup"), ("CISCO-MGX82XX-DSX1-MIB", "cmDsx1ConfGroup"), ("CISCO-MGX82XX-DSX1-MIB", "cmDsx1CountGroup"), ("CISCO-MGX82XX-DSX1-MIB", "cmDsx1AlarmConfGroup"), ("CISCO-MGX82XX-DSX1-MIB", "cmDsx1AlarmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx1Compliance = cmDsx1Compliance.setStatus('current')
cmDsx1GeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 58, 2, 1, 1)).setObjects(("CISCO-MGX82XX-DSX1-MIB", "lineNumofValidEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx1GeneralGroup = cmDsx1GeneralGroup.setStatus('current')
cmDsx1ConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 58, 2, 1, 2)).setObjects(("CISCO-MGX82XX-DSX1-MIB", "lineNum"), ("CISCO-MGX82XX-DSX1-MIB", "lineConnectorType"), ("CISCO-MGX82XX-DSX1-MIB", "lineEnable"), ("CISCO-MGX82XX-DSX1-MIB", "lineType"), ("CISCO-MGX82XX-DSX1-MIB", "lineCoding"), ("CISCO-MGX82XX-DSX1-MIB", "lineLength"), ("CISCO-MGX82XX-DSX1-MIB", "lineXmtClockSource"), ("CISCO-MGX82XX-DSX1-MIB", "lineLoopbackCommand"), ("CISCO-MGX82XX-DSX1-MIB", "lineSendCode"), ("CISCO-MGX82XX-DSX1-MIB", "lineLoopbackCodeDetection"), ("CISCO-MGX82XX-DSX1-MIB", "lineUsedTimeslotsBitMap"), ("CISCO-MGX82XX-DSX1-MIB", "lineBERTEnable"), ("CISCO-MGX82XX-DSX1-MIB", "lineBERTPattern"), ("CISCO-MGX82XX-DSX1-MIB", "lineBERTResult"), ("CISCO-MGX82XX-DSX1-MIB", "bERTResultClrButton"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx1ConfGroup = cmDsx1ConfGroup.setStatus('current')
cmDsx1CountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 58, 2, 1, 3)).setObjects(("CISCO-MGX82XX-DSX1-MIB", "cntLineNum"), ("CISCO-MGX82XX-DSX1-MIB", "rcvLOSCount"), ("CISCO-MGX82XX-DSX1-MIB", "rcvOOFCount"), ("CISCO-MGX82XX-DSX1-MIB", "rcvRAICount"), ("CISCO-MGX82XX-DSX1-MIB", "rcvFECount"), ("CISCO-MGX82XX-DSX1-MIB", "counterClearButton"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx1CountGroup = cmDsx1CountGroup.setStatus('current')
cmDsx1AlarmConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 58, 2, 1, 4)).setObjects(("CISCO-MGX82XX-DSX1-MIB", "almCnfLineNum"), ("CISCO-MGX82XX-DSX1-MIB", "redSeverity"), ("CISCO-MGX82XX-DSX1-MIB", "rAISeverity"), ("CISCO-MGX82XX-DSX1-MIB", "nEAlarmUpCount"), ("CISCO-MGX82XX-DSX1-MIB", "nEAlarmDownCount"), ("CISCO-MGX82XX-DSX1-MIB", "nEAlarmThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "fEAlarmUpCount"), ("CISCO-MGX82XX-DSX1-MIB", "fEAlarmDownCount"), ("CISCO-MGX82XX-DSX1-MIB", "fEAlarmThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "statisticalAlarmSeverity"), ("CISCO-MGX82XX-DSX1-MIB", "lCV15MinThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "lCV24HrThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "lES15MinThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "lES24HrThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "lSES15MinThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "lSES24HrThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "cRC15MinThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "cRC24HrThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "cRCES15MinThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "cRCES24HrThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "cRCSES15MinThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "cRCSES24HrThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "sEFS15MinThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "sEFS24HrThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "aISS15MinThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "aISS24HrThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "uAS15MinThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "uAS24HrThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx1AlarmConfGroup = cmDsx1AlarmConfGroup.setStatus('current')
cmDsx1AlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 58, 2, 1, 5)).setObjects(("CISCO-MGX82XX-DSX1-MIB", "almLineNum"), ("CISCO-MGX82XX-DSX1-MIB", "lineAlarmState"), ("CISCO-MGX82XX-DSX1-MIB", "lineStatisticalAlarmState"), ("CISCO-MGX82XX-DSX1-MIB", "lCVCurrent"), ("CISCO-MGX82XX-DSX1-MIB", "lCV15MinBucket"), ("CISCO-MGX82XX-DSX1-MIB", "lCV24HrBucket"), ("CISCO-MGX82XX-DSX1-MIB", "lESCurrent"), ("CISCO-MGX82XX-DSX1-MIB", "lES15MinBucket"), ("CISCO-MGX82XX-DSX1-MIB", "lES24HrBucket"), ("CISCO-MGX82XX-DSX1-MIB", "lSESCurrent"), ("CISCO-MGX82XX-DSX1-MIB", "lSES15MinBucket"), ("CISCO-MGX82XX-DSX1-MIB", "lSES24HrBucket"), ("CISCO-MGX82XX-DSX1-MIB", "cRCCurrent"), ("CISCO-MGX82XX-DSX1-MIB", "cRC15MinBucket"), ("CISCO-MGX82XX-DSX1-MIB", "cRC24HrBucket"), ("CISCO-MGX82XX-DSX1-MIB", "cRCESCurrent"), ("CISCO-MGX82XX-DSX1-MIB", "cRCES15MinBucket"), ("CISCO-MGX82XX-DSX1-MIB", "cRCES24HrBucket"), ("CISCO-MGX82XX-DSX1-MIB", "cRCSESCurrent"), ("CISCO-MGX82XX-DSX1-MIB", "cRCSES15MinBucket"), ("CISCO-MGX82XX-DSX1-MIB", "cRCSES24HrBucket"), ("CISCO-MGX82XX-DSX1-MIB", "sEFSCurrent"), ("CISCO-MGX82XX-DSX1-MIB", "sEFS15MinBucket"), ("CISCO-MGX82XX-DSX1-MIB", "sEFS24HrBucket"), ("CISCO-MGX82XX-DSX1-MIB", "aISSCurrent"), ("CISCO-MGX82XX-DSX1-MIB", "aISS15MinBucket"), ("CISCO-MGX82XX-DSX1-MIB", "aISS24HrBucket"), ("CISCO-MGX82XX-DSX1-MIB", "uASCurrent"), ("CISCO-MGX82XX-DSX1-MIB", "uAS15MinBucket"), ("CISCO-MGX82XX-DSX1-MIB", "uAS24HrBucket"), ("CISCO-MGX82XX-DSX1-MIB", "percentEFS"), ("CISCO-MGX82XX-DSX1-MIB", "alarmClrButton"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx1AlarmGroup = cmDsx1AlarmGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-MGX82XX-DSX1-MIB", cmDsx1AlarmConfGroup=cmDsx1AlarmConfGroup, lineStatisticalAlarmState=lineStatisticalAlarmState, rcvLOSCount=rcvLOSCount, dsx1CnfGrpTable=dsx1CnfGrpTable, lineType=lineType, nEAlarmDownCount=nEAlarmDownCount, fEAlarmDownCount=fEAlarmDownCount, cRCSES15MinBucket=cRCSES15MinBucket, lineBERTPattern=lineBERTPattern, almCnfLineNum=almCnfLineNum, cRCSES15MinThreshold=cRCSES15MinThreshold, lCVCurrent=lCVCurrent, aISS24HrBucket=aISS24HrBucket, cmDsx1MIBGroups=cmDsx1MIBGroups, aISSCurrent=aISSCurrent, lSES24HrBucket=lSES24HrBucket, lESCurrent=lESCurrent, fEAlarmUpCount=fEAlarmUpCount, cmDsx1GeneralGroup=cmDsx1GeneralGroup, lCV24HrThreshold=lCV24HrThreshold, cRCSES24HrThreshold=cRCSES24HrThreshold, cRCES24HrThreshold=cRCES24HrThreshold, cRCES24HrBucket=cRCES24HrBucket, lES15MinThreshold=lES15MinThreshold, lineLength=lineLength, lineLoopbackCommand=lineLoopbackCommand, rcvOOFCount=rcvOOFCount, nEAlarmUpCount=nEAlarmUpCount, cmDsx1CountGroup=cmDsx1CountGroup, dsx1CnfGrp=dsx1CnfGrp, fEAlarmThreshold=fEAlarmThreshold, uAS15MinThreshold=uAS15MinThreshold, uAS24HrBucket=uAS24HrBucket, cntLineNum=cntLineNum, cRCES15MinThreshold=cRCES15MinThreshold, sEFS24HrBucket=sEFS24HrBucket, lCV15MinBucket=lCV15MinBucket, dsx1CnfGrpEntry=dsx1CnfGrpEntry, lineLoopbackCodeDetection=lineLoopbackCodeDetection, lineNumofValidEntries=lineNumofValidEntries, aISS24HrThreshold=aISS24HrThreshold, alarmClrButton=alarmClrButton, cmDsx1ConfGroup=cmDsx1ConfGroup, dsx1AlmCnfGrp=dsx1AlmCnfGrp, lineConnectorType=lineConnectorType, nEAlarmThreshold=nEAlarmThreshold, lineBERTResult=lineBERTResult, cmDsx1MIBCompliances=cmDsx1MIBCompliances, lSESCurrent=lSESCurrent, cRCSES24HrBucket=cRCSES24HrBucket, cRC24HrThreshold=cRC24HrThreshold, lCV15MinThreshold=lCV15MinThreshold, sEFS15MinThreshold=sEFS15MinThreshold, lineUsedTimeslotsBitMap=lineUsedTimeslotsBitMap, lCV24HrBucket=lCV24HrBucket, dsx1CntGrp=dsx1CntGrp, cRCES15MinBucket=cRCES15MinBucket, uASCurrent=uASCurrent, lineNum=lineNum, almLineNum=almLineNum, cRC15MinBucket=cRC15MinBucket, dsx1AlmGrp=dsx1AlmGrp, dsx1AlmCnfGrpEntry=dsx1AlmCnfGrpEntry, sEFS15MinBucket=sEFS15MinBucket, aISS15MinBucket=aISS15MinBucket, lineXmtClockSource=lineXmtClockSource, statisticalAlarmSeverity=statisticalAlarmSeverity, cmDsx1MIBConformance=cmDsx1MIBConformance, lSES15MinBucket=lSES15MinBucket, percentEFS=percentEFS, bERTResultClrButton=bERTResultClrButton, dsx1AlmGrpEntry=dsx1AlmGrpEntry, dsx1CntGrpEntry=dsx1CntGrpEntry, lES15MinBucket=lES15MinBucket, cRC24HrBucket=cRC24HrBucket, sEFS24HrThreshold=sEFS24HrThreshold, dsx1AlmCnfGrpTable=dsx1AlmCnfGrpTable, cRCCurrent=cRCCurrent, uAS24HrThreshold=uAS24HrThreshold, lineAlarmState=lineAlarmState, cmDsx1Compliance=cmDsx1Compliance, rcvFECount=rcvFECount, cRC15MinThreshold=cRC15MinThreshold, uAS15MinBucket=uAS15MinBucket, cRCESCurrent=cRCESCurrent, ciscoMgx82xxDsx1MIB=ciscoMgx82xxDsx1MIB, PYSNMP_MODULE_ID=ciscoMgx82xxDsx1MIB, counterClearButton=counterClearButton, dsx1AlmGrpTable=dsx1AlmGrpTable, cmDsx1AlarmGroup=cmDsx1AlarmGroup, sEFSCurrent=sEFSCurrent, cRCSESCurrent=cRCSESCurrent, lSES24HrThreshold=lSES24HrThreshold, dsx1CntGrpTable=dsx1CntGrpTable, redSeverity=redSeverity, lSES15MinThreshold=lSES15MinThreshold, lineCoding=lineCoding, rcvRAICount=rcvRAICount, lES24HrBucket=lES24HrBucket, aISS15MinThreshold=aISS15MinThreshold, lineBERTEnable=lineBERTEnable, lineEnable=lineEnable, lineSendCode=lineSendCode, lES24HrThreshold=lES24HrThreshold, rAISeverity=rAISeverity)
