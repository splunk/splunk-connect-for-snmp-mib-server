#
# PySNMP MIB module TIMETRA-VRRP-V3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-VRRP-V3-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:15:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, ObjectIdentity, Unsigned32, iso, Counter32, TimeTicks, Counter64, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "ObjectIdentity", "Unsigned32", "iso", "Counter32", "TimeTicks", "Counter64", "Bits", "ModuleIdentity")
MacAddress, DisplayString, RowStatus, TimeInterval, TimeStamp, TextualConvention, StorageType, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "RowStatus", "TimeInterval", "TimeStamp", "TextualConvention", "StorageType", "TruthValue")
timetraSRMIBModules, = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "timetraSRMIBModules")
vrrpNotifications, vrrpOperations, vrrpMIBGroups, VrId, vrrpMIBCompliances, vrrpStatistics = mibBuilder.importSymbols("VRRP-MIB", "vrrpNotifications", "vrrpOperations", "vrrpMIBGroups", "VrId", "vrrpMIBCompliances", "vrrpStatistics")
timetraVrrpV3MibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 57))
timetraVrrpV3MibModule.setRevisions(('1909-02-28 00:00', '2008-04-28 00:00',))
if mibBuilder.loadTexts: timetraVrrpV3MibModule.setLastUpdated('0902280000Z')
if mibBuilder.loadTexts: timetraVrrpV3MibModule.setOrganization('Alcatel-Lucent')
vrrpOperationsTable = MibTable((1, 3, 6, 1, 2, 1, 68, 1, 7), )
if mibBuilder.loadTexts: vrrpOperationsTable.setStatus('current')
vrrpOperationsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 68, 1, 7, 1), ).setIndexNames((0, "TIMETRA-VRRP-V3-MIB", "vrrpOperationsInetAddrType"), (0, "TIMETRA-VRRP-V3-MIB", "vrrpOperationsVrId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vrrpOperationsEntry.setStatus('current')
vrrpOperationsInetAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 1, 7, 1, 1), InetAddressType())
if mibBuilder.loadTexts: vrrpOperationsInetAddrType.setStatus('current')
vrrpOperationsVrId = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 1, 7, 1, 2), VrId())
if mibBuilder.loadTexts: vrrpOperationsVrId.setStatus('current')
vrrpOperationsVirtualMacAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 1, 7, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpOperationsVirtualMacAddr.setStatus('current')
vrrpOperationsState = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initialize", 1), ("backup", 2), ("master", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpOperationsState.setStatus('current')
vrrpOperationsPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 1, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpOperationsPriority.setStatus('current')
vrrpOperationsAddrCount = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpOperationsAddrCount.setStatus('current')
vrrpOperationsMasterIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 1, 7, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpOperationsMasterIpAddr.setStatus('current')
vrrpOperationsPrimaryIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 1, 7, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpOperationsPrimaryIpAddr.setStatus('current')
vrrpOperationsAdvInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 1, 7, 1, 9), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)).clone(100)).setUnits('centiseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpOperationsAdvInterval.setStatus('current')
vrrpOperationsPreemptMode = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 1, 7, 1, 10), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpOperationsPreemptMode.setStatus('current')
vrrpOperationsAcceptMode = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 1, 7, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpOperationsAcceptMode.setStatus('current')
vrrpOperationsUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 1, 7, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpOperationsUpTime.setStatus('current')
vrrpOperationsStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 1, 7, 1, 13), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpOperationsStorageType.setStatus('current')
vrrpOperationsRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 1, 7, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpOperationsRowStatus.setStatus('current')
vrrpAssociatedIpAddrTable = MibTable((1, 3, 6, 1, 2, 1, 68, 1, 8), )
if mibBuilder.loadTexts: vrrpAssociatedIpAddrTable.setStatus('current')
vrrpAssociatedIpAddrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 68, 1, 8, 1), ).setIndexNames((0, "TIMETRA-VRRP-V3-MIB", "vrrpOperationsInetAddrType"), (0, "TIMETRA-VRRP-V3-MIB", "vrrpOperationsVrId"), (0, "IF-MIB", "ifIndex"), (0, "TIMETRA-VRRP-V3-MIB", "vrrpAssociatedIpAddr"))
if mibBuilder.loadTexts: vrrpAssociatedIpAddrEntry.setStatus('current')
vrrpAssociatedIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 1, 8, 1, 1), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: vrrpAssociatedIpAddr.setStatus('current')
vrrpAssociatedStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 1, 8, 1, 2), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpAssociatedStorageType.setStatus('current')
vrrpAssociatedIpAddrRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpAssociatedIpAddrRowStatus.setStatus('current')
vrrpRouterStatisticsTable = MibTable((1, 3, 6, 1, 2, 1, 68, 2, 5), )
if mibBuilder.loadTexts: vrrpRouterStatisticsTable.setStatus('current')
vrrpRouterStatisticsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 68, 2, 5, 1), )
vrrpOperationsEntry.registerAugmentions(("TIMETRA-VRRP-V3-MIB", "vrrpRouterStatisticsEntry"))
vrrpRouterStatisticsEntry.setIndexNames(*vrrpOperationsEntry.getIndexNames())
if mibBuilder.loadTexts: vrrpRouterStatisticsEntry.setStatus('current')
vrrpStatisticsMasterTransitions = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 2, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatisticsMasterTransitions.setStatus('current')
vrrpStatisticsRcvdAdvertisements = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatisticsRcvdAdvertisements.setStatus('current')
vrrpStatisticsAdvIntervalErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatisticsAdvIntervalErrors.setStatus('current')
vrrpStatisticsIpTtlErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatisticsIpTtlErrors.setStatus('current')
vrrpStatisticsRcvdPriZeroPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatisticsRcvdPriZeroPackets.setStatus('current')
vrrpStatisticsSentPriZeroPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatisticsSentPriZeroPackets.setStatus('current')
vrrpStatisticsRcvdInvalidTypePkts = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatisticsRcvdInvalidTypePkts.setStatus('current')
vrrpStatisticsAddressListErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatisticsAddressListErrors.setStatus('current')
vrrpStatisticsPacketLengthErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatisticsPacketLengthErrors.setStatus('current')
vrrpStatisticsRcvdInvalidAuthentications = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatisticsRcvdInvalidAuthentications.setStatus('current')
vrrpStatisticsDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 2, 5, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatisticsDiscontinuityTime.setStatus('current')
vrrpStatisticsRefreshRate = MibTableColumn((1, 3, 6, 1, 2, 1, 68, 2, 5, 1, 12), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatisticsRefreshRate.setStatus('current')
vrrpNewMasterReason = MibScalar((1, 3, 6, 1, 2, 1, 68, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notmaster", 0), ("priority", 1), ("preempted", 2), ("masterNoResponse", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewMasterReason.setStatus('current')
vrrpTrapProtoErrReason = MibScalar((1, 3, 6, 1, 2, 1, 68, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("hopLimitError", 0), ("versionError", 1), ("checksumError", 2), ("vridError", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vrrpTrapProtoErrReason.setStatus('current')
vrrpTrapProtoError = NotificationType((1, 3, 6, 1, 2, 1, 68, 0, 3)).setObjects(("TIMETRA-VRRP-V3-MIB", "vrrpTrapProtoErrReason"))
if mibBuilder.loadTexts: vrrpTrapProtoError.setStatus('current')
vrrpModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 68, 3, 1, 2)).setObjects(("TIMETRA-VRRP-V3-MIB", "vrrpOperationsGroup"), ("TIMETRA-VRRP-V3-MIB", "vrrpStatisticsGroup"), ("TIMETRA-VRRP-V3-MIB", "vrrpTrapInfoGroup"), ("TIMETRA-VRRP-V3-MIB", "vrrpNotificationsGroup"), ("TIMETRA-VRRP-V3-MIB", "vrrpNotifyObjsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vrrpModuleFullCompliance = vrrpModuleFullCompliance.setStatus('current')
vrrpModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 68, 3, 1, 3)).setObjects(("TIMETRA-VRRP-V3-MIB", "vrrpOperationsGroup"), ("TIMETRA-VRRP-V3-MIB", "vrrpStatisticsGroup"), ("TIMETRA-VRRP-V3-MIB", "vrrpTrapInfoGroup"), ("TIMETRA-VRRP-V3-MIB", "vrrpNotificationsGroup"), ("TIMETRA-VRRP-V3-MIB", "vrrpNotifyObjsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vrrpModuleReadOnlyCompliance = vrrpModuleReadOnlyCompliance.setStatus('current')
vrrpOperationsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 68, 3, 2, 5)).setObjects(("TIMETRA-VRRP-V3-MIB", "vrrpOperationsVirtualMacAddr"), ("TIMETRA-VRRP-V3-MIB", "vrrpOperationsState"), ("TIMETRA-VRRP-V3-MIB", "vrrpOperationsPriority"), ("TIMETRA-VRRP-V3-MIB", "vrrpOperationsMasterIpAddr"), ("TIMETRA-VRRP-V3-MIB", "vrrpOperationsAdvInterval"), ("TIMETRA-VRRP-V3-MIB", "vrrpOperationsPreemptMode"), ("TIMETRA-VRRP-V3-MIB", "vrrpOperationsAcceptMode"), ("TIMETRA-VRRP-V3-MIB", "vrrpOperationsUpTime"), ("TIMETRA-VRRP-V3-MIB", "vrrpOperationsStorageType"), ("TIMETRA-VRRP-V3-MIB", "vrrpOperationsRowStatus"), ("TIMETRA-VRRP-V3-MIB", "vrrpOperationsAddrCount"), ("TIMETRA-VRRP-V3-MIB", "vrrpOperationsPrimaryIpAddr"), ("TIMETRA-VRRP-V3-MIB", "vrrpAssociatedStorageType"), ("TIMETRA-VRRP-V3-MIB", "vrrpAssociatedIpAddrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vrrpOperationsGroup = vrrpOperationsGroup.setStatus('current')
vrrpStatisticsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 68, 3, 2, 6)).setObjects(("TIMETRA-VRRP-V3-MIB", "vrrpStatisticsMasterTransitions"), ("TIMETRA-VRRP-V3-MIB", "vrrpStatisticsRcvdAdvertisements"), ("TIMETRA-VRRP-V3-MIB", "vrrpStatisticsAdvIntervalErrors"), ("TIMETRA-VRRP-V3-MIB", "vrrpStatisticsRcvdPriZeroPackets"), ("TIMETRA-VRRP-V3-MIB", "vrrpStatisticsSentPriZeroPackets"), ("TIMETRA-VRRP-V3-MIB", "vrrpStatisticsRcvdInvalidTypePkts"), ("TIMETRA-VRRP-V3-MIB", "vrrpStatisticsIpTtlErrors"), ("TIMETRA-VRRP-V3-MIB", "vrrpStatisticsAddressListErrors"), ("TIMETRA-VRRP-V3-MIB", "vrrpStatisticsPacketLengthErrors"), ("TIMETRA-VRRP-V3-MIB", "vrrpStatisticsRcvdInvalidAuthentications"), ("TIMETRA-VRRP-V3-MIB", "vrrpStatisticsDiscontinuityTime"), ("TIMETRA-VRRP-V3-MIB", "vrrpStatisticsRefreshRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vrrpStatisticsGroup = vrrpStatisticsGroup.setStatus('current')
vrrpTrapInfoGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 68, 3, 2, 7)).setObjects(("TIMETRA-VRRP-V3-MIB", "vrrpNewMasterReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vrrpTrapInfoGroup = vrrpTrapInfoGroup.setStatus('current')
vrrpNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 68, 3, 2, 8)).setObjects(("TIMETRA-VRRP-V3-MIB", "vrrpTrapProtoError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vrrpNotificationsGroup = vrrpNotificationsGroup.setStatus('current')
vrrpNotifyObjsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 68, 3, 2, 9)).setObjects(("TIMETRA-VRRP-V3-MIB", "vrrpTrapProtoErrReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vrrpNotifyObjsGroup = vrrpNotifyObjsGroup.setStatus('current')
mibBuilder.exportSymbols("TIMETRA-VRRP-V3-MIB", vrrpStatisticsRcvdInvalidTypePkts=vrrpStatisticsRcvdInvalidTypePkts, vrrpOperationsAcceptMode=vrrpOperationsAcceptMode, vrrpModuleReadOnlyCompliance=vrrpModuleReadOnlyCompliance, vrrpOperationsUpTime=vrrpOperationsUpTime, vrrpStatisticsRcvdPriZeroPackets=vrrpStatisticsRcvdPriZeroPackets, vrrpAssociatedIpAddrTable=vrrpAssociatedIpAddrTable, vrrpOperationsVirtualMacAddr=vrrpOperationsVirtualMacAddr, vrrpStatisticsMasterTransitions=vrrpStatisticsMasterTransitions, vrrpNewMasterReason=vrrpNewMasterReason, vrrpTrapProtoErrReason=vrrpTrapProtoErrReason, vrrpRouterStatisticsEntry=vrrpRouterStatisticsEntry, vrrpStatisticsAddressListErrors=vrrpStatisticsAddressListErrors, timetraVrrpV3MibModule=timetraVrrpV3MibModule, vrrpStatisticsRcvdInvalidAuthentications=vrrpStatisticsRcvdInvalidAuthentications, vrrpAssociatedIpAddrEntry=vrrpAssociatedIpAddrEntry, vrrpOperationsStorageType=vrrpOperationsStorageType, PYSNMP_MODULE_ID=timetraVrrpV3MibModule, vrrpStatisticsRcvdAdvertisements=vrrpStatisticsRcvdAdvertisements, vrrpStatisticsSentPriZeroPackets=vrrpStatisticsSentPriZeroPackets, vrrpTrapProtoError=vrrpTrapProtoError, vrrpStatisticsGroup=vrrpStatisticsGroup, vrrpTrapInfoGroup=vrrpTrapInfoGroup, vrrpOperationsPrimaryIpAddr=vrrpOperationsPrimaryIpAddr, vrrpOperationsAddrCount=vrrpOperationsAddrCount, vrrpStatisticsPacketLengthErrors=vrrpStatisticsPacketLengthErrors, vrrpAssociatedIpAddr=vrrpAssociatedIpAddr, vrrpNotifyObjsGroup=vrrpNotifyObjsGroup, vrrpStatisticsAdvIntervalErrors=vrrpStatisticsAdvIntervalErrors, vrrpOperationsPriority=vrrpOperationsPriority, vrrpAssociatedIpAddrRowStatus=vrrpAssociatedIpAddrRowStatus, vrrpModuleFullCompliance=vrrpModuleFullCompliance, vrrpOperationsMasterIpAddr=vrrpOperationsMasterIpAddr, vrrpOperationsRowStatus=vrrpOperationsRowStatus, vrrpOperationsGroup=vrrpOperationsGroup, vrrpNotificationsGroup=vrrpNotificationsGroup, vrrpStatisticsIpTtlErrors=vrrpStatisticsIpTtlErrors, vrrpOperationsVrId=vrrpOperationsVrId, vrrpAssociatedStorageType=vrrpAssociatedStorageType, vrrpOperationsTable=vrrpOperationsTable, vrrpOperationsPreemptMode=vrrpOperationsPreemptMode, vrrpRouterStatisticsTable=vrrpRouterStatisticsTable, vrrpStatisticsDiscontinuityTime=vrrpStatisticsDiscontinuityTime, vrrpStatisticsRefreshRate=vrrpStatisticsRefreshRate, vrrpOperationsState=vrrpOperationsState, vrrpOperationsEntry=vrrpOperationsEntry, vrrpOperationsInetAddrType=vrrpOperationsInetAddrType, vrrpOperationsAdvInterval=vrrpOperationsAdvInterval)
