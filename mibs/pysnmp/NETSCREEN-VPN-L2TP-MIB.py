#
# PySNMP MIB module NETSCREEN-VPN-L2TP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-VPN-L2TP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:10:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
netscreenVpn, netscreenVpnMibModule = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenVpn", "netscreenVpnMibModule")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Counter64, NotificationType, ObjectIdentity, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, Integer32, Unsigned32, Bits, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "NotificationType", "ObjectIdentity", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "Integer32", "Unsigned32", "Bits", "MibIdentifier", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netscreenVpnL2tpMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 4, 0, 8))
netscreenVpnL2tpMibModule.setRevisions(('2004-05-03 00:00', '2004-03-03 00:00', '2000-08-27 00:00',))
if mibBuilder.loadTexts: netscreenVpnL2tpMibModule.setLastUpdated('200405032022Z')
if mibBuilder.loadTexts: netscreenVpnL2tpMibModule.setOrganization('Juniper Networks, Inc.')
nsVpnL2TP = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 4, 8))
nsVpnL2tpDefTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1), )
if mibBuilder.loadTexts: nsVpnL2tpDefTable.setStatus('current')
nsVpnL2tpDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1), ).setIndexNames((0, "NETSCREEN-VPN-L2TP-MIB", "nsVpnL2tpDefVsys"))
if mibBuilder.loadTexts: nsVpnL2tpDefEntry.setStatus('current')
nsVpnL2tpDefVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefVsys.setStatus('current')
nsVpnL2tpDefPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefPool.setStatus('current')
nsVpnL2tpDefAuthDb = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("local", 0), ("radius", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefAuthDb.setStatus('current')
nsVpnL2tpDefPPPAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pap", 1), ("chap", 2), ("any", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefPPPAuth.setStatus('current')
nsVpnL2tpDefRadServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefRadServer.setStatus('current')
nsVpnL2tpDefPriDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefPriDns.setStatus('current')
nsVpnL2tpDefSecDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefSecDns.setStatus('current')
nsVpnL2tpDefPriWins = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefPriWins.setStatus('current')
nsVpnL2tpDefSecWins = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefSecWins.setStatus('current')
nsVpnL2tpTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2), )
if mibBuilder.loadTexts: nsVpnL2tpTunnelTable.setStatus('current')
nsVpnL2tpTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1), ).setIndexNames((0, "NETSCREEN-VPN-L2TP-MIB", "nsVpnL2tpTunIndex"))
if mibBuilder.loadTexts: nsVpnL2tpTunnelEntry.setStatus('current')
nsVpnL2tpTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunIndex.setStatus('current')
nsVpnL2tpTunId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunId.setStatus('current')
nsVpnL2tpTunName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunName.setStatus('current')
nsVpnL2tpTunUsrOrGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunUsrOrGroup.setStatus('current')
nsVpnL2tpTunPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunPeerIp.setStatus('current')
nsVpnL2tpTunHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunHost.setStatus('current')
nsVpnL2tpTunKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunKeepAlive.setStatus('current')
nsVpnL2tpTunVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunVsys.setStatus('current')
nsVpnL2tpMonTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3), )
if mibBuilder.loadTexts: nsVpnL2tpMonTunnelTable.setStatus('current')
nsVpnL2tpMonTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1), ).setIndexNames((0, "NETSCREEN-VPN-L2TP-MIB", "nsVpnL2tpMonTunId"))
if mibBuilder.loadTexts: nsVpnL2tpMonTunnelEntry.setStatus('current')
nsVpnL2tpMonTunId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunId.setStatus('current')
nsVpnL2tpMonTunPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunPeerId.setStatus('current')
nsVpnL2tpMonTunName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunName.setStatus('current')
nsVpnL2tpMonTunPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunPeerIp.setStatus('current')
nsVpnL2tpMonTunPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunPort.setStatus('current')
nsVpnL2tpMonTunPeerHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunPeerHost.setStatus('current')
nsVpnL2tpMonTunCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunCalls.setStatus('current')
nsVpnL2tpMonTunState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("wait-reply", 2), ("wait-conn", 3), ("establish", 4), ("dead", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunState.setStatus('current')
nsVpnL2tpMonTunVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunVsys.setStatus('current')
nsVpnL2tpMonCallTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4), )
if mibBuilder.loadTexts: nsVpnL2tpMonCallTable.setStatus('current')
nsVpnL2tpMonCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1), ).setIndexNames((0, "NETSCREEN-VPN-L2TP-MIB", "nsVpnL2tpMonCallTunId"), (0, "NETSCREEN-VPN-L2TP-MIB", "nsVpnL2tpMonCallId"))
if mibBuilder.loadTexts: nsVpnL2tpMonCallEntry.setStatus('current')
nsVpnL2tpMonCallTunId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallTunId.setStatus('current')
nsVpnL2tpMonCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallId.setStatus('current')
nsVpnL2tpMonCallPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallPeerId.setStatus('current')
nsVpnL2tpMonCallIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallIp.setStatus('current')
nsVpnL2tpMonCallUser = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallUser.setStatus('current')
nsVpnL2tpMonCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("incoming", 2), ("outgoing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallType.setStatus('current')
nsVpnL2tpMonCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("wait-conn", 2), ("establish", 3), ("wait-tunnel", 4), ("wait-reply", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallState.setStatus('current')
nsVpnL2tpMonCallEstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallEstTime.setStatus('current')
nsVpnL2tpMonCallVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallVsys.setStatus('current')
mibBuilder.exportSymbols("NETSCREEN-VPN-L2TP-MIB", nsVpnL2tpMonTunPeerIp=nsVpnL2tpMonTunPeerIp, nsVpnL2tpDefVsys=nsVpnL2tpDefVsys, nsVpnL2tpDefTable=nsVpnL2tpDefTable, nsVpnL2tpDefPool=nsVpnL2tpDefPool, PYSNMP_MODULE_ID=netscreenVpnL2tpMibModule, nsVpnL2tpDefSecDns=nsVpnL2tpDefSecDns, nsVpnL2tpDefRadServer=nsVpnL2tpDefRadServer, nsVpnL2tpTunName=nsVpnL2tpTunName, nsVpnL2tpMonTunPeerId=nsVpnL2tpMonTunPeerId, nsVpnL2tpTunUsrOrGroup=nsVpnL2tpTunUsrOrGroup, nsVpnL2tpMonCallId=nsVpnL2tpMonCallId, nsVpnL2tpMonCallEntry=nsVpnL2tpMonCallEntry, nsVpnL2tpMonTunnelTable=nsVpnL2tpMonTunnelTable, nsVpnL2tpMonTunVsys=nsVpnL2tpMonTunVsys, nsVpnL2tpMonCallUser=nsVpnL2tpMonCallUser, nsVpnL2tpDefEntry=nsVpnL2tpDefEntry, nsVpnL2tpMonTunName=nsVpnL2tpMonTunName, nsVpnL2tpMonTunId=nsVpnL2tpMonTunId, nsVpnL2tpTunnelTable=nsVpnL2tpTunnelTable, nsVpnL2tpMonTunPeerHost=nsVpnL2tpMonTunPeerHost, nsVpnL2tpMonCallEstTime=nsVpnL2tpMonCallEstTime, nsVpnL2tpMonTunPort=nsVpnL2tpMonTunPort, netscreenVpnL2tpMibModule=netscreenVpnL2tpMibModule, nsVpnL2TP=nsVpnL2TP, nsVpnL2tpMonCallPeerId=nsVpnL2tpMonCallPeerId, nsVpnL2tpMonCallState=nsVpnL2tpMonCallState, nsVpnL2tpMonTunnelEntry=nsVpnL2tpMonTunnelEntry, nsVpnL2tpMonTunCalls=nsVpnL2tpMonTunCalls, nsVpnL2tpDefPriDns=nsVpnL2tpDefPriDns, nsVpnL2tpMonCallTunId=nsVpnL2tpMonCallTunId, nsVpnL2tpMonCallTable=nsVpnL2tpMonCallTable, nsVpnL2tpTunVsys=nsVpnL2tpTunVsys, nsVpnL2tpTunHost=nsVpnL2tpTunHost, nsVpnL2tpTunPeerIp=nsVpnL2tpTunPeerIp, nsVpnL2tpDefSecWins=nsVpnL2tpDefSecWins, nsVpnL2tpMonTunState=nsVpnL2tpMonTunState, nsVpnL2tpDefPriWins=nsVpnL2tpDefPriWins, nsVpnL2tpMonCallVsys=nsVpnL2tpMonCallVsys, nsVpnL2tpDefPPPAuth=nsVpnL2tpDefPPPAuth, nsVpnL2tpTunIndex=nsVpnL2tpTunIndex, nsVpnL2tpMonCallType=nsVpnL2tpMonCallType, nsVpnL2tpMonCallIp=nsVpnL2tpMonCallIp, nsVpnL2tpDefAuthDb=nsVpnL2tpDefAuthDb, nsVpnL2tpTunId=nsVpnL2tpTunId, nsVpnL2tpTunKeepAlive=nsVpnL2tpTunKeepAlive, nsVpnL2tpTunnelEntry=nsVpnL2tpTunnelEntry)
