#
# PySNMP MIB module APERTUS-UA-ROUND-ROBIN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APERTUS-UA-ROUND-ROBIN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:07:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, Gauge32, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, Counter64, MibIdentifier, TimeTicks, mib_2, ModuleIdentity, ObjectIdentity, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Gauge32", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "Counter64", "MibIdentifier", "TimeTicks", "mib-2", "ModuleIdentity", "ObjectIdentity", "NotificationType", "Integer32")
TruthValue, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus")
internet = MibIdentifier((1, 3, 6, 1))
directory = MibIdentifier((1, 3, 6, 1, 1))
mgmt = MibIdentifier((1, 3, 6, 1, 2))
experimental = MibIdentifier((1, 3, 6, 1, 3))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
apertus = MibIdentifier((1, 3, 6, 1, 4, 1, 543))
isg = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3))
aperua = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3))
aperroundrobin = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 4))
aperRoundRobinMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1))
aperRoundRobinMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1))
aperRoundRobinConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1, 1))
aperRoundRobinDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1, 2))
aperRoundRobinNode = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1, 3))
aperRoundRobinConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("loading", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperRoundRobinConfigStatus.setStatus('mandatory')
aperRoundRobinConfigUpTime = MibScalar((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperRoundRobinConfigUpTime.setStatus('mandatory')
aperRoundRobinDomainTable = MibTable((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1, 2, 1), )
if mibBuilder.loadTexts: aperRoundRobinDomainTable.setStatus('mandatory')
aperRoundRobinDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1, 2, 1, 1), ).setIndexNames((0, "APERTUS-UA-ROUND-ROBIN-MIB", "aperRoundRobinDomainName"))
if mibBuilder.loadTexts: aperRoundRobinDomainEntry.setStatus('mandatory')
aperRoundRobinDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperRoundRobinDomainName.setStatus('mandatory')
aperRoundRobinDomainLastHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperRoundRobinDomainLastHostIndex.setStatus('mandatory')
aperRoundRobinDomainUpServers = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperRoundRobinDomainUpServers.setStatus('mandatory')
aperRoundRobinDomainDownServers = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperRoundRobinDomainDownServers.setStatus('mandatory')
aperRoundRobinNodeTable = MibTable((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1, 3, 1), )
if mibBuilder.loadTexts: aperRoundRobinNodeTable.setStatus('mandatory')
aperRoundRobinNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1, 3, 1, 1), ).setIndexNames((0, "APERTUS-UA-ROUND-ROBIN-MIB", "aperRoundRobinNodeName"), (0, "APERTUS-UA-ROUND-ROBIN-MIB", "aperRoundRobinNodeIP"))
if mibBuilder.loadTexts: aperRoundRobinNodeEntry.setStatus('mandatory')
aperRoundRobinNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperRoundRobinNodeName.setStatus('mandatory')
aperRoundRobinNodeIP = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperRoundRobinNodeIP.setStatus('mandatory')
aperRoundRobinNodeHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperRoundRobinNodeHostIndex.setStatus('mandatory')
aperRoundRobinNodePoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperRoundRobinNodePoolIndex.setStatus('mandatory')
aperRoundRobinNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notqueried", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperRoundRobinNodeStatus.setStatus('mandatory')
aperRoundRobinNodeResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 3, 4, 1, 1, 3, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aperRoundRobinNodeResponseTime.setStatus('mandatory')
mibBuilder.exportSymbols("APERTUS-UA-ROUND-ROBIN-MIB", aperRoundRobinDomain=aperRoundRobinDomain, aperRoundRobinNodeHostIndex=aperRoundRobinNodeHostIndex, directory=directory, aperRoundRobinConfigUpTime=aperRoundRobinConfigUpTime, aperRoundRobinConfig=aperRoundRobinConfig, apertus=apertus, experimental=experimental, aperRoundRobinNode=aperRoundRobinNode, aperRoundRobinDomainDownServers=aperRoundRobinDomainDownServers, aperroundrobin=aperroundrobin, aperRoundRobinMIBObjects=aperRoundRobinMIBObjects, aperRoundRobinDomainLastHostIndex=aperRoundRobinDomainLastHostIndex, aperRoundRobinNodeStatus=aperRoundRobinNodeStatus, aperRoundRobinConfigStatus=aperRoundRobinConfigStatus, aperRoundRobinNodeName=aperRoundRobinNodeName, enterprises=enterprises, aperRoundRobinNodeIP=aperRoundRobinNodeIP, aperRoundRobinNodeResponseTime=aperRoundRobinNodeResponseTime, aperRoundRobinNodePoolIndex=aperRoundRobinNodePoolIndex, aperRoundRobinDomainEntry=aperRoundRobinDomainEntry, aperua=aperua, aperRoundRobinNodeTable=aperRoundRobinNodeTable, mgmt=mgmt, aperRoundRobinDomainTable=aperRoundRobinDomainTable, isg=isg, aperRoundRobinDomainName=aperRoundRobinDomainName, aperRoundRobinDomainUpServers=aperRoundRobinDomainUpServers, private=private, aperRoundRobinNodeEntry=aperRoundRobinNodeEntry, internet=internet, aperRoundRobinMIB=aperRoundRobinMIB)
