#
# PySNMP MIB module Wellfleet-PPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-PPP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:34:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, IpAddress, ObjectIdentity, Counter64, TimeTicks, Gauge32, Unsigned32, NotificationType, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "ObjectIdentity", "Counter64", "TimeTicks", "Gauge32", "Unsigned32", "NotificationType", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfPppGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfPppGroup")
wfPppLineTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1), )
if mibBuilder.loadTexts: wfPppLineTable.setStatus('mandatory')
wfPppLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1), ).setIndexNames((0, "Wellfleet-PPP-MIB", "wfPppLineLineNumber"), (0, "Wellfleet-PPP-MIB", "wfPppLineLLIndex"))
if mibBuilder.loadTexts: wfPppLineEntry.setStatus('mandatory')
wfPppLineDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineDelete.setStatus('mandatory')
wfPppLineDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineDisable.setStatus('mandatory')
wfPppLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 20))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("loopedback", 4), ("notpresent", 20))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineState.setStatus('mandatory')
wfPppLineLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineLineNumber.setStatus('mandatory')
wfPppLineLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineLLIndex.setStatus('mandatory')
wfPppLineLcpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineLcpCurrentState.setStatus('mandatory')
wfPppLineRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineRestartTimer.setStatus('mandatory')
wfPppLineEchoRequestFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineEchoRequestFreq.setStatus('mandatory')
wfPppLineEchoReplyLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineEchoReplyLoss.setStatus('mandatory')
wfPppLineMaxConfReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineMaxConfReq.setStatus('mandatory')
wfPppLineMaxTermReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineMaxTermReq.setStatus('mandatory')
wfPppLineMaxConfFail = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineMaxConfFail.setStatus('mandatory')
wfPppLineMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineMagicNumber.setStatus('mandatory')
wfPppLineMru = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineMru.setStatus('mandatory')
wfPppLineLocalAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(49187, 49699, 1))).clone(namedValues=NamedValues(("passauth", 49187), ("chap", 49699), ("none", 1))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineLocalAuthProtocol.setStatus('mandatory')
wfPppLineRemoteAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(49187, 1))).clone(namedValues=NamedValues(("passauth", 49187), ("none", 1))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineRemoteAuthProtocol.setStatus('mandatory')
wfPppLineLocalPapId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineLocalPapId.setStatus('mandatory')
wfPppLineLocalPapPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineLocalPapPassword.setStatus('mandatory')
wfPppLineRemotePapId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineRemotePapId.setStatus('mandatory')
wfPppLineRemotePapPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineRemotePapPassword.setStatus('mandatory')
wfPppLineLQProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(49189, 1))).clone(namedValues=NamedValues(("linkqr", 49189), ("none", 1))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineLQProtocol.setStatus('mandatory')
wfPppLineDisableRemoteLQRTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineDisableRemoteLQRTimer.setStatus('mandatory')
wfPppLineCfgLQRRptPrd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineCfgLQRRptPrd.setStatus('mandatory')
wfPppLineLQRRptPrd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineLQRRptPrd.setStatus('mandatory')
wfPppLineCfgInboundQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineCfgInboundQuality.setStatus('mandatory')
wfPppLineInboundQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineInboundQuality.setStatus('mandatory')
wfPppLineCfgOutboundQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineCfgOutboundQuality.setStatus('mandatory')
wfPppLineOutboundQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineOutboundQuality.setStatus('mandatory')
wfPppLineOutLQRs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineOutLQRs.setStatus('mandatory')
wfPppLineInLQRs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineInLQRs.setStatus('mandatory')
wfPppLineChapSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineChapSecret.setStatus('mandatory')
wfPppLinePapFallbackDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLinePapFallbackDisable.setStatus('mandatory')
wfPppLineChapLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineChapLocalName.setStatus('mandatory')
wfPppLineChapRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineChapRemoteName.setStatus('mandatory')
wfPppLineChapPeriodicTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineChapPeriodicTimer.setStatus('mandatory')
wfPppLineBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineBadPackets.setStatus('mandatory')
wfPppLineLastBadPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineLastBadPacket.setStatus('mandatory')
wfPppLineLevelPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineLevelPktsIn.setStatus('mandatory')
wfPppLineAllowPapReject = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineAllowPapReject.setStatus('mandatory')
wfPppLineActiveCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 40), Integer32().clone(65535)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineActiveCct.setStatus('mandatory')
wfPppLineCfgAsyncMap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 41), Gauge32().clone(655360)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineCfgAsyncMap.setStatus('mandatory')
wfPppLineActualAsyncMap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineActualAsyncMap.setStatus('mandatory')
wfPppLineAuthTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineAuthTimer.setStatus('mandatory')
wfPppLineConvergenceTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineConvergenceTimer.setStatus('mandatory')
wfPppLineMagicNumDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineMagicNumDisable.setStatus('mandatory')
wfPppLineMyLinkDiscr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineMyLinkDiscr.setStatus('mandatory')
wfPppLinePeerLinkDiscr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLinePeerLinkDiscr.setStatus('mandatory')
wfPppLineCfgMru = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4600)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineCfgMru.setStatus('mandatory')
wfPppLineRfc1661Compliance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineRfc1661Compliance.setStatus('mandatory')
wfPppLineLqmCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineLqmCurrentState.setStatus('mandatory')
wfPppCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2), )
if mibBuilder.loadTexts: wfPppCircuitTable.setStatus('mandatory')
wfPppCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1), ).setIndexNames((0, "Wellfleet-PPP-MIB", "wfPppCircuitID"))
if mibBuilder.loadTexts: wfPppCircuitEntry.setStatus('mandatory')
wfPppCircuitDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitDelete.setStatus('mandatory')
wfPppCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitState.setStatus('mandatory')
wfPppCircuitIpcpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitIpcpCurrentState.setStatus('mandatory')
wfPppCircuitOsinlcpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitOsinlcpCurrentState.setStatus('mandatory')
wfPppCircuitXnscpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitXnscpCurrentState.setStatus('mandatory')
wfPppCircuitDncpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitDncpCurrentState.setStatus('mandatory')
wfPppCircuitAtcpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitAtcpCurrentState.setStatus('mandatory')
wfPppCircuitIpxcpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitIpxcpCurrentState.setStatus('mandatory')
wfPppCircuitBncpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitBncpCurrentState.setStatus('mandatory')
wfPppCircuitVncpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitVncpCurrentState.setStatus('mandatory')
wfPppCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitID.setStatus('mandatory')
wfPppCircuitIpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitIpDisable.setStatus('mandatory')
wfPppCircuitOsinlDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitOsinlDisable.setStatus('mandatory')
wfPppCircuitXnsDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitXnsDisable.setStatus('mandatory')
wfPppCircuitDecnetDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitDecnetDisable.setStatus('mandatory')
wfPppCircuitAppletalkDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitAppletalkDisable.setStatus('mandatory')
wfPppCircuitIpxDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitIpxDisable.setStatus('mandatory')
wfPppCircuitBridgeDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitBridgeDisable.setStatus('mandatory')
wfPppCircuitVinesDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitVinesDisable.setStatus('mandatory')
wfPppCircuitCfgLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgLocalIpAddr.setStatus('mandatory')
wfPppCircuitLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitLocalIpAddr.setStatus('mandatory')
wfPppCircuitCfgRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgRemoteIpAddr.setStatus('mandatory')
wfPppCircuitRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitRemoteIpAddr.setStatus('mandatory')
wfPppCircuitCfgIpxNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 24), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgIpxNetworkNumber.setStatus('mandatory')
wfPppCircuitIpxNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitIpxNetworkNumber.setStatus('mandatory')
wfPppCircuitIpxRemoteNodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitIpxRemoteNodeNumber.setStatus('mandatory')
wfPppCircuitCfgIpxRoutingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("ripsap", 2))).clone('ripsap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgIpxRoutingProtocol.setStatus('mandatory')
wfPppCircuitIpxRoutingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitIpxRoutingProtocol.setStatus('mandatory')
wfPppCircuitLocalIpxRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitLocalIpxRouterName.setStatus('mandatory')
wfPppCircuitRemoteIpxRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitRemoteIpxRouterName.setStatus('mandatory')
wfPppCircuitIpxConfigComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitIpxConfigComplete.setStatus('mandatory')
wfPppCircuitCfgAtNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgAtNetwork.setStatus('mandatory')
wfPppCircuitAtNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitAtNetwork.setStatus('mandatory')
wfPppCircuitCfgLocalAtNode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgLocalAtNode.setStatus('mandatory')
wfPppCircuitLocalAtNode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitLocalAtNode.setStatus('mandatory')
wfPppCircuitCfgRemoteAtNode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgRemoteAtNode.setStatus('mandatory')
wfPppCircuitRemoteAtNode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitRemoteAtNode.setStatus('mandatory')
wfPppCircuitCfgAtRoutingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rtmp", 1), ("aurp", 2), ("abgp", 3))).clone('rtmp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgAtRoutingProtocol.setStatus('mandatory')
wfPppCircuitAtRoutingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitAtRoutingProtocol.setStatus('mandatory')
wfPppCircuitCfgBridgeEnet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgBridgeEnet.setStatus('mandatory')
wfPppCircuitBridgeEnet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitBridgeEnet.setStatus('mandatory')
wfPppCircuitCfgBridgeFddi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgBridgeFddi.setStatus('mandatory')
wfPppCircuitBridgeFddi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitBridgeFddi.setStatus('mandatory')
wfPppCircuitCfgBridgeTokenRing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgBridgeTokenRing.setStatus('mandatory')
wfPppCircuitBridgeTokenRing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitBridgeTokenRing.setStatus('mandatory')
wfPppCircuitBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitBadPackets.setStatus('mandatory')
wfPppCircuitLastBadPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 47), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitLastBadPacket.setStatus('mandatory')
wfPppCircuitCcpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitCcpCurrentState.setStatus('mandatory')
wfPppCircuitCcpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCcpDisable.setStatus('mandatory')
wfPppCircuitPppMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("nego", 2), ("multilink", 3), ("monitor", 4), ("dynamic-monitor", 5))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitPppMode.setStatus('mandatory')
wfPppCircuitMLFragPerm = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permitted", 1), ("prohibited", 2))).clone('permitted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitMLFragPerm.setStatus('mandatory')
wfPppCircuitExamPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 200)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitExamPeriod.setStatus('mandatory')
wfPppCircuitFullThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2147483647)).clone(70)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitFullThreshold.setStatus('mandatory')
wfPppCircuitPeriodsCng = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitPeriodsCng.setStatus('mandatory')
wfPppCircuitPrefBwSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitPrefBwSlot.setStatus('mandatory')
wfPppCircuitResvBwSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitResvBwSlot.setStatus('mandatory')
wfPppCircuitMLFragTriggerSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 57), Integer32().clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitMLFragTriggerSize.setStatus('mandatory')
wfPppCircuitMaxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitMaxLinks.setStatus('mandatory')
wfPppCircuitRecoverThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2147483647)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitRecoverThreshold.setStatus('mandatory')
wfPppCircuitPeriodsUnCng = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitPeriodsUnCng.setStatus('mandatory')
wfPppCircuitHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 61), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitHistory.setStatus('mandatory')
wfPppCircuitDebugFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitDebugFlag.setStatus('mandatory')
wfPppCircuitActualMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 20))).clone(namedValues=NamedValues(("normal", 1), ("multilink", 3), ("monitor", 4), ("inactive", 20))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitActualMode.setStatus('mandatory')
wfPppCircuitMaxBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitMaxBuffers.setStatus('mandatory')
wfPppCircuitLinksConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitLinksConfigured.setStatus('mandatory')
wfPppCircuitBacpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitBacpDisable.setStatus('mandatory')
wfPppCircuitBacpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitBacpCurrentState.setStatus('mandatory')
wfPppCircuitBacpNoPhoneNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitBacpNoPhoneNum.setStatus('mandatory')
wfPppCircuitIpv6Disable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitIpv6Disable.setStatus('mandatory')
wfPppCircuitIpv6CurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitIpv6CurrentState.setStatus('mandatory')
wfPppCircuitCcpType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ilccp", 1), ("ccp", 2))).clone('ccp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCcpType.setStatus('mandatory')
wfPppCircuitCfgCcpOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("oui-wcp", 2), ("staclzs", 3))).clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgCcpOptions.setStatus('mandatory')
wfPppCircuitCcpOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("oui-wcp", 2), ("staclzs", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitCcpOptions.setStatus('mandatory')
wfPppCircuitStacLZSCheckMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("mode0", 1), ("mode3", 4))).clone('mode3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitStacLZSCheckMode.setStatus('mandatory')
wfPppCircuitMLFragStrict = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitMLFragStrict.setStatus('mandatory')
wfPppCircuitLampreyCompDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 99))).clone(namedValues=NamedValues(("slot1", 1), ("slot2", 2), ("slot3", 3), ("slot4", 4), ("slot5", 5), ("slot6", 6), ("slot7", 7), ("slot8", 8), ("slot9", 9), ("slot10", 10), ("slot11", 11), ("slot12", 12), ("slot13", 13), ("slot14", 14), ("disabled", 99))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitLampreyCompDisable.setStatus('mandatory')
wfPppCircuitMsgLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2031616, 65536, 131072, 262144, 524288, 1048576, 917504))).clone(namedValues=NamedValues(("all", 2031616), ("debug", 65536), ("info", 131072), ("warning", 262144), ("fault", 524288), ("trace", 1048576), ("infofaultwarning", 917504))).clone('infofaultwarning')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitMsgLevel.setStatus('mandatory')
wfPppCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 9), ("dialup", 1), ("l2tp", 2), ("leased", 3))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitType.setStatus('mandatory')
wfPppCircuitWRCompatability = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitWRCompatability.setStatus('mandatory')
wfPppWhoamiTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 3), )
if mibBuilder.loadTexts: wfPppWhoamiTable.setStatus('mandatory')
wfPppWhoamiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 3, 1), ).setIndexNames((0, "Wellfleet-PPP-MIB", "wfPppWhoamiName"))
if mibBuilder.loadTexts: wfPppWhoamiEntry.setStatus('mandatory')
wfPppWhoamiDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppWhoamiDelete.setStatus('mandatory')
wfPppWhoamiName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppWhoamiName.setStatus('mandatory')
wfPppWhoamiCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppWhoamiCircuit.setStatus('mandatory')
wfPppWhoamiSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppWhoamiSecret.setStatus('mandatory')
wfPppWhoamiPapPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppWhoamiPapPassword.setStatus('mandatory')
wfPppWhoamiCctGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppWhoamiCctGrp.setStatus('mandatory')
wfPppMlStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4), )
if mibBuilder.loadTexts: wfPppMlStatsTable.setStatus('mandatory')
wfPppMlStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1), ).setIndexNames((0, "Wellfleet-PPP-MIB", "wfPppMlStatsCircuitID"))
if mibBuilder.loadTexts: wfPppMlStatsEntry.setStatus('mandatory')
wfPppMlStatsDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppMlStatsDelete.setStatus('mandatory')
wfPppMlStatsCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsCircuitID.setStatus('mandatory')
wfPppMlStatsHomeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsHomeSlot.setStatus('mandatory')
wfPppMlStatsLineCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsLineCnt.setStatus('mandatory')
wfPppMlStatsBundleSpd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsBundleSpd.setStatus('mandatory')
wfPppMlStatsMrru = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsMrru.setStatus('mandatory')
wfPppMlStatsEndptDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsEndptDisc.setStatus('mandatory')
wfPppMlStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsTxOctets.setStatus('mandatory')
wfPppMlStatsTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsTxPkts.setStatus('mandatory')
wfPppMlStatsAvgTxListLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsAvgTxListLen.setStatus('mandatory')
wfPppMlStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsRxOctets.setStatus('mandatory')
wfPppMlStatsRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsRxPkts.setStatus('mandatory')
wfPppMlStatsReasmFails = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsReasmFails.setStatus('mandatory')
wfPppMlStatsSeqNumberLost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsSeqNumberLost.setStatus('mandatory')
wfPppMlStatsSeqNumberArrivedLate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsSeqNumberArrivedLate.setStatus('mandatory')
wfPppMlStatsReSeqBufferCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsReSeqBufferCnt.setStatus('mandatory')
wfPppMlStatsReSeqBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsReSeqBufferMax.setStatus('mandatory')
wfPppMlStatsExceededBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsExceededBufferMax.setStatus('mandatory')
wfPppMlStatsLinkIdleEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsLinkIdleEvents.setStatus('mandatory')
wfPppMlStatsCalcPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppMlStatsCalcPercent.setStatus('mandatory')
wfPppMlStatsDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppMlStatsDebug.setStatus('mandatory')
wfPppMlStatsReassmBufferCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsReassmBufferCnt.setStatus('mandatory')
wfPppMlStatsReassmBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsReassmBufferMax.setStatus('mandatory')
wfPppMlStatsNumPktsFragmented = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsNumPktsFragmented.setStatus('mandatory')
wfPppMlStatsPQHiXmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQHiXmits.setStatus('mandatory')
wfPppMlStatsPQNormalXmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQNormalXmits.setStatus('mandatory')
wfPppMlStatsPQLoXmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQLoXmits.setStatus('mandatory')
wfPppMlStatsPQHiClippedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQHiClippedPkts.setStatus('mandatory')
wfPppMlStatsPQNormalClippedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQNormalClippedPkts.setStatus('mandatory')
wfPppMlStatsPQLoClippedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQLoClippedPkts.setStatus('mandatory')
wfPppMlStatsPQIntrQHighWaterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQIntrQHighWaterPkts.setStatus('mandatory')
wfPppMlStatsPQHiQHighWaterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQHiQHighWaterPkts.setStatus('mandatory')
wfPppMlStatsPQNormalQHighWaterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQNormalQHighWaterPkts.setStatus('mandatory')
wfPppMlStatsPQLoQHighWaterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQLoQHighWaterPkts.setStatus('mandatory')
wfPppMlStatsPQHighWaterPktsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppMlStatsPQHighWaterPktsClear.setStatus('mandatory')
wfPppMlStatsPQDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQDroppedPkts.setStatus('mandatory')
wfPppMlStatsPQLargePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQLargePkts.setStatus('mandatory')
wfPppMlStatsPQHiTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQHiTotalOctets.setStatus('mandatory')
wfPppMlStatsPQNormalTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQNormalTotalOctets.setStatus('mandatory')
wfPppMlStatsPQLoTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQLoTotalOctets.setStatus('mandatory')
wfPppMlStatsPQPktsNotQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQPktsNotQueued.setStatus('mandatory')
wfPppBapStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5), )
if mibBuilder.loadTexts: wfPppBapStatsTable.setStatus('mandatory')
wfPppBapStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1), ).setIndexNames((0, "Wellfleet-PPP-MIB", "wfPppBapStatsCircuitID"))
if mibBuilder.loadTexts: wfPppBapStatsEntry.setStatus('mandatory')
wfPppBapStatsDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppBapStatsDelete.setStatus('mandatory')
wfPppBapStatsCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapStatsCircuitID.setStatus('mandatory')
wfPppBapCallReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallReqTx.setStatus('mandatory')
wfPppBapCallRespAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallRespAckTx.setStatus('mandatory')
wfPppBapCallRespNakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallRespNakTx.setStatus('mandatory')
wfPppBapCallRespFullNakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallRespFullNakTx.setStatus('mandatory')
wfPppBapCallRespRejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallRespRejTx.setStatus('mandatory')
wfPppBapCallbackReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackReqTx.setStatus('mandatory')
wfPppBapCallbackRespAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackRespAckTx.setStatus('mandatory')
wfPppBapCallbackRespNakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackRespNakTx.setStatus('mandatory')
wfPppBapCallbackRespFullNakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackRespFullNakTx.setStatus('mandatory')
wfPppBapCallbackRespRejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackRespRejTx.setStatus('mandatory')
wfPppBapLdQueryReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapLdQueryReqTx.setStatus('mandatory')
wfPppBapLdQueryRespAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapLdQueryRespAckTx.setStatus('mandatory')
wfPppBapLdQueryRespNakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapLdQueryRespNakTx.setStatus('mandatory')
wfPppBapLdQueryRespFullNakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapLdQueryRespFullNakTx.setStatus('mandatory')
wfPppBapCallStatusIndFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallStatusIndFailTx.setStatus('mandatory')
wfPppBapCallStatusIndSuccessTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallStatusIndSuccessTx.setStatus('mandatory')
wfPppBapCallStatusRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallStatusRespTx.setStatus('mandatory')
wfPppBapCallReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallReqRx.setStatus('mandatory')
wfPppBapCallRespAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallRespAckRx.setStatus('mandatory')
wfPppBapCallRespNakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallRespNakRx.setStatus('mandatory')
wfPppBapCallRespFullNakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallRespFullNakRx.setStatus('mandatory')
wfPppBapCallRespRejRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallRespRejRx.setStatus('mandatory')
wfPppBapCallbackReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackReqRx.setStatus('mandatory')
wfPppBapCallbackRespAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackRespAckRx.setStatus('mandatory')
wfPppBapCallbackRespNakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackRespNakRx.setStatus('mandatory')
wfPppBapCallbackRespFullNakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackRespFullNakRx.setStatus('mandatory')
wfPppBapCallbackRespRejRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackRespRejRx.setStatus('mandatory')
wfPppBapLdQueryReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapLdQueryReqRx.setStatus('mandatory')
wfPppBapLdQueryRespAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapLdQueryRespAckRx.setStatus('mandatory')
wfPppBapLdQueryRespNakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapLdQueryRespNakRx.setStatus('mandatory')
wfPppBapLdQueryRespFullNakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapLdQueryRespFullNakRx.setStatus('mandatory')
wfPppBapCallStatusIndFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallStatusIndFailRx.setStatus('mandatory')
wfPppBapCallStatusIndSuccessRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallStatusIndSuccessRx.setStatus('mandatory')
wfPppBapCallStatusRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallStatusRespRx.setStatus('mandatory')
wfPppBapCallReqRespDiscardRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallReqRespDiscardRx.setStatus('mandatory')
wfPppBapCallbackReqRespDiscardRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackReqRespDiscardRx.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-PPP-MIB", wfPppCircuitDelete=wfPppCircuitDelete, wfPppCircuitOsinlcpCurrentState=wfPppCircuitOsinlcpCurrentState, wfPppCircuitResvBwSlot=wfPppCircuitResvBwSlot, wfPppLineCfgInboundQuality=wfPppLineCfgInboundQuality, wfPppMlStatsHomeSlot=wfPppMlStatsHomeSlot, wfPppLineRfc1661Compliance=wfPppLineRfc1661Compliance, wfPppCircuitIpcpCurrentState=wfPppCircuitIpcpCurrentState, wfPppMlStatsPQLargePkts=wfPppMlStatsPQLargePkts, wfPppLineMagicNumDisable=wfPppLineMagicNumDisable, wfPppCircuitAtNetwork=wfPppCircuitAtNetwork, wfPppCircuitCfgAtRoutingProtocol=wfPppCircuitCfgAtRoutingProtocol, wfPppBapStatsTable=wfPppBapStatsTable, wfPppBapStatsEntry=wfPppBapStatsEntry, wfPppLineAuthTimer=wfPppLineAuthTimer, wfPppMlStatsBundleSpd=wfPppMlStatsBundleSpd, wfPppCircuitRemoteIpxRouterName=wfPppCircuitRemoteIpxRouterName, wfPppCircuitEntry=wfPppCircuitEntry, wfPppLineTable=wfPppLineTable, wfPppCircuitCfgLocalAtNode=wfPppCircuitCfgLocalAtNode, wfPppWhoamiDelete=wfPppWhoamiDelete, wfPppCircuitActualMode=wfPppCircuitActualMode, wfPppCircuitType=wfPppCircuitType, wfPppCircuitMLFragTriggerSize=wfPppCircuitMLFragTriggerSize, wfPppLineLevelPktsIn=wfPppLineLevelPktsIn, wfPppWhoamiCircuit=wfPppWhoamiCircuit, wfPppBapCallbackRespRejTx=wfPppBapCallbackRespRejTx, wfPppBapCallStatusRespTx=wfPppBapCallStatusRespTx, wfPppBapLdQueryRespAckTx=wfPppBapLdQueryRespAckTx, wfPppMlStatsSeqNumberLost=wfPppMlStatsSeqNumberLost, wfPppLineCfgAsyncMap=wfPppLineCfgAsyncMap, wfPppBapStatsCircuitID=wfPppBapStatsCircuitID, wfPppLineMaxConfReq=wfPppLineMaxConfReq, wfPppBapCallRespNakRx=wfPppBapCallRespNakRx, wfPppCircuitDecnetDisable=wfPppCircuitDecnetDisable, wfPppMlStatsEntry=wfPppMlStatsEntry, wfPppMlStatsTxOctets=wfPppMlStatsTxOctets, wfPppCircuitExamPeriod=wfPppCircuitExamPeriod, wfPppMlStatsTable=wfPppMlStatsTable, wfPppCircuitRecoverThreshold=wfPppCircuitRecoverThreshold, wfPppCircuitCcpOptions=wfPppCircuitCcpOptions, wfPppCircuitVinesDisable=wfPppCircuitVinesDisable, wfPppWhoamiPapPassword=wfPppWhoamiPapPassword, wfPppLineChapSecret=wfPppLineChapSecret, wfPppCircuitVncpCurrentState=wfPppCircuitVncpCurrentState, wfPppCircuitPeriodsCng=wfPppCircuitPeriodsCng, wfPppLineLLIndex=wfPppLineLLIndex, wfPppLineLQProtocol=wfPppLineLQProtocol, wfPppCircuitCfgBridgeTokenRing=wfPppCircuitCfgBridgeTokenRing, wfPppWhoamiName=wfPppWhoamiName, wfPppWhoamiSecret=wfPppWhoamiSecret, wfPppCircuitIpxDisable=wfPppCircuitIpxDisable, wfPppMlStatsCircuitID=wfPppMlStatsCircuitID, wfPppCircuitMaxBuffers=wfPppCircuitMaxBuffers, wfPppCircuitBacpDisable=wfPppCircuitBacpDisable, wfPppCircuitBacpCurrentState=wfPppCircuitBacpCurrentState, wfPppMlStatsExceededBufferMax=wfPppMlStatsExceededBufferMax, wfPppLineRemotePapId=wfPppLineRemotePapId, wfPppMlStatsPQHiQHighWaterPkts=wfPppMlStatsPQHiQHighWaterPkts, wfPppBapLdQueryRespNakRx=wfPppBapLdQueryRespNakRx, wfPppCircuitCfgCcpOptions=wfPppCircuitCfgCcpOptions, wfPppCircuitIpDisable=wfPppCircuitIpDisable, wfPppLineMyLinkDiscr=wfPppLineMyLinkDiscr, wfPppCircuitPeriodsUnCng=wfPppCircuitPeriodsUnCng, wfPppBapCallRespRejRx=wfPppBapCallRespRejRx, wfPppMlStatsPQNormalQHighWaterPkts=wfPppMlStatsPQNormalQHighWaterPkts, wfPppCircuitAtRoutingProtocol=wfPppCircuitAtRoutingProtocol, wfPppMlStatsReSeqBufferCnt=wfPppMlStatsReSeqBufferCnt, wfPppLineEchoRequestFreq=wfPppLineEchoRequestFreq, wfPppLineInLQRs=wfPppLineInLQRs, wfPppMlStatsRxOctets=wfPppMlStatsRxOctets, wfPppBapCallRespAckRx=wfPppBapCallRespAckRx, wfPppMlStatsPQPktsNotQueued=wfPppMlStatsPQPktsNotQueued, wfPppBapCallRespFullNakRx=wfPppBapCallRespFullNakRx, wfPppCircuitLocalAtNode=wfPppCircuitLocalAtNode, wfPppBapCallReqTx=wfPppBapCallReqTx, wfPppLineCfgOutboundQuality=wfPppLineCfgOutboundQuality, wfPppCircuitMsgLevel=wfPppCircuitMsgLevel, wfPppMlStatsSeqNumberArrivedLate=wfPppMlStatsSeqNumberArrivedLate, wfPppLinePeerLinkDiscr=wfPppLinePeerLinkDiscr, wfPppMlStatsPQLoTotalOctets=wfPppMlStatsPQLoTotalOctets, wfPppBapCallStatusRespRx=wfPppBapCallStatusRespRx, wfPppLineOutboundQuality=wfPppLineOutboundQuality, wfPppMlStatsPQNormalTotalOctets=wfPppMlStatsPQNormalTotalOctets, wfPppLineMaxTermReq=wfPppLineMaxTermReq, wfPppCircuitPrefBwSlot=wfPppCircuitPrefBwSlot, wfPppCircuitXnscpCurrentState=wfPppCircuitXnscpCurrentState, wfPppCircuitCfgBridgeFddi=wfPppCircuitCfgBridgeFddi, wfPppLineChapRemoteName=wfPppLineChapRemoteName, wfPppCircuitLinksConfigured=wfPppCircuitLinksConfigured, wfPppCircuitCfgBridgeEnet=wfPppCircuitCfgBridgeEnet, wfPppCircuitCfgIpxRoutingProtocol=wfPppCircuitCfgIpxRoutingProtocol, wfPppCircuitCfgRemoteAtNode=wfPppCircuitCfgRemoteAtNode, wfPppBapCallRespAckTx=wfPppBapCallRespAckTx, wfPppBapCallStatusIndSuccessRx=wfPppBapCallStatusIndSuccessRx, wfPppMlStatsRxPkts=wfPppMlStatsRxPkts, wfPppLinePapFallbackDisable=wfPppLinePapFallbackDisable, wfPppCircuitID=wfPppCircuitID, wfPppLineLQRRptPrd=wfPppLineLQRRptPrd, wfPppCircuitBncpCurrentState=wfPppCircuitBncpCurrentState, wfPppMlStatsPQLoQHighWaterPkts=wfPppMlStatsPQLoQHighWaterPkts, wfPppLineLineNumber=wfPppLineLineNumber, wfPppMlStatsLineCnt=wfPppMlStatsLineCnt, wfPppLineState=wfPppLineState, wfPppLineLcpCurrentState=wfPppLineLcpCurrentState, wfPppMlStatsPQHiXmits=wfPppMlStatsPQHiXmits, wfPppCircuitPppMode=wfPppCircuitPppMode, wfPppMlStatsPQHighWaterPktsClear=wfPppMlStatsPQHighWaterPktsClear, wfPppLineEntry=wfPppLineEntry, wfPppCircuitIpxRemoteNodeNumber=wfPppCircuitIpxRemoteNodeNumber, wfPppCircuitLampreyCompDisable=wfPppCircuitLampreyCompDisable, wfPppBapLdQueryRespFullNakRx=wfPppBapLdQueryRespFullNakRx, wfPppLineRemoteAuthProtocol=wfPppLineRemoteAuthProtocol, wfPppLineLocalAuthProtocol=wfPppLineLocalAuthProtocol, wfPppBapStatsDelete=wfPppBapStatsDelete, wfPppLineBadPackets=wfPppLineBadPackets, wfPppCircuitBadPackets=wfPppCircuitBadPackets, wfPppMlStatsTxPkts=wfPppMlStatsTxPkts, wfPppBapCallbackRespNakTx=wfPppBapCallbackRespNakTx, wfPppCircuitIpv6CurrentState=wfPppCircuitIpv6CurrentState, wfPppBapCallRespFullNakTx=wfPppBapCallRespFullNakTx, wfPppBapLdQueryRespAckRx=wfPppBapLdQueryRespAckRx, wfPppLineRestartTimer=wfPppLineRestartTimer, wfPppMlStatsPQDroppedPkts=wfPppMlStatsPQDroppedPkts, wfPppBapLdQueryReqTx=wfPppBapLdQueryReqTx, wfPppBapCallbackRespAckTx=wfPppBapCallbackRespAckTx, wfPppLineLqmCurrentState=wfPppLineLqmCurrentState, wfPppCircuitStacLZSCheckMode=wfPppCircuitStacLZSCheckMode, wfPppCircuitAppletalkDisable=wfPppCircuitAppletalkDisable, wfPppCircuitIpv6Disable=wfPppCircuitIpv6Disable, wfPppCircuitIpxcpCurrentState=wfPppCircuitIpxcpCurrentState, wfPppBapCallbackRespRejRx=wfPppBapCallbackRespRejRx, wfPppCircuitState=wfPppCircuitState, wfPppCircuitCcpDisable=wfPppCircuitCcpDisable, wfPppCircuitCfgIpxNetworkNumber=wfPppCircuitCfgIpxNetworkNumber, wfPppCircuitTable=wfPppCircuitTable, wfPppLineLastBadPacket=wfPppLineLastBadPacket, wfPppCircuitMaxLinks=wfPppCircuitMaxLinks, wfPppCircuitDebugFlag=wfPppCircuitDebugFlag, wfPppCircuitLastBadPacket=wfPppCircuitLastBadPacket, wfPppMlStatsDelete=wfPppMlStatsDelete, wfPppCircuitIpxNetworkNumber=wfPppCircuitIpxNetworkNumber, wfPppLineCfgMru=wfPppLineCfgMru, wfPppMlStatsPQHiClippedPkts=wfPppMlStatsPQHiClippedPkts, wfPppBapCallRespRejTx=wfPppBapCallRespRejTx, wfPppCircuitXnsDisable=wfPppCircuitXnsDisable, wfPppLineActiveCct=wfPppLineActiveCct, wfPppMlStatsMrru=wfPppMlStatsMrru, wfPppLineDelete=wfPppLineDelete, wfPppCircuitMLFragPerm=wfPppCircuitMLFragPerm, wfPppBapCallbackRespNakRx=wfPppBapCallbackRespNakRx, wfPppMlStatsPQNormalClippedPkts=wfPppMlStatsPQNormalClippedPkts, wfPppLineDisable=wfPppLineDisable, wfPppBapLdQueryReqRx=wfPppBapLdQueryReqRx, wfPppCircuitCcpType=wfPppCircuitCcpType, wfPppBapCallStatusIndFailTx=wfPppBapCallStatusIndFailTx, wfPppMlStatsPQHiTotalOctets=wfPppMlStatsPQHiTotalOctets, wfPppLineLocalPapPassword=wfPppLineLocalPapPassword, wfPppBapCallbackReqTx=wfPppBapCallbackReqTx, wfPppCircuitBridgeEnet=wfPppCircuitBridgeEnet, wfPppBapCallbackRespFullNakRx=wfPppBapCallbackRespFullNakRx, wfPppLineOutLQRs=wfPppLineOutLQRs, wfPppMlStatsAvgTxListLen=wfPppMlStatsAvgTxListLen, wfPppLineMagicNumber=wfPppLineMagicNumber, wfPppBapCallbackReqRespDiscardRx=wfPppBapCallbackReqRespDiscardRx, wfPppLineMaxConfFail=wfPppLineMaxConfFail, wfPppCircuitOsinlDisable=wfPppCircuitOsinlDisable, wfPppMlStatsReasmFails=wfPppMlStatsReasmFails, wfPppBapCallbackReqRx=wfPppBapCallbackReqRx, wfPppBapLdQueryRespFullNakTx=wfPppBapLdQueryRespFullNakTx, wfPppCircuitRemoteAtNode=wfPppCircuitRemoteAtNode, wfPppMlStatsDebug=wfPppMlStatsDebug, wfPppCircuitLocalIpxRouterName=wfPppCircuitLocalIpxRouterName, wfPppLineAllowPapReject=wfPppLineAllowPapReject, wfPppWhoamiTable=wfPppWhoamiTable, wfPppLineRemotePapPassword=wfPppLineRemotePapPassword, wfPppMlStatsPQNormalXmits=wfPppMlStatsPQNormalXmits, wfPppBapCallRespNakTx=wfPppBapCallRespNakTx, wfPppLineMru=wfPppLineMru, wfPppLineChapPeriodicTimer=wfPppLineChapPeriodicTimer, wfPppCircuitFullThreshold=wfPppCircuitFullThreshold, wfPppLineLocalPapId=wfPppLineLocalPapId, wfPppWhoamiCctGrp=wfPppWhoamiCctGrp, wfPppCircuitMLFragStrict=wfPppCircuitMLFragStrict, wfPppCircuitLocalIpAddr=wfPppCircuitLocalIpAddr, wfPppCircuitDncpCurrentState=wfPppCircuitDncpCurrentState, wfPppCircuitCfgLocalIpAddr=wfPppCircuitCfgLocalIpAddr, wfPppLineConvergenceTimer=wfPppLineConvergenceTimer, wfPppMlStatsPQLoXmits=wfPppMlStatsPQLoXmits, wfPppCircuitCcpCurrentState=wfPppCircuitCcpCurrentState, wfPppCircuitAtcpCurrentState=wfPppCircuitAtcpCurrentState, wfPppCircuitRemoteIpAddr=wfPppCircuitRemoteIpAddr, wfPppWhoamiEntry=wfPppWhoamiEntry, wfPppMlStatsNumPktsFragmented=wfPppMlStatsNumPktsFragmented, wfPppCircuitIpxConfigComplete=wfPppCircuitIpxConfigComplete, wfPppMlStatsPQLoClippedPkts=wfPppMlStatsPQLoClippedPkts, wfPppCircuitBridgeFddi=wfPppCircuitBridgeFddi, wfPppCircuitWRCompatability=wfPppCircuitWRCompatability, wfPppMlStatsReassmBufferMax=wfPppMlStatsReassmBufferMax, wfPppBapCallbackRespFullNakTx=wfPppBapCallbackRespFullNakTx, wfPppLineDisableRemoteLQRTimer=wfPppLineDisableRemoteLQRTimer, wfPppLineActualAsyncMap=wfPppLineActualAsyncMap, wfPppBapCallStatusIndFailRx=wfPppBapCallStatusIndFailRx, wfPppBapCallbackRespAckRx=wfPppBapCallbackRespAckRx, wfPppCircuitBacpNoPhoneNum=wfPppCircuitBacpNoPhoneNum, wfPppBapLdQueryRespNakTx=wfPppBapLdQueryRespNakTx, wfPppMlStatsLinkIdleEvents=wfPppMlStatsLinkIdleEvents, wfPppLineChapLocalName=wfPppLineChapLocalName, wfPppCircuitBridgeTokenRing=wfPppCircuitBridgeTokenRing, wfPppCircuitCfgRemoteIpAddr=wfPppCircuitCfgRemoteIpAddr, wfPppCircuitCfgAtNetwork=wfPppCircuitCfgAtNetwork, wfPppCircuitHistory=wfPppCircuitHistory, wfPppMlStatsEndptDisc=wfPppMlStatsEndptDisc, wfPppMlStatsReassmBufferCnt=wfPppMlStatsReassmBufferCnt, wfPppMlStatsPQIntrQHighWaterPkts=wfPppMlStatsPQIntrQHighWaterPkts, wfPppBapCallStatusIndSuccessTx=wfPppBapCallStatusIndSuccessTx, wfPppBapCallReqRx=wfPppBapCallReqRx, wfPppLineEchoReplyLoss=wfPppLineEchoReplyLoss, wfPppCircuitBridgeDisable=wfPppCircuitBridgeDisable, wfPppMlStatsReSeqBufferMax=wfPppMlStatsReSeqBufferMax, wfPppMlStatsCalcPercent=wfPppMlStatsCalcPercent, wfPppLineCfgLQRRptPrd=wfPppLineCfgLQRRptPrd, wfPppLineInboundQuality=wfPppLineInboundQuality, wfPppBapCallReqRespDiscardRx=wfPppBapCallReqRespDiscardRx, wfPppCircuitIpxRoutingProtocol=wfPppCircuitIpxRoutingProtocol)
