#
# PySNMP MIB module CXMLPPP-IP-NCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXMLPPP-IP-NCP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
SapIndex, cxMLPPP = mibBuilder.importSymbols("CXProduct-SMI", "SapIndex", "cxMLPPP")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Bits, Counter64, IpAddress, Gauge32, Unsigned32, iso, NotificationType, ObjectIdentity, Integer32, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Bits", "Counter64", "IpAddress", "Gauge32", "Unsigned32", "iso", "NotificationType", "ObjectIdentity", "Integer32", "ModuleIdentity", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
mlpppIpNsTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 52), )
if mibBuilder.loadTexts: mlpppIpNsTable.setStatus('mandatory')
mlpppIpNsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 52, 1), ).setIndexNames((0, "CXMLPPP-IP-NCP-MIB", "mlpppIpNsLSapNumber"), (0, "CXMLPPP-IP-NCP-MIB", "mlpppIpNsNumber"))
if mibBuilder.loadTexts: mlpppIpNsEntry.setStatus('mandatory')
mlpppIpNsLSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 52, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppIpNsLSapNumber.setStatus('mandatory')
mlpppIpNsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 52, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppIpNsNumber.setStatus('mandatory')
mlpppIpNsLocalToRemoteComp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 52, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("vj-tcp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppIpNsLocalToRemoteComp.setStatus('mandatory')
mlpppIpNsRemoteToLocalComp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 52, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("vj-tcp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppIpNsRemoteToLocalComp.setStatus('mandatory')
mlpppIpNcTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 53), )
if mibBuilder.loadTexts: mlpppIpNcTable.setStatus('mandatory')
mlpppIpNcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 53, 1), ).setIndexNames((0, "CXMLPPP-IP-NCP-MIB", "mlpppIpNcUSapNumber"), (0, "CXMLPPP-IP-NCP-MIB", "mlpppIpNcNumber"))
if mibBuilder.loadTexts: mlpppIpNcEntry.setStatus('mandatory')
mlpppIpNcUSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 53, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppIpNcUSapNumber.setStatus('mandatory')
mlpppIpNcNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 53, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlpppIpNcNumber.setStatus('mandatory')
mlpppIpNcComp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 49, 53, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("vj-tcp", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlpppIpNcComp.setStatus('mandatory')
mibBuilder.exportSymbols("CXMLPPP-IP-NCP-MIB", mlpppIpNsRemoteToLocalComp=mlpppIpNsRemoteToLocalComp, mlpppIpNsLocalToRemoteComp=mlpppIpNsLocalToRemoteComp, mlpppIpNsEntry=mlpppIpNsEntry, mlpppIpNsTable=mlpppIpNsTable, mlpppIpNcEntry=mlpppIpNcEntry, mlpppIpNsLSapNumber=mlpppIpNsLSapNumber, mlpppIpNsNumber=mlpppIpNsNumber, mlpppIpNcNumber=mlpppIpNcNumber, mlpppIpNcComp=mlpppIpNcComp, mlpppIpNcTable=mlpppIpNcTable, mlpppIpNcUSapNumber=mlpppIpNcUSapNumber)
