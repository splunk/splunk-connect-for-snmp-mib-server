#
# PySNMP MIB module WWP-LEOS-DNS-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-DNS-CLIENT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:31:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, NotificationType, ObjectIdentity, TimeTicks, Bits, Counter32, Counter64, Unsigned32, Gauge32, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "NotificationType", "ObjectIdentity", "TimeTicks", "Bits", "Counter32", "Counter64", "Unsigned32", "Gauge32", "IpAddress", "ModuleIdentity")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosDnsClientMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16))
wwpLeosDnsClientMIB.setRevisions(('2012-03-20 07:00', '2003-03-19 10:12',))
if mibBuilder.loadTexts: wwpLeosDnsClientMIB.setLastUpdated('201203200700Z')
if mibBuilder.loadTexts: wwpLeosDnsClientMIB.setOrganization(' Ciena Inc')
wwpLeosDnsClientMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1))
wwpLeosDnsClient = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1))
wwpLeosDnsClientMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 2))
wwpLeosDnsClientMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 2, 0))
wwpLeosDnsClientMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 3))
wwpLeosDnsClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 3, 1))
wwpLeosDnsClientMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 3, 2))
wwpLeosDnsClientStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDnsClientStatus.setStatus('current')
wwpLeosDnsClientDhcpDomainName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDnsClientDhcpDomainName.setStatus('current')
wwpLeosDnsClientDhcpDomainNameState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDnsClientDhcpDomainNameState.setStatus('current')
wwpLeosDnsClientUserDomainName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDnsClientUserDomainName.setStatus('current')
wwpLeosDnsClientUserDomainNameState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDnsClientUserDomainNameState.setStatus('current')
wwpLeosDnsServerTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6), )
if mibBuilder.loadTexts: wwpLeosDnsServerTable.setStatus('current')
wwpLeosDnsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6, 1), ).setIndexNames((0, "WWP-LEOS-DNS-CLIENT-MIB", "wwpLeosDnsServerIndex"))
if mibBuilder.loadTexts: wwpLeosDnsServerEntry.setStatus('current')
wwpLeosDnsServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: wwpLeosDnsServerIndex.setStatus('current')
wwpLeosDnsServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDnsServerAddr.setStatus('current')
wwpLeosDnsServerUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDnsServerUserPriority.setStatus('current')
wwpLeosDnsServerDhcpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDnsServerDhcpPriority.setStatus('current')
wwpLeosDnsServerScope = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user", 1), ("dhcp", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDnsServerScope.setStatus('current')
wwpLeosDnsServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDnsServerStatus.setStatus('current')
wwpLeosDnsServerInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6, 1, 7), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDnsServerInetAddrType.setStatus('current')
wwpLeosDnsServerInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 6, 1, 8), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDnsServerInetAddr.setStatus('current')
wwpLeosDnsServerExtTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 7), )
if mibBuilder.loadTexts: wwpLeosDnsServerExtTable.setStatus('current')
wwpLeosDnsServerExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 7, 1), ).setIndexNames((0, "WWP-LEOS-DNS-CLIENT-MIB", "wwpLeosDnsServerIndex"))
if mibBuilder.loadTexts: wwpLeosDnsServerExtEntry.setStatus('current')
wwpLeosDnsServerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDnsServerAdminState.setStatus('current')
wwpLeosDnsServerOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDnsServerOperState.setStatus('current')
wwpLeosDnsServerEntryCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 3, 1, 1)).setObjects(("WWP-LEOS-DNS-CLIENT-MIB", "wwpLeosDnsServerEntryIpv6Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wwpLeosDnsServerEntryCompliance = wwpLeosDnsServerEntryCompliance.setStatus('current')
wwpLeosDnsServerEntryIpv6Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6141, 2, 60, 16, 3, 2, 1)).setObjects(("WWP-LEOS-DNS-CLIENT-MIB", "wwpLeosDnsServerInetAddrType"), ("WWP-LEOS-DNS-CLIENT-MIB", "wwpLeosDnsServerInetAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wwpLeosDnsServerEntryIpv6Group = wwpLeosDnsServerEntryIpv6Group.setStatus('current')
mibBuilder.exportSymbols("WWP-LEOS-DNS-CLIENT-MIB", wwpLeosDnsClientStatus=wwpLeosDnsClientStatus, wwpLeosDnsClientMIBGroups=wwpLeosDnsClientMIBGroups, wwpLeosDnsClientUserDomainName=wwpLeosDnsClientUserDomainName, wwpLeosDnsServerDhcpPriority=wwpLeosDnsServerDhcpPriority, wwpLeosDnsServerIndex=wwpLeosDnsServerIndex, wwpLeosDnsServerStatus=wwpLeosDnsServerStatus, wwpLeosDnsServerEntryIpv6Group=wwpLeosDnsServerEntryIpv6Group, wwpLeosDnsClientMIBObjects=wwpLeosDnsClientMIBObjects, wwpLeosDnsServerAddr=wwpLeosDnsServerAddr, wwpLeosDnsClientDhcpDomainNameState=wwpLeosDnsClientDhcpDomainNameState, wwpLeosDnsClient=wwpLeosDnsClient, wwpLeosDnsServerEntryCompliance=wwpLeosDnsServerEntryCompliance, wwpLeosDnsServerInetAddrType=wwpLeosDnsServerInetAddrType, wwpLeosDnsServerExtTable=wwpLeosDnsServerExtTable, wwpLeosDnsClientMIB=wwpLeosDnsClientMIB, PYSNMP_MODULE_ID=wwpLeosDnsClientMIB, wwpLeosDnsServerUserPriority=wwpLeosDnsServerUserPriority, wwpLeosDnsServerEntry=wwpLeosDnsServerEntry, wwpLeosDnsServerScope=wwpLeosDnsServerScope, wwpLeosDnsServerOperState=wwpLeosDnsServerOperState, wwpLeosDnsServerTable=wwpLeosDnsServerTable, wwpLeosDnsClientMIBCompliances=wwpLeosDnsClientMIBCompliances, wwpLeosDnsServerInetAddr=wwpLeosDnsServerInetAddr, wwpLeosDnsServerExtEntry=wwpLeosDnsServerExtEntry, wwpLeosDnsClientMIBNotifications=wwpLeosDnsClientMIBNotifications, wwpLeosDnsClientUserDomainNameState=wwpLeosDnsClientUserDomainNameState, wwpLeosDnsClientMIBNotificationPrefix=wwpLeosDnsClientMIBNotificationPrefix, wwpLeosDnsClientDhcpDomainName=wwpLeosDnsClientDhcpDomainName, wwpLeosDnsClientMIBConformance=wwpLeosDnsClientMIBConformance, wwpLeosDnsServerAdminState=wwpLeosDnsServerAdminState)
