#
# PySNMP MIB module DDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DDS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:21:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
gdc, = mibBuilder.importSymbols("GDCCMN-MIB", "gdc")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Counter64, ObjectIdentity, Unsigned32, Bits, IpAddress, ModuleIdentity, Counter32, MibIdentifier, iso, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "ObjectIdentity", "Unsigned32", "Bits", "IpAddress", "ModuleIdentity", "Counter32", "MibIdentifier", "iso", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dsu = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8))
dds = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 1))
ddsMIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsMIBversion.setStatus('mandatory')
ddsLineCfgTable = MibTable((1, 3, 6, 1, 4, 1, 498, 8, 1, 2), )
if mibBuilder.loadTexts: ddsLineCfgTable.setStatus('mandatory')
ddsLineCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 8, 1, 2, 1), ).setIndexNames((0, "DDS-MIB", "ddsLineCfgIndex"))
if mibBuilder.loadTexts: ddsLineCfgEntry.setStatus('mandatory')
ddsLineCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsLineCfgIndex.setStatus('mandatory')
ddsLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dds1", 1), ("ddsSc", 2), ("clearChannel", 3), ("auto", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsLineType.setStatus('mandatory')
ddsAutoDataRateDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("async2400", 1), ("sync2400", 2), ("async4800", 3), ("sync4800", 4), ("async9600", 5), ("sync9600", 6), ("async19200", 7), ("sync19200", 8), ("sync56000", 9), ("sync64000", 10), ("autoAsync", 11), ("autoSync", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsAutoDataRateDetect.setStatus('mandatory')
ddsDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("async2400", 1), ("sync2400", 2), ("async4800", 3), ("sync4800", 4), ("async9600", 5), ("sync9600", 6), ("async19200", 7), ("sync19200", 8), ("sync56000", 9), ("sync64000", 10), ("autoAsync", 11), ("autoSync", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsDataRate.setStatus('mandatory')
ddsTxClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("receive", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsTxClockSource.setStatus('mandatory')
ddsZeroEncodingCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsZeroEncodingCfg.setStatus('mandatory')
ddsDefaultConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noChange", 1), ("defaultCfg", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsDefaultConfig.setStatus('mandatory')
ddsDteCfgTable = MibTable((1, 3, 6, 1, 4, 1, 498, 8, 1, 3), )
if mibBuilder.loadTexts: ddsDteCfgTable.setStatus('mandatory')
ddsDteCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 8, 1, 3, 1), ).setIndexNames((0, "DDS-MIB", "ddsDteCfgIndex"))
if mibBuilder.loadTexts: ddsDteCfgEntry.setStatus('mandatory')
ddsDteCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsDteCfgIndex.setStatus('mandatory')
ddsDteExtBuffClk = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsDteExtBuffClk.setStatus('mandatory')
ddsDteCfgTxCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("constant", 1), ("switched", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsDteCfgTxCarrier.setStatus('mandatory')
ddsDteCfgRxCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("constant", 1), ("switched", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsDteCfgRxCarrier.setStatus('mandatory')
ddsDteCfgCtsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ctsOn", 1), ("ctsFixed3Char", 2), ("cts0mSec", 3), ("cts30mSec", 4), ("cts60mSec", 5), ("cts90mSec", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsDteCfgCtsDelay.setStatus('mandatory')
ddsDteCfgLocalDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("followsDTR", 1), ("forcedOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsDteCfgLocalDSR.setStatus('mandatory')
ddsDteCfgAnaloopDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsDteCfgAnaloopDSR.setStatus('mandatory')
ddsDteCfgAasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsDteCfgAasStatus.setStatus('mandatory')
ddsDteCfgAasTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sec5", 1), ("sec10", 2), ("sec30", 3), ("sec45", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsDteCfgAasTimer.setStatus('mandatory')
ddsDteCfgCircuitAssurance = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsDteCfgCircuitAssurance.setStatus('mandatory')
ddsDteCfgSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsDteCfgSystemStatus.setStatus('mandatory')
ddsDteCfgTermaloop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsDteCfgTermaloop.setStatus('mandatory')
ddsDteAsyncCfgTable = MibTable((1, 3, 6, 1, 4, 1, 498, 8, 1, 4), )
if mibBuilder.loadTexts: ddsDteAsyncCfgTable.setStatus('mandatory')
ddsDteAsyncCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 8, 1, 4, 1), ).setIndexNames((0, "DDS-MIB", "ddsDteAsyncCfgIndex"))
if mibBuilder.loadTexts: ddsDteAsyncCfgEntry.setStatus('mandatory')
ddsDteAsyncCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsDteAsyncCfgIndex.setStatus('mandatory')
ddsDteAsyncRateAdapt = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("halfLineRate", 2), ("quarterLineRate", 3), ("from1800to2400LineRate", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsDteAsyncRateAdapt.setStatus('mandatory')
ddsDteAsyncRxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsDteAsyncRxDelay.setStatus('mandatory')
ddsDteAsyncTxEOTcfg = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsDteAsyncTxEOTcfg.setStatus('mandatory')
ddsDteAsyncRxEOTcfg = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsDteAsyncRxEOTcfg.setStatus('mandatory')
ddsDteAsyncOverSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("overSpeed1", 1), ("overSpeed2point3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsDteAsyncOverSpeed.setStatus('mandatory')
ddsDteAsyncCharacterSize = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bits11", 1), ("bits10", 2), ("bits9", 3), ("bits8", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsDteAsyncCharacterSize.setStatus('mandatory')
ddsDteStatusTable = MibTable((1, 3, 6, 1, 4, 1, 498, 8, 1, 6), )
if mibBuilder.loadTexts: ddsDteStatusTable.setStatus('mandatory')
ddsDteStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 8, 1, 6, 1), ).setIndexNames((0, "DDS-MIB", "ddsDteStatusIndex"))
if mibBuilder.loadTexts: ddsDteStatusEntry.setStatus('mandatory')
ddsDteStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 6, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsDteStatusIndex.setStatus('mandatory')
ddsDteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsDteStatus.setStatus('mandatory')
mibBuilder.exportSymbols("DDS-MIB", ddsDteCfgCircuitAssurance=ddsDteCfgCircuitAssurance, ddsDataRate=ddsDataRate, ddsLineCfgEntry=ddsLineCfgEntry, ddsLineCfgTable=ddsLineCfgTable, dsu=dsu, ddsDteCfgLocalDSR=ddsDteCfgLocalDSR, ddsDteAsyncCfgTable=ddsDteAsyncCfgTable, ddsDefaultConfig=ddsDefaultConfig, ddsLineCfgIndex=ddsLineCfgIndex, ddsDteAsyncRateAdapt=ddsDteAsyncRateAdapt, ddsDteAsyncRxDelay=ddsDteAsyncRxDelay, ddsDteAsyncTxEOTcfg=ddsDteAsyncTxEOTcfg, ddsDteStatusTable=ddsDteStatusTable, ddsDteCfgAasTimer=ddsDteCfgAasTimer, ddsDteCfgTermaloop=ddsDteCfgTermaloop, ddsDteCfgSystemStatus=ddsDteCfgSystemStatus, ddsDteAsyncOverSpeed=ddsDteAsyncOverSpeed, ddsDteCfgTxCarrier=ddsDteCfgTxCarrier, ddsDteAsyncCfgIndex=ddsDteAsyncCfgIndex, ddsDteExtBuffClk=ddsDteExtBuffClk, ddsDteAsyncCfgEntry=ddsDteAsyncCfgEntry, ddsDteCfgAasStatus=ddsDteCfgAasStatus, ddsDteStatusEntry=ddsDteStatusEntry, ddsTxClockSource=ddsTxClockSource, ddsDteCfgCtsDelay=ddsDteCfgCtsDelay, ddsDteAsyncRxEOTcfg=ddsDteAsyncRxEOTcfg, ddsDteCfgIndex=ddsDteCfgIndex, ddsDteCfgEntry=ddsDteCfgEntry, ddsDteStatusIndex=ddsDteStatusIndex, ddsDteAsyncCharacterSize=ddsDteAsyncCharacterSize, ddsDteCfgAnaloopDSR=ddsDteCfgAnaloopDSR, ddsMIBversion=ddsMIBversion, ddsDteStatus=ddsDteStatus, ddsLineType=ddsLineType, ddsAutoDataRateDetect=ddsAutoDataRateDetect, ddsZeroEncodingCfg=ddsZeroEncodingCfg, ddsDteCfgRxCarrier=ddsDteCfgRxCarrier, dds=dds, ddsDteCfgTable=ddsDteCfgTable)
