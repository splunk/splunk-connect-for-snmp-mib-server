#
# PySNMP MIB module ALCATEL-IND1-TIMETRA-MPLS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-TIMETRA-MPLS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:04:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
timetraSRMIBModules, tmnxSRConfs, tmnxSRObjs, tmnxSRNotifyPrefix = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-GLOBAL-MIB", "timetraSRMIBModules", "tmnxSRConfs", "tmnxSRObjs", "tmnxSRNotifyPrefix")
TmnxActionType, TNamedItemOrEmpty, TmnxOperState, TmnxAdminState, TmnxVRtrMplsLspID, TNamedItem = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-TC-MIB", "TmnxActionType", "TNamedItemOrEmpty", "TmnxOperState", "TmnxAdminState", "TmnxVRtrMplsLspID", "TNamedItem")
vRtrID, vRtrIfIndex = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID", "vRtrIfIndex")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressIPv6, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv6")
MplsLSPID, mplsXCLspId, MplsLabel = mibBuilder.importSymbols("MPLS-LSR-MIB", "MplsLSPID", "mplsXCLspId", "MplsLabel")
mplsTunnelARHopEntry, mplsTunnelInstance, mplsTunnelIndex, mplsTunnelIngressLSRId = mibBuilder.importSymbols("MPLS-TE-MIB", "mplsTunnelARHopEntry", "mplsTunnelInstance", "mplsTunnelIndex", "mplsTunnelIngressLSRId")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, Unsigned32, Counter32, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, TimeTicks, NotificationType, ObjectIdentity, Gauge32, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "Counter32", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "TimeTicks", "NotificationType", "ObjectIdentity", "Gauge32", "IpAddress", "MibIdentifier")
TimeInterval, DisplayString, RowStatus, TestAndIncr, RowPointer, TimeStamp, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "DisplayString", "RowStatus", "TestAndIncr", "RowPointer", "TimeStamp", "TextualConvention", "TruthValue")
timetraMplsMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 6))
timetraMplsMIBModule.setRevisions(('1908-01-01 00:00', '1907-01-01 00:00', '1906-03-23 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-01-15 00:00', '1903-08-15 00:00', '1900-09-07 00:00', '1900-08-14 00:00',))
if mibBuilder.loadTexts: timetraMplsMIBModule.setLastUpdated('0801010000Z')
if mibBuilder.loadTexts: timetraMplsMIBModule.setOrganization('Alcatel')
tmnxMplsObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6))
tmnxMplsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6))
tmnxMplsNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 6))
tmnxMplsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 6, 0))
class TmnxMplsLspFailCode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))
    namedValues = NamedValues(("noError", 0), ("admissionControlError", 1), ("noRouteToDestination", 2), ("trafficControlSystemError", 3), ("routingError", 4), ("noResourcesAvailable", 5), ("badNode", 6), ("routingLoop", 7), ("labelAllocationError", 8), ("badL3PID", 9), ("tunnelLocallyRepaired", 10), ("unknownObjectClass", 11), ("unknownCType", 12), ("noEgressMplsInterface", 13), ("noEgressRsvpInterface", 14), ("looseHopsInFRRLsp", 15), ("unknown", 16), ("retryExceeded", 17), ("noCspfRouteOwner", 18), ("noCspfRouteToDestination", 19), ("hopLimitExceeded", 20), ("looseHopsInManualBypassLsp", 21), ("emptyPathInManualBypassLsp", 22), ("lspFlowControlled", 23), ("srlgSecondaryNotDisjoint", 24), ("srlgPrimaryCspfDisabled", 25), ("srlgPrimaryPathDown", 26))

class TmnxMplsLabelOwner(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 0), ("rsvp", 1), ("tldp", 2), ("ildp", 3), ("svcmgr", 4), ("bgp", 5), ("mirror", 6), ("static", 7), ("vprn", 8))

class TmnxMplsOperDownReasonCode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("operUp", 0), ("adminDown", 1), ("noResources", 2), ("systemIpDown", 3), ("iomFailure", 4), ("clearDown", 5))

vRtrMplsLspTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1), )
if mibBuilder.loadTexts: vRtrMplsLspTable.setStatus('current')
vRtrMplsLspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspIndex"))
if mibBuilder.loadTexts: vRtrMplsLspEntry.setStatus('current')
vRtrMplsLspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 1), TmnxVRtrMplsLspID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrMplsLspIndex.setStatus('current')
vRtrMplsLspRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspRowStatus.setStatus('current')
vRtrMplsLspLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspLastChange.setStatus('current')
vRtrMplsLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 4), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspName.setStatus('current')
vRtrMplsLspAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 5), TmnxAdminState().clone('inService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspAdminState.setStatus('current')
vRtrMplsLspOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 6), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspOperState.setStatus('current')
vRtrMplsLspFromAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspFromAddr.setStatus('current')
vRtrMplsLspToAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspToAddr.setStatus('current')
vRtrMplsLspType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("dynamic", 2), ("static", 3), ("bypass-only", 4))).clone('dynamic')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspType.setStatus('current')
vRtrMplsLspOutSegIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspOutSegIndx.setStatus('current')
vRtrMplsLspRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspRetryTimer.setStatus('current')
vRtrMplsLspRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspRetryLimit.setStatus('current')
vRtrMplsLspMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspMetric.setStatus('current')
vRtrMplsLspDecrementTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 14), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspDecrementTtl.setStatus('current')
vRtrMplsLspCspf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspCspf.setStatus('current')
vRtrMplsLspFastReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspFastReroute.setStatus('current')
vRtrMplsLspFRHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspFRHopLimit.setStatus('current')
vRtrMplsLspFRBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 18), Unsigned32()).setUnits('mega-bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspFRBandwidth.setStatus('current')
vRtrMplsLspClassOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 19), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspClassOfService.setStatus('current')
vRtrMplsLspSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspSetupPriority.setStatus('current')
vRtrMplsLspHoldPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspHoldPriority.setStatus('current')
vRtrMplsLspRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 22), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspRecord.setStatus('current')
vRtrMplsLspPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPreference.setStatus('current')
vRtrMplsLspBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 24), Integer32()).setUnits('mega-bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspBandwidth.setStatus('current')
vRtrMplsLspBwProtect = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspBwProtect.setStatus('current')
vRtrMplsLspHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspHopLimit.setStatus('current')
vRtrMplsLspNegotiatedMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspNegotiatedMTU.setStatus('current')
vRtrMplsLspRsvpResvStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("se", 1), ("ff", 2))).clone('se')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspRsvpResvStyle.setStatus('current')
vRtrMplsLspRsvpAdspec = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 29), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspRsvpAdspec.setStatus('current')
vRtrMplsLspFRMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneToOneBackup", 1), ("facilityBackup", 2))).clone('oneToOneBackup')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspFRMethod.setStatus('current')
vRtrMplsLspFRNodeProtect = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 31), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspFRNodeProtect.setStatus('current')
vRtrMplsLspAdminGroupInclude = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 32), Unsigned32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspAdminGroupInclude.setStatus('current')
vRtrMplsLspAdminGroupExclude = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 33), Unsigned32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspAdminGroupExclude.setStatus('current')
vRtrMplsLspAdaptive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 34), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspAdaptive.setStatus('current')
vRtrMplsLspInheritance = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 35), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspInheritance.setStatus('current')
vRtrMplsLspOptimizeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspOptimizeTimer.setStatus('current')
vRtrMplsLspOperFastReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 37), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspOperFastReroute.setStatus('current')
vRtrMplsLspFRObject = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 38), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspFRObject.setStatus('current')
vRtrMplsLspHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(1)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspHoldTimer.setStatus('current')
vRtrMplsLspCspfTeMetricEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 1, 1, 40), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspCspfTeMetricEnabled.setStatus('current')
vRtrMplsLspStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 2), )
if mibBuilder.loadTexts: vRtrMplsLspStatTable.setStatus('current')
vRtrMplsLspStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 2, 1), )
vRtrMplsLspEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspStatEntry"))
vRtrMplsLspStatEntry.setIndexNames(*vRtrMplsLspEntry.getIndexNames())
if mibBuilder.loadTexts: vRtrMplsLspStatEntry.setStatus('current')
vRtrMplsLspOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspOctets.setStatus('current')
vRtrMplsLspPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPackets.setStatus('current')
vRtrMplsLspAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 2, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspAge.setStatus('current')
vRtrMplsLspTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 2, 1, 4), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspTimeUp.setStatus('current')
vRtrMplsLspTimeDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 2, 1, 5), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspTimeDown.setStatus('current')
vRtrMplsLspPrimaryTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 2, 1, 6), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPrimaryTimeUp.setStatus('current')
vRtrMplsLspTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspTransitions.setStatus('current')
vRtrMplsLspLastTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 2, 1, 8), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspLastTransition.setStatus('current')
vRtrMplsLspPathChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathChanges.setStatus('current')
vRtrMplsLspLastPathChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 2, 1, 10), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspLastPathChange.setStatus('current')
vRtrMplsLspConfiguredPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspConfiguredPaths.setStatus('current')
vRtrMplsLspStandbyPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspStandbyPaths.setStatus('current')
vRtrMplsLspOperationalPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspOperationalPaths.setStatus('current')
vRtrMplsLspPathTableSpinlock = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 3), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrMplsLspPathTableSpinlock.setStatus('current')
vRtrMplsLspPathTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4), )
if mibBuilder.loadTexts: vRtrMplsLspPathTable.setStatus('current')
vRtrMplsLspPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspIndex"), (0, "MPLS-TE-MIB", "mplsTunnelIndex"), (0, "MPLS-TE-MIB", "mplsTunnelInstance"), (0, "MPLS-TE-MIB", "mplsTunnelIngressLSRId"))
if mibBuilder.loadTexts: vRtrMplsLspPathEntry.setStatus('current')
vRtrMplsLspPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathRowStatus.setStatus('current')
vRtrMplsLspPathLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathLastChange.setStatus('current')
vRtrMplsLspPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("primary", 2), ("standby", 3), ("secondary", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathType.setStatus('current')
vRtrMplsLspPathCos = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathCos.setStatus('current')
vRtrMplsLspPathProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 5), Bits().clone(namedValues=NamedValues(("record-route", 0), ("adaptive", 1), ("cspf", 2), ("mergeable", 3), ("fast-reroute", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathProperties.setStatus('current')
vRtrMplsLspPathBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 6), Integer32()).setUnits('mega-bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathBandwidth.setStatus('current')
vRtrMplsLspPathBwProtect = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathBwProtect.setStatus('current')
vRtrMplsLspPathState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("active", 2), ("inactive", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathState.setStatus('current')
vRtrMplsLspPathPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathPreference.setStatus('current')
vRtrMplsLspPathCosSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathCosSource.setStatus('current')
vRtrMplsLspPathClassOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 11), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathClassOfService.setStatus('current')
vRtrMplsLspPathSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathSetupPriority.setStatus('current')
vRtrMplsLspPathHoldPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathHoldPriority.setStatus('current')
vRtrMplsLspPathRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("record", 1), ("noRecord", 2))).clone('record')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathRecord.setStatus('current')
vRtrMplsLspPathHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathHopLimit.setStatus('current')
vRtrMplsLspPathSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathSharing.setStatus('current')
vRtrMplsLspPathAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 17), TmnxAdminState().clone('inService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathAdminState.setStatus('current')
vRtrMplsLspPathOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 18), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathOperState.setStatus('current')
vRtrMplsLspPathInheritance = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathInheritance.setStatus('current')
vRtrMplsLspPathLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 20), MplsLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathLspId.setStatus('current')
vRtrMplsLspPathRetryTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathRetryTimeRemaining.setStatus('current')
vRtrMplsLspPathTunnelARHopListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathTunnelARHopListIndex.setStatus('current')
vRtrMplsLspPathNegotiatedMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathNegotiatedMTU.setStatus('current')
vRtrMplsLspPathFailCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 24), TmnxMplsLspFailCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathFailCode.setStatus('current')
vRtrMplsLspPathFailNodeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathFailNodeAddr.setStatus('current')
vRtrMplsLspPathAdminGroupInclude = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 26), Unsigned32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathAdminGroupInclude.setStatus('current')
vRtrMplsLspPathAdminGroupExclude = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 27), Unsigned32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathAdminGroupExclude.setStatus('current')
vRtrMplsLspPathAdaptive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 28), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathAdaptive.setStatus('current')
vRtrMplsLspPathOptimizeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathOptimizeTimer.setStatus('current')
vRtrMplsLspPathNextOptimize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathNextOptimize.setStatus('current')
vRtrMplsLspPathOperBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 31), Integer32()).setUnits('mega-bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathOperBandwidth.setStatus('current')
vRtrMplsLspPathMBBState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("fail", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathMBBState.setStatus('current')
vRtrMplsLspPathResignal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 33), TmnxActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathResignal.setStatus('current')
vRtrMplsLspPathTunnelCRHopListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathTunnelCRHopListIndex.setStatus('current')
vRtrMplsLspPathOperMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathOperMTU.setStatus('current')
vRtrMplsLspPathRecordLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 4, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("record", 1), ("noRecord", 2))).clone('record')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsLspPathRecordLabel.setStatus('current')
vRtrMplsLspPathStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 5), )
if mibBuilder.loadTexts: vRtrMplsLspPathStatTable.setStatus('current')
vRtrMplsLspPathStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 5, 1), )
vRtrMplsLspPathEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathStatEntry"))
vRtrMplsLspPathStatEntry.setIndexNames(*vRtrMplsLspPathEntry.getIndexNames())
if mibBuilder.loadTexts: vRtrMplsLspPathStatEntry.setStatus('current')
vRtrMplsLspPathTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 5, 1, 1), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathTimeUp.setStatus('current')
vRtrMplsLspPathTimeDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 5, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathTimeDown.setStatus('current')
vRtrMplsLspPathRetryAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathRetryAttempts.setStatus('current')
vRtrMplsLspPathTransitionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathTransitionCount.setStatus('current')
vRtrMplsLspPathCspfQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLspPathCspfQueries.setStatus('current')
vRtrMplsXCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 6), )
if mibBuilder.loadTexts: vRtrMplsXCTable.setStatus('current')
vRtrMplsXCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 6, 1), ).setIndexNames((0, "MPLS-LSR-MIB", "mplsXCLspId"))
if mibBuilder.loadTexts: vRtrMplsXCEntry.setStatus('current')
vRtrMplsXCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsXCIndex.setStatus('current')
vRtrMplsInSegmentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 6, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsInSegmentIfIndex.setStatus('current')
vRtrMplsInSegmentLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 6, 1, 3), MplsLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsInSegmentLabel.setStatus('current')
vRtrMplsOutSegmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsOutSegmentIndex.setStatus('current')
vRtrMplsERHopTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsERHopTunnelIndex.setStatus('current')
vRtrMplsARHopTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsARHopTunnelIndex.setStatus('current')
vRtrMplsRsvpSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsRsvpSessionIndex.setStatus('current')
vRtrMplsXCFailCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 6, 1, 8), TmnxMplsLspFailCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsXCFailCode.setStatus('current')
vRtrMplsXCCHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsXCCHopTableIndex.setStatus('current')
vRtrMplsGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 7), )
if mibBuilder.loadTexts: vRtrMplsGeneralTable.setStatus('current')
vRtrMplsGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"))
if mibBuilder.loadTexts: vRtrMplsGeneralEntry.setStatus('current')
vRtrMplsGeneralLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 7, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsGeneralLastChange.setStatus('current')
vRtrMplsGeneralAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 7, 1, 2), TmnxAdminState().clone('inService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsGeneralAdminState.setStatus('current')
vRtrMplsGeneralOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 7, 1, 3), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsGeneralOperState.setStatus('current')
vRtrMplsGeneralPropagateTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 7, 1, 4), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsGeneralPropagateTtl.setStatus('current')
vRtrMplsGeneralTE = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bgp", 2), ("bgpigp", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsGeneralTE.setStatus('current')
vRtrMplsGeneralNewLspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 7, 1, 6), TestAndIncr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsGeneralNewLspIndex.setStatus('current')
vRtrMplsGeneralOptimizeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 7, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsGeneralOptimizeTimer.setStatus('current')
vRtrMplsGeneralFRObject = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 7, 1, 8), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsGeneralFRObject.setStatus('current')
vRtrMplsGeneralResignalTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 7, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(30, 10080), ))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsGeneralResignalTimer.setStatus('current')
vRtrMplsGeneralHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 7, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsGeneralHoldTimer.setStatus('current')
vRtrMplsGeneralDynamicBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 7, 1, 11), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsGeneralDynamicBypass.setStatus('current')
vRtrMplsGeneralNextResignal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 7, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsGeneralNextResignal.setStatus('current')
vRtrMplsGeneralOperDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 7, 1, 13), TmnxMplsOperDownReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsGeneralOperDownReason.setStatus('current')
vRtrMplsGeneralSrlgFrr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 7, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsGeneralSrlgFrr.setStatus('current')
vRtrMplsGeneralSrlgFrrStrict = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 7, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsGeneralSrlgFrrStrict.setStatus('current')
vRtrMplsGeneralStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 8), )
if mibBuilder.loadTexts: vRtrMplsGeneralStatTable.setStatus('current')
vRtrMplsGeneralStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 8, 1), )
vRtrMplsGeneralEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralStatEntry"))
vRtrMplsGeneralStatEntry.setIndexNames(*vRtrMplsGeneralEntry.getIndexNames())
if mibBuilder.loadTexts: vRtrMplsGeneralStatEntry.setStatus('current')
vRtrMplsGeneralStaticLspOriginate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsGeneralStaticLspOriginate.setStatus('current')
vRtrMplsGeneralStaticLspTransit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsGeneralStaticLspTransit.setStatus('current')
vRtrMplsGeneralStaticLspTerminate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsGeneralStaticLspTerminate.setStatus('current')
vRtrMplsGeneralDynamicLspOriginate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsGeneralDynamicLspOriginate.setStatus('current')
vRtrMplsGeneralDynamicLspTransit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsGeneralDynamicLspTransit.setStatus('current')
vRtrMplsGeneralDynamicLspTerminate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsGeneralDynamicLspTerminate.setStatus('current')
vRtrMplsGeneralDetourLspOriginate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsGeneralDetourLspOriginate.setStatus('current')
vRtrMplsGeneralDetourLspTransit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsGeneralDetourLspTransit.setStatus('current')
vRtrMplsGeneralDetourLspTerminate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsGeneralDetourLspTerminate.setStatus('current')
vRtrMplsIfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 9), )
if mibBuilder.loadTexts: vRtrMplsIfTable.setStatus('current')
vRtrMplsIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"))
if mibBuilder.loadTexts: vRtrMplsIfEntry.setStatus('current')
vRtrMplsIfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 9, 1, 1), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsIfAdminState.setStatus('current')
vRtrMplsIfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 9, 1, 2), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsIfOperState.setStatus('current')
vRtrMplsIfAdminGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 9, 1, 3), Unsigned32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsIfAdminGroup.setStatus('current')
vRtrMplsIfTeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 9, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 16777215), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsIfTeMetric.setStatus('current')
vRtrMplsIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 10), )
if mibBuilder.loadTexts: vRtrMplsIfStatTable.setStatus('current')
vRtrMplsIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 10, 1), )
vRtrMplsIfEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsIfStatEntry"))
vRtrMplsIfStatEntry.setIndexNames(*vRtrMplsIfEntry.getIndexNames())
if mibBuilder.loadTexts: vRtrMplsIfStatEntry.setStatus('current')
vRtrMplsIfTxPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 10, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsIfTxPktCount.setStatus('current')
vRtrMplsIfRxPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 10, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsIfRxPktCount.setStatus('current')
vRtrMplsIfTxOctetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsIfTxOctetCount.setStatus('current')
vRtrMplsIfRxOctetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsIfRxOctetCount.setStatus('current')
vRtrMplsTunnelARHopTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 11), )
if mibBuilder.loadTexts: vRtrMplsTunnelARHopTable.setStatus('current')
vRtrMplsTunnelARHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 11, 1), )
mplsTunnelARHopEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsTunnelARHopEntry"))
vRtrMplsTunnelARHopEntry.setIndexNames(*mplsTunnelARHopEntry.getIndexNames())
if mibBuilder.loadTexts: vRtrMplsTunnelARHopEntry.setStatus('current')
vRtrMplsTunnelARHopProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 11, 1, 1), Bits().clone(namedValues=NamedValues(("localAvailable", 0), ("localInUse", 1), ("bandwidthProtected", 2), ("nodeProtected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsTunnelARHopProtection.setStatus('current')
vRtrMplsTunnelARHopRecordLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 11, 1, 2), MplsLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsTunnelARHopRecordLabel.setStatus('current')
vRtrMplsTunnelARHopRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsTunnelARHopRouterId.setStatus('current')
vRtrMplsTunnelCHopTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 12), )
if mibBuilder.loadTexts: vRtrMplsTunnelCHopTable.setStatus('current')
vRtrMplsTunnelCHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsTunnelCHopListIndex"), (0, "ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsTunnelCHopIndex"))
if mibBuilder.loadTexts: vRtrMplsTunnelCHopEntry.setStatus('current')
vRtrMplsTunnelCHopListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vRtrMplsTunnelCHopListIndex.setStatus('current')
vRtrMplsTunnelCHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vRtrMplsTunnelCHopIndex.setStatus('current')
vRtrMplsTunnelCHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipV4", 1), ("ipV6", 2), ("asNumber", 3), ("lspid", 4))).clone('ipV4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsTunnelCHopAddrType.setStatus('current')
vRtrMplsTunnelCHopIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 12, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsTunnelCHopIpv4Addr.setStatus('current')
vRtrMplsTunnelCHopIpv4PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsTunnelCHopIpv4PrefixLen.setStatus('current')
vRtrMplsTunnelCHopIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 12, 1, 6), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsTunnelCHopIpv6Addr.setStatus('current')
vRtrMplsTunnelCHopIpv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 12, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsTunnelCHopIpv6PrefixLen.setStatus('current')
vRtrMplsTunnelCHopAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsTunnelCHopAsNumber.setStatus('current')
vRtrMplsTunnelCHopLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 12, 1, 9), MplsLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsTunnelCHopLspId.setStatus('current')
vRtrMplsTunnelCHopStrictOrLoose = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("loose", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsTunnelCHopStrictOrLoose.setStatus('current')
vRtrMplsAdminGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 13), )
if mibBuilder.loadTexts: vRtrMplsAdminGroupTable.setStatus('current')
vRtrMplsAdminGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (1, "ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsAdminGroupName"))
if mibBuilder.loadTexts: vRtrMplsAdminGroupEntry.setStatus('current')
vRtrMplsAdminGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 13, 1, 1), TNamedItem())
if mibBuilder.loadTexts: vRtrMplsAdminGroupName.setStatus('current')
vRtrMplsAdminGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 13, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsAdminGroupRowStatus.setStatus('current')
vRtrMplsAdminGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 31), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsAdminGroupValue.setStatus('current')
vRtrMplsFSGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 14), )
if mibBuilder.loadTexts: vRtrMplsFSGroupTable.setStatus('current')
vRtrMplsFSGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 14, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsFSGroupName"))
if mibBuilder.loadTexts: vRtrMplsFSGroupEntry.setStatus('current')
vRtrMplsFSGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 14, 1, 1), TNamedItem())
if mibBuilder.loadTexts: vRtrMplsFSGroupName.setStatus('current')
vRtrMplsFSGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsFSGroupRowStatus.setStatus('current')
vRtrMplsFSGroupCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 14, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsFSGroupCost.setStatus('current')
vRtrMplsFSGroupParamsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 15), )
if mibBuilder.loadTexts: vRtrMplsFSGroupParamsTable.setStatus('current')
vRtrMplsFSGroupParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 15, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsFSGroupName"), (0, "ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsFSGroupParamsFromAddr"), (0, "ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsFSGroupParamsToAddr"))
if mibBuilder.loadTexts: vRtrMplsFSGroupParamsEntry.setStatus('current')
vRtrMplsFSGroupParamsFromAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 15, 1, 1), IpAddress())
if mibBuilder.loadTexts: vRtrMplsFSGroupParamsFromAddr.setStatus('current')
vRtrMplsFSGroupParamsToAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 15, 1, 2), IpAddress())
if mibBuilder.loadTexts: vRtrMplsFSGroupParamsToAddr.setStatus('current')
vRtrMplsFSGroupParamsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 15, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsFSGroupParamsRowStatus.setStatus('current')
vRtrMplsLabelRangeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 17), )
if mibBuilder.loadTexts: vRtrMplsLabelRangeTable.setStatus('current')
vRtrMplsLabelRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 17, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLabelType"))
if mibBuilder.loadTexts: vRtrMplsLabelRangeEntry.setStatus('current')
vRtrMplsLabelType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("staticLsp", 1), ("staticSvc", 2), ("dynamic", 3))))
if mibBuilder.loadTexts: vRtrMplsLabelType.setStatus('current')
vRtrMplsLabelRangeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 17, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLabelRangeMin.setStatus('current')
vRtrMplsLabelRangeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 17, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLabelRangeMax.setStatus('current')
vRtrMplsLabelRangeAging = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 17, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLabelRangeAging.setStatus('current')
vRtrMplsLabelRangeAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 17, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsLabelRangeAvailable.setStatus('current')
vRtrMplsStaticLSPLabelTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 18), )
if mibBuilder.loadTexts: vRtrMplsStaticLSPLabelTable.setStatus('current')
vRtrMplsStaticLSPLabelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 18, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsStaticLSPLabel"))
if mibBuilder.loadTexts: vRtrMplsStaticLSPLabelEntry.setStatus('current')
vRtrMplsStaticLSPLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 18, 1, 1), MplsLabel().subtype(subtypeSpec=ValueRangeConstraint(32, 1023)))
if mibBuilder.loadTexts: vRtrMplsStaticLSPLabel.setStatus('current')
vRtrMplsStaticLSPLabelOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 18, 1, 2), TmnxMplsLabelOwner()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsStaticLSPLabelOwner.setStatus('current')
vRtrMplsStaticSvcLabelTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 19), )
if mibBuilder.loadTexts: vRtrMplsStaticSvcLabelTable.setStatus('current')
vRtrMplsStaticSvcLabelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 19, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsStaticSvcLabel"))
if mibBuilder.loadTexts: vRtrMplsStaticSvcLabelEntry.setStatus('current')
vRtrMplsStaticSvcLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 19, 1, 1), MplsLabel().subtype(subtypeSpec=ValueRangeConstraint(2048, 18431)))
if mibBuilder.loadTexts: vRtrMplsStaticSvcLabel.setStatus('current')
vRtrMplsStaticSvcLabelOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 19, 1, 2), TmnxMplsLabelOwner().clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsStaticSvcLabelOwner.setStatus('current')
vRtrMplsSrlgGrpTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsSrlgGrpTableLastChanged.setStatus('current')
vRtrMplsSrlgGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 21), )
if mibBuilder.loadTexts: vRtrMplsSrlgGrpTable.setStatus('current')
vRtrMplsSrlgGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 21, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (1, "ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsSrlgGrpName"))
if mibBuilder.loadTexts: vRtrMplsSrlgGrpEntry.setStatus('current')
vRtrMplsSrlgGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 21, 1, 1), TNamedItem())
if mibBuilder.loadTexts: vRtrMplsSrlgGrpName.setStatus('current')
vRtrMplsSrlgGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsSrlgGrpRowStatus.setStatus('current')
vRtrMplsSrlgGrpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 21, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsSrlgGrpLastChanged.setStatus('current')
vRtrMplsSrlgGrpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 21, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsSrlgGrpValue.setStatus('current')
vRtrMplsIfSrlgGrpTblLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 22), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsIfSrlgGrpTblLastChanged.setStatus('current')
vRtrMplsIfSrlgGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 23), )
if mibBuilder.loadTexts: vRtrMplsIfSrlgGrpTable.setStatus('current')
vRtrMplsIfSrlgGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 23, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), (1, "ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsIfSrlgGrpName"))
if mibBuilder.loadTexts: vRtrMplsIfSrlgGrpEntry.setStatus('current')
vRtrMplsIfSrlgGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 23, 1, 1), TNamedItem())
if mibBuilder.loadTexts: vRtrMplsIfSrlgGrpName.setStatus('current')
vRtrMplsIfSrlgGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 23, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsIfSrlgGrpRowStatus.setStatus('current')
vRtrMplsIfSrlgGrpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 23, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMplsIfSrlgGrpLastChanged.setStatus('current')
tmnxMplsNotificationlObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 16))
vRtrMplsLspNotificationReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noError", 0), ("noPathIsOperational", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrMplsLspNotificationReasonCode.setStatus('current')
vRtrMplsLspPathNotificationReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 16, 2), TmnxMplsLspFailCode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrMplsLspPathNotificationReasonCode.setStatus('current')
vRtrMplsNotifyRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 6, 16, 3), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrMplsNotifyRow.setStatus('current')
vRtrMplsStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 6, 0, 1)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralAdminState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralOperState"))
if mibBuilder.loadTexts: vRtrMplsStateChange.setStatus('current')
vRtrMplsIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 6, 0, 2)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsIfAdminState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsIfOperState"))
if mibBuilder.loadTexts: vRtrMplsIfStateChange.setStatus('current')
vRtrMplsLspUp = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 6, 0, 3)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspIndex"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspAdminState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspOperState"))
if mibBuilder.loadTexts: vRtrMplsLspUp.setStatus('current')
vRtrMplsLspDown = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 6, 0, 4)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspIndex"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspAdminState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspOperState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspNotificationReasonCode"))
if mibBuilder.loadTexts: vRtrMplsLspDown.setStatus('current')
vRtrMplsLspPathUp = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 6, 0, 5)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspIndex"), ("MPLS-TE-MIB", "mplsTunnelIndex"), ("MPLS-TE-MIB", "mplsTunnelInstance"), ("MPLS-TE-MIB", "mplsTunnelIngressLSRId"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathAdminState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathOperState"))
if mibBuilder.loadTexts: vRtrMplsLspPathUp.setStatus('current')
vRtrMplsLspPathDown = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 6, 0, 6)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspIndex"), ("MPLS-TE-MIB", "mplsTunnelIndex"), ("MPLS-TE-MIB", "mplsTunnelInstance"), ("MPLS-TE-MIB", "mplsTunnelIngressLSRId"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathAdminState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathOperState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathNotificationReasonCode"))
if mibBuilder.loadTexts: vRtrMplsLspPathDown.setStatus('current')
vRtrMplsLspPathRerouted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 6, 0, 7)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathAdminState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathOperState"))
if mibBuilder.loadTexts: vRtrMplsLspPathRerouted.setStatus('current')
vRtrMplsLspPathResignaled = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 6, 0, 8)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathAdminState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathOperState"))
if mibBuilder.loadTexts: vRtrMplsLspPathResignaled.setStatus('current')
tmnxMplsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 1))
tmnxMplsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 2))
tmnxMplsV3v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 1, 3)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsGlobalR2r1Group"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsLspR2r1Group"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsLspPathGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsXCGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsIfGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsTunnelARHopGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsTunnelCHopGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsAdminGroupGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsNotificationR2r1Group"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsLabelRangeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsV3v0Compliance = tmnxMplsV3v0Compliance.setStatus('obsolete')
tmnxMplsV5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 1, 4)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsGlobalV5v0Group"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsLspV5v0Group"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsLspPathGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsXCGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsIfGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsTunnelARHopGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsTunnelCHopGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsAdminGroupGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsNotificationR2r1Group"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsLabelRangeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsV5v0Compliance = tmnxMplsV5v0Compliance.setStatus('obsolete')
tmnxMplsV6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 1, 5)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsGlobalV6v0Group"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsLspV5v0Group"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsLspPathGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsXCGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsIfGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsTunnelARHopGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsTunnelCHopGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsAdminGroupGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsNotificationR2r1Group"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsLabelRangeGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsSrlgV6v0Group"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsIfV6v0Group"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "tmnxMplsLspV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsV6v0Compliance = tmnxMplsV6v0Compliance.setStatus('current')
tmnxMplsLspPathGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 2, 3)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathTableSpinlock"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathRowStatus"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathLastChange"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathType"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathCos"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathProperties"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathBandwidth"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathBwProtect"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathPreference"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathCosSource"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathClassOfService"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathSetupPriority"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathHoldPriority"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathRecord"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathHopLimit"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathSharing"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathAdminState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathOperState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathInheritance"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathLspId"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathRetryTimeRemaining"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathTunnelARHopListIndex"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathNegotiatedMTU"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathFailCode"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathFailNodeAddr"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathAdminGroupInclude"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathAdminGroupExclude"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathAdaptive"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathOptimizeTimer"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathNextOptimize"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathOperBandwidth"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathMBBState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathResignal"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathTunnelCRHopListIndex"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathOperMTU"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathRecordLabel"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathTimeUp"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathTimeDown"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathRetryAttempts"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathTransitionCount"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathCspfQueries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsLspPathGroup = tmnxMplsLspPathGroup.setStatus('current')
tmnxMplsXCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 2, 4)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsXCIndex"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsInSegmentIfIndex"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsInSegmentLabel"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsOutSegmentIndex"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsERHopTunnelIndex"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsARHopTunnelIndex"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsRsvpSessionIndex"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsXCFailCode"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsXCCHopTableIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsXCGroup = tmnxMplsXCGroup.setStatus('current')
tmnxMplsIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 2, 5)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsIfAdminState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsIfOperState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsIfAdminGroup"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsIfTxPktCount"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsIfRxPktCount"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsIfTxOctetCount"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsIfRxOctetCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsIfGroup = tmnxMplsIfGroup.setStatus('current')
tmnxMplsTunnelARHopGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 2, 6)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsTunnelARHopProtection"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsTunnelARHopRecordLabel"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsTunnelARHopRouterId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsTunnelARHopGroup = tmnxMplsTunnelARHopGroup.setStatus('current')
tmnxMplsTunnelCHopGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 2, 7)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsTunnelCHopAddrType"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsTunnelCHopIpv4Addr"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsTunnelCHopIpv4PrefixLen"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsTunnelCHopIpv6Addr"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsTunnelCHopIpv6PrefixLen"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsTunnelCHopAsNumber"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsTunnelCHopLspId"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsTunnelCHopStrictOrLoose"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsTunnelCHopGroup = tmnxMplsTunnelCHopGroup.setStatus('current')
tmnxMplsAdminGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 2, 8)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsAdminGroupRowStatus"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsAdminGroupValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsAdminGroupGroup = tmnxMplsAdminGroupGroup.setStatus('current')
tmnxMplsFSGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 2, 9)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsFSGroupRowStatus"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsFSGroupCost"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsFSGroupParamsRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsFSGroupGroup = tmnxMplsFSGroupGroup.setStatus('current')
tmnxMplsNotifyObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 2, 10)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspNotificationReasonCode"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathNotificationReasonCode"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsNotifyRow"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsNotifyObjsGroup = tmnxMplsNotifyObjsGroup.setStatus('current')
tmnxMplsGlobalR2r1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 2, 12)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralLastChange"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralAdminState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralOperState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralPropagateTtl"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralTE"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralNewLspIndex"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralOptimizeTimer"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralFRObject"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralResignalTimer"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralStaticLspOriginate"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralStaticLspTransit"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralStaticLspTerminate"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDynamicLspOriginate"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDynamicLspTransit"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDynamicLspTerminate"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDetourLspOriginate"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDetourLspTransit"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDetourLspTerminate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsGlobalR2r1Group = tmnxMplsGlobalR2r1Group.setStatus('obsolete')
tmnxMplsLspR2r1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 2, 13)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspRowStatus"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspLastChange"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspName"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspAdminState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspOperState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspFromAddr"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspToAddr"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspType"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspOutSegIndx"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspRetryTimer"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspRetryLimit"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspMetric"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspDecrementTtl"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspCspf"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspFastReroute"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspFRHopLimit"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspFRBandwidth"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspClassOfService"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspSetupPriority"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspHoldPriority"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspRecord"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPreference"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspBandwidth"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspBwProtect"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspHopLimit"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspNegotiatedMTU"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspRsvpResvStyle"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspRsvpAdspec"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspFRMethod"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspFRNodeProtect"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspAdminGroupInclude"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspAdminGroupExclude"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspAdaptive"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspInheritance"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspOptimizeTimer"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspOperFastReroute"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspFRObject"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspOctets"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPackets"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspAge"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspTimeUp"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspTimeDown"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPrimaryTimeUp"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspTransitions"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspLastTransition"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathChanges"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspLastPathChange"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspConfiguredPaths"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspStandbyPaths"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspOperationalPaths"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsLspR2r1Group = tmnxMplsLspR2r1Group.setStatus('obsolete')
tmnxMplsNotificationR2r1Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 2, 14)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsStateChange"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsIfStateChange"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspUp"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspDown"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathUp"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathDown"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathRerouted"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathResignaled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsNotificationR2r1Group = tmnxMplsNotificationR2r1Group.setStatus('current')
tmnxMplsLabelRangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 2, 15)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLabelRangeMin"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLabelRangeMax"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLabelRangeAging"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLabelRangeAvailable"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsStaticLSPLabelOwner"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsStaticSvcLabelOwner"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsLabelRangeGroup = tmnxMplsLabelRangeGroup.setStatus('current')
tmnxMplsGlobalV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 2, 16)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralLastChange"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralAdminState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralOperState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralPropagateTtl"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralTE"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralNewLspIndex"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralOptimizeTimer"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralFRObject"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralResignalTimer"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralStaticLspOriginate"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralStaticLspTransit"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralStaticLspTerminate"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDynamicLspOriginate"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDynamicLspTransit"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDynamicLspTerminate"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDetourLspOriginate"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDetourLspTransit"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDetourLspTerminate"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralHoldTimer"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDynamicBypass"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsGlobalV5v0Group = tmnxMplsGlobalV5v0Group.setStatus('obsolete')
tmnxMplsLspV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 2, 17)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspRowStatus"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspLastChange"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspName"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspAdminState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspOperState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspFromAddr"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspToAddr"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspType"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspOutSegIndx"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspRetryTimer"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspRetryLimit"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspMetric"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspDecrementTtl"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspCspf"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspFastReroute"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspFRHopLimit"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspFRBandwidth"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspClassOfService"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspSetupPriority"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspHoldPriority"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspRecord"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPreference"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspBandwidth"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspBwProtect"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspHopLimit"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspNegotiatedMTU"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspRsvpResvStyle"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspRsvpAdspec"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspFRMethod"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspFRNodeProtect"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspAdminGroupInclude"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspAdminGroupExclude"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspAdaptive"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspInheritance"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspOptimizeTimer"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspOperFastReroute"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspFRObject"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspOctets"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPackets"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspAge"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspTimeUp"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspTimeDown"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPrimaryTimeUp"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspTransitions"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspLastTransition"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspPathChanges"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspLastPathChange"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspConfiguredPaths"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspStandbyPaths"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspOperationalPaths"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspHoldTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsLspV5v0Group = tmnxMplsLspV5v0Group.setStatus('current')
tmnxMplsGlobalV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 2, 18)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralLastChange"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralAdminState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralOperState"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralPropagateTtl"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralTE"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralNewLspIndex"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralOptimizeTimer"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralFRObject"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralResignalTimer"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralStaticLspOriginate"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralStaticLspTransit"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralStaticLspTerminate"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDynamicLspOriginate"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDynamicLspTransit"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDynamicLspTerminate"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDetourLspOriginate"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDetourLspTransit"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDetourLspTerminate"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralHoldTimer"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralDynamicBypass"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralNextResignal"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralOperDownReason"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralSrlgFrr"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsGeneralSrlgFrrStrict"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsGlobalV6v0Group = tmnxMplsGlobalV6v0Group.setStatus('current')
tmnxMplsSrlgV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 2, 19)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsSrlgGrpTableLastChanged"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsSrlgGrpRowStatus"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsSrlgGrpLastChanged"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsSrlgGrpValue"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsIfSrlgGrpTblLastChanged"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsIfSrlgGrpRowStatus"), ("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsIfSrlgGrpLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsSrlgV6v0Group = tmnxMplsSrlgV6v0Group.setStatus('current')
tmnxMplsIfV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 2, 21)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsIfTeMetric"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsIfV6v0Group = tmnxMplsIfV6v0Group.setStatus('current')
tmnxMplsLspV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 6, 2, 22)).setObjects(("ALCATEL-IND1-TIMETRA-MPLS-MIB", "vRtrMplsLspCspfTeMetricEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMplsLspV6v0Group = tmnxMplsLspV6v0Group.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-MPLS-MIB", vRtrMplsLspFastReroute=vRtrMplsLspFastReroute, vRtrMplsLspFRBandwidth=vRtrMplsLspFRBandwidth, vRtrMplsIfSrlgGrpRowStatus=vRtrMplsIfSrlgGrpRowStatus, vRtrMplsGeneralDetourLspOriginate=vRtrMplsGeneralDetourLspOriginate, vRtrMplsLspAdaptive=vRtrMplsLspAdaptive, vRtrMplsGeneralPropagateTtl=vRtrMplsGeneralPropagateTtl, vRtrMplsTunnelCHopAsNumber=vRtrMplsTunnelCHopAsNumber, vRtrMplsLabelRangeMax=vRtrMplsLabelRangeMax, vRtrMplsLspPathMBBState=vRtrMplsLspPathMBBState, vRtrMplsGeneralStaticLspTerminate=vRtrMplsGeneralStaticLspTerminate, vRtrMplsLspTable=vRtrMplsLspTable, vRtrMplsSrlgGrpTableLastChanged=vRtrMplsSrlgGrpTableLastChanged, vRtrMplsLspInheritance=vRtrMplsLspInheritance, vRtrMplsLspPathBwProtect=vRtrMplsLspPathBwProtect, vRtrMplsLspPathFailNodeAddr=vRtrMplsLspPathFailNodeAddr, vRtrMplsGeneralOptimizeTimer=vRtrMplsGeneralOptimizeTimer, vRtrMplsLspAdminState=vRtrMplsLspAdminState, vRtrMplsLspFRNodeProtect=vRtrMplsLspFRNodeProtect, vRtrMplsLspPathNextOptimize=vRtrMplsLspPathNextOptimize, vRtrMplsGeneralDynamicLspOriginate=vRtrMplsGeneralDynamicLspOriginate, vRtrMplsStaticLSPLabel=vRtrMplsStaticLSPLabel, vRtrMplsLspRsvpResvStyle=vRtrMplsLspRsvpResvStyle, vRtrMplsFSGroupName=vRtrMplsFSGroupName, tmnxMplsLspV6v0Group=tmnxMplsLspV6v0Group, vRtrMplsLspRecord=vRtrMplsLspRecord, vRtrMplsFSGroupCost=vRtrMplsFSGroupCost, vRtrMplsLspOutSegIndx=vRtrMplsLspOutSegIndx, TmnxMplsLabelOwner=TmnxMplsLabelOwner, vRtrMplsLspIndex=vRtrMplsLspIndex, vRtrMplsFSGroupParamsFromAddr=vRtrMplsFSGroupParamsFromAddr, tmnxMplsTunnelARHopGroup=tmnxMplsTunnelARHopGroup, vRtrMplsLspHopLimit=vRtrMplsLspHopLimit, tmnxMplsAdminGroupGroup=tmnxMplsAdminGroupGroup, vRtrMplsXCEntry=vRtrMplsXCEntry, vRtrMplsXCCHopTableIndex=vRtrMplsXCCHopTableIndex, vRtrMplsGeneralNewLspIndex=vRtrMplsGeneralNewLspIndex, tmnxMplsGlobalV5v0Group=tmnxMplsGlobalV5v0Group, vRtrMplsLspStandbyPaths=vRtrMplsLspStandbyPaths, vRtrMplsGeneralSrlgFrr=vRtrMplsGeneralSrlgFrr, vRtrMplsStaticLSPLabelTable=vRtrMplsStaticLSPLabelTable, vRtrMplsLspPathDown=vRtrMplsLspPathDown, vRtrMplsLspToAddr=vRtrMplsLspToAddr, tmnxMplsLspV5v0Group=tmnxMplsLspV5v0Group, vRtrMplsIfRxPktCount=vRtrMplsIfRxPktCount, vRtrMplsLspPathRetryAttempts=vRtrMplsLspPathRetryAttempts, vRtrMplsGeneralEntry=vRtrMplsGeneralEntry, vRtrMplsGeneralDetourLspTerminate=vRtrMplsGeneralDetourLspTerminate, tmnxMplsV5v0Compliance=tmnxMplsV5v0Compliance, tmnxMplsLspR2r1Group=tmnxMplsLspR2r1Group, vRtrMplsGeneralOperDownReason=vRtrMplsGeneralOperDownReason, vRtrMplsIfTxOctetCount=vRtrMplsIfTxOctetCount, vRtrMplsGeneralTable=vRtrMplsGeneralTable, vRtrMplsTunnelARHopProtection=vRtrMplsTunnelARHopProtection, vRtrMplsFSGroupParamsTable=vRtrMplsFSGroupParamsTable, vRtrMplsLspPathSharing=vRtrMplsLspPathSharing, vRtrMplsStaticSvcLabelTable=vRtrMplsStaticSvcLabelTable, vRtrMplsStaticSvcLabel=vRtrMplsStaticSvcLabel, vRtrMplsLspPathTableSpinlock=vRtrMplsLspPathTableSpinlock, vRtrMplsNotifyRow=vRtrMplsNotifyRow, vRtrMplsLspAdminGroupInclude=vRtrMplsLspAdminGroupInclude, vRtrMplsRsvpSessionIndex=vRtrMplsRsvpSessionIndex, tmnxMplsGlobalV6v0Group=tmnxMplsGlobalV6v0Group, vRtrMplsLspPrimaryTimeUp=vRtrMplsLspPrimaryTimeUp, vRtrMplsAdminGroupEntry=vRtrMplsAdminGroupEntry, vRtrMplsFSGroupParamsRowStatus=vRtrMplsFSGroupParamsRowStatus, vRtrMplsIfStatTable=vRtrMplsIfStatTable, vRtrMplsLspEntry=vRtrMplsLspEntry, vRtrMplsTunnelARHopRouterId=vRtrMplsTunnelARHopRouterId, vRtrMplsLspHoldPriority=vRtrMplsLspHoldPriority, vRtrMplsIfSrlgGrpTable=vRtrMplsIfSrlgGrpTable, vRtrMplsLspLastTransition=vRtrMplsLspLastTransition, vRtrMplsXCIndex=vRtrMplsXCIndex, vRtrMplsGeneralAdminState=vRtrMplsGeneralAdminState, vRtrMplsTunnelCHopAddrType=vRtrMplsTunnelCHopAddrType, vRtrMplsLspPathState=vRtrMplsLspPathState, vRtrMplsLspPathOperBandwidth=vRtrMplsLspPathOperBandwidth, tmnxMplsLspPathGroup=tmnxMplsLspPathGroup, vRtrMplsTunnelARHopEntry=vRtrMplsTunnelARHopEntry, vRtrMplsTunnelCHopLspId=vRtrMplsTunnelCHopLspId, vRtrMplsLspOptimizeTimer=vRtrMplsLspOptimizeTimer, vRtrMplsLabelRangeAvailable=vRtrMplsLabelRangeAvailable, vRtrMplsIfOperState=vRtrMplsIfOperState, vRtrMplsFSGroupParamsToAddr=vRtrMplsFSGroupParamsToAddr, vRtrMplsLspFromAddr=vRtrMplsLspFromAddr, vRtrMplsLspPathAdminGroupInclude=vRtrMplsLspPathAdminGroupInclude, vRtrMplsLspPathFailCode=vRtrMplsLspPathFailCode, vRtrMplsSrlgGrpValue=vRtrMplsSrlgGrpValue, vRtrMplsIfStateChange=vRtrMplsIfStateChange, tmnxMplsTunnelCHopGroup=tmnxMplsTunnelCHopGroup, vRtrMplsLspMetric=vRtrMplsLspMetric, vRtrMplsLspPathInheritance=vRtrMplsLspPathInheritance, vRtrMplsInSegmentLabel=vRtrMplsInSegmentLabel, TmnxMplsOperDownReasonCode=TmnxMplsOperDownReasonCode, vRtrMplsLspOperationalPaths=vRtrMplsLspOperationalPaths, vRtrMplsGeneralSrlgFrrStrict=vRtrMplsGeneralSrlgFrrStrict, vRtrMplsIfAdminState=vRtrMplsIfAdminState, vRtrMplsIfTxPktCount=vRtrMplsIfTxPktCount, tmnxMplsCompliances=tmnxMplsCompliances, vRtrMplsXCFailCode=vRtrMplsXCFailCode, tmnxMplsNotificationR2r1Group=tmnxMplsNotificationR2r1Group, vRtrMplsStaticSvcLabelEntry=vRtrMplsStaticSvcLabelEntry, vRtrMplsGeneralStatEntry=vRtrMplsGeneralStatEntry, vRtrMplsFSGroupParamsEntry=vRtrMplsFSGroupParamsEntry, tmnxMplsLabelRangeGroup=tmnxMplsLabelRangeGroup, vRtrMplsAdminGroupRowStatus=vRtrMplsAdminGroupRowStatus, vRtrMplsLspNotificationReasonCode=vRtrMplsLspNotificationReasonCode, vRtrMplsARHopTunnelIndex=vRtrMplsARHopTunnelIndex, vRtrMplsGeneralDetourLspTransit=vRtrMplsGeneralDetourLspTransit, vRtrMplsTunnelCHopListIndex=vRtrMplsTunnelCHopListIndex, vRtrMplsLspPreference=vRtrMplsLspPreference, vRtrMplsLspConfiguredPaths=vRtrMplsLspConfiguredPaths, vRtrMplsTunnelCHopTable=vRtrMplsTunnelCHopTable, vRtrMplsLspPathPreference=vRtrMplsLspPathPreference, vRtrMplsStaticSvcLabelOwner=vRtrMplsStaticSvcLabelOwner, vRtrMplsIfSrlgGrpName=vRtrMplsIfSrlgGrpName, tmnxMplsSrlgV6v0Group=tmnxMplsSrlgV6v0Group, vRtrMplsTunnelCHopEntry=vRtrMplsTunnelCHopEntry, tmnxMplsV3v0Compliance=tmnxMplsV3v0Compliance, vRtrMplsInSegmentIfIndex=vRtrMplsInSegmentIfIndex, vRtrMplsAdminGroupValue=vRtrMplsAdminGroupValue, vRtrMplsLspPackets=vRtrMplsLspPackets, vRtrMplsLspRetryLimit=vRtrMplsLspRetryLimit, vRtrMplsLspTimeUp=vRtrMplsLspTimeUp, vRtrMplsGeneralDynamicBypass=vRtrMplsGeneralDynamicBypass, vRtrMplsStaticLSPLabelOwner=vRtrMplsStaticLSPLabelOwner, vRtrMplsStateChange=vRtrMplsStateChange, vRtrMplsLspFRMethod=vRtrMplsLspFRMethod, vRtrMplsIfTeMetric=vRtrMplsIfTeMetric, vRtrMplsIfSrlgGrpLastChanged=vRtrMplsIfSrlgGrpLastChanged, vRtrMplsIfEntry=vRtrMplsIfEntry, vRtrMplsLabelRangeTable=vRtrMplsLabelRangeTable, vRtrMplsLspPathEntry=vRtrMplsLspPathEntry, vRtrMplsLspRsvpAdspec=vRtrMplsLspRsvpAdspec, vRtrMplsGeneralStatTable=vRtrMplsGeneralStatTable, vRtrMplsStaticLSPLabelEntry=vRtrMplsStaticLSPLabelEntry, tmnxMplsNotifyObjsGroup=tmnxMplsNotifyObjsGroup, vRtrMplsLspAge=vRtrMplsLspAge, vRtrMplsIfRxOctetCount=vRtrMplsIfRxOctetCount, vRtrMplsLspPathTunnelARHopListIndex=vRtrMplsLspPathTunnelARHopListIndex, vRtrMplsLspPathSetupPriority=vRtrMplsLspPathSetupPriority, vRtrMplsTunnelARHopTable=vRtrMplsTunnelARHopTable, tmnxMplsIfGroup=tmnxMplsIfGroup, vRtrMplsTunnelCHopIpv6Addr=vRtrMplsTunnelCHopIpv6Addr, vRtrMplsLspPathLspId=vRtrMplsLspPathLspId, vRtrMplsAdminGroupTable=vRtrMplsAdminGroupTable, vRtrMplsLspClassOfService=vRtrMplsLspClassOfService, vRtrMplsLspNegotiatedMTU=vRtrMplsLspNegotiatedMTU, vRtrMplsLspSetupPriority=vRtrMplsLspSetupPriority, vRtrMplsGeneralStaticLspOriginate=vRtrMplsGeneralStaticLspOriginate, vRtrMplsLspFRObject=vRtrMplsLspFRObject, vRtrMplsLspPathRecord=vRtrMplsLspPathRecord, vRtrMplsLspCspfTeMetricEnabled=vRtrMplsLspCspfTeMetricEnabled, vRtrMplsLspPathCos=vRtrMplsLspPathCos, vRtrMplsLspPathNotificationReasonCode=vRtrMplsLspPathNotificationReasonCode, vRtrMplsTunnelCHopIpv4PrefixLen=vRtrMplsTunnelCHopIpv4PrefixLen, tmnxMplsGroups=tmnxMplsGroups, vRtrMplsLspPathBandwidth=vRtrMplsLspPathBandwidth, vRtrMplsLspRetryTimer=vRtrMplsLspRetryTimer, vRtrMplsLspPathOptimizeTimer=vRtrMplsLspPathOptimizeTimer, tmnxMplsNotifications=tmnxMplsNotifications, vRtrMplsLspPathNegotiatedMTU=vRtrMplsLspPathNegotiatedMTU, vRtrMplsLspPathRecordLabel=vRtrMplsLspPathRecordLabel, PYSNMP_MODULE_ID=timetraMplsMIBModule, vRtrMplsLspLastChange=vRtrMplsLspLastChange, vRtrMplsLabelType=vRtrMplsLabelType, vRtrMplsLspAdminGroupExclude=vRtrMplsLspAdminGroupExclude, vRtrMplsGeneralResignalTimer=vRtrMplsGeneralResignalTimer, vRtrMplsTunnelCHopIndex=vRtrMplsTunnelCHopIndex, vRtrMplsLspPathRerouted=vRtrMplsLspPathRerouted, vRtrMplsLspPathOperMTU=vRtrMplsLspPathOperMTU, vRtrMplsLspType=vRtrMplsLspType, vRtrMplsLspPathTimeDown=vRtrMplsLspPathTimeDown, vRtrMplsTunnelARHopRecordLabel=vRtrMplsTunnelARHopRecordLabel, vRtrMplsSrlgGrpName=vRtrMplsSrlgGrpName, vRtrMplsXCTable=vRtrMplsXCTable, vRtrMplsGeneralTE=vRtrMplsGeneralTE, vRtrMplsLspStatEntry=vRtrMplsLspStatEntry, vRtrMplsLspPathChanges=vRtrMplsLspPathChanges, vRtrMplsTunnelCHopIpv4Addr=vRtrMplsTunnelCHopIpv4Addr, vRtrMplsLabelRangeMin=vRtrMplsLabelRangeMin, vRtrMplsGeneralLastChange=vRtrMplsGeneralLastChange, vRtrMplsTunnelCHopStrictOrLoose=vRtrMplsTunnelCHopStrictOrLoose, vRtrMplsLspPathRetryTimeRemaining=vRtrMplsLspPathRetryTimeRemaining, vRtrMplsLspPathHoldPriority=vRtrMplsLspPathHoldPriority, vRtrMplsLspPathTimeUp=vRtrMplsLspPathTimeUp, vRtrMplsLspHoldTimer=vRtrMplsLspHoldTimer, tmnxMplsNotifyPrefix=tmnxMplsNotifyPrefix, vRtrMplsLspRowStatus=vRtrMplsLspRowStatus, vRtrMplsLspPathCosSource=vRtrMplsLspPathCosSource, vRtrMplsLspPathOperState=vRtrMplsLspPathOperState, vRtrMplsLspPathStatTable=vRtrMplsLspPathStatTable, vRtrMplsGeneralNextResignal=vRtrMplsGeneralNextResignal, vRtrMplsFSGroupTable=vRtrMplsFSGroupTable, vRtrMplsSrlgGrpEntry=vRtrMplsSrlgGrpEntry, TmnxMplsLspFailCode=TmnxMplsLspFailCode, vRtrMplsIfAdminGroup=vRtrMplsIfAdminGroup, vRtrMplsLspPathTable=vRtrMplsLspPathTable, vRtrMplsLabelRangeEntry=vRtrMplsLabelRangeEntry, tmnxMplsFSGroupGroup=tmnxMplsFSGroupGroup, vRtrMplsLspPathTransitionCount=vRtrMplsLspPathTransitionCount, vRtrMplsFSGroupRowStatus=vRtrMplsFSGroupRowStatus, vRtrMplsLspStatTable=vRtrMplsLspStatTable, tmnxMplsGlobalR2r1Group=tmnxMplsGlobalR2r1Group, vRtrMplsIfSrlgGrpTblLastChanged=vRtrMplsIfSrlgGrpTblLastChanged, vRtrMplsGeneralHoldTimer=vRtrMplsGeneralHoldTimer, vRtrMplsSrlgGrpLastChanged=vRtrMplsSrlgGrpLastChanged, vRtrMplsLspPathUp=vRtrMplsLspPathUp, vRtrMplsLspCspf=vRtrMplsLspCspf, tmnxMplsXCGroup=tmnxMplsXCGroup, vRtrMplsTunnelCHopIpv6PrefixLen=vRtrMplsTunnelCHopIpv6PrefixLen, vRtrMplsLabelRangeAging=vRtrMplsLabelRangeAging, tmnxMplsNotificationlObjects=tmnxMplsNotificationlObjects, vRtrMplsLspPathHopLimit=vRtrMplsLspPathHopLimit, vRtrMplsLspFRHopLimit=vRtrMplsLspFRHopLimit, vRtrMplsLspOperFastReroute=vRtrMplsLspOperFastReroute, vRtrMplsLspName=vRtrMplsLspName, vRtrMplsLspBwProtect=vRtrMplsLspBwProtect, vRtrMplsLspTimeDown=vRtrMplsLspTimeDown, vRtrMplsLspPathAdminGroupExclude=vRtrMplsLspPathAdminGroupExclude, vRtrMplsGeneralDynamicLspTransit=vRtrMplsGeneralDynamicLspTransit, vRtrMplsLspOctets=vRtrMplsLspOctets, vRtrMplsFSGroupEntry=vRtrMplsFSGroupEntry, vRtrMplsLspPathLastChange=vRtrMplsLspPathLastChange, timetraMplsMIBModule=timetraMplsMIBModule, vRtrMplsLspPathClassOfService=vRtrMplsLspPathClassOfService, tmnxMplsIfV6v0Group=tmnxMplsIfV6v0Group, vRtrMplsLspPathAdminState=vRtrMplsLspPathAdminState, vRtrMplsGeneralStaticLspTransit=vRtrMplsGeneralStaticLspTransit, vRtrMplsGeneralDynamicLspTerminate=vRtrMplsGeneralDynamicLspTerminate, vRtrMplsLspPathAdaptive=vRtrMplsLspPathAdaptive, vRtrMplsLspPathResignal=vRtrMplsLspPathResignal, vRtrMplsLspOperState=vRtrMplsLspOperState, vRtrMplsLspPathType=vRtrMplsLspPathType, vRtrMplsLspPathResignaled=vRtrMplsLspPathResignaled, tmnxMplsObjs=tmnxMplsObjs, vRtrMplsGeneralOperState=vRtrMplsGeneralOperState, vRtrMplsLspUp=vRtrMplsLspUp, vRtrMplsLspDecrementTtl=vRtrMplsLspDecrementTtl, vRtrMplsLspBandwidth=vRtrMplsLspBandwidth, vRtrMplsSrlgGrpTable=vRtrMplsSrlgGrpTable, vRtrMplsLspPathTunnelCRHopListIndex=vRtrMplsLspPathTunnelCRHopListIndex, tmnxMplsConformance=tmnxMplsConformance, vRtrMplsLspLastPathChange=vRtrMplsLspLastPathChange, vRtrMplsLspTransitions=vRtrMplsLspTransitions, vRtrMplsAdminGroupName=vRtrMplsAdminGroupName, vRtrMplsGeneralFRObject=vRtrMplsGeneralFRObject, vRtrMplsLspPathProperties=vRtrMplsLspPathProperties, vRtrMplsLspDown=vRtrMplsLspDown, vRtrMplsIfStatEntry=vRtrMplsIfStatEntry, vRtrMplsIfSrlgGrpEntry=vRtrMplsIfSrlgGrpEntry, tmnxMplsV6v0Compliance=tmnxMplsV6v0Compliance, vRtrMplsIfTable=vRtrMplsIfTable, vRtrMplsERHopTunnelIndex=vRtrMplsERHopTunnelIndex, vRtrMplsLspPathCspfQueries=vRtrMplsLspPathCspfQueries)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-MPLS-MIB", vRtrMplsOutSegmentIndex=vRtrMplsOutSegmentIndex, vRtrMplsSrlgGrpRowStatus=vRtrMplsSrlgGrpRowStatus, vRtrMplsLspPathRowStatus=vRtrMplsLspPathRowStatus, vRtrMplsLspPathStatEntry=vRtrMplsLspPathStatEntry)
