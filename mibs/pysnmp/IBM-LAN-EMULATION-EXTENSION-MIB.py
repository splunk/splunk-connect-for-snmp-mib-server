#
# PySNMP MIB module IBM-LAN-EMULATION-EXTENSION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBM-LAN-EMULATION-EXTENSION-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:39:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
BridgeId, Timeout = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId", "Timeout")
IfIndexOrZero, = mibBuilder.importSymbols("LAN-EMULATION-ELAN-MIB", "IfIndexOrZero")
lesConfEntry, = mibBuilder.importSymbols("LAN-EMULATION-LES-MIB", "lesConfEntry")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, NotificationType, ModuleIdentity, TimeTicks, Unsigned32, enterprises, IpAddress, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, Counter32, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "ModuleIdentity", "TimeTicks", "Unsigned32", "enterprises", "IpAddress", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "Counter32", "MibIdentifier", "iso")
TimeStamp, MacAddress, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "MacAddress", "TextualConvention", "RowStatus", "DisplayString")
lanEmulation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8))
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmArchitecture = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5))
ibmLeServerX = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 3))
ibmLeClientX = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 4))
ibmLeMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 5))
ibmLeServerXMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 1))
ibmLeServerXConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 2))
ibmLeServerXMon = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 1, 1))
ibmSuperELAN = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1))
ibmBbcmMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2))
ibmBbcmConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 1))
ibmBbcmStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 2))
ibmVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3))
ibmVlanGGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 1))
ibmVlanGOGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 1, 1))
ibmVlanCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2))
ibmVlanConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1))
ibmVlanStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 3))
ibmLeMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 5, 1))
ibmLeMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 5, 2))
class IbmSEBridgeID(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

class IbmVlanPortMap(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 65535)

class IbmVlanIndex(Integer32):
    pass

class IbmVlanType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("ip", 1), ("ipx", 2), ("netbios", 3), ("userDefSldWindo", 4), ("mac", 5), ("byPort", 6), ("ipMulticast", 7))

ibmLeServerXMonLecsInstances = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmLeServerXMonLecsInstances.setStatus('mandatory')
ibmLeServerXMonLesInstances = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmLeServerXMonLesInstances.setStatus('mandatory')
ibmLeServerXMonBusInstances = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmLeServerXMonBusInstances.setStatus('mandatory')
ibmLeServerXLecsMonTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 1, 2), )
if mibBuilder.loadTexts: ibmLeServerXLecsMonTable.setStatus('mandatory')
ibmLeServerXLecsMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 1, 2, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmLeServerXLecsMonIndex"))
if mibBuilder.loadTexts: ibmLeServerXLecsMonEntry.setStatus('mandatory')
ibmLeServerXLecsMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364)))
if mibBuilder.loadTexts: ibmLeServerXLecsMonIndex.setStatus('mandatory')
ibmLeServerXLecsUsedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmLeServerXLecsUsedConnections.setStatus('mandatory')
ibmLeServerXLesMonTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 1, 3), )
if mibBuilder.loadTexts: ibmLeServerXLesMonTable.setStatus('mandatory')
ibmLeServerXLesMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 1, 3, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmLeServerXLesMonIndex"))
if mibBuilder.loadTexts: ibmLeServerXLesMonEntry.setStatus('mandatory')
ibmLeServerXLesMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364)))
if mibBuilder.loadTexts: ibmLeServerXLesMonIndex.setStatus('mandatory')
ibmLeServerXLesMonUsedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 1, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmLeServerXLesMonUsedConnections.setStatus('mandatory')
ibmLeServerXLesMonLesLecInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmLeServerXLesMonLesLecInstances.setStatus('mandatory')
ibmLeServerXBusMonTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 1, 4), )
if mibBuilder.loadTexts: ibmLeServerXBusMonTable.setStatus('mandatory')
ibmLeServerXBusMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 1, 4, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmLeServerXBusMonIndex"))
if mibBuilder.loadTexts: ibmLeServerXBusMonEntry.setStatus('mandatory')
ibmLeServerXBusMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364)))
if mibBuilder.loadTexts: ibmLeServerXBusMonIndex.setStatus('mandatory')
ibmLeServerXBusMonUsedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 1, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmLeServerXBusMonUsedConnections.setStatus('mandatory')
ibmLeServerXBusMonBusLecInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 1, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmLeServerXBusMonBusLecInstances.setStatus('mandatory')
ibmLeServerXLesConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 2, 1), )
if mibBuilder.loadTexts: ibmLeServerXLesConfigTable.setStatus('mandatory')
ibmLeServerXLesConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 2, 1, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "lesConfIndex"))
if mibBuilder.loadTexts: ibmLeServerXLesConfigEntry.setStatus('mandatory')
ibmLeServerXLesMinLecID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65279)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmLeServerXLesMinLecID.setStatus('mandatory')
ibmLeServerXLesMaxLecID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65279)).clone(65279)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmLeServerXLesMaxLecID.setStatus('mandatory')
ibmSEPortStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1), )
if mibBuilder.loadTexts: ibmSEPortStatisticsTable.setStatus('mandatory')
ibmSEPortStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmSEBridgeId"), (0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmSEPortNum"))
if mibBuilder.loadTexts: ibmSEPortStatisticsEntry.setStatus('mandatory')
ibmSEBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 1), IbmSEBridgeID())
if mibBuilder.loadTexts: ibmSEBridgeId.setStatus('mandatory')
ibmSEPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ibmSEPortNum.setStatus('mandatory')
ibmSEPortArpRequestsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortArpRequestsIn.setStatus('mandatory')
ibmSEPortArpRequestsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortArpRequestsOut.setStatus('mandatory')
ibmSEArpRequestsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEArpRequestsErrors.setStatus('mandatory')
ibmSEPortArpRequestsDroppedPortBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortArpRequestsDroppedPortBlocked.setStatus('obsolete')
ibmSEPortArpRequestsFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortArpRequestsFiltered.setStatus('mandatory')
ibmSEPortArpRepliesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortArpRepliesIn.setStatus('mandatory')
ibmSEPortArpRepliesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortArpRepliesOut.setStatus('mandatory')
ibmSEPortArpRepliesErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortArpRepliesErrors.setStatus('mandatory')
ibmSEPortNarpRequestsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortNarpRequestsIn.setStatus('mandatory')
ibmSEPortNarpRequestsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortNarpRequestsOut.setStatus('mandatory')
ibmSEPortNarpRequestsDroppedPortBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortNarpRequestsDroppedPortBlocked.setStatus('obsolete')
ibmSEPortFlushRequestsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortFlushRequestsIn.setStatus('mandatory')
ibmSEPortFlushRequestsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortFlushRequestsOut.setStatus('mandatory')
ibmSEPortFlushRepliesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortFlushRepliesIn.setStatus('mandatory')
ibmSEPortFlushRepliesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortFlushRepliesOut.setStatus('mandatory')
ibmSEPortFlushRequestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortFlushRequestErrors.setStatus('mandatory')
ibmSEPortFlushRepliesErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortFlushRepliesErrors.setStatus('mandatory')
ibmSEPortLeCtrlFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortLeCtrlFramesIn.setStatus('mandatory')
ibmSEPortLeCtrlFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortLeCtrlFramesOut.setStatus('mandatory')
ibmSEPortLeCtrlFramesDiscSrcPortNotFwrd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortLeCtrlFramesDiscSrcPortNotFwrd.setStatus('mandatory')
ibmSEPortLeCtrlFramesDiscDestPortNotFwrd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortLeCtrlFramesDiscDestPortNotFwrd.setStatus('mandatory')
ibmSEBridgeConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 2), )
if mibBuilder.loadTexts: ibmSEBridgeConfigTable.setStatus('mandatory')
ibmSEBridgeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 2, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmSEBridgeId"))
if mibBuilder.loadTexts: ibmSEBridgeConfigEntry.setStatus('mandatory')
ibmSEAtmIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 2, 1, 1), IfIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSEAtmIfNumber.setStatus('mandatory')
ibmSEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSEEnabled.setStatus('mandatory')
ibmSEName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSEName.setStatus('mandatory')
ibmSEFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1516, 4544, 9234, 18190))).clone(namedValues=NamedValues(("en1516", 1516), ("tr4544", 4544), ("tr9234", 9234), ("tr18190", 18190))).clone('tr4544')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSEFrameSize.setStatus('mandatory')
ibmSEMacCacheAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSEMacCacheAge.setStatus('mandatory')
ibmSERDCacheAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000)).clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSERDCacheAge.setStatus('mandatory')
ibmSEPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSEPriority.setStatus('mandatory')
ibmSEMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSEMaxAge.setStatus('mandatory')
ibmSEBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSEBridgeHelloTime.setStatus('mandatory')
ibmSEBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSEBridgeForwardDelay.setStatus('mandatory')
ibmSEBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 2, 1, 11), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSEBridgeAddress.setStatus('mandatory')
ibmSEType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sebEN", 1), ("sebTR", 2))).clone('sebTR')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSEType.setStatus('mandatory')
ibmSEConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 2, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSEConfigRowStatus.setStatus('mandatory')
ibmSEPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 3), )
if mibBuilder.loadTexts: ibmSEPortConfigTable.setStatus('mandatory')
ibmSEPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 3, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmSEBridgeId"), (0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmSEPortNum"))
if mibBuilder.loadTexts: ibmSEPortConfigEntry.setStatus('mandatory')
ibmSEPortIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortIfNumber.setStatus('mandatory')
ibmSEPortElanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSEPortElanName.setStatus('mandatory')
ibmSEPortRemoteElan = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSEPortRemoteElan.setStatus('mandatory')
ibmSEPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSEPortEnabled.setStatus('mandatory')
ibmSEPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortPriority.setStatus('mandatory')
ibmSEPortRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSEPortRootCost.setStatus('mandatory')
ibmSEPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 3, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmSEPortRowStatus.setStatus('mandatory')
ibmSEBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 4), )
if mibBuilder.loadTexts: ibmSEBridgeTable.setStatus('mandatory')
ibmSEBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 4, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmSEBridgeId"))
if mibBuilder.loadTexts: ibmSEBridgeEntry.setStatus('mandatory')
ibmSENumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSENumPorts.setStatus('mandatory')
ibmSEProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("tbSra", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEProtocolSpecification.setStatus('mandatory')
ibmSETimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSETimeSinceTopologyChange.setStatus('mandatory')
ibmSETopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSETopChanges.setStatus('mandatory')
ibmSEDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 4, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEDesignatedRoot.setStatus('mandatory')
ibmSERootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSERootCost.setStatus('mandatory')
ibmSERootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSERootPort.setStatus('mandatory')
ibmSEBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 4, 1, 8), Timeout().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEBridgeMaxAge.setStatus('mandatory')
ibmSEHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 4, 1, 9), Timeout().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEHelloTime.setStatus('mandatory')
ibmSEHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEHoldTime.setStatus('mandatory')
ibmSEForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 4, 1, 11), Timeout().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEForwardDelay.setStatus('mandatory')
ibmSEMacLearnedEntryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEMacLearnedEntryDiscards.setStatus('mandatory')
ibmSERDLearnedEntryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSERDLearnedEntryDiscards.setStatus('mandatory')
ibmSEStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 5), )
if mibBuilder.loadTexts: ibmSEStpPortTable.setStatus('mandatory')
ibmSEStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 5, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmSEBridgeId"), (0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmSEPortNum"))
if mibBuilder.loadTexts: ibmSEStpPortEntry.setStatus('mandatory')
ibmSEStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("forwarding", 1), ("learning", 2), ("listening", 3), ("blocked", 4), ("configured", 5), ("netdown", 6), ("configuring", 7), ("unknown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEStpPortState.setStatus('mandatory')
ibmSEStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 5, 1, 2), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEStpPortDesignatedRoot.setStatus('mandatory')
ibmSEStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEStpPortDesignatedCost.setStatus('mandatory')
ibmSEStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 5, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEStpPortDesignatedBridge.setStatus('mandatory')
ibmSEStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEStpPortDesignatedPort.setStatus('mandatory')
ibmSEStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEStpPortForwardTransitions.setStatus('mandatory')
ibmSEPortMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortMaxInfo.setStatus('mandatory')
ibmSEPortDataStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8), )
if mibBuilder.loadTexts: ibmSEPortDataStatisticsTable.setStatus('mandatory')
ibmSEPortDataStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmSEBridgeId"), (0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmSEPortNum"))
if mibBuilder.loadTexts: ibmSEPortDataStatisticsEntry.setStatus('mandatory')
ibmSEPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortInFrames.setStatus('mandatory')
ibmSEPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortOutFrames.setStatus('mandatory')
ibmSEPortRoutedInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortRoutedInFrames.setStatus('mandatory')
ibmSEPortBpduFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortBpduFrames.setStatus('mandatory')
ibmSEPortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortInDiscards.setStatus('mandatory')
ibmSEPortDropSrcAddrFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortDropSrcAddrFilters.setStatus('mandatory')
ibmSEPortDropDestAddrFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortDropDestAddrFilters.setStatus('mandatory')
ibmSEPortDropProtocolFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortDropProtocolFilters.setStatus('mandatory')
ibmSEPortDropSrcNotFwds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortDropSrcNotFwds.setStatus('mandatory')
ibmSEPortDropDestNotFwds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortDropDestNotFwds.setStatus('mandatory')
ibmSEPortDropInputOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortDropInputOverflows.setStatus('mandatory')
ibmSEPortDropBpduOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortDropBpduOverflows.setStatus('mandatory')
ibmSEPortDropSrOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortDropSrOverflows.setStatus('mandatory')
ibmSEPortRecNoBuffFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortRecNoBuffFailures.setStatus('mandatory')
ibmSEPortTransmitFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortTransmitFailures.setStatus('mandatory')
ibmSEPortToBigFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortToBigFailures.setStatus('mandatory')
ibmSEPortLanIdFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortLanIdFailures.setStatus('mandatory')
ibmSEPortStpLanIdFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 1, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSEPortStpLanIdFailures.setStatus('mandatory')
ibmBbcmConfigNextId = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBbcmConfigNextId.setStatus('obsolete')
ibmBbcmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 1, 2), )
if mibBuilder.loadTexts: ibmBbcmConfigTable.setStatus('mandatory')
ibmBbcmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 1, 2, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmBbcmConfigIndex"))
if mibBuilder.loadTexts: ibmBbcmConfigEntry.setStatus('mandatory')
ibmBbcmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 1, 2, 1, 1), IbmSEBridgeID())
if mibBuilder.loadTexts: ibmBbcmConfigIndex.setStatus('mandatory')
ibmBbcmName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBbcmName.setStatus('mandatory')
ibmBbcmConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 1, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmBbcmConfigRowStatus.setStatus('mandatory')
ibmBbcmProtocolConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 1, 3), )
if mibBuilder.loadTexts: ibmBbcmProtocolConfigTable.setStatus('mandatory')
ibmBbcmProtocolConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 1, 3, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmBbcmProtocolType"), (0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmBbcmConfigIndex"))
if mibBuilder.loadTexts: ibmBbcmProtocolConfigEntry.setStatus('mandatory')
ibmBbcmProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reserved", 1), ("ip", 2))))
if mibBuilder.loadTexts: ibmBbcmProtocolType.setStatus('mandatory')
ibmBbcmProtocolOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBbcmProtocolOperStatus.setStatus('mandatory')
ibmBbcmProtocolAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmBbcmProtocolAdminStatus.setStatus('mandatory')
ibmBbcmProtocolCacheAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 214748364))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmBbcmProtocolCacheAge.setStatus('mandatory')
ibmBbcmStatTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 2, 1), )
if mibBuilder.loadTexts: ibmBbcmStatTable.setStatus('mandatory')
ibmBbcmStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 2, 1, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmBbcmStatProtocolType"), (0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmBbcmConfigIndex"))
if mibBuilder.loadTexts: ibmBbcmStatEntry.setStatus('mandatory')
ibmBbcmStatProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allprotocols", 1), ("ip", 2))))
if mibBuilder.loadTexts: ibmBbcmStatProtocolType.setStatus('mandatory')
ibmBbcmStatInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBbcmStatInReceives.setStatus('mandatory')
ibmBbcmStatInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBbcmStatInOctets.setStatus('mandatory')
ibmBbcmStatOutManaged = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBbcmStatOutManaged.setStatus('mandatory')
ibmBbcmStatOutManagedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBbcmStatOutManagedOctets.setStatus('mandatory')
ibmBbcmStatOutNotManaged = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBbcmStatOutNotManaged.setStatus('mandatory')
ibmBbcmStatOutNotManagedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBbcmStatOutNotManagedOctets.setStatus('mandatory')
ibmBbcmStatOutFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBbcmStatOutFiltered.setStatus('mandatory')
ibmBbcmStatOutFilteredOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBbcmStatOutFilteredOctets.setStatus('mandatory')
ibmVlanConfIndexNextID = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 1, 1, 1), IbmVlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmVlanConfIndexNextID.setStatus('mandatory')
ibmVlanTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmVlanTopologyChange.setStatus('mandatory')
ibmVlanMaxPortMap = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmVlanMaxPortMap.setStatus('mandatory')
ibmVlanMaxUDSWMaskFilter = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmVlanMaxUDSWMaskFilter.setStatus('mandatory')
ibmVlanConfTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 1), )
if mibBuilder.loadTexts: ibmVlanConfTable.setStatus('mandatory')
ibmVlanConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 1, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmVlanConfIndex"))
if mibBuilder.loadTexts: ibmVlanConfEntry.setStatus('mandatory')
ibmVlanConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 1, 1, 1), IbmVlanIndex())
if mibBuilder.loadTexts: ibmVlanConfIndex.setStatus('mandatory')
ibmVlanConfBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 1, 1, 2), IbmSEBridgeID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanConfBridgeId.setStatus('mandatory')
ibmVlanConfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 1, 1, 3), IbmVlanType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanConfType.setStatus('mandatory')
ibmVlanConfAgingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 1, 1, 4), Unsigned32().clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanConfAgingTimer.setStatus('mandatory')
ibmVlanConfForwardingPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 1, 1, 5), IbmVlanPortMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmVlanConfForwardingPortMap.setStatus('mandatory')
ibmVlanConfIncludedPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 1, 1, 6), IbmVlanPortMap().clone(hexValue="0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanConfIncludedPortMap.setStatus('mandatory')
ibmVlanConfExcludedPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 1, 1, 7), IbmVlanPortMap().clone(hexValue="0")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanConfExcludedPortMap.setStatus('mandatory')
ibmVlanConfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanConfName.setStatus('mandatory')
ibmVlanConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanConfRowStatus.setStatus('mandatory')
ibmVlanIpConfTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 2), )
if mibBuilder.loadTexts: ibmVlanIpConfTable.setStatus('mandatory')
ibmVlanIpConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 2, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmVlanConfIndex"))
if mibBuilder.loadTexts: ibmVlanIpConfEntry.setStatus('mandatory')
ibmVlanIpNetworkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanIpNetworkAddr.setStatus('mandatory')
ibmVlanIpNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanIpNetworkMask.setStatus('mandatory')
ibmVlanIpCutThruFromHere = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanIpCutThruFromHere.setStatus('mandatory')
ibmVlanIpCutThruToHere = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanIpCutThruToHere.setStatus('mandatory')
ibmVlanIpxConfTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 3), )
if mibBuilder.loadTexts: ibmVlanIpxConfTable.setStatus('mandatory')
ibmVlanIpxConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 3, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmVlanConfIndex"))
if mibBuilder.loadTexts: ibmVlanIpxConfEntry.setStatus('mandatory')
ibmVlanIpxNetworkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanIpxNetworkAddr.setStatus('mandatory')
ibmVlanUDSWConfTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 4), )
if mibBuilder.loadTexts: ibmVlanUDSWConfTable.setStatus('mandatory')
ibmVlanUDSWConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 4, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmVlanConfIndex"))
if mibBuilder.loadTexts: ibmVlanUDSWConfEntry.setStatus('mandatory')
ibmVlanUDSWOffsetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("udswMacOffset", 1), ("udswInfoOffset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanUDSWOffsetType.setStatus('mandatory')
ibmVlanUDSWOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanUDSWOffset.setStatus('mandatory')
ibmVlanUDSWMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanUDSWMask.setStatus('mandatory')
ibmVlanUDSWFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanUDSWFilter.setStatus('mandatory')
ibmVlanMacConfTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 5), )
if mibBuilder.loadTexts: ibmVlanMacConfTable.setStatus('mandatory')
ibmVlanMacConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 5, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmVlanConfIndex"), (0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmVlanMacAddrIndex"))
if mibBuilder.loadTexts: ibmVlanMacConfEntry.setStatus('mandatory')
ibmVlanMacAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: ibmVlanMacAddrIndex.setStatus('mandatory')
ibmVlanMacAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanMacAddresses.setStatus('mandatory')
ibmVlanMacAddrConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 2, 1, 5, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanMacAddrConfRowStatus.setStatus('mandatory')
ibmVlanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 3, 1), )
if mibBuilder.loadTexts: ibmVlanStatusTable.setStatus('mandatory')
ibmVlanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 3, 1, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmVlanConfIndex"))
if mibBuilder.loadTexts: ibmVlanStatusEntry.setStatus('mandatory')
ibmVlanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmVlanOperStatus.setStatus('mandatory')
ibmVlanAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanAdminStatus.setStatus('mandatory')
ibmVlanProcessedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmVlanProcessedPackets.setStatus('mandatory')
ibmVlanDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmVlanDiscardedPackets.setStatus('mandatory')
ibmVlanDiscPktsMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 3, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmVlanDiscPktsMac.setStatus('mandatory')
ibmVlanIpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 3, 2), )
if mibBuilder.loadTexts: ibmVlanIpStatusTable.setStatus('mandatory')
ibmVlanIpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 3, 2, 1), ).setIndexNames((0, "IBM-LAN-EMULATION-EXTENSION-MIB", "ibmVlanConfIndex"))
if mibBuilder.loadTexts: ibmVlanIpStatusEntry.setStatus('mandatory')
ibmVlanIpCutThruFromPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmVlanIpCutThruFromPkts.setStatus('mandatory')
ibmVlanIpCutThruToPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmVlanIpCutThruToPkts.setStatus('mandatory')
ibmVlanIpCutThruFromDiscPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmVlanIpCutThruFromDiscPkts.setStatus('mandatory')
ibmVlanIpCutThruToDiscPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 8, 4, 3, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmVlanIpCutThruToDiscPkts.setStatus('mandatory')
ibmLeCServerXMonLECSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 5, 1, 1))
ibmLeCServerXMonLESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 5, 1, 2))
ibmLeCServerXMonBUSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 5, 1, 3))
ibmCSuperELANGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 5, 1, 4))
ibmCBbcmMIBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 5, 1, 5))
ibmCVlanMIBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 5, 1, 6))
ibmLeMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 8, 5, 2, 1))
mibBuilder.exportSymbols("IBM-LAN-EMULATION-EXTENSION-MIB", ibmSEPortStpLanIdFailures=ibmSEPortStpLanIdFailures, ibmVlanConfAgingTimer=ibmVlanConfAgingTimer, ibmSEBridgeTable=ibmSEBridgeTable, ibmVlanIpNetworkMask=ibmVlanIpNetworkMask, ibmBbcmStatsGroup=ibmBbcmStatsGroup, ibmLeCServerXMonLESGroup=ibmLeCServerXMonLESGroup, ibmSEHelloTime=ibmSEHelloTime, ibmLeServerXMon=ibmLeServerXMon, ibmSEPortFlushRequestErrors=ibmSEPortFlushRequestErrors, ibmVlanUDSWOffsetType=ibmVlanUDSWOffsetType, ibmSEPortRecNoBuffFailures=ibmSEPortRecNoBuffFailures, ibmSEFrameSize=ibmSEFrameSize, ibmBbcmName=ibmBbcmName, ibmBbcmConfigNextId=ibmBbcmConfigNextId, ibmVlanProcessedPackets=ibmVlanProcessedPackets, ibmVlanAdminStatus=ibmVlanAdminStatus, ibmLeServerXLesMonEntry=ibmLeServerXLesMonEntry, ibmVlanConfEntry=ibmVlanConfEntry, ibmSEBridgeConfigTable=ibmSEBridgeConfigTable, ibmSEStpPortState=ibmSEStpPortState, IbmVlanType=IbmVlanType, ibmLeServerXLecsMonTable=ibmLeServerXLecsMonTable, ibmLeServerXLesConfigTable=ibmLeServerXLesConfigTable, ibmSERDLearnedEntryDiscards=ibmSERDLearnedEntryDiscards, lanEmulation=lanEmulation, ibmSEPortNarpRequestsOut=ibmSEPortNarpRequestsOut, ibmVlanConfForwardingPortMap=ibmVlanConfForwardingPortMap, ibmLeMIBConformance=ibmLeMIBConformance, ibmVlanUDSWConfTable=ibmVlanUDSWConfTable, ibmVlanMacConfEntry=ibmVlanMacConfEntry, ibmVlanOperStatus=ibmVlanOperStatus, ibmVlanConfGroup=ibmVlanConfGroup, ibmSEPortDataStatisticsTable=ibmSEPortDataStatisticsTable, ibmBbcmStatInReceives=ibmBbcmStatInReceives, ibmLeServerXLecsUsedConnections=ibmLeServerXLecsUsedConnections, ibmVlanIpCutThruFromPkts=ibmVlanIpCutThruFromPkts, ibmSEStpPortForwardTransitions=ibmSEStpPortForwardTransitions, ibmSEPortFlushRepliesOut=ibmSEPortFlushRepliesOut, ibmBbcmProtocolAdminStatus=ibmBbcmProtocolAdminStatus, ibmSEType=ibmSEType, ibmVlanMaxPortMap=ibmVlanMaxPortMap, ibmBbcmStatOutNotManagedOctets=ibmBbcmStatOutNotManagedOctets, ibm=ibm, ibmSEPortRootCost=ibmSEPortRootCost, ibmLeServerXMonLesInstances=ibmLeServerXMonLesInstances, ibmSEPortArpRequestsFiltered=ibmSEPortArpRequestsFiltered, ibmSEPortNum=ibmSEPortNum, ibmLeServerXBusMonTable=ibmLeServerXBusMonTable, ibmBbcmStatOutFiltered=ibmBbcmStatOutFiltered, ibmVlanDiscPktsMac=ibmVlanDiscPktsMac, ibmSEPortRemoteElan=ibmSEPortRemoteElan, ibmBbcmStatProtocolType=ibmBbcmStatProtocolType, ibmVlanConfIndexNextID=ibmVlanConfIndexNextID, ibmBbcmConfigIndex=ibmBbcmConfigIndex, ibmBbcmProtocolOperStatus=ibmBbcmProtocolOperStatus, ibmSEPortArpRepliesIn=ibmSEPortArpRepliesIn, ibmBbcmProtocolConfigEntry=ibmBbcmProtocolConfigEntry, ibmSEPortRoutedInFrames=ibmSEPortRoutedInFrames, ibmVlanGOGroup=ibmVlanGOGroup, ibmSEBridgeConfigEntry=ibmSEBridgeConfigEntry, ibmBbcmStatInOctets=ibmBbcmStatInOctets, ibmVlanStatusTable=ibmVlanStatusTable, ibmSEStpPortDesignatedCost=ibmSEStpPortDesignatedCost, ibmLeServerX=ibmLeServerX, ibmSEPriority=ibmSEPriority, ibmVlanConfRowStatus=ibmVlanConfRowStatus, ibmCVlanMIBGroup=ibmCVlanMIBGroup, ibmVlanCGroup=ibmVlanCGroup, ibmSEPortLeCtrlFramesDiscDestPortNotFwrd=ibmSEPortLeCtrlFramesDiscDestPortNotFwrd, ibmVlanConfIndex=ibmVlanConfIndex, ibmSEBridgeEntry=ibmSEBridgeEntry, ibmLeServerXMonBusInstances=ibmLeServerXMonBusInstances, ibmArchitecture=ibmArchitecture, ibmSEPortStatisticsEntry=ibmSEPortStatisticsEntry, ibmSEBridgeId=ibmSEBridgeId, ibmVlanMacConfTable=ibmVlanMacConfTable, ibmVlanTopologyChange=ibmVlanTopologyChange, ibmSEPortPriority=ibmSEPortPriority, ibmSEPortDropProtocolFilters=ibmSEPortDropProtocolFilters, ibmBbcmConfigGroup=ibmBbcmConfigGroup, ibmLeServerXLesConfigEntry=ibmLeServerXLesConfigEntry, ibmSEPortLeCtrlFramesDiscSrcPortNotFwrd=ibmSEPortLeCtrlFramesDiscSrcPortNotFwrd, ibmLeServerXLecsMonIndex=ibmLeServerXLecsMonIndex, ibmSEMaxAge=ibmSEMaxAge, ibmSEPortBpduFrames=ibmSEPortBpduFrames, ibmBbcmConfigTable=ibmBbcmConfigTable, ibmBbcmProtocolConfigTable=ibmBbcmProtocolConfigTable, ibmBbcmMIB=ibmBbcmMIB, ibmSEName=ibmSEName, ibmVlanIpxConfTable=ibmVlanIpxConfTable, ibmLeServerXBusMonIndex=ibmLeServerXBusMonIndex, ibmSEPortDropSrOverflows=ibmSEPortDropSrOverflows, ibmSEPortRowStatus=ibmSEPortRowStatus, ibmSEPortFlushRepliesIn=ibmSEPortFlushRepliesIn, ibmVlan=ibmVlan, ibmSEPortFlushRepliesErrors=ibmSEPortFlushRepliesErrors, ibmVlanUDSWFilter=ibmVlanUDSWFilter, ibmSEPortNarpRequestsIn=ibmSEPortNarpRequestsIn, ibmVlanMacAddrConfRowStatus=ibmVlanMacAddrConfRowStatus, ibmBbcmConfigRowStatus=ibmBbcmConfigRowStatus, ibmSEPortConfigTable=ibmSEPortConfigTable, ibmLeServerXBusMonUsedConnections=ibmLeServerXBusMonUsedConnections, ibmSEPortIfNumber=ibmSEPortIfNumber, ibmVlanConfBridgeId=ibmVlanConfBridgeId, ibmVlanIpConfEntry=ibmVlanIpConfEntry, ibmLeServerXLesMonIndex=ibmLeServerXLesMonIndex, ibmVlanIpStatusEntry=ibmVlanIpStatusEntry, ibmLeCServerXMonBUSGroup=ibmLeCServerXMonBUSGroup, ibmLeServerXBusMonEntry=ibmLeServerXBusMonEntry, ibmSEPortDropBpduOverflows=ibmSEPortDropBpduOverflows, ibmVlanIpCutThruToDiscPkts=ibmVlanIpCutThruToDiscPkts, ibmLeServerXLesMinLecID=ibmLeServerXLesMinLecID, ibmSEPortConfigEntry=ibmSEPortConfigEntry, ibmSEPortDropSrcNotFwds=ibmSEPortDropSrcNotFwds, ibmVlanIpCutThruToHere=ibmVlanIpCutThruToHere, ibmVlanIpxNetworkAddr=ibmVlanIpxNetworkAddr, ibmSEPortElanName=ibmSEPortElanName, ibmSEPortNarpRequestsDroppedPortBlocked=ibmSEPortNarpRequestsDroppedPortBlocked, ibmBbcmProtocolType=ibmBbcmProtocolType, ibmLeServerXLesMaxLecID=ibmLeServerXLesMaxLecID, ibmSEPortStatisticsTable=ibmSEPortStatisticsTable, ibmSEBridgeForwardDelay=ibmSEBridgeForwardDelay, ibmSERootCost=ibmSERootCost, ibmCSuperELANGroup=ibmCSuperELANGroup, IbmVlanIndex=IbmVlanIndex, ibmSETimeSinceTopologyChange=ibmSETimeSinceTopologyChange, ibmSEPortDropDestAddrFilters=ibmSEPortDropDestAddrFilters, ibmVlanMacAddrIndex=ibmVlanMacAddrIndex, ibmVlanIpxConfEntry=ibmVlanIpxConfEntry, ibmSEPortTransmitFailures=ibmSEPortTransmitFailures, ibmVlanIpCutThruFromHere=ibmVlanIpCutThruFromHere, ibmBbcmStatOutFilteredOctets=ibmBbcmStatOutFilteredOctets, ibmLeServerXLesMonLesLecInstances=ibmLeServerXLesMonLesLecInstances, ibmSEStpPortDesignatedPort=ibmSEStpPortDesignatedPort, ibmSEPortToBigFailures=ibmSEPortToBigFailures, ibmBbcmStatTable=ibmBbcmStatTable, ibmLeMIBCompliance=ibmLeMIBCompliance, ibmBbcmConfigEntry=ibmBbcmConfigEntry, ibmBbcmStatOutNotManaged=ibmBbcmStatOutNotManaged, ibmSERDCacheAge=ibmSERDCacheAge, ibmSEPortArpRequestsIn=ibmSEPortArpRequestsIn, ibmLeCServerXMonLECSGroup=ibmLeCServerXMonLECSGroup, ibmSEPortFlushRequestsOut=ibmSEPortFlushRequestsOut, ibmLeMIBGroups=ibmLeMIBGroups, ibmSEStpPortDesignatedRoot=ibmSEStpPortDesignatedRoot, ibmVlanConfName=ibmVlanConfName, ibmLeServerXMonLecsInstances=ibmLeServerXMonLecsInstances, ibmSEPortInFrames=ibmSEPortInFrames, ibmSEPortLeCtrlFramesIn=ibmSEPortLeCtrlFramesIn, IbmSEBridgeID=IbmSEBridgeID, ibmSEPortDropInputOverflows=ibmSEPortDropInputOverflows, ibmCBbcmMIBGroup=ibmCBbcmMIBGroup, ibmSEPortMaxInfo=ibmSEPortMaxInfo, ibmLeServerXMonitoring=ibmLeServerXMonitoring, ibmLeServerXLecsMonEntry=ibmLeServerXLecsMonEntry, ibmVlanStatusGroup=ibmVlanStatusGroup, ibmSEPortArpRequestsOut=ibmSEPortArpRequestsOut, ibmSEProtocolSpecification=ibmSEProtocolSpecification, ibmSEDesignatedRoot=ibmSEDesignatedRoot, ibmSEHoldTime=ibmSEHoldTime, ibmSEPortLanIdFailures=ibmSEPortLanIdFailures, ibmSEPortArpRepliesOut=ibmSEPortArpRepliesOut, ibmSERootPort=ibmSERootPort, ibmVlanIpStatusTable=ibmVlanIpStatusTable, ibmSEEnabled=ibmSEEnabled, ibmSEStpPortTable=ibmSEStpPortTable, ibmLeMIBCompliances=ibmLeMIBCompliances, ibmSEPortArpRequestsDroppedPortBlocked=ibmSEPortArpRequestsDroppedPortBlocked, ibmVlanMaxUDSWMaskFilter=ibmVlanMaxUDSWMaskFilter, ibmLeServerXLesMonUsedConnections=ibmLeServerXLesMonUsedConnections, ibmVlanConfIncludedPortMap=ibmVlanConfIncludedPortMap, ibmSEPortArpRepliesErrors=ibmSEPortArpRepliesErrors, ibmSENumPorts=ibmSENumPorts, ibmBbcmProtocolCacheAge=ibmBbcmProtocolCacheAge, ibmBbcmStatOutManaged=ibmBbcmStatOutManaged, ibmBbcmStatOutManagedOctets=ibmBbcmStatOutManagedOctets, ibmSEPortDataStatisticsEntry=ibmSEPortDataStatisticsEntry, ibmVlanConfTable=ibmVlanConfTable, ibmVlanIpCutThruToPkts=ibmVlanIpCutThruToPkts, ibmSEPortEnabled=ibmSEPortEnabled, ibmVlanStatusEntry=ibmVlanStatusEntry, ibmBbcmStatEntry=ibmBbcmStatEntry, ibmSEBridgeAddress=ibmSEBridgeAddress, ibmSEPortOutFrames=ibmSEPortOutFrames, ibmVlanIpConfTable=ibmVlanIpConfTable, ibmSEConfigRowStatus=ibmSEConfigRowStatus, ibmSEArpRequestsErrors=ibmSEArpRequestsErrors, ibmVlanUDSWMask=ibmVlanUDSWMask, ibmSEPortDropSrcAddrFilters=ibmSEPortDropSrcAddrFilters, ibmSEMacCacheAge=ibmSEMacCacheAge, ibmVlanConfExcludedPortMap=ibmVlanConfExcludedPortMap, ibmLeClientX=ibmLeClientX, ibmSEMacLearnedEntryDiscards=ibmSEMacLearnedEntryDiscards, ibmSEPortInDiscards=ibmSEPortInDiscards, ibmVlanIpNetworkAddr=ibmVlanIpNetworkAddr, ibmSEStpPortEntry=ibmSEStpPortEntry, ibmSEBridgeMaxAge=ibmSEBridgeMaxAge, ibmSEPortDropDestNotFwds=ibmSEPortDropDestNotFwds, ibmVlanIpCutThruFromDiscPkts=ibmVlanIpCutThruFromDiscPkts, ibmLeServerXLesMonTable=ibmLeServerXLesMonTable, ibmSEStpPortDesignatedBridge=ibmSEStpPortDesignatedBridge, IbmVlanPortMap=IbmVlanPortMap, ibmLeServerXBusMonBusLecInstances=ibmLeServerXBusMonBusLecInstances, ibmSuperELAN=ibmSuperELAN, ibmSEAtmIfNumber=ibmSEAtmIfNumber, ibmVlanConfType=ibmVlanConfType, ibmSEPortFlushRequestsIn=ibmSEPortFlushRequestsIn, ibmVlanDiscardedPackets=ibmVlanDiscardedPackets, ibmVlanUDSWOffset=ibmVlanUDSWOffset, ibmSEBridgeHelloTime=ibmSEBridgeHelloTime, ibmLeServerXConfig=ibmLeServerXConfig, ibmSEPortLeCtrlFramesOut=ibmSEPortLeCtrlFramesOut, ibmVlanUDSWConfEntry=ibmVlanUDSWConfEntry, ibmVlanGGroup=ibmVlanGGroup, ibmSEForwardDelay=ibmSEForwardDelay, ibmSETopChanges=ibmSETopChanges, ibmVlanMacAddresses=ibmVlanMacAddresses)
