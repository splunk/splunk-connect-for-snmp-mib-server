#
# PySNMP MIB module NEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NEC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:08:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Opaque, Integer32, Unsigned32, IpAddress, NotificationType, MibIdentifier, Counter64, ObjectIdentity, iso, ModuleIdentity, Bits, Counter32, enterprises, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Opaque", "Integer32", "Unsigned32", "IpAddress", "NotificationType", "MibIdentifier", "Counter64", "ObjectIdentity", "iso", "ModuleIdentity", "Bits", "Counter32", "enterprises", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
TruthValue, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC-v1", "TruthValue", "DateAndTime")
nec = MibIdentifier((1, 3, 6, 1, 4, 1, 119))
necProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1))
atomis = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 14))
m7_phase2 = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 14, 9)).setLabel("m7-phase2")
m7_corporate = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 14, 12)).setLabel("m7-corporate")
nec_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2)).setLabel("nec-mib")
necProductDepend = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3))
atomis_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14)).setLabel("atomis-mib")
m7_phase2_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9)).setLabel("m7-phase2-mib")
node = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1))
slot = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2))
linf = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3))
conn = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4))
perf = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5))
scale = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 6))
card = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7))
clock = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8))
diag = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 9))
pnni = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10))
matCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 11))
m7_corporate_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 12)).setLabel("m7-corporate-mib")
nodeStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 1))
nodeStatusOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("active", 2), ("installing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusOperStatus.setStatus('mandatory')
nodeStatusStartTime = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusStartTime.setStatus('mandatory')
nodeStatusNodeId = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusNodeId.setStatus('mandatory')
nodeStatusSelfSystem = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("system-0", 1), ("system-1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusSelfSystem.setStatus('mandatory')
nodeStatusSwitchType = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sw-Engine-5G", 1), ("sw-Engine-10G", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusSwitchType.setStatus('mandatory')
nodeStatusFan = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusFan.setStatus('mandatory')
nodeStatusEnvironment = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("good", 1), ("noGood", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusEnvironment.setStatus('mandatory')
nodeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 2), )
if mibBuilder.loadTexts: nodeStatusTable.setStatus('mandatory')
nodeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 2, 1), ).setIndexNames((0, "NEC-MIB", "nodeStatusIndex"))
if mibBuilder.loadTexts: nodeStatusEntry.setStatus('mandatory')
nodeStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: nodeStatusIndex.setStatus('mandatory')
nodeStatusPower = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("normal", 1), ("failure", 2), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusPower.setStatus('mandatory')
nodeStatusSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("act", 1), ("sby", 2), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusSwitchMode.setStatus('mandatory')
nodeStatusSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("normal", 1), ("failure", 2), ("diagnostics", 3), ("diagnosis-status-NG", 4), ("initializing", 5), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusSwitch.setStatus('mandatory')
nodePCMCIATable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 3), )
if mibBuilder.loadTexts: nodePCMCIATable.setStatus('mandatory')
nodePCMCIAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 3, 1), ).setIndexNames((0, "NEC-MIB", "nodeStatusIndex"), (0, "NEC-MIB", "nodePCMCIAIndex"))
if mibBuilder.loadTexts: nodePCMCIAEntry.setStatus('mandatory')
nodePCMCIAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: nodePCMCIAIndex.setStatus('mandatory')
nodePCMCIAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("normal", 1), ("failure", 2), ("initializing", 3), ("busy", 4), ("unknown", 5), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePCMCIAStatus.setStatus('mandatory')
nodePCMCIAType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("lan-card", 1), ("ata-card", 2), ("unknown", 3), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePCMCIAType.setStatus('mandatory')
nodeOpe = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 4))
nodeOpeSave = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeOpeSave.setStatus('mandatory')
nodeOpeSaveResult = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("succeed", 1), ("succeed-0", 2), ("succeed-1", 3), ("temporaryFailure", 4), ("nearend", 5), ("nearend-0", 6), ("nearend-0-failure-1", 7), ("nearend-1", 8), ("nearend-1-failure-0", 9), ("notReady", 10), ("ready", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeOpeSaveResult.setStatus('mandatory')
nodeOpeCopy = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noOperation", 1), ("copy-all-from-act", 2), ("copy-all-from-sby", 3), ("copy-config-from-act", 4), ("copy-config-from-sby", 5), ("copy-system-from-act", 6), ("copy-system-from-sby", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeOpeCopy.setStatus('mandatory')
nodeOpeCopyResult = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("succeed", 1), ("temporaryFailure", 2), ("nearend", 3), ("notReady", 4), ("ready", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeOpeCopyResult.setStatus('mandatory')
nodeOpeReset = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOperation", 1), ("reset-act", 2), ("reset-sby", 3), ("ach", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeOpeReset.setStatus('mandatory')
slotIfConfTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1), )
if mibBuilder.loadTexts: slotIfConfTable.setStatus('mandatory')
slotIfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1, 1), ).setIndexNames((0, "NEC-MIB", "slotIfConfIndex"))
if mibBuilder.loadTexts: slotIfConfEntry.setStatus('mandatory')
slotIfConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIfConfIndex.setStatus('mandatory')
slotIfConfPhysType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 99))).clone(namedValues=NamedValues(("other", 1), ("taxi-100M", 2), ("oc3c-SMF-Long", 3), ("oc3c-SMF-Short", 4), ("oc3c-MMF", 5), ("relay-6Mcel", 6), ("j2-6M-4M-3M", 7), ("utp-5", 8), ("oc12c-SMF-Type-A", 9), ("oc12c-SMF-Type-B", 10), ("ds3", 11), ("e3", 12), ("bts-1", 13), ("bts-4", 14), ("primary-1536K-1152K-768K-512K-384K-256K-192K", 15), ("ds1", 16), ("e1", 17), ("oc3c-POF", 18), ("sts3c-COAXIAL", 19), ("vod-RxHFC4M", 50), ("vod-TxHFC27M", 51), ("svr", 52), ("fr-ds1", 53), ("fr-e1", 54), ("dcs", 55), ("ce-ds3", 56), ("ce-ds1", 57), ("ce-e1", 58), ("ce-J2", 59), ("svr2", 60), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIfConfPhysType.setStatus('mandatory')
slotIfConfRev = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIfConfRev.setStatus('mandatory')
slotIfConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 99))).clone(namedValues=NamedValues(("other", 1), ("inService", 2), ("outOfService", 3), ("testing", 4), ("initializing", 5), ("installing", 6), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIfConfStatus.setStatus('mandatory')
slotIfConfBufferType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("other", 1), ("ph1-buffer", 2), ("ph2-buffer", 3), ("fr-buffer", 4), ("fr-buffer2", 5), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIfConfBufferType.setStatus('mandatory')
slotIfConfBufferRev = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIfConfBufferRev.setStatus('mandatory')
slotIfConfReset = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("notInstalled", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotIfConfReset.setStatus('mandatory')
slotIfConfResetResult = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("succeed", 1), ("other", 2), ("diagnostics", 3), ("unchangeableSlaveLine", 4), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIfConfResetResult.setStatus('mandatory')
class LinfFilterMaskVpi(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 12), )
class LinfFilterMaskVci(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 14), )
class LinfCellMappingMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("direct", 1), ("plcp", 2))

class LinfScramble(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class LinfLBO(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("low", 1), ("hi", 2), ("length-0-110", 3), ("length-110-220", 4), ("length-220-330", 5), ("length-330-440", 6), ("length-440-550", 7), ("length-550-660", 8), ("length-over660", 9))

class LinfFrameMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("c-bit", 1), ("m23", 2), ("g832-g804", 3), ("g751", 4), ("m13", 5), ("esf", 6), ("sf", 7))

class LinfMinVci(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 16383)

class LinfMaxVci(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 16383)

class LinfService(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unstructured", 1), ("structured", 2))

class LinfInterWorking(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("network", 1), ("service", 2))

class LinfVendor(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("notApplicable", 1), ("stratacom", 2), ("digital-equipment", 3), ("northan-telecom", 4), ("cisco-systems", 5))

class LinfFractionalType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unstructured", 1), ("fractional", 2))

class LinfFractionalSet(Integer32):
    pass

class LinfCasMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("notApplicable", 1), ("basic", 2), ("cas", 3))

class LinfCodingMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("hdb3", 1), ("ami", 2))

class LinfUnUsedParam(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1))
    namedValues = NamedValues(("unused", -1))

linfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1), )
if mibBuilder.loadTexts: linfStatusTable.setStatus('mandatory')
linfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1), ).setIndexNames((0, "NEC-MIB", "linfIndex"))
if mibBuilder.loadTexts: linfStatusEntry.setStatus('mandatory')
linfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfIndex.setStatus('mandatory')
linfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 80, 81, 82, 97, 98, 99))).clone(namedValues=NamedValues(("normal", 1), ("los", 2), ("lof", 3), ("loc", 4), ("ais-path", 5), ("ais-section", 6), ("yellow-section", 7), ("yellow-path", 8), ("lop", 9), ("ais", 10), ("payload-all-one", 11), ("rai", 12), ("oof", 13), ("idle", 14), ("rdi", 15), ("plcp-oof", 16), ("plcp-lof", 17), ("plcp-yellow", 18), ("red", 19), ("loss-of-64K-clock", 80), ("loss-of-8K-clock", 81), ("frequency-out-of-range", 82), ("failure", 97), ("administratively-down", 98), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfStatus.setStatus('mandatory')
linfLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("others", 1), ("normal", 2), ("localLoopBack", 3), ("remoteLoopBack", 4), ("notInstalled", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linfLoopBack.setStatus('mandatory')
linfConf = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 99))).clone(namedValues=NamedValues(("others", 1), ("private-UNI", 2), ("private-NNI", 3), ("public-UNI", 4), ("uni", 6), ("nni", 7), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfConf.setStatus('mandatory')
linfFwdAvailableBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfFwdAvailableBandWidth.setStatus('mandatory')
linfBkwdAvailableBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfBkwdAvailableBandWidth.setStatus('mandatory')
linfJ2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("not-leased-line", 1), ("type-3-Mbps", 2), ("type-4point5-Mbps", 3), ("type-6point3-Mbps", 4), ("notInstalled", 99))))
if mibBuilder.loadTexts: linfJ2Rate.setStatus('mandatory')
linfCacFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 1000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linfCacFactor.setStatus('mandatory')
linfLoopBackCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 99))).clone(namedValues=NamedValues(("succeed", 1), ("diagnosis", 2), ("failure", 3), ("notSupportedByPkg", 4), ("alreadyRegistered", 5), ("adminDown", 6), ("initializing", 7), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfLoopBackCause.setStatus('mandatory')
linfBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfBandWidth.setStatus('mandatory')
linfRecommendation = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 99))).clone(namedValues=NamedValues(("other", 1), ("atmForum", 2), ("itu", 3), ("ttc", 4), ("frameRelayForum", 5), ("itu-t", 6), ("ansi", 7), ("fourVendor", 8), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfRecommendation.setStatus('mandatory')
linfUnassignedIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("notApplicable", 1), ("unAssigned", 2), ("idle", 3), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfUnassignedIdle.setStatus('mandatory')
linfMaxActiveVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfMaxActiveVpiBits.setStatus('mandatory')
linfMaxActiveVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfMaxActiveVciBits.setStatus('mandatory')
linfPhysType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfPhysType.setStatus('mandatory')
linfParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfParam1.setStatus('mandatory')
linfParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfParam2.setStatus('mandatory')
linfParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfParam3.setStatus('mandatory')
linfParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfParam4.setStatus('mandatory')
linfParam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfParam5.setStatus('mandatory')
linfParam6 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfParam6.setStatus('mandatory')
linfParam7 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfParam7.setStatus('mandatory')
linfFifoConfTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 2), )
if mibBuilder.loadTexts: linfFifoConfTable.setStatus('mandatory')
linfFifoConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 2, 1), ).setIndexNames((0, "NEC-MIB", "linfFifoConfifIndex"), (0, "NEC-MIB", "linfFifoConfIndex"))
if mibBuilder.loadTexts: linfFifoConfEntry.setStatus('mandatory')
linfFifoConfifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: linfFifoConfifIndex.setStatus('mandatory')
linfFifoConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: linfFifoConfIndex.setStatus('mandatory')
linfFifoConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("overflow", 2))))
if mibBuilder.loadTexts: linfFifoConfStatus.setStatus('mandatory')
linfFifoConfPeekRate = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1412830)))
if mibBuilder.loadTexts: linfFifoConfPeekRate.setStatus('mandatory')
linfFifoConfSustainRate = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1412830)))
if mibBuilder.loadTexts: linfFifoConfSustainRate.setStatus('mandatory')
linfFifoConfMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1412830)))
if mibBuilder.loadTexts: linfFifoConfMaxBurstSize.setStatus('mandatory')
linfFifoConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))))
if mibBuilder.loadTexts: linfFifoConfRowStatus.setStatus('mandatory')
connPvc = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1))
connPvcOpe = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1))
connPvcOpeLowPort = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeLowPort.setStatus('mandatory')
connPvcOpeLowVpi = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16383), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeLowVpi.setStatus('mandatory')
connPvcOpeLowVci = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16383), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeLowVci.setStatus('mandatory')
connPvcOpeHighPort = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeHighPort.setStatus('mandatory')
connPvcOpeHighVpi = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16383), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeHighVpi.setStatus('mandatory')
connPvcOpeHighVci = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16383), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeHighVci.setStatus('mandatory')
connPvcOpeTopology = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("uni-directional-VCC", 1), ("bi-directional-VCC", 2), ("uni-directional-VPC", 3), ("bi-directional-VPC", 4), ("broadcast-VPC", 5), ("broadcast-VCC", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeTopology.setStatus('mandatory')
connPvcOpeTrafficType = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("traffic-CBR", 1), ("traffic-rt-VBR", 2), ("traffic-nrt-VBR", 3), ("traffic-ABR", 4), ("traffic-UBR", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeTrafficType.setStatus('mandatory')
connPvcOpeStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("allocate", 1), ("establish", 2), ("add", 3), ("delete", 4), ("remove", 5), ("free", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeStatus.setStatus('mandatory')
connPvcOpeCause = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("rowExisting", 1), ("allocateSucceed", 2), ("vpivciLowBusy", 3), ("vpivciHighBusy", 4), ("vpivciOutOfRange", 5), ("rateLowOverFlow", 6), ("rateHighOverFlow", 7), ("broadcastTableFull", 8), ("inconsistentVPVC", 9), ("lineDiagnosis", 10), ("missMatchTrfType", 11), ("illegalLowFileName", 12), ("illegalHighFileName", 13), ("illegalLowShaper", 14), ("illegalHighShaper", 15), ("illegalOperation", 16), ("parameterIsNotEnough", 17), ("diagnostics", 18), ("otherFailure", 19), ("illegalLowRateForUPC", 20), ("illegalHighRateForUPC", 21), ("noSpecifiedConnection", 22), ("noCevc", 23), ("noDlci", 24), ("illegalTopology", 25), ("noLowShaperForGateway", 26), ("noHighShaperForGateway", 27), ("noPvcLowShaperForGateway", 28), ("noPvcHighShaperForGateway", 29), ("missMatchTrfTypeLowShaperForGateway", 30), ("missMatchTrfTypeHighShaperForGateway", 31), ("leafSetAnotherLine", 32), ("insusfficientPCRofProfile", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcOpeCause.setStatus('mandatory')
connPvcOpeLowFifoIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeLowFifoIndex.setStatus('mandatory')
connPvcOpeHighFifoIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeHighFifoIndex.setStatus('mandatory')
connPvcOpeLowParam1 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 1), ("mode1", 2), ("mode2", 3), ("mode3", 4), ("mode4", 5), ("mode5", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeLowParam1.setStatus('mandatory')
connPvcOpeHighParam1 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 1), ("mode1", 2), ("mode2", 3), ("mode3", 4), ("mode4", 5), ("mode5", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeHighParam1.setStatus('mandatory')
connPvcOpeLowParam2 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 15), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(1, 10), ValueSizeConstraint(0, 0), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeLowParam2.setStatus('mandatory')
connPvcOpeHighParam2 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 16), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(1, 10), ValueSizeConstraint(0, 0), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeHighParam2.setStatus('mandatory')
connPvcTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2), )
if mibBuilder.loadTexts: connPvcTable.setStatus('mandatory')
connPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1), ).setIndexNames((0, "NEC-MIB", "connPvcPort"), (0, "NEC-MIB", "connPvcVpi"), (0, "NEC-MIB", "connPvcVci"), (0, "NEC-MIB", "connPvcDirection"), (0, "NEC-MIB", "connPvcIndex"))
if mibBuilder.loadTexts: connPvcEntry.setStatus('mandatory')
connPvcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: connPvcPort.setStatus('mandatory')
connPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: connPvcVpi.setStatus('mandatory')
connPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: connPvcVci.setStatus('mandatory')
connPvcDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("in-out", 3), ("multi-out", 4), ("multi-in", 5))))
if mibBuilder.loadTexts: connPvcDirection.setStatus('mandatory')
connPvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 5), Integer32())
if mibBuilder.loadTexts: connPvcIndex.setStatus('mandatory')
connPvcContrastPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastPort.setStatus('mandatory')
connPvcContrastVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastVpi.setStatus('mandatory')
connPvcContrastVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastVci.setStatus('mandatory')
connPvcTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("uni-directional-VCC", 1), ("bi-directional-VCC", 2), ("uni-directional-VPC", 3), ("bi-directional-VPC", 4), ("broadcast-VPC", 5), ("broadcast-VCC", 6), ("gateway", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcTopology.setStatus('mandatory')
connPvcTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("traffic-CBR", 1), ("traffic-rt-VBR", 2), ("traffic-nrt-VBR", 3), ("traffic-ABR", 4), ("traffic-UBR", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcTrafficType.setStatus('mandatory')
connPvcFifoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcFifoIndex.setStatus('mandatory')
connPvcContrastFifoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastFifoIndex.setStatus('mandatory')
connPvcTrfConf = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("entry", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcTrfConf.setStatus('mandatory')
connPvcTrfResult = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("entrySucceed", 2), ("alreadyEntry", 3), ("tableOverflow", 4), ("removeSucceed", 5), ("notEntry", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcTrfResult.setStatus('mandatory')
connPvcParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 1), ("mode1", 2), ("mode2", 3), ("mode3", 4), ("mode4", 5), ("mode5", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcParam1.setStatus('mandatory')
connPvcContrastParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 1), ("mode1", 2), ("mode2", 3), ("mode3", 4), ("mode4", 5), ("mode5", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastParam1.setStatus('mandatory')
connPvcParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 17), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(1, 10), ValueSizeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcParam2.setStatus('mandatory')
connPvcContrastParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 18), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(1, 10), ValueSizeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastParam2.setStatus('mandatory')
connPvcParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcParam3.setStatus('mandatory')
connPvcContrastParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastParam3.setStatus('mandatory')
connPvcParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcParam4.setStatus('mandatory')
connPvcContrastParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastParam4.setStatus('mandatory')
connPvcParam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcParam5.setStatus('mandatory')
connPvcContrastParam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastParam5.setStatus('mandatory')
connPvcParam6 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcParam6.setStatus('mandatory')
connPvcContrastParam6 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastParam6.setStatus('mandatory')
connPvcParam7 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 27), Integer32())
if mibBuilder.loadTexts: connPvcParam7.setStatus('mandatory')
connPvcContrastParam7 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 28), Integer32())
if mibBuilder.loadTexts: connPvcContrastParam7.setStatus('mandatory')
connPvcTrfTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 3), )
if mibBuilder.loadTexts: connPvcTrfTable.setStatus('mandatory')
connPvcTrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 3, 1), ).setIndexNames((0, "NEC-MIB", "connPvcPort"), (0, "NEC-MIB", "connPvcVpi"), (0, "NEC-MIB", "connPvcVci"), (0, "NEC-MIB", "connPvcDirection"), (0, "NEC-MIB", "connPvcIndex"))
if mibBuilder.loadTexts: connPvcTrfEntry.setStatus('mandatory')
connPvcTrfInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcTrfInCells.setStatus('mandatory')
connPvcTrfInCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcTrfInCellsCounters.setStatus('mandatory')
connPvcTrfOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcTrfOutCells.setStatus('mandatory')
connPvcTrfOutCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcTrfOutCellsCounters.setStatus('mandatory')
connPvcTrfInDropCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcTrfInDropCells.setStatus('mandatory')
connPvcTrfInDropCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcTrfInDropCellsCounters.setStatus('mandatory')
connConf = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2))
connConfNode = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 1))
connConfNodePvcs = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConfNodePvcs.setStatus('mandatory')
connConfNodeSvcs = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConfNodeSvcs.setStatus('mandatory')
connConfNodeSoftPvcs = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConfNodeSoftPvcs.setStatus('mandatory')
connConfNodeTrafClear = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allClear", 1), ("noOperation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connConfNodeTrafClear.setStatus('mandatory')
connConfNodeTrafs = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConfNodeTrafs.setStatus('mandatory')
connConfNodeCompleteSvcs = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConfNodeCompleteSvcs.setStatus('mandatory')
connConfNodeUnCompleteSvcs = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConfNodeUnCompleteSvcs.setStatus('mandatory')
connConfIfTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 2), )
if mibBuilder.loadTexts: connConfIfTable.setStatus('mandatory')
connConfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: connConfIfEntry.setStatus('mandatory')
connConfIfPvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConfIfPvcs.setStatus('mandatory')
connConfIfSvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConfIfSvcs.setStatus('mandatory')
connConfIfSoftPvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConfIfSoftPvcs.setStatus('mandatory')
connRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3))
class DstAtmAddressFormat(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2))
    namedValues = NamedValues(("noWriting", -1), ("e-164", 1), ("nsap", 2))

class DstAtmAddressLength(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(4, 160), ValueRangeConstraint(-1, -1), )
class DstAtmAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 20)

class DstPrimaryIfIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(1, 99), ValueRangeConstraint(-1, -1), )
class DstPrimaryVPI(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 4095), ValueRangeConstraint(-1, -1), )
class DstSecondaryIfIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(1, 99), ValueRangeConstraint(-1, -1), )
class DstSecondaryVPI(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 4095), ValueRangeConstraint(-1, -1), )
connRouteOpe = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1))
connRouteOpeStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allocate", 1), ("add", 2), ("delete", 3), ("free", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeStatus.setStatus('mandatory')
class ConnRouteOpeFailureCause(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("noWriting", -1), ("other", 1), ("allocateSucceed", 2), ("tableIsFull", 3), ("parameterIsNotEnough", 4), ("specifiedAddressIsIllegal", 5), ("specifiedAddressIsAlreadyExisting", 6), ("specifiedAddressIsNotExisting", 7))

connRouteOpeFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 2), ConnRouteOpeFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteOpeFailureCause.setStatus('mandatory')
connRouteOpeAddressFormat = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 3), DstAtmAddressFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeAddressFormat.setStatus('mandatory')
connRouteOpeAddressLength = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 4), DstAtmAddressLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeAddressLength.setStatus('mandatory')
connRouteOpeAddress = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 5), DstAtmAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeAddress.setStatus('mandatory')
connRouteOpePrimaryIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 6), DstPrimaryIfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpePrimaryIfIndex.setStatus('mandatory')
connRouteOpePrimaryVPI = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 7), DstPrimaryVPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpePrimaryVPI.setStatus('mandatory')
connRouteOpeSecondaryIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 8), DstSecondaryIfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeSecondaryIfIndex.setStatus('mandatory')
connRouteOpeSecondaryVPI = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 9), DstSecondaryVPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeSecondaryVPI.setStatus('mandatory')
connRouteOpeTertiaryIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 10), DstSecondaryIfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeTertiaryIfIndex.setStatus('mandatory')
connRouteOpeTertiaryVPI = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 11), DstSecondaryVPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeTertiaryVPI.setStatus('mandatory')
connRouteOpeFourthryIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 12), DstSecondaryIfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeFourthryIfIndex.setStatus('mandatory')
connRouteOpeFourthryVPI = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 13), DstSecondaryVPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeFourthryVPI.setStatus('mandatory')
connRouteOpeFifthryIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 14), DstSecondaryIfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeFifthryIfIndex.setStatus('mandatory')
connRouteOpeFifthryVPI = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 15), DstSecondaryVPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeFifthryVPI.setStatus('mandatory')
connRouteOpeSixthryIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 16), DstSecondaryIfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeSixthryIfIndex.setStatus('mandatory')
connRouteOpeSixthryVPI = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 17), DstSecondaryVPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeSixthryVPI.setStatus('mandatory')
connRouteOpeSeventhryIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 18), DstSecondaryIfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeSeventhryIfIndex.setStatus('mandatory')
connRouteOpeSeventhryVPI = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 19), DstSecondaryVPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeSeventhryVPI.setStatus('mandatory')
connRouteTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2), )
if mibBuilder.loadTexts: connRouteTable.setStatus('mandatory')
connRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1), ).setIndexNames((0, "NEC-MIB", "connRouteAtmAddressFormat"), (0, "NEC-MIB", "connRouteAtmAddressLength"), (0, "NEC-MIB", "connRouteAtmAddress"))
if mibBuilder.loadTexts: connRouteEntry.setStatus('mandatory')
connRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteType.setStatus('mandatory')
connRoutePrimaryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 2), DstPrimaryIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRoutePrimaryIfIndex.setStatus('mandatory')
connRoutePrimaryVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 3), DstPrimaryVPI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRoutePrimaryVPI.setStatus('mandatory')
connRouteSecondaryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 4), DstSecondaryIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteSecondaryIfIndex.setStatus('mandatory')
connRouteSecondaryVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 5), DstSecondaryVPI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteSecondaryVPI.setStatus('mandatory')
connRouteTertiaryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 6), DstSecondaryIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteTertiaryIfIndex.setStatus('mandatory')
connRouteTertiaryVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 7), DstSecondaryVPI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteTertiaryVPI.setStatus('mandatory')
connRouteFourthryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 8), DstSecondaryIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteFourthryIfIndex.setStatus('mandatory')
connRouteFourthryVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 9), DstSecondaryVPI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteFourthryVPI.setStatus('mandatory')
connRouteFifthryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 10), DstSecondaryIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteFifthryIfIndex.setStatus('mandatory')
connRouteFifthryVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 11), DstSecondaryVPI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteFifthryVPI.setStatus('mandatory')
connRouteSixthryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 12), DstSecondaryIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteSixthryIfIndex.setStatus('mandatory')
connRouteSixthryVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 13), DstSecondaryVPI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteSixthryVPI.setStatus('mandatory')
connRouteSeventhryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 14), DstSecondaryIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteSeventhryIfIndex.setStatus('mandatory')
connRouteSeventhryVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 15), DstSecondaryVPI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteSeventhryVPI.setStatus('mandatory')
connRoutePrimaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRoutePrimaryStatus.setStatus('mandatory')
connRoutePrimaryCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 99))).clone(namedValues=NamedValues(("normal", 0), ("other", 1), ("outOfService", 2), ("testing", 3), ("lineInterface-Down", 4), ("lineInterface-Failure", 5), ("sw-Engine-Failure", 6), ("sw-Engine-SwapOUT", 7), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRoutePrimaryCause.setStatus('mandatory')
connRouteAtmAddressFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 18), DstAtmAddressFormat())
if mibBuilder.loadTexts: connRouteAtmAddressFormat.setStatus('mandatory')
connRouteAtmAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 19), DstAtmAddressLength())
if mibBuilder.loadTexts: connRouteAtmAddressLength.setStatus('mandatory')
connRouteAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 20), DstAtmAddress())
if mibBuilder.loadTexts: connRouteAtmAddress.setStatus('mandatory')
connSoftPvcIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcIndexNext.setStatus('mandatory')
connSoftPvcTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5), )
if mibBuilder.loadTexts: connSoftPvcTable.setStatus('mandatory')
connSoftPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1), ).setIndexNames((0, "NEC-MIB", "connSoftPvcIndex"))
if mibBuilder.loadTexts: connSoftPvcEntry.setStatus('mandatory')
connSoftPvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcIndex.setStatus('mandatory')
connSoftPvcTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("bi-directional-VCC", 2), ("bi-directional-VPC", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcTopology.setStatus('mandatory')
connSoftPvcTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("traffic-CBR", 1), ("traffic-rt-VBR", 2), ("traffic-nrt-VBR", 3), ("traffic-ABR", 4), ("traffic-UBR", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcTrafficType.setStatus('mandatory')
connSoftPvcEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("calling", 1), ("called", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcEndpointType.setStatus('mandatory')
connSoftPvcRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcRetry.setStatus('mandatory')
class ConnSoftPvcSrcAtmAddressFormat(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2))
    namedValues = NamedValues(("noWriting", -1), ("e-164", 1), ("nsap", 2))

connSoftPvcSrcAtmAddressFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 6), ConnSoftPvcSrcAtmAddressFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcSrcAtmAddressFormat.setStatus('mandatory')
connSoftPvcSrcAtmAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(4, 160), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcSrcAtmAddressLength.setStatus('mandatory')
connSoftPvcSrcAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcSrcAtmAddress.setStatus('mandatory')
connSoftPvcSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 99), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcSrcIfIndex.setStatus('mandatory')
connSoftPvcSrcVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcSrcVPI.setStatus('mandatory')
connSoftPvcSrcVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcSrcVCI.setStatus('mandatory')
class ConnSoftPvcDstAtmAddressFormat(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2))
    namedValues = NamedValues(("noWriting", -1), ("e-164", 1), ("nsap", 2))

connSoftPvcDstAtmAddressFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 12), ConnSoftPvcDstAtmAddressFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcDstAtmAddressFormat.setStatus('mandatory')
connSoftPvcDstAtmAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(4, 160), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcDstAtmAddressLength.setStatus('mandatory')
connSoftPvcDstAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcDstAtmAddress.setStatus('mandatory')
connSoftPvcDstIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 99), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcDstIfIndex.setStatus('mandatory')
connSoftPvcDstVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcDstVPI.setStatus('mandatory')
connSoftPvcDstVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcDstVCI.setStatus('mandatory')
connSoftPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcRowStatus.setStatus('mandatory')
connSoftPvcCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("rowExisting", 1), ("vpivciSrcBusy", 2), ("vpivciDstBusy", 3), ("vpivciOutOfRange", 4), ("rateSrcOverFlow", 5), ("rateDstOverFlow", 6), ("dataTableFull", 7), ("inconsistentVPVC", 8), ("lineDiagnosis", 9), ("missMatchTrfType", 10), ("illegalSrcFileName", 11), ("illegalDstFileName", 12), ("lineOutOfOrder", 13), ("illegalSrcShaper", 14), ("illegalOperation", 15), ("parameterIsNotEnough", 16), ("diagnostics", 17), ("otherFailure", 18), ("illegalSrcRateForUPC", 19), ("noCevc", 20), ("noDlci", 21), ("noSrcShaperForGateway", 22), ("noPvcSrcShaperForGateway", 23), ("missMatchTrfTypeSrcShaperForGateway", 24), ("insusfficientPCRofProfile", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcCause.setStatus('mandatory')
connSoftPvcRestRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcRestRetry.setStatus('mandatory')
connSoftPvcSrcFifoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcSrcFifoIndex.setStatus('mandatory')
connSoftPvcDstFifoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcDstFifoIndex.setStatus('mandatory')
connSoftPvcNodeKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("model5", 1), ("model7", 2), ("model5E", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcNodeKind.setStatus('mandatory')
connSoftPvcSrcParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 1), ("mode1", 2), ("mode2", 3), ("mode3", 4), ("mode4", 5), ("mode5", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcSrcParam1.setStatus('mandatory')
connSoftPvcDstParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 1), ("mode1", 2), ("mode2", 3), ("mode3", 4), ("mode4", 5), ("mode5", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcDstParam1.setStatus('mandatory')
connSoftPvcSrcParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 26), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(1, 10), ValueSizeConstraint(0, 0), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcSrcParam2.setStatus('mandatory')
connSoftPvcDstParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 27), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(1, 10), ValueSizeConstraint(0, 0), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcDstParam2.setStatus('mandatory')
connSoftPvcSrcParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcSrcParam3.setStatus('mandatory')
connSoftPvcDstParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcDstParam3.setStatus('mandatory')
connSoftPvcSrcParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcSrcParam4.setStatus('mandatory')
connSoftPvcDstParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcDstParam4.setStatus('mandatory')
connSoftPvcSrcParam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcSrcParam5.setStatus('mandatory')
connSoftPvcDstParam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcDstParam5.setStatus('mandatory')
connSoftPvcSrcParam6 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcSrcParam6.setStatus('mandatory')
connSoftPvcDstParam6 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcDstParam6.setStatus('mandatory')
connSoftPvcSrcParam7 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 36), Integer32())
if mibBuilder.loadTexts: connSoftPvcSrcParam7.setStatus('mandatory')
connSoftPvcDstParam7 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 37), Integer32())
if mibBuilder.loadTexts: connSoftPvcDstParam7.setStatus('mandatory')
class ConnSoftPvcEstSrcInfIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 128)

connSoftPvcEstablishedSrcInfTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 6), )
if mibBuilder.loadTexts: connSoftPvcEstablishedSrcInfTable.setStatus('mandatory')
connSoftPvcEstablishedSrcInfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 6, 1), ).setIndexNames((0, "NEC-MIB", "connSoftPvcEstSrcInfIndex"))
if mibBuilder.loadTexts: connSoftPvcEstablishedSrcInfEntry.setStatus('mandatory')
connSoftPvcEstablishedSrcInf = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 6, 1, 1), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcEstablishedSrcInf.setStatus('mandatory')
connSoftPvcEstSrcInfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 6, 1, 2), ConnSoftPvcEstSrcInfIndex())
if mibBuilder.loadTexts: connSoftPvcEstSrcInfIndex.setStatus('mandatory')
connOam = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7))
connOamOpe = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1))
connOamOpeStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allocate", 1), ("add", 2), ("delete", 3), ("free", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpeStatus.setStatus('mandatory')
connOamOpeCause = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("succeed", 2), ("parameterIsNotEnough", 3), ("tableIsFull", 4), ("illegalPoint", 5), ("illegalMode", 6), ("illegalSection", 7), ("illegalPort", 8), ("illegalVpiVci", 9), ("invalidBufferType", 10), ("noSuchConnection", 11), ("alreadyRegistered", 12), ("notExisting", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamOpeCause.setStatus('mandatory')
connOamOpePoint = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("end-point", 1), ("connecting-point", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpePoint.setStatus('mandatory')
connOamOpeMode = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("f4", 1), ("f5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpeMode.setStatus('mandatory')
connOamOpeSection = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("segment", 1), ("end-to-end", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpeSection.setStatus('mandatory')
connOamOpePort1 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpePort1.setStatus('mandatory')
connOamOpePort2 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpePort2.setStatus('mandatory')
connOamOpeVpi1 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpeVpi1.setStatus('mandatory')
connOamOpeVpi2 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpeVpi2.setStatus('mandatory')
connOamOpeVci1 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpeVci1.setStatus('mandatory')
connOamOpeVci2 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpeVci2.setStatus('mandatory')
connOamTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2), )
if mibBuilder.loadTexts: connOamTable.setStatus('mandatory')
connOamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1), ).setIndexNames((0, "NEC-MIB", "connOamPort"), (0, "NEC-MIB", "connOamIndex"))
if mibBuilder.loadTexts: connOamEntry.setStatus('mandatory')
connOamPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: connOamPort.setStatus('mandatory')
connOamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 144)))
if mibBuilder.loadTexts: connOamIndex.setStatus('mandatory')
connOamContrastPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamContrastPort.setStatus('mandatory')
connOamVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamVpi.setStatus('mandatory')
connOamContrastVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamContrastVpi.setStatus('mandatory')
connOamVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamVci.setStatus('mandatory')
connOamContrastVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamContrastVci.setStatus('mandatory')
connOamPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("end-point", 1), ("connecting-point", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamPoint.setStatus('mandatory')
connOamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("f4", 1), ("f5", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamMode.setStatus('mandatory')
connOamSection = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("segment", 1), ("end-to-end", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamSection.setStatus('mandatory')
connOamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("receive-AIS", 3), ("receive-RDI", 4), ("failure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamStatus.setStatus('mandatory')
connOamDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("normal", 1), ("los", 2), ("lof", 3), ("loc", 4), ("ais-path", 5), ("ais-section", 6), ("yellow-section", 7), ("yellow-path", 8), ("lop", 9), ("ais", 10), ("payload-all-one", 11), ("rai", 12), ("oof", 13), ("idle", 14), ("rdi", 15), ("plcp-oof", 16), ("plcp-lof", 17), ("plcp-yellow", 18), ("red", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamDefectType.setStatus('mandatory')
connOamDefectNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamDefectNodeID.setStatus('mandatory')
connLoop = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8))
connLoopOpe = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1))
connLoopOpeStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allocate", 1), ("action", 2), ("endtest", 3), ("free", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpeStatus.setStatus('mandatory')
connLoopOpeCause = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("succeed", 1), ("abort", 2), ("other", 3), ("vpivciOutOfRange", 4), ("parameterFailed", 5), ("admindown", 6), ("nonePkg", 7), ("noneBuffer2", 8), ("lineLoopback", 9), ("resetSlot", 10), ("noneLoopBackId", 11), ("execute", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connLoopOpeCause.setStatus('mandatory')
connLoopOpeMode = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("f4", 1), ("f5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpeMode.setStatus('mandatory')
connLoopOpeBase = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("segment", 1), ("end-end", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpeBase.setStatus('mandatory')
connLoopOpeLoopBackPointNodeId = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpeLoopBackPointNodeId.setStatus('mandatory')
connLoopOpeCorrelationTag = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpeCorrelationTag.setStatus('mandatory')
connLoopOpeCount = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpeCount.setStatus('mandatory')
connLoopOpePort = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpePort.setStatus('mandatory')
connLoopOpeVpi = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpeVpi.setStatus('mandatory')
connLoopOpeVci = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpeVci.setStatus('mandatory')
connLoopOpeNormalEndCount = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connLoopOpeNormalEndCount.setStatus('mandatory')
connLoopOpeAbnormalEndCount = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connLoopOpeAbnormalEndCount.setStatus('mandatory')
connLoopOpeAbortCount = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connLoopOpeAbortCount.setStatus('mandatory')
connLoopOpeLoopBackPointIdLength = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpeLoopBackPointIdLength.setStatus('mandatory')
connProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9))
class ConnProfileIndex(Integer32):
    pass

connProfileIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 1), ConnProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connProfileIndexNext.setStatus('mandatory')
connProfileTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2), )
if mibBuilder.loadTexts: connProfileTable.setStatus('mandatory')
connProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1), ).setIndexNames((0, "NEC-MIB", "connProfileIndex"))
if mibBuilder.loadTexts: connProfileEntry.setStatus('mandatory')
connProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1, 1), ConnProfileIndex())
if mibBuilder.loadTexts: connProfileIndex.setStatus('mandatory')
connProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfileRowStatus.setStatus('mandatory')
connProfileCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("rowExisting", 1), ("otherFailure", 2), ("inconsistentEpd", 3), ("parameterNotEnough", 4), ("alreadyExist", 5), ("duplicateName", 6), ("inconsistentRate", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connProfileCause.setStatus('mandatory')
connProfileTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("traffic-CBR", 1), ("traffic-rt-VBR", 2), ("traffic-nrt-VBR", 3), ("traffic-ABR", 4), ("traffic-UBR", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfileTrafficType.setStatus('mandatory')
connProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1, 5), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 10), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfileName.setStatus('mandatory')
connProfileParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 1412830), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfileParam1.setStatus('mandatory')
connProfileParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 1412830), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfileParam2.setStatus('mandatory')
connProfileParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 1412830), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfileParam3.setStatus('mandatory')
connProfileParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfileParam4.setStatus('mandatory')
connProfileName2Index = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 3), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 10), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfileName2Index.setStatus('mandatory')
connProfileName2IndexResult = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 4), ConnProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connProfileName2IndexResult.setStatus('mandatory')
connSvcTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 10), )
if mibBuilder.loadTexts: connSvcTable.setStatus('mandatory')
connSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "NEC-MIB", "connSvcIndex"))
if mibBuilder.loadTexts: connSvcEntry.setStatus('mandatory')
connSvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: connSvcIndex.setStatus('mandatory')
connSvcInf = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 10, 1, 2), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSvcInf.setStatus('mandatory')
connCe = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11))
connCeVc = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1))
connCeVcTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1), )
if mibBuilder.loadTexts: connCeVcTable.setStatus('mandatory')
connCeVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1), ).setIndexNames((0, "NEC-MIB", "connCeVcPort"), (0, "NEC-MIB", "connCeVcVci"))
if mibBuilder.loadTexts: connCeVcEntry.setStatus('mandatory')
connCeVcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: connCeVcPort.setStatus('mandatory')
connCeVcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 383)))
if mibBuilder.loadTexts: connCeVcVci.setStatus('mandatory')
connCeVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcRowStatus.setStatus('mandatory')
connCeVcCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("rowExisting", 1), ("otherFailure", 2), ("parameterNotEnough", 3), ("illegalpkg", 4), ("vcsOverFllow", 5), ("tssOverFllow", 6), ("alreadyAssignedTs", 7), ("inconsistentTss", 8), ("illegalTimeslot", 9), ("illegalPort", 10), ("illegalVci", 11), ("illegalUpPartialFillSize", 12), ("illegalDownPartialFillSize", 13), ("illegalCdvt", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connCeVcCause.setStatus('mandatory')
connCeVcDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bi", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcDirection.setStatus('mandatory')
connCeVcUpPartialFillSize = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 47), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcUpPartialFillSize.setStatus('mandatory')
connCeVcDownPartialFillSize = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 47), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcDownPartialFillSize.setStatus('mandatory')
connCeVcCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcCondition.setStatus('mandatory')
connCeVcCDVT = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 7218), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcCDVT.setStatus('mandatory')
connCeVcUpPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 118979), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connCeVcUpPCR.setStatus('mandatory')
connCeVcDownPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 118979), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connCeVcDownPCR.setStatus('mandatory')
connCeVcUpTimeSlot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcUpTimeSlot1.setStatus('mandatory')
connCeVcDownTimeSlot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcDownTimeSlot1.setStatus('mandatory')
connCeVcUpTimeSlot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcUpTimeSlot2.setStatus('mandatory')
connCeVcDownTimeSlot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcDownTimeSlot2.setStatus('mandatory')
connCeVcUpTimeSlot3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcUpTimeSlot3.setStatus('mandatory')
connCeVcDownTimeSlot3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcDownTimeSlot3.setStatus('mandatory')
connFr = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12))
connFrDlci = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1))
connFrDlciTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1), )
if mibBuilder.loadTexts: connFrDlciTable.setStatus('mandatory')
connFrDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1, 1), ).setIndexNames((0, "NEC-MIB", "connFrDlciPort"), (0, "NEC-MIB", "connFrDlciIndex"))
if mibBuilder.loadTexts: connFrDlciEntry.setStatus('mandatory')
connFrDlciPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: connFrDlciPort.setStatus('mandatory')
connFrDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007)))
if mibBuilder.loadTexts: connFrDlciIndex.setStatus('mandatory')
connFrDlciRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrDlciRowStatus.setStatus('mandatory')
connFrDlciCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("rowExisting", 1), ("otherFailure", 2), ("noFrProfile", 3), ("inconsistentInterWorking", 4), ("totalCIROverFlow", 5), ("lineDiagnosticsFailure", 6), ("illegalPort", 7), ("illegalDlci", 8), ("pvcsOverFlow", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connFrDlciCause.setStatus('mandatory')
connFrDlciFrProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 10), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrDlciFrProfile.setStatus('mandatory')
connFrDlciPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connFrDlciPCR.setStatus('mandatory')
connFrDlciSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connFrDlciSCR.setStatus('mandatory')
connFrDlciMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connFrDlciMBS.setStatus('mandatory')
connFrProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2))
class ConnFrProfileIndex(Integer32):
    pass

connFrProfileIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 1), ConnFrProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connFrProfileIndexNext.setStatus('mandatory')
connFrProfileTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2), )
if mibBuilder.loadTexts: connFrProfileTable.setStatus('mandatory')
connFrProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1), ).setIndexNames((0, "NEC-MIB", "connFrProfileIndex"))
if mibBuilder.loadTexts: connFrProfileEntry.setStatus('mandatory')
connFrProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 1), ConnFrProfileIndex())
if mibBuilder.loadTexts: connFrProfileIndex.setStatus('mandatory')
connFrProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileRowStatus.setStatus('mandatory')
connFrProfileCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("rowExisting", 1), ("otherFailure", 2), ("parameterNotEnough", 3), ("alreadyExist", 4), ("duplicateName", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connFrProfileCause.setStatus('mandatory')
connFrProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 10), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileName.setStatus('mandatory')
connFrProfileInterworkingType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("service", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileInterworkingType.setStatus('mandatory')
connFrProfileCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 1984), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileCIR.setStatus('mandatory')
connFrProfileDEtoCLP = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mode1", 1), ("mode2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileDEtoCLP.setStatus('mandatory')
connFrProfileCLPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileCLPValue.setStatus('mandatory')
connFrProfileCLPtoDE = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mode1", 1), ("mode2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileCLPtoDE.setStatus('mandatory')
connFrProfileDEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileDEValue.setStatus('mandatory')
connFrProfileCapsulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("transparent", 2), ("translation", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileCapsulationMode.setStatus('mandatory')
connFrProfileCongestionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("mode1", 2), ("mode2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileCongestionMode.setStatus('mandatory')
connFrProfileName2Index = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 3), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 10), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileName2Index.setStatus('mandatory')
connFrProfileName2IndexResult = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 4), ConnFrProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connFrProfileName2IndexResult.setStatus('mandatory')
perfTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perfTrapEnable.setStatus('mandatory')
perfIfTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2), )
if mibBuilder.loadTexts: perfIfTable.setStatus('mandatory')
perfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1), ).setIndexNames((0, "NEC-MIB", "perfIfIndex"))
if mibBuilder.loadTexts: perfIfEntry.setStatus('mandatory')
perfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: perfIfIndex.setStatus('mandatory')
perfIfReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfReceivedCells.setStatus('mandatory')
perfIfReceivedCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfReceivedCellsCounters.setStatus('mandatory')
perfIfTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfTransmittedCells.setStatus('mandatory')
perfIfTransmittedCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfTransmittedCellsCounters.setStatus('mandatory')
perfIfMisDelivdCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfMisDelivdCells.setStatus('mandatory')
perfIfMisDelivdCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfMisDelivdCellsCounters.setStatus('mandatory')
perfIfThresholdExcessCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfThresholdExcessCells.setStatus('mandatory')
perfIfThresholdExcessCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfThresholdExcessCellsCounters.setStatus('mandatory')
perfIfUpcErrorCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfUpcErrorCells.setStatus('mandatory')
perfIfUpcErrorCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfUpcErrorCellsCounters.setStatus('mandatory')
perfIfSlotTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3), )
if mibBuilder.loadTexts: perfIfSlotTable.setStatus('mandatory')
perfIfSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1), ).setIndexNames((0, "NEC-MIB", "slotIfConfIndex"))
if mibBuilder.loadTexts: perfIfSlotEntry.setStatus('mandatory')
perfIfSlotReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotReceivedCells.setStatus('mandatory')
perfIfSlotTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotTransmittedCells.setStatus('mandatory')
perfIfSlotInDropCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotInDropCells.setStatus('mandatory')
perfIfSlotReceivedCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotReceivedCellsCounters.setStatus('mandatory')
perfIfSlotTransmittedCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotTransmittedCellsCounters.setStatus('mandatory')
perfIfSlotInDropCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotInDropCellsCounters.setStatus('mandatory')
perfIfSlotHCThresholdExcessCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotHCThresholdExcessCells.setStatus('mandatory')
perfIfSlotThresholdExcessCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotThresholdExcessCells.setStatus('mandatory')
perfIfSlotHCUpcErrorCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotHCUpcErrorCells.setStatus('mandatory')
perfIfSlotUpcErrorCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotUpcErrorCells.setStatus('mandatory')
perfIfPhysTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4), )
if mibBuilder.loadTexts: perfIfPhysTable.setStatus('mandatory')
perfIfPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1), ).setIndexNames((0, "NEC-MIB", "perfIfPhysPort"))
if mibBuilder.loadTexts: perfIfPhysEntry.setStatus('mandatory')
perfIfPhysPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: perfIfPhysPort.setStatus('mandatory')
perfIfPhysHCHecErorrs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCHecErorrs.setStatus('mandatory')
perfIfPhysHecErorrs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHecErorrs.setStatus('mandatory')
perfIfPhysHCHecDropCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCHecDropCells.setStatus('mandatory')
perfIfPhysHecDropCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHecDropCells.setStatus('mandatory')
perfIfPhysHCB1Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCB1Errors.setStatus('mandatory')
perfIfPhysB1Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysB1Errors.setStatus('mandatory')
perfIfPhysHCB2Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCB2Errors.setStatus('mandatory')
perfIfPhysB2Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysB2Errors.setStatus('mandatory')
perfIfPhysHCB3Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCB3Errors.setStatus('mandatory')
perfIfPhysB3Errors = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysB3Errors.setStatus('mandatory')
perfIfPhysHCPathFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCPathFEBEs.setStatus('mandatory')
perfIfPhysPathFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysPathFEBEs.setStatus('mandatory')
perfIfPhysHCLineFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCLineFEBEs.setStatus('mandatory')
perfIfPhysLineFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysLineFEBEs.setStatus('mandatory')
perfIfPhysHCFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCFramingErrors.setStatus('mandatory')
perfIfPhysFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysFramingErrors.setStatus('mandatory')
perfIfPhysHCReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCReceivedCells.setStatus('mandatory')
perfIfPhysReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysReceivedCells.setStatus('mandatory')
perfIfPhysHCTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCTransmittedCells.setStatus('mandatory')
perfIfPhysTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysTransmittedCells.setStatus('mandatory')
perfIfPhysHCIdelUnassignedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCIdelUnassignedCells.setStatus('mandatory')
perfIfPhysIdelUnassignedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysIdelUnassignedCells.setStatus('mandatory')
perfIfPhysHCFEBEErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCFEBEErrors.setStatus('mandatory')
perfIfPhysFEBEErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysFEBEErrors.setStatus('mandatory')
perfIfPhysHCFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCFEBEs.setStatus('mandatory')
perfIfPhysFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysFEBEs.setStatus('mandatory')
perfIfPhysHCPathParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCPathParityErrors.setStatus('mandatory')
perfIfPhysPathParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysPathParityErrors.setStatus('mandatory')
perfIfPhysHCParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCParityErrors.setStatus('mandatory')
perfIfPhysParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysParityErrors.setStatus('mandatory')
perfIfPhysHCSEZs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCSEZs.setStatus('mandatory')
perfIfPhysSEZs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysSEZs.setStatus('mandatory')
perfIfPhysHCBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCBitErrors.setStatus('mandatory')
perfIfPhysBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysBitErrors.setStatus('mandatory')
perfIfPhysHCLcvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCLcvErrors.setStatus('mandatory')
perfIfPhysLcvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysLcvErrors.setStatus('mandatory')
perfIfPhysHCBip8Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCBip8Errors.setStatus('mandatory')
perfIfPhysBip8Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysBip8Errors.setStatus('mandatory')
perfIfPhysHCIecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCIecErrors.setStatus('mandatory')
perfIfPhysIecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysIecErrors.setStatus('mandatory')
perfIfPhysHCFramingPatternErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 42), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCFramingPatternErrors.setStatus('mandatory')
perfIfPhysFramingPatternErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysFramingPatternErrors.setStatus('mandatory')
perfIfPhysHCFramingBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCFramingBitErrors.setStatus('mandatory')
perfIfPhysFramingBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysFramingBitErrors.setStatus('mandatory')
perfIfPhysHCCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCCrcErrors.setStatus('mandatory')
perfIfPhysCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysCrcErrors.setStatus('mandatory')
scaleStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allocate", 1), ("install", 2), ("backup", 3), ("free", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scaleStatus.setStatus('mandatory')
scaleCause = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("start", 2), ("succeed", 3), ("nearend", 4), ("timeOut", 5), ("fileNotFound", 6), ("accessViolate", 7), ("checksumError", 8), ("noData", 9), ("sbyAccessError", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scaleCause.setStatus('mandatory')
scaleDataType = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("system", 1), ("config", 2), ("bill-cdr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scaleDataType.setStatus('mandatory')
scaleTarget = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scaleTarget.setStatus('mandatory')
scaleFileName = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 6, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scaleFileName.setStatus('mandatory')
scaleSwSide = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("act", 1), ("sby", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scaleSwSide.setStatus('mandatory')
cardStatusTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 1), )
if mibBuilder.loadTexts: cardStatusTable.setStatus('mandatory')
cardStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 1, 1), ).setIndexNames((0, "NEC-MIB", "slotIfConfIndex"))
if mibBuilder.loadTexts: cardStatusEntry.setStatus('mandatory')
cardStatusServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardStatusServerType.setStatus('mandatory')
cardStatusRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardStatusRevision.setStatus('mandatory')
cardStatusMateSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardStatusMateSlotNumber.setStatus('mandatory')
cardStatusMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("act", 1), ("sby", 2), ("single", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardStatusMode.setStatus('mandatory')
cardStatusPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("remotePrimary", 2), ("remoteSecoundary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardStatusPriority.setStatus('mandatory')
cardStatusAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 1, 1, 6), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardStatusAtmAddr.setStatus('mandatory')
cardStatusMateAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 1, 1, 7), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardStatusMateAtmAddr.setStatus('mandatory')
cardOpeTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 2), )
if mibBuilder.loadTexts: cardOpeTable.setStatus('mandatory')
cardOpeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 2, 1), ).setIndexNames((0, "NEC-MIB", "slotIfConfIndex"))
if mibBuilder.loadTexts: cardOpeEntry.setStatus('mandatory')
cardOpeReset = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("ach", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardOpeReset.setStatus('mandatory')
cardOpeDiagnosis = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("diagnosis", 2))))
if mibBuilder.loadTexts: cardOpeDiagnosis.setStatus('mandatory')
cardOpeSave = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardOpeSave.setStatus('mandatory')
cardOpeSaveResult = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("succeed", 1), ("succeed-act", 2), ("succeed-sby", 3), ("temporaryFailure", 4), ("nearend", 5), ("nearend-act", 6), ("nearend-act-failure-sby", 7), ("nearend-sby", 8), ("nearend-sby-failure-act", 9), ("notReady", 10), ("ready", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardOpeSaveResult.setStatus('mandatory')
cardOpeCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noOperation", 1), ("copy-all-from-act", 2), ("copy-all-from-sby", 3), ("copy-config-from-act", 4), ("copy-config-from-sby", 5), ("copy-system-from-act", 6), ("copy-system-from-sby", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardOpeCopy.setStatus('mandatory')
cardOpeCopyResult = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("succeed", 1), ("temporaryFailure", 2), ("nearend", 3), ("notReady", 4), ("ready", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardOpeCopyResult.setStatus('mandatory')
clockOpe = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 1))
clockOpeStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allocate", 1), ("set", 2), ("free", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockOpeStatus.setStatus('mandatory')
clockOpeCause = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noWriting", 1), ("other", 2), ("succeed", 3), ("setWarning", 4), ("parameterNotEnough", 5), ("portNotExist", 6), ("portOutOfRange", 7), ("allPortFailure", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockOpeCause.setStatus('mandatory')
clockOpeMode = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockOpeMode.setStatus('mandatory')
clockOpeAccuracy = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockOpeAccuracy.setStatus('mandatory')
clockOpeSlaveLine1 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 32), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockOpeSlaveLine1.setStatus('mandatory')
clockOpeSlaveLine2 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 32), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockOpeSlaveLine2.setStatus('mandatory')
clockOpeSlaveLine3 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 32), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockOpeSlaveLine3.setStatus('mandatory')
clockOpeSlaveLine4 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 32), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockOpeSlaveLine4.setStatus('mandatory')
class ClockSlaveLineStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("notApplicable", 1), ("active", 2), ("standby", 3), ("hardError", 4), ("adminDown", 5), ("notExist", 6), ("linfDown", 7), ("testing", 8), ("notSupported", 9), ("syncronizedFailure", 10), ("lossOf64kClock", 11), ("lossOf8kClock", 12), ("frequencyOutOfRange", 13))

clockMode = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockMode.setStatus('mandatory')
clockAccuracy = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockAccuracy.setStatus('mandatory')
clockSlaveLine = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSlaveLine.setStatus('mandatory')
clockSlaveLine1 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSlaveLine1.setStatus('mandatory')
clockSlaveLine1Status = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 6), ClockSlaveLineStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSlaveLine1Status.setStatus('mandatory')
clockSlaveLine2 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSlaveLine2.setStatus('mandatory')
clockSlaveLine2Status = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 8), ClockSlaveLineStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSlaveLine2Status.setStatus('mandatory')
clockSlaveLine3 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSlaveLine3.setStatus('mandatory')
clockSlaveLine3Status = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 10), ClockSlaveLineStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSlaveLine3Status.setStatus('mandatory')
clockSlaveLine4 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSlaveLine4.setStatus('mandatory')
clockSlaveLine4Status = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 12), ClockSlaveLineStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSlaveLine4Status.setStatus('mandatory')
diagActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("allocate", 1), ("start", 2), ("execute", 3), ("end", 4), ("free", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagActionStatus.setStatus('mandatory')
diagActionKind = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switch", 1), ("cpu", 2), ("slot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagActionKind.setStatus('mandatory')
diagPreCause = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("succeed", 2), ("parameterNotEnough", 3), ("notInstalled", 4), ("notSupport", 5), ("diagnostics", 6), ("clkChgError", 7), ("initializing", 8), ("sbyAccessError", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagPreCause.setStatus('mandatory')
diagCause = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 1020004, 1030004, 1040007, 1040107, 1050005, 1060010, 1070002, 1600201, 1600202, 1600203, 1600204, 1600205, 1600206, 1600207, 1600208, 1600301, 1600302, 1600303, 1600304, 1600401, 1600402, 1600403, 1600501, 1600502, 1600503, 1600504, 1600505, 1600601, 1600602, 1600603, 1600604, 1600605, 1600606, 1600607, 1600608, 1600609, 1600701, 1600702, 1600703, 1600704, 1600705, 1600706, 1601101, 2010002, 2020003, 2030003, 2040008, 2040009, 2040010, 2040011, 2040012, 2040013, 2040014, 2040015, 2090006, 3010002, 3010102, 3010202, 3010302, 3020012, 3030002, 3040003, 3050003, 3060003, 3070004, 3080004, 3080104, 3120004, 3130001, 3130101, 3130201, 3130301, 3150001, 3150002, 3160001, 3140005, 3140105, 3140205, 3140305, 3170001, 3170101, 3170201, 3170301, 3180001, 3180101, 3180201, 3180301, 3230003, 3190001, 3190002, 3190003, 3190004, 3200001, 3210003, 3220004, 3240001, 3250001, 3250002))).clone(namedValues=NamedValues(("normal", 1), ("diagNG-SC", 1020004), ("diagNG-BF", 1030004), ("diagNG-ES0", 1040007), ("diagNG-ES1", 1040107), ("diagNG-SAR", 1050005), ("diagNG-DI", 1060010), ("diagNG-CPU", 1070002), ("diagNG-CPU-Register", 1600201), ("diagNG-CPU-Timer-Test", 1600202), ("diagNG-CPU-MM-Test", 1600203), ("diagNG-CPU-DRAM-Partial-Write", 1600204), ("diagNG-CPU-Memory-Machining", 1600205), ("diagNG-CPU-Cash-Test", 1600206), ("diagNG-CPU-BSN-Parity", 1600207), ("diagNG-CPU-LANCE-LoopBack", 1600208), ("diagNG-Local-Memory", 1600301), ("diagNG-DMAC-Register", 1600302), ("diagNG-MISCEMA-Register", 1600303), ("diagNG-XACK-Interrupt", 1600304), ("diagNG-ASW-Register", 1600401), ("diagNG-BMT", 1600402), ("diagNG-Failer-Detect", 1600403), ("diagNG-SAR-Register", 1600501), ("diagNG-SAR-Control-Memory", 1600502), ("diagNG-SAR-Packet-Memory", 1600503), ("diagNG-DI-Register", 1600504), ("diagNG-DI-Memory", 1600505), ("diagNG-ES-LoopBack", 1600601), ("diagNG-ES-Own-LoopBack", 1600602), ("diagNG-ES-Other-LoopBack", 1600603), ("diagNG-ES-Own-Broadcast-LoopBack", 1600604), ("diagNG-ES-Other-Broadcast-LoopBack", 1600605), ("diagNG-ES-Nto1-Test", 1600606), ("diagNG-ATOM-Buffer-OVF", 1600607), ("diagNG-BackPressure", 1600608), ("diagNG-RICEtoCell-Compete", 1600609), ("diagNG-SAR-LoopBack", 1600701), ("diagNG-DI-LoopBack", 1600702), ("diagNG-SW-Own-LoopBack", 1600703), ("diagNG-SW-Other-LoopBack", 1600704), ("diagNG-Illegal-Cell-Detect", 1600705), ("diagNG-SARtoPacket-Compete", 1600706), ("diagNG-PCMCIA-Register", 1601101), ("diagNG-IXB-Register", 2010002), ("diagNG-OXB-Register", 2020003), ("diagNG-UHT-Register", 2030003), ("diagNG-IBC-Register", 2040008), ("diagNG-IBC-RIRO-SGRAM", 2040009), ("diagNG-IBC-HT-i-SGRAM", 2040010), ("diagNG-IBC-RIRO-SRAM", 2040011), ("diagNG-OBC-Register", 2040012), ("diagNG-OBC-CellBuffer", 2040013), ("diagNG-OBC-HT-o", 2040014), ("diagNG-OBC-BCI-BMT", 2040015), ("diagNG-FR-SDRAM", 2090006), ("diagNG-PHY0", 3010002), ("diagNG-PHY1", 3010102), ("diagNG-PHY2", 3010202), ("diagNG-PHY3", 3010302), ("diagNG-MUX", 3020012), ("diagNG-CU2INF", 3030002), ("diagNG-UNIC", 3040003), ("diagNG-CFAD", 3050003), ("diagNG-PLD", 3060003), ("diagNG-FPGA", 3070004), ("diagNG-FRM0", 3080004), ("diagNG-FRM1", 3080104), ("diagNG-S-UNI622", 3120004), ("diagNG-TAC0", 3130001), ("diagNG-TAC1", 3130101), ("diagNG-TAC2", 3130201), ("diagNG-TAC3", 3130301), ("diagNG-LCA-Common", 3150001), ("diagNG-LCA-Separate", 3150002), ("diagNG-UCFAD2", 3160001), ("diagNG-PM7345-0", 3140005), ("diagNG-PM7345-1", 3140105), ("diagNG-PM7345-2", 3140205), ("diagNG-PM7345-3", 3140305), ("diagNG-PM4341A-0", 3170001), ("diagNG-PM4341A-1", 3170101), ("diagNG-PM4341A-2", 3170201), ("diagNG-PM4341A-3", 3170301), ("diagNG-PM6341-0", 3180001), ("diagNG-PM6341-1", 3180101), ("diagNG-PM6341-2", 3180201), ("diagNG-PM6341-3", 3180301), ("diagNG-DCS-LCA", 3230003), ("diagNG-ALARM", 3190001), ("diagNG-FRAME", 3190002), ("diagNG-TS-CTL", 3190003), ("diagNG-FIFO-CTL", 3190004), ("diagNG-AAL1-SAR", 3200001), ("diagNG-FPGA-CE-DS1", 3210003), ("diagNG-FPGA-CE-E1", 3220004), ("diagNG-WAC-021", 3240001), ("diagNG-CPU-DRAM", 3250001), ("diagNG-CPU-Tout", 3250002)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagCause.setStatus('mandatory')
diagParam1 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagParam1.setStatus('mandatory')
class PnniAtmAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(20, 20)
    fixedLength = 20

class PnniNodeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(22, 22)
    fixedLength = 22

class PnniPeerGroupId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(14, 14)
    fixedLength = 14

class PnniLevel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 104)

pnniNode = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1))
pnniNodeOpe = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 1))
pnniNodeTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 2), )
if mibBuilder.loadTexts: pnniNodeTable.setStatus('mandatory')
pnniNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 2, 1), ).setIndexNames((0, "NEC-MIB", "pnniNodeLevel"))
if mibBuilder.loadTexts: pnniNodeEntry.setStatus('mandatory')
pnniNodeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 2, 1, 1), PnniLevel())
if mibBuilder.loadTexts: pnniNodeLevel.setStatus('mandatory')
pnniNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 2, 1, 2), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeId.setStatus('mandatory')
pnniNodeAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 2, 1, 3), PnniAtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeAtmAddress.setStatus('mandatory')
pnniNodePeerGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 2, 1, 4), PnniPeerGroupId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodePeerGroupId.setStatus('mandatory')
pnniNodeRestrictedTransit = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeRestrictedTransit.setStatus('mandatory')
pnniNodeRestrictedBranching = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeRestrictedBranching.setStatus('mandatory')
pnniNodeLeadershipPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeLeadershipPriority.setStatus('mandatory')
matCmdStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allocate", 1), ("inActive", 2), ("active", 3), ("free", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matCmdStatus.setStatus('mandatory')
matCmdInput = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 11, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matCmdInput.setStatus('mandatory')
matCmdOutput = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 11, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matCmdOutput.setStatus('mandatory')
matCmdOutputType = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("continued", 2), ("interactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matCmdOutputType.setStatus('mandatory')
matCmdStop = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("stop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matCmdStop.setStatus('mandatory')
matCmdTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 11, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 180)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matCmdTimeOut.setStatus('mandatory')
mibBuilder.exportSymbols("NEC-MIB", perfIfPhysCrcErrors=perfIfPhysCrcErrors, linfPhysType=linfPhysType, nodePCMCIATable=nodePCMCIATable, connCeVcDownPartialFillSize=connCeVcDownPartialFillSize, matCmdTimeOut=matCmdTimeOut, connFrDlciSCR=connFrDlciSCR, connProfileIndexNext=connProfileIndexNext, DstPrimaryIfIndex=DstPrimaryIfIndex, linfFifoConfifIndex=linfFifoConfifIndex, perfIfEntry=perfIfEntry, perfIfThresholdExcessCellsCounters=perfIfThresholdExcessCellsCounters, connConfNode=connConfNode, connOamSection=connOamSection, pnniNodeLevel=pnniNodeLevel, linfBkwdAvailableBandWidth=linfBkwdAvailableBandWidth, connFrDlciIndex=connFrDlciIndex, connFrProfileCongestionMode=connFrProfileCongestionMode, perf=perf, clockSlaveLine=clockSlaveLine, linfParam3=linfParam3, connProfileRowStatus=connProfileRowStatus, connCeVcUpTimeSlot1=connCeVcUpTimeSlot1, nodePCMCIAStatus=nodePCMCIAStatus, LinfCasMode=LinfCasMode, atomis_mib=atomis_mib, connPvcVpi=connPvcVpi, ConnSoftPvcSrcAtmAddressFormat=ConnSoftPvcSrcAtmAddressFormat, connProfileEntry=connProfileEntry, connPvc=connPvc, perfIfPhysHCFramingBitErrors=perfIfPhysHCFramingBitErrors, scaleDataType=scaleDataType, connPvcTrfInDropCells=connPvcTrfInDropCells, nodeStatusNodeId=nodeStatusNodeId, linfFifoConfPeekRate=linfFifoConfPeekRate, connOamOpeCause=connOamOpeCause, perfTrapEnable=perfTrapEnable, connFrProfileCIR=connFrProfileCIR, connOamOpePort1=connOamOpePort1, scaleSwSide=scaleSwSide, connPvcTopology=connPvcTopology, DstSecondaryVPI=DstSecondaryVPI, connOamPort=connOamPort, LinfMinVci=LinfMinVci, connFrProfileName=connFrProfileName, cardOpeReset=cardOpeReset, connOam=connOam, slotIfConfReset=slotIfConfReset, connRouteFifthryIfIndex=connRouteFifthryIfIndex, connProfileIndex=connProfileIndex, connRouteOpeFourthryVPI=connRouteOpeFourthryVPI, perfIfSlotEntry=perfIfSlotEntry, nodeOpe=nodeOpe, connPvcOpeHighPort=connPvcOpeHighPort, cardStatusRevision=cardStatusRevision, connConfIfSvcs=connConfIfSvcs, connSoftPvcDstParam3=connSoftPvcDstParam3, perfIfPhysB1Errors=perfIfPhysB1Errors, LinfService=LinfService, connSoftPvcSrcParam5=connSoftPvcSrcParam5, connProfileTable=connProfileTable, connRouteOpeFailureCause=connRouteOpeFailureCause, perfIfPhysFramingErrors=perfIfPhysFramingErrors, connPvcOpeLowVci=connPvcOpeLowVci, connProfileParam3=connProfileParam3, scale=scale, connPvcTrfOutCellsCounters=connPvcTrfOutCellsCounters, connRouteSecondaryVPI=connRouteSecondaryVPI, diagPreCause=diagPreCause, connRouteSeventhryIfIndex=connRouteSeventhryIfIndex, connPvcTrfTable=connPvcTrfTable, LinfFrameMode=LinfFrameMode, slotIfConfEntry=slotIfConfEntry, connSoftPvcSrcAtmAddressLength=connSoftPvcSrcAtmAddressLength, connOamOpeVpi2=connOamOpeVpi2, perfIfPhysB3Errors=perfIfPhysB3Errors, connPvcOpeHighParam1=connPvcOpeHighParam1, conn=conn, nodePCMCIAEntry=nodePCMCIAEntry, connPvcContrastParam4=connPvcContrastParam4, connRouteOpeAddress=connRouteOpeAddress, connFrProfileCLPValue=connFrProfileCLPValue, connPvcDirection=connPvcDirection, connPvcOpeLowPort=connPvcOpeLowPort, connSoftPvcSrcVPI=connSoftPvcSrcVPI, perfIfPhysLineFEBEs=perfIfPhysLineFEBEs, connFrProfileName2IndexResult=connFrProfileName2IndexResult, perfIfPhysFramingPatternErrors=perfIfPhysFramingPatternErrors, connLoopOpeAbnormalEndCount=connLoopOpeAbnormalEndCount, connCeVcUpPCR=connCeVcUpPCR, pnniNodeRestrictedBranching=pnniNodeRestrictedBranching, perfIfPhysLcvErrors=perfIfPhysLcvErrors, nodeOpeSaveResult=nodeOpeSaveResult, scaleTarget=scaleTarget, perfIfPhysHCHecDropCells=perfIfPhysHCHecDropCells, connOamVci=connOamVci, connSoftPvcDstIfIndex=connSoftPvcDstIfIndex, connCeVc=connCeVc, clockOpeSlaveLine1=clockOpeSlaveLine1, connCeVcEntry=connCeVcEntry, nodePCMCIAType=nodePCMCIAType, perfIfPhysHCHecErorrs=perfIfPhysHCHecErorrs, diagCause=diagCause, connCeVcDownTimeSlot3=connCeVcDownTimeSlot3, connPvcTrfInCells=connPvcTrfInCells, connSvcIndex=connSvcIndex, connFrProfileCause=connFrProfileCause, connSoftPvcSrcParam2=connSoftPvcSrcParam2, perfIfPhysHCFEBEs=perfIfPhysHCFEBEs, connPvcTable=connPvcTable, connFrProfileIndexNext=connFrProfileIndexNext, perfIfSlotHCThresholdExcessCells=perfIfSlotHCThresholdExcessCells, matCmdStatus=matCmdStatus, LinfFractionalType=LinfFractionalType, connPvcOpeHighVci=connPvcOpeHighVci, connRouteOpeSixthryVPI=connRouteOpeSixthryVPI, connPvcParam1=connPvcParam1, pnniNode=pnniNode, perfIfSlotTable=perfIfSlotTable, pnniNodeTable=pnniNodeTable, connConfNodeUnCompleteSvcs=connConfNodeUnCompleteSvcs, connLoopOpeStatus=connLoopOpeStatus, matCmdStop=matCmdStop, connOamOpeMode=connOamOpeMode, connSoftPvcSrcAtmAddress=connSoftPvcSrcAtmAddress, linfStatus=linfStatus, connConfNodeSvcs=connConfNodeSvcs, slotIfConfResetResult=slotIfConfResetResult, LinfFilterMaskVci=LinfFilterMaskVci, connPvcContrastParam3=connPvcContrastParam3, connConfIfPvcs=connConfIfPvcs, connSoftPvcSrcParam6=connSoftPvcSrcParam6, perfIfMisDelivdCellsCounters=perfIfMisDelivdCellsCounters, connSoftPvcSrcVCI=connSoftPvcSrcVCI, connPvcOpe=connPvcOpe, atomis=atomis, connPvcFifoIndex=connPvcFifoIndex, connRoutePrimaryCause=connRoutePrimaryCause, connLoop=connLoop, connLoopOpeNormalEndCount=connLoopOpeNormalEndCount, clockOpeSlaveLine4=clockOpeSlaveLine4, matCmdOutputType=matCmdOutputType, linfFifoConfIndex=linfFifoConfIndex, connCeVcUpPartialFillSize=connCeVcUpPartialFillSize, pnniNodeEntry=pnniNodeEntry, connOamIndex=connOamIndex, connLoopOpeCount=connLoopOpeCount, perfIfSlotReceivedCellsCounters=perfIfSlotReceivedCellsCounters, clockSlaveLine1=clockSlaveLine1, linfMaxActiveVciBits=linfMaxActiveVciBits, connRouteFourthryVPI=connRouteFourthryVPI, ClockSlaveLineStatus=ClockSlaveLineStatus, perfIfPhysHCB2Errors=perfIfPhysHCB2Errors, nec=nec, perfIfPhysB2Errors=perfIfPhysB2Errors, connSoftPvcRowStatus=connSoftPvcRowStatus, connRouteSixthryVPI=connRouteSixthryVPI, connPvcParam7=connPvcParam7, connSoftPvcCause=connSoftPvcCause, pnniNodePeerGroupId=pnniNodePeerGroupId, linfFifoConfSustainRate=linfFifoConfSustainRate, connCeVcPort=connCeVcPort, connSvcTable=connSvcTable, connSoftPvcTable=connSoftPvcTable, perfIfTable=perfIfTable, connFrDlciFrProfile=connFrDlciFrProfile, nodeStatusStartTime=nodeStatusStartTime, linfParam5=linfParam5, linfParam1=linfParam1, connOamOpeVci1=connOamOpeVci1, DstAtmAddress=DstAtmAddress, perfIfPhysHCB1Errors=perfIfPhysHCB1Errors, connRouteTertiaryIfIndex=connRouteTertiaryIfIndex, diagParam1=diagParam1, matCmdOutput=matCmdOutput, connSvcEntry=connSvcEntry, connProfileParam1=connProfileParam1, connSoftPvcDstAtmAddressFormat=connSoftPvcDstAtmAddressFormat, nodeStatusSwitch=nodeStatusSwitch, perfIfSlotInDropCells=perfIfSlotInDropCells, connOamEntry=connOamEntry, connOamDefectType=connOamDefectType, perfIfSlotTransmittedCellsCounters=perfIfSlotTransmittedCellsCounters, connPvcPort=connPvcPort, connPvcTrfEntry=connPvcTrfEntry, connCeVcDownTimeSlot2=connCeVcDownTimeSlot2, connPvcTrfResult=connPvcTrfResult, connPvcOpeHighVpi=connPvcOpeHighVpi, connOamStatus=connOamStatus, connRouteOpeSecondaryVPI=connRouteOpeSecondaryVPI, connLoopOpeCause=connLoopOpeCause, slotIfConfPhysType=slotIfConfPhysType, connPvcIndex=connPvcIndex, nodeOpeCopyResult=nodeOpeCopyResult, connPvcParam4=connPvcParam4, connSoftPvcSrcIfIndex=connSoftPvcSrcIfIndex, linfParam4=linfParam4, perfIfPhysHCB3Errors=perfIfPhysHCB3Errors, scaleStatus=scaleStatus, m7_corporate_mib=m7_corporate_mib, connRouteTertiaryVPI=connRouteTertiaryVPI, connRouteOpeFourthryIfIndex=connRouteOpeFourthryIfIndex, nodeStatusIndex=nodeStatusIndex, clockOpe=clockOpe, perfIfSlotUpcErrorCells=perfIfSlotUpcErrorCells, connCeVcCDVT=connCeVcCDVT, pnni=pnni, ConnSoftPvcDstAtmAddressFormat=ConnSoftPvcDstAtmAddressFormat, perfIfPhysHCIecErrors=perfIfPhysHCIecErrors, connSoftPvcDstAtmAddress=connSoftPvcDstAtmAddress, connSoftPvcIndex=connSoftPvcIndex, clockOpeCause=clockOpeCause, linfParam2=linfParam2, connSoftPvcDstParam4=connSoftPvcDstParam4, connRouteSecondaryIfIndex=connRouteSecondaryIfIndex, LinfLBO=LinfLBO, linf=linf, perfIfPhysEntry=perfIfPhysEntry, perfIfPhysReceivedCells=perfIfPhysReceivedCells, diag=diag, perfIfPhysBitErrors=perfIfPhysBitErrors, connProfileName2IndexResult=connProfileName2IndexResult, connRouteOpeSeventhryIfIndex=connRouteOpeSeventhryIfIndex, DstAtmAddressFormat=DstAtmAddressFormat, clockSlaveLine1Status=clockSlaveLine1Status, connPvcOpeTopology=connPvcOpeTopology, m7_phase2_mib=m7_phase2_mib, connRouteAtmAddressLength=connRouteAtmAddressLength, nodeOpeReset=nodeOpeReset, connRouteTable=connRouteTable, connConfIfEntry=connConfIfEntry, PnniPeerGroupId=PnniPeerGroupId, connLoopOpeAbortCount=connLoopOpeAbortCount, nodeOpeSave=nodeOpeSave, slotIfConfStatus=slotIfConfStatus, connPvcContrastParam1=connPvcContrastParam1, clockAccuracy=clockAccuracy, clockSlaveLine4=clockSlaveLine4, perfIfPhysPathFEBEs=perfIfPhysPathFEBEs, m7_phase2=m7_phase2, perfIfPhysHecErorrs=perfIfPhysHecErorrs, ConnProfileIndex=ConnProfileIndex, cardOpeCopy=cardOpeCopy, connOamDefectNodeID=connOamDefectNodeID, perfIfSlotReceivedCells=perfIfSlotReceivedCells, perfIfPhysHCFEBEErrors=perfIfPhysHCFEBEErrors, clockSlaveLine3=clockSlaveLine3, connFrDlciCause=connFrDlciCause, diagActionStatus=diagActionStatus, connPvcContrastParam5=connPvcContrastParam5, connPvcParam5=connPvcParam5, nodeStatusPower=nodeStatusPower, connSoftPvcEstablishedSrcInf=connSoftPvcEstablishedSrcInf, node=node, perfIfPhysSEZs=perfIfPhysSEZs)
mibBuilder.exportSymbols("NEC-MIB", clockOpeAccuracy=clockOpeAccuracy, slotIfConfIndex=slotIfConfIndex, connFrDlci=connFrDlci, clockOpeStatus=clockOpeStatus, perfIfPhysFEBEErrors=perfIfPhysFEBEErrors, connPvcContrastParam6=connPvcContrastParam6, ConnRouteOpeFailureCause=ConnRouteOpeFailureCause, cardOpeTable=cardOpeTable, perfIfPhysFramingBitErrors=perfIfPhysFramingBitErrors, connProfileName2Index=connProfileName2Index, perfIfUpcErrorCellsCounters=perfIfUpcErrorCellsCounters, cardStatusEntry=cardStatusEntry, clockMode=clockMode, connPvcContrastParam7=connPvcContrastParam7, connRouteOpeAddressFormat=connRouteOpeAddressFormat, connFrDlciPCR=connFrDlciPCR, necProductDepend=necProductDepend, connPvcOpeHighFifoIndex=connPvcOpeHighFifoIndex, connSoftPvcSrcFifoIndex=connSoftPvcSrcFifoIndex, nodeStatusSwitchType=nodeStatusSwitchType, diagActionKind=diagActionKind, connProfileParam2=connProfileParam2, linfLoopBack=linfLoopBack, LinfCodingMode=LinfCodingMode, connPvcOpeHighParam2=connPvcOpeHighParam2, connLoopOpeBase=connLoopOpeBase, connSoftPvcEstablishedSrcInfTable=connSoftPvcEstablishedSrcInfTable, connRouteSixthryIfIndex=connRouteSixthryIfIndex, connFrProfileIndex=connFrProfileIndex, connOamContrastVci=connOamContrastVci, connConfNodeTrafClear=connConfNodeTrafClear, perfIfThresholdExcessCells=perfIfThresholdExcessCells, connLoopOpeCorrelationTag=connLoopOpeCorrelationTag, connCeVcVci=connCeVcVci, connOamOpeVpi1=connOamOpeVpi1, nodeStatusSwitchMode=nodeStatusSwitchMode, connFrProfileName2Index=connFrProfileName2Index, clockOpeMode=clockOpeMode, nodeStatus=nodeStatus, cardOpeSaveResult=cardOpeSaveResult, matCmdInput=matCmdInput, perfIfReceivedCellsCounters=perfIfReceivedCellsCounters, perfIfPhysHCBip8Errors=perfIfPhysHCBip8Errors, perfIfSlotTransmittedCells=perfIfSlotTransmittedCells, connSoftPvcSrcParam7=connSoftPvcSrcParam7, linfCacFactor=linfCacFactor, connPvcTrfOutCells=connPvcTrfOutCells, linfFifoConfStatus=linfFifoConfStatus, connRouteAtmAddressFormat=connRouteAtmAddressFormat, connSoftPvcNodeKind=connSoftPvcNodeKind, slot=slot, LinfFilterMaskVpi=LinfFilterMaskVpi, connSoftPvcDstVPI=connSoftPvcDstVPI, nodeStatusTable=nodeStatusTable, connSoftPvcDstParam5=connSoftPvcDstParam5, nodeStatusSelfSystem=nodeStatusSelfSystem, connSoftPvcRetry=connSoftPvcRetry, matCmd=matCmd, linfUnassignedIdle=linfUnassignedIdle, cardStatusMateSlotNumber=cardStatusMateSlotNumber, connPvcContrastFifoIndex=connPvcContrastFifoIndex, connFr=connFr, perfIfPhysHCPathParityErrors=perfIfPhysHCPathParityErrors, connPvcTrfInDropCellsCounters=connPvcTrfInDropCellsCounters, pnniNodeRestrictedTransit=pnniNodeRestrictedTransit, connPvcParam3=connPvcParam3, cardOpeDiagnosis=cardOpeDiagnosis, connFrProfileDEValue=connFrProfileDEValue, perfIfPhysTransmittedCells=perfIfPhysTransmittedCells, connConfNodeTrafs=connConfNodeTrafs, slotIfConfBufferType=slotIfConfBufferType, connPvcOpeCause=connPvcOpeCause, connRouteOpeStatus=connRouteOpeStatus, connPvcOpeLowVpi=connPvcOpeLowVpi, clockSlaveLine2=clockSlaveLine2, connPvcOpeLowParam1=connPvcOpeLowParam1, connConfIfTable=connConfIfTable, connCeVcCause=connCeVcCause, pnniNodeId=pnniNodeId, linfFifoConfTable=linfFifoConfTable, cardStatusPriority=cardStatusPriority, connSoftPvcTrafficType=connSoftPvcTrafficType, connFrProfileCLPtoDE=connFrProfileCLPtoDE, connSoftPvcDstFifoIndex=connSoftPvcDstFifoIndex, connPvcOpeStatus=connPvcOpeStatus, connFrProfileCapsulationMode=connFrProfileCapsulationMode, linfBandWidth=linfBandWidth, connConf=connConf, ConnFrProfileIndex=ConnFrProfileIndex, connFrProfileRowStatus=connFrProfileRowStatus, DstPrimaryVPI=DstPrimaryVPI, connRoutePrimaryIfIndex=connRoutePrimaryIfIndex, slotIfConfBufferRev=slotIfConfBufferRev, connOamOpeSection=connOamOpeSection, connSoftPvcTopology=connSoftPvcTopology, linfFifoConfRowStatus=linfFifoConfRowStatus, necProduct=necProduct, perfIfPhysIecErrors=perfIfPhysIecErrors, connRouteOpePrimaryVPI=connRouteOpePrimaryVPI, connProfileTrafficType=connProfileTrafficType, connCeVcDownTimeSlot1=connCeVcDownTimeSlot1, perfIfSlotHCUpcErrorCells=perfIfSlotHCUpcErrorCells, connProfileParam4=connProfileParam4, m7_corporate=m7_corporate, connRoute=connRoute, perfIfPhysHCCrcErrors=perfIfPhysHCCrcErrors, ConnSoftPvcEstSrcInfIndex=ConnSoftPvcEstSrcInfIndex, card=card, connRouteOpeAddressLength=connRouteOpeAddressLength, connRouteType=connRouteType, perfIfPhysIdelUnassignedCells=perfIfPhysIdelUnassignedCells, connConfNodeCompleteSvcs=connConfNodeCompleteSvcs, perfIfPhysParityErrors=perfIfPhysParityErrors, linfIndex=linfIndex, clockSlaveLine3Status=clockSlaveLine3Status, connLoopOpePort=connLoopOpePort, connSoftPvcDstAtmAddressLength=connSoftPvcDstAtmAddressLength, connPvcEntry=connPvcEntry, cardStatusMateAtmAddr=cardStatusMateAtmAddr, connSvcInf=connSvcInf, connCeVcDirection=connCeVcDirection, perfIfPhysTable=perfIfPhysTable, connPvcOpeLowFifoIndex=connPvcOpeLowFifoIndex, clockSlaveLine4Status=clockSlaveLine4Status, connSoftPvcSrcAtmAddressFormat=connSoftPvcSrcAtmAddressFormat, clockOpeSlaveLine3=clockOpeSlaveLine3, cardOpeEntry=cardOpeEntry, connSoftPvcEntry=connSoftPvcEntry, perfIfPhysBip8Errors=perfIfPhysBip8Errors, connRouteOpeSixthryIfIndex=connRouteOpeSixthryIfIndex, DstAtmAddressLength=DstAtmAddressLength, connSoftPvcDstVCI=connSoftPvcDstVCI, perfIfPhysHCPathFEBEs=perfIfPhysHCPathFEBEs, clock=clock, connRouteOpe=connRouteOpe, LinfMaxVci=LinfMaxVci, connConfNodeSoftPvcs=connConfNodeSoftPvcs, connFrProfileTable=connFrProfileTable, connRouteFifthryVPI=connRouteFifthryVPI, connLoopOpeVci=connLoopOpeVci, linfFwdAvailableBandWidth=linfFwdAvailableBandWidth, connRoutePrimaryVPI=connRoutePrimaryVPI, perfIfPhysHCSEZs=perfIfPhysHCSEZs, scaleCause=scaleCause, connLoopOpeLoopBackPointIdLength=connLoopOpeLoopBackPointIdLength, nodeStatusEntry=nodeStatusEntry, perfIfPhysHCTransmittedCells=perfIfPhysHCTransmittedCells, connCeVcTable=connCeVcTable, linfStatusEntry=linfStatusEntry, connLoopOpeVpi=connLoopOpeVpi, connSoftPvcEndpointType=connSoftPvcEndpointType, nodePCMCIAIndex=nodePCMCIAIndex, connOamOpe=connOamOpe, clockSlaveLine2Status=clockSlaveLine2Status, perfIfMisDelivdCells=perfIfMisDelivdCells, pnniNodeLeadershipPriority=pnniNodeLeadershipPriority, cardOpeSave=cardOpeSave, connFrProfile=connFrProfile, connPvcVci=connPvcVci, nec_mib=nec_mib, connSoftPvcEstSrcInfIndex=connSoftPvcEstSrcInfIndex, linfConf=linfConf, connOamContrastPort=connOamContrastPort, slotIfConfTable=slotIfConfTable, connSoftPvcDstParam6=connSoftPvcDstParam6, linfFifoConfMaxBurstSize=linfFifoConfMaxBurstSize, perfIfSlotThresholdExcessCells=perfIfSlotThresholdExcessCells, connSoftPvcEstablishedSrcInfEntry=connSoftPvcEstablishedSrcInfEntry, perfIfPhysPort=perfIfPhysPort, perfIfPhysFEBEs=perfIfPhysFEBEs, PnniNodeId=PnniNodeId, connPvcOpeLowParam2=connPvcOpeLowParam2, connProfileName=connProfileName, perfIfPhysPathParityErrors=perfIfPhysPathParityErrors, connRouteOpeFifthryVPI=connRouteOpeFifthryVPI, nodeStatusFan=nodeStatusFan, PnniLevel=PnniLevel, perfIfUpcErrorCells=perfIfUpcErrorCells, connRoutePrimaryStatus=connRoutePrimaryStatus, perfIfSlotInDropCellsCounters=perfIfSlotInDropCellsCounters, connRouteOpeTertiaryIfIndex=connRouteOpeTertiaryIfIndex, connPvcTrfConf=connPvcTrfConf, connRouteOpePrimaryIfIndex=connRouteOpePrimaryIfIndex, pnniNodeOpe=pnniNodeOpe, connLoopOpe=connLoopOpe, connRouteOpeSecondaryIfIndex=connRouteOpeSecondaryIfIndex, connSoftPvcSrcParam3=connSoftPvcSrcParam3, connCeVcDownPCR=connCeVcDownPCR, connRouteOpeFifthryIfIndex=connRouteOpeFifthryIfIndex, connLoopOpeMode=connLoopOpeMode, connPvcParam2=connPvcParam2, connCeVcCondition=connCeVcCondition, connFrDlciRowStatus=connFrDlciRowStatus, LinfFractionalSet=LinfFractionalSet, connSoftPvcSrcParam4=connSoftPvcSrcParam4, cardStatusTable=cardStatusTable, cardStatusAtmAddr=cardStatusAtmAddr, connPvcContrastPort=connPvcContrastPort, connOamOpeVci2=connOamOpeVci2, perfIfPhysHCIdelUnassignedCells=perfIfPhysHCIdelUnassignedCells, DstSecondaryIfIndex=DstSecondaryIfIndex, connCeVcRowStatus=connCeVcRowStatus, linfFifoConfEntry=linfFifoConfEntry, connPvcTrfInCellsCounters=connPvcTrfInCellsCounters, perfIfPhysHCLcvErrors=perfIfPhysHCLcvErrors, slotIfConfRev=slotIfConfRev, connSoftPvcRestRetry=connSoftPvcRestRetry, connRouteSeventhryVPI=connRouteSeventhryVPI, connOamPoint=connOamPoint, cardOpeCopyResult=cardOpeCopyResult, nodeStatusEnvironment=nodeStatusEnvironment, nodeOpeCopy=nodeOpeCopy, connFrProfileDEtoCLP=connFrProfileDEtoCLP, connFrDlciEntry=connFrDlciEntry, connOamOpePoint=connOamOpePoint, perfIfTransmittedCellsCounters=perfIfTransmittedCellsCounters, connFrProfileInterworkingType=connFrProfileInterworkingType, linfParam7=linfParam7, connCeVcUpTimeSlot2=connCeVcUpTimeSlot2, connConfIfSoftPvcs=connConfIfSoftPvcs, connCeVcUpTimeSlot3=connCeVcUpTimeSlot3, connPvcTrafficType=connPvcTrafficType, perfIfPhysHCLineFEBEs=perfIfPhysHCLineFEBEs, cardStatusMode=cardStatusMode, connFrDlciPort=connFrDlciPort, perfIfPhysHCBitErrors=perfIfPhysHCBitErrors, linfParam6=linfParam6, connPvcContrastVci=connPvcContrastVci, perfIfIndex=perfIfIndex, connPvcContrastParam2=connPvcContrastParam2, LinfScramble=LinfScramble, connSoftPvcDstParam1=connSoftPvcDstParam1, connOamOpePort2=connOamOpePort2, linfStatusTable=linfStatusTable, linfMaxActiveVpiBits=linfMaxActiveVpiBits, PnniAtmAddr=PnniAtmAddr, connSoftPvcSrcParam1=connSoftPvcSrcParam1, connFrProfileEntry=connFrProfileEntry, linfJ2Rate=linfJ2Rate, connSoftPvcIndexNext=connSoftPvcIndexNext, linfRecommendation=linfRecommendation, pnniNodeAtmAddress=pnniNodeAtmAddress, connOamContrastVpi=connOamContrastVpi, connSoftPvcDstParam7=connSoftPvcDstParam7, perfIfReceivedCells=perfIfReceivedCells, nodeStatusOperStatus=nodeStatusOperStatus, connPvcParam6=connPvcParam6, connProfileCause=connProfileCause, LinfCellMappingMode=LinfCellMappingMode, connPvcOpeTrafficType=connPvcOpeTrafficType, connRouteAtmAddress=connRouteAtmAddress, scaleFileName=scaleFileName, LinfUnUsedParam=LinfUnUsedParam, connRouteOpeTertiaryVPI=connRouteOpeTertiaryVPI)
mibBuilder.exportSymbols("NEC-MIB", connConfNodePvcs=connConfNodePvcs, connOamTable=connOamTable, clockOpeSlaveLine2=clockOpeSlaveLine2, perfIfPhysHecDropCells=perfIfPhysHecDropCells, connLoopOpeLoopBackPointNodeId=connLoopOpeLoopBackPointNodeId, connOamOpeStatus=connOamOpeStatus, connRouteOpeSeventhryVPI=connRouteOpeSeventhryVPI, connOamVpi=connOamVpi, LinfVendor=LinfVendor, connRouteFourthryIfIndex=connRouteFourthryIfIndex, perfIfPhysHCFramingPatternErrors=perfIfPhysHCFramingPatternErrors, perfIfPhysHCFramingErrors=perfIfPhysHCFramingErrors, cardStatusServerType=cardStatusServerType, linfLoopBackCause=linfLoopBackCause, connCe=connCe, connFrDlciMBS=connFrDlciMBS, connRouteEntry=connRouteEntry, connSoftPvcDstParam2=connSoftPvcDstParam2, connPvcContrastVpi=connPvcContrastVpi, LinfInterWorking=LinfInterWorking, perfIfPhysHCParityErrors=perfIfPhysHCParityErrors, perfIfTransmittedCells=perfIfTransmittedCells, connOamMode=connOamMode, perfIfPhysHCReceivedCells=perfIfPhysHCReceivedCells, connProfile=connProfile, connFrDlciTable=connFrDlciTable)
