#
# PySNMP MIB module X25G-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/X25G-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:35:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
experimental, Counter64, enterprises, ObjectIdentity, Counter32, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, Integer32, MibIdentifier, Bits, Unsigned32, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "experimental", "Counter64", "enterprises", "ObjectIdentity", "Counter32", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "Integer32", "MibIdentifier", "Bits", "Unsigned32", "ModuleIdentity", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
x25g = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 11))
x25gwId = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 11, 1))
x25gwIdTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1), )
if mibBuilder.loadTexts: x25gwIdTable.setStatus('mandatory')
x25gwIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1), ).setIndexNames((0, "X25G-MIB", "x25gwIdIndex"))
if mibBuilder.loadTexts: x25gwIdEntry.setStatus('mandatory')
x25gwIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdIndex.setStatus('mandatory')
x25gwIdHardwareSerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdHardwareSerNum.setStatus('mandatory')
x25gwIdHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdHardwareRev.setStatus('mandatory')
x25gwIdSoftwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdSoftwareRev.setStatus('mandatory')
x25gwIdCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("i80386", 1), ("i80486", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdCpuType.setStatus('mandatory')
x25gwIdRamInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdRamInstalled.setStatus('mandatory')
x25gwIdFlashInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdFlashInstalled.setStatus('mandatory')
x25gwIdOperCfgSts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("operNvram", 1), ("adminChanged", 2), ("adminNvram", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdOperCfgSts.setStatus('mandatory')
x25gwIdSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdSelfTestResult.setStatus('mandatory')
x25gwIdMgmtConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwIdMgmtConnect.setStatus('mandatory')
x25gwCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 11, 2))
x25gwCmdTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1), )
if mibBuilder.loadTexts: x25gwCmdTable.setStatus('mandatory')
x25gwCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1, 1), ).setIndexNames((0, "X25G-MIB", "x25gwCmdIndex"))
if mibBuilder.loadTexts: x25gwCmdEntry.setStatus('mandatory')
x25gwCmdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwCmdIndex.setStatus('mandatory')
x25gwCmdMgtStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCmdMgtStationId.setStatus('mandatory')
x25gwCmdReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwCmdReqId.setStatus('mandatory')
x25gwCmdFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noCommand", 1), ("saveToNVRAM", 2), ("restoreFromDefault", 4), ("nonDisruptSelfTest", 5), ("disruptSelfTest", 6), ("softwareReset", 7), ("downloadCfgFile", 8), ("uploadCfgFile", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCmdFunction.setStatus('mandatory')
x25gwCmdForce = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCmdForce.setStatus('mandatory')
x25gwCmdParam = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCmdParam.setStatus('mandatory')
x25gwCmdResult = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwCmdResult.setStatus('mandatory')
x25gwCmdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 8, 12, 20, 22, 46, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 84, 85, 86, 87, 88, 93))).clone(namedValues=NamedValues(("noError", 1), ("unable", 2), ("unrecognizedCommand", 6), ("slotEmpty", 8), ("noResponse", 12), ("unsupportedCommand", 20), ("deviceDisabled", 22), ("fileTooBig", 46), ("userInterfaceActive", 58), ("badFlashRomID", 61), ("badFlashVoltage", 62), ("flashEraseError", 63), ("eraseSequenceError", 64), ("eraseExecutionError", 65), ("receiveBufferOverflow", 66), ("badProgramVoltage", 68), ("programmingDataError", 69), ("programCodeError", 70), ("invalidCodeError", 71), ("romCrcBad", 72), ("pendingSoftwareDownload", 73), ("ramCrcBad", 74), ("invalidRomId", 75), ("cardIdMismatch", 84), ("cardIdUnknown", 85), ("tftpTimeout", 86), ("flashEraseTimeout", 87), ("invalidFileHeader", 88), ("bulkTransferInProcess", 93)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwCmdCode.setStatus('mandatory')
x25gwCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 11, 3))
x25gwCfgTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1), )
if mibBuilder.loadTexts: x25gwCfgTable.setStatus('mandatory')
x25gwCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1, 1), ).setIndexNames((0, "X25G-MIB", "x25gwCfgIndex"))
if mibBuilder.loadTexts: x25gwCfgEntry.setStatus('mandatory')
x25gwCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwCfgIndex.setStatus('mandatory')
x25gwCfgUiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("padAccess", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwCfgUiPort.setStatus('mandatory')
x25gwCfgLocModemConn = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("dial", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCfgLocModemConn.setStatus('mandatory')
x25gwCfgRoutingType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("subAddr", 2), ("callUserData", 3), ("both", 4), ("managmentOnly", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCfgRoutingType.setStatus('mandatory')
x25gwCfgCudRoutStr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCfgCudRoutStr.setStatus('mandatory')
x25gwCfgX121SubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCfgX121SubAddr.setStatus('mandatory')
x25gwCfgSysDate = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCfgSysDate.setStatus('mandatory')
x25gwCfgSysTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwCfgSysTime.setStatus('mandatory')
x25gwTrapEna = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 11, 4))
x25gwTrapEnaTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 11, 4, 1), )
if mibBuilder.loadTexts: x25gwTrapEnaTable.setStatus('mandatory')
x25gwTrapEnaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 11, 4, 1, 1), ).setIndexNames((0, "X25G-MIB", "x25gwTrapEnaIndex"))
if mibBuilder.loadTexts: x25gwTrapEnaEntry.setStatus('mandatory')
x25gwTrapEnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25gwTrapEnaIndex.setStatus('mandatory')
x25gwTrapEnaUiReset = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 11, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25gwTrapEnaUiReset.setStatus('mandatory')
mibBuilder.exportSymbols("X25G-MIB", x25gwCfgLocModemConn=x25gwCfgLocModemConn, x25gwCmdCode=x25gwCmdCode, usr=usr, x25gwIdSelfTestResult=x25gwIdSelfTestResult, x25gwCmdMgtStationId=x25gwCmdMgtStationId, x25gwIdFlashInstalled=x25gwIdFlashInstalled, x25gwCmdParam=x25gwCmdParam, x25gwIdIndex=x25gwIdIndex, x25gwId=x25gwId, x25gwTrapEna=x25gwTrapEna, x25gwCfgTable=x25gwCfgTable, x25gwTrapEnaIndex=x25gwTrapEnaIndex, x25gwCmdFunction=x25gwCmdFunction, x25gwIdCpuType=x25gwIdCpuType, x25g=x25g, x25gwIdHardwareSerNum=x25gwIdHardwareSerNum, x25gwIdSoftwareRev=x25gwIdSoftwareRev, x25gwCmdForce=x25gwCmdForce, x25gwCfgX121SubAddr=x25gwCfgX121SubAddr, x25gwCfgUiPort=x25gwCfgUiPort, x25gwCmdIndex=x25gwCmdIndex, x25gwCfgRoutingType=x25gwCfgRoutingType, x25gwCfgSysTime=x25gwCfgSysTime, x25gwIdEntry=x25gwIdEntry, x25gwTrapEnaTable=x25gwTrapEnaTable, x25gwIdRamInstalled=x25gwIdRamInstalled, x25gwCfgSysDate=x25gwCfgSysDate, x25gwCfgIndex=x25gwCfgIndex, x25gwTrapEnaEntry=x25gwTrapEnaEntry, x25gwCfgCudRoutStr=x25gwCfgCudRoutStr, x25gwCmdResult=x25gwCmdResult, nas=nas, x25gwIdTable=x25gwIdTable, x25gwCmdReqId=x25gwCmdReqId, x25gwTrapEnaUiReset=x25gwTrapEnaUiReset, x25gwIdOperCfgSts=x25gwIdOperCfgSts, x25gwCmdEntry=x25gwCmdEntry, x25gwCmd=x25gwCmd, x25gwIdMgmtConnect=x25gwIdMgmtConnect, x25gwCfgEntry=x25gwCfgEntry, x25gwCfg=x25gwCfg, x25gwCmdTable=x25gwCmdTable, x25gwIdHardwareRev=x25gwIdHardwareRev)
