#
# PySNMP MIB module HPN-ICF-QINQ-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-QINQ-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:28:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, ObjectIdentity, IpAddress, Integer32, Bits, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, Gauge32, Unsigned32, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "IpAddress", "Integer32", "Bits", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "Gauge32", "Unsigned32", "ModuleIdentity", "Counter64")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
hpnicfQINQ = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69))
hpnicfQINQ.setRevisions(('2006-03-10 00:00',))
if mibBuilder.loadTexts: hpnicfQINQ.setLastUpdated('200603100000Z')
if mibBuilder.loadTexts: hpnicfQINQ.setOrganization('')
class HpnicfQinQSwitchState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

hpnicfQinQMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1))
hpnicfQinQGlobalConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 1))
hpnicfQinQBpduTunnelSwitch = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 1, 1), HpnicfQinQSwitchState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfQinQBpduTunnelSwitch.setStatus('current')
hpnicfQinQEthernetTypeValue = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfQinQEthernetTypeValue.setStatus('current')
hpnicfQinQServiceTPIDValue = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfQinQServiceTPIDValue.setStatus('current')
hpnicfQinQCustomerTPIDValue = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfQinQCustomerTPIDValue.setStatus('current')
hpnicfQinQBpduTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 2), )
if mibBuilder.loadTexts: hpnicfQinQBpduTunnelTable.setStatus('current')
hpnicfQinQBpduTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-QINQ-MIB", "hpnicfQinQProtocolIndex"))
if mibBuilder.loadTexts: hpnicfQinQBpduTunnelEntry.setStatus('current')
hpnicfQinQProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bpdu", 1), ("stp", 2), ("gmosaic", 3), ("igmp", 4))))
if mibBuilder.loadTexts: hpnicfQinQProtocolIndex.setStatus('current')
hpnicfQinQBpduRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQinQBpduRowStatus.setStatus('current')
hpnicfQinQPriorityRemarkTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 3), )
if mibBuilder.loadTexts: hpnicfQinQPriorityRemarkTable.setStatus('current')
hpnicfQinQPriorityRemarkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-QINQ-MIB", "hpnicfQinQPriorityValue"))
if mibBuilder.loadTexts: hpnicfQinQPriorityRemarkEntry.setStatus('current')
hpnicfQinQPriorityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: hpnicfQinQPriorityValue.setStatus('current')
hpnicfQinQPriorityRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQinQPriorityRemarkValue.setStatus('current')
hpnicfQinQPriorityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQinQPriorityRowStatus.setStatus('current')
hpnicfQinQVidTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 4), )
if mibBuilder.loadTexts: hpnicfQinQVidTable.setStatus('current')
hpnicfQinQVidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-QINQ-MIB", "hpnicfQinQVlanID"))
if mibBuilder.loadTexts: hpnicfQinQVidEntry.setStatus('current')
hpnicfQinQVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hpnicfQinQVlanID.setStatus('current')
hpnicfQinQInboundVidListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQinQInboundVidListLow.setStatus('current')
hpnicfQinQInboundVidListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQinQInboundVidListHigh.setStatus('current')
hpnicfQinQVidEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQinQVidEthernetType.setStatus('current')
hpnicfQinQVidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQinQVidRowStatus.setStatus('current')
hpnicfQinQVidSwapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 5), )
if mibBuilder.loadTexts: hpnicfQinQVidSwapTable.setStatus('current')
hpnicfQinQVidSwapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-QINQ-MIB", "hpnicfQinQVlanID"), (0, "HPN-ICF-QINQ-MIB", "hpnicfQinQVidSwapOld"))
if mibBuilder.loadTexts: hpnicfQinQVidSwapEntry.setStatus('current')
hpnicfQinQVidSwapOld = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hpnicfQinQVidSwapOld.setStatus('current')
hpnicfQinQVidSwapNew = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQinQVidSwapNew.setStatus('current')
hpnicfQinQVidSwapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQinQVidSwapRowStatus.setStatus('current')
hpnicfQinQPrioritySwapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 6), )
if mibBuilder.loadTexts: hpnicfQinQPrioritySwapTable.setStatus('current')
hpnicfQinQPrioritySwapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-QINQ-MIB", "hpnicfQinQVlanID"), (0, "HPN-ICF-QINQ-MIB", "hpnicfQinQPrioritySwapOld"))
if mibBuilder.loadTexts: hpnicfQinQPrioritySwapEntry.setStatus('current')
hpnicfQinQPrioritySwapOld = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: hpnicfQinQPrioritySwapOld.setStatus('current')
hpnicfQinQPrioritySwapNew = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQinQPrioritySwapNew.setStatus('current')
hpnicfQinQPrioritySwapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQinQPrioritySwapRowStatus.setStatus('current')
hpnicfQinQIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 7), )
if mibBuilder.loadTexts: hpnicfQinQIfConfigTable.setStatus('current')
hpnicfQinQIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfQinQIfConfigEntry.setStatus('current')
hpnicfQinQIfEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQinQIfEthernetType.setStatus('current')
hpnicfQinQIfSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 7, 1, 2), HpnicfQinQSwitchState().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQinQIfSwitch.setStatus('current')
hpnicfQinQIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQinQIfRowStatus.setStatus('current')
hpnicfQinQIfServiceTPIDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQinQIfServiceTPIDValue.setStatus('current')
hpnicfQinQIfCustomerTPIDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQinQIfCustomerTPIDValue.setStatus('current')
hpnicfQinQIfUplinkSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 7, 1, 6), HpnicfQinQSwitchState().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQinQIfUplinkSwitch.setStatus('current')
hpnicfQinQIfDownlinkSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 69, 1, 7, 1, 7), HpnicfQinQSwitchState().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQinQIfDownlinkSwitch.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-QINQ-MIB", hpnicfQINQ=hpnicfQINQ, hpnicfQinQBpduRowStatus=hpnicfQinQBpduRowStatus, hpnicfQinQPriorityRemarkEntry=hpnicfQinQPriorityRemarkEntry, hpnicfQinQPriorityRemarkTable=hpnicfQinQPriorityRemarkTable, hpnicfQinQPrioritySwapEntry=hpnicfQinQPrioritySwapEntry, hpnicfQinQIfUplinkSwitch=hpnicfQinQIfUplinkSwitch, hpnicfQinQIfRowStatus=hpnicfQinQIfRowStatus, hpnicfQinQVidEthernetType=hpnicfQinQVidEthernetType, hpnicfQinQBpduTunnelTable=hpnicfQinQBpduTunnelTable, hpnicfQinQPrioritySwapRowStatus=hpnicfQinQPrioritySwapRowStatus, hpnicfQinQVidSwapTable=hpnicfQinQVidSwapTable, hpnicfQinQPriorityValue=hpnicfQinQPriorityValue, hpnicfQinQPrioritySwapOld=hpnicfQinQPrioritySwapOld, hpnicfQinQIfSwitch=hpnicfQinQIfSwitch, hpnicfQinQVidSwapNew=hpnicfQinQVidSwapNew, hpnicfQinQVidSwapOld=hpnicfQinQVidSwapOld, hpnicfQinQIfConfigTable=hpnicfQinQIfConfigTable, hpnicfQinQPrioritySwapNew=hpnicfQinQPrioritySwapNew, hpnicfQinQBpduTunnelEntry=hpnicfQinQBpduTunnelEntry, hpnicfQinQPriorityRemarkValue=hpnicfQinQPriorityRemarkValue, hpnicfQinQPriorityRowStatus=hpnicfQinQPriorityRowStatus, hpnicfQinQGlobalConfigGroup=hpnicfQinQGlobalConfigGroup, hpnicfQinQIfServiceTPIDValue=hpnicfQinQIfServiceTPIDValue, hpnicfQinQVidEntry=hpnicfQinQVidEntry, hpnicfQinQMibObject=hpnicfQinQMibObject, hpnicfQinQInboundVidListLow=hpnicfQinQInboundVidListLow, hpnicfQinQProtocolIndex=hpnicfQinQProtocolIndex, hpnicfQinQServiceTPIDValue=hpnicfQinQServiceTPIDValue, HpnicfQinQSwitchState=HpnicfQinQSwitchState, hpnicfQinQInboundVidListHigh=hpnicfQinQInboundVidListHigh, hpnicfQinQVidTable=hpnicfQinQVidTable, hpnicfQinQVidRowStatus=hpnicfQinQVidRowStatus, hpnicfQinQIfCustomerTPIDValue=hpnicfQinQIfCustomerTPIDValue, hpnicfQinQBpduTunnelSwitch=hpnicfQinQBpduTunnelSwitch, hpnicfQinQEthernetTypeValue=hpnicfQinQEthernetTypeValue, hpnicfQinQVidSwapRowStatus=hpnicfQinQVidSwapRowStatus, hpnicfQinQPrioritySwapTable=hpnicfQinQPrioritySwapTable, hpnicfQinQVidSwapEntry=hpnicfQinQVidSwapEntry, hpnicfQinQIfDownlinkSwitch=hpnicfQinQIfDownlinkSwitch, hpnicfQinQIfConfigEntry=hpnicfQinQIfConfigEntry, PYSNMP_MODULE_ID=hpnicfQINQ, hpnicfQinQCustomerTPIDValue=hpnicfQinQCustomerTPIDValue, hpnicfQinQVlanID=hpnicfQinQVlanID, hpnicfQinQIfEthernetType=hpnicfQinQIfEthernetType)
