#
# PySNMP MIB module SWAPCOM-SCC (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SWAPCOM-SCC
# Produced by pysmi-0.3.4 at Mon Apr 29 21:05:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32, ModuleIdentity, Bits, IpAddress, iso, Counter32, Counter64, Unsigned32, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32", "ModuleIdentity", "Bits", "IpAddress", "iso", "Counter32", "Counter64", "Unsigned32", "TimeTicks", "MibIdentifier")
TextualConvention, DisplayString, TruthValue, TestAndIncr, MacAddress, TimeInterval, DateAndTime, RowStatus, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "TestAndIncr", "MacAddress", "TimeInterval", "DateAndTime", "RowStatus", "StorageType")
swapcom = ModuleIdentity((1, 3, 6, 1, 4, 1, 11308))
swapcom.setRevisions(('1970-01-01 00:00',))
if mibBuilder.loadTexts: swapcom.setLastUpdated('2007381648Z')
if mibBuilder.loadTexts: swapcom.setOrganization('Organization name')
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
scc = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 3))
platform = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 3, 1))
platformPlatformId = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformPlatformId.setStatus('current')
platformPlatformStatus = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformPlatformStatus.setStatus('current')
versionTable = MibTable((1, 3, 6, 1, 4, 1, 11308, 3, 2), )
if mibBuilder.loadTexts: versionTable.setStatus('current')
versionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11308, 3, 2, 1), ).setIndexNames((0, "SWAPCOM-SCC", "versionProductName"))
if mibBuilder.loadTexts: versionEntry.setStatus('current')
versionProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionProductName.setStatus('current')
versionProductVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionProductVersion.setStatus('current')
versionBuildNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionBuildNumber.setStatus('current')
versionBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionBuildDate.setStatus('current')
transactionManager = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 3, 3))
transactionManagerLongTransactionThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerLongTransactionThreshold.setStatus('current')
transactionManagerActiveTransactionCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerActiveTransactionCurrentCount.setStatus('current')
transactionManagerActiveTransactionMinCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerActiveTransactionMinCount.setStatus('current')
transactionManagerActiveTransactionMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerActiveTransactionMaxCount.setStatus('current')
transactionManagerCommittedTransactionCumulativeCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerCommittedTransactionCumulativeCount.setStatus('current')
transactionManagerRolledbackTransactionCumulativeCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerRolledbackTransactionCumulativeCount.setStatus('current')
transactionManagerTransactionCumulativeTime = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerTransactionCumulativeTime.setStatus('current')
transactionManagerTransactionMinTime = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerTransactionMinTime.setStatus('current')
transactionManagerTransactionMaxTime = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerTransactionMaxTime.setStatus('current')
transactionManagerTransactionManagerLastError = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 3, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transactionManagerTransactionManagerLastError.setStatus('current')
lockManager = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 3, 4))
lockManagerLockedItemCumulativeCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockManagerLockedItemCumulativeCount.setStatus('current')
lockManagerLockedItemCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockManagerLockedItemCurrentCount.setStatus('current')
lockManagerLockedItemMinCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockManagerLockedItemMinCount.setStatus('current')
lockManagerLockedItemMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockManagerLockedItemMaxCount.setStatus('current')
lockManagerLockRejectedOnDeadlockCumulativeCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockManagerLockRejectedOnDeadlockCumulativeCount.setStatus('current')
lockManagerLockRejectedOnTimeoutCumulativeCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockManagerLockRejectedOnTimeoutCumulativeCount.setStatus('current')
lockManagerBlockedTransactionCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockManagerBlockedTransactionCurrentCount.setStatus('current')
lockManagerBlockedTransactionMinCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockManagerBlockedTransactionMinCount.setStatus('current')
lockManagerBlockedTransactionMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockManagerBlockedTransactionMaxCount.setStatus('current')
schedulerTaskTable = MibTable((1, 3, 6, 1, 4, 1, 11308, 3, 5), )
if mibBuilder.loadTexts: schedulerTaskTable.setStatus('current')
schedulerTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11308, 3, 5, 1), ).setIndexNames((0, "SWAPCOM-SCC", "schedulerTaskName"))
if mibBuilder.loadTexts: schedulerTaskEntry.setStatus('current')
schedulerTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 5, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerTaskName.setStatus('current')
schedulerTaskRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 5, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerTaskRunning.setStatus('current')
schedulerTaskExecutionCumulativeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerTaskExecutionCumulativeCount.setStatus('current')
schedulerTaskExecutionCumulativeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerTaskExecutionCumulativeTime.setStatus('current')
schedulerTaskExecutionMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerTaskExecutionMinTime.setStatus('current')
schedulerTaskExecutionMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerTaskExecutionMaxTime.setStatus('current')
schedulerTaskExecutionRetryCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerTaskExecutionRetryCurrentCount.setStatus('current')
schedulerTaskExecutionLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerTaskExecutionLastError.setStatus('current')
alarmProbeTable = MibTable((1, 3, 6, 1, 4, 1, 11308, 3, 12), )
if mibBuilder.loadTexts: alarmProbeTable.setStatus('current')
alarmProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11308, 3, 12, 1), ).setIndexNames((0, "SWAPCOM-SCC", "alarmProbeAlertType"), (0, "SWAPCOM-SCC", "alarmProbeAlertSource"))
if mibBuilder.loadTexts: alarmProbeEntry.setStatus('current')
alarmProbeAlertType = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 12, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmProbeAlertType.setStatus('current')
alarmProbeAlertSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 12, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmProbeAlertSource.setStatus('current')
alarmProbeSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmProbeSeverity.setStatus('current')
alarmProbeLastSeverityChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmProbeLastSeverityChange.setStatus('current')
remotePlatformTable = MibTable((1, 3, 6, 1, 4, 1, 11308, 3, 21), )
if mibBuilder.loadTexts: remotePlatformTable.setStatus('current')
remotePlatformEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11308, 3, 21, 1), ).setIndexNames((0, "SWAPCOM-SCC", "remotePlatformPlatformId"))
if mibBuilder.loadTexts: remotePlatformEntry.setStatus('current')
remotePlatformPlatformId = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 21, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePlatformPlatformId.setStatus('current')
remotePlatformPlatformProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 21, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePlatformPlatformProtocol.setStatus('current')
remotePlatformRemotePlatformStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePlatformRemotePlatformStatus.setStatus('current')
asynchronousEventQueueTable = MibTable((1, 3, 6, 1, 4, 1, 11308, 3, 22), )
if mibBuilder.loadTexts: asynchronousEventQueueTable.setStatus('current')
asynchronousEventQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1), ).setIndexNames((0, "SWAPCOM-SCC", "asynchronousEventQueuePlatformId"))
if mibBuilder.loadTexts: asynchronousEventQueueEntry.setStatus('current')
asynchronousEventQueuePlatformId = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueuePlatformId.setStatus('current')
asynchronousEventQueueInsertedEventCumulativeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueInsertedEventCumulativeCount.setStatus('current')
asynchronousEventQueueWaitingEventCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueWaitingEventCurrentCount.setStatus('current')
asynchronousEventQueueWaitingEventMinCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueWaitingEventMinCount.setStatus('current')
asynchronousEventQueueWaitingEventMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueWaitingEventMaxCount.setStatus('current')
asynchronousEventQueueProcessedEventCumulativeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueProcessedEventCumulativeCount.setStatus('current')
asynchronousEventQueueEventProcessingCumulativeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueEventProcessingCumulativeTime.setStatus('current')
asynchronousEventQueueEventProcessingMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueEventProcessingMinTime.setStatus('current')
asynchronousEventQueueEventProcessingMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueEventProcessingMaxTime.setStatus('current')
asynchronousEventQueueFailedEventCumulativeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueFailedEventCumulativeCount.setStatus('current')
asynchronousEventQueueFailedEventLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 22, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asynchronousEventQueueFailedEventLastError.setStatus('current')
slsConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 11308, 3, 23))
slsConnectionConnected = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 23, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slsConnectionConnected.setStatus('current')
slsConnectionLicenseCheckSuccessCumulativeCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 23, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slsConnectionLicenseCheckSuccessCumulativeCount.setStatus('current')
slsConnectionLicenseCheckFailedCumulativeCount = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 23, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slsConnectionLicenseCheckFailedCumulativeCount.setStatus('current')
slsConnectionLicenseCheckLastError = MibScalar((1, 3, 6, 1, 4, 1, 11308, 3, 23, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slsConnectionLicenseCheckLastError.setStatus('current')
sqlPoolXATable = MibTable((1, 3, 6, 1, 4, 1, 11308, 3, 24), )
if mibBuilder.loadTexts: sqlPoolXATable.setStatus('current')
sqlPoolXAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1), ).setIndexNames((0, "SWAPCOM-SCC", "sqlPoolXAName"))
if mibBuilder.loadTexts: sqlPoolXAEntry.setStatus('current')
sqlPoolXAName = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXAName.setStatus('current')
sqlPoolXASqlPlatformName = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXASqlPlatformName.setStatus('current')
sqlPoolXADatabaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXADatabaseName.setStatus('current')
sqlPoolXADriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXADriverName.setStatus('current')
sqlPoolXADriverClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXADriverClassName.setStatus('current')
sqlPoolXAMaximumSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXAMaximumSize.setStatus('current')
sqlPoolXAMaximumIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXAMaximumIdleTime.setStatus('current')
sqlPoolXAMaximumWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXAMaximumWaitTime.setStatus('current')
sqlPoolXACheckIsClosedInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACheckIsClosedInterval.setStatus('current')
sqlPoolXACreateConnectionSuccessCumulativeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACreateConnectionSuccessCumulativeCount.setStatus('current')
sqlPoolXACreateConnectionFailureCumulativeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACreateConnectionFailureCumulativeCount.setStatus('current')
sqlPoolXACreateConnectionLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACreateConnectionLastError.setStatus('current')
sqlPoolXAConnectionCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXAConnectionCurrentCount.setStatus('current')
sqlPoolXAConnectionMinCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXAConnectionMinCount.setStatus('current')
sqlPoolXAConnectionMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXAConnectionMaxCount.setStatus('current')
sqlPoolXACheckedOutConnectionCurrentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionCurrentCount.setStatus('current')
sqlPoolXACheckedOutConnectionMinCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionMinCount.setStatus('current')
sqlPoolXACheckedOutConnectionMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionMaxCount.setStatus('current')
sqlPoolXACheckedOutConnectionCumulativeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionCumulativeCount.setStatus('current')
sqlPoolXACheckedOutConnectionCumulativeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionCumulativeTime.setStatus('current')
sqlPoolXACheckedOutConnectionMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionMinTime.setStatus('current')
sqlPoolXACheckedOutConnectionMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionMaxTime.setStatus('current')
sqlPoolXACheckedOutConnectionAverageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11308, 3, 24, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sqlPoolXACheckedOutConnectionAverageTime.setStatus('current')
mibBuilder.exportSymbols("SWAPCOM-SCC", transactionManagerActiveTransactionMinCount=transactionManagerActiveTransactionMinCount, remotePlatformEntry=remotePlatformEntry, internet=internet, sqlPoolXACreateConnectionFailureCumulativeCount=sqlPoolXACreateConnectionFailureCumulativeCount, asynchronousEventQueueTable=asynchronousEventQueueTable, sqlPoolXACheckedOutConnectionMinCount=sqlPoolXACheckedOutConnectionMinCount, slsConnectionLicenseCheckFailedCumulativeCount=slsConnectionLicenseCheckFailedCumulativeCount, sqlPoolXAName=sqlPoolXAName, lockManagerLockedItemMaxCount=lockManagerLockedItemMaxCount, schedulerTaskExecutionMaxTime=schedulerTaskExecutionMaxTime, asynchronousEventQueueProcessedEventCumulativeCount=asynchronousEventQueueProcessedEventCumulativeCount, transactionManagerCommittedTransactionCumulativeCount=transactionManagerCommittedTransactionCumulativeCount, sqlPoolXADatabaseName=sqlPoolXADatabaseName, sqlPoolXACheckedOutConnectionMaxTime=sqlPoolXACheckedOutConnectionMaxTime, versionTable=versionTable, platformPlatformStatus=platformPlatformStatus, asynchronousEventQueuePlatformId=asynchronousEventQueuePlatformId, transactionManagerActiveTransactionCurrentCount=transactionManagerActiveTransactionCurrentCount, sqlPoolXAMaximumSize=sqlPoolXAMaximumSize, schedulerTaskExecutionMinTime=schedulerTaskExecutionMinTime, lockManagerBlockedTransactionCurrentCount=lockManagerBlockedTransactionCurrentCount, slsConnectionLicenseCheckLastError=slsConnectionLicenseCheckLastError, sqlPoolXACreateConnectionLastError=sqlPoolXACreateConnectionLastError, transactionManagerTransactionCumulativeTime=transactionManagerTransactionCumulativeTime, schedulerTaskRunning=schedulerTaskRunning, asynchronousEventQueueWaitingEventCurrentCount=asynchronousEventQueueWaitingEventCurrentCount, platform=platform, alarmProbeAlertSource=alarmProbeAlertSource, alarmProbeSeverity=alarmProbeSeverity, lockManagerBlockedTransactionMaxCount=lockManagerBlockedTransactionMaxCount, alarmProbeLastSeverityChange=alarmProbeLastSeverityChange, PYSNMP_MODULE_ID=swapcom, sqlPoolXACreateConnectionSuccessCumulativeCount=sqlPoolXACreateConnectionSuccessCumulativeCount, transactionManagerActiveTransactionMaxCount=transactionManagerActiveTransactionMaxCount, sqlPoolXADriverName=sqlPoolXADriverName, transactionManagerRolledbackTransactionCumulativeCount=transactionManagerRolledbackTransactionCumulativeCount, lockManagerLockRejectedOnDeadlockCumulativeCount=lockManagerLockRejectedOnDeadlockCumulativeCount, schedulerTaskExecutionCumulativeTime=schedulerTaskExecutionCumulativeTime, sqlPoolXACheckedOutConnectionCumulativeTime=sqlPoolXACheckedOutConnectionCumulativeTime, enterprises=enterprises, versionProductVersion=versionProductVersion, sqlPoolXADriverClassName=sqlPoolXADriverClassName, sqlPoolXAMaximumIdleTime=sqlPoolXAMaximumIdleTime, alarmProbeTable=alarmProbeTable, asynchronousEventQueueInsertedEventCumulativeCount=asynchronousEventQueueInsertedEventCumulativeCount, lockManagerLockRejectedOnTimeoutCumulativeCount=lockManagerLockRejectedOnTimeoutCumulativeCount, transactionManagerTransactionMinTime=transactionManagerTransactionMinTime, asynchronousEventQueueEventProcessingMaxTime=asynchronousEventQueueEventProcessingMaxTime, schedulerTaskName=schedulerTaskName, transactionManagerLongTransactionThreshold=transactionManagerLongTransactionThreshold, lockManagerLockedItemMinCount=lockManagerLockedItemMinCount, slsConnectionConnected=slsConnectionConnected, lockManager=lockManager, asynchronousEventQueueWaitingEventMinCount=asynchronousEventQueueWaitingEventMinCount, remotePlatformPlatformId=remotePlatformPlatformId, asynchronousEventQueueEntry=asynchronousEventQueueEntry, remotePlatformRemotePlatformStatus=remotePlatformRemotePlatformStatus, sqlPoolXACheckedOutConnectionAverageTime=sqlPoolXACheckedOutConnectionAverageTime, asynchronousEventQueueFailedEventLastError=asynchronousEventQueueFailedEventLastError, alarmProbeAlertType=alarmProbeAlertType, slsConnection=slsConnection, sqlPoolXAEntry=sqlPoolXAEntry, schedulerTaskExecutionCumulativeCount=schedulerTaskExecutionCumulativeCount, asynchronousEventQueueEventProcessingCumulativeTime=asynchronousEventQueueEventProcessingCumulativeTime, remotePlatformPlatformProtocol=remotePlatformPlatformProtocol, asynchronousEventQueueWaitingEventMaxCount=asynchronousEventQueueWaitingEventMaxCount, dod=dod, schedulerTaskExecutionRetryCurrentCount=schedulerTaskExecutionRetryCurrentCount, lockManagerLockedItemCurrentCount=lockManagerLockedItemCurrentCount, swapcom=swapcom, sqlPoolXAConnectionMaxCount=sqlPoolXAConnectionMaxCount, sqlPoolXACheckedOutConnectionMaxCount=sqlPoolXACheckedOutConnectionMaxCount, versionProductName=versionProductName, schedulerTaskExecutionLastError=schedulerTaskExecutionLastError, versionBuildDate=versionBuildDate, transactionManager=transactionManager, lockManagerBlockedTransactionMinCount=lockManagerBlockedTransactionMinCount, versionEntry=versionEntry, sqlPoolXASqlPlatformName=sqlPoolXASqlPlatformName, transactionManagerTransactionMaxTime=transactionManagerTransactionMaxTime, platformPlatformId=platformPlatformId, slsConnectionLicenseCheckSuccessCumulativeCount=slsConnectionLicenseCheckSuccessCumulativeCount, sqlPoolXAMaximumWaitTime=sqlPoolXAMaximumWaitTime, lockManagerLockedItemCumulativeCount=lockManagerLockedItemCumulativeCount, sqlPoolXAConnectionMinCount=sqlPoolXAConnectionMinCount, sqlPoolXACheckedOutConnectionMinTime=sqlPoolXACheckedOutConnectionMinTime, schedulerTaskTable=schedulerTaskTable, schedulerTaskEntry=schedulerTaskEntry, sqlPoolXACheckIsClosedInterval=sqlPoolXACheckIsClosedInterval, remotePlatformTable=remotePlatformTable, scc=scc, private=private, alarmProbeEntry=alarmProbeEntry, sqlPoolXACheckedOutConnectionCurrentCount=sqlPoolXACheckedOutConnectionCurrentCount, asynchronousEventQueueFailedEventCumulativeCount=asynchronousEventQueueFailedEventCumulativeCount, versionBuildNumber=versionBuildNumber, asynchronousEventQueueEventProcessingMinTime=asynchronousEventQueueEventProcessingMinTime, sqlPoolXACheckedOutConnectionCumulativeCount=sqlPoolXACheckedOutConnectionCumulativeCount, sqlPoolXATable=sqlPoolXATable, sqlPoolXAConnectionCurrentCount=sqlPoolXAConnectionCurrentCount, transactionManagerTransactionManagerLastError=transactionManagerTransactionManagerLastError, org=org)
