#
# PySNMP MIB module VCP-PRIVATE-MIB-VER-2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VCP-PRIVATE-MIB-VER-2
# Produced by pysmi-0.3.4 at Mon Apr 29 21:26:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, MibIdentifier, Counter32, Gauge32, Counter64, enterprises, Integer32, ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, NotificationType, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "Counter32", "Gauge32", "Counter64", "enterprises", "Integer32", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "NotificationType", "iso", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
datability = MibIdentifier((1, 3, 6, 1, 4, 1, 85))
port = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 1))
server = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 2))
service = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 3))
slot = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 4))
dssAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 5))
dssMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 6))
dssDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 5, 1))
vcp_1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 5, 1, 1)).setLabel("vcp-1000")
vcp_200 = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 5, 1, 2)).setLabel("vcp-200")
vcp_300 = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 5, 1, 3)).setLabel("vcp-300")
dssProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 5, 2))
dssNone = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 5, 2, 1))
dssTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 5, 2, 2))
dssRlogin = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 5, 2, 3))
dssLt = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 5, 2, 4))
dssServerMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 6, 1))
vcpMib = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 6, 1, 1))
vcpSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 1))
vcpPort = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2))
vcpService = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3))
vcpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4))
vcpIpSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 5))
vcpHostname = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 6))
vcpNameserver = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 7))
vcpTacacs = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 8))
vcpIp = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 9))
vcpArp = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 10))
vcpTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 11))
vcpTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12))
vcpRlogin = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 13))
vcpLt = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14))
vcpQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 15))
vcpSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 16))
class Character(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class DisplayChar(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(32, 126)

class LtGroupList(OctetString):
    pass

vSysIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSysIdentifier.setStatus('mandatory')
vSysReboot = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysReboot.setStatus('mandatory')
vSysLtGroupStatus = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("absent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSysLtGroupStatus.setStatus('mandatory')
vSysPrimaryBoot = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("rom", 1), ("mop", 2), ("bootp", 3), ("tftp", 4), ("card", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysPrimaryBoot.setStatus('mandatory')
vSysSecondaryBoot = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rom", 1), ("mop", 2), ("bootp", 3), ("tftp", 4), ("card", 5), ("none", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysSecondaryBoot.setStatus('mandatory')
vSysBootFilePath = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysBootFilePath.setStatus('mandatory')
vSysBootFileName = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysBootFileName.setStatus('mandatory')
vSysBootServer = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysBootServer.setStatus('mandatory')
vSysRemoteBoot = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysRemoteBoot.setStatus('mandatory')
vSysEtherType = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("autoSelect", 1), ("thinWire", 2), ("thickWire", 3), ("tenBaseT", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysEtherType.setStatus('mandatory')
vSysBroadband = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysBroadband.setStatus('mandatory')
vSysPasswordLimit = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysPasswordLimit.setStatus('mandatory')
vSysPrivPassword = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysPrivPassword.setStatus('mandatory')
vSysMaintenancePassword = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysMaintenancePassword.setStatus('mandatory')
vPortBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortBroadcast.setStatus('mandatory')
vPortInactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortInactivityTimer.setStatus('mandatory')
vPortAbsoluteTimer = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1439))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortAbsoluteTimer.setStatus('mandatory')
vPortLock = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortLock.setStatus('mandatory')
vPortLoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortLoginPassword.setStatus('mandatory')
vPortConsoleIndex = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortConsoleIndex.setStatus('mandatory')
vPortFailover = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortFailover.setStatus('mandatory')
vPortSignalCheck = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortSignalCheck.setStatus('mandatory')
vPortLoginMsgEnable = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortLoginMsgEnable.setStatus('mandatory')
vPortBreakDuration = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortBreakDuration.setStatus('mandatory')
vPortXoffMark = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 510))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortXoffMark.setStatus('mandatory')
vPortXonMark = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 510))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortXonMark.setStatus('mandatory')
vPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortNumber.setStatus('mandatory')
vPortTable = MibTable((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14), )
if mibBuilder.loadTexts: vPortTable.setStatus('mandatory')
vPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1), ).setIndexNames((0, "VCP-PRIVATE-MIB-VER-2", "vPortIndex"))
if mibBuilder.loadTexts: vPortEntry.setStatus('mandatory')
vPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortIndex.setStatus('mandatory')
vPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("physicalRS-232", 2), ("physicalRS-423", 3), ("physicalModem", 4), ("physicalLCDPanel", 5), ("virtualConsole", 6), ("virtualNPT", 7), ("virtualX25", 8), ("virtual3270", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortType.setStatus('mandatory')
vPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortName.setStatus('mandatory')
vPortUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortUserName.setStatus('mandatory')
vPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("idle", 2), ("local", 3), ("connecting", 4), ("connected", 5), ("locked", 6), ("serial-interface", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortState.setStatus('mandatory')
vPortLogout = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortLogout.setStatus('mandatory')
vPortActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortActiveSessions.setStatus('mandatory')
vPortCurrSessNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortCurrSessNumber.setStatus('mandatory')
vPortCurrSessProt = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortCurrSessProt.setStatus('mandatory')
vPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("dynamic", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortAccess.setStatus('mandatory')
vPortVirtualEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortVirtualEnable.setStatus('mandatory')
vPortVirtualString = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 112))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortVirtualString.setStatus('mandatory')
vPortSessionLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortSessionLimit.setStatus('mandatory')
vPortProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortProfile.setStatus('mandatory')
vPortQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortQueueing.setStatus('mandatory')
vPortPasswordEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortPasswordEnable.setStatus('mandatory')
vPortTacacsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortTacacsEnable.setStatus('mandatory')
vPortSecurityEnable = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortSecurityEnable.setStatus('mandatory')
vPortGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 19), LtGroupList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortGroups.setStatus('mandatory')
vPortBreakMode = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortBreakMode.setStatus('mandatory')
vPortBackSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 21), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortBackSwitch.setStatus('mandatory')
vPortForwSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 22), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortForwSwitch.setStatus('mandatory')
vPortLocalSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 23), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortLocalSwitch.setStatus('mandatory')
vPortPrefSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortPrefSvc.setStatus('mandatory')
vPortPrefNode = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortPrefNode.setStatus('mandatory')
vPortPrefPort = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortPrefPort.setStatus('mandatory')
vPortPrefMode = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dedicated", 1), ("preferred", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortPrefMode.setStatus('mandatory')
vPortAutoConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortAutoConnect.setStatus('mandatory')
vPortPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortPrompt.setStatus('mandatory')
vPortInactiveLogout = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortInactiveLogout.setStatus('mandatory')
vPortAutoPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortAutoPrompt.setStatus('mandatory')
vPortBroadcastEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortBroadcastEnable.setStatus('mandatory')
vPortInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortInterrupts.setStatus('mandatory')
vPortMessageCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortMessageCodes.setStatus('mandatory')
vPortVerification = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortVerification.setStatus('mandatory')
vPortDialup = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortDialup.setStatus('mandatory')
vPortRemoteModify = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortRemoteModify.setStatus('mandatory')
vPortAbsoluteLogout = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortAbsoluteLogout.setStatus('mandatory')
vPortIOflush = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortIOflush.setStatus('mandatory')
vPortLogoutMsgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortLogoutMsgEnable.setStatus('mandatory')
vPortScreenType = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ansi", 1), ("softcopy", 2), ("hardcopy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortScreenType.setStatus('mandatory')
vPortFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("xonXoff", 2), ("hardware", 3), ("ctsRts", 4), ("dsrDtr", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortFlowType.setStatus('mandatory')
vPortInFlowState = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("stop", 3), ("go", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortInFlowState.setStatus('mandatory')
vPortOutFlowState = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("stop", 3), ("go", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortOutFlowState.setStatus('mandatory')
vPortCTSstate = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortCTSstate.setStatus('mandatory')
vPortDSRstate = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortDSRstate.setStatus('mandatory')
vPortDCDstate = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortDCDstate.setStatus('mandatory')
vPortDTRstate = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortDTRstate.setStatus('mandatory')
vPortRIstate = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortRIstate.setStatus('mandatory')
vPortRTSstate = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortRTSstate.setStatus('mandatory')
vPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("baud-110", 2), ("baud-300", 3), ("baud-600", 4), ("baud-1200", 5), ("baud-2400", 6), ("baud-4800", 7), ("baud-9600", 8), ("baud-14400", 9), ("baud-19200", 10), ("baud-28800", 11), ("baud-38400", 12), ("baud-57600", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortSpeed.setStatus('mandatory')
vPortCharSize = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("seven-bits", 2), ("eight-bits", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortCharSize.setStatus('mandatory')
vPortParityType = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("not-applicable", 1), ("none", 2), ("even", 3), ("odd", 4), ("mark", 5), ("space", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortParityType.setStatus('mandatory')
vPortAutobaud = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortAutobaud.setStatus('mandatory')
vPortModemControl = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortModemControl.setStatus('mandatory')
vPortDSRlogout = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortDSRlogout.setStatus('mandatory')
vPortRing = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortRing.setStatus('mandatory')
vPortDTRwait = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortDTRwait.setStatus('mandatory')
vPortSignalCheckEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortSignalCheckEnable.setStatus('mandatory')
vPortHandshake = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("signalCTS", 1), ("signalRI", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortHandshake.setStatus('mandatory')
vPortRcvChars = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortRcvChars.setStatus('mandatory')
vPortTrnChars = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortTrnChars.setStatus('mandatory')
vPortFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortFrameErrs.setStatus('mandatory')
vPortOverrunErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortOverrunErrs.setStatus('mandatory')
vPortParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortParityErrs.setStatus('mandatory')
vPortCharsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 2, 14, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortCharsDropped.setStatus('mandatory')
vSvcRatingMode = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scaled", 1), ("unScaled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcRatingMode.setStatus('mandatory')
vSvcCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSvcCurrNumber.setStatus('mandatory')
vSvcTable = MibTable((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 3), )
if mibBuilder.loadTexts: vSvcTable.setStatus('mandatory')
vSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 3, 1), ).setIndexNames((0, "VCP-PRIVATE-MIB-VER-2", "vSvcName"))
if mibBuilder.loadTexts: vSvcEntry.setStatus('mandatory')
vSvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcName.setStatus('mandatory')
vSvcPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcPorts.setStatus('mandatory')
vSvcIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcIdent.setStatus('mandatory')
vSvcRating = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSvcRating.setStatus('mandatory')
vSvcLtEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcLtEnable.setStatus('mandatory')
vSvcTelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcTelEnable.setStatus('mandatory')
vSvcLprEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcLprEnable.setStatus('mandatory')
vSvcRawEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcRawEnable.setStatus('mandatory')
vSvcVirtualEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcVirtualEnable.setStatus('mandatory')
vSvcVirtualText = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 112))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcVirtualText.setStatus('mandatory')
vSvcConnectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcConnectEnable.setStatus('mandatory')
vSvcPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcPassword.setStatus('mandatory')
vSvcQueueEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcQueueEnable.setStatus('mandatory')
vSvcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 3, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcIpAddr.setStatus('mandatory')
vSvcTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcTcpPort.setStatus('mandatory')
vSvcProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcProfile.setStatus('mandatory')
vSvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcStatus.setStatus('mandatory')
vProfCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vProfCurrNumber.setStatus('mandatory')
vProfTable = MibTable((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2), )
if mibBuilder.loadTexts: vProfTable.setStatus('mandatory')
vProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1), ).setIndexNames((0, "VCP-PRIVATE-MIB-VER-2", "vProfName"))
if mibBuilder.loadTexts: vProfEntry.setStatus('mandatory')
vProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfName.setStatus('mandatory')
vProfDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfDomain.setStatus('mandatory')
vProfConcatenate = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfConcatenate.setStatus('mandatory')
vProfPermHostOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfPermHostOnly.setStatus('mandatory')
vProfTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfTcpPort.setStatus('mandatory')
vProfTcpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfTcpTimeout.setStatus('mandatory')
vProfTcpKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfTcpKeepalive.setStatus('mandatory')
vProfIpTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfIpTTL.setStatus('mandatory')
vProfIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfIpPrecedence.setStatus('mandatory')
vProfTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfTermType.setStatus('mandatory')
vProfCrToNet = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfCrToNet.setStatus('mandatory')
vProfCrFromTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfCrFromTerm.setStatus('mandatory')
vProfPadChar = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 13), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfPadChar.setStatus('mandatory')
vProfPadLength = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfPadLength.setStatus('mandatory')
vProfEndRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 15), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfEndRecord.setStatus('mandatory')
vProfNop = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 16), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfNop.setStatus('mandatory')
vProfDataMark = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 17), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfDataMark.setStatus('mandatory')
vProfBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 18), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfBreak.setStatus('mandatory')
vProfIntProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 19), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfIntProcess.setStatus('mandatory')
vProfAbortOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 20), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfAbortOutput.setStatus('mandatory')
vProfAttention = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 21), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfAttention.setStatus('mandatory')
vProfEraseChar = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 22), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfEraseChar.setStatus('mandatory')
vProfEraseLine = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 23), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfEraseLine.setStatus('mandatory')
vProfGoAhead = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 24), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfGoAhead.setStatus('mandatory')
vProfNullPass = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfNullPass.setStatus('mandatory')
vProfLocalEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("attempt", 1), ("refuse", 2), ("allow", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfLocalEcho.setStatus('mandatory')
vProfRemoteEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("attempt", 1), ("refuse", 2), ("allow", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfRemoteEcho.setStatus('mandatory')
vProfLocalBinary = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("attempt", 1), ("refuse", 2), ("allow", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfLocalBinary.setStatus('mandatory')
vProfRemoteBinary = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("attempt", 1), ("refuse", 2), ("allow", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfRemoteBinary.setStatus('mandatory')
vProfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfStatus.setStatus('mandatory')
vSecEnable = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSecEnable.setStatus('mandatory')
vSecCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSecCurrNumber.setStatus('mandatory')
vSecTable = MibTable((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 5, 3), )
if mibBuilder.loadTexts: vSecTable.setStatus('mandatory')
vSecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 5, 3, 1), ).setIndexNames((0, "VCP-PRIVATE-MIB-VER-2", "vSecIndex"))
if mibBuilder.loadTexts: vSecEntry.setStatus('mandatory')
vSecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSecIndex.setStatus('mandatory')
vSecAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 5, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSecAddress.setStatus('mandatory')
vSecMask = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 5, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSecMask.setStatus('mandatory')
vSecGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 5, 3, 1, 4), LtGroupList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSecGroups.setStatus('mandatory')
vSecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSecStatus.setStatus('mandatory')
vHostCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vHostCurrNumber.setStatus('mandatory')
vHostTable = MibTable((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 6, 2), )
if mibBuilder.loadTexts: vHostTable.setStatus('mandatory')
vHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 6, 2, 1), ).setIndexNames((0, "VCP-PRIVATE-MIB-VER-2", "vHostHostname"))
if mibBuilder.loadTexts: vHostEntry.setStatus('mandatory')
vHostHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 6, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vHostHostname.setStatus('mandatory')
vHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 6, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vHostAddress.setStatus('mandatory')
vHostTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vHostTTL.setStatus('mandatory')
vHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vHostStatus.setStatus('mandatory')
vNsRequestMode = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("recursive", 1), ("nonRecursive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vNsRequestMode.setStatus('mandatory')
vNsAllowLowerCase = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vNsAllowLowerCase.setStatus('mandatory')
vNsCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vNsCurrNumber.setStatus('mandatory')
vNsTable = MibTable((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 7, 4), )
if mibBuilder.loadTexts: vNsTable.setStatus('mandatory')
vNsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 7, 4, 1), ).setIndexNames((0, "VCP-PRIVATE-MIB-VER-2", "vNsAddress"))
if mibBuilder.loadTexts: vNsEntry.setStatus('mandatory')
vNsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 7, 4, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vNsAddress.setStatus('mandatory')
vNsHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 7, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vNsHostname.setStatus('mandatory')
vNsTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 7, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vNsTTL.setStatus('mandatory')
vNsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vNsStatus.setStatus('mandatory')
vTacServerCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTacServerCurrNumber.setStatus('mandatory')
vTacTable = MibTable((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 8, 2), )
if mibBuilder.loadTexts: vTacTable.setStatus('mandatory')
vTacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 8, 2, 1), ).setIndexNames((0, "VCP-PRIVATE-MIB-VER-2", "vTacAddress"))
if mibBuilder.loadTexts: vTacEntry.setStatus('mandatory')
vTacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 8, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTacAddress.setStatus('mandatory')
vTacHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 8, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTacHostname.setStatus('mandatory')
vTacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTacStatus.setStatus('mandatory')
vIpBcastAddr = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 9, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIpBcastAddr.setStatus('mandatory')
vIpMaxAddr = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIpMaxAddr.setStatus('mandatory')
vIpMaxHostHashEntries = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("size-11", 1), ("size-13", 2), ("size-17", 3), ("size-19", 4), ("size-23", 5), ("size-29", 6), ("size-31", 7), ("size-37", 8), ("size-41", 9), ("size-43", 10), ("size-47", 11), ("size-49", 12), ("size-53", 13), ("size-59", 14), ("size-61", 15), ("size-67", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIpMaxHostHashEntries.setStatus('mandatory')
vIpMaxNetHashEntries = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("size-11", 1), ("size-13", 2), ("size-17", 3), ("size-19", 4), ("size-23", 5), ("size-29", 6), ("size-31", 7), ("size-37", 8), ("size-41", 9), ("size-43", 10), ("size-47", 11), ("size-49", 12), ("size-53", 13), ("size-59", 14), ("size-61", 15), ("size-67", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIpMaxNetHashEntries.setStatus('mandatory')
vIpMaxInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIpMaxInterfaces.setStatus('mandatory')
vIpMaxRoutes = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIpMaxRoutes.setStatus('mandatory')
vArpMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vArpMaxEntries.setStatus('mandatory')
vArpRetryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vArpRetryTimeout.setStatus('mandatory')
vArpRetryMax = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vArpRetryMax.setStatus('mandatory')
vArpConfirmTimer = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vArpConfirmTimer.setStatus('mandatory')
vArpIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 1800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vArpIdleTimeout.setStatus('mandatory')
vTcpIpPrecedence = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTcpIpPrecedence.setStatus('mandatory')
vTcpSendQSize = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTcpSendQSize.setStatus('mandatory')
vTcpRcvWinSize = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTcpRcvWinSize.setStatus('mandatory')
vTcpSegSize = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 511))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTcpSegSize.setStatus('mandatory')
vTcpTimerInterval = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 11, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTcpTimerInterval.setStatus('mandatory')
vTcpChecksumEnable = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTcpChecksumEnable.setStatus('mandatory')
vTelCourierEnable = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelCourierEnable.setStatus('mandatory')
vTelCourierText = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelCourierText.setStatus('mandatory')
vTelSessCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessCurrNumber.setStatus('mandatory')
vTelSessTable = MibTable((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4), )
if mibBuilder.loadTexts: vTelSessTable.setStatus('mandatory')
vTelSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1), ).setIndexNames((0, "VCP-PRIVATE-MIB-VER-2", "vTelSessPortIndex"), (0, "VCP-PRIVATE-MIB-VER-2", "vTelSessIndex"))
if mibBuilder.loadTexts: vTelSessEntry.setStatus('mandatory')
vTelSessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessPortIndex.setStatus('mandatory')
vTelSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessIndex.setStatus('mandatory')
vTelSessOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("network", 2), ("local", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessOrigin.setStatus('mandatory')
vTelSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("starting", 1), ("running", 2), ("stopping", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessState.setStatus('mandatory')
vTelSessDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessDisconnect.setStatus('mandatory')
vTelSessLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessLocalAddr.setStatus('mandatory')
vTelSessLocalTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessLocalTcpPort.setStatus('mandatory')
vTelSessRemAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessRemAddr.setStatus('mandatory')
vTelSessRemTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessRemTcpPort.setStatus('mandatory')
vTelSessCrToNet = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessCrToNet.setStatus('mandatory')
vTelSessCrFromTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessCrFromTerm.setStatus('mandatory')
vTelSessPadChar = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 12), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessPadChar.setStatus('mandatory')
vTelSessPadLength = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessPadLength.setStatus('mandatory')
vTelSessUserTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessUserTimeout.setStatus('mandatory')
vTelSessKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessKeepalive.setStatus('mandatory')
vTelSessIpTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessIpTTL.setStatus('mandatory')
vTelSessIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessIpPrecedence.setStatus('mandatory')
vTelSessEndRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 18), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessEndRecord.setStatus('mandatory')
vTelSessNop = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 19), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessNop.setStatus('mandatory')
vTelSessDataMark = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 20), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessDataMark.setStatus('mandatory')
vTelSessBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 21), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessBreak.setStatus('mandatory')
vTelSessIntProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 22), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessIntProcess.setStatus('mandatory')
vTelSessAbortOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 23), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessAbortOutput.setStatus('mandatory')
vTelSessAttention = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 24), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessAttention.setStatus('mandatory')
vTelSessEraseChar = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 25), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessEraseChar.setStatus('mandatory')
vTelSessEraseLine = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 26), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessEraseLine.setStatus('mandatory')
vTelSessGoAhead = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 27), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessGoAhead.setStatus('mandatory')
vTelSessNullPass = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessNullPass.setStatus('mandatory')
vTelSessTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessTermType.setStatus('mandatory')
vTelSessLocalEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessLocalEcho.setStatus('mandatory')
vTelSessRemoteEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessRemoteEcho.setStatus('mandatory')
vTelSessLocalBinary = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessLocalBinary.setStatus('mandatory')
vTelSessRemoteBinary = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 12, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessRemoteBinary.setStatus('mandatory')
vRlogSessCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessCurrNumber.setStatus('mandatory')
vRlogSessTable = MibTable((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 13, 2), )
if mibBuilder.loadTexts: vRlogSessTable.setStatus('mandatory')
vRlogSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 13, 2, 1), ).setIndexNames((0, "VCP-PRIVATE-MIB-VER-2", "vRlogSessPortIndex"), (0, "VCP-PRIVATE-MIB-VER-2", "vRlogSessIndex"))
if mibBuilder.loadTexts: vRlogSessEntry.setStatus('mandatory')
vRlogSessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessPortIndex.setStatus('mandatory')
vRlogSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessIndex.setStatus('mandatory')
vRlogSessOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("network", 2), ("local", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessOrigin.setStatus('mandatory')
vRlogSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("starting", 1), ("running", 2), ("stopping", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessState.setStatus('mandatory')
vRlogSessDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRlogSessDisconnect.setStatus('mandatory')
vRlogSessLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 13, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessLocalAddr.setStatus('mandatory')
vRlogSessLocalTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessLocalTcpPort.setStatus('mandatory')
vRlogSessRemAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 13, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessRemAddr.setStatus('mandatory')
vRlogSessRemTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 13, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessRemTcpPort.setStatus('mandatory')
vRlogSessTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 13, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessTermType.setStatus('mandatory')
vLtNodeName = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtNodeName.setStatus('optional')
vLtNodeID = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtNodeID.setStatus('optional')
vLtNodeGroups = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 3), LtGroupList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtNodeGroups.setStatus('optional')
vLtNumber = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtNumber.setStatus('optional')
vLtMcastEnable = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtMcastEnable.setStatus('optional')
vLtMcastTimer = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtMcastTimer.setStatus('optional')
vLtCktTimer = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtCktTimer.setStatus('optional')
vLtKeepaliveTimer = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtKeepaliveTimer.setStatus('optional')
vLtMaxRetran = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtMaxRetran.setStatus('optional')
vLtSlotPerCkt = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtSlotPerCkt.setStatus('optional')
vLtMaxNodes = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtMaxNodes.setStatus('optional')
vLtMaxSvcs = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtMaxSvcs.setStatus('optional')
vLtMaxCkts = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtMaxCkts.setStatus('optional')
vLtSessCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtSessCurrNumber.setStatus('optional')
vLtSessTable = MibTable((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 15), )
if mibBuilder.loadTexts: vLtSessTable.setStatus('optional')
vLtSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 15, 1), ).setIndexNames((0, "VCP-PRIVATE-MIB-VER-2", "vLtSessIndex"))
if mibBuilder.loadTexts: vLtSessEntry.setStatus('optional')
vLtSessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtSessPortIndex.setStatus('optional')
vLtSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtSessIndex.setStatus('optional')
vLtSessOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("network", 2), ("local", 3), ("remote-port", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtSessOrigin.setStatus('optional')
vLtSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("starting", 1), ("running", 2), ("stopping", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtSessState.setStatus('optional')
vLtSessDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtSessDisconnect.setStatus('optional')
vLtSessSvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 15, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtSessSvcName.setStatus('optional')
vLtSessNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 15, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtSessNodeName.setStatus('optional')
vLtSessDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 15, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtSessDestName.setStatus('optional')
vLtTotalRcvPkts = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtTotalRcvPkts.setStatus('optional')
vLtTotalTrnPkts = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtTotalTrnPkts.setStatus('optional')
vLtTotalRetranPkts = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtTotalRetranPkts.setStatus('optional')
vLtRcvCorruptPkts = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtRcvCorruptPkts.setStatus('optional')
vLtRcvCorruptMcasts = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtRcvCorruptMcasts.setStatus('optional')
vLtRcvDuplicatePkts = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtRcvDuplicatePkts.setStatus('optional')
vLtReqAccepted = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtReqAccepted.setStatus('optional')
vLtReqRejected = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtReqRejected.setStatus('optional')
vLtTotalNodeDiscards = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 14, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtTotalNodeDiscards.setStatus('optional')
vQueMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 15, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vQueMaxEntries.setStatus('optional')
vQueCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vQueCurrNumber.setStatus('optional')
vQueTable = MibTable((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 15, 3), )
if mibBuilder.loadTexts: vQueTable.setStatus('optional')
vQueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 15, 3, 1), ).setIndexNames((0, "VCP-PRIVATE-MIB-VER-2", "vQueEntryNumber"))
if mibBuilder.loadTexts: vQueEntry.setStatus('optional')
vQueEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vQueEntryNumber.setStatus('optional')
vQueSvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 15, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vQueSvcName.setStatus('optional')
vQueNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 15, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vQueNodeName.setStatus('optional')
vQuePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 15, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vQuePortName.setStatus('optional')
vQueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 15, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vQueStatus.setStatus('optional')
vSnmpReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 16, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSnmpReadCommunity.setStatus('mandatory')
vSnmpWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 16, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSnmpWriteCommunity.setStatus('mandatory')
vSnmpReadWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 16, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSnmpReadWriteCommunity.setStatus('mandatory')
vSnmpWriteEnable = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 16, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSnmpWriteEnable.setStatus('mandatory')
vSnmpTrapDestCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 16, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSnmpTrapDestCurrNumber.setStatus('mandatory')
vSnmpTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 16, 6), )
if mibBuilder.loadTexts: vSnmpTrapDestTable.setStatus('mandatory')
vSnmpTrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 16, 6, 1), ).setIndexNames((0, "VCP-PRIVATE-MIB-VER-2", "vSnmpTrapDestAddr"))
if mibBuilder.loadTexts: vSnmpTrapDestEntry.setStatus('mandatory')
vSnmpTrapDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 16, 6, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSnmpTrapDestAddr.setStatus('mandatory')
vSnmpTrapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 16, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read", 1), ("write", 2), ("readwrite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSnmpTrapDestCommunity.setStatus('mandatory')
vSnmpTrapDestColdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 16, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSnmpTrapDestColdEnable.setStatus('mandatory')
vSnmpTrapDestAuthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 16, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSnmpTrapDestAuthEnable.setStatus('mandatory')
vSnmpTrapDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 85, 6, 1, 1, 16, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSnmpTrapDestStatus.setStatus('mandatory')
mibBuilder.exportSymbols("VCP-PRIVATE-MIB-VER-2", vHostTTL=vHostTTL, vSvcCurrNumber=vSvcCurrNumber, vQueCurrNumber=vQueCurrNumber, vRlogSessTermType=vRlogSessTermType, vPortActiveSessions=vPortActiveSessions, vSvcConnectEnable=vSvcConnectEnable, vSvcQueueEnable=vSvcQueueEnable, vSvcStatus=vSvcStatus, LtGroupList=LtGroupList, vLtSessPortIndex=vLtSessPortIndex, vPortFlowType=vPortFlowType, vSvcLtEnable=vSvcLtEnable, vRlogSessDisconnect=vRlogSessDisconnect, vProfEntry=vProfEntry, vRlogSessRemAddr=vRlogSessRemAddr, vProfTable=vProfTable, vSvcEntry=vSvcEntry, vRlogSessTable=vRlogSessTable, vArpIdleTimeout=vArpIdleTimeout, vSnmpTrapDestColdEnable=vSnmpTrapDestColdEnable, vPortVirtualEnable=vPortVirtualEnable, vTelSessPortIndex=vTelSessPortIndex, vSysBootFileName=vSysBootFileName, vTelSessIntProcess=vTelSessIntProcess, vQueSvcName=vQueSvcName, vcpQueue=vcpQueue, vLtRcvDuplicatePkts=vLtRcvDuplicatePkts, vLtSessCurrNumber=vLtSessCurrNumber, vHostEntry=vHostEntry, vSysSecondaryBoot=vSysSecondaryBoot, vSnmpReadWriteCommunity=vSnmpReadWriteCommunity, vProfNullPass=vProfNullPass, vSvcVirtualEnable=vSvcVirtualEnable, vPortBroadcast=vPortBroadcast, vLtTotalRetranPkts=vLtTotalRetranPkts, vHostTable=vHostTable, vTacTable=vTacTable, vLtRcvCorruptPkts=vLtRcvCorruptPkts, vSecEntry=vSecEntry, vTelSessPadLength=vTelSessPadLength, vTelSessIpTTL=vTelSessIpTTL, vPortCurrSessProt=vPortCurrSessProt, vProfBreak=vProfBreak, vSysLtGroupStatus=vSysLtGroupStatus, vPortTable=vPortTable, vProfAttention=vProfAttention, vSnmpWriteCommunity=vSnmpWriteCommunity, vTacServerCurrNumber=vTacServerCurrNumber, vTelSessState=vTelSessState, vPortPrefSvc=vPortPrefSvc, dssProtocol=dssProtocol, vcpRlogin=vcpRlogin, vProfTermType=vProfTermType, vPortInterrupts=vPortInterrupts, vcpTelnet=vcpTelnet, vTcpSegSize=vTcpSegSize, vProfAbortOutput=vProfAbortOutput, vSvcPorts=vSvcPorts, vPortMessageCodes=vPortMessageCodes, vcpTcp=vcpTcp, vTelSessLocalEcho=vTelSessLocalEcho, vPortLoginPassword=vPortLoginPassword, vPortAccess=vPortAccess, vSecStatus=vSecStatus, vProfStatus=vProfStatus, vIpMaxInterfaces=vIpMaxInterfaces, vNsCurrNumber=vNsCurrNumber, vProfTcpKeepalive=vProfTcpKeepalive, vTelSessTermType=vTelSessTermType, vSysRemoteBoot=vSysRemoteBoot, vSysReboot=vSysReboot, vPortFrameErrs=vPortFrameErrs, vSvcRatingMode=vSvcRatingMode, vPortIndex=vPortIndex, vTelSessEraseLine=vTelSessEraseLine, vTelSessRemoteBinary=vTelSessRemoteBinary, vLtMaxSvcs=vLtMaxSvcs, vLtTotalNodeDiscards=vLtTotalNodeDiscards, vTacAddress=vTacAddress, vPortEntry=vPortEntry, vSnmpReadCommunity=vSnmpReadCommunity, vProfCrToNet=vProfCrToNet, dssNone=dssNone, vLtSessSvcName=vLtSessSvcName, vPortLock=vPortLock, service=service, vLtRcvCorruptMcasts=vLtRcvCorruptMcasts, vPortDTRstate=vPortDTRstate, vcpNameserver=vcpNameserver, vSecTable=vSecTable, vcp_1000=vcp_1000, vPortName=vPortName, vPortDTRwait=vPortDTRwait, vProfDataMark=vProfDataMark, vSvcRawEnable=vSvcRawEnable, vTacStatus=vTacStatus, vPortInFlowState=vPortInFlowState, vRlogSessRemTcpPort=vRlogSessRemTcpPort, vSecCurrNumber=vSecCurrNumber, vSvcProfile=vSvcProfile, vTelSessDisconnect=vTelSessDisconnect, vArpConfirmTimer=vArpConfirmTimer, vPortAbsoluteLogout=vPortAbsoluteLogout, vNsTable=vNsTable, vPortAutoPrompt=vPortAutoPrompt, vPortAutobaud=vPortAutobaud, dssDevice=dssDevice, vQueNodeName=vQueNodeName, vProfIpPrecedence=vProfIpPrecedence, vProfIpTTL=vProfIpTTL, vIpMaxAddr=vIpMaxAddr, vRlogSessCurrNumber=vRlogSessCurrNumber, vPortForwSwitch=vPortForwSwitch, vTelSessCrFromTerm=vTelSessCrFromTerm, vSysBootFilePath=vSysBootFilePath, vSysPasswordLimit=vSysPasswordLimit, vPortDialup=vPortDialup, vPortCTSstate=vPortCTSstate, vcpArp=vcpArp, vPortAbsoluteTimer=vPortAbsoluteTimer, dssLt=dssLt, vSnmpTrapDestTable=vSnmpTrapDestTable, vTelSessEndRecord=vTelSessEndRecord, vPortSessionLimit=vPortSessionLimit, vcpLt=vcpLt, vQueEntry=vQueEntry, vcpSnmp=vcpSnmp, vPortNumber=vPortNumber, vTelSessKeepalive=vTelSessKeepalive, vPortRTSstate=vPortRTSstate, vPortParityErrs=vPortParityErrs, vPortModemControl=vPortModemControl, vSnmpWriteEnable=vSnmpWriteEnable, vProfEndRecord=vProfEndRecord, vHostStatus=vHostStatus, vTelSessTable=vTelSessTable, vTelSessRemoteEcho=vTelSessRemoteEcho, dssRlogin=dssRlogin, vPortFailover=vPortFailover, vLtReqAccepted=vLtReqAccepted, vSnmpTrapDestCommunity=vSnmpTrapDestCommunity, vPortLoginMsgEnable=vPortLoginMsgEnable, vPortUserName=vPortUserName, dssTelnet=dssTelnet, vProfTcpTimeout=vProfTcpTimeout, vProfLocalEcho=vProfLocalEcho, vcpHostname=vcpHostname, vPortPrefNode=vPortPrefNode, vPortLocalSwitch=vPortLocalSwitch, vRlogSessIndex=vRlogSessIndex, vRlogSessState=vRlogSessState, vHostCurrNumber=vHostCurrNumber, vPortPrefPort=vPortPrefPort, vcpService=vcpService, vNsEntry=vNsEntry, vPortDSRstate=vPortDSRstate, vNsStatus=vNsStatus, vTelSessNullPass=vTelSessNullPass, vTcpTimerInterval=vTcpTimerInterval, vRlogSessLocalTcpPort=vRlogSessLocalTcpPort, vPortVirtualString=vPortVirtualString, vPortScreenType=vPortScreenType, vSnmpTrapDestCurrNumber=vSnmpTrapDestCurrNumber, vPortInactiveLogout=vPortInactiveLogout, vLtMcastEnable=vLtMcastEnable, vProfRemoteEcho=vProfRemoteEcho, vArpRetryTimeout=vArpRetryTimeout, vSysBroadband=vSysBroadband, vIpMaxHostHashEntries=vIpMaxHostHashEntries, vPortBreakMode=vPortBreakMode, vPortXoffMark=vPortXoffMark, vLtTotalTrnPkts=vLtTotalTrnPkts, vLtMcastTimer=vLtMcastTimer, vLtSessTable=vLtSessTable, vPortType=vPortType, vPortPrompt=vPortPrompt, datability=datability, vPortBreakDuration=vPortBreakDuration, vProfTcpPort=vProfTcpPort, vRlogSessOrigin=vRlogSessOrigin, vQuePortName=vQuePortName, vRlogSessPortIndex=vRlogSessPortIndex, vPortBroadcastEnable=vPortBroadcastEnable, vSnmpTrapDestAuthEnable=vSnmpTrapDestAuthEnable, vSysPrimaryBoot=vSysPrimaryBoot, vQueEntryNumber=vQueEntryNumber, DisplayChar=DisplayChar, vPortOverrunErrs=vPortOverrunErrs, vPortCharsDropped=vPortCharsDropped, vPortRcvChars=vPortRcvChars, Character=Character, vIpMaxNetHashEntries=vIpMaxNetHashEntries, vPortQueueing=vPortQueueing, vPortOutFlowState=vPortOutFlowState, dssServerMibs=dssServerMibs, vPortConsoleIndex=vPortConsoleIndex, vSvcRating=vSvcRating, vSecIndex=vSecIndex, vSnmpTrapDestAddr=vSnmpTrapDestAddr, vTelSessRemAddr=vTelSessRemAddr, vTelSessEraseChar=vTelSessEraseChar, vPortRIstate=vPortRIstate, vTelSessDataMark=vTelSessDataMark, vPortSecurityEnable=vPortSecurityEnable, vTcpRcvWinSize=vTcpRcvWinSize, vProfEraseChar=vProfEraseChar, vProfCurrNumber=vProfCurrNumber, vSvcLprEnable=vSvcLprEnable, vTcpChecksumEnable=vTcpChecksumEnable, vPortSignalCheck=vPortSignalCheck, vcpIp=vcpIp, server=server, vLtNodeName=vLtNodeName, vTelSessCurrNumber=vTelSessCurrNumber, vProfPadChar=vProfPadChar, vIpMaxRoutes=vIpMaxRoutes, vTcpSendQSize=vTcpSendQSize, vPortCurrSessNumber=vPortCurrSessNumber, vLtSessState=vLtSessState, vLtSessNodeName=vLtSessNodeName, vPortDCDstate=vPortDCDstate, vTelSessOrigin=vTelSessOrigin, vSysPrivPassword=vSysPrivPassword, vPortLogout=vPortLogout, vTelSessLocalTcpPort=vTelSessLocalTcpPort, vProfLocalBinary=vProfLocalBinary, vNsAllowLowerCase=vNsAllowLowerCase, vProfRemoteBinary=vProfRemoteBinary, vSvcVirtualText=vSvcVirtualText, vProfIntProcess=vProfIntProcess, vTelSessAbortOutput=vTelSessAbortOutput, vTelSessBreak=vTelSessBreak, vSvcIpAddr=vSvcIpAddr, vProfPermHostOnly=vProfPermHostOnly, vTelSessRemTcpPort=vTelSessRemTcpPort, vPortCharSize=vPortCharSize, vHostHostname=vHostHostname, vSecMask=vSecMask, vSysEtherType=vSysEtherType, vPortPrefMode=vPortPrefMode, vArpMaxEntries=vArpMaxEntries, vSvcTcpPort=vSvcTcpPort, vLtTotalRcvPkts=vLtTotalRcvPkts, vTacHostname=vTacHostname, vPortGroups=vPortGroups, vPortParityType=vPortParityType, vLtNumber=vLtNumber, vPortTacacsEnable=vPortTacacsEnable, vPortVerification=vPortVerification, vSvcPassword=vSvcPassword, vcp_300=vcp_300, vPortState=vPortState, vPortAutoConnect=vPortAutoConnect, vLtCktTimer=vLtCktTimer)
mibBuilder.exportSymbols("VCP-PRIVATE-MIB-VER-2", port=port, vcpIpSecurity=vcpIpSecurity, vPortLogoutMsgEnable=vPortLogoutMsgEnable, vSecGroups=vSecGroups, vNsTTL=vNsTTL, vSvcName=vSvcName, vPortPasswordEnable=vPortPasswordEnable, vSecAddress=vSecAddress, vNsAddress=vNsAddress, vLtSessDestName=vLtSessDestName, vTcpIpPrecedence=vTcpIpPrecedence, vcpProfile=vcpProfile, vSecEnable=vSecEnable, vProfConcatenate=vProfConcatenate, vProfCrFromTerm=vProfCrFromTerm, vPortIOflush=vPortIOflush, vSvcTelEnable=vSvcTelEnable, vPortSignalCheckEnable=vPortSignalCheckEnable, dssMibs=dssMibs, vPortRemoteModify=vPortRemoteModify, vTelSessCrToNet=vTelSessCrToNet, vQueTable=vQueTable, vTelSessPadChar=vTelSessPadChar, vcpMib=vcpMib, vLtMaxCkts=vLtMaxCkts, vLtNodeGroups=vLtNodeGroups, vSysIdentifier=vSysIdentifier, vPortRing=vPortRing, vPortInactivityTimer=vPortInactivityTimer, vPortBackSwitch=vPortBackSwitch, vQueStatus=vQueStatus, vPortProfile=vPortProfile, vSnmpTrapDestStatus=vSnmpTrapDestStatus, vLtSessOrigin=vLtSessOrigin, vSysBootServer=vSysBootServer, vcpTacacs=vcpTacacs, dssAdmin=dssAdmin, vTelSessIndex=vTelSessIndex, vPortTrnChars=vPortTrnChars, vTacEntry=vTacEntry, vNsHostname=vNsHostname, vTelCourierEnable=vTelCourierEnable, vTelSessIpPrecedence=vTelSessIpPrecedence, vLtKeepaliveTimer=vLtKeepaliveTimer, vRlogSessEntry=vRlogSessEntry, vcpSystem=vcpSystem, vTelSessNop=vTelSessNop, vPortHandshake=vPortHandshake, vTelSessLocalAddr=vTelSessLocalAddr, vTelSessGoAhead=vTelSessGoAhead, vcpPort=vcpPort, vLtSessDisconnect=vLtSessDisconnect, slot=slot, vLtSessEntry=vLtSessEntry, vTelSessLocalBinary=vTelSessLocalBinary, vProfEraseLine=vProfEraseLine, vSysMaintenancePassword=vSysMaintenancePassword, vLtNodeID=vLtNodeID, vTelSessAttention=vTelSessAttention, vQueMaxEntries=vQueMaxEntries, vHostAddress=vHostAddress, vProfDomain=vProfDomain, vTelSessEntry=vTelSessEntry, vProfGoAhead=vProfGoAhead, vTelSessUserTimeout=vTelSessUserTimeout, vcp_200=vcp_200, vPortXonMark=vPortXonMark, vLtMaxNodes=vLtMaxNodes, vTelCourierText=vTelCourierText, vIpBcastAddr=vIpBcastAddr, vProfName=vProfName, vLtReqRejected=vLtReqRejected, vPortDSRlogout=vPortDSRlogout, vSvcIdent=vSvcIdent, vRlogSessLocalAddr=vRlogSessLocalAddr, vPortSpeed=vPortSpeed, vNsRequestMode=vNsRequestMode, vProfPadLength=vProfPadLength, vLtMaxRetran=vLtMaxRetran, vProfNop=vProfNop, vSnmpTrapDestEntry=vSnmpTrapDestEntry, vSvcTable=vSvcTable, vArpRetryMax=vArpRetryMax, vLtSlotPerCkt=vLtSlotPerCkt, vLtSessIndex=vLtSessIndex)
