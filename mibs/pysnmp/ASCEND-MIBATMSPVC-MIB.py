#
# PySNMP MIB module ASCEND-MIBATMSPVC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBATMSPVC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:10:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, iso, ModuleIdentity, ObjectIdentity, IpAddress, NotificationType, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, Unsigned32, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "ModuleIdentity", "ObjectIdentity", "IpAddress", "NotificationType", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "Unsigned32", "Gauge32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

mibatmSoftPVcAddrProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 54))
mibatmSpvcConfigProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 53))
mibatmSoftPVcAddrProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 54, 1), )
if mibBuilder.loadTexts: mibatmSoftPVcAddrProfileTable.setStatus('mandatory')
mibatmSoftPVcAddrProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 54, 1, 1), ).setIndexNames((0, "ASCEND-MIBATMSPVC-MIB", "atmSoftPVcAddrProfile-Shelf-o"), (0, "ASCEND-MIBATMSPVC-MIB", "atmSoftPVcAddrProfile-Slot-o"), (0, "ASCEND-MIBATMSPVC-MIB", "atmSoftPVcAddrProfile-Item-o"), (0, "ASCEND-MIBATMSPVC-MIB", "atmSoftPVcAddrProfile-LogicalItem-o"))
if mibBuilder.loadTexts: mibatmSoftPVcAddrProfileEntry.setStatus('mandatory')
atmSoftPVcAddrProfile_Shelf_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 54, 1, 1, 1), Integer32()).setLabel("atmSoftPVcAddrProfile-Shelf-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSoftPVcAddrProfile_Shelf_o.setStatus('mandatory')
atmSoftPVcAddrProfile_Slot_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 54, 1, 1, 2), Integer32()).setLabel("atmSoftPVcAddrProfile-Slot-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSoftPVcAddrProfile_Slot_o.setStatus('mandatory')
atmSoftPVcAddrProfile_Item_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 54, 1, 1, 3), Integer32()).setLabel("atmSoftPVcAddrProfile-Item-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSoftPVcAddrProfile_Item_o.setStatus('mandatory')
atmSoftPVcAddrProfile_LogicalItem_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 54, 1, 1, 4), Integer32()).setLabel("atmSoftPVcAddrProfile-LogicalItem-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSoftPVcAddrProfile_LogicalItem_o.setStatus('mandatory')
atmSoftPVcAddrProfile_Index_PhysicalAddress_Shelf = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 54, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("anyShelf", 1), ("shelf1", 2), ("shelf2", 3), ("shelf3", 4), ("shelf4", 5), ("shelf5", 6), ("shelf6", 7), ("shelf7", 8), ("shelf8", 9), ("shelf9", 10)))).setLabel("atmSoftPVcAddrProfile-Index-PhysicalAddress-Shelf").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSoftPVcAddrProfile_Index_PhysicalAddress_Shelf.setStatus('mandatory')
atmSoftPVcAddrProfile_Index_PhysicalAddress_Slot = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 54, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 55, 56, 57, 58, 49, 50, 42, 53, 54, 45, 46, 51, 59))).clone(namedValues=NamedValues(("anySlot", 1), ("slot1", 2), ("slot2", 3), ("slot3", 4), ("slot4", 5), ("slot5", 6), ("slot6", 7), ("slot7", 8), ("slot8", 9), ("slot9", 10), ("slot10", 11), ("slot11", 12), ("slot12", 13), ("slot13", 14), ("slot14", 15), ("slot15", 16), ("slot16", 17), ("slot17", 18), ("slot18", 19), ("slot19", 20), ("slot20", 21), ("slot21", 22), ("slot22", 23), ("slot23", 24), ("slot24", 25), ("slot25", 26), ("slot26", 27), ("slot27", 28), ("slot28", 29), ("slot29", 30), ("slot30", 31), ("slot31", 32), ("slot32", 33), ("slot33", 34), ("slot34", 35), ("slot35", 36), ("slot36", 37), ("slot37", 38), ("slot38", 39), ("slot39", 40), ("slot40", 41), ("aLim", 55), ("bLim", 56), ("cLim", 57), ("dLim", 58), ("leftController", 49), ("rightController", 50), ("controller", 42), ("firstControlModule", 53), ("secondControlModule", 54), ("trunkModule1", 45), ("trunkModule2", 46), ("controlModule", 51), ("slotPrimary", 59)))).setLabel("atmSoftPVcAddrProfile-Index-PhysicalAddress-Slot").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSoftPVcAddrProfile_Index_PhysicalAddress_Slot.setStatus('mandatory')
atmSoftPVcAddrProfile_Index_PhysicalAddress_ItemNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 54, 1, 1, 7), Integer32()).setLabel("atmSoftPVcAddrProfile-Index-PhysicalAddress-ItemNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSoftPVcAddrProfile_Index_PhysicalAddress_ItemNumber.setStatus('mandatory')
atmSoftPVcAddrProfile_Index_LogicalItem = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 54, 1, 1, 8), Integer32()).setLabel("atmSoftPVcAddrProfile-Index-LogicalItem").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSoftPVcAddrProfile_Index_LogicalItem.setStatus('mandatory')
atmSoftPVcAddrProfile_SpvcAtmAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 54, 1, 1, 9), DisplayString()).setLabel("atmSoftPVcAddrProfile-SpvcAtmAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSoftPVcAddrProfile_SpvcAtmAddress.setStatus('mandatory')
atmSoftPVcAddrProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 54, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("atmSoftPVcAddrProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSoftPVcAddrProfile_Action_o.setStatus('mandatory')
mibatmSpvcConfigProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 53, 1), )
if mibBuilder.loadTexts: mibatmSpvcConfigProfileTable.setStatus('mandatory')
mibatmSpvcConfigProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 53, 1, 1), ).setIndexNames((0, "ASCEND-MIBATMSPVC-MIB", "atmSpvcConfigProfile-Index-o"))
if mibBuilder.loadTexts: mibatmSpvcConfigProfileEntry.setStatus('mandatory')
atmSpvcConfigProfile_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 53, 1, 1, 1), Integer32()).setLabel("atmSpvcConfigProfile-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSpvcConfigProfile_Index_o.setStatus('mandatory')
atmSpvcConfigProfile_FailureTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 53, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("atmSpvcConfigProfile-FailureTrapEnable").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcConfigProfile_FailureTrapEnable.setStatus('mandatory')
atmSpvcConfigProfile_FailureNotificationInterval = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 53, 1, 1, 3), Integer32()).setLabel("atmSpvcConfigProfile-FailureNotificationInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcConfigProfile_FailureNotificationInterval.setStatus('mandatory')
atmSpvcConfigProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 53, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("atmSpvcConfigProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSpvcConfigProfile_Action_o.setStatus('mandatory')
mibBuilder.exportSymbols("ASCEND-MIBATMSPVC-MIB", atmSoftPVcAddrProfile_Index_PhysicalAddress_Shelf=atmSoftPVcAddrProfile_Index_PhysicalAddress_Shelf, mibatmSpvcConfigProfileEntry=mibatmSpvcConfigProfileEntry, atmSpvcConfigProfile_FailureNotificationInterval=atmSpvcConfigProfile_FailureNotificationInterval, mibatmSoftPVcAddrProfileEntry=mibatmSoftPVcAddrProfileEntry, atmSpvcConfigProfile_FailureTrapEnable=atmSpvcConfigProfile_FailureTrapEnable, atmSoftPVcAddrProfile_LogicalItem_o=atmSoftPVcAddrProfile_LogicalItem_o, atmSoftPVcAddrProfile_Index_PhysicalAddress_Slot=atmSoftPVcAddrProfile_Index_PhysicalAddress_Slot, atmSpvcConfigProfile_Action_o=atmSpvcConfigProfile_Action_o, atmSoftPVcAddrProfile_Action_o=atmSoftPVcAddrProfile_Action_o, atmSpvcConfigProfile_Index_o=atmSpvcConfigProfile_Index_o, mibatmSoftPVcAddrProfile=mibatmSoftPVcAddrProfile, atmSoftPVcAddrProfile_Shelf_o=atmSoftPVcAddrProfile_Shelf_o, mibatmSpvcConfigProfile=mibatmSpvcConfigProfile, DisplayString=DisplayString, mibatmSoftPVcAddrProfileTable=mibatmSoftPVcAddrProfileTable, atmSoftPVcAddrProfile_Index_PhysicalAddress_ItemNumber=atmSoftPVcAddrProfile_Index_PhysicalAddress_ItemNumber, atmSoftPVcAddrProfile_SpvcAtmAddress=atmSoftPVcAddrProfile_SpvcAtmAddress, atmSoftPVcAddrProfile_Item_o=atmSoftPVcAddrProfile_Item_o, atmSoftPVcAddrProfile_Slot_o=atmSoftPVcAddrProfile_Slot_o, atmSoftPVcAddrProfile_Index_LogicalItem=atmSoftPVcAddrProfile_Index_LogicalItem, mibatmSpvcConfigProfileTable=mibatmSpvcConfigProfileTable)
