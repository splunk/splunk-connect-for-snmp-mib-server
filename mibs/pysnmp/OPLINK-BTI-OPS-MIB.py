#
# PySNMP MIB module OPLINK-BTI-OPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Oplink-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:26:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
mngdproducts, = mibBuilder.importSymbols("Oplink-MIB", "mngdproducts")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, NotificationType, iso, ModuleIdentity, Unsigned32, Counter64, MibIdentifier, TimeTicks, Gauge32, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "NotificationType", "iso", "ModuleIdentity", "Unsigned32", "Counter64", "MibIdentifier", "TimeTicks", "Gauge32", "ObjectIdentity", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
deviceOPSMv2_MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 19547, 1, 7)).setLabel("deviceOPSMv2-MIB")
deviceOPSMv2_MIB.setRevisions(('2013-04-02 17:00',))
if mibBuilder.loadTexts: deviceOPSMv2_MIB.setLastUpdated('201304021700Z')
if mibBuilder.loadTexts: deviceOPSMv2_MIB.setOrganization('OPLINK')
version2 = MibIdentifier((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1))
class HeTenthdB(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'

class HeTenthdBm(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'

class HeTenthmA(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'

class HeTenthmV(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'

class HeTenthCentigrade(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'

emuTable = MibTable((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1), )
if mibBuilder.loadTexts: emuTable.setStatus('current')
emuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1), ).setIndexNames((0, "OPLINK-BTI-OPS-MIB", "emuChassisId"), (0, "OPLINK-BTI-OPS-MIB", "emuSlotId"), (0, "OPLINK-BTI-OPS-MIB", "emuItemId"))
if mibBuilder.loadTexts: emuEntry.setStatus('current')
emuChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 1001), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: emuChassisId.setStatus('current')
emuSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 1002), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: emuSlotId.setStatus('current')
emuItemId = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 1003), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: emuItemId.setStatus('current')
emuMfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuMfgName.setStatus('current')
emuModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuModuleType.setStatus('current')
emuPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuPartNum.setStatus('current')
emuSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuSerialNum.setStatus('current')
emuMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuMfgDate.setStatus('current')
emuCaliDate = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuCaliDate.setStatus('current')
emuFirmwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuFirmwareVer.setStatus('current')
emuHardwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuHardwareVer.setStatus('current')
emuVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuVendorID.setStatus('current')
emuSysDate = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuSysDate.setStatus('current')
emuSysTime = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuSysTime.setStatus('current')
emuIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuIpAddr.setStatus('current')
emuNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuNetMask.setStatus('current')
emuGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuGateway.setStatus('current')
emuMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuMacAddr.setStatus('current')
emuUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuUptime.setStatus('current')
emuBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 17), HeTenthCentigrade()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuBoardTemp.setStatus('current')
emuHighTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 18), HeTenthCentigrade()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuHighTemperatureThreshold.setStatus('current')
emuLowTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 19), HeTenthCentigrade()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuLowTemperatureThreshold.setStatus('current')
emuGetModConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuGetModConfig.setStatus('current')
emuDelModConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuDelModConfig.setStatus('current')
emuAddModConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuAddModConfig.setStatus('current')
emuSaveConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 0)).setFixedLength(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuSaveConfig.setStatus('current')
emuRestoreDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 0)).setFixedLength(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuRestoreDefault.setStatus('current')
emuReset = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 0)).setFixedLength(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuReset.setStatus('current')
emuFirmwareUpgradeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuFirmwareUpgradeStart.setStatus('current')
emuFirmwareUpgradeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuFirmwareUpgradeStatus.setStatus('current')
emuGetSNMPConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 50), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuGetSNMPConfig.setStatus('current')
emuDelSNMPConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 51), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuDelSNMPConfig.setStatus('current')
emuAddSNMPConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 52), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuAddSNMPConfig.setStatus('current')
emuGetCurrentAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 60), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuGetCurrentAlarm.setStatus('current')
emuGetHisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 61), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuGetHisAlarm.setStatus('current')
opsmTable = MibTable((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2), )
if mibBuilder.loadTexts: opsmTable.setStatus('current')
opsmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1), ).setIndexNames((0, "OPLINK-BTI-OPS-MIB", "opsmChassisId"), (0, "OPLINK-BTI-OPS-MIB", "opsmSlotId"), (0, "OPLINK-BTI-OPS-MIB", "opsmItemId"))
if mibBuilder.loadTexts: opsmEntry.setStatus('current')
opsmChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 1001), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: opsmChassisId.setStatus('current')
opsmSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 1002), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: opsmSlotId.setStatus('current')
opsmItemId = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 1003), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: opsmItemId.setStatus('current')
opsmMfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmMfgName.setStatus('current')
opsmPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmPartNum.setStatus('current')
opsmSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmSerialNum.setStatus('current')
opsmMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmMfgDate.setStatus('current')
opsmCaliDate = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmCaliDate.setStatus('current')
opsmHardwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmHardwareVer.setStatus('current')
opsmVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmVendorID.setStatus('current')
opsmModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmModuleType.setStatus('current')
opsmFirmwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmFirmwareVer.setStatus('current')
opsmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmReset.setStatus('current')
opsmProtectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmProtectionMode.setStatus('current')
opsmRevertiveSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmRevertiveSetting.setStatus('current')
opsmDiffSwitchSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmDiffSwitchSetting.setStatus('current')
opsmDiffAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 23), HeTenthdBm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmDiffAlarmThreshold.setStatus('current')
opsmDiffSwitchThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 24), HeTenthdBm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmDiffSwitchThreshold.setStatus('current')
opsmInherentDiffOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 25), HeTenthdBm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmInherentDiffOffset.setStatus('current')
opsmWTRTime = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmWTRTime.setStatus('current')
opsmSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmSwitchStatus.setStatus('current')
opsmSwitchPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmSwitchPosition.setStatus('current')
opsmInputLosAlarmThrPathP = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 40), HeTenthdBm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmInputLosAlarmThrPathP.setStatus('current')
opsmInputLosAlarmThrPathS = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 41), HeTenthdBm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmInputLosAlarmThrPathS.setStatus('current')
opsmInputLosAlarmHys = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 42), HeTenthdBm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmInputLosAlarmHys.setStatus('current')
opsmInputPowerPathP = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmInputPowerPathP.setStatus('current')
opsmInputPowerPathS = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmInputPowerPathS.setStatus('current')
opsmSwitchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmSwitchCount.setStatus('current')
oplkV6Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001))
oplkemuNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1))
oplkemuNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0))
oplinkTrapCode = MibScalar((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1002), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oplinkTrapCode.setStatus('current')
oplinkemuTemperatureAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 1)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuTemperatureAbnormal.setStatus('current')
oplinkemuTemperatureResume = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 2)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuTemperatureResume.setStatus('current')
oplinkemuFanRemove = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 3)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuFanRemove.setStatus('current')
oplinkemuFanInsert = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 4)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuFanInsert.setStatus('current')
oplinkemuPowerRemove = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 5)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuPowerRemove.setStatus('current')
oplinkemuPowerInsert = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 6)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuPowerInsert.setStatus('current')
oplinkemuVoltageAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 7)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuVoltageAbnormal.setStatus('current')
oplinkemuVoltageResume = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 8)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuVoltageResume.setStatus('current')
oplinkemuSubCardDelete = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 9)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuSubCardDelete.setStatus('current')
oplinkemuSubCardAdd = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 10)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuSubCardAdd.setStatus('current')
oplinkemuSubCardUnmatch = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 11)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuSubCardUnmatch.setStatus('current')
oplinkemuSubCardMatch = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 12)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuSubCardMatch.setStatus('current')
oplkopsmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2))
oplkopsmNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0))
oplinkopsmInputLosRPI1 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 1)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmInputLosRPI1.setStatus('current')
oplinkopsmInputLosResumeRPI1 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 2)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmInputLosResumeRPI1.setStatus('current')
oplinkopsmInputLosRSI1 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 3)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmInputLosRSI1.setStatus('current')
oplinkopsmInputLosResumeRSI1 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 4)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmInputLosResumeRSI1.setStatus('current')
oplinkopsmInputLosRPI2 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 5)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmInputLosRPI2.setStatus('current')
oplinkopsmInputLosResumeRPI2 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 6)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmInputLosResumeRPI2.setStatus('current')
oplinkopsmInputLosRSI2 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 7)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmInputLosRSI2.setStatus('current')
oplinkopsmInputLosResumeRSI2 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 8)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmInputLosResumeRSI2.setStatus('current')
oplinkopsmPowerDiffChannel1 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 9)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmPowerDiffChannel1.setStatus('current')
oplinkopsmPowerDiffResumeChannel1 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 10)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmPowerDiffResumeChannel1.setStatus('current')
oplinkopsmPowerDiffChannel2 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 11)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmPowerDiffChannel2.setStatus('current')
oplinkopsmPowerDiffResumeChannel2 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 12)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmPowerDiffResumeChannel2.setStatus('current')
oplinkopsmSwitchFailChannel1 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 13)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmSwitchFailChannel1.setStatus('current')
oplinkopsmSwitchSuccessChannel1 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 14)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmSwitchSuccessChannel1.setStatus('current')
oplinkopsmSwitchFailChannel2 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 15)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmSwitchFailChannel2.setStatus('current')
oplinkopsmSwitchSuccessChannel2 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 16)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmSwitchSuccessChannel2.setStatus('current')
mibBuilder.exportSymbols("OPLINK-BTI-OPS-MIB", opsmTable=opsmTable, oplinkopsmInputLosResumeRSI2=oplinkopsmInputLosResumeRSI2, emuSysDate=emuSysDate, opsmDiffSwitchThreshold=opsmDiffSwitchThreshold, opsmInputPowerPathS=opsmInputPowerPathS, emuLowTemperatureThreshold=emuLowTemperatureThreshold, oplkV6Traps=oplkV6Traps, oplinkopsmPowerDiffChannel1=oplinkopsmPowerDiffChannel1, oplinkopsmInputLosRSI1=oplinkopsmInputLosRSI1, opsmVendorID=opsmVendorID, emuMfgName=emuMfgName, opsmHardwareVer=opsmHardwareVer, emuModuleType=emuModuleType, oplinkopsmInputLosResumeRSI1=oplinkopsmInputLosResumeRSI1, PYSNMP_MODULE_ID=deviceOPSMv2_MIB, opsmSwitchStatus=opsmSwitchStatus, emuFirmwareUpgradeStart=emuFirmwareUpgradeStart, oplkemuNotificationPrefix=oplkemuNotificationPrefix, emuDelModConfig=emuDelModConfig, emuFirmwareVer=emuFirmwareVer, version2=version2, opsmChassisId=opsmChassisId, opsmInputLosAlarmThrPathP=opsmInputLosAlarmThrPathP, emuGetModConfig=emuGetModConfig, emuMacAddr=emuMacAddr, oplinkemuSubCardMatch=oplinkemuSubCardMatch, oplinkopsmPowerDiffChannel2=oplinkopsmPowerDiffChannel2, oplinkemuTemperatureAbnormal=oplinkemuTemperatureAbnormal, emuGetSNMPConfig=emuGetSNMPConfig, oplinkemuVoltageResume=oplinkemuVoltageResume, emuRestoreDefault=emuRestoreDefault, oplinkemuVoltageAbnormal=oplinkemuVoltageAbnormal, oplinkemuTemperatureResume=oplinkemuTemperatureResume, emuEntry=emuEntry, emuUptime=emuUptime, HeTenthmV=HeTenthmV, oplinkopsmInputLosRPI2=oplinkopsmInputLosRPI2, oplinkemuPowerRemove=oplinkemuPowerRemove, emuPartNum=emuPartNum, opsmProtectionMode=opsmProtectionMode, HeTenthCentigrade=HeTenthCentigrade, emuNetMask=emuNetMask, opsmSlotId=opsmSlotId, oplinkopsmPowerDiffResumeChannel1=oplinkopsmPowerDiffResumeChannel1, oplinkopsmInputLosRSI2=oplinkopsmInputLosRSI2, HeTenthdB=HeTenthdB, opsmMfgDate=opsmMfgDate, emuIpAddr=emuIpAddr, oplinkTrapCode=oplinkTrapCode, oplinkopsmInputLosResumeRPI1=oplinkopsmInputLosResumeRPI1, oplinkemuSubCardUnmatch=oplinkemuSubCardUnmatch, emuReset=emuReset, emuSlotId=emuSlotId, emuGetHisAlarm=emuGetHisAlarm, oplkemuNotifications=oplkemuNotifications, opsmMfgName=opsmMfgName, emuCaliDate=emuCaliDate, opsmCaliDate=opsmCaliDate, opsmSerialNum=opsmSerialNum, opsmSwitchPosition=opsmSwitchPosition, opsmInputLosAlarmThrPathS=opsmInputLosAlarmThrPathS, opsmInputPowerPathP=opsmInputPowerPathP, emuMfgDate=emuMfgDate, emuHardwareVer=emuHardwareVer, emuItemId=emuItemId, oplinkemuFanRemove=oplinkemuFanRemove, oplinkemuSubCardAdd=oplinkemuSubCardAdd, emuGateway=emuGateway, emuBoardTemp=emuBoardTemp, oplinkopsmPowerDiffResumeChannel2=oplinkopsmPowerDiffResumeChannel2, deviceOPSMv2_MIB=deviceOPSMv2_MIB, emuSerialNum=emuSerialNum, opsmRevertiveSetting=opsmRevertiveSetting, opsmDiffAlarmThreshold=opsmDiffAlarmThreshold, emuChassisId=emuChassisId, emuVendorID=emuVendorID, opsmReset=opsmReset, opsmModuleType=opsmModuleType, emuAddModConfig=emuAddModConfig, oplkopsmNotificationPrefix=oplkopsmNotificationPrefix, opsmDiffSwitchSetting=opsmDiffSwitchSetting, opsmPartNum=opsmPartNum, oplinkopsmInputLosResumeRPI2=oplinkopsmInputLosResumeRPI2, emuTable=emuTable, oplinkopsmSwitchFailChannel1=oplinkopsmSwitchFailChannel1, oplinkopsmSwitchSuccessChannel1=oplinkopsmSwitchSuccessChannel1, opsmItemId=opsmItemId, emuDelSNMPConfig=emuDelSNMPConfig, emuSaveConfig=emuSaveConfig, emuFirmwareUpgradeStatus=emuFirmwareUpgradeStatus, oplkopsmNotifications=oplkopsmNotifications, HeTenthmA=HeTenthmA, opsmInputLosAlarmHys=opsmInputLosAlarmHys, opsmEntry=opsmEntry, emuHighTemperatureThreshold=emuHighTemperatureThreshold, oplinkopsmInputLosRPI1=oplinkopsmInputLosRPI1, opsmWTRTime=opsmWTRTime, emuAddSNMPConfig=emuAddSNMPConfig, opsmInherentDiffOffset=opsmInherentDiffOffset, emuGetCurrentAlarm=emuGetCurrentAlarm, oplinkemuSubCardDelete=oplinkemuSubCardDelete, opsmFirmwareVer=opsmFirmwareVer, oplinkemuFanInsert=oplinkemuFanInsert, emuSysTime=emuSysTime, oplinkemuPowerInsert=oplinkemuPowerInsert, oplinkopsmSwitchFailChannel2=oplinkopsmSwitchFailChannel2, oplinkopsmSwitchSuccessChannel2=oplinkopsmSwitchSuccessChannel2, opsmSwitchCount=opsmSwitchCount, HeTenthdBm=HeTenthdBm)
