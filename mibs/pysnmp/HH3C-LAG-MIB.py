#
# PySNMP MIB module HH3C-LAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-LAG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:14:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
hh3cRhw, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cRhw")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, IpAddress, Bits, MibIdentifier, TimeTicks, Counter32, iso, NotificationType, Gauge32, Integer32, ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "Bits", "MibIdentifier", "TimeTicks", "Counter32", "iso", "NotificationType", "Gauge32", "Integer32", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
hh3cLAG = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 25))
if mibBuilder.loadTexts: hh3cLAG.setLastUpdated('200310091942Z')
if mibBuilder.loadTexts: hh3cLAG.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cLAGMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1))
hh3cAggLinkTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 1), )
if mibBuilder.loadTexts: hh3cAggLinkTable.setStatus('current')
hh3cAggLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 1, 1), ).setIndexNames((0, "HH3C-LAG-MIB", "hh3cAggLinkNumber"))
if mibBuilder.loadTexts: hh3cAggLinkEntry.setStatus('current')
hh3cAggLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 1, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cAggLinkNumber.setStatus('current')
hh3cAggLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAggLinkName.setStatus('current')
hh3cAggLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAggLinkMode.setStatus('current')
hh3cAggLinkPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 1, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAggLinkPortList.setStatus('current')
hh3cAggLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAggLinkState.setStatus('current')
hh3cAggPortListSelectedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 1, 1, 6), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAggPortListSelectedPorts.setStatus('current')
hh3cAggPortListSamePartnerPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 1, 1, 7), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAggPortListSamePartnerPorts.setStatus('current')
hh3cAggPortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 2), )
if mibBuilder.loadTexts: hh3cAggPortTable.setStatus('current')
hh3cAggPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 2, 1), ).setIndexNames((0, "HH3C-LAG-MIB", "hh3cAggPortIndex"))
if mibBuilder.loadTexts: hh3cAggPortEntry.setStatus('current')
hh3cAggPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 2, 1, 1), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cAggPortIndex.setStatus('current')
hh3cAggPortNotAttachedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cAggPortNotAttachedReason.setStatus('current')
hh3cAggPortLacpState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cAggPortLacpState.setStatus('current')
hh3cAggPortNotAttachedString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cAggPortNotAttachedString.setStatus('current')
hh3cAggResourceAllocationValue = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 3), PortList().clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAggResourceAllocationValue.setStatus('current')
hh3cLAGMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 25, 2))
hh3cAggSpeedChangedNotification = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 25, 2, 1)).setObjects(("HH3C-LAG-MIB", "hh3cAggLinkNumber"))
if mibBuilder.loadTexts: hh3cAggSpeedChangedNotification.setStatus('current')
hh3cAggPortInactiveNotification = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 25, 2, 2)).setObjects(("HH3C-LAG-MIB", "hh3cAggLinkNumber"))
if mibBuilder.loadTexts: hh3cAggPortInactiveNotification.setStatus('current')
hh3cAggPortInactiveNotification2 = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 25, 2, 3)).setObjects(("HH3C-LAG-MIB", "hh3cAggLinkNumber"), ("HH3C-LAG-MIB", "hh3cAggPortIndex"))
if mibBuilder.loadTexts: hh3cAggPortInactiveNotification2.setStatus('current')
hh3cAggPortActiveNotification = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 25, 2, 4)).setObjects(("HH3C-LAG-MIB", "hh3cAggLinkNumber"), ("HH3C-LAG-MIB", "hh3cAggPortIndex"))
if mibBuilder.loadTexts: hh3cAggPortActiveNotification.setStatus('current')
hh3cLAGMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 25, 3))
hh3cLAGMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 25, 3, 1))
hh3cLAGMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 25506, 8, 25, 3, 1, 1)).setObjects(("HH3C-LAG-MIB", "hh3cLAGMibObjectGroup"), ("HH3C-LAG-MIB", "hh3cLAGMibNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cLAGMibCompliance = hh3cLAGMibCompliance.setStatus('current')
hh3cLAGMibGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 25, 3, 2))
hh3cLAGMibObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 8, 25, 3, 2, 1)).setObjects(("HH3C-LAG-MIB", "hh3cAggLinkName"), ("HH3C-LAG-MIB", "hh3cAggLinkMode"), ("HH3C-LAG-MIB", "hh3cAggLinkPortList"), ("HH3C-LAG-MIB", "hh3cAggLinkState"), ("HH3C-LAG-MIB", "hh3cAggPortListSelectedPorts"), ("HH3C-LAG-MIB", "hh3cAggPortListSamePartnerPorts"), ("HH3C-LAG-MIB", "hh3cAggPortNotAttachedReason"), ("HH3C-LAG-MIB", "hh3cAggPortLacpState"), ("HH3C-LAG-MIB", "hh3cAggPortNotAttachedString"), ("HH3C-LAG-MIB", "hh3cAggResourceAllocationValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cLAGMibObjectGroup = hh3cLAGMibObjectGroup.setStatus('current')
hh3cLAGMibNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25506, 8, 25, 3, 2, 2)).setObjects(("HH3C-LAG-MIB", "hh3cAggSpeedChangedNotification"), ("HH3C-LAG-MIB", "hh3cAggPortInactiveNotification"), ("HH3C-LAG-MIB", "hh3cAggPortInactiveNotification2"), ("HH3C-LAG-MIB", "hh3cAggPortActiveNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cLAGMibNotificationGroup = hh3cLAGMibNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("HH3C-LAG-MIB", hh3cAggPortInactiveNotification=hh3cAggPortInactiveNotification, hh3cAggPortNotAttachedReason=hh3cAggPortNotAttachedReason, hh3cAggPortListSelectedPorts=hh3cAggPortListSelectedPorts, hh3cAggLinkTable=hh3cAggLinkTable, hh3cAggLinkState=hh3cAggLinkState, hh3cAggSpeedChangedNotification=hh3cAggSpeedChangedNotification, hh3cAggPortInactiveNotification2=hh3cAggPortInactiveNotification2, hh3cAggLinkName=hh3cAggLinkName, hh3cAggPortLacpState=hh3cAggPortLacpState, hh3cLAGMibObjects=hh3cLAGMibObjects, hh3cLAGMibGroup=hh3cLAGMibGroup, hh3cLAGMibConformance=hh3cLAGMibConformance, hh3cAggPortListSamePartnerPorts=hh3cAggPortListSamePartnerPorts, hh3cAggPortTable=hh3cAggPortTable, hh3cLAGMibNotificationGroup=hh3cLAGMibNotificationGroup, hh3cAggPortActiveNotification=hh3cAggPortActiveNotification, hh3cLAGMibObjectGroup=hh3cLAGMibObjectGroup, hh3cAggLinkMode=hh3cAggLinkMode, PYSNMP_MODULE_ID=hh3cLAG, hh3cLAGMibCompliance=hh3cLAGMibCompliance, hh3cLAGMibCompliances=hh3cLAGMibCompliances, hh3cLAG=hh3cLAG, hh3cAggPortNotAttachedString=hh3cAggPortNotAttachedString, hh3cAggLinkNumber=hh3cAggLinkNumber, hh3cAggResourceAllocationValue=hh3cAggResourceAllocationValue, hh3cAggPortIndex=hh3cAggPortIndex, hh3cAggPortEntry=hh3cAggPortEntry, hh3cLAGMibNotifications=hh3cLAGMibNotifications, hh3cAggLinkPortList=hh3cAggLinkPortList, hh3cAggLinkEntry=hh3cAggLinkEntry)
