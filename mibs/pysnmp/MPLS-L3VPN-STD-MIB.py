#
# PySNMP MIB module MPLS-L3VPN-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MPLS-L3VPN-STD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:47:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
IANAipRouteProtocol, = mibBuilder.importSymbols("IANA-RTPROTO-MIB", "IANAipRouteProtocol")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
InetAutonomousSystemNumber, InetAddressPrefixLength, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAutonomousSystemNumber", "InetAddressPrefixLength", "InetAddressType", "InetAddress")
MplsIndexType, = mibBuilder.importSymbols("MPLS-LSR-STD-MIB", "MplsIndexType")
mplsStdMIB, = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "mplsStdMIB")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
IpAddress, ModuleIdentity, NotificationType, iso, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, TimeTicks, Gauge32, Integer32, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "NotificationType", "iso", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Gauge32", "Integer32", "Bits", "Counter64")
DisplayString, TimeStamp, StorageType, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "StorageType", "TextualConvention", "RowStatus", "TruthValue")
VPNIdOrZero, = mibBuilder.importSymbols("VPN-TC-STD-MIB", "VPNIdOrZero")
mplsL3VpnMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 166, 11))
mplsL3VpnMIB.setRevisions(('2006-01-23 00:00',))
if mibBuilder.loadTexts: mplsL3VpnMIB.setLastUpdated('200601230000Z')
if mibBuilder.loadTexts: mplsL3VpnMIB.setOrganization('IETF Layer-3 Virtual Private Networks Working Group.')
class MplsL3VpnName(TextualConvention, OctetString):
    reference = "RFC 2685 Fox B., et al, 'Virtual Private Networks Identifier', September 1999."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 31)

class MplsL3VpnRouteDistinguisher(TextualConvention, OctetString):
    reference = '[RFC4364]'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 256)

class MplsL3VpnRtType(TextualConvention, Integer32):
    reference = '[RFC4364]'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("import", 1), ("export", 2), ("both", 3))

mplsL3VpnNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 11, 0))
mplsL3VpnObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 11, 1))
mplsL3VpnScalars = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 1))
mplsL3VpnConf = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2))
mplsL3VpnPerf = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 3))
mplsL3VpnRoute = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4))
mplsL3VpnConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 11, 2))
mplsL3VpnConfiguredVrfs = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnConfiguredVrfs.setStatus('current')
mplsL3VpnActiveVrfs = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnActiveVrfs.setStatus('current')
mplsL3VpnConnectedInterfaces = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnConnectedInterfaces.setStatus('current')
mplsL3VpnNotificationEnable = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsL3VpnNotificationEnable.setStatus('current')
mplsL3VpnVrfConfMaxPossRts = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfConfMaxPossRts.setStatus('current')
mplsL3VpnVrfConfRteMxThrshTime = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfConfRteMxThrshTime.setStatus('current')
mplsL3VpnIllLblRcvThrsh = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsL3VpnIllLblRcvThrsh.setStatus('current')
mplsL3VpnIfConfTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 1), )
if mibBuilder.loadTexts: mplsL3VpnIfConfTable.setStatus('current')
mplsL3VpnIfConfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 1, 1), ).setIndexNames((0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfName"), (0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnIfConfIndex"))
if mibBuilder.loadTexts: mplsL3VpnIfConfEntry.setStatus('current')
mplsL3VpnIfConfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: mplsL3VpnIfConfIndex.setStatus('current')
mplsL3VpnIfVpnClassification = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("carrierOfCarrier", 1), ("enterprise", 2), ("interProvider", 3))).clone('enterprise')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnIfVpnClassification.setStatus('current')
mplsL3VpnIfVpnRouteDistProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 1, 1, 3), Bits().clone(namedValues=NamedValues(("none", 0), ("bgp", 1), ("ospf", 2), ("rip", 3), ("isis", 4), ("static", 5), ("other", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnIfVpnRouteDistProtocol.setStatus('current')
mplsL3VpnIfConfStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 1, 1, 4), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnIfConfStorageType.setStatus('current')
mplsL3VpnIfConfRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnIfConfRowStatus.setStatus('current')
mplsL3VpnVrfTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2), )
if mibBuilder.loadTexts: mplsL3VpnVrfTable.setStatus('current')
mplsL3VpnVrfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1), ).setIndexNames((0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfName"))
if mibBuilder.loadTexts: mplsL3VpnVrfEntry.setStatus('current')
mplsL3VpnVrfName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 1), MplsL3VpnName())
if mibBuilder.loadTexts: mplsL3VpnVrfName.setStatus('current')
mplsL3VpnVrfVpnId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 2), VPNIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfVpnId.setStatus('current')
mplsL3VpnVrfDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfDescription.setStatus('current')
mplsL3VpnVrfRD = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 4), MplsL3VpnRouteDistinguisher()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRD.setStatus('current')
mplsL3VpnVrfCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfCreationTime.setStatus('current')
mplsL3VpnVrfOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfOperStatus.setStatus('current')
mplsL3VpnVrfActiveInterfaces = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfActiveInterfaces.setStatus('current')
mplsL3VpnVrfAssociatedInterfaces = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfAssociatedInterfaces.setStatus('current')
mplsL3VpnVrfConfMidRteThresh = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfConfMidRteThresh.setStatus('current')
mplsL3VpnVrfConfHighRteThresh = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfConfHighRteThresh.setStatus('current')
mplsL3VpnVrfConfMaxRoutes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfConfMaxRoutes.setStatus('current')
mplsL3VpnVrfConfLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfConfLastChanged.setStatus('current')
mplsL3VpnVrfConfRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfConfRowStatus.setStatus('current')
mplsL3VpnVrfConfAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfConfAdminStatus.setStatus('current')
mplsL3VpnVrfConfStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 15), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfConfStorageType.setStatus('current')
mplsL3VpnVrfRTTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 3), )
if mibBuilder.loadTexts: mplsL3VpnVrfRTTable.setStatus('current')
mplsL3VpnVrfRTEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 3, 1), ).setIndexNames((0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfName"), (0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRTIndex"), (0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRTType"))
if mibBuilder.loadTexts: mplsL3VpnVrfRTEntry.setStatus('current')
mplsL3VpnVrfRTIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: mplsL3VpnVrfRTIndex.setStatus('current')
mplsL3VpnVrfRTType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 3, 1, 3), MplsL3VpnRtType())
if mibBuilder.loadTexts: mplsL3VpnVrfRTType.setStatus('current')
mplsL3VpnVrfRT = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 3, 1, 4), MplsL3VpnRouteDistinguisher()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRT.setStatus('current')
mplsL3VpnVrfRTDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 3, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRTDescr.setStatus('current')
mplsL3VpnVrfRTRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRTRowStatus.setStatus('current')
mplsL3VpnVrfRTStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 3, 1, 7), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRTStorageType.setStatus('current')
mplsL3VpnVrfSecTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 6), )
if mibBuilder.loadTexts: mplsL3VpnVrfSecTable.setStatus('current')
mplsL3VpnVrfSecEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 6, 1), )
mplsL3VpnVrfEntry.registerAugmentions(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfSecEntry"))
mplsL3VpnVrfSecEntry.setIndexNames(*mplsL3VpnVrfEntry.getIndexNames())
if mibBuilder.loadTexts: mplsL3VpnVrfSecEntry.setStatus('current')
mplsL3VpnVrfSecIllegalLblVltns = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfSecIllegalLblVltns.setStatus('current')
mplsL3VpnVrfSecDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 6, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfSecDiscontinuityTime.setStatus('current')
mplsL3VpnVrfPerfTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 3, 1), )
if mibBuilder.loadTexts: mplsL3VpnVrfPerfTable.setStatus('current')
mplsL3VpnVrfPerfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 3, 1, 1), )
mplsL3VpnVrfEntry.registerAugmentions(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfEntry"))
mplsL3VpnVrfPerfEntry.setIndexNames(*mplsL3VpnVrfEntry.getIndexNames())
if mibBuilder.loadTexts: mplsL3VpnVrfPerfEntry.setStatus('current')
mplsL3VpnVrfPerfRoutesAdded = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfPerfRoutesAdded.setStatus('current')
mplsL3VpnVrfPerfRoutesDeleted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfPerfRoutesDeleted.setStatus('current')
mplsL3VpnVrfPerfCurrNumRoutes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 3, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfPerfCurrNumRoutes.setStatus('current')
mplsL3VpnVrfPerfRoutesDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfPerfRoutesDropped.setStatus('current')
mplsL3VpnVrfPerfDiscTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 3, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfPerfDiscTime.setStatus('current')
mplsL3VpnVrfRteTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1), )
if mibBuilder.loadTexts: mplsL3VpnVrfRteTable.setStatus('current')
mplsL3VpnVrfRteEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1), ).setIndexNames((0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfName"), (0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrDestType"), (0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrDest"), (0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrPfxLen"), (0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrPolicy"), (0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrNHopType"), (0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrNextHop"))
if mibBuilder.loadTexts: mplsL3VpnVrfRteEntry.setStatus('current')
mplsL3VpnVrfRteInetCidrDestType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrDestType.setStatus('current')
mplsL3VpnVrfRteInetCidrDest = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrDest.setStatus('current')
mplsL3VpnVrfRteInetCidrPfxLen = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrPfxLen.setStatus('current')
mplsL3VpnVrfRteInetCidrPolicy = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 4), ObjectIdentifier())
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrPolicy.setStatus('current')
mplsL3VpnVrfRteInetCidrNHopType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 5), InetAddressType())
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrNHopType.setStatus('current')
mplsL3VpnVrfRteInetCidrNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 6), InetAddress())
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrNextHop.setStatus('current')
mplsL3VpnVrfRteInetCidrIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 7), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrIfIndex.setStatus('current')
mplsL3VpnVrfRteInetCidrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("reject", 2), ("local", 3), ("remote", 4), ("blackhole", 5))).clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrType.setStatus('current')
mplsL3VpnVrfRteInetCidrProto = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 9), IANAipRouteProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrProto.setStatus('current')
mplsL3VpnVrfRteInetCidrAge = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrAge.setStatus('current')
mplsL3VpnVrfRteInetCidrNextHopAS = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 11), InetAutonomousSystemNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrNextHopAS.setStatus('current')
mplsL3VpnVrfRteInetCidrMetric1 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrMetric1.setStatus('current')
mplsL3VpnVrfRteInetCidrMetric2 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrMetric2.setStatus('current')
mplsL3VpnVrfRteInetCidrMetric3 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrMetric3.setStatus('current')
mplsL3VpnVrfRteInetCidrMetric4 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrMetric4.setStatus('current')
mplsL3VpnVrfRteInetCidrMetric5 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrMetric5.setStatus('current')
mplsL3VpnVrfRteXCPointer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 17), MplsIndexType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteXCPointer.setStatus('current')
mplsL3VpnVrfRteInetCidrStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrStatus.setStatus('current')
mplsL3VpnVrfUp = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 11, 0, 1)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnIfConfRowStatus"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfOperStatus"))
if mibBuilder.loadTexts: mplsL3VpnVrfUp.setStatus('current')
mplsL3VpnVrfDown = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 11, 0, 2)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnIfConfRowStatus"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfOperStatus"))
if mibBuilder.loadTexts: mplsL3VpnVrfDown.setStatus('current')
mplsL3VpnVrfRouteMidThreshExceeded = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 11, 0, 3)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfCurrNumRoutes"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfMidRteThresh"))
if mibBuilder.loadTexts: mplsL3VpnVrfRouteMidThreshExceeded.setStatus('current')
mplsL3VpnVrfNumVrfRouteMaxThreshExceeded = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 11, 0, 4)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfCurrNumRoutes"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfHighRteThresh"))
if mibBuilder.loadTexts: mplsL3VpnVrfNumVrfRouteMaxThreshExceeded.setStatus('current')
mplsL3VpnNumVrfSecIllglLblThrshExcd = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 11, 0, 5)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfSecIllegalLblVltns"))
if mibBuilder.loadTexts: mplsL3VpnNumVrfSecIllglLblThrshExcd.setStatus('current')
mplsL3VpnNumVrfRouteMaxThreshCleared = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 11, 0, 6)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfCurrNumRoutes"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfHighRteThresh"))
if mibBuilder.loadTexts: mplsL3VpnNumVrfRouteMaxThreshCleared.setStatus('current')
mplsL3VpnGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1))
mplsL3VpnCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 2))
mplsL3VpnModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 2, 1)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnScalarGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnIfGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnPerfGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRTGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnSecGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnNotificationGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnPerfRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnModuleFullCompliance = mplsL3VpnModuleFullCompliance.setStatus('current')
mplsL3VpnModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 2, 2)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnScalarGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnIfGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnPerfGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRTGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnSecGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnNotificationGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnPerfRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnModuleReadOnlyCompliance = mplsL3VpnModuleReadOnlyCompliance.setStatus('current')
mplsL3VpnScalarGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1, 1)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnConfiguredVrfs"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnActiveVrfs"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnConnectedInterfaces"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnNotificationEnable"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfMaxPossRts"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfRteMxThrshTime"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnIllLblRcvThrsh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnScalarGroup = mplsL3VpnScalarGroup.setStatus('current')
mplsL3VpnVrfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1, 2)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfVpnId"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfDescription"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRD"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfCreationTime"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfOperStatus"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfActiveInterfaces"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfAssociatedInterfaces"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfMidRteThresh"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfHighRteThresh"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfMaxRoutes"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfLastChanged"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfRowStatus"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfAdminStatus"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnVrfGroup = mplsL3VpnVrfGroup.setStatus('current')
mplsL3VpnIfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1, 3)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnIfVpnClassification"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnIfVpnRouteDistProtocol"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnIfConfStorageType"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnIfConfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnIfGroup = mplsL3VpnIfGroup.setStatus('current')
mplsL3VpnPerfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1, 4)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfRoutesAdded"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfRoutesDeleted"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfCurrNumRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnPerfGroup = mplsL3VpnPerfGroup.setStatus('current')
mplsL3VpnPerfRouteGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1, 5)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfRoutesDropped"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfDiscTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnPerfRouteGroup = mplsL3VpnPerfRouteGroup.setStatus('current')
mplsL3VpnSecGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1, 7)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfSecIllegalLblVltns"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfSecDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnSecGroup = mplsL3VpnSecGroup.setStatus('current')
mplsL3VpnVrfRteGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1, 8)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrIfIndex"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrType"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrProto"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrAge"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrNextHopAS"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrMetric1"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrMetric2"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrMetric3"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrMetric4"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrMetric5"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteXCPointer"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnVrfRteGroup = mplsL3VpnVrfRteGroup.setStatus('current')
mplsL3VpnVrfRTGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1, 9)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRTDescr"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRT"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRTRowStatus"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRTStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnVrfRTGroup = mplsL3VpnVrfRTGroup.setStatus('current')
mplsL3VpnNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1, 10)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfUp"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfDown"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRouteMidThreshExceeded"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfNumVrfRouteMaxThreshExceeded"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnNumVrfSecIllglLblThrshExcd"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnNumVrfRouteMaxThreshCleared"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnNotificationGroup = mplsL3VpnNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("MPLS-L3VPN-STD-MIB", PYSNMP_MODULE_ID=mplsL3VpnMIB, mplsL3VpnVrfRTTable=mplsL3VpnVrfRTTable, mplsL3VpnVrfRteInetCidrMetric4=mplsL3VpnVrfRteInetCidrMetric4, MplsL3VpnRouteDistinguisher=MplsL3VpnRouteDistinguisher, mplsL3VpnScalarGroup=mplsL3VpnScalarGroup, mplsL3VpnVrfRteTable=mplsL3VpnVrfRteTable, mplsL3VpnVrfDown=mplsL3VpnVrfDown, mplsL3VpnVrfRteInetCidrProto=mplsL3VpnVrfRteInetCidrProto, mplsL3VpnVrfRteXCPointer=mplsL3VpnVrfRteXCPointer, mplsL3VpnVrfRteGroup=mplsL3VpnVrfRteGroup, mplsL3VpnVrfRteInetCidrDest=mplsL3VpnVrfRteInetCidrDest, mplsL3VpnConfiguredVrfs=mplsL3VpnConfiguredVrfs, mplsL3VpnVrfNumVrfRouteMaxThreshExceeded=mplsL3VpnVrfNumVrfRouteMaxThreshExceeded, mplsL3VpnVrfOperStatus=mplsL3VpnVrfOperStatus, mplsL3VpnVrfEntry=mplsL3VpnVrfEntry, mplsL3VpnVrfPerfEntry=mplsL3VpnVrfPerfEntry, mplsL3VpnVrfRouteMidThreshExceeded=mplsL3VpnVrfRouteMidThreshExceeded, mplsL3VpnVrfRteInetCidrAge=mplsL3VpnVrfRteInetCidrAge, MplsL3VpnName=MplsL3VpnName, mplsL3VpnVrfRteInetCidrMetric2=mplsL3VpnVrfRteInetCidrMetric2, mplsL3VpnVrfSecIllegalLblVltns=mplsL3VpnVrfSecIllegalLblVltns, mplsL3VpnPerfRouteGroup=mplsL3VpnPerfRouteGroup, mplsL3VpnVrfRteInetCidrNHopType=mplsL3VpnVrfRteInetCidrNHopType, mplsL3VpnVrfSecDiscontinuityTime=mplsL3VpnVrfSecDiscontinuityTime, mplsL3VpnVrfConfHighRteThresh=mplsL3VpnVrfConfHighRteThresh, mplsL3VpnVrfRT=mplsL3VpnVrfRT, mplsL3VpnConnectedInterfaces=mplsL3VpnConnectedInterfaces, mplsL3VpnVrfAssociatedInterfaces=mplsL3VpnVrfAssociatedInterfaces, mplsL3VpnVrfConfRteMxThrshTime=mplsL3VpnVrfConfRteMxThrshTime, mplsL3VpnNumVrfSecIllglLblThrshExcd=mplsL3VpnNumVrfSecIllglLblThrshExcd, mplsL3VpnVrfRteInetCidrNextHopAS=mplsL3VpnVrfRteInetCidrNextHopAS, mplsL3VpnConf=mplsL3VpnConf, mplsL3VpnVrfConfAdminStatus=mplsL3VpnVrfConfAdminStatus, mplsL3VpnVrfConfRowStatus=mplsL3VpnVrfConfRowStatus, mplsL3VpnIfGroup=mplsL3VpnIfGroup, mplsL3VpnVrfSecTable=mplsL3VpnVrfSecTable, mplsL3VpnConformance=mplsL3VpnConformance, mplsL3VpnVrfRteInetCidrMetric1=mplsL3VpnVrfRteInetCidrMetric1, mplsL3VpnIfConfIndex=mplsL3VpnIfConfIndex, mplsL3VpnIfVpnClassification=mplsL3VpnIfVpnClassification, mplsL3VpnPerfGroup=mplsL3VpnPerfGroup, mplsL3VpnPerf=mplsL3VpnPerf, mplsL3VpnRoute=mplsL3VpnRoute, MplsL3VpnRtType=MplsL3VpnRtType, mplsL3VpnVrfSecEntry=mplsL3VpnVrfSecEntry, mplsL3VpnVrfPerfDiscTime=mplsL3VpnVrfPerfDiscTime, mplsL3VpnVrfRteInetCidrMetric5=mplsL3VpnVrfRteInetCidrMetric5, mplsL3VpnIfConfEntry=mplsL3VpnIfConfEntry, mplsL3VpnNumVrfRouteMaxThreshCleared=mplsL3VpnNumVrfRouteMaxThreshCleared, mplsL3VpnModuleReadOnlyCompliance=mplsL3VpnModuleReadOnlyCompliance, mplsL3VpnVrfUp=mplsL3VpnVrfUp, mplsL3VpnVrfGroup=mplsL3VpnVrfGroup, mplsL3VpnVrfRTDescr=mplsL3VpnVrfRTDescr, mplsL3VpnVrfConfMidRteThresh=mplsL3VpnVrfConfMidRteThresh, mplsL3VpnVrfRteInetCidrIfIndex=mplsL3VpnVrfRteInetCidrIfIndex, mplsL3VpnVrfRteInetCidrDestType=mplsL3VpnVrfRteInetCidrDestType, mplsL3VpnIfConfStorageType=mplsL3VpnIfConfStorageType, mplsL3VpnIfVpnRouteDistProtocol=mplsL3VpnIfVpnRouteDistProtocol, mplsL3VpnGroups=mplsL3VpnGroups, mplsL3VpnVrfCreationTime=mplsL3VpnVrfCreationTime, mplsL3VpnMIB=mplsL3VpnMIB, mplsL3VpnVrfRD=mplsL3VpnVrfRD, mplsL3VpnVrfRteEntry=mplsL3VpnVrfRteEntry, mplsL3VpnVrfTable=mplsL3VpnVrfTable, mplsL3VpnIllLblRcvThrsh=mplsL3VpnIllLblRcvThrsh, mplsL3VpnVrfPerfRoutesDeleted=mplsL3VpnVrfPerfRoutesDeleted, mplsL3VpnVrfDescription=mplsL3VpnVrfDescription, mplsL3VpnVrfRteInetCidrPolicy=mplsL3VpnVrfRteInetCidrPolicy, mplsL3VpnNotificationEnable=mplsL3VpnNotificationEnable, mplsL3VpnVrfName=mplsL3VpnVrfName, mplsL3VpnVrfRTStorageType=mplsL3VpnVrfRTStorageType, mplsL3VpnNotifications=mplsL3VpnNotifications, mplsL3VpnVrfRTRowStatus=mplsL3VpnVrfRTRowStatus, mplsL3VpnVrfRteInetCidrStatus=mplsL3VpnVrfRteInetCidrStatus, mplsL3VpnVrfPerfTable=mplsL3VpnVrfPerfTable, mplsL3VpnVrfRTType=mplsL3VpnVrfRTType, mplsL3VpnVrfRteInetCidrMetric3=mplsL3VpnVrfRteInetCidrMetric3, mplsL3VpnVrfActiveInterfaces=mplsL3VpnVrfActiveInterfaces, mplsL3VpnVrfConfMaxPossRts=mplsL3VpnVrfConfMaxPossRts, mplsL3VpnVrfRTIndex=mplsL3VpnVrfRTIndex, mplsL3VpnVrfPerfCurrNumRoutes=mplsL3VpnVrfPerfCurrNumRoutes, mplsL3VpnVrfRTGroup=mplsL3VpnVrfRTGroup, mplsL3VpnVrfVpnId=mplsL3VpnVrfVpnId, mplsL3VpnVrfPerfRoutesDropped=mplsL3VpnVrfPerfRoutesDropped, mplsL3VpnModuleFullCompliance=mplsL3VpnModuleFullCompliance, mplsL3VpnActiveVrfs=mplsL3VpnActiveVrfs, mplsL3VpnScalars=mplsL3VpnScalars, mplsL3VpnVrfConfMaxRoutes=mplsL3VpnVrfConfMaxRoutes, mplsL3VpnVrfRTEntry=mplsL3VpnVrfRTEntry, mplsL3VpnVrfRteInetCidrNextHop=mplsL3VpnVrfRteInetCidrNextHop, mplsL3VpnVrfRteInetCidrType=mplsL3VpnVrfRteInetCidrType, mplsL3VpnVrfRteInetCidrPfxLen=mplsL3VpnVrfRteInetCidrPfxLen, mplsL3VpnCompliances=mplsL3VpnCompliances, mplsL3VpnVrfConfStorageType=mplsL3VpnVrfConfStorageType, mplsL3VpnObjects=mplsL3VpnObjects, mplsL3VpnVrfPerfRoutesAdded=mplsL3VpnVrfPerfRoutesAdded, mplsL3VpnIfConfTable=mplsL3VpnIfConfTable, mplsL3VpnIfConfRowStatus=mplsL3VpnIfConfRowStatus, mplsL3VpnNotificationGroup=mplsL3VpnNotificationGroup, mplsL3VpnSecGroup=mplsL3VpnSecGroup, mplsL3VpnVrfConfLastChanged=mplsL3VpnVrfConfLastChanged)
