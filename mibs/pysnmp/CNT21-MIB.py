#
# PySNMP MIB module CNT21-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CNT21-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:09:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
cnt2Mib2, = mibBuilder.importSymbols("CNT2-MIB", "cnt2Mib2")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, IpAddress, Gauge32, Counter64, Unsigned32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, iso, Bits, Counter32, Integer32, MibIdentifier, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "Gauge32", "Counter64", "Unsigned32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "iso", "Bits", "Counter32", "Integer32", "MibIdentifier", "enterprises")
DisplayString, TextualConvention, PhysAddress, TruthValue, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress", "TruthValue", "TimeStamp")
cnt2Interface = ModuleIdentity((1, 3, 6, 1, 4, 1, 333, 2, 1, 2))
cnt2Interface.setRevisions(('1901-10-23 00:00',))
if mibBuilder.loadTexts: cnt2Interface.setLastUpdated('0110230000Z')
if mibBuilder.loadTexts: cnt2Interface.setOrganization('Computer Network Technology Corporation')
cnt2Interfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 333, 2, 1, 2))
cnt2IfNumTable = MibTable((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 1), )
if mibBuilder.loadTexts: cnt2IfNumTable.setStatus('current')
cnt2IfNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 1, 1), ).setIndexNames((0, "CNT21-MIB", "cnt2IfNumIndex"))
if mibBuilder.loadTexts: cnt2IfNumEntry.setStatus('current')
cnt2IfNumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfNumIndex.setStatus('current')
cnt2IfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfNum.setStatus('current')
cnt2IfTable = MibTable((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2), )
if mibBuilder.loadTexts: cnt2IfTable.setStatus('deprecated')
cnt2IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1), ).setIndexNames((0, "CNT21-MIB", "cnt2IfSlotIndex"), (0, "CNT21-MIB", "cnt2IfIndex"))
if mibBuilder.loadTexts: cnt2IfEntry.setStatus('deprecated')
cnt2IfSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfSlotIndex.setStatus('deprecated')
cnt2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfIndex.setStatus('deprecated')
cnt2IfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfDescr.setStatus('deprecated')
cnt2IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 256, 257, 258, 259, 260, 261, 262, 263))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32), ("rs232", 33), ("parallel-port", 34), ("arcnet", 35), ("arcnet-plus", 36), ("atm", 37), ("miox25", 38), ("sonet", 39), ("x25ple", 40), ("iso8802-llc", 41), ("localtalk", 42), ("smds-dxi", 43), ("frame-relay-dce", 44), ("v35", 45), ("hssi", 46), ("hippi", 47), ("modem", 48), ("atm-all5", 49), ("sonet-path", 50), ("sonet-vt", 51), ("smds-intercarrier", 52), ("prop-virtual-term", 53), ("prop-multiplexing", 54), ("ieee80212", 55), ("fibreChannel", 56), ("hippiInterface", 57), ("frameRelayInterconnect", 58), ("aflane8023", 59), ("aflane8025", 60), ("cctEmul", 61), ("fastEther", 62), ("isdn", 63), ("v11", 64), ("v36", 65), ("g703at64k", 66), ("g703at2mb", 67), ("qllc", 68), ("fastEtherFX", 69), ("channel", 70), ("ieee80211", 71), ("ibm370parChan", 72), ("escon", 73), ("dlsw", 74), ("isdns", 75), ("isdnu", 76), ("lapd", 77), ("ipSwitch", 78), ("rsrb", 79), ("atmLogical", 80), ("ds0", 81), ("ds0Bundle", 82), ("bsc", 83), ("async", 84), ("cnr", 85), ("iso88025Dtr", 86), ("eplrs", 87), ("arap", 88), ("propCnls", 89), ("hostPad", 90), ("termPad", 91), ("frameRealyMPI", 92), ("x213", 93), ("adsl", 94), ("radsl", 95), ("sdsl", 96), ("vdsl", 97), ("iso88025CRFPInt", 98), ("myrinet", 99), ("voiceEM", 100), ("voiceFXO", 101), ("voiceFXS", 102), ("voiceEncap", 103), ("voiceOverIp", 104), ("atmDxi", 105), ("atmFuni", 106), ("atmIma", 107), ("pppMultilinkBundle", 108), ("ipOverCdlc", 109), ("ipOverClaw", 110), ("stackToStack", 111), ("virtualIpAddress", 112), ("mpc", 113), ("ipOverAtm", 114), ("iso88025Fiber", 115), ("tdlc", 116), ("gigabitEthernet", 117), ("escon-local", 256), ("escon-remote", 257), ("switch-unicast", 258), ("switch-multicast", 259), ("switch-broadcast", 260), ("escon-srdf", 261), ("scsi-2", 262), ("scsi-3", 263)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfType.setStatus('deprecated')
cnt2IfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfMtu.setStatus('deprecated')
cnt2IfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfSpeed.setStatus('deprecated')
cnt2IfPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfPhysAddress.setStatus('deprecated')
cnt2IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnt2IfAdminStatus.setStatus('deprecated')
cnt2IfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfOperStatus.setStatus('deprecated')
cnt2IfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfLastChange.setStatus('deprecated')
cnt2IfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfInOctets.setStatus('deprecated')
cnt2IfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfInUcastPkts.setStatus('deprecated')
cnt2IfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfInNUcastPkts.setStatus('deprecated')
cnt2IfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfInDiscards.setStatus('deprecated')
cnt2IfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfInErrors.setStatus('deprecated')
cnt2IfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfInUnknownProtos.setStatus('deprecated')
cnt2IfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfOutOctets.setStatus('deprecated')
cnt2IfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfOutUcastPkts.setStatus('deprecated')
cnt2IfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfOutNUcastPkts.setStatus('deprecated')
cnt2IfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfOutDiscards.setStatus('deprecated')
cnt2IfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfOutErrors.setStatus('deprecated')
cnt2IfOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfOutQLen.setStatus('deprecated')
cnt2IfSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 2, 1, 23), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2IfSpecific.setStatus('deprecated')
cnt2XIfTable = MibTable((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3), )
if mibBuilder.loadTexts: cnt2XIfTable.setStatus('current')
cnt2XIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1), ).setIndexNames((0, "CNT21-MIB", "cnt2XIfSlotIndex"), (0, "CNT21-MIB", "cnt2XIfIndex"))
if mibBuilder.loadTexts: cnt2XIfEntry.setStatus('current')
cnt2XIfSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfSlotIndex.setStatus('current')
cnt2XIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfIndex.setStatus('current')
cnt2XIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfDescr.setStatus('current')
cnt2XIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfName.setStatus('current')
cnt2XIfIANAType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 5), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfIANAType.setStatus('current')
cnt2XIfCntType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 256, 257, 258, 259, 260, 261, 262, 263))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32), ("rs232", 33), ("parallel-port", 34), ("arcnet", 35), ("arcnet-plus", 36), ("atm", 37), ("miox25", 38), ("sonet", 39), ("x25ple", 40), ("iso8802-llc", 41), ("localtalk", 42), ("smds-dxi", 43), ("frame-relay-dce", 44), ("v35", 45), ("hssi", 46), ("hippi", 47), ("modem", 48), ("atm-all5", 49), ("sonet-path", 50), ("sonet-vt", 51), ("smds-intercarrier", 52), ("prop-virtual-term", 53), ("prop-multiplexing", 54), ("ieee80212", 55), ("fibreChannel", 56), ("hippiInterface", 57), ("frameRelayInterconnect", 58), ("aflane8023", 59), ("aflane8025", 60), ("cctEmul", 61), ("fastEther", 62), ("isdn", 63), ("v11", 64), ("v36", 65), ("g703at64k", 66), ("g703at2mb", 67), ("qllc", 68), ("fastEtherFX", 69), ("channel", 70), ("ieee80211", 71), ("ibm370parChan", 72), ("escon", 73), ("dlsw", 74), ("isdns", 75), ("isdnu", 76), ("lapd", 77), ("ipSwitch", 78), ("rsrb", 79), ("atmLogical", 80), ("ds0", 81), ("ds0Bundle", 82), ("bsc", 83), ("async", 84), ("cnr", 85), ("iso88025Dtr", 86), ("eplrs", 87), ("arap", 88), ("propCnls", 89), ("hostPad", 90), ("termPad", 91), ("frameRealyMPI", 92), ("x213", 93), ("adsl", 94), ("radsl", 95), ("sdsl", 96), ("vdsl", 97), ("iso88025CRFPInt", 98), ("myrinet", 99), ("voiceEM", 100), ("voiceFXO", 101), ("voiceFXS", 102), ("voiceEncap", 103), ("voiceOverIp", 104), ("atmDxi", 105), ("atmFuni", 106), ("atmIma", 107), ("pppMultilinkBundle", 108), ("ipOverCdlc", 109), ("ipOverClaw", 110), ("stackToStack", 111), ("virtualIpAddress", 112), ("mpc", 113), ("ipOverAtm", 114), ("iso88025Fiber", 115), ("tdlc", 116), ("gigabitEthernet", 117), ("escon-local", 256), ("escon-remote", 257), ("switch-unicast", 258), ("switch-multicast", 259), ("switch-broadcast", 260), ("escon-srdf", 261), ("scsi-2", 262), ("scsi-3", 263)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfCntType.setStatus('current')
cnt2XIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfMtu.setStatus('current')
cnt2XIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfSpeed.setStatus('current')
cnt2XIfPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfPhysAddress.setStatus('current')
cnt2XIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnt2XIfAdminStatus.setStatus('current')
cnt2XIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfOperStatus.setStatus('current')
cnt2XIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfLastChange.setStatus('current')
cnt2XIfLinkUpDownTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnt2XIfLinkUpDownTrapEnable.setStatus('current')
cnt2XIfPromiscuousMode = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnt2XIfPromiscuousMode.setStatus('current')
cnt2XIfConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfConnectorType.setStatus('current')
cnt2XIfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnt2XIfAlias.setStatus('current')
cnt2XIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfInOctets.setStatus('current')
cnt2XIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfInUcastPkts.setStatus('current')
cnt2XIfInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfInMulticastPkts.setStatus('current')
cnt2XIfInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfInBroadcastPkts.setStatus('current')
cnt2XIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfInDiscards.setStatus('current')
cnt2XIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfInErrors.setStatus('current')
cnt2XIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfInUnknownProtos.setStatus('current')
cnt2XIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfOutOctets.setStatus('current')
cnt2XIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfOutUcastPkts.setStatus('current')
cnt2XIfOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfOutMulticastPkts.setStatus('current')
cnt2XIfOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfOutBroadcastPkts.setStatus('current')
cnt2XIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfOutDiscards.setStatus('current')
cnt2XIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfOutErrors.setStatus('current')
cnt2XIfCounterDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 1, 2, 3, 1, 30), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2XIfCounterDiscontinuityTime.setStatus('current')
mibBuilder.exportSymbols("CNT21-MIB", cnt2IfOutQLen=cnt2IfOutQLen, cnt2XIfName=cnt2XIfName, cnt2XIfCounterDiscontinuityTime=cnt2XIfCounterDiscontinuityTime, cnt2XIfOutDiscards=cnt2XIfOutDiscards, cnt2IfAdminStatus=cnt2IfAdminStatus, cnt2XIfDescr=cnt2XIfDescr, cnt2IfSpeed=cnt2IfSpeed, cnt2IfIndex=cnt2IfIndex, PYSNMP_MODULE_ID=cnt2Interface, cnt2XIfEntry=cnt2XIfEntry, cnt2XIfOutMulticastPkts=cnt2XIfOutMulticastPkts, cnt2IfOutNUcastPkts=cnt2IfOutNUcastPkts, cnt2Interfaces=cnt2Interfaces, cnt2XIfInMulticastPkts=cnt2XIfInMulticastPkts, cnt2IfType=cnt2IfType, cnt2IfInOctets=cnt2IfInOctets, cnt2XIfInErrors=cnt2XIfInErrors, cnt2XIfOutBroadcastPkts=cnt2XIfOutBroadcastPkts, cnt2IfInErrors=cnt2IfInErrors, cnt2IfOutDiscards=cnt2IfOutDiscards, cnt2XIfOutErrors=cnt2XIfOutErrors, cnt2IfInUcastPkts=cnt2IfInUcastPkts, cnt2XIfSpeed=cnt2XIfSpeed, cnt2IfSpecific=cnt2IfSpecific, cnt2XIfAdminStatus=cnt2XIfAdminStatus, cnt2IfOperStatus=cnt2IfOperStatus, cnt2IfInUnknownProtos=cnt2IfInUnknownProtos, cnt2XIfOutOctets=cnt2XIfOutOctets, cnt2XIfInBroadcastPkts=cnt2XIfInBroadcastPkts, cnt2XIfInDiscards=cnt2XIfInDiscards, cnt2IfNum=cnt2IfNum, cnt2XIfTable=cnt2XIfTable, cnt2XIfPhysAddress=cnt2XIfPhysAddress, cnt2XIfInOctets=cnt2XIfInOctets, cnt2IfOutErrors=cnt2IfOutErrors, cnt2IfNumTable=cnt2IfNumTable, cnt2Interface=cnt2Interface, cnt2IfNumEntry=cnt2IfNumEntry, cnt2XIfInUcastPkts=cnt2XIfInUcastPkts, cnt2IfOutOctets=cnt2IfOutOctets, cnt2IfLastChange=cnt2IfLastChange, cnt2IfInDiscards=cnt2IfInDiscards, cnt2XIfCntType=cnt2XIfCntType, cnt2IfSlotIndex=cnt2IfSlotIndex, cnt2XIfOutUcastPkts=cnt2XIfOutUcastPkts, cnt2XIfMtu=cnt2XIfMtu, cnt2XIfLastChange=cnt2XIfLastChange, cnt2XIfIANAType=cnt2XIfIANAType, cnt2XIfConnectorType=cnt2XIfConnectorType, cnt2XIfOperStatus=cnt2XIfOperStatus, cnt2IfPhysAddress=cnt2IfPhysAddress, cnt2XIfInUnknownProtos=cnt2XIfInUnknownProtos, cnt2IfEntry=cnt2IfEntry, cnt2XIfSlotIndex=cnt2XIfSlotIndex, cnt2IfInNUcastPkts=cnt2IfInNUcastPkts, cnt2XIfIndex=cnt2XIfIndex, cnt2IfMtu=cnt2IfMtu, cnt2IfNumIndex=cnt2IfNumIndex, cnt2XIfLinkUpDownTrapEnable=cnt2XIfLinkUpDownTrapEnable, cnt2IfTable=cnt2IfTable, cnt2XIfPromiscuousMode=cnt2XIfPromiscuousMode, cnt2IfOutUcastPkts=cnt2IfOutUcastPkts, cnt2XIfAlias=cnt2XIfAlias, cnt2IfDescr=cnt2IfDescr)
