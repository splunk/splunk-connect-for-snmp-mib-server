#
# PySNMP MIB module HH3C-HGMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-HGMP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:14:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
hh3cRhw, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cRhw")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibIdentifier, Unsigned32, Bits, Counter64, Integer32, ObjectIdentity, TimeTicks, NotificationType, Counter32, ModuleIdentity, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "Unsigned32", "Bits", "Counter64", "Integer32", "ObjectIdentity", "TimeTicks", "NotificationType", "Counter32", "ModuleIdentity", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
MacAddress, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "TextualConvention", "DisplayString")
hh3cHgmp = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 7))
if mibBuilder.loadTexts: hh3cHgmp.setLastUpdated('200512061452Z')
if mibBuilder.loadTexts: hh3cHgmp.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cClusterObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1))
if mibBuilder.loadTexts: hh3cClusterObject.setStatus('current')
hh3chgmpSetVLANSecurity = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noSecurity", 0), ("security", 1))).clone('security')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpSetVLANSecurity.setStatus('current')
hh3chgmpHandShakeInterval = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpHandShakeInterval.setStatus('current')
hh3chgmpHandShakeHoldtime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpHandShakeHoldtime.setStatus('current')
hh3chgmpGrpMemberTableChange = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpGrpMemberTableChange.setStatus('current')
hh3chgmpMemberDisconRate = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpMemberDisconRate.setStatus('current')
hh3chgmpCmdLanswitchFlag = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpCmdLanswitchFlag.setStatus('current')
hh3chgmpCmdClusterName = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpCmdClusterName.setStatus('current')
hh3chgmpMngPriIpSegCMIP = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpMngPriIpSegCMIP.setStatus('current')
hh3chgmpMngPriIpMask = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpMngPriIpMask.setStatus('current')
hh3chgmpFtpServer = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpFtpServer.setStatus('current')
hh3chgmpTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpTftpServer.setStatus('current')
hh3chgmpSnmpHost = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpSnmpHost.setStatus('current')
hh3chgmpLogHost = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpLogHost.setStatus('current')
hh3chgmpGrpMemberTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14), )
if mibBuilder.loadTexts: hh3chgmpGrpMemberTable.setStatus('current')
hh3chgmpGrpMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpGrpMemberDeviceId"))
if mibBuilder.loadTexts: hh3chgmpGrpMemberEntry.setStatus('current')
hh3chgmpGrpMemberDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpGrpMemberDeviceId.setStatus('current')
hh3chgmpGrpMemberSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpGrpMemberSerial.setStatus('current')
hh3chgmpGrpMemberIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpGrpMemberIpAddr.setStatus('current')
hh3chgmpGrpMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpGrpMemberName.setStatus('current')
hh3chgmpGrpMemberPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpGrpMemberPassword.setStatus('current')
hh3chgmpGrpMemberPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpGrpMemberPlatform.setStatus('current')
hh3chgmpGrpMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("fault", 1))).clone('fault')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpGrpMemberStatus.setStatus('current')
hh3chgmpGrpMemberDisconCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpGrpMemberDisconCount.setStatus('current')
hh3chgmpGrpMemberEnrollTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpGrpMemberEnrollTime.setStatus('current')
hh3chgmpGrpMemberOperate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpGrpMemberOperate.setStatus('current')
hh3chgmpMemberResetTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 15), )
if mibBuilder.loadTexts: hh3chgmpMemberResetTable.setStatus('current')
hh3chgmpMemberResetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 15, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpMemberResetMAC"))
if mibBuilder.loadTexts: hh3chgmpMemberResetEntry.setStatus('current')
hh3chgmpMemberResetMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 15, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpMemberResetMAC.setStatus('current')
hh3chgmpMemberEraseflash = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 65535))).clone(namedValues=NamedValues(("noErase", 0), ("erase", 1), ("cannotget", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpMemberEraseflash.setStatus('current')
hh3chgmpEventsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 0))
if mibBuilder.loadTexts: hh3chgmpEventsV2.setStatus('current')
hh3chgmpMemberfailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 0, 1)).setObjects(("HH3C-HGMP-MIB", "hh3chgmpGrpMemberDeviceId"))
if mibBuilder.loadTexts: hh3chgmpMemberfailure.setStatus('current')
hh3chgmpMemberRecover = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 0, 2)).setObjects(("HH3C-HGMP-MIB", "hh3chgmpGrpMemberDeviceId"))
if mibBuilder.loadTexts: hh3chgmpMemberRecover.setStatus('current')
hh3chgmpMemberStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 0, 3)).setObjects(("HH3C-HGMP-MIB", "hh3chgmpGrpMemberDeviceId"), ("HH3C-HGMP-MIB", "hh3chgmpNTDPCacheClusterRole"))
if mibBuilder.loadTexts: hh3chgmpMemberStatusChange.setStatus('current')
hh3chgmpNetTopChange = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 0, 4))
if mibBuilder.loadTexts: hh3chgmpNetTopChange.setStatus('current')
hh3chgmpClusterRole = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 16, 17))).clone(namedValues=NamedValues(("roleCMDSW", 1), ("roleMEMBERSW", 2), ("roleBAKSW", 3), ("roleCASW", 16), ("roleUNISW", 17))).clone('roleUNISW')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpClusterRole.setStatus('current')
hh3chgmpClusterMaxPoolNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpClusterMaxPoolNum.setStatus('current')
hh3chgmpClusterCmdSwMac = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpClusterCmdSwMac.setStatus('current')
hh3chgmpRun = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpRun.setStatus('current')
hh3chgmpProtocolMac = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 22))
hh3chgmpClusterProtocolMac = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 22, 1), MacAddress().clone(hexValue="0180C200000A")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpClusterProtocolMac.setStatus('current')
hh3chgmpTopologyManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23))
hh3chgmpWhitelistTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 1), )
if mibBuilder.loadTexts: hh3chgmpWhitelistTable.setStatus('current')
hh3chgmpWhitelistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 1, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpWhitelistDeviceId"))
if mibBuilder.loadTexts: hh3chgmpWhitelistEntry.setStatus('current')
hh3chgmpWhitelistDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10))
if mibBuilder.loadTexts: hh3chgmpWhitelistDeviceId.setStatus('current')
hh3chgmpWhitelistSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 2047), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpWhitelistSerial.setStatus('current')
hh3chgmpWhitelistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3chgmpWhitelistRowStatus.setStatus('current')
hh3chgmpWhitelistNbTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 2), )
if mibBuilder.loadTexts: hh3chgmpWhitelistNbTable.setStatus('current')
hh3chgmpWhitelistNbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 2, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpWhitelistDeviceId"), (0, "HH3C-HGMP-MIB", "hh3chgmpWhitelistNbIndex"))
if mibBuilder.loadTexts: hh3chgmpWhitelistNbEntry.setStatus('current')
hh3chgmpWhitelistNbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hh3chgmpWhitelistNbIndex.setStatus('current')
hh3chgmpWhitelistNbDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpWhitelistNbDeviceId.setStatus('current')
hh3chgmpWhitelistPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpWhitelistPortName.setStatus('current')
hh3chgmpWhitelistNbPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpWhitelistNbPortName.setStatus('current')
hh3chgmpBlacklistTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 3), )
if mibBuilder.loadTexts: hh3chgmpBlacklistTable.setStatus('current')
hh3chgmpBlacklistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 3, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpBlacklistDeviceId"))
if mibBuilder.loadTexts: hh3chgmpBlacklistEntry.setStatus('current')
hh3chgmpBlacklistDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10))
if mibBuilder.loadTexts: hh3chgmpBlacklistDeviceId.setStatus('current')
hh3chgmpBlacklistAccessDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpBlacklistAccessDeviceId.setStatus('current')
hh3chgmpBlacklistAccessPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpBlacklistAccessPortName.setStatus('current')
hh3chgmpBlacklistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3chgmpBlacklistRowStatus.setStatus('current')
hh3chgmpMemberPriPortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 24), )
if mibBuilder.loadTexts: hh3chgmpMemberPriPortTable.setStatus('current')
hh3chgmpMemberPriPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 24, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpMemberDevId"), (0, "HH3C-HGMP-MIB", "hh3chgmpMemberPriPortProto"))
if mibBuilder.loadTexts: hh3chgmpMemberPriPortEntry.setStatus('current')
hh3chgmpMemberDevId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 24, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpMemberDevId.setStatus('current')
hh3chgmpMemberPriPortProto = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 24, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hh3chgmpMemberPriPortProto.setStatus('current')
hh3chgmpMemberPriPortProtoDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 24, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpMemberPriPortProtoDescr.setStatus('current')
hh3chgmpMemberPriPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 24, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpMemberPriPortNum.setStatus('current')
hh3cStackObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2))
if mibBuilder.loadTexts: hh3cStackObject.setStatus('current')
hh3chgmpStackMemberTableChange = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberTableChange.setStatus('current')
hh3chgmpStackMemberDisconRate = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberDisconRate.setStatus('current')
hh3chgmpMainLanswitchFlag = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpMainLanswitchFlag.setStatus('current')
hh3chgmpStackIpPoolStartIP = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpStackIpPoolStartIP.setStatus('current')
hh3chgmpStackIpPoolLength = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpStackIpPoolLength.setStatus('current')
hh3chgmpStackIpPoolMask = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 10), IpAddress().clone(hexValue="FFFF0000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpStackIpPoolMask.setStatus('current')
hh3chgmpStackMemberTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6), )
if mibBuilder.loadTexts: hh3chgmpStackMemberTable.setStatus('current')
hh3chgmpStackMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpStackMemberDeviceId"))
if mibBuilder.loadTexts: hh3chgmpStackMemberEntry.setStatus('current')
hh3chgmpStackMemberDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberDeviceId.setStatus('current')
hh3chgmpStackMemberSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberSerial.setStatus('current')
hh3chgmpStackMemberIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberIpAddr.setStatus('current')
hh3chgmpStackMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberName.setStatus('current')
hh3chgmpStackMemberPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberPassword.setStatus('current')
hh3chgmpStackMemberPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberPlatform.setStatus('current')
hh3chgmpStackMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("fault", 1))).clone('fault')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberStatus.setStatus('current')
hh3chgmpStackMemberDisconCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberDisconCount.setStatus('current')
hh3chgmpStackMemberEnrollTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberEnrollTime.setStatus('current')
hh3chgmpStackRole = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 16, 17))).clone(namedValues=NamedValues(("roleCMDSW", 1), ("roleMEMBERSW", 2), ("roleBAKSW", 3), ("roleCASW", 16), ("roleUNISW", 17))).clone('roleUNISW')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackRole.setStatus('current')
hh3chgmpStackMaxPoolNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMaxPoolNum.setStatus('current')
hh3chgmpStackMainSwMac = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMainSwMac.setStatus('current')
hh3cNDPObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5))
if mibBuilder.loadTexts: hh3cNDPObject.setStatus('current')
hh3cNDPStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cNDPStatus.setStatus('current')
hh3cNDPHelloTimer = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 254)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cNDPHelloTimer.setStatus('current')
hh3cNDPAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cNDPAgingTime.setStatus('current')
hh3cNDPChange = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPChange.setStatus('current')
hh3cNDPPortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 5), )
if mibBuilder.loadTexts: hh3cNDPPortTable.setStatus('current')
hh3cNDPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 5, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3cNDPIfIndex"))
if mibBuilder.loadTexts: hh3cNDPPortEntry.setStatus('current')
hh3cNDPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPIfIndex.setStatus('current')
hh3cNDPPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cNDPPortStatus.setStatus('current')
hh3cNDPPortNbTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6), )
if mibBuilder.loadTexts: hh3cNDPPortNbTable.setStatus('current')
hh3cNDPPortNbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3cNDPIfIndex"), (0, "HH3C-HGMP-MIB", "hh3cNDPPortNbDeviceId"), (0, "HH3C-HGMP-MIB", "hh3cNDPPortNbPortName"))
if mibBuilder.loadTexts: hh3cNDPPortNbEntry.setStatus('current')
hh3cNDPPortNbDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPPortNbDeviceId.setStatus('current')
hh3cNDPPortNbPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPPortNbPortName.setStatus('current')
hh3cNDPPortNbDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPPortNbDeviceName.setStatus('current')
hh3cNDPPortNbPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPPortNbPortMode.setStatus('current')
hh3cNDPPortNbProductVer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPPortNbProductVer.setStatus('current')
hh3cNDPPortNbHardVer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPPortNbHardVer.setStatus('current')
hh3cNDPPortNbBootromVer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPPortNbBootromVer.setStatus('current')
hh3cNDPPortNbSoftVer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPPortNbSoftVer.setStatus('current')
hh3cNDPPortNbAgingtime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPPortNbAgingtime.setStatus('current')
hh3cNTDPObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4))
if mibBuilder.loadTexts: hh3cNTDPObject.setStatus('current')
hh3chgmpNTDPCollectTopTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpNTDPCollectTopTime.setStatus('current')
hh3chgmpNTDPHopRange = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpNTDPHopRange.setStatus('current')
hh3chgmpNTDPRun = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpNTDPRun.setStatus('current')
hh3chgmpNTDPPortDelay = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpNTDPPortDelay.setStatus('current')
hh3chgmpNTDPHopDelay = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpNTDPHopDelay.setStatus('current')
hh3chgmpNTDPLastTopCollectDuration = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPLastTopCollectDuration.setStatus('current')
hh3chgmpNTDPCacheChange = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCacheChange.setStatus('current')
hh3chgmpNTDPTOPTableChange = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTOPTableChange.setStatus('current')
hh3chgmpNTDPInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 9), )
if mibBuilder.loadTexts: hh3chgmpNTDPInterfaceTable.setStatus('current')
hh3chgmpNTDPInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 9, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpNTDPInterfaceIfIndex"))
if mibBuilder.loadTexts: hh3chgmpNTDPInterfaceEntry.setStatus('current')
hh3chgmpNTDPInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPInterfaceIfIndex.setStatus('current')
hh3chgmpNTDPInterfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpNTDPInterfaceEnable.setStatus('current')
hh3chgmpNTDPCacheTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10), )
if mibBuilder.loadTexts: hh3chgmpNTDPCacheTable.setStatus('current')
hh3chgmpNTDPCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpNTDPCacheHashIndex"), (0, "HH3C-HGMP-MIB", "hh3chgmpNTDPCacheDeviceID"))
if mibBuilder.loadTexts: hh3chgmpNTDPCacheEntry.setStatus('current')
hh3chgmpNTDPCacheHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCacheHashIndex.setStatus('current')
hh3chgmpNTDPCacheDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCacheDeviceID.setStatus('current')
hh3chgmpNTDPCacheClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCacheClusterName.setStatus('current')
hh3chgmpNTDPCacheClusterRole = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 16, 17))).clone(namedValues=NamedValues(("roleCOSW", 1), ("roleMSW", 2), ("roleBKSW", 3), ("roleCASW", 16), ("roleUNISW", 17))).clone(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCacheClusterRole.setStatus('current')
hh3chgmpNTDPCacheCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1, 5), Integer32().clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCacheCapabilities.setStatus('current')
hh3chgmpNTDPCacheVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCacheVersion.setStatus('current')
hh3chgmpNTDPCachePlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCachePlatform.setStatus('current')
hh3chgmpNTDPCacheMngVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1, 8), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCacheMngVLAN.setStatus('current')
hh3chgmpNTDPCacheHop = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCacheHop.setStatus('current')
hh3chgmpNTDPTopTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11), )
if mibBuilder.loadTexts: hh3chgmpNTDPTopTable.setStatus('current')
hh3chgmpNTDPTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpNTDPTopHashIndex"), (0, "HH3C-HGMP-MIB", "hh3chgmpNTDPTopEdgeStartDevID"), (0, "HH3C-HGMP-MIB", "hh3chgmpNTDPTopEdgeIndex"))
if mibBuilder.loadTexts: hh3chgmpNTDPTopEntry.setStatus('current')
hh3chgmpNTDPTopHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTopHashIndex.setStatus('current')
hh3chgmpNTDPTopEdgeStartDevID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeStartDevID.setStatus('current')
hh3chgmpNTDPTopEdgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeIndex.setStatus('current')
hh3chgmpNTDPTopEdgeEndDevID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeEndDevID.setStatus('current')
hh3chgmpNTDPTopEdgeStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeStartPort.setStatus('current')
hh3chgmpNTDPTopEdgeStartPortFullDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1))).clone('half')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeStartPortFullDuplex.setStatus('current')
hh3chgmpNTDPTopEdgeStartPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeStartPortSpeed.setStatus('current')
hh3chgmpNTDPTopEdgeEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeEndPort.setStatus('current')
hh3chgmpNTDPTopLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("blocking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTopLinkStatus.setStatus('current')
hh3chgmpStackEventsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 0))
if mibBuilder.loadTexts: hh3chgmpStackEventsV2.setStatus('current')
hh3chgmpStackMemberfailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 0, 1)).setObjects(("HH3C-HGMP-MIB", "hh3chgmpStackMemberDeviceId"))
if mibBuilder.loadTexts: hh3chgmpStackMemberfailure.setStatus('current')
hh3chgmpStackMemberRecover = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 0, 2)).setObjects(("HH3C-HGMP-MIB", "hh3chgmpStackMemberDeviceId"))
if mibBuilder.loadTexts: hh3chgmpStackMemberRecover.setStatus('current')
hh3chgmpStackMemberStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 0, 3)).setObjects(("HH3C-HGMP-MIB", "hh3chgmpStackMemberDeviceId"), ("HH3C-HGMP-MIB", "hh3chgmpNTDPCacheClusterRole"))
if mibBuilder.loadTexts: hh3chgmpStackMemberStatusChange.setStatus('current')
mibBuilder.exportSymbols("HH3C-HGMP-MIB", hh3chgmpNTDPTopEdgeStartPortSpeed=hh3chgmpNTDPTopEdgeStartPortSpeed, hh3cNDPPortNbHardVer=hh3cNDPPortNbHardVer, hh3chgmpBlacklistEntry=hh3chgmpBlacklistEntry, hh3chgmpMemberEraseflash=hh3chgmpMemberEraseflash, hh3chgmpStackIpPoolLength=hh3chgmpStackIpPoolLength, hh3cNDPObject=hh3cNDPObject, hh3chgmpMemberDevId=hh3chgmpMemberDevId, hh3chgmpBlacklistTable=hh3chgmpBlacklistTable, hh3chgmpBlacklistAccessPortName=hh3chgmpBlacklistAccessPortName, hh3chgmpNTDPCacheChange=hh3chgmpNTDPCacheChange, hh3chgmpNTDPCacheTable=hh3chgmpNTDPCacheTable, hh3chgmpStackMemberPlatform=hh3chgmpStackMemberPlatform, hh3chgmpNTDPTopEdgeStartDevID=hh3chgmpNTDPTopEdgeStartDevID, hh3chgmpMngPriIpSegCMIP=hh3chgmpMngPriIpSegCMIP, hh3chgmpWhitelistEntry=hh3chgmpWhitelistEntry, hh3chgmpStackRole=hh3chgmpStackRole, hh3chgmpNTDPCacheEntry=hh3chgmpNTDPCacheEntry, hh3chgmpGrpMemberEntry=hh3chgmpGrpMemberEntry, hh3chgmpNTDPPortDelay=hh3chgmpNTDPPortDelay, hh3chgmpClusterRole=hh3chgmpClusterRole, hh3cNDPIfIndex=hh3cNDPIfIndex, hh3chgmpWhitelistPortName=hh3chgmpWhitelistPortName, hh3chgmpStackMemberName=hh3chgmpStackMemberName, hh3chgmpStackMemberEntry=hh3chgmpStackMemberEntry, hh3chgmpNTDPHopRange=hh3chgmpNTDPHopRange, hh3cNDPPortNbBootromVer=hh3cNDPPortNbBootromVer, hh3chgmpNTDPTopEntry=hh3chgmpNTDPTopEntry, hh3chgmpNTDPCacheCapabilities=hh3chgmpNTDPCacheCapabilities, hh3cStackObject=hh3cStackObject, hh3chgmpWhitelistRowStatus=hh3chgmpWhitelistRowStatus, hh3chgmpStackMemberDisconCount=hh3chgmpStackMemberDisconCount, hh3cNDPPortStatus=hh3cNDPPortStatus, hh3cNDPPortNbProductVer=hh3cNDPPortNbProductVer, hh3chgmpWhitelistDeviceId=hh3chgmpWhitelistDeviceId, hh3chgmpNTDPTopEdgeEndDevID=hh3chgmpNTDPTopEdgeEndDevID, hh3chgmpStackIpPoolMask=hh3chgmpStackIpPoolMask, hh3chgmpMemberPriPortProtoDescr=hh3chgmpMemberPriPortProtoDescr, hh3chgmpMemberResetMAC=hh3chgmpMemberResetMAC, hh3chgmpGrpMemberDisconCount=hh3chgmpGrpMemberDisconCount, hh3chgmpStackMaxPoolNum=hh3chgmpStackMaxPoolNum, hh3cNDPPortNbPortMode=hh3cNDPPortNbPortMode, hh3chgmpStackEventsV2=hh3chgmpStackEventsV2, hh3chgmpMemberDisconRate=hh3chgmpMemberDisconRate, hh3chgmpMemberStatusChange=hh3chgmpMemberStatusChange, hh3chgmpNTDPCacheHashIndex=hh3chgmpNTDPCacheHashIndex, hh3chgmpNTDPTopEdgeStartPort=hh3chgmpNTDPTopEdgeStartPort, hh3chgmpMemberPriPortNum=hh3chgmpMemberPriPortNum, hh3chgmpRun=hh3chgmpRun, hh3chgmpNTDPCollectTopTime=hh3chgmpNTDPCollectTopTime, hh3chgmpMemberResetTable=hh3chgmpMemberResetTable, hh3chgmpStackMemberTable=hh3chgmpStackMemberTable, hh3chgmpMemberRecover=hh3chgmpMemberRecover, hh3chgmpBlacklistAccessDeviceId=hh3chgmpBlacklistAccessDeviceId, hh3chgmpSetVLANSecurity=hh3chgmpSetVLANSecurity, hh3cNDPStatus=hh3cNDPStatus, hh3cNDPPortTable=hh3cNDPPortTable, PYSNMP_MODULE_ID=hh3cHgmp, hh3chgmpMemberfailure=hh3chgmpMemberfailure, hh3chgmpNTDPCacheDeviceID=hh3chgmpNTDPCacheDeviceID, hh3chgmpEventsV2=hh3chgmpEventsV2, hh3chgmpGrpMemberDeviceId=hh3chgmpGrpMemberDeviceId, hh3chgmpStackMemberIpAddr=hh3chgmpStackMemberIpAddr, hh3chgmpStackMainSwMac=hh3chgmpStackMainSwMac, hh3cNDPPortNbTable=hh3cNDPPortNbTable, hh3chgmpMngPriIpMask=hh3chgmpMngPriIpMask, hh3chgmpGrpMemberIpAddr=hh3chgmpGrpMemberIpAddr, hh3chgmpGrpMemberTable=hh3chgmpGrpMemberTable, hh3cNDPHelloTimer=hh3cNDPHelloTimer, hh3chgmpNTDPCacheVersion=hh3chgmpNTDPCacheVersion, hh3chgmpSnmpHost=hh3chgmpSnmpHost, hh3chgmpCmdClusterName=hh3chgmpCmdClusterName, hh3chgmpGrpMemberEnrollTime=hh3chgmpGrpMemberEnrollTime, hh3cNDPPortEntry=hh3cNDPPortEntry, hh3chgmpNTDPInterfaceIfIndex=hh3chgmpNTDPInterfaceIfIndex, hh3chgmpWhitelistNbIndex=hh3chgmpWhitelistNbIndex, hh3chgmpStackMemberDisconRate=hh3chgmpStackMemberDisconRate, hh3chgmpCmdLanswitchFlag=hh3chgmpCmdLanswitchFlag, hh3chgmpFtpServer=hh3chgmpFtpServer, hh3chgmpNTDPTopTable=hh3chgmpNTDPTopTable, hh3chgmpStackMemberfailure=hh3chgmpStackMemberfailure, hh3chgmpNTDPTopEdgeIndex=hh3chgmpNTDPTopEdgeIndex, hh3chgmpWhitelistNbEntry=hh3chgmpWhitelistNbEntry, hh3cNDPPortNbPortName=hh3cNDPPortNbPortName, hh3chgmpNTDPInterfaceEnable=hh3chgmpNTDPInterfaceEnable, hh3chgmpProtocolMac=hh3chgmpProtocolMac, hh3chgmpWhitelistNbDeviceId=hh3chgmpWhitelistNbDeviceId, hh3chgmpWhitelistNbPortName=hh3chgmpWhitelistNbPortName, hh3chgmpWhitelistSerial=hh3chgmpWhitelistSerial, hh3chgmpNTDPLastTopCollectDuration=hh3chgmpNTDPLastTopCollectDuration, hh3chgmpNTDPInterfaceEntry=hh3chgmpNTDPInterfaceEntry, hh3chgmpStackMemberPassword=hh3chgmpStackMemberPassword, hh3chgmpNTDPTopEdgeEndPort=hh3chgmpNTDPTopEdgeEndPort, hh3chgmpHandShakeInterval=hh3chgmpHandShakeInterval, hh3chgmpStackMemberDeviceId=hh3chgmpStackMemberDeviceId, hh3chgmpNTDPCacheClusterName=hh3chgmpNTDPCacheClusterName, hh3cNDPAgingTime=hh3cNDPAgingTime, hh3chgmpNTDPHopDelay=hh3chgmpNTDPHopDelay, hh3chgmpStackMemberStatusChange=hh3chgmpStackMemberStatusChange, hh3cHgmp=hh3cHgmp, hh3chgmpMainLanswitchFlag=hh3chgmpMainLanswitchFlag, hh3chgmpStackMemberEnrollTime=hh3chgmpStackMemberEnrollTime, hh3cNDPPortNbDeviceName=hh3cNDPPortNbDeviceName, hh3chgmpNTDPTOPTableChange=hh3chgmpNTDPTOPTableChange, hh3chgmpStackMemberRecover=hh3chgmpStackMemberRecover, hh3cNDPPortNbEntry=hh3cNDPPortNbEntry, hh3chgmpGrpMemberPassword=hh3chgmpGrpMemberPassword, hh3chgmpHandShakeHoldtime=hh3chgmpHandShakeHoldtime, hh3chgmpMemberPriPortTable=hh3chgmpMemberPriPortTable, hh3chgmpMemberPriPortProto=hh3chgmpMemberPriPortProto, hh3chgmpClusterCmdSwMac=hh3chgmpClusterCmdSwMac, hh3chgmpStackMemberStatus=hh3chgmpStackMemberStatus, hh3cClusterObject=hh3cClusterObject, hh3chgmpNetTopChange=hh3chgmpNetTopChange, hh3chgmpGrpMemberOperate=hh3chgmpGrpMemberOperate, hh3cNDPChange=hh3cNDPChange, hh3chgmpNTDPRun=hh3chgmpNTDPRun, hh3chgmpGrpMemberTableChange=hh3chgmpGrpMemberTableChange, hh3cNDPPortNbSoftVer=hh3cNDPPortNbSoftVer, hh3chgmpStackMemberSerial=hh3chgmpStackMemberSerial, hh3chgmpStackIpPoolStartIP=hh3chgmpStackIpPoolStartIP, hh3chgmpStackMemberTableChange=hh3chgmpStackMemberTableChange, hh3chgmpNTDPCacheHop=hh3chgmpNTDPCacheHop, hh3chgmpLogHost=hh3chgmpLogHost, hh3cNTDPObject=hh3cNTDPObject, hh3chgmpTftpServer=hh3chgmpTftpServer, hh3chgmpMemberPriPortEntry=hh3chgmpMemberPriPortEntry, hh3chgmpWhitelistNbTable=hh3chgmpWhitelistNbTable, hh3cNDPPortNbDeviceId=hh3cNDPPortNbDeviceId, hh3chgmpNTDPTopLinkStatus=hh3chgmpNTDPTopLinkStatus, hh3chgmpNTDPInterfaceTable=hh3chgmpNTDPInterfaceTable, hh3chgmpBlacklistRowStatus=hh3chgmpBlacklistRowStatus, hh3chgmpTopologyManagement=hh3chgmpTopologyManagement, hh3chgmpWhitelistTable=hh3chgmpWhitelistTable, hh3chgmpNTDPTopHashIndex=hh3chgmpNTDPTopHashIndex, hh3chgmpGrpMemberName=hh3chgmpGrpMemberName, hh3chgmpNTDPCacheMngVLAN=hh3chgmpNTDPCacheMngVLAN, hh3chgmpBlacklistDeviceId=hh3chgmpBlacklistDeviceId, hh3chgmpClusterProtocolMac=hh3chgmpClusterProtocolMac, hh3chgmpGrpMemberSerial=hh3chgmpGrpMemberSerial, hh3cNDPPortNbAgingtime=hh3cNDPPortNbAgingtime, hh3chgmpGrpMemberStatus=hh3chgmpGrpMemberStatus, hh3chgmpNTDPCachePlatform=hh3chgmpNTDPCachePlatform, hh3chgmpNTDPCacheClusterRole=hh3chgmpNTDPCacheClusterRole, hh3chgmpMemberResetEntry=hh3chgmpMemberResetEntry, hh3chgmpGrpMemberPlatform=hh3chgmpGrpMemberPlatform, hh3chgmpClusterMaxPoolNum=hh3chgmpClusterMaxPoolNum, hh3chgmpNTDPTopEdgeStartPortFullDuplex=hh3chgmpNTDPTopEdgeStartPortFullDuplex)
