#
# PySNMP MIB module DLINK-3100-QOS-CLI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLINK-3100-QOS-CLI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:33:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
Percents, rnd = mibBuilder.importSymbols("DLINK-3100-MIB", "Percents", "rnd")
StatisticsClearActionType, StatisticsDPType = mibBuilder.importSymbols("DLINK-3100-POLICY-MIB", "StatisticsClearActionType", "StatisticsDPType")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, Bits, IpAddress, ModuleIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, MibIdentifier, ObjectIdentity, Gauge32, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "Bits", "IpAddress", "ModuleIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "MibIdentifier", "ObjectIdentity", "Gauge32", "Counter32", "TimeTicks")
DisplayString, TextualConvention, RowStatus, TruthValue, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "TruthValue", "RowPointer")
rlQosCliMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88))
rlQosCliMib.setRevisions(('2006-02-12 00:00', '2006-02-12 00:00', '2005-03-14 00:00', '2005-02-07 00:00', '2005-01-27 00:00', '2004-11-15 00:00', '2003-09-29 00:00', '2003-09-21 00:00', '2005-04-17 00:00',))
if mibBuilder.loadTexts: rlQosCliMib.setLastUpdated('200604040000Z')
if mibBuilder.loadTexts: rlQosCliMib.setOrganization('Dlink, Inc.')
class ClassOffsetType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("packetStart", 1), ("layer2-start", 2), ("mpls-start", 3), ("layer3-start", 4), ("layer4-start", 5), ("layer5-start", 6), ("vlan", 7), ("in-port", 8), ("out-port", 9), ("vpt", 10), ("ethertype", 11), ("inner-vlan", 12), ("layer3-ipv6-start", 13))

class ClassTupleType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("protocol", 1), ("ip-src", 2), ("ip-dest", 3), ("dscp", 4), ("ip-precedence", 5), ("udp-port-src", 6), ("udp-port-dest", 7), ("tcp-port-src", 8), ("tcp-port-dest", 9), ("mac-src", 10), ("mac-dest", 11), ("vlan", 12), ("in-port", 13), ("out-port", 14), ("general", 15), ("vpt", 16), ("ether-type", 17), ("tcp-flags", 18), ("icmp-type", 19), ("icmp-code", 20), ("igmp-type", 21), ("inner-vlan", 22), ("ipv6-src", 23), ("ipv6-dest", 24))

class AceActionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("permit", 1), ("deny", 2), ("deny-DisablePort", 3))

class AceObjectType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("ip", 1), ("ip-TCP", 2), ("ip-UDP", 3), ("ip-Offset", 4), ("mac", 5), ("mac-Offset", 6), ("ip-ICMP", 7), ("ip-IGMP", 8), ("ipv6", 9), ("ipv6-TCP", 10), ("ipv6-UDP", 11), ("ipv6-Offset", 12), ("ipv6-ICMP", 13))

class AclObjectType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("mac", 1), ("ip", 2), ("ipv6", 3))

class ClassMapType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("matchAll", 1), ("matchAny", 2))

class ClassMapAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("none", 1), ("setIP-Precedence", 2), ("setDSCP", 3), ("setQueue", 4), ("setCos", 5), ("trustCos", 6), ("trustDSCP", 7), ("trustTCP-UDPport", 8), ("trustCosDscp", 9))

class PolicerType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("single", 1), ("aggregate", 2), ("cascade", 3))

class PolicerAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("drop", 2), ("remark", 3), ("explicit-remark", 4), ("cascadePointer", 5))

class QosObjectMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("disable", 1), ("basic", 2), ("advance", 3), ("service", 4))

class QosObjectBasicMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("vpt", 2), ("dscp", 3), ("dscp-mutation", 4), ("tcp-udp", 5))

class BinaryStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disable", 1), ("enable", 2))

class QueueType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ef", 1), ("wrr", 2))

class AclDefaultAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("deny-all", 1), ("forward-all", 2))

class InterfaceType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("vlan", 1), ("port", 2))

class StatisticsCntrNumOfBitsType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(32, 48, 64))
    namedValues = NamedValues(("uint32", 32), ("uint48", 48), ("uint64", 64))

class StatisticsCntrType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("statisticsCntrTypeSetDSCP", 1), ("statisticsCntrTypeDeny", 2))

class RlQosTimeBasedAclWeekPeriodicList(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("monday", 0), ("tuesday", 1), ("wednesday", 2), ("thursday", 3), ("friday", 4), ("saturday", 5), ("sunday", 6))

rlQosCliQosMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 1), QosObjectMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosCliQosMode.setStatus('current')
rlQosCliBasicModeCfg = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 2), QosObjectBasicMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosCliBasicModeCfg.setStatus('current')
rlQosMaxNumOfAce = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosMaxNumOfAce.setStatus('current')
rlQosOffsetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 4), )
if mibBuilder.loadTexts: rlQosOffsetTable.setStatus('deprecated')
rlQosOffsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 4, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosOffsetIndex"))
if mibBuilder.loadTexts: rlQosOffsetEntry.setStatus('deprecated')
rlQosOffsetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosOffsetIndex.setStatus('deprecated')
rlQosOffsetType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 4, 1, 2), ClassOffsetType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosOffsetType.setStatus('deprecated')
rlQosOffsetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 4, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosOffsetValue.setStatus('deprecated')
rlQosOffsetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosOffsetMask.setStatus('deprecated')
rlQosOffsetPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosOffsetPattern.setStatus('deprecated')
rlQosOffsetTuplePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 4, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosOffsetTuplePointer.setStatus('deprecated')
rlQosOffsetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosOffsetStatus.setStatus('deprecated')
rlQosTupleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 5), )
if mibBuilder.loadTexts: rlQosTupleTable.setStatus('current')
rlQosTupleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 5, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosTupleIndex"))
if mibBuilder.loadTexts: rlQosTupleEntry.setStatus('current')
rlQosTupleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosTupleIndex.setStatus('current')
rlQosTupleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 5, 1, 2), ClassTupleType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTupleType.setStatus('current')
rlQosTupleValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 5, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTupleValue1.setStatus('current')
rlQosTupleValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTupleValue2.setStatus('current')
rlQosTupleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTupleStatus.setStatus('current')
rlQosAceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6), )
if mibBuilder.loadTexts: rlQosAceTable.setStatus('current')
rlQosAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosAceIndex"))
if mibBuilder.loadTexts: rlQosAceEntry.setStatus('current')
rlQosAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosAceIndex.setStatus('current')
rlQosAceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 2), AceActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceAction.setStatus('current')
rlQosAceType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 3), AceObjectType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceType.setStatus('current')
rlQosAceTuple1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTuple1.setStatus('current')
rlQosAceTuple2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTuple2.setStatus('current')
rlQosAceTuple3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTuple3.setStatus('current')
rlQosAceTuple4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTuple4.setStatus('current')
rlQosAceTuple5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTuple5.setStatus('current')
rlQosAceTuple6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTuple6.setStatus('current')
rlQosAceTuple7 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTuple7.setStatus('current')
rlQosAceTuple8 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTuple8.setStatus('current')
rlQosAceAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 12), BinaryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceAccount.setStatus('current')
rlQosAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 6, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceStatus.setStatus('current')
rlQosAclTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 7), )
if mibBuilder.loadTexts: rlQosAclTable.setStatus('current')
rlQosAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 7, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosAclIndex"))
if mibBuilder.loadTexts: rlQosAclEntry.setStatus('current')
rlQosAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosAclIndex.setStatus('current')
rlQosAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAclName.setStatus('current')
rlQosAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 7, 1, 3), AclObjectType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAclType.setStatus('current')
rlQosAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAclStatus.setStatus('current')
rlQosAclAceRefTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 8), )
if mibBuilder.loadTexts: rlQosAclAceRefTable.setStatus('current')
rlQosAclAceRefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 8, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosAclAceRefAcePointer"))
if mibBuilder.loadTexts: rlQosAclAceRefEntry.setStatus('current')
rlQosAclAceRefAcePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosAclAceRefAcePointer.setStatus('current')
rlQosAclAceRefAclPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 8, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAclAceRefAclPointer.setStatus('current')
rlQosAclAceRefStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAclAceRefStatus.setStatus('current')
rlQosClassMapTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9), )
if mibBuilder.loadTexts: rlQosClassMapTable.setStatus('current')
rlQosClassMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosClassMapIndex"))
if mibBuilder.loadTexts: rlQosClassMapEntry.setStatus('current')
rlQosClassMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosClassMapIndex.setStatus('current')
rlQosClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapName.setStatus('current')
rlQosClassMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 3), ClassMapType().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapType.setStatus('current')
rlQosClassMapAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 4), ClassMapAction().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapAction.setStatus('current')
rlQosClassMapMarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapMarkValue.setStatus('current')
rlQosClassMapPolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapPolicer.setStatus('current')
rlQosClassMapMatch1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapMatch1.setStatus('current')
rlQosClassMapMatch2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapMatch2.setStatus('current')
rlQosClassMapMarkVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 9), BinaryStatus().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapMarkVlan.setStatus('current')
rlQosClassMapNewVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapNewVlan.setStatus('current')
rlQosClassMapNewPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapNewPort.setStatus('current')
rlQosClassMapCopyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapCopyPort.setStatus('current')
rlQosClassMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapStatus.setStatus('current')
rlQosClassMapMatch3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 9, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosClassMapMatch3.setStatus('current')
rlQosPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10), )
if mibBuilder.loadTexts: rlQosPolicerTable.setStatus('current')
rlQosPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosPolicerIndex"))
if mibBuilder.loadTexts: rlQosPolicerEntry.setStatus('current')
rlQosPolicerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosPolicerIndex.setStatus('current')
rlQosPolicerName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicerName.setStatus('current')
rlQosPolicerType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10, 1, 3), PolicerType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicerType.setStatus('current')
rlQosPolicerCir = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10, 1, 4), Unsigned32()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicerCir.setStatus('current')
rlQosPolicerCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10, 1, 5), Unsigned32()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicerCbs.setStatus('current')
rlQosPolicerAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10, 1, 6), PolicerAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicerAction.setStatus('current')
rlQosPolicerCasPointerRemVal = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicerCasPointerRemVal.setStatus('current')
rlQosPolicerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 10, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicerStatus.setStatus('current')
rlQosPolicyMapTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 11), )
if mibBuilder.loadTexts: rlQosPolicyMapTable.setStatus('current')
rlQosPolicyMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 11, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosPolicyMapIndex"))
if mibBuilder.loadTexts: rlQosPolicyMapEntry.setStatus('current')
rlQosPolicyMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosPolicyMapIndex.setStatus('current')
rlQosPolicyMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicyMapName.setStatus('current')
rlQosPolicyMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicyMapStatus.setStatus('current')
rlQosPolicyClassRefTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 12), )
if mibBuilder.loadTexts: rlQosPolicyClassRefTable.setStatus('current')
rlQosPolicyClassRefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 12, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosPolicyClassRefClassPointer"))
if mibBuilder.loadTexts: rlQosPolicyClassRefEntry.setStatus('current')
rlQosPolicyClassRefClassPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosPolicyClassRefClassPointer.setStatus('current')
rlQosPolicyClassRefPolicyPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 12, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicyClassRefPolicyPointer.setStatus('current')
rlQosPolicyClassRefStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 12, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPolicyClassRefStatus.setStatus('current')
rlQosIfPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13), )
if mibBuilder.loadTexts: rlQosIfPolicyTable.setStatus('current')
rlQosIfPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlIfIndex"), (0, "DLINK-3100-QOS-CLI-MIB", "rlIfType"))
if mibBuilder.loadTexts: rlQosIfPolicyEntry.setStatus('current')
rlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 1), Integer32())
if mibBuilder.loadTexts: rlIfIndex.setStatus('current')
rlIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 2), InterfaceType())
if mibBuilder.loadTexts: rlIfType.setStatus('current')
rlQosIfPolicyMapPointerIn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfPolicyMapPointerIn.setStatus('current')
rlQosIfPolicyMapPointerOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfPolicyMapPointerOut.setStatus('current')
rlQosIfTrustActive = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 5), BinaryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfTrustActive.setStatus('current')
rlQosPortShaperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 6), BinaryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPortShaperStatus.setStatus('current')
rlQosCirPortShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 7), Integer32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirPortShaper.setStatus('current')
rlQosCbsPortShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 8), Integer32()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsPortShaper.setStatus('current')
rlQosIfProfilePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfProfilePointer.setStatus('current')
rlQosQueueProfilePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosQueueProfilePointer.setStatus('current')
rlQosQueueShapeProfilePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosQueueShapeProfilePointer.setStatus('current')
rlQosAclDefaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 12), AclDefaultAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAclDefaultAction.setStatus('current')
rlQosIfPolicyMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfPolicyMapStatus.setStatus('current')
rlQosIfAclIn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfAclIn.setStatus('current')
rlQosIfAclOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfAclOut.setStatus('current')
rlQosIfPolicerIn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfPolicerIn.setStatus('current')
rlQosPortRateLimitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 17), BinaryStatus().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPortRateLimitStatus.setStatus('current')
rlQosCirPortRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 18), Integer32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirPortRateLimit.setStatus('current')
rlQosCbsPortRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 19), Integer32()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsPortRateLimit.setStatus('current')
rlQosIfIpv6AclIn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 20), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfIpv6AclIn.setStatus('current')
rlQosIfIpv6AclOut = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 13, 1, 21), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfIpv6AclOut.setStatus('current')
rlQosIfProfileCfgTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14), )
if mibBuilder.loadTexts: rlQosIfProfileCfgTable.setStatus('current')
rlQosIfProfileCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlIfProfileName"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosQueueId"))
if mibBuilder.loadTexts: rlQosIfProfileCfgEntry.setStatus('current')
rlIfProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: rlIfProfileName.setStatus('current')
rlQosQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: rlQosQueueId.setStatus('current')
rlQosTdThersholdDp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTdThersholdDp0.setStatus('current')
rlQosTdThersholdDp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTdThersholdDp1.setStatus('current')
rlQosTdThersholdDp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTdThersholdDp2.setStatus('current')
rlQosRedMinDp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedMinDp0.setStatus('current')
rlQosRedMaxDp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedMaxDp0.setStatus('current')
rlQosRedProbDp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedProbDp0.setStatus('current')
rlQosRedMinDp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedMinDp1.setStatus('current')
rlQosRedMaxDp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedMaxDp1.setStatus('current')
rlQosRedProbDp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedProbDp1.setStatus('current')
rlQosRedMinDp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedMinDp2.setStatus('current')
rlQosRedMaxDp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedMaxDp2.setStatus('current')
rlQosRedProbDp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedProbDp2.setStatus('current')
rlQosRedQweight = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRedQweight.setStatus('current')
rlQosIfprofileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 14, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosIfprofileStatus.setStatus('current')
rlQosDscpMutationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 15), )
if mibBuilder.loadTexts: rlQosDscpMutationTable.setStatus('current')
rlQosDscpMutationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 15, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosOldDscp"))
if mibBuilder.loadTexts: rlQosDscpMutationEntry.setStatus('current')
rlQosOldDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: rlQosOldDscp.setStatus('current')
rlQosNewDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosNewDscp.setStatus('current')
rlQosDscpRemarkTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 16), )
if mibBuilder.loadTexts: rlQosDscpRemarkTable.setStatus('current')
rlQosDscpRemarkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 16, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosRmOldDscp"))
if mibBuilder.loadTexts: rlQosDscpRemarkEntry.setStatus('current')
rlQosRmOldDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: rlQosRmOldDscp.setStatus('current')
rlQosRmNewDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosRmNewDscp.setStatus('current')
rlQosCosQueueTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 17), )
if mibBuilder.loadTexts: rlQosCosQueueTable.setStatus('current')
rlQosCosQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 17, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosCosIndex"))
if mibBuilder.loadTexts: rlQosCosQueueEntry.setStatus('current')
rlQosCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: rlQosCosIndex.setStatus('current')
rlQosCosQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCosQueueId.setStatus('current')
rlQosDscpQueueTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 18), )
if mibBuilder.loadTexts: rlQosDscpQueueTable.setStatus('current')
rlQosDscpQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 18, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosDscpIndex"))
if mibBuilder.loadTexts: rlQosDscpQueueEntry.setStatus('current')
rlQosDscpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: rlQosDscpIndex.setStatus('current')
rlQosQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosQueueNum.setStatus('current')
rlQosTcpPortQueueTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 19), )
if mibBuilder.loadTexts: rlQosTcpPortQueueTable.setStatus('current')
rlQosTcpPortQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 19, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosTcpPort"))
if mibBuilder.loadTexts: rlQosTcpPortQueueEntry.setStatus('current')
rlQosTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 19, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosTcpPort.setStatus('current')
rlQosTcpQueueValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTcpQueueValue.setStatus('current')
rlQosTcpPortQueueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 19, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTcpPortQueueStatus.setStatus('current')
rlQosUdpPortQueueTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 20), )
if mibBuilder.loadTexts: rlQosUdpPortQueueTable.setStatus('current')
rlQosUdpPortQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 20, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosUdpPort"))
if mibBuilder.loadTexts: rlQosUdpPortQueueEntry.setStatus('current')
rlQosUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 20, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosUdpPort.setStatus('current')
rlQosUdpQueueValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosUdpQueueValue.setStatus('current')
rlQosUdpPortQueueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 20, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosUdpPortQueueStatus.setStatus('current')
rlQosEfManageTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 21), )
if mibBuilder.loadTexts: rlQosEfManageTable.setStatus('current')
rlQosEfManageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 21, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosEfQueueId"))
if mibBuilder.loadTexts: rlQosEfManageEntry.setStatus('current')
rlQosEfQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: rlQosEfQueueId.setStatus('current')
rlQosEfState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 21, 1, 2), BinaryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosEfState.setStatus('current')
rlQosEfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosEfPriority.setStatus('current')
rlQosQueueProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22), )
if mibBuilder.loadTexts: rlQosQueueProfileTable.setStatus('current')
rlQosQueueProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQueueProfileName"))
if mibBuilder.loadTexts: rlQosQueueProfileEntry.setStatus('current')
rlQueueProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: rlQueueProfileName.setStatus('current')
rlQosTypeQueue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 2), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTypeQueue1.setStatus('current')
rlQosValueQueue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosValueQueue1.setStatus('current')
rlQosTypeQueue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 4), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTypeQueue2.setStatus('current')
rlQosValueQueue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosValueQueue2.setStatus('current')
rlQosTypeQueue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 6), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTypeQueue3.setStatus('current')
rlQosValueQueue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosValueQueue3.setStatus('current')
rlQosTypeQueue4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 8), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTypeQueue4.setStatus('current')
rlQosValueQueue4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosValueQueue4.setStatus('current')
rlQosTypeQueue5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 10), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTypeQueue5.setStatus('current')
rlQosValueQueue5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosValueQueue5.setStatus('current')
rlQosTypeQueue6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 12), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTypeQueue6.setStatus('current')
rlQosValueQueue6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosValueQueue6.setStatus('current')
rlQosTypeQueue7 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 14), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTypeQueue7.setStatus('current')
rlQosValueQueue7 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosValueQueue7.setStatus('current')
rlQosTypeQueue8 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 16), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosTypeQueue8.setStatus('current')
rlQosValueQueue8 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosValueQueue8.setStatus('current')
rlQosQueueProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosQueueProfileStatus.setStatus('current')
rlQosNumOfIfConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 22, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosNumOfIfConnections.setStatus('current')
rlQosQueueShapeProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23), )
if mibBuilder.loadTexts: rlQosQueueShapeProfileTable.setStatus('current')
rlQosQueueShapeProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosQueueShapeIndex"))
if mibBuilder.loadTexts: rlQosQueueShapeProfileEntry.setStatus('current')
rlQosQueueShapeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosQueueShapeIndex.setStatus('current')
rlQosCirQueue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirQueue1.setStatus('current')
rlQosCbsQueue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsQueue1.setStatus('current')
rlQosCirQueue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirQueue2.setStatus('current')
rlQosCbsQueue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsQueue2.setStatus('current')
rlQosCirQueue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirQueue3.setStatus('current')
rlQosCbsQueue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsQueue3.setStatus('current')
rlQosCirQueue4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirQueue4.setStatus('current')
rlQosCbsQueue4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsQueue4.setStatus('current')
rlQosCirQueue5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirQueue5.setStatus('current')
rlQosCbsQueue5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsQueue5.setStatus('current')
rlQosCirQueue6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirQueue6.setStatus('current')
rlQosCbsQueue6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsQueue6.setStatus('current')
rlQosCirQueue7 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirQueue7.setStatus('current')
rlQosCbsQueue7 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsQueue7.setStatus('current')
rlQosCirQueue8 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCirQueue8.setStatus('current')
rlQosCbsQueue8 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosCbsQueue8.setStatus('current')
rlQosQueueShapeProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 23, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosQueueShapeProfileStatus.setStatus('current')
rlQosAclCounterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 24), )
if mibBuilder.loadTexts: rlQosAclCounterTable.setStatus('current')
rlQosAclCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 24, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosAclCounterInterface"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosAclCounterAclIndex"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosAclCounterAceIndex"))
if mibBuilder.loadTexts: rlQosAclCounterEntry.setStatus('current')
rlQosAclCounterInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 24, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosAclCounterInterface.setStatus('current')
rlQosAclCounterAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 24, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosAclCounterAclIndex.setStatus('current')
rlQosAclCounterAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 24, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosAclCounterAceIndex.setStatus('current')
rlQosAclCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 24, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosAclCounterValue.setStatus('current')
rlQosFreeIndexesTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 25), )
if mibBuilder.loadTexts: rlQosFreeIndexesTable.setStatus('current')
rlQosFreeIndexesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 25, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosFreeIndexesTableId"))
if mibBuilder.loadTexts: rlQosFreeIndexesEntry.setStatus('current')
rlQosFreeIndexesTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tuple", 1), ("offset", 2), ("ace", 3), ("acl", 4), ("class", 5), ("policy", 6), ("policer", 7), ("shaper", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosFreeIndexesTableId.setStatus('current')
rlQosFreeIndexesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosFreeIndexesValue.setStatus('current')
rlQosNamesToIndexesTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 26), )
if mibBuilder.loadTexts: rlQosNamesToIndexesTable.setStatus('current')
rlQosNamesToIndexesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 26, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosNamesToIndexesTableId"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosNamesToIndexesName"))
if mibBuilder.loadTexts: rlQosNamesToIndexesEntry.setStatus('current')
rlQosNamesToIndexesTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("acl", 1), ("class", 2), ("policy", 3), ("policer", 4))))
if mibBuilder.loadTexts: rlQosNamesToIndexesTableId.setStatus('current')
rlQosNamesToIndexesName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 26, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: rlQosNamesToIndexesName.setStatus('current')
rlQosNamesToIndexesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 26, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosNamesToIndexesValue.setStatus('current')
rlQosStackControlQueue = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosStackControlQueue.setStatus('current')
rlQosStackControlCos = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosStackControlCos.setStatus('current')
rlQosCosQueueDefaultMapTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 29), )
if mibBuilder.loadTexts: rlQosCosQueueDefaultMapTable.setStatus('current')
rlQosCosQueueDefaultMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 29, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosCosQueueDefaultMapVpt"))
if mibBuilder.loadTexts: rlQosCosQueueDefaultMapEntry.setStatus('current')
rlQosCosQueueDefaultMapVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosCosQueueDefaultMapVpt.setStatus('current')
rlQosCosQueueDefaultMapQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 29, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosCosQueueDefaultMapQueueId.setStatus('current')
rlQosPredefBlockAclTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 30), )
if mibBuilder.loadTexts: rlQosPredefBlockAclTable.setStatus('current')
rlQosPredefBlockAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 30, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosPredefBlockAclIfIndex"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosPredefBlockAclIfType"))
if mibBuilder.loadTexts: rlQosPredefBlockAclEntry.setStatus('current')
rlQosPredefBlockAclIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 30, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlQosPredefBlockAclIfIndex.setStatus('current')
rlQosPredefBlockAclIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 30, 1, 2), InterfaceType())
if mibBuilder.loadTexts: rlQosPredefBlockAclIfType.setStatus('current')
rlQosPredefBlockAclMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 30, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPredefBlockAclMask.setStatus('current')
rlQosPredefBlockAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 30, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosPredefBlockAclStatus.setStatus('current')
rlQosAceTidxTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31), )
if mibBuilder.loadTexts: rlQosAceTidxTable.setStatus('current')
rlQosAceTidxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosAceTidxAclIndex"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosAceTidxIndex"))
if mibBuilder.loadTexts: rlQosAceTidxEntry.setStatus('current')
rlQosAceTidxAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosAceTidxAclIndex.setStatus('current')
rlQosAceTidxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 2), Integer32())
if mibBuilder.loadTexts: rlQosAceTidxIndex.setStatus('current')
rlQosAceTidxAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 3), AceActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxAction.setStatus('current')
rlQosAceTidxType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 4), AceObjectType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxType.setStatus('current')
rlQosAceTidxTuple1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxTuple1.setStatus('current')
rlQosAceTidxTuple2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxTuple2.setStatus('current')
rlQosAceTidxTuple3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxTuple3.setStatus('current')
rlQosAceTidxTuple4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxTuple4.setStatus('current')
rlQosAceTidxTuple5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxTuple5.setStatus('current')
rlQosAceTidxTuple6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxTuple6.setStatus('current')
rlQosAceTidxTuple7 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxTuple7.setStatus('current')
rlQosAceTidxTuple8 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxTuple8.setStatus('current')
rlQosAceTidxAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 13), BinaryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxAccount.setStatus('current')
rlQosAceTidxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxStatus.setStatus('current')
rlQosAceTidxTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosAceTidxTimeRange.setStatus('current')
rlQosAceTidxTimeRangeIsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 31, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosAceTidxTimeRangeIsActive.setStatus('current')
rlQosMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosMibVersion.setStatus('current')
rlQosDscpQueueDefaultMapTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 33), )
if mibBuilder.loadTexts: rlQosDscpQueueDefaultMapTable.setStatus('current')
rlQosDscpQueueDefaultMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 33, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosDscpQueueDefaultMapDscp"))
if mibBuilder.loadTexts: rlQosDscpQueueDefaultMapEntry.setStatus('current')
rlQosDscpQueueDefaultMapDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosDscpQueueDefaultMapDscp.setStatus('current')
rlQosDscpQueueDefaultMapQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 33, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosDscpQueueDefaultMapQueueId.setStatus('current')
rlQosDscpToDpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 34), )
if mibBuilder.loadTexts: rlQosDscpToDpTable.setStatus('current')
rlQosDscpToDpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 34, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosDscp"))
if mibBuilder.loadTexts: rlQosDscpToDpEntry.setStatus('current')
rlQosDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: rlQosDscp.setStatus('current')
rlQosDp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 34, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlQosDp.setStatus('current')
rlQosStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35))
rlQosPortPolicyStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 1), )
if mibBuilder.loadTexts: rlQosPortPolicyStatisticsTable.setStatus('current')
rlQosPortPolicyStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 1, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlIfIndex"), (0, "DLINK-3100-QOS-CLI-MIB", "rlIfType"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosPortPolicyStatisticsCntrType"))
if mibBuilder.loadTexts: rlQosPortPolicyStatisticsEntry.setStatus('current')
rlQosPortPolicyStatisticsCntrType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 1, 1, 1), StatisticsCntrType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosPortPolicyStatisticsCntrType.setStatus('current')
rlQosPortPolicyStatisticsCntrNumOfBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 1, 1, 2), StatisticsCntrNumOfBitsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosPortPolicyStatisticsCntrNumOfBits.setStatus('current')
rlQosPortPolicyStatisticsEnableCounting = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosPortPolicyStatisticsEnableCounting.setStatus('current')
rlQosPortPolicyStatisticsCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosPortPolicyStatisticsCounterValue.setStatus('current')
rlQosSinglePolicerStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 2), )
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsTable.setStatus('current')
rlQosSinglePolicerStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 2, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlIfIndex"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosPolicerIndex"))
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsEntry.setStatus('current')
rlQosSinglePolicerStatisticsInProfileCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsInProfileCounterValue.setStatus('current')
rlQosSinglePolicerStatisticsInProfileCntrNumOfBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 2, 1, 2), StatisticsCntrNumOfBitsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsInProfileCntrNumOfBits.setStatus('current')
rlQosSinglePolicerStatisticsOutProfileCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsOutProfileCounterValue.setStatus('current')
rlQosSinglePolicerStatisticsOutProfileCntrNumOfBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 2, 1, 4), StatisticsCntrNumOfBitsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsOutProfileCntrNumOfBits.setStatus('current')
rlQosSinglePolicerStatisticsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosSinglePolicerStatisticsStatus.setStatus('current')
rlQosAggregatePolicerStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 3), )
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsTable.setStatus('current')
rlQosAggregatePolicerStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 3, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosPolicerIndex"))
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsEntry.setStatus('current')
rlQosAggregatePolicerStatisticsInProfileCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsInProfileCounterValue.setStatus('current')
rlQosAggregatePolicerStatisticsInProfileCntrNumOfBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 3, 1, 2), StatisticsCntrNumOfBitsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsInProfileCntrNumOfBits.setStatus('current')
rlQosAggregatePolicerStatisticsOutProfileCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsOutProfileCounterValue.setStatus('current')
rlQosAggregatePolicerStatisticsOutProfileCntrNumOfBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 3, 1, 4), StatisticsCntrNumOfBitsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsOutProfileCntrNumOfBits.setStatus('current')
rlQosAggregatePolicerStatisticsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosAggregatePolicerStatisticsStatus.setStatus('current')
rlQosOutQueueStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4), )
if mibBuilder.loadTexts: rlQosOutQueueStatisticsTable.setStatus('current')
rlQosOutQueueStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosOutQueueStatisticsCountrID"))
if mibBuilder.loadTexts: rlQosOutQueueStatisticsEntry.setStatus('current')
rlQosOutQueueStatisticsCountrID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsCountrID.setStatus('current')
rlQosOutQueueStatisticsIfIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsIfIndexList.setStatus('current')
rlQosOutQueueStatisticsPortAll = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsPortAll.setStatus('current')
rlQosOutQueueStatisticsVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsVlan.setStatus('current')
rlQosOutQueueStatisticsVlanAll = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsVlanAll.setStatus('current')
rlQosOutQueueStatisticsQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsQueue.setStatus('current')
rlQosOutQueueStatisticsQueueAll = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsQueueAll.setStatus('current')
rlQosOutQueueStatisticsDP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 8), StatisticsDPType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsDP.setStatus('current')
rlQosOutQueueStatisticsDPAll = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsDPAll.setStatus('current')
rlQosOutQueueStatisticsCounterTailDropValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsCounterTailDropValue.setStatus('current')
rlQosOutQueueStatisticsCounterAllValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsCounterAllValue.setStatus('current')
rlQosOutQueueStatisticsCntrNumOfBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 12), StatisticsCntrNumOfBitsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsCntrNumOfBits.setStatus('current')
rlQosOutQueueStatisticsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 4, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosOutQueueStatisticsStatus.setStatus('current')
rlQosGlobalStatisticsCntrsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 5), )
if mibBuilder.loadTexts: rlQosGlobalStatisticsCntrsTable.setStatus('current')
rlQosGlobalStatisticsCntrsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 5, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosGlobalStatisticsCntrsType"))
if mibBuilder.loadTexts: rlQosGlobalStatisticsCntrsEntry.setStatus('current')
rlQosGlobalStatisticsCntrsType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 5, 1, 1), StatisticsCntrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosGlobalStatisticsCntrsType.setStatus('current')
rlQosGlobalStatisticsCntrsNumOfBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 5, 1, 2), StatisticsCntrNumOfBitsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosGlobalStatisticsCntrsNumOfBits.setStatus('current')
rlQosGlobalStatisticsCntrsCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosGlobalStatisticsCntrsCounterValue.setStatus('current')
rlQosGlobalStatisticsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 5, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosGlobalStatisticsStatus.setStatus('current')
rlQosClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 35, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosClearCounters.setStatus('current')
rlQosClassifierUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 36))
rlQosClassifierUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 36, 1), )
if mibBuilder.loadTexts: rlQosClassifierUtilizationTable.setStatus('current')
rlQosClassifierUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 36, 1, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosClassifierUtilizationUnitId"))
if mibBuilder.loadTexts: rlQosClassifierUtilizationEntry.setStatus('current')
rlQosClassifierUtilizationUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 36, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: rlQosClassifierUtilizationUnitId.setStatus('current')
rlQosClassifierUtilizationPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 36, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosClassifierUtilizationPercent.setStatus('current')
rlQosClassifierUtilizationRulesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 36, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosClassifierUtilizationRulesNumber.setStatus('current')
rlQosPortToProfileMappingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 37), )
if mibBuilder.loadTexts: rlQosPortToProfileMappingTable.setStatus('current')
rlQosPortToProfileMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 37, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosPort"))
if mibBuilder.loadTexts: rlQosPortToProfileMappingEntry.setStatus('current')
rlQosPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 37, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQosPort.setStatus('current')
rlQosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 37, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosProfileName.setStatus('current')
rlQosTimeBasedAclTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 38), )
if mibBuilder.loadTexts: rlQosTimeBasedAclTable.setStatus('current')
rlQosTimeBasedAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 38, 1), ).setIndexNames((1, "DLINK-3100-QOS-CLI-MIB", "rlQosTimeBasedAclRangeName"))
if mibBuilder.loadTexts: rlQosTimeBasedAclEntry.setStatus('current')
rlQosTimeBasedAclRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 38, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlQosTimeBasedAclRangeName.setStatus('current')
rlQosTimeBasedAclAbsStart = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 38, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosTimeBasedAclAbsStart.setStatus('current')
rlQosTimeBasedAclAbsEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 38, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosTimeBasedAclAbsEnd.setStatus('current')
rlQosTimeBasedAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 38, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosTimeBasedAclStatus.setStatus('current')
rlQosTimeBasedAclPeriodicTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 39), )
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicTable.setStatus('current')
rlQosTimeBasedAclPeriodicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 39, 1), ).setIndexNames((0, "DLINK-3100-QOS-CLI-MIB", "rlQosTimeBasedAclPeriodicName"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosTimeBasedAclPeriodicWeekList"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosTimeBasedAclPeriodicStart"), (0, "DLINK-3100-QOS-CLI-MIB", "rlQosTimeBasedAclPeriodicEnd"))
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicEntry.setStatus('current')
rlQosTimeBasedAclPeriodicName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 39, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicName.setStatus('current')
rlQosTimeBasedAclPeriodicWeekList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 39, 1, 2), RlQosTimeBasedAclWeekPeriodicList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicWeekList.setStatus('current')
rlQosTimeBasedAclPeriodicStart = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 39, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicStart.setStatus('current')
rlQosTimeBasedAclPeriodicEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 39, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicEnd.setStatus('current')
rlQosTimeBasedAclPeriodicStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 39, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosTimeBasedAclPeriodicStatus.setStatus('current')
rlQosCPUSafeGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosCPUSafeGuardEnable.setStatus('current')
rlQosClassifierUtilizationSystem = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 36, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosClassifierUtilizationSystem.setStatus('current')
rlQosClassifierRulesNumberUtilizationSystem = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 36, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQosClassifierRulesNumberUtilizationSystem.setStatus('current')
rlQosTcamUpdateSemaphore = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 88, 41), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQosTcamUpdateSemaphore.setStatus('current')
mibBuilder.exportSymbols("DLINK-3100-QOS-CLI-MIB", rlQosTcpPortQueueTable=rlQosTcpPortQueueTable, rlQosCliMib=rlQosCliMib, rlQosAceTidxTuple2=rlQosAceTidxTuple2, rlQosAceTidxTuple6=rlQosAceTidxTuple6, rlQosAclName=rlQosAclName, rlQosAceTidxStatus=rlQosAceTidxStatus, rlQosAclIndex=rlQosAclIndex, rlQosQueueShapeProfileTable=rlQosQueueShapeProfileTable, rlQosAggregatePolicerStatisticsOutProfileCounterValue=rlQosAggregatePolicerStatisticsOutProfileCounterValue, rlQosCosIndex=rlQosCosIndex, rlQosTypeQueue6=rlQosTypeQueue6, rlQosRedMinDp2=rlQosRedMinDp2, rlQosPolicerCbs=rlQosPolicerCbs, rlQosIfProfilePointer=rlQosIfProfilePointer, rlQosAclAceRefAcePointer=rlQosAclAceRefAcePointer, rlQosPolicyClassRefTable=rlQosPolicyClassRefTable, StatisticsCntrNumOfBitsType=StatisticsCntrNumOfBitsType, rlQosQueueShapeProfilePointer=rlQosQueueShapeProfilePointer, rlQosClassifierUtilizationEntry=rlQosClassifierUtilizationEntry, rlQosDscpRemarkEntry=rlQosDscpRemarkEntry, rlQosCbsQueue3=rlQosCbsQueue3, rlQosOutQueueStatisticsStatus=rlQosOutQueueStatisticsStatus, rlQosAggregatePolicerStatisticsTable=rlQosAggregatePolicerStatisticsTable, rlQosRmNewDscp=rlQosRmNewDscp, rlQosTimeBasedAclStatus=rlQosTimeBasedAclStatus, rlQosTcpQueueValue=rlQosTcpQueueValue, rlQosIfprofileStatus=rlQosIfprofileStatus, rlQosAceTidxTimeRangeIsActive=rlQosAceTidxTimeRangeIsActive, rlQosTypeQueue8=rlQosTypeQueue8, rlQosFreeIndexesTable=rlQosFreeIndexesTable, rlQosClassMapMatch2=rlQosClassMapMatch2, rlQosOffsetPattern=rlQosOffsetPattern, rlQueueProfileName=rlQueueProfileName, rlQosAceTuple2=rlQosAceTuple2, rlQosCbsQueue4=rlQosCbsQueue4, rlQosAceTidxAclIndex=rlQosAceTidxAclIndex, rlQosNamesToIndexesName=rlQosNamesToIndexesName, rlQosTupleEntry=rlQosTupleEntry, rlQosPolicyClassRefStatus=rlQosPolicyClassRefStatus, rlQosAceType=rlQosAceType, rlQosAceTuple5=rlQosAceTuple5, rlQosAclAceRefAclPointer=rlQosAclAceRefAclPointer, rlQosIfIpv6AclOut=rlQosIfIpv6AclOut, rlQosRedMinDp1=rlQosRedMinDp1, rlQosCosQueueEntry=rlQosCosQueueEntry, rlQosAggregatePolicerStatisticsOutProfileCntrNumOfBits=rlQosAggregatePolicerStatisticsOutProfileCntrNumOfBits, rlQosAggregatePolicerStatisticsInProfileCounterValue=rlQosAggregatePolicerStatisticsInProfileCounterValue, rlQosAceTidxTuple4=rlQosAceTidxTuple4, rlQosClassifierRulesNumberUtilizationSystem=rlQosClassifierRulesNumberUtilizationSystem, rlQosTimeBasedAclPeriodicTable=rlQosTimeBasedAclPeriodicTable, rlQosAceTuple7=rlQosAceTuple7, rlQosAclTable=rlQosAclTable, rlQosPortPolicyStatisticsTable=rlQosPortPolicyStatisticsTable, rlQosUdpQueueValue=rlQosUdpQueueValue, rlQosTimeBasedAclTable=rlQosTimeBasedAclTable, rlQosRedMaxDp0=rlQosRedMaxDp0, rlQosQueueProfileEntry=rlQosQueueProfileEntry, rlQosAclCounterValue=rlQosAclCounterValue, rlQosOffsetValue=rlQosOffsetValue, rlQosAceTidxTuple1=rlQosAceTidxTuple1, rlQosAclDefaultAction=rlQosAclDefaultAction, rlQosRedProbDp1=rlQosRedProbDp1, rlQosPortPolicyStatisticsEnableCounting=rlQosPortPolicyStatisticsEnableCounting, rlQosCbsQueue8=rlQosCbsQueue8, rlQosOffsetIndex=rlQosOffsetIndex, rlQosOutQueueStatisticsQueueAll=rlQosOutQueueStatisticsQueueAll, rlQosAceTidxTuple5=rlQosAceTidxTuple5, rlQosAceTidxIndex=rlQosAceTidxIndex, rlQosAceTidxTimeRange=rlQosAceTidxTimeRange, rlQosRedMinDp0=rlQosRedMinDp0, rlQosCosQueueDefaultMapVpt=rlQosCosQueueDefaultMapVpt, rlQosSinglePolicerStatisticsOutProfileCounterValue=rlQosSinglePolicerStatisticsOutProfileCounterValue, rlQosOutQueueStatisticsCounterTailDropValue=rlQosOutQueueStatisticsCounterTailDropValue, rlQosClassMapMatch3=rlQosClassMapMatch3, rlQosCPUSafeGuardEnable=rlQosCPUSafeGuardEnable, rlQosUdpPortQueueTable=rlQosUdpPortQueueTable, rlQosPortShaperStatus=rlQosPortShaperStatus, InterfaceType=InterfaceType, QosObjectBasicMode=QosObjectBasicMode, rlQosDscpToDpTable=rlQosDscpToDpTable, rlQosOutQueueStatisticsDP=rlQosOutQueueStatisticsDP, rlQosIfPolicyEntry=rlQosIfPolicyEntry, rlQosAceTidxTuple8=rlQosAceTidxTuple8, rlQosTimeBasedAclPeriodicStart=rlQosTimeBasedAclPeriodicStart, rlQosCosQueueId=rlQosCosQueueId, rlQosIfPolicyTable=rlQosIfPolicyTable, rlQosClassMapName=rlQosClassMapName, rlQosTimeBasedAclRangeName=rlQosTimeBasedAclRangeName, rlQosQueueProfilePointer=rlQosQueueProfilePointer, AclObjectType=AclObjectType, rlQosQueueShapeProfileEntry=rlQosQueueShapeProfileEntry, rlQosTimeBasedAclEntry=rlQosTimeBasedAclEntry, rlQosAceTuple3=rlQosAceTuple3, rlQosMibVersion=rlQosMibVersion, rlQosClassifierUtilization=rlQosClassifierUtilization, rlQosCbsPortShaper=rlQosCbsPortShaper, rlQosAceTuple8=rlQosAceTuple8, rlQosQueueShapeProfileStatus=rlQosQueueShapeProfileStatus, rlQosQueueProfileTable=rlQosQueueProfileTable, rlQosCliBasicModeCfg=rlQosCliBasicModeCfg, rlQosCirPortShaper=rlQosCirPortShaper, rlIfType=rlIfType, rlQosDscpQueueEntry=rlQosDscpQueueEntry, rlQosAclStatus=rlQosAclStatus, rlQosProfileName=rlQosProfileName, rlQosCirQueue7=rlQosCirQueue7, rlQosCirQueue8=rlQosCirQueue8, rlQosRedProbDp0=rlQosRedProbDp0, rlQosTimeBasedAclAbsStart=rlQosTimeBasedAclAbsStart, ClassMapType=ClassMapType, rlQosAclCounterAclIndex=rlQosAclCounterAclIndex, rlQosClassMapType=rlQosClassMapType, rlQosTcpPortQueueEntry=rlQosTcpPortQueueEntry, rlQosTypeQueue3=rlQosTypeQueue3, rlQosPolicyMapIndex=rlQosPolicyMapIndex, rlQosCirPortRateLimit=rlQosCirPortRateLimit, rlQosPredefBlockAclMask=rlQosPredefBlockAclMask, rlQosCosQueueTable=rlQosCosQueueTable, rlQosDscpQueueDefaultMapTable=rlQosDscpQueueDefaultMapTable, rlQosCirQueue4=rlQosCirQueue4, rlQosStackControlCos=rlQosStackControlCos, rlQosGlobalStatisticsCntrsCounterValue=rlQosGlobalStatisticsCntrsCounterValue, rlQosAggregatePolicerStatisticsStatus=rlQosAggregatePolicerStatisticsStatus, rlQosAclCounterEntry=rlQosAclCounterEntry, PYSNMP_MODULE_ID=rlQosCliMib, AceActionType=AceActionType, rlQosSinglePolicerStatisticsEntry=rlQosSinglePolicerStatisticsEntry, rlQosGlobalStatisticsCntrsEntry=rlQosGlobalStatisticsCntrsEntry, rlQosValueQueue6=rlQosValueQueue6, rlQosClassMapEntry=rlQosClassMapEntry, rlQosFreeIndexesValue=rlQosFreeIndexesValue, ClassTupleType=ClassTupleType, ClassOffsetType=ClassOffsetType, rlQosAceTidxTuple7=rlQosAceTidxTuple7, rlQosTimeBasedAclPeriodicEnd=rlQosTimeBasedAclPeriodicEnd, rlQosAceTuple1=rlQosAceTuple1, rlQosNamesToIndexesEntry=rlQosNamesToIndexesEntry, rlQosPredefBlockAclIfType=rlQosPredefBlockAclIfType, rlQosRmOldDscp=rlQosRmOldDscp, rlQosPolicyClassRefClassPointer=rlQosPolicyClassRefClassPointer, rlQosStatistics=rlQosStatistics, rlQosSinglePolicerStatisticsInProfileCntrNumOfBits=rlQosSinglePolicerStatisticsInProfileCntrNumOfBits, rlQosGlobalStatisticsCntrsNumOfBits=rlQosGlobalStatisticsCntrsNumOfBits, rlQosGlobalStatisticsCntrsType=rlQosGlobalStatisticsCntrsType, rlQosOutQueueStatisticsTable=rlQosOutQueueStatisticsTable, rlQosNamesToIndexesTable=rlQosNamesToIndexesTable, rlQosEfManageTable=rlQosEfManageTable, rlQosOffsetTuplePointer=rlQosOffsetTuplePointer, rlQosPolicyMapStatus=rlQosPolicyMapStatus, rlQosTupleStatus=rlQosTupleStatus, rlQosAceTidxAccount=rlQosAceTidxAccount, rlQosValueQueue5=rlQosValueQueue5, BinaryStatus=BinaryStatus, rlQosValueQueue1=rlQosValueQueue1, rlQosSinglePolicerStatisticsStatus=rlQosSinglePolicerStatisticsStatus, rlQosCirQueue5=rlQosCirQueue5, rlQosIfProfileCfgEntry=rlQosIfProfileCfgEntry, rlQosCbsPortRateLimit=rlQosCbsPortRateLimit, rlQosAceTidxAction=rlQosAceTidxAction, rlQosPolicerType=rlQosPolicerType, rlQosPredefBlockAclStatus=rlQosPredefBlockAclStatus, rlQosTypeQueue1=rlQosTypeQueue1, rlQosOffsetType=rlQosOffsetType, rlQosPolicerStatus=rlQosPolicerStatus, rlQosOffsetEntry=rlQosOffsetEntry, rlQosIfPolicyMapPointerOut=rlQosIfPolicyMapPointerOut, rlQosClassMapPolicer=rlQosClassMapPolicer, rlQosPort=rlQosPort, rlQosPolicyMapEntry=rlQosPolicyMapEntry, rlQosTcamUpdateSemaphore=rlQosTcamUpdateSemaphore, rlQosPortToProfileMappingTable=rlQosPortToProfileMappingTable, rlQosCirQueue6=rlQosCirQueue6, AclDefaultAction=AclDefaultAction, rlQosAclEntry=rlQosAclEntry, rlQosAceAction=rlQosAceAction, rlQosIfPolicyMapStatus=rlQosIfPolicyMapStatus, rlQosUdpPortQueueStatus=rlQosUdpPortQueueStatus, rlQosAceEntry=rlQosAceEntry, rlQosIfProfileCfgTable=rlQosIfProfileCfgTable, rlQosRedMaxDp2=rlQosRedMaxDp2, rlQosOutQueueStatisticsCountrID=rlQosOutQueueStatisticsCountrID, rlQosAceTuple6=rlQosAceTuple6, rlQosAclAceRefEntry=rlQosAclAceRefEntry, rlQosDp=rlQosDp, rlQosOutQueueStatisticsVlan=rlQosOutQueueStatisticsVlan, rlQosOffsetStatus=rlQosOffsetStatus, rlQosAclAceRefStatus=rlQosAclAceRefStatus, rlQosNumOfIfConnections=rlQosNumOfIfConnections, rlQosClassifierUtilizationRulesNumber=rlQosClassifierUtilizationRulesNumber, rlQosPredefBlockAclTable=rlQosPredefBlockAclTable, rlQosUdpPortQueueEntry=rlQosUdpPortQueueEntry, rlQosClearCounters=rlQosClearCounters, rlQosSinglePolicerStatisticsOutProfileCntrNumOfBits=rlQosSinglePolicerStatisticsOutProfileCntrNumOfBits, rlQosPredefBlockAclIfIndex=rlQosPredefBlockAclIfIndex, rlQosDscpQueueDefaultMapEntry=rlQosDscpQueueDefaultMapEntry, rlQosTimeBasedAclAbsEnd=rlQosTimeBasedAclAbsEnd, rlQosOffsetMask=rlQosOffsetMask, rlQosPolicerCir=rlQosPolicerCir, rlIfIndex=rlIfIndex, rlQosTupleValue2=rlQosTupleValue2, rlQosAceStatus=rlQosAceStatus, rlQosOutQueueStatisticsPortAll=rlQosOutQueueStatisticsPortAll, rlQosFreeIndexesTableId=rlQosFreeIndexesTableId, rlQosPolicyMapTable=rlQosPolicyMapTable, rlQosTupleTable=rlQosTupleTable, QosObjectMode=QosObjectMode, rlQosDscpQueueTable=rlQosDscpQueueTable, rlQosClassifierUtilizationPercent=rlQosClassifierUtilizationPercent, rlQosPortPolicyStatisticsCntrType=rlQosPortPolicyStatisticsCntrType, rlQosPortPolicyStatisticsCounterValue=rlQosPortPolicyStatisticsCounterValue, rlQosAceTidxEntry=rlQosAceTidxEntry, rlQosClassMapCopyPort=rlQosClassMapCopyPort, rlQosClassMapNewPort=rlQosClassMapNewPort, rlQosAceTidxTable=rlQosAceTidxTable, rlQosMaxNumOfAce=rlQosMaxNumOfAce, rlQosEfQueueId=rlQosEfQueueId, rlQosQueueId=rlQosQueueId, rlQosTypeQueue2=rlQosTypeQueue2, AceObjectType=AceObjectType, rlQosTimeBasedAclPeriodicStatus=rlQosTimeBasedAclPeriodicStatus, rlQosCliQosMode=rlQosCliQosMode, rlQosClassMapNewVlan=rlQosClassMapNewVlan, rlQosClassMapMarkValue=rlQosClassMapMarkValue, rlQosAggregatePolicerStatisticsInProfileCntrNumOfBits=rlQosAggregatePolicerStatisticsInProfileCntrNumOfBits, rlQosIfPolicyMapPointerIn=rlQosIfPolicyMapPointerIn, rlQosSinglePolicerStatisticsTable=rlQosSinglePolicerStatisticsTable, rlQosOutQueueStatisticsQueue=rlQosOutQueueStatisticsQueue, rlQosValueQueue4=rlQosValueQueue4, rlQosDscp=rlQosDscp, rlQosStackControlQueue=rlQosStackControlQueue, rlQosEfPriority=rlQosEfPriority, rlQosClassMapMatch1=rlQosClassMapMatch1, rlQosIfTrustActive=rlQosIfTrustActive, rlQosTimeBasedAclPeriodicName=rlQosTimeBasedAclPeriodicName, rlQosCosQueueDefaultMapTable=rlQosCosQueueDefaultMapTable, rlQosPolicyClassRefEntry=rlQosPolicyClassRefEntry, rlQosUdpPort=rlQosUdpPort, rlQosGlobalStatisticsStatus=rlQosGlobalStatisticsStatus, StatisticsCntrType=StatisticsCntrType, rlQosTupleValue1=rlQosTupleValue1, rlQosCirQueue1=rlQosCirQueue1, rlQosClassMapIndex=rlQosClassMapIndex, rlQosPolicerCasPointerRemVal=rlQosPolicerCasPointerRemVal, rlQosAceIndex=rlQosAceIndex, rlQosOutQueueStatisticsCntrNumOfBits=rlQosOutQueueStatisticsCntrNumOfBits, rlQosPolicyMapName=rlQosPolicyMapName, rlQosCirQueue2=rlQosCirQueue2, ClassMapAction=ClassMapAction, rlQosAclCounterInterface=rlQosAclCounterInterface, rlQosOutQueueStatisticsCounterAllValue=rlQosOutQueueStatisticsCounterAllValue, rlQosIfIpv6AclIn=rlQosIfIpv6AclIn, rlQosEfManageEntry=rlQosEfManageEntry, rlQosClassMapAction=rlQosClassMapAction, rlQosDscpQueueDefaultMapQueueId=rlQosDscpQueueDefaultMapQueueId)
mibBuilder.exportSymbols("DLINK-3100-QOS-CLI-MIB", rlQosCbsQueue5=rlQosCbsQueue5, rlQosAceTidxType=rlQosAceTidxType, rlQosCosQueueDefaultMapQueueId=rlQosCosQueueDefaultMapQueueId, rlQosPortPolicyStatisticsEntry=rlQosPortPolicyStatisticsEntry, rlQosDscpMutationEntry=rlQosDscpMutationEntry, rlQosDscpQueueDefaultMapDscp=rlQosDscpQueueDefaultMapDscp, rlQosClassMapMarkVlan=rlQosClassMapMarkVlan, rlQosTypeQueue7=rlQosTypeQueue7, rlQosSinglePolicerStatisticsInProfileCounterValue=rlQosSinglePolicerStatisticsInProfileCounterValue, rlQosOutQueueStatisticsDPAll=rlQosOutQueueStatisticsDPAll, rlQosQueueProfileStatus=rlQosQueueProfileStatus, rlQosAclCounterAceIndex=rlQosAclCounterAceIndex, rlQosPolicerIndex=rlQosPolicerIndex, rlQosPolicyClassRefPolicyPointer=rlQosPolicyClassRefPolicyPointer, rlQosAceTuple4=rlQosAceTuple4, rlQosTypeQueue5=rlQosTypeQueue5, rlQosPortToProfileMappingEntry=rlQosPortToProfileMappingEntry, rlQosValueQueue3=rlQosValueQueue3, rlQosEfState=rlQosEfState, rlQosAclAceRefTable=rlQosAclAceRefTable, rlQosClassMapTable=rlQosClassMapTable, rlQosOutQueueStatisticsVlanAll=rlQosOutQueueStatisticsVlanAll, rlQosAceTidxTuple3=rlQosAceTidxTuple3, RlQosTimeBasedAclWeekPeriodicList=RlQosTimeBasedAclWeekPeriodicList, rlQosPortPolicyStatisticsCntrNumOfBits=rlQosPortPolicyStatisticsCntrNumOfBits, rlQosPolicerName=rlQosPolicerName, rlQosFreeIndexesEntry=rlQosFreeIndexesEntry, rlQosValueQueue7=rlQosValueQueue7, rlQosTcpPort=rlQosTcpPort, rlQosOutQueueStatisticsEntry=rlQosOutQueueStatisticsEntry, rlQosValueQueue2=rlQosValueQueue2, rlQosClassMapStatus=rlQosClassMapStatus, rlQosTdThersholdDp0=rlQosTdThersholdDp0, rlQosOldDscp=rlQosOldDscp, rlQosOutQueueStatisticsIfIndexList=rlQosOutQueueStatisticsIfIndexList, rlQosAceTable=rlQosAceTable, rlQosDscpIndex=rlQosDscpIndex, rlQosCbsQueue6=rlQosCbsQueue6, rlQosCosQueueDefaultMapEntry=rlQosCosQueueDefaultMapEntry, rlQosNamesToIndexesValue=rlQosNamesToIndexesValue, rlQosTdThersholdDp2=rlQosTdThersholdDp2, rlQosRedProbDp2=rlQosRedProbDp2, QueueType=QueueType, rlQosAceAccount=rlQosAceAccount, rlQosCirQueue3=rlQosCirQueue3, PolicerAction=PolicerAction, rlQosIfPolicerIn=rlQosIfPolicerIn, rlQosRedMaxDp1=rlQosRedMaxDp1, rlQosPredefBlockAclEntry=rlQosPredefBlockAclEntry, rlQosIfAclOut=rlQosIfAclOut, rlQosValueQueue8=rlQosValueQueue8, rlQosTypeQueue4=rlQosTypeQueue4, rlQosTupleIndex=rlQosTupleIndex, rlQosTdThersholdDp1=rlQosTdThersholdDp1, rlQosRedQweight=rlQosRedQweight, rlQosAggregatePolicerStatisticsEntry=rlQosAggregatePolicerStatisticsEntry, rlQosIfAclIn=rlQosIfAclIn, rlQosQueueShapeIndex=rlQosQueueShapeIndex, rlQosAclCounterTable=rlQosAclCounterTable, rlQosTimeBasedAclPeriodicEntry=rlQosTimeBasedAclPeriodicEntry, rlQosOffsetTable=rlQosOffsetTable, rlQosClassifierUtilizationUnitId=rlQosClassifierUtilizationUnitId, rlQosCbsQueue2=rlQosCbsQueue2, rlQosCbsQueue7=rlQosCbsQueue7, rlQosNewDscp=rlQosNewDscp, rlQosGlobalStatisticsCntrsTable=rlQosGlobalStatisticsCntrsTable, rlQosQueueNum=rlQosQueueNum, rlQosPolicerEntry=rlQosPolicerEntry, rlQosCbsQueue1=rlQosCbsQueue1, rlQosDscpRemarkTable=rlQosDscpRemarkTable, rlQosDscpMutationTable=rlQosDscpMutationTable, PolicerType=PolicerType, rlQosDscpToDpEntry=rlQosDscpToDpEntry, rlQosAclType=rlQosAclType, rlQosTupleType=rlQosTupleType, rlQosTcpPortQueueStatus=rlQosTcpPortQueueStatus, rlQosClassifierUtilizationSystem=rlQosClassifierUtilizationSystem, rlIfProfileName=rlIfProfileName, rlQosPolicerAction=rlQosPolicerAction, rlQosClassifierUtilizationTable=rlQosClassifierUtilizationTable, rlQosTimeBasedAclPeriodicWeekList=rlQosTimeBasedAclPeriodicWeekList, rlQosPolicerTable=rlQosPolicerTable, rlQosNamesToIndexesTableId=rlQosNamesToIndexesTableId, rlQosPortRateLimitStatus=rlQosPortRateLimitStatus)
