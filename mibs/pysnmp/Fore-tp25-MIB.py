#
# PySNMP MIB module Fore-tp25-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-tp25-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:04:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
asx, = mibBuilder.importSymbols("Fore-Common-MIB", "asx")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, ObjectIdentity, IpAddress, NotificationType, Counter64, Unsigned32, MibIdentifier, Counter32, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "IpAddress", "NotificationType", "Counter64", "Unsigned32", "MibIdentifier", "Counter32", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
foreTP25Module = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9))
if mibBuilder.loadTexts: foreTP25Module.setLastUpdated('9911050000Z')
if mibBuilder.loadTexts: foreTP25Module.setOrganization('FORE')
tp25ConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 1))
tp25StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 2))
tp25ConfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 1, 1), )
if mibBuilder.loadTexts: tp25ConfTable.setStatus('current')
tp25ConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 1, 1, 1), ).setIndexNames((0, "Fore-tp25-MIB", "tp25ConfBoard"), (0, "Fore-tp25-MIB", "tp25ConfModule"), (0, "Fore-tp25-MIB", "tp25ConfPort"))
if mibBuilder.loadTexts: tp25ConfEntry.setStatus('current')
tp25ConfBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp25ConfBoard.setStatus('current')
tp25ConfModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp25ConfModule.setStatus('current')
tp25ConfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp25ConfPort.setStatus('current')
tp25MediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tp25UTP", 1), ("tp25STP", 2), ("tp25FTP", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp25MediaType.setStatus('current')
tp25LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tp25NoLoop", 1), ("tp25DiagLoop", 2), ("tp25LineLoop", 3))).clone('tp25NoLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tp25LoopbackConfig.setStatus('current')
tp25RxTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tp25NoTimingPresent", 1), ("tp25TimingPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp25RxTiming.setStatus('current')
tp25ErrorTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 2, 1), )
if mibBuilder.loadTexts: tp25ErrorTable.setStatus('current')
tp25ErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 2, 1, 1), ).setIndexNames((0, "Fore-tp25-MIB", "tp25ErrorBoard"), (0, "Fore-tp25-MIB", "tp25ErrorModule"), (0, "Fore-tp25-MIB", "tp25ErrorPort"))
if mibBuilder.loadTexts: tp25ErrorEntry.setStatus('current')
tp25ErrorBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp25ErrorBoard.setStatus('current')
tp25ErrorModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp25ErrorModule.setStatus('current')
tp25ErrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp25ErrorPort.setStatus('current')
tp25ErrorSymbol = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp25ErrorSymbol.setStatus('current')
tp25AtmTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 2, 2), )
if mibBuilder.loadTexts: tp25AtmTable.setStatus('current')
tp25AtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 2, 2, 1), ).setIndexNames((0, "Fore-tp25-MIB", "tp25AtmBoard"), (0, "Fore-tp25-MIB", "tp25AtmModule"), (0, "Fore-tp25-MIB", "tp25AtmPort"))
if mibBuilder.loadTexts: tp25AtmEntry.setStatus('current')
tp25AtmBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp25AtmBoard.setStatus('current')
tp25AtmModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp25AtmModule.setStatus('current')
tp25AtmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp25AtmPort.setStatus('current')
tp25AtmHCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp25AtmHCSs.setStatus('current')
tp25AtmRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp25AtmRxCells.setStatus('current')
tp25AtmTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 9, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tp25AtmTxCells.setStatus('current')
mibBuilder.exportSymbols("Fore-tp25-MIB", tp25AtmPort=tp25AtmPort, tp25ErrorEntry=tp25ErrorEntry, tp25AtmBoard=tp25AtmBoard, tp25StatsGroup=tp25StatsGroup, foreTP25Module=foreTP25Module, tp25ConfTable=tp25ConfTable, PYSNMP_MODULE_ID=foreTP25Module, tp25ErrorModule=tp25ErrorModule, tp25AtmHCSs=tp25AtmHCSs, tp25ErrorTable=tp25ErrorTable, tp25ConfPort=tp25ConfPort, tp25MediaType=tp25MediaType, tp25AtmEntry=tp25AtmEntry, tp25ErrorPort=tp25ErrorPort, tp25ConfGroup=tp25ConfGroup, tp25ConfModule=tp25ConfModule, tp25RxTiming=tp25RxTiming, tp25ConfEntry=tp25ConfEntry, tp25AtmTxCells=tp25AtmTxCells, tp25AtmModule=tp25AtmModule, tp25ErrorSymbol=tp25ErrorSymbol, tp25LoopbackConfig=tp25LoopbackConfig, tp25ErrorBoard=tp25ErrorBoard, tp25AtmTable=tp25AtmTable, tp25AtmRxCells=tp25AtmRxCells, tp25ConfBoard=tp25ConfBoard)
