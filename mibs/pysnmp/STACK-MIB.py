#
# PySNMP MIB module STACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STACK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:03:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, Unsigned32, NotificationType, Counter64, MibIdentifier, Bits, Counter32, Gauge32, ObjectIdentity, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "Unsigned32", "NotificationType", "Counter64", "MibIdentifier", "Bits", "Counter32", "Gauge32", "ObjectIdentity", "ModuleIdentity", "TimeTicks")
DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress")
zte = MibIdentifier((1, 3, 6, 1, 4, 1, 3902))
zxr10 = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3))
stack = ModuleIdentity((1, 3, 6, 1, 4, 1, 3902, 3, 300))
stack.setRevisions(('2004-05-14 00:00',))
if mibBuilder.loadTexts: stack.setLastUpdated('200705280000Z')
if mibBuilder.loadTexts: stack.setOrganization('ZTE Corp.')
class MasterSlaveDataSynStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(11, 12, 13, 20, 40, 50, 60, 70, 80, 90, 100))
    namedValues = NamedValues(("masterinit", 11), ("backinit", 12), ("memberinit", 13), ("masteridle", 20), ("backreg", 40), ("interaction", 50), ("masterbatchsync", 60), ("backbatchsync", 70), ("masterrealsync", 80), ("backrealsync", 90), ("mastergr", 100))

class StkDeviceStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("master", 0), ("slave", 1), ("member", 2))

systemGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 300, 1))
class VendorIdType(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

sysNetMask = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 300, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysNetMask.setStatus('deprecated')
sysManagIf = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 300, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysManagIf.setStatus('current')
sysMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 300, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMacAddr.setStatus('current')
sysMacChagAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 300, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMacChagAgingTime.setStatus('current')
sysLastchagConfigTime = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 300, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLastchagConfigTime.setStatus('current')
sysMasterSlaveDataSynStatus = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 300, 1, 6), MasterSlaveDataSynStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMasterSlaveDataSynStatus.setStatus('current')
sysManagIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 3902, 3, 300, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysManagIpAddr.setStatus('current')
sysStkDeviceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 300, 2), )
if mibBuilder.loadTexts: sysStkDeviceInfoTable.setStatus('current')
sysStkDeviceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 300, 2, 1), ).setIndexNames((0, "STACK-MIB", "sysStkDeviceID"))
if mibBuilder.loadTexts: sysStkDeviceInfoEntry.setStatus('current')
sysStkDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 300, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStkDeviceID.setStatus('current')
sysStkDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 300, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStkDeviceType.setStatus('current')
sysMemDeviceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 300, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemDeviceMacAddr.setStatus('current')
sysMemUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 300, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemUpTime.setStatus('current')
sysStkDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 300, 2, 1, 5), StkDeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStkDeviceStatus.setStatus('current')
zxr10StackStatTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 300, 3), )
if mibBuilder.loadTexts: zxr10StackStatTable.setStatus('current')
zxr10StackStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 300, 3, 1), ).setIndexNames((0, "STACK-MIB", "zxr10StkDeviceID"))
if mibBuilder.loadTexts: zxr10StackStatEntry.setStatus('current')
zxr10StkDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 300, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10StkDeviceID.setStatus('current')
zxr10StkDeviceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 300, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10StkDeviceMacAddr.setStatus('current')
zxr10StkDeviceCpuUtility5s = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 300, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10StkDeviceCpuUtility5s.setStatus('current')
zxr10StkDeviceCpuUtility1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 300, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10StkDeviceCpuUtility1m.setStatus('current')
zxr10StkDeviceCpuUtility5m = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 300, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10StkDeviceCpuUtility5m.setStatus('current')
zxr10StkDeviceMemUtility = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 300, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxr10StkDeviceMemUtility.setStatus('current')
mibBuilder.exportSymbols("STACK-MIB", sysLastchagConfigTime=sysLastchagConfigTime, zxr10=zxr10, zxr10StackStatTable=zxr10StackStatTable, VendorIdType=VendorIdType, systemGrp=systemGrp, MasterSlaveDataSynStatus=MasterSlaveDataSynStatus, zxr10StkDeviceCpuUtility5m=zxr10StkDeviceCpuUtility5m, sysStkDeviceInfoTable=sysStkDeviceInfoTable, zxr10StkDeviceMemUtility=zxr10StkDeviceMemUtility, sysStkDeviceType=sysStkDeviceType, sysMemDeviceMacAddr=sysMemDeviceMacAddr, zxr10StkDeviceCpuUtility5s=zxr10StkDeviceCpuUtility5s, sysManagIf=sysManagIf, zte=zte, zxr10StkDeviceID=zxr10StkDeviceID, stack=stack, zxr10StkDeviceMacAddr=zxr10StkDeviceMacAddr, zxr10StkDeviceCpuUtility1m=zxr10StkDeviceCpuUtility1m, StkDeviceStatus=StkDeviceStatus, sysStkDeviceStatus=sysStkDeviceStatus, sysManagIpAddr=sysManagIpAddr, sysStkDeviceID=sysStkDeviceID, sysStkDeviceInfoEntry=sysStkDeviceInfoEntry, sysNetMask=sysNetMask, zxr10StackStatEntry=zxr10StackStatEntry, sysMasterSlaveDataSynStatus=sysMasterSlaveDataSynStatus, sysMemUpTime=sysMemUpTime, sysMacAddr=sysMacAddr, PYSNMP_MODULE_ID=stack, sysMacChagAgingTime=sysMacChagAgingTime)
