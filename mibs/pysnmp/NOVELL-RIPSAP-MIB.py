#
# PySNMP MIB module NOVELL-RIPSAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NOVELL-RIPSAP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:14:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
mibDoc, = mibBuilder.importSymbols("NOVELL-IPX-MIB", "mibDoc")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, TimeTicks, ObjectIdentity, IpAddress, enterprises, Counter32, Counter64, NotificationType, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "TimeTicks", "ObjectIdentity", "IpAddress", "enterprises", "Counter32", "Counter64", "NotificationType", "ModuleIdentity", "Unsigned32")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
ripsap = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 20))
ripsapSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 20, 1))
ripsapCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 20, 2))
ripSysTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 1), )
if mibBuilder.loadTexts: ripSysTable.setStatus('mandatory')
ripSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 1, 1), ).setIndexNames((0, "NOVELL-RIPSAP-MIB", "ripSysInstance"))
if mibBuilder.loadTexts: ripSysEntry.setStatus('mandatory')
ripSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripSysInstance.setStatus('mandatory')
ripSysState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripSysState.setStatus('mandatory')
ripSysIncorrectPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripSysIncorrectPackets.setStatus('mandatory')
sapSysTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 2), )
if mibBuilder.loadTexts: sapSysTable.setStatus('mandatory')
sapSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 2, 1), ).setIndexNames((0, "NOVELL-RIPSAP-MIB", "sapSysInstance"))
if mibBuilder.loadTexts: sapSysEntry.setStatus('mandatory')
sapSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapSysInstance.setStatus('mandatory')
sapSysState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapSysState.setStatus('mandatory')
sapSysIncorrectPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapSysIncorrectPackets.setStatus('mandatory')
ripCircTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1), )
if mibBuilder.loadTexts: ripCircTable.setStatus('mandatory')
ripCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1), ).setIndexNames((0, "NOVELL-RIPSAP-MIB", "ripCircSysInstance"), (0, "NOVELL-RIPSAP-MIB", "ripCircIndex"))
if mibBuilder.loadTexts: ripCircEntry.setStatus('mandatory')
ripCircSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripCircSysInstance.setStatus('mandatory')
ripCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripCircIndex.setStatus('mandatory')
ripCircState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("auto-on", 3), ("auto-off", 4))).clone('auto-off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripCircState.setStatus('mandatory')
ripCircPace = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripCircPace.setStatus('mandatory')
ripCircUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1, 5), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripCircUpdate.setStatus('mandatory')
ripCircAgeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1, 6), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripCircAgeMultiplier.setStatus('mandatory')
ripCircPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripCircPacketSize.setStatus('mandatory')
ripCircOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCircOutPackets.setStatus('mandatory')
ripCircInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCircInPackets.setStatus('mandatory')
sapCircTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2), )
if mibBuilder.loadTexts: sapCircTable.setStatus('mandatory')
sapCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1), ).setIndexNames((0, "NOVELL-RIPSAP-MIB", "sapCircSysInstance"), (0, "NOVELL-RIPSAP-MIB", "sapCircIndex"))
if mibBuilder.loadTexts: sapCircEntry.setStatus('mandatory')
sapCircSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircSysInstance.setStatus('mandatory')
sapCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircIndex.setStatus('mandatory')
sapCircState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("auto-on", 3), ("auto-off", 4))).clone('auto-off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircState.setStatus('mandatory')
sapCircPace = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircPace.setStatus('mandatory')
sapCircUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 5), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircUpdate.setStatus('mandatory')
sapCircAgeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 6), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircAgeMultiplier.setStatus('mandatory')
sapCircPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircPacketSize.setStatus('mandatory')
sapCircGetNearestServerReply = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCircGetNearestServerReply.setStatus('mandatory')
sapCircOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCircOutPackets.setStatus('mandatory')
sapCircInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 20, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCircInPackets.setStatus('mandatory')
mibBuilder.exportSymbols("NOVELL-RIPSAP-MIB", ripCircState=ripCircState, sapCircSysInstance=sapCircSysInstance, sapCircOutPackets=sapCircOutPackets, ripSysEntry=ripSysEntry, sapSysState=sapSysState, ripSysState=ripSysState, sapCircIndex=sapCircIndex, ripCircIndex=ripCircIndex, ripCircInPackets=ripCircInPackets, sapSysInstance=sapSysInstance, ripCircTable=ripCircTable, ripCircUpdate=ripCircUpdate, ripCircSysInstance=ripCircSysInstance, ripCircEntry=ripCircEntry, sapCircPace=sapCircPace, ripSysInstance=ripSysInstance, sapCircGetNearestServerReply=sapCircGetNearestServerReply, sapCircState=sapCircState, ripCircOutPackets=ripCircOutPackets, sapCircInPackets=sapCircInPackets, ripSysTable=ripSysTable, sapCircPacketSize=sapCircPacketSize, ripsapCircuit=ripsapCircuit, sapSysIncorrectPackets=sapSysIncorrectPackets, sapCircEntry=sapCircEntry, ripCircAgeMultiplier=ripCircAgeMultiplier, sapCircUpdate=sapCircUpdate, sapCircAgeMultiplier=sapCircAgeMultiplier, ripSysIncorrectPackets=ripSysIncorrectPackets, ripsap=ripsap, ripCircPace=ripCircPace, sapCircTable=sapCircTable, ripCircPacketSize=ripCircPacketSize, sapSysEntry=sapSysEntry, ripsapSystem=ripsapSystem, sapSysTable=sapSysTable)
