#
# PySNMP MIB module A3COM-HUAWEI-VOICE-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-VOICE-IF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:53:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cVoice, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cVoice")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Unsigned32, ModuleIdentity, Bits, iso, Counter64, ObjectIdentity, MibIdentifier, Counter32, Gauge32, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Unsigned32", "ModuleIdentity", "Bits", "iso", "Counter64", "ObjectIdentity", "MibIdentifier", "Counter32", "Gauge32", "NotificationType", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
h3cVoiceInterface = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 39, 13))
h3cVoiceInterface.setRevisions(('2007-12-10 17:00',))
if mibBuilder.loadTexts: h3cVoiceInterface.setLastUpdated('200712101700Z')
if mibBuilder.loadTexts: h3cVoiceInterface.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
h3cVoiceIfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 39, 13, 1))
h3cVoiceIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 39, 13, 1, 1), )
if mibBuilder.loadTexts: h3cVoiceIfConfigTable.setStatus('current')
h3cVoiceIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 39, 13, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cVoiceIfConfigEntry.setStatus('current')
h3cVoiceIfCfgCngOn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 39, 13, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoiceIfCfgCngOn.setStatus('current')
h3cVoiceIfCfgNonLinearSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 39, 13, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoiceIfCfgNonLinearSwitch.setStatus('current')
h3cVoiceIfCfgInputGain = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 39, 13, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, 139))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoiceIfCfgInputGain.setStatus('current')
h3cVoiceIfCfgOutputGain = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 39, 13, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-140, 139))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoiceIfCfgOutputGain.setStatus('current')
h3cVoiceIfCfgEchoCancelSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 39, 13, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoiceIfCfgEchoCancelSwitch.setStatus('current')
h3cVoiceIfCfgEchoCancelDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 39, 13, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoiceIfCfgEchoCancelDelay.setStatus('current')
h3cVoiceIfCfgTimerDialInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 39, 13, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoiceIfCfgTimerDialInterval.setStatus('current')
h3cVoiceIfCfgTimerFirstDial = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 39, 13, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoiceIfCfgTimerFirstDial.setStatus('current')
h3cVoiceIfCfgPrivateline = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 39, 13, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoiceIfCfgPrivateline.setStatus('current')
h3cVoiceIfCfgRegTone = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 39, 13, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(2, 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoiceIfCfgRegTone.setStatus('current')
mibBuilder.exportSymbols("A3COM-HUAWEI-VOICE-IF-MIB", h3cVoiceIfConfigEntry=h3cVoiceIfConfigEntry, h3cVoiceIfCfgOutputGain=h3cVoiceIfCfgOutputGain, h3cVoiceIfCfgCngOn=h3cVoiceIfCfgCngOn, h3cVoiceIfCfgTimerFirstDial=h3cVoiceIfCfgTimerFirstDial, h3cVoiceIfCfgEchoCancelDelay=h3cVoiceIfCfgEchoCancelDelay, PYSNMP_MODULE_ID=h3cVoiceInterface, h3cVoiceIfCfgRegTone=h3cVoiceIfCfgRegTone, h3cVoiceIfConfigTable=h3cVoiceIfConfigTable, h3cVoiceIfCfgPrivateline=h3cVoiceIfCfgPrivateline, h3cVoiceIfCfgEchoCancelSwitch=h3cVoiceIfCfgEchoCancelSwitch, h3cVoiceIfCfgNonLinearSwitch=h3cVoiceIfCfgNonLinearSwitch, h3cVoiceIfObjects=h3cVoiceIfObjects, h3cVoiceIfCfgInputGain=h3cVoiceIfCfgInputGain, h3cVoiceInterface=h3cVoiceInterface, h3cVoiceIfCfgTimerDialInterval=h3cVoiceIfCfgTimerDialInterval)
