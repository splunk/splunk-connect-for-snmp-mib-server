#
# PySNMP MIB module BIANCA-BRICK-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-QOS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:21:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, TimeTicks, IpAddress, Counter32, ModuleIdentity, Unsigned32, iso, Counter64, Integer32, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "TimeTicks", "IpAddress", "Counter32", "ModuleIdentity", "Unsigned32", "iso", "Counter64", "Integer32", "Gauge32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
qos = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 27))
qosIfTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 27, 1), )
if mibBuilder.loadTexts: qosIfTable.setStatus('mandatory')
qosIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 27, 1, 1), ).setIndexNames((0, "BIANCA-BRICK-QOS-MIB", "qosIfIndex"))
if mibBuilder.loadTexts: qosIfEntry.setStatus('mandatory')
qosIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosIfIndex.setStatus('mandatory')
qosIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8, 9))).clone(namedValues=NamedValues(("pq", 1), ("wrr", 2), ("wfq", 3), ("disabled", 8), ("delete", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosIfType.setStatus('mandatory')
qosIfMaxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosIfMaxTxRate.setStatus('mandatory')
qosIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 27, 2), )
if mibBuilder.loadTexts: qosIfStatTable.setStatus('mandatory')
qosIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 27, 2, 1), ).setIndexNames((0, "BIANCA-BRICK-QOS-MIB", "qosIfStatIndex"))
if mibBuilder.loadTexts: qosIfStatEntry.setStatus('mandatory')
qosIfStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfStatIndex.setStatus('mandatory')
qosIfStatOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfStatOutPkts.setStatus('mandatory')
qosIfStatOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfStatOutOctets.setStatus('mandatory')
qosIfStatPktsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfStatPktsQueued.setStatus('mandatory')
qosIfStatOctetsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfStatOctetsQueued.setStatus('mandatory')
qosIfStatPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfStatPktsDropped.setStatus('mandatory')
qosIfStatOctetsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfStatOctetsDropped.setStatus('mandatory')
qosPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 27, 3), )
if mibBuilder.loadTexts: qosPolicyTable.setStatus('mandatory')
qosPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1), ).setIndexNames((0, "BIANCA-BRICK-QOS-MIB", "qosPolicyIfIndex"))
if mibBuilder.loadTexts: qosPolicyEntry.setStatus('mandatory')
qosPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyIfIndex.setStatus('mandatory')
qosPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("class-based", 1), ("high-priority", 2), ("default", 3), ("delete", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyType.setStatus('mandatory')
qosPolicyClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyClassId.setStatus('mandatory')
qosPolicyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyPriority.setStatus('mandatory')
qosPolicyWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyWeight.setStatus('mandatory')
qosPolicyShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("token-bucket", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyShaper.setStatus('mandatory')
qosPolicyCongestionAvoidance = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("weighted-random", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyCongestionAvoidance.setStatus('mandatory')
qosPolicyDropAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tail-drop", 1), ("head-drop", 2), ("random-drop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyDropAlgorithm.setStatus('mandatory')
qosPolicyTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyTxRate.setStatus('mandatory')
qosPolicyTxRateLimitation = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-bounded", 1), ("bounded", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyTxRateLimitation.setStatus('mandatory')
qosPolicyTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyTxBurstSize.setStatus('mandatory')
qosPolicyLowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262143))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyLowerThreshold.setStatus('mandatory')
qosPolicyUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262143))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPolicyUpperThreshold.setStatus('mandatory')
qosPolicyStatTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 27, 4), )
if mibBuilder.loadTexts: qosPolicyStatTable.setStatus('mandatory')
qosPolicyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1), ).setIndexNames((0, "BIANCA-BRICK-QOS-MIB", "qosPolicyStatIfIndex"))
if mibBuilder.loadTexts: qosPolicyStatEntry.setStatus('mandatory')
qosPolicyStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyStatIfIndex.setStatus('mandatory')
qosPolicyStatType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("class-based", 1), ("high-priority", 2), ("default", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyStatType.setStatus('mandatory')
qosPolicyStatClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyStatClassId.setStatus('mandatory')
qosPolicyStatOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyStatOutPkts.setStatus('mandatory')
qosPolicyStatOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyStatOutOctets.setStatus('mandatory')
qosPolicyStatPktsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyStatPktsQueued.setStatus('mandatory')
qosPolicyStatOctetsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyStatOctetsQueued.setStatus('mandatory')
qosPolicyStatPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyStatPktsDropped.setStatus('mandatory')
qosPolicyStatOctetsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 27, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyStatOctetsDropped.setStatus('mandatory')
mibBuilder.exportSymbols("BIANCA-BRICK-QOS-MIB", dod=dod, qosIfEntry=qosIfEntry, enterprises=enterprises, qosIfIndex=qosIfIndex, qosPolicyCongestionAvoidance=qosPolicyCongestionAvoidance, qosPolicyTxRateLimitation=qosPolicyTxRateLimitation, qosPolicyType=qosPolicyType, qosIfStatOctetsQueued=qosIfStatOctetsQueued, qosIfMaxTxRate=qosIfMaxTxRate, org=org, qosPolicyStatOctetsDropped=qosPolicyStatOctetsDropped, qosIfStatTable=qosIfStatTable, qosIfStatIndex=qosIfStatIndex, qosIfStatPktsDropped=qosIfStatPktsDropped, qosIfStatOutOctets=qosIfStatOutOctets, qosPolicyEntry=qosPolicyEntry, bintec=bintec, qosPolicyClassId=qosPolicyClassId, qosPolicyIfIndex=qosPolicyIfIndex, bibo=bibo, qosPolicyUpperThreshold=qosPolicyUpperThreshold, private=private, qosPolicyTxRate=qosPolicyTxRate, qosPolicyStatEntry=qosPolicyStatEntry, internet=internet, qosIfStatEntry=qosIfStatEntry, qosPolicyLowerThreshold=qosPolicyLowerThreshold, qosPolicyStatOctetsQueued=qosPolicyStatOctetsQueued, qosIfType=qosIfType, qosIfTable=qosIfTable, qosIfStatOctetsDropped=qosIfStatOctetsDropped, qosPolicyStatOutOctets=qosPolicyStatOutOctets, qosPolicyStatPktsQueued=qosPolicyStatPktsQueued, qosIfStatOutPkts=qosIfStatOutPkts, qosPolicyShaper=qosPolicyShaper, qosPolicyStatOutPkts=qosPolicyStatOutPkts, qosIfStatPktsQueued=qosIfStatPktsQueued, qos=qos, qosPolicyTable=qosPolicyTable, qosPolicyTxBurstSize=qosPolicyTxBurstSize, qosPolicyStatPktsDropped=qosPolicyStatPktsDropped, qosPolicyPriority=qosPolicyPriority, qosPolicyStatIfIndex=qosPolicyStatIfIndex, qosPolicyStatType=qosPolicyStatType, qosPolicyStatTable=qosPolicyStatTable, qosPolicyDropAlgorithm=qosPolicyDropAlgorithm, qosPolicyWeight=qosPolicyWeight, qosPolicyStatClassId=qosPolicyStatClassId)
