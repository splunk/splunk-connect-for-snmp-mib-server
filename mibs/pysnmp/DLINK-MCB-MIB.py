#
# PySNMP MIB module DLINK-MCB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLINK-MCB-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:35:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, iso, NotificationType, ModuleIdentity, Unsigned32, Bits, TimeTicks, ObjectIdentity, IpAddress, Counter32, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "iso", "NotificationType", "ModuleIdentity", "Unsigned32", "Bits", "TimeTicks", "ObjectIdentity", "IpAddress", "Counter32", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
company = MibIdentifier((1, 3, 6, 1, 4, 1, 171))
mcbMediaConverterFamily = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 41))
mcbMediaConverterChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 41, 1))
mcbSNMPMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 41, 1, 1))
mcbAdministrator = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 41, 1, 2))
mcbMCFrame = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 41, 1, 3))
mcbMCSlots = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 41, 1, 4))
mcbMCRedundantGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 41, 1, 5))
mcbSNMPTrapPowerFail = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbSNMPTrapPowerFail.setStatus('mandatory')
mcbSNMPTrapFanFail = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbSNMPTrapFanFail.setStatus('mandatory')
mcbSNMPTrapMCPlugin = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbSNMPTrapMCPlugin.setStatus('mandatory')
mcbSNMPTrapMCPullout = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbSNMPTrapMCPullout.setStatus('mandatory')
mcbSNMPTrapMCLinkDown = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbSNMPTrapMCLinkDown.setStatus('mandatory')
mcbSNMPTrapMCLinkUp = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbSNMPTrapMCLinkUp.setStatus('mandatory')
mcbSNMPTrapMCLinkBroken = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbSNMPTrapMCLinkBroken.setStatus('mandatory')
mcbSNMPTrapMCActiveSlotChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbSNMPTrapMCActiveSlotChange.setStatus('mandatory')
mcbSNMPTrapMCActiveSlotLose = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbSNMPTrapMCActiveSlotLose.setStatus('mandatory')
mcbAdministratorHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbAdministratorHardwareRev.setStatus('mandatory')
mcbAdministratorSoftwareRev = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbAdministratorSoftwareRev.setStatus('mandatory')
mcbAdministratorBiosRev = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbAdministratorBiosRev.setStatus('mandatory')
mcbAdministratorFactoryReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("action", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbAdministratorFactoryReset.setStatus('mandatory')
mcbAdministratorFactoryResetCPU = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("action", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbAdministratorFactoryResetCPU.setStatus('mandatory')
mcbAdministratorSoftwareReboot = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("action", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbAdministratorSoftwareReboot.setStatus('mandatory')
mcbFramePowerOneOnStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbFramePowerOneOnStatus.setStatus('mandatory')
mcbFramePowerTwoOnStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbFramePowerTwoOnStatus.setStatus('mandatory')
mcbFramePowerOneFailStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbFramePowerOneFailStatus.setStatus('mandatory')
mcbFramePowerTwoFailStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbFramePowerTwoFailStatus.setStatus('mandatory')
mcbFrameFanOneFailStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbFrameFanOneFailStatus.setStatus('mandatory')
mcbFrameFanTwoFailStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbFrameFanTwoFailStatus.setStatus('mandatory')
mcbMCSlotCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCSlotCount.setStatus('mandatory')
mcbMCSlotTable = MibTable((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2), )
if mibBuilder.loadTexts: mcbMCSlotTable.setStatus('mandatory')
mcbMCSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1), ).setIndexNames((0, "DLINK-MCB-MIB", "mcbMCSlotNo"))
if mibBuilder.loadTexts: mcbMCSlotEntry.setStatus('mandatory')
mcbMCSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCSlotNo.setStatus('mandatory')
mcbMCSlotExist = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("exist", 1), ("nonexist", 2), ("unsupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCSlotExist.setStatus('mandatory')
mcbMCModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCModelName.setStatus('mandatory')
mcbMCMediaOneType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tp", 1), ("fiber", 2), ("unsupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCMediaOneType.setStatus('mandatory')
mcbMCMediaTwoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tp", 1), ("fiber", 2), ("unsupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCMediaTwoType.setStatus('mandatory')
mcbMCMediaOneLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("unsupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCMediaOneLinkStatus.setStatus('mandatory')
mcbMCMediaTwoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("unsupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCMediaTwoLinkStatus.setStatus('mandatory')
mcbMCMediaOneDupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("half", 1), ("full", 2), ("unsupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCMediaOneDupStatus.setStatus('mandatory')
mcbMCMediaTwoDupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("half", 1), ("full", 2), ("unsupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCMediaTwoDupStatus.setStatus('mandatory')
mcbMCMediaOneSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("speed10M", 1), ("speed100M", 2), ("speed1000M", 3), ("unsupported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCMediaOneSpeedStatus.setStatus('mandatory')
mcbMCMediaTwoSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("speed10M", 1), ("speed100M", 2), ("speed1000M", 3), ("unsupported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCMediaTwoSpeedStatus.setStatus('mandatory')
mcbMCSlotName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbMCSlotName.setStatus('mandatory')
mcbMCEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbMCEnable.setStatus('mandatory')
mcbMCSetLLCF = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbMCSetLLCF.setStatus('mandatory')
mcbMCEnableMediaOne = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbMCEnableMediaOne.setStatus('mandatory')
mcbMCEnableMediaTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbMCEnableMediaTwo.setStatus('mandatory')
mcbMCSetMediaOneAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto-negotiate", 1), ("force", 2), ("unsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbMCSetMediaOneAutoNegotiate.setStatus('mandatory')
mcbMCSetMediaTwoAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto-negotiate", 1), ("force", 2), ("unsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbMCSetMediaTwoAutoNegotiate.setStatus('mandatory')
mcbMCSetMediaOneSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("speed10M", 1), ("speed100M", 2), ("speed1000M", 3), ("unsupported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbMCSetMediaOneSpeed.setStatus('mandatory')
mcbMCSetMediaTwoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("speed10M", 1), ("speed100M", 2), ("speed1000M", 3), ("unsupported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbMCSetMediaTwoSpeed.setStatus('mandatory')
mcbMCSetMediaOneDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("half", 1), ("full", 2), ("unsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbMCSetMediaOneDuplex.setStatus('mandatory')
mcbMCSetMediaTwoDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("half", 1), ("full", 2), ("unsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbMCSetMediaTwoDuplex.setStatus('mandatory')
mcbMCSetMediaOneFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbMCSetMediaOneFlowControl.setStatus('mandatory')
mcbMCSetMediaTwoFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbMCSetMediaTwoFlowControl.setStatus('mandatory')
mcbMCSetMediaOneLLR = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbMCSetMediaOneLLR.setStatus('mandatory')
mcbMCSetMediaTwoLLR = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("unsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbMCSetMediaTwoLLR.setStatus('mandatory')
mcbMCMediaOneBrokenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unbroken", 1), ("broken", 2), ("unsupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCMediaOneBrokenStatus.setStatus('mandatory')
mcbMCMediaTwoBrokenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unbroken", 1), ("broken", 2), ("unsupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCMediaTwoBrokenStatus.setStatus('mandatory')
mcbMCMediaOneTxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCMediaOneTxPacketCount.setStatus('mandatory')
mcbMCMediaOneRxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCMediaOneRxPacketCount.setStatus('mandatory')
mcbMCMediaTwoTxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCMediaTwoTxPacketCount.setStatus('mandatory')
mcbMCMediaTwoRxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 4, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCMediaTwoRxPacketCount.setStatus('mandatory')
mcbMCRedundantGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 41, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCRedundantGroupCount.setStatus('mandatory')
mcbMCRedundantGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 41, 1, 5, 2), )
if mibBuilder.loadTexts: mcbMCRedundantGroupTable.setStatus('mandatory')
mcbMCRedundantGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 41, 1, 5, 2, 1), ).setIndexNames((0, "DLINK-MCB-MIB", "mcbMCRedundantGroupNo"))
if mibBuilder.loadTexts: mcbMCRedundantGroupEntry.setStatus('mandatory')
mcbMCRedundantGroupNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCRedundantGroupNo.setStatus('mandatory')
mcbMCRedundantGroupPrimarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCRedundantGroupPrimarySlot.setStatus('mandatory')
mcbMCRedundantGroupSecondarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCRedundantGroupSecondarySlot.setStatus('mandatory')
mcbMCRedundantGroupEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbMCRedundantGroupEnable.setStatus('mandatory')
mcbMCRedundantGroupActiveSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbMCRedundantGroupActiveSlot.setStatus('mandatory')
mcbMCRedundantGroupRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 41, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("action", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbMCRedundantGroupRestart.setStatus('mandatory')
mcbPowerOneFail = NotificationType((1, 3, 6, 1, 4, 1, 171, 41, 1) + (0,1))
mcbFanOneFail = NotificationType((1, 3, 6, 1, 4, 1, 171, 41, 1) + (0,2))
mcbPowerTwoFail = NotificationType((1, 3, 6, 1, 4, 1, 171, 41, 1) + (0,3))
mcbFanTwoFail = NotificationType((1, 3, 6, 1, 4, 1, 171, 41, 1) + (0,4))
mcbMediaConverterPlugin = NotificationType((1, 3, 6, 1, 4, 1, 171, 41, 1) + (0,5)).setObjects(("DLINK-MCB-MIB", "mcbMCSlotNo"))
mcbMediaConverterPullout = NotificationType((1, 3, 6, 1, 4, 1, 171, 41, 1) + (0,6)).setObjects(("DLINK-MCB-MIB", "mcbMCSlotNo"))
mcbMCMediaOneLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 171, 41, 1) + (0,7)).setObjects(("DLINK-MCB-MIB", "mcbMCSlotNo"))
mcbMCMediaTwoLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 171, 41, 1) + (0,8)).setObjects(("DLINK-MCB-MIB", "mcbMCSlotNo"))
mcbMCMediaOneLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 171, 41, 1) + (0,9)).setObjects(("DLINK-MCB-MIB", "mcbMCSlotNo"))
mcbMCMediaTwoLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 171, 41, 1) + (0,10)).setObjects(("DLINK-MCB-MIB", "mcbMCSlotNo"))
mcbMCMediaOneBroken = NotificationType((1, 3, 6, 1, 4, 1, 171, 41, 1) + (0,11)).setObjects(("DLINK-MCB-MIB", "mcbMCSlotNo"))
mcbMCMediaTwoBroken = NotificationType((1, 3, 6, 1, 4, 1, 171, 41, 1) + (0,12)).setObjects(("DLINK-MCB-MIB", "mcbMCSlotNo"))
mcbMCActiveSlotChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 41, 1) + (0,13)).setObjects(("DLINK-MCB-MIB", "mcbMCRedundantGroupNo"))
mcbMCActiveSlotLose = NotificationType((1, 3, 6, 1, 4, 1, 171, 41, 1) + (0,14)).setObjects(("DLINK-MCB-MIB", "mcbMCRedundantGroupNo"))
mibBuilder.exportSymbols("DLINK-MCB-MIB", mcbMCMediaTwoLinkDown=mcbMCMediaTwoLinkDown, mcbMCRedundantGroupEnable=mcbMCRedundantGroupEnable, mcbPowerOneFail=mcbPowerOneFail, mcbMCMediaTwoLinkStatus=mcbMCMediaTwoLinkStatus, mcbMCMediaOneLinkDown=mcbMCMediaOneLinkDown, mcbMCMediaOneBrokenStatus=mcbMCMediaOneBrokenStatus, mcbMCMediaOneType=mcbMCMediaOneType, mcbSNMPMIB=mcbSNMPMIB, mcbMCRedundantGroupPrimarySlot=mcbMCRedundantGroupPrimarySlot, mcbFramePowerOneFailStatus=mcbFramePowerOneFailStatus, mcbMCMediaTwoBrokenStatus=mcbMCMediaTwoBrokenStatus, mcbMCSlotName=mcbMCSlotName, mcbMCRedundantGroupRestart=mcbMCRedundantGroupRestart, mcbMCSetLLCF=mcbMCSetLLCF, mcbMCMediaTwoSpeedStatus=mcbMCMediaTwoSpeedStatus, mcbMCEnableMediaOne=mcbMCEnableMediaOne, mcbMCRedundantGroupNo=mcbMCRedundantGroupNo, mcbMCActiveSlotLose=mcbMCActiveSlotLose, mcbMediaConverterFamily=mcbMediaConverterFamily, mcbMCSlotCount=mcbMCSlotCount, mcbFramePowerOneOnStatus=mcbFramePowerOneOnStatus, mcbMCSlotEntry=mcbMCSlotEntry, mcbMCRedundantGroupEntry=mcbMCRedundantGroupEntry, mcbMCMediaOneRxPacketCount=mcbMCMediaOneRxPacketCount, mcbMCSetMediaOneFlowControl=mcbMCSetMediaOneFlowControl, mcbSNMPTrapMCPullout=mcbSNMPTrapMCPullout, mcbMCFrame=mcbMCFrame, mcbFrameFanTwoFailStatus=mcbFrameFanTwoFailStatus, mcbMCSetMediaOneAutoNegotiate=mcbMCSetMediaOneAutoNegotiate, mcbMCRedundantGroups=mcbMCRedundantGroups, mcbMCRedundantGroupSecondarySlot=mcbMCRedundantGroupSecondarySlot, mcbFramePowerTwoFailStatus=mcbFramePowerTwoFailStatus, mcbMediaConverterPlugin=mcbMediaConverterPlugin, mcbMCSetMediaTwoLLR=mcbMCSetMediaTwoLLR, mcbSNMPTrapMCActiveSlotLose=mcbSNMPTrapMCActiveSlotLose, mcbMCSetMediaOneDuplex=mcbMCSetMediaOneDuplex, mcbMCSetMediaOneLLR=mcbMCSetMediaOneLLR, mcbAdministratorFactoryResetCPU=mcbAdministratorFactoryResetCPU, mcbAdministratorHardwareRev=mcbAdministratorHardwareRev, mcbSNMPTrapPowerFail=mcbSNMPTrapPowerFail, mcbFrameFanOneFailStatus=mcbFrameFanOneFailStatus, mcbAdministrator=mcbAdministrator, mcbMCSlotTable=mcbMCSlotTable, mcbMCMediaOneSpeedStatus=mcbMCMediaOneSpeedStatus, mcbMCSlots=mcbMCSlots, mcbPowerTwoFail=mcbPowerTwoFail, mcbSNMPTrapMCLinkBroken=mcbSNMPTrapMCLinkBroken, mcbMCSlotExist=mcbMCSlotExist, mcbMCModelName=mcbMCModelName, mcbMCMediaOneTxPacketCount=mcbMCMediaOneTxPacketCount, mcbMediaConverterPullout=mcbMediaConverterPullout, mcbAdministratorSoftwareReboot=mcbAdministratorSoftwareReboot, mcbAdministratorFactoryReset=mcbAdministratorFactoryReset, mcbFanTwoFail=mcbFanTwoFail, mcbMCMediaOneLinkUp=mcbMCMediaOneLinkUp, mcbSNMPTrapMCLinkDown=mcbSNMPTrapMCLinkDown, mcbMCMediaOneLinkStatus=mcbMCMediaOneLinkStatus, mcbMCMediaTwoRxPacketCount=mcbMCMediaTwoRxPacketCount, mcbMCMediaTwoLinkUp=mcbMCMediaTwoLinkUp, mcbMediaConverterChassis=mcbMediaConverterChassis, company=company, mcbMCSetMediaTwoDuplex=mcbMCSetMediaTwoDuplex, mcbMCEnableMediaTwo=mcbMCEnableMediaTwo, mcbMCMediaOneDupStatus=mcbMCMediaOneDupStatus, mcbMCMediaTwoTxPacketCount=mcbMCMediaTwoTxPacketCount, mcbMCSetMediaOneSpeed=mcbMCSetMediaOneSpeed, mcbSNMPTrapMCActiveSlotChange=mcbSNMPTrapMCActiveSlotChange, mcbAdministratorBiosRev=mcbAdministratorBiosRev, mcbMCRedundantGroupCount=mcbMCRedundantGroupCount, mcbMCRedundantGroupActiveSlot=mcbMCRedundantGroupActiveSlot, mcbMCSlotNo=mcbMCSlotNo, mcbMCSetMediaTwoAutoNegotiate=mcbMCSetMediaTwoAutoNegotiate, mcbMCMediaOneBroken=mcbMCMediaOneBroken, mcbMCEnable=mcbMCEnable, mcbSNMPTrapMCLinkUp=mcbSNMPTrapMCLinkUp, mcbSNMPTrapMCPlugin=mcbSNMPTrapMCPlugin, mcbMCMediaTwoBroken=mcbMCMediaTwoBroken, mcbFramePowerTwoOnStatus=mcbFramePowerTwoOnStatus, mcbMCSetMediaTwoSpeed=mcbMCSetMediaTwoSpeed, mcbMCSetMediaTwoFlowControl=mcbMCSetMediaTwoFlowControl, mcbMCMediaTwoType=mcbMCMediaTwoType, mcbAdministratorSoftwareRev=mcbAdministratorSoftwareRev, mcbMCActiveSlotChange=mcbMCActiveSlotChange, mcbFanOneFail=mcbFanOneFail, mcbMCMediaTwoDupStatus=mcbMCMediaTwoDupStatus, mcbSNMPTrapFanFail=mcbSNMPTrapFanFail, mcbMCRedundantGroupTable=mcbMCRedundantGroupTable)
