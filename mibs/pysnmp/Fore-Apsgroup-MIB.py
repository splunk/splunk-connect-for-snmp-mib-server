#
# PySNMP MIB module Fore-Apsgroup-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-Apsgroup-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:03:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
asx, atmSwitch = mibBuilder.importSymbols("Fore-Common-MIB", "asx", "atmSwitch")
hwPortBoard, hwPortModule, hwPortName, hwPortNumber = mibBuilder.importSymbols("Fore-Switch-MIB", "hwPortBoard", "hwPortModule", "hwPortName", "hwPortNumber")
trapLogIndex, = mibBuilder.importSymbols("Fore-TrapLog-MIB", "trapLogIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Gauge32, Bits, Integer32, IpAddress, NotificationType, MibIdentifier, iso, Counter64, Unsigned32, Counter32, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "Bits", "Integer32", "IpAddress", "NotificationType", "MibIdentifier", "iso", "Counter64", "Unsigned32", "Counter32", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
foreAps = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16))
if mibBuilder.loadTexts: foreAps.setLastUpdated('9912090000Z')
if mibBuilder.loadTexts: foreAps.setOrganization('FORE')
apsPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 1))
apsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 2))
apsPortTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 1, 1), )
if mibBuilder.loadTexts: apsPortTable.setStatus('current')
apsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 1, 1, 1), ).setIndexNames((0, "Fore-Apsgroup-MIB", "apsBoard"), (0, "Fore-Apsgroup-MIB", "apsModule"), (0, "Fore-Apsgroup-MIB", "apsPort"))
if mibBuilder.loadTexts: apsPortEntry.setStatus('current')
apsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsBoard.setStatus('current')
apsModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsModule.setStatus('current')
apsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsPort.setStatus('current')
apsAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("working", 1), ("protection", 2), ("unprotected", 3))).clone('unprotected')).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsAdminMode.setStatus('current')
apsOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("notApplicable", 3), ("loopbackOn", 4), ("loopbackOff", 5))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsOperMode.setStatus('current')
apsPortGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsPortGroupName.setStatus('current')
apsGroupTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 2, 1), )
if mibBuilder.loadTexts: apsGroupTable.setStatus('current')
apsGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 2, 1, 1), ).setIndexNames((0, "Fore-Apsgroup-MIB", "apsGroupName"))
if mibBuilder.loadTexts: apsGroupEntry.setStatus('current')
apsGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsGroupName.setStatus('current')
apsGroupStateCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("clear", 1), ("lockout", 2), ("forceSwitchToWorking", 3), ("forceSwitchToProtection", 4), ("manualSwitchToWorking", 5), ("manualSwitchToProtection", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsGroupStateCommand.setStatus('current')
apsGroupLastCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("clear", 1), ("lockout", 2), ("forceSwitchToWorking", 3), ("forceSwitchToProtection", 4), ("manualSwitchToWorking", 5), ("manualSwitchToProtection", 6), ("suspendWorking", 7), ("suspendProtection", 8), ("noRequest", 9))).clone('noRequest')).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsGroupLastCommand.setStatus('current')
apsWorkingLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("signalFailure", 1), ("signalDegrade", 2), ("none", 3), ("notAvailable", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsWorkingLineState.setStatus('current')
apsProtectionLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("signalFailure", 1), ("signalDegrade", 2), ("none", 3), ("notAvailable", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtectionLineState.setStatus('current')
apsGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni-directional", 1), ("bi-directional", 2))).clone('uni-directional')).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsGroupMode.setStatus('current')
apsRxK1K2 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("lockout", 1), ("forceSwitch", 2), ("manualSwitch", 3), ("signalFailure", 4), ("signalDegrade", 5), ("exercise", 6), ("waitToRestore", 7), ("reverseRequest", 8), ("doNotRevert", 9), ("noRequest", 10), ("none", 11), ("notAvailable", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsRxK1K2.setStatus('current')
apsRxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("working", 1), ("protection", 2), ("not-applicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsRxChannel.setStatus('current')
apsTxK1K2 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("lockout", 1), ("forceSwitch", 2), ("manualSwitch", 3), ("signalFailure", 4), ("signalDegrade", 5), ("exercise", 6), ("waitToRestore", 7), ("reverseRequest", 8), ("doNotRevert", 9), ("noRequest", 10), ("none", 11), ("notAvailable", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsTxK1K2.setStatus('current')
apsTxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("working", 1), ("protection", 2), ("not-applicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsTxChannel.setStatus('current')
apsRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsRevertMode.setStatus('current')
apsRevertTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 16, 2, 1, 1, 12), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsRevertTimer.setStatus('current')
apsSwitchOver = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2017)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: apsSwitchOver.setStatus('current')
mibBuilder.exportSymbols("Fore-Apsgroup-MIB", foreAps=foreAps, apsTxChannel=apsTxChannel, apsGroupEntry=apsGroupEntry, apsPortTable=apsPortTable, apsGroupTable=apsGroupTable, apsBoard=apsBoard, apsGroupStateCommand=apsGroupStateCommand, PYSNMP_MODULE_ID=foreAps, apsGroupName=apsGroupName, apsProtectionLineState=apsProtectionLineState, apsPort=apsPort, apsRevertMode=apsRevertMode, apsWorkingLineState=apsWorkingLineState, apsRevertTimer=apsRevertTimer, apsTxK1K2=apsTxK1K2, apsPortGroup=apsPortGroup, apsSwitchOver=apsSwitchOver, apsGroupLastCommand=apsGroupLastCommand, apsPortGroupName=apsPortGroupName, apsRxChannel=apsRxChannel, apsAdminMode=apsAdminMode, apsPortEntry=apsPortEntry, apsModule=apsModule, apsGroupMode=apsGroupMode, apsRxK1K2=apsRxK1K2, apsOperMode=apsOperMode, apsGroup=apsGroup)
