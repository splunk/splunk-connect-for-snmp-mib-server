#
# PySNMP MIB module TERAWAVE-teraCon-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TERAWAVE-teraCon-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:08:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, TimeTicks, iso, Counter64, ModuleIdentity, MibIdentifier, Gauge32, ObjectIdentity, Unsigned32, NotificationType, Bits, IpAddress, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "TimeTicks", "iso", "Counter64", "ModuleIdentity", "MibIdentifier", "Gauge32", "ObjectIdentity", "Unsigned32", "NotificationType", "Bits", "IpAddress", "Counter32", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
terawave = MibIdentifier((1, 3, 6, 1, 4, 1, 4513))
connections = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 2))
conTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 2, 1), )
if mibBuilder.loadTexts: conTable.setStatus('mandatory')
nextConTableEntryIndex = MibScalar((1, 3, 6, 1, 4, 1, 4513, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextConTableEntryIndex.setStatus('mandatory')
conTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2), ).setIndexNames((0, "TERAWAVE-teraCon-MIB", "circuitCONID"))
if mibBuilder.loadTexts: conTableEntry.setStatus('mandatory')
circuitCONID = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitCONID.setStatus('mandatory')
circuitCONName = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitCONName.setStatus('mandatory')
serviceCONType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("tdm-tdm", 1), ("tdm-pvc", 2), ("pvc-pvc", 3), ("lan-pvc", 4), ("lan-lan", 5), ("lan2pvc", 6), ("vlan-trunk", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceCONType.setStatus('mandatory')
firstCONIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firstCONIfIndex.setStatus('mandatory')
secondCONIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondCONIfIndex.setStatus('mandatory')
firstCONVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firstCONVPI.setStatus('mandatory')
firstCONVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firstCONVCI.setStatus('mandatory')
secondCONVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondCONVPI.setStatus('mandatory')
secondCONVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondCONVCI.setStatus('mandatory')
conVLANNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: conVLANNumber.setStatus('mandatory')
requestedCONBW = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("atm", 1), ("vlan-c", 2), ("t1", 3), ("e1", 4), ("ds3", 5), ("e3", 6), ("oc3", 7), ("stm1", 8), ("atm-vpi", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: requestedCONBW.setStatus('mandatory')
firstInternalVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firstInternalVPI.setStatus('mandatory')
firstInternalVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firstInternalVCI.setStatus('mandatory')
secondInternalVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondInternalVPI.setStatus('mandatory')
secondInternalVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondInternalVCI.setStatus('mandatory')
rowCONTableAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rowCONTableAction.setStatus('mandatory')
conStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: conStatus.setStatus('mandatory')
conUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: conUserId.setStatus('mandatory')
conUserConId = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 1, 2, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: conUserConId.setStatus('mandatory')
circTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 2, 2), )
if mibBuilder.loadTexts: circTable.setStatus('mandatory')
circTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 2, 2, 1), ).setIndexNames((0, "TERAWAVE-teraCon-MIB", "circuitCONID"))
if mibBuilder.loadTexts: circTableEntry.setStatus('mandatory')
cmFirstInternalVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFirstInternalVPI.setStatus('mandatory')
cmFirstInternalVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFirstInternalVCI.setStatus('mandatory')
cmSecondInternalVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSecondInternalVPI.setStatus('mandatory')
cmSecondInternalVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmSecondInternalVCI.setStatus('mandatory')
bandwidthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 2, 3))
bwGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 2, 3, 1), )
if mibBuilder.loadTexts: bwGroupTable.setStatus('mandatory')
bwGroupTableNextId = MibScalar((1, 3, 6, 1, 4, 1, 4513, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwGroupTableNextId.setStatus('mandatory')
bwGroupTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 2, 3, 1, 2), ).setIndexNames((0, "TERAWAVE-teraCon-MIB", "bwGroupId"))
if mibBuilder.loadTexts: bwGroupTableEntry.setStatus('mandatory')
bwGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 3, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwGroupId.setStatus('mandatory')
bwGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 3, 1, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGroupName.setStatus('mandatory')
requestedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 3, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: requestedBandwidth.setStatus('mandatory')
maxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 3, 1, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxBandwidth.setStatus('mandatory')
bwGroupPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 3, 1, 2, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGroupPorts.setStatus('mandatory')
bwGroupTableAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 3, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwGroupTableAction.setStatus('mandatory')
teraStaticBWTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 2, 4), )
if mibBuilder.loadTexts: teraStaticBWTable.setStatus('mandatory')
teraStaticBWTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 2, 4, 1), ).setIndexNames((0, "TERAWAVE-teraCon-MIB", "teraInstallSlotNumber"))
if mibBuilder.loadTexts: teraStaticBWTableEntry.setStatus('mandatory')
teraStaticBWTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraStaticBWTotal.setStatus('mandatory')
teraStaticBWcbr = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraStaticBWcbr.setStatus('mandatory')
teraStaticBWaux = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraStaticBWaux.setStatus('mandatory')
teraStaticBWvbr = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraStaticBWvbr.setStatus('mandatory')
teraStaticAllocBWvbr = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraStaticAllocBWvbr.setStatus('mandatory')
teraStaticSplitBWTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 2, 5), )
if mibBuilder.loadTexts: teraStaticSplitBWTable.setStatus('mandatory')
teraStaticSplitBWTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 2, 5, 1), ).setIndexNames((0, "TERAWAVE-teraCon-MIB", "teraInstallSlotNumber"), (0, "TERAWAVE-teraCon-MIB", "teraNEIDxSlotLevel1"))
if mibBuilder.loadTexts: teraStaticSplitBWTableEntry.setStatus('mandatory')
teraStaticSplitBWVBRConn = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraStaticSplitBWVBRConn.setStatus('mandatory')
teraStaticSplitBWCBRConn = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraStaticSplitBWCBRConn.setStatus('mandatory')
teraStaticSplitBWEffective = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraStaticSplitBWEffective.setStatus('mandatory')
teraStaticSplitBWUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraStaticSplitBWUnits.setStatus('mandatory')
teraStaticSplitBWUnitsBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraStaticSplitBWUnitsBandwidth.setStatus('mandatory')
teraStaticSplitBWAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraStaticSplitBWAllocated.setStatus('mandatory')
teraCraftCMTable = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 2, 6))
teraCraftCMAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 4513, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("granted", 1), ("notgranted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraCraftCMAdminStatus.setStatus('mandatory')
teraCraftCMOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 4513, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("wait4ack", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraCraftCMOperStatus.setStatus('mandatory')
teraManagementPVCTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 2, 7), )
if mibBuilder.loadTexts: teraManagementPVCTable.setStatus('mandatory')
teraManagementPVCTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 2, 7, 1), ).setIndexNames((0, "TERAWAVE-teraCon-MIB", "teraManagementPVCNumber"))
if mibBuilder.loadTexts: teraManagementPVCTableEntry.setStatus('mandatory')
teraManagementPVCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraManagementPVCNumber.setStatus('mandatory')
teraManagementPVCAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraManagementPVCAdminStatus.setStatus('mandatory')
teraManagementPVCPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraManagementPVCPortIfIndex.setStatus('mandatory')
teraManagementPVCVclVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraManagementPVCVclVpi.setStatus('mandatory')
teraManagementPVCVclVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraManagementPVCVclVci.setStatus('mandatory')
teraManagementPVCIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 7, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraManagementPVCIPAddress.setStatus('mandatory')
teraManagementPVCIPNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 7, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraManagementPVCIPNetMask.setStatus('mandatory')
teraManagementPVCIPGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 7, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraManagementPVCIPGateway.setStatus('mandatory')
teraManagementPVCIPMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraManagementPVCIPMtu.setStatus('mandatory')
teraManagementPVCIPEncapsType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("llcNone", 1), ("llcRoutedIPv4", 2), ("llcRoutedIPv4AtmArp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraManagementPVCIPEncapsType.setStatus('mandatory')
teraONTconTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 2, 8), )
if mibBuilder.loadTexts: teraONTconTable.setStatus('mandatory')
teraONTconTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 2, 8, 1), ).setIndexNames((0, "TERAWAVE-teraCon-MIB", "teraONTconID"))
if mibBuilder.loadTexts: teraONTconTableEntry.setStatus('mandatory')
teraONTconID = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraONTconID.setStatus('mandatory')
teraONTfirstCONIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraONTfirstCONIfIndex.setStatus('mandatory')
teraONTsecondCONIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraONTsecondCONIfIndex.setStatus('mandatory')
teraONTfirstCONVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraONTfirstCONVPI.setStatus('mandatory')
teraONTfirstCONVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraONTfirstCONVCI.setStatus('mandatory')
teraONTsecondCONVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraONTsecondCONVPI.setStatus('mandatory')
teraONTsecondCONVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraONTsecondCONVCI.setStatus('mandatory')
teraONTconVLANNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraONTconVLANNumber.setStatus('mandatory')
teraONTrequestedCONBW = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("atm", 1), ("vlan-c", 2), ("t1", 3), ("e1", 4), ("ds3", 5), ("e3", 6), ("oc3", 7), ("stm1", 8), ("atm-vpi", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraONTrequestedCONBW.setStatus('mandatory')
teraONTfirstInternalVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraONTfirstInternalVPI.setStatus('mandatory')
teraONTfirstInternalVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraONTfirstInternalVCI.setStatus('mandatory')
teraONTsecondInternalVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 8, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraONTsecondInternalVPI.setStatus('mandatory')
teraONTsecondInternalVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 8, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraONTsecondInternalVCI.setStatus('mandatory')
teraONTconStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 2, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraONTconStatus.setStatus('mandatory')
mibBuilder.exportSymbols("TERAWAVE-teraCon-MIB", conTableEntry=conTableEntry, teraManagementPVCIPEncapsType=teraManagementPVCIPEncapsType, cmFirstInternalVPI=cmFirstInternalVPI, firstCONIfIndex=firstCONIfIndex, firstCONVCI=firstCONVCI, teraStaticBWTotal=teraStaticBWTotal, teraCraftCMTable=teraCraftCMTable, teraManagementPVCTableEntry=teraManagementPVCTableEntry, teraManagementPVCIPAddress=teraManagementPVCIPAddress, rowCONTableAction=rowCONTableAction, teraStaticSplitBWTableEntry=teraStaticSplitBWTableEntry, teraManagementPVCIPNetMask=teraManagementPVCIPNetMask, requestedCONBW=requestedCONBW, teraONTfirstCONVCI=teraONTfirstCONVCI, teraONTconID=teraONTconID, teraCraftCMAdminStatus=teraCraftCMAdminStatus, teraCraftCMOperStatus=teraCraftCMOperStatus, teraONTsecondCONIfIndex=teraONTsecondCONIfIndex, teraONTsecondInternalVPI=teraONTsecondInternalVPI, teraONTconStatus=teraONTconStatus, teraManagementPVCIPGateway=teraManagementPVCIPGateway, bwGroupName=bwGroupName, nextConTableEntryIndex=nextConTableEntryIndex, requestedBandwidth=requestedBandwidth, teraStaticBWTable=teraStaticBWTable, secondCONVPI=secondCONVPI, teraStaticAllocBWvbr=teraStaticAllocBWvbr, teraStaticBWaux=teraStaticBWaux, teraStaticSplitBWVBRConn=teraStaticSplitBWVBRConn, teraStaticSplitBWAllocated=teraStaticSplitBWAllocated, teraManagementPVCAdminStatus=teraManagementPVCAdminStatus, teraONTsecondCONVCI=teraONTsecondCONVCI, circTable=circTable, teraManagementPVCVclVpi=teraManagementPVCVclVpi, teraManagementPVCPortIfIndex=teraManagementPVCPortIfIndex, bwGroupTableAction=bwGroupTableAction, teraONTconTableEntry=teraONTconTableEntry, conStatus=conStatus, terawave=terawave, firstInternalVCI=firstInternalVCI, teraManagementPVCIPMtu=teraManagementPVCIPMtu, teraManagementPVCTable=teraManagementPVCTable, connections=connections, bandwidthGroup=bandwidthGroup, teraONTfirstCONIfIndex=teraONTfirstCONIfIndex, firstInternalVPI=firstInternalVPI, teraStaticSplitBWUnitsBandwidth=teraStaticSplitBWUnitsBandwidth, bwGroupTableEntry=bwGroupTableEntry, maxBandwidth=maxBandwidth, teraONTfirstCONVPI=teraONTfirstCONVPI, conUserId=conUserId, circuitCONID=circuitCONID, teraONTconTable=teraONTconTable, cmSecondInternalVPI=cmSecondInternalVPI, secondInternalVCI=secondInternalVCI, cmSecondInternalVCI=cmSecondInternalVCI, conVLANNumber=conVLANNumber, firstCONVPI=firstCONVPI, teraManagementPVCNumber=teraManagementPVCNumber, teraStaticBWTableEntry=teraStaticBWTableEntry, teraStaticBWcbr=teraStaticBWcbr, bwGroupTableNextId=bwGroupTableNextId, bwGroupPorts=bwGroupPorts, teraONTsecondInternalVCI=teraONTsecondInternalVCI, teraStaticSplitBWUnits=teraStaticSplitBWUnits, teraONTfirstInternalVCI=teraONTfirstInternalVCI, bwGroupId=bwGroupId, bwGroupTable=bwGroupTable, conUserConId=conUserConId, teraStaticBWvbr=teraStaticBWvbr, circuitCONName=circuitCONName, secondInternalVPI=secondInternalVPI, teraONTsecondCONVPI=teraONTsecondCONVPI, teraONTconVLANNumber=teraONTconVLANNumber, teraStaticSplitBWTable=teraStaticSplitBWTable, teraStaticSplitBWCBRConn=teraStaticSplitBWCBRConn, secondCONVCI=secondCONVCI, teraONTfirstInternalVPI=teraONTfirstInternalVPI, teraONTrequestedCONBW=teraONTrequestedCONBW, circTableEntry=circTableEntry, secondCONIfIndex=secondCONIfIndex, teraManagementPVCVclVci=teraManagementPVCVclVci, conTable=conTable, serviceCONType=serviceCONType, teraStaticSplitBWEffective=teraStaticSplitBWEffective, cmFirstInternalVCI=cmFirstInternalVCI)
