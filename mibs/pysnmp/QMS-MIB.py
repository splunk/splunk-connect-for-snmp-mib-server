#
# PySNMP MIB module QMS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/QMS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:35:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
snmp, = mibBuilder.importSymbols("RFC1158-MIB", "snmp")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, ObjectIdentity, Unsigned32, NotificationType, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, iso, Bits, TimeTicks, enterprises, Gauge32, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "Unsigned32", "NotificationType", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "iso", "Bits", "TimeTicks", "enterprises", "Gauge32", "NotificationType", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
qmsInc = MibIdentifier((1, 3, 6, 1, 4, 1, 480))
qmsUIH = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1))
qmsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 1))
qmsMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 5))
qmsIoCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 101))
qmsHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 102))
qmsIoTimeOuts = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 103))
qmsIoPages = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 104))
qmsSerial = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 160))
qmsParallel = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 161))
qmsEngine = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 304))
qmsAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 401))
qmsScanner = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 402))
qmsCostPerPage = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 403))
qmsColorMatch = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 404))
qmsPS = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 520))
qmsHPGL = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 524))
qmsHPPCL = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 525))
qmsDECLN03 = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 532))
qmsQUIC2 = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 534))
qmsCCITT = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 538))
qmsLinePrinter = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 539))
qmsTIFF = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 541))
qmsCALS = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 542))
qmsCGM = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 544))
qmsSYSPageCount = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1001), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSPageCount.setStatus('mandatory')
qmsSYSSheetCount = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1002), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSSheetCount.setStatus('mandatory')
qmsSYSPrinterModel = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1003), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSPrinterModel.setStatus('mandatory')
qmsSYSPrinterVersion = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1004), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSPrinterVersion.setStatus('mandatory')
qmsSYSPrinterName = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1005), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSYSPrinterName.setStatus('mandatory')
qmsSYSA3PageCount = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1006), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSA3PageCount.setStatus('mandatory')
qmsSYSA3SheetCount = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1007), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSA3SheetCount.setStatus('mandatory')
qmsSYSFPA = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1008), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSFPA.setStatus('mandatory')
qmsSYSSystemImage = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1009), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("flashSystem", 2), ("diskSystem", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSSystemImage.setStatus('mandatory')
qmsSYSDiskSwap = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1010), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("diskSwapingDisabled", 1), ("diskSwapingEnabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSDiskSwap.setStatus('mandatory')
qmsSYSMultiRes = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1011), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notSupported", 1), ("notPresent", 2), ("lowMemory", 3), ("disabled", 4), ("optional", 5), ("standard", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSMultiRes.setStatus('mandatory')
qmsMEMPhysical = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsMEMPhysical.setStatus('mandatory')
qmsMEMTotal = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsMEMTotal.setStatus('mandatory')
qmsClientSystem = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientSystem.setStatus('mandatory')
qmsClientSpool = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientSpool.setStatus('mandatory')
qmsClientEmulation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientEmulation.setStatus('mandatory')
qmsClientHeap = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientHeap.setStatus('mandatory')
qmsClientFontCache = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientFontCache.setStatus('mandatory')
qmsClientDisplayList = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientDisplayList.setStatus('mandatory')
qmsClientFrameBuffer = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientFrameBuffer.setStatus('mandatory')
qmsClientEmulTemp = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientEmulTemp.setStatus('mandatory')
qmsClientDisk = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientDisk.setStatus('mandatory')
qmsClientColorMatching = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientColorMatching.setStatus('mandatory')
qmsClientHPStoragePool = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientHPStoragePool.setStatus('mandatory')
qmsFEDoStartPage = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 104, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFEDoStartPage.setStatus('mandatory')
qmsFEHeaderPage = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 104, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFEHeaderPage.setStatus('mandatory')
qmsFEHeaderInputbin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 104, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFEHeaderInputbin.setStatus('mandatory')
qmsFETrailerPage = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 104, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 3, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 4), ("errorOnly", 3), ("onError", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFETrailerPage.setStatus('mandatory')
qmsFETrailerInputbin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 104, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFETrailerInputbin.setStatus('mandatory')
qmsFEDoSysStart = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 104, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFEDoSysStart.setStatus('mandatory')
qmsFEStatusPageType = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 104, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("advanced", 2), ("standard", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFEStatusPageType.setStatus('mandatory')
qmsFEEspEmul = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 101, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 13, 15, 19, 20, 22, 23, 25))).clone(namedValues=NamedValues(("postscript", 1), ("hpgl", 5), ("hppcl", 6), ("ln03", 13), ("quic2", 15), ("ccitt", 19), ("lineprinter", 20), ("tiff", 22), ("cals", 23), ("cgm", 25)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFEEspEmul.setStatus('mandatory')
qmsFECopies = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 101, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFECopies.setStatus('mandatory')
qmsFETmPSWait = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 103, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFETmPSWait.setStatus('mandatory')
qmsFETmJob = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 103, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFETmJob.setStatus('mandatory')
qmsFETmNonPSEmul = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 103, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFETmNonPSEmul.setStatus('mandatory')
qmsFETmEsp = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 103, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFETmEsp.setStatus('mandatory')
qmsHTTPContact = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 102, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHTTPContact.setStatus('mandatory')
qmsHTTPHelpURL = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 102, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHTTPHelpURL.setStatus('mandatory')
qmsHTTPContactNumber = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 102, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHTTPContactNumber.setStatus('mandatory')
qmsHTTPCorpURL = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 102, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHTTPCorpURL.setStatus('mandatory')
qmsHTTPSuppliesNumber = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 102, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHTTPSuppliesNumber.setStatus('mandatory')
qmsSerBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 104), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSerBufferSize.setStatus('mandatory')
qmsSerSpoolTimeout = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 112), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerSpoolTimeout.setStatus('mandatory')
qmsSerMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("interactive", 3), ("noninteractive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerMode.setStatus('mandatory')
qmsSerEmulation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 13, 15, 19, 20, 22, 23, 25, 201))).clone(namedValues=NamedValues(("postscript", 1), ("hpgl", 5), ("hppcl", 6), ("hexdump", 7), ("ln03", 13), ("quic2", 15), ("ccitt", 19), ("lineprinter", 20), ("tiff", 22), ("cals", 23), ("cgm", 25), ("esp", 201)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerEmulation.setStatus('mandatory')
qmsSerEndDocumentMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("qmseod", 2), ("hpeod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerEndDocumentMode.setStatus('mandatory')
qmsSerPriority = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 103), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerPriority.setStatus('mandatory')
qmsSerPSProtocol = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("normalfixed", 2), ("binary", 3), ("binaryfixed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerPSProtocol.setStatus('mandatory')
qmsSerBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 201), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(38401, 19201, 9601, 4801, 2401, 1201, 601, 301))).clone(namedValues=NamedValues(("bps38400", 38401), ("bps19200", 19201), ("bps9600", 9601), ("bps4800", 4801), ("bps2400", 2401), ("bps1200", 1201), ("bps600", 601), ("bps300", 301)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerBaudRate.setStatus('mandatory')
qmsSerHwDSRPOL = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 213), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reverse", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerHwDSRPOL.setStatus('mandatory')
qmsSerHwDSR = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 212), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerHwDSR.setStatus('mandatory')
qmsSerHwDTRPOL = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 211), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reverse", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerHwDTRPOL.setStatus('mandatory')
qmsSerHwDTR = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 210), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerHwDTR.setStatus('mandatory')
qmsSerHwRTS = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 209), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerHwRTS.setStatus('mandatory')
qmsSerHwCTS = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 208), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerHwCTS.setStatus('mandatory')
qmsSerStopBits = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 207), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("onebit", 1), ("twobits", 2), ("oneandhalf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerStopBits.setStatus('mandatory')
qmsSerDataBits = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 206), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bits8", 1), ("bits7", 2), ("bits6", 3), ("bits5", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerDataBits.setStatus('mandatory')
qmsSerTxSWFlow = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 205), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("xonxoff", 2), ("etxack", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerTxSWFlow.setStatus('mandatory')
qmsSerRxSWFlow = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 204), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("xonxoff", 2), ("etxack", 3), ("robustxonxoff", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerRxSWFlow.setStatus('mandatory')
qmsSerIgnoreParity = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 203), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerIgnoreParity.setStatus('mandatory')
qmsSerParity = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 202), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 4), ("even", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerParity.setStatus('mandatory')
qmsParBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 161, 104), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsParBufferSize.setStatus('mandatory')
qmsParSpoolTimeout = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 161, 111), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsParSpoolTimeout.setStatus('mandatory')
qmsParMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 161, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 1))).clone(namedValues=NamedValues(("interactive", 3), ("noninteractive", 4), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsParMode.setStatus('mandatory')
qmsParEmulation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 161, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 13, 15, 19, 20, 22, 23, 25, 201))).clone(namedValues=NamedValues(("postscript", 1), ("hpgl", 5), ("hppcl", 6), ("hexdump", 7), ("ln03", 13), ("quic2", 15), ("ccitt", 19), ("lineprinter", 20), ("tiff", 22), ("cals", 23), ("cgm", 25), ("esp", 201)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsParEmulation.setStatus('mandatory')
qmsParDataBits = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 161, 113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bits8", 1), ("bits7", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsParDataBits.setStatus('mandatory')
qmsParEndDocumentMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 161, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("qmseod", 2), ("hpeod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsParEndDocumentMode.setStatus('mandatory')
qmsParPriority = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 161, 103), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsParPriority.setStatus('mandatory')
qmsParPSProtocol = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 161, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("normalfixed", 2), ("binary", 3), ("binaryfixed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsParPSProtocol.setStatus('mandatory')
qmsENGTopOffset = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGTopOffset.setStatus('mandatory')
qmsENGLeftOffset = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGLeftOffset.setStatus('mandatory')
qmsENGTopOffsetDuplex = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGTopOffsetDuplex.setStatus('mandatory')
qmsENGLeftOffsetDuplex = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGLeftOffsetDuplex.setStatus('mandatory')
qmsENGResolution = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(301, 601, 1201, 2401))).clone(namedValues=NamedValues(("dpi300", 301), ("dpi600", 601), ("dpi1200", 1201), ("dpi2401", 2401)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGResolution.setStatus('mandatory')
qmsENGDefaultPaper = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("letter", 1), ("a4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGDefaultPaper.setStatus('mandatory')
qmsENGDuplex = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("longedge", 2), ("shortedge", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGDuplex.setStatus('mandatory')
qmsENGOrientation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portrait", 1), ("landscape", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGOrientation.setStatus('mandatory')
qmsENGInputbin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGInputbin.setStatus('mandatory')
qmsENGOutputbin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGOutputbin.setStatus('mandatory')
qmsENGCollation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGCollation.setStatus('mandatory')
qmsENGErrorRecovery = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGErrorRecovery.setStatus('mandatory')
qmsENGManualTrayMedia = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("letter", 1), ("legal", 2), ("executive", 3), ("sz11x17", 4), ("a3", 5), ("a4", 6), ("a5", 7), ("b4", 8), ("b5", 9), ("statement", 10), ("universal", 11), ("com10", 12), ("dl", 13), ("monarch", 14), ("c5", 15), ("envelope", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGManualTrayMedia.setStatus('mandatory')
qmsENGToneroutAction = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("continue", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGToneroutAction.setStatus('mandatory')
qmsENGLetterheadMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("duplexPath", 2), ("rotateSimplex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGLetterheadMode.setStatus('mandatory')
qmsENGManualFeedTimeout = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGManualFeedTimeout.setStatus('mandatory')
qmsENGOffsetStacking = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGOffsetStacking.setStatus('mandatory')
qmsENGEnergyStar = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 31, 61, 121, 181))).clone(namedValues=NamedValues(("off", 1), ("min15", 16), ("min30", 31), ("hour1", 61), ("hour2", 121), ("hour3", 181)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGEnergyStar.setStatus('mandatory')
qmsENGPageOrder = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reverse", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGPageOrder.setStatus('mandatory')
qmsENGEnvelopeTrayMedia = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("com10", 12), ("dl", 13), ("monarch", 14), ("c5", 15), ("envelope", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGEnvelopeTrayMedia.setStatus('mandatory')
qmsENGDensity = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGDensity.setStatus('mandatory')
qmsENGColorModel = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("gray", 2), ("cmy", 3), ("rgb", 4), ("cmyk", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGColorModel.setStatus('mandatory')
qmsENGColorSeparation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGColorSeparation.setStatus('mandatory')
qmsENGUnderColor = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGUnderColor.setStatus('mandatory')
qmsENGQuality = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("normal", 1), ("conserveToner", 2), ("smooth600dpi", 3), ("fineMode", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGQuality.setStatus('mandatory')
qmsENGConsumeNameMulti = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1000), )
if mibBuilder.loadTexts: qmsENGConsumeNameMulti.setStatus('mandatory')
qmsENGConsumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1000, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGConsumeName.setStatus('mandatory')
qmsENGConsumeLevelMulti = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1001), )
if mibBuilder.loadTexts: qmsENGConsumeLevelMulti.setStatus('mandatory')
qmsENGConsumeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1001, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGConsumeLevel.setStatus('mandatory')
qmsENGConsumeMaxMulti = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1002), )
if mibBuilder.loadTexts: qmsENGConsumeMaxMulti.setStatus('mandatory')
qmsENGConsumeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1002, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGConsumeMax.setStatus('mandatory')
qmsENGConsumeUnitsMulti = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1003), )
if mibBuilder.loadTexts: qmsENGConsumeUnitsMulti.setStatus('mandatory')
qmsENGConsumeUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1003, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGConsumeUnits.setStatus('mandatory')
qmsENGConsumeTypeMulti = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1004), )
if mibBuilder.loadTexts: qmsENGConsumeTypeMulti.setStatus('mandatory')
qmsENGConsumeType = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1004, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("invalid", 1), ("inputBin", 2), ("outputBin", 3), ("toner", 4), ("wasteToner", 5), ("opc", 6), ("fuserUnit", 7), ("fuserCRoller", 8), ("fuserOil", 9), ("pmService", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGConsumeType.setStatus('mandatory')
qmsENGConsumeNote1Multi = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1005), )
if mibBuilder.loadTexts: qmsENGConsumeNote1Multi.setStatus('mandatory')
qmsENGConsumeNote1 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1005, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGConsumeNote1.setStatus('mandatory')
qmsENGConsumeNote2Multi = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1006), )
if mibBuilder.loadTexts: qmsENGConsumeNote2Multi.setStatus('mandatory')
qmsENGConsumeNote2 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1006, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGConsumeNote2.setStatus('mandatory')
qmsENGConsumeIndexMulti = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1007), )
if mibBuilder.loadTexts: qmsENGConsumeIndexMulti.setStatus('mandatory')
qmsENGConsumeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1007, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGConsumeIndex.setStatus('mandatory')
qmsENGNumConsumables = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 1010), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGNumConsumables.setStatus('mandatory')
qmsENGChainInputBins = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 1011), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("onAny", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGChainInputBins.setStatus('mandatory')
qmsENGChainOutputbinMulti = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1012), )
if mibBuilder.loadTexts: qmsENGChainOutputbinMulti.setStatus('mandatory')
qmsENGChainOutputbin = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1012, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGChainOutputbin.setStatus('mandatory')
qmsENGInputbinMediatypeMulti = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1013), )
if mibBuilder.loadTexts: qmsENGInputbinMediatypeMulti.setStatus('mandatory')
qmsENGInputbinMediatype = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1013, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("plainPaper", 1), ("transparency", 2), ("thermal", 3), ("prePrinted", 4), ("letterhead", 5), ("prePunched", 6), ("labels", 7), ("bond", 8), ("recycled", 9), ("color", 10), ("cardStock", 11), ("thinStock", 12), ("automatic", 13), ("thickStock", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGInputbinMediatype.setStatus('mandatory')
qmsENGChainInputbinMulti = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1014), )
if mibBuilder.loadTexts: qmsENGChainInputbinMulti.setStatus('mandatory')
qmsENGChainInputbin = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1014, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGChainInputbin.setStatus('mandatory')
qmsENGStaplePosition = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 1015), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("frontCorner", 2), ("backCorner", 3), ("center", 4), ("offsetStacking", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGStaplePosition.setStatus('mandatory')
qmsACCMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 401, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsACCMode.setStatus('mandatory')
qmsACCDiskSpace = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 401, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsACCDiskSpace.setStatus('mandatory')
qmsACCFileSegment = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 401, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("single", 2), ("multiple", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsACCFileSegment.setStatus('mandatory')
qmsSCColorAdjust = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCColorAdjust.setStatus('mandatory')
qmsSCScanResolution = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(101, 151, 201, 301))).clone(namedValues=NamedValues(("dpi100", 101), ("dpi150", 151), ("dpi200", 201), ("dpi300", 301)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCScanResolution.setStatus('mandatory')
qmsSCSizeHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 850))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCSizeHorizontal.setStatus('mandatory')
qmsSCSizeVertical = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCSizeVertical.setStatus('mandatory')
qmsSCOffsetHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 850))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCOffsetHorizontal.setStatus('mandatory')
qmsSCOffsetVertical = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCOffsetVertical.setStatus('mandatory')
qmsSCCopyMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 9, 10, 11, 4, 5, 6, 7))).clone(namedValues=NamedValues(("automaticColor", 8), ("customColor", 9), ("binaryColor", 10), ("halftoneColor", 11), ("automaticGray", 4), ("customGray", 5), ("binaryBandW", 6), ("halftoneBandW", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCCopyMode.setStatus('mandatory')
qmsSCRedGammaFunction = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCRedGammaFunction.setStatus('mandatory')
qmsSCGreenGammaFunction = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCGreenGammaFunction.setStatus('mandatory')
qmsSCBlueGammaFunction = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCBlueGammaFunction.setStatus('mandatory')
qmsSCGrayGammaFunction = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("photoGraphic", 2), ("reverseImage", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCGrayGammaFunction.setStatus('mandatory')
qmsSCBinaryAdjustment = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCBinaryAdjustment.setStatus('mandatory')
qmsSCTrans = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCTrans.setStatus('mandatory')
qmsSCContrast = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCContrast.setStatus('mandatory')
qmsCPPSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 403, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsCPPSerialNumber.setStatus('mandatory')
qmsCMMICCColorMatch = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 404, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCMMICCColorMatch.setStatus('mandatory')
qmsCMMICCRGBSource = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 404, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCMMICCRGBSource.setStatus('mandatory')
qmsCMMICCSimulation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 404, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCMMICCSimulation.setStatus('mandatory')
qmsCMMICCDestination = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 404, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCMMICCDestination.setStatus('mandatory')
qmsCMMICCHP = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 404, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("srgb", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCMMICCHP.setStatus('mandatory')
qmsCMMLinkQuality = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 404, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCMMLinkQuality.setStatus('mandatory')
qmsCMMSimInRGBLinks = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 404, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCMMSimInRGBLinks.setStatus('mandatory')
qmsCMMProfileTable = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 404, 1000), )
if mibBuilder.loadTexts: qmsCMMProfileTable.setStatus('mandatory')
qmsCMMProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 480, 1, 404, 1000, 1), ).setIndexNames((0, "QMS-MIB", "qmsCMMProfileIndex"))
if mibBuilder.loadTexts: qmsCMMProfileEntry.setStatus('mandatory')
qmsCMMProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 404, 1000, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsCMMProfileIndex.setStatus('mandatory')
qmsCMMProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 404, 1000, 1, 1001), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsCMMProfileDescription.setStatus('mandatory')
qmsCMMProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 404, 1000, 1, 1002), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source", 1), ("destination", 2), ("simulation", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsCMMProfileType.setStatus('mandatory')
qmsPSErrorHandler = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 520, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsPSErrorHandler.setStatus('mandatory')
qmsPSOutputPositioning = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 520, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPSOutputPositioning.setStatus('mandatory')
qmsPSDefaultHalftone = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 520, 138), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("basic", 1), ("standard", 2), ("advanced", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsPSDefaultHalftone.setStatus('mandatory')
qmsPSDefaultBlackOverPrint = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 520, 139), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPSDefaultBlackOverPrint.setStatus('mandatory')
qmsPSDefaultCRD = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 520, 140), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPSDefaultCRD.setStatus('mandatory')
qmsPSDefaultDither = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 520, 141), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPSDefaultDither.setStatus('mandatory')
qmsPSDefaultGamma = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 520, 152), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsPSDefaultGamma.setStatus('mandatory')
qmsPSIntensity = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 520, 154), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("darkest", 1), ("darker", 2), ("normal", 3), ("lighter", 4), ("lightest", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsPSIntensity.setStatus('mandatory')
qmsHPGLPaperType = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("a", 1), ("a4", 2), ("b", 3), ("a3", 4), ("c", 5), ("d", 6), ("e", 7), ("cArch", 8), ("dArch", 9), ("eArch", 10), ("a2", 11), ("a1", 12), ("a0", 13), ("scaleToPaper", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPaperType.setStatus('mandatory')
qmsHPGLPlotter = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("plotter7475A", 1), ("plotter7470A", 2), ("colorpro", 3), ("plotter7550A", 4), ("draftmaster", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPlotter.setStatus('mandatory')
qmsHPGLScalingPercent = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLScalingPercent.setStatus('mandatory')
qmsHPGLEnhancedMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLEnhancedMode.setStatus('mandatory')
qmsHPGLExpandMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLExpandMode.setStatus('mandatory')
qmsHPGLPenWidth1 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenWidth1.setStatus('mandatory')
qmsHPGLPenWidth2 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenWidth2.setStatus('mandatory')
qmsHPGLPenWidth3 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenWidth3.setStatus('mandatory')
qmsHPGLPenWidth4 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenWidth4.setStatus('mandatory')
qmsHPGLPenWidth5 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenWidth5.setStatus('mandatory')
qmsHPGLPenWidth6 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenWidth6.setStatus('mandatory')
qmsHPGLPenWidth7 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenWidth7.setStatus('mandatory')
qmsHPGLPenWidth8 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenWidth8.setStatus('mandatory')
qmsHPGLPenColor1 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("red", 2), ("orange", 3), ("yellow", 4), ("green", 5), ("blue", 6), ("cyan", 7), ("magenta", 8), ("black", 9), ("violet", 10), ("brown", 11), ("gray25Percent", 12), ("gray50Percent", 13), ("gray75Percent", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenColor1.setStatus('mandatory')
qmsHPGLPenColor2 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("red", 2), ("orange", 3), ("yellow", 4), ("green", 5), ("blue", 6), ("cyan", 7), ("magenta", 8), ("black", 9), ("violet", 10), ("brown", 11), ("gray25Percent", 12), ("gray50Percent", 13), ("gray75Percent", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenColor2.setStatus('mandatory')
qmsHPGLPenColor3 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("red", 2), ("orange", 3), ("yellow", 4), ("green", 5), ("blue", 6), ("cyan", 7), ("magenta", 8), ("black", 9), ("violet", 10), ("brown", 11), ("gray25Percent", 12), ("gray50Percent", 13), ("gray75Percent", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenColor3.setStatus('mandatory')
qmsHPGLPenColor4 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("red", 2), ("orange", 3), ("yellow", 4), ("green", 5), ("blue", 6), ("cyan", 7), ("magenta", 8), ("black", 9), ("violet", 10), ("brown", 11), ("gray25Percent", 12), ("gray50Percent", 13), ("gray75Percent", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenColor4.setStatus('mandatory')
qmsHPGLPenColor5 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("red", 2), ("orange", 3), ("yellow", 4), ("green", 5), ("blue", 6), ("cyan", 7), ("magenta", 8), ("black", 9), ("violet", 10), ("brown", 11), ("gray25Percent", 12), ("gray50Percent", 13), ("gray75Percent", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenColor5.setStatus('mandatory')
qmsHPGLPenColor6 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("red", 2), ("orange", 3), ("yellow", 4), ("green", 5), ("blue", 6), ("cyan", 7), ("magenta", 8), ("black", 9), ("violet", 10), ("brown", 11), ("gray25Percent", 12), ("gray50Percent", 13), ("gray75Percent", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenColor6.setStatus('mandatory')
qmsHPGLPenColor7 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("red", 2), ("orange", 3), ("yellow", 4), ("green", 5), ("blue", 6), ("cyan", 7), ("magenta", 8), ("black", 9), ("violet", 10), ("brown", 11), ("gray25Percent", 12), ("gray50Percent", 13), ("gray75Percent", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenColor7.setStatus('mandatory')
qmsHPGLPenColor8 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("red", 2), ("orange", 3), ("yellow", 4), ("green", 5), ("blue", 6), ("cyan", 7), ("magenta", 8), ("black", 9), ("violet", 10), ("brown", 11), ("gray25Percent", 12), ("gray50Percent", 13), ("gray75Percent", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenColor8.setStatus('mandatory')
qmsHPPCLLineTermination = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 525, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("crEQcr-lfEQlf", 1), ("crEQcrANDlf-lfEQlf", 2), ("crEQcr-lfEQcrANDlf", 3), ("crORlfEQcrANDlf", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPPCLLineTermination.setStatus('mandatory')
qmsHPPCLFontNumber = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 525, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("courier12", 1), ("courier12Bold", 2), ("courier12Italic", 3), ("courier10", 4), ("courier10Bold", 5), ("courier10Italic", 6), ("lineprinter", 7), ("times", 8), ("timesItalic", 9), ("timesBold", 10), ("timesBldItalic", 11), ("univ", 12), ("univItalic", 13), ("univBold", 14), ("univBoldItalic", 15), ("univcond", 16), ("univcondItalic", 17), ("univcondBold", 18), ("univcondBldItlc", 19), ("selectByIndex", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPPCLFontNumber.setStatus('mandatory')
qmsHPPCLLinesPerInch = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 525, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 4800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPPCLLinesPerInch.setStatus('mandatory')
qmsHPPCLDefaultSymbolSet = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 525, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(278, 15, 79, 175, 342, 374, 406, 566, 309, 630, 294, 181, 235, 331, 427, 459, 203, 270, 174, 206, 502, 54, 38, 22, 20, 10, 84, 40, 5, 39, 310, 395))).clone(namedValues=NamedValues(("roman8", 278), ("isoLatin1", 15), ("isoLatin2", 79), ("isoLatin5", 175), ("pc8US", 342), ("pc8DN", 374), ("pc850", 406), ("pc852Latin2", 566), ("pc8TK", 309), ("win31Latin1", 630), ("win31Latin2", 294), ("win31Latin5", 181), ("desktop", 235), ("psText", 331), ("venturaIntl", 427), ("venturaUS", 459), ("microsoftPub", 203), ("math8", 270), ("psMath", 174), ("ventura-Math", 206), ("piFont", 502), ("legal", 54), ("iso4UK", 38), ("iso6ASCII", 22), ("iso11SWED", 20), ("iso15ITAL", 10), ("iso17SPAN", 84), ("iso21GERM", 40), ("iso60NORW", 5), ("iso69FREN", 39), ("win30Latin1", 310), ("mcText", 395)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPPCLDefaultSymbolSet.setStatus('mandatory')
qmsHPPCLPreJobReset = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 525, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("oncompatibility", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPPCLPreJobReset.setStatus('mandatory')
qmsHPPCLPointSize = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 525, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 99975))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPPCLPointSize.setStatus('mandatory')
qmsHPPCLDefaultFontID = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 525, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPPCLDefaultFontID.setStatus('mandatory')
qmsHPPCLGL2Plotter = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 525, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPPCLGL2Plotter.setStatus('mandatory')
qmsHPPCLDiskOrRam = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 525, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("memory", 1), ("disk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsHPPCLDiskOrRam.setStatus('mandatory')
qmsDECLN03ProductID = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 532, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ln03", 1), ("lqp02", 2), ("la100", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsDECLN03ProductID.setStatus('mandatory')
qmsDECLN03AutowrapMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 532, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsDECLN03AutowrapMode.setStatus('mandatory')
qmsDECLN03PaperSize = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 532, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("letter", 1), ("a4", 2), ("legal", 3), ("sz11x17", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsDECLN03PaperSize.setStatus('mandatory')
qmsDECLN03PaperSizeOverride = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 532, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsDECLN03PaperSizeOverride.setStatus('mandatory')
qmsDECLN03Xorigin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 532, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsDECLN03Xorigin.setStatus('mandatory')
qmsDECLN03Yorigin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 532, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsDECLN03Yorigin.setStatus('mandatory')
qmsDECLN03Reset = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 532, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsDECLN03Reset.setStatus('mandatory')
qmsDECLN03Orientation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 532, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portrait", 1), ("landscape", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsDECLN03Orientation.setStatus('mandatory')
qmsQUIC2CommandCharacter = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2CommandCharacter.setStatus('mandatory')
qmsQUIC2TopMargin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2TopMargin.setStatus('mandatory')
qmsQUIC2BottomMargin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2BottomMargin.setStatus('mandatory')
qmsQUIC2LeftMargin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2LeftMargin.setStatus('mandatory')
qmsQUIC2RightMargin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2RightMargin.setStatus('mandatory')
qmsQUIC2IfParam = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("immediateErase", 1), ("immediateEject", 2), ("onPageEject", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2IfParam.setStatus('mandatory')
qmsQUIC2CReqCRLF = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("crEQcrANDlf", 2), ("crEQcr", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2CReqCRLF.setStatus('mandatory')
qmsQUIC2LFeqLFCR = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("lfEQlfANDcr", 2), ("lfEQlf", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2LFeqLFCR.setStatus('mandatory')
qmsQUIC2Decimal = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("implicitLeft", 1), ("implicitRight", 2), ("explicit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2Decimal.setStatus('mandatory')
qmsQUIC2Dimensions = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dots", 1), ("centimeters", 2), ("inches", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2Dimensions.setStatus('mandatory')
qmsQUIC2EDPMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2EDPMode.setStatus('mandatory')
qmsQUIC2DefaultFont = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2DefaultFont.setStatus('mandatory')
qmsQUIC2LineSpacing = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lpi6", 1), ("lpi8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2LineSpacing.setStatus('mandatory')
qmsQUIC2Orientation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portrait", 1), ("landscape", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2Orientation.setStatus('mandatory')
qmsQUIC2Scan = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2Scan.setStatus('mandatory')
qmsQUIC2Spaces = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2Spaces.setStatus('mandatory')
qmsQUIC2AllowDataRepeats = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2AllowDataRepeats.setStatus('mandatory')
qmsQUIC2AllowOverlays = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2AllowOverlays.setStatus('mandatory')
qmsQUIC2AllowPageCopies = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2AllowPageCopies.setStatus('mandatory')
qmsQUIC2SaveDLF = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2SaveDLF.setStatus('mandatory')
qmsQUIC2SaveOverlays = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2SaveOverlays.setStatus('mandatory')
qmsQUIC2DefaultMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linePrinter", 1), ("commandFree", 2), ("commandNoFree", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2DefaultMode.setStatus('mandatory')
qmsQUIC2RebuildFontTable = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2RebuildFontTable.setStatus('mandatory')
qmsQUIC2TrayMap1 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2TrayMap1.setStatus('mandatory')
qmsQUIC2TrayMap2 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2TrayMap2.setStatus('mandatory')
qmsQUIC2TrayMap3 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2TrayMap3.setStatus('mandatory')
qmsQUIC2TrayMap4 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2TrayMap4.setStatus('mandatory')
qmsQUIC2TrayMap5 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2TrayMap5.setStatus('mandatory')
qmsQUIC2PatternType = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opaque", 1), ("transparent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2PatternType.setStatus('mandatory')
qmsLPFont = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPFont.setStatus('mandatory')
qmsLPPointSize = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPPointSize.setStatus('mandatory')
qmsLPAsciiMap = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("ascii", 2), ("ebcdic", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPAsciiMap.setStatus('mandatory')
qmsLPLineNumbering = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPLineNumbering.setStatus('mandatory')
qmsLPTabStops = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPTabStops.setStatus('mandatory')
qmsLPLFisCRLF = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPLFisCRLF.setStatus('mandatory')
qmsLPCRisCRLF = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPCRisCRLF.setStatus('mandatory')
qmsLPFFisCRFF = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPFFisCRFF.setStatus('mandatory')
qmsLPOrientation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portrait", 1), ("landscape", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPOrientation.setStatus('mandatory')
qmsLPLineWrap = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPLineWrap.setStatus('mandatory')
qmsLPLinesPerPage = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPLinesPerPage.setStatus('mandatory')
qmsLPLeftMargin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 79200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPLeftMargin.setStatus('mandatory')
qmsLPRightMargin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 79200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPRightMargin.setStatus('mandatory')
qmsLPTopMargin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 79200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPTopMargin.setStatus('mandatory')
qmsLPBottomMargin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 79200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPBottomMargin.setStatus('mandatory')
qmsTIFFAutoRotation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 541, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("rot90", 2), ("rot270", 3), ("rot180", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsTIFFAutoRotation.setStatus('mandatory')
qmsTIFFScratchFileSize = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 541, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsTIFFScratchFileSize.setStatus('mandatory')
qmsTIFFPaperToImage = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 541, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsTIFFPaperToImage.setStatus('mandatory')
qmsTIFFAnnotationState = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 541, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsTIFFAnnotationState.setStatus('mandatory')
qmsTIFFAnnotationTag = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 541, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsTIFFAnnotationTag.setStatus('mandatory')
qmsTIFFReverseImage = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 541, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsTIFFReverseImage.setStatus('mandatory')
qmsTIFFAutoScaling = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 541, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("upANDdown", 2), ("upOnly", 3), ("downOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsTIFFAutoScaling.setStatus('mandatory')
qmsCALSAutoRotation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 542, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("rot90", 2), ("rot270", 3), ("rot180", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCALSAutoRotation.setStatus('mandatory')
qmsCALSAutoScaling = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 542, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("upANDdown", 2), ("upOnly", 3), ("downOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCALSAutoScaling.setStatus('mandatory')
qmsCGMSuppressScale = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 544, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCGMSuppressScale.setStatus('mandatory')
qmsCGMMono = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 544, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCGMMono.setStatus('mandatory')
qmsCGMIgnoreBorder = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 544, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCGMIgnoreBorder.setStatus('mandatory')
qmsCGMOriginX = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 544, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1700))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCGMOriginX.setStatus('mandatory')
qmsCGMOriginY = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 544, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1700))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCGMOriginY.setStatus('mandatory')
qmsCGMPrintErrors = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 544, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCGMPrintErrors.setStatus('mandatory')
qmsRel = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2))
qmsPrinter = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 1))
qmsIF = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 9))
qmsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 10))
qmsPtrSys = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 1, 1))
qmsPtrEmu = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 1, 2))
qmsPtrJobs = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 1, 3))
qmsIFAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 9, 1))
qmsIFSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 9, 2))
qmsIFConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1))
qmsIFNetware = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5))
qmsIFApple = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 6))
qmsIFSnmpcontrol = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8))
qmsIFLservlmgr = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 9))
qmsCfgUser = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 10, 10))
qmsCfgAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 10, 20))
qmsCfgSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 10, 30))
qmsPtrSysStatus = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrSysStatus.setStatus('mandatory')
qmsPtrSysNamePrinter = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrSysNamePrinter.setStatus('optional')
qmsPtrIfTable = MibTable((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 3), )
if mibBuilder.loadTexts: qmsPtrIfTable.setStatus('mandatory')
qmsPtrIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 3, 1), ).setIndexNames((0, "QMS-MIB", "qmsPtrIfIndex"))
if mibBuilder.loadTexts: qmsPtrIfEntry.setStatus('mandatory')
qmsPtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrIfIndex.setStatus('mandatory')
qmsPtrIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrIfName.setStatus('mandatory')
qmsPtrIfDefEmu = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 201, 65534, 65535))).clone(namedValues=NamedValues(("ultrascript", 1), ("ibm-proprinter", 2), ("diablo-630", 3), ("ti-855", 4), ("hp-gl", 5), ("hp-pcl", 6), ("hex-dump", 7), ("ti-855-dp", 8), ("ti-810", 9), ("epson-fx", 10), ("dec-ansi", 11), ("ibm-ext-ascii", 12), ("ln03", 13), ("tektronix-4014", 14), ("quic-2", 15), ("impress", 16), ("code-v", 17), ("r1", 18), ("ccitt", 19), ("line-printer", 20), ("hp-pcl-5", 21), ("esp", 201), ("not-supported", 65534), ("wild-card", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrIfDefEmu.setStatus('mandatory')
qmsPtrBinTable = MibTable((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 4), )
if mibBuilder.loadTexts: qmsPtrBinTable.setStatus('mandatory')
qmsPtrBinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 4, 1), ).setIndexNames((0, "QMS-MIB", "qmsPtrBinIndex"))
if mibBuilder.loadTexts: qmsPtrBinEntry.setStatus('mandatory')
qmsPtrBinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrBinIndex.setStatus('mandatory')
qmsPtrBinType = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("output", 1), ("input", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrBinType.setStatus('mandatory')
qmsPtrBinId = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrBinId.setStatus('mandatory')
qmsPtrBinPaper = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrBinPaper.setStatus('mandatory')
qmsPtrBinName = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrBinName.setStatus('mandatory')
qmsPtrJobsCurStatus = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 32768))).clone(namedValues=NamedValues(("spooling", 1), ("interpreting", 2), ("rasterizing", 4), ("printing", 8), ("terminating", 16), ("waiting", 32), ("spooled", 64), ("printed", 128), ("canceled", 256), ("internal", 32768)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsCurStatus.setStatus('mandatory')
qmsPtrJobsCurSheet = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsCurSheet.setStatus('mandatory')
qmsPtrJobsCurPage = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsCurPage.setStatus('mandatory')
qmsPtrJobsTable = MibTable((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4), )
if mibBuilder.loadTexts: qmsPtrJobsTable.setStatus('mandatory')
qmsPtrJobsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1), ).setIndexNames((0, "QMS-MIB", "qmsPtrJobsIndex"))
if mibBuilder.loadTexts: qmsPtrJobsEntry.setStatus('mandatory')
qmsPtrJobsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsIndex.setStatus('mandatory')
qmsPtrJobsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 32768))).clone(namedValues=NamedValues(("spooling", 1), ("interpreting", 2), ("rasterizing", 4), ("printing", 8), ("terminating", 16), ("waiting", 32), ("spooled", 64), ("printed", 128), ("canceled", 256), ("internal", 32768)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsStatus.setStatus('mandatory')
qmsPtrJobsEmulation = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 201, 65536))).clone(namedValues=NamedValues(("ultrascript", 1), ("ibm-proprinter", 2), ("diablo-630", 3), ("ti-855", 4), ("hp-gl", 5), ("hp-pcl", 6), ("hex-dump", 7), ("ti-855-dp", 8), ("ti-810", 9), ("epson-fx", 10), ("dec-ansi", 11), ("ibm-ext-ascii", 12), ("ln03", 13), ("tektronix-4014", 14), ("quic-2", 15), ("impress", 16), ("code-v", 17), ("r1", 18), ("ccitt", 19), ("line-printer", 20), ("hp-pcl-5", 21), ("tiff", 22), ("cals", 23), ("cgm", 25), ("hp-pcl-xl", 26), ("esp", 201), ("wild-card", 65536)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsEmulation.setStatus('mandatory')
qmsPtrJobsPage = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsPage.setStatus('mandatory')
qmsPtrJobsSheet = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsSheet.setStatus('mandatory')
qmsPtrJobsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 12, 13, 14, 16))).clone(namedValues=NamedValues(("other", 1), ("rs-232", 12), ("parallel", 13), ("appletalk", 14), ("optional-io", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsChannel.setStatus('mandatory')
qmsPtrJobsComment = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsComment.setStatus('mandatory')
qmsPtrJobsTitle = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsTitle.setStatus('mandatory')
qmsPtrJobsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsOwner.setStatus('mandatory')
qmsPtrJobsStatPages = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsStatPages.setStatus('mandatory')
qmsPtrJobsStatSheets = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsStatSheets.setStatus('mandatory')
qmsIFAdminUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("resetOnNoClient", 2), ("hardReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsIFAdminUnitStatus.setStatus('mandatory')
qmsIFAdminConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("configUnknown1", 1), ("configUnknown2", 2), ("configLoadRequest", 3), ("configSaveRequest", 4), ("configDefaultRequest", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsIFAdminConfigStatus.setStatus('mandatory')
qmsIFAdminOldIntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsIFAdminOldIntAddr.setStatus('mandatory')
intAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: intAddr.setStatus('mandatory')
ethAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethAddr.setStatus('mandatory')
defRout = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defRout.setStatus('mandatory')
netMask = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMask.setStatus('mandatory')
tcpEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpEnb.setStatus('mandatory')
tftpEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpEnb.setStatus('mandatory')
tnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tnPort.setStatus('obsolete')
rtnOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtnOpt.setStatus('obsolete')
trP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trP1.setStatus('mandatory')
bootP = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 698), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootP.setStatus('mandatory')
rarp = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 699), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rarp.setStatus('mandatory')
spooling = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 9000), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("onInputIdle", 2), ("onIdle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spooling.setStatus('mandatory')
netwEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 400), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netwEnb.setStatus('mandatory')
psName = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 401), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psName.setStatus('mandatory')
confServ = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 402), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confServ.setStatus('mandatory')
msgLog = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 403), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("console", 2), ("netlog", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msgLog.setStatus('mandatory')
nwMode = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 404), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("pserver", 2), ("rprinter", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwMode.setStatus('mandatory')
psPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 405), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPoll.setStatus('mandatory')
fr8023 = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 420), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fr8023.setStatus('mandatory')
freth2 = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 421), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: freth2.setStatus('mandatory')
fr8022 = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 422), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fr8022.setStatus('mandatory')
frSnap = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 423), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSnap.setStatus('mandatory')
login1 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login1.setStatus('mandatory')
login2 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 433), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login2.setStatus('mandatory')
login3 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 434), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login3.setStatus('mandatory')
login4 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 435), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login4.setStatus('mandatory')
login5 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 436), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login5.setStatus('mandatory')
login6 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 437), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login6.setStatus('mandatory')
login7 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 438), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login7.setStatus('mandatory')
login8 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 439), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login8.setStatus('mandatory')
login9 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 440), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login9.setStatus('mandatory')
login10 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 441), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login10.setStatus('mandatory')
login11 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 442), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login11.setStatus('mandatory')
login12 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 443), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login12.setStatus('mandatory')
login13 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 444), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login13.setStatus('mandatory')
login14 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 445), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login14.setStatus('mandatory')
login15 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 446), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login15.setStatus('mandatory')
login16 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 447), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login16.setStatus('mandatory')
rprinter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 470), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprinter1.setStatus('mandatory')
rprinter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 471), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprinter2.setStatus('mandatory')
rprinter3 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 472), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprinter3.setStatus('mandatory')
rprinter4 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 473), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprinter4.setStatus('mandatory')
rprinter5 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 474), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprinter5.setStatus('mandatory')
rprinter6 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 475), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprinter6.setStatus('mandatory')
rprinter7 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 476), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprinter7.setStatus('mandatory')
rprinter8 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 477), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprinter8.setStatus('mandatory')
atlkEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 6, 500), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atlkEnb.setStatus('mandatory')
atlkZone = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 6, 502), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atlkZone.setStatus('mandatory')
atlkZonerEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 6, 503), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atlkZonerEnb.setStatus('mandatory')
atlkLWEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 6, 560), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atlkLWEnb.setStatus('mandatory')
atlkQMSRemConEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 6, 561), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atlkQMSRemConEnb.setStatus('mandatory')
atlkConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 6, 562), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("conventional", 1), ("spooling", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atlkConnType.setStatus('mandatory')
enableAuthenTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 715), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableAuthenTraps.setStatus('mandatory')
enablePrinterTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 716), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablePrinterTraps.setStatus('mandatory')
nms1Address = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 730), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms1Address.setStatus('mandatory')
nms1Community = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 731), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms1Community.setStatus('mandatory')
nms1Access = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 732), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("trap", 2), ("read", 3), ("readtrap", 4), ("write", 5), ("writetrap", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms1Access.setStatus('mandatory')
nms2Address = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 735), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms2Address.setStatus('mandatory')
nms2Community = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 736), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms2Community.setStatus('mandatory')
nms2Access = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 737), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("trap", 2), ("read", 3), ("readtrap", 4), ("write", 5), ("writetrap", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms2Access.setStatus('mandatory')
nms3Address = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 740), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms3Address.setStatus('mandatory')
nms3Community = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 741), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms3Community.setStatus('mandatory')
nms3Access = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 742), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("trap", 2), ("read", 3), ("readtrap", 4), ("write", 5), ("writetrap", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms3Access.setStatus('mandatory')
nms4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 745), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms4Address.setStatus('mandatory')
nms4Community = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 746), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms4Community.setStatus('mandatory')
nms4Access = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 747), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("trap", 2), ("read", 3), ("readtrap", 4), ("write", 5), ("writetrap", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms4Access.setStatus('mandatory')
nms5Address = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 750), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms5Address.setStatus('mandatory')
nms5Community = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 751), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms5Community.setStatus('mandatory')
nms5Access = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 752), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("trap", 2), ("read", 3), ("readtrap", 4), ("write", 5), ("writetrap", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms5Access.setStatus('mandatory')
lslmEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 9, 800), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lslmEnb.setStatus('mandatory')
coldStart = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,0))
authenticationFailure = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,4))
qmsPtrErrorMsg = NotificationType((1, 3, 6, 1, 4, 1, 480) + (0,1)).setObjects(("QMS-MIB", "qmsPtrSysStatus"))
trapNewIPaddr = NotificationType((1, 3, 6, 1, 4, 1, 480) + (0,2)).setObjects(("QMS-MIB", "qmsIFAdminOldIntAddr"))
mibBuilder.exportSymbols("QMS-MIB", qmsClientColorMatching=qmsClientColorMatching, qmsSYSDiskSwap=qmsSYSDiskSwap, nms5Access=nms5Access, qmsQUIC2Decimal=qmsQUIC2Decimal, netMask=netMask, qmsSerIgnoreParity=qmsSerIgnoreParity, confServ=confServ, qmsHPGLPaperType=qmsHPGLPaperType, qmsQUIC2Scan=qmsQUIC2Scan, qmsPtrJobsTitle=qmsPtrJobsTitle, qmsQUIC2PatternType=qmsQUIC2PatternType, qmsENGConsumeNote2Multi=qmsENGConsumeNote2Multi, qmsQUIC2TrayMap3=qmsQUIC2TrayMap3, qmsColorMatch=qmsColorMatch, qmsENGPageOrder=qmsENGPageOrder, qmsENGConsumeNameMulti=qmsENGConsumeNameMulti, qmsENGConsumeMaxMulti=qmsENGConsumeMaxMulti, qmsSerRxSWFlow=qmsSerRxSWFlow, nms3Access=nms3Access, qmsQUIC2TrayMap5=qmsQUIC2TrayMap5, qmsQUIC2LeftMargin=qmsQUIC2LeftMargin, nms2Access=nms2Access, qmsSCOffsetHorizontal=qmsSCOffsetHorizontal, qmsParallel=qmsParallel, atlkZonerEnb=atlkZonerEnb, qmsSCGreenGammaFunction=qmsSCGreenGammaFunction, qmsHPPCLDiskOrRam=qmsHPPCLDiskOrRam, login7=login7, qmsHPPCLDefaultSymbolSet=qmsHPPCLDefaultSymbolSet, nms1Address=nms1Address, qmsLPLeftMargin=qmsLPLeftMargin, rprinter3=rprinter3, login15=login15, qmsPtrBinName=qmsPtrBinName, qmsLPTabStops=qmsLPTabStops, qmsQUIC2AllowDataRepeats=qmsQUIC2AllowDataRepeats, rprinter8=rprinter8, nms5Community=nms5Community, qmsSYSFPA=qmsSYSFPA, qmsENGConsumeNote1Multi=qmsENGConsumeNote1Multi, qmsPtrSys=qmsPtrSys, qmsSYSSheetCount=qmsSYSSheetCount, qmsENGLetterheadMode=qmsENGLetterheadMode, login2=login2, qmsSYSPrinterVersion=qmsSYSPrinterVersion, qmsLPLinesPerPage=qmsLPLinesPerPage, qmsSerPSProtocol=qmsSerPSProtocol, qmsDECLN03Orientation=qmsDECLN03Orientation, qmsParPSProtocol=qmsParPSProtocol, qmsCALS=qmsCALS, qmsQUIC2EDPMode=qmsQUIC2EDPMode, qmsCfgSecurity=qmsCfgSecurity, qmsSCScanResolution=qmsSCScanResolution, qmsCPPSerialNumber=qmsCPPSerialNumber, qmsIFAdminOldIntAddr=qmsIFAdminOldIntAddr, qmsENGChainInputbin=qmsENGChainInputbin, qmsENGConsumeNote2=qmsENGConsumeNote2, qmsCfgUser=qmsCfgUser, nms5Address=nms5Address, qmsPSDefaultGamma=qmsPSDefaultGamma, qmsHTTPCorpURL=qmsHTTPCorpURL, login6=login6, qmsQUIC2DefaultMode=qmsQUIC2DefaultMode, qmsSYSMultiRes=qmsSYSMultiRes, qmsQUIC2TopMargin=qmsQUIC2TopMargin, qmsCMMSimInRGBLinks=qmsCMMSimInRGBLinks, qmsClientHeap=qmsClientHeap, rprinter6=rprinter6, trapNewIPaddr=trapNewIPaddr, qmsSerStopBits=qmsSerStopBits, qmsTIFFAnnotationTag=qmsTIFFAnnotationTag, nms1Community=nms1Community, qmsFETmPSWait=qmsFETmPSWait, qmsSCSizeHorizontal=qmsSCSizeHorizontal, qmsENGChainInputBins=qmsENGChainInputBins, qmsCALSAutoRotation=qmsCALSAutoRotation, qmsFEEspEmul=qmsFEEspEmul, qmsParDataBits=qmsParDataBits, qmsSYSA3SheetCount=qmsSYSA3SheetCount, qmsClientEmulTemp=qmsClientEmulTemp, qmsPtrJobsStatus=qmsPtrJobsStatus, qmsCGMIgnoreBorder=qmsCGMIgnoreBorder, qmsCCITT=qmsCCITT, qmsMEMPhysical=qmsMEMPhysical, qmsHPGLScalingPercent=qmsHPGLScalingPercent, qmsQUIC2RightMargin=qmsQUIC2RightMargin, qmsParPriority=qmsParPriority, qmsLPCRisCRLF=qmsLPCRisCRLF, qmsQUIC2SaveOverlays=qmsQUIC2SaveOverlays, qmsIFConfig=qmsIFConfig, qmsPtrBinPaper=qmsPtrBinPaper, qmsENGOrientation=qmsENGOrientation, tcpEnb=tcpEnb, qmsCfgAdmin=qmsCfgAdmin, qmsENGOutputbin=qmsENGOutputbin, qmsHPGLPlotter=qmsHPGLPlotter, qmsSerBufferSize=qmsSerBufferSize, qmsQUIC2TrayMap4=qmsQUIC2TrayMap4, spooling=spooling, qmsTIFF=qmsTIFF, qmsQUIC2TrayMap1=qmsQUIC2TrayMap1, qmsENGConsumeType=qmsENGConsumeType, qmsHPGLPenWidth3=qmsHPGLPenWidth3, qmsPtrJobsCurSheet=qmsPtrJobsCurSheet, psName=psName, qmsLinePrinter=qmsLinePrinter, qmsHPGLPenColor8=qmsHPGLPenColor8, qmsIFSetup=qmsIFSetup, qmsQUIC2LFeqLFCR=qmsQUIC2LFeqLFCR, qmsSerHwRTS=qmsSerHwRTS, qmsSCBinaryAdjustment=qmsSCBinaryAdjustment, qmsParMode=qmsParMode, qmsIFAdminConfigStatus=qmsIFAdminConfigStatus, ethAddr=ethAddr, login5=login5, qmsIFAdmin=qmsIFAdmin, qmsPtrIfDefEmu=qmsPtrIfDefEmu, intAddr=intAddr, qmsPtrJobsPage=qmsPtrJobsPage, qmsCGMOriginY=qmsCGMOriginY, qmsFEHeaderPage=qmsFEHeaderPage, qmsQUIC2TrayMap2=qmsQUIC2TrayMap2, tnPort=tnPort, qmsSerHwCTS=qmsSerHwCTS, qmsHPGL=qmsHPGL, qmsHPPCLFontNumber=qmsHPPCLFontNumber, qmsDECLN03Reset=qmsDECLN03Reset, qmsSerEndDocumentMode=qmsSerEndDocumentMode, atlkEnb=atlkEnb, rprinter5=rprinter5, qmsSerBaudRate=qmsSerBaudRate, qmsACCMode=qmsACCMode, qmsPSDefaultCRD=qmsPSDefaultCRD, qmsDECLN03PaperSizeOverride=qmsDECLN03PaperSizeOverride, qmsMemory=qmsMemory, qmsSYSPrinterModel=qmsSYSPrinterModel, rprinter2=rprinter2, qmsQUIC2=qmsQUIC2, qmsENGEnergyStar=qmsENGEnergyStar, qmsUIH=qmsUIH, qmsCMMProfileEntry=qmsCMMProfileEntry, qmsFEDoSysStart=qmsFEDoSysStart, qmsPtrJobsEntry=qmsPtrJobsEntry, qmsHPPCLDefaultFontID=qmsHPPCLDefaultFontID, qmsCMMProfileDescription=qmsCMMProfileDescription, qmsCMMICCHP=qmsCMMICCHP, qmsIoPages=qmsIoPages, qmsQUIC2AllowOverlays=qmsQUIC2AllowOverlays, qmsCMMICCColorMatch=qmsCMMICCColorMatch, qmsENGColorSeparation=qmsENGColorSeparation, nms4Community=nms4Community, qmsIFNetware=qmsIFNetware, qmsENGStaplePosition=qmsENGStaplePosition, nwMode=nwMode, qmsTIFFScratchFileSize=qmsTIFFScratchFileSize, qmsPtrBinId=qmsPtrBinId, qmsIF=qmsIF, qmsPtrJobsOwner=qmsPtrJobsOwner, qmsQUIC2DefaultFont=qmsQUIC2DefaultFont, qmsIFApple=qmsIFApple, qmsPtrJobsTable=qmsPtrJobsTable, qmsENGColorModel=qmsENGColorModel, qmsHPPCL=qmsHPPCL, qmsENGEnvelopeTrayMedia=qmsENGEnvelopeTrayMedia, atlkQMSRemConEnb=atlkQMSRemConEnb, freth2=freth2, qmsENGLeftOffsetDuplex=qmsENGLeftOffsetDuplex, enablePrinterTraps=enablePrinterTraps, qmsFETrailerInputbin=qmsFETrailerInputbin, qmsQUIC2BottomMargin=qmsQUIC2BottomMargin, qmsSerHwDTR=qmsSerHwDTR, qmsCMMICCDestination=qmsCMMICCDestination, qmsParEmulation=qmsParEmulation, qmsENGLeftOffset=qmsENGLeftOffset, qmsPtrSysStatus=qmsPtrSysStatus, qmsHTTPContact=qmsHTTPContact, qmsQUIC2Orientation=qmsQUIC2Orientation, qmsENGConsumeNote1=qmsENGConsumeNote1, login11=login11, qmsConfig=qmsConfig, qmsENGOffsetStacking=qmsENGOffsetStacking, qmsClientFrameBuffer=qmsClientFrameBuffer, qmsENGInputbinMediatype=qmsENGInputbinMediatype, qmsClientEmulation=qmsClientEmulation, login1=login1, qmsSerHwDSRPOL=qmsSerHwDSRPOL, qmsENGTopOffset=qmsENGTopOffset, qmsHPGLEnhancedMode=qmsHPGLEnhancedMode, qmsFETrailerPage=qmsFETrailerPage, qmsPtrJobsComment=qmsPtrJobsComment, qmsClientHPStoragePool=qmsClientHPStoragePool, qmsSerDataBits=qmsSerDataBits, qmsHPGLPenWidth2=qmsHPGLPenWidth2, qmsDECLN03AutowrapMode=qmsDECLN03AutowrapMode, login12=login12, qmsENGManualTrayMedia=qmsENGManualTrayMedia, qmsPtrIfIndex=qmsPtrIfIndex, qmsPtrJobsCurStatus=qmsPtrJobsCurStatus, qmsPtrBinIndex=qmsPtrBinIndex, qmsFETmJob=qmsFETmJob, fr8023=fr8023, qmsClientDisplayList=qmsClientDisplayList, authenticationFailure=authenticationFailure, qmsCMMProfileTable=qmsCMMProfileTable, qmsPrinter=qmsPrinter, qmsPtrJobsIndex=qmsPtrJobsIndex, trP1=trP1, qmsTIFFAnnotationState=qmsTIFFAnnotationState, qmsTIFFAutoScaling=qmsTIFFAutoScaling, qmsHPGLPenColor3=qmsHPGLPenColor3, qmsENGManualFeedTimeout=qmsENGManualFeedTimeout, qmsCostPerPage=qmsCostPerPage, qmsSystem=qmsSystem, qmsRel=qmsRel, qmsHPGLPenWidth1=qmsHPGLPenWidth1, qmsLPFont=qmsLPFont, qmsIFAdminUnitStatus=qmsIFAdminUnitStatus, login4=login4, login3=login3, login16=login16, qmsCMMICCRGBSource=qmsCMMICCRGBSource, qmsIFSnmpcontrol=qmsIFSnmpcontrol, qmsHPGLPenWidth6=qmsHPGLPenWidth6, qmsPtrIfEntry=qmsPtrIfEntry, qmsSCColorAdjust=qmsSCColorAdjust, rprinter4=rprinter4, qmsSerParity=qmsSerParity, login9=login9, qmsDECLN03=qmsDECLN03, qmsTIFFAutoRotation=qmsTIFFAutoRotation, atlkZone=atlkZone, qmsLPOrientation=qmsLPOrientation, qmsFEDoStartPage=qmsFEDoStartPage, qmsHPGLExpandMode=qmsHPGLExpandMode, qmsPtrJobsSheet=qmsPtrJobsSheet, qmsSCOffsetVertical=qmsSCOffsetVertical, qmsENGConsumeIndex=qmsENGConsumeIndex, qmsDECLN03PaperSize=qmsDECLN03PaperSize, qmsSerial=qmsSerial, qmsENGConsumeLevelMulti=qmsENGConsumeLevelMulti, qmsENGTopOffsetDuplex=qmsENGTopOffsetDuplex, qmsFETmEsp=qmsFETmEsp, qmsENGConsumeUnits=qmsENGConsumeUnits, enableAuthenTraps=enableAuthenTraps, qmsEngine=qmsEngine, qmsENGErrorRecovery=qmsENGErrorRecovery, qmsHPGLPenWidth4=qmsHPGLPenWidth4, qmsCGM=qmsCGM, lslmEnb=lslmEnb, atlkLWEnb=atlkLWEnb, qmsHTTPContactNumber=qmsHTTPContactNumber, qmsLPAsciiMap=qmsLPAsciiMap, qmsClientFontCache=qmsClientFontCache, qmsSCTrans=qmsSCTrans)
mibBuilder.exportSymbols("QMS-MIB", login8=login8, qmsTIFFReverseImage=qmsTIFFReverseImage, qmsScanner=qmsScanner, qmsPSOutputPositioning=qmsPSOutputPositioning, fr8022=fr8022, qmsPtrErrorMsg=qmsPtrErrorMsg, qmsPtrJobsChannel=qmsPtrJobsChannel, qmsPSDefaultHalftone=qmsPSDefaultHalftone, qmsPtrEmu=qmsPtrEmu, qmsHPPCLPreJobReset=qmsHPPCLPreJobReset, qmsSCContrast=qmsSCContrast, qmsENGInputbinMediatypeMulti=qmsENGInputbinMediatypeMulti, qmsACCFileSegment=qmsACCFileSegment, qmsENGChainOutputbinMulti=qmsENGChainOutputbinMulti, qmsHPGLPenColor7=qmsHPGLPenColor7, qmsSYSA3PageCount=qmsSYSA3PageCount, nms2Community=nms2Community, qmsENGConsumeMax=qmsENGConsumeMax, msgLog=msgLog, qmsSerHwDTRPOL=qmsSerHwDTRPOL, qmsENGChainInputbinMulti=qmsENGChainInputbinMulti, qmsIFLservlmgr=qmsIFLservlmgr, qmsSCBlueGammaFunction=qmsSCBlueGammaFunction, qmsQUIC2CReqCRLF=qmsQUIC2CReqCRLF, qmsHPPCLGL2Plotter=qmsHPPCLGL2Plotter, qmsAccounting=qmsAccounting, qmsENGNumConsumables=qmsENGNumConsumables, qmsIoTimeOuts=qmsIoTimeOuts, qmsCMMProfileIndex=qmsCMMProfileIndex, qmsSYSSystemImage=qmsSYSSystemImage, qmsPtrIfName=qmsPtrIfName, qmsPSDefaultBlackOverPrint=qmsPSDefaultBlackOverPrint, qmsSerSpoolTimeout=qmsSerSpoolTimeout, qmsENGConsumeName=qmsENGConsumeName, qmsHPPCLPointSize=qmsHPPCLPointSize, rtnOpt=rtnOpt, qmsENGDuplex=qmsENGDuplex, qmsPtrJobsEmulation=qmsPtrJobsEmulation, nms4Access=nms4Access, qmsPSErrorHandler=qmsPSErrorHandler, netwEnb=netwEnb, rprinter1=rprinter1, qmsSCCopyMode=qmsSCCopyMode, qmsPSDefaultDither=qmsPSDefaultDither, qmsPtrBinType=qmsPtrBinType, qmsHTTPHelpURL=qmsHTTPHelpURL, qmsENGCollation=qmsENGCollation, qmsParEndDocumentMode=qmsParEndDocumentMode, qmsHPGLPenWidth5=qmsHPGLPenWidth5, psPoll=psPoll, rarp=rarp, qmsSerEmulation=qmsSerEmulation, qmsLPLineWrap=qmsLPLineWrap, defRout=defRout, qmsHTTP=qmsHTTP, qmsCGMMono=qmsCGMMono, qmsHPGLPenColor4=qmsHPGLPenColor4, qmsSYSPrinterName=qmsSYSPrinterName, qmsClientSpool=qmsClientSpool, qmsLPPointSize=qmsLPPointSize, qmsSerMode=qmsSerMode, qmsENGConsumeLevel=qmsENGConsumeLevel, qmsENGResolution=qmsENGResolution, qmsHPGLPenWidth7=qmsHPGLPenWidth7, qmsENGToneroutAction=qmsENGToneroutAction, coldStart=coldStart, atlkConnType=atlkConnType, qmsHPPCLLineTermination=qmsHPPCLLineTermination, qmsLPLineNumbering=qmsLPLineNumbering, qmsSYSPageCount=qmsSYSPageCount, qmsQUIC2Dimensions=qmsQUIC2Dimensions, qmsPtrJobsStatSheets=qmsPtrJobsStatSheets, qmsENGDensity=qmsENGDensity, qmsENGConsumeTypeMulti=qmsENGConsumeTypeMulti, qmsSCGrayGammaFunction=qmsSCGrayGammaFunction, qmsSCSizeVertical=qmsSCSizeVertical, qmsSerTxSWFlow=qmsSerTxSWFlow, qmsFEStatusPageType=qmsFEStatusPageType, qmsHPGLPenColor1=qmsHPGLPenColor1, login13=login13, qmsPS=qmsPS, qmsPtrBinTable=qmsPtrBinTable, qmsFETmNonPSEmul=qmsFETmNonPSEmul, tftpEnb=tftpEnb, qmsCMMICCSimulation=qmsCMMICCSimulation, qmsPtrJobsCurPage=qmsPtrJobsCurPage, qmsSerHwDSR=qmsSerHwDSR, qmsDECLN03Xorigin=qmsDECLN03Xorigin, qmsPtrJobsStatPages=qmsPtrJobsStatPages, qmsHPGLPenColor2=qmsHPGLPenColor2, qmsInc=qmsInc, qmsHPGLPenColor6=qmsHPGLPenColor6, qmsDECLN03ProductID=qmsDECLN03ProductID, frSnap=frSnap, qmsCGMPrintErrors=qmsCGMPrintErrors, qmsQUIC2IfParam=qmsQUIC2IfParam, qmsHTTPSuppliesNumber=qmsHTTPSuppliesNumber, qmsLPTopMargin=qmsLPTopMargin, qmsCMMProfileType=qmsCMMProfileType, qmsPSIntensity=qmsPSIntensity, rprinter7=rprinter7, qmsClientSystem=qmsClientSystem, qmsPtrIfTable=qmsPtrIfTable, qmsENGQuality=qmsENGQuality, qmsLPBottomMargin=qmsLPBottomMargin, login14=login14, qmsQUIC2LineSpacing=qmsQUIC2LineSpacing, qmsIoCtl=qmsIoCtl, qmsENGInputbin=qmsENGInputbin, qmsCGMOriginX=qmsCGMOriginX, qmsSCRedGammaFunction=qmsSCRedGammaFunction, qmsQUIC2CommandCharacter=qmsQUIC2CommandCharacter, qmsLPRightMargin=qmsLPRightMargin, qmsParBufferSize=qmsParBufferSize, qmsENGDefaultPaper=qmsENGDefaultPaper, nms3Community=nms3Community, login10=login10, qmsPtrBinEntry=qmsPtrBinEntry, qmsFECopies=qmsFECopies, qmsMEMTotal=qmsMEMTotal, qmsHPPCLLinesPerInch=qmsHPPCLLinesPerInch, qmsENGUnderColor=qmsENGUnderColor, qmsACCDiskSpace=qmsACCDiskSpace, qmsCALSAutoScaling=qmsCALSAutoScaling, qmsPtrJobs=qmsPtrJobs, nms1Access=nms1Access, qmsHPGLPenWidth8=qmsHPGLPenWidth8, nms4Address=nms4Address, qmsENGConsumeIndexMulti=qmsENGConsumeIndexMulti, qmsQUIC2SaveDLF=qmsQUIC2SaveDLF, bootP=bootP, qmsENGChainOutputbin=qmsENGChainOutputbin, nms3Address=nms3Address, qmsClientDisk=qmsClientDisk, qmsLPLFisCRLF=qmsLPLFisCRLF, qmsPtrSysNamePrinter=qmsPtrSysNamePrinter, nms2Address=nms2Address, qmsCGMSuppressScale=qmsCGMSuppressScale, qmsQUIC2AllowPageCopies=qmsQUIC2AllowPageCopies, qmsSerPriority=qmsSerPriority, qmsDECLN03Yorigin=qmsDECLN03Yorigin, qmsTIFFPaperToImage=qmsTIFFPaperToImage, qmsFEHeaderInputbin=qmsFEHeaderInputbin, qmsCMMLinkQuality=qmsCMMLinkQuality, qmsENGConsumeUnitsMulti=qmsENGConsumeUnitsMulti, qmsQUIC2Spaces=qmsQUIC2Spaces, qmsParSpoolTimeout=qmsParSpoolTimeout, qmsQUIC2RebuildFontTable=qmsQUIC2RebuildFontTable, qmsLPFFisCRFF=qmsLPFFisCRFF, qmsHPGLPenColor5=qmsHPGLPenColor5)
