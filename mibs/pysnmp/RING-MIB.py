#
# PySNMP MIB module RING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:08:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ring, coriolisMibs = mibBuilder.importSymbols("CORIOLIS-MIB", "ring", "coriolisMibs")
chassisElemReachStatus, chassisIpAddr = mibBuilder.importSymbols("DEVICE-MIB", "chassisElemReachStatus", "chassisIpAddr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
ModuleIdentity, TimeTicks, Bits, ObjectIdentity, Counter64, Unsigned32, Counter32, NotificationType, MibIdentifier, IpAddress, Gauge32, NotificationType, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "Bits", "ObjectIdentity", "Counter64", "Unsigned32", "Counter32", "NotificationType", "MibIdentifier", "IpAddress", "Gauge32", "NotificationType", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
ringMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5812, 4, 8))
if mibBuilder.loadTexts: ringMIB.setLastUpdated('0007270000Z')
if mibBuilder.loadTexts: ringMIB.setOrganization('Coriolis Networks')
actPhyRingCount = MibScalar((1, 3, 6, 1, 4, 1, 5812, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actPhyRingCount.setStatus('current')
actPhyRingTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 4, 2), )
if mibBuilder.loadTexts: actPhyRingTable.setStatus('current')
actPhyRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 4, 2, 1), ).setIndexNames((0, "RING-MIB", "phyRingSlotNo"), (0, "RING-MIB", "phyRingPortNo"))
if mibBuilder.loadTexts: actPhyRingEntry.setStatus('current')
phyRingSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyRingSlotNo.setStatus('current')
phyRingPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phyRingPortNo.setStatus('current')
actLogRingCount = MibScalar((1, 3, 6, 1, 4, 1, 5812, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actLogRingCount.setStatus('current')
actLogRingTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 4, 4), )
if mibBuilder.loadTexts: actLogRingTable.setStatus('current')
actLogRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1), ).setIndexNames((0, "RING-MIB", "phyRingSlotNo"), (0, "RING-MIB", "phyRingPortNo"), (0, "RING-MIB", "logRingVPortNo"))
if mibBuilder.loadTexts: actLogRingEntry.setStatus('current')
logRingVPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingVPortNo.setStatus('current')
logRingElemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemCount.setStatus('current')
logRingLambdaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noCut", 1), ("cut", 2), ("restored", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingLambdaStatus.setStatus('current')
logRingProtoStatusTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(80, 80)).setFixedLength(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingProtoStatusTxt.setStatus('current')
logRingProtoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("controlChanDn", 2), ("setError", 3), ("clrError", 4), ("setAlarm", 5), ("clrAlarm", 6), ("lowerLayerDn", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingProtoStatus.setStatus('current')
logRingGneName = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingGneName.setStatus('current')
logRingGneIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingGneIpAddr.setStatus('current')
logRingGneRingSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingGneRingSlot.setStatus('current')
logRingGneRingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingGneRingPort.setStatus('current')
logRingGneRingVport = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingGneRingVport.setStatus('current')
logRingUpsNgbrName = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingUpsNgbrName.setStatus('current')
logRingUpsNgbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingUpsNgbrIpAddr.setStatus('current')
logRingUpsNgbrRingSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingUpsNgbrRingSlot.setStatus('current')
logRingUpsNgbrRingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingUpsNgbrRingPort.setStatus('current')
logRingUpsNgbrRingVport = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingUpsNgbrRingVport.setStatus('current')
logRingIsConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingIsConfigured.setStatus('current')
logRingAttRingType = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("working", 2), ("protected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingAttRingType.setStatus('current')
logRingCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingCapacity.setStatus('current')
logRingCutLocationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingCutLocationIp.setStatus('current')
logRingCutLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(80, 80)).setFixedLength(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingCutLocationName.setStatus('current')
logRingIsRingMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingIsRingMaster.setStatus('current')
logRingOtherSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingOtherSlot.setStatus('current')
logRingOtherPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingOtherPort.setStatus('current')
logRingOtherVport = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingOtherVport.setStatus('current')
actLogRingElemTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 4, 5), )
if mibBuilder.loadTexts: actLogRingElemTable.setStatus('current')
actLogRingElemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1), ).setIndexNames((0, "RING-MIB", "phyRingSlotNo"), (0, "RING-MIB", "phyRingPortNo"), (0, "RING-MIB", "logRingVPortNo"), (0, "RING-MIB", "logRingElemIndex"))
if mibBuilder.loadTexts: actLogRingElemEntry.setStatus('current')
logRingElemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemIndex.setStatus('current')
logRingElemName = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(21, 21)).setFixedLength(21)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemName.setStatus('current')
logRingElemMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemMACAddr.setStatus('current')
logRingElemIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemIpAddr.setStatus('current')
logRingElemPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemPortId.setStatus('current')
logRingElemChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 21))).clone(namedValues=NamedValues(("optiFlow5500", 1), ("optiFlow5000", 2), ("optiFlow3500", 3), ("optiFlow3000", 4), ("optiFlow1010", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemChassisId.setStatus('current')
logRingElemActiveMM = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemActiveMM.setStatus('current')
logRingElemIsInNeTable = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemIsInNeTable.setStatus('current')
logRingElemIsReachable = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemIsReachable.setStatus('current')
logRingElemIsLambdaCutHere = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemIsLambdaCutHere.setStatus('current')
logRingElemChassisCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gne", 1), ("ne", 2), ("sne", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemChassisCharacter.setStatus('current')
logRingElemNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemNodeId.setStatus('current')
logRingElemRxSegCutSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noLoss", 1), ("sonetProtection", 2), ("serviceAffecting", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logRingElemRxSegCutSeverity.setStatus('current')
cfgRingCount = MibScalar((1, 3, 6, 1, 4, 1, 5812, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCount.setStatus('current')
cfgRingTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 4, 7), )
if mibBuilder.loadTexts: cfgRingTable.setStatus('current')
cfgRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1), ).setIndexNames((0, "RING-MIB", "phyRingSlotNo"), (0, "RING-MIB", "phyRingPortNo"), (0, "RING-MIB", "logRingVPortNo"))
if mibBuilder.loadTexts: cfgRingEntry.setStatus('current')
cfgRingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("out-of-service", 2), ("createAndGo", 4), ("createAndWait", 5), ("delete", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingRowStatus.setStatus('current')
cfgRingAdminCost = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 2), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingAdminCost.setStatus('current')
cfgRingName = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingName.setStatus('current')
cfgRingMeshFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingMeshFactor.setStatus('current')
cfgRingEirOverSub = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 65000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingEirOverSub.setStatus('current')
cfgRingProtectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("upsr", 2), ("blsr", 3), ("flex", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingProtectMode.setStatus('current')
cfgRingExceptNes = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 496))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingExceptNes.setStatus('current')
cfgRingNeTopo = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 496))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingNeTopo.setStatus('current')
cfgRingIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gneSupplied", 1), ("takenFromNe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingIpMode.setStatus('current')
cfgRingFrameMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("axson", 1), ("pos", 2), ("axsonNBOS", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingFrameMode.setStatus('current')
cfgRingOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingOperStatus.setStatus('current')
cfgRingCurNumTdmCkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCurNumTdmCkts.setStatus('current')
cfgRingCurNumFreeChans = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCurNumFreeChans.setStatus('current')
cfgRingNeAdminCost = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingNeAdminCost.setStatus('current')
cfgRingCurNumDataCkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCurNumDataCkts.setStatus('current')
cfgRingCurAllocTdmBwKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCurAllocTdmBwKbits.setStatus('current')
cfgRingCurAllocCirBwKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCurAllocCirBwKbits.setStatus('current')
cfgRingCurAllocEirBwKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCurAllocEirBwKbits.setStatus('current')
cfgRingCurAvailBwKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCurAvailBwKbits.setStatus('current')
cfgRingTdmAvgUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTdmAvgUtilPercent.setStatus('current')
cfgRingTdmLastUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTdmLastUtilPercent.setStatus('current')
cfgRingTdmMaxUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTdmMaxUtilPercent.setStatus('current')
cfgRingDataAvgUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingDataAvgUtilPercent.setStatus('current')
cfgRingDataLastUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingDataLastUtilPercent.setStatus('current')
cfgRingDataMaxUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingDataMaxUtilPercent.setStatus('current')
cfgRingTotalAvgUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTotalAvgUtilPercent.setStatus('current')
cfgRingTotalLastUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTotalLastUtilPercent.setStatus('current')
cfgRingTotalMaxUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTotalMaxUtilPercent.setStatus('current')
cfgRingTdmTrafficKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTdmTrafficKbits.setStatus('current')
cfgRingTdmLastTrafficKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTdmLastTrafficKbits.setStatus('current')
cfgRingDataTrafficKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingDataTrafficKbits.setStatus('current')
cfgRingDataLastTrafficKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingDataLastTrafficKbits.setStatus('current')
cfgRingDataNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingDataNumPkts.setStatus('current')
cfgRingDataLastNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingDataLastNumPkts.setStatus('current')
cfgRingStatsCollElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 37), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingStatsCollElapsedTime.setStatus('current')
cfgRingStatsPeriodTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 38), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingStatsPeriodTime.setStatus('current')
cfgRingTimeSinceLastOperStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 39), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTimeSinceLastOperStatusChange.setStatus('current')
cfgRingTdmMinUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTdmMinUtilPercent.setStatus('current')
cfgRingDataMinUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingDataMinUtilPercent.setStatus('current')
cfgRingTotalMinUtilPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingTotalMinUtilPercent.setStatus('current')
cfgRingAttUpsrSwitchCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("axsonUpsrScClear", 1), ("axsonUpsrScLockoutOfProtection", 2), ("axsonUpsrScForcedSwToProtection", 3), ("axsonUpsrScForcedSwToWorking", 4), ("axsonUpsrScManualSwToProtection", 5), ("axsonUpsrScManualSwToWorking", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingAttUpsrSwitchCmd.setStatus('current')
cfgRingIsRevertiveModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 44), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingIsRevertiveModeEnabled.setStatus('current')
cfgRingWaitToRestorePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgRingWaitToRestorePeriod.setStatus('current')
cfgRingCurTdmAvailBwKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCurTdmAvailBwKbits.setStatus('current')
cfgRingCurDataAvailBwKbits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 4, 7, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgRingCurDataAvailBwKbits.setStatus('current')
ringOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,3)).setObjects(("RING-MIB", "cfgRingName"), ("RING-MIB", "cfgRingOperStatus"))
neReachabilityChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,4)).setObjects(("SNMPv2-MIB", "sysName"), ("DEVICE-MIB", "chassisIpAddr"), ("DEVICE-MIB", "chassisElemReachStatus"))
lambdaStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,5)).setObjects(("RING-MIB", "cfgRingName"), ("RING-MIB", "logRingLambdaStatus"), ("RING-MIB", "logRingCutLocationIp"), ("RING-MIB", "logRingCutLocationName"))
ringProtoErrorStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,6)).setObjects(("RING-MIB", "cfgRingName"), ("RING-MIB", "logRingProtoStatusTxt"), ("RING-MIB", "logRingProtoStatus"))
ringProtoWarnStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,7)).setObjects(("RING-MIB", "cfgRingName"), ("RING-MIB", "logRingProtoStatusTxt"), ("RING-MIB", "logRingProtoStatus"))
ringTopoChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,56)).setObjects(("RING-MIB", "cfgRingName"))
mibBuilder.exportSymbols("RING-MIB", cfgRingCurAllocEirBwKbits=cfgRingCurAllocEirBwKbits, ringProtoErrorStatusChange=ringProtoErrorStatusChange, actLogRingElemTable=actLogRingElemTable, logRingGneRingPort=logRingGneRingPort, cfgRingTdmLastUtilPercent=cfgRingTdmLastUtilPercent, cfgRingDataMinUtilPercent=cfgRingDataMinUtilPercent, ringOperStatusChange=ringOperStatusChange, logRingElemIsLambdaCutHere=logRingElemIsLambdaCutHere, phyRingSlotNo=phyRingSlotNo, logRingOtherSlot=logRingOtherSlot, logRingCutLocationIp=logRingCutLocationIp, cfgRingDataNumPkts=cfgRingDataNumPkts, cfgRingCurNumFreeChans=cfgRingCurNumFreeChans, actLogRingEntry=actLogRingEntry, actLogRingTable=actLogRingTable, actLogRingElemEntry=actLogRingElemEntry, cfgRingOperStatus=cfgRingOperStatus, cfgRingTdmMinUtilPercent=cfgRingTdmMinUtilPercent, logRingElemIsReachable=logRingElemIsReachable, cfgRingCurNumDataCkts=cfgRingCurNumDataCkts, logRingGneIpAddr=logRingGneIpAddr, logRingElemActiveMM=logRingElemActiveMM, cfgRingTable=cfgRingTable, neReachabilityChange=neReachabilityChange, logRingElemIpAddr=logRingElemIpAddr, cfgRingCurTdmAvailBwKbits=cfgRingCurTdmAvailBwKbits, cfgRingDataLastUtilPercent=cfgRingDataLastUtilPercent, logRingCutLocationName=logRingCutLocationName, logRingElemPortId=logRingElemPortId, cfgRingStatsPeriodTime=cfgRingStatsPeriodTime, cfgRingEntry=cfgRingEntry, cfgRingName=cfgRingName, logRingGneRingSlot=logRingGneRingSlot, cfgRingNeAdminCost=cfgRingNeAdminCost, cfgRingCurAllocTdmBwKbits=cfgRingCurAllocTdmBwKbits, cfgRingAttUpsrSwitchCmd=cfgRingAttUpsrSwitchCmd, logRingElemChassisId=logRingElemChassisId, logRingAttRingType=logRingAttRingType, cfgRingAdminCost=cfgRingAdminCost, cfgRingTotalMaxUtilPercent=cfgRingTotalMaxUtilPercent, actPhyRingTable=actPhyRingTable, logRingElemRxSegCutSeverity=logRingElemRxSegCutSeverity, logRingVPortNo=logRingVPortNo, cfgRingDataLastNumPkts=cfgRingDataLastNumPkts, cfgRingNeTopo=cfgRingNeTopo, ringTopoChange=ringTopoChange, cfgRingTotalAvgUtilPercent=cfgRingTotalAvgUtilPercent, logRingCapacity=logRingCapacity, cfgRingTdmAvgUtilPercent=cfgRingTdmAvgUtilPercent, PYSNMP_MODULE_ID=ringMIB, cfgRingRowStatus=cfgRingRowStatus, cfgRingMeshFactor=cfgRingMeshFactor, cfgRingEirOverSub=cfgRingEirOverSub, ringProtoWarnStatusChange=ringProtoWarnStatusChange, logRingUpsNgbrRingPort=logRingUpsNgbrRingPort, actPhyRingCount=actPhyRingCount, logRingIsConfigured=logRingIsConfigured, logRingUpsNgbrRingSlot=logRingUpsNgbrRingSlot, actLogRingCount=actLogRingCount, cfgRingCurAvailBwKbits=cfgRingCurAvailBwKbits, cfgRingTimeSinceLastOperStatusChange=cfgRingTimeSinceLastOperStatusChange, cfgRingTotalMinUtilPercent=cfgRingTotalMinUtilPercent, logRingElemNodeId=logRingElemNodeId, cfgRingStatsCollElapsedTime=cfgRingStatsCollElapsedTime, logRingGneRingVport=logRingGneRingVport, logRingUpsNgbrRingVport=logRingUpsNgbrRingVport, actPhyRingEntry=actPhyRingEntry, cfgRingDataLastTrafficKbits=cfgRingDataLastTrafficKbits, cfgRingDataAvgUtilPercent=cfgRingDataAvgUtilPercent, cfgRingDataMaxUtilPercent=cfgRingDataMaxUtilPercent, cfgRingFrameMode=cfgRingFrameMode, logRingElemChassisCharacter=logRingElemChassisCharacter, cfgRingTdmTrafficKbits=cfgRingTdmTrafficKbits, cfgRingCount=cfgRingCount, logRingElemCount=logRingElemCount, cfgRingTotalLastUtilPercent=cfgRingTotalLastUtilPercent, logRingGneName=logRingGneName, cfgRingWaitToRestorePeriod=cfgRingWaitToRestorePeriod, logRingElemMACAddr=logRingElemMACAddr, logRingLambdaStatus=logRingLambdaStatus, logRingProtoStatusTxt=logRingProtoStatusTxt, cfgRingExceptNes=cfgRingExceptNes, cfgRingTdmLastTrafficKbits=cfgRingTdmLastTrafficKbits, logRingElemIsInNeTable=logRingElemIsInNeTable, lambdaStatusChange=lambdaStatusChange, cfgRingTdmMaxUtilPercent=cfgRingTdmMaxUtilPercent, phyRingPortNo=phyRingPortNo, cfgRingCurDataAvailBwKbits=cfgRingCurDataAvailBwKbits, logRingUpsNgbrName=logRingUpsNgbrName, cfgRingCurNumTdmCkts=cfgRingCurNumTdmCkts, cfgRingDataTrafficKbits=cfgRingDataTrafficKbits, cfgRingIpMode=cfgRingIpMode, cfgRingProtectMode=cfgRingProtectMode, cfgRingCurAllocCirBwKbits=cfgRingCurAllocCirBwKbits, logRingOtherPort=logRingOtherPort, cfgRingIsRevertiveModeEnabled=cfgRingIsRevertiveModeEnabled, logRingOtherVport=logRingOtherVport, ringMIB=ringMIB, logRingProtoStatus=logRingProtoStatus, logRingIsRingMaster=logRingIsRingMaster, logRingElemIndex=logRingElemIndex, logRingElemName=logRingElemName, logRingUpsNgbrIpAddr=logRingUpsNgbrIpAddr)
