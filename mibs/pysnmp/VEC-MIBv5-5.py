#
# PySNMP MIB module VEC-MIBv5-5 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VEC-MIBv5-5
# Produced by pysmi-0.3.4 at Mon Apr 29 21:26:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, NotificationType, Counter64, ObjectIdentity, ModuleIdentity, Gauge32, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, enterprises, Counter32, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "NotificationType", "Counter64", "ObjectIdentity", "ModuleIdentity", "Gauge32", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "enterprises", "Counter32", "Unsigned32", "iso")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
emersonESNA = MibIdentifier((1, 3, 6, 1, 4, 1, 885))
vecMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 885, 1))
if mibBuilder.loadTexts: vecMIB.setLastUpdated('0809231400Z')
if mibBuilder.loadTexts: vecMIB.setOrganization(' Emerson Energy Systems North America (ESNA)')
vec = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3))
vecInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 1))
vecMessageStats = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 1, 2))
psStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 2))
psMeasurement = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 2, 1))
psTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 3))
psAlarmsGeneral1 = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 3, 1))
psAlarmsGeneral2 = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 3, 2))
psAlarmsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 3, 3))
vecFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vecFirmwareVersion.setStatus('mandatory')
vecMessageRequests = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vecMessageRequests.setStatus('mandatory')
vecMessageTransmissions = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vecMessageTransmissions.setStatus('mandatory')
vecMessageNoResponses = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vecMessageNoResponses.setStatus('mandatory')
vecMessageBadCRCs = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vecMessageBadCRCs.setStatus('mandatory')
vecMessageLinkErrors = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vecMessageLinkErrors.setStatus('mandatory')
vecMessagePartialResponses = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vecMessagePartialResponses.setStatus('mandatory')
vecMessageWrongPackets = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vecMessageWrongPackets.setStatus('mandatory')
vecMessageErrorReplies = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vecMessageErrorReplies.setStatus('mandatory')
psSystemVoltage = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSystemVoltage.setStatus('mandatory')
psSystemCurrent = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSystemCurrent.setStatus('mandatory')
psSubsystemVoltage = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSubsystemVoltage.setStatus('mandatory')
psSubsystemCurrent = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSubsystemCurrent.setStatus('mandatory')
psSenseVoltage = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSenseVoltage.setStatus('mandatory')
psPCUTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPCUTotalCurrent.setStatus('mandatory')
psBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryCurrent.setStatus('mandatory')
psBatteryReserveHours = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBatteryReserveHours.setStatus('mandatory')
psTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 885, 3, 2, 2), )
if mibBuilder.loadTexts: psTemperatureTable.setStatus('mandatory')
psTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 885, 3, 2, 2, 1), ).setIndexNames((0, "VEC-MIBv5-5", "psTemperatureIndex"))
if mibBuilder.loadTexts: psTemperatureEntry.setStatus('mandatory')
psTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 885, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psTemperatureIndex.setStatus('mandatory')
psTemperatureMeasurement = MibTableColumn((1, 3, 6, 1, 4, 1, 885, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psTemperatureMeasurement.setStatus('mandatory')
psLVDTable = MibTable((1, 3, 6, 1, 4, 1, 885, 3, 2, 3), )
if mibBuilder.loadTexts: psLVDTable.setStatus('mandatory')
psLVDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 885, 3, 2, 3, 1), ).setIndexNames((0, "VEC-MIBv5-5", "psLVDIndex"))
if mibBuilder.loadTexts: psLVDEntry.setStatus('mandatory')
psLVDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 885, 3, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psLVDIndex.setStatus('mandatory')
psLVDCircuitA = MibTableColumn((1, 3, 6, 1, 4, 1, 885, 3, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psLVDCircuitA.setStatus('mandatory')
psLVDCircuitB = MibTableColumn((1, 3, 6, 1, 4, 1, 885, 3, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psLVDCircuitB.setStatus('mandatory')
psDistributionTable = MibTable((1, 3, 6, 1, 4, 1, 885, 3, 2, 4), )
if mibBuilder.loadTexts: psDistributionTable.setStatus('mandatory')
psShuntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 885, 3, 2, 4, 1), ).setIndexNames((0, "VEC-MIBv5-5", "psShuntIndex"))
if mibBuilder.loadTexts: psShuntEntry.setStatus('mandatory')
psShuntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 885, 3, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psShuntIndex.setStatus('mandatory')
psShuntCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 885, 3, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psShuntCurrent.setStatus('mandatory')
psPCUTable = MibTable((1, 3, 6, 1, 4, 1, 885, 3, 2, 5), )
if mibBuilder.loadTexts: psPCUTable.setStatus('mandatory')
psPCUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 885, 3, 2, 5, 1), ).setIndexNames((0, "VEC-MIBv5-5", "psPCUIndex"))
if mibBuilder.loadTexts: psPCUEntry.setStatus('mandatory')
psPCUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 885, 3, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPCUIndex.setStatus('mandatory')
psPCUFail = MibTableColumn((1, 3, 6, 1, 4, 1, 885, 3, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPCUFail.setStatus('mandatory')
psPCUCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 885, 3, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPCUCurrent.setStatus('mandatory')
psPCUFerroGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 885, 3, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPCUFerroGateway.setStatus('mandatory')
psEmergencyStop = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 1))
if mibBuilder.loadTexts: psEmergencyStop.setStatus('current')
psAlarmVeryLowVoltage = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 2))
if mibBuilder.loadTexts: psAlarmVeryLowVoltage.setStatus('current')
psAlarmLowVoltage = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 3))
if mibBuilder.loadTexts: psAlarmLowVoltage.setStatus('current')
psAlarmSystemHighVoltage1 = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 4))
if mibBuilder.loadTexts: psAlarmSystemHighVoltage1.setStatus('current')
psAlarmSystemHighVoltage2 = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 5))
if mibBuilder.loadTexts: psAlarmSystemHighVoltage2.setStatus('current')
psAlarmSubsystemLowVoltage = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 6))
if mibBuilder.loadTexts: psAlarmSubsystemLowVoltage.setStatus('current')
psAlarmSubsystemHighVoltage = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 7))
if mibBuilder.loadTexts: psAlarmSubsystemHighVoltage.setStatus('current')
psAlarmSystemFuse = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 8))
if mibBuilder.loadTexts: psAlarmSystemFuse.setStatus('current')
psAlarmSubsystemFuse = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 9))
if mibBuilder.loadTexts: psAlarmSubsystemFuse.setStatus('current')
psAlarmAllACOff = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 10))
if mibBuilder.loadTexts: psAlarmAllACOff.setStatus('current')
psAlarmSystemOverCurrent = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 11))
if mibBuilder.loadTexts: psAlarmSystemOverCurrent.setStatus('current')
psAlarmSubsystemOverCurrent = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 12))
if mibBuilder.loadTexts: psAlarmSubsystemOverCurrent.setStatus('current')
psAlarmLVDsAreInhibited = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 13))
if mibBuilder.loadTexts: psAlarmLVDsAreInhibited.setStatus('current')
psAlarmTestEqualizeMode = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 14))
if mibBuilder.loadTexts: psAlarmTestEqualizeMode.setStatus('current')
psAlarmMinor = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 15))
if mibBuilder.loadTexts: psAlarmMinor.setStatus('current')
psAlarmMajor = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 16))
if mibBuilder.loadTexts: psAlarmMajor.setStatus('current')
psAlarmSenseVoltageFuse = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 17))
if mibBuilder.loadTexts: psAlarmSenseVoltageFuse.setStatus('current')
psAlarmSystemVoltageFuse = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 18))
if mibBuilder.loadTexts: psAlarmSystemVoltageFuse.setStatus('current')
psAlarmNoSystemVoltage = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 19))
if mibBuilder.loadTexts: psAlarmNoSystemVoltage.setStatus('current')
psAlarmNoSubsystemVoltage = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 20))
if mibBuilder.loadTexts: psAlarmNoSubsystemVoltage.setStatus('current')
psAlarmNoSenseVoltage = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 21))
if mibBuilder.loadTexts: psAlarmNoSenseVoltage.setStatus('current')
psAlarmDisplayNoReply = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 22))
if mibBuilder.loadTexts: psAlarmDisplayNoReply.setStatus('current')
psAlarmSubsystemMajor = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 23))
if mibBuilder.loadTexts: psAlarmSubsystemMajor.setStatus('current')
psAlarmSubsystemMinor = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 24))
if mibBuilder.loadTexts: psAlarmSubsystemMinor.setStatus('current')
psAlarmHighACLine = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 25))
if mibBuilder.loadTexts: psAlarmHighACLine.setStatus('current')
psAlarmSenseVoltageError = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 1, 26))
if mibBuilder.loadTexts: psAlarmSenseVoltageError.setStatus('current')
psTestEqualizeHardwareInput = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 2, 1))
if mibBuilder.loadTexts: psTestEqualizeHardwareInput.setStatus('current')
psPCUFailMajor = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 2, 2))
if mibBuilder.loadTexts: psPCUFailMajor.setStatus('current')
psPCUFailMinor = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 2, 3))
if mibBuilder.loadTexts: psPCUFailMinor.setStatus('current')
psLVDAlarmMajor = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 2, 4))
if mibBuilder.loadTexts: psLVDAlarmMajor.setStatus('current')
psLVDAlarmMinor = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 2, 5))
if mibBuilder.loadTexts: psLVDAlarmMinor.setStatus('current')
psPCULoadShare = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 2, 6))
if mibBuilder.loadTexts: psPCULoadShare.setStatus('current')
psACFailMajor = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 2, 7))
if mibBuilder.loadTexts: psACFailMajor.setStatus('current')
psACFailMinor = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 2, 8))
if mibBuilder.loadTexts: psACFailMinor.setStatus('current')
psMCACommFail = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 2, 9))
if mibBuilder.loadTexts: psMCACommFail.setStatus('current')
psHVSActive = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 2, 10))
if mibBuilder.loadTexts: psHVSActive.setStatus('current')
psRemoteHVSActive = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 2, 11))
if mibBuilder.loadTexts: psRemoteHVSActive.setStatus('current')
psRemoteEstopActive = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 2, 12))
if mibBuilder.loadTexts: psRemoteEstopActive.setStatus('current')
psAlarmBatteryChargeOverCurrent = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 3, 1))
if mibBuilder.loadTexts: psAlarmBatteryChargeOverCurrent.setStatus('current')
psBatteryCurrentLimitInhibited = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 3, 2))
if mibBuilder.loadTexts: psBatteryCurrentLimitInhibited.setStatus('current')
psAlarmBatteryPoorHealth = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 3, 3))
if mibBuilder.loadTexts: psAlarmBatteryPoorHealth.setStatus('current')
psAlarmBatteryReserveLow = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 3, 4))
if mibBuilder.loadTexts: psAlarmBatteryReserveLow.setStatus('current')
psPCUSummaryTypeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 3, 4))
psPCUSummaryTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 3, 4, 1))
psAlarmPCUSummary = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 4, 1, 2))
if mibBuilder.loadTexts: psAlarmPCUSummary.setStatus('current')
psPCUNodeTypeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 3, 5))
psPCUTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 3, 5, 1))
psAlarmPCUId = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmPCUId.setStatus('mandatory')
psAlarmPCUHighACLine = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 5, 1, 2))
if mibBuilder.loadTexts: psAlarmPCUHighACLine.setStatus('current')
psAlarmPCUControllerFailure = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 5, 1, 3))
if mibBuilder.loadTexts: psAlarmPCUControllerFailure.setStatus('current')
psAlarmPCUFanSlowOrStopped = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 5, 1, 4))
if mibBuilder.loadTexts: psAlarmPCUFanSlowOrStopped.setStatus('current')
psAlarmPCUTurnedOffByMca = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 5, 1, 5))
if mibBuilder.loadTexts: psAlarmPCUTurnedOffByMca.setStatus('current')
psAlarmPCUCircuitBreakerOff = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 5, 1, 6))
if mibBuilder.loadTexts: psAlarmPCUCircuitBreakerOff.setStatus('current')
psAlarmPCUDCorACConvertFail = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 5, 1, 7))
if mibBuilder.loadTexts: psAlarmPCUDCorACConvertFail.setStatus('current')
psAlarmPCUThermalAlarmorCurrentLimit = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 5, 1, 8))
if mibBuilder.loadTexts: psAlarmPCUThermalAlarmorCurrentLimit.setStatus('current')
psAlarmPCUEmergencyStop = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 5, 1, 9))
if mibBuilder.loadTexts: psAlarmPCUEmergencyStop.setStatus('current')
psAlarmPCUInputSwitchOff = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 5, 1, 10))
if mibBuilder.loadTexts: psAlarmPCUInputSwitchOff.setStatus('current')
psAlarmPCUHighVoltageShutdown = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 5, 1, 11))
if mibBuilder.loadTexts: psAlarmPCUHighVoltageShutdown.setStatus('current')
psAlarmPCUACInputIsOffOrLow = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 5, 1, 12))
if mibBuilder.loadTexts: psAlarmPCUACInputIsOffOrLow.setStatus('current')
psAlarmPCUCommunicationFailureWithMCA = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 5, 1, 13))
if mibBuilder.loadTexts: psAlarmPCUCommunicationFailureWithMCA.setStatus('current')
psAlarmPCUSenseLeadOpen = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 5, 1, 14))
if mibBuilder.loadTexts: psAlarmPCUSenseLeadOpen.setStatus('current')
psShuntTypeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 3, 6))
psShuntTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 3, 6, 1))
psAlarmShuntId = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmShuntId.setStatus('mandatory')
psAlarmShuntType = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 6, 1, 2))
if mibBuilder.loadTexts: psAlarmShuntType.setStatus('current')
psAlarmShuntNoReply = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 6, 1, 3))
if mibBuilder.loadTexts: psAlarmShuntNoReply.setStatus('current')
psLVDTypeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 3, 7))
psLVDTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 3, 7, 1))
psAlarmLVDId = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmLVDId.setStatus('mandatory')
psAlarmLVDDisconnectedA = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 7, 1, 2))
if mibBuilder.loadTexts: psAlarmLVDDisconnectedA.setStatus('current')
psAlarmLVDNoReplyA = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 7, 1, 3))
if mibBuilder.loadTexts: psAlarmLVDNoReplyA.setStatus('current')
psAlarmLVDBoardFailA = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 7, 1, 4))
if mibBuilder.loadTexts: psAlarmLVDBoardFailA.setStatus('current')
psAlarmLVDDisconnectedB = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 7, 1, 5))
if mibBuilder.loadTexts: psAlarmLVDDisconnectedB.setStatus('current')
psAlarmLVDNoReplyB = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 7, 1, 6))
if mibBuilder.loadTexts: psAlarmLVDNoReplyB.setStatus('current')
psAlarmLVDBoardFailB = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 7, 1, 7))
if mibBuilder.loadTexts: psAlarmLVDBoardFailB.setStatus('current')
psTemperatureTypeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 3, 8))
psTemperatureTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 3, 8, 1))
psAlarmTemperatureId = MibScalar((1, 3, 6, 1, 4, 1, 885, 3, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmTemperatureId.setStatus('mandatory')
psAlarmTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 8, 1, 2))
if mibBuilder.loadTexts: psAlarmTemperatureHigh.setStatus('current')
psAlarmTemperatureLow = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 8, 1, 3))
if mibBuilder.loadTexts: psAlarmTemperatureLow.setStatus('current')
psAlarmTemperatureNoReply = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 8, 1, 4))
if mibBuilder.loadTexts: psAlarmTemperatureNoReply.setStatus('current')
psSysInfoTypeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 3, 9))
psSysInfoTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 885, 3, 3, 9, 1))
psAlarmSysInfoError1 = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 9, 1, 1))
if mibBuilder.loadTexts: psAlarmSysInfoError1.setStatus('current')
psAlarmSysInfoError2 = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 9, 1, 2))
if mibBuilder.loadTexts: psAlarmSysInfoError2.setStatus('current')
psAlarmSysInfoString1 = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 9, 1, 3))
if mibBuilder.loadTexts: psAlarmSysInfoString1.setStatus('current')
psAlarmSysInfoString2 = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 9, 1, 4))
if mibBuilder.loadTexts: psAlarmSysInfoString2.setStatus('current')
psAlarmSysInfoString3 = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 9, 1, 5))
if mibBuilder.loadTexts: psAlarmSysInfoString3.setStatus('current')
psAlarmSysInfoString4 = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 9, 1, 6))
if mibBuilder.loadTexts: psAlarmSysInfoString4.setStatus('current')
psAlarmSysInfoString5 = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 9, 1, 7))
if mibBuilder.loadTexts: psAlarmSysInfoString5.setStatus('current')
psAlarmSysInfoString6 = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 9, 1, 8))
if mibBuilder.loadTexts: psAlarmSysInfoString6.setStatus('current')
psAlarmSysInfoString7 = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 9, 1, 9))
if mibBuilder.loadTexts: psAlarmSysInfoString7.setStatus('current')
psAlarmSysInfoString8 = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 9, 1, 10))
if mibBuilder.loadTexts: psAlarmSysInfoString8.setStatus('current')
psAlarmSysInfoString9 = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 9, 1, 11))
if mibBuilder.loadTexts: psAlarmSysInfoString9.setStatus('current')
psAlarmSysInfoString10 = NotificationType((1, 3, 6, 1, 4, 1, 885, 3, 3, 9, 1, 12))
if mibBuilder.loadTexts: psAlarmSysInfoString10.setStatus('current')
mibBuilder.exportSymbols("VEC-MIBv5-5", psAlarmSystemFuse=psAlarmSystemFuse, psMeasurement=psMeasurement, psShuntEntry=psShuntEntry, psPCUEntry=psPCUEntry, psAlarmPCUInputSwitchOff=psAlarmPCUInputSwitchOff, psAlarmSenseVoltageError=psAlarmSenseVoltageError, vecInformation=vecInformation, psBatteryCurrent=psBatteryCurrent, psAlarmTestEqualizeMode=psAlarmTestEqualizeMode, vecMessageWrongPackets=vecMessageWrongPackets, psAlarmLVDId=psAlarmLVDId, psAlarmNoSubsystemVoltage=psAlarmNoSubsystemVoltage, psAlarmShuntNoReply=psAlarmShuntNoReply, vecMessageStats=vecMessageStats, psBatteryReserveHours=psBatteryReserveHours, psAlarmSysInfoString7=psAlarmSysInfoString7, psAlarmMajor=psAlarmMajor, psAlarmLowVoltage=psAlarmLowVoltage, psLVDIndex=psLVDIndex, psAlarmPCUSummary=psAlarmPCUSummary, psAlarmNoSenseVoltage=psAlarmNoSenseVoltage, psAlarmShuntType=psAlarmShuntType, psAlarmPCUEmergencyStop=psAlarmPCUEmergencyStop, psSenseVoltage=psSenseVoltage, psAlarmPCUFanSlowOrStopped=psAlarmPCUFanSlowOrStopped, psStatus=psStatus, psAlarmPCUSenseLeadOpen=psAlarmPCUSenseLeadOpen, psAlarmSysInfoString4=psAlarmSysInfoString4, psTestEqualizeHardwareInput=psTestEqualizeHardwareInput, psAlarmLVDBoardFailA=psAlarmLVDBoardFailA, psPCUFerroGateway=psPCUFerroGateway, psPCUNodeTypeTraps=psPCUNodeTypeTraps, psAlarmSystemVoltageFuse=psAlarmSystemVoltageFuse, psAlarmSubsystemOverCurrent=psAlarmSubsystemOverCurrent, psAlarmBatteryPoorHealth=psAlarmBatteryPoorHealth, psAlarmPCUHighACLine=psAlarmPCUHighACLine, psAlarmSubsystemMinor=psAlarmSubsystemMinor, psACFailMajor=psACFailMajor, psAlarmSysInfoError2=psAlarmSysInfoError2, psAlarmHighACLine=psAlarmHighACLine, psSystemCurrent=psSystemCurrent, vecMessageNoResponses=vecMessageNoResponses, psAlarmPCUCommunicationFailureWithMCA=psAlarmPCUCommunicationFailureWithMCA, psAlarmSubsystemMajor=psAlarmSubsystemMajor, psAlarmPCUThermalAlarmorCurrentLimit=psAlarmPCUThermalAlarmorCurrentLimit, psAlarmSubsystemLowVoltage=psAlarmSubsystemLowVoltage, vecMessageBadCRCs=vecMessageBadCRCs, psAlarmLVDNoReplyA=psAlarmLVDNoReplyA, vec=vec, PYSNMP_MODULE_ID=vecMIB, psPCUTraps=psPCUTraps, psAlarmLVDBoardFailB=psAlarmLVDBoardFailB, psBatteryCurrentLimitInhibited=psBatteryCurrentLimitInhibited, psTraps=psTraps, psAlarmBatteryReserveLow=psAlarmBatteryReserveLow, psLVDTraps=psLVDTraps, psTemperatureEntry=psTemperatureEntry, psAlarmPCUTurnedOffByMca=psAlarmPCUTurnedOffByMca, vecMessageTransmissions=vecMessageTransmissions, psSubsystemCurrent=psSubsystemCurrent, psPCUSummaryTraps=psPCUSummaryTraps, psAlarmLVDDisconnectedA=psAlarmLVDDisconnectedA, psAlarmSysInfoError1=psAlarmSysInfoError1, psLVDTypeTraps=psLVDTypeTraps, psPCUFail=psPCUFail, psShuntIndex=psShuntIndex, psPCUTotalCurrent=psPCUTotalCurrent, psAlarmDisplayNoReply=psAlarmDisplayNoReply, psAlarmSystemOverCurrent=psAlarmSystemOverCurrent, psMCACommFail=psMCACommFail, vecFirmwareVersion=vecFirmwareVersion, psAlarmSystemHighVoltage2=psAlarmSystemHighVoltage2, psPCUFailMinor=psPCUFailMinor, psAlarmSubsystemFuse=psAlarmSubsystemFuse, psShuntTypeTraps=psShuntTypeTraps, psPCUFailMajor=psPCUFailMajor, psPCUIndex=psPCUIndex, psACFailMinor=psACFailMinor, psAlarmTemperatureLow=psAlarmTemperatureLow, psLVDTable=psLVDTable, psSysInfoTraps=psSysInfoTraps, psAlarmPCUHighVoltageShutdown=psAlarmPCUHighVoltageShutdown, psAlarmMinor=psAlarmMinor, psAlarmSysInfoString5=psAlarmSysInfoString5, psAlarmSystemHighVoltage1=psAlarmSystemHighVoltage1, psSystemVoltage=psSystemVoltage, vecMIB=vecMIB, emersonESNA=emersonESNA, psRemoteHVSActive=psRemoteHVSActive, psAlarmSysInfoString10=psAlarmSysInfoString10, psShuntTraps=psShuntTraps, psAlarmsBattery=psAlarmsBattery, psAlarmSubsystemHighVoltage=psAlarmSubsystemHighVoltage, psAlarmSysInfoString9=psAlarmSysInfoString9, psAlarmNoSystemVoltage=psAlarmNoSystemVoltage, psTemperatureTable=psTemperatureTable, psAlarmsGeneral2=psAlarmsGeneral2, psPCUSummaryTypeTraps=psPCUSummaryTypeTraps, psRemoteEstopActive=psRemoteEstopActive, psTemperatureTypeTraps=psTemperatureTypeTraps, psDistributionTable=psDistributionTable, psPCUTable=psPCUTable, psTemperatureIndex=psTemperatureIndex, psAlarmShuntId=psAlarmShuntId, psLVDCircuitB=psLVDCircuitB, psAlarmTemperatureId=psAlarmTemperatureId, psAlarmSysInfoString1=psAlarmSysInfoString1, psLVDEntry=psLVDEntry, psAlarmAllACOff=psAlarmAllACOff, psAlarmSenseVoltageFuse=psAlarmSenseVoltageFuse, psSubsystemVoltage=psSubsystemVoltage, psPCULoadShare=psPCULoadShare, psAlarmPCUId=psAlarmPCUId, psEmergencyStop=psEmergencyStop, vecMessageErrorReplies=vecMessageErrorReplies, psAlarmLVDDisconnectedB=psAlarmLVDDisconnectedB, psAlarmSysInfoString3=psAlarmSysInfoString3, psAlarmSysInfoString2=psAlarmSysInfoString2, vecMessagePartialResponses=vecMessagePartialResponses, psAlarmSysInfoString8=psAlarmSysInfoString8, psAlarmPCUACInputIsOffOrLow=psAlarmPCUACInputIsOffOrLow, psAlarmPCUCircuitBreakerOff=psAlarmPCUCircuitBreakerOff, psAlarmSysInfoString6=psAlarmSysInfoString6, vecMessageLinkErrors=vecMessageLinkErrors, psAlarmTemperatureNoReply=psAlarmTemperatureNoReply, psAlarmBatteryChargeOverCurrent=psAlarmBatteryChargeOverCurrent, vecMessageRequests=vecMessageRequests, psShuntCurrent=psShuntCurrent, psLVDAlarmMajor=psLVDAlarmMajor, psLVDAlarmMinor=psLVDAlarmMinor, psTemperatureTraps=psTemperatureTraps, psAlarmPCUControllerFailure=psAlarmPCUControllerFailure, psSysInfoTypeTraps=psSysInfoTypeTraps, psAlarmsGeneral1=psAlarmsGeneral1, psLVDCircuitA=psLVDCircuitA, psAlarmLVDsAreInhibited=psAlarmLVDsAreInhibited, psHVSActive=psHVSActive, psAlarmPCUDCorACConvertFail=psAlarmPCUDCorACConvertFail, psAlarmLVDNoReplyB=psAlarmLVDNoReplyB, psPCUCurrent=psPCUCurrent, psAlarmVeryLowVoltage=psAlarmVeryLowVoltage, psTemperatureMeasurement=psTemperatureMeasurement, psAlarmTemperatureHigh=psAlarmTemperatureHigh)
