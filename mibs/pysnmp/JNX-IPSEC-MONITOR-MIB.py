#
# PySNMP MIB module JNX-IPSEC-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JNX-IPSEC-MONITOR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:47:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
jnxMibs, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
jnxSpSvcSetName, = mibBuilder.importSymbols("JUNIPER-SP-MIB", "jnxSpSvcSetName")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Unsigned32, Counter64, iso, Integer32, Gauge32, Bits, NotificationType, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "Counter64", "iso", "Integer32", "Gauge32", "Bits", "NotificationType", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ModuleIdentity", "IpAddress")
TextualConvention, TimeInterval, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeInterval", "DisplayString")
jnxIpSecMonitorMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 22))
jnxIpSecMonitorMIB.setRevisions(('2012-02-10 21:00',))
if mibBuilder.loadTexts: jnxIpSecMonitorMIB.setLastUpdated('201202102100Z')
if mibBuilder.loadTexts: jnxIpSecMonitorMIB.setOrganization('Juniper Networks, Inc.')
class JnxIkePeerType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("unknown", 0), ("idIpv4Addr", 1), ("idFqdn", 2), ("idDn", 3))

class JnxIkeNegoMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("main", 1), ("aggressive", 2), ("ikev2", 3))

class JnxIkeHashAlgo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("md5", 1), ("sha", 2), ("sha256", 3), ("sha384", 4))

class JnxIkeAuthMethod(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("preSharedKey", 1), ("dssSignature", 2), ("rsaSignature", 3), ("rsaEncryption", 4), ("revRsaEncryption", 5))

class JnxIkePeerRole(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("initiator", 1), ("responder", 2))

class JnxIkeNegState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("matured", 1), ("notmatured", 2))

class JnxDiffHellmanGrp(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 14, 19, 20))
    namedValues = NamedValues(("unknown", 0), ("modp768", 1), ("modp1024", 2), ("modp1536", 5), ("modp2048", 14), ("ecmodp256", 19), ("ecmodp384", 20))

class JnxKeyType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("keyIke", 1), ("keyManual", 2))

class JnxEncapMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("tunnel", 1), ("transport", 2))

class JnxEncryptAlgo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("espDes", 1), ("esp3des", 2), ("espNull", 3), ("espAes128", 4), ("espAes192", 5), ("espAes256", 6))

class JnxSpi(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(256, 4294967295)

class JnxAuthAlgo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))
    namedValues = NamedValues(("unknown", 0), ("hmacMd5", 2), ("hmacSha", 3), ("hmacSha256", 4))

class JnxRemotePeerType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("static", 1), ("dynamic", 2))

class JnxSAType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("manual", 1), ("dynamic", 2))

jnxIpSecMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1))
jnxIpSecLevels = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 1))
jnxIpSecPhaseOne = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2))
jnxIpSecPhaseTwo = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3))
jnxIpSecMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecMibLevel.setStatus('current')
jnxIkeTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1), )
if mibBuilder.loadTexts: jnxIkeTunnelTable.setStatus('current')
jnxIkeTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1), ).setIndexNames((0, "JUNIPER-SP-MIB", "jnxSpSvcSetName"), (0, "JNX-IPSEC-MONITOR-MIB", "jnxIkeTunRemoteGwAddrType"), (0, "JNX-IPSEC-MONITOR-MIB", "jnxIkeTunRemoteGwAddr"), (0, "JNX-IPSEC-MONITOR-MIB", "jnxIkeTunIndex"))
if mibBuilder.loadTexts: jnxIkeTunnelEntry.setStatus('current')
jnxIkeTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: jnxIkeTunIndex.setStatus('current')
jnxIkeTunLocalRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 2), JnxIkePeerRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunLocalRole.setStatus('current')
jnxIkeTunNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 3), JnxIkeNegState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunNegState.setStatus('current')
jnxIkeTunInitiatorCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunInitiatorCookie.setStatus('current')
jnxIkeTunResponderCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunResponderCookie.setStatus('current')
jnxIkeTunLocalIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 6), JnxIkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunLocalIdType.setStatus('current')
jnxIkeTunLocalIdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunLocalIdValue.setStatus('current')
jnxIkeTunLocalGwAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunLocalGwAddrType.setStatus('current')
jnxIkeTunLocalGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunLocalGwAddr.setStatus('current')
jnxIkeTunLocalCertName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunLocalCertName.setStatus('current')
jnxIkeTunRemoteIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 11), JnxIkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunRemoteIdType.setStatus('current')
jnxIkeTunRemoteIdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunRemoteIdValue.setStatus('current')
jnxIkeTunRemoteGwAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 13), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunRemoteGwAddrType.setStatus('current')
jnxIkeTunRemoteGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 14), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunRemoteGwAddr.setStatus('current')
jnxIkeTunNegoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 15), JnxIkeNegoMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunNegoMode.setStatus('current')
jnxIkeTunDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 16), JnxDiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunDiffHellmanGrp.setStatus('current')
jnxIkeTunEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 17), JnxEncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunEncryptAlgo.setStatus('current')
jnxIkeTunHashAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 18), JnxIkeHashAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunHashAlgo.setStatus('current')
jnxIkeTunAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 19), JnxIkeAuthMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunAuthMethod.setStatus('current')
jnxIkeTunLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunLifeTime.setStatus('current')
jnxIkeTunActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 21), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunActiveTime.setStatus('current')
jnxIkeTunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 22), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunInOctets.setStatus('current')
jnxIkeTunInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 23), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunInPkts.setStatus('current')
jnxIkeTunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 24), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunOutOctets.setStatus('current')
jnxIkeTunOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 2, 1, 1, 25), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIkeTunOutPkts.setStatus('current')
jnxIpSecTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1), )
if mibBuilder.loadTexts: jnxIpSecTunnelTable.setStatus('current')
jnxIpSecTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1), ).setIndexNames((0, "JUNIPER-SP-MIB", "jnxSpSvcSetName"), (0, "JNX-IPSEC-MONITOR-MIB", "jnxIpSecTunRemoteGwAddrType"), (0, "JNX-IPSEC-MONITOR-MIB", "jnxIpSecTunRemoteGwAddr"), (0, "JNX-IPSEC-MONITOR-MIB", "jnxIpSecTunIndex"))
if mibBuilder.loadTexts: jnxIpSecTunnelEntry.setStatus('current')
jnxIpSecTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: jnxIpSecTunIndex.setStatus('current')
jnxIpSecRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecRuleName.setStatus('current')
jnxIpSecTermName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTermName.setStatus('current')
jnxIpSecTunLocalGwAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTunLocalGwAddrType.setStatus('current')
jnxIpSecTunLocalGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTunLocalGwAddr.setStatus('current')
jnxIpSecTunRemoteGwAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTunRemoteGwAddrType.setStatus('current')
jnxIpSecTunRemoteGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTunRemoteGwAddr.setStatus('current')
jnxIpSecTunLocalProxyId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTunLocalProxyId.setStatus('current')
jnxIpSecTunRemoteProxyId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTunRemoteProxyId.setStatus('current')
jnxIpSecTunKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 10), JnxKeyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTunKeyType.setStatus('current')
jnxIpSecRemotePeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 11), JnxRemotePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecRemotePeerType.setStatus('current')
jnxIpSecTunMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTunMtu.setStatus('current')
jnxIpSecTunOutEncryptedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTunOutEncryptedBytes.setStatus('current')
jnxIpSecTunOutEncryptedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTunOutEncryptedPkts.setStatus('current')
jnxIpSecTunInDecryptedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTunInDecryptedBytes.setStatus('current')
jnxIpSecTunInDecryptedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTunInDecryptedPkts.setStatus('current')
jnxIpsSecTunAHInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpsSecTunAHInBytes.setStatus('current')
jnxIpsSecTunAHInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpsSecTunAHInPkts.setStatus('current')
jnxIpsSecTunAHOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpsSecTunAHOutBytes.setStatus('current')
jnxIpsSecTunAHOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpsSecTunAHOutPkts.setStatus('current')
jnxIpSecTunReplayDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTunReplayDropPkts.setStatus('current')
jnxIpSecTunAhAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTunAhAuthFails.setStatus('current')
jnxIpSecTunEspAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTunEspAuthFails.setStatus('current')
jnxIpSecTunDecryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTunDecryptFails.setStatus('current')
jnxIpSecTunBadHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTunBadHeaders.setStatus('current')
jnxIpSecTunBadTrailers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTunBadTrailers.setStatus('current')
jnxIpSecTunDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecTunDroppedPkts.setStatus('current')
jnxIpSecSaTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 2), )
if mibBuilder.loadTexts: jnxIpSecSaTable.setStatus('current')
jnxIpSecSaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 2, 1), ).setIndexNames((0, "JUNIPER-SP-MIB", "jnxSpSvcSetName"), (0, "JNX-IPSEC-MONITOR-MIB", "jnxIpSecTunRemoteGwAddrType"), (0, "JNX-IPSEC-MONITOR-MIB", "jnxIpSecTunRemoteGwAddr"), (0, "JNX-IPSEC-MONITOR-MIB", "jnxIpSecTunIndex"), (0, "JNX-IPSEC-MONITOR-MIB", "jnxIpSecSaIndex"))
if mibBuilder.loadTexts: jnxIpSecSaEntry.setStatus('current')
jnxIpSecSaProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ah", 1), ("esp", 2))))
if mibBuilder.loadTexts: jnxIpSecSaProtocol.setStatus('current')
jnxIpSecSaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: jnxIpSecSaIndex.setStatus('current')
jnxIpSecSaInSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 2, 1, 3), JnxSpi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecSaInSpi.setStatus('current')
jnxIpSecSaOutSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 2, 1, 4), JnxSpi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecSaOutSpi.setStatus('current')
jnxIpSecSaInAuxSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 2, 1, 5), JnxSpi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecSaInAuxSpi.setStatus('current')
jnxIpSecSaOutAuxSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 2, 1, 6), JnxSpi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecSaOutAuxSpi.setStatus('current')
jnxIpSecSaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 2, 1, 7), JnxSAType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecSaType.setStatus('current')
jnxIpSecSaEncapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 2, 1, 8), JnxEncapMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecSaEncapMode.setStatus('current')
jnxIpSecSaLifeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecSaLifeSize.setStatus('current')
jnxIpSecSaLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecSaLifeTime.setStatus('current')
jnxIpSecSaActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 2, 1, 11), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecSaActiveTime.setStatus('current')
jnxIpSecSaLifeSizeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecSaLifeSizeThreshold.setStatus('current')
jnxIpSecSaLifeTimeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecSaLifeTimeThreshold.setStatus('current')
jnxIpSecSaEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 2, 1, 14), JnxEncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecSaEncryptAlgo.setStatus('current')
jnxIpSecSaAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 2, 1, 15), JnxAuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecSaAuthAlgo.setStatus('current')
jnxIpSecSaState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 22, 1, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("active", 1), ("expiring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpSecSaState.setStatus('current')
mibBuilder.exportSymbols("JNX-IPSEC-MONITOR-MIB", jnxIpSecSaTable=jnxIpSecSaTable, jnxIpSecTunLocalGwAddr=jnxIpSecTunLocalGwAddr, jnxIkeTunAuthMethod=jnxIkeTunAuthMethod, jnxIpSecSaEncapMode=jnxIpSecSaEncapMode, JnxEncapMode=JnxEncapMode, jnxIkeTunOutOctets=jnxIkeTunOutOctets, jnxIkeTunnelEntry=jnxIkeTunnelEntry, jnxIkeTunnelTable=jnxIkeTunnelTable, jnxIkeTunEncryptAlgo=jnxIkeTunEncryptAlgo, jnxIpSecTermName=jnxIpSecTermName, jnxIpSecSaLifeTimeThreshold=jnxIpSecSaLifeTimeThreshold, jnxIpSecTunLocalProxyId=jnxIpSecTunLocalProxyId, jnxIkeTunLocalGwAddr=jnxIkeTunLocalGwAddr, jnxIkeTunLocalIdValue=jnxIkeTunLocalIdValue, jnxIpSecTunIndex=jnxIpSecTunIndex, jnxIpSecSaType=jnxIpSecSaType, jnxIpSecTunRemoteGwAddrType=jnxIpSecTunRemoteGwAddrType, jnxIpsSecTunAHInPkts=jnxIpsSecTunAHInPkts, jnxIkeTunInitiatorCookie=jnxIkeTunInitiatorCookie, jnxIkeTunInOctets=jnxIkeTunInOctets, jnxIpSecTunOutEncryptedPkts=jnxIpSecTunOutEncryptedPkts, jnxIpSecSaLifeSize=jnxIpSecSaLifeSize, jnxIpSecSaEntry=jnxIpSecSaEntry, jnxIpSecTunRemoteGwAddr=jnxIpSecTunRemoteGwAddr, jnxIpSecTunOutEncryptedBytes=jnxIpSecTunOutEncryptedBytes, jnxIpSecTunReplayDropPkts=jnxIpSecTunReplayDropPkts, jnxIpSecTunInDecryptedPkts=jnxIpSecTunInDecryptedPkts, jnxIkeTunResponderCookie=jnxIkeTunResponderCookie, jnxIpSecSaInAuxSpi=jnxIpSecSaInAuxSpi, jnxIpSecTunnelEntry=jnxIpSecTunnelEntry, JnxDiffHellmanGrp=JnxDiffHellmanGrp, jnxIpSecTunnelTable=jnxIpSecTunnelTable, JnxKeyType=JnxKeyType, jnxIpSecTunDecryptFails=jnxIpSecTunDecryptFails, jnxIkeTunLocalRole=jnxIkeTunLocalRole, PYSNMP_MODULE_ID=jnxIpSecMonitorMIB, JnxSpi=JnxSpi, jnxIpSecSaOutAuxSpi=jnxIpSecSaOutAuxSpi, jnxIkeTunNegoMode=jnxIkeTunNegoMode, JnxIkeAuthMethod=JnxIkeAuthMethod, jnxIpSecTunBadHeaders=jnxIpSecTunBadHeaders, jnxIpSecTunAhAuthFails=jnxIpSecTunAhAuthFails, jnxIkeTunOutPkts=jnxIkeTunOutPkts, jnxIpSecMIBObjects=jnxIpSecMIBObjects, jnxIpSecLevels=jnxIpSecLevels, jnxIkeTunInPkts=jnxIkeTunInPkts, jnxIkeTunLocalIdType=jnxIkeTunLocalIdType, jnxIpSecSaInSpi=jnxIpSecSaInSpi, jnxIpSecPhaseTwo=jnxIpSecPhaseTwo, JnxIkePeerRole=JnxIkePeerRole, jnxIpSecSaActiveTime=jnxIpSecSaActiveTime, JnxIkeNegoMode=JnxIkeNegoMode, jnxIpsSecTunAHInBytes=jnxIpsSecTunAHInBytes, jnxIkeTunLocalCertName=jnxIkeTunLocalCertName, jnxIkeTunRemoteGwAddrType=jnxIkeTunRemoteGwAddrType, jnxIpSecTunKeyType=jnxIpSecTunKeyType, jnxIpSecSaAuthAlgo=jnxIpSecSaAuthAlgo, jnxIpSecMibLevel=jnxIpSecMibLevel, JnxIkeNegState=JnxIkeNegState, jnxIkeTunHashAlgo=jnxIkeTunHashAlgo, jnxIpsSecTunAHOutBytes=jnxIpsSecTunAHOutBytes, JnxRemotePeerType=JnxRemotePeerType, jnxIpSecSaProtocol=jnxIpSecSaProtocol, jnxIpSecSaIndex=jnxIpSecSaIndex, jnxIkeTunRemoteGwAddr=jnxIkeTunRemoteGwAddr, jnxIpSecTunLocalGwAddrType=jnxIpSecTunLocalGwAddrType, jnxIpSecSaOutSpi=jnxIpSecSaOutSpi, jnxIpSecMonitorMIB=jnxIpSecMonitorMIB, jnxIkeTunRemoteIdType=jnxIkeTunRemoteIdType, jnxIpSecPhaseOne=jnxIpSecPhaseOne, jnxIpSecSaState=jnxIpSecSaState, JnxIkePeerType=JnxIkePeerType, JnxSAType=JnxSAType, jnxIpSecTunInDecryptedBytes=jnxIpSecTunInDecryptedBytes, jnxIpsSecTunAHOutPkts=jnxIpsSecTunAHOutPkts, jnxIpSecTunBadTrailers=jnxIpSecTunBadTrailers, jnxIkeTunNegState=jnxIkeTunNegState, jnxIpSecRemotePeerType=jnxIpSecRemotePeerType, jnxIkeTunLocalGwAddrType=jnxIkeTunLocalGwAddrType, jnxIpSecTunDroppedPkts=jnxIpSecTunDroppedPkts, jnxIpSecRuleName=jnxIpSecRuleName, jnxIpSecTunEspAuthFails=jnxIpSecTunEspAuthFails, jnxIkeTunIndex=jnxIkeTunIndex, jnxIkeTunActiveTime=jnxIkeTunActiveTime, JnxIkeHashAlgo=JnxIkeHashAlgo, jnxIpSecSaLifeTime=jnxIpSecSaLifeTime, jnxIkeTunLifeTime=jnxIkeTunLifeTime, jnxIpSecSaLifeSizeThreshold=jnxIpSecSaLifeSizeThreshold, JnxAuthAlgo=JnxAuthAlgo, jnxIkeTunRemoteIdValue=jnxIkeTunRemoteIdValue, jnxIpSecTunMtu=jnxIpSecTunMtu, JnxEncryptAlgo=JnxEncryptAlgo, jnxIkeTunDiffHellmanGrp=jnxIkeTunDiffHellmanGrp, jnxIpSecSaEncryptAlgo=jnxIpSecSaEncryptAlgo, jnxIpSecTunRemoteProxyId=jnxIpSecTunRemoteProxyId)
