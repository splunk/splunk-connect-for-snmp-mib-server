#
# PySNMP MIB module AISLCASYNC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AISLCASYNC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:00:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, Counter64, MibIdentifier, Unsigned32, TimeTicks, IpAddress, ModuleIdentity, Bits, NotificationType, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter64", "MibIdentifier", "Unsigned32", "TimeTicks", "IpAddress", "ModuleIdentity", "Bits", "NotificationType", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "iso")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiSLCAsync = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 23))
if mibBuilder.loadTexts: aiSLCAsync.setLastUpdated('9909151700Z')
if mibBuilder.loadTexts: aiSLCAsync.setOrganization('Applied Innovation Inc.')
aiSLCAsyncTable = MibTable((1, 3, 6, 1, 4, 1, 539, 23, 1), )
if mibBuilder.loadTexts: aiSLCAsyncTable.setStatus('current')
aiSLCAsyncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 23, 1, 1), ).setIndexNames((0, "AISLCASYNC-MIB", "aislcasyLinkNumber"))
if mibBuilder.loadTexts: aiSLCAsyncEntry.setStatus('current')
aislcasyLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 1, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcasyLinkNumber.setStatus('current')
aislcasyApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("login", 1), ("destination", 2), ("directConnect", 3), ("callMenu", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcasyApplication.setStatus('current')
aislcasyDirectConnectAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcasyDirectConnectAlias.setStatus('current')
aislcasyXonInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcasyXonInterval.setStatus('current')
aislcasyCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcasyCallState.setStatus('current')
aislcasyMinimizeLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcasyMinimizeLatency.setStatus('current')
aiSLCAsyncConnOptTable = MibTable((1, 3, 6, 1, 4, 1, 539, 23, 2), )
if mibBuilder.loadTexts: aiSLCAsyncConnOptTable.setStatus('current')
aiSLCAsyncConnOptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 23, 2, 1), ).setIndexNames((0, "AISLCASYNC-MIB", "aislcacoLinkNumber"))
if mibBuilder.loadTexts: aiSLCAsyncConnOptEntry.setStatus('current')
aislcacoLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcacoLinkNumber.setStatus('current')
aislcacoOnActiveDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcacoOnActiveDSR.setStatus('current')
aislcacoOnActiveDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcacoOnActiveDCD.setStatus('current')
aislcacoOnIncomingChar = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcacoOnIncomingChar.setStatus('current')
aislcacoDirectConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcacoDirectConnect.setStatus('current')
aislcacoRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcacoRetryTimer.setStatus('current')
aislcacoConnectString = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcacoConnectString.setStatus('current')
aiSLCAsyncDiscOptTable = MibTable((1, 3, 6, 1, 4, 1, 539, 23, 3), )
if mibBuilder.loadTexts: aiSLCAsyncDiscOptTable.setStatus('current')
aiSLCAsyncDiscOptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 23, 3, 1), ).setIndexNames((0, "AISLCASYNC-MIB", "aislcadoLinkNumber"))
if mibBuilder.loadTexts: aiSLCAsyncDiscOptEntry.setStatus('current')
aislcadoLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 3, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcadoLinkNumber.setStatus('current')
aislcadoOnLostDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 3, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcadoOnLostDSR.setStatus('current')
aislcadoOnLostDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 3, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcadoOnLostDCD.setStatus('current')
aislcadoOnBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 3, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcadoOnBreak.setStatus('current')
aislcadoInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcadoInactivityTimer.setStatus('current')
aislcadoDisconnectString = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcadoDisconnectString.setStatus('current')
aislcadoInactivityReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 3, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcadoInactivityReceive.setStatus('current')
aiSLCAsyncModemOptTable = MibTable((1, 3, 6, 1, 4, 1, 539, 23, 4), )
if mibBuilder.loadTexts: aiSLCAsyncModemOptTable.setStatus('current')
aiSLCAsyncModemOptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 23, 4, 1), ).setIndexNames((0, "AISLCASYNC-MIB", "aislcmdmLinkNumber"))
if mibBuilder.loadTexts: aiSLCAsyncModemOptEntry.setStatus('current')
aislcmdmLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 4, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcmdmLinkNumber.setStatus('current')
aislcmdmInitString = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcmdmInitString.setStatus('current')
aislcmdmTermString = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcmdmTermString.setStatus('current')
aislcmdmTimeToConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcmdmTimeToConnect.setStatus('current')
aislcmdmMaxDialAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcmdmMaxDialAttempts.setStatus('current')
aislcmdmDtrConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcmdmDtrConnState.setStatus('current')
aislcmdmDtrDconnState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("toggle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcmdmDtrDconnState.setStatus('current')
aislcmdmRtsConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("followsDSR", 3), ("xmitFlowControl", 4), ("bidirectionalFlowControl", 5), ("followsData", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcmdmRtsConnState.setStatus('current')
aislcmdmRtsDconnState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 23, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("toggle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcmdmRtsDconnState.setStatus('current')
mibBuilder.exportSymbols("AISLCASYNC-MIB", PYSNMP_MODULE_ID=aiSLCAsync, aiSLCAsyncTable=aiSLCAsyncTable, aiSLCAsyncEntry=aiSLCAsyncEntry, aislcacoOnActiveDCD=aislcacoOnActiveDCD, aislcmdmLinkNumber=aislcmdmLinkNumber, aislcmdmRtsDconnState=aislcmdmRtsDconnState, aislcadoOnLostDCD=aislcadoOnLostDCD, aislcadoOnLostDSR=aislcadoOnLostDSR, aiSLCAsyncConnOptEntry=aiSLCAsyncConnOptEntry, aislcasyXonInterval=aislcasyXonInterval, aislcasyApplication=aislcasyApplication, aislcmdmDtrDconnState=aislcmdmDtrDconnState, aislcmdmRtsConnState=aislcmdmRtsConnState, aislcmdmInitString=aislcmdmInitString, aislcacoOnIncomingChar=aislcacoOnIncomingChar, aislcasyLinkNumber=aislcasyLinkNumber, aislcasyMinimizeLatency=aislcasyMinimizeLatency, aislcacoLinkNumber=aislcacoLinkNumber, aislcadoLinkNumber=aislcadoLinkNumber, aislcadoOnBreak=aislcadoOnBreak, aislcmdmTimeToConnect=aislcmdmTimeToConnect, aislcmdmDtrConnState=aislcmdmDtrConnState, aislcasyDirectConnectAlias=aislcasyDirectConnectAlias, aislcacoConnectString=aislcacoConnectString, aiSLCAsyncModemOptEntry=aiSLCAsyncModemOptEntry, PositiveInteger=PositiveInteger, aiSLCAsyncModemOptTable=aiSLCAsyncModemOptTable, aislcadoDisconnectString=aislcadoDisconnectString, aiSLCAsync=aiSLCAsync, aiSLCAsyncDiscOptTable=aiSLCAsyncDiscOptTable, aislcadoInactivityTimer=aislcadoInactivityTimer, aiSLCAsyncDiscOptEntry=aiSLCAsyncDiscOptEntry, aislcacoRetryTimer=aislcacoRetryTimer, aislcacoDirectConnect=aislcacoDirectConnect, aislcmdmMaxDialAttempts=aislcmdmMaxDialAttempts, aislcacoOnActiveDSR=aislcacoOnActiveDSR, aislcadoInactivityReceive=aislcadoInactivityReceive, aislcasyCallState=aislcasyCallState, aislcmdmTermString=aislcmdmTermString, aiSLCAsyncConnOptTable=aiSLCAsyncConnOptTable, aii=aii)
