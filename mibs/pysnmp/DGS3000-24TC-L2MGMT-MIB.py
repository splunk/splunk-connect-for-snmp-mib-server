#
# PySNMP MIB module DGS3000-24TC-L2MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS3000-24TC-L2MGMT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:30:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
AgentNotifyLevel, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "AgentNotifyLevel")
swPortSecPortIndex, = mibBuilder.importSymbols("PORT-SECURITY-MIB", "swPortSecPortIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, NotificationType, ModuleIdentity, Counter64, TimeTicks, iso, MibIdentifier, Unsigned32, Bits, ObjectIdentity, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "ModuleIdentity", "Counter64", "TimeTicks", "iso", "MibIdentifier", "Unsigned32", "Bits", "ObjectIdentity", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
DisplayString, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "TruthValue")
dgs3000_24_tcax, = mibBuilder.importSymbols("SWPRIMGMT-DGS3000-MIB", "dgs3000-24-tcax")
swL2MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2))
if mibBuilder.loadTexts: swL2MgmtMIB.setLastUpdated('201205230000Z')
if mibBuilder.loadTexts: swL2MgmtMIB.setOrganization('D-Link Corp.')
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

swL2DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1))
swL2VLANMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2))
swL2PortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3))
swL2DiffServMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 4))
swL2LimitedMulticastMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5))
swL2QOSMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6))
swL2PortSecurityMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 7))
swL2DhcpRelayMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 8))
swL2TrunkMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9))
swL2MirrorMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 10))
swL2IGMPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11))
swL2TrafficMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 13))
swL2TrafficSegMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 14))
swL2StpMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15))
swL2MulticastFilterMode = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 17))
swL2LoopDetectMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 18))
swL2MgmtMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 100))
class IANAifMauAutoNegCapBits(TextualConvention, Bits):
    reference = '[IEEE802.3], Section 30.6.1.1.5'
    status = 'current'
    namedValues = NamedValues(("bOther", 0), ("b10baseT", 1), ("b10baseTFD", 2), ("b100baseT4", 3), ("b100baseTX", 4), ("b100baseTXFD", 5), ("b100baseT2", 6), ("b100baseT2FD", 7), ("bFdxPause", 8), ("bFdxAPause", 9), ("bFdxSPause", 10), ("bFdxBPause", 11), ("b1000baseX", 12), ("b1000baseXFD", 13), ("b1000baseT", 14), ("b1000baseTFD", 15))

swL2DevInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 1))
swDevInfoTotalNumOfPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setStatus('current')
swDevInfoNumOfPortInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoNumOfPortInUse.setStatus('current')
swDevModuleInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 1, 3), )
if mibBuilder.loadTexts: swDevModuleInfoTable.setStatus('current')
swDevInfoFrontPanelLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoFrontPanelLedStatus.setStatus('current')
swDevModuleInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 1, 3, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swDevModuleInfoUnitID"))
if mibBuilder.loadTexts: swDevModuleInfoEntry.setStatus('current')
swDevModuleInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoUnitID.setStatus('current')
swDevModuleInfoModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoModuleName.setStatus('current')
swDevModuleInfoReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoReversion.setStatus('current')
swDevModuleInfoSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoSerial.setStatus('current')
swDevModuleInfoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoDescription.setStatus('current')
swL2DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2))
swL2DevCtrlStpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlStpState.setStatus('current')
swL2DevCtrlIGMPSnooping = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnooping.setStatus('current')
swL2DevCtrlIGMPSnoopingMcstRTOnly = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnoopingMcstRTOnly.setStatus('current')
swL2DevCtrlRmonState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlRmonState.setStatus('current')
swL2DevCtrlSnmpTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlSnmpTrapState.setStatus('current')
swL2DevCtrlCleanAllStatisticCounter = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setStatus('current')
swL2DevCtrlVlanIdOfFDBTbl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 7), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVlanIdOfFDBTbl.setStatus('current')
swL2MACNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyState.setStatus('current')
swL2MACNotifyHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setStatus('current')
swL2MACNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyInterval.setStatus('current')
swL2DevCtrlAsymVlanState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlAsymVlanState.setStatus('current')
swL2DevCtrlTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 14))
swL2DevCtrlTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setStatus('current')
swL2DevCtrlTelnetTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetTcpPort.setStatus('current')
swL2DevCtrlManagementVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 16), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlManagementVlanId.setStatus('current')
swL2DevCtrlWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 17))
swL2DevCtrlWebState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebState.setStatus('current')
swL2DevCtrlWebTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 17, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebTcpPort.setStatus('current')
swL2DevCtrlLLDPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPState.setStatus('current')
swL2DevCtrlLLDPForwardMessageState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPForwardMessageState.setStatus('current')
swL2DevCtrlIpAutoconfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIpAutoconfig.setStatus('current')
swL2DevCtrlCFM = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 21))
swL2DevCtrlCFMState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCFMState.setStatus('current')
swL2DevCtrlCFMPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 21, 2), )
if mibBuilder.loadTexts: swL2DevCtrlCFMPortTable.setStatus('current')
swL2DevCtrlCFMPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 21, 2, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2DevCtrlCFMPortIndex"))
if mibBuilder.loadTexts: swL2DevCtrlCFMPortEntry.setStatus('current')
swL2DevCtrlCFMPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 21, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: swL2DevCtrlCFMPortIndex.setStatus('current')
swL2DevCtrlCFMPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 21, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCFMPortState.setStatus('current')
swL2DevCtrlVLANTrunkState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVLANTrunkState.setStatus('current')
swL2DevAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 3))
swL2DevAlarmNewRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setStatus('current')
swL2DevAlarmTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setStatus('current')
swL2DevAlarmLinkChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setStatus('current')
swL2VlanStaticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 1), )
if mibBuilder.loadTexts: swL2VlanStaticTable.setStatus('current')
swL2VlanStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 1, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2VlanIndex"))
if mibBuilder.loadTexts: swL2VlanStaticEntry.setStatus('current')
swL2VlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 1, 1, 1), VlanId())
if mibBuilder.loadTexts: swL2VlanIndex.setStatus('current')
swL2VLANAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VLANAdvertisement.setStatus('current')
swL2PVIDAutoAssignmentState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PVIDAutoAssignmentState.setStatus('current')
swL2VlanPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 3), )
if mibBuilder.loadTexts: swL2VlanPortInfoTable.setStatus('current')
swL2VlanPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 3, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2VlanPortInfoPortIndex"), (0, "DGS3000-24TC-L2MGMT-MIB", "swL2VlanPortInfoVid"))
if mibBuilder.loadTexts: swL2VlanPortInfoEntry.setStatus('current')
swL2VlanPortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortInfoPortIndex.setStatus('current')
swL2VlanPortInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 3, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortInfoVid.setStatus('current')
swL2VlanPortInfoPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("untagged", 2), ("tagged", 3), ("dynamic", 4), ("forbidden", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortInfoPortRole.setStatus('current')
swL2SubnetVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 4), )
if mibBuilder.loadTexts: swL2SubnetVLANTable.setStatus('current')
swL2SubnetVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 4, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2SubnetVLANIPAddress"), (0, "DGS3000-24TC-L2MGMT-MIB", "swL2SubnetVLANIPMask"))
if mibBuilder.loadTexts: swL2SubnetVLANEntry.setStatus('current')
swL2SubnetVLANIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2SubnetVLANIPAddress.setStatus('current')
swL2SubnetVLANIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2SubnetVLANIPMask.setStatus('current')
swL2SubnetVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 4, 1, 3), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2SubnetVLANID.setStatus('current')
swL2SubnetVLANPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2SubnetVLANPriority.setStatus('current')
swL2SubnetVLANRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2SubnetVLANRowStatus.setStatus('current')
swL2VlanPrecedenceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 5), )
if mibBuilder.loadTexts: swL2VlanPrecedenceTable.setStatus('current')
swL2VlanPrecedenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 5, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2VlanPrecedencePortIndex"))
if mibBuilder.loadTexts: swL2VlanPrecedenceEntry.setStatus('current')
swL2VlanPrecedencePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPrecedencePortIndex.setStatus('current')
swL2VlanPrecedenceClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac-based", 1), ("subnet-based", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanPrecedenceClassification.setStatus('current')
swL2NniGvrpBpduAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot1d", 1), ("dot1ad", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2NniGvrpBpduAddress.setStatus('current')
swL2PortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 1), )
if mibBuilder.loadTexts: swL2PortInfoTable.setStatus('current')
swL2PortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 1, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2PortInfoPortIndex"), (0, "DGS3000-24TC-L2MGMT-MIB", "swL2PortInfoMediumType"))
if mibBuilder.loadTexts: swL2PortInfoEntry.setStatus('current')
swL2PortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setStatus('current')
swL2PortInfoMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoMediumType.setStatus('current')
swL2PortInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoUnitID.setStatus('current')
swL2PortInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("portType-100Base-TX", 1), ("portType-100Base-FX", 2), ("portType-100Base-FL", 3), ("portType-1000Base-TX", 4), ("portType-1000Base-SX", 5), ("portType-1000Base-LX", 6), ("portType-1000Base-SX-GBIC", 7), ("portType-1000Base-LX-GBIC", 8), ("portType-1000Base-TX-GBIC", 9), ("portType-1000Base-1394", 10), ("portType-1000Base-TX-GBIC-COMBO", 11), ("portType-1000Base-none-GBIC", 12), ("portType-1000Base-SX-MGBIC", 13), ("portType-1000Base-LX-MGBIC", 14), ("portType-1000Base-TX-MGBIC", 15), ("portType-1000Base-none-MGBIC", 16), ("portType-SIO", 17), ("portType-10G", 18), ("portType-10G-xenpak-1310nm", 19), ("portType-10G-xenpak-850nm", 20), ("portType-10G-xenpak-empty", 21), ("portType-10G-xfp-1310nm", 22), ("portType-10G-xfp-850nm", 23), ("portType-10G-xfp-empty", 24), ("portType-none", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoType.setStatus('current')
swL2PortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setStatus('current')
swL2PortInfoNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 0), ("empty", 1), ("link-down", 2), ("half-10Mbps", 3), ("full-10Mbps", 4), ("half-100Mbps", 5), ("full-100Mbps", 6), ("half-1Gigabps", 7), ("full-1Gigabps", 8), ("full-10Gigabps", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setStatus('current')
swL2PortInfoModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("none", 0), ("moduleType-COMBO", 1), ("moduleType-1394", 2), ("moduleType-1000T", 3), ("moduleType-MGBIC", 4), ("moduleType-1P-SC-SX", 5), ("moduleType-2P-SC-SX", 6), ("moduleType-1P-SC-LX", 7), ("moduleType-2P-SC-LX", 8), ("moduleType-1P-TX", 9), ("moduleType-2P-TX", 10), ("moduleType-1P-MTRJ-SX", 11), ("moduleType-2P-MTRJ-SX", 12), ("moduleType-1P-MTRJ-LX", 13), ("moduleType-2P-MTRJ-LX", 14), ("moduleType-1P-GBIC", 15), ("moduleType-2P-GBIC", 16), ("moduleType-1P-GBIC-1P-TX", 17), ("moduleType-1P-GBIC-1P-STACK", 18), ("moduleType-2P-STACK", 19), ("moduleType-2P-100FX", 20), ("moduleType-1P-100FX", 21), ("moduleType-2P-100FX-NEW", 22), ("moduleType-1P-100FL", 23), ("moduleType-2P-100FL", 24), ("moduleType-2P-100TX", 25), ("moduleType-BaseModule-24PORT", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoModuleType.setStatus('current')
swL2PortInfoErrorDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("storm", 1), ("stp-lbd", 2), ("unknow", 3), ("ctp-lbd", 4), ("ddm", 5), ("bpdu-protection", 6), ("power-saving", 7), ("duld", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoErrorDisabled.setStatus('current')
swL2PortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 2), )
if mibBuilder.loadTexts: swL2PortCtrlTable.setStatus('current')
swL2PortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 2, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2PortCtrlPortIndex"), (0, "DGS3000-24TC-L2MGMT-MIB", "swL2PortCtrlMediumType"))
if mibBuilder.loadTexts: swL2PortCtrlEntry.setStatus('current')
swL2PortCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setStatus('current')
swL2PortCtrlMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlMediumType.setStatus('current')
swL2PortCtrlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setStatus('current')
swL2PortCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setStatus('current')
swL2PortCtrlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6), ("nway-disabled-1Gigabps-Half", 7), ("nway-disabled-1Gigabps-Full", 8), ("nway-disabled-1Gigabps-Full-master", 9), ("nway-disabled-1Gigabps-Full-slave", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setStatus('current')
swL2PortCtrlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setStatus('current')
swL2PortCtrlLearningState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlLearningState.setStatus('current')
swL2PortCtrlMACNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setStatus('current')
swL2PortCtrlMDIXState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("normal", 2), ("cross", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMDIXState.setStatus('current')
swL2PortCtrlAutoNegRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("norestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAutoNegRestart.setStatus('current')
swL2PortCtrlAutoNegCapAdvertisedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 2, 1, 12), IANAifMauAutoNegCapBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAutoNegCapAdvertisedBits.setStatus('current')
swL2PortCtrlJumboFrame = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrame.setStatus('current')
swL2PortCtrlJumboFrameMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrameMaxSize.setStatus('current')
swL2PortCableDiagnosisTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 5), )
if mibBuilder.loadTexts: swL2PortCableDiagnosisTable.setStatus('current')
swL2PortCableDiagnosisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 5, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2PortCableDiagnosisPortIndex"), (0, "DGS3000-24TC-L2MGMT-MIB", "swL2PortCableDiagnosisPairIndex"))
if mibBuilder.loadTexts: swL2PortCableDiagnosisEntry.setStatus('current')
swL2PortCableDiagnosisPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPortIndex.setStatus('current')
swL2PortCableDiagnosisPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairIndex.setStatus('current')
swL2PortCableDiagnosisCableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("open-short", 3), ("not-support", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisCableStatus.setStatus('current')
swL2PortCableDiagnosisPairStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("fail", 3), ("not-supported", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairStatus.setStatus('current')
swL2PortCableDiagnosisPairLength = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairLength.setStatus('current')
swL2PortCableDiagnosisPairLengthInaccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairLengthInaccuracy.setStatus('current')
swL2PortCounterCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 6), )
if mibBuilder.loadTexts: swL2PortCounterCtrlTable.setStatus('current')
swL2PortCounterCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 6, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2PortCounterCtrlPortIndex"))
if mibBuilder.loadTexts: swL2PortCounterCtrlEntry.setStatus('current')
swL2PortCounterCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCounterCtrlPortIndex.setStatus('current')
swL2PortCounterClearCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCounterClearCtrl.setStatus('current')
swL2PortErrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 7), )
if mibBuilder.loadTexts: swL2PortErrTable.setStatus('current')
swL2PortErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 7, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2PortErrPortIndex"))
if mibBuilder.loadTexts: swL2PortErrEntry.setStatus('current')
swL2PortErrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortIndex.setStatus('current')
swL2PortErrPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortState.setStatus('current')
swL2PortErrPortConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("err-disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortConnStatus.setStatus('current')
swL2PortErrPortReason = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("stp-lbd", 1), ("storm-control", 2), ("ctp-lbd", 3), ("ddm", 4), ("bpdu_protection", 5), ("power-saving", 6), ("duld", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortReason.setStatus('current')
swL2PortAutoNegInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 8), )
if mibBuilder.loadTexts: swL2PortAutoNegInfoTable.setStatus('current')
swL2PortAutoNegInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 8, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2PortAutoNegInfoPortIndex"))
if mibBuilder.loadTexts: swL2PortAutoNegInfoEntry.setStatus('current')
swL2PortAutoNegInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoPortIndex.setStatus('current')
swL2PortAutoNegInfoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoAdminStatus.setStatus('current')
swL2PortAutoNegInfoCapabilityBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 8, 1, 3), IANAifMauAutoNegCapBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapabilityBits.setStatus('current')
swL2PortAutoNegInfoCapAdvertisedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 8, 1, 4), IANAifMauAutoNegCapBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapAdvertisedBits.setStatus('current')
swL2PortAutoNegInfoCapReceivedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 8, 1, 5), IANAifMauAutoNegCapBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapReceivedBits.setStatus('current')
swL2PortDropCounterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 9), )
if mibBuilder.loadTexts: swL2PortDropCounterTable.setStatus('current')
swL2PortDropCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 9, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2PortDropCounterPortIndex"))
if mibBuilder.loadTexts: swL2PortDropCounterEntry.setStatus('current')
swL2PortDropCounterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortDropCounterPortIndex.setStatus('current')
swL2PortBufferFullDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortBufferFullDrops.setStatus('current')
swL2PortACLDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortACLDrops.setStatus('current')
swL2PortMulticastDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortMulticastDrops.setStatus('current')
swL2PortVLANIngressDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortVLANIngressDrops.setStatus('current')
swL2PortJumboFrameCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 10), )
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlTable.setStatus('current')
swL2PortJumboFrameCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 10, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2PortJumboFrameCtrlPortIndex"))
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlEntry.setStatus('current')
swL2PortJumboFrameCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlPortIndex.setStatus('current')
swL2PortJumboFrameCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlState.setStatus('current')
swL2DiffServTypeCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 4, 1), )
if mibBuilder.loadTexts: swL2DiffServTypeCtrlTable.setStatus('current')
swL2DiffServTypeCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 4, 1, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2DiffServTypeCtrlPortIndex"))
if mibBuilder.loadTexts: swL2DiffServTypeCtrlEntry.setStatus('current')
swL2DiffServTypeCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DiffServTypeCtrlPortIndex.setStatus('current')
swL2DiffServTypeCtrlDiffServType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("dscp", 2), ("tos", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DiffServTypeCtrlDiffServType.setStatus('current')
swL2DiffServDSCPCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 4, 2), )
if mibBuilder.loadTexts: swL2DiffServDSCPCtrlTable.setStatus('current')
swL2DiffServDSCPCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 4, 2, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2DiffServDSCPCtrlPortIndex"))
if mibBuilder.loadTexts: swL2DiffServDSCPCtrlEntry.setStatus('current')
swL2DiffServDSCPCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DiffServDSCPCtrlPortIndex.setStatus('current')
swL2DiffServDSCPCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dscp-Force-Overwrite", 1), ("dscp-Change-If-Zero", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DiffServDSCPCtrlMode.setStatus('current')
swL2DiffServDSCPCtrlValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DiffServDSCPCtrlValue.setStatus('current')
swL2DiffServTOSCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 4, 3), )
if mibBuilder.loadTexts: swL2DiffServTOSCtrlTable.setStatus('current')
swL2DiffServTOSCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 4, 3, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2DiffServTOSCtrlPortIndex"))
if mibBuilder.loadTexts: swL2DiffServTOSCtrlEntry.setStatus('current')
swL2DiffServTOSCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DiffServTOSCtrlPortIndex.setStatus('current')
swL2DiffServTOSCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tos-Force-Overwrite", 1), ("tos-TOS-Overwrite-802dot1p", 2), ("tos-802dot1p-Overwrite-TOS", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DiffServTOSCtrlMode.setStatus('current')
swL2DiffServTOSCtrlValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DiffServTOSCtrlValue.setStatus('current')
swL2MulticastFilterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 1), )
if mibBuilder.loadTexts: swL2MulticastFilterProfileTable.setStatus('current')
swL2MulticastFilterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 1, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2MulticastFilterProfileIndex"))
if mibBuilder.loadTexts: swL2MulticastFilterProfileEntry.setStatus('current')
swL2MulticastFilterProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterProfileIndex.setStatus('current')
swL2MulticastFilterProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MulticastFilterProfileName.setStatus('current')
swL2MulticastFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MulticastFilterStatus.setStatus('current')
swL2MulticastFilterProfileAddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 2), )
if mibBuilder.loadTexts: swL2MulticastFilterProfileAddressTable.setStatus('current')
swL2MulticastFilterProfileAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 2, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2MulticastFilterProfileIdIndex"), (0, "DGS3000-24TC-L2MGMT-MIB", "swL2MulticastFilterFromIp"), (0, "DGS3000-24TC-L2MGMT-MIB", "swL2MulticastFilterToIp"))
if mibBuilder.loadTexts: swL2MulticastFilterProfileAddressEntry.setStatus('current')
swL2MulticastFilterProfileIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterProfileIdIndex.setStatus('current')
swL2MulticastFilterFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterFromIp.setStatus('current')
swL2MulticastFilterToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterToIp.setStatus('current')
swL2MulticastFilterAddressState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MulticastFilterAddressState.setStatus('current')
swL2LimitedMulticastFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 3), )
if mibBuilder.loadTexts: swL2LimitedMulticastFilterPortTable.setStatus('current')
swL2LimitedMulticastFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 3, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2LimitedMulticastFilterPortIndex"))
if mibBuilder.loadTexts: swL2LimitedMulticastFilterPortEntry.setStatus('current')
swL2LimitedMulticastFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LimitedMulticastFilterPortIndex.setStatus('current')
swL2LimitedMulticastFilterPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LimitedMulticastFilterPortAccess.setStatus('current')
swL2LimitedMulticastFilterPortProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LimitedMulticastFilterPortProfileID.setStatus('current')
swL2LimitedMulticastFilterPortProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("delete", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2LimitedMulticastFilterPortProfileStatus.setStatus('current')
swL2MulticastFilterPortMaxGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 4), )
if mibBuilder.loadTexts: swL2MulticastFilterPortMaxGroupTable.setStatus('current')
swL2MulticastFilterPortMaxGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 4, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2MulticastFilterPortMaxGroupPortIndex"))
if mibBuilder.loadTexts: swL2MulticastFilterPortMaxGroupEntry.setStatus('current')
swL2MulticastFilterPortMaxGroupPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterPortMaxGroupPortIndex.setStatus('current')
swL2MulticastFilterPortMaxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MulticastFilterPortMaxGroup.setStatus('current')
swL2LimitedMulticastFilterVIDTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 5), )
if mibBuilder.loadTexts: swL2LimitedMulticastFilterVIDTable.setStatus('current')
swL2LimitedMulticastFilterVIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 5, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2LimitedMulticastFilterVIDIndex"))
if mibBuilder.loadTexts: swL2LimitedMulticastFilterVIDEntry.setStatus('current')
swL2LimitedMulticastFilterVIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LimitedMulticastFilterVIDIndex.setStatus('current')
swL2LimitedMulticastFilterVIDAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LimitedMulticastFilterVIDAccess.setStatus('current')
swL2LimitedMulticastFilterVIDProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LimitedMulticastFilterVIDProfileID.setStatus('current')
swL2LimitedMulticastFilterVIDProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("add", 2), ("delete", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2LimitedMulticastFilterVIDProfileStatus.setStatus('current')
swL2MulticastFilterVIDMaxGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 6), )
if mibBuilder.loadTexts: swL2MulticastFilterVIDMaxGroupTable.setStatus('current')
swL2MulticastFilterVIDMaxGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 6, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2MulticastFilterVIDMaxGroupVIDIndex"))
if mibBuilder.loadTexts: swL2MulticastFilterVIDMaxGroupEntry.setStatus('current')
swL2MulticastFilterVIDMaxGroupVIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterVIDMaxGroupVIDIndex.setStatus('current')
swL2MulticastFilterVIDMaxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MulticastFilterVIDMaxGroup.setStatus('current')
swL2QOSBandwidthControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 1), )
if mibBuilder.loadTexts: swL2QOSBandwidthControlTable.setStatus('current')
swL2QOSBandwidthControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 1, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2QOSBandwidthPortIndex"))
if mibBuilder.loadTexts: swL2QOSBandwidthControlEntry.setStatus('current')
swL2QOSBandwidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthPortIndex.setStatus('current')
swL2QOSBandwidthRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthRxRate.setStatus('current')
swL2QOSBandwidthTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthTxRate.setStatus('current')
swL2QOSBandwidthRadiusRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusRxRate.setStatus('current')
swL2QOSBandwidthRadiusTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusTxRate.setStatus('current')
swL2QOSSchedulingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 2), )
if mibBuilder.loadTexts: swL2QOSSchedulingTable.setStatus('current')
swL2QOSSchedulingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 2, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2QOSSchedulingClassIndex"))
if mibBuilder.loadTexts: swL2QOSSchedulingEntry.setStatus('current')
swL2QOSSchedulingClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSSchedulingClassIndex.setStatus('current')
swL2QOSSchedulingMaxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMaxPkts.setStatus('current')
swL2QOSSchedulingMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2), ("weightfair", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSSchedulingMechanism.setStatus('current')
swL2QOSSchedulingMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMaxLatency.setStatus('current')
swL2QOS8021pUserPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 3), )
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityTable.setStatus('current')
swL2QOS8021pUserPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 3, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2QOS8021pUserPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityEntry.setStatus('current')
swL2QOS8021pUserPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityIndex.setStatus('current')
swL2QOS8021pUserPriorityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityClass.setStatus('current')
swL2QOS8021pDefaultPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 4), )
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityTable.setStatus('current')
swL2QOS8021pDefaultPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 4, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2QOS8021pDefaultPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityEntry.setStatus('current')
swL2QOS8021pDefaultPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityIndex.setStatus('current')
swL2QOS8021pDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriority.setStatus('current')
swL2QOS8021pRadiusPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pRadiusPriority.setStatus('current')
swL2QOSSchedulingMechanismCtrl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2), ("weightfair", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMechanismCtrl.setStatus('current')
swL2QOSHolPreventionCtrl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSHolPreventionCtrl.setStatus('current')
swL2PortSecurityControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 7, 1), )
if mibBuilder.loadTexts: swL2PortSecurityControlTable.setStatus('current')
swL2PortSecurityControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 7, 1, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2PortSecurityPortIndex"))
if mibBuilder.loadTexts: swL2PortSecurityControlEntry.setStatus('current')
swL2PortSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSecurityPortIndex.setStatus('current')
swL2PortSecurityMaxLernAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMaxLernAddr.setStatus('current')
swL2PortSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("permanent", 2), ("deleteOnTimeout", 3), ("deleteOnReset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMode.setStatus('current')
swL2PortSecurityAdmState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityAdmState.setStatus('current')
swL2PortSecurityEntryClearCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityEntryClearCtrl.setStatus('current')
swL2PortSecurityDelCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 7, 2))
swL2PortSecurityDelVlanName = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 7, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelVlanName.setStatus('current')
swL2PortSecurityDelPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 7, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelPort.setStatus('current')
swL2PortSecurityDelMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 7, 2, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelMacAddress.setStatus('current')
swL2PortSecurityDelActivity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 7, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelActivity.setStatus('current')
swL2PortSecurityTrapLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityTrapLogState.setStatus('current')
swL2DhcpRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayState.setStatus('current')
swL2DhcpRelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayHopCount.setStatus('current')
swL2DhcpRelayTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayTimeThreshold.setStatus('current')
swL2DhcpRelayOption82State = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayOption82State.setStatus('current')
swL2DhcpRelayOption82Check = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayOption82Check.setStatus('current')
swL2DhcpRelayOption82Policy = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayOption82Policy.setStatus('current')
swL2DhcpRelayCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 8, 7), )
if mibBuilder.loadTexts: swL2DhcpRelayCtrlTable.setStatus('current')
swL2DhcpRelayCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 8, 7, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2DhcpRelayCtrlInterfaceName"), (0, "DGS3000-24TC-L2MGMT-MIB", "swL2DhcpRelayCtrlServer"))
if mibBuilder.loadTexts: swL2DhcpRelayCtrlEntry.setStatus('current')
swL2DhcpRelayCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 8, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DhcpRelayCtrlInterfaceName.setStatus('current')
swL2DhcpRelayCtrlServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 8, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DhcpRelayCtrlServer.setStatus('current')
swL2DhcpRelayCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 8, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayCtrlState.setStatus('current')
swL2TrunkMaxSupportedEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkMaxSupportedEntries.setStatus('current')
swL2TrunkCurrentNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkCurrentNumEntries.setStatus('current')
swL2TrunkCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 3), )
if mibBuilder.loadTexts: swL2TrunkCtrlTable.setStatus('current')
swL2TrunkCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 3, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2TrunkIndex"))
if mibBuilder.loadTexts: swL2TrunkCtrlEntry.setStatus('current')
swL2TrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkIndex.setStatus('current')
swL2TrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkName.setStatus('current')
swL2TrunkMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMasterPort.setStatus('current')
swL2TrunkMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 3, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMember.setStatus('current')
swL2TrunkFloodingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkFloodingPort.setStatus('current')
swL2TrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("lacp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkType.setStatus('current')
swL2TrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkState.setStatus('current')
swL2TrunkAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("mac-source", 2), ("mac-destination", 3), ("mac-source-dest", 4), ("ip-source", 5), ("ip-destination", 6), ("ip-source-dest", 7), ("l4-source-port", 8), ("l4-destination-port", 9), ("l4-source-dest-port", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setStatus('current')
swL2TrunkLACPPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 5), )
if mibBuilder.loadTexts: swL2TrunkLACPPortTable.setStatus('current')
swL2TrunkLACPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 5, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2TrunkLACPPortIndex"))
if mibBuilder.loadTexts: swL2TrunkLACPPortEntry.setStatus('current')
swL2TrunkLACPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkLACPPortIndex.setStatus('current')
swL2TrunkLACPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkLACPPortState.setStatus('current')
swL2TrunkVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 6), )
if mibBuilder.loadTexts: swL2TrunkVLANTable.setStatus('current')
swL2TrunkVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 6, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2TrunkVLANPort"))
if mibBuilder.loadTexts: swL2TrunkVLANEntry.setStatus('current')
swL2TrunkVLANPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkVLANPort.setStatus('current')
swL2TrunkVLANState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 9, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkVLANState.setStatus('current')
swL2MirrorLogicTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorLogicTargetPort.setStatus('current')
swL2MirrorPortSourceIngress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 10, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceIngress.setStatus('current')
swL2MirrorPortSourceEgress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 10, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceEgress.setStatus('current')
swL2MirrorPortState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortState.setStatus('current')
swL2MirrorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 10, 5), )
if mibBuilder.loadTexts: swL2MirrorGroupTable.setStatus('current')
swL2MirrorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 10, 5, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2MirrorGroupID"))
if mibBuilder.loadTexts: swL2MirrorGroupEntry.setStatus('current')
swL2MirrorGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 10, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: swL2MirrorGroupID.setStatus('current')
swL2MirrorGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 10, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupRowStatus.setStatus('current')
swL2MirrorGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupState.setStatus('current')
swL2MirrorGroupTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupTargetPort.setStatus('current')
swL2MirrorGroupSourceIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 10, 5, 1, 5), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupSourceIngress.setStatus('current')
swL2MirrorGroupSourceEngress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 10, 5, 1, 6), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupSourceEngress.setStatus('current')
swL2IGMPMaxSupportedVlans = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMaxSupportedVlans.setStatus('current')
swL2IGMPMaxIpGroupNumPerVlan = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMaxIpGroupNumPerVlan.setStatus('current')
swL2IGMPSnoopingMulticastVlanState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingMulticastVlanState.setStatus('current')
swL2IGMPCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 4), )
if mibBuilder.loadTexts: swL2IGMPCtrlTable.setStatus('current')
swL2IGMPCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 4, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPCtrlVid"))
if mibBuilder.loadTexts: swL2IGMPCtrlEntry.setStatus('current')
swL2IGMPCtrlVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCtrlVid.setStatus('current')
swL2IGMPQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryInterval.setStatus('current')
swL2IGMPMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMaxResponseTime.setStatus('current')
swL2IGMPRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRobustness.setStatus('current')
swL2IGMPLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPLastMemberQueryInterval.setStatus('current')
swL2IGMPHostTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPHostTimeout.setStatus('obsolete')
swL2IGMPRouteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouteTimeout.setStatus('obsolete')
swL2IGMPLeaveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPLeaveTimer.setStatus('obsolete')
swL2IGMPQueryState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryState.setStatus('current')
swL2IGMPCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("querier", 2), ("non-querier", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCurrentState.setStatus('current')
swL2IGMPCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPCtrlState.setStatus('current')
swL2IGMPFastLeaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPFastLeaveState.setStatus('current')
swL2IGMPQueryVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryVersion.setStatus('current')
swL2IGMPRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRateLimit.setStatus('current')
swL2IGMPReportSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPReportSuppression.setStatus('current')
swL2IGMPQueryInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 5), )
if mibBuilder.loadTexts: swL2IGMPQueryInfoTable.setStatus('current')
swL2IGMPQueryInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 5, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPInfoVid"))
if mibBuilder.loadTexts: swL2IGMPQueryInfoEntry.setStatus('current')
swL2IGMPInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoVid.setStatus('current')
swL2IGMPInfoQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoQueryCount.setStatus('obsolete')
swL2IGMPInfoTxQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoTxQueryCount.setStatus('obsolete')
swL2IGMPQueryIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPQueryIPAddress.setStatus('current')
swL2IGMPQueryExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPQueryExpiryTime.setStatus('current')
swL2IGMPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 6), )
if mibBuilder.loadTexts: swL2IGMPInfoTable.setStatus('obsolete')
swL2IGMPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 6, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPVid"), (0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPGroupIpAddr"))
if mibBuilder.loadTexts: swL2IGMPInfoEntry.setStatus('obsolete')
swL2IGMPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVid.setStatus('obsolete')
swL2IGMPGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPGroupIpAddr.setStatus('obsolete')
swL2IGMPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 6, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMacAddr.setStatus('obsolete')
swL2IGMPPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 6, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortMap.setStatus('obsolete')
swL2IGMPIpGroupReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPIpGroupReportCount.setStatus('obsolete')
swL2IGMPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVersion.setStatus('obsolete')
swL2IGMPGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPGroupMode.setStatus('obsolete')
swL2IGMPRouterPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 7), )
if mibBuilder.loadTexts: swL2IGMPRouterPortTable.setStatus('current')
swL2IGMPRouterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 7, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPRouterPortVlanid"))
if mibBuilder.loadTexts: swL2IGMPRouterPortEntry.setStatus('current')
swL2IGMPRouterPortVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanid.setStatus('current')
swL2IGMPRouterPortVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanName.setStatus('current')
swL2IGMPRouterPortStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 7, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouterPortStaticPortList.setStatus('current')
swL2IGMPRouterPortDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 7, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortDynamicPortList.setStatus('current')
swL2IGMPRouterPortForbiddenPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 7, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouterPortForbiddenPortList.setStatus('current')
swL2IGMPMulticastVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 8), )
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTable.setStatus('current')
swL2IGMPMulticastVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 8, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPMulticastVlanid"))
if mibBuilder.loadTexts: swL2IGMPMulticastVlanEntry.setStatus('current')
swL2IGMPMulticastVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanid.setStatus('current')
swL2IGMPMulticastVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanName.setStatus('current')
swL2IGMPMulticastVlanSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 8, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanSourcePort.setStatus('current')
swL2IGMPMulticastVlanMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 8, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanMemberPort.setStatus('current')
swL2IGMPMulticastVlanTagMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 8, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTagMemberPort.setStatus('current')
swL2IGMPMulticastVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanState.setStatus('current')
swL2IGMPMulticastVlanReplaceSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 8, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanReplaceSourceIp.setStatus('current')
swL2IGMPMulticastVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 8, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRowStatus.setStatus('current')
swL2IGMPMulticastVlanRemoveAllMcastAddrListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRemoveAllMcastAddrListAction.setStatus('current')
swL2IGMPMulticastVlanUntagSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 8, 1, 10), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanUntagSourcePort.setStatus('current')
swL2IGMPMulticastVlanRemapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRemapPriority.setStatus('current')
swL2IGMPMulticastVlanReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanReplacePriority.setStatus('current')
swL2IGMPMulticastVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 9), )
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupTable.setStatus('current')
swL2IGMPMulticastVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 9, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPMulticastVlanGroupVid"), (0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPMulticastVlanGroupFromIp"), (0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPMulticastVlanGroupToIp"))
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupEntry.setStatus('current')
swL2IGMPMulticastVlanGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupVid.setStatus('current')
swL2IGMPMulticastVlanGroupFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupFromIp.setStatus('current')
swL2IGMPMulticastVlanGroupToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupToIp.setStatus('current')
swL2IGMPMulticastVlanGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanGroupStatus.setStatus('current')
swL2IGMPv3Table = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 10), )
if mibBuilder.loadTexts: swL2IGMPv3Table.setStatus('current')
swL2IGMPv3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 10, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPVid"), (0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPGroupIpAddr"), (0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPv3SourceIPAddr"))
if mibBuilder.loadTexts: swL2IGMPv3Entry.setStatus('current')
swL2IGMPv3SourceIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPv3SourceIPAddr.setStatus('current')
swL2IGMPv3Forwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPv3Forwarding.setStatus('current')
swL2IGMPv3ExpireTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPv3ExpireTimer.setStatus('current')
swIGMPSnoopingGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 11), )
if mibBuilder.loadTexts: swIGMPSnoopingGroupTable.setStatus('current')
swIGMPSnoopingGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 11, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swIGMPSnoopingGroupVid"), (0, "DGS3000-24TC-L2MGMT-MIB", "swIGMPSnoopingGroupGroupAddr"), (0, "DGS3000-24TC-L2MGMT-MIB", "swIGMPSnoopingGroupSourceAddr"))
if mibBuilder.loadTexts: swIGMPSnoopingGroupEntry.setStatus('current')
swIGMPSnoopingGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupVid.setStatus('current')
swIGMPSnoopingGroupGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupGroupAddr.setStatus('current')
swIGMPSnoopingGroupSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupSourceAddr.setStatus('current')
swIGMPSnoopingGroupIncludePortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 11, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupIncludePortMap.setStatus('current')
swIGMPSnoopingGroupExcludePortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 11, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupExcludePortMap.setStatus('current')
swIGMPSnoopingGroupReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupReportCount.setStatus('current')
swIGMPSnoopingGroupUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 11, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupUpTime.setStatus('current')
swIGMPSnoopingGroupExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 11, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupExpiryTime.setStatus('current')
swIGMPSnoopingGroupRouterPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 11, 1, 9), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupRouterPorts.setStatus('current')
swIGMPSnoopingGroupStaticMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 11, 1, 10), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPSnoopingGroupStaticMemberPorts.setStatus('current')
swL2IGMPDynIpMultMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 12))
swL2IGMPDynIPMultMaxEntry = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPDynIPMultMaxEntry.setStatus('current')
swL2IGMPSnoopingClearDynIpMult = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 12, 2))
swL2IGMPSnoopingClearDynIpMultVID = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 12, 2, 1), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingClearDynIpMultVID.setStatus('current')
swL2IGMPSnoopingClearDynIpMultIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 12, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingClearDynIpMultIP.setStatus('current')
swL2IGMPSnoopingClearDynIpMultAction = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 12, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("vlan", 2), ("group", 3), ("other", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingClearDynIpMultAction.setStatus('current')
swL2IGMPDynIPMultCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 12, 3), )
if mibBuilder.loadTexts: swL2IGMPDynIPMultCtrlTable.setStatus('current')
swL2IGMPDynIPMultCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 12, 3, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPCtrlVid"))
if mibBuilder.loadTexts: swL2IGMPDynIPMultCtrlEntry.setStatus('current')
swL2IGMPDynIPMultVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPDynIPMultVlanState.setStatus('current')
swL2IGMPDynIPMultVlanAge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPDynIPMultVlanAge.setStatus('current')
swL2IGMPDynIPMultGroupExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 12, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPDynIPMultGroupExpiryTime.setStatus('current')
swL2IGMPAccessAuthTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 13), )
if mibBuilder.loadTexts: swL2IGMPAccessAuthTable.setStatus('current')
swL2IGMPAccessAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 13, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPAccessAuthPort"))
if mibBuilder.loadTexts: swL2IGMPAccessAuthEntry.setStatus('current')
swL2IGMPAccessAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPAccessAuthPort.setStatus('current')
swL2IGMPAccessAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPAccessAuthState.setStatus('current')
swL2IGMPCountrInfoMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14))
swL2IGMPSnoopingClearStatisticsCounter = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingClearStatisticsCounter.setStatus('current')
swL2IGMPVlanCounterInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2), )
if mibBuilder.loadTexts: swL2IGMPVlanCounterInfoTable.setStatus('current')
swL2IGMPVlanCounterInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPVlanCounterInfoVid"))
if mibBuilder.loadTexts: swL2IGMPVlanCounterInfoEntry.setStatus('current')
swL2IGMPVlanCounterInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanCounterInfoVid.setStatus('current')
swL2IGMPVlanCounterGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanCounterGroupNumber.setStatus('current')
swL2IGMPVlanQueryCountV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanQueryCountV1.setStatus('current')
swL2IGMPVlanQueryCountV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanQueryCountV2.setStatus('current')
swL2IGMPVlanQueryCountV3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanQueryCountV3.setStatus('current')
swL2IGMPVlanDropQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanDropQueryCount.setStatus('current')
swL2IGMPVlanReportCountV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanReportCountV1.setStatus('current')
swL2IGMPVlanReportCountV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanReportCountV2.setStatus('current')
swL2IGMPVlanReportCountV3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanReportCountV3.setStatus('current')
swL2IGMPVlanLeaveCountV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanLeaveCountV2.setStatus('current')
swL2IGMPVlanDropedReportAndLeaveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanDropedReportAndLeaveCount.setStatus('current')
swL2IGMPVlanDroppedByMaxGroupLimitation = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanDroppedByMaxGroupLimitation.setStatus('current')
swL2IGMPVlanDroppedByGroupFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanDroppedByGroupFilter.setStatus('current')
swL2IGMPVlanTxQueryCountV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanTxQueryCountV1.setStatus('current')
swL2IGMPVlanTxQueryCountV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanTxQueryCountV2.setStatus('current')
swL2IGMPVlanTxQueryCountV3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanTxQueryCountV3.setStatus('current')
swL2IGMPVlanTxReportCountV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanTxReportCountV1.setStatus('current')
swL2IGMPVlanTxReportCountV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanTxReportCountV2.setStatus('current')
swL2IGMPVlanTxReportCountV3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanTxReportCountV3.setStatus('current')
swL2IGMPVlanTxLeaveCountV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVlanTxLeaveCountV2.setStatus('current')
swL2IGMPPortCounterInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3), )
if mibBuilder.loadTexts: swL2IGMPPortCounterInfoTable.setStatus('current')
swL2IGMPPortCounterInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPPortCounterInfoIndex"))
if mibBuilder.loadTexts: swL2IGMPPortCounterInfoEntry.setStatus('current')
swL2IGMPPortCounterInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortCounterInfoIndex.setStatus('current')
swL2IGMPPortCounterGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortCounterGroupNumber.setStatus('current')
swL2IGMPPortQueryCountV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortQueryCountV1.setStatus('current')
swL2IGMPPortQueryCountV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortQueryCountV2.setStatus('current')
swL2IGMPPortQueryCountV3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortQueryCountV3.setStatus('current')
swL2IGMPPortDropQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortDropQueryCount.setStatus('current')
swL2IGMPPortReportCountV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortReportCountV1.setStatus('current')
swL2IGMPPortReportCountV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortReportCountV2.setStatus('current')
swL2IGMPPortReportCountV3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortReportCountV3.setStatus('current')
swL2IGMPPortLeaveCountV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortLeaveCountV2.setStatus('current')
swL2IGMPPortDropedReportAndLeaveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortDropedReportAndLeaveCount.setStatus('current')
swL2IGMPPortDroppedByMaxGroupLimitation = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortDroppedByMaxGroupLimitation.setStatus('current')
swL2IGMPPortDroppedByGroupFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortDroppedByGroupFilter.setStatus('current')
swL2IGMPPortTxQueryCountV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortTxQueryCountV1.setStatus('current')
swL2IGMPPortTxQueryCountV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortTxQueryCountV2.setStatus('current')
swL2IGMPPortTxQueryCountV3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortTxQueryCountV3.setStatus('current')
swL2IGMPPortTxReportCountV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortTxReportCountV1.setStatus('current')
swL2IGMPPortTxReportCountV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortTxReportCountV2.setStatus('current')
swL2IGMPPortTxReportCountV3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortTxReportCountV3.setStatus('current')
swL2IGMPPortTxLeaveCountV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 14, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortTxLeaveCountV2.setStatus('current')
swL2IGMPRouterIPAddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 15), )
if mibBuilder.loadTexts: swL2IGMPRouterIPAddressTable.setStatus('current')
swL2IGMPRouterIPAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 15, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPRouterIPAddressVid"), (0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPRouterIPAddress"))
if mibBuilder.loadTexts: swL2IGMPRouterIPAddressEntry.setStatus('current')
swL2IGMPRouterIPAddressVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterIPAddressVid.setStatus('current')
swL2IGMPRouterIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 15, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterIPAddress.setStatus('current')
swL2IGMPSnoopingStaticGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 16), )
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupTable.setStatus('current')
swL2IGMPSnoopingStaticGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 16, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPSnoopingStaticGroupVID"), (0, "DGS3000-24TC-L2MGMT-MIB", "swL2IGMPSnoopingStaticGroupIPaddress"))
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupEntry.setStatus('current')
swL2IGMPSnoopingStaticGroupVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupVID.setStatus('current')
swL2IGMPSnoopingStaticGroupIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 16, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupIPaddress.setStatus('current')
swL2IGMPSnoopingStaticGroupMemberPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 16, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupMemberPortList.setStatus('current')
swL2IGMPSnoopingStaticGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 11, 16, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPSnoopingStaticGroupRowStatus.setStatus('current')
swL2TrafficCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 13, 1), )
if mibBuilder.loadTexts: swL2TrafficCtrlTable.setStatus('current')
swL2TrafficCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 13, 1, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2TrafficCtrlGroupIndex"))
if mibBuilder.loadTexts: swL2TrafficCtrlEntry.setStatus('current')
swL2TrafficCtrlGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficCtrlGroupIndex.setStatus('current')
swL2TrafficCtrlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficCtrlUnitIndex.setStatus('current')
swL2TrafficCtrlBMStromthreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficCtrlBMStromthreshold.setStatus('current')
swL2TrafficCtrlBcastStromCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficCtrlBcastStromCtrl.setStatus('current')
swL2TrafficCtrlMcastStromCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficCtrlMcastStromCtrl.setStatus('current')
swL2TrafficCtrlDlfStromCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficCtrlDlfStromCtrl.setStatus('current')
swL2TrafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 14, 1), )
if mibBuilder.loadTexts: swL2TrafficSegTable.setStatus('current')
swL2TrafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 14, 1, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2TrafficSegPort"))
if mibBuilder.loadTexts: swL2TrafficSegEntry.setStatus('current')
swL2TrafficSegPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficSegPort.setStatus('current')
swL2TrafficSegForwardPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 14, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setStatus('current')
swL2StpForwardBPDU = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StpForwardBPDU.setStatus('current')
swL2StpLbd = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StpLbd.setStatus('current')
swL2StpLbdRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StpLbdRecoverTime.setStatus('current')
swL2StpPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15, 4), )
if mibBuilder.loadTexts: swL2StpPortTable.setStatus('current')
swL2StpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15, 4, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2StpPort"))
if mibBuilder.loadTexts: swL2StpPortEntry.setStatus('current')
swL2StpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2StpPort.setStatus('current')
swL2StpPortLbd = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StpPortLbd.setStatus('current')
swL2StpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("discarding", 3), ("learning", 4), ("forwarding", 5), ("broken", 6), ("no-stp-enabled", 7), ("err-disabled", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2StpPortStatus.setStatus('current')
swL2StpPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("alternate", 2), ("backup", 3), ("root", 4), ("designated", 5), ("nonStp", 6), ("loopback", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2StpPortRole.setStatus('current')
swL2StpPortFBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StpPortFBPDU.setStatus('current')
swL2StpPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("link-down", 1), ("half-10Mbps-none", 2), ("half-10Mbps-backp", 3), ("full-10Mbps-none", 4), ("full-10Mbps-8023x", 5), ("half-100Mbps-none", 6), ("half-100Mbps-backp", 7), ("full-100Mbps-none", 8), ("full-100Mbps-8023x", 9), ("half-1000Mbps-none", 10), ("full-1000Mbps-backp", 11), ("full-1000Mbps-none", 12), ("full-1000Mbps-8023x", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2StpPortLinkState.setStatus('current')
swL2StpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15, 4, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StpPortProtocolMigration.setStatus('current')
swL2StpPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15, 4, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StpPortAdminEdgePort.setStatus('current')
swL2StpPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2StpPortOperEdgePort.setStatus('current')
swL2StpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StpPortAdminPointToPoint.setStatus('current')
swL2StpPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15, 4, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2StpPortOperPointToPoint.setStatus('current')
swL2StpPortAdminPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StpPortAdminPathCost.setStatus('current')
swL2StpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2StpPortPriority.setStatus('current')
swL2STPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 15, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2STPPortState.setStatus('current')
swL2MulticastFilterModeVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 17, 1), )
if mibBuilder.loadTexts: swL2MulticastFilterModeVlanTable.setStatus('current')
swL2MulticastFilterModeVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 17, 1, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2MulticastFilterVid"))
if mibBuilder.loadTexts: swL2MulticastFilterModeVlanEntry.setStatus('current')
swL2MulticastFilterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterVid.setStatus('current')
swL2MulticastFilterVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward-all-groups", 1), ("forward-unregistered-groups", 2), ("filter-unregistered-groups", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MulticastFilterVlanMode.setStatus('current')
swL2MulticastFilterModePortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 17, 2), )
if mibBuilder.loadTexts: swL2MulticastFilterModePortTable.setStatus('current')
swL2MulticastFilterModePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 17, 2, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2MulticastFilterPortIndex"))
if mibBuilder.loadTexts: swL2MulticastFilterModePortEntry.setStatus('current')
swL2MulticastFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterPortIndex.setStatus('current')
swL2MulticastFilterPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward-all-groups", 1), ("forward-unregistered-groups", 2), ("filter-unregistered-groups", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MulticastFilterPortMode.setStatus('current')
swL2LoopDetectCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 18, 1))
swL2LoopDetectAdminState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectAdminState.setStatus('current')
swL2LoopDetectInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectInterval.setStatus('current')
swL2LoopDetectRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectRecoverTime.setStatus('current')
swL2LoopDetectMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlan-based", 1), ("port-based", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectMode.setStatus('current')
swL2LoopDetectTrapMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("loop_detected", 2), ("loop_cleared", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectTrapMode.setStatus('current')
swL2LoopDetectPortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 18, 2))
swL2LoopDetectPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 18, 2, 1), )
if mibBuilder.loadTexts: swL2LoopDetectPortTable.setStatus('current')
swL2LoopDetectPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 18, 2, 1, 1), ).setIndexNames((0, "DGS3000-24TC-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2LoopDetectPortEntry.setStatus('current')
swL2LoopDetectPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 18, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortIndex.setStatus('current')
swL2LoopDetectPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 18, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectPortState.setStatus('current')
swL2LoopDetectPortLoopVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 18, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortLoopVLAN.setStatus('current')
swL2LoopDetectPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 18, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("loop", 2), ("error", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortLoopStatus.setStatus('current')
swL2Notify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 100, 1))
swL2NotifyMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 100, 1, 1))
swL2NotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 100, 1, 2))
swL2NotifFirmware = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 100, 1, 2, 0))
swL2macNotificationSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 100, 1, 1, 1), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2macNotificationSeverity.setStatus('current')
swL2PortSecurityViolationSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 100, 1, 1, 2), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityViolationSeverity.setStatus('current')
swL2macNotification = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 100, 1, 2, 0, 1)).setObjects(("DGS3000-24TC-L2MGMT-MIB", "swL2macNotifyInfo"))
if mibBuilder.loadTexts: swL2macNotification.setStatus('current')
swL2PortSecurityViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 100, 1, 2, 0, 2)).setObjects(("PORT-SECURITY-MIB", "swPortSecPortIndex"), ("DGS3000-24TC-L2MGMT-MIB", "swL2PortSecurityViolationMac"))
if mibBuilder.loadTexts: swL2PortSecurityViolationTrap.setStatus('current')
swL2PortLoopOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 100, 1, 2, 0, 3)).setObjects(("DGS3000-24TC-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2PortLoopOccurred.setStatus('current')
swL2PortLoopRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 100, 1, 2, 0, 4)).setObjects(("DGS3000-24TC-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2PortLoopRestart.setStatus('current')
swL2VlanLoopOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 100, 1, 2, 0, 5)).setObjects(("DGS3000-24TC-L2MGMT-MIB", "swL2LoopDetectPortIndex"), ("DGS3000-24TC-L2MGMT-MIB", "swL2VlanLoopDetectVID"))
if mibBuilder.loadTexts: swL2VlanLoopOccurred.setStatus('current')
swL2VlanLoopRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 100, 1, 2, 0, 6)).setObjects(("DGS3000-24TC-L2MGMT-MIB", "swL2LoopDetectPortIndex"), ("DGS3000-24TC-L2MGMT-MIB", "swL2VlanLoopDetectVID"))
if mibBuilder.loadTexts: swL2VlanLoopRestart.setStatus('current')
swl2NotificationBidings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 100, 1, 2, 1))
swL2macNotifyInfo = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 100, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2macNotifyInfo.setStatus('current')
swL2PortSecurityViolationMac = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 100, 1, 2, 1, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2PortSecurityViolationMac.setStatus('current')
swL2VlanLoopDetectVID = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 4, 1, 2, 100, 1, 2, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2VlanLoopDetectVID.setStatus('current')
mibBuilder.exportSymbols("DGS3000-24TC-L2MGMT-MIB", swL2DevCtrlTelnetState=swL2DevCtrlTelnetState, swL2TrunkCtrlEntry=swL2TrunkCtrlEntry, swL2QOS8021pDefaultPriority=swL2QOS8021pDefaultPriority, swL2PortSecurityDelPort=swL2PortSecurityDelPort, swL2IGMPPortTxReportCountV1=swL2IGMPPortTxReportCountV1, swL2DevInfo=swL2DevInfo, swL2IGMPQueryExpiryTime=swL2IGMPQueryExpiryTime, swL2IGMPRouterIPAddress=swL2IGMPRouterIPAddress, swL2MulticastFilterVid=swL2MulticastFilterVid, swDevModuleInfoModuleName=swDevModuleInfoModuleName, swL2TrunkAlgorithm=swL2TrunkAlgorithm, swL2TrunkMgmt=swL2TrunkMgmt, swL2DevCtrlCleanAllStatisticCounter=swL2DevCtrlCleanAllStatisticCounter, swL2PortErrPortState=swL2PortErrPortState, swL2TrunkLACPPortIndex=swL2TrunkLACPPortIndex, swL2IGMPSnoopingClearDynIpMultVID=swL2IGMPSnoopingClearDynIpMultVID, swIGMPSnoopingGroupTable=swIGMPSnoopingGroupTable, swDevModuleInfoEntry=swDevModuleInfoEntry, swL2IGMPMulticastVlanGroupStatus=swL2IGMPMulticastVlanGroupStatus, swL2PortCtrlAdminState=swL2PortCtrlAdminState, swL2IGMPDynIPMultCtrlEntry=swL2IGMPDynIPMultCtrlEntry, swL2StpPortLinkState=swL2StpPortLinkState, swL2PortInfoUnitID=swL2PortInfoUnitID, swL2IGMPVlanTxReportCountV3=swL2IGMPVlanTxReportCountV3, swL2TrafficCtrlBMStromthreshold=swL2TrafficCtrlBMStromthreshold, swL2IGMPRouterPortForbiddenPortList=swL2IGMPRouterPortForbiddenPortList, swL2IGMPVlanQueryCountV2=swL2IGMPVlanQueryCountV2, swL2VLANMgmt=swL2VLANMgmt, swL2QOS8021pUserPriorityTable=swL2QOS8021pUserPriorityTable, swL2IGMPSnoopingClearStatisticsCounter=swL2IGMPSnoopingClearStatisticsCounter, swL2PortSecurityDelVlanName=swL2PortSecurityDelVlanName, swL2STPPortState=swL2STPPortState, swL2NniGvrpBpduAddress=swL2NniGvrpBpduAddress, swL2IGMPMulticastVlanSourcePort=swL2IGMPMulticastVlanSourcePort, swL2DhcpRelayOption82Policy=swL2DhcpRelayOption82Policy, swL2IGMPFastLeaveState=swL2IGMPFastLeaveState, swL2QOSSchedulingEntry=swL2QOSSchedulingEntry, swL2DiffServDSCPCtrlTable=swL2DiffServDSCPCtrlTable, swL2LoopDetectPortLoopStatus=swL2LoopDetectPortLoopStatus, swL2DevCtrlIGMPSnooping=swL2DevCtrlIGMPSnooping, swL2IGMPInfoTable=swL2IGMPInfoTable, swL2MirrorGroupRowStatus=swL2MirrorGroupRowStatus, swL2VlanIndex=swL2VlanIndex, swL2StpPortAdminEdgePort=swL2StpPortAdminEdgePort, swL2PortInfoMediumType=swL2PortInfoMediumType, swL2IGMPPortReportCountV1=swL2IGMPPortReportCountV1, swL2NotifyMgmt=swL2NotifyMgmt, swL2QOSBandwidthControlTable=swL2QOSBandwidthControlTable, swL2IGMPMulticastVlanGroupVid=swL2IGMPMulticastVlanGroupVid, swL2IGMPMulticastVlanMemberPort=swL2IGMPMulticastVlanMemberPort, swL2VlanPrecedencePortIndex=swL2VlanPrecedencePortIndex, swL2StpPortProtocolMigration=swL2StpPortProtocolMigration, swL2VlanPortInfoEntry=swL2VlanPortInfoEntry, swDevInfoFrontPanelLedStatus=swDevInfoFrontPanelLedStatus, swL2PortSecurityMaxLernAddr=swL2PortSecurityMaxLernAddr, swL2TrunkLACPPortState=swL2TrunkLACPPortState, swL2MulticastFilterModeVlanTable=swL2MulticastFilterModeVlanTable, swL2VLANAdvertisement=swL2VLANAdvertisement, swL2IGMPCtrlEntry=swL2IGMPCtrlEntry, swL2StpPortRole=swL2StpPortRole, swL2Notify=swL2Notify, swL2PortAutoNegInfoPortIndex=swL2PortAutoNegInfoPortIndex, swL2MACNotifyHistorySize=swL2MACNotifyHistorySize, swL2IGMPPortTxQueryCountV2=swL2IGMPPortTxQueryCountV2, swL2macNotification=swL2macNotification, swL2PortJumboFrameCtrlState=swL2PortJumboFrameCtrlState, swL2IGMPCurrentState=swL2IGMPCurrentState, swL2DevCtrlStpState=swL2DevCtrlStpState, swL2TrunkType=swL2TrunkType, swL2PortMgmt=swL2PortMgmt, swL2IGMPHostTimeout=swL2IGMPHostTimeout, swL2QOS8021pDefaultPriorityEntry=swL2QOS8021pDefaultPriorityEntry, swL2TrafficSegForwardPorts=swL2TrafficSegForwardPorts, swL2IGMPRouterPortEntry=swL2IGMPRouterPortEntry, swL2StpPort=swL2StpPort, swL2IGMPVlanTxQueryCountV3=swL2IGMPVlanTxQueryCountV3, swL2DevCtrlLLDPState=swL2DevCtrlLLDPState, swL2IGMPPortTxReportCountV3=swL2IGMPPortTxReportCountV3, swL2MulticastFilterVIDMaxGroupEntry=swL2MulticastFilterVIDMaxGroupEntry, swL2PortSecurityMgmt=swL2PortSecurityMgmt, swL2macNotifyInfo=swL2macNotifyInfo, swL2LimitedMulticastFilterPortEntry=swL2LimitedMulticastFilterPortEntry, swL2PortJumboFrameCtrlTable=swL2PortJumboFrameCtrlTable, swL2PortAutoNegInfoAdminStatus=swL2PortAutoNegInfoAdminStatus, swL2IGMPInfoTxQueryCount=swL2IGMPInfoTxQueryCount, swL2IGMPSnoopingClearDynIpMultAction=swL2IGMPSnoopingClearDynIpMultAction, swL2PortInfoModuleType=swL2PortInfoModuleType, swL2PortCableDiagnosisPortIndex=swL2PortCableDiagnosisPortIndex, swL2MirrorPortSourceIngress=swL2MirrorPortSourceIngress, swL2IGMPRouterIPAddressEntry=swL2IGMPRouterIPAddressEntry, swL2IGMPPortTxLeaveCountV2=swL2IGMPPortTxLeaveCountV2, swL2DevCtrlIGMPSnoopingMcstRTOnly=swL2DevCtrlIGMPSnoopingMcstRTOnly, swL2IGMPPortLeaveCountV2=swL2IGMPPortLeaveCountV2, swL2IGMPCtrlTable=swL2IGMPCtrlTable, swL2QOS8021pUserPriorityClass=swL2QOS8021pUserPriorityClass, swIGMPSnoopingGroupRouterPorts=swIGMPSnoopingGroupRouterPorts, swL2TrafficCtrlTable=swL2TrafficCtrlTable, swL2IGMPReportSuppression=swL2IGMPReportSuppression, swL2PortCtrlNwayState=swL2PortCtrlNwayState, swL2DhcpRelayCtrlInterfaceName=swL2DhcpRelayCtrlInterfaceName, swL2StpPortStatus=swL2StpPortStatus, swL2TrafficCtrlMcastStromCtrl=swL2TrafficCtrlMcastStromCtrl, swL2PortDropCounterPortIndex=swL2PortDropCounterPortIndex, swL2TrunkState=swL2TrunkState, swL2IGMPVlanDropQueryCount=swL2IGMPVlanDropQueryCount, swDevModuleInfoReversion=swDevModuleInfoReversion, swL2IGMPVlanDropedReportAndLeaveCount=swL2IGMPVlanDropedReportAndLeaveCount, swL2SubnetVLANTable=swL2SubnetVLANTable, swL2MulticastFilterToIp=swL2MulticastFilterToIp, swL2IGMPVlanCounterInfoEntry=swL2IGMPVlanCounterInfoEntry, swL2DevCtrlCFMState=swL2DevCtrlCFMState, swL2PortSecurityDelCtrl=swL2PortSecurityDelCtrl, swL2VlanLoopOccurred=swL2VlanLoopOccurred, swL2PortCtrlUnitIndex=swL2PortCtrlUnitIndex, swL2DhcpRelayState=swL2DhcpRelayState, swL2IGMPInfoVid=swL2IGMPInfoVid, swL2IGMPSnoopingStaticGroupEntry=swL2IGMPSnoopingStaticGroupEntry, swL2IGMPPortDropedReportAndLeaveCount=swL2IGMPPortDropedReportAndLeaveCount, swL2IGMPQueryInfoEntry=swL2IGMPQueryInfoEntry, swL2IGMPAccessAuthTable=swL2IGMPAccessAuthTable, swL2DiffServTOSCtrlTable=swL2DiffServTOSCtrlTable, swL2LimitedMulticastFilterVIDProfileStatus=swL2LimitedMulticastFilterVIDProfileStatus, swL2MulticastFilterProfileAddressEntry=swL2MulticastFilterProfileAddressEntry, swL2PortCounterClearCtrl=swL2PortCounterClearCtrl, swL2LoopDetectInterval=swL2LoopDetectInterval, swL2PortDropCounterEntry=swL2PortDropCounterEntry, swL2PortDropCounterTable=swL2PortDropCounterTable, swL2LoopDetectCtrl=swL2LoopDetectCtrl, swL2PortInfoEntry=swL2PortInfoEntry, swL2DevCtrlVlanIdOfFDBTbl=swL2DevCtrlVlanIdOfFDBTbl, swL2QOS8021pDefaultPriorityTable=swL2QOS8021pDefaultPriorityTable, swL2MulticastFilterAddressState=swL2MulticastFilterAddressState, swL2IGMPv3Table=swL2IGMPv3Table, swL2MulticastFilterVIDMaxGroupVIDIndex=swL2MulticastFilterVIDMaxGroupVIDIndex, swL2DevCtrlCFMPortTable=swL2DevCtrlCFMPortTable, swIGMPSnoopingGroupExpiryTime=swIGMPSnoopingGroupExpiryTime, swDevInfoTotalNumOfPort=swDevInfoTotalNumOfPort, swL2LimitedMulticastFilterPortProfileID=swL2LimitedMulticastFilterPortProfileID, swL2MirrorMgmt=swL2MirrorMgmt, swL2IGMPPortReportCountV2=swL2IGMPPortReportCountV2, swL2QOSBandwidthControlEntry=swL2QOSBandwidthControlEntry, swL2TrafficMgmt=swL2TrafficMgmt, swL2PortSecurityTrapLogState=swL2PortSecurityTrapLogState, swL2PortJumboFrameCtrlPortIndex=swL2PortJumboFrameCtrlPortIndex, swDevModuleInfoDescription=swDevModuleInfoDescription, swL2IGMPGroupMode=swL2IGMPGroupMode, swL2PortCtrlJumboFrameMaxSize=swL2PortCtrlJumboFrameMaxSize, swL2PortCtrlMDIXState=swL2PortCtrlMDIXState, swL2TrafficSegPort=swL2TrafficSegPort, MacAddress=MacAddress, swL2LoopDetectAdminState=swL2LoopDetectAdminState, swL2TrunkName=swL2TrunkName, swL2DevAlarmNewRoot=swL2DevAlarmNewRoot, swL2DiffServTypeCtrlDiffServType=swL2DiffServTypeCtrlDiffServType, swL2QOSBandwidthRadiusRxRate=swL2QOSBandwidthRadiusRxRate, swL2LimitedMulticastFilterVIDTable=swL2LimitedMulticastFilterVIDTable, swL2PortMulticastDrops=swL2PortMulticastDrops, swL2PortAutoNegInfoEntry=swL2PortAutoNegInfoEntry, swL2DevCtrlLLDPForwardMessageState=swL2DevCtrlLLDPForwardMessageState, swL2MulticastFilterProfileIdIndex=swL2MulticastFilterProfileIdIndex, swL2PortJumboFrameCtrlEntry=swL2PortJumboFrameCtrlEntry, swL2DiffServDSCPCtrlValue=swL2DiffServDSCPCtrlValue, swL2TrunkMasterPort=swL2TrunkMasterPort, swL2MgmtMIB=swL2MgmtMIB, swL2TrafficSegMgmt=swL2TrafficSegMgmt, swL2DiffServTOSCtrlEntry=swL2DiffServTOSCtrlEntry, swL2TrafficSegEntry=swL2TrafficSegEntry, swL2PortCableDiagnosisPairLengthInaccuracy=swL2PortCableDiagnosisPairLengthInaccuracy, swL2IGMPVlanQueryCountV3=swL2IGMPVlanQueryCountV3, swL2PortCtrlLearningState=swL2PortCtrlLearningState, swL2IGMPv3Forwarding=swL2IGMPv3Forwarding, swL2PortLoopOccurred=swL2PortLoopOccurred, swL2VlanPortInfoVid=swL2VlanPortInfoVid, swL2IGMPCtrlState=swL2IGMPCtrlState, swL2LimitedMulticastFilterVIDAccess=swL2LimitedMulticastFilterVIDAccess, swL2LimitedMulticastMgmt=swL2LimitedMulticastMgmt, swL2DiffServDSCPCtrlPortIndex=swL2DiffServDSCPCtrlPortIndex, swL2IGMPPortTxQueryCountV3=swL2IGMPPortTxQueryCountV3, swL2VlanLoopDetectVID=swL2VlanLoopDetectVID, swL2IGMPInfoEntry=swL2IGMPInfoEntry, swL2VlanPortInfoPortIndex=swL2VlanPortInfoPortIndex, swL2SubnetVLANRowStatus=swL2SubnetVLANRowStatus, swL2TrunkMaxSupportedEntries=swL2TrunkMaxSupportedEntries, swL2IGMPPortCounterInfoEntry=swL2IGMPPortCounterInfoEntry, swL2IGMPAccessAuthState=swL2IGMPAccessAuthState, swL2QOSBandwidthTxRate=swL2QOSBandwidthTxRate, swL2QOS8021pRadiusPriority=swL2QOS8021pRadiusPriority, swL2MgmtMIBTraps=swL2MgmtMIBTraps, swL2IGMPMulticastVlanGroupTable=swL2IGMPMulticastVlanGroupTable, swL2QOS8021pUserPriorityIndex=swL2QOS8021pUserPriorityIndex, swL2IGMPPortDroppedByGroupFilter=swL2IGMPPortDroppedByGroupFilter, swL2IGMPVlanDroppedByMaxGroupLimitation=swL2IGMPVlanDroppedByMaxGroupLimitation, swL2QOS8021pDefaultPriorityIndex=swL2QOS8021pDefaultPriorityIndex, swL2MACNotifyInterval=swL2MACNotifyInterval, swL2MirrorGroupEntry=swL2MirrorGroupEntry, swL2IGMPSnoopingStaticGroupVID=swL2IGMPSnoopingStaticGroupVID, swL2VlanStaticEntry=swL2VlanStaticEntry, swIGMPSnoopingGroupIncludePortMap=swIGMPSnoopingGroupIncludePortMap, swL2LimitedMulticastFilterVIDIndex=swL2LimitedMulticastFilterVIDIndex, swL2IGMPPortCounterGroupNumber=swL2IGMPPortCounterGroupNumber, swL2TrafficCtrlUnitIndex=swL2TrafficCtrlUnitIndex, swL2StpPortPriority=swL2StpPortPriority, swL2PortCtrlMediumType=swL2PortCtrlMediumType, swL2MirrorGroupTable=swL2MirrorGroupTable, swL2MirrorGroupSourceEngress=swL2MirrorGroupSourceEngress, swL2IGMPQueryInfoTable=swL2IGMPQueryInfoTable, swL2VlanPortInfoTable=swL2VlanPortInfoTable, swL2MulticastFilterModePortTable=swL2MulticastFilterModePortTable, swL2IGMPIpGroupReportCount=swL2IGMPIpGroupReportCount, swL2IGMPRobustness=swL2IGMPRobustness, swL2PortCounterCtrlTable=swL2PortCounterCtrlTable, swL2MulticastFilterVlanMode=swL2MulticastFilterVlanMode, swL2PortInfoTable=swL2PortInfoTable, swL2DiffServMgmt=swL2DiffServMgmt, swL2IGMPRateLimit=swL2IGMPRateLimit, swL2IGMPPortTxQueryCountV1=swL2IGMPPortTxQueryCountV1, swL2DevCtrlCFM=swL2DevCtrlCFM, swL2MulticastFilterStatus=swL2MulticastFilterStatus, swL2IGMPv3ExpireTimer=swL2IGMPv3ExpireTimer, swL2QOS8021pUserPriorityEntry=swL2QOS8021pUserPriorityEntry, swL2PortCtrlFlowCtrlState=swL2PortCtrlFlowCtrlState, swL2IGMPDynIPMultMaxEntry=swL2IGMPDynIPMultMaxEntry, swL2PortLoopRestart=swL2PortLoopRestart, swL2MirrorGroupTargetPort=swL2MirrorGroupTargetPort, swL2PortInfoPortIndex=swL2PortInfoPortIndex, swL2TrafficCtrlDlfStromCtrl=swL2TrafficCtrlDlfStromCtrl, swL2StpPortOperPointToPoint=swL2StpPortOperPointToPoint, swL2DevMgmt=swL2DevMgmt, swL2PortErrPortConnStatus=swL2PortErrPortConnStatus, swL2QOSSchedulingClassIndex=swL2QOSSchedulingClassIndex, swL2PortSecurityViolationSeverity=swL2PortSecurityViolationSeverity, VlanId=VlanId, swL2IGMPPortCounterInfoIndex=swL2IGMPPortCounterInfoIndex, swL2DevCtrlTelnet=swL2DevCtrlTelnet, swL2MulticastFilterPortMaxGroupPortIndex=swL2MulticastFilterPortMaxGroupPortIndex, swL2PortErrTable=swL2PortErrTable, swL2IGMPVlanReportCountV2=swL2IGMPVlanReportCountV2, swL2IGMPMaxResponseTime=swL2IGMPMaxResponseTime, swIGMPSnoopingGroupVid=swIGMPSnoopingGroupVid, swL2StpPortEntry=swL2StpPortEntry, swL2QOSSchedulingMaxLatency=swL2QOSSchedulingMaxLatency, swL2IGMPVersion=swL2IGMPVersion, swL2SubnetVLANIPMask=swL2SubnetVLANIPMask, swL2IGMPRouteTimeout=swL2IGMPRouteTimeout, swL2PortSecurityEntryClearCtrl=swL2PortSecurityEntryClearCtrl, swL2IGMPMaxIpGroupNumPerVlan=swL2IGMPMaxIpGroupNumPerVlan, swL2SubnetVLANPriority=swL2SubnetVLANPriority, swL2QOSHolPreventionCtrl=swL2QOSHolPreventionCtrl, swL2IGMPMulticastVlanGroupEntry=swL2IGMPMulticastVlanGroupEntry, swL2MirrorGroupState=swL2MirrorGroupState, swL2StpPortFBPDU=swL2StpPortFBPDU, swL2IGMPQueryIPAddress=swL2IGMPQueryIPAddress, swL2TrafficCtrlEntry=swL2TrafficCtrlEntry, swL2PortSecurityDelMacAddress=swL2PortSecurityDelMacAddress)
mibBuilder.exportSymbols("DGS3000-24TC-L2MGMT-MIB", swL2TrunkLACPPortEntry=swL2TrunkLACPPortEntry, swL2StpLbdRecoverTime=swL2StpLbdRecoverTime, swL2MulticastFilterProfileIndex=swL2MulticastFilterProfileIndex, swL2PortBufferFullDrops=swL2PortBufferFullDrops, swL2IGMPMulticastVlanRemapPriority=swL2IGMPMulticastVlanRemapPriority, swL2IGMPVlanCounterInfoTable=swL2IGMPVlanCounterInfoTable, swL2StpPortAdminPointToPoint=swL2StpPortAdminPointToPoint, swL2PortAutoNegInfoCapReceivedBits=swL2PortAutoNegInfoCapReceivedBits, swL2IGMPAccessAuthEntry=swL2IGMPAccessAuthEntry, swL2DiffServDSCPCtrlMode=swL2DiffServDSCPCtrlMode, swL2VlanLoopRestart=swL2VlanLoopRestart, swL2MirrorPortState=swL2MirrorPortState, swL2IGMPVlanLeaveCountV2=swL2IGMPVlanLeaveCountV2, swL2DiffServTOSCtrlPortIndex=swL2DiffServTOSCtrlPortIndex, swL2NotifFirmware=swL2NotifFirmware, swL2IGMPCountrInfoMgmt=swL2IGMPCountrInfoMgmt, swL2DevAlarmTopologyChange=swL2DevAlarmTopologyChange, swL2DevCtrlCFMPortEntry=swL2DevCtrlCFMPortEntry, swL2DhcpRelayOption82State=swL2DhcpRelayOption82State, swL2TrunkVLANEntry=swL2TrunkVLANEntry, swL2MACNotifyState=swL2MACNotifyState, swL2PortSecurityDelActivity=swL2PortSecurityDelActivity, swL2MirrorGroupSourceIngress=swL2MirrorGroupSourceIngress, swL2NotifyPrefix=swL2NotifyPrefix, swL2QOSSchedulingMaxPkts=swL2QOSSchedulingMaxPkts, swL2IGMPSnoopingStaticGroupIPaddress=swL2IGMPSnoopingStaticGroupIPaddress, swL2TrunkMember=swL2TrunkMember, swL2MulticastFilterFromIp=swL2MulticastFilterFromIp, swL2IGMPMulticastVlanReplacePriority=swL2IGMPMulticastVlanReplacePriority, swL2IGMPInfoQueryCount=swL2IGMPInfoQueryCount, swL2IGMPSnoopingMulticastVlanState=swL2IGMPSnoopingMulticastVlanState, swL2TrunkIndex=swL2TrunkIndex, swL2IGMPMulticastVlanTagMemberPort=swL2IGMPMulticastVlanTagMemberPort, swL2IGMPPortDroppedByMaxGroupLimitation=swL2IGMPPortDroppedByMaxGroupLimitation, swL2IGMPRouterIPAddressTable=swL2IGMPRouterIPAddressTable, swL2MulticastFilterProfileName=swL2MulticastFilterProfileName, swL2TrafficCtrlGroupIndex=swL2TrafficCtrlGroupIndex, swL2PortCtrlJumboFrame=swL2PortCtrlJumboFrame, swL2PortCtrlAutoNegCapAdvertisedBits=swL2PortCtrlAutoNegCapAdvertisedBits, swL2LoopDetectPortMgmt=swL2LoopDetectPortMgmt, swL2IGMPMulticastVlanRowStatus=swL2IGMPMulticastVlanRowStatus, swL2IGMPSnoopingClearDynIpMultIP=swL2IGMPSnoopingClearDynIpMultIP, swL2IGMPMacAddr=swL2IGMPMacAddr, swL2IGMPMaxSupportedVlans=swL2IGMPMaxSupportedVlans, swL2IGMPPortMap=swL2IGMPPortMap, swL2QOSMgmt=swL2QOSMgmt, swL2SubnetVLANEntry=swL2SubnetVLANEntry, swL2IGMPVlanReportCountV1=swL2IGMPVlanReportCountV1, swL2TrunkCurrentNumEntries=swL2TrunkCurrentNumEntries, swL2IGMPDynIPMultVlanAge=swL2IGMPDynIPMultVlanAge, swL2DevCtrlCFMPortState=swL2DevCtrlCFMPortState, swL2IGMPPortQueryCountV3=swL2IGMPPortQueryCountV3, swL2PortCableDiagnosisCableStatus=swL2PortCableDiagnosisCableStatus, swL2QOSSchedulingMechanism=swL2QOSSchedulingMechanism, swL2VlanPrecedenceEntry=swL2VlanPrecedenceEntry, swL2DevCtrlAsymVlanState=swL2DevCtrlAsymVlanState, swL2PortInfoLinkStatus=swL2PortInfoLinkStatus, swIGMPSnoopingGroupEntry=swIGMPSnoopingGroupEntry, swL2PortErrEntry=swL2PortErrEntry, swIGMPSnoopingGroupSourceAddr=swIGMPSnoopingGroupSourceAddr, swDevModuleInfoSerial=swDevModuleInfoSerial, swIGMPSnoopingGroupUpTime=swIGMPSnoopingGroupUpTime, swL2VlanPrecedenceClassification=swL2VlanPrecedenceClassification, swL2PortCableDiagnosisPairLength=swL2PortCableDiagnosisPairLength, swL2IGMPVlanTxQueryCountV2=swL2IGMPVlanTxQueryCountV2, swL2IGMPRouterPortVlanName=swL2IGMPRouterPortVlanName, swL2IGMPVlanTxReportCountV1=swL2IGMPVlanTxReportCountV1, swL2PVIDAutoAssignmentState=swL2PVIDAutoAssignmentState, swL2PortVLANIngressDrops=swL2PortVLANIngressDrops, swL2MulticastFilterModeVlanEntry=swL2MulticastFilterModeVlanEntry, swL2DhcpRelayCtrlEntry=swL2DhcpRelayCtrlEntry, swL2DevAlarm=swL2DevAlarm, swL2DhcpRelayCtrlServer=swL2DhcpRelayCtrlServer, swL2TrunkCtrlTable=swL2TrunkCtrlTable, swL2IGMPQueryVersion=swL2IGMPQueryVersion, swL2IGMPPortCounterInfoTable=swL2IGMPPortCounterInfoTable, swL2IGMPLastMemberQueryInterval=swL2IGMPLastMemberQueryInterval, swL2PortCtrlPortIndex=swL2PortCtrlPortIndex, swL2DevAlarmLinkChange=swL2DevAlarmLinkChange, swL2IGMPRouterPortStaticPortList=swL2IGMPRouterPortStaticPortList, swL2DhcpRelayMgmt=swL2DhcpRelayMgmt, swL2LimitedMulticastFilterPortAccess=swL2LimitedMulticastFilterPortAccess, swL2DiffServTypeCtrlEntry=swL2DiffServTypeCtrlEntry, swL2IGMPQueryInterval=swL2IGMPQueryInterval, swIGMPSnoopingGroupGroupAddr=swIGMPSnoopingGroupGroupAddr, swL2StpPortOperEdgePort=swL2StpPortOperEdgePort, swL2IGMPMulticastVlanid=swL2IGMPMulticastVlanid, swL2DiffServTypeCtrlTable=swL2DiffServTypeCtrlTable, swL2IGMPMulticastVlanTable=swL2IGMPMulticastVlanTable, PYSNMP_MODULE_ID=swL2MgmtMIB, swL2DhcpRelayOption82Check=swL2DhcpRelayOption82Check, swL2IGMPDynIPMultCtrlTable=swL2IGMPDynIPMultCtrlTable, swL2PortAutoNegInfoCapAdvertisedBits=swL2PortAutoNegInfoCapAdvertisedBits, swL2DevCtrl=swL2DevCtrl, swL2LoopDetectPortState=swL2LoopDetectPortState, swL2PortCtrlAutoNegRestart=swL2PortCtrlAutoNegRestart, swL2LoopDetectPortTable=swL2LoopDetectPortTable, swL2PortCableDiagnosisEntry=swL2PortCableDiagnosisEntry, swL2MulticastFilterPortIndex=swL2MulticastFilterPortIndex, swL2MulticastFilterPortMaxGroupEntry=swL2MulticastFilterPortMaxGroupEntry, IANAifMauAutoNegCapBits=IANAifMauAutoNegCapBits, swL2IGMPVlanCounterInfoVid=swL2IGMPVlanCounterInfoVid, swL2MulticastFilterVIDMaxGroupTable=swL2MulticastFilterVIDMaxGroupTable, swL2IGMPMulticastVlanName=swL2IGMPMulticastVlanName, swL2DiffServTOSCtrlMode=swL2DiffServTOSCtrlMode, swL2IGMPDynIpMultMgmt=swL2IGMPDynIpMultMgmt, swL2LoopDetectRecoverTime=swL2LoopDetectRecoverTime, swL2IGMPGroupIpAddr=swL2IGMPGroupIpAddr, swL2IGMPDynIPMultVlanState=swL2IGMPDynIPMultVlanState, swL2IGMPVlanTxQueryCountV1=swL2IGMPVlanTxQueryCountV1, swL2IGMPMulticastVlanRemoveAllMcastAddrListAction=swL2IGMPMulticastVlanRemoveAllMcastAddrListAction, swL2PortInfoNwayStatus=swL2PortInfoNwayStatus, swL2LoopDetectMgmt=swL2LoopDetectMgmt, swL2PortCtrlEntry=swL2PortCtrlEntry, swL2IGMPPortQueryCountV2=swL2IGMPPortQueryCountV2, swL2IGMPSnoopingStaticGroupTable=swL2IGMPSnoopingStaticGroupTable, swL2PortInfoErrorDisabled=swL2PortInfoErrorDisabled, swL2PortAutoNegInfoTable=swL2PortAutoNegInfoTable, swL2MulticastFilterModePortEntry=swL2MulticastFilterModePortEntry, swL2PortCounterCtrlEntry=swL2PortCounterCtrlEntry, swL2PortErrPortReason=swL2PortErrPortReason, swL2PortSecurityPortIndex=swL2PortSecurityPortIndex, swL2StpLbd=swL2StpLbd, swL2PortCableDiagnosisPairStatus=swL2PortCableDiagnosisPairStatus, swL2LoopDetectPortEntry=swL2LoopDetectPortEntry, swL2IGMPLeaveTimer=swL2IGMPLeaveTimer, swL2PortCtrlTable=swL2PortCtrlTable, swL2StpForwardBPDU=swL2StpForwardBPDU, swL2LoopDetectPortLoopVLAN=swL2LoopDetectPortLoopVLAN, swL2LimitedMulticastFilterPortProfileStatus=swL2LimitedMulticastFilterPortProfileStatus, swDevInfoNumOfPortInUse=swDevInfoNumOfPortInUse, swL2MirrorGroupID=swL2MirrorGroupID, swl2NotificationBidings=swl2NotificationBidings, swL2StpPortLbd=swL2StpPortLbd, swL2IGMPSnoopingStaticGroupMemberPortList=swL2IGMPSnoopingStaticGroupMemberPortList, swL2LoopDetectPortIndex=swL2LoopDetectPortIndex, swL2IGMPVlanCounterGroupNumber=swL2IGMPVlanCounterGroupNumber, swL2DevCtrlSnmpTrapState=swL2DevCtrlSnmpTrapState, swL2DevCtrlWebTcpPort=swL2DevCtrlWebTcpPort, PortList=PortList, swL2IGMPVlanQueryCountV1=swL2IGMPVlanQueryCountV1, swL2IGMPPortQueryCountV1=swL2IGMPPortQueryCountV1, swL2DiffServDSCPCtrlEntry=swL2DiffServDSCPCtrlEntry, swL2MulticastFilterProfileAddressTable=swL2MulticastFilterProfileAddressTable, swL2StpMgmt=swL2StpMgmt, swL2LimitedMulticastFilterVIDProfileID=swL2LimitedMulticastFilterVIDProfileID, swL2SubnetVLANIPAddress=swL2SubnetVLANIPAddress, swL2TrunkVLANTable=swL2TrunkVLANTable, swL2IGMPVid=swL2IGMPVid, swL2VlanStaticTable=swL2VlanStaticTable, swL2IGMPMulticastVlanGroupToIp=swL2IGMPMulticastVlanGroupToIp, swL2PortSecurityControlTable=swL2PortSecurityControlTable, swL2DiffServTypeCtrlPortIndex=swL2DiffServTypeCtrlPortIndex, swL2macNotificationSeverity=swL2macNotificationSeverity, swDevModuleInfoTable=swDevModuleInfoTable, swL2MulticastFilterPortMode=swL2MulticastFilterPortMode, swL2PortInfoType=swL2PortInfoType, swL2PortErrPortIndex=swL2PortErrPortIndex, swL2IGMPMulticastVlanState=swL2IGMPMulticastVlanState, swL2DevCtrlRmonState=swL2DevCtrlRmonState, swL2MulticastFilterProfileTable=swL2MulticastFilterProfileTable, swL2QOSBandwidthRadiusTxRate=swL2QOSBandwidthRadiusTxRate, swL2DhcpRelayCtrlTable=swL2DhcpRelayCtrlTable, swL2DevCtrlTelnetTcpPort=swL2DevCtrlTelnetTcpPort, swL2QOSBandwidthPortIndex=swL2QOSBandwidthPortIndex, swL2DhcpRelayCtrlState=swL2DhcpRelayCtrlState, swL2IGMPDynIPMultGroupExpiryTime=swL2IGMPDynIPMultGroupExpiryTime, swL2IGMPPortDropQueryCount=swL2IGMPPortDropQueryCount, swL2LoopDetectMode=swL2LoopDetectMode, swL2IGMPRouterPortDynamicPortList=swL2IGMPRouterPortDynamicPortList, swL2TrunkVLANPort=swL2TrunkVLANPort, swL2VlanPortInfoPortRole=swL2VlanPortInfoPortRole, swL2TrunkFloodingPort=swL2TrunkFloodingPort, swL2TrunkLACPPortTable=swL2TrunkLACPPortTable, swL2DhcpRelayTimeThreshold=swL2DhcpRelayTimeThreshold, swL2IGMPSnoopingStaticGroupRowStatus=swL2IGMPSnoopingStaticGroupRowStatus, swL2PortSecurityAdmState=swL2PortSecurityAdmState, swL2MulticastFilterMode=swL2MulticastFilterMode, swL2DevCtrlIpAutoconfig=swL2DevCtrlIpAutoconfig, swL2MulticastFilterVIDMaxGroup=swL2MulticastFilterVIDMaxGroup, swL2DhcpRelayHopCount=swL2DhcpRelayHopCount, swL2IGMPMulticastVlanEntry=swL2IGMPMulticastVlanEntry, swL2DevCtrlManagementVlanId=swL2DevCtrlManagementVlanId, swL2IGMPv3Entry=swL2IGMPv3Entry, swL2MulticastFilterPortMaxGroupTable=swL2MulticastFilterPortMaxGroupTable, swL2VlanPrecedenceTable=swL2VlanPrecedenceTable, swL2QOSSchedulingMechanismCtrl=swL2QOSSchedulingMechanismCtrl, swL2LimitedMulticastFilterVIDEntry=swL2LimitedMulticastFilterVIDEntry, swL2IGMPQueryState=swL2IGMPQueryState, swL2IGMPCtrlVid=swL2IGMPCtrlVid, swL2IGMPRouterPortTable=swL2IGMPRouterPortTable, swL2PortACLDrops=swL2PortACLDrops, swL2PortSecurityMode=swL2PortSecurityMode, swL2PortSecurityViolationMac=swL2PortSecurityViolationMac, swL2TrafficSegTable=swL2TrafficSegTable, swL2IGMPMgmt=swL2IGMPMgmt, swL2IGMPVlanTxLeaveCountV2=swL2IGMPVlanTxLeaveCountV2, swL2PortAutoNegInfoCapabilityBits=swL2PortAutoNegInfoCapabilityBits, swL2DevCtrlWebState=swL2DevCtrlWebState, swL2LimitedMulticastFilterPortTable=swL2LimitedMulticastFilterPortTable, swL2IGMPMulticastVlanReplaceSourceIp=swL2IGMPMulticastVlanReplaceSourceIp, swL2SubnetVLANID=swL2SubnetVLANID, swL2StpPortTable=swL2StpPortTable, swL2MulticastFilterProfileEntry=swL2MulticastFilterProfileEntry, swL2DevCtrlWeb=swL2DevCtrlWeb, swL2TrunkVLANState=swL2TrunkVLANState, swL2IGMPSnoopingClearDynIpMult=swL2IGMPSnoopingClearDynIpMult, swL2IGMPPortTxReportCountV2=swL2IGMPPortTxReportCountV2, swL2IGMPVlanTxReportCountV2=swL2IGMPVlanTxReportCountV2, swL2MulticastFilterPortMaxGroup=swL2MulticastFilterPortMaxGroup, swL2IGMPAccessAuthPort=swL2IGMPAccessAuthPort, swL2QOSSchedulingTable=swL2QOSSchedulingTable, swL2PortCounterCtrlPortIndex=swL2PortCounterCtrlPortIndex, swL2DevCtrlCFMPortIndex=swL2DevCtrlCFMPortIndex, swL2LimitedMulticastFilterPortIndex=swL2LimitedMulticastFilterPortIndex, swL2IGMPVlanDroppedByGroupFilter=swL2IGMPVlanDroppedByGroupFilter, swL2IGMPVlanReportCountV3=swL2IGMPVlanReportCountV3, swL2PortCableDiagnosisPairIndex=swL2PortCableDiagnosisPairIndex, swL2PortSecurityControlEntry=swL2PortSecurityControlEntry, swL2PortSecurityViolationTrap=swL2PortSecurityViolationTrap, swL2IGMPv3SourceIPAddr=swL2IGMPv3SourceIPAddr, swL2IGMPMulticastVlanUntagSourcePort=swL2IGMPMulticastVlanUntagSourcePort, swL2IGMPMulticastVlanGroupFromIp=swL2IGMPMulticastVlanGroupFromIp, swL2IGMPRouterIPAddressVid=swL2IGMPRouterIPAddressVid, swIGMPSnoopingGroupStaticMemberPorts=swIGMPSnoopingGroupStaticMemberPorts, swL2PortCtrlMACNotifyState=swL2PortCtrlMACNotifyState, swL2PortCableDiagnosisTable=swL2PortCableDiagnosisTable, swL2DevCtrlVLANTrunkState=swL2DevCtrlVLANTrunkState, swL2MirrorLogicTargetPort=swL2MirrorLogicTargetPort, swL2StpPortAdminPathCost=swL2StpPortAdminPathCost, swL2QOSBandwidthRxRate=swL2QOSBandwidthRxRate, swL2IGMPRouterPortVlanid=swL2IGMPRouterPortVlanid, swL2LoopDetectTrapMode=swL2LoopDetectTrapMode, swL2IGMPPortReportCountV3=swL2IGMPPortReportCountV3, swL2MirrorPortSourceEgress=swL2MirrorPortSourceEgress, swDevModuleInfoUnitID=swDevModuleInfoUnitID, swIGMPSnoopingGroupReportCount=swIGMPSnoopingGroupReportCount, swL2DiffServTOSCtrlValue=swL2DiffServTOSCtrlValue, swIGMPSnoopingGroupExcludePortMap=swIGMPSnoopingGroupExcludePortMap, swL2TrafficCtrlBcastStromCtrl=swL2TrafficCtrlBcastStromCtrl)
