#
# PySNMP MIB module CXAtmDxi-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXAtmDxi-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:16:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
Alias, cxAtmDxi = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "cxAtmDxi")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, TimeTicks, NotificationType, MibIdentifier, Integer32, Gauge32, ModuleIdentity, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "TimeTicks", "NotificationType", "MibIdentifier", "Integer32", "Gauge32", "ModuleIdentity", "Bits", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class PSapIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 0)

class SubRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class Dfa(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 1023)

class DfaX(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 16777216)

class Vpi(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class Vci(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

atmDxiMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiMibLevel.setStatus('mandatory')
atmDxiTranslationDfa = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 2), DfaX()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDxiTranslationDfa.setStatus('mandatory')
atmDxiTranslationVpi = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 3), Vpi()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDxiTranslationVpi.setStatus('mandatory')
atmDxiTranslationVci = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 4), Vci()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDxiTranslationVci.setStatus('mandatory')
atmDxiTranslationMode = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twobytes", 1), ("fourbytes", 2))).clone('twobytes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDxiTranslationMode.setStatus('mandatory')
atmDxiPSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 10), )
if mibBuilder.loadTexts: atmDxiPSapTable.setStatus('mandatory')
atmDxiPSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 10, 1), ).setIndexNames((0, "CXAtmDxi-MIB", "atmDxiPSapNumber"))
if mibBuilder.loadTexts: atmDxiPSapEntry.setStatus('mandatory')
atmDxiPSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 10, 1, 1), PSapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiPSapNumber.setStatus('mandatory')
atmDxiPSapConnectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 600)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDxiPSapConnectTimer.setStatus('mandatory')
atmDxiPSapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: atmDxiPSapControl.setStatus('mandatory')
atmDxiPSapState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("offline", 1), ("connected", 4))).clone('offline')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiPSapState.setStatus('mandatory')
atmDxiPSapTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiPSapTxFrames.setStatus('mandatory')
atmDxiPSapRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiPSapRxFrames.setStatus('mandatory')
atmDxiPSapTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiPSapTxOctets.setStatus('mandatory')
atmDxiPSapRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 10, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiPSapRxOctets.setStatus('mandatory')
atmDxiPSapOutSuccessfullConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 10, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiPSapOutSuccessfullConnects.setStatus('mandatory')
atmDxiPSapOutUnsuccessfullConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 10, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiPSapOutUnsuccessfullConnects.setStatus('mandatory')
atmDxiPSapInConnectsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 10, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiPSapInConnectsReceived.setStatus('mandatory')
atmDxiPSapTxResets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 10, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiPSapTxResets.setStatus('mandatory')
atmDxiPSapRxResets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 10, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiPSapRxResets.setStatus('mandatory')
atmDxiPSapNoServiceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 10, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiPSapNoServiceDiscards.setStatus('mandatory')
atmDxiPSapCongestionDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 10, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiPSapCongestionDiscards.setStatus('mandatory')
atmDxiSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 11), )
if mibBuilder.loadTexts: atmDxiSapTable.setStatus('mandatory')
atmDxiSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmDxiSapEntry.setStatus('mandatory')
atmDxiSapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("mode-1a", 1), ("mode-1b", 2), ("mode-2", 3), ("modeTransparent", 4), ("modeLoopback", 5))).clone('mode-1a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDxiSapMode.setStatus('mandatory')
atmDxiSapTransparentDfa = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 11, 1, 6), Dfa()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDxiSapTransparentDfa.setStatus('mandatory')
atmDxiSapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: atmDxiSapControl.setStatus('mandatory')
atmDxiSapRxLmiFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 11, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiSapRxLmiFrames.setStatus('mandatory')
atmDxiSapNoRouteDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 11, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiSapNoRouteDiscards.setStatus('mandatory')
atmDxiSapRxInvalidDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 11, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiSapRxInvalidDiscards.setStatus('mandatory')
atmDxiSapCongestionDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 11, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiSapCongestionDiscards.setStatus('mandatory')
atmDxiSapFlowControlDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 11, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiSapFlowControlDiscards.setStatus('mandatory')
atmDxiSysRouteTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 12), )
if mibBuilder.loadTexts: atmDxiSysRouteTable.setStatus('mandatory')
atmDxiSysRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CXAtmDxi-MIB", "atmDxiSRDxiFrameAddress"))
if mibBuilder.loadTexts: atmDxiSysRouteEntry.setStatus('mandatory')
atmDxiSRDxiFrameAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 12, 1, 1), Dfa()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiSRDxiFrameAddress.setStatus('mandatory')
atmDxiSRRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDxiSRRowStatus.setStatus('mandatory')
atmDxiSRDestAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 12, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDxiSRDestAlias.setStatus('mandatory')
atmDxiSRSubRef = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 12, 1, 4), SubRef()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDxiSRSubRef.setStatus('mandatory')
atmDxiSRRouteState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("offLine", 1), ("notConnected", 2), ("inProgress", 3), ("connected", 4), ("connectedFlowOff", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiSRRouteState.setStatus('mandatory')
atmDxiSRFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 15, 16, 17, 18))).clone(namedValues=NamedValues(("noFailure", 1), ("internalError", 2), ("localAllocFailure", 3), ("remoteAllocFailure", 4), ("localNoAccess", 5), ("remoteNoAccess", 6), ("remotePvcDown", 8), ("remotePvcBusy", 10), ("localFcnFailure", 11), ("remoteFcnFailure", 12), ("localDsnFailure", 13), ("remoteAliasNotFound", 15), ("remoteNoPvcService", 16), ("mpeInvalidSubref", 17), ("routeStalled", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiSRFailureReason.setStatus('mandatory')
atmDxiSysRouteStatsTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 13), )
if mibBuilder.loadTexts: atmDxiSysRouteStatsTable.setStatus('mandatory')
atmDxiSysRouteStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CXAtmDxi-MIB", "atmDxiSRStatsDxiFrameAddress"))
if mibBuilder.loadTexts: atmDxiSysRouteStatsEntry.setStatus('mandatory')
atmDxiSRStatsDxiFrameAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 13, 1, 1), Dfa()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiSRStatsDxiFrameAddress.setStatus('mandatory')
atmDxiSRStatsCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 13, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiSRStatsCreationTime.setStatus('mandatory')
atmDxiSRStatsNegotiatedDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiSRStatsNegotiatedDataSize.setStatus('mandatory')
atmDxiSRStatsTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiSRStatsTxFrames.setStatus('mandatory')
atmDxiSRStatsRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiSRStatsRxFrames.setStatus('mandatory')
atmDxiSRStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiSRStatsTxOctets.setStatus('mandatory')
atmDxiSRStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiSRStatsRxOctets.setStatus('mandatory')
atmDxiSRStatsFlowControlDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 58, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiSRStatsFlowControlDiscards.setStatus('mandatory')
mibBuilder.exportSymbols("CXAtmDxi-MIB", atmDxiSapNoRouteDiscards=atmDxiSapNoRouteDiscards, atmDxiPSapCongestionDiscards=atmDxiPSapCongestionDiscards, DfaX=DfaX, atmDxiPSapTxFrames=atmDxiPSapTxFrames, atmDxiSapCongestionDiscards=atmDxiSapCongestionDiscards, atmDxiSysRouteEntry=atmDxiSysRouteEntry, atmDxiSRStatsTxFrames=atmDxiSRStatsTxFrames, atmDxiSysRouteTable=atmDxiSysRouteTable, atmDxiPSapRxResets=atmDxiPSapRxResets, atmDxiSRStatsNegotiatedDataSize=atmDxiSRStatsNegotiatedDataSize, SubRef=SubRef, atmDxiPSapState=atmDxiPSapState, atmDxiPSapTxResets=atmDxiPSapTxResets, atmDxiPSapTxOctets=atmDxiPSapTxOctets, atmDxiTranslationMode=atmDxiTranslationMode, atmDxiTranslationVpi=atmDxiTranslationVpi, Vpi=Vpi, Vci=Vci, atmDxiPSapOutUnsuccessfullConnects=atmDxiPSapOutUnsuccessfullConnects, atmDxiSapEntry=atmDxiSapEntry, atmDxiPSapNumber=atmDxiPSapNumber, atmDxiPSapOutSuccessfullConnects=atmDxiPSapOutSuccessfullConnects, atmDxiSRStatsRxFrames=atmDxiSRStatsRxFrames, PSapIndex=PSapIndex, atmDxiMibLevel=atmDxiMibLevel, atmDxiSapTransparentDfa=atmDxiSapTransparentDfa, atmDxiPSapConnectTimer=atmDxiPSapConnectTimer, atmDxiSapRxLmiFrames=atmDxiSapRxLmiFrames, atmDxiSRDxiFrameAddress=atmDxiSRDxiFrameAddress, atmDxiPSapTable=atmDxiPSapTable, atmDxiPSapRxFrames=atmDxiPSapRxFrames, atmDxiSRRowStatus=atmDxiSRRowStatus, atmDxiSysRouteStatsEntry=atmDxiSysRouteStatsEntry, atmDxiSapControl=atmDxiSapControl, atmDxiTranslationVci=atmDxiTranslationVci, atmDxiSapTable=atmDxiSapTable, atmDxiSRStatsFlowControlDiscards=atmDxiSRStatsFlowControlDiscards, atmDxiPSapRxOctets=atmDxiPSapRxOctets, atmDxiSRSubRef=atmDxiSRSubRef, atmDxiSRStatsCreationTime=atmDxiSRStatsCreationTime, atmDxiSapFlowControlDiscards=atmDxiSapFlowControlDiscards, atmDxiSysRouteStatsTable=atmDxiSysRouteStatsTable, atmDxiSRRouteState=atmDxiSRRouteState, atmDxiPSapNoServiceDiscards=atmDxiPSapNoServiceDiscards, atmDxiSRStatsDxiFrameAddress=atmDxiSRStatsDxiFrameAddress, atmDxiTranslationDfa=atmDxiTranslationDfa, atmDxiPSapControl=atmDxiPSapControl, atmDxiSapMode=atmDxiSapMode, atmDxiSRStatsRxOctets=atmDxiSRStatsRxOctets, atmDxiSRFailureReason=atmDxiSRFailureReason, atmDxiSRStatsTxOctets=atmDxiSRStatsTxOctets, atmDxiSRDestAlias=atmDxiSRDestAlias, atmDxiPSapEntry=atmDxiPSapEntry, atmDxiSapRxInvalidDiscards=atmDxiSapRxInvalidDiscards, atmDxiPSapInConnectsReceived=atmDxiPSapInConnectsReceived, Dfa=Dfa)
