#
# PySNMP MIB module SCANET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SCANET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:13:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Bits, Counter64, Integer32, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, enterprises, iso, IpAddress, Gauge32, Unsigned32, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "Counter64", "Integer32", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "enterprises", "iso", "IpAddress", "Gauge32", "Unsigned32", "MibIdentifier", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
scanet = MibIdentifier((1, 3, 6, 1, 4, 1, 208))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1))
ts_2104 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 12)).setLabel("ts-2104")
cs_72xx = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 13)).setLabel("cs-72xx")
cs_76xx = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 15)).setLabel("cs-76xx")
cs_14xx = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 32)).setLabel("cs-14xx")
ethernetSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 35))
es_1810 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 35, 1)).setLabel("es-1810")
es_1820 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 35, 2)).setLabel("es-1820")
es10t24 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 35, 3))
es10t24plus = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 35, 4))
es_1520 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 35, 5)).setLabel("es-1520")
es_1850 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 35, 6)).setLabel("es-1850")
es_1851 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 35, 7)).setLabel("es-1851")
es100fx = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 35, 8))
cs_3300 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 42)).setLabel("cs-3300")
mfts = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 67))
cs_21xx = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 68)).setLabel("cs-21xx")
ct_30xx = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 69)).setLabel("ct-30xx")
in_40xx = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 82)).setLabel("in-40xx")
ct_40xx = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 83)).setLabel("ct-40xx")
matchboxRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88))
mr_1010 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 1)).setLabel("mr-1010")
mr_1011 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 2)).setLabel("mr-1011")
mr_1013 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 3)).setLabel("mr-1013")
mr_1014 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 4)).setLabel("mr-1014")
mr_1050 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 5)).setLabel("mr-1050")
mr_1051 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 6)).setLabel("mr-1051")
mr_1110 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 7)).setLabel("mr-1110")
mr_1111 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 8)).setLabel("mr-1111")
mr_1113 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 9)).setLabel("mr-1113")
mr_1114 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 10)).setLabel("mr-1114")
mr_1150 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 11)).setLabel("mr-1150")
mr_1151 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 12)).setLabel("mr-1151")
mr_1055 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 13)).setLabel("mr-1055")
mr_1155 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 14)).setLabel("mr-1155")
mr_1020 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 15)).setLabel("mr-1020")
mr_1120 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 16)).setLabel("mr-1120")
mr_1023 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 17)).setLabel("mr-1023")
mr_1123 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 18)).setLabel("mr-1123")
mr_1024 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 19)).setLabel("mr-1024")
mr_1124 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 20)).setLabel("mr-1124")
mr_1040 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 21)).setLabel("mr-1040")
mr_1140 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 22)).setLabel("mr-1140")
mr_1021 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 23)).setLabel("mr-1021")
mr_1121 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 24)).setLabel("mr-1121")
er9100 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 25))
er9200 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 26))
er9300 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 27))
er9400 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 1, 88, 28))
mib2ext = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 2))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 2, 1))
ip = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 2, 4))
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 2, 11))
swUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 2, 40))
scaProt = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 4))
reboot = MibScalar((1, 3, 6, 1, 4, 1, 208, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("resetNow", 1), ("resetIdle", 2), ("reset1hour", 3), ("reset8hours", 4), ("reloadTerminfo", 5), ("reloadProfile", 6), ("reloadParm", 7), ("saveParm", 8), ("reloadAnnounce", 9), ("rebootAndLoadFlash", 10), ("resetWarm", 11), ("reloadDefaultKeepIP", 12), ("reloadDefault", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reboot.setStatus('mandatory')
ram = MibScalar((1, 3, 6, 1, 4, 1, 208, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ram.setStatus('mandatory')
idTable = MibTable((1, 3, 6, 1, 4, 1, 208, 2, 1, 3), )
if mibBuilder.loadTexts: idTable.setStatus('mandatory')
idEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 2, 1, 3, 1), ).setIndexNames((0, "SCANET-MIB", "brdNumber"))
if mibBuilder.loadTexts: idEntry.setStatus('mandatory')
brdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brdNumber.setStatus('mandatory')
hwId = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 2, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwId.setStatus('mandatory')
fwId = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 2, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwId.setStatus('mandatory')
swTable = MibTable((1, 3, 6, 1, 4, 1, 208, 2, 1, 4), )
if mibBuilder.loadTexts: swTable.setStatus('mandatory')
swEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 2, 1, 4, 1), )
if mibBuilder.loadTexts: swEntry.setStatus('mandatory')
swName = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 2, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swName.setStatus('mandatory')
errorLogNumber = MibScalar((1, 3, 6, 1, 4, 1, 208, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorLogNumber.setStatus('mandatory')
systemLogNumber = MibScalar((1, 3, 6, 1, 4, 1, 208, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogNumber.setStatus('mandatory')
autAccessTable = MibTable((1, 3, 6, 1, 4, 1, 208, 2, 1, 7), )
if mibBuilder.loadTexts: autAccessTable.setStatus('mandatory')
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 2, 1, 7, 1) + (1000, ), Integer32())
autAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 2, 1, 7, 1), ).setIndexNames((0, "SCANET-MIB", "pysmiFakeCol1000"))
if mibBuilder.loadTexts: autAccessEntry.setStatus('mandatory')
autAccessIP = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 2, 1, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autAccessIP.setStatus('mandatory')
autAccessTime = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 2, 1, 7, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autAccessTime.setStatus('mandatory')
timeOfDay = MibScalar((1, 3, 6, 1, 4, 1, 208, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeOfDay.setStatus('mandatory')
configurationLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 208, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationLastChanged.setStatus('mandatory')
configurationLastSaved = MibScalar((1, 3, 6, 1, 4, 1, 208, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configurationLastSaved.setStatus('mandatory')
unsavedConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 208, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unsavedConfiguration.setStatus('mandatory')
ipTable = MibTable((1, 3, 6, 1, 4, 1, 208, 2, 4, 1), )
if mibBuilder.loadTexts: ipTable.setStatus('mandatory')
ipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 2, 4, 1, 1), ).setIndexNames((0, "SCANET-MIB", "ipIndex"), (0, "SNMPv2-SMI", "IpAddress"))
if mibBuilder.loadTexts: ipEntry.setStatus('mandatory')
ipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIndex.setStatus('mandatory')
ipAddrAndMask = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 2, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddrAndMask.setStatus('mandatory')
filter = MibScalar((1, 3, 6, 1, 4, 1, 208, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filter.setStatus('obsolete')
print = MibScalar((1, 3, 6, 1, 4, 1, 208, 2, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: print.setStatus('mandatory')
cause = MibScalar((1, 3, 6, 1, 4, 1, 208, 2, 11, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cause.setStatus('mandatory')
solution = MibScalar((1, 3, 6, 1, 4, 1, 208, 2, 11, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solution.setStatus('mandatory')
autMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 208, 2, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autMaxEntries.setStatus('mandatory')
autTable = MibTable((1, 3, 6, 1, 4, 1, 208, 2, 11, 6), )
if mibBuilder.loadTexts: autTable.setStatus('mandatory')
autEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 2, 11, 6, 1), ).setIndexNames((0, "SCANET-MIB", "autNumber"))
if mibBuilder.loadTexts: autEntry.setStatus('mandatory')
autNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 2, 11, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autNumber.setStatus('mandatory')
autIpAndAccessAndCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 2, 11, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autIpAndAccessAndCommunity.setStatus('mandatory')
autDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 2, 11, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autDelete.setStatus('mandatory')
trapMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 208, 2, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMaxEntries.setStatus('mandatory')
trapTable = MibTable((1, 3, 6, 1, 4, 1, 208, 2, 11, 8), )
if mibBuilder.loadTexts: trapTable.setStatus('mandatory')
trapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 2, 11, 8, 1), ).setIndexNames((0, "SCANET-MIB", "trapNumber"))
if mibBuilder.loadTexts: trapEntry.setStatus('mandatory')
trapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 2, 11, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapNumber.setStatus('mandatory')
trapIpAndCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 2, 11, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIpAndCommunity.setStatus('mandatory')
trapDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 2, 11, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDelete.setStatus('mandatory')
swInfoTable = MibTable((1, 3, 6, 1, 4, 1, 208, 2, 40, 1), )
if mibBuilder.loadTexts: swInfoTable.setStatus('mandatory')
pysmiFakeCol1001 = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 2, 40, 1, 1) + (1001, ), Integer32())
swInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 2, 40, 1, 1), ).setIndexNames((0, "SCANET-MIB", "pysmiFakeCol1001"))
if mibBuilder.loadTexts: swInfoEntry.setStatus('mandatory')
swStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 2, 40, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unavailable", 1), ("approved", 2), ("experimental", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swStatus.setStatus('mandatory')
swName2 = MibScalar((1, 3, 6, 1, 4, 1, 208, 2, 40, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swName2.setStatus('mandatory')
swLoadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 2, 40, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLoadTime.setStatus('mandatory')
swTftpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 2, 40, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTftpIp.setStatus('mandatory')
swTftpIpAndSwName = MibScalar((1, 3, 6, 1, 4, 1, 208, 2, 40, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTftpIpAndSwName.setStatus('mandatory')
swUpdateResult = MibScalar((1, 3, 6, 1, 4, 1, 208, 2, 40, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noError", 1), ("swUpdateRunning", 2), ("errorUnknown", 3), ("errorNoTftpServer", 4), ("errorNoSoftware", 5), ("errorSoftwareMismatch", 6), ("errorMoreFlash", 7), ("errorMoreRAM", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUpdateResult.setStatus('mandatory')
mibBuilder.exportSymbols("SCANET-MIB", mr_1024=mr_1024, mr_1140=mr_1140, ram=ram, autNumber=autNumber, mr_1011=mr_1011, reboot=reboot, mr_1110=mr_1110, in_40xx=in_40xx, mr_1023=mr_1023, snmp=snmp, idEntry=idEntry, autAccessTime=autAccessTime, system=system, mr_1055=mr_1055, mr_1120=mr_1120, mr_1111=mr_1111, trapTable=trapTable, idTable=idTable, autAccessTable=autAccessTable, mr_1020=mr_1020, mr_1013=mr_1013, swInfoTable=swInfoTable, scanet=scanet, mr_1050=mr_1050, autAccessEntry=autAccessEntry, cs_21xx=cs_21xx, trapEntry=trapEntry, mr_1123=mr_1123, es_1520=es_1520, ipEntry=ipEntry, er9400=er9400, mr_1051=mr_1051, systemLogNumber=systemLogNumber, trapIpAndCommunity=trapIpAndCommunity, mr_1151=mr_1151, er9100=er9100, mr_1014=mr_1014, swEntry=swEntry, cs_72xx=cs_72xx, autTable=autTable, autIpAndAccessAndCommunity=autIpAndAccessAndCommunity, unsavedConfiguration=unsavedConfiguration, print=print, trapDelete=trapDelete, er9200=er9200, swTftpIpAndSwName=swTftpIpAndSwName, es10t24plus=es10t24plus, swStatus=swStatus, ct_30xx=ct_30xx, swUpdate=swUpdate, mr_1114=mr_1114, es_1851=es_1851, autAccessIP=autAccessIP, mr_1113=mr_1113, solution=solution, mib2ext=mib2ext, errorLogNumber=errorLogNumber, filter=filter, ethernetSwitch=ethernetSwitch, matchboxRouter=matchboxRouter, ts_2104=ts_2104, swUpdateResult=swUpdateResult, cause=cause, autMaxEntries=autMaxEntries, autEntry=autEntry, configurationLastChanged=configurationLastChanged, es10t24=es10t24, mr_1121=mr_1121, ipAddrAndMask=ipAddrAndMask, cs_14xx=cs_14xx, pysmiFakeCol1000=pysmiFakeCol1000, ip=ip, swTable=swTable, es_1810=es_1810, es_1850=es_1850, autDelete=autDelete, es100fx=es100fx, swName=swName, swLoadTime=swLoadTime, ipTable=ipTable, ct_40xx=ct_40xx, mr_1124=mr_1124, swInfoEntry=swInfoEntry, er9300=er9300, cs_76xx=cs_76xx, products=products, mr_1021=mr_1021, swTftpIp=swTftpIp, es_1820=es_1820, mr_1155=mr_1155, trapMaxEntries=trapMaxEntries, timeOfDay=timeOfDay, mr_1150=mr_1150, brdNumber=brdNumber, mfts=mfts, fwId=fwId, trapNumber=trapNumber, swName2=swName2, configurationLastSaved=configurationLastSaved, mr_1040=mr_1040, scaProt=scaProt, ipIndex=ipIndex, pysmiFakeCol1001=pysmiFakeCol1001, mr_1010=mr_1010, hwId=hwId, cs_3300=cs_3300)
