#
# PySNMP MIB module CISCO-MPLS-TE-STD-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MPLS-TE-STD-EXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:51:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
mplsTunnelARHopListIndex, mplsTunnelInstance, mplsTunnelName, mplsTunnelIngressLSRId, mplsTunnelEgressLSRId, mplsTunnelIndex, mplsTunnelOperStatus, mplsTunnelAdminStatus = mibBuilder.importSymbols("MPLS-TE-STD-MIB", "mplsTunnelARHopListIndex", "mplsTunnelInstance", "mplsTunnelName", "mplsTunnelIngressLSRId", "mplsTunnelEgressLSRId", "mplsTunnelIndex", "mplsTunnelOperStatus", "mplsTunnelAdminStatus")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, Gauge32, Unsigned32, IpAddress, iso, Counter64, Integer32, TimeTicks, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "Gauge32", "Unsigned32", "IpAddress", "iso", "Counter64", "Integer32", "TimeTicks", "NotificationType", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cmplsTeStdExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 738))
cmplsTeStdExtMIB.setRevisions(('2016-08-05 00:00', '2012-02-22 00:00', '2011-10-04 00:00', '2011-01-07 00:00', '2010-10-20 00:00', '2010-09-23 00:00', '2010-05-27 00:00',))
if mibBuilder.loadTexts: cmplsTeStdExtMIB.setLastUpdated('201608050000Z')
if mibBuilder.loadTexts: cmplsTeStdExtMIB.setOrganization('Cisco Systems, Inc.')
class CmplsTeTunnelDiag(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unknonw", 1), ("bfdSessionBringupTimeout", 2))

class CmplsTunnelBWPercent(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100)

cmplsTeStdExtMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 738, 0))
cmplsTeStdExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 738, 1))
cmplsTeStdExtMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 738, 2))
cmplsTunnelAutoBWTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1), )
if mibBuilder.loadTexts: cmplsTunnelAutoBWTable.setStatus('current')
cmplsTunnelAutoBWEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelIndex"), (0, "MPLS-TE-STD-MIB", "mplsTunnelInstance"), (0, "MPLS-TE-STD-MIB", "mplsTunnelIngressLSRId"), (0, "MPLS-TE-STD-MIB", "mplsTunnelEgressLSRId"))
if mibBuilder.loadTexts: cmplsTunnelAutoBWEntry.setStatus('current')
cmplsTunnelAutoBWStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("autoBWDisabled", 1), ("autoBWEnabled", 2), ("autoBWCollectOnlyMode", 3))).clone('autoBWDisabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsTunnelAutoBWStatus.setStatus('current')
cmplsTunnelAutoBWMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 2), Unsigned32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmplsTunnelAutoBWMin.setStatus('current')
cmplsTunnelAutoBWMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 3), Unsigned32().clone(100)).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmplsTunnelAutoBWMax.setStatus('current')
cmplsTunnelAutoBWAdjThreshPercs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 4), CmplsTunnelBWPercent().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmplsTunnelAutoBWAdjThreshPercs.setStatus('current')
cmplsTunnelAutoBWAdjThreshBW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 5), Unsigned32().clone(10)).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmplsTunnelAutoBWAdjThreshBW.setStatus('current')
cmplsTunnelAutoBWOverflowThreshPercs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 6), CmplsTunnelBWPercent().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmplsTunnelAutoBWOverflowThreshPercs.setStatus('current')
cmplsTunnelAutoBWOverflowThreshBW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 7), Unsigned32().clone(10)).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmplsTunnelAutoBWOverflowThreshBW.setStatus('current')
cmplsTunnelAutoBWOverflowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 8), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmplsTunnelAutoBWOverflowLimit.setStatus('current')
cmplsTunnelAutoBWUnderflowThreshPercs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 9), CmplsTunnelBWPercent().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmplsTunnelAutoBWUnderflowThreshPercs.setStatus('current')
cmplsTunnelAutoBWUnderflowThreshBW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 10), Unsigned32().clone(1)).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmplsTunnelAutoBWUnderflowThreshBW.setStatus('current')
cmplsTunnelAutoBWUnderflowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 11), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmplsTunnelAutoBWUnderflowLimit.setStatus('current')
cmplsTunnelAutoBWApplicationFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 12), Unsigned32().clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmplsTunnelAutoBWApplicationFrequency.setStatus('current')
cmplsTunnelAutoBWCollectionFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 13), Unsigned32().clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmplsTunnelAutoBWCollectionFrequency.setStatus('current')
cmplsTunnelAutoBWLastAppliedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 14), Unsigned32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsTunnelAutoBWLastAppliedBW.setStatus('current')
cmplsTunnelAutoBWApplications = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsTunnelAutoBWApplications.setStatus('current')
cmplsTunnelAutoBWLastApplicationTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("applicationNone", 1), ("applicationPeriodic", 2), ("applicationManual", 3), ("applicationOverflow", 4), ("applicationUnderflow", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsTunnelAutoBWLastApplicationTrigger.setStatus('current')
cmplsTunnelAutoBWOverflowApplications = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsTunnelAutoBWOverflowApplications.setStatus('current')
cmplsTunnelAutoBWOverflowOccurrences = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsTunnelAutoBWOverflowOccurrences.setStatus('current')
cmplsTunnelAutoBWUnderflowApplications = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsTunnelAutoBWUnderflowApplications.setStatus('current')
cmplsTunnelAutoBWUnderflowOccurrences = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsTunnelAutoBWUnderflowOccurrences.setStatus('current')
cmplsTunnelAutoBWUnderflowHighestBW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 21), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsTunnelAutoBWUnderflowHighestBW.setStatus('current')
cmplsTunnelAutoBWRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 22), Unsigned32()).setUnits('kpbs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsTunnelAutoBWRequested.setStatus('current')
cmplsTunnelAutoBWSignaled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 23), Unsigned32()).setUnits('kpbs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsTunnelAutoBWSignaled.setStatus('current')
cmplsTunnelAutoBWCollectOnlyRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 24), Unsigned32()).setUnits('kpbs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsTunnelAutoBWCollectOnlyRequested.setStatus('current')
cmplsTunnelAutoBWHighest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 25), Unsigned32()).setUnits('kpbs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsTunnelAutoBWHighest.setStatus('current')
cmplsTunnelAutoBWCollectedSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsTunnelAutoBWCollectedSamples.setStatus('current')
cmplsTunnelAutoBWJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsTunnelAutoBWJitter.setStatus('current')
cmplsTunnelAutoBWAppRejectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("applicationAllowed", 1), ("autoBWDisabled", 2), ("tunnelIsDown", 3), ("tunnelIsFRR", 4), ("tunnelIsBackup", 5), ("tunnelIsLockDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsTunnelAutoBWAppRejectReason.setStatus('current')
cmplsTeTunnelReasonTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 2), )
if mibBuilder.loadTexts: cmplsTeTunnelReasonTable.setStatus('current')
cmplsTeTunnelReasonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 2, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelIndex"), (0, "MPLS-TE-STD-MIB", "mplsTunnelInstance"), (0, "MPLS-TE-STD-MIB", "mplsTunnelIngressLSRId"), (0, "MPLS-TE-STD-MIB", "mplsTunnelEgressLSRId"))
if mibBuilder.loadTexts: cmplsTeTunnelReasonEntry.setStatus('current')
cmplsTunnelReoptReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("unknown", 1), ("periodicTimerExpiry", 2), ("bandwidthCLIChange", 3), ("bandwidthOverflow", 4), ("bandwidthUnderflow", 5), ("bandwidthAdjustment", 6), ("fastReRoute", 7), ("cliRequest", 8), ("metricTypeChange", 9), ("preferredPathExists", 10), ("poSwitchoverTrigger", 11), ("bandwidthChange", 12), ("autoBandwidth", 13), ("remergeError", 14), ("dueToMaximumMetric", 15), ("pathProtectionSwitchover", 16), ("iEPEnableReoptimization", 17), ("affinityPathVerificationFail", 18), ("softPreemption", 19), ("preferredTreeExists", 20), ("costLimitPathVerificationFail", 21), ("linkupReopt", 22), ("iEPChange", 23), ("poChange", 24), ("destChange", 25), ("bfdSessionTypeChange", 26))).clone('unknown')).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmplsTunnelReoptReason.setStatus('current')
cmplsTunnelInsuffBWFailedOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("failedToSetup", 2), ("failedToReoptimize", 3))).clone('unknown')).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmplsTunnelInsuffBWFailedOperation.setStatus('current')
cmplsTunnelPreemptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("hardPreemption", 2), ("softPreemption", 3), ("frrSoftPreemption", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmplsTunnelPreemptionType.setStatus('current')
cmplsTunnelPreemptionLinkAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 2, 1, 4), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmplsTunnelPreemptionLinkAddrType.setStatus('current')
cmplsTunnelPreemptionLinkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 2, 1, 5), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmplsTunnelPreemptionLinkAddr.setStatus('current')
cmplsTunnelReRoutePendingClearReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("reoptimized", 2), ("reinstated", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmplsTunnelReRoutePendingClearReason.setStatus('current')
cmplsTeTunnelFailReasonTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 3), )
if mibBuilder.loadTexts: cmplsTeTunnelFailReasonTable.setStatus('current')
cmplsTeTunnelFailReasonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 3, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelIndex"), (0, "MPLS-TE-STD-MIB", "mplsTunnelInstance"), (0, "MPLS-TE-STD-MIB", "mplsTunnelIngressLSRId"), (0, "MPLS-TE-STD-MIB", "mplsTunnelEgressLSRId"), (0, "MPLS-TE-STD-MIB", "mplsTunnelARHopListIndex"))
if mibBuilder.loadTexts: cmplsTeTunnelFailReasonEntry.setStatus('current')
cmplsTeFailReasonType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("bfd", 2), ("generalTe", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsTeFailReasonType.setStatus('current')
cmplsTeFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmplsTeFailReason.setStatus('deprecated')
cmplsTeFailReasonRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 21))).clone(namedValues=NamedValues(("noDiagnostic", 0), ("controlDetectionTimeExpired", 1), ("echoFunctionFailed", 2), ("neighborSignaledSessionDown", 3), ("forwardingPlaneReset", 4), ("pathDown", 5), ("concatenatedPathDown", 6), ("administrativelyDown", 7), ("reverseConcatenatedPathDown", 8), ("unknown", 9), ("bfdSessionBringupTimeout", 21)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmplsTeFailReasonRev.setStatus('current')
cmplsTunnelLoadshareTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 4), )
if mibBuilder.loadTexts: cmplsTunnelLoadshareTable.setStatus('current')
cmplsTunnelLoadshareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 4, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelIndex"), (0, "MPLS-TE-STD-MIB", "mplsTunnelInstance"), (0, "MPLS-TE-STD-MIB", "mplsTunnelIngressLSRId"), (0, "MPLS-TE-STD-MIB", "mplsTunnelEgressLSRId"))
if mibBuilder.loadTexts: cmplsTunnelLoadshareEntry.setStatus('current')
cmplsTunnelLoadShare = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmplsTunnelLoadShare.setStatus('current')
cmplsTeStdExtMIBObjectsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 5))
cmplsTeLoadshareBalance = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 738, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("equal", 0), ("unequal", 1))).clone('equal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmplsTeLoadshareBalance.setStatus('current')
cmplsTunnelPreempt = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 738, 0, 1)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelAdminStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelOperStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelName"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelPreemptionType"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelPreemptionLinkAddrType"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelPreemptionLinkAddr"))
if mibBuilder.loadTexts: cmplsTunnelPreempt.setStatus('current')
cmplsTunnelInsuffBW = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 738, 0, 2)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelAdminStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelOperStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelName"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelInsuffBWFailedOperation"))
if mibBuilder.loadTexts: cmplsTunnelInsuffBW.setStatus('current')
cmplsTunnelReRoutePending = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 738, 0, 3)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelAdminStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelOperStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelName"))
if mibBuilder.loadTexts: cmplsTunnelReRoutePending.setStatus('current')
cmplsTunnelReRoutePendingClear = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 738, 0, 4)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelAdminStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelOperStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelName"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelReRoutePendingClearReason"))
if mibBuilder.loadTexts: cmplsTunnelReRoutePendingClear.setStatus('current')
cmplsTunnelBringupFail = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 738, 0, 5)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelName"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeFailReasonType"))
if mibBuilder.loadTexts: cmplsTunnelBringupFail.setStatus('current')
cmplsTeStdExtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 738, 2, 1))
cmplsTeStdExtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 738, 2, 2))
cmplsTeStdExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 738, 2, 1, 1)).setObjects(("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBAutoBWOptionalGroup"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBAutoBWObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsTeStdExtMIBCompliance = cmplsTeStdExtMIBCompliance.setStatus('deprecated')
cmplsTeStdExtMIBCompliancesRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 738, 2, 1, 2)).setObjects(("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBAutoBWOptionalGroup"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBAutoBWObjectGroup"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBTrapGroup"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBTrapObjectsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsTeStdExtMIBCompliancesRev1 = cmplsTeStdExtMIBCompliancesRev1.setStatus('deprecated')
cmplsTeStdExtMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 738, 2, 1, 3)).setObjects(("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBAutoBWOptionalGroup"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBAutoBWObjectGroup"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBTrapGroup"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBTrapObjectsGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsTeStdExtMIBComplianceRev2 = cmplsTeStdExtMIBComplianceRev2.setStatus('deprecated')
cmplsTeStdExtMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 738, 2, 1, 4)).setObjects(("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBAutoBWOptionalGroup"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBAutoBWObjectGroup"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBTrapGroup"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBTrapObjectsGroupRev1"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBFailTeTrapGroup"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBFailTeTrapObjectsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsTeStdExtMIBComplianceRev3 = cmplsTeStdExtMIBComplianceRev3.setStatus('deprecated')
cmplsTeStdExtMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 738, 2, 1, 5)).setObjects(("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBAutoBWOptionalGroup"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBAutoBWObjectGroup"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBTrapGroup"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBTrapObjectsGroupRev1"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBFailTeTrapGroup"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBFailTeTrapObjectsGroupRev1"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeStdExtMIBLoadShareObjectsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsTeStdExtMIBComplianceRev4 = cmplsTeStdExtMIBComplianceRev4.setStatus('current')
cmplsTeStdExtMIBAutoBWObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 738, 2, 2, 1)).setObjects(("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWStatus"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWMin"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWMax"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWAdjThreshPercs"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWAdjThreshBW"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWApplicationFrequency"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWCollectionFrequency"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWLastAppliedBW"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWApplications"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWLastApplicationTrigger"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWOverflowApplications"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWOverflowOccurrences"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWUnderflowApplications"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWUnderflowOccurrences"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWUnderflowHighestBW"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWRequested"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWSignaled"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWCollectOnlyRequested"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWHighest"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWCollectedSamples"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWAppRejectReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsTeStdExtMIBAutoBWObjectGroup = cmplsTeStdExtMIBAutoBWObjectGroup.setStatus('current')
cmplsTeStdExtMIBAutoBWOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 738, 2, 2, 2)).setObjects(("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWOverflowThreshPercs"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWOverflowThreshBW"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWOverflowLimit"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWUnderflowThreshPercs"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWUnderflowThreshBW"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWUnderflowLimit"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelAutoBWJitter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsTeStdExtMIBAutoBWOptionalGroup = cmplsTeStdExtMIBAutoBWOptionalGroup.setStatus('current')
cmplsTeStdExtMIBTrapObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 738, 2, 2, 3)).setObjects(("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelReoptReason"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelInsuffBWFailedOperation"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelPreemptionType"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelPreemptionLinkAddrType"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelPreemptionLinkAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsTeStdExtMIBTrapObjectsGroup = cmplsTeStdExtMIBTrapObjectsGroup.setStatus('deprecated')
cmplsTeStdExtMIBTrapObjectsGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 738, 2, 2, 4)).setObjects(("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelReoptReason"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelInsuffBWFailedOperation"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelPreemptionType"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelPreemptionLinkAddrType"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelPreemptionLinkAddr"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelReRoutePendingClearReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsTeStdExtMIBTrapObjectsGroupRev1 = cmplsTeStdExtMIBTrapObjectsGroupRev1.setStatus('current')
cmplsTeStdExtMIBTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 738, 2, 2, 5)).setObjects(("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelPreempt"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelInsuffBW"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelReRoutePending"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelReRoutePendingClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsTeStdExtMIBTrapGroup = cmplsTeStdExtMIBTrapGroup.setStatus('current')
cmplsTeStdExtMIBFailTeTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 738, 2, 2, 6)).setObjects(("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelBringupFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsTeStdExtMIBFailTeTrapGroup = cmplsTeStdExtMIBFailTeTrapGroup.setStatus('current')
cmplsTeStdExtMIBFailTeTrapObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 738, 2, 2, 7)).setObjects(("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeFailReasonType"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeFailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsTeStdExtMIBFailTeTrapObjectsGroup = cmplsTeStdExtMIBFailTeTrapObjectsGroup.setStatus('deprecated')
cmplsTeStdExtMIBLoadShareObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 738, 2, 2, 8)).setObjects(("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTunnelLoadShare"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeLoadshareBalance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsTeStdExtMIBLoadShareObjectsGroup = cmplsTeStdExtMIBLoadShareObjectsGroup.setStatus('current')
cmplsTeStdExtMIBFailTeTrapObjectsGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 738, 2, 2, 9)).setObjects(("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeFailReasonType"), ("CISCO-MPLS-TE-STD-EXT-MIB", "cmplsTeFailReasonRev"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmplsTeStdExtMIBFailTeTrapObjectsGroupRev1 = cmplsTeStdExtMIBFailTeTrapObjectsGroupRev1.setStatus('current')
mibBuilder.exportSymbols("CISCO-MPLS-TE-STD-EXT-MIB", cmplsTunnelPreempt=cmplsTunnelPreempt, cmplsTunnelAutoBWLastApplicationTrigger=cmplsTunnelAutoBWLastApplicationTrigger, cmplsTunnelLoadshareEntry=cmplsTunnelLoadshareEntry, cmplsTeStdExtMIBTrapObjectsGroup=cmplsTeStdExtMIBTrapObjectsGroup, cmplsTunnelReRoutePendingClear=cmplsTunnelReRoutePendingClear, cmplsTeStdExtMIBCompliance=cmplsTeStdExtMIBCompliance, cmplsTunnelAutoBWEntry=cmplsTunnelAutoBWEntry, cmplsTunnelAutoBWSignaled=cmplsTunnelAutoBWSignaled, cmplsTunnelAutoBWMin=cmplsTunnelAutoBWMin, cmplsTunnelAutoBWOverflowApplications=cmplsTunnelAutoBWOverflowApplications, cmplsTunnelAutoBWHighest=cmplsTunnelAutoBWHighest, cmplsTeTunnelReasonEntry=cmplsTeTunnelReasonEntry, cmplsTeStdExtMIBFailTeTrapObjectsGroup=cmplsTeStdExtMIBFailTeTrapObjectsGroup, cmplsTunnelAutoBWAppRejectReason=cmplsTunnelAutoBWAppRejectReason, cmplsTunnelAutoBWCollectOnlyRequested=cmplsTunnelAutoBWCollectOnlyRequested, cmplsTunnelAutoBWRequested=cmplsTunnelAutoBWRequested, cmplsTeFailReasonRev=cmplsTeFailReasonRev, cmplsTunnelAutoBWOverflowThreshBW=cmplsTunnelAutoBWOverflowThreshBW, cmplsTeStdExtMIBAutoBWObjectGroup=cmplsTeStdExtMIBAutoBWObjectGroup, cmplsTunnelAutoBWUnderflowThreshPercs=cmplsTunnelAutoBWUnderflowThreshPercs, cmplsTeStdExtMIBAutoBWOptionalGroup=cmplsTeStdExtMIBAutoBWOptionalGroup, cmplsTeStdExtMIBFailTeTrapObjectsGroupRev1=cmplsTeStdExtMIBFailTeTrapObjectsGroupRev1, cmplsTeStdExtMIBComplianceRev4=cmplsTeStdExtMIBComplianceRev4, cmplsTunnelAutoBWOverflowOccurrences=cmplsTunnelAutoBWOverflowOccurrences, cmplsTeStdExtMIBNotifs=cmplsTeStdExtMIBNotifs, cmplsTunnelAutoBWApplicationFrequency=cmplsTunnelAutoBWApplicationFrequency, cmplsTunnelInsuffBWFailedOperation=cmplsTunnelInsuffBWFailedOperation, cmplsTunnelReRoutePending=cmplsTunnelReRoutePending, cmplsTeTunnelFailReasonTable=cmplsTeTunnelFailReasonTable, cmplsTeStdExtMIBFailTeTrapGroup=cmplsTeStdExtMIBFailTeTrapGroup, cmplsTunnelAutoBWOverflowLimit=cmplsTunnelAutoBWOverflowLimit, cmplsTeStdExtMIBLoadShareObjectsGroup=cmplsTeStdExtMIBLoadShareObjectsGroup, cmplsTunnelLoadShare=cmplsTunnelLoadShare, cmplsTunnelAutoBWMax=cmplsTunnelAutoBWMax, PYSNMP_MODULE_ID=cmplsTeStdExtMIB, cmplsTunnelReoptReason=cmplsTunnelReoptReason, cmplsTunnelPreemptionLinkAddr=cmplsTunnelPreemptionLinkAddr, cmplsTeTunnelFailReasonEntry=cmplsTeTunnelFailReasonEntry, cmplsTunnelAutoBWStatus=cmplsTunnelAutoBWStatus, cmplsTeStdExtMIBConform=cmplsTeStdExtMIBConform, cmplsTunnelAutoBWCollectionFrequency=cmplsTunnelAutoBWCollectionFrequency, cmplsTunnelAutoBWApplications=cmplsTunnelAutoBWApplications, cmplsTunnelInsuffBW=cmplsTunnelInsuffBW, cmplsTeStdExtMIB=cmplsTeStdExtMIB, cmplsTunnelAutoBWTable=cmplsTunnelAutoBWTable, cmplsTunnelAutoBWUnderflowOccurrences=cmplsTunnelAutoBWUnderflowOccurrences, cmplsTunnelAutoBWOverflowThreshPercs=cmplsTunnelAutoBWOverflowThreshPercs, cmplsTeStdExtMIBCompliances=cmplsTeStdExtMIBCompliances, cmplsTunnelAutoBWLastAppliedBW=cmplsTunnelAutoBWLastAppliedBW, cmplsTunnelPreemptionType=cmplsTunnelPreemptionType, cmplsTeFailReason=cmplsTeFailReason, cmplsTeLoadshareBalance=cmplsTeLoadshareBalance, cmplsTunnelLoadshareTable=cmplsTunnelLoadshareTable, cmplsTunnelAutoBWAdjThreshBW=cmplsTunnelAutoBWAdjThreshBW, cmplsTunnelAutoBWUnderflowThreshBW=cmplsTunnelAutoBWUnderflowThreshBW, cmplsTunnelBringupFail=cmplsTunnelBringupFail, cmplsTeStdExtMIBTrapGroup=cmplsTeStdExtMIBTrapGroup, cmplsTeStdExtMIBObjects=cmplsTeStdExtMIBObjects, cmplsTunnelAutoBWUnderflowApplications=cmplsTunnelAutoBWUnderflowApplications, cmplsTunnelAutoBWUnderflowHighestBW=cmplsTunnelAutoBWUnderflowHighestBW, cmplsTeFailReasonType=cmplsTeFailReasonType, cmplsTeStdExtMIBObjectsGlobal=cmplsTeStdExtMIBObjectsGlobal, CmplsTeTunnelDiag=CmplsTeTunnelDiag, cmplsTunnelAutoBWAdjThreshPercs=cmplsTunnelAutoBWAdjThreshPercs, cmplsTunnelAutoBWJitter=cmplsTunnelAutoBWJitter, cmplsTunnelPreemptionLinkAddrType=cmplsTunnelPreemptionLinkAddrType, cmplsTunnelReRoutePendingClearReason=cmplsTunnelReRoutePendingClearReason, cmplsTeStdExtMIBCompliancesRev1=cmplsTeStdExtMIBCompliancesRev1, cmplsTunnelAutoBWCollectedSamples=cmplsTunnelAutoBWCollectedSamples, cmplsTeStdExtMIBComplianceRev3=cmplsTeStdExtMIBComplianceRev3, cmplsTeTunnelReasonTable=cmplsTeTunnelReasonTable, cmplsTeStdExtMIBTrapObjectsGroupRev1=cmplsTeStdExtMIBTrapObjectsGroupRev1, cmplsTunnelAutoBWUnderflowLimit=cmplsTunnelAutoBWUnderflowLimit, cmplsTeStdExtMIBGroups=cmplsTeStdExtMIBGroups, CmplsTunnelBWPercent=CmplsTunnelBWPercent, cmplsTeStdExtMIBComplianceRev2=cmplsTeStdExtMIBComplianceRev2)
