#
# PySNMP MIB module Hub-rptr-prvt (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/tin/Dev/mibs.snmplabs.com/asn1/Hub-rptr-prvt
# Produced by pysmi-0.3.4 at Fri Jan 31 21:31:36 2020
# On host bier platform Linux version 5.4.0-3-amd64 by user tin
# Using Python version 3.7.6 (default, Jan 19 2020, 22:34:52) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
rptrPortAdminStatus, rptrPortIndex, rptrPortGroupIndex = mibBuilder.importSymbols("SNMP-REPEATER-MIB", "rptrPortAdminStatus", "rptrPortIndex", "rptrPortGroupIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Counter32, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, internet, Counter64, NotificationType, NotificationType, ModuleIdentity, Unsigned32, Integer32, Gauge32, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "internet", "Counter64", "NotificationType", "NotificationType", "ModuleIdentity", "Unsigned32", "Integer32", "Gauge32", "IpAddress", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
fibronics = MibIdentifier((1, 3, 6, 1, 4, 1, 22))
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3))
traprun = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 1))
traperm = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 2))
trapvar = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 3))
fm800 = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51))
fmsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 1))
fmslot = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 2))
fmlu = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 3))
fmdiag = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 5))
fmdebug = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 6))
fmsystemrun = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 1, 1))
fmsystemperm = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 1, 2))
fmethrptr = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 11))
rptrinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 11, 1))
rptrgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 11, 2))
rptrgroupport = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 11, 3))
rptrgroupmodule = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 11, 4))
rptrRxDscrptrOverFlow = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRxDscrptrOverFlow.setStatus('mandatory')
rptrTxDscrptrOverFlow = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrTxDscrptrOverFlow.setStatus('mandatory')
rptrMemoryErrors = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMemoryErrors.setStatus('mandatory')
rptrJabberCounter = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrJabberCounter.setStatus('mandatory')
rptrNMSConnectionPort = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrNMSConnectionPort.setStatus('mandatory')
rptrEDBPort = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrEDBPort.setStatus('mandatory')
rptrfmGroupTable = MibTable((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1), )
if mibBuilder.loadTexts: rptrfmGroupTable.setStatus('mandatory')
rptrfmGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1), ).setIndexNames((0, "Hub-rptr-prvt", "rptrGroupIndex"))
if mibBuilder.loadTexts: rptrfmGroupEntry.setStatus('mandatory')
rptrGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupIndex.setStatus('mandatory')
rptrGroupGlobalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupGlobalStatus.setStatus('mandatory')
rptrGroupPrevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupPrevStatus.setStatus('mandatory')
rptrGroupGlobalError = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fault-exist", 1), ("no-fault-exist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupGlobalError.setStatus('mandatory')
rptrGroupJabberError = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fault-exist", 1), ("no-fault-exist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupJabberError.setStatus('mandatory')
rptrGroupCpuError = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fault-exist", 1), ("no-fault-exist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupCpuError.setStatus('mandatory')
rptrGroupSQE = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fault-exist", 1), ("no-fault-exist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupSQE.setStatus('mandatory')
rptrGroupRepeaterBlockError = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fault-exist", 1), ("no-fault-exist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupRepeaterBlockError.setStatus('mandatory')
rptrGroupAutoPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fault-exist", 1), ("no-fault-exist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupAutoPartition.setStatus('mandatory')
rptrGroupDetachStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("detach-exist", 1), ("no-detach-exist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupDetachStatus.setStatus('mandatory')
rptrGroupGlobalCommandCode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("attach-all-ports", 1), ("detach-all-ports", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrGroupGlobalCommandCode.setStatus('mandatory')
rptrGroupTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mask-all", 1), ("mask-fatal", 2), ("mask-warn", 3), ("mask-info", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrGroupTrapMask.setStatus('mandatory')
rptrGroupLinkSelectHead1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("toggle-link-select", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrGroupLinkSelectHead1.setStatus('mandatory')
rptrGroupBackupHead1State = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("normal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrGroupBackupHead1State.setStatus('mandatory')
rptrGroupTailState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrGroupTailState.setStatus('deprecated')
rptrGroupMaxModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupMaxModuleNumber.setStatus('mandatory')
rptrGroupPortTable = MibTable((1, 3, 6, 1, 4, 1, 22, 51, 11, 3, 1), )
if mibBuilder.loadTexts: rptrGroupPortTable.setStatus('mandatory')
rptrGroupPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 51, 11, 3, 1, 1), ).setMaxAccess("readwrite").setIndexNames((0, "Hub-rptr-prvt", "rptrGroupPIndex"), (0, "Hub-rptr-prvt", "rptrGroupPortIndex"))
if mibBuilder.loadTexts: rptrGroupPortEntry.setStatus('mandatory')
rptrGroupPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupPIndex.setStatus('mandatory')
rptrGroupPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupPortIndex.setStatus('mandatory')
rptrGroupPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("link-ok", 1), ("link-not-ok", 2), ("link-not-applicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupPortLinkStatus.setStatus('mandatory')
rptrGroupPortRcvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("receive", 1), ("no-receive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupPortRcvStatus.setStatus('mandatory')
rptrGroupPortLinkFaultCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupPortLinkFaultCounter.setStatus('mandatory')
rptrGroupPortAutoPartitionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupPortAutoPartitionCount.setStatus('mandatory')
rptrGroupPortAutoPartitionType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("collision-limit", 1), ("collision-length-limit", 2), ("loopback-failure", 3), ("cpu-forced-reconnection", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupPortAutoPartitionType.setStatus('mandatory')
rptrGroupModuleTable = MibTable((1, 3, 6, 1, 4, 1, 22, 51, 11, 4, 1), )
if mibBuilder.loadTexts: rptrGroupModuleTable.setStatus('mandatory')
rptrGroupModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 51, 11, 4, 1, 1), ).setMaxAccess("readwrite").setIndexNames((0, "Hub-rptr-prvt", "rptrGroupMIndex"), (0, "Hub-rptr-prvt", "rptrGroupModuleIndex"))
if mibBuilder.loadTexts: rptrGroupModuleEntry.setStatus('mandatory')
rptrGroupMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupMIndex.setStatus('mandatory')
rptrGroupModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupModuleIndex.setStatus('mandatory')
rptrGroupModuleStructInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("em892-330-blank", 1), ("em892-331-fo1", 2), ("em892-332-fo2", 3), ("em892-333-cx1", 4), ("em892-334-cx2", 5), ("em892-332b-fo2b", 6), ("em892-335-tp1", 7), ("em892-337-dte", 8), ("em892-336-tp2", 9), ("em892-339-aui", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupModuleStructInfo.setStatus('mandatory')
rptrGroupModuleBackupState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("hardware", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrGroupModuleBackupState.setStatus('mandatory')
rptrGroupPortStatus = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,1)).setObjects(("SNMP-REPEATER-MIB", "rptrPortGroupIndex"), ("SNMP-REPEATER-MIB", "rptrPortIndex"), ("SNMP-REPEATER-MIB", "rptrPortAdminStatus"))
rptrGroupJabberFaultStatus = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,2)).setObjects(("Hub-rptr-prvt", "rptrGroupIndex"), ("Hub-rptr-prvt", "rptrGroupPortIndex"), ("Hub-rptr-prvt", "rptrGroupJabberError"))
rptrGroupCPUFaultStatus = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,3)).setObjects(("Hub-rptr-prvt", "rptrGroupIndex"), ("Hub-rptr-prvt", "rptrGroupCpuError"))
rptrGroupSQEStatus = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,4)).setObjects(("Hub-rptr-prvt", "rptrGroupIndex"), ("Hub-rptr-prvt", "rptrGroupPortIndex"), ("Hub-rptr-prvt", "rptrGroupSQE"))
rptrGroupRepeaterBlockFaultStatus = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,5)).setObjects(("Hub-rptr-prvt", "rptrGroupIndex"), ("Hub-rptr-prvt", "rptrGroupRepeaterBlockError"))
rptrGroupPortAutoPartitionStatus = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,6)).setObjects(("Hub-rptr-prvt", "rptrGroupPIndex"), ("Hub-rptr-prvt", "rptrGroupPortIndex"), ("Hub-rptr-prvt", "rptrGroupPortAutoPartitionType"))
rptrGroupTrap = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,7)).setObjects(("Hub-rptr-prvt", "rptrGroupIndex"), ("Hub-rptr-prvt", "rptrGroupGlobalStatus"), ("Hub-rptr-prvt", "rptrGroupPrevStatus"))
rptrGroupPortLinkStatus2 = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,8)).setObjects(("SNMP-REPEATER-MIB", "rptrPortGroupIndex"), ("SNMP-REPEATER-MIB", "rptrPortIndex"), ("Hub-rptr-prvt", "rptrGroupPortLinkStatus"))
rptrGroupDetachNmsPort = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,9)).setObjects(("Hub-rptr-prvt", "rptrNMSConnectionPort"))
rptrGroupHead1BackupMainActive = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,10)).setObjects(("Hub-rptr-prvt", "rptrGroupIndex"))
rptrGroupHead1BackupSecondActive = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,11)).setObjects(("Hub-rptr-prvt", "rptrGroupIndex"))
rptrGroupDetachEdbPort = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,12)).setObjects(("Hub-rptr-prvt", "rptrEDBPort"))
mibBuilder.exportSymbols("Hub-rptr-prvt", rptrGroupPortEntry=rptrGroupPortEntry, rptrGroupMIndex=rptrGroupMIndex, rptrGroupCpuError=rptrGroupCpuError, enterprises=enterprises, rptrGroupPortRcvStatus=rptrGroupPortRcvStatus, rptrGroupPortStatus=rptrGroupPortStatus, fmdebug=fmdebug, private=private, rptrGroupPortAutoPartitionStatus=rptrGroupPortAutoPartitionStatus, fmsystem=fmsystem, rptrinfo=rptrinfo, rptrJabberCounter=rptrJabberCounter, rptrGroupCPUFaultStatus=rptrGroupCPUFaultStatus, rptrGroupModuleEntry=rptrGroupModuleEntry, rptrMemoryErrors=rptrMemoryErrors, fmsystemperm=fmsystemperm, rptrGroupTrap=rptrGroupTrap, rptrGroupModuleIndex=rptrGroupModuleIndex, rptrGroupPortIndex=rptrGroupPortIndex, rptrGroupPortAutoPartitionCount=rptrGroupPortAutoPartitionCount, rptrGroupPIndex=rptrGroupPIndex, fmlu=fmlu, rptrGroupIndex=rptrGroupIndex, traprun=traprun, rptrGroupModuleBackupState=rptrGroupModuleBackupState, rptrGroupRepeaterBlockFaultStatus=rptrGroupRepeaterBlockFaultStatus, rptrEDBPort=rptrEDBPort, rptrTxDscrptrOverFlow=rptrTxDscrptrOverFlow, rptrGroupHead1BackupSecondActive=rptrGroupHead1BackupSecondActive, fmslot=fmslot, rptrGroupJabberError=rptrGroupJabberError, rptrGroupJabberFaultStatus=rptrGroupJabberFaultStatus, rptrGroupGlobalStatus=rptrGroupGlobalStatus, rptrfmGroupTable=rptrfmGroupTable, rptrGroupDetachNmsPort=rptrGroupDetachNmsPort, rptrNMSConnectionPort=rptrNMSConnectionPort, rptrGroupSQE=rptrGroupSQE, rptrGroupModuleStructInfo=rptrGroupModuleStructInfo, fmethrptr=fmethrptr, rptrGroupMaxModuleNumber=rptrGroupMaxModuleNumber, rptrGroupHead1BackupMainActive=rptrGroupHead1BackupMainActive, rptrGroupPortLinkStatus2=rptrGroupPortLinkStatus2, rptrGroupAutoPartition=rptrGroupAutoPartition, rptrGroupPrevStatus=rptrGroupPrevStatus, fibronics=fibronics, rptrGroupBackupHead1State=rptrGroupBackupHead1State, rptrGroupSQEStatus=rptrGroupSQEStatus, trapvar=trapvar, fmdiag=fmdiag, rptrGroupPortAutoPartitionType=rptrGroupPortAutoPartitionType, rptrgroup=rptrgroup, rptrGroupGlobalError=rptrGroupGlobalError, traperm=traperm, fm800=fm800, trap=trap, fmsystemrun=fmsystemrun, rptrgroupmodule=rptrgroupmodule, rptrRxDscrptrOverFlow=rptrRxDscrptrOverFlow, rptrGroupLinkSelectHead1=rptrGroupLinkSelectHead1, rptrGroupPortTable=rptrGroupPortTable, rptrGroupPortLinkFaultCounter=rptrGroupPortLinkFaultCounter, rptrGroupModuleTable=rptrGroupModuleTable, rptrGroupDetachStatus=rptrGroupDetachStatus, rptrGroupGlobalCommandCode=rptrGroupGlobalCommandCode, rptrGroupTailState=rptrGroupTailState, rptrgroupport=rptrgroupport, rptrGroupTrapMask=rptrGroupTrapMask, rptrGroupPortLinkStatus=rptrGroupPortLinkStatus, rptrGroupRepeaterBlockError=rptrGroupRepeaterBlockError, rptrfmGroupEntry=rptrfmGroupEntry, rptrGroupDetachEdbPort=rptrGroupDetachEdbPort)
