#
# PySNMP MIB module CXFrameRelayInterfaceModule-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXFrameRelayInterfaceModule-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
DLCI, = mibBuilder.importSymbols("CXFrameRelay-MIB", "DLCI")
Alias, SapIndex, cxFrameRelayInterfaceModule = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "SapIndex", "cxFrameRelayInterfaceModule")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, MibIdentifier, Gauge32, Bits, Counter32, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, IpAddress, Unsigned32, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "Gauge32", "Bits", "Counter32", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "IpAddress", "Unsigned32", "NotificationType", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class SubRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

frimSRConnectInterval = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSRConnectInterval.setStatus('mandatory')
frimServiceCost = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimServiceCost.setStatus('mandatory')
frimSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3), )
if mibBuilder.loadTexts: frimSapTable.setStatus('mandatory')
frimSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1), ).setIndexNames((0, "CXFrameRelayInterfaceModule-MIB", "frimSapId"))
if mibBuilder.loadTexts: frimSapEntry.setStatus('mandatory')
frimSapId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapId.setStatus('mandatory')
frimSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSapRowStatus.setStatus('mandatory')
frimSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lower", 1), ("upper", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSapType.setStatus('mandatory')
frimSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSapAlias.setStatus('mandatory')
frimSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 5), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSapCompanionAlias.setStatus('mandatory')
frimSapMaxDlcis = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1022)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSapMaxDlcis.setStatus('mandatory')
frimSapMaxErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSapMaxErrorFrames.setStatus('mandatory')
frimSapMonitorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)).clone(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSapMonitorFrames.setStatus('mandatory')
frimSapFrWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 300)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSapFrWindowSize.setStatus('mandatory')
frimSapControlStats = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearSapStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: frimSapControlStats.setStatus('mandatory')
frimSapstatRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatRxDataFrames.setStatus('mandatory')
frimSapstatRxDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatRxDataOctets.setStatus('mandatory')
frimSapstatTxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatTxDataFrames.setStatus('mandatory')
frimSapstatTxDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatTxDataOctets.setStatus('mandatory')
frimSapstatUnopenedServiceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatUnopenedServiceDiscards.setStatus('mandatory')
frimSapstatPvcDownDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatPvcDownDiscards.setStatus('mandatory')
frimSapstatUserSuccessfulOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatUserSuccessfulOpens.setStatus('mandatory')
frimSapstatUserUnsuccessfulOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatUserUnsuccessfulOpens.setStatus('mandatory')
frimSapstatSRSuccessfulConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatSRSuccessfulConnects.setStatus('mandatory')
frimSapstatSRUnsuccessfulConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatSRUnsuccessfulConnects.setStatus('mandatory')
frimSapstatTxResets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatTxResets.setStatus('mandatory')
frimSapstatRxBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatRxBECN.setStatus('mandatory')
frimSapstatRxFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSapstatRxFECN.setStatus('mandatory')
frimSRTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6), )
if mibBuilder.loadTexts: frimSRTable.setStatus('mandatory')
frimSREntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1), ).setIndexNames((0, "CXFrameRelayInterfaceModule-MIB", "frimSRFrpCircuitSapId"), (0, "CXFrameRelayInterfaceModule-MIB", "frimSRFrpCircuitDlci"), (0, "CXFrameRelayInterfaceModule-MIB", "frimSRProtocolId"), (0, "CXFrameRelayInterfaceModule-MIB", "frimSRSubRef"))
if mibBuilder.loadTexts: frimSREntry.setStatus('mandatory')
frimSRFrpCircuitSapId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSRFrpCircuitSapId.setStatus('mandatory')
frimSRFrpCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSRFrpCircuitDlci.setStatus('mandatory')
frimSRProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSRProtocolId.setStatus('mandatory')
frimSRSubRef = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 4), SubRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSRSubRef.setStatus('mandatory')
frimSRRefRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 5), SubRef()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSRRefRangeEnd.setStatus('mandatory')
frimSRRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSRRowStatus.setStatus('mandatory')
frimSRDestFrpCircuitAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 7), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSRDestFrpCircuitAlias.setStatus('mandatory')
frimSRDestSubRef = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 8), SubRef()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frimSRDestSubRef.setStatus('mandatory')
frimSRRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notConnected", 1), ("inProgress", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSRRouteStatus.setStatus('mandatory')
frimSRClearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("noFailure", 1), ("internalError", 2), ("localAllocFailure", 3), ("remoteAllocFailure", 4), ("localNoAccess", 5), ("remoteNoAccess", 6), ("localPvcDown", 7), ("remotePvcDown", 8), ("localPvcBusy", 9), ("remotePvcBusy", 10), ("localFcnFailure", 11), ("remoteFcnFailure", 12), ("localDsnFailure", 13), ("localRefInUse", 14), ("remoteAliasNotFound", 15), ("remoteNoPvcService", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSRClearStatus.setStatus('mandatory')
frimSysConTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5), )
if mibBuilder.loadTexts: frimSysConTable.setStatus('mandatory')
frimSysConEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1), ).setIndexNames((0, "CXFrameRelayInterfaceModule-MIB", "frimSysConSapId"), (0, "CXFrameRelayInterfaceModule-MIB", "frimSysConDlci"), (0, "CXFrameRelayInterfaceModule-MIB", "frimSysConPid"), (0, "CXFrameRelayInterfaceModule-MIB", "frimSysConRef"))
if mibBuilder.loadTexts: frimSysConEntry.setStatus('mandatory')
frimSysConSapId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConSapId.setStatus('mandatory')
frimSysConDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConDlci.setStatus('mandatory')
frimSysConPid = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pidFr", 1), ("pidLan", 2), ("pidX25", 3), ("pidCcm", 4), ("pidGmf", 5), ("pidLlc2", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConPid.setStatus('mandatory')
frimSysConRef = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 4), SubRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConRef.setStatus('mandatory')
frimSysConRemoteSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConRemoteSlot.setStatus('mandatory')
frimSysConCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConCreationTime.setStatus('mandatory')
frimSysConReqDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConReqDataSize.setStatus('mandatory')
frimSysConNegDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConNegDataSize.setStatus('mandatory')
frimSysConNegSizeExceededFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConNegSizeExceededFrames.setStatus('mandatory')
frimSysConRefRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 2, 5, 1, 10), SubRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frimSysConRefRangeEnd.setStatus('mandatory')
mibBuilder.exportSymbols("CXFrameRelayInterfaceModule-MIB", frimSapAlias=frimSapAlias, frimSRTable=frimSRTable, frimSapstatSRSuccessfulConnects=frimSapstatSRSuccessfulConnects, frimSysConNegDataSize=frimSysConNegDataSize, frimSysConRefRangeEnd=frimSysConRefRangeEnd, frimSRFrpCircuitSapId=frimSRFrpCircuitSapId, frimSapTable=frimSapTable, frimSysConCreationTime=frimSysConCreationTime, frimSREntry=frimSREntry, frimSysConDlci=frimSysConDlci, frimSapMonitorFrames=frimSapMonitorFrames, frimSapRowStatus=frimSapRowStatus, frimSRRowStatus=frimSRRowStatus, frimSysConRemoteSlot=frimSysConRemoteSlot, frimSapMaxErrorFrames=frimSapMaxErrorFrames, frimSysConEntry=frimSysConEntry, frimSRRouteStatus=frimSRRouteStatus, frimSapMaxDlcis=frimSapMaxDlcis, frimSRProtocolId=frimSRProtocolId, frimSysConSapId=frimSysConSapId, frimSysConRef=frimSysConRef, frimSRFrpCircuitDlci=frimSRFrpCircuitDlci, frimSapFrWindowSize=frimSapFrWindowSize, frimSRClearStatus=frimSRClearStatus, frimSysConTable=frimSysConTable, frimSapEntry=frimSapEntry, frimSRConnectInterval=frimSRConnectInterval, frimSapId=frimSapId, frimSapstatRxBECN=frimSapstatRxBECN, frimSysConPid=frimSysConPid, frimServiceCost=frimServiceCost, frimSapstatTxDataFrames=frimSapstatTxDataFrames, frimSapCompanionAlias=frimSapCompanionAlias, frimSapstatTxDataOctets=frimSapstatTxDataOctets, frimSapstatRxDataOctets=frimSapstatRxDataOctets, frimSRRefRangeEnd=frimSRRefRangeEnd, frimSapControlStats=frimSapControlStats, frimSRSubRef=frimSRSubRef, frimSapstatPvcDownDiscards=frimSapstatPvcDownDiscards, frimSapType=frimSapType, frimSRDestFrpCircuitAlias=frimSRDestFrpCircuitAlias, frimSapstatUserSuccessfulOpens=frimSapstatUserSuccessfulOpens, frimSapstatRxDataFrames=frimSapstatRxDataFrames, frimSRDestSubRef=frimSRDestSubRef, SubRef=SubRef, frimSapstatUserUnsuccessfulOpens=frimSapstatUserUnsuccessfulOpens, frimSapstatTxResets=frimSapstatTxResets, frimSapstatUnopenedServiceDiscards=frimSapstatUnopenedServiceDiscards, frimSysConReqDataSize=frimSysConReqDataSize, frimSapstatRxFECN=frimSapstatRxFECN, frimSapstatSRUnsuccessfulConnects=frimSapstatSRUnsuccessfulConnects, frimSysConNegSizeExceededFrames=frimSysConNegSizeExceededFrames)
