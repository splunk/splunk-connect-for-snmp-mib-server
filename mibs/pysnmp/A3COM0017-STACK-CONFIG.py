#
# PySNMP MIB module A3COM0017-STACK-CONFIG (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM0017-STACK-CONFIG
# Produced by pysmi-0.3.4 at Mon Apr 29 16:53:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
superStackIIconfig, = mibBuilder.importSymbols("A3COM0004-GENERIC", "superStackIIconfig")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, MibIdentifier, ModuleIdentity, TimeTicks, Gauge32, Integer32, Counter32, Unsigned32, ObjectIdentity, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "MibIdentifier", "ModuleIdentity", "TimeTicks", "Gauge32", "Integer32", "Counter32", "Unsigned32", "ObjectIdentity", "NotificationType", "iso")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
stackConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 27, 1))
stackConfigTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1), )
if mibBuilder.loadTexts: stackConfigTable.setStatus('mandatory')
stackConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1), ).setIndexNames((0, "A3COM0017-STACK-CONFIG", "stackUnitLocation"))
if mibBuilder.loadTexts: stackConfigEntry.setStatus('mandatory')
stackUnitLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: stackUnitLocation.setStatus('mandatory')
stackUnitAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitAddress.setStatus('mandatory')
stackUnitLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitLastReset.setStatus('mandatory')
stackUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitType.setStatus('mandatory')
stackUnitDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitDesc.setStatus('mandatory')
stackUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackUnitName.setStatus('mandatory')
stackUnitState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unitStateUnknown", 1), ("unitInactive", 2), ("unitOperational", 3), ("unitLoading", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitState.setStatus('mandatory')
stackUnitManagementType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("distributed", 2), ("intelligent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitManagementType.setStatus('mandatory')
stackUnitCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitCapabilities.setStatus('mandatory')
stackUnitPromVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitPromVersion.setStatus('mandatory')
stackUnitHWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitHWVersion.setStatus('mandatory')
stackUnitSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitSWVersion.setStatus('mandatory')
stackUnitSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitSerialNumber.setStatus('mandatory')
stackUnitAttention = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAttention", 1), ("attention", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackUnitAttention.setStatus('mandatory')
stackUnitMgmtInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitMgmtInterface.setStatus('mandatory')
stackUnitSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitSummary.setStatus('mandatory')
stackUnitSlipMgmtInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackUnitSlipMgmtInterface.setStatus('mandatory')
stackAddressInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 27, 2))
stackAddressTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 27, 2, 1), )
if mibBuilder.loadTexts: stackAddressTable.setStatus('mandatory')
stackAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 27, 2, 1, 1), ).setIndexNames((0, "A3COM0017-STACK-CONFIG", "stackUnitLocation"), (0, "A3COM0017-STACK-CONFIG", "stackAddressNumber"))
if mibBuilder.loadTexts: stackAddressEntry.setStatus('mandatory')
stackAddressNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackAddressNumber.setStatus('mandatory')
stackAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipAddress", 1), ("ipxAddress", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackAddressType.setStatus('mandatory')
stackAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 27, 2, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackAddress.setStatus('mandatory')
stackSysObjIdentities = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 27, 4))
stackUnitTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 27, 5))
mibBuilder.exportSymbols("A3COM0017-STACK-CONFIG", stackAddress=stackAddress, stackAddressTable=stackAddressTable, stackUnitSummary=stackUnitSummary, stackUnitPromVersion=stackUnitPromVersion, stackUnitDesc=stackUnitDesc, stackUnitAddress=stackUnitAddress, stackUnitTypes=stackUnitTypes, stackSysObjIdentities=stackSysObjIdentities, stackConfigTable=stackConfigTable, stackUnitLastReset=stackUnitLastReset, stackAddressEntry=stackAddressEntry, stackUnitAttention=stackUnitAttention, stackUnitState=stackUnitState, stackAddressNumber=stackAddressNumber, stackUnitName=stackUnitName, stackUnitLocation=stackUnitLocation, stackUnitMgmtInterface=stackUnitMgmtInterface, stackAddressType=stackAddressType, stackUnitSlipMgmtInterface=stackUnitSlipMgmtInterface, stackUnitType=stackUnitType, stackUnitSerialNumber=stackUnitSerialNumber, stackAddressInformation=stackAddressInformation, stackConfiguration=stackConfiguration, stackUnitSWVersion=stackUnitSWVersion, stackUnitManagementType=stackUnitManagementType, stackUnitHWVersion=stackUnitHWVersion, stackUnitCapabilities=stackUnitCapabilities, stackConfigEntry=stackConfigEntry)
