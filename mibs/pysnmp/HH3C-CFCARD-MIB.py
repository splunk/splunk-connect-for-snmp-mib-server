#
# PySNMP MIB module HH3C-CFCARD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-CFCARD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:12:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
hh3cCfCard, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCfCard")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, ObjectIdentity, ModuleIdentity, Bits, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Unsigned32, Integer32, IpAddress, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "ModuleIdentity", "Bits", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Unsigned32", "Integer32", "IpAddress", "Gauge32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hh3cCfCardMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1))
if mibBuilder.loadTexts: hh3cCfCardMIB.setLastUpdated('200412240000Z')
if mibBuilder.loadTexts: hh3cCfCardMIB.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cCfCardMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 1))
if mibBuilder.loadTexts: hh3cCfCardMIBObjects.setStatus('current')
hh3cCfCardScalarObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 1, 1))
if mibBuilder.loadTexts: hh3cCfCardScalarObjects.setStatus('current')
hh3cCfCardNumber = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCfCardNumber.setStatus('current')
hh3cCfCardInfoObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 1, 2))
if mibBuilder.loadTexts: hh3cCfCardInfoObjects.setStatus('current')
hh3cCfCardInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 1, 2, 2), )
if mibBuilder.loadTexts: hh3cCfCardInfoTable.setStatus('current')
hh3cCfCardInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 1, 2, 2, 1), ).setIndexNames((0, "HH3C-CFCARD-MIB", "hh3cCfCardIndex"))
if mibBuilder.loadTexts: hh3cCfCardInfoEntry.setStatus('current')
hh3cCfCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCfCardIndex.setStatus('current')
hh3cCfCardIsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCfCardIsPresent.setStatus('current')
hh3cCfCardContainedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCfCardContainedIn.setStatus('current')
hh3cCfCardParentRelPos = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCfCardParentRelPos.setStatus('current')
hh3cCfCardDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 1, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCfCardDescription.setStatus('current')
hh3cCfCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 1, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCfCardSerialNumber.setStatus('current')
hh3cCfCardFirewareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 1, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCfCardFirewareVersion.setStatus('current')
hh3cCfCardModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 1, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCfCardModelNumber.setStatus('current')
hh3cCfCardState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 128, 240, 255))).clone(namedValues=NamedValues(("sNoError", 1), ("sFormatError", 2), ("sSectorBufferError", 3), ("sECCError", 4), ("sCMPError", 5), ("sSlaveError", 128), ("sIOError", 240), ("sOther", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCfCardState.setStatus('current')
hh3cCfCardSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 1, 2, 2, 1, 10), Unsigned32()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCfCardSize.setStatus('current')
hh3cCfCardUsedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 1, 2, 2, 1, 11), Unsigned32()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCfCardUsedSize.setStatus('current')
hh3cCfCardFreeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 1, 2, 2, 1, 12), Unsigned32()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cCfCardFreeSize.setStatus('current')
hh3cCfCardNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 2))
if mibBuilder.loadTexts: hh3cCfCardNotifications.setStatus('current')
hh3cCfCardNotificationsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 2, 0))
if mibBuilder.loadTexts: hh3cCfCardNotificationsV2.setStatus('current')
hh3cCfCardHotSwapOn = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 2, 0, 1)).setObjects(("HH3C-CFCARD-MIB", "hh3cCfCardContainedIn"), ("HH3C-CFCARD-MIB", "hh3cCfCardParentRelPos"), ("HH3C-CFCARD-MIB", "hh3cCfCardDescription"))
if mibBuilder.loadTexts: hh3cCfCardHotSwapOn.setStatus('current')
hh3cCfCardHotSwapOff = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 2, 0, 2)).setObjects(("HH3C-CFCARD-MIB", "hh3cCfCardContainedIn"), ("HH3C-CFCARD-MIB", "hh3cCfCardParentRelPos"), ("HH3C-CFCARD-MIB", "hh3cCfCardDescription"))
if mibBuilder.loadTexts: hh3cCfCardHotSwapOff.setStatus('current')
hh3cCfCardMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 4))
hh3cCfCardMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 4, 1))
hh3ccurrentObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 4, 1, 1)).setObjects(("HH3C-CFCARD-MIB", "hh3cCfCardNumber"), ("HH3C-CFCARD-MIB", "hh3cCfCardIndex"), ("HH3C-CFCARD-MIB", "hh3cCfCardIsPresent"), ("HH3C-CFCARD-MIB", "hh3cCfCardContainedIn"), ("HH3C-CFCARD-MIB", "hh3cCfCardParentRelPos"), ("HH3C-CFCARD-MIB", "hh3cCfCardDescription"), ("HH3C-CFCARD-MIB", "hh3cCfCardSerialNumber"), ("HH3C-CFCARD-MIB", "hh3cCfCardFirewareVersion"), ("HH3C-CFCARD-MIB", "hh3cCfCardModelNumber"), ("HH3C-CFCARD-MIB", "hh3cCfCardState"), ("HH3C-CFCARD-MIB", "hh3cCfCardSize"), ("HH3C-CFCARD-MIB", "hh3cCfCardUsedSize"), ("HH3C-CFCARD-MIB", "hh3cCfCardFreeSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3ccurrentObjectGroup = hh3ccurrentObjectGroup.setStatus('current')
hh3ccurrentNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 4, 1, 2)).setObjects(("HH3C-CFCARD-MIB", "hh3cCfCardHotSwapOn"), ("HH3C-CFCARD-MIB", "hh3cCfCardHotSwapOff"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3ccurrentNotificationGroup = hh3ccurrentNotificationGroup.setStatus('current')
hh3cCfCardMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 4, 2))
hh3cbasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 25506, 2, 41, 1, 4, 2, 1)).setObjects(("HH3C-CFCARD-MIB", "hh3ccurrentObjectGroup"), ("HH3C-CFCARD-MIB", "hh3ccurrentNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cbasicCompliance = hh3cbasicCompliance.setStatus('current')
mibBuilder.exportSymbols("HH3C-CFCARD-MIB", hh3cCfCardFirewareVersion=hh3cCfCardFirewareVersion, hh3cCfCardScalarObjects=hh3cCfCardScalarObjects, hh3cCfCardMIBObjects=hh3cCfCardMIBObjects, hh3cCfCardInfoEntry=hh3cCfCardInfoEntry, hh3cCfCardIndex=hh3cCfCardIndex, hh3cCfCardInfoObjects=hh3cCfCardInfoObjects, hh3cCfCardState=hh3cCfCardState, hh3cCfCardNumber=hh3cCfCardNumber, hh3ccurrentNotificationGroup=hh3ccurrentNotificationGroup, hh3cCfCardContainedIn=hh3cCfCardContainedIn, hh3cCfCardMIBCompliances=hh3cCfCardMIBCompliances, hh3cCfCardDescription=hh3cCfCardDescription, hh3cCfCardIsPresent=hh3cCfCardIsPresent, hh3cCfCardSerialNumber=hh3cCfCardSerialNumber, hh3cCfCardNotificationsV2=hh3cCfCardNotificationsV2, PYSNMP_MODULE_ID=hh3cCfCardMIB, hh3cCfCardMIBGroups=hh3cCfCardMIBGroups, hh3cCfCardFreeSize=hh3cCfCardFreeSize, hh3cCfCardNotifications=hh3cCfCardNotifications, hh3cCfCardHotSwapOff=hh3cCfCardHotSwapOff, hh3cCfCardMIB=hh3cCfCardMIB, hh3cCfCardModelNumber=hh3cCfCardModelNumber, hh3cCfCardHotSwapOn=hh3cCfCardHotSwapOn, hh3cCfCardMIBConformance=hh3cCfCardMIBConformance, hh3cCfCardParentRelPos=hh3cCfCardParentRelPos, hh3cCfCardUsedSize=hh3cCfCardUsedSize, hh3ccurrentObjectGroup=hh3ccurrentObjectGroup, hh3cbasicCompliance=hh3cbasicCompliance, hh3cCfCardInfoTable=hh3cCfCardInfoTable, hh3cCfCardSize=hh3cCfCardSize)
