#
# PySNMP MIB module SAF-ALARM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SAF-ALARM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:51:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
alarmListName, alarmActiveIndex, alarmModelIndex, alarmActiveDateAndTime = mibBuilder.importSymbols("ALARM-MIB", "alarmListName", "alarmActiveIndex", "alarmModelIndex", "alarmActiveDateAndTime")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
IANAItuEventType, = mibBuilder.importSymbols("IANA-ITU-ALARM-TC-MIB", "IANAItuEventType")
ItuTrendIndication, = mibBuilder.importSymbols("ITU-ALARM-TC-MIB", "ItuTrendIndication")
tehnika, = mibBuilder.importSymbols("SAF-ENTERPRISE", "tehnika")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, TimeTicks, iso, Bits, IpAddress, MibIdentifier, Integer32, Counter32, Counter64, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "iso", "Bits", "IpAddress", "MibIdentifier", "Integer32", "Counter32", "Counter64", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType")
AutonomousType, RowPointer, DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "AutonomousType", "RowPointer", "DateAndTime", "DisplayString", "TextualConvention")
safAlarmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 7571, 100, 118))
safAlarmMIB.setRevisions(('2012-12-07 00:00',))
if mibBuilder.loadTexts: safAlarmMIB.setLastUpdated('201212070000Z')
if mibBuilder.loadTexts: safAlarmMIB.setOrganization('SAF Tehnika')
class SafAlarmProbableCause(TextualConvention, Integer32):
    reference = "ITU Recommendation M.3100, 'Generic Network Information Model', 1995 ITU Recommendation X.733, 'Information Technology - Open Systems Interconnection - System Management: Alarm Reporting Function', 1992 ITU Recommendation X.736, 'Information Technology - Open Systems Interconnection - System Management: Security Alarm Reporting Function', 1992"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 201, 202, 203, 204, 205, 206, 207, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 1024, 1025))
    namedValues = NamedValues(("aIS", 1), ("callSetUpFailure", 2), ("degradedSignal", 3), ("farEndReceiverFailure", 4), ("framingError", 5), ("lossOfFrame", 6), ("lossOfPointer", 7), ("lossOfSignal", 8), ("payloadTypeMismatch", 9), ("transmissionError", 10), ("remoteAlarmInterface", 11), ("excessiveBER", 12), ("pathTraceMismatch", 13), ("unavailable", 14), ("signalLabelMismatch", 15), ("lossOfMultiFrame", 16), ("receiveFailure", 17), ("transmitFailure", 18), ("modulationFailure", 19), ("demodulationFailure", 20), ("broadcastChannelFailure", 21), ("connectionEstablishmentError", 22), ("invalidMessageReceived", 23), ("localNodeTransmissionError", 24), ("remoteNodeTransmissionError", 25), ("routingFailure", 26), ("backplaneFailure", 51), ("dataSetProblem", 52), ("equipmentIdentifierDuplication", 53), ("externalIFDeviceProblem", 54), ("lineCardProblem", 55), ("multiplexerProblem", 56), ("nEIdentifierDuplication", 57), ("powerProblem", 58), ("processorProblem", 59), ("protectionPathFailure", 60), ("receiverFailure", 61), ("replaceableUnitMissing", 62), ("replaceableUnitTypeMismatch", 63), ("synchronizationSourceMismatch", 64), ("terminalProblem", 65), ("timingProblem", 66), ("transmitterFailure", 67), ("trunkCardProblem", 68), ("replaceableUnitProblem", 69), ("realTimeClockFailure", 70), ("antennaFailure", 71), ("batteryChargingFailure", 72), ("diskFailure", 73), ("frequencyHoppingFailure", 74), ("iODeviceError", 75), ("lossOfSynchronisation", 76), ("lossOfRedundancy", 77), ("powerSupplyFailure", 78), ("signalQualityEvaluationFailure", 79), ("tranceiverFailure", 80), ("protectionMechanismFailure", 81), ("protectingResourceFailure", 82), ("airCompressorFailure", 101), ("airConditioningFailure", 102), ("airDryerFailure", 103), ("batteryDischarging", 104), ("batteryFailure", 105), ("commercialPowerFailure", 106), ("coolingFanFailure", 107), ("engineFailure", 108), ("fireDetectorFailure", 109), ("fuseFailure", 110), ("generatorFailure", 111), ("lowBatteryThreshold", 112), ("pumpFailure", 113), ("rectifierFailure", 114), ("rectifierHighVoltage", 115), ("rectifierLowFVoltage", 116), ("ventilationsSystemFailure", 117), ("enclosureDoorOpen", 118), ("explosiveGas", 119), ("fire", 120), ("flood", 121), ("highHumidity", 122), ("highTemperature", 123), ("highWind", 124), ("iceBuildUp", 125), ("intrusionDetection", 126), ("lowFuel", 127), ("lowHumidity", 128), ("lowCablePressure", 129), ("lowTemperatue", 130), ("lowWater", 131), ("smoke", 132), ("toxicGas", 133), ("coolingSystemFailure", 134), ("externalEquipmentFailure", 135), ("externalPointFailure", 136), ("storageCapacityProblem", 151), ("memoryMismatch", 152), ("corruptData", 153), ("outOfCPUCycles", 154), ("sfwrEnvironmentProblem", 155), ("sfwrDownloadFailure", 156), ("lossOfRealTimel", 157), ("applicationSubsystemFailure", 158), ("configurationOrCustomisationError", 159), ("databaseInconsistency", 160), ("fileError", 161), ("outOfMemory", 162), ("softwareError", 163), ("timeoutExpired", 164), ("underlayingResourceUnavailable", 165), ("versionMismatch", 166), ("bandwidthReduced", 201), ("congestion", 202), ("excessiveErrorRate", 203), ("excessiveResponseTime", 204), ("excessiveRetransmissionRate", 205), ("reducedLoggingCapability", 206), ("systemResourcesOverload", 207), ("adapterError", 500), ("applicationSubsystemFailture", 501), ("bandwidthReducedX733", 502), ("callEstablishmentError", 503), ("communicationsProtocolError", 504), ("communicationsSubsystemFailure", 505), ("configurationOrCustomizationError", 506), ("congestionX733", 507), ("coruptData", 508), ("cpuCyclesLimitExceeded", 509), ("dataSetOrModemError", 510), ("degradedSignalX733", 511), ("dteDceInterfaceError", 512), ("enclosureDoorOpenX733", 513), ("equipmentMalfunction", 514), ("excessiveVibration", 515), ("fileErrorX733", 516), ("fireDetected", 517), ("framingErrorX733", 518), ("heatingVentCoolingSystemProblem", 519), ("humidityUnacceptable", 520), ("inputOutputDeviceError", 521), ("inputDeviceError", 522), ("lanError", 523), ("leakDetected", 524), ("localNodeTransmissionErrorX733", 525), ("lossOfFrameX733", 526), ("lossOfSignalX733", 527), ("materialSupplyExhausted", 528), ("multiplexerProblemX733", 529), ("outOfMemoryX733", 530), ("ouputDeviceError", 531), ("performanceDegraded", 532), ("powerProblems", 533), ("pressureUnacceptable", 534), ("processorProblems", 535), ("pumpFailureX733", 536), ("queueSizeExceeded", 537), ("receiveFailureX733", 538), ("receiverFailureX733", 539), ("remoteNodeTransmissionErrorX733", 540), ("resourceAtOrNearingCapacity", 541), ("responseTimeExecessive", 542), ("retransmissionRateExcessive", 543), ("softwareErrorX733", 544), ("softwareProgramAbnormallyTerminated", 545), ("softwareProgramError", 546), ("storageCapacityProblemX733", 547), ("temperatureUnacceptable", 548), ("thresholdCrossed", 549), ("timingProblemX733", 550), ("toxicLeakDetected", 551), ("transmitFailureX733", 552), ("transmiterFailure", 553), ("underlyingResourceUnavailable", 554), ("versionMismatchX733", 555), ("authenticationFailure", 600), ("breachOfConfidentiality", 601), ("cableTamper", 602), ("delayedInformation", 603), ("denialOfService", 604), ("duplicateInformation", 605), ("informationMissing", 606), ("informationModificationDetected", 607), ("informationOutOfSequence", 608), ("keyExpired", 609), ("nonRepudiationFailure", 610), ("outOfHoursActivity", 611), ("outOfService", 612), ("proceduralError", 613), ("unauthorizedAccessAttempt", 614), ("unexpectedInformation", 615), ("other", 1024), ("safEnterpriseSpecific", 1025))

class SafPerceivedSeverity(TextualConvention, Integer32):
    reference = "ITU Recommendation M.3100, 'Generic Network Information Model', 1995 ITU Recommendation X.733, 'Information Technology - Open Systems Interconnection - System Management: Alarm Reporting Function', 1992"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("cleared", 1), ("indeterminate", 2), ("critical", 3), ("major", 4), ("minor", 5), ("warning", 6), ("event", 7))

safAlarmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 118, 1))
safAlarmActive = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 118, 1, 1))
safAlarmActiveLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 118, 1, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAlarmActiveLastChanged.setStatus('current')
safAlarmActiveLastChangedDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 7571, 100, 118, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAlarmActiveLastChangedDateAndTime.setStatus('current')
safAlarmActiveTable = MibTable((1, 3, 6, 1, 4, 1, 7571, 100, 118, 1, 1, 2), )
if mibBuilder.loadTexts: safAlarmActiveTable.setStatus('current')
safAlarmActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7571, 100, 118, 1, 1, 2, 1), ).setIndexNames((0, "SAF-ALARM-MIB", "safAlarmActiveIndex"))
if mibBuilder.loadTexts: safAlarmActiveEntry.setStatus('current')
safAlarmActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 118, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: safAlarmActiveIndex.setStatus('current')
safAlarmActiveManagedObj = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 118, 1, 1, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAlarmActiveManagedObj.setStatus('current')
safAlarmActiveDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 118, 1, 1, 2, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAlarmActiveDateAndTime.setStatus('current')
safAlarmActiveEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 118, 1, 1, 2, 1, 4), IANAItuEventType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAlarmActiveEventType.setStatus('current')
safAlarmActiveProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 118, 1, 1, 2, 1, 5), SafAlarmProbableCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAlarmActiveProbableCause.setStatus('current')
safAlarmActivePerceivedSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 118, 1, 1, 2, 1, 6), SafPerceivedSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAlarmActivePerceivedSeverity.setStatus('current')
safAlarmActiveThresholdTrigered = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 118, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAlarmActiveThresholdTrigered.setStatus('current')
safAlarmActiveThresholdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 118, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAlarmActiveThresholdValue.setStatus('current')
safAlarmActiveThresholdTTrigered = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 118, 1, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAlarmActiveThresholdTTrigered.setStatus('current')
safAlarmActiveThresholdTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 118, 1, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAlarmActiveThresholdTValue.setStatus('current')
safAlarmActiveAdditionalText = MibTableColumn((1, 3, 6, 1, 4, 1, 7571, 100, 118, 1, 1, 2, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: safAlarmActiveAdditionalText.setStatus('current')
safAlarmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 118, 0))
safAlarmActiveState = NotificationType((1, 3, 6, 1, 4, 1, 7571, 100, 118, 0, 2)).setObjects(("SAF-ALARM-MIB", "safAlarmActiveManagedObj"), ("SAF-ALARM-MIB", "safAlarmActiveDateAndTime"), ("SAF-ALARM-MIB", "safAlarmActiveEventType"), ("SAF-ALARM-MIB", "safAlarmActiveProbableCause"), ("SAF-ALARM-MIB", "safAlarmActivePerceivedSeverity"), ("SAF-ALARM-MIB", "safAlarmActiveThresholdTrigered"), ("SAF-ALARM-MIB", "safAlarmActiveThresholdValue"), ("SAF-ALARM-MIB", "safAlarmActiveAdditionalText"))
if mibBuilder.loadTexts: safAlarmActiveState.setStatus('current')
safAlarmActiveTState = NotificationType((1, 3, 6, 1, 4, 1, 7571, 100, 118, 0, 3)).setObjects(("SAF-ALARM-MIB", "safAlarmActiveManagedObj"), ("SAF-ALARM-MIB", "safAlarmActiveDateAndTime"), ("SAF-ALARM-MIB", "safAlarmActiveEventType"), ("SAF-ALARM-MIB", "safAlarmActiveProbableCause"), ("SAF-ALARM-MIB", "safAlarmActivePerceivedSeverity"), ("SAF-ALARM-MIB", "safAlarmActiveThresholdTTrigered"), ("SAF-ALARM-MIB", "safAlarmActiveThresholdTValue"), ("SAF-ALARM-MIB", "safAlarmActiveAdditionalText"))
if mibBuilder.loadTexts: safAlarmActiveTState.setStatus('current')
safAlarmClearState = NotificationType((1, 3, 6, 1, 4, 1, 7571, 100, 118, 0, 4)).setObjects(("SAF-ALARM-MIB", "safAlarmActiveManagedObj"))
if mibBuilder.loadTexts: safAlarmClearState.setStatus('deprecated')
safAlarmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 118, 3))
safAlarmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 7571, 100, 118, 3, 2))
safAlarmActiveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7571, 100, 118, 3, 2, 1)).setObjects(("SAF-ALARM-MIB", "safAlarmActiveLastChanged"), ("SAF-ALARM-MIB", "safAlarmActiveLastChangedDateAndTime"), ("SAF-ALARM-MIB", "safAlarmActiveManagedObj"), ("SAF-ALARM-MIB", "safAlarmActiveDateAndTime"), ("SAF-ALARM-MIB", "safAlarmActiveEventType"), ("SAF-ALARM-MIB", "safAlarmActiveProbableCause"), ("SAF-ALARM-MIB", "safAlarmActivePerceivedSeverity"), ("SAF-ALARM-MIB", "safAlarmActiveThresholdTrigered"), ("SAF-ALARM-MIB", "safAlarmActiveThresholdValue"), ("SAF-ALARM-MIB", "safAlarmActiveThresholdTTrigered"), ("SAF-ALARM-MIB", "safAlarmActiveThresholdTValue"), ("SAF-ALARM-MIB", "safAlarmActiveAdditionalText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    safAlarmActiveGroup = safAlarmActiveGroup.setStatus('current')
safAlarmNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 7571, 100, 118, 3, 2, 2)).setObjects(("SAF-ALARM-MIB", "safAlarmActiveState"), ("SAF-ALARM-MIB", "safAlarmActiveTState"), ("SAF-ALARM-MIB", "safAlarmClearState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    safAlarmNotificationsGroup = safAlarmNotificationsGroup.setStatus('deprecated')
safAlarmNotificationsGroup1 = NotificationGroup((1, 3, 6, 1, 4, 1, 7571, 100, 118, 3, 2, 3)).setObjects(("SAF-ALARM-MIB", "safAlarmActiveState"), ("SAF-ALARM-MIB", "safAlarmActiveTState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    safAlarmNotificationsGroup1 = safAlarmNotificationsGroup1.setStatus('current')
mibBuilder.exportSymbols("SAF-ALARM-MIB", safAlarmConformance=safAlarmConformance, safAlarmActiveTState=safAlarmActiveTState, safAlarmClearState=safAlarmClearState, safAlarmActivePerceivedSeverity=safAlarmActivePerceivedSeverity, safAlarmActiveDateAndTime=safAlarmActiveDateAndTime, safAlarmActive=safAlarmActive, safAlarmMIB=safAlarmMIB, safAlarmNotificationsGroup=safAlarmNotificationsGroup, safAlarmActiveLastChanged=safAlarmActiveLastChanged, SafAlarmProbableCause=SafAlarmProbableCause, SafPerceivedSeverity=SafPerceivedSeverity, safAlarmActiveTable=safAlarmActiveTable, safAlarmActiveThresholdTValue=safAlarmActiveThresholdTValue, safAlarmActiveThresholdTTrigered=safAlarmActiveThresholdTTrigered, safAlarmActiveThresholdTrigered=safAlarmActiveThresholdTrigered, safAlarmActiveGroup=safAlarmActiveGroup, safAlarmActiveState=safAlarmActiveState, safAlarmActiveEntry=safAlarmActiveEntry, safAlarmActiveThresholdValue=safAlarmActiveThresholdValue, safAlarmActiveLastChangedDateAndTime=safAlarmActiveLastChangedDateAndTime, safAlarmActiveAdditionalText=safAlarmActiveAdditionalText, safAlarmActiveProbableCause=safAlarmActiveProbableCause, safAlarmObjects=safAlarmObjects, safAlarmGroups=safAlarmGroups, safAlarmActiveIndex=safAlarmActiveIndex, safAlarmActiveManagedObj=safAlarmActiveManagedObj, safAlarmActiveEventType=safAlarmActiveEventType, safAlarmNotificationsGroup1=safAlarmNotificationsGroup1, PYSNMP_MODULE_ID=safAlarmMIB, safAlarmNotifications=safAlarmNotifications)
