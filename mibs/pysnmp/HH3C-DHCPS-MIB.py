#
# PySNMP MIB module HH3C-DHCPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-DHCPS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:12:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
hh3cRhw, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cRhw")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, Integer32, NotificationType, MibIdentifier, Bits, Counter64, ModuleIdentity, iso, ObjectIdentity, Unsigned32, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "NotificationType", "MibIdentifier", "Bits", "Counter64", "ModuleIdentity", "iso", "ObjectIdentity", "Unsigned32", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
DisplayString, RowStatus, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "MacAddress", "TextualConvention")
hh3cDHCPServerMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 2))
if mibBuilder.loadTexts: hh3cDHCPServerMib.setLastUpdated('200602200000Z')
if mibBuilder.loadTexts: hh3cDHCPServerMib.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
class Hh3cDhcpSEnabledStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("enabled", 1), ("disabled", 0))

hh3cDHCPServerMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1))
hh3cDHCPSGlobalPoolTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 1), )
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolTable.setStatus('current')
hh3cDHCPSGlobalPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 1, 1), ).setIndexNames((0, "HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolName"))
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolEntry.setStatus('current')
hh3cDHCPSGlobalPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolName.setStatus('current')
hh3cDHCPSGlobalPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolRowStatus.setStatus('current')
hh3cDHCPSGlobalPoolConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 2), )
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolConfigTable.setStatus('current')
hh3cDHCPSGlobalPoolConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 2, 1), ).setIndexNames((0, "HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolName"))
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolConfigEntry.setStatus('current')
hh3cDHCPSGlobalPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("null", 0), ("host", 1), ("network", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolType.setStatus('current')
hh3cDHCPSGlobalPoolNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolNetwork.setStatus('current')
hh3cDHCPSGlobalPoolNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolNetworkMask.setStatus('current')
hh3cDHCPSGlobalPoolHostIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolHostIPAddr.setStatus('current')
hh3cDHCPSGlobalPoolHostMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolHostMask.setStatus('current')
hh3cDHCPSGlobalPoolHostHAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 2, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolHostHAddr.setStatus('current')
hh3cDHCPSGlobalPoolConfigUndoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undonetworkip", 1), ("undohostip", 2), ("undohosthaddr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolConfigUndoFlag.setStatus('current')
hh3cDHCPSGlobalPoolParaTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3), )
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolParaTable.setStatus('current')
hh3cDHCPSGlobalPoolParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1), ).setIndexNames((0, "HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolName"))
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolParaEntry.setStatus('current')
hh3cDHCPSGlobalPoolLeaseDay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolLeaseDay.setStatus('current')
hh3cDHCPSGlobalPoolLeaseHour = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolLeaseHour.setStatus('current')
hh3cDHCPSGlobalPoolLeaseMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolLeaseMinute.setStatus('current')
hh3cDHCPSGlobalPoolLeaseUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("unlimited", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolLeaseUnlimited.setStatus('current')
hh3cDHCPSGlobalPoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolDomainName.setStatus('current')
hh3cDHCPSGlobalPoolClientGatewayIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientGatewayIPString.setStatus('current')
hh3cDHCPSGlobalPoolClientGatewayIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientGatewayIPUndo.setStatus('current')
hh3cDHCPSGlobalPoolClientDNSIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientDNSIPString.setStatus('current')
hh3cDHCPSGlobalPoolClientDNSIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientDNSIPUndo.setStatus('current')
hh3cDHCPSGlobalPoolClientNetbiosType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("null", 0), ("bnode", 1), ("pnode", 2), ("mnode", 4), ("hnode", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientNetbiosType.setStatus('current')
hh3cDHCPSGlobalPoolClientNbnsIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientNbnsIPString.setStatus('current')
hh3cDHCPSGlobalPoolClientNbnsIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientNbnsIPUndo.setStatus('current')
hh3cDHCPSGlobalPoolParaUndoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undoDomain", 1), ("undoLease", 2), ("undoGateway", 3), ("undoDns", 4), ("undoNbns", 5), ("undoNbType", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolParaUndoFlag.setStatus('current')
hh3cDHCPSGlobalPoolIPInUseReset = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolIPInUseReset.setStatus('current')
hh3cDHCPSGlobalPoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 4), )
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionTable.setStatus('current')
hh3cDHCPSGlobalPoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 4, 1), ).setIndexNames((0, "HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolName"), (0, "HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolOptionCode"))
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionEntry.setStatus('current')
hh3cDHCPSGlobalPoolOptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionCode.setStatus('current')
hh3cDHCPSGlobalPoolOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2), ("ip", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionType.setStatus('current')
hh3cDHCPSGlobalPoolOptionAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionAscii.setStatus('current')
hh3cDHCPSGlobalPoolOptionHexString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 143))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionHexString.setStatus('current')
hh3cDHCPSGlobalPoolOptionIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionIPString.setStatus('current')
hh3cDHCPSGlobalPoolOptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionRowStatus.setStatus('current')
hh3cDHCPSGlobalTreeTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 5), )
if mibBuilder.loadTexts: hh3cDHCPSGlobalTreeTable.setStatus('current')
hh3cDHCPSGlobalTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 5, 1), ).setIndexNames((0, "HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolName"))
if mibBuilder.loadTexts: hh3cDHCPSGlobalTreeEntry.setStatus('current')
hh3cDHCPSGlobalTreeParentNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalTreeParentNodeName.setStatus('current')
hh3cDHCPSGlobalTreeChildNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalTreeChildNodeName.setStatus('current')
hh3cDHCPSGlobalTreePreSiblingNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalTreePreSiblingNodeName.setStatus('current')
hh3cDHCPSGlobalTreeSiblingNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalTreeSiblingNodeName.setStatus('current')
hh3cDHCPSInterfacePoolParaTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6), )
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolParaTable.setStatus('current')
hh3cDHCPSInterfacePoolParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolParaEntry.setStatus('current')
hh3cDHCPSInterfacePoolLeaseDay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolLeaseDay.setStatus('current')
hh3cDHCPSInterfacePoolLeaseHour = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolLeaseHour.setStatus('current')
hh3cDHCPSInterfacePoolLeaseMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolLeaseMinute.setStatus('current')
hh3cDHCPSInterfacePoolLeaseUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("unlimited", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolLeaseUnlimited.setStatus('current')
hh3cDHCPSInterfacePoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolDomainName.setStatus('current')
hh3cDHCPSInterfacePoolClientDNSIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolClientDNSIPString.setStatus('current')
hh3cDHCPSInterfacePoolClientDNSIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolClientDNSIPUndo.setStatus('current')
hh3cDHCPSInterfacePoolClientNetbiosType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("null", 0), ("bnode", 1), ("pnode", 2), ("mnode", 4), ("hnode", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolClientNetbiosType.setStatus('current')
hh3cDHCPSInterfacePoolClientNbnsIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolClientNbnsIPString.setStatus('current')
hh3cDHCPSInterfacePoolClientNbnsIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolClientNbnsIPUndo.setStatus('current')
hh3cDHCPSInterfacePoolParaUndoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("undoDomain", 1), ("undoLease", 2), ("undoDns", 4), ("undoNbns", 5), ("undoNbType", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolParaUndoFlag.setStatus('current')
hh3cDHCPSInterfacePoolIPInUseReset = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolIPInUseReset.setStatus('current')
hh3cDHCPSInterfacePoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 7), )
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionTable.setStatus('current')
hh3cDHCPSInterfacePoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolOptionCode"))
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionEntry.setStatus('current')
hh3cDHCPSInterfacePoolOptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionCode.setStatus('current')
hh3cDHCPSInterfacePoolOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2), ("ip", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionType.setStatus('current')
hh3cDHCPSInterfacePoolOptionAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionAscii.setStatus('current')
hh3cDHCPSInterfacePoolOptionHexString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 143))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionHexString.setStatus('current')
hh3cDHCPSInterfacePoolOptionIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionIPString.setStatus('current')
hh3cDHCPSInterfacePoolOptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 7, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionRowStatus.setStatus('current')
hh3cDHCPSInterfacePoolStaticBindTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 8), )
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolStaticBindTable.setStatus('current')
hh3cDHCPSInterfacePoolStaticBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolStaticBindIP"))
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolStaticBindEntry.setStatus('current')
hh3cDHCPSInterfacePoolStaticBindIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolStaticBindIP.setStatus('current')
hh3cDHCPSInterfacePoolStaticBindMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 8, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolStaticBindMac.setStatus('current')
hh3cDHCPSInterfacePoolStaticBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolStaticBindRowStatus.setStatus('current')
hh3cDHCPSIPInUseTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9), )
if mibBuilder.loadTexts: hh3cDHCPSIPInUseTable.setStatus('deprecated')
hh3cDHCPSIPInUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9, 1), ).setIndexNames((0, "HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseHAddr"))
if mibBuilder.loadTexts: hh3cDHCPSIPInUseEntry.setStatus('deprecated')
hh3cDHCPSIPInUseHAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseHAddr.setStatus('deprecated')
hh3cDHCPSIPInUseIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseIP.setStatus('deprecated')
hh3cDHCPSIPInUseEndLease = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseEndLease.setStatus('deprecated')
hh3cDHCPSIPInUseType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("auto", 2), ("release", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseType.setStatus('deprecated')
hh3cDHCPSIPInUsePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUsePoolName.setStatus('deprecated')
hh3cDHCPSIPInUseInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseInterface.setStatus('deprecated')
hh3cDHCPSIPInUseVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseVlan.setStatus('deprecated')
hh3cDHCPSIPInUseAtmpvc = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseAtmpvc.setStatus('deprecated')
hh3cDHCPSForbiddenIPTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 10), )
if mibBuilder.loadTexts: hh3cDHCPSForbiddenIPTable.setStatus('current')
hh3cDHCPSForbiddenIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 10, 1), ).setIndexNames((0, "HH3C-DHCPS-MIB", "hh3cDHCPSForbiddenIPStart"), (0, "HH3C-DHCPS-MIB", "hh3cDHCPSForbiddenIPEnd"))
if mibBuilder.loadTexts: hh3cDHCPSForbiddenIPEntry.setStatus('current')
hh3cDHCPSForbiddenIPStart = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSForbiddenIPStart.setStatus('current')
hh3cDHCPSForbiddenIPEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSForbiddenIPEnd.setStatus('current')
hh3cDHCPSForbiddenIPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 10, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSForbiddenIPRowStatus.setStatus('current')
hh3cDHCPSConflictIPTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 11), )
if mibBuilder.loadTexts: hh3cDHCPSConflictIPTable.setStatus('current')
hh3cDHCPSConflictIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 11, 1), ).setIndexNames((0, "HH3C-DHCPS-MIB", "hh3cDHCPSConflictIP"))
if mibBuilder.loadTexts: hh3cDHCPSConflictIPEntry.setStatus('current')
hh3cDHCPSConflictIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 11, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSConflictIP.setStatus('current')
hh3cDHCPSConflictIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ping", 1), ("arp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSConflictIPType.setStatus('current')
hh3cDHCPSConflictIPDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSConflictIPDetectTime.setStatus('current')
hh3cDHCPSServiceStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 12), Hh3cDhcpSEnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSServiceStatus.setStatus('current')
hh3cDHCPSDetectingServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 13), Hh3cDhcpSEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSDetectingServerStatus.setStatus('current')
hh3cDHCPSPingNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSPingNum.setStatus('current')
hh3cDHCPSPingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSPingTimeout.setStatus('current')
hh3cDHCPSWriteDataStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 16), Hh3cDhcpSEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSWriteDataStatus.setStatus('current')
hh3cDHCPSWriteDataDirection = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSWriteDataDirection.setStatus('current')
hh3cDHCPSWriteDataDelay = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 86400)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSWriteDataDelay.setStatus('current')
hh3cDHCPSWriteDataRecover = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 19), Hh3cDhcpSEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSWriteDataRecover.setStatus('current')
hh3cDHCPSIPInUseResetIP = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseResetIP.setStatus('current')
hh3cDHCPSConflictIPResetIP = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSConflictIPResetIP.setStatus('current')
hh3cDHCPSIPResetFlag = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("ipInUse", 1), ("conflictIp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSIPResetFlag.setStatus('current')
hh3cDHCPSGlobalPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolNumber.setStatus('current')
hh3cDHCPSGlobalPoolAutoBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolAutoBindingNum.setStatus('current')
hh3cDHCPSGlobalPoolManualBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolManualBindingNum.setStatus('current')
hh3cDHCPSGlobalPoolExpiredBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolExpiredBindingNum.setStatus('current')
hh3cDHCPSInterfacePoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolNumber.setStatus('current')
hh3cDHCPSInterfacePoolAutoBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolAutoBindingNum.setStatus('current')
hh3cDHCPSInterfacePoolManualBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolManualBindingNum.setStatus('current')
hh3cDHCPSInterfacePoolExpiredBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolExpiredBindingNum.setStatus('current')
hh3cDHCPSBadPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSBadPktNum.setStatus('current')
hh3cDHCPSBootRequestPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSBootRequestPktNum.setStatus('current')
hh3cDHCPSDiscoverPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSDiscoverPktNum.setStatus('current')
hh3cDHCPSRequestPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSRequestPktNum.setStatus('current')
hh3cDHCPSDeclinePktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSDeclinePktNum.setStatus('current')
hh3cDHCPSReleasePktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSReleasePktNum.setStatus('current')
hh3cDHCPSInformPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSInformPktNum.setStatus('current')
hh3cDHCPSBootReplyPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSBootReplyPktNum.setStatus('current')
hh3cDHCPSOfferPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSOfferPktNum.setStatus('current')
hh3cDHCPSAckPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSAckPktNum.setStatus('current')
hh3cDHCPSNakPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSNakPktNum.setStatus('current')
hh3cDHCPSStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSStatisticsReset.setStatus('current')
hh3cDHCPSIPInUseExTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43), )
if mibBuilder.loadTexts: hh3cDHCPSIPInUseExTable.setStatus('current')
hh3cDHCPSIPInUseExEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1), ).setIndexNames((0, "HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseHAddrEx"), (0, "HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseVlanIdEx"))
if mibBuilder.loadTexts: hh3cDHCPSIPInUseExEntry.setStatus('current')
hh3cDHCPSIPInUseHAddrEx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseHAddrEx.setStatus('current')
hh3cDHCPSIPInUseVlanIdEx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(60000, 60000), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseVlanIdEx.setStatus('current')
hh3cDHCPSIPInUseIPEx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseIPEx.setStatus('current')
hh3cDHCPSIPInUseEndLeaseEx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseEndLeaseEx.setStatus('current')
hh3cDHCPSIPInUseTypeEx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("auto", 2), ("release", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseTypeEx.setStatus('current')
hh3cDHCPSIPInUsePoolNameEx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUsePoolNameEx.setStatus('current')
hh3cDHCPSIPInUseIfIndexEx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseIfIndexEx.setStatus('current')
hh3cDHCPSIPInUseServerPortVlanIdEx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseServerPortVlanIdEx.setStatus('current')
hh3cDHCPSIPInUseAtmpvcEx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseAtmpvcEx.setStatus('current')
hh3cDHCPServerMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 2, 2))
hh3cDHCPServerMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 2, 2, 1))
hh3cDHCPServerMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 2, 2, 2))
hh3cDHCPServerMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 8, 2, 2, 2, 1)).setObjects(("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolName"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolRowStatus"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolType"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolNetwork"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolNetworkMask"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolHostIPAddr"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolHostMask"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolHostHAddr"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolConfigUndoFlag"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolLeaseDay"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolLeaseHour"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolLeaseMinute"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolLeaseUnlimited"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolDomainName"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolClientGatewayIPString"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolClientGatewayIPUndo"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolClientDNSIPString"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolClientDNSIPUndo"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolClientNetbiosType"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolClientNbnsIPString"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolClientNbnsIPUndo"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolParaUndoFlag"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolIPInUseReset"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolOptionCode"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolOptionType"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolOptionAscii"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolOptionHexString"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolOptionIPString"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolOptionRowStatus"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalTreeParentNodeName"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalTreeChildNodeName"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalTreePreSiblingNodeName"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalTreeSiblingNodeName"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolLeaseDay"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolLeaseHour"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolLeaseMinute"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolLeaseUnlimited"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolDomainName"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolClientDNSIPString"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolClientDNSIPUndo"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolClientNetbiosType"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolClientNbnsIPString"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolClientNbnsIPUndo"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolParaUndoFlag"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolIPInUseReset"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolOptionCode"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolOptionType"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolOptionAscii"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolOptionHexString"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolOptionIPString"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolOptionRowStatus"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolStaticBindIP"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolStaticBindMac"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolStaticBindRowStatus"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseHAddr"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseIP"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseEndLease"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseType"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUsePoolName"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseInterface"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseVlan"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseAtmpvc"), ("HH3C-DHCPS-MIB", "hh3cDHCPSForbiddenIPStart"), ("HH3C-DHCPS-MIB", "hh3cDHCPSForbiddenIPEnd"), ("HH3C-DHCPS-MIB", "hh3cDHCPSForbiddenIPRowStatus"), ("HH3C-DHCPS-MIB", "hh3cDHCPSConflictIP"), ("HH3C-DHCPS-MIB", "hh3cDHCPSConflictIPType"), ("HH3C-DHCPS-MIB", "hh3cDHCPSConflictIPDetectTime"), ("HH3C-DHCPS-MIB", "hh3cDHCPSServiceStatus"), ("HH3C-DHCPS-MIB", "hh3cDHCPSDetectingServerStatus"), ("HH3C-DHCPS-MIB", "hh3cDHCPSPingNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSPingTimeout"), ("HH3C-DHCPS-MIB", "hh3cDHCPSWriteDataStatus"), ("HH3C-DHCPS-MIB", "hh3cDHCPSWriteDataDirection"), ("HH3C-DHCPS-MIB", "hh3cDHCPSWriteDataDelay"), ("HH3C-DHCPS-MIB", "hh3cDHCPSWriteDataRecover"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseResetIP"), ("HH3C-DHCPS-MIB", "hh3cDHCPSConflictIPResetIP"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPResetFlag"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolNumber"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolAutoBindingNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolManualBindingNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolExpiredBindingNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolNumber"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolAutoBindingNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolManualBindingNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolExpiredBindingNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSBadPktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSBootRequestPktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSDiscoverPktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSRequestPktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSDeclinePktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSReleasePktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInformPktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSBootReplyPktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSOfferPktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSAckPktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSNakPktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSStatisticsReset"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseHAddrEx"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseVlanIdEx"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseIPEx"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseEndLeaseEx"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseTypeEx"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUsePoolNameEx"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseIfIndexEx"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseServerPortVlanIdEx"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseAtmpvcEx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDHCPServerMIBGroup = hh3cDHCPServerMIBGroup.setStatus('current')
mibBuilder.exportSymbols("HH3C-DHCPS-MIB", hh3cDHCPSBadPktNum=hh3cDHCPSBadPktNum, hh3cDHCPSConflictIPType=hh3cDHCPSConflictIPType, hh3cDHCPSGlobalPoolParaEntry=hh3cDHCPSGlobalPoolParaEntry, hh3cDHCPSIPInUsePoolNameEx=hh3cDHCPSIPInUsePoolNameEx, hh3cDHCPSNakPktNum=hh3cDHCPSNakPktNum, hh3cDHCPSGlobalPoolNumber=hh3cDHCPSGlobalPoolNumber, hh3cDHCPSInterfacePoolManualBindingNum=hh3cDHCPSInterfacePoolManualBindingNum, hh3cDHCPSInterfacePoolDomainName=hh3cDHCPSInterfacePoolDomainName, hh3cDHCPSInterfacePoolClientDNSIPUndo=hh3cDHCPSInterfacePoolClientDNSIPUndo, hh3cDHCPSGlobalPoolClientGatewayIPUndo=hh3cDHCPSGlobalPoolClientGatewayIPUndo, hh3cDHCPSInterfacePoolLeaseUnlimited=hh3cDHCPSInterfacePoolLeaseUnlimited, hh3cDHCPSIPInUseExTable=hh3cDHCPSIPInUseExTable, hh3cDHCPSStatisticsReset=hh3cDHCPSStatisticsReset, hh3cDHCPSInterfacePoolParaEntry=hh3cDHCPSInterfacePoolParaEntry, hh3cDHCPSInterfacePoolExpiredBindingNum=hh3cDHCPSInterfacePoolExpiredBindingNum, hh3cDHCPSGlobalPoolConfigUndoFlag=hh3cDHCPSGlobalPoolConfigUndoFlag, hh3cDHCPSWriteDataRecover=hh3cDHCPSWriteDataRecover, hh3cDHCPSIPInUseIPEx=hh3cDHCPSIPInUseIPEx, hh3cDHCPSInterfacePoolStaticBindRowStatus=hh3cDHCPSInterfacePoolStaticBindRowStatus, hh3cDHCPSGlobalPoolOptionRowStatus=hh3cDHCPSGlobalPoolOptionRowStatus, hh3cDHCPSIPInUseInterface=hh3cDHCPSIPInUseInterface, hh3cDHCPSGlobalPoolOptionType=hh3cDHCPSGlobalPoolOptionType, hh3cDHCPSWriteDataDirection=hh3cDHCPSWriteDataDirection, hh3cDHCPSGlobalPoolLeaseMinute=hh3cDHCPSGlobalPoolLeaseMinute, hh3cDHCPSInterfacePoolLeaseMinute=hh3cDHCPSInterfacePoolLeaseMinute, hh3cDHCPSIPInUseHAddr=hh3cDHCPSIPInUseHAddr, hh3cDHCPSIPInUseResetIP=hh3cDHCPSIPInUseResetIP, hh3cDHCPSInformPktNum=hh3cDHCPSInformPktNum, hh3cDHCPSRequestPktNum=hh3cDHCPSRequestPktNum, hh3cDHCPSIPInUseAtmpvc=hh3cDHCPSIPInUseAtmpvc, hh3cDHCPSForbiddenIPEntry=hh3cDHCPSForbiddenIPEntry, hh3cDHCPSGlobalPoolHostIPAddr=hh3cDHCPSGlobalPoolHostIPAddr, hh3cDHCPSIPInUseTypeEx=hh3cDHCPSIPInUseTypeEx, hh3cDHCPSGlobalPoolParaTable=hh3cDHCPSGlobalPoolParaTable, hh3cDHCPSInterfacePoolStaticBindMac=hh3cDHCPSInterfacePoolStaticBindMac, hh3cDHCPSConflictIP=hh3cDHCPSConflictIP, hh3cDHCPSInterfacePoolNumber=hh3cDHCPSInterfacePoolNumber, hh3cDHCPSDetectingServerStatus=hh3cDHCPSDetectingServerStatus, hh3cDHCPSIPInUseVlanIdEx=hh3cDHCPSIPInUseVlanIdEx, hh3cDHCPSGlobalPoolLeaseDay=hh3cDHCPSGlobalPoolLeaseDay, hh3cDHCPSIPInUseIP=hh3cDHCPSIPInUseIP, hh3cDHCPSConflictIPDetectTime=hh3cDHCPSConflictIPDetectTime, hh3cDHCPSGlobalPoolOptionTable=hh3cDHCPSGlobalPoolOptionTable, hh3cDHCPSGlobalPoolClientDNSIPString=hh3cDHCPSGlobalPoolClientDNSIPString, hh3cDHCPSInterfacePoolStaticBindIP=hh3cDHCPSInterfacePoolStaticBindIP, hh3cDHCPSDeclinePktNum=hh3cDHCPSDeclinePktNum, hh3cDHCPSGlobalPoolConfigTable=hh3cDHCPSGlobalPoolConfigTable, hh3cDHCPSInterfacePoolClientNbnsIPString=hh3cDHCPSInterfacePoolClientNbnsIPString, hh3cDHCPSGlobalPoolLeaseUnlimited=hh3cDHCPSGlobalPoolLeaseUnlimited, hh3cDHCPSInterfacePoolOptionTable=hh3cDHCPSInterfacePoolOptionTable, hh3cDHCPSBootRequestPktNum=hh3cDHCPSBootRequestPktNum, hh3cDHCPSInterfacePoolOptionRowStatus=hh3cDHCPSInterfacePoolOptionRowStatus, hh3cDHCPServerMib=hh3cDHCPServerMib, hh3cDHCPSGlobalPoolParaUndoFlag=hh3cDHCPSGlobalPoolParaUndoFlag, hh3cDHCPSGlobalPoolLeaseHour=hh3cDHCPSGlobalPoolLeaseHour, hh3cDHCPSIPInUseHAddrEx=hh3cDHCPSIPInUseHAddrEx, hh3cDHCPSInterfacePoolParaUndoFlag=hh3cDHCPSInterfacePoolParaUndoFlag, hh3cDHCPSInterfacePoolOptionIPString=hh3cDHCPSInterfacePoolOptionIPString, hh3cDHCPSIPInUseExEntry=hh3cDHCPSIPInUseExEntry, hh3cDHCPSGlobalPoolClientGatewayIPString=hh3cDHCPSGlobalPoolClientGatewayIPString, hh3cDHCPSForbiddenIPRowStatus=hh3cDHCPSForbiddenIPRowStatus, hh3cDHCPSPingNum=hh3cDHCPSPingNum, hh3cDHCPSForbiddenIPEnd=hh3cDHCPSForbiddenIPEnd, hh3cDHCPSPingTimeout=hh3cDHCPSPingTimeout, hh3cDHCPSInterfacePoolLeaseDay=hh3cDHCPSInterfacePoolLeaseDay, hh3cDHCPSInterfacePoolClientNbnsIPUndo=hh3cDHCPSInterfacePoolClientNbnsIPUndo, hh3cDHCPSInterfacePoolIPInUseReset=hh3cDHCPSInterfacePoolIPInUseReset, hh3cDHCPSGlobalTreePreSiblingNodeName=hh3cDHCPSGlobalTreePreSiblingNodeName, hh3cDHCPSIPInUseIfIndexEx=hh3cDHCPSIPInUseIfIndexEx, hh3cDHCPSReleasePktNum=hh3cDHCPSReleasePktNum, hh3cDHCPSGlobalPoolClientDNSIPUndo=hh3cDHCPSGlobalPoolClientDNSIPUndo, hh3cDHCPSGlobalTreeEntry=hh3cDHCPSGlobalTreeEntry, hh3cDHCPSForbiddenIPTable=hh3cDHCPSForbiddenIPTable, hh3cDHCPSWriteDataStatus=hh3cDHCPSWriteDataStatus, hh3cDHCPServerMibObject=hh3cDHCPServerMibObject, hh3cDHCPSInterfacePoolParaTable=hh3cDHCPSInterfacePoolParaTable, hh3cDHCPSInterfacePoolOptionCode=hh3cDHCPSInterfacePoolOptionCode, hh3cDHCPSConflictIPTable=hh3cDHCPSConflictIPTable, hh3cDHCPSGlobalPoolClientNetbiosType=hh3cDHCPSGlobalPoolClientNetbiosType, hh3cDHCPSDiscoverPktNum=hh3cDHCPSDiscoverPktNum, hh3cDHCPSBootReplyPktNum=hh3cDHCPSBootReplyPktNum, hh3cDHCPSIPInUseEntry=hh3cDHCPSIPInUseEntry, hh3cDHCPSInterfacePoolAutoBindingNum=hh3cDHCPSInterfacePoolAutoBindingNum, hh3cDHCPSOfferPktNum=hh3cDHCPSOfferPktNum, hh3cDHCPSGlobalPoolConfigEntry=hh3cDHCPSGlobalPoolConfigEntry, hh3cDHCPSInterfacePoolOptionAscii=hh3cDHCPSInterfacePoolOptionAscii, hh3cDHCPSGlobalPoolDomainName=hh3cDHCPSGlobalPoolDomainName, hh3cDHCPSAckPktNum=hh3cDHCPSAckPktNum, hh3cDHCPServerMIBGroups=hh3cDHCPServerMIBGroups, hh3cDHCPSInterfacePoolStaticBindTable=hh3cDHCPSInterfacePoolStaticBindTable, hh3cDHCPSGlobalTreeParentNodeName=hh3cDHCPSGlobalTreeParentNodeName, hh3cDHCPSGlobalPoolClientNbnsIPUndo=hh3cDHCPSGlobalPoolClientNbnsIPUndo, hh3cDHCPSGlobalPoolEntry=hh3cDHCPSGlobalPoolEntry, hh3cDHCPSInterfacePoolOptionHexString=hh3cDHCPSInterfacePoolOptionHexString, hh3cDHCPSInterfacePoolClientDNSIPString=hh3cDHCPSInterfacePoolClientDNSIPString, hh3cDHCPSInterfacePoolStaticBindEntry=hh3cDHCPSInterfacePoolStaticBindEntry, hh3cDHCPSConflictIPResetIP=hh3cDHCPSConflictIPResetIP, hh3cDHCPSIPResetFlag=hh3cDHCPSIPResetFlag, hh3cDHCPSGlobalPoolOptionAscii=hh3cDHCPSGlobalPoolOptionAscii, PYSNMP_MODULE_ID=hh3cDHCPServerMib, hh3cDHCPSIPInUsePoolName=hh3cDHCPSIPInUsePoolName, hh3cDHCPSGlobalPoolManualBindingNum=hh3cDHCPSGlobalPoolManualBindingNum, hh3cDHCPSIPInUseServerPortVlanIdEx=hh3cDHCPSIPInUseServerPortVlanIdEx, hh3cDHCPSIPInUseEndLease=hh3cDHCPSIPInUseEndLease, hh3cDHCPSIPInUseType=hh3cDHCPSIPInUseType, hh3cDHCPSGlobalPoolIPInUseReset=hh3cDHCPSGlobalPoolIPInUseReset, hh3cDHCPSForbiddenIPStart=hh3cDHCPSForbiddenIPStart, hh3cDHCPSGlobalPoolHostHAddr=hh3cDHCPSGlobalPoolHostHAddr, hh3cDHCPSIPInUseTable=hh3cDHCPSIPInUseTable, hh3cDHCPServerMIBGroup=hh3cDHCPServerMIBGroup, hh3cDHCPSGlobalPoolNetwork=hh3cDHCPSGlobalPoolNetwork, hh3cDHCPSGlobalPoolOptionEntry=hh3cDHCPSGlobalPoolOptionEntry, hh3cDHCPSGlobalPoolName=hh3cDHCPSGlobalPoolName, hh3cDHCPSGlobalTreeSiblingNodeName=hh3cDHCPSGlobalTreeSiblingNodeName, hh3cDHCPSInterfacePoolOptionEntry=hh3cDHCPSInterfacePoolOptionEntry, hh3cDHCPSGlobalPoolRowStatus=hh3cDHCPSGlobalPoolRowStatus, hh3cDHCPSGlobalPoolType=hh3cDHCPSGlobalPoolType, hh3cDHCPSGlobalPoolTable=hh3cDHCPSGlobalPoolTable, hh3cDHCPSWriteDataDelay=hh3cDHCPSWriteDataDelay, Hh3cDhcpSEnabledStatus=Hh3cDhcpSEnabledStatus, hh3cDHCPSIPInUseVlan=hh3cDHCPSIPInUseVlan, hh3cDHCPSGlobalPoolOptionHexString=hh3cDHCPSGlobalPoolOptionHexString, hh3cDHCPSIPInUseAtmpvcEx=hh3cDHCPSIPInUseAtmpvcEx, hh3cDHCPSGlobalPoolClientNbnsIPString=hh3cDHCPSGlobalPoolClientNbnsIPString, hh3cDHCPSConflictIPEntry=hh3cDHCPSConflictIPEntry, hh3cDHCPServerMIBConformance=hh3cDHCPServerMIBConformance, hh3cDHCPSGlobalPoolAutoBindingNum=hh3cDHCPSGlobalPoolAutoBindingNum, hh3cDHCPSGlobalPoolNetworkMask=hh3cDHCPSGlobalPoolNetworkMask, hh3cDHCPSIPInUseEndLeaseEx=hh3cDHCPSIPInUseEndLeaseEx, hh3cDHCPSGlobalPoolHostMask=hh3cDHCPSGlobalPoolHostMask, hh3cDHCPSGlobalPoolOptionCode=hh3cDHCPSGlobalPoolOptionCode, hh3cDHCPServerMIBCompliances=hh3cDHCPServerMIBCompliances, hh3cDHCPSInterfacePoolOptionType=hh3cDHCPSInterfacePoolOptionType, hh3cDHCPSInterfacePoolLeaseHour=hh3cDHCPSInterfacePoolLeaseHour, hh3cDHCPSInterfacePoolClientNetbiosType=hh3cDHCPSInterfacePoolClientNetbiosType, hh3cDHCPSServiceStatus=hh3cDHCPSServiceStatus, hh3cDHCPSGlobalTreeTable=hh3cDHCPSGlobalTreeTable, hh3cDHCPSGlobalPoolExpiredBindingNum=hh3cDHCPSGlobalPoolExpiredBindingNum, hh3cDHCPSGlobalTreeChildNodeName=hh3cDHCPSGlobalTreeChildNodeName, hh3cDHCPSGlobalPoolOptionIPString=hh3cDHCPSGlobalPoolOptionIPString)
