#
# PySNMP MIB module WATCHGUARD-IPSEC-TUNNEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WATCHGUARD-IPSEC-TUNNEL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:29:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ModuleIdentity, TimeTicks, Bits, Gauge32, MibIdentifier, IpAddress, Unsigned32, enterprises, NotificationType, ObjectIdentity, Integer32, iso, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "TimeTicks", "Bits", "Gauge32", "MibIdentifier", "IpAddress", "Unsigned32", "enterprises", "NotificationType", "ObjectIdentity", "Integer32", "iso", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DateAndTime, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "DisplayString")
watchguard, = mibBuilder.importSymbols("WATCHGUARD-MIB", "watchguard")
wgInfoModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3097, 6))
wgInfoModule.setRevisions(('2007-01-25 12:00',))
if mibBuilder.loadTexts: wgInfoModule.setLastUpdated('200701251200Z')
if mibBuilder.loadTexts: wgInfoModule.setOrganization('WatchGuard Technologies, Inc.')
wgIpsecTunnelMIB = ObjectIdentity((1, 3, 6, 1, 4, 1, 3097, 6, 5))
if mibBuilder.loadTexts: wgIpsecTunnelMIB.setStatus('current')
wgIpsecTunnel = ObjectIdentity((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1))
if mibBuilder.loadTexts: wgIpsecTunnel.setStatus('current')
wgIpsecTunnelNum = MibScalar((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelNum.setStatus('current')
wgIpsecTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2), )
if mibBuilder.loadTexts: wgIpsecTunnelTable.setStatus('current')
wgIpsecTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1), ).setIndexNames((0, "WATCHGUARD-IPSEC-TUNNEL-MIB", "wgIpsecTunnelID"))
if mibBuilder.loadTexts: wgIpsecTunnelEntry.setStatus('current')
wgIpsecTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelID.setStatus('current')
wgIpsecTunnelLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelLocalAddr.setStatus('current')
wgIpsecTunnelPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelPeerAddr.setStatus('current')
wgIpsecTunnelInSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelInSpi.setStatus('current')
wgIpsecTunnelOutSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelOutSpi.setStatus('current')
wgIpsecTunnelCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelCreateTime.setStatus('current')
wgIpsecTunnelDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelDeviceID.setStatus('current')
wgIpsecTunnelEspEncryptAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("des", 2), ("three-des", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelEspEncryptAlg.setStatus('current')
wgIpsecTunnelEspAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("md5", 2), ("sha", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelEspAuthAlg.setStatus('current')
wgIpsecTunnelAhAuthAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("md5", 2), ("sha", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelAhAuthAlg.setStatus('current')
wgIpsecTunnelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("tunnel", 1), ("transport", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelMode.setStatus('current')
wgIpsecTunnelKeyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("manual", 1), ("auto-ike", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelKeyMode.setStatus('current')
wgIpsecTunnelLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelLifeTime.setStatus('current')
wgIpsecTunnelLifeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelLifeLength.setStatus('current')
wgIpsecTunnelInSaBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelInSaBytes.setStatus('current')
wgIpsecTunnelOutSaBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelOutSaBytes.setStatus('current')
wgIpsecTunnelAccSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelAccSecs.setStatus('current')
wgIpsecTunnelSelectorProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6, 8, 12, 17, 22, 29, 41, 43, 44, 46, 47, 50, 51, 58, 59, 60, 92, 98, 103, 255))).clone(namedValues=NamedValues(("any", 0), ("icmp", 1), ("igmp", 2), ("ipip", 4), ("tcp", 6), ("egp", 8), ("pup", 12), ("udp", 17), ("idp", 22), ("tp", 29), ("ipv6", 41), ("ipv6-routing", 43), ("ipv6-fragmentation", 44), ("rsvp", 46), ("gre", 47), ("esp", 50), ("ah", 51), ("icmpv6", 58), ("none", 59), ("dstopts", 60), ("mtp", 92), ("encap", 98), ("pim", 103), ("raw", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelSelectorProtocol.setStatus('current')
wgIpsecTunnelSelectorRemoteIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip-addr-single", 1), ("ip-addr-subnet", 2), ("ip-addr-range", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelSelectorRemoteIPType.setStatus('current')
wgIpsecTunnelSelectorRemoteIPOne = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelSelectorRemoteIPOne.setStatus('current')
wgIpsecTunnelSelectorRemoteIPTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelSelectorRemoteIPTwo.setStatus('current')
wgIpsecTunnelSelectorRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelSelectorRemotePort.setStatus('current')
wgIpsecTunnelSelectorLocalIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip-addr-single", 1), ("ip-addr-subnet", 2), ("ip-addr-range", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelSelectorLocalIPType.setStatus('current')
wgIpsecTunnelSelectorLocalIPOne = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelSelectorLocalIPOne.setStatus('current')
wgIpsecTunnelSelectorLocalIPTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelSelectorLocalIPTwo.setStatus('current')
wgIpsecTunnelSelectorLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelSelectorLocalPort.setStatus('current')
wgIpsecTunnelNumRekey = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelNumRekey.setStatus('current')
wgIpsecTunnelInKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 28), Counter32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelInKbytes.setStatus('current')
wgIpsecTunnelOutKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 29), Counter32()).setUnits('Kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelOutKbytes.setStatus('current')
wgIpsecTunnelInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelInPackets.setStatus('current')
wgIpsecTunnelOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelOutPackets.setStatus('current')
wgIpsecTunnelInDecryptErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelInDecryptErrors.setStatus('current')
wgIpsecTunnelInAuthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelInAuthErrors.setStatus('current')
wgIpsecTunnelInReplayErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelInReplayErrors.setStatus('current')
wgIpsecTunnelInOtherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelInOtherErrors.setStatus('current')
wgIpsecTunnelOutDecryptErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelOutDecryptErrors.setStatus('current')
wgIpsecTunnelOutAuthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelOutAuthErrors.setStatus('current')
wgIpsecTunnelOutReplayErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelOutReplayErrors.setStatus('current')
wgIpsecTunnelOutOtherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelOutOtherErrors.setStatus('current')
wgIpsecTunnelUdpEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelUdpEncap.setStatus('current')
wgIpsecTunnelPeerUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelPeerUdpPort.setStatus('current')
wgIpsecTunnelOrigPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3097, 6, 5, 1, 2, 1, 42), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wgIpsecTunnelOrigPeerAddr.setStatus('current')
mibBuilder.exportSymbols("WATCHGUARD-IPSEC-TUNNEL-MIB", wgIpsecTunnelNum=wgIpsecTunnelNum, wgIpsecTunnelUdpEncap=wgIpsecTunnelUdpEncap, wgIpsecTunnelAhAuthAlg=wgIpsecTunnelAhAuthAlg, wgIpsecTunnelLocalAddr=wgIpsecTunnelLocalAddr, wgIpsecTunnelOutSaBytes=wgIpsecTunnelOutSaBytes, wgIpsecTunnelMode=wgIpsecTunnelMode, wgIpsecTunnelSelectorLocalIPTwo=wgIpsecTunnelSelectorLocalIPTwo, wgIpsecTunnelSelectorRemoteIPTwo=wgIpsecTunnelSelectorRemoteIPTwo, wgIpsecTunnelSelectorLocalIPType=wgIpsecTunnelSelectorLocalIPType, wgIpsecTunnelInAuthErrors=wgIpsecTunnelInAuthErrors, wgIpsecTunnelOutOtherErrors=wgIpsecTunnelOutOtherErrors, wgIpsecTunnelOrigPeerAddr=wgIpsecTunnelOrigPeerAddr, wgInfoModule=wgInfoModule, wgIpsecTunnelInOtherErrors=wgIpsecTunnelInOtherErrors, wgIpsecTunnelOutKbytes=wgIpsecTunnelOutKbytes, wgIpsecTunnelInReplayErrors=wgIpsecTunnelInReplayErrors, wgIpsecTunnelAccSecs=wgIpsecTunnelAccSecs, wgIpsecTunnelInSpi=wgIpsecTunnelInSpi, wgIpsecTunnelLifeTime=wgIpsecTunnelLifeTime, wgIpsecTunnelSelectorRemoteIPType=wgIpsecTunnelSelectorRemoteIPType, wgIpsecTunnelCreateTime=wgIpsecTunnelCreateTime, wgIpsecTunnelMIB=wgIpsecTunnelMIB, PYSNMP_MODULE_ID=wgInfoModule, wgIpsecTunnelKeyMode=wgIpsecTunnelKeyMode, wgIpsecTunnelEntry=wgIpsecTunnelEntry, wgIpsecTunnelSelectorRemotePort=wgIpsecTunnelSelectorRemotePort, wgIpsecTunnelEspEncryptAlg=wgIpsecTunnelEspEncryptAlg, wgIpsecTunnelPeerAddr=wgIpsecTunnelPeerAddr, wgIpsecTunnelInDecryptErrors=wgIpsecTunnelInDecryptErrors, wgIpsecTunnelInPackets=wgIpsecTunnelInPackets, wgIpsecTunnelOutDecryptErrors=wgIpsecTunnelOutDecryptErrors, wgIpsecTunnel=wgIpsecTunnel, wgIpsecTunnelInSaBytes=wgIpsecTunnelInSaBytes, wgIpsecTunnelOutPackets=wgIpsecTunnelOutPackets, wgIpsecTunnelLifeLength=wgIpsecTunnelLifeLength, wgIpsecTunnelOutAuthErrors=wgIpsecTunnelOutAuthErrors, wgIpsecTunnelSelectorRemoteIPOne=wgIpsecTunnelSelectorRemoteIPOne, wgIpsecTunnelInKbytes=wgIpsecTunnelInKbytes, wgIpsecTunnelOutReplayErrors=wgIpsecTunnelOutReplayErrors, wgIpsecTunnelTable=wgIpsecTunnelTable, wgIpsecTunnelSelectorLocalIPOne=wgIpsecTunnelSelectorLocalIPOne, wgIpsecTunnelNumRekey=wgIpsecTunnelNumRekey, wgIpsecTunnelID=wgIpsecTunnelID, wgIpsecTunnelEspAuthAlg=wgIpsecTunnelEspAuthAlg, wgIpsecTunnelPeerUdpPort=wgIpsecTunnelPeerUdpPort, wgIpsecTunnelOutSpi=wgIpsecTunnelOutSpi, wgIpsecTunnelSelectorProtocol=wgIpsecTunnelSelectorProtocol, wgIpsecTunnelSelectorLocalPort=wgIpsecTunnelSelectorLocalPort, wgIpsecTunnelDeviceID=wgIpsecTunnelDeviceID)
