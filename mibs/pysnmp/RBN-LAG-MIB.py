#
# PySNMP MIB module RBN-LAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-LAG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:44:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
RbnPort, RbnSlot = mibBuilder.importSymbols("RBN-TC", "RbnPort", "RbnSlot")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, Gauge32, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, MibIdentifier, NotificationType, TimeTicks, Bits, Counter64, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "MibIdentifier", "NotificationType", "TimeTicks", "Bits", "Counter64", "Counter32", "ModuleIdentity")
DateAndTime, DisplayString, TextualConvention, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention", "TruthValue", "MacAddress")
rbnMcLagMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 102))
rbnMcLagMIB.setRevisions(('2012-06-01 18:00',))
if mibBuilder.loadTexts: rbnMcLagMIB.setLastUpdated('201206011800Z')
if mibBuilder.loadTexts: rbnMcLagMIB.setOrganization('Ericsson AB.')
rbnMcLagNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 102, 0))
rbnMcLagObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1))
rbnMcLagConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 102, 2))
rbnMcLagTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1), )
if mibBuilder.loadTexts: rbnMcLagTable.setStatus('current')
rbnMcLagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1), ).setIndexNames((0, "RBN-LAG-MIB", "rbnMcLagName"))
if mibBuilder.loadTexts: rbnMcLagEntry.setStatus('current')
rbnMcLagName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: rbnMcLagName.setStatus('current')
rbnMcLagId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagId.setStatus('current')
rbnMcLagSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagSystemPriority.setStatus('current')
rbnMcLagSystemMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagSystemMacAddress.setStatus('current')
rbnMcLagRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagRevertiveMode.setStatus('current')
rbnMcLagRevertiveHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagRevertiveHoldTimer.setStatus('current')
rbnMcLagOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagOperState.setStatus('current')
rbnMcLagOperErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noError", 0), ("configMismatch", 1), ("priorityError", 2), ("downMinLink", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagOperErrorCode.setStatus('current')
rbnMcLagSwitchOverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagSwitchOverTime.setStatus('current')
rbnMcLagSwitchOverReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagSwitchOverReason.setStatus('current')
rbnMcLagConstituentTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 2), )
if mibBuilder.loadTexts: rbnMcLagConstituentTable.setStatus('current')
rbnMcLagConstituentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 2, 1), ).setIndexNames((0, "RBN-LAG-MIB", "rbnMcLagName"), (0, "RBN-LAG-MIB", "rbnMcLagConstituentSlot"), (0, "RBN-LAG-MIB", "rbnMcLagConstituentPort"))
if mibBuilder.loadTexts: rbnMcLagConstituentEntry.setStatus('current')
rbnMcLagConstituentSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 2, 1, 1), RbnSlot())
if mibBuilder.loadTexts: rbnMcLagConstituentSlot.setStatus('current')
rbnMcLagConstituentPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 2, 1, 2), RbnPort())
if mibBuilder.loadTexts: rbnMcLagConstituentPort.setStatus('current')
rbnMcLagConstituentPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagConstituentPortPriority.setStatus('current')
rbnMcLagConstituentPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 102, 1, 2, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMcLagConstituentPortIfIndex.setStatus('current')
rbnMcLagSwitchOverEvent = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 102, 0, 1)).setObjects(("RBN-LAG-MIB", "rbnMcLagOperState"), ("RBN-LAG-MIB", "rbnMcLagSwitchOverReason"))
if mibBuilder.loadTexts: rbnMcLagSwitchOverEvent.setStatus('current')
rbnMcLagOperFailed = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 102, 0, 2)).setObjects(("RBN-LAG-MIB", "rbnMcLagOperState"), ("RBN-LAG-MIB", "rbnMcLagOperErrorCode"))
if mibBuilder.loadTexts: rbnMcLagOperFailed.setStatus('current')
rbnMcLagOperFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 102, 0, 3)).setObjects(("RBN-LAG-MIB", "rbnMcLagOperState"))
if mibBuilder.loadTexts: rbnMcLagOperFailureCleared.setStatus('current')
rbnMcLagConstituentPortUp = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 102, 0, 4)).setObjects(("RBN-LAG-MIB", "rbnMcLagConstituentPortPriority"), ("RBN-LAG-MIB", "rbnMcLagConstituentPortIfIndex"))
if mibBuilder.loadTexts: rbnMcLagConstituentPortUp.setStatus('current')
rbnMcLagConstituentPortDown = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 102, 0, 5)).setObjects(("RBN-LAG-MIB", "rbnMcLagConstituentPortPriority"), ("RBN-LAG-MIB", "rbnMcLagConstituentPortIfIndex"))
if mibBuilder.loadTexts: rbnMcLagConstituentPortDown.setStatus('current')
rbnMcLagGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 102, 2, 1))
rbnMcLagCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 102, 2, 2))
rbnMcLagModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 102, 2, 2, 1)).setObjects(("RBN-LAG-MIB", "rbnMcLagObjectGroup"), ("RBN-LAG-MIB", "rbnMcLagNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnMcLagModuleCompliance = rbnMcLagModuleCompliance.setStatus('current')
rbnMcLagObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 102, 2, 1, 1)).setObjects(("RBN-LAG-MIB", "rbnMcLagId"), ("RBN-LAG-MIB", "rbnMcLagSystemPriority"), ("RBN-LAG-MIB", "rbnMcLagSystemMacAddress"), ("RBN-LAG-MIB", "rbnMcLagRevertiveMode"), ("RBN-LAG-MIB", "rbnMcLagRevertiveHoldTimer"), ("RBN-LAG-MIB", "rbnMcLagOperState"), ("RBN-LAG-MIB", "rbnMcLagOperErrorCode"), ("RBN-LAG-MIB", "rbnMcLagSwitchOverTime"), ("RBN-LAG-MIB", "rbnMcLagSwitchOverReason"), ("RBN-LAG-MIB", "rbnMcLagConstituentPortPriority"), ("RBN-LAG-MIB", "rbnMcLagConstituentPortIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnMcLagObjectGroup = rbnMcLagObjectGroup.setStatus('current')
rbnMcLagNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 102, 2, 1, 2)).setObjects(("RBN-LAG-MIB", "rbnMcLagSwitchOverEvent"), ("RBN-LAG-MIB", "rbnMcLagOperFailed"), ("RBN-LAG-MIB", "rbnMcLagOperFailureCleared"), ("RBN-LAG-MIB", "rbnMcLagConstituentPortUp"), ("RBN-LAG-MIB", "rbnMcLagConstituentPortDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnMcLagNotificationGroup = rbnMcLagNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("RBN-LAG-MIB", rbnMcLagEntry=rbnMcLagEntry, rbnMcLagSwitchOverReason=rbnMcLagSwitchOverReason, rbnMcLagConstituentPortDown=rbnMcLagConstituentPortDown, rbnMcLagOperFailureCleared=rbnMcLagOperFailureCleared, rbnMcLagTable=rbnMcLagTable, rbnMcLagConformance=rbnMcLagConformance, rbnMcLagConstituentEntry=rbnMcLagConstituentEntry, rbnMcLagConstituentPortUp=rbnMcLagConstituentPortUp, rbnMcLagModuleCompliance=rbnMcLagModuleCompliance, rbnMcLagCompliances=rbnMcLagCompliances, rbnMcLagId=rbnMcLagId, rbnMcLagSwitchOverTime=rbnMcLagSwitchOverTime, rbnMcLagGroups=rbnMcLagGroups, rbnMcLagRevertiveMode=rbnMcLagRevertiveMode, rbnMcLagObjects=rbnMcLagObjects, rbnMcLagMIB=rbnMcLagMIB, rbnMcLagOperErrorCode=rbnMcLagOperErrorCode, rbnMcLagSwitchOverEvent=rbnMcLagSwitchOverEvent, rbnMcLagConstituentSlot=rbnMcLagConstituentSlot, PYSNMP_MODULE_ID=rbnMcLagMIB, rbnMcLagSystemMacAddress=rbnMcLagSystemMacAddress, rbnMcLagObjectGroup=rbnMcLagObjectGroup, rbnMcLagNotificationGroup=rbnMcLagNotificationGroup, rbnMcLagOperState=rbnMcLagOperState, rbnMcLagConstituentTable=rbnMcLagConstituentTable, rbnMcLagRevertiveHoldTimer=rbnMcLagRevertiveHoldTimer, rbnMcLagConstituentPortIfIndex=rbnMcLagConstituentPortIfIndex, rbnMcLagConstituentPort=rbnMcLagConstituentPort, rbnMcLagConstituentPortPriority=rbnMcLagConstituentPortPriority, rbnMcLagName=rbnMcLagName, rbnMcLagOperFailed=rbnMcLagOperFailed, rbnMcLagNotifications=rbnMcLagNotifications, rbnMcLagSystemPriority=rbnMcLagSystemPriority)
