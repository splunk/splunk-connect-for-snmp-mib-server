#
# PySNMP MIB module H3C-HPEOC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-HPEOC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:09:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Counter32, ObjectIdentity, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Bits, TimeTicks, Integer32, MibIdentifier, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "ObjectIdentity", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Bits", "TimeTicks", "Integer32", "MibIdentifier", "Gauge32", "IpAddress")
MacAddress, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "TruthValue", "DisplayString")
h3cHPEOC = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84))
if mibBuilder.loadTexts: h3cHPEOC.setLastUpdated('200708281008Z')
if mibBuilder.loadTexts: h3cHPEOC.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
h3cHPEOCSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1))
h3cHPEOCCltVlanType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ieee8021q", 1), ("portbased", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCCltVlanType.setStatus('current')
h3cHPEOCCltVlanManTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 2), )
if mibBuilder.loadTexts: h3cHPEOCCltVlanManTable.setStatus('current')
h3cHPEOCCltVlanManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cHPEOCCltVlanManEntry.setStatus('current')
h3cHPEOCCltEthPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("debug", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCCltEthPortType.setStatus('current')
h3cHPEOCCltSysManTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 3), )
if mibBuilder.loadTexts: h3cHPEOCCltSysManTable.setStatus('current')
h3cHPEOCCltSysManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cHPEOCCltSysManEntry.setStatus('current')
h3cHPEOCCltDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCCltDescr.setStatus('current')
h3cHPEOCCltFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCCltFwVersion.setStatus('current')
h3cHPEOCCnuSysManTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 4), )
if mibBuilder.loadTexts: h3cHPEOCCnuSysManTable.setStatus('current')
h3cHPEOCCnuSysManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cHPEOCCnuSysManEntry.setStatus('current')
h3cHPEOCCnuBcastControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCCnuBcastControl.setStatus('current')
h3cHPEOCCnuAnonymStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCCnuAnonymStatus.setStatus('current')
h3cHPEOCCnuMacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCCnuMacLimit.setStatus('current')
h3cHPEOCCltAutoUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCCltAutoUpgrade.setStatus('current')
h3cHPEOCOnLineCnuNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCOnLineCnuNumber.setStatus('current')
h3cHPEOCCpuMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCCpuMacAddress.setStatus('current')
h3cHPEOCOffLineCnuNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCOffLineCnuNumber.setStatus('current')
h3cHPEOCDownLoadCNUFWResult = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cHPEOCDownLoadCNUFWResult.setStatus('current')
h3cHPEOCCltAutoUpgradeType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("flash", 1), ("ftp", 2), ("tftp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCCltAutoUpgradeType.setStatus('current')
h3cHPEOCAutoUpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 11))
h3cHPEOCServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 11, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCServerAddress.setStatus('current')
h3cHPEOCServerUser = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 11, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCServerUser.setStatus('current')
h3cHPEOCServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 1, 11, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cHPEOCServerPassword.setStatus('current')
h3cHPEOCCableInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2))
h3cHPEOCCableInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1), )
if mibBuilder.loadTexts: h3cHPEOCCableInfoTable.setStatus('current')
h3cHPEOCCableInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cHPEOCCableInfoEntry.setStatus('current')
h3cHPEOCFECErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCFECErrors.setStatus('current')
h3cHPEOCAvgBitsPerCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCAvgBitsPerCarrier.setStatus('current')
h3cHPEOCAvgSNRPerCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCAvgSNRPerCarrier.setStatus('current')
h3cHPEOCAvgInPBCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCAvgInPBCRCErrors.setStatus('current')
h3cHPEOCInTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCInTotalPkts.setStatus('current')
h3cHPEOCAvgOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCAvgOutPower.setStatus('current')
h3cHPEOCAvgOutPBCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCAvgOutPBCRCErrors.setStatus('current')
h3cHPEOCOutTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCOutTotalPkts.setStatus('current')
h3cHPEOCBitPerSymbolTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 2), )
if mibBuilder.loadTexts: h3cHPEOCBitPerSymbolTable.setStatus('current')
h3cHPEOCBitPerSymbolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-HPEOC-MIB", "h3cHPEOCBitPerSymbolIndex"))
if mibBuilder.loadTexts: h3cHPEOCBitPerSymbolEntry.setStatus('current')
h3cHPEOCBitPerSymbolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: h3cHPEOCBitPerSymbolIndex.setStatus('current')
h3cHPEOCBitPerSymbol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 84, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cHPEOCBitPerSymbol.setStatus('current')
mibBuilder.exportSymbols("H3C-HPEOC-MIB", h3cHPEOCCnuSysManEntry=h3cHPEOCCnuSysManEntry, h3cHPEOCCltVlanManTable=h3cHPEOCCltVlanManTable, h3cHPEOCCltSysManEntry=h3cHPEOCCltSysManEntry, h3cHPEOCCltDescr=h3cHPEOCCltDescr, h3cHPEOCCltEthPortType=h3cHPEOCCltEthPortType, h3cHPEOCCltFwVersion=h3cHPEOCCltFwVersion, h3cHPEOCInTotalPkts=h3cHPEOCInTotalPkts, h3cHPEOCAvgOutPBCRCErrors=h3cHPEOCAvgOutPBCRCErrors, h3cHPEOCFECErrors=h3cHPEOCFECErrors, h3cHPEOCServerPassword=h3cHPEOCServerPassword, h3cHPEOCCltAutoUpgrade=h3cHPEOCCltAutoUpgrade, h3cHPEOCCltSysManTable=h3cHPEOCCltSysManTable, PYSNMP_MODULE_ID=h3cHPEOC, h3cHPEOCBitPerSymbolTable=h3cHPEOCBitPerSymbolTable, h3cHPEOCCableInfoTable=h3cHPEOCCableInfoTable, h3cHPEOCOffLineCnuNumber=h3cHPEOCOffLineCnuNumber, h3cHPEOCCnuAnonymStatus=h3cHPEOCCnuAnonymStatus, h3cHPEOCServerUser=h3cHPEOCServerUser, h3cHPEOCBitPerSymbolEntry=h3cHPEOCBitPerSymbolEntry, h3cHPEOCCableInfoEntry=h3cHPEOCCableInfoEntry, h3cHPEOCAvgInPBCRCErrors=h3cHPEOCAvgInPBCRCErrors, h3cHPEOCBitPerSymbolIndex=h3cHPEOCBitPerSymbolIndex, h3cHPEOCOnLineCnuNumber=h3cHPEOCOnLineCnuNumber, h3cHPEOCAvgBitsPerCarrier=h3cHPEOCAvgBitsPerCarrier, h3cHPEOCAutoUpObjects=h3cHPEOCAutoUpObjects, h3cHPEOCAvgOutPower=h3cHPEOCAvgOutPower, h3cHPEOCCnuSysManTable=h3cHPEOCCnuSysManTable, h3cHPEOCAvgSNRPerCarrier=h3cHPEOCAvgSNRPerCarrier, h3cHPEOCSystem=h3cHPEOCSystem, h3cHPEOCCltVlanManEntry=h3cHPEOCCltVlanManEntry, h3cHPEOCCnuBcastControl=h3cHPEOCCnuBcastControl, h3cHPEOCCltVlanType=h3cHPEOCCltVlanType, h3cHPEOCCpuMacAddress=h3cHPEOCCpuMacAddress, h3cHPEOCCltAutoUpgradeType=h3cHPEOCCltAutoUpgradeType, h3cHPEOCOutTotalPkts=h3cHPEOCOutTotalPkts, h3cHPEOCServerAddress=h3cHPEOCServerAddress, h3cHPEOCCnuMacLimit=h3cHPEOCCnuMacLimit, h3cHPEOCBitPerSymbol=h3cHPEOCBitPerSymbol, h3cHPEOCDownLoadCNUFWResult=h3cHPEOCDownLoadCNUFWResult, h3cHPEOC=h3cHPEOC, h3cHPEOCCableInfo=h3cHPEOCCableInfo)
