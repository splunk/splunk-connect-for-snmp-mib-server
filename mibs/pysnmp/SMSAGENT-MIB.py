#
# PySNMP MIB module SMSAGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SMSAGENT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:59:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, IpAddress, Unsigned32, Counter64, Bits, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, TimeTicks, ObjectIdentity, enterprises, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Unsigned32", "Counter64", "Bits", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "TimeTicks", "ObjectIdentity", "enterprises", "Counter32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
unisys = MibIdentifier((1, 3, 6, 1, 4, 1, 223))
unisysOpen = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10))
cfgAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 7))
cfgAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentVersion.setStatus('mandatory')
cfgAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentRevision.setStatus('mandatory')
cfgAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMIBVersion.setStatus('mandatory')
cfgAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMIBRevision.setStatus('mandatory')
cfgAgentBIOSVendor = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSVendor.setStatus('mandatory')
cfgAgentBIOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSVersion.setStatus('mandatory')
cfgAgentBIOSDate = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSDate.setStatus('mandatory')
cfgAgentBIOSsROMInKb = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSsROMInKb.setStatus('mandatory')
cfgAgentBIOSBusSupport = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSBusSupport.setStatus('mandatory')
cfgAgentBIOSAddress = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSAddress.setStatus('mandatory')
cfgAgentBIOSInterruptId = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentBIOSInterruptId.setStatus('mandatory')
cfgAgentnCPUs = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnCPUs.setStatus('mandatory')
cfgAgentCPUsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 13), )
if mibBuilder.loadTexts: cfgAgentCPUsTbl.setStatus('mandatory')
cfgAgentCPUsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1), )
if mibBuilder.loadTexts: cfgAgentCPUsTblEntry.setStatus('mandatory')
cfgAgentCPUClass = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUClass.setStatus('mandatory')
cfgAgentCPUName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUName.setStatus('mandatory')
cfgAgentCPUVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUVendor.setStatus('mandatory')
cfgAgentCPUSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUSpeed.setStatus('mandatory')
cfgAgentCPUsCacheInKb = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUsCacheInKb.setStatus('mandatory')
cfgAgentCPUState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCPUState.setStatus('mandatory')
cfgAgentSysName = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysName.setStatus('mandatory')
cfgAgentSysBoardVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysBoardVersion.setStatus('mandatory')
cfgAgentSysUptimeMilSec = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysUptimeMilSec.setStatus('mandatory')
cfgAgentSysOS = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysOS.setStatus('mandatory')
cfgAgentSysnDMAs = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSysnDMAs.setStatus('mandatory')
cfgAgentnIRQs = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnIRQs.setStatus('mandatory')
cfgAgentIRQsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 20), )
if mibBuilder.loadTexts: cfgAgentIRQsTbl.setStatus('mandatory')
cfgAgentIRQsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1), )
if mibBuilder.loadTexts: cfgAgentIRQsTblEntry.setStatus('mandatory')
cfgAgentIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIRQ.setStatus('mandatory')
cfgAgentIRQOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIRQOwner.setStatus('mandatory')
cfgAgentIRQBus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIRQBus.setStatus('mandatory')
cfgAgentIRQClass = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 20, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIRQClass.setStatus('mandatory')
cfgAgentMemSizeInMb = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemSizeInMb.setStatus('mandatory')
cfgAgentMemType = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemType.setStatus('mandatory')
cfgAgentMemSpeed = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemSpeed.setStatus('mandatory')
cfgAgentMemCacheInKb = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemCacheInKb.setStatus('mandatory')
cfgAgentMemBanks = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemBanks.setStatus('mandatory')
cfgAgentMemSpeedSupported = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentMemSpeedSupported.setStatus('mandatory')
cfgAgentIOKbdType = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIOKbdType.setStatus('mandatory')
cfgAgentIOMouseType = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIOMouseType.setStatus('mandatory')
cfgAgentIOVidType = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentIOVidType.setStatus('mandatory')
cfgAgentnSerials = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnSerials.setStatus('mandatory')
cfgAgentSerialsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 31), )
if mibBuilder.loadTexts: cfgAgentSerialsTbl.setStatus('mandatory')
cfgAgentSerialsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 31, 1), )
if mibBuilder.loadTexts: cfgAgentSerialsTblEntry.setStatus('mandatory')
cfgAgentSerialPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentSerialPort.setStatus('mandatory')
cfgAgentnParallels = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnParallels.setStatus('mandatory')
cfgAgentParallelsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 33), )
if mibBuilder.loadTexts: cfgAgentParallelsTbl.setStatus('mandatory')
cfgAgentParallelsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 33, 1), )
if mibBuilder.loadTexts: cfgAgentParallelsTblEntry.setStatus('mandatory')
cfgAgentParallelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 33, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentParallelPort.setStatus('mandatory')
cfgAgentnControllers = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnControllers.setStatus('mandatory')
cfgAgentControllersTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 35), )
if mibBuilder.loadTexts: cfgAgentControllersTbl.setStatus('mandatory')
cfgAgentControllersTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 35, 1), )
if mibBuilder.loadTexts: cfgAgentControllersTblEntry.setStatus('mandatory')
cfgAgentControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 35, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentControllerType.setStatus('mandatory')
cfgAgentControllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 35, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentControllerName.setStatus('mandatory')
cfgAgentControllerIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 35, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentControllerIRQ.setStatus('mandatory')
cfgAgentnTrapDests = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnTrapDests.setStatus('mandatory')
cfgAgentTrapDestsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 37), )
if mibBuilder.loadTexts: cfgAgentTrapDestsTbl.setStatus('mandatory')
cfgAgentTrapDestsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 37, 1), )
if mibBuilder.loadTexts: cfgAgentTrapDestsTblEntry.setStatus('mandatory')
cfgAgentTrapDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 37, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentTrapDestId.setStatus('mandatory')
cfgAgentTrapDestIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 37, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgAgentTrapDestIPAddr.setStatus('mandatory')
cfgAgentCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 37, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCommunityString.setStatus('mandatory')
cfgAgentnPlatforms = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnPlatforms.setStatus('mandatory')
cfgAgentPlatforms = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 39), )
if mibBuilder.loadTexts: cfgAgentPlatforms.setStatus('mandatory')
cfgAgentPlatformTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 39, 1), )
if mibBuilder.loadTexts: cfgAgentPlatformTblEntry.setStatus('mandatory')
cfgAgentOEMPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 39, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentOEMPlatform.setStatus('mandatory')
cfgAgentProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 39, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentProductID.setStatus('mandatory')
cfgAgentnConsoleMgr = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 7, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentnConsoleMgr.setStatus('mandatory')
cfgAgentConsoleMgr = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 7, 41), )
if mibBuilder.loadTexts: cfgAgentConsoleMgr.setStatus('mandatory')
cfgAgentConsoleMgrTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 7, 41, 1), )
if mibBuilder.loadTexts: cfgAgentConsoleMgrTblEntry.setStatus('mandatory')
cfgAgentCMCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 41, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCMCardIndex.setStatus('mandatory')
cfgAgentCMIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 41, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCMIPAddress.setStatus('mandatory')
cfgAgentCMHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 41, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCMHostName.setStatus('mandatory')
cfgAgentCMHardwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 41, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCMHardwareVer.setStatus('mandatory')
cfgAgentCMFirmwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 7, 41, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfgAgentCMFirmwareVer.setStatus('mandatory')
netAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 8))
netAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentVersion.setStatus('mandatory')
netAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentRevision.setStatus('mandatory')
netAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentMIBVersion.setStatus('mandatory')
netAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentMIBRevision.setStatus('mandatory')
netAgentMachineName = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentMachineName.setStatus('mandatory')
netAgentLogonServer = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentLogonServer.setStatus('mandatory')
netAgentnNICs = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentnNICs.setStatus('mandatory')
netAgentNICsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 8, 8), )
if mibBuilder.loadTexts: netAgentNICsTbl.setStatus('mandatory')
netAgentNICTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1), )
if mibBuilder.loadTexts: netAgentNICTblEntry.setStatus('mandatory')
netAgentVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentVendorID.setStatus('mandatory')
netAgentMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentMACAddress.setStatus('mandatory')
netAgentFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentFirmwareVersion.setStatus('mandatory')
netAgentFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentFirmwareRevision.setStatus('mandatory')
netAgentControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentControllerType.setStatus('mandatory')
netAgentControllerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentControllerPort.setStatus('mandatory')
netAgentControllerIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentControllerIRQ.setStatus('mandatory')
netAgentControllerBaseIO = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentControllerBaseIO.setStatus('mandatory')
netAgentDataSent = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentDataSent.setStatus('mandatory')
netAgentDataReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentDataReceived.setStatus('mandatory')
netAgentNICDriver = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentNICDriver.setStatus('mandatory')
netAgentDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 8, 8, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netAgentDriverName.setStatus('mandatory')
sftAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 9))
sftAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentVersion.setStatus('mandatory')
sftAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentRevision.setStatus('mandatory')
sftAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentMIBVersion.setStatus('mandatory')
sftAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentMIBRevision.setStatus('mandatory')
sftAgentnPackages = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentnPackages.setStatus('mandatory')
sftAgentPackagesTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 9, 6), )
if mibBuilder.loadTexts: sftAgentPackagesTbl.setStatus('mandatory')
sftAgentPackagesTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 9, 6, 1), )
if mibBuilder.loadTexts: sftAgentPackagesTblEntry.setStatus('mandatory')
sftAgentPackage = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentPackage.setStatus('mandatory')
sftAgentnServices = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentnServices.setStatus('mandatory')
sftAgentServicesTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 9, 8), )
if mibBuilder.loadTexts: sftAgentServicesTbl.setStatus('mandatory')
sftAgentServicesTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 9, 8, 1), )
if mibBuilder.loadTexts: sftAgentServicesTblEntry.setStatus('mandatory')
sftAgentService = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentService.setStatus('mandatory')
sftAgentServiceStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("boot", 0), ("system", 1), ("auto", 2), ("manual", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentServiceStartup.setStatus('mandatory')
sftAgentServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopped", 1), ("running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentServiceStatus.setStatus('mandatory')
sftAgentServiceDesired = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stopping", 1), ("running", 2), ("ignore", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sftAgentServiceDesired.setStatus('mandatory')
sftAgentnDevices = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentnDevices.setStatus('mandatory')
sftAgentDevicesTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 9, 10), )
if mibBuilder.loadTexts: sftAgentDevicesTbl.setStatus('mandatory')
sftAgentDevicesTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 9, 10, 1), )
if mibBuilder.loadTexts: sftAgentDevicesTblEntry.setStatus('mandatory')
sftAgentDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentDevice.setStatus('mandatory')
sftAgentDeviceStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 9, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("boot", 0), ("system", 1), ("auto", 2), ("manual", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentDeviceStartup.setStatus('mandatory')
sftAgentCriticalServices = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sftAgentCriticalServices.setStatus('mandatory')
sftAgentSvcIndex = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 9, 99), Integer32())
if mibBuilder.loadTexts: sftAgentSvcIndex.setStatus('mandatory')
sftAgentSvcStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 9) + (0,1)).setObjects(("SMSAGENT-MIB", "sftAgentService"), ("SMSAGENT-MIB", "sftAgentServiceStatus"), ("SMSAGENT-MIB", "sftAgentServiceDesired"), ("SMSAGENT-MIB", "sftAgentCriticalServices"))
sftAgentSvcStateOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 9) + (0,11)).setObjects(("SMSAGENT-MIB", "sftAgentService"), ("SMSAGENT-MIB", "sftAgentServiceStatus"), ("SMSAGENT-MIB", "sftAgentServiceDesired"), ("SMSAGENT-MIB", "sftAgentCriticalServices"))
strAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 10))
strAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVersion.setStatus('mandatory')
strAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentRevision.setStatus('mandatory')
strAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentMIBVersion.setStatus('mandatory')
strAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentMIBRevision.setStatus('mandatory')
strAgentnControllers = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentnControllers.setStatus('mandatory')
strAgentControllersTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 10, 6), )
if mibBuilder.loadTexts: strAgentControllersTbl.setStatus('mandatory')
strAgentControllersTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1), )
if mibBuilder.loadTexts: strAgentControllersTblEntry.setStatus('mandatory')
strAgentCtlrType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrType.setStatus('mandatory')
strAgentCtlrVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrVendor.setStatus('mandatory')
strAgentCtlrFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrFirmware.setStatus('mandatory')
strAgentCtlrSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrSerialNo.setStatus('mandatory')
strAgentCtlrDMA = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrDMA.setStatus('mandatory')
strAgentCtlrIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrIRQ.setStatus('mandatory')
strAgentCtlrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrAddress.setStatus('mandatory')
strAgentCtlrIOPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 6, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCtlrIOPort.setStatus('mandatory')
strAgentnDisks = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentnDisks.setStatus('mandatory')
strAgentDisksTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 10, 8), )
if mibBuilder.loadTexts: strAgentDisksTbl.setStatus('mandatory')
strAgentDisksTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1), )
if mibBuilder.loadTexts: strAgentDisksTblEntry.setStatus('mandatory')
strAgentDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskVendor.setStatus('mandatory')
strAgentDiskDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskDescription.setStatus('mandatory')
strAgentDiskFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskFirmware.setStatus('mandatory')
strAgentDiskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskPort.setStatus('mandatory')
strAgentDiskBus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskBus.setStatus('mandatory')
strAgentDiskLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskLUN.setStatus('mandatory')
strAgentDiskID = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskID.setStatus('mandatory')
strAgentDiskSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskSerialNo.setStatus('mandatory')
strAgentDisknSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDisknSectors.setStatus('mandatory')
strAgentDiskDriveLetters = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskDriveLetters.setStatus('mandatory')
strAgentDiskSizeInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskSizeInMb.setStatus('mandatory')
strAgentDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accessable", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskState.setStatus('mandatory')
strAgentDiskXfersPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskXfersPerSec.setStatus('mandatory')
strAgentDiskSmartCond = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("safe", 1), ("degraded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentDiskSmartCond.setStatus('mandatory')
strAgentnFloppies = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentnFloppies.setStatus('mandatory')
strAgentFloppyTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 10, 10), )
if mibBuilder.loadTexts: strAgentFloppyTbl.setStatus('mandatory')
strAgentFloppyTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1), )
if mibBuilder.loadTexts: strAgentFloppyTblEntry.setStatus('mandatory')
strAgentFlopVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentFlopVendor.setStatus('mandatory')
strAgentFlopDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentFlopDescription.setStatus('mandatory')
strAgentFlopFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentFlopFirmware.setStatus('mandatory')
strAgentFlopSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentFlopSerialNo.setStatus('mandatory')
strAgentnVolumes = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentnVolumes.setStatus('mandatory')
strAgentVolumesTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 10, 12), )
if mibBuilder.loadTexts: strAgentVolumesTbl.setStatus('mandatory')
strAgentVolumesTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1), )
if mibBuilder.loadTexts: strAgentVolumesTblEntry.setStatus('mandatory')
strAgentVolDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolDriveLetter.setStatus('mandatory')
strAgentVolDriveLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolDriveLabel.setStatus('mandatory')
strAgentVolFileSystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolFileSystemType.setStatus('mandatory')
strAgentVolCapacityInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolCapacityInMb.setStatus('mandatory')
strAgentVolClusterSize = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolClusterSize.setStatus('mandatory')
strAgentVolPercentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentVolPercentUsed.setStatus('mandatory')
strAgentVolThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 10, 12, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: strAgentVolThreshold.setStatus('mandatory')
strAgentStateThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: strAgentStateThreshhold.setStatus('mandatory')
strAgentSpaceThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: strAgentSpaceThreshhold.setStatus('deprecated')
strAgentCriticalVol = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: strAgentCriticalVol.setStatus('mandatory')
strAgentIndex = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 10, 99), Integer32())
if mibBuilder.loadTexts: strAgentIndex.setStatus('mandatory')
strAgentStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,1)).setObjects(("SMSAGENT-MIB", "strAgentDiskState"), ("SMSAGENT-MIB", "strAgentIndex"))
strAgentSpaceTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,2)).setObjects(("SMSAGENT-MIB", "strAgentVolPercentUsed"), ("SMSAGENT-MIB", "strAgentIndex"))
strAgentVolSpaceTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,4)).setObjects(("SMSAGENT-MIB", "strAgentVolDriveLetter"), ("SMSAGENT-MIB", "strAgentVolPercentUsed"), ("SMSAGENT-MIB", "strAgentVolThreshold"), ("SMSAGENT-MIB", "strAgentCriticalVol"))
strAgentSmartTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,3)).setObjects(("SMSAGENT-MIB", "strAgentDiskSmartCond"), ("SMSAGENT-MIB", "strAgentIndex"))
strAgentStateOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,11)).setObjects(("SMSAGENT-MIB", "strAgentDiskState"), ("SMSAGENT-MIB", "strAgentIndex"))
strAgentSpaceOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,12)).setObjects(("SMSAGENT-MIB", "strAgentVolPercentUsed"), ("SMSAGENT-MIB", "strAgentIndex"))
strAgentVolSpaceOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,14)).setObjects(("SMSAGENT-MIB", "strAgentVolDriveLetter"), ("SMSAGENT-MIB", "strAgentVolPercentUsed"), ("SMSAGENT-MIB", "strAgentVolThreshold"), ("SMSAGENT-MIB", "strAgentCriticalVol"))
strAgentSmartOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 10) + (0,13)).setObjects(("SMSAGENT-MIB", "strAgentDiskSmartCond"), ("SMSAGENT-MIB", "strAgentIndex"))
sysAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 10, 11))
sysAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentVersion.setStatus('mandatory')
sysAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentRevision.setStatus('mandatory')
sysAgentMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentMIBVersion.setStatus('mandatory')
sysAgentMIBRevision = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentMIBRevision.setStatus('mandatory')
sysAgentCPUCyclesUsed = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentCPUCyclesUsed.setStatus('mandatory')
sysAgentPCICyclesUsed = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentPCICyclesUsed.setStatus('mandatory')
sysAgentInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentInterrupts.setStatus('mandatory')
sysAgentMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentMemorySize.setStatus('mandatory')
sysAgentMemoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentMemoryUsed.setStatus('mandatory')
sysAgentPageFaults = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentPageFaults.setStatus('mandatory')
sysAgentPageFaultThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAgentPageFaultThreshhold.setStatus('mandatory')
sysAgentMemoryThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAgentMemoryThreshhold.setStatus('mandatory')
sysAgentCpuThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAgentCpuThreshhold.setStatus('mandatory')
sysAgentTotalNoCpu = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentTotalNoCpu.setStatus('mandatory')
sysAgentCPUsTbl = MibTable((1, 3, 6, 1, 4, 1, 223, 10, 11, 15), )
if mibBuilder.loadTexts: sysAgentCPUsTbl.setStatus('mandatory')
sysAgentCPUsTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 10, 11, 15, 1), )
if mibBuilder.loadTexts: sysAgentCPUsTblEntry.setStatus('mandatory')
sysAgentCPUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 11, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentCPUIndex.setStatus('mandatory')
sysAgentCPUCycleUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 10, 11, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAgentCPUCycleUsed.setStatus('mandatory')
sysAgentIndex = MibScalar((1, 3, 6, 1, 4, 1, 223, 10, 11, 99), Integer32())
if mibBuilder.loadTexts: sysAgentIndex.setStatus('mandatory')
sysAgentMemTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,1)).setObjects(("SMSAGENT-MIB", "sysAgentMemoryUsed"), ("SMSAGENT-MIB", "sysAgentIndex"))
sysAgentPageTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,2)).setObjects(("SMSAGENT-MIB", "sysAgentPageFaults"), ("SMSAGENT-MIB", "sysAgentIndex"))
sysAgentCpuTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,3)).setObjects(("SMSAGENT-MIB", "SysAgentCpuCycleUsed"), ("SMSAGENT-MIB", "SysAgentIndex"))
sysAgentMemoryTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,4)).setObjects(("SMSAGENT-MIB", "sysAgentMemoryUsed"), ("SMSAGENT-MIB", "sysAgentMemoryThreshhold"))
sysAgentPageFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,5)).setObjects(("SMSAGENT-MIB", "sysAgentPageFaults"), ("SMSAGENT-MIB", "sysAgentPageFaultThreshhold"))
sysAgentProcessorTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,6)).setObjects(("SMSAGENT-MIB", "SysAgentCpuCycleUsed"), ("SMSAGENT-MIB", "sysAgentCpuThreshhold"))
sysAgentMemOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,11)).setObjects(("SMSAGENT-MIB", "sysAgentMemoryUsed"), ("SMSAGENT-MIB", "sysAgentIndex"))
sysAgentPageOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,12)).setObjects(("SMSAGENT-MIB", "sysAgentPageFaults"), ("SMSAGENT-MIB", "sysAgentIndex"))
sysAgentCpuOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,13)).setObjects(("SMSAGENT-MIB", "SysAgentCpuCycleUsed"), ("SMSAGENT-MIB", "SysAgentIndex"))
sysAgentMemoryOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,14)).setObjects(("SMSAGENT-MIB", "sysAgentMemoryUsed"), ("SMSAGENT-MIB", "sysAgentMemoryThreshhold"))
sysAgentPageFaultOkTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,15)).setObjects(("SMSAGENT-MIB", "sysAgentPageFaults"), ("SMSAGENT-MIB", "sysAgentPageFaultThreshhold"))
sysAgentProcessorOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 223, 10, 11) + (0,16)).setObjects(("SMSAGENT-MIB", "SysAgentCpuCycleUsed"), ("SMSAGENT-MIB", "sysAgentCpuThreshhold"))
mibBuilder.exportSymbols("SMSAGENT-MIB", sftAgentServicesTbl=sftAgentServicesTbl, sysAgentCpuOKTrap=sysAgentCpuOKTrap, sftAgentRevision=sftAgentRevision, strAgentCtlrDMA=strAgentCtlrDMA, strAgentDiskXfersPerSec=strAgentDiskXfersPerSec, strAgentDiskSizeInMb=strAgentDiskSizeInMb, sysAgentIndex=sysAgentIndex, cfgAgentBIOSVendor=cfgAgentBIOSVendor, cfgAgentTrapDestsTbl=cfgAgentTrapDestsTbl, sysAgentRevision=sysAgentRevision, sysAgentCPUCycleUsed=sysAgentCPUCycleUsed, strAgentCtlrFirmware=strAgentCtlrFirmware, strAgentStateThreshhold=strAgentStateThreshhold, strAgentFlopSerialNo=strAgentFlopSerialNo, sftAgentnDevices=sftAgentnDevices, sysAgentMemoryOkTrap=sysAgentMemoryOkTrap, cfgAgentMemSpeed=cfgAgentMemSpeed, sysAgentMIBRevision=sysAgentMIBRevision, netAgentMACAddress=netAgentMACAddress, sftAgentSvcIndex=sftAgentSvcIndex, sftAgentDevicesTblEntry=sftAgentDevicesTblEntry, sysAgentPageFaults=sysAgentPageFaults, netAgentMachineName=netAgentMachineName, cfgAgentSysName=cfgAgentSysName, sftAgentServiceStartup=sftAgentServiceStartup, sysAgentCPUCyclesUsed=sysAgentCPUCyclesUsed, sysAgentMemoryThreshhold=sysAgentMemoryThreshhold, cfgAgentParallelsTblEntry=cfgAgentParallelsTblEntry, sysAgent=sysAgent, unisysOpen=unisysOpen, strAgentDiskBus=strAgentDiskBus, cfgAgentCPUsCacheInKb=cfgAgentCPUsCacheInKb, cfgAgentCommunityString=cfgAgentCommunityString, strAgentVolPercentUsed=strAgentVolPercentUsed, strAgentSmartOKTrap=strAgentSmartOKTrap, cfgAgentIRQsTbl=cfgAgentIRQsTbl, sftAgentDevicesTbl=sftAgentDevicesTbl, cfgAgentTrapDestIPAddr=cfgAgentTrapDestIPAddr, cfgAgentCPUSpeed=cfgAgentCPUSpeed, sftAgentSvcStateOkTrap=sftAgentSvcStateOkTrap, strAgentDiskPort=strAgentDiskPort, strAgentIndex=strAgentIndex, strAgentVersion=strAgentVersion, cfgAgentOEMPlatform=cfgAgentOEMPlatform, cfgAgentSysBoardVersion=cfgAgentSysBoardVersion, cfgAgentTrapDestsTblEntry=cfgAgentTrapDestsTblEntry, cfgAgentIRQOwner=cfgAgentIRQOwner, sftAgentCriticalServices=sftAgentCriticalServices, unisys=unisys, cfgAgentBIOSVersion=cfgAgentBIOSVersion, cfgAgentProductID=cfgAgentProductID, cfgAgentSysnDMAs=cfgAgentSysnDMAs, cfgAgentControllerType=cfgAgentControllerType, strAgentDiskLUN=strAgentDiskLUN, cfgAgentCPUsTbl=cfgAgentCPUsTbl, cfgAgentnPlatforms=cfgAgentnPlatforms, strAgentVolumesTbl=strAgentVolumesTbl, cfgAgentIRQ=cfgAgentIRQ, cfgAgentSysUptimeMilSec=cfgAgentSysUptimeMilSec, sysAgentPageFaultOkTrap=sysAgentPageFaultOkTrap, cfgAgentVersion=cfgAgentVersion, strAgentSpaceOkTrap=strAgentSpaceOkTrap, cfgAgentSerialPort=cfgAgentSerialPort, sftAgentServicesTblEntry=sftAgentServicesTblEntry, strAgentVolCapacityInMb=strAgentVolCapacityInMb, strAgentSpaceTrap=strAgentSpaceTrap, netAgentDataSent=netAgentDataSent, cfgAgent=cfgAgent, cfgAgentBIOSBusSupport=cfgAgentBIOSBusSupport, cfgAgentnConsoleMgr=cfgAgentnConsoleMgr, strAgentStateTrap=strAgentStateTrap, cfgAgentPlatforms=cfgAgentPlatforms, netAgentNICsTbl=netAgentNICsTbl, cfgAgentCPUName=cfgAgentCPUName, strAgentDisksTblEntry=strAgentDisksTblEntry, strAgentSmartTrap=strAgentSmartTrap, cfgAgentControllersTblEntry=cfgAgentControllersTblEntry, cfgAgentControllerIRQ=cfgAgentControllerIRQ, cfgAgentCMHardwareVer=cfgAgentCMHardwareVer, cfgAgentCMIPAddress=cfgAgentCMIPAddress, strAgentDiskSmartCond=strAgentDiskSmartCond, netAgentControllerBaseIO=netAgentControllerBaseIO, strAgentFloppyTbl=strAgentFloppyTbl, cfgAgentCMCardIndex=cfgAgentCMCardIndex, sysAgentMemTrap=sysAgentMemTrap, sysAgentInterrupts=sysAgentInterrupts, cfgAgentnControllers=cfgAgentnControllers, sftAgentPackage=sftAgentPackage, strAgentMIBVersion=strAgentMIBVersion, cfgAgentIRQClass=cfgAgentIRQClass, cfgAgentnParallels=cfgAgentnParallels, strAgentCtlrAddress=strAgentCtlrAddress, strAgentVolThreshold=strAgentVolThreshold, sysAgentPageFaultThreshhold=sysAgentPageFaultThreshhold, sftAgentVersion=sftAgentVersion, strAgentnFloppies=strAgentnFloppies, sysAgentCPUsTblEntry=sysAgentCPUsTblEntry, cfgAgentnTrapDests=cfgAgentnTrapDests, cfgAgentBIOSAddress=cfgAgentBIOSAddress, netAgentDataReceived=netAgentDataReceived, cfgAgentCPUVendor=cfgAgentCPUVendor, cfgAgentBIOSInterruptId=cfgAgentBIOSInterruptId, sysAgentProcessorTrap=sysAgentProcessorTrap, cfgAgentCMHostName=cfgAgentCMHostName, cfgAgentMIBRevision=cfgAgentMIBRevision, strAgentFlopDescription=strAgentFlopDescription, netAgentMIBRevision=netAgentMIBRevision, cfgAgentRevision=cfgAgentRevision, sysAgentPageTrap=sysAgentPageTrap, sysAgentMemoryTrap=sysAgentMemoryTrap, sftAgentSvcStateTrap=sftAgentSvcStateTrap, cfgAgentPlatformTblEntry=cfgAgentPlatformTblEntry, sysAgentPageFaultTrap=sysAgentPageFaultTrap, sftAgent=sftAgent, strAgentDiskSerialNo=strAgentDiskSerialNo, strAgentCtlrIRQ=strAgentCtlrIRQ, strAgent=strAgent, sysAgentCPUIndex=sysAgentCPUIndex, cfgAgentCPUState=cfgAgentCPUState, sftAgentService=sftAgentService, strAgentDiskVendor=strAgentDiskVendor, strAgentVolSpaceTrap=strAgentVolSpaceTrap, sftAgentPackagesTbl=sftAgentPackagesTbl, strAgentDiskDriveLetters=strAgentDiskDriveLetters, cfgAgentConsoleMgr=cfgAgentConsoleMgr, cfgAgentMIBVersion=cfgAgentMIBVersion, netAgentMIBVersion=netAgentMIBVersion, cfgAgentMemCacheInKb=cfgAgentMemCacheInKb, cfgAgentBIOSDate=cfgAgentBIOSDate, strAgentSpaceThreshhold=strAgentSpaceThreshhold, netAgentControllerPort=netAgentControllerPort, strAgentControllersTblEntry=strAgentControllersTblEntry, cfgAgentnCPUs=cfgAgentnCPUs, cfgAgentnIRQs=cfgAgentnIRQs, cfgAgentParallelsTbl=cfgAgentParallelsTbl, strAgentCtlrIOPort=strAgentCtlrIOPort, strAgentRevision=strAgentRevision, sysAgentTotalNoCpu=sysAgentTotalNoCpu, cfgAgentMemSizeInMb=cfgAgentMemSizeInMb, sftAgentnPackages=sftAgentnPackages, strAgentDisksTbl=strAgentDisksTbl, netAgentFirmwareVersion=netAgentFirmwareVersion, strAgentnControllers=strAgentnControllers, cfgAgentTrapDestId=cfgAgentTrapDestId, sftAgentDeviceStartup=sftAgentDeviceStartup, cfgAgentParallelPort=cfgAgentParallelPort, cfgAgentCPUClass=cfgAgentCPUClass, cfgAgentBIOSsROMInKb=cfgAgentBIOSsROMInKb, cfgAgentIRQsTblEntry=cfgAgentIRQsTblEntry, cfgAgentMemType=cfgAgentMemType, sysAgentCPUsTbl=sysAgentCPUsTbl, sftAgentPackagesTblEntry=sftAgentPackagesTblEntry, sftAgentServiceDesired=sftAgentServiceDesired, sftAgentDevice=sftAgentDevice, strAgentFloppyTblEntry=strAgentFloppyTblEntry, cfgAgentIOVidType=cfgAgentIOVidType, cfgAgentMemSpeedSupported=cfgAgentMemSpeedSupported, sftAgentnServices=sftAgentnServices, cfgAgentIRQBus=cfgAgentIRQBus, sysAgentMemOkTrap=sysAgentMemOkTrap, cfgAgentIOMouseType=cfgAgentIOMouseType, strAgentVolDriveLetter=strAgentVolDriveLetter, cfgAgentControllersTbl=cfgAgentControllersTbl, sftAgentMIBRevision=sftAgentMIBRevision, cfgAgentCMFirmwareVer=cfgAgentCMFirmwareVer, strAgentControllersTbl=strAgentControllersTbl, netAgentVendorID=netAgentVendorID, cfgAgentSysOS=cfgAgentSysOS, strAgentCtlrSerialNo=strAgentCtlrSerialNo, sysAgentPageOkTrap=sysAgentPageOkTrap, strAgentFlopVendor=strAgentFlopVendor, netAgentControllerIRQ=netAgentControllerIRQ, strAgentDiskDescription=strAgentDiskDescription, strAgentDisknSectors=strAgentDisknSectors, sysAgentPCICyclesUsed=sysAgentPCICyclesUsed, strAgentMIBRevision=strAgentMIBRevision, sysAgentVersion=sysAgentVersion, netAgentVersion=netAgentVersion, netAgentControllerType=netAgentControllerType, strAgentDiskID=strAgentDiskID, strAgentCtlrType=strAgentCtlrType, strAgentnDisks=strAgentnDisks, netAgentRevision=netAgentRevision, strAgentVolClusterSize=strAgentVolClusterSize, sftAgentServiceStatus=sftAgentServiceStatus, cfgAgentControllerName=cfgAgentControllerName, netAgentnNICs=netAgentnNICs, cfgAgentCPUsTblEntry=cfgAgentCPUsTblEntry, netAgentLogonServer=netAgentLogonServer, cfgAgentSerialsTbl=cfgAgentSerialsTbl, strAgentVolSpaceOkTrap=strAgentVolSpaceOkTrap, sftAgentMIBVersion=sftAgentMIBVersion, cfgAgentConsoleMgrTblEntry=cfgAgentConsoleMgrTblEntry, strAgentStateOkTrap=strAgentStateOkTrap, strAgentCriticalVol=strAgentCriticalVol, cfgAgentnSerials=cfgAgentnSerials, strAgentCtlrVendor=strAgentCtlrVendor, netAgentFirmwareRevision=netAgentFirmwareRevision, netAgentNICDriver=netAgentNICDriver, strAgentDiskState=strAgentDiskState, sysAgentMemorySize=sysAgentMemorySize, sysAgentMemoryUsed=sysAgentMemoryUsed, netAgentNICTblEntry=netAgentNICTblEntry, netAgentDriverName=netAgentDriverName, strAgentnVolumes=strAgentnVolumes, sysAgentMIBVersion=sysAgentMIBVersion, strAgentVolumesTblEntry=strAgentVolumesTblEntry, sysAgentCpuTrap=sysAgentCpuTrap, sysAgentProcessorOKTrap=sysAgentProcessorOKTrap, cfgAgentSerialsTblEntry=cfgAgentSerialsTblEntry, strAgentVolFileSystemType=strAgentVolFileSystemType, sysAgentCpuThreshhold=sysAgentCpuThreshhold, strAgentFlopFirmware=strAgentFlopFirmware, netAgent=netAgent, strAgentDiskFirmware=strAgentDiskFirmware, cfgAgentMemBanks=cfgAgentMemBanks, strAgentVolDriveLabel=strAgentVolDriveLabel, cfgAgentIOKbdType=cfgAgentIOKbdType)
