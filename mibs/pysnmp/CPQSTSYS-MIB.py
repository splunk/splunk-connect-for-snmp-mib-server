#
# PySNMP MIB module CPQSTSYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQSTSYS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:11:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
compaq, cpqHoTrapFlags = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoTrapFlags")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
iso, Counter64, Counter32, ModuleIdentity, Bits, NotificationType, TimeTicks, MibIdentifier, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "Counter32", "ModuleIdentity", "Bits", "NotificationType", "TimeTicks", "MibIdentifier", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "Integer32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cpqSsStorageSys = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 8))
cpqSsMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 8, 1))
cpqSsDrvBox = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 8, 2))
cpqSsTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 8, 3))
cpqSsRaidSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 8, 4))
cpqSsBoxExtended = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 8, 2, 2))
cpqSsMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsMibRevMajor.setStatus('mandatory')
cpqSsMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsMibRevMinor.setStatus('mandatory')
cpqSsMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsMibCondition.setStatus('mandatory')
cpqSsDrvBoxTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 1), )
if mibBuilder.loadTexts: cpqSsDrvBoxTable.setStatus('mandatory')
cpqSsDrvBoxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsBoxCntlrIndex"), (0, "CPQSTSYS-MIB", "cpqSsBoxBusIndex"))
if mibBuilder.loadTexts: cpqSsDrvBoxEntry.setStatus('mandatory')
cpqSsBoxCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxCntlrIndex.setStatus('mandatory')
cpqSsBoxBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxBusIndex.setStatus('mandatory')
cpqSsBoxType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("proLiant", 2), ("proLiant2", 3), ("proLiant2Internal", 4), ("proLiant2DuplexTop", 5), ("proLiant2DuplexBottom", 6), ("proLiant2InternalDuplexTop", 7), ("proLiant2InternalDuplexBottom", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxType.setStatus('deprecated')
cpqSsBoxModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxModel.setStatus('mandatory')
cpqSsBoxFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxFWRev.setStatus('mandatory')
cpqSsBoxVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxVendor.setStatus('mandatory')
cpqSsBoxFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3), ("noFan", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxFanStatus.setStatus('mandatory')
cpqSsBoxCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxCondition.setStatus('mandatory')
cpqSsBoxTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("noTemp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxTempStatus.setStatus('mandatory')
cpqSsBoxSidePanelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("sidePanelInPlace", 2), ("sidePanelRemoved", 3), ("noSidePanelStatus", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxSidePanelStatus.setStatus('mandatory')
cpqSsBoxFltTolPwrSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("noFltTolPower", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxFltTolPwrSupplyStatus.setStatus('mandatory')
cpqSsBoxBackPlaneVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("proLiant", 2), ("proLiant2", 3), ("proLiant3", 4), ("proLiant4", 5), ("proLiant5", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxBackPlaneVersion.setStatus('mandatory')
cpqSsBoxTotalBays = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxTotalBays.setStatus('mandatory')
cpqSsBoxPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxPlacement.setStatus('mandatory')
cpqSsBoxDuplexOption = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notDuplexed", 2), ("duplexTop", 3), ("duplexBottom", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxDuplexOption.setStatus('mandatory')
cpqSsBoxBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxBoardRevision.setStatus('mandatory')
cpqSsBoxSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxSerialNumber.setStatus('mandatory')
cpqSsBoxCntlrHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxCntlrHwLocation.setStatus('mandatory')
cpqSsBoxBackplaneSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ultra3", 2), ("ultra320", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxBackplaneSpeed.setStatus('mandatory')
cpqSsBoxConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("scsiAttached", 2), ("sasAttached", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxConnectionType.setStatus('mandatory')
cpqSsBoxHostConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxHostConnector.setStatus('mandatory')
cpqSsBoxBoxOnConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxBoxOnConnector.setStatus('mandatory')
cpqSsBoxLocationString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxLocationString.setStatus('mandatory')
cpqSsChassisTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1), )
if mibBuilder.loadTexts: cpqSsChassisTable.setStatus('mandatory')
cpqSsChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsChassisIndex"))
if mibBuilder.loadTexts: cpqSsChassisEntry.setStatus('mandatory')
cpqSsChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisIndex.setStatus('mandatory')
cpqSsChassisConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("fibreAttached", 2), ("scsiAttached", 3), ("iScsiAttached", 4), ("sasAttached", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisConnectionType.setStatus('mandatory')
cpqSsChassisSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisSerialNumber.setStatus('mandatory')
cpqSsChassisName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisName.setStatus('mandatory')
cpqSsChassisSystemBoardSerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisSystemBoardSerNum.setStatus('mandatory')
cpqSsChassisSystemBoardRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisSystemBoardRev.setStatus('mandatory')
cpqSsChassisPowerBoardSerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisPowerBoardSerNum.setStatus('mandatory')
cpqSsChassisPowerBoardRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisPowerBoardRev.setStatus('mandatory')
cpqSsChassisScsiBoardSerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisScsiBoardSerNum.setStatus('mandatory')
cpqSsChassisScsiBoardRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisScsiBoardRev.setStatus('mandatory')
cpqSsChassisOverallCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisOverallCondition.setStatus('mandatory')
cpqSsChassisPowerSupplyCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisPowerSupplyCondition.setStatus('mandatory')
cpqSsChassisFanCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisFanCondition.setStatus('mandatory')
cpqSsChassisTemperatureCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisTemperatureCondition.setStatus('mandatory')
cpqSsChassisFcaCntlrCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisFcaCntlrCondition.setStatus('mandatory')
cpqSsChassisFcaLogicalDriveCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisFcaLogicalDriveCondition.setStatus('mandatory')
cpqSsChassisFcaPhysDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisFcaPhysDrvCondition.setStatus('mandatory')
cpqSsChassisTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisTime.setStatus('mandatory')
cpqSsChassisModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("ra4x00", 2), ("msa1000", 3), ("smartArrayClusterStorage", 4), ("enterpriseModularArray", 5), ("enterpriseVirtualArray", 6), ("msa500G2", 7), ("msa20", 8), ("msa1500cs", 9), ("msa1510i", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisModel.setStatus('mandatory')
cpqSsChassisBackplaneCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisBackplaneCondition.setStatus('mandatory')
cpqSsChassisFcaTapeDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisFcaTapeDrvCondition.setStatus('mandatory')
cpqSsChassisRsoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("notConfigured", 3), ("disabled", 4), ("daemonDownDisabled", 5), ("ok", 6), ("daemonDownActive", 7), ("noSecondary", 8), ("daemonDownNoSecondary", 9), ("linkDown", 10), ("daemonDownLinkDown", 11), ("secondaryRunningAuto", 12), ("secondaryRunningUser", 13), ("evTimeoutError", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisRsoStatus.setStatus('mandatory')
cpqSsChassisRsoCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisRsoCondition.setStatus('mandatory')
cpqSsChassisScsiIoModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("io2port", 2), ("io4portUpgradeFirmware", 3), ("io4port", 4), ("io2port320", 5), ("io4port320", 6), ("io1port320", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisScsiIoModuleType.setStatus('mandatory')
cpqSsChassisPreferredPathMode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notActiveActive", 2), ("automatic", 3), ("manual", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisPreferredPathMode.setStatus('mandatory')
cpqSsChassisProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisProductId.setStatus('mandatory')
cpqSsIoSlotTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 2), )
if mibBuilder.loadTexts: cpqSsIoSlotTable.setStatus('mandatory')
cpqSsIoSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 2, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsIoSlotChassisIndex"), (0, "CPQSTSYS-MIB", "cpqSsIoSlotIndex"))
if mibBuilder.loadTexts: cpqSsIoSlotEntry.setStatus('mandatory')
cpqSsIoSlotChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsIoSlotChassisIndex.setStatus('mandatory')
cpqSsIoSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsIoSlotIndex.setStatus('mandatory')
cpqSsIoSlotControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("notInstalled", 2), ("unknownBoard", 3), ("fibreArray", 4), ("scsiArray", 5), ("noSlot", 6), ("iScsiArray", 7), ("sasArray", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsIoSlotControllerType.setStatus('mandatory')
cpqSsPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3), )
if mibBuilder.loadTexts: cpqSsPowerSupplyTable.setStatus('mandatory')
cpqSsPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsPowerSupplyChassisIndex"), (0, "CPQSTSYS-MIB", "cpqSsPowerSupplyIndex"))
if mibBuilder.loadTexts: cpqSsPowerSupplyEntry.setStatus('mandatory')
cpqSsPowerSupplyChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsPowerSupplyChassisIndex.setStatus('mandatory')
cpqSsPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsPowerSupplyIndex.setStatus('mandatory')
cpqSsPowerSupplyBay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("powerBay1", 2), ("powerBay2", 3), ("composite", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsPowerSupplyBay.setStatus('mandatory')
cpqSsPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("notInstalled", 2), ("ok", 3), ("failed", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsPowerSupplyStatus.setStatus('mandatory')
cpqSsPowerSupplyUpsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("noUps", 2), ("ok", 3), ("powerFailed", 4), ("batteryLow", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsPowerSupplyUpsStatus.setStatus('mandatory')
cpqSsPowerSupplyCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsPowerSupplyCondition.setStatus('mandatory')
cpqSsPowerSupplySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsPowerSupplySerialNumber.setStatus('mandatory')
cpqSsPowerSupplyBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsPowerSupplyBoardRevision.setStatus('mandatory')
cpqSsPowerSupplyFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsPowerSupplyFirmwareRevision.setStatus('mandatory')
cpqSsFanModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 4), )
if mibBuilder.loadTexts: cpqSsFanModuleTable.setStatus('mandatory')
cpqSsFanModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 4, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsFanModuleChassisIndex"), (0, "CPQSTSYS-MIB", "cpqSsFanModuleIndex"))
if mibBuilder.loadTexts: cpqSsFanModuleEntry.setStatus('mandatory')
cpqSsFanModuleChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFanModuleChassisIndex.setStatus('mandatory')
cpqSsFanModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFanModuleIndex.setStatus('mandatory')
cpqSsFanModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("notInstalled", 2), ("ok", 3), ("degraded", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFanModuleStatus.setStatus('mandatory')
cpqSsFanModuleCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFanModuleCondition.setStatus('mandatory')
cpqSsFanModuleLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("fanBay", 2), ("composite", 3), ("fanBay2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFanModuleLocation.setStatus('mandatory')
cpqSsFanModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFanModuleSerialNumber.setStatus('mandatory')
cpqSsFanModuleBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFanModuleBoardRevision.setStatus('mandatory')
cpqSsTempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5), )
if mibBuilder.loadTexts: cpqSsTempSensorTable.setStatus('mandatory')
cpqSsTempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsTempSensorChassisIndex"), (0, "CPQSTSYS-MIB", "cpqSsTempSensorIndex"))
if mibBuilder.loadTexts: cpqSsTempSensorEntry.setStatus('mandatory')
cpqSsTempSensorChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTempSensorChassisIndex.setStatus('mandatory')
cpqSsTempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTempSensorIndex.setStatus('mandatory')
cpqSsTempSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTempSensorStatus.setStatus('mandatory')
cpqSsTempSensorCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTempSensorCondition.setStatus('mandatory')
cpqSsTempSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("fanBay", 2), ("backplane", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTempSensorLocation.setStatus('mandatory')
cpqSsTempSensorCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTempSensorCurrentValue.setStatus('mandatory')
cpqSsTempSensorLimitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTempSensorLimitValue.setStatus('mandatory')
cpqSsTempSensorHysteresisValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTempSensorHysteresisValue.setStatus('mandatory')
cpqSsBackplaneTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6), )
if mibBuilder.loadTexts: cpqSsBackplaneTable.setStatus('mandatory')
cpqSsBackplaneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsBackplaneChassisIndex"), (0, "CPQSTSYS-MIB", "cpqSsBackplaneIndex"))
if mibBuilder.loadTexts: cpqSsBackplaneEntry.setStatus('mandatory')
cpqSsBackplaneChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneChassisIndex.setStatus('mandatory')
cpqSsBackplaneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneIndex.setStatus('mandatory')
cpqSsBackplaneFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneFWRev.setStatus('mandatory')
cpqSsBackplaneDriveBays = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneDriveBays.setStatus('mandatory')
cpqSsBackplaneDuplexOption = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notDuplexed", 2), ("duplexTop", 3), ("duplexBottom", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneDuplexOption.setStatus('mandatory')
cpqSsBackplaneCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneCondition.setStatus('mandatory')
cpqSsBackplaneVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneVersion.setStatus('mandatory')
cpqSsBackplaneVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneVendor.setStatus('mandatory')
cpqSsBackplaneModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneModel.setStatus('mandatory')
cpqSsBackplaneFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("notInstalled", 2), ("ok", 3), ("degraded", 4), ("failed", 5), ("notSupported", 6), ("degraded-Fan1Failed", 7), ("degraded-Fan2Failed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneFanStatus.setStatus('mandatory')
cpqSsBackplaneTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("noTemp", 2), ("ok", 3), ("degraded", 4), ("failed", 5), ("notSupported", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneTempStatus.setStatus('mandatory')
cpqSsBackplaneFtpsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("noFltTolPower", 2), ("ok", 3), ("degraded", 4), ("failed", 5), ("notSupported", 6), ("noFltTolPower-Bay1Missing", 7), ("noFltTolPower-Bay2Missing", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneFtpsStatus.setStatus('mandatory')
cpqSsBackplaneSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneSerialNumber.setStatus('mandatory')
cpqSsBackplanePlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplanePlacement.setStatus('mandatory')
cpqSsBackplaneBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneBoardRevision.setStatus('mandatory')
cpqSsBackplaneSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ultra3", 2), ("ultra320", 3), ("sata", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneSpeed.setStatus('mandatory')
cpqSsBackplaneConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("scsiAttached", 2), ("sasAttached", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneConnectionType.setStatus('mandatory')
cpqSsBackplaneConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneConnector.setStatus('mandatory')
cpqSsBackplaneOnConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneOnConnector.setStatus('mandatory')
cpqSsBackplaneLocationString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneLocationString.setStatus('mandatory')
cpqSsFibreAttachmentTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 7), )
if mibBuilder.loadTexts: cpqSsFibreAttachmentTable.setStatus('mandatory')
cpqSsFibreAttachmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 7, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsFibreAttachmentIndex"))
if mibBuilder.loadTexts: cpqSsFibreAttachmentEntry.setStatus('mandatory')
cpqSsFibreAttachmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFibreAttachmentIndex.setStatus('mandatory')
cpqSsFibreAttachmentHostControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFibreAttachmentHostControllerIndex.setStatus('mandatory')
cpqSsFibreAttachmentHostControllerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFibreAttachmentHostControllerPort.setStatus('mandatory')
cpqSsFibreAttachmentDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("storageBox", 2), ("tapeController", 3), ("fibreChannelSwitch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFibreAttachmentDeviceType.setStatus('mandatory')
cpqSsFibreAttachmentDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFibreAttachmentDeviceIndex.setStatus('mandatory')
cpqSsFibreAttachmentDevicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFibreAttachmentDevicePort.setStatus('mandatory')
cpqSsScsiAttachmentTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8), )
if mibBuilder.loadTexts: cpqSsScsiAttachmentTable.setStatus('mandatory')
cpqSsScsiAttachmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsScsiAttachmentIndex"))
if mibBuilder.loadTexts: cpqSsScsiAttachmentEntry.setStatus('mandatory')
cpqSsScsiAttachmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsScsiAttachmentIndex.setStatus('mandatory')
cpqSsScsiAttachmentControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsScsiAttachmentControllerIndex.setStatus('mandatory')
cpqSsScsiAttachmentControllerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsScsiAttachmentControllerPort.setStatus('mandatory')
cpqSsScsiAttachmentControllerTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsScsiAttachmentControllerTarget.setStatus('mandatory')
cpqSsScsiAttachmentControllerLun = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsScsiAttachmentControllerLun.setStatus('mandatory')
cpqSsScsiAttachmentChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsScsiAttachmentChassisIndex.setStatus('mandatory')
cpqSsScsiAttachmentChassisIoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsScsiAttachmentChassisIoSlot.setStatus('mandatory')
cpqSsScsiAttachmentPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("offline", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsScsiAttachmentPathStatus.setStatus('mandatory')
cpqSsScsiAttachmentPathCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsScsiAttachmentPathCondition.setStatus('mandatory')
cpqSsDrvBoxPathTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 3), )
if mibBuilder.loadTexts: cpqSsDrvBoxPathTable.setStatus('mandatory')
cpqSsDrvBoxPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 3, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsDrvBoxPathCntlrIndex"), (0, "CPQSTSYS-MIB", "cpqSsDrvBoxPathBoxIndex"), (0, "CPQSTSYS-MIB", "cpqSsDrvBoxPathIndex"))
if mibBuilder.loadTexts: cpqSsDrvBoxPathEntry.setStatus('mandatory')
cpqSsDrvBoxPathCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsDrvBoxPathCntlrIndex.setStatus('mandatory')
cpqSsDrvBoxPathBoxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsDrvBoxPathBoxIndex.setStatus('mandatory')
cpqSsDrvBoxPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsDrvBoxPathIndex.setStatus('mandatory')
cpqSsDrvBoxPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("linkDown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsDrvBoxPathStatus.setStatus('mandatory')
cpqSsDrvBoxPathCurrentRole = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("alternate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsDrvBoxPathCurrentRole.setStatus('mandatory')
cpqSsDrvBoxPathHostConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsDrvBoxPathHostConnector.setStatus('mandatory')
cpqSsDrvBoxPathBoxOnConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsDrvBoxPathBoxOnConnector.setStatus('mandatory')
cpqSsDrvBoxPathLocationString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsDrvBoxPathLocationString.setStatus('mandatory')
cpqSsTrapPkts = MibScalar((1, 3, 6, 1, 4, 1, 232, 8, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTrapPkts.setStatus('deprecated')
cpqSsTrapLogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 232, 8, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTrapLogMaxSize.setStatus('deprecated')
cpqSsTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 3, 3), )
if mibBuilder.loadTexts: cpqSsTrapLogTable.setStatus('deprecated')
cpqSsTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 3, 3, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsTrapLogIndex"))
if mibBuilder.loadTexts: cpqSsTrapLogEntry.setStatus('deprecated')
cpqSsTrapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTrapLogIndex.setStatus('deprecated')
cpqSsTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8001, 8002, 8003, 8004, 8005, 8006))).clone(namedValues=NamedValues(("cpqSsFanStatusChange", 1), ("cpqSs2FanStatusChange", 8001), ("cpqSsTempFailed", 8002), ("cpqSsTempDegraded", 8003), ("cpqSsTempOk", 8004), ("cpqSsSidePanelInPlace", 8005), ("cpqSsSidePanelRemoved", 8006)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTrapType.setStatus('deprecated')
cpqSsTrapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTrapTime.setStatus('deprecated')
cpqSsRaidSystemTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 4, 1), )
if mibBuilder.loadTexts: cpqSsRaidSystemTable.setStatus('mandatory')
cpqSsRaidSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 4, 1, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsRaidSystemIndex"))
if mibBuilder.loadTexts: cpqSsRaidSystemEntry.setStatus('mandatory')
cpqSsRaidSystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsRaidSystemIndex.setStatus('mandatory')
cpqSsRaidSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsRaidSystemName.setStatus('mandatory')
cpqSsRaidSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("agentNotRunning", 2), ("good", 3), ("warning", 4), ("communicationLoss", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsRaidSystemStatus.setStatus('mandatory')
cpqSsRaidSystemCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsRaidSystemCondition.setStatus('mandatory')
cpqSsRaidSystemCntlr1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsRaidSystemCntlr1SerialNumber.setStatus('mandatory')
cpqSsRaidSystemCntlr2SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsRaidSystemCntlr2SerialNumber.setStatus('mandatory')
cpqSsFanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232, 8) + (0,1)).setObjects(("CPQSTSYS-MIB", "cpqSsBoxFanStatus"))
cpqSs2FanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8001)).setObjects(("CPQSTSYS-MIB", "cpqSsBoxFanStatus"))
cpqSsTempFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8002)).setObjects(("CPQSTSYS-MIB", "cpqSsBoxTempStatus"))
cpqSsTempDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8003)).setObjects(("CPQSTSYS-MIB", "cpqSsBoxTempStatus"))
cpqSsTempOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8004)).setObjects(("CPQSTSYS-MIB", "cpqSsBoxTempStatus"))
cpqSsSidePanelInPlace = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8005)).setObjects(("CPQSTSYS-MIB", "cpqSsBoxSidePanelStatus"))
cpqSsSidePanelRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8006)).setObjects(("CPQSTSYS-MIB", "cpqSsBoxSidePanelStatus"))
cpqSsPwrSupplyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8007))
cpqSs3FanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxFanStatus"))
cpqSs3TempFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8009)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxTempStatus"))
cpqSs3TempDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8010)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxTempStatus"))
cpqSs3TempOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8011)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxTempStatus"))
cpqSs3SidePanelInPlace = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8012)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxSidePanelStatus"))
cpqSs3SidePanelRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8013)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxSidePanelStatus"))
cpqSs3PwrSupplyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8014)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqSs4PwrSupplyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8015)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxFltTolPwrSupplyStatus"))
cpqSsExFanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8016)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsFanModuleLocation"), ("CPQSTSYS-MIB", "cpqSsFanModuleStatus"))
cpqSsExPowerSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8017)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsPowerSupplyBay"), ("CPQSTSYS-MIB", "cpqSsPowerSupplyStatus"))
cpqSsExPowerSupplyUpsStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8018)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsPowerSupplyBay"), ("CPQSTSYS-MIB", "cpqSsPowerSupplyUpsStatus"))
cpqSsExTempSensorStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8019)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsTempSensorLocation"), ("CPQSTSYS-MIB", "cpqSsTempSensorStatus"), ("CPQSTSYS-MIB", "cpqSsTempSensorCurrentValue"))
cpqSsEx2FanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8020)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsFanModuleLocation"), ("CPQSTSYS-MIB", "cpqSsFanModuleStatus"), ("CPQSTSYS-MIB", "cpqSsFanModuleSerialNumber"), ("CPQSTSYS-MIB", "cpqSsFanModuleBoardRevision"))
cpqSsEx2PowerSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8021)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsPowerSupplyBay"), ("CPQSTSYS-MIB", "cpqSsPowerSupplyStatus"), ("CPQSTSYS-MIB", "cpqSsPowerSupplySerialNumber"), ("CPQSTSYS-MIB", "cpqSsPowerSupplyBoardRevision"), ("CPQSTSYS-MIB", "cpqSsPowerSupplyFirmwareRevision"))
cpqSsExBackplaneFanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8022)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsBackplaneIndex"), ("CPQSTSYS-MIB", "cpqSsBackplaneVendor"), ("CPQSTSYS-MIB", "cpqSsBackplaneModel"), ("CPQSTSYS-MIB", "cpqSsBackplaneSerialNumber"), ("CPQSTSYS-MIB", "cpqSsBackplaneFanStatus"))
cpqSsExBackplaneTempStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8023)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsBackplaneIndex"), ("CPQSTSYS-MIB", "cpqSsBackplaneVendor"), ("CPQSTSYS-MIB", "cpqSsBackplaneModel"), ("CPQSTSYS-MIB", "cpqSsBackplaneSerialNumber"), ("CPQSTSYS-MIB", "cpqSsBackplaneTempStatus"))
cpqSsExBackplanePowerSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8024)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsBackplaneIndex"), ("CPQSTSYS-MIB", "cpqSsBackplaneVendor"), ("CPQSTSYS-MIB", "cpqSsBackplaneModel"), ("CPQSTSYS-MIB", "cpqSsBackplaneSerialNumber"), ("CPQSTSYS-MIB", "cpqSsBackplaneFtpsStatus"))
cpqSsExRecoveryServerStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8025)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsChassisRsoStatus"), ("CPQSTSYS-MIB", "cpqSsChassisIndex"))
cpqSs5FanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8026)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrHwLocation"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrIndex"), ("CPQSTSYS-MIB", "cpqSsBoxBusIndex"), ("CPQSTSYS-MIB", "cpqSsBoxVendor"), ("CPQSTSYS-MIB", "cpqSsBoxModel"), ("CPQSTSYS-MIB", "cpqSsBoxSerialNumber"), ("CPQSTSYS-MIB", "cpqSsBoxFanStatus"))
cpqSs5TempStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8027)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrHwLocation"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrIndex"), ("CPQSTSYS-MIB", "cpqSsBoxBusIndex"), ("CPQSTSYS-MIB", "cpqSsBoxVendor"), ("CPQSTSYS-MIB", "cpqSsBoxModel"), ("CPQSTSYS-MIB", "cpqSsBoxSerialNumber"), ("CPQSTSYS-MIB", "cpqSsBoxTempStatus"))
cpqSs5PwrSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8028)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrHwLocation"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrIndex"), ("CPQSTSYS-MIB", "cpqSsBoxBusIndex"), ("CPQSTSYS-MIB", "cpqSsBoxVendor"), ("CPQSTSYS-MIB", "cpqSsBoxModel"), ("CPQSTSYS-MIB", "cpqSsBoxSerialNumber"), ("CPQSTSYS-MIB", "cpqSsBoxFltTolPwrSupplyStatus"))
cpqSs6FanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8029)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrHwLocation"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrIndex"), ("CPQSTSYS-MIB", "cpqSsBoxBusIndex"), ("CPQSTSYS-MIB", "cpqSsBoxVendor"), ("CPQSTSYS-MIB", "cpqSsBoxModel"), ("CPQSTSYS-MIB", "cpqSsBoxSerialNumber"), ("CPQSTSYS-MIB", "cpqSsBoxFanStatus"), ("CPQSTSYS-MIB", "cpqSsBoxLocationString"))
cpqSs6TempStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8030)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrHwLocation"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrIndex"), ("CPQSTSYS-MIB", "cpqSsBoxBusIndex"), ("CPQSTSYS-MIB", "cpqSsBoxVendor"), ("CPQSTSYS-MIB", "cpqSsBoxModel"), ("CPQSTSYS-MIB", "cpqSsBoxSerialNumber"), ("CPQSTSYS-MIB", "cpqSsBoxTempStatus"), ("CPQSTSYS-MIB", "cpqSsBoxLocationString"))
cpqSs6PwrSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8031)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrHwLocation"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrIndex"), ("CPQSTSYS-MIB", "cpqSsBoxBusIndex"), ("CPQSTSYS-MIB", "cpqSsBoxVendor"), ("CPQSTSYS-MIB", "cpqSsBoxModel"), ("CPQSTSYS-MIB", "cpqSsBoxSerialNumber"), ("CPQSTSYS-MIB", "cpqSsBoxFltTolPwrSupplyStatus"), ("CPQSTSYS-MIB", "cpqSsBoxLocationString"))
mibBuilder.exportSymbols("CPQSTSYS-MIB", cpqSsTrapTime=cpqSsTrapTime, cpqSsBoxHostConnector=cpqSsBoxHostConnector, cpqSsBoxFltTolPwrSupplyStatus=cpqSsBoxFltTolPwrSupplyStatus, cpqSsBoxPlacement=cpqSsBoxPlacement, cpqSsPowerSupplyEntry=cpqSsPowerSupplyEntry, cpqSsFanModuleChassisIndex=cpqSsFanModuleChassisIndex, cpqSsBackplaneFtpsStatus=cpqSsBackplaneFtpsStatus, cpqSsDrvBoxPathEntry=cpqSsDrvBoxPathEntry, cpqSsBackplaneVendor=cpqSsBackplaneVendor, cpqSsChassisFcaPhysDrvCondition=cpqSsChassisFcaPhysDrvCondition, cpqSsChassisFcaTapeDrvCondition=cpqSsChassisFcaTapeDrvCondition, cpqSsFibreAttachmentHostControllerPort=cpqSsFibreAttachmentHostControllerPort, cpqSsScsiAttachmentControllerLun=cpqSsScsiAttachmentControllerLun, cpqSsTempFailed=cpqSsTempFailed, cpqSsTempSensorCurrentValue=cpqSsTempSensorCurrentValue, cpqSsScsiAttachmentPathStatus=cpqSsScsiAttachmentPathStatus, cpqSsTrapType=cpqSsTrapType, cpqSsTempSensorLocation=cpqSsTempSensorLocation, cpqSsFanModuleSerialNumber=cpqSsFanModuleSerialNumber, cpqSsBackplaneIndex=cpqSsBackplaneIndex, cpqSsStorageSys=cpqSsStorageSys, cpqSsRaidSystemEntry=cpqSsRaidSystemEntry, cpqSsBoxBackPlaneVersion=cpqSsBoxBackPlaneVersion, cpqSsPowerSupplyFirmwareRevision=cpqSsPowerSupplyFirmwareRevision, cpqSsMibRevMajor=cpqSsMibRevMajor, cpqSsChassisScsiIoModuleType=cpqSsChassisScsiIoModuleType, cpqSsChassisSystemBoardSerNum=cpqSsChassisSystemBoardSerNum, cpqSsBoxConnectionType=cpqSsBoxConnectionType, cpqSsTempSensorTable=cpqSsTempSensorTable, cpqSsExPowerSupplyStatusChange=cpqSsExPowerSupplyStatusChange, cpqSsDrvBoxPathCntlrIndex=cpqSsDrvBoxPathCntlrIndex, cpqSsRaidSystemIndex=cpqSsRaidSystemIndex, cpqSsTrapPkts=cpqSsTrapPkts, cpqSsIoSlotChassisIndex=cpqSsIoSlotChassisIndex, cpqSsChassisTable=cpqSsChassisTable, cpqSsChassisModel=cpqSsChassisModel, cpqSsChassisScsiBoardRev=cpqSsChassisScsiBoardRev, cpqSsBackplaneChassisIndex=cpqSsBackplaneChassisIndex, cpqSsChassisPowerBoardSerNum=cpqSsChassisPowerBoardSerNum, cpqSsBoxSidePanelStatus=cpqSsBoxSidePanelStatus, cpqSsPowerSupplyChassisIndex=cpqSsPowerSupplyChassisIndex, cpqSsTempSensorStatus=cpqSsTempSensorStatus, cpqSsChassisProductId=cpqSsChassisProductId, cpqSs3PwrSupplyDegraded=cpqSs3PwrSupplyDegraded, cpqSsPowerSupplyBoardRevision=cpqSsPowerSupplyBoardRevision, cpqSsExFanStatusChange=cpqSsExFanStatusChange, cpqSsScsiAttachmentControllerIndex=cpqSsScsiAttachmentControllerIndex, cpqSsBackplaneDuplexOption=cpqSsBackplaneDuplexOption, cpqSsBoxCondition=cpqSsBoxCondition, cpqSsFibreAttachmentHostControllerIndex=cpqSsFibreAttachmentHostControllerIndex, cpqSsRaidSystemCntlr1SerialNumber=cpqSsRaidSystemCntlr1SerialNumber, cpqSsChassisPreferredPathMode=cpqSsChassisPreferredPathMode, cpqSsTempSensorIndex=cpqSsTempSensorIndex, cpqSsDrvBoxEntry=cpqSsDrvBoxEntry, cpqSsScsiAttachmentPathCondition=cpqSsScsiAttachmentPathCondition, cpqSsDrvBoxPathTable=cpqSsDrvBoxPathTable, cpqSsRaidSystemTable=cpqSsRaidSystemTable, cpqSsChassisRsoStatus=cpqSsChassisRsoStatus, cpqSsScsiAttachmentControllerTarget=cpqSsScsiAttachmentControllerTarget, cpqSsBoxTempStatus=cpqSsBoxTempStatus, cpqSsPowerSupplyIndex=cpqSsPowerSupplyIndex, cpqSsMibCondition=cpqSsMibCondition, cpqSsSidePanelInPlace=cpqSsSidePanelInPlace, cpqSs5TempStatusChange=cpqSs5TempStatusChange, cpqSsChassisIndex=cpqSsChassisIndex, cpqSsExBackplaneFanStatusChange=cpqSsExBackplaneFanStatusChange, cpqSsBackplaneTempStatus=cpqSsBackplaneTempStatus, cpqSsBoxBusIndex=cpqSsBoxBusIndex, cpqSsChassisTemperatureCondition=cpqSsChassisTemperatureCondition, cpqSsPowerSupplyStatus=cpqSsPowerSupplyStatus, cpqSsBoxTotalBays=cpqSsBoxTotalBays, cpqSsBackplaneTable=cpqSsBackplaneTable, cpqSs6FanStatusChange=cpqSs6FanStatusChange, cpqSsScsiAttachmentControllerPort=cpqSsScsiAttachmentControllerPort, cpqSsDrvBox=cpqSsDrvBox, cpqSsFanModuleLocation=cpqSsFanModuleLocation, cpqSsIoSlotEntry=cpqSsIoSlotEntry, cpqSsDrvBoxPathBoxIndex=cpqSsDrvBoxPathBoxIndex, cpqSsBoxFWRev=cpqSsBoxFWRev, cpqSsFibreAttachmentDeviceType=cpqSsFibreAttachmentDeviceType, cpqSsDrvBoxTable=cpqSsDrvBoxTable, cpqSsScsiAttachmentChassisIndex=cpqSsScsiAttachmentChassisIndex, cpqSsChassisEntry=cpqSsChassisEntry, cpqSsRaidSystem=cpqSsRaidSystem, cpqSsBoxCntlrHwLocation=cpqSsBoxCntlrHwLocation, cpqSsDrvBoxPathHostConnector=cpqSsDrvBoxPathHostConnector, cpqSsScsiAttachmentTable=cpqSsScsiAttachmentTable, cpqSs3FanStatusChange=cpqSs3FanStatusChange, cpqSsTempDegraded=cpqSsTempDegraded, cpqSsPowerSupplyTable=cpqSsPowerSupplyTable, cpqSsBackplaneEntry=cpqSsBackplaneEntry, cpqSsExBackplanePowerSupplyStatusChange=cpqSsExBackplanePowerSupplyStatusChange, cpqSsBackplaneModel=cpqSsBackplaneModel, cpqSsBackplaneFanStatus=cpqSsBackplaneFanStatus, cpqSsTempSensorCondition=cpqSsTempSensorCondition, cpqSsChassisSystemBoardRev=cpqSsChassisSystemBoardRev, cpqSsBoxCntlrIndex=cpqSsBoxCntlrIndex, cpqSs6PwrSupplyStatusChange=cpqSs6PwrSupplyStatusChange, cpqSsChassisConnectionType=cpqSsChassisConnectionType, cpqSsRaidSystemCntlr2SerialNumber=cpqSsRaidSystemCntlr2SerialNumber, cpqSsChassisBackplaneCondition=cpqSsChassisBackplaneCondition, cpqSsChassisRsoCondition=cpqSsChassisRsoCondition, cpqSsIoSlotControllerType=cpqSsIoSlotControllerType, cpqSsTempSensorLimitValue=cpqSsTempSensorLimitValue, cpqSs4PwrSupplyDegraded=cpqSs4PwrSupplyDegraded, cpqSsBackplaneOnConnector=cpqSsBackplaneOnConnector, cpqSsIoSlotTable=cpqSsIoSlotTable, cpqSsBackplaneCondition=cpqSsBackplaneCondition, cpqSsTrapLogTable=cpqSsTrapLogTable, cpqSsBoxDuplexOption=cpqSsBoxDuplexOption, cpqSsEx2FanStatusChange=cpqSsEx2FanStatusChange, cpqSsDrvBoxPathIndex=cpqSsDrvBoxPathIndex, cpqSsChassisOverallCondition=cpqSsChassisOverallCondition, cpqSsBackplaneSpeed=cpqSsBackplaneSpeed, cpqSsFanStatusChange=cpqSsFanStatusChange, cpqSsPowerSupplyBay=cpqSsPowerSupplyBay, cpqSsPowerSupplyUpsStatus=cpqSsPowerSupplyUpsStatus, cpqSsBackplaneConnectionType=cpqSsBackplaneConnectionType, cpqSsBoxFanStatus=cpqSsBoxFanStatus, cpqSsPowerSupplySerialNumber=cpqSsPowerSupplySerialNumber, cpqSs6TempStatusChange=cpqSs6TempStatusChange, cpqSsChassisPowerSupplyCondition=cpqSsChassisPowerSupplyCondition, cpqSsFanModuleEntry=cpqSsFanModuleEntry, cpqSsExBackplaneTempStatusChange=cpqSsExBackplaneTempStatusChange, cpqSsFanModuleStatus=cpqSsFanModuleStatus, cpqSsTempOk=cpqSsTempOk, cpqSsIoSlotIndex=cpqSsIoSlotIndex, cpqSsChassisScsiBoardSerNum=cpqSsChassisScsiBoardSerNum, cpqSsTrapLogMaxSize=cpqSsTrapLogMaxSize, cpqSs3SidePanelInPlace=cpqSs3SidePanelInPlace, cpqSsFanModuleTable=cpqSsFanModuleTable, cpqSsChassisFanCondition=cpqSsChassisFanCondition, cpqSsTrapLogIndex=cpqSsTrapLogIndex, cpqSsScsiAttachmentChassisIoSlot=cpqSsScsiAttachmentChassisIoSlot, cpqSsChassisTime=cpqSsChassisTime, cpqSsExTempSensorStatusChange=cpqSsExTempSensorStatusChange, cpqSsBackplaneBoardRevision=cpqSsBackplaneBoardRevision, cpqSsPowerSupplyCondition=cpqSsPowerSupplyCondition, cpqSsBackplaneFWRev=cpqSsBackplaneFWRev, cpqSsFibreAttachmentEntry=cpqSsFibreAttachmentEntry, cpqSsBoxVendor=cpqSsBoxVendor, cpqSsBoxSerialNumber=cpqSsBoxSerialNumber, cpqSsRaidSystemName=cpqSsRaidSystemName, cpqSsBackplanePlacement=cpqSsBackplanePlacement, cpqSsMibRevMinor=cpqSsMibRevMinor, cpqSsFibreAttachmentTable=cpqSsFibreAttachmentTable, cpqSsScsiAttachmentIndex=cpqSsScsiAttachmentIndex, cpqSsRaidSystemCondition=cpqSsRaidSystemCondition, cpqSsPwrSupplyDegraded=cpqSsPwrSupplyDegraded, cpqSs3TempOk=cpqSs3TempOk, cpqSsChassisName=cpqSsChassisName, cpqSsChassisPowerBoardRev=cpqSsChassisPowerBoardRev, cpqSsFibreAttachmentDevicePort=cpqSsFibreAttachmentDevicePort, cpqSsBoxBackplaneSpeed=cpqSsBoxBackplaneSpeed, cpqSsBackplaneSerialNumber=cpqSsBackplaneSerialNumber, cpqSsDrvBoxPathCurrentRole=cpqSsDrvBoxPathCurrentRole, cpqSsTempSensorHysteresisValue=cpqSsTempSensorHysteresisValue, cpqSsSidePanelRemoved=cpqSsSidePanelRemoved, cpqSsChassisFcaCntlrCondition=cpqSsChassisFcaCntlrCondition, cpqSs5PwrSupplyStatusChange=cpqSs5PwrSupplyStatusChange, cpqSsMibRev=cpqSsMibRev, cpqSsEx2PowerSupplyStatusChange=cpqSsEx2PowerSupplyStatusChange, cpqSsFibreAttachmentDeviceIndex=cpqSsFibreAttachmentDeviceIndex, cpqSs5FanStatusChange=cpqSs5FanStatusChange, cpqSs2FanStatusChange=cpqSs2FanStatusChange, cpqSsFanModuleCondition=cpqSsFanModuleCondition, cpqSsTempSensorChassisIndex=cpqSsTempSensorChassisIndex, cpqSsRaidSystemStatus=cpqSsRaidSystemStatus, cpqSsDrvBoxPathBoxOnConnector=cpqSsDrvBoxPathBoxOnConnector, cpqSsBoxBoxOnConnector=cpqSsBoxBoxOnConnector, cpqSsDrvBoxPathStatus=cpqSsDrvBoxPathStatus, cpqSsFibreAttachmentIndex=cpqSsFibreAttachmentIndex, cpqSsTrap=cpqSsTrap, cpqSsBackplaneDriveBays=cpqSsBackplaneDriveBays, cpqSsBoxModel=cpqSsBoxModel, cpqSsBackplaneConnector=cpqSsBackplaneConnector, cpqSsScsiAttachmentEntry=cpqSsScsiAttachmentEntry, cpqSs3SidePanelRemoved=cpqSs3SidePanelRemoved, cpqSsChassisFcaLogicalDriveCondition=cpqSsChassisFcaLogicalDriveCondition, cpqSsBoxType=cpqSsBoxType, cpqSsFanModuleBoardRevision=cpqSsFanModuleBoardRevision, cpqSsTrapLogEntry=cpqSsTrapLogEntry, cpqSsBackplaneLocationString=cpqSsBackplaneLocationString, cpqSsChassisSerialNumber=cpqSsChassisSerialNumber, cpqSs3TempDegraded=cpqSs3TempDegraded, cpqSsExRecoveryServerStatusChange=cpqSsExRecoveryServerStatusChange, cpqSsBoxExtended=cpqSsBoxExtended, cpqSsBoxBoardRevision=cpqSsBoxBoardRevision, cpqSs3TempFailed=cpqSs3TempFailed, cpqSsBoxLocationString=cpqSsBoxLocationString, cpqSsBackplaneVersion=cpqSsBackplaneVersion, cpqSsExPowerSupplyUpsStatusChange=cpqSsExPowerSupplyUpsStatusChange, cpqSsFanModuleIndex=cpqSsFanModuleIndex, cpqSsTempSensorEntry=cpqSsTempSensorEntry, cpqSsDrvBoxPathLocationString=cpqSsDrvBoxPathLocationString)
