#
# PySNMP MIB module SONOMASYSTEMS-SONOMA-ATM-OC3c-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONOMASYSTEMS-SONOMA-ATM-OC3c-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:01:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, Unsigned32, MibIdentifier, ModuleIdentity, iso, IpAddress, TimeTicks, Bits, NotificationType, ObjectIdentity, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "Unsigned32", "MibIdentifier", "ModuleIdentity", "iso", "IpAddress", "TimeTicks", "Bits", "NotificationType", "ObjectIdentity", "Counter32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sonomaATM, = mibBuilder.importSymbols("SONOMASYSTEMS-SONOMA-MIB", "sonomaATM")
sonomaOC3cATMAdapterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4))
atmOC3cConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 1))
atmOC3cStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2))
atmOC3cConfPhyTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 1, 1), )
if mibBuilder.loadTexts: atmOC3cConfPhyTable.setStatus('mandatory')
atmOC3cConfPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 1, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-OC3c-MIB", "atmOC3cConfPhysIndex"))
if mibBuilder.loadTexts: atmOC3cConfPhyEntry.setStatus('mandatory')
atmOC3cConfPhysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cConfPhysIndex.setStatus('mandatory')
atmOC3cConfFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sONET-STS3c", 1), ("sDH-STM1", 2))).clone('sONET-STS3c')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOC3cConfFraming.setStatus('mandatory')
atmOC3cConfLoopbackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("terminal", 2), ("facility", 3), ("both", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOC3cConfLoopbackMode.setStatus('mandatory')
atmOC3cConfFillerCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unassigned", 1), ("idle", 2))).clone('unassigned')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOC3cConfFillerCells.setStatus('mandatory')
atmOC3cConfOpticalDataLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("multiMode", 1), ("singleModeIntermedReach", 2), ("singleModeLongReach", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cConfOpticalDataLink.setStatus('mandatory')
atmOC3cConfReceiveClockLooping = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOC3cConfReceiveClockLooping.setStatus('mandatory')
atmOC3cStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1), )
if mibBuilder.loadTexts: atmOC3cStatsTable.setStatus('mandatory')
atmOC3cStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-OC3c-MIB", "atmOC3cStatsPhysIndex"))
if mibBuilder.loadTexts: atmOC3cStatsEntry.setStatus('mandatory')
atmOC3cStatsPhysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsPhysIndex.setStatus('mandatory')
atmOC3cStatsNoSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsNoSignals.setStatus('mandatory')
atmOC3cStatsNoOC3cFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsNoOC3cFrames.setStatus('mandatory')
atmOC3cStatsFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsFrameErrors.setStatus('mandatory')
atmOC3cStatsB1ParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsB1ParityErrors.setStatus('mandatory')
atmOC3cStatsB2ParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsB2ParityErrors.setStatus('mandatory')
atmOC3cStatsB3ParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsB3ParityErrors.setStatus('mandatory')
atmOC3cStatsB1BlockErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsB1BlockErrors.setStatus('mandatory')
atmOC3cStatsB2BlockErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsB2BlockErrors.setStatus('mandatory')
atmOC3cStatsB3BlockErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsB3BlockErrors.setStatus('mandatory')
atmOC3cStatsB1CodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsB1CodeViolations.setStatus('mandatory')
atmOC3cStatsB2CodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsB2CodeViolations.setStatus('mandatory')
atmOC3cStatsB3CodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsB3CodeViolations.setStatus('mandatory')
atmOC3cStatsLineFERFDetects = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsLineFERFDetects.setStatus('mandatory')
atmOC3cStatsPathFERFDetects = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsPathFERFDetects.setStatus('mandatory')
atmOC3cStatsLineAISDetects = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsLineAISDetects.setStatus('mandatory')
atmOC3cStatsPathAISDetects = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsPathAISDetects.setStatus('mandatory')
atmOC3cStatsRDIDefects = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsRDIDefects.setStatus('mandatory')
atmOC3cStatsSignalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsSignalLoss.setStatus('mandatory')
atmOC3cStatsOpticalCarrierLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsOpticalCarrierLoss.setStatus('mandatory')
atmOC3cStatsFrameLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsFrameLoss.setStatus('mandatory')
atmOC3cStatsSyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsSyncLoss.setStatus('mandatory')
atmOC3cStatsOutOfCell = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsOutOfCell.setStatus('mandatory')
atmOC3cStatsPointerLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsPointerLoss.setStatus('mandatory')
atmOC3cStatsFIFOOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsFIFOOverflow.setStatus('mandatory')
atmOC3cStatsLineFERFDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsLineFERFDetect.setStatus('mandatory')
atmOC3cStatsPathFERFDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsPathFERFDetect.setStatus('mandatory')
atmOC3cStatsLineAISState = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsLineAISState.setStatus('mandatory')
atmOC3cStatsPathAISState = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsPathAISState.setStatus('mandatory')
atmOC3cStatsRDIState = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOC3cStatsRDIState.setStatus('mandatory')
atmOC3cStatsClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 4, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOC3cStatsClearCounters.setStatus('mandatory')
mibBuilder.exportSymbols("SONOMASYSTEMS-SONOMA-ATM-OC3c-MIB", atmOC3cConfGroup=atmOC3cConfGroup, atmOC3cConfFraming=atmOC3cConfFraming, atmOC3cStatsRDIState=atmOC3cStatsRDIState, atmOC3cStatsPathAISDetects=atmOC3cStatsPathAISDetects, atmOC3cConfPhysIndex=atmOC3cConfPhysIndex, atmOC3cStatsOpticalCarrierLoss=atmOC3cStatsOpticalCarrierLoss, atmOC3cStatsLineFERFDetect=atmOC3cStatsLineFERFDetect, atmOC3cStatsPathFERFDetect=atmOC3cStatsPathFERFDetect, atmOC3cConfFillerCells=atmOC3cConfFillerCells, atmOC3cStatsFrameLoss=atmOC3cStatsFrameLoss, atmOC3cStatsLineAISState=atmOC3cStatsLineAISState, atmOC3cStatsPointerLoss=atmOC3cStatsPointerLoss, atmOC3cConfPhyEntry=atmOC3cConfPhyEntry, atmOC3cStatsB1ParityErrors=atmOC3cStatsB1ParityErrors, atmOC3cStatsB1BlockErrors=atmOC3cStatsB1BlockErrors, atmOC3cStatsB1CodeViolations=atmOC3cStatsB1CodeViolations, atmOC3cStatsLineAISDetects=atmOC3cStatsLineAISDetects, atmOC3cConfOpticalDataLink=atmOC3cConfOpticalDataLink, atmOC3cStatsEntry=atmOC3cStatsEntry, atmOC3cConfReceiveClockLooping=atmOC3cConfReceiveClockLooping, atmOC3cConfLoopbackMode=atmOC3cConfLoopbackMode, atmOC3cStatsSignalLoss=atmOC3cStatsSignalLoss, atmOC3cStatsTable=atmOC3cStatsTable, atmOC3cStatsB3BlockErrors=atmOC3cStatsB3BlockErrors, atmOC3cStatsPhysIndex=atmOC3cStatsPhysIndex, atmOC3cStatsNoOC3cFrames=atmOC3cStatsNoOC3cFrames, atmOC3cStatsGroup=atmOC3cStatsGroup, atmOC3cStatsNoSignals=atmOC3cStatsNoSignals, atmOC3cStatsB2BlockErrors=atmOC3cStatsB2BlockErrors, atmOC3cStatsPathAISState=atmOC3cStatsPathAISState, atmOC3cStatsRDIDefects=atmOC3cStatsRDIDefects, atmOC3cStatsB2CodeViolations=atmOC3cStatsB2CodeViolations, atmOC3cStatsPathFERFDetects=atmOC3cStatsPathFERFDetects, atmOC3cStatsB3CodeViolations=atmOC3cStatsB3CodeViolations, sonomaOC3cATMAdapterGroup=sonomaOC3cATMAdapterGroup, atmOC3cStatsOutOfCell=atmOC3cStatsOutOfCell, atmOC3cStatsLineFERFDetects=atmOC3cStatsLineFERFDetects, atmOC3cStatsSyncLoss=atmOC3cStatsSyncLoss, atmOC3cStatsB2ParityErrors=atmOC3cStatsB2ParityErrors, atmOC3cStatsFIFOOverflow=atmOC3cStatsFIFOOverflow, atmOC3cStatsClearCounters=atmOC3cStatsClearCounters, atmOC3cConfPhyTable=atmOC3cConfPhyTable, atmOC3cStatsB3ParityErrors=atmOC3cStatsB3ParityErrors, atmOC3cStatsFrameErrors=atmOC3cStatsFrameErrors)
