#
# PySNMP MIB module TIMETRA-CFLOWD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-CFLOWD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:09:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, Bits, Integer32, IpAddress, Counter32, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, Unsigned32, TimeTicks, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "Integer32", "IpAddress", "Counter32", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "Unsigned32", "TimeTicks", "iso", "ObjectIdentity")
DisplayString, TextualConvention, RowStatus, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "TimeStamp")
tmnxSRNotifyPrefix, tmnxSRConfs, tmnxSRObjs, timetraSRMIBModules = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRNotifyPrefix", "tmnxSRConfs", "tmnxSRObjs", "timetraSRMIBModules")
TmnxAdminState, TItemDescription, TmnxOperState, TmnxEnabledDisabled, TmnxStatus = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxAdminState", "TItemDescription", "TmnxOperState", "TmnxEnabledDisabled", "TmnxStatus")
timetraCflowdMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 19))
timetraCflowdMIBModule.setRevisions(('1905-01-24 00:00', '1904-01-15 00:00', '1903-08-15 00:00', '1903-01-20 00:00', '1901-11-10 00:00',))
if mibBuilder.loadTexts: timetraCflowdMIBModule.setLastUpdated('0501240000Z')
if mibBuilder.loadTexts: timetraCflowdMIBModule.setOrganization('Alcatel-Lucent')
tmnxCflowdObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19))
tmnxCflowdGeneralObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1))
tmnxCflowdNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 2))
tmnxCflowdConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19))
tmnxCflowdNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19))
tmnxCflowdNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0))
class TmnxCflowdAggScheme(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("asMatrix", 0), ("protocolPort", 1), ("sourcePrefix", 2), ("destinationPrefix", 3), ("sourceDestinationPrefix", 4), ("raw", 5))

class TmnxCflowdTemplateSet(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("basic", 1), ("mplsIp", 2))

tmnxCflowdStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 1), TmnxStatus().clone('delete')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCflowdStatus.setStatus('current')
tmnxCflowdActiveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(30)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCflowdActiveTimeout.setStatus('current')
tmnxCflowdInactiveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(15)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCflowdInactiveTimeout.setStatus('current')
tmnxCflowdCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 250000)).clone(65536)).setUnits('flows').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCflowdCacheSize.setStatus('current')
tmnxCflowdSampleRate = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(1000)).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCflowdSampleRate.setStatus('current')
tmnxCflowdOverflow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(1)).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCflowdOverflow.setStatus('current')
tmnxCflowdAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 7), TmnxAdminState().clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCflowdAdminStatus.setStatus('current')
tmnxCflowdOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 8), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdOperStatus.setStatus('current')
tmnxCflowdActiveFlows = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdActiveFlows.setStatus('current')
tmnxCflowdAggregation = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 10), TmnxCflowdAggScheme()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdAggregation.setStatus('current')
tmnxCFHostTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCFHostTableLastChanged.setStatus('current')
tmnxCflowdMaxCollectors = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCflowdMaxCollectors.setStatus('current')
tmnxCflowdTotalPktsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdTotalPktsRcvd.setStatus('current')
tmnxCflowdTotalPktsDropped = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdTotalPktsDropped.setStatus('current')
tmnxCflowdTemplateRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCflowdTemplateRetransmit.setStatus('current')
tmnxCflowdGeneralStatisticsObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 16))
tmnxCflowdGenRawFlowsCreated = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 16, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdGenRawFlowsCreated.setStatus('current')
tmnxCflowdGenAggrFlowsCreated = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 16, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdGenAggrFlowsCreated.setStatus('current')
tmnxCflowdGenRawFlowsMatched = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 16, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdGenRawFlowsMatched.setStatus('current')
tmnxCflowdGenAggrFlowsMatched = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 16, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdGenAggrFlowsMatched.setStatus('current')
tmnxCflowdGenRawFlowsFlushed = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 16, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdGenRawFlowsFlushed.setStatus('current')
tmnxCflowdGenAggrFlowsFlushed = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 16, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdGenAggrFlowsFlushed.setStatus('current')
tmnxCflowdGenOverflowEvents = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 16, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdGenOverflowEvents.setStatus('current')
tmnxCflowdGenDroppedFlows = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 16, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdGenDroppedFlows.setStatus('current')
tmnxCFHostTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3), )
if mibBuilder.loadTexts: tmnxCFHostTable.setStatus('current')
tmnxCFHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1), ).setIndexNames((0, "TIMETRA-CFLOWD-MIB", "tmnxCFHostAddress"), (0, "TIMETRA-CFLOWD-MIB", "tmnxCFHostUdpPort"))
if mibBuilder.loadTexts: tmnxCFHostEntry.setStatus('current')
tmnxCFHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: tmnxCFHostAddress.setStatus('current')
tmnxCFHostUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(2055))
if mibBuilder.loadTexts: tmnxCFHostUdpPort.setStatus('current')
tmnxCFHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCFHostRowStatus.setStatus('current')
tmnxCFHostEntryLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCFHostEntryLastChanged.setStatus('current')
tmnxCFHostDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 5), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCFHostDescription.setStatus('current')
tmnxCFHostAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 6), TmnxAdminState().clone('inService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCFHostAdminStatus.setStatus('current')
tmnxCFHostOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 7), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCFHostOperStatus.setStatus('current')
tmnxCFHostASType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("origin", 1), ("peer", 2))).clone('origin')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCFHostASType.setStatus('current')
tmnxCFHostAggregation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 9), TmnxCflowdAggScheme()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCFHostAggregation.setStatus('current')
tmnxCFHostRecordsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCFHostRecordsSent.setStatus('current')
tmnxCFHostLastPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCFHostLastPktSent.setStatus('current')
tmnxCFHostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 5), ValueRangeConstraint(8, 10), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCFHostVersion.setStatus('current')
tmnxCFHostTemplateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 13), TmnxCflowdTemplateSet().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCFHostTemplateSet.setStatus('current')
tmnxCFHostPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCFHostPacketsSent.setStatus('current')
tmnxCflowdVersionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 4), )
if mibBuilder.loadTexts: tmnxCflowdVersionStatsTable.setStatus('current')
tmnxCflowdVersionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 4, 1), ).setIndexNames((0, "TIMETRA-CFLOWD-MIB", "tmnxCflowdVersionIndex"))
if mibBuilder.loadTexts: tmnxCflowdVersionStatsEntry.setStatus('current')
tmnxCflowdVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 5), ValueRangeConstraint(8, 10), )))
if mibBuilder.loadTexts: tmnxCflowdVersionIndex.setStatus('current')
tmnxCflowdVersionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 4, 1, 2), TmnxEnabledDisabled()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdVersionStatus.setStatus('current')
tmnxCflowdVersionSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdVersionSent.setStatus('current')
tmnxCflowdVersionOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdVersionOpen.setStatus('current')
tmnxCflowdVersionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdVersionErrors.setStatus('current')
tmnxCflowdV5StatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 5), )
if mibBuilder.loadTexts: tmnxCflowdV5StatsTable.setStatus('current')
tmnxCflowdV5StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 5, 1), ).setIndexNames((0, "TIMETRA-CFLOWD-MIB", "tmnxCFHostAddress"), (0, "TIMETRA-CFLOWD-MIB", "tmnxCFHostUdpPort"))
if mibBuilder.loadTexts: tmnxCflowdV5StatsEntry.setStatus('current')
tmnxCflowdV5Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdV5Sent.setStatus('current')
tmnxCflowdV5Open = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdV5Open.setStatus('current')
tmnxCflowdV5Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdV5Errors.setStatus('current')
tmnxCflowdAggregationStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 6), )
if mibBuilder.loadTexts: tmnxCflowdAggregationStatsTable.setStatus('current')
tmnxCflowdAggregationStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 6, 1), ).setIndexNames((0, "TIMETRA-CFLOWD-MIB", "tmnxCFHostAddress"), (0, "TIMETRA-CFLOWD-MIB", "tmnxCFHostUdpPort"), (0, "TIMETRA-CFLOWD-MIB", "tmnxCflowdAggregationIndex"))
if mibBuilder.loadTexts: tmnxCflowdAggregationStatsEntry.setStatus('current')
tmnxCflowdAggregationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("nonAggregate", 0), ("asMatrix", 1), ("protocolPort", 2), ("sourcePrefix", 3), ("destinationPrefix", 4), ("sourceDestinationPrefix", 5), ("raw", 6))))
if mibBuilder.loadTexts: tmnxCflowdAggregationIndex.setStatus('current')
tmnxCflowdAggregationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 6, 1, 2), TmnxEnabledDisabled()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdAggregationStatus.setStatus('current')
tmnxCflowdAggregationSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdAggregationSent.setStatus('current')
tmnxCflowdAggregationOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdAggregationOpen.setStatus('current')
tmnxCflowdAggregationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdAggregationErrors.setStatus('current')
tmnxCflowdTemplateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 7), )
if mibBuilder.loadTexts: tmnxCflowdTemplateStatsTable.setStatus('current')
tmnxCflowdTemplateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 7, 1), ).setIndexNames((0, "TIMETRA-CFLOWD-MIB", "tmnxCFHostAddress"), (0, "TIMETRA-CFLOWD-MIB", "tmnxCFHostUdpPort"), (0, "TIMETRA-CFLOWD-MIB", "tmnxCflowdTemplateFlowIndex"))
if mibBuilder.loadTexts: tmnxCflowdTemplateStatsEntry.setStatus('current')
tmnxCflowdTemplateFlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4", 1), ("mpls", 2), ("ipv6", 3))))
if mibBuilder.loadTexts: tmnxCflowdTemplateFlowIndex.setStatus('current')
tmnxCflowdTemplateLastTxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 7, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdTemplateLastTxTime.setStatus('current')
tmnxCflowdTemplateSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdTemplateSent.setStatus('current')
tmnxCflowdTemplateOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdTemplateOpen.setStatus('current')
tmnxCflowdTemplateErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdTemplateErrors.setStatus('current')
tmnxCflowdFlowFailureReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("tmnxCflowdMemAllocFailure", 0), ("tmnxCflowdRTLookupFailure", 1), ("tmnxCflowdTimerCreateFailure", 2), ("tmnxCflowdUDPSendFailure", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxCflowdFlowFailureReasonCode.setStatus('current')
tmnxCflowdFlowUnsuppIPProtoNum = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxCflowdFlowUnsuppIPProtoNum.setStatus('obsolete')
tmnxCflowdCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0, 1))
if mibBuilder.loadTexts: tmnxCflowdCreated.setStatus('obsolete')
tmnxCflowdCreateFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0, 2))
if mibBuilder.loadTexts: tmnxCflowdCreateFailure.setStatus('current')
tmnxCflowdDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0, 3))
if mibBuilder.loadTexts: tmnxCflowdDeleted.setStatus('obsolete')
tmnxCflowdStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0, 4)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdAdminStatus"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdOperStatus"))
if mibBuilder.loadTexts: tmnxCflowdStateChange.setStatus('current')
tmnxCflowdCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0, 5))
if mibBuilder.loadTexts: tmnxCflowdCleared.setStatus('obsolete')
tmnxCflowdFlowCreateFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0, 6)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowFailureReasonCode"))
if mibBuilder.loadTexts: tmnxCflowdFlowCreateFailure.setStatus('current')
tmnxCflowdFlowFlushFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0, 7)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowFailureReasonCode"))
if mibBuilder.loadTexts: tmnxCflowdFlowFlushFailure.setStatus('obsolete')
tmnxCflowdFlowUnsuppProto = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0, 8)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowUnsuppIPProtoNum"))
if mibBuilder.loadTexts: tmnxCflowdFlowUnsuppProto.setStatus('obsolete')
tmnxCflowdPacketTxFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0, 9)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCFHostVersion"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowFailureReasonCode"))
if mibBuilder.loadTexts: tmnxCflowdPacketTxFailure.setStatus('current')
tmnxCflowdCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 1))
tmnxCflowdGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2))
tmnxCflowdCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 1, 1)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdGlobalGroup"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdHostGroup"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdCompliance = tmnxCflowdCompliance.setStatus('obsolete')
tmnxCflowdComplianceV6v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 1, 2)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdGlobalGroup"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdHostGroup"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdNotificationGroup"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGlobalGroupV6v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdComplianceV6v0 = tmnxCflowdComplianceV6v0.setStatus('obsolete')
tmnxCflowdComplianceV8v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 1, 3)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdGlobalGroup"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGlobalGroupV6v0"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdHostGroup"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdNotificationV8v0Group"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGroupV8v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdComplianceV8v0 = tmnxCflowdComplianceV8v0.setStatus('obsolete')
tmnxCflowdComplianceV10v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 1, 4)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdGlobalGroup"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGlobalGroupV6v0"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdHostGroup"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdNotificationV8v0Group"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGroupV8v0"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdStatisticsV10v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdComplianceV10v0 = tmnxCflowdComplianceV10v0.setStatus('current')
tmnxCflowdGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 1)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdStatus"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdActiveTimeout"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdInactiveTimeout"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdCacheSize"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdSampleRate"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdOverflow"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdAdminStatus"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdOperStatus"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdActiveFlows"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdAggregation"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdMaxCollectors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdGlobalGroup = tmnxCflowdGlobalGroup.setStatus('current')
tmnxCflowdHostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 2)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCFHostTableLastChanged"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostRowStatus"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostEntryLastChanged"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostDescription"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostAdminStatus"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostOperStatus"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostASType"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostAggregation"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostRecordsSent"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostLastPktSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdHostGroup = tmnxCflowdHostGroup.setStatus('current')
tmnxCflowdNotifyObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 3)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowUnsuppIPProtoNum"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowFailureReasonCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdNotifyObjsGroup = tmnxCflowdNotifyObjsGroup.setStatus('obsolete')
tmnxCflowdNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 4)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdCreated"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdCreateFailure"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdDeleted"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdStateChange"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdCleared"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowCreateFailure"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowFlushFailure"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowUnsuppProto"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdNotificationGroup = tmnxCflowdNotificationGroup.setStatus('obsolete')
tmnxCflowdGlobalGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 5)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdTotalPktsRcvd"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdTotalPktsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdGlobalGroupV6v0 = tmnxCflowdGlobalGroupV6v0.setStatus('current')
tmnxCflowdObsoleteV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 6)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowUnsuppIPProtoNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdObsoleteV8v0Group = tmnxCflowdObsoleteV8v0Group.setStatus('current')
tmnxCflowdGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 7)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdTemplateRetransmit"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdTemplateLastTxTime"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostVersion"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostTemplateSet"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostPacketsSent"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdVersionStatus"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdVersionSent"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdVersionOpen"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdVersionErrors"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdV5Sent"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdV5Open"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdV5Errors"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdAggregationStatus"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdAggregationSent"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdAggregationOpen"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdAggregationErrors"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdTemplateSent"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdTemplateOpen"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdTemplateErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdGroupV8v0 = tmnxCflowdGroupV8v0.setStatus('current')
tmnxCflowdNotifyObjsV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 8)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowFailureReasonCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdNotifyObjsV8v0Group = tmnxCflowdNotifyObjsV8v0Group.setStatus('current')
tmnxCflowdNotificationV8v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 9)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdCreateFailure"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdStateChange"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowCreateFailure"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdPacketTxFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdNotificationV8v0Group = tmnxCflowdNotificationV8v0Group.setStatus('current')
tmnxCflowdStatisticsV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 10)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdGenRawFlowsCreated"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGenAggrFlowsCreated"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGenRawFlowsMatched"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGenAggrFlowsMatched"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGenRawFlowsFlushed"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGenAggrFlowsFlushed"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGenOverflowEvents"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGenDroppedFlows"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdStatisticsV10v0Group = tmnxCflowdStatisticsV10v0Group.setStatus('current')
mibBuilder.exportSymbols("TIMETRA-CFLOWD-MIB", tmnxCflowdCacheSize=tmnxCflowdCacheSize, tmnxCflowdGenDroppedFlows=tmnxCflowdGenDroppedFlows, tmnxCflowdObsoleteV8v0Group=tmnxCflowdObsoleteV8v0Group, tmnxCflowdFlowUnsuppProto=tmnxCflowdFlowUnsuppProto, tmnxCflowdTemplateRetransmit=tmnxCflowdTemplateRetransmit, tmnxCflowdGenAggrFlowsMatched=tmnxCflowdGenAggrFlowsMatched, tmnxCflowdStateChange=tmnxCflowdStateChange, tmnxCflowdCompliances=tmnxCflowdCompliances, timetraCflowdMIBModule=timetraCflowdMIBModule, tmnxCFHostRowStatus=tmnxCFHostRowStatus, tmnxCflowdTemplateStatsEntry=tmnxCflowdTemplateStatsEntry, tmnxCflowdTemplateOpen=tmnxCflowdTemplateOpen, tmnxCflowdV5Sent=tmnxCflowdV5Sent, tmnxCflowdGroupV8v0=tmnxCflowdGroupV8v0, tmnxCflowdAdminStatus=tmnxCflowdAdminStatus, tmnxCflowdOperStatus=tmnxCflowdOperStatus, tmnxCflowdActiveTimeout=tmnxCflowdActiveTimeout, tmnxCflowdAggregationErrors=tmnxCflowdAggregationErrors, tmnxCflowdFlowFlushFailure=tmnxCflowdFlowFlushFailure, tmnxCFHostUdpPort=tmnxCFHostUdpPort, tmnxCflowdCreateFailure=tmnxCflowdCreateFailure, tmnxCflowdGenOverflowEvents=tmnxCflowdGenOverflowEvents, tmnxCflowdFlowUnsuppIPProtoNum=tmnxCflowdFlowUnsuppIPProtoNum, tmnxCflowdVersionStatsEntry=tmnxCflowdVersionStatsEntry, tmnxCflowdAggregationStatsEntry=tmnxCflowdAggregationStatsEntry, tmnxCflowdNotificationGroup=tmnxCflowdNotificationGroup, tmnxCflowdComplianceV10v0=tmnxCflowdComplianceV10v0, tmnxCflowdTemplateFlowIndex=tmnxCflowdTemplateFlowIndex, tmnxCflowdVersionOpen=tmnxCflowdVersionOpen, tmnxCflowdTemplateStatsTable=tmnxCflowdTemplateStatsTable, tmnxCflowdFlowCreateFailure=tmnxCflowdFlowCreateFailure, tmnxCflowdVersionStatus=tmnxCflowdVersionStatus, tmnxCflowdGenRawFlowsCreated=tmnxCflowdGenRawFlowsCreated, tmnxCflowdVersionIndex=tmnxCflowdVersionIndex, tmnxCflowdNotifyObjsGroup=tmnxCflowdNotifyObjsGroup, tmnxCflowdV5Errors=tmnxCflowdV5Errors, TmnxCflowdAggScheme=TmnxCflowdAggScheme, tmnxCflowdTemplateErrors=tmnxCflowdTemplateErrors, tmnxCflowdActiveFlows=tmnxCflowdActiveFlows, tmnxCFHostLastPktSent=tmnxCFHostLastPktSent, tmnxCflowdCompliance=tmnxCflowdCompliance, tmnxCflowdDeleted=tmnxCflowdDeleted, tmnxCflowdV5Open=tmnxCflowdV5Open, tmnxCflowdVersionStatsTable=tmnxCflowdVersionStatsTable, tmnxCflowdAggregationStatsTable=tmnxCflowdAggregationStatsTable, tmnxCFHostEntry=tmnxCFHostEntry, tmnxCflowdObjs=tmnxCflowdObjs, tmnxCFHostAdminStatus=tmnxCFHostAdminStatus, tmnxCFHostTable=tmnxCFHostTable, tmnxCflowdHostGroup=tmnxCflowdHostGroup, tmnxCflowdNotifyObjsV8v0Group=tmnxCflowdNotifyObjsV8v0Group, tmnxCflowdGlobalGroupV6v0=tmnxCflowdGlobalGroupV6v0, tmnxCflowdV5StatsEntry=tmnxCflowdV5StatsEntry, tmnxCflowdVersionSent=tmnxCflowdVersionSent, tmnxCflowdTemplateLastTxTime=tmnxCflowdTemplateLastTxTime, tmnxCFHostOperStatus=tmnxCFHostOperStatus, tmnxCflowdAggregationIndex=tmnxCflowdAggregationIndex, tmnxCflowdFlowFailureReasonCode=tmnxCflowdFlowFailureReasonCode, tmnxCflowdMaxCollectors=tmnxCflowdMaxCollectors, tmnxCFHostASType=tmnxCFHostASType, tmnxCflowdNotificationObjects=tmnxCflowdNotificationObjects, PYSNMP_MODULE_ID=timetraCflowdMIBModule, tmnxCflowdGroups=tmnxCflowdGroups, tmnxCFHostTemplateSet=tmnxCFHostTemplateSet, tmnxCflowdTotalPktsRcvd=tmnxCflowdTotalPktsRcvd, TmnxCflowdTemplateSet=TmnxCflowdTemplateSet, tmnxCflowdInactiveTimeout=tmnxCflowdInactiveTimeout, tmnxCflowdVersionErrors=tmnxCflowdVersionErrors, tmnxCflowdGenAggrFlowsFlushed=tmnxCflowdGenAggrFlowsFlushed, tmnxCflowdSampleRate=tmnxCflowdSampleRate, tmnxCflowdCleared=tmnxCflowdCleared, tmnxCflowdGeneralObjs=tmnxCflowdGeneralObjs, tmnxCflowdAggregationSent=tmnxCflowdAggregationSent, tmnxCflowdGlobalGroup=tmnxCflowdGlobalGroup, tmnxCflowdAggregation=tmnxCflowdAggregation, tmnxCFHostAggregation=tmnxCFHostAggregation, tmnxCflowdNotificationsPrefix=tmnxCflowdNotificationsPrefix, tmnxCflowdComplianceV8v0=tmnxCflowdComplianceV8v0, tmnxCFHostDescription=tmnxCFHostDescription, tmnxCflowdStatus=tmnxCflowdStatus, tmnxCflowdAggregationOpen=tmnxCflowdAggregationOpen, tmnxCflowdNotifications=tmnxCflowdNotifications, tmnxCflowdPacketTxFailure=tmnxCflowdPacketTxFailure, tmnxCflowdGeneralStatisticsObjs=tmnxCflowdGeneralStatisticsObjs, tmnxCflowdGenRawFlowsMatched=tmnxCflowdGenRawFlowsMatched, tmnxCflowdTotalPktsDropped=tmnxCflowdTotalPktsDropped, tmnxCflowdConformance=tmnxCflowdConformance, tmnxCflowdComplianceV6v0=tmnxCflowdComplianceV6v0, tmnxCflowdNotificationV8v0Group=tmnxCflowdNotificationV8v0Group, tmnxCFHostTableLastChanged=tmnxCFHostTableLastChanged, tmnxCFHostEntryLastChanged=tmnxCFHostEntryLastChanged, tmnxCflowdTemplateSent=tmnxCflowdTemplateSent, tmnxCFHostAddress=tmnxCFHostAddress, tmnxCflowdOverflow=tmnxCflowdOverflow, tmnxCflowdGenAggrFlowsCreated=tmnxCflowdGenAggrFlowsCreated, tmnxCFHostRecordsSent=tmnxCFHostRecordsSent, tmnxCflowdV5StatsTable=tmnxCflowdV5StatsTable, tmnxCflowdCreated=tmnxCflowdCreated, tmnxCflowdStatisticsV10v0Group=tmnxCflowdStatisticsV10v0Group, tmnxCFHostVersion=tmnxCFHostVersion, tmnxCflowdGenRawFlowsFlushed=tmnxCflowdGenRawFlowsFlushed, tmnxCflowdAggregationStatus=tmnxCflowdAggregationStatus, tmnxCFHostPacketsSent=tmnxCFHostPacketsSent)
