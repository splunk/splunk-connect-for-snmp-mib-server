#
# PySNMP MIB module Wellfleet-WCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-WCP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:35:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, ObjectIdentity, TimeTicks, IpAddress, MibIdentifier, NotificationType, Gauge32, iso, Unsigned32, Bits, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "IpAddress", "MibIdentifier", "NotificationType", "Gauge32", "iso", "Unsigned32", "Bits", "Counter32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfCompressionGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfCompressionGroup")
wfWcpLineTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1), )
if mibBuilder.loadTexts: wfWcpLineTable.setStatus('mandatory')
wfWcpLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1), ).setIndexNames((0, "Wellfleet-WCP-MIB", "wfWcpLineLineNumber"), (0, "Wellfleet-WCP-MIB", "wfWcpLineLLIndex"))
if mibBuilder.loadTexts: wfWcpLineEntry.setStatus('mandatory')
wfWcpLineDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineDelete.setStatus('mandatory')
wfWcpLineDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineDisable.setStatus('mandatory')
wfWcpLineLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpLineLineNumber.setStatus('mandatory')
wfWcpLineLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpLineLLIndex.setStatus('mandatory')
wfWcpLineCompressionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cpc", 1), ("ppc", 2))).clone('cpc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineCompressionMode.setStatus('mandatory')
wfWcpLineHistorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("k32", 1), ("k8", 2))).clone('k32')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineHistorySize.setStatus('mandatory')
wfWcpLineBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("verylarge", 1), ("large", 2), ("normal", 3), ("none", 4))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineBufferSize.setStatus('mandatory')
wfWcpLineEngineType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2))).clone('software')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineEngineType.setStatus('mandatory')
wfWcpLineSearchDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineSearchDepth.setStatus('mandatory')
wfWcpLineFallbackCompressionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("softwarecpc", 1), ("hardwareppc", 2), ("none", 3))).clone('softwarecpc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineFallbackCompressionMode.setStatus('mandatory')
wfWcpLineClientCompressorRingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineClientCompressorRingSize.setStatus('mandatory')
wfWcpLineClientDecompressorRingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLineClientDecompressorRingSize.setStatus('mandatory')
wfWcpCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2), )
if mibBuilder.loadTexts: wfWcpCircuitTable.setStatus('mandatory')
wfWcpCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1), ).setIndexNames((0, "Wellfleet-WCP-MIB", "wfWcpCircuitId"))
if mibBuilder.loadTexts: wfWcpCircuitEntry.setStatus('mandatory')
wfWcpCircuitDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpCircuitDelete.setStatus('mandatory')
wfWcpCircuitDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpCircuitDisable.setStatus('mandatory')
wfWcpCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpCircuitId.setStatus('mandatory')
wfWcpCircuitCompressionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cpc", 1), ("ppc", 2), ("inherit", 3))).clone('inherit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpCircuitCompressionMode.setStatus('mandatory')
wfWcpCircuitHistorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("k32", 1), ("k8", 2), ("inherit", 3))).clone('inherit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpCircuitHistorySize.setStatus('mandatory')
wfWcpCircuitEngineType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2), ("inherit", 3))).clone('inherit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpCircuitEngineType.setStatus('mandatory')
wfWcpCircuitSearchDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpCircuitSearchDepth.setStatus('mandatory')
wfWcpCircuitCompressorOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpCircuitCompressorOutBytes.setStatus('mandatory')
wfWcpCircuitDecompressorOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpCircuitDecompressorOutBytes.setStatus('mandatory')
wfWcpVcTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3), )
if mibBuilder.loadTexts: wfWcpVcTable.setStatus('mandatory')
wfWcpVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1), ).setIndexNames((0, "Wellfleet-WCP-MIB", "wfWcpVcLineNumber"), (0, "Wellfleet-WCP-MIB", "wfWcpVcLLIndex"), (0, "Wellfleet-WCP-MIB", "wfWcpVcCircuitId"), (0, "Wellfleet-WCP-MIB", "wfWcpVcId"))
if mibBuilder.loadTexts: wfWcpVcEntry.setStatus('mandatory')
wfWcpVcCompressorState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("data", 1), ("disabled", 2), ("disconnected", 3), ("init", 4), ("nak", 5))).clone('disconnected')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcCompressorState.setStatus('mandatory')
wfWcpVcDecompressorState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("data", 1), ("disabled", 2), ("disconnected", 3), ("init", 4), ("rexmit", 5), ("reset", 6), ("connecting", 7), ("disconnecting", 8))).clone('disconnected')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcDecompressorState.setStatus('mandatory')
wfWcpVcLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcLineNumber.setStatus('mandatory')
wfWcpVcLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcLLIndex.setStatus('mandatory')
wfWcpVcCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcCircuitId.setStatus('mandatory')
wfWcpVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcId.setStatus('mandatory')
wfWcpVcCompressionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cpc", 1), ("ppc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcCompressionMode.setStatus('mandatory')
wfWcpVcHistorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("k32", 1), ("k8", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcHistorySize.setStatus('mandatory')
wfWcpVcCompressorInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcCompressorInBytes.setStatus('mandatory')
wfWcpVcCompressorOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcCompressorOutBytes.setStatus('mandatory')
wfWcpVcDecompressorInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcDecompressorInBytes.setStatus('mandatory')
wfWcpVcDecompressorOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcDecompressorOutBytes.setStatus('mandatory')
wfWcpVcTxCPCPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcTxCPCPackets.setStatus('mandatory')
wfWcpVcRxCPCPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcRxCPCPackets.setStatus('mandatory')
wfWcpVcTxPPCPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcTxPPCPackets.setStatus('mandatory')
wfWcpVcRxPPCPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcRxPPCPackets.setStatus('mandatory')
wfWcpVcTxAntiExpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcTxAntiExpPackets.setStatus('mandatory')
wfWcpVcRxAntiExpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcRxAntiExpPackets.setStatus('mandatory')
wfWcpVcTxResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcTxResetReqs.setStatus('mandatory')
wfWcpVcRxResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcRxResetReqs.setStatus('mandatory')
wfWcpVcTxRexmitReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcTxRexmitReqs.setStatus('mandatory')
wfWcpVcRxRexmitReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcRxRexmitReqs.setStatus('mandatory')
wfWcpVcTxRexmitNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcTxRexmitNaks.setStatus('mandatory')
wfWcpVcRxRexmitNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcRxRexmitNaks.setStatus('mandatory')
wfWcpVcDataOutOfSeqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcDataOutOfSeqs.setStatus('mandatory')
wfWcpVcRexmitOutOfSeqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcRexmitOutOfSeqs.setStatus('mandatory')
wfWcpVcRexmitTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcRexmitTimeouts.setStatus('mandatory')
wfWcpVcExceededKs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcExceededKs.setStatus('mandatory')
wfWcpVcInvalidOpCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcInvalidOpCodes.setStatus('mandatory')
wfWcpVcEngineType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcEngineType.setStatus('mandatory')
wfWcpVcSearchDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfWcpVcSearchDepth.setStatus('mandatory')
wfHwCompTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4), )
if mibBuilder.loadTexts: wfHwCompTable.setStatus('mandatory')
wfHwCompEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1), ).setIndexNames((0, "Wellfleet-WCP-MIB", "wfHwCompSlot"), (0, "Wellfleet-WCP-MIB", "wfHwCompModule"), (0, "Wellfleet-WCP-MIB", "wfHwCompEngineNumber"))
if mibBuilder.loadTexts: wfHwCompEntry.setStatus('mandatory')
wfHwCompState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompState.setStatus('mandatory')
wfHwCompSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompSlot.setStatus('mandatory')
wfHwCompModule = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompModule.setStatus('mandatory')
wfHwCompEngineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompEngineNumber.setStatus('mandatory')
wfHwCompCompressionHistoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionHistoryTotal.setStatus('mandatory')
wfHwCompCompressionHashTblSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionHashTblSize.setStatus('mandatory')
wfHwCompDecompressionHistoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionHistoryTotal.setStatus('mandatory')
wfHwComp8kContextsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwComp8kContextsTotal.setStatus('mandatory')
wfHwComp32kContextsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwComp32kContextsTotal.setStatus('mandatory')
wfHwComp8kCpcContextsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwComp8kCpcContextsInUse.setStatus('mandatory')
wfHwComp8kPpcContextsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwComp8kPpcContextsInUse.setStatus('mandatory')
wfHwComp32kContextsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwComp32kContextsInUse.setStatus('mandatory')
wfHwComp8kContextsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwComp8kContextsAvailable.setStatus('mandatory')
wfHwComp32kContextsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwComp32kContextsAvailable.setStatus('mandatory')
wfHwCompCpcContextsRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCpcContextsRegistered.setStatus('mandatory')
wfHwCompPpcContextsRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompPpcContextsRegistered.setStatus('mandatory')
wfHwCompCompressionTotalRingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionTotalRingSize.setStatus('mandatory')
wfHwCompDecompressionTotalRingSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionTotalRingSize.setStatus('mandatory')
wfHwCompCompressionCurrentQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionCurrentQueued.setStatus('mandatory')
wfHwCompDecompressionCurrentQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionCurrentQueued.setStatus('mandatory')
wfHwCompCompressionQHiWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionQHiWatermark.setStatus('mandatory')
wfHwCompDecompressionQHiWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionQHiWatermark.setStatus('mandatory')
wfHwCompCompressionPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionPkts.setStatus('mandatory')
wfHwCompDecompressionPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionPkts.setStatus('mandatory')
wfHwCompTxExpandedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompTxExpandedPkts.setStatus('mandatory')
wfHwCompTxNonCompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompTxNonCompressedPkts.setStatus('mandatory')
wfHwCompRxNonCompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompRxNonCompressedPkts.setStatus('mandatory')
wfHwCompRxDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompRxDroppedPkts.setStatus('mandatory')
wfHwCompRxLcbMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompRxLcbMismatches.setStatus('mandatory')
wfHwCompCompressionRingOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionRingOverflows.setStatus('mandatory')
wfHwCompDecompressionRingOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionRingOverflows.setStatus('mandatory')
wfHwCompCompressionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionErrors.setStatus('mandatory')
wfHwCompDecompressionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionErrors.setStatus('mandatory')
wfHwCompCompressionSrcPktLenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionSrcPktLenErrors.setStatus('mandatory')
wfHwCompCompressionCcbFormatErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionCcbFormatErrors.setStatus('mandatory')
wfHwCompCompressionDescFormatErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionDescFormatErrors.setStatus('mandatory')
wfHwCompCompressionInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompCompressionInternalErrors.setStatus('mandatory')
wfHwCompDecompressionSrcPktLenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionSrcPktLenErrors.setStatus('mandatory')
wfHwCompDecompressionCcbFormatErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionCcbFormatErrors.setStatus('mandatory')
wfHwCompDecompressionDescFormatErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionDescFormatErrors.setStatus('mandatory')
wfHwCompDecompressionInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompDecompressionInternalErrors.setStatus('mandatory')
wfHwCompChipType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("magna", 1), ("itcs", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompChipType.setStatus('mandatory')
wfHwCompMsaCpcContextsRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompMsaCpcContextsRegistered.setStatus('mandatory')
wfHwCompMsaPpcContextsRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompMsaPpcContextsRegistered.setStatus('mandatory')
wfHwCompMsa8KContextsGuaranteed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompMsa8KContextsGuaranteed.setStatus('mandatory')
wfHwCompStacContextsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacContextsTotal.setStatus('mandatory')
wfHwCompStacCpcContextsRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacCpcContextsRegistered.setStatus('mandatory')
wfHwCompStacPpcContextsRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacPpcContextsRegistered.setStatus('mandatory')
wfHwCompStacPpcContextsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacPpcContextsInUse.setStatus('mandatory')
wfHwCompStacContextsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacContextsAvailable.setStatus('mandatory')
wfHwCompStacContextsGuaranteed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacContextsGuaranteed.setStatus('mandatory')
wfHwCompMsaCompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompMsaCompressedPkts.setStatus('mandatory')
wfHwCompStacCompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacCompressedPkts.setStatus('mandatory')
wfHwCompMsaDecompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompMsaDecompressedPkts.setStatus('mandatory')
wfHwCompStacDecompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacDecompressedPkts.setStatus('mandatory')
wfHwCompMsaTxExpandedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompMsaTxExpandedPkts.setStatus('mandatory')
wfHwCompStacTxExpandedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacTxExpandedPkts.setStatus('mandatory')
wfHwCompMsaTxNonCompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompMsaTxNonCompressedPkts.setStatus('mandatory')
wfHwCompStacTxNonCompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacTxNonCompressedPkts.setStatus('mandatory')
wfHwCompMsaRxNonCompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompMsaRxNonCompressedPkts.setStatus('mandatory')
wfHwCompStacRxNonCompressedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 4, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHwCompStacRxNonCompressedPkts.setStatus('mandatory')
wfStacCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6), )
if mibBuilder.loadTexts: wfStacCircuitTable.setStatus('mandatory')
wfStacCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1), ).setIndexNames((0, "Wellfleet-WCP-MIB", "wfStacCircuitId"))
if mibBuilder.loadTexts: wfStacCircuitEntry.setStatus('mandatory')
wfStacCircuitDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfStacCircuitDelete.setStatus('mandatory')
wfStacCircuitDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfStacCircuitDisable.setStatus('mandatory')
wfStacCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfStacCircuitId.setStatus('mandatory')
wfStacCircuitEngineType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2), ("inherit", 3), ("none", 4))).clone('software')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfStacCircuitEngineType.setStatus('mandatory')
wfStacCircuitCompressionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("mode0", 1), ("mode3", 4))).clone('mode3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfStacCircuitCompressionMode.setStatus('mandatory')
wfStacCircuitCompressorState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitCompressorState.setStatus('mandatory')
wfStacCircuitDecompressorState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("disabled", 2), ("reset", 3))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitDecompressorState.setStatus('mandatory')
wfStacCircuitFallBackCompressionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("softwarecpc", 1), ("none", 2))).clone('softwarecpc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfStacCircuitFallBackCompressionMode.setStatus('mandatory')
wfStacCircuitCompressorInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitCompressorInBytes.setStatus('mandatory')
wfStacCircuitCompressorOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitCompressorOutBytes.setStatus('mandatory')
wfStacCircuitDecompressorInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitDecompressorInBytes.setStatus('mandatory')
wfStacCircuitDecompressorOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitDecompressorOutBytes.setStatus('mandatory')
wfStacCircuitTxMode0Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitTxMode0Packets.setStatus('mandatory')
wfStacCircuitRxMode0Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitRxMode0Packets.setStatus('mandatory')
wfStacCircuitTxMode3Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitTxMode3Packets.setStatus('mandatory')
wfStacCircuitRxMode3Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitRxMode3Packets.setStatus('mandatory')
wfStacCircuitTxExpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitTxExpPackets.setStatus('mandatory')
wfStacCircuitRxExpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitRxExpPackets.setStatus('mandatory')
wfStacCircuitTxResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitTxResetReqs.setStatus('mandatory')
wfStacCircuitRxResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 22, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfStacCircuitRxResetReqs.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-WCP-MIB", wfWcpVcCompressorState=wfWcpVcCompressorState, wfWcpVcDecompressorOutBytes=wfWcpVcDecompressorOutBytes, wfWcpCircuitId=wfWcpCircuitId, wfStacCircuitDisable=wfStacCircuitDisable, wfStacCircuitTxResetReqs=wfStacCircuitTxResetReqs, wfHwComp32kContextsAvailable=wfHwComp32kContextsAvailable, wfHwCompDecompressionQHiWatermark=wfHwCompDecompressionQHiWatermark, wfWcpVcLineNumber=wfWcpVcLineNumber, wfWcpVcId=wfWcpVcId, wfWcpVcRexmitTimeouts=wfWcpVcRexmitTimeouts, wfWcpVcCompressorOutBytes=wfWcpVcCompressorOutBytes, wfHwCompStacContextsTotal=wfHwCompStacContextsTotal, wfWcpVcLLIndex=wfWcpVcLLIndex, wfHwCompCompressionQHiWatermark=wfHwCompCompressionQHiWatermark, wfStacCircuitCompressorState=wfStacCircuitCompressorState, wfWcpVcCompressionMode=wfWcpVcCompressionMode, wfStacCircuitCompressorInBytes=wfStacCircuitCompressorInBytes, wfStacCircuitTxMode3Packets=wfStacCircuitTxMode3Packets, wfWcpVcRxRexmitNaks=wfWcpVcRxRexmitNaks, wfHwCompDecompressionPkts=wfHwCompDecompressionPkts, wfWcpLineLLIndex=wfWcpLineLLIndex, wfHwCompCompressionHashTblSize=wfHwCompCompressionHashTblSize, wfStacCircuitTable=wfStacCircuitTable, wfHwCompPpcContextsRegistered=wfHwCompPpcContextsRegistered, wfHwCompRxDroppedPkts=wfHwCompRxDroppedPkts, wfStacCircuitDecompressorOutBytes=wfStacCircuitDecompressorOutBytes, wfHwComp8kCpcContextsInUse=wfHwComp8kCpcContextsInUse, wfHwCompEntry=wfHwCompEntry, wfHwCompRxNonCompressedPkts=wfHwCompRxNonCompressedPkts, wfWcpLineEntry=wfWcpLineEntry, wfStacCircuitId=wfStacCircuitId, wfHwCompChipType=wfHwCompChipType, wfWcpVcTxRexmitNaks=wfWcpVcTxRexmitNaks, wfWcpVcCompressorInBytes=wfWcpVcCompressorInBytes, wfWcpVcHistorySize=wfWcpVcHistorySize, wfHwComp32kContextsInUse=wfHwComp32kContextsInUse, wfWcpLineLineNumber=wfWcpLineLineNumber, wfStacCircuitCompressionMode=wfStacCircuitCompressionMode, wfHwCompDecompressionTotalRingSize=wfHwCompDecompressionTotalRingSize, wfWcpVcDecompressorState=wfWcpVcDecompressorState, wfHwCompDecompressionRingOverflows=wfHwCompDecompressionRingOverflows, wfWcpVcDataOutOfSeqs=wfWcpVcDataOutOfSeqs, wfHwCompTxNonCompressedPkts=wfHwCompTxNonCompressedPkts, wfWcpLineDisable=wfWcpLineDisable, wfWcpVcTxPPCPackets=wfWcpVcTxPPCPackets, wfWcpVcTable=wfWcpVcTable, wfWcpCircuitHistorySize=wfWcpCircuitHistorySize, wfHwCompMsaCpcContextsRegistered=wfHwCompMsaCpcContextsRegistered, wfWcpLineClientDecompressorRingSize=wfWcpLineClientDecompressorRingSize, wfHwCompTxExpandedPkts=wfHwCompTxExpandedPkts, wfStacCircuitRxExpPackets=wfStacCircuitRxExpPackets, wfHwCompSlot=wfHwCompSlot, wfWcpVcDecompressorInBytes=wfWcpVcDecompressorInBytes, wfHwComp8kContextsAvailable=wfHwComp8kContextsAvailable, wfWcpCircuitCompressionMode=wfWcpCircuitCompressionMode, wfHwCompMsa8KContextsGuaranteed=wfHwCompMsa8KContextsGuaranteed, wfWcpVcTxRexmitReqs=wfWcpVcTxRexmitReqs, wfStacCircuitTxExpPackets=wfStacCircuitTxExpPackets, wfWcpVcSearchDepth=wfWcpVcSearchDepth, wfHwComp8kContextsTotal=wfHwComp8kContextsTotal, wfHwCompModule=wfHwCompModule, wfWcpVcTxCPCPackets=wfWcpVcTxCPCPackets, wfStacCircuitDelete=wfStacCircuitDelete, wfHwCompDecompressionErrors=wfHwCompDecompressionErrors, wfHwCompStacPpcContextsRegistered=wfHwCompStacPpcContextsRegistered, wfHwCompState=wfHwCompState, wfWcpCircuitCompressorOutBytes=wfWcpCircuitCompressorOutBytes, wfWcpLineClientCompressorRingSize=wfWcpLineClientCompressorRingSize, wfHwCompCompressionPkts=wfHwCompCompressionPkts, wfStacCircuitEntry=wfStacCircuitEntry, wfHwCompDecompressionInternalErrors=wfHwCompDecompressionInternalErrors, wfHwCompStacCompressedPkts=wfHwCompStacCompressedPkts, wfHwCompMsaRxNonCompressedPkts=wfHwCompMsaRxNonCompressedPkts, wfWcpLineDelete=wfWcpLineDelete, wfWcpVcExceededKs=wfWcpVcExceededKs, wfWcpCircuitEntry=wfWcpCircuitEntry, wfStacCircuitEngineType=wfStacCircuitEngineType, wfWcpLineSearchDepth=wfWcpLineSearchDepth, wfHwCompCompressionDescFormatErrors=wfHwCompCompressionDescFormatErrors, wfStacCircuitFallBackCompressionMode=wfStacCircuitFallBackCompressionMode, wfStacCircuitRxMode0Packets=wfStacCircuitRxMode0Packets, wfWcpVcTxAntiExpPackets=wfWcpVcTxAntiExpPackets, wfHwCompTable=wfHwCompTable, wfHwCompMsaPpcContextsRegistered=wfHwCompMsaPpcContextsRegistered, wfWcpLineCompressionMode=wfWcpLineCompressionMode, wfWcpCircuitTable=wfWcpCircuitTable, wfHwCompCompressionErrors=wfHwCompCompressionErrors, wfHwCompStacCpcContextsRegistered=wfHwCompStacCpcContextsRegistered, wfWcpVcCircuitId=wfWcpVcCircuitId, wfHwCompDecompressionDescFormatErrors=wfHwCompDecompressionDescFormatErrors, wfHwCompMsaDecompressedPkts=wfHwCompMsaDecompressedPkts, wfStacCircuitRxResetReqs=wfStacCircuitRxResetReqs, wfHwCompDecompressionCcbFormatErrors=wfHwCompDecompressionCcbFormatErrors, wfStacCircuitRxMode3Packets=wfStacCircuitRxMode3Packets, wfWcpLineTable=wfWcpLineTable, wfHwCompCompressionSrcPktLenErrors=wfHwCompCompressionSrcPktLenErrors, wfHwCompRxLcbMismatches=wfHwCompRxLcbMismatches, wfStacCircuitDecompressorState=wfStacCircuitDecompressorState, wfHwComp32kContextsTotal=wfHwComp32kContextsTotal, wfHwCompCompressionInternalErrors=wfHwCompCompressionInternalErrors, wfHwCompMsaTxExpandedPkts=wfHwCompMsaTxExpandedPkts, wfWcpLineHistorySize=wfWcpLineHistorySize, wfHwCompStacTxNonCompressedPkts=wfHwCompStacTxNonCompressedPkts, wfHwCompCpcContextsRegistered=wfHwCompCpcContextsRegistered, wfWcpCircuitEngineType=wfWcpCircuitEngineType, wfWcpVcInvalidOpCodes=wfWcpVcInvalidOpCodes, wfWcpLineBufferSize=wfWcpLineBufferSize, wfHwCompMsaTxNonCompressedPkts=wfHwCompMsaTxNonCompressedPkts, wfHwCompCompressionCcbFormatErrors=wfHwCompCompressionCcbFormatErrors, wfHwCompDecompressionCurrentQueued=wfHwCompDecompressionCurrentQueued, wfWcpCircuitDecompressorOutBytes=wfWcpCircuitDecompressorOutBytes, wfWcpVcTxResetReqs=wfWcpVcTxResetReqs, wfWcpLineEngineType=wfWcpLineEngineType, wfHwCompCompressionTotalRingSize=wfHwCompCompressionTotalRingSize, wfStacCircuitCompressorOutBytes=wfStacCircuitCompressorOutBytes, wfHwCompCompressionCurrentQueued=wfHwCompCompressionCurrentQueued, wfWcpVcRxCPCPackets=wfWcpVcRxCPCPackets, wfWcpVcRxResetReqs=wfWcpVcRxResetReqs, wfWcpVcRexmitOutOfSeqs=wfWcpVcRexmitOutOfSeqs, wfWcpVcEngineType=wfWcpVcEngineType, wfHwComp8kPpcContextsInUse=wfHwComp8kPpcContextsInUse, wfHwCompDecompressionHistoryTotal=wfHwCompDecompressionHistoryTotal, wfWcpCircuitSearchDepth=wfWcpCircuitSearchDepth, wfWcpCircuitDisable=wfWcpCircuitDisable, wfHwCompDecompressionSrcPktLenErrors=wfHwCompDecompressionSrcPktLenErrors, wfStacCircuitTxMode0Packets=wfStacCircuitTxMode0Packets, wfWcpLineFallbackCompressionMode=wfWcpLineFallbackCompressionMode, wfHwCompStacContextsGuaranteed=wfHwCompStacContextsGuaranteed, wfWcpVcRxAntiExpPackets=wfWcpVcRxAntiExpPackets, wfHwCompCompressionHistoryTotal=wfHwCompCompressionHistoryTotal, wfHwCompStacContextsAvailable=wfHwCompStacContextsAvailable, wfHwCompStacTxExpandedPkts=wfHwCompStacTxExpandedPkts, wfWcpVcRxPPCPackets=wfWcpVcRxPPCPackets, wfHwCompStacRxNonCompressedPkts=wfHwCompStacRxNonCompressedPkts, wfStacCircuitDecompressorInBytes=wfStacCircuitDecompressorInBytes, wfWcpVcEntry=wfWcpVcEntry, wfHwCompEngineNumber=wfHwCompEngineNumber, wfWcpCircuitDelete=wfWcpCircuitDelete, wfHwCompStacPpcContextsInUse=wfHwCompStacPpcContextsInUse, wfHwCompStacDecompressedPkts=wfHwCompStacDecompressedPkts, wfWcpVcRxRexmitReqs=wfWcpVcRxRexmitReqs, wfHwCompMsaCompressedPkts=wfHwCompMsaCompressedPkts, wfHwCompCompressionRingOverflows=wfHwCompCompressionRingOverflows)
