#
# PySNMP MIB module CHAR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHAR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:31:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter64, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, IpAddress, Counter32, Unsigned32, iso, MibIdentifier, ObjectIdentity, TimeTicks, ModuleIdentity, experimental = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "IpAddress", "Counter32", "Unsigned32", "iso", "MibIdentifier", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "experimental")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
char = MibIdentifier((1, 3, 6, 1, 3, 19))
class AutonomousType(ObjectIdentifier):
    pass

class InstancePointer(ObjectIdentifier):
    pass

charNumber = MibScalar((1, 3, 6, 1, 3, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charNumber.setStatus('mandatory')
charPortTable = MibTable((1, 3, 6, 1, 3, 19, 2), )
if mibBuilder.loadTexts: charPortTable.setStatus('mandatory')
charPortEntry = MibTableRow((1, 3, 6, 1, 3, 19, 2, 1), ).setIndexNames((0, "CHAR-MIB", "charPortIndex"))
if mibBuilder.loadTexts: charPortEntry.setStatus('mandatory')
charPortIndex = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortIndex.setStatus('mandatory')
charPortName = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortName.setStatus('mandatory')
charPortType = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("physical", 1), ("virtual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortType.setStatus('mandatory')
charPortHardware = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 4), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortHardware.setStatus('mandatory')
charPortReset = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortReset.setStatus('mandatory')
charPortAdminStatus = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("off", 3), ("maintenance", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortAdminStatus.setStatus('mandatory')
charPortOperStatus = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("maintenance", 3), ("absent", 4), ("active", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortOperStatus.setStatus('mandatory')
charPortLastChange = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortLastChange.setStatus('mandatory')
charPortInFlowType = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("xonXoff", 2), ("hardware", 3), ("ctsRts", 4), ("dsrDtr", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortInFlowType.setStatus('mandatory')
charPortOutFlowType = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("xonXoff", 2), ("hardware", 3), ("ctsRts", 4), ("dsrDtr", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortOutFlowType.setStatus('mandatory')
charPortInFlowState = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("stop", 3), ("go", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortInFlowState.setStatus('mandatory')
charPortOutFlowState = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("stop", 3), ("go", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortOutFlowState.setStatus('mandatory')
charPortInCharacters = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortInCharacters.setStatus('mandatory')
charPortOutCharacters = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortOutCharacters.setStatus('mandatory')
charPortAdminOrigin = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dynamic", 1), ("network", 2), ("local", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortAdminOrigin.setStatus('mandatory')
charPortSessionMaximum = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortSessionMaximum.setStatus('mandatory')
charPortSessionNumber = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortSessionNumber.setStatus('mandatory')
charPortSessionIndex = MibTableColumn((1, 3, 6, 1, 3, 19, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortSessionIndex.setStatus('mandatory')
charSessTable = MibTable((1, 3, 6, 1, 3, 19, 3), )
if mibBuilder.loadTexts: charSessTable.setStatus('mandatory')
charSessEntry = MibTableRow((1, 3, 6, 1, 3, 19, 3, 1), ).setIndexNames((0, "CHAR-MIB", "charSessPortIndex"), (0, "CHAR-MIB", "charSessIndex"))
if mibBuilder.loadTexts: charSessEntry.setStatus('mandatory')
charSessPortIndex = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessPortIndex.setStatus('mandatory')
charSessIndex = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessIndex.setStatus('mandatory')
charSessKill = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charSessKill.setStatus('mandatory')
charSessState = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("connecting", 1), ("connected", 2), ("disconnecting", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessState.setStatus('mandatory')
charSessProtocol = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 5), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessProtocol.setStatus('mandatory')
wellKnownProtocols = MibIdentifier((1, 3, 6, 1, 3, 19, 4))
protocolOther = MibIdentifier((1, 3, 6, 1, 3, 19, 4, 1))
protocolTelnet = MibIdentifier((1, 3, 6, 1, 3, 19, 4, 2))
protocolRlogin = MibIdentifier((1, 3, 6, 1, 3, 19, 4, 3))
protocolLat = MibIdentifier((1, 3, 6, 1, 3, 19, 4, 4))
protocolX29 = MibIdentifier((1, 3, 6, 1, 3, 19, 4, 5))
protocolVtp = MibIdentifier((1, 3, 6, 1, 3, 19, 4, 6))
charSessOperOrigin = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("network", 2), ("local", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessOperOrigin.setStatus('mandatory')
charSessInCharacters = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessInCharacters.setStatus('mandatory')
charSessOutCharacters = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessOutCharacters.setStatus('mandatory')
charSessConnectionId = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 9), InstancePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessConnectionId.setStatus('mandatory')
charSessStartTime = MibTableColumn((1, 3, 6, 1, 3, 19, 3, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessStartTime.setStatus('mandatory')
mibBuilder.exportSymbols("CHAR-MIB", charSessIndex=charSessIndex, charPortReset=charPortReset, protocolVtp=protocolVtp, charPortAdminStatus=charPortAdminStatus, charSessProtocol=charSessProtocol, protocolRlogin=protocolRlogin, protocolOther=protocolOther, charPortInFlowState=charPortInFlowState, charPortTable=charPortTable, charSessPortIndex=charSessPortIndex, charSessOutCharacters=charSessOutCharacters, charPortSessionMaximum=charPortSessionMaximum, charPortOperStatus=charPortOperStatus, charSessKill=charSessKill, charPortType=charPortType, protocolLat=protocolLat, charSessState=charSessState, charSessTable=charSessTable, charPortOutFlowType=charPortOutFlowType, charPortSessionIndex=charPortSessionIndex, charPortInCharacters=charPortInCharacters, charSessEntry=charSessEntry, charSessOperOrigin=charSessOperOrigin, charPortOutCharacters=charPortOutCharacters, charPortHardware=charPortHardware, char=char, charNumber=charNumber, charPortEntry=charPortEntry, charSessInCharacters=charSessInCharacters, charPortLastChange=charPortLastChange, charSessConnectionId=charSessConnectionId, charPortOutFlowState=charPortOutFlowState, charSessStartTime=charSessStartTime, AutonomousType=AutonomousType, charPortIndex=charPortIndex, wellKnownProtocols=wellKnownProtocols, protocolTelnet=protocolTelnet, charPortName=charPortName, protocolX29=protocolX29, charPortSessionNumber=charPortSessionNumber, InstancePointer=InstancePointer, charPortInFlowType=charPortInFlowType, charPortAdminOrigin=charPortAdminOrigin)
