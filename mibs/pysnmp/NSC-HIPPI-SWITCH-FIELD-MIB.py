#
# PySNMP MIB module NSC-HIPPI-SWITCH-FIELD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NSC-HIPPI-SWITCH-FIELD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:15:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
nsc, nscMib, nscProducts, nscHippiSwitch = mibBuilder.importSymbols("NSC-MIB", "nsc", "nscMib", "nscProducts", "nscHippiSwitch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, TimeTicks, Bits, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, ModuleIdentity, MibIdentifier, IpAddress, Integer32, NotificationType, Counter64, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "Bits", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "ModuleIdentity", "MibIdentifier", "IpAddress", "Integer32", "NotificationType", "Counter64", "enterprises")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
ps32FieldDir = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7))
ps32Clear = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 2))
ps32Disable = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 3))
ps32Display = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4))
ps32Enable = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 5))
ps32Restore = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 7))
ps32Save = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 8))
ps32Set = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 9))
ps32BistAPort = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32BistAPort.setStatus('mandatory')
ps32ClearAll = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32ClearAll.setStatus('mandatory')
ps32ClearErrorsAll = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32ClearErrorsAll.setStatus('mandatory')
ps32ClearErrorsInPort = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32ClearErrorsInPort.setStatus('mandatory')
ps32ClearPathAll = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32ClearPathAll.setStatus('mandatory')
ps32ClearPathInPort = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32ClearPathInPort.setStatus('mandatory')
ps32ClearPathDest = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32ClearPathDest.setStatus('mandatory')
ps32ClearPathForce = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32ClearPathForce.setStatus('mandatory')
ps32ClearStatsAll = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32ClearStatsAll.setStatus('mandatory')
ps32ClearStatsInPort = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32ClearStatsInPort.setStatus('mandatory')
ps32Disable2 = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 3))
ps32DisablePortAll = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32DisablePortAll.setStatus('mandatory')
ps32DisablePortInPort = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32DisablePortInPort.setStatus('mandatory')
ps32Display2 = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4))
ps32Config = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 1))
ps32PathList = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 2))
ps32Status = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3))
ps32AllStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 1))
ps32IPStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 2))
ps32MiscStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 3))
ps32DCTitle = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps32DCTitle.setStatus('mandatory')
ps32DCTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 1, 2), )
if mibBuilder.loadTexts: ps32DCTable.setStatus('mandatory')
ps32DCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 1, 2, 1), )
if mibBuilder.loadTexts: ps32DCEntry.setStatus('mandatory')
ps32DCLine = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps32DCLine.setStatus('mandatory')
ps32DSATitle = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps32DSATitle.setStatus('mandatory')
ps32DSATable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 1, 2), )
if mibBuilder.loadTexts: ps32DSATable.setStatus('mandatory')
ps32DSAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 1, 2, 1), )
if mibBuilder.loadTexts: ps32DSAEntry.setStatus('mandatory')
ps32DSALine = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps32DSALine.setStatus('mandatory')
ps32DSITable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 2, 1), )
if mibBuilder.loadTexts: ps32DSITable.setStatus('mandatory')
ps32DSIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 2, 1, 1), ).setIndexNames((0, "NSC-HIPPI-SWITCH-FIELD-MIB", "ps32PortNumber"))
if mibBuilder.loadTexts: ps32DSIEntry.setStatus('mandatory')
ps32DSILine1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps32DSILine1.setStatus('mandatory')
ps32DSILine2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps32DSILine2.setStatus('mandatory')
ps32DSILine3 = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps32DSILine3.setStatus('mandatory')
ps32DSILine4 = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps32DSILine4.setStatus('mandatory')
ps32DSILine5 = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps32DSILine5.setStatus('mandatory')
ps32DSILine6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps32DSILine6.setStatus('mandatory')
ps32DSILine7 = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps32DSILine7.setStatus('mandatory')
ps32DSILine8 = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps32DSILine8.setStatus('mandatory')
ps32DSILine9 = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps32DSILine9.setStatus('mandatory')
ps32DSMTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 3, 1), )
if mibBuilder.loadTexts: ps32DSMTable.setStatus('mandatory')
ps32DSMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 3, 1, 1), )
if mibBuilder.loadTexts: ps32DSMEntry.setStatus('mandatory')
ps32DSMLine = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 3, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps32DSMLine.setStatus('mandatory')
ps32DSPTable = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps32DSPTable.setStatus('mandatory')
ps32DSPPathwayTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 2, 1, 1), )
if mibBuilder.loadTexts: ps32DSPPathwayTable.setStatus('mandatory')
ps32DSPPathwayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 2, 1, 1, 1), ).setIndexNames((0, "NSC-HIPPI-SWITCH-FIELD-MIB", "ps32PortNumber"), (0, "NSC-HIPPI-SWITCH-FIELD-MIB", "ps32PathwayHDA"))
if mibBuilder.loadTexts: ps32DSPPathwayEntry.setStatus('mandatory')
ps32DSPLine = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 2, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps32DSPLine.setStatus('mandatory')
ps32DSPDPathwayTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 2, 2), )
if mibBuilder.loadTexts: ps32DSPDPathwayTable.setStatus('mandatory')
ps32DSPDPathwayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 2, 2, 1), ).setIndexNames((0, "NSC-HIPPI-SWITCH-FIELD-MIB", "ps32PortNumber"), (0, "NSC-HIPPI-SWITCH-FIELD-MIB", "ps32PathwayHDA"))
if mibBuilder.loadTexts: ps32DSPDPathwayEntry.setStatus('mandatory')
ps32DSPDLine = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps32DSPDLine.setStatus('mandatory')
ps32DSPIPathwayTable = MibTable((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 2, 3), )
if mibBuilder.loadTexts: ps32DSPIPathwayTable.setStatus('mandatory')
ps32DSPIPathwayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 2, 3, 1), ).setIndexNames((0, "NSC-HIPPI-SWITCH-FIELD-MIB", "ps32PortNumber"), (0, "NSC-HIPPI-SWITCH-FIELD-MIB", "ps32PathwayHDA"))
if mibBuilder.loadTexts: ps32DSPIPathwayEntry.setStatus('mandatory')
ps32DSPILine = MibTableColumn((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 2, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps32DSPILine.setStatus('mandatory')
ps32Version = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ps32Version.setStatus('mandatory')
ps32Enable2 = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 5))
ps32EnablePortAll = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32EnablePortAll.setStatus('mandatory')
ps32EnablePortInPort = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32EnablePortInPort.setStatus('mandatory')
ps32ResetSwitch = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32ResetSwitch.setStatus('mandatory')
ps32Restore2 = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 7))
ps32RestorePathAll = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32RestorePathAll.setStatus('mandatory')
ps32RestorePathInPort = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32RestorePathInPort.setStatus('mandatory')
ps32Save2 = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 8))
ps32SaveAll = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32SaveAll.setStatus('mandatory')
ps32SaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32SaveConfig.setStatus('mandatory')
ps32SavePathAll = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32SavePathAll.setStatus('mandatory')
ps32SavePathInPort = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32SavePathInPort.setStatus('mandatory')
ps32Set2 = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 9))
ps32SetPathAll = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32SetPathAll.setStatus('mandatory')
ps32SetPathDest = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32SetPathDest.setStatus('mandatory')
ps32SetPathForce = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 4, 7, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ps32SetPathForce.setStatus('mandatory')
mibBuilder.exportSymbols("NSC-HIPPI-SWITCH-FIELD-MIB", ps32RestorePathInPort=ps32RestorePathInPort, ps32DCTitle=ps32DCTitle, ps32DCEntry=ps32DCEntry, ps32Enable2=ps32Enable2, ps32ClearAll=ps32ClearAll, ps32DCTable=ps32DCTable, ps32Restore2=ps32Restore2, ps32DSMEntry=ps32DSMEntry, ps32DCLine=ps32DCLine, ps32DSPPathwayTable=ps32DSPPathwayTable, ps32DSPDLine=ps32DSPDLine, ps32DSALine=ps32DSALine, ps32DSPTable=ps32DSPTable, ps32SetPathAll=ps32SetPathAll, ps32DSILine1=ps32DSILine1, ps32Enable=ps32Enable, ps32SetPathDest=ps32SetPathDest, ps32DSPLine=ps32DSPLine, ps32SaveConfig=ps32SaveConfig, ps32ClearPathInPort=ps32ClearPathInPort, ps32ClearPathAll=ps32ClearPathAll, ps32EnablePortAll=ps32EnablePortAll, ps32Save2=ps32Save2, ps32ClearStatsAll=ps32ClearStatsAll, ps32ClearPathForce=ps32ClearPathForce, ps32DSILine3=ps32DSILine3, ps32DSPPathwayEntry=ps32DSPPathwayEntry, ps32Config=ps32Config, ps32SavePathInPort=ps32SavePathInPort, ps32DSPIPathwayEntry=ps32DSPIPathwayEntry, ps32Set2=ps32Set2, ps32ResetSwitch=ps32ResetSwitch, ps32ClearErrorsAll=ps32ClearErrorsAll, ps32DSILine2=ps32DSILine2, ps32FieldDir=ps32FieldDir, ps32Clear=ps32Clear, ps32DSPDPathwayEntry=ps32DSPDPathwayEntry, ps32DSPIPathwayTable=ps32DSPIPathwayTable, ps32IPStatus=ps32IPStatus, ps32Display2=ps32Display2, ps32PathList=ps32PathList, ps32DSITable=ps32DSITable, ps32DSATable=ps32DSATable, ps32ClearStatsInPort=ps32ClearStatsInPort, ps32DisablePortAll=ps32DisablePortAll, ps32Save=ps32Save, ps32DSILine6=ps32DSILine6, ps32SaveAll=ps32SaveAll, ps32Status=ps32Status, ps32MiscStatus=ps32MiscStatus, ps32Display=ps32Display, ps32SavePathAll=ps32SavePathAll, ps32AllStatus=ps32AllStatus, ps32Restore=ps32Restore, ps32DSPDPathwayTable=ps32DSPDPathwayTable, ps32Disable=ps32Disable, ps32DSAEntry=ps32DSAEntry, ps32DSILine5=ps32DSILine5, ps32DSILine4=ps32DSILine4, ps32BistAPort=ps32BistAPort, ps32ClearErrorsInPort=ps32ClearErrorsInPort, ps32DSIEntry=ps32DSIEntry, ps32DSMTable=ps32DSMTable, ps32DSATitle=ps32DSATitle, ps32DSILine7=ps32DSILine7, ps32SetPathForce=ps32SetPathForce, ps32DSILine8=ps32DSILine8, ps32DSMLine=ps32DSMLine, ps32EnablePortInPort=ps32EnablePortInPort, ps32DisablePortInPort=ps32DisablePortInPort, ps32DSILine9=ps32DSILine9, ps32DSPILine=ps32DSPILine, ps32Disable2=ps32Disable2, ps32Version=ps32Version, ps32RestorePathAll=ps32RestorePathAll, ps32Set=ps32Set, ps32ClearPathDest=ps32ClearPathDest)
