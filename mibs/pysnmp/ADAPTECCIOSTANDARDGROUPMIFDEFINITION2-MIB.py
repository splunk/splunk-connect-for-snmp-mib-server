#
# PySNMP MIB module ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:58:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, MibIdentifier, Counter64, Integer32, ModuleIdentity, NotificationType, ObjectIdentity, Unsigned32, enterprises, Gauge32, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "Counter64", "Integer32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Unsigned32", "enterprises", "Gauge32", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DmiCounter(Counter32):
    pass

class DmiInteger(Integer32):
    pass

class DmiInteger64X(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-18446744073709551615, 18446744073709551615)

class DmiOctetstring(OctetString):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiDateX(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

adaptec = MibIdentifier((1, 3, 6, 1, 4, 1, 795))
thirdparty = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 50))
isc20 = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 50, 10))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 50, 10, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 1, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 1, 1, 5), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccurredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vVerificationIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 99), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 99, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
a99MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 99, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibName.setStatus('mandatory')
a99MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 99, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibOid.setStatus('mandatory')
a99DisableTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 99, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a99DisableTrap.setStatus('mandatory')
tStorageDevices = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001), )
if mibBuilder.loadTexts: tStorageDevices.setStatus('mandatory')
eStorageDevices = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7001StorageDeviceIndex"))
if mibBuilder.loadTexts: eStorageDevices.setStatus('mandatory')
a7001StorageDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001StorageDeviceIndex.setStatus('mandatory')
a7001Type = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRigidDiskDrive", 3), ("vFlexibleDisketteDrive", 4), ("vOpticalWrite-onceread-manyWormDrive", 6), ("vMagneto-opticalDrive", 7), ("vCompactDiskDrive", 8), ("vFlashDisk", 9), ("vCartridgeRigidDiskDrive", 10), ("vOpticalFloppyDrive", 11), ("vTapeDrive", 12), ("vSolidState", 13), ("vMediaChanger", 14), ("vDigitalVersatileDiskDvdDrive", 15), ("vDigitalVersatileDiskDvdRamDrive", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001Type.setStatus('mandatory')
a7001TypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001TypeDescription.setStatus('mandatory')
a7001Sub_identifier = MibScalar((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 4), DmiDisplaystring()).setLabel("a7001Sub-identifier").setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001Sub_identifier.setStatus('mandatory')
a7001MediaDataBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001MediaDataBlockSize.setStatus('mandatory')
a7001FormattedMediaCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 6), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001FormattedMediaCapacity.setStatus('mandatory')
a7001RemovableDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001RemovableDevice.setStatus('mandatory')
a7001DeviceLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001DeviceLoaded.setStatus('mandatory')
a7001RemovableMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001RemovableMedia.setStatus('mandatory')
a7001MediaLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001MediaLoaded.setStatus('mandatory')
a7001Compression = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001Compression.setStatus('mandatory')
a7001Encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7001, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7001Encryption.setStatus('mandatory')
tStorageDevicesEvents = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002), )
if mibBuilder.loadTexts: tStorageDevicesEvents.setStatus('mandatory')
eStorageDevicesEvents = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002AssociatedGroup"))
if mibBuilder.loadTexts: eStorageDevicesEvents.setStatus('mandatory')
a7002StorageDevicesEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vRebuildInProgress", 1), ("vStorageDeviceReadying", 2), ("vStorageDeviceError", 3), ("vSelf-monitoringWarning", 4), ("vCioEvent", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002StorageDevicesEventType.setStatus('mandatory')
a7002EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002EventSeverity.setStatus('mandatory')
a7002EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002EventIsStateBased.setStatus('mandatory')
a7002EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002EventStateKey.setStatus('mandatory')
a7002AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002AssociatedGroup.setStatus('mandatory')
a7002EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002EventSystem.setStatus('mandatory')
a7002EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002EventSubsystem.setStatus('mandatory')
a7002EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNotProvided", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002EventSolution.setStatus('mandatory')
a7002InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002InstanceDataPresent.setStatus('mandatory')
a7002EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002EventMessage.setStatus('mandatory')
a7002VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7002VendorSpecificData.setStatus('mandatory')
tStorageController = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7003), )
if mibBuilder.loadTexts: tStorageController.setStatus('mandatory')
eStorageController = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7003, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7003ControllerIndex"))
if mibBuilder.loadTexts: eStorageController.setStatus('mandatory')
a7003ControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7003, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7003ControllerIndex.setStatus('mandatory')
a7003Identification = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7003, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7003Identification.setStatus('mandatory')
a7003ProtectionManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7003, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vUnprotected", 3), ("vProtected", 4), ("vProtectedThroughScsi-3ControllerCommand", 5), ("vProtectedThroughScsi-3ControllerComman1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7003ProtectionManagement.setStatus('mandatory')
a7003BusMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7003, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7003BusMaster.setStatus('mandatory')
a7003SecondsSinceLastPower_up = MibScalar((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7003, 1, 5), DmiInteger()).setLabel("a7003SecondsSinceLastPower-up").setMaxAccess("readonly")
if mibBuilder.loadTexts: a7003SecondsSinceLastPower_up.setStatus('mandatory')
tStorageControllerEvents = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004), )
if mibBuilder.loadTexts: tStorageControllerEvents.setStatus('mandatory')
eStorageControllerEvents = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004AssociatedGroup"))
if mibBuilder.loadTexts: eStorageControllerEvents.setStatus('mandatory')
a7004StorageControllerEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vStorageControllerError", 1), ("vSelf-monitoringWarning1", 2), ("vCioEvent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004StorageControllerEventType.setStatus('mandatory')
a7004EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004EventSeverity.setStatus('mandatory')
a7004EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004EventIsStateBased.setStatus('mandatory')
a7004EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004EventStateKey.setStatus('mandatory')
a7004AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004AssociatedGroup.setStatus('mandatory')
a7004EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004EventSystem.setStatus('mandatory')
a7004EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004EventSubsystem.setStatus('mandatory')
a7004EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNotProvided", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004EventSolution.setStatus('mandatory')
a7004InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004InstanceDataPresent.setStatus('mandatory')
a7004EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004EventMessage.setStatus('mandatory')
a7004VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7004VendorSpecificData.setStatus('mandatory')
tEnclosure = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7005), )
if mibBuilder.loadTexts: tEnclosure.setStatus('mandatory')
eEnclosure = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7005, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7005EnclosureIndex"))
if mibBuilder.loadTexts: eEnclosure.setStatus('mandatory')
a7005EnclosureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7005, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7005EnclosureIndex.setStatus('mandatory')
a7005Type = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7005, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDecfault", 3), ("vSaf-te", 4), ("vSes", 5), ("vAemi", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7005Type.setStatus('mandatory')
a7005Description = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7005, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7005Description.setStatus('mandatory')
tEnclosureEvents = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006), )
if mibBuilder.loadTexts: tEnclosureEvents.setStatus('mandatory')
eEnclosureEvents = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006AssociatedGroup"))
if mibBuilder.loadTexts: eEnclosureEvents.setStatus('mandatory')
a7006EnclosureEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vCioEvent", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006EnclosureEventType.setStatus('mandatory')
a7006EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006EventSeverity.setStatus('mandatory')
a7006EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006EventIsStateBased.setStatus('mandatory')
a7006EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006EventStateKey.setStatus('mandatory')
a7006AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006AssociatedGroup.setStatus('mandatory')
a7006EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006EventSystem.setStatus('mandatory')
a7006EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006EventSubsystem.setStatus('mandatory')
a7006EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNotProvided", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006EventSolution.setStatus('mandatory')
a7006InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006InstanceDataPresent.setStatus('mandatory')
a7006EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006EventMessage.setStatus('mandatory')
a7006VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7006VendorSpecificData.setStatus('mandatory')
tBusPort = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007), )
if mibBuilder.loadTexts: tBusPort.setStatus('mandatory')
eBusPort = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7007BusPortIndex"))
if mibBuilder.loadTexts: eBusPort.setStatus('mandatory')
a7007BusPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007BusPortIndex.setStatus('mandatory')
a7007Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEisa", 3), ("vIsa", 4), ("vPci", 5), ("vAtaatapi", 6), ("vFlexibleDiskette", 7), ("v1496", 8), ("vScsiParallelInterface", 9), ("vScsiFibreChannelProtocol", 10), ("vScsiSerialBusProtocol", 11), ("vScsiSerialBusProtocol-21394", 12), ("vScsiSerialStorageArchitecture", 13), ("vVesa", 14), ("vPcmcia", 15), ("vUniversalSerialBus", 16), ("vParallelPort", 17), ("vEscon", 18), ("vDiagnostic", 19), ("vI2c", 20), ("vPower", 21), ("vHippi", 22), ("vMultibus", 23), ("vVme", 24), ("vIpi", 25), ("vIeee-488", 26), ("vRs232", 27), ("vIeee802310base5", 28), ("vIeee802310base2", 29), ("vIeee80231base5", 30), ("vIeee802310broad36", 31), ("vIeee8023100basevg", 32), ("vIeee8025Token-ring", 33), ("vAnsiX3t95Fddi", 34), ("vMca", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007Protocol.setStatus('mandatory')
a7007ProtocolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007ProtocolDescription.setStatus('mandatory')
a7007SignalCharacteristics = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSingleEnded", 3), ("vDifferential", 4), ("vLowVoltageDifferential", 5), ("vOptical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007SignalCharacteristics.setStatus('mandatory')
a7007AddressDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007AddressDescriptor.setStatus('mandatory')
a7007Isochronous = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007Isochronous.setStatus('mandatory')
a7007MaximumWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007MaximumWidth.setStatus('mandatory')
a7007MaximumTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007MaximumTransferRate.setStatus('mandatory')
a7007MaximumNumberOfAttachments = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007MaximumNumberOfAttachments.setStatus('mandatory')
a7007ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vScsiAHigh-densityShielded50Pins", 4), ("vScsiAHigh-densityUnshielded50Pins", 5), ("vScsiALow-densityShielded50Pins", 6), ("vScsiALow-densityUnshielded50Pins", 7), ("vScsiPHigh-densityShielded68Pins", 8), ("vScsiPHigh-densityUnshielded68Pins", 9), ("vScsiSca-i80Pins", 10), ("vScsiSca-ii80Pins", 11), ("vScsiFibreChannelDb9Copper", 12), ("vScsiFibreChannelFibre", 13), ("vScsiFibreChannelSca-ii40Pins", 14), ("vScsiFibreChannelSca-ii20Pins", 15), ("vScsiFibreChannelBnc", 16), ("vAta3-12Inch40Pins", 17), ("vAta2-12Inch44Pins", 18), ("vSerial9Pin", 19), ("vSerial25Pin", 20), ("vRs23225Pin", 21), ("vRs422", 22), ("vIeee-488", 23), ("vAui", 24), ("vUptCategory3", 25), ("vUptCategory4", 26), ("vUptCategory5", 27), ("vBnc", 28), ("vStpRj11", 29), ("vStpRj45", 30), ("vStpDb9", 31), ("vFiberMic", 32), ("vAppleAui", 33), ("vPciSlot", 34), ("vIsaSlot", 35), ("vEisaSlot", 36), ("vVesaSlot", 37), ("vPcmciaSlot", 38), ("vPcCardSlot", 39), ("vFloppyDiskette5-14Inch", 40), ("vFloppyDiskette3-12Inch", 41), ("vHssdc6Pins", 42), ("vGbicSocket", 43), ("v13946Pins", 44), ("vScsiVhdciShielded68Pins", 45)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007ConnectorType.setStatus('mandatory')
a7007ConnectorTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 11), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007ConnectorTypeDescription.setStatus('mandatory')
a7007ConnectorGender = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7007, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vFemale", 3), ("vMale", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7007ConnectorGender.setStatus('mandatory')
tBusPortEvents = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008), )
if mibBuilder.loadTexts: tBusPortEvents.setStatus('mandatory')
eBusPortEvents = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008AssociatedGroup"))
if mibBuilder.loadTexts: eBusPortEvents.setStatus('mandatory')
a7008BusPortEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vBusPortError", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008BusPortEventType.setStatus('mandatory')
a7008EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008EventSeverity.setStatus('mandatory')
a7008EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008EventIsStateBased.setStatus('mandatory')
a7008EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008EventStateKey.setStatus('mandatory')
a7008AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008AssociatedGroup.setStatus('mandatory')
a7008EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008EventSystem.setStatus('mandatory')
a7008EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008EventSubsystem.setStatus('mandatory')
a7008EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNotProvided", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008EventSolution.setStatus('mandatory')
a7008InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008InstanceDataPresent.setStatus('mandatory')
a7008EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008EventMessage.setStatus('mandatory')
a7008VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7008VendorSpecificData.setStatus('mandatory')
tAggregatePhysicalExtent = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7009), )
if mibBuilder.loadTexts: tAggregatePhysicalExtent.setStatus('mandatory')
eAggregatePhysicalExtent = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7009, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7009AggregatePhysicalExtentIndex"))
if mibBuilder.loadTexts: eAggregatePhysicalExtent.setStatus('mandatory')
a7009AggregatePhysicalExtentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7009, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7009AggregatePhysicalExtentIndex.setStatus('mandatory')
a7009NumberOfBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7009, 1, 2), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7009NumberOfBlocks.setStatus('mandatory')
a7009NumberOfBlocksOfCheckData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7009, 1, 3), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7009NumberOfBlocksOfCheckData.setStatus('mandatory')
tAggregateProtectedSpaceExtent = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7010), )
if mibBuilder.loadTexts: tAggregateProtectedSpaceExtent.setStatus('mandatory')
eAggregateProtectedSpaceExtent = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7010, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7010AggregateProtectedSpaceExtentIndex"))
if mibBuilder.loadTexts: eAggregateProtectedSpaceExtent.setStatus('mandatory')
a7010AggregateProtectedSpaceExtentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7010, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7010AggregateProtectedSpaceExtentIndex.setStatus('mandatory')
a7010NumberOfBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7010, 1, 2), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7010NumberOfBlocks.setStatus('mandatory')
tVolumeSet = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7011), )
if mibBuilder.loadTexts: tVolumeSet.setStatus('mandatory')
eVolumeSet = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7011, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
if mibBuilder.loadTexts: eVolumeSet.setStatus('mandatory')
a7011VolumeSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7011, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7011VolumeSetIndex.setStatus('mandatory')
a7011Name = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7011, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7011Name.setStatus('mandatory')
a7011TotalStorageCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7011, 1, 3), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7011TotalStorageCapacity.setStatus('mandatory')
a7011ProtectedSpaceStripeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7011, 1, 4), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7011ProtectedSpaceStripeLength.setStatus('mandatory')
a7011ProtectedSpaceExtentInterleaveDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7011, 1, 5), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7011ProtectedSpaceExtentInterleaveDepth.setStatus('mandatory')
tVolumeSetEvents = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012), )
if mibBuilder.loadTexts: tVolumeSetEvents.setStatus('mandatory')
eVolumeSetEvents = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"))
if mibBuilder.loadTexts: eVolumeSetEvents.setStatus('mandatory')
a7012VolumeSetEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("vVolumeSetExposed", 1), ("vRebuildInProgress", 2), ("vProtectionDisabled", 3), ("vVolumeSetReadying", 4), ("vRecalculateActive", 5), ("vSpareInUse", 6), ("vVerifyInProgress", 7), ("vVolumeSetBroken", 8), ("vCioEvent", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012VolumeSetEventType.setStatus('mandatory')
a7012EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012EventSeverity.setStatus('mandatory')
a7012EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012EventIsStateBased.setStatus('mandatory')
a7012EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012EventStateKey.setStatus('mandatory')
a7012AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012AssociatedGroup.setStatus('mandatory')
a7012EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012EventSystem.setStatus('mandatory')
a7012EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012EventSubsystem.setStatus('mandatory')
a7012EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNotProvided", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012EventSolution.setStatus('mandatory')
a7012InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012InstanceDataPresent.setStatus('mandatory')
a7012EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012EventMessage.setStatus('mandatory')
a7012VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7012VendorSpecificData.setStatus('mandatory')
tVolumeSetActivityEvents = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013), )
if mibBuilder.loadTexts: tVolumeSetActivityEvents.setStatus('mandatory')
eVolumeSetActivityEvents = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013AssociatedGroup"))
if mibBuilder.loadTexts: eVolumeSetActivityEvents.setStatus('mandatory')
a7013VolumeSetEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vCioEvent", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013VolumeSetEventType.setStatus('mandatory')
a7013EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013EventSeverity.setStatus('mandatory')
a7013EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013EventIsStateBased.setStatus('mandatory')
a7013EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013EventStateKey.setStatus('mandatory')
a7013AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013AssociatedGroup.setStatus('mandatory')
a7013EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013EventSystem.setStatus('mandatory')
a7013EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013EventSubsystem.setStatus('mandatory')
a7013EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNotProvided", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013EventSolution.setStatus('mandatory')
a7013InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013InstanceDataPresent.setStatus('mandatory')
a7013EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013EventMessage.setStatus('mandatory')
a7013VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7013VendorSpecificData.setStatus('mandatory')
tRedundancyGroup = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7014), )
if mibBuilder.loadTexts: tRedundancyGroup.setStatus('mandatory')
eRedundancyGroup = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7014, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7014RedundancyGroupIndex"))
if mibBuilder.loadTexts: eRedundancyGroup.setStatus('mandatory')
a7014RedundancyGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7014, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7014RedundancyGroupIndex.setStatus('mandatory')
a7014RedundancyType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7014, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vNone", 0), ("vOther", 1), ("vUnknown", 2), ("vCopy", 3), ("vXor", 4), ("vPplusq", 5), ("vS", 6), ("vPpluss", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7014RedundancyType.setStatus('mandatory')
tRedundancyGroupEvents = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015), )
if mibBuilder.loadTexts: tRedundancyGroupEvents.setStatus('mandatory')
eRedundancyGroupEvents = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015AssociatedGroup"))
if mibBuilder.loadTexts: eRedundancyGroupEvents.setStatus('mandatory')
a7015RedundancyGroupEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vRedundancyGroupExposed", 1), ("vRebuildInProgress", 2), ("vProtectionDisabled", 3), ("vRecalculationActive", 4), ("vVerifyInProgress", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015RedundancyGroupEventType.setStatus('mandatory')
a7015EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015EventSeverity.setStatus('mandatory')
a7015EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015EventIsStateBased.setStatus('mandatory')
a7015EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015EventStateKey.setStatus('mandatory')
a7015AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015AssociatedGroup.setStatus('mandatory')
a7015EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015EventSystem.setStatus('mandatory')
a7015EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015EventSubsystem.setStatus('mandatory')
a7015EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNotProvided", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015EventSolution.setStatus('mandatory')
a7015InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015InstanceDataPresent.setStatus('mandatory')
a7015EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015EventMessage.setStatus('mandatory')
a7015VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7015VendorSpecificData.setStatus('mandatory')
tSpareEvents = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016), )
if mibBuilder.loadTexts: tSpareEvents.setStatus('mandatory')
eSpareEvents = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016AssociatedGroup"))
if mibBuilder.loadTexts: eSpareEvents.setStatus('mandatory')
a7016SpareEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vComponentSpareBroken", 1), ("vComponentSpareInUse", 2), ("vComponentSpareReadying", 3), ("vCioEvent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016SpareEventType.setStatus('mandatory')
a7016EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016EventSeverity.setStatus('mandatory')
a7016EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016EventIsStateBased.setStatus('mandatory')
a7016EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016EventStateKey.setStatus('mandatory')
a7016AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016AssociatedGroup.setStatus('mandatory')
a7016EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDataSpare", 3), ("vComponentSpare", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016EventSystem.setStatus('mandatory')
a7016EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016EventSubsystem.setStatus('mandatory')
a7016EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNotProvided", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016EventSolution.setStatus('mandatory')
a7016InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016InstanceDataPresent.setStatus('mandatory')
a7016EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016EventMessage.setStatus('mandatory')
a7016VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7016VendorSpecificData.setStatus('mandatory')
tMassStorageAssociation = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7017), )
if mibBuilder.loadTexts: tMassStorageAssociation.setStatus('mandatory')
eMassStorageAssociation = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7017, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7017AssociationIndex"))
if mibBuilder.loadTexts: eMassStorageAssociation.setStatus('mandatory')
a7017AssociationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7017, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7017AssociationIndex.setStatus('mandatory')
a7017Type = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7017, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7017Type.setStatus('mandatory')
a7017Reference1 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7017, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7017Reference1.setStatus('mandatory')
a7017Reference2 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7017, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7017Reference2.setStatus('mandatory')
tAssociationEvents = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018), )
if mibBuilder.loadTexts: tAssociationEvents.setStatus('mandatory')
eAssociationEvents = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018AssociatedGroup"))
if mibBuilder.loadTexts: eAssociationEvents.setStatus('mandatory')
a7018AssociationEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vNewObjectDetected", 1), ("vExistingObjectReplaced", 2), ("vExistingObjectIsGone", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018AssociationEventType.setStatus('mandatory')
a7018EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018EventSeverity.setStatus('mandatory')
a7018EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018EventIsStateBased.setStatus('mandatory')
a7018EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018EventStateKey.setStatus('mandatory')
a7018AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018AssociatedGroup.setStatus('mandatory')
a7018EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vStorageController", 0), ("vStorageDevice", 1), ("vBusPort", 2), ("vVolumeSet", 3), ("vProtectedSpaceExtent", 4), ("vAggregateProtectedSpaceExtent", 5), ("vPhysicalExtent", 6), ("vAggregatePhysicalExtent", 7), ("vRedundancyGroup", 8), ("vCache", 9), ("vSoftwareComponent", 10), ("vSoftwareSignature", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018EventSystem.setStatus('mandatory')
a7018EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018EventSubsystem.setStatus('mandatory')
a7018EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNotProvided", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018EventSolution.setStatus('mandatory')
a7018InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018InstanceDataPresent.setStatus('mandatory')
a7018EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018EventMessage.setStatus('mandatory')
a7018VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7018VendorSpecificData.setStatus('mandatory')
tBusPortAssociation = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7019), )
if mibBuilder.loadTexts: tBusPortAssociation.setStatus('mandatory')
eBusPortAssociation = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7019, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7019BusPortAssociationIndex"))
if mibBuilder.loadTexts: eBusPortAssociation.setStatus('mandatory')
a7019BusPortAssociationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7019, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7019BusPortAssociationIndex.setStatus('mandatory')
a7019NegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7019, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7019NegotiatedSpeed.setStatus('mandatory')
a7019NegotiatedWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7019, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7019NegotiatedWidth.setStatus('mandatory')
tComponentSpareAssociation = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7020), )
if mibBuilder.loadTexts: tComponentSpareAssociation.setStatus('mandatory')
eComponentSpareAssociation = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7020, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7020ComponentSpareIndex"))
if mibBuilder.loadTexts: eComponentSpareAssociation.setStatus('mandatory')
a7020ComponentSpareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7020, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7020ComponentSpareIndex.setStatus('mandatory')
a7020SpareFunctioningState = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7020, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vInactivestandby", 3), ("vActivestandby", 4), ("vActivestandbyThatInAdditionLoadBalances", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7020SpareFunctioningState.setStatus('mandatory')
tWorldwideIdentifer = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7021), )
if mibBuilder.loadTexts: tWorldwideIdentifer.setStatus('mandatory')
eWorldwideIdentifer = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7021, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7021WorldwideIdentifierIndex"))
if mibBuilder.loadTexts: eWorldwideIdentifer.setStatus('mandatory')
a7021WorldwideIdentifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7021, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7021WorldwideIdentifierIndex.setStatus('mandatory')
a7021WorldwideIdentifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7021, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vVendorIdProductIdSerialNumber", 4), ("vIeeeExtendedUniqueIdentifier64-bit", 5), ("vFc-ph64-bitName_identifier", 6), ("vBinary", 7), ("vUnicode", 8), ("vLanMacAddress", 9), ("vWanAccessAddress", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7021WorldwideIdentifierType.setStatus('mandatory')
a7021WorldwideIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7021, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7021WorldwideIdentifier.setStatus('mandatory')
tMassStorageStatistics = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022), )
if mibBuilder.loadTexts: tMassStorageStatistics.setStatus('mandatory')
eMassStorageStatistics = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7022StatisticsIndex"))
if mibBuilder.loadTexts: eMassStorageStatistics.setStatus('mandatory')
a7022StatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022StatisticsIndex.setStatus('mandatory')
a7022BlocksRead = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 2), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022BlocksRead.setStatus('mandatory')
a7022BlocksWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 3), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022BlocksWritten.setStatus('mandatory')
a7022ReadCommandsIssued = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 4), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022ReadCommandsIssued.setStatus('mandatory')
a7022WriteCommandsIssued = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 5), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022WriteCommandsIssued.setStatus('mandatory')
a7022IoRange0Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 6), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange0Read.setStatus('mandatory')
a7022IoRange1Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange1Read.setStatus('mandatory')
a7022IoRange2Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 8), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange2Read.setStatus('mandatory')
a7022IoRange3Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 9), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange3Read.setStatus('mandatory')
a7022IoRange4Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 10), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange4Read.setStatus('mandatory')
a7022IoRange5Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 11), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange5Read.setStatus('mandatory')
a7022IoRange6Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 12), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange6Read.setStatus('mandatory')
a7022IoRange7Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 13), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange7Read.setStatus('mandatory')
a7022IoRange8Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 14), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange8Read.setStatus('mandatory')
a7022IoRange9Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 15), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange9Read.setStatus('mandatory')
a7022IoRange10Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 16), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange10Read.setStatus('mandatory')
a7022IoRange11Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 17), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange11Read.setStatus('mandatory')
a7022IoRange12Read = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 18), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange12Read.setStatus('mandatory')
a7022IoRange0Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 19), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange0Written.setStatus('mandatory')
a7022IoRange1Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 20), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange1Written.setStatus('mandatory')
a7022IoRange2Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 21), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange2Written.setStatus('mandatory')
a7022IoRange3Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 22), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange3Written.setStatus('mandatory')
a7022IoRange4Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 23), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange4Written.setStatus('mandatory')
a7022IoRange5Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 24), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange5Written.setStatus('mandatory')
a7022IoRange6Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 25), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange6Written.setStatus('mandatory')
a7022IoRange7Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 26), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange7Written.setStatus('mandatory')
a7022IoRange8Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 27), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange8Written.setStatus('mandatory')
a7022IoRange9Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 28), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange9Written.setStatus('mandatory')
a7022IoRange10Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 29), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange10Written.setStatus('mandatory')
a7022IoRange11Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 30), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange11Written.setStatus('mandatory')
a7022IoRange12Written = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7022, 1, 31), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7022IoRange12Written.setStatus('mandatory')
tOverallStatus = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7023), )
if mibBuilder.loadTexts: tOverallStatus.setStatus('mandatory')
eOverallStatus = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7023, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eOverallStatus.setStatus('mandatory')
a7023OverallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7023, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOk", 1), ("vWarning", 2), ("vFailure", 3), ("vUnknown", 4), ("vOther", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7023OverallStatus.setStatus('mandatory')
tOperationalState = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024), )
if mibBuilder.loadTexts: tOperationalState.setStatus('mandatory')
eOperationalState = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7024OperationalStateIndex"))
if mibBuilder.loadTexts: eOperationalState.setStatus('mandatory')
a7024OperationalStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024OperationalStateIndex.setStatus('mandatory')
a7024DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024DeviceGroupIndex.setStatus('mandatory')
a7024OperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEnabled", 3), ("vDisabled", 4), ("vNotApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024OperationalStatus.setStatus('mandatory')
a7024UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIdle", 3), ("vActive", 4), ("vBusy", 5), ("vNotApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024UsageState.setStatus('mandatory')
a7024AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRunning", 3), ("vWarning", 4), ("vInTest", 5), ("vNotApplicable", 6), ("vPowerOff", 7), ("vOffLine", 8), ("vOffDuty", 9), ("vDegraded", 10), ("vNotInstalled", 11), ("vInstallError", 12), ("vPowerSave", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024AvailabilityStatus.setStatus('mandatory')
a7024AdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLocked", 3), ("vUnlocked", 4), ("vNotApplicable", 5), ("vShuttingDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024AdministrativeState.setStatus('mandatory')
a7024FatalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024FatalErrorCount.setStatus('mandatory')
a7024MajorErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 8), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024MajorErrorCount.setStatus('mandatory')
a7024WarningErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 9), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024WarningErrorCount.setStatus('mandatory')
a7024CurrentErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical1", 4), ("vCritical", 5), ("vNon-recoverable1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024CurrentErrorStatus.setStatus('mandatory')
a7024DevicePredictedFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7024, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNotSupportedByThisDevice", 3), ("vNoFailurePredictedByTheDevice", 4), ("vDeviceFailurePredictedByTheDevice", 5), ("vMediaFailurePredictedByTheDevice", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7024DevicePredictedFailureStatus.setStatus('mandatory')
tEventLogCount = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7025), )
if mibBuilder.loadTexts: tEventLogCount.setStatus('mandatory')
eEventLogCount = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7025, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eEventLogCount.setStatus('mandatory')
a7025EventLogCount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7025, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7025EventLogCount.setStatus('mandatory')
tEventLog = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7026), )
if mibBuilder.loadTexts: tEventLog.setStatus('mandatory')
eEventLog = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7026, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7026EventLogIndex"))
if mibBuilder.loadTexts: eEventLog.setStatus('mandatory')
a7026EventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7026, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7026EventLogIndex.setStatus('mandatory')
a7026EventLogEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7026, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7026EventLogEntry.setStatus('mandatory')
a7026EventLogTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7026, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7026EventLogTimestamp.setStatus('mandatory')
tEventState = MibTable((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7027), )
if mibBuilder.loadTexts: tEventState.setStatus('mandatory')
eEventState = MibTableRow((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7027, 1), ).setIndexNames((0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "DmiComponentIndex"), (0, "ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7027EventStateIndex"))
if mibBuilder.loadTexts: eEventState.setStatus('mandatory')
a7027EventStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7027, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7027EventStateIndex.setStatus('mandatory')
a7027EventGenerationGroupClass = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7027, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7027EventGenerationGroupClass.setStatus('mandatory')
a7027EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7027, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7027EventType.setStatus('mandatory')
a7027CurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7027, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8, 16, 32))).clone(namedValues=NamedValues(("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7027CurrentState.setStatus('mandatory')
a7027AssociatedGroupObject = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7027, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7027AssociatedGroupObject.setStatus('mandatory')
trap1ForDevices = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1) + (0,1)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002StorageDevicesEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7001StorageDeviceIndex"))
trap2ForDevices = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1) + (0,2)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002StorageDevicesEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7001StorageDeviceIndex"))
trap3ForDevices = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1) + (0,3)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002StorageDevicesEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7001StorageDeviceIndex"))
trap4ForDevices = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1) + (0,4)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002StorageDevicesEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7001StorageDeviceIndex"))
trap5ForDevices = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7002, 1) + (0,5)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002StorageDevicesEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7002VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7001StorageDeviceIndex"))
trap1ForController = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1) + (0,1)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004StorageControllerEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7003ControllerIndex"))
trap2ForController = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1) + (0,2)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004StorageControllerEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7003ControllerIndex"))
trap3ForController = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7004, 1) + (0,3)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004StorageControllerEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7004VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7003ControllerIndex"))
trap1ForEnclosure = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7006, 1) + (0,1)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006EnclosureEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006InstanceDataPresentr"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7006VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7005EnclosureIndex"))
trap1ForBusPort = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7008, 1) + (0,1)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008BusPortEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7008VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7007BusPortIndex"))
trap1ForVolumeSet = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1) + (0,1)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
trap2ForVolumeSet = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1) + (0,2)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
trap3ForVolumeSet = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1) + (0,3)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
trap4ForVolumeSet = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1) + (0,4)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
trap5ForVolumeSet = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1) + (0,5)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
trap6ForVolumeSet = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1) + (0,6)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
trap7ForVolumeSet = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1) + (0,7)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
trap8ForVolumeSet = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1) + (0,8)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
trap9ForVolumeSet = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7012, 1) + (0,9)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7012VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
trap1ForSetActivity = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7013, 1) + (0,1)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013VolumeSetEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7013VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7011VolumeSetIndex"))
trap1ForRedundancyGroup = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1) + (0,1)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015RedundancyGroupEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7014RedundancyGroupIndex"))
trap2ForRedundancyGroup = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1) + (0,2)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015RedundancyGroupEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7014RedundancyGroupIndex"))
trap3ForRedundancyGroup = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1) + (0,3)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015RedundancyGroupEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7014RedundancyGroupIndex"))
trap4ForRedundancyGroup = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1) + (0,4)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015RedundancyGroupEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7014RedundancyGroupIndex"))
trap5ForRedundancyGroup = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7015, 1) + (0,5)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015RedundancyGroupEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7015VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7014RedundancyGroupIndex"))
trap1ForSpareEvents = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1) + (0,1)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016SpareEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7020ComponentSpareIndex"))
trap2ForSpareEvents = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1) + (0,2)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016SpareEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7020ComponentSpareIndex"))
trap3ForSpareEvents = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1) + (0,3)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016SpareEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7020ComponentSpareIndex"))
trap4ForSpareEvents = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7016, 1) + (0,4)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016SpareEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7016VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7020ComponentSpareIndex"))
trap1ForAssociation = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1) + (0,1)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018AssociationEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7017AssociationIndex"))
trap2ForAssociation = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1) + (0,2)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018AssociationEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7017AssociationIndex"))
trap3ForAssociation = NotificationType((1, 3, 6, 1, 4, 1, 795, 50, 10, 1, 7018, 1) + (0,3)).setObjects(("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018AssociationEventType"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSeverity"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventIsStateBased"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventStateKey"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018AssociatedGroup"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSubsystem"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventSolution"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018InstanceDataPresent"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018EventMessage"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7018VendorSpecificData"), ("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", "a7017AssociationIndex"))
mibBuilder.exportSymbols("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", a7001RemovableMedia=a7001RemovableMedia, trap2ForSpareEvents=trap2ForSpareEvents, a7003SecondsSinceLastPower_up=a7003SecondsSinceLastPower_up, a7013EventMessage=a7013EventMessage, a7015VendorSpecificData=a7015VendorSpecificData, trap2ForDevices=trap2ForDevices, a7007SignalCharacteristics=a7007SignalCharacteristics, eComponentid=eComponentid, a7022IoRange10Read=a7022IoRange10Read, a7022IoRange4Read=a7022IoRange4Read, a7020SpareFunctioningState=a7020SpareFunctioningState, a7001Type=a7001Type, a7027EventGenerationGroupClass=a7027EventGenerationGroupClass, a7002AssociatedGroup=a7002AssociatedGroup, eAssociationEvents=eAssociationEvents, a7004EventSeverity=a7004EventSeverity, a7012EventIsStateBased=a7012EventIsStateBased, trap2ForAssociation=trap2ForAssociation, a7002VendorSpecificData=a7002VendorSpecificData, tStorageDevices=tStorageDevices, a7026EventLogIndex=a7026EventLogIndex, a7013EventSolution=a7013EventSolution, a7015EventIsStateBased=a7015EventIsStateBased, tOverallStatus=tOverallStatus, DmiOctetstring=DmiOctetstring, a7017Reference1=a7017Reference1, a7022IoRange7Read=a7022IoRange7Read, a7018AssociationEventType=a7018AssociationEventType, a7025EventLogCount=a7025EventLogCount, tBusPortEvents=tBusPortEvents, a7012EventMessage=a7012EventMessage, a7027EventType=a7027EventType, a7022IoRange12Written=a7022IoRange12Written, trap4ForSpareEvents=trap4ForSpareEvents, a7008InstanceDataPresent=a7008InstanceDataPresent, tVolumeSetActivityEvents=tVolumeSetActivityEvents, a7024OperationalStatus=a7024OperationalStatus, tRedundancyGroupEvents=tRedundancyGroupEvents, a7022IoRange4Written=a7022IoRange4Written, a7016AssociatedGroup=a7016AssociatedGroup, eBusPortAssociation=eBusPortAssociation, a7006EventStateKey=a7006EventStateKey, a7012EventSeverity=a7012EventSeverity, a7001MediaDataBlockSize=a7001MediaDataBlockSize, a7018InstanceDataPresent=a7018InstanceDataPresent, a7003BusMaster=a7003BusMaster, a7002EventSubsystem=a7002EventSubsystem, tWorldwideIdentifer=tWorldwideIdentifer, trap1ForSetActivity=trap1ForSetActivity, tOperationalState=tOperationalState, a7009NumberOfBlocks=a7009NumberOfBlocks, a7018EventSystem=a7018EventSystem, a7022IoRange8Read=a7022IoRange8Read, tVolumeSetEvents=tVolumeSetEvents, tMassStorageAssociation=tMassStorageAssociation, a7002EventStateKey=a7002EventStateKey, a7015EventMessage=a7015EventMessage, a1Manufacturer=a1Manufacturer, a7011ProtectedSpaceStripeLength=a7011ProtectedSpaceStripeLength, a7006EventIsStateBased=a7006EventIsStateBased, a7027AssociatedGroupObject=a7027AssociatedGroupObject, a99DisableTrap=a99DisableTrap, a7017Type=a7017Type, eStorageDevices=eStorageDevices, a7016EventSolution=a7016EventSolution, a7008EventSeverity=a7008EventSeverity, a7022IoRange9Written=a7022IoRange9Written, trap7ForVolumeSet=trap7ForVolumeSet, eEnclosure=eEnclosure, a7008BusPortEventType=a7008BusPortEventType, trap8ForVolumeSet=trap8ForVolumeSet, a7016EventSubsystem=a7016EventSubsystem, a99MibName=a99MibName, trap5ForDevices=trap5ForDevices, a7004StorageControllerEventType=a7004StorageControllerEventType, trap1ForVolumeSet=trap1ForVolumeSet, DmiInteger=DmiInteger, a7006EnclosureEventType=a7006EnclosureEventType, a7008EventSolution=a7008EventSolution, a7011Name=a7011Name, trap1ForSpareEvents=trap1ForSpareEvents, a7010AggregateProtectedSpaceExtentIndex=a7010AggregateProtectedSpaceExtentIndex, a7013InstanceDataPresent=a7013InstanceDataPresent, tBusPortAssociation=tBusPortAssociation, a7022IoRange6Written=a7022IoRange6Written, a7004EventSubsystem=a7004EventSubsystem, a7019BusPortAssociationIndex=a7019BusPortAssociationIndex, a7024WarningErrorCount=a7024WarningErrorCount, adaptec=adaptec, a7024AdministrativeState=a7024AdministrativeState, a7021WorldwideIdentifierIndex=a7021WorldwideIdentifierIndex, a7024UsageState=a7024UsageState, a7006EventSubsystem=a7006EventSubsystem, a7022WriteCommandsIssued=a7022WriteCommandsIssued, eMiftomib=eMiftomib, a7006EventMessage=a7006EventMessage, a7013EventSeverity=a7013EventSeverity, a7022IoRange10Written=a7022IoRange10Written, a7002EventIsStateBased=a7002EventIsStateBased, a99MibOid=a99MibOid, a7027EventStateIndex=a7027EventStateIndex, a7024DevicePredictedFailureStatus=a7024DevicePredictedFailureStatus, a7017AssociationIndex=a7017AssociationIndex, tComponentid=tComponentid, a7012EventSolution=a7012EventSolution, trap3ForRedundancyGroup=trap3ForRedundancyGroup, a7023OverallStatus=a7023OverallStatus, a7008AssociatedGroup=a7008AssociatedGroup, eBusPortEvents=eBusPortEvents, tEventState=tEventState, tStorageDevicesEvents=tStorageDevicesEvents, tEventLogCount=tEventLogCount, a7006EventSystem=a7006EventSystem, a7022IoRange3Written=a7022IoRange3Written, a7015EventSubsystem=a7015EventSubsystem, eStorageController=eStorageController, a7006AssociatedGroup=a7006AssociatedGroup, a7013EventIsStateBased=a7013EventIsStateBased, trap1ForAssociation=trap1ForAssociation, a7008EventMessage=a7008EventMessage, a7015EventSeverity=a7015EventSeverity, eBusPort=eBusPort, a7024DeviceGroupIndex=a7024DeviceGroupIndex, a7021WorldwideIdentifier=a7021WorldwideIdentifier, a7006EventSolution=a7006EventSolution, a7016EventSeverity=a7016EventSeverity, eSpareEvents=eSpareEvents, a7024MajorErrorCount=a7024MajorErrorCount, trap6ForVolumeSet=trap6ForVolumeSet, a7012EventStateKey=a7012EventStateKey, a7006VendorSpecificData=a7006VendorSpecificData, a7004EventMessage=a7004EventMessage, DmiComponentIndex=DmiComponentIndex, a7022IoRange1Written=a7022IoRange1Written, a7007ProtocolDescription=a7007ProtocolDescription, a7002InstanceDataPresent=a7002InstanceDataPresent, a7022ReadCommandsIssued=a7022ReadCommandsIssued, a7012InstanceDataPresent=a7012InstanceDataPresent, tAssociationEvents=tAssociationEvents, eOperationalState=eOperationalState, a7022IoRange6Read=a7022IoRange6Read, a7007ConnectorGender=a7007ConnectorGender, a7008EventStateKey=a7008EventStateKey, a7012EventSystem=a7012EventSystem, a7022IoRange1Read=a7022IoRange1Read, a7001DeviceLoaded=a7001DeviceLoaded, a7011TotalStorageCapacity=a7011TotalStorageCapacity, a7021WorldwideIdentifierType=a7021WorldwideIdentifierType, a7007MaximumTransferRate=a7007MaximumTransferRate, a7022StatisticsIndex=a7022StatisticsIndex, a7003Identification=a7003Identification, eAggregatePhysicalExtent=eAggregatePhysicalExtent, a7002EventSeverity=a7002EventSeverity, a7015EventSystem=a7015EventSystem, trap3ForController=trap3ForController, a7015EventStateKey=a7015EventStateKey, a7016EventStateKey=a7016EventStateKey, a7016SpareEventType=a7016SpareEventType, a7016VendorSpecificData=a7016VendorSpecificData, a7011VolumeSetIndex=a7011VolumeSetIndex, DmiDateX=DmiDateX, eEnclosureEvents=eEnclosureEvents, a7026EventLogEntry=a7026EventLogEntry, a7016EventMessage=a7016EventMessage, eVolumeSetEvents=eVolumeSetEvents, trap4ForDevices=trap4ForDevices, trap9ForVolumeSet=trap9ForVolumeSet, a7022BlocksWritten=a7022BlocksWritten, trap5ForRedundancyGroup=trap5ForRedundancyGroup, a7007Isochronous=a7007Isochronous, a7018EventSeverity=a7018EventSeverity, trap5ForVolumeSet=trap5ForVolumeSet, eMassStorageStatistics=eMassStorageStatistics, a7004EventStateKey=a7004EventStateKey, a7022IoRange11Written=a7022IoRange11Written, eVolumeSetActivityEvents=eVolumeSetActivityEvents, a7002EventMessage=a7002EventMessage, eAggregateProtectedSpaceExtent=eAggregateProtectedSpaceExtent, a7001Sub_identifier=a7001Sub_identifier, tStorageControllerEvents=tStorageControllerEvents, trap3ForVolumeSet=trap3ForVolumeSet, tBusPort=tBusPort, dmtfGroups=dmtfGroups, a7018EventSolution=a7018EventSolution, eWorldwideIdentifer=eWorldwideIdentifer, a7007BusPortIndex=a7007BusPortIndex, a7022BlocksRead=a7022BlocksRead, a7015EventSolution=a7015EventSolution, trap3ForAssociation=trap3ForAssociation, tStorageController=tStorageController, a7022IoRange3Read=a7022IoRange3Read, a7012VolumeSetEventType=a7012VolumeSetEventType, a7024AvailabilityStatus=a7024AvailabilityStatus, a7016InstanceDataPresent=a7016InstanceDataPresent, a7018EventStateKey=a7018EventStateKey, tEnclosure=tEnclosure, eRedundancyGroup=eRedundancyGroup, a7022IoRange11Read=a7022IoRange11Read, trap1ForBusPort=trap1ForBusPort, a7018EventIsStateBased=a7018EventIsStateBased, a7022IoRange5Read=a7022IoRange5Read, a7010NumberOfBlocks=a7010NumberOfBlocks, a7007MaximumNumberOfAttachments=a7007MaximumNumberOfAttachments, a7013AssociatedGroup=a7013AssociatedGroup, a7004EventSystem=a7004EventSystem, tEventLog=tEventLog, tMiftomib=tMiftomib, DmiInteger64X=DmiInteger64X, trap1ForEnclosure=trap1ForEnclosure, a7008EventSystem=a7008EventSystem, a7002EventSystem=a7002EventSystem, eComponentSpareAssociation=eComponentSpareAssociation, a7008EventSubsystem=a7008EventSubsystem, a7027CurrentState=a7027CurrentState, a7007ConnectorType=a7007ConnectorType, a7019NegotiatedSpeed=a7019NegotiatedSpeed, a1Installation=a1Installation, a7009AggregatePhysicalExtentIndex=a7009AggregatePhysicalExtentIndex, trap2ForRedundancyGroup=trap2ForRedundancyGroup, tAggregateProtectedSpaceExtent=tAggregateProtectedSpaceExtent, a7012VendorSpecificData=a7012VendorSpecificData, a7022IoRange12Read=a7022IoRange12Read, a7005Description=a7005Description, eEventState=eEventState, eStorageControllerEvents=eStorageControllerEvents, a7020ComponentSpareIndex=a7020ComponentSpareIndex, a7005EnclosureIndex=a7005EnclosureIndex, a7004EventSolution=a7004EventSolution, trap4ForVolumeSet=trap4ForVolumeSet, a7024OperationalStateIndex=a7024OperationalStateIndex, a7017Reference2=a7017Reference2, a1Version=a1Version, a7004InstanceDataPresent=a7004InstanceDataPresent, a7008VendorSpecificData=a7008VendorSpecificData, a7022IoRange7Written=a7022IoRange7Written, isc20=isc20, a7018EventSubsystem=a7018EventSubsystem, eStorageDevicesEvents=eStorageDevicesEvents, eRedundancyGroupEvents=eRedundancyGroupEvents, a7008EventIsStateBased=a7008EventIsStateBased, trap1ForController=trap1ForController, DmiCounter=DmiCounter, tSpareEvents=tSpareEvents, a7004AssociatedGroup=a7004AssociatedGroup, a7022IoRange9Read=a7022IoRange9Read, a7013VolumeSetEventType=a7013VolumeSetEventType, trap4ForRedundancyGroup=trap4ForRedundancyGroup, a7015InstanceDataPresent=a7015InstanceDataPresent, a7005Type=a7005Type, a7006InstanceDataPresent=a7006InstanceDataPresent, a7018EventMessage=a7018EventMessage, a7004VendorSpecificData=a7004VendorSpecificData, trap2ForController=trap2ForController, a7022IoRange8Written=a7022IoRange8Written)
mibBuilder.exportSymbols("ADAPTECCIOSTANDARDGROUPMIFDEFINITION2-MIB", a7006EventSeverity=a7006EventSeverity, trap3ForDevices=trap3ForDevices, thirdparty=thirdparty, a7013VendorSpecificData=a7013VendorSpecificData, a7015RedundancyGroupEventType=a7015RedundancyGroupEventType, a7022IoRange2Read=a7022IoRange2Read, a7024FatalErrorCount=a7024FatalErrorCount, a7007AddressDescriptor=a7007AddressDescriptor, a7016EventIsStateBased=a7016EventIsStateBased, trap1ForRedundancyGroup=trap1ForRedundancyGroup, eEventLogCount=eEventLogCount, a7024CurrentErrorStatus=a7024CurrentErrorStatus, a7022IoRange0Written=a7022IoRange0Written, a7015AssociatedGroup=a7015AssociatedGroup, a7018AssociatedGroup=a7018AssociatedGroup, a7013EventStateKey=a7013EventStateKey, DmiDisplaystring=DmiDisplaystring, eEventLog=eEventLog, tAggregatePhysicalExtent=tAggregatePhysicalExtent, a7011ProtectedSpaceExtentInterleaveDepth=a7011ProtectedSpaceExtentInterleaveDepth, eOverallStatus=eOverallStatus, a7001FormattedMediaCapacity=a7001FormattedMediaCapacity, a7001Compression=a7001Compression, a7003ControllerIndex=a7003ControllerIndex, a7013EventSystem=a7013EventSystem, a7014RedundancyGroupIndex=a7014RedundancyGroupIndex, a7013EventSubsystem=a7013EventSubsystem, a7001TypeDescription=a7001TypeDescription, a7019NegotiatedWidth=a7019NegotiatedWidth, a7002StorageDevicesEventType=a7002StorageDevicesEventType, tVolumeSet=tVolumeSet, tMassStorageStatistics=tMassStorageStatistics, a7022IoRange5Written=a7022IoRange5Written, a7001RemovableDevice=a7001RemovableDevice, a7001Encryption=a7001Encryption, trap1ForDevices=trap1ForDevices, a7026EventLogTimestamp=a7026EventLogTimestamp, a7014RedundancyType=a7014RedundancyType, a7022IoRange0Read=a7022IoRange0Read, a1SerialNumber=a1SerialNumber, a7007Protocol=a7007Protocol, a7001MediaLoaded=a7001MediaLoaded, eVolumeSet=eVolumeSet, eMassStorageAssociation=eMassStorageAssociation, a1Product=a1Product, trap3ForSpareEvents=trap3ForSpareEvents, a7002EventSolution=a7002EventSolution, a1Verify=a1Verify, tComponentSpareAssociation=tComponentSpareAssociation, trap2ForVolumeSet=trap2ForVolumeSet, a7009NumberOfBlocksOfCheckData=a7009NumberOfBlocksOfCheckData, a7018VendorSpecificData=a7018VendorSpecificData, a7016EventSystem=a7016EventSystem, tRedundancyGroup=tRedundancyGroup, tEnclosureEvents=tEnclosureEvents, a7022IoRange2Written=a7022IoRange2Written, a7003ProtectionManagement=a7003ProtectionManagement, a7007MaximumWidth=a7007MaximumWidth, a7007ConnectorTypeDescription=a7007ConnectorTypeDescription, a7012EventSubsystem=a7012EventSubsystem, a7004EventIsStateBased=a7004EventIsStateBased, a7012AssociatedGroup=a7012AssociatedGroup, a7001StorageDeviceIndex=a7001StorageDeviceIndex)
