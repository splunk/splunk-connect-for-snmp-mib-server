#
# PySNMP MIB module JUNIPER-LSYSSP-ZONE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-LSYSSP-ZONE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:49:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
jnxLsysSpZone, = mibBuilder.importSymbols("JUNIPER-LSYS-SECURITYPROFILE-MIB", "jnxLsysSpZone")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Unsigned32, ObjectIdentity, Bits, NotificationType, TimeTicks, Counter32, IpAddress, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "ObjectIdentity", "Bits", "NotificationType", "TimeTicks", "Counter32", "IpAddress", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
jnxLsysSpZoneMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1))
if mibBuilder.loadTexts: jnxLsysSpZoneMIB.setLastUpdated('201005191644Z')
if mibBuilder.loadTexts: jnxLsysSpZoneMIB.setOrganization('Juniper Networks, Inc.')
jnxLsysSpZoneObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1))
jnxLsysSpZoneSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2))
jnxLsysSpZoneTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1), )
if mibBuilder.loadTexts: jnxLsysSpZoneTable.setStatus('current')
jnxLsysSpZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1, 1), ).setIndexNames((1, "JUNIPER-LSYSSP-ZONE-MIB", "jnxLsysSpZoneLsysName"))
if mibBuilder.loadTexts: jnxLsysSpZoneEntry.setStatus('current')
jnxLsysSpZoneLsysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: jnxLsysSpZoneLsysName.setStatus('current')
jnxLsysSpZoneProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneProfileName.setStatus('current')
jnxLsysSpZoneUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneUsage.setStatus('current')
jnxLsysSpZoneReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneReserved.setStatus('current')
jnxLsysSpZoneMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneMaximum.setStatus('current')
jnxLsysSpZoneUsedAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneUsedAmount.setStatus('current')
jnxLsysSpZoneMaxQuota = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneMaxQuota.setStatus('current')
jnxLsysSpZoneAvailableAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneAvailableAmount.setStatus('current')
jnxLsysSpZoneHeaviestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneHeaviestUsage.setStatus('current')
jnxLsysSpZoneHeaviestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneHeaviestUser.setStatus('current')
jnxLsysSpZoneLightestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneLightestUsage.setStatus('current')
jnxLsysSpZoneLightestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 1, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpZoneLightestUser.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-LSYSSP-ZONE-MIB", jnxLsysSpZoneReserved=jnxLsysSpZoneReserved, jnxLsysSpZoneLightestUsage=jnxLsysSpZoneLightestUsage, jnxLsysSpZoneMaximum=jnxLsysSpZoneMaximum, jnxLsysSpZoneMIB=jnxLsysSpZoneMIB, jnxLsysSpZoneTable=jnxLsysSpZoneTable, jnxLsysSpZoneSummary=jnxLsysSpZoneSummary, PYSNMP_MODULE_ID=jnxLsysSpZoneMIB, jnxLsysSpZoneLsysName=jnxLsysSpZoneLsysName, jnxLsysSpZoneMaxQuota=jnxLsysSpZoneMaxQuota, jnxLsysSpZoneHeaviestUser=jnxLsysSpZoneHeaviestUser, jnxLsysSpZoneObjects=jnxLsysSpZoneObjects, jnxLsysSpZoneUsage=jnxLsysSpZoneUsage, jnxLsysSpZoneHeaviestUsage=jnxLsysSpZoneHeaviestUsage, jnxLsysSpZoneEntry=jnxLsysSpZoneEntry, jnxLsysSpZoneProfileName=jnxLsysSpZoneProfileName, jnxLsysSpZoneAvailableAmount=jnxLsysSpZoneAvailableAmount, jnxLsysSpZoneLightestUser=jnxLsysSpZoneLightestUser, jnxLsysSpZoneUsedAmount=jnxLsysSpZoneUsedAmount)
