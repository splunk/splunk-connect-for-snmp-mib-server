#
# PySNMP MIB module SONOMASYSTEMS-SONOMA-ATM-E1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONOMASYSTEMS-SONOMA-ATM-E1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:01:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Unsigned32, ModuleIdentity, iso, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, TimeTicks, Counter64, NotificationType, Counter32, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "ModuleIdentity", "iso", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "TimeTicks", "Counter64", "NotificationType", "Counter32", "IpAddress", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sonomaATM, = mibBuilder.importSymbols("SONOMASYSTEMS-SONOMA-MIB", "sonomaATM")
sonomaE1ATMAdapterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6))
atmE1ConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 1))
atmE1StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 2))
atmE1ConfPhyTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 1, 1), )
if mibBuilder.loadTexts: atmE1ConfPhyTable.setStatus('mandatory')
atmE1ConfPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 1, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-E1-MIB", "atmE1ConfPhysIndex"))
if mibBuilder.loadTexts: atmE1ConfPhyEntry.setStatus('mandatory')
atmE1ConfPhysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmE1ConfPhysIndex.setStatus('mandatory')
atmE1ConfLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("internal", 2), ("external", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmE1ConfLoopback.setStatus('mandatory')
atmE1ConfTxClockSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("recovered", 2))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmE1ConfTxClockSelect.setStatus('mandatory')
atmE1ConfFillerCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unassigned", 1), ("idle", 2))).clone('unassigned')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmE1ConfFillerCells.setStatus('mandatory')
atmE1StatsTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 2, 1), )
if mibBuilder.loadTexts: atmE1StatsTable.setStatus('mandatory')
atmE1StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 2, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-E1-MIB", "atmE1StatsPhysIndex"))
if mibBuilder.loadTexts: atmE1StatsEntry.setStatus('mandatory')
atmE1StatsPhysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmE1StatsPhysIndex.setStatus('mandatory')
atmE1StatsNoSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmE1StatsNoSignals.setStatus('mandatory')
atmE1StatsRAIDetects = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmE1StatsRAIDetects.setStatus('mandatory')
atmE1StatsFASErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmE1StatsFASErrors.setStatus('mandatory')
atmE1StatsCVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmE1StatsCVErrors.setStatus('mandatory')
atmE1StatsCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmE1StatsCRCErrors.setStatus('mandatory')
atmE1StatsEBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmE1StatsEBitErrors.setStatus('mandatory')
atmE1StatsSyncLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmE1StatsSyncLossCount.setStatus('mandatory')
atmE1StatsHECErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmE1StatsHECErrors.setStatus('mandatory')
atmE1StatsSignalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmE1StatsSignalLoss.setStatus('mandatory')
atmE1StatsRAIDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmE1StatsRAIDetect.setStatus('mandatory')
atmE1StatsSyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmE1StatsSyncLoss.setStatus('mandatory')
atmE1StatsTxClockLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmE1StatsTxClockLoss.setStatus('mandatory')
atmE1StatsClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 6, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmE1StatsClearCounters.setStatus('mandatory')
mibBuilder.exportSymbols("SONOMASYSTEMS-SONOMA-ATM-E1-MIB", atmE1ConfGroup=atmE1ConfGroup, atmE1StatsRAIDetects=atmE1StatsRAIDetects, atmE1StatsClearCounters=atmE1StatsClearCounters, atmE1ConfPhyTable=atmE1ConfPhyTable, atmE1StatsPhysIndex=atmE1StatsPhysIndex, atmE1StatsFASErrors=atmE1StatsFASErrors, atmE1ConfPhyEntry=atmE1ConfPhyEntry, atmE1ConfPhysIndex=atmE1ConfPhysIndex, atmE1StatsHECErrors=atmE1StatsHECErrors, atmE1ConfTxClockSelect=atmE1ConfTxClockSelect, atmE1StatsTxClockLoss=atmE1StatsTxClockLoss, atmE1StatsSyncLossCount=atmE1StatsSyncLossCount, atmE1StatsEBitErrors=atmE1StatsEBitErrors, atmE1StatsEntry=atmE1StatsEntry, atmE1StatsGroup=atmE1StatsGroup, atmE1ConfFillerCells=atmE1ConfFillerCells, atmE1StatsSyncLoss=atmE1StatsSyncLoss, atmE1StatsCRCErrors=atmE1StatsCRCErrors, sonomaE1ATMAdapterGroup=sonomaE1ATMAdapterGroup, atmE1StatsTable=atmE1StatsTable, atmE1StatsCVErrors=atmE1StatsCVErrors, atmE1StatsNoSignals=atmE1StatsNoSignals, atmE1StatsSignalLoss=atmE1StatsSignalLoss, atmE1ConfLoopback=atmE1ConfLoopback, atmE1StatsRAIDetect=atmE1StatsRAIDetect)
