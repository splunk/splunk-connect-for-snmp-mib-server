#
# PySNMP MIB module ATM-FORUM-SNMP-M4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATM-FORUM-SNMP-M4-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:15:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
atmVclEntry, atmVcCrossConnectL2HOperStatus, atmVclOperStatus, atmVcCrossConnectH2LOperStatus, atmVplEntry, atmVplOperStatus, atmVcCrossConnectEntry, atmVclVpi, atmVpCrossConnectEntry, atmVclVci, atmVpCrossConnectL2HOperStatus, atmVpCrossConnectH2LOperStatus, atmVplVpi = mibBuilder.importSymbols("ATM-MIB", "atmVclEntry", "atmVcCrossConnectL2HOperStatus", "atmVclOperStatus", "atmVcCrossConnectH2LOperStatus", "atmVplEntry", "atmVplOperStatus", "atmVcCrossConnectEntry", "atmVclVpi", "atmVpCrossConnectEntry", "atmVclVci", "atmVpCrossConnectL2HOperStatus", "atmVpCrossConnectH2LOperStatus", "atmVplVpi")
entPhysicalContainedIn, entPhysicalParentRelPos, entPhysicalClass, entPhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalContainedIn", "entPhysicalParentRelPos", "entPhysicalClass", "entPhysicalIndex")
hrSWInstalledIndex, hrSWInstalledName = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "hrSWInstalledIndex", "hrSWInstalledName")
ifIndex, OwnerString, ifOperStatus = mibBuilder.importSymbols("IF-MIB", "ifIndex", "OwnerString", "ifOperStatus")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, Integer32, Gauge32, ObjectIdentity, iso, enterprises, IpAddress, TimeTicks, ModuleIdentity, Counter32, MibIdentifier, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "Gauge32", "ObjectIdentity", "iso", "enterprises", "IpAddress", "TimeTicks", "ModuleIdentity", "Counter32", "MibIdentifier", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
RowStatus, DateAndTime, TextualConvention, DisplayString, TimeStamp, TimeInterval, RowPointer, AutonomousType, TruthValue, TestAndIncr = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DateAndTime", "TextualConvention", "DisplayString", "TimeStamp", "TimeInterval", "RowPointer", "AutonomousType", "TruthValue", "TestAndIncr")
atmfM4MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1))
atmfM4MIB.setRevisions(('1998-05-14 00:00',))
if mibBuilder.loadTexts: atmfM4MIB.setLastUpdated('9805140000Z')
if mibBuilder.loadTexts: atmfM4MIB.setOrganization('The ATM Forum')
atmForum = MibIdentifier((1, 3, 6, 1, 4, 1, 353))
atmForumNetworkManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5))
atmfM4 = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 1))
atmfM4SnmpNEView = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 1, 3))
atmfM4MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1))
atmfM4MIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2))
atmfM4MIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0))
atmfM4MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3))
atmfM4NeVendor = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4NeVendor.setStatus('current')
atmfM4NeVersion = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4NeVersion.setStatus('current')
atmfM4NeStartTime = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4NeStartTime.setStatus('current')
atmfM4NeAlarmSeverityIndex = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4NeAlarmSeverityIndex.setStatus('current')
atmfM4NeSuppressZeroStats = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4NeSuppressZeroStats.setStatus('current')
atmfM4PhysPathTpTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 6), )
if mibBuilder.loadTexts: atmfM4PhysPathTpTable.setStatus('current')
atmfM4PhysPathTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4PhysPathTpEntry.setStatus('current')
atmfM4PhysPathTpHwUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4PhysPathTpHwUnitIndex.setStatus('current')
atmfM4PhysPathTpPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4PhysPathTpPortID.setStatus('current')
atmfM4PhysPathTpAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4PhysPathTpAlarmSeverityIndex.setStatus('current')
atmfM4TcAdapterTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 7), )
if mibBuilder.loadTexts: atmfM4TcAdapterTable.setStatus('current')
atmfM4TcAdapterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4TcAdapterEntry.setStatus('current')
atmfM4TcACellScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 7, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4TcACellScrambling.setStatus('current')
atmfM4TcAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4TcAlarmSeverityIndex.setStatus('current')
atmfM4AtmLayerTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 8), )
if mibBuilder.loadTexts: atmfM4AtmLayerTable.setStatus('current')
atmfM4AtmLayerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4AtmLayerEntry.setStatus('current')
atmfM4IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("uni", 1), ("bici", 2), ("bissi", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4IfType.setStatus('current')
atmfM4IfLoopbackLocationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4IfLoopbackLocationCode.setStatus('current')
atmfM4IfSubscriberAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 8, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4IfSubscriberAddress.setStatus('current')
atmfM4IfPreferredCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 8, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4IfPreferredCarrier.setStatus('current')
atmfM4IfFarEndCarrierNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 8, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4IfFarEndCarrierNetwork.setStatus('current')
atmfM4VplTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 9), )
if mibBuilder.loadTexts: atmfM4VplTable.setStatus('current')
atmfM4VplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 9, 1), )
atmVplEntry.registerAugmentions(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VplEntry"))
atmfM4VplEntry.setIndexNames(*atmVplEntry.getIndexNames())
if mibBuilder.loadTexts: atmfM4VplEntry.setStatus('current')
atmfM4VplSegEndPt = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 9, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4VplSegEndPt.setStatus('current')
atmfM4VclTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 10), )
if mibBuilder.loadTexts: atmfM4VclTable.setStatus('current')
atmfM4VclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 10, 1), )
atmVclEntry.registerAugmentions(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VclEntry"))
atmfM4VclEntry.setIndexNames(*atmVclEntry.getIndexNames())
if mibBuilder.loadTexts: atmfM4VclEntry.setStatus('current')
atmfM4VclSegEndPt = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 10, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4VclSegEndPt.setStatus('current')
atmfM4VpXConnTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 11), )
if mibBuilder.loadTexts: atmfM4VpXConnTable.setStatus('current')
atmfM4VpXConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 11, 1), )
atmVpCrossConnectEntry.registerAugmentions(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpXConnEntry"))
atmfM4VpXConnEntry.setIndexNames(*atmVpCrossConnectEntry.getIndexNames())
if mibBuilder.loadTexts: atmfM4VpXConnEntry.setStatus('current')
atmfM4VpXConnRecover = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 11, 1, 1), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4VpXConnRecover.setStatus('current')
atmfM4VcXConnTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 12), )
if mibBuilder.loadTexts: atmfM4VcXConnTable.setStatus('current')
atmfM4VcXConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 12, 1), )
atmVcCrossConnectEntry.registerAugmentions(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcXConnEntry"))
atmfM4VcXConnEntry.setIndexNames(*atmVcCrossConnectEntry.getIndexNames())
if mibBuilder.loadTexts: atmfM4VcXConnEntry.setStatus('current')
atmfM4VcXConnRecover = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 12, 1, 1), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4VcXConnRecover.setStatus('current')
atmfM4VpNextVpiTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 13), )
if mibBuilder.loadTexts: atmfM4VpNextVpiTable.setStatus('current')
atmfM4VpNextVpiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4VpNextVpiEntry.setStatus('current')
atmfM4VpNextVpiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpNextVpiValue.setStatus('current')
atmfM4VcNextVciTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 14), )
if mibBuilder.loadTexts: atmfM4VcNextVciTable.setStatus('current')
atmfM4VcNextVciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: atmfM4VcNextVciEntry.setStatus('current')
atmfM4VcNextVciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcNextVciValue.setStatus('current')
atmfM4CellProtoCurrTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 15), )
if mibBuilder.loadTexts: atmfM4CellProtoCurrTable.setStatus('current')
atmfM4CellProtoCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 15, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4CellProtoCurrEntry.setStatus('current')
atmfM4CellProtoCurrSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 15, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoCurrSuspect.setStatus('current')
atmfM4CellProtoCurrElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 15, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoCurrElapsedTime.setStatus('current')
atmfM4CellProtoCurrSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 15, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoCurrSupprIntvls.setStatus('current')
atmfM4CellProtoCurrProtoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 15, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoCurrProtoErrors.setStatus('current')
atmfM4CellProtoCurrInOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 15, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoCurrInOAMCells.setStatus('current')
atmfM4CellProtoHistTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 16), )
if mibBuilder.loadTexts: atmfM4CellProtoHistTable.setStatus('current')
atmfM4CellProtoHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4CellProtoHistIndex"))
if mibBuilder.loadTexts: atmfM4CellProtoHistEntry.setStatus('current')
atmfM4CellProtoHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: atmfM4CellProtoHistIndex.setStatus('current')
atmfM4CellProtoHistSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 16, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoHistSuspect.setStatus('current')
atmfM4CellProtoHistElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 16, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoHistElapsedTime.setStatus('current')
atmfM4CellProtoHistSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 16, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoHistSupprIntvls.setStatus('current')
atmfM4CellProtoHistProtoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 16, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoHistProtoErrors.setStatus('current')
atmfM4CellProtoHistInOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 16, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoHistInOAMCells.setStatus('current')
atmfM4CellProtoErrorTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 17), )
if mibBuilder.loadTexts: atmfM4CellProtoErrorTable.setStatus('current')
atmfM4CellProtoErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4CellProtoErrorCode"))
if mibBuilder.loadTexts: atmfM4CellProtoErrorEntry.setStatus('current')
atmfM4CellProtoErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: atmfM4CellProtoErrorCode.setStatus('current')
atmfM4CellProtoErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 17, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoErrorTime.setStatus('current')
atmfM4CellProtoErrorReason = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unassignedVpiVciValue", 1), ("outOfRangeVpiVciValue", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoErrorReason.setStatus('current')
atmfM4CellProtoErrorVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoErrorVpi.setStatus('current')
atmfM4CellProtoErrorVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoErrorVci.setStatus('current')
atmfM4TcProtoCurrTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 18), )
if mibBuilder.loadTexts: atmfM4TcProtoCurrTable.setStatus('current')
atmfM4TcProtoCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4TcProtoCurrEntry.setStatus('current')
atmfM4TcProtoCurrSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 18, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoCurrSuspect.setStatus('current')
atmfM4TcProtoCurrElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 18, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoCurrElapsedTime.setStatus('current')
atmfM4TcProtoCurrSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 18, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoCurrSupprIntvls.setStatus('current')
atmfM4TcProtoCurrDiscardHECViol = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 18, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoCurrDiscardHECViol.setStatus('current')
atmfM4TcProtoHistTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 19), )
if mibBuilder.loadTexts: atmfM4TcProtoHistTable.setStatus('current')
atmfM4TcProtoHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 19, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4TcProtoHistIndex"))
if mibBuilder.loadTexts: atmfM4TcProtoHistEntry.setStatus('current')
atmfM4TcProtoHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: atmfM4TcProtoHistIndex.setStatus('current')
atmfM4TcProtoHistSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 19, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoHistSuspect.setStatus('current')
atmfM4TcProtoHistElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 19, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoHistElapsedTime.setStatus('current')
atmfM4TcProtoHistSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 19, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoHistSupprIntvls.setStatus('current')
atmfM4TcProtoHistDiscardHECViol = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 19, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoHistDiscardHECViol.setStatus('current')
atmfM4VpUpcNpcCurrTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 20), )
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrTable.setStatus('current')
atmfM4VpUpcNpcCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrEntry.setStatus('current')
atmfM4VpUpcNpcCurrSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 20, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrSuspect.setStatus('current')
atmfM4VpUpcNpcCurrElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 20, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrElapsedTime.setStatus('current')
atmfM4VpUpcNpcCurrSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 20, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrSupprIntvls.setStatus('current')
atmfM4VpUpcNpcCurrDiscardedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 20, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrDiscardedCells.setStatus('current')
atmfM4VpUpcNpcCurrDiscardedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 20, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrDiscardedClp0.setStatus('current')
atmfM4VpUpcNpcCurrPassedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 20, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrPassedCells.setStatus('current')
atmfM4VpUpcNpcCurrPassedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 20, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrPassedClp0.setStatus('current')
atmfM4VpUpcNpcHistTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 21), )
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistTable.setStatus('current')
atmfM4VpUpcNpcHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 21, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"), (0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4VpUpcNpcHistIndex"))
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistEntry.setStatus('current')
atmfM4VpUpcNpcHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistIndex.setStatus('current')
atmfM4VpUpcNpcHistSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 21, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistSuspect.setStatus('current')
atmfM4VpUpcNpcHistElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 21, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistElapsedTime.setStatus('current')
atmfM4VpUpcNpcHistSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 21, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistSupprIntvls.setStatus('current')
atmfM4VpUpcNpcHistDiscardedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 21, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistDiscardedCells.setStatus('current')
atmfM4VpUpcNpcHistDiscardedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 21, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistDiscardedClp0.setStatus('current')
atmfM4VpUpcNpcHistPassedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 21, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistPassedCells.setStatus('current')
atmfM4VpUpcNpcHistPassedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 21, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistPassedClp0.setStatus('current')
atmfM4VcUpcNpcCurrTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 22), )
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrTable.setStatus('current')
atmfM4VcUpcNpcCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrEntry.setStatus('current')
atmfM4VcUpcNpcCurrSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 22, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrSuspect.setStatus('current')
atmfM4VcUpcNpcCurrElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 22, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrElapsedTime.setStatus('current')
atmfM4VcUpcNpcCurrSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 22, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrSupprIntvls.setStatus('current')
atmfM4VcUpcNpcCurrDiscardedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 22, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrDiscardedCells.setStatus('current')
atmfM4VcUpcNpcCurrDiscardedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 22, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrDiscardedClp0.setStatus('current')
atmfM4VcUpcNpcCurrPassedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 22, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrPassedCells.setStatus('current')
atmfM4VcUpcNpcCurrPassedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 22, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrPassedClp0.setStatus('current')
atmfM4VcUpcNpcHistTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 23), )
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistTable.setStatus('current')
atmfM4VcUpcNpcHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 23, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4VcUpcNpcHistIndex"))
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistEntry.setStatus('current')
atmfM4VcUpcNpcHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistIndex.setStatus('current')
atmfM4VcUpcNpcHistSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 23, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistSuspect.setStatus('current')
atmfM4VcUpcNpcHistElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 23, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistElapsedTime.setStatus('current')
atmfM4VcUpcNpcHistSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 23, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistSupprIntvls.setStatus('current')
atmfM4VcUpcNpcHistDiscardedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 23, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistDiscardedCells.setStatus('current')
atmfM4VcUpcNpcHistDiscardedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 23, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistDiscardedClp0.setStatus('current')
atmfM4VcUpcNpcHistPassedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 23, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistPassedCells.setStatus('current')
atmfM4VcUpcNpcHistPassedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 23, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistPassedClp0.setStatus('current')
atmfM4TestTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 24))
atmfM4TestOAMLoopbackSeg = ObjectIdentity((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 24, 1))
if mibBuilder.loadTexts: atmfM4TestOAMLoopbackSeg.setStatus('current')
atmfM4TestOAMLoopbackE2E = ObjectIdentity((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 24, 2))
if mibBuilder.loadTexts: atmfM4TestOAMLoopbackE2E.setStatus('current')
atmfM4VpTestTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 25), )
if mibBuilder.loadTexts: atmfM4VpTestTable.setStatus('current')
atmfM4VpTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 25, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"), (0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4VpTestObject"))
if mibBuilder.loadTexts: atmfM4VpTestEntry.setStatus('current')
atmfM4VpTestObject = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vplTp", 1), ("vpcTp", 2))))
if mibBuilder.loadTexts: atmfM4VpTestObject.setStatus('current')
atmfM4VpTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 25, 1, 2), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VpTestId.setStatus('current')
atmfM4VpTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInUse", 1), ("inUse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VpTestStatus.setStatus('current')
atmfM4VpTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 25, 1, 4), AutonomousType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VpTestType.setStatus('current')
atmfM4VpTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpTestResult.setStatus('current')
atmfM4VpTestCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 25, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpTestCode.setStatus('current')
atmfM4VpTestOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 25, 1, 7), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VpTestOwner.setStatus('current')
atmfM4VcTestTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 26), )
if mibBuilder.loadTexts: atmfM4VcTestTable.setStatus('current')
atmfM4VcTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 26, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4VcTestObject"))
if mibBuilder.loadTexts: atmfM4VcTestEntry.setStatus('current')
atmfM4VcTestObject = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vclTp", 1), ("vccTp", 2))))
if mibBuilder.loadTexts: atmfM4VcTestObject.setStatus('current')
atmfM4VcTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 26, 1, 2), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VcTestId.setStatus('current')
atmfM4VcTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInUse", 1), ("inUse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VcTestStatus.setStatus('current')
atmfM4VcTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 26, 1, 4), AutonomousType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VcTestType.setStatus('current')
atmfM4VcTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 26, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcTestResult.setStatus('current')
atmfM4VcTestCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 26, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcTestCode.setStatus('current')
atmfM4VcTestOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 26, 1, 7), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VcTestOwner.setStatus('current')
atmfM4EquipTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 28), )
if mibBuilder.loadTexts: atmfM4EquipTable.setStatus('current')
atmfM4EquipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 28, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: atmfM4EquipEntry.setStatus('current')
atmfM4EquipAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4EquipAdminStatus.setStatus('current')
atmfM4EquipLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 28, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4EquipLocation.setStatus('current')
atmfM4EquipOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4EquipOperStatus.setStatus('current')
atmfM4EquipVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 28, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4EquipVendor.setStatus('current')
atmfM4EquipVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 28, 1, 5), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4EquipVersion.setStatus('current')
atmfM4EquipUserLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 28, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4EquipUserLabel.setStatus('current')
atmfM4EquipAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 28, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4EquipAlarmSeverityIndex.setStatus('current')
atmfM4EquipHolderTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 29), )
if mibBuilder.loadTexts: atmfM4EquipHolderTable.setStatus('current')
atmfM4EquipHolderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 29, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: atmfM4EquipHolderEntry.setStatus('current')
atmfM4EquipHolderType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rack", 1), ("shelf", 2), ("drawer", 3), ("slot", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4EquipHolderType.setStatus('current')
atmfM4EquipHolderAcceptableTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 29, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4EquipHolderAcceptableTypes.setStatus('current')
atmfM4EquipHolderSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("empty", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4EquipHolderSlotStatus.setStatus('current')
atmfM4EquipHolderSwLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 29, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4EquipHolderSwLoad.setStatus('current')
atmfM4PlugInUnitTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 30), )
if mibBuilder.loadTexts: atmfM4PlugInUnitTable.setStatus('current')
atmfM4PlugInUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 30, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: atmfM4PlugInUnitEntry.setStatus('current')
atmfM4PlugInUnitAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4PlugInUnitAdminStatus.setStatus('current')
atmfM4PlugInUnitAvailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("available", 1), ("inTest", 2), ("failed", 3), ("powerOff", 4), ("notInstalled", 5), ("offLine", 6), ("dependency", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4PlugInUnitAvailStatus.setStatus('current')
atmfM4PlugInUnitOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4PlugInUnitOperStatus.setStatus('current')
atmfM4PlugInUnitVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 30, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4PlugInUnitVendor.setStatus('current')
atmfM4PlugInUnitVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 30, 1, 5), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4PlugInUnitVersion.setStatus('current')
atmfM4PlugInUnitAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 30, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4PlugInUnitAlarmSeverityIndex.setStatus('current')
atmfM4HwRunningSwTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 32), )
if mibBuilder.loadTexts: atmfM4HwRunningSwTable.setStatus('current')
atmfM4HwRunningSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 32, 1), ).setIndexNames((0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4HwRunningSwHwIndex"), (0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4HwRunningSwIndex"))
if mibBuilder.loadTexts: atmfM4HwRunningSwEntry.setStatus('current')
atmfM4HwRunningSwHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: atmfM4HwRunningSwHwIndex.setStatus('current')
atmfM4HwRunningSwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: atmfM4HwRunningSwIndex.setStatus('current')
atmfM4HwRunningSwSwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 32, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4HwRunningSwSwIndex.setStatus('current')
atmfM4HwInstalledSwTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 33), )
if mibBuilder.loadTexts: atmfM4HwInstalledSwTable.setStatus('current')
atmfM4HwInstalledSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 33, 1), ).setIndexNames((0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4HwInstalledSwHwIndex"), (0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4HwInstalledSwIndex"))
if mibBuilder.loadTexts: atmfM4HwInstalledSwEntry.setStatus('current')
atmfM4HwInstalledSwHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: atmfM4HwInstalledSwHwIndex.setStatus('current')
atmfM4HwInstalledSwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 33, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: atmfM4HwInstalledSwIndex.setStatus('current')
atmfM4HwInstalledSwSwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 33, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4HwInstalledSwSwIndex.setStatus('current')
atmfM4HwSwAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 33, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4HwSwAlarmSeverityIndex.setStatus('current')
class AtmfM4AlarmLogSeverity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4))
    namedValues = NamedValues(("cleared", -1), ("indeterminate", 0), ("critical", 1), ("major", 2), ("minor", 3), ("warning", 4))

class AtmfM4AlarmSeverity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("indeterminate", 0), ("critical", 1), ("major", 2), ("minor", 3), ("warning", 4))

atmfM4AlarmSevDefault = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 34), AtmfM4AlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4AlarmSevDefault.setStatus('current')
atmfM4AlarmSevProfileIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4AlarmSevProfileIndexNext.setStatus('current')
atmfM4AlarmSevProfileTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 36), )
if mibBuilder.loadTexts: atmfM4AlarmSevProfileTable.setStatus('current')
atmfM4AlarmSevProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 36, 1), ).setIndexNames((0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4AlarmSevProfileIndex"))
if mibBuilder.loadTexts: atmfM4AlarmSevProfileEntry.setStatus('current')
atmfM4AlarmSevProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 36, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: atmfM4AlarmSevProfileIndex.setStatus('current')
atmfM4AlarmSevProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 36, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4AlarmSevProfileRowStatus.setStatus('current')
atmfM4AlarmSevTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 37), )
if mibBuilder.loadTexts: atmfM4AlarmSevTable.setStatus('current')
atmfM4AlarmSevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 37, 1), ).setIndexNames((0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4AlarmSevProfileIndex"), (0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4AlarmSevTrapId"))
if mibBuilder.loadTexts: atmfM4AlarmSevEntry.setStatus('current')
atmfM4AlarmSevTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 37, 1, 1), ObjectIdentifier())
if mibBuilder.loadTexts: atmfM4AlarmSevTrapId.setStatus('current')
atmfM4AlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 37, 1, 2), AtmfM4AlarmSeverity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4AlarmSeverity.setStatus('current')
atmfM4ForwardAllTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 38))
if mibBuilder.loadTexts: atmfM4ForwardAllTraps.setStatus('current')
atmfM4TrapForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 39), )
if mibBuilder.loadTexts: atmfM4TrapForwardingTable.setStatus('current')
atmfM4TrapForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 39, 1), ).setIndexNames((0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapForwardingIndex"))
if mibBuilder.loadTexts: atmfM4TrapForwardingEntry.setStatus('current')
atmfM4TrapForwardingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 39, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: atmfM4TrapForwardingIndex.setStatus('current')
atmfM4TrapForwardingDest = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 39, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4TrapForwardingDest.setStatus('current')
atmfM4ForwardedTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 39, 1, 3), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4ForwardedTrapId.setStatus('current')
atmfM4ForwardedTrapObject = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 39, 1, 4), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4ForwardedTrapObject.setStatus('current')
atmfM4TrapForwardingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 39, 1, 5), Integer32().clone(162)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4TrapForwardingPort.setStatus('current')
atmfM4LowestForwardedSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 39, 1, 6), AtmfM4AlarmSeverity().clone('minor')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4LowestForwardedSeverity.setStatus('current')
atmfM4ForwardedIndeterminate = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 39, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4ForwardedIndeterminate.setStatus('current')
atmfM4TrapForwardingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 39, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4TrapForwardingRowStatus.setStatus('current')
atmfM4TrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 40), )
if mibBuilder.loadTexts: atmfM4TrapLogTable.setStatus('current')
atmfM4TrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 40, 1), ).setIndexNames((0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapLogSrc"), (0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapLogType"))
if mibBuilder.loadTexts: atmfM4TrapLogEntry.setStatus('current')
atmfM4TrapLogSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 40, 1, 1), IpAddress())
if mibBuilder.loadTexts: atmfM4TrapLogSrc.setStatus('current')
atmfM4TrapLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 40, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("objectCreated", 1), ("objectDeleted", 2), ("configChange", 3), ("stateChange", 4), ("alarm", 5))))
if mibBuilder.loadTexts: atmfM4TrapLogType.setStatus('current')
atmfM4TrapLogAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 40, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4TrapLogAdminStatus.setStatus('current')
atmfM4TrapLogOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 40, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("logFull", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TrapLogOperStatus.setStatus('current')
atmfM4TrapLogFullAction = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 40, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halt", 1), ("wrap", 2))).clone('wrap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4TrapLogFullAction.setStatus('current')
atmfM4TrapLogRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 40, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4TrapLogRowStatus.setStatus('current')
atmfM4LoggedTrapTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 41), )
if mibBuilder.loadTexts: atmfM4LoggedTrapTable.setStatus('current')
atmfM4LoggedTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 41, 1), ).setIndexNames((0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapLogSrc"), (0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapLogType"), (0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4LoggedTrapIndex"))
if mibBuilder.loadTexts: atmfM4LoggedTrapEntry.setStatus('current')
atmfM4LoggedTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 41, 1, 1), Unsigned32())
if mibBuilder.loadTexts: atmfM4LoggedTrapIndex.setStatus('current')
atmfM4LoggedTrapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 41, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedTrapTime.setStatus('current')
atmfM4LoggedTrapID = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 41, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedTrapID.setStatus('current')
atmfM4LoggedTrapObject = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 41, 1, 4), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedTrapObject.setStatus('current')
atmfM4LoggedTrapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 41, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4LoggedTrapRowStatus.setStatus('current')
atmfM4LoggedAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 42), )
if mibBuilder.loadTexts: atmfM4LoggedAlarmTable.setStatus('current')
atmfM4LoggedAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 42, 1), ).setIndexNames((0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapLogSrc"), (0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapLogType"), (0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4LoggedTrapIndex"))
if mibBuilder.loadTexts: atmfM4LoggedAlarmEntry.setStatus('current')
atmfM4LoggedAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 42, 1, 1), AtmfM4AlarmLogSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedAlarmSeverity.setStatus('current')
atmfM4LoggedAlarmBackedUp = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 42, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedAlarmBackedUp.setStatus('current')
atmfM4LoggedAlarmBUObject = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 42, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedAlarmBUObject.setStatus('current')
atmfM4LoggedAlarmSpecificProb = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 42, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedAlarmSpecificProb.setStatus('current')
atmfM4LoggedAlarmRepairAct = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 42, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedAlarmRepairAct.setStatus('current')
atmfM4TrapAlarmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 43), AtmfM4AlarmLogSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atmfM4TrapAlarmSeverity.setStatus('current')
atmfM4TrapAlarmBackedUp = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 44), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atmfM4TrapAlarmBackedUp.setStatus('current')
atmfM4TrapAlarmBUObject = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 45), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atmfM4TrapAlarmBUObject.setStatus('current')
atmfM4TrapAlarmSpecificProb = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 46), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atmfM4TrapAlarmSpecificProb.setStatus('current')
atmfM4TrapAlarmRepairAct = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 1, 47), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atmfM4TrapAlarmRepairAct.setStatus('current')
atmfM4IfAisAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 1)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfAisAlarm.setStatus('current')
atmfM4IfLcdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 2)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfLcdAlarm.setStatus('current')
atmfM4IfLofAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 3)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfLofAlarm.setStatus('current')
atmfM4IfLopAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 4)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfLopAlarm.setStatus('current')
atmfM4IfLosAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 5)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfLosAlarm.setStatus('current')
atmfM4IfPayloadMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 6)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfPayloadMismatchAlarm.setStatus('current')
atmfM4IfXmissionErrAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 7)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfXmissionErrAlarm.setStatus('current')
atmfM4IfPathTraceMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 8)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfPathTraceMismatchAlarm.setStatus('current')
atmfM4IfRdiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 9)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfRdiAlarm.setStatus('current')
atmfM4IfSignalLabelMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 10)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfSignalLabelMismatchAlarm.setStatus('current')
atmfM4VplTpAisAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 11)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-MIB", "atmVplOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4VplTpAisAlarm.setStatus('current')
atmfM4VplTpRdiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 12)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-MIB", "atmVplOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4VplTpRdiAlarm.setStatus('current')
atmfM4VpcTpAisAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 13)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-MIB", "atmVplOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4VpcTpAisAlarm.setStatus('current')
atmfM4VpcTpRdiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 14)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-MIB", "atmVplOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4VpcTpRdiAlarm.setStatus('current')
atmfM4VclTpAisAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 15)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-MIB", "atmVclOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4VclTpAisAlarm.setStatus('current')
atmfM4VclTpRdiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 16)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-MIB", "atmVclOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4VclTpRdiAlarm.setStatus('current')
atmfM4VccTpAisAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 17)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-MIB", "atmVclOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4VccTpAisAlarm.setStatus('current')
atmfM4VccTpRdiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 18)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-MIB", "atmVclOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4VccTpRdiAlarm.setStatus('current')
atmfM4HwBackPlaneAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 19)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwBackPlaneAlarm.setStatus('current')
atmfM4HwCallEstErrAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 20)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwCallEstErrAlarm.setStatus('current')
atmfM4HwCongestionAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 21)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwCongestionAlarm.setStatus('current')
atmfM4HwExtIfDevProbAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 22)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwExtIfDevProbAlarm.setStatus('current')
atmfM4HwLineCardAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 23)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwLineCardAlarm.setStatus('current')
atmfM4HwMultiplexerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 24)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwMultiplexerAlarm.setStatus('current')
atmfM4HwPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 25)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwPowerAlarm.setStatus('current')
atmfM4HwProcessorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 26)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwProcessorAlarm.setStatus('current')
atmfM4HwProtectionPathAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 27)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwProtectionPathAlarm.setStatus('current')
atmfM4HwReceiverFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 28)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwReceiverFailAlarm.setStatus('current')
atmfM4HwPIUnitMissingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 29)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwPIUnitMissingAlarm.setStatus('current')
atmfM4HwPIUnitProbAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 30)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwPIUnitProbAlarm.setStatus('current')
atmfM4HwPIUnitMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 31)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwPIUnitMismatchAlarm.setStatus('current')
atmfM4HwTimingProbAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 32)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwTimingProbAlarm.setStatus('current')
atmfM4HwXmitterFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 33)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwXmitterFailAlarm.setStatus('current')
atmfM4HwTrunkCardAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 34)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwTrunkCardAlarm.setStatus('current')
atmfM4HwStorageCapacityAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 35)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwStorageCapacityAlarm.setStatus('current')
atmfM4HwMemoryMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 36)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwMemoryMismatchAlarm.setStatus('current')
atmfM4HwCorruptDataAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 37)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwCorruptDataAlarm.setStatus('current')
atmfM4HwSwEnvironAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 38)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwSwEnvironAlarm.setStatus('current')
atmfM4HwSwDownloadFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 39)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwSwDownloadFailAlarm.setStatus('current')
atmfM4HwVersionMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 40)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwVersionMismatchAlarm.setStatus('current')
atmfM4HwFanFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 41)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwFanFailAlarm.setStatus('current')
atmfM4HwDoorOpenAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 42)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwDoorOpenAlarm.setStatus('current')
atmfM4HwFuseFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 43)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwFuseFailAlarm.setStatus('current')
atmfM4HwHighTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 44)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwHighTempAlarm.setStatus('current')
atmfM4SwVersionMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 45)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwInstalledSwSwIndex"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4SwVersionMismatchAlarm.setStatus('current')
atmfM4VplTpUp = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 46)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-MIB", "atmVplOperStatus"))
if mibBuilder.loadTexts: atmfM4VplTpUp.setStatus('current')
atmfM4VplTpDown = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 47)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-MIB", "atmVplOperStatus"))
if mibBuilder.loadTexts: atmfM4VplTpDown.setStatus('current')
atmfM4VclTpUp = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 48)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-MIB", "atmVclOperStatus"))
if mibBuilder.loadTexts: atmfM4VclTpUp.setStatus('current')
atmfM4VclTpDown = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 49)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-MIB", "atmVclOperStatus"))
if mibBuilder.loadTexts: atmfM4VclTpDown.setStatus('current')
atmfM4VplXConnUp = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 50)).setObjects(("ATM-MIB", "atmVpCrossConnectL2HOperStatus"), ("ATM-MIB", "atmVpCrossConnectH2LOperStatus"))
if mibBuilder.loadTexts: atmfM4VplXConnUp.setStatus('current')
atmfM4VplXConnDown = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 51)).setObjects(("ATM-MIB", "atmVpCrossConnectL2HOperStatus"), ("ATM-MIB", "atmVpCrossConnectH2LOperStatus"))
if mibBuilder.loadTexts: atmfM4VplXConnDown.setStatus('current')
atmfM4VclXConnUp = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 52)).setObjects(("ATM-MIB", "atmVcCrossConnectL2HOperStatus"), ("ATM-MIB", "atmVcCrossConnectH2LOperStatus"))
if mibBuilder.loadTexts: atmfM4VclXConnUp.setStatus('current')
atmfM4VclXConnDown = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 53)).setObjects(("ATM-MIB", "atmVcCrossConnectL2HOperStatus"), ("ATM-MIB", "atmVcCrossConnectH2LOperStatus"))
if mibBuilder.loadTexts: atmfM4VclXConnDown.setStatus('current')
atmfM4HwUnitUp = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 54)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"))
if mibBuilder.loadTexts: atmfM4HwUnitUp.setStatus('current')
atmfM4HwUnitDown = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 55)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"))
if mibBuilder.loadTexts: atmfM4HwUnitDown.setStatus('current')
atmfM4AtmCellIfCreated = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 56)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4IfType"))
if mibBuilder.loadTexts: atmfM4AtmCellIfCreated.setStatus('current')
atmfM4AtmCellIfDeleted = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 57)).setObjects(("IF-MIB", "ifOperStatus"))
if mibBuilder.loadTexts: atmfM4AtmCellIfDeleted.setStatus('current')
atmfM4VpcTpCreated = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 58)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-MIB", "atmVplOperStatus"))
if mibBuilder.loadTexts: atmfM4VpcTpCreated.setStatus('current')
atmfM4VpcTpDeleted = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 59)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-MIB", "atmVplOperStatus"))
if mibBuilder.loadTexts: atmfM4VpcTpDeleted.setStatus('current')
atmfM4VccTpCreated = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 60)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-MIB", "atmVclOperStatus"))
if mibBuilder.loadTexts: atmfM4VccTpCreated.setStatus('current')
atmfM4VccTpDeleted = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 61)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-MIB", "atmVclOperStatus"))
if mibBuilder.loadTexts: atmfM4VccTpDeleted.setStatus('current')
atmfM4VplXConnCreated = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 62)).setObjects(("ATM-MIB", "atmVpCrossConnectL2HOperStatus"), ("ATM-MIB", "atmVpCrossConnectH2LOperStatus"))
if mibBuilder.loadTexts: atmfM4VplXConnCreated.setStatus('current')
atmfM4VplXConnDeleted = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 63)).setObjects(("ATM-MIB", "atmVpCrossConnectL2HOperStatus"), ("ATM-MIB", "atmVpCrossConnectH2LOperStatus"))
if mibBuilder.loadTexts: atmfM4VplXConnDeleted.setStatus('current')
atmfM4VclXConnCreated = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 64)).setObjects(("ATM-MIB", "atmVcCrossConnectL2HOperStatus"), ("ATM-MIB", "atmVcCrossConnectH2LOperStatus"))
if mibBuilder.loadTexts: atmfM4VclXConnCreated.setStatus('current')
atmfM4VclXConnDeleted = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 65)).setObjects(("ATM-MIB", "atmVcCrossConnectL2HOperStatus"), ("ATM-MIB", "atmVcCrossConnectH2LOperStatus"))
if mibBuilder.loadTexts: atmfM4VclXConnDeleted.setStatus('current')
atmfM4HwUnitCreated = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 66)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"))
if mibBuilder.loadTexts: atmfM4HwUnitCreated.setStatus('current')
atmfM4HwUnitDeleted = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 67)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"))
if mibBuilder.loadTexts: atmfM4HwUnitDeleted.setStatus('current')
atmfM4InstalledSwCreated = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 68)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwInstalledSwSwIndex"), ("HOST-RESOURCES-MIB", "hrSWInstalledIndex"), ("HOST-RESOURCES-MIB", "hrSWInstalledName"))
if mibBuilder.loadTexts: atmfM4InstalledSwCreated.setStatus('current')
atmfM4InstalledSwDeleted = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 69)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwInstalledSwSwIndex"), ("HOST-RESOURCES-MIB", "hrSWInstalledIndex"), ("HOST-RESOURCES-MIB", "hrSWInstalledName"))
if mibBuilder.loadTexts: atmfM4InstalledSwDeleted.setStatus('current')
atmfM4IfChanged = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 70)).setObjects(("IF-MIB", "ifOperStatus"))
if mibBuilder.loadTexts: atmfM4IfChanged.setStatus('current')
atmfM4VplTpChanged = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 71)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-MIB", "atmVplOperStatus"))
if mibBuilder.loadTexts: atmfM4VplTpChanged.setStatus('current')
atmfM4VclTpChanged = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 72)).setObjects(("IF-MIB", "ifOperStatus"), ("ATM-MIB", "atmVclOperStatus"))
if mibBuilder.loadTexts: atmfM4VclTpChanged.setStatus('current')
atmfM4VplXConnChanged = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 73)).setObjects(("ATM-MIB", "atmVpCrossConnectL2HOperStatus"), ("ATM-MIB", "atmVpCrossConnectH2LOperStatus"))
if mibBuilder.loadTexts: atmfM4VplXConnChanged.setStatus('current')
atmfM4VclXConnChanged = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 74)).setObjects(("ATM-MIB", "atmVcCrossConnectL2HOperStatus"), ("ATM-MIB", "atmVcCrossConnectH2LOperStatus"))
if mibBuilder.loadTexts: atmfM4VclXConnChanged.setStatus('current')
atmfM4HwUnitChanged = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 75)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"))
if mibBuilder.loadTexts: atmfM4HwUnitChanged.setStatus('current')
atmfM4InstalledSwChanged = NotificationType((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 2, 0, 76)).setObjects(("HOST-RESOURCES-MIB", "hrSWInstalledIndex"))
if mibBuilder.loadTexts: atmfM4InstalledSwChanged.setStatus('current')
atmfM4Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1))
atmfM4Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 2))
atmfM4Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 2, 1)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4General"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4PhysPathTpGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TcAdapterGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4AtmLayerGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VplGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VclGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpXConnGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcXConnGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpNextVpiGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcNextVciGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4CellProtoCurrGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4CellProtoHistGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4CellProtoErrorGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TcProtoCurrGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TcProtoHistGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpUpcNpcCurrGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpUpcNpcHistGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcUpcNpcCurrGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcUpcNpcHistGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpTestGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcTestGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4EquipGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4EquipHolderGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4PlugInUnitGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwRunningSwGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwInstalledSwGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4AlarmSevGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapForwardingGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapLogGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4LoggedTrapGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4LoggedAlarmGroup"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4NotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4Compliance = atmfM4Compliance.setStatus('current')
atmfM4General = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 1)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4NeVendor"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4NeVersion"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4NeStartTime"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4NeAlarmSeverityIndex"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4NeSuppressZeroStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4General = atmfM4General.setStatus('current')
atmfM4PhysPathTpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 2)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4PhysPathTpHwUnitIndex"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4PhysPathTpPortID"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4PhysPathTpAlarmSeverityIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4PhysPathTpGroup = atmfM4PhysPathTpGroup.setStatus('current')
atmfM4TcAdapterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 3)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4TcACellScrambling"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TcAlarmSeverityIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4TcAdapterGroup = atmfM4TcAdapterGroup.setStatus('current')
atmfM4AtmLayerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 4)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4IfType"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4IfLoopbackLocationCode"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4IfSubscriberAddress"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4IfPreferredCarrier"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4IfFarEndCarrierNetwork"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4AtmLayerGroup = atmfM4AtmLayerGroup.setStatus('current')
atmfM4VplGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 5)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VplSegEndPt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VplGroup = atmfM4VplGroup.setStatus('current')
atmfM4VclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 6)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VclSegEndPt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VclGroup = atmfM4VclGroup.setStatus('current')
atmfM4VpXConnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 7)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpXConnRecover"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VpXConnGroup = atmfM4VpXConnGroup.setStatus('current')
atmfM4VcXConnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 8)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcXConnRecover"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VcXConnGroup = atmfM4VcXConnGroup.setStatus('current')
atmfM4VpNextVpiGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 9)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpNextVpiValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VpNextVpiGroup = atmfM4VpNextVpiGroup.setStatus('current')
atmfM4VcNextVciGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 10)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcNextVciValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VcNextVciGroup = atmfM4VcNextVciGroup.setStatus('current')
atmfM4CellProtoCurrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 11)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4CellProtoCurrSuspect"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4CellProtoCurrElapsedTime"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4CellProtoCurrSupprIntvls"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4CellProtoCurrProtoErrors"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4CellProtoCurrInOAMCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4CellProtoCurrGroup = atmfM4CellProtoCurrGroup.setStatus('current')
atmfM4CellProtoHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 12)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4CellProtoHistSuspect"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4CellProtoHistElapsedTime"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4CellProtoHistSupprIntvls"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4CellProtoHistProtoErrors"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4CellProtoHistInOAMCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4CellProtoHistGroup = atmfM4CellProtoHistGroup.setStatus('current')
atmfM4CellProtoErrorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 13)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4CellProtoErrorTime"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4CellProtoErrorReason"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4CellProtoErrorVpi"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4CellProtoErrorVci"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4CellProtoErrorGroup = atmfM4CellProtoErrorGroup.setStatus('current')
atmfM4TcProtoCurrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 14)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4TcProtoCurrSuspect"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TcProtoCurrElapsedTime"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TcProtoCurrSupprIntvls"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TcProtoCurrDiscardHECViol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4TcProtoCurrGroup = atmfM4TcProtoCurrGroup.setStatus('current')
atmfM4TcProtoHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 15)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4TcProtoHistSuspect"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TcProtoHistElapsedTime"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TcProtoHistSupprIntvls"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TcProtoHistDiscardHECViol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4TcProtoHistGroup = atmfM4TcProtoHistGroup.setStatus('current')
atmfM4VpUpcNpcCurrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 16)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpUpcNpcCurrSuspect"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpUpcNpcCurrElapsedTime"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpUpcNpcCurrSupprIntvls"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpUpcNpcCurrDiscardedCells"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpUpcNpcCurrDiscardedClp0"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpUpcNpcCurrPassedCells"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpUpcNpcCurrPassedClp0"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VpUpcNpcCurrGroup = atmfM4VpUpcNpcCurrGroup.setStatus('current')
atmfM4VpUpcNpcHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 17)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpUpcNpcHistSuspect"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpUpcNpcHistElapsedTime"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpUpcNpcHistSupprIntvls"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpUpcNpcHistDiscardedCells"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpUpcNpcHistDiscardedClp0"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpUpcNpcHistPassedCells"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpUpcNpcHistPassedClp0"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VpUpcNpcHistGroup = atmfM4VpUpcNpcHistGroup.setStatus('current')
atmfM4VcUpcNpcCurrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 18)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcUpcNpcCurrSuspect"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcUpcNpcCurrElapsedTime"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcUpcNpcCurrSupprIntvls"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcUpcNpcCurrDiscardedCells"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcUpcNpcCurrDiscardedClp0"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcUpcNpcCurrPassedCells"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcUpcNpcCurrPassedClp0"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VcUpcNpcCurrGroup = atmfM4VcUpcNpcCurrGroup.setStatus('current')
atmfM4VcUpcNpcHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 19)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcUpcNpcHistSuspect"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcUpcNpcHistElapsedTime"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcUpcNpcHistSupprIntvls"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcUpcNpcHistDiscardedCells"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcUpcNpcHistDiscardedClp0"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcUpcNpcHistPassedCells"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcUpcNpcHistPassedClp0"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VcUpcNpcHistGroup = atmfM4VcUpcNpcHistGroup.setStatus('current')
atmfM4VpTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 20)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpTestId"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpTestStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpTestType"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpTestResult"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpTestCode"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpTestOwner"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VpTestGroup = atmfM4VpTestGroup.setStatus('current')
atmfM4VcTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 21)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcTestId"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcTestStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcTestType"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcTestResult"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcTestCode"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcTestOwner"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VcTestGroup = atmfM4VcTestGroup.setStatus('current')
atmfM4EquipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 22)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4EquipAdminStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4EquipLocation"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4EquipOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4EquipVendor"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4EquipVersion"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4EquipUserLabel"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4EquipAlarmSeverityIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4EquipGroup = atmfM4EquipGroup.setStatus('current')
atmfM4EquipHolderGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 23)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4EquipHolderType"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4EquipHolderAcceptableTypes"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4EquipHolderSlotStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4EquipHolderSwLoad"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4EquipHolderGroup = atmfM4EquipHolderGroup.setStatus('current')
atmfM4PlugInUnitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 24)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4PlugInUnitAdminStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4PlugInUnitAvailStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4PlugInUnitOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4PlugInUnitVendor"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4PlugInUnitVersion"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4PlugInUnitAlarmSeverityIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4PlugInUnitGroup = atmfM4PlugInUnitGroup.setStatus('current')
atmfM4HwRunningSwGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 25)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwRunningSwSwIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4HwRunningSwGroup = atmfM4HwRunningSwGroup.setStatus('current')
atmfM4HwInstalledSwGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 26)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwInstalledSwSwIndex"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwSwAlarmSeverityIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4HwInstalledSwGroup = atmfM4HwInstalledSwGroup.setStatus('current')
atmfM4AlarmSevGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 27)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4AlarmSevProfileRowStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4AlarmSeverity"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4AlarmSevDefault"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4AlarmSevProfileIndexNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4AlarmSevGroup = atmfM4AlarmSevGroup.setStatus('current')
atmfM4TrapForwardingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 28)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapForwardingDest"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4ForwardedTrapId"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4ForwardedTrapObject"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapForwardingPort"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4LowestForwardedSeverity"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4ForwardedIndeterminate"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapForwardingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4TrapForwardingGroup = atmfM4TrapForwardingGroup.setStatus('current')
atmfM4TrapLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 29)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapLogAdminStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapLogOperStatus"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapLogFullAction"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapLogRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4TrapLogGroup = atmfM4TrapLogGroup.setStatus('current')
atmfM4LoggedTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 30)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4LoggedTrapTime"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4LoggedTrapID"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4LoggedTrapObject"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4LoggedTrapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4LoggedTrapGroup = atmfM4LoggedTrapGroup.setStatus('current')
atmfM4LoggedAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 31)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4LoggedAlarmSeverity"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4LoggedAlarmBackedUp"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4LoggedAlarmBUObject"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4LoggedAlarmSpecificProb"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4LoggedAlarmRepairAct"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSeverity"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmBackedUp"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmBUObject"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmSpecificProb"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4TrapAlarmRepairAct"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4LoggedAlarmGroup = atmfM4LoggedAlarmGroup.setStatus('current')
atmfM4NotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 353, 5, 1, 3, 1, 3, 1, 32)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4IfAisAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4IfLcdAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4IfLofAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4IfLopAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4IfLosAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4IfPayloadMismatchAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4IfXmissionErrAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4IfPathTraceMismatchAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4IfRdiAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4IfSignalLabelMismatchAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VplTpAisAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VplTpRdiAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpcTpAisAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpcTpRdiAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VclTpAisAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VclTpRdiAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VccTpAisAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VccTpRdiAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwBackPlaneAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwCallEstErrAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwCongestionAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwExtIfDevProbAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwLineCardAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwMultiplexerAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwPowerAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwProcessorAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwProtectionPathAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwReceiverFailAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwPIUnitMissingAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwPIUnitProbAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwPIUnitMismatchAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwTimingProbAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwXmitterFailAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwTrunkCardAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwStorageCapacityAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwMemoryMismatchAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwCorruptDataAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwSwEnvironAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwSwDownloadFailAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwVersionMismatchAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwFanFailAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwDoorOpenAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwFuseFailAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwHighTempAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4SwVersionMismatchAlarm"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VplTpUp"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VplTpDown"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VclTpUp"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VclTpDown"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VplXConnUp"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VplXConnDown"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VclXConnUp"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VclXConnDown"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwUnitUp"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwUnitDown"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4AtmCellIfCreated"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4AtmCellIfDeleted"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpcTpCreated"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpcTpDeleted"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VccTpCreated"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VccTpDeleted"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VplXConnCreated"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VplXConnDeleted"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VclXConnCreated"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VclXConnDeleted"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwUnitCreated"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwUnitDeleted"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4InstalledSwCreated"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4InstalledSwDeleted"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4IfChanged"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VplTpChanged"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VclTpChanged"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VplXConnChanged"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VclXConnChanged"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4HwUnitChanged"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4InstalledSwChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4NotificationsGroup = atmfM4NotificationsGroup.setStatus('current')
mibBuilder.exportSymbols("ATM-FORUM-SNMP-M4-MIB", atmfM4VplXConnDown=atmfM4VplXConnDown, atmfM4EquipHolderSwLoad=atmfM4EquipHolderSwLoad, atmfM4VpUpcNpcCurrPassedCells=atmfM4VpUpcNpcCurrPassedCells, atmfM4TcProtoHistGroup=atmfM4TcProtoHistGroup, atmfM4VpcTpRdiAlarm=atmfM4VpcTpRdiAlarm, atmfM4HwPIUnitProbAlarm=atmfM4HwPIUnitProbAlarm, atmfM4IfSubscriberAddress=atmfM4IfSubscriberAddress, atmfM4HwCallEstErrAlarm=atmfM4HwCallEstErrAlarm, atmfM4AlarmSevProfileIndex=atmfM4AlarmSevProfileIndex, atmfM4TcProtoHistSupprIntvls=atmfM4TcProtoHistSupprIntvls, atmfM4EquipGroup=atmfM4EquipGroup, atmfM4HwInstalledSwHwIndex=atmfM4HwInstalledSwHwIndex, atmfM4CellProtoCurrGroup=atmfM4CellProtoCurrGroup, atmfM4TcProtoCurrEntry=atmfM4TcProtoCurrEntry, atmfM4VclXConnDown=atmfM4VclXConnDown, atmfM4HwUnitCreated=atmfM4HwUnitCreated, atmfM4PhysPathTpAlarmSeverityIndex=atmfM4PhysPathTpAlarmSeverityIndex, atmfM4HwInstalledSwEntry=atmfM4HwInstalledSwEntry, atmfM4HwCongestionAlarm=atmfM4HwCongestionAlarm, atmfM4CellProtoCurrSupprIntvls=atmfM4CellProtoCurrSupprIntvls, atmfM4HwStorageCapacityAlarm=atmfM4HwStorageCapacityAlarm, atmfM4IfLcdAlarm=atmfM4IfLcdAlarm, atmfM4CellProtoErrorTime=atmfM4CellProtoErrorTime, atmfM4EquipLocation=atmfM4EquipLocation, atmfM4VpUpcNpcCurrDiscardedCells=atmfM4VpUpcNpcCurrDiscardedCells, atmfM4VpUpcNpcCurrElapsedTime=atmfM4VpUpcNpcCurrElapsedTime, atmfM4VpTestGroup=atmfM4VpTestGroup, atmfM4PlugInUnitVendor=atmfM4PlugInUnitVendor, atmfM4VcUpcNpcHistGroup=atmfM4VcUpcNpcHistGroup, atmfM4HwDoorOpenAlarm=atmfM4HwDoorOpenAlarm, atmfM4VcUpcNpcCurrSuspect=atmfM4VcUpcNpcCurrSuspect, atmfM4ForwardedTrapObject=atmfM4ForwardedTrapObject, atmfM4TrapLogOperStatus=atmfM4TrapLogOperStatus, atmfM4EquipTable=atmfM4EquipTable, atmfM4VpTestResult=atmfM4VpTestResult, atmfM4AtmLayerTable=atmfM4AtmLayerTable, atmfM4TrapLogTable=atmfM4TrapLogTable, atmfM4VpUpcNpcHistElapsedTime=atmfM4VpUpcNpcHistElapsedTime, atmfM4VclTpRdiAlarm=atmfM4VclTpRdiAlarm, atmfM4LoggedAlarmGroup=atmfM4LoggedAlarmGroup, atmfM4VpUpcNpcCurrDiscardedClp0=atmfM4VpUpcNpcCurrDiscardedClp0, atmfM4VpcTpAisAlarm=atmfM4VpcTpAisAlarm, atmfM4VpUpcNpcCurrGroup=atmfM4VpUpcNpcCurrGroup, atmfM4IfSignalLabelMismatchAlarm=atmfM4IfSignalLabelMismatchAlarm, atmfM4CellProtoHistTable=atmfM4CellProtoHistTable, atmfM4VpUpcNpcHistPassedClp0=atmfM4VpUpcNpcHistPassedClp0, atmfM4VcUpcNpcCurrPassedCells=atmfM4VcUpcNpcCurrPassedCells, atmfM4HwSwAlarmSeverityIndex=atmfM4HwSwAlarmSeverityIndex, atmfM4VcUpcNpcHistSuspect=atmfM4VcUpcNpcHistSuspect, atmfM4SnmpNEView=atmfM4SnmpNEView, atmfM4VcTestObject=atmfM4VcTestObject, atmfM4LoggedTrapRowStatus=atmfM4LoggedTrapRowStatus, atmfM4TcProtoCurrTable=atmfM4TcProtoCurrTable, atmfM4IfPreferredCarrier=atmfM4IfPreferredCarrier, atmfM4VpTestObject=atmfM4VpTestObject, atmfM4VpcTpDeleted=atmfM4VpcTpDeleted, atmfM4PlugInUnitEntry=atmfM4PlugInUnitEntry, atmfM4PlugInUnitGroup=atmfM4PlugInUnitGroup, atmfM4LoggedTrapGroup=atmfM4LoggedTrapGroup, atmfM4LoggedAlarmBackedUp=atmfM4LoggedAlarmBackedUp, atmfM4TrapAlarmSpecificProb=atmfM4TrapAlarmSpecificProb, atmfM4VcNextVciValue=atmfM4VcNextVciValue, atmfM4CellProtoErrorReason=atmfM4CellProtoErrorReason, atmfM4HwProcessorAlarm=atmfM4HwProcessorAlarm, atmfM4AtmCellIfCreated=atmfM4AtmCellIfCreated, atmfM4VclXConnChanged=atmfM4VclXConnChanged, atmfM4VcTestTable=atmfM4VcTestTable, atmfM4CellProtoErrorTable=atmfM4CellProtoErrorTable, atmfM4TcAdapterEntry=atmfM4TcAdapterEntry, atmfM4EquipVersion=atmfM4EquipVersion, atmfM4HwInstalledSwGroup=atmfM4HwInstalledSwGroup, atmfM4AlarmSevProfileTable=atmfM4AlarmSevProfileTable, atmfM4VpNextVpiEntry=atmfM4VpNextVpiEntry, atmfM4TcAlarmSeverityIndex=atmfM4TcAlarmSeverityIndex, atmfM4TcProtoCurrGroup=atmfM4TcProtoCurrGroup, atmfM4EquipHolderSlotStatus=atmfM4EquipHolderSlotStatus, atmfM4VpUpcNpcCurrSuspect=atmfM4VpUpcNpcCurrSuspect, atmfM4TrapAlarmRepairAct=atmfM4TrapAlarmRepairAct, atmfM4HwRunningSwIndex=atmfM4HwRunningSwIndex, atmfM4TrapAlarmSeverity=atmfM4TrapAlarmSeverity, atmfM4EquipUserLabel=atmfM4EquipUserLabel, atmfM4IfType=atmfM4IfType, atmfM4VcUpcNpcHistDiscardedClp0=atmfM4VcUpcNpcHistDiscardedClp0, atmfM4LoggedTrapID=atmfM4LoggedTrapID, atmfM4VclTable=atmfM4VclTable, atmfM4IfAisAlarm=atmfM4IfAisAlarm, atmfM4HwRunningSwTable=atmfM4HwRunningSwTable, atmfM4AtmLayerGroup=atmfM4AtmLayerGroup, atmfM4AlarmSevEntry=atmfM4AlarmSevEntry, atmfM4VcTestOwner=atmfM4VcTestOwner, atmfM4CellProtoHistProtoErrors=atmfM4CellProtoHistProtoErrors, atmfM4HwFanFailAlarm=atmfM4HwFanFailAlarm, atmfM4HwExtIfDevProbAlarm=atmfM4HwExtIfDevProbAlarm, atmfM4VpUpcNpcHistGroup=atmfM4VpUpcNpcHistGroup, atmfM4VpUpcNpcCurrTable=atmfM4VpUpcNpcCurrTable, atmfM4VpTestCode=atmfM4VpTestCode, atmfM4AtmCellIfDeleted=atmfM4AtmCellIfDeleted, atmfM4CellProtoHistSuspect=atmfM4CellProtoHistSuspect, atmfM4LoggedAlarmSpecificProb=atmfM4LoggedAlarmSpecificProb, atmfM4VccTpCreated=atmfM4VccTpCreated, atmfM4CellProtoHistElapsedTime=atmfM4CellProtoHistElapsedTime, atmfM4HwMemoryMismatchAlarm=atmfM4HwMemoryMismatchAlarm, atmfM4VpUpcNpcHistSuspect=atmfM4VpUpcNpcHistSuspect, atmfM4TcProtoCurrElapsedTime=atmfM4TcProtoCurrElapsedTime, atmfM4PhysPathTpTable=atmfM4PhysPathTpTable, atmfM4CellProtoCurrSuspect=atmfM4CellProtoCurrSuspect, atmfM4NeAlarmSeverityIndex=atmfM4NeAlarmSeverityIndex, atmfM4VcUpcNpcCurrDiscardedClp0=atmfM4VcUpcNpcCurrDiscardedClp0, atmForum=atmForum, atmfM4MIBTrapPrefix=atmfM4MIBTrapPrefix, atmfM4TrapForwardingDest=atmfM4TrapForwardingDest, atmfM4HwRunningSwHwIndex=atmfM4HwRunningSwHwIndex, atmfM4AlarmSevTable=atmfM4AlarmSevTable, atmfM4PlugInUnitOperStatus=atmfM4PlugInUnitOperStatus, atmfM4VpTestEntry=atmfM4VpTestEntry, atmfM4LoggedAlarmEntry=atmfM4LoggedAlarmEntry, atmfM4VplTpUp=atmfM4VplTpUp, atmfM4PlugInUnitAvailStatus=atmfM4PlugInUnitAvailStatus, atmfM4CellProtoHistIndex=atmfM4CellProtoHistIndex, atmfM4IfLosAlarm=atmfM4IfLosAlarm, atmfM4VclTpAisAlarm=atmfM4VclTpAisAlarm, atmfM4VpUpcNpcHistDiscardedCells=atmfM4VpUpcNpcHistDiscardedCells, atmfM4PlugInUnitAdminStatus=atmfM4PlugInUnitAdminStatus, atmfM4VpUpcNpcHistEntry=atmfM4VpUpcNpcHistEntry, atmfM4VpUpcNpcCurrSupprIntvls=atmfM4VpUpcNpcCurrSupprIntvls, atmfM4VpTestStatus=atmfM4VpTestStatus, atmfM4VccTpAisAlarm=atmfM4VccTpAisAlarm, atmfM4LoggedAlarmTable=atmfM4LoggedAlarmTable, atmfM4CellProtoHistInOAMCells=atmfM4CellProtoHistInOAMCells, atmfM4LoggedTrapObject=atmfM4LoggedTrapObject, atmfM4PhysPathTpPortID=atmfM4PhysPathTpPortID, atmfM4SwVersionMismatchAlarm=atmfM4SwVersionMismatchAlarm, atmfM4VcUpcNpcHistDiscardedCells=atmfM4VcUpcNpcHistDiscardedCells, atmfM4CellProtoHistSupprIntvls=atmfM4CellProtoHistSupprIntvls, atmfM4CellProtoErrorGroup=atmfM4CellProtoErrorGroup, atmfM4IfLopAlarm=atmfM4IfLopAlarm, atmfM4VcTestStatus=atmfM4VcTestStatus, atmfM4HwHighTempAlarm=atmfM4HwHighTempAlarm, atmfM4HwInstalledSwTable=atmfM4HwInstalledSwTable, atmfM4HwPIUnitMissingAlarm=atmfM4HwPIUnitMissingAlarm, atmfM4TcProtoHistElapsedTime=atmfM4TcProtoHistElapsedTime, atmfM4VclGroup=atmfM4VclGroup, atmfM4TestOAMLoopbackE2E=atmfM4TestOAMLoopbackE2E, atmfM4PlugInUnitAlarmSeverityIndex=atmfM4PlugInUnitAlarmSeverityIndex, atmfM4TcProtoCurrSuspect=atmfM4TcProtoCurrSuspect, atmfM4TrapLogRowStatus=atmfM4TrapLogRowStatus, atmfM4VpUpcNpcCurrPassedClp0=atmfM4VpUpcNpcCurrPassedClp0, atmfM4MIBObjects=atmfM4MIBObjects, atmfM4InstalledSwDeleted=atmfM4InstalledSwDeleted, atmfM4VpTestId=atmfM4VpTestId, atmfM4CellProtoCurrProtoErrors=atmfM4CellProtoCurrProtoErrors, atmfM4EquipHolderAcceptableTypes=atmfM4EquipHolderAcceptableTypes, atmfM4TcProtoHistDiscardHECViol=atmfM4TcProtoHistDiscardHECViol, atmfM4CellProtoHistEntry=atmfM4CellProtoHistEntry, atmfM4VplTpAisAlarm=atmfM4VplTpAisAlarm, atmfM4VclEntry=atmfM4VclEntry, atmfM4AlarmSeverity=atmfM4AlarmSeverity, atmfM4VplTpRdiAlarm=atmfM4VplTpRdiAlarm, atmfM4VcUpcNpcCurrTable=atmfM4VcUpcNpcCurrTable, atmfM4EquipAlarmSeverityIndex=atmfM4EquipAlarmSeverityIndex, atmfM4LoggedTrapEntry=atmfM4LoggedTrapEntry, atmfM4VcUpcNpcCurrGroup=atmfM4VcUpcNpcCurrGroup, atmfM4TcProtoCurrDiscardHECViol=atmfM4TcProtoCurrDiscardHECViol, atmfM4TrapAlarmBackedUp=atmfM4TrapAlarmBackedUp, atmfM4VpUpcNpcHistIndex=atmfM4VpUpcNpcHistIndex, atmfM4VpUpcNpcHistPassedCells=atmfM4VpUpcNpcHistPassedCells, atmfM4HwRunningSwSwIndex=atmfM4HwRunningSwSwIndex, atmfM4HwUnitDeleted=atmfM4HwUnitDeleted, atmfM4TrapAlarmBUObject=atmfM4TrapAlarmBUObject, atmfM4VplXConnDeleted=atmfM4VplXConnDeleted, atmfM4HwRunningSwEntry=atmfM4HwRunningSwEntry, atmfM4TrapForwardingEntry=atmfM4TrapForwardingEntry, atmfM4EquipHolderEntry=atmfM4EquipHolderEntry, atmfM4EquipEntry=atmfM4EquipEntry, atmfM4VcUpcNpcCurrElapsedTime=atmfM4VcUpcNpcCurrElapsedTime, atmfM4VcTestResult=atmfM4VcTestResult, atmfM4VplTable=atmfM4VplTable, atmfM4VcUpcNpcCurrPassedClp0=atmfM4VcUpcNpcCurrPassedClp0, atmfM4VpTestType=atmfM4VpTestType, atmfM4VcUpcNpcHistSupprIntvls=atmfM4VcUpcNpcHistSupprIntvls, atmfM4VcNextVciTable=atmfM4VcNextVciTable, atmfM4PlugInUnitVersion=atmfM4PlugInUnitVersion, atmfM4LoggedTrapTime=atmfM4LoggedTrapTime, atmfM4VplTpDown=atmfM4VplTpDown, atmfM4VpXConnTable=atmfM4VpXConnTable, atmfM4NeStartTime=atmfM4NeStartTime, atmfM4AlarmSevProfileRowStatus=atmfM4AlarmSevProfileRowStatus, atmfM4VcUpcNpcCurrEntry=atmfM4VcUpcNpcCurrEntry, atmfM4HwPIUnitMismatchAlarm=atmfM4HwPIUnitMismatchAlarm, atmfM4LoggedAlarmBUObject=atmfM4LoggedAlarmBUObject, atmfM4CellProtoErrorVpi=atmfM4CellProtoErrorVpi, atmfM4LowestForwardedSeverity=atmfM4LowestForwardedSeverity, atmfM4HwMultiplexerAlarm=atmfM4HwMultiplexerAlarm, atmfM4CellProtoErrorEntry=atmfM4CellProtoErrorEntry, atmfM4PlugInUnitTable=atmfM4PlugInUnitTable, atmfM4TrapLogSrc=atmfM4TrapLogSrc, atmfM4VplXConnChanged=atmfM4VplXConnChanged, atmfM4TrapLogGroup=atmfM4TrapLogGroup, atmfM4TrapForwardingTable=atmfM4TrapForwardingTable, atmfM4TcProtoHistEntry=atmfM4TcProtoHistEntry, atmfM4HwCorruptDataAlarm=atmfM4HwCorruptDataAlarm, atmfM4IfChanged=atmfM4IfChanged, atmfM4VpTestOwner=atmfM4VpTestOwner, atmfM4PhysPathTpHwUnitIndex=atmfM4PhysPathTpHwUnitIndex, atmfM4VplXConnCreated=atmfM4VplXConnCreated, atmfM4EquipOperStatus=atmfM4EquipOperStatus, atmfM4NeSuppressZeroStats=atmfM4NeSuppressZeroStats, atmfM4NotificationsGroup=atmfM4NotificationsGroup, atmfM4ForwardAllTraps=atmfM4ForwardAllTraps, atmfM4Groups=atmfM4Groups, atmfM4LoggedAlarmRepairAct=atmfM4LoggedAlarmRepairAct, atmfM4IfLofAlarm=atmfM4IfLofAlarm, atmfM4VclXConnDeleted=atmfM4VclXConnDeleted, atmfM4HwTimingProbAlarm=atmfM4HwTimingProbAlarm, atmfM4TcAdapterTable=atmfM4TcAdapterTable, atmfM4VpcTpCreated=atmfM4VpcTpCreated, atmfM4VcUpcNpcHistElapsedTime=atmfM4VcUpcNpcHistElapsedTime, atmfM4HwBackPlaneAlarm=atmfM4HwBackPlaneAlarm, atmfM4CellProtoCurrInOAMCells=atmfM4CellProtoCurrInOAMCells, atmfM4TcAdapterGroup=atmfM4TcAdapterGroup, atmfM4IfLoopbackLocationCode=atmfM4IfLoopbackLocationCode, atmfM4HwSwDownloadFailAlarm=atmfM4HwSwDownloadFailAlarm, atmfM4TrapLogAdminStatus=atmfM4TrapLogAdminStatus, AtmfM4AlarmLogSeverity=AtmfM4AlarmLogSeverity, AtmfM4AlarmSeverity=AtmfM4AlarmSeverity, atmfM4TestTypes=atmfM4TestTypes, atmfM4VpUpcNpcHistSupprIntvls=atmfM4VpUpcNpcHistSupprIntvls, atmfM4LoggedAlarmSeverity=atmfM4LoggedAlarmSeverity, atmfM4HwUnitChanged=atmfM4HwUnitChanged, atmfM4VplTpChanged=atmfM4VplTpChanged, atmfM4VcNextVciGroup=atmfM4VcNextVciGroup, atmfM4=atmfM4, atmfM4CellProtoErrorVci=atmfM4CellProtoErrorVci, atmfM4VcUpcNpcHistIndex=atmfM4VcUpcNpcHistIndex, atmfM4HwSwEnvironAlarm=atmfM4HwSwEnvironAlarm, atmfM4VcTestType=atmfM4VcTestType, atmfM4TestOAMLoopbackSeg=atmfM4TestOAMLoopbackSeg, atmfM4VpXConnEntry=atmfM4VpXConnEntry, atmfM4TrapLogType=atmfM4TrapLogType, atmfM4AlarmSevDefault=atmfM4AlarmSevDefault, atmfM4HwRunningSwGroup=atmfM4HwRunningSwGroup, atmfM4PhysPathTpEntry=atmfM4PhysPathTpEntry, atmfM4HwTrunkCardAlarm=atmfM4HwTrunkCardAlarm, atmfM4VclXConnCreated=atmfM4VclXConnCreated, atmfM4IfXmissionErrAlarm=atmfM4IfXmissionErrAlarm, atmfM4VpNextVpiGroup=atmfM4VpNextVpiGroup, atmfM4TcProtoHistTable=atmfM4TcProtoHistTable, atmfM4EquipHolderType=atmfM4EquipHolderType, atmfM4VcXConnEntry=atmfM4VcXConnEntry, atmfM4VplEntry=atmfM4VplEntry, atmfM4VpUpcNpcHistDiscardedClp0=atmfM4VpUpcNpcHistDiscardedClp0, atmfM4HwUnitUp=atmfM4HwUnitUp, atmfM4VcTestEntry=atmfM4VcTestEntry, atmfM4Compliance=atmfM4Compliance)
mibBuilder.exportSymbols("ATM-FORUM-SNMP-M4-MIB", atmfM4HwReceiverFailAlarm=atmfM4HwReceiverFailAlarm, atmfM4VclTpDown=atmfM4VclTpDown, atmfM4EquipAdminStatus=atmfM4EquipAdminStatus, atmfM4TrapForwardingGroup=atmfM4TrapForwardingGroup, atmfM4VplXConnUp=atmfM4VplXConnUp, atmfM4VcXConnGroup=atmfM4VcXConnGroup, atmfM4VclXConnUp=atmfM4VclXConnUp, atmfM4VclSegEndPt=atmfM4VclSegEndPt, atmfM4IfFarEndCarrierNetwork=atmfM4IfFarEndCarrierNetwork, atmfM4VclTpUp=atmfM4VclTpUp, atmfM4CellProtoHistGroup=atmfM4CellProtoHistGroup, atmfM4ForwardedIndeterminate=atmfM4ForwardedIndeterminate, atmfM4IfPayloadMismatchAlarm=atmfM4IfPayloadMismatchAlarm, atmfM4IfPathTraceMismatchAlarm=atmfM4IfPathTraceMismatchAlarm, atmfM4HwProtectionPathAlarm=atmfM4HwProtectionPathAlarm, atmfM4General=atmfM4General, atmfM4HwInstalledSwIndex=atmfM4HwInstalledSwIndex, atmfM4HwXmitterFailAlarm=atmfM4HwXmitterFailAlarm, atmfM4PhysPathTpGroup=atmfM4PhysPathTpGroup, atmfM4TcProtoCurrSupprIntvls=atmfM4TcProtoCurrSupprIntvls, atmfM4CellProtoCurrElapsedTime=atmfM4CellProtoCurrElapsedTime, atmForumNetworkManagement=atmForumNetworkManagement, atmfM4VccTpDeleted=atmfM4VccTpDeleted, atmfM4Compliances=atmfM4Compliances, atmfM4VcTestGroup=atmfM4VcTestGroup, atmfM4VclTpChanged=atmfM4VclTpChanged, atmfM4HwPowerAlarm=atmfM4HwPowerAlarm, atmfM4EquipVendor=atmfM4EquipVendor, atmfM4VcTestId=atmfM4VcTestId, atmfM4VplGroup=atmfM4VplGroup, atmfM4AtmLayerEntry=atmfM4AtmLayerEntry, atmfM4MIBConformance=atmfM4MIBConformance, atmfM4TrapForwardingPort=atmfM4TrapForwardingPort, atmfM4VpUpcNpcHistTable=atmfM4VpUpcNpcHistTable, atmfM4AlarmSevTrapId=atmfM4AlarmSevTrapId, atmfM4TrapForwardingRowStatus=atmfM4TrapForwardingRowStatus, atmfM4NeVersion=atmfM4NeVersion, atmfM4CellProtoErrorCode=atmfM4CellProtoErrorCode, atmfM4LoggedTrapTable=atmfM4LoggedTrapTable, atmfM4VpNextVpiTable=atmfM4VpNextVpiTable, atmfM4EquipHolderTable=atmfM4EquipHolderTable, atmfM4MIBTraps=atmfM4MIBTraps, PYSNMP_MODULE_ID=atmfM4MIB, atmfM4VcNextVciEntry=atmfM4VcNextVciEntry, atmfM4ForwardedTrapId=atmfM4ForwardedTrapId, atmfM4VpUpcNpcCurrEntry=atmfM4VpUpcNpcCurrEntry, atmfM4VcUpcNpcCurrSupprIntvls=atmfM4VcUpcNpcCurrSupprIntvls, atmfM4VcUpcNpcHistPassedClp0=atmfM4VcUpcNpcHistPassedClp0, atmfM4HwFuseFailAlarm=atmfM4HwFuseFailAlarm, atmfM4VcUpcNpcCurrDiscardedCells=atmfM4VcUpcNpcCurrDiscardedCells, atmfM4HwLineCardAlarm=atmfM4HwLineCardAlarm, atmfM4HwInstalledSwSwIndex=atmfM4HwInstalledSwSwIndex, atmfM4InstalledSwCreated=atmfM4InstalledSwCreated, atmfM4TcProtoHistSuspect=atmfM4TcProtoHistSuspect, atmfM4VccTpRdiAlarm=atmfM4VccTpRdiAlarm, atmfM4EquipHolderGroup=atmfM4EquipHolderGroup, atmfM4CellProtoCurrEntry=atmfM4CellProtoCurrEntry, atmfM4AlarmSevProfileEntry=atmfM4AlarmSevProfileEntry, atmfM4AlarmSevGroup=atmfM4AlarmSevGroup, atmfM4NeVendor=atmfM4NeVendor, atmfM4VcUpcNpcHistTable=atmfM4VcUpcNpcHistTable, atmfM4TrapForwardingIndex=atmfM4TrapForwardingIndex, atmfM4VpXConnRecover=atmfM4VpXConnRecover, atmfM4MIB=atmfM4MIB, atmfM4VpNextVpiValue=atmfM4VpNextVpiValue, atmfM4VpXConnGroup=atmfM4VpXConnGroup, atmfM4TrapLogFullAction=atmfM4TrapLogFullAction, atmfM4VpTestTable=atmfM4VpTestTable, atmfM4TcProtoHistIndex=atmfM4TcProtoHistIndex, atmfM4TcACellScrambling=atmfM4TcACellScrambling, atmfM4HwVersionMismatchAlarm=atmfM4HwVersionMismatchAlarm, atmfM4VplSegEndPt=atmfM4VplSegEndPt, atmfM4LoggedTrapIndex=atmfM4LoggedTrapIndex, atmfM4HwUnitDown=atmfM4HwUnitDown, atmfM4VcXConnRecover=atmfM4VcXConnRecover, atmfM4CellProtoCurrTable=atmfM4CellProtoCurrTable, atmfM4TrapLogEntry=atmfM4TrapLogEntry, atmfM4VcTestCode=atmfM4VcTestCode, atmfM4InstalledSwChanged=atmfM4InstalledSwChanged, atmfM4VcUpcNpcHistPassedCells=atmfM4VcUpcNpcHistPassedCells, atmfM4IfRdiAlarm=atmfM4IfRdiAlarm, atmfM4AlarmSevProfileIndexNext=atmfM4AlarmSevProfileIndexNext, atmfM4VcXConnTable=atmfM4VcXConnTable, atmfM4VcUpcNpcHistEntry=atmfM4VcUpcNpcHistEntry)
