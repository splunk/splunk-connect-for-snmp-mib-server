#
# PySNMP MIB module OMNI-gx2Lm1000s-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2Lm1000s-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:24:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
gx2Lm1000s, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Lm1000s")
motproxies, gi = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "motproxies", "gi")
trapNetworkElemModelNumber, trapPerceivedSeverity, trapText, trapNetworkElemSerialNum, trapChangedValueInteger, trapNetworkElemAlarmStatus, trapChangedValueDisplayString, trapNetworkElemOperState, trapNetworkElemAvailStatus, trapIdentifier, trapNETrapLastTrapTimeStamp, trapNetworkElemAdminState, trapChangedObjectId = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber", "trapPerceivedSeverity", "trapText", "trapNetworkElemSerialNum", "trapChangedValueInteger", "trapNetworkElemAlarmStatus", "trapChangedValueDisplayString", "trapNetworkElemOperState", "trapNetworkElemAvailStatus", "trapIdentifier", "trapNETrapLastTrapTimeStamp", "trapNetworkElemAdminState", "trapChangedObjectId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
Integer32, ModuleIdentity, Unsigned32, MibIdentifier, IpAddress, Bits, Counter32, Counter64, ObjectIdentity, iso, NotificationType, NotificationType, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "Unsigned32", "MibIdentifier", "IpAddress", "Bits", "Counter32", "Counter64", "ObjectIdentity", "iso", "NotificationType", "NotificationType", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class Float(Counter32):
    pass

gx2Lm1000sDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 1))
gx2Lm1000sAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2), )
if mibBuilder.loadTexts: gx2Lm1000sAnalogTable.setStatus('mandatory')
gx2Lm1000sAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1), ).setIndexNames((0, "OMNI-gx2Lm1000s-MIB", "gx2Lm1000sAnalogTableIndex"))
if mibBuilder.loadTexts: gx2Lm1000sAnalogEntry.setStatus('mandatory')
gx2Lm1000sDigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 3), )
if mibBuilder.loadTexts: gx2Lm1000sDigitalTable.setStatus('mandatory')
gx2Lm1000sDigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 3, 2), ).setIndexNames((0, "OMNI-gx2Lm1000s-MIB", "gx2Lm1000sDigitalTableIndex"))
if mibBuilder.loadTexts: gx2Lm1000sDigitalEntry.setStatus('mandatory')
gx2Lm1000sStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4), )
if mibBuilder.loadTexts: gx2Lm1000sStatusTable.setStatus('mandatory')
gx2Lm1000sStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3), ).setIndexNames((0, "OMNI-gx2Lm1000s-MIB", "gx2Lm1000sStatusTableIndex"))
if mibBuilder.loadTexts: gx2Lm1000sStatusEntry.setStatus('mandatory')
gx2Lm1000sFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 5), )
if mibBuilder.loadTexts: gx2Lm1000sFactoryTable.setStatus('mandatory')
gx2Lm1000sFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 5, 4), ).setIndexNames((0, "OMNI-gx2Lm1000s-MIB", "gx2Lm1000sFactoryTableIndex"))
if mibBuilder.loadTexts: gx2Lm1000sFactoryEntry.setStatus('mandatory')
gx2Lm1000sAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Lm1000sAnalogTableIndex.setStatus('mandatory')
lm1000slabelOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000slabelOffsetNomMonitor.setStatus('optional')
lm1000suomOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000suomOffsetNomMonitor.setStatus('optional')
lm1000smajorHighOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smajorHighOffsetNomMonitor.setStatus('obsolete')
lm1000smajorLowOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smajorLowOffsetNomMonitor.setStatus('obsolete')
lm1000sminorHighOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminorHighOffsetNomMonitor.setStatus('obsolete')
lm1000sminorLowOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminorLowOffsetNomMonitor.setStatus('obsolete')
lm1000scurrentValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000scurrentValueOffsetNomMonitor.setStatus('mandatory')
lm1000sstateFlagOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sstateFlagOffsetNomMonitor.setStatus('mandatory')
lm1000sminValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminValueOffsetNomMonitor.setStatus('mandatory')
lm1000smaxValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smaxValueOffsetNomMonitor.setStatus('mandatory')
lm1000salarmStateOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000salarmStateOffsetNomMonitor.setStatus('mandatory')
lm1000slabelLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000slabelLaserPower.setStatus('optional')
lm1000suomLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000suomLaserPower.setStatus('optional')
lm1000smajorHighLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smajorHighLaserPower.setStatus('mandatory')
lm1000smajorLowLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smajorLowLaserPower.setStatus('mandatory')
lm1000sminorHighLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminorHighLaserPower.setStatus('obsolete')
lm1000sminorLowLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminorLowLaserPower.setStatus('obsolete')
lm1000scurrentValueLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 19), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000scurrentValueLaserPower.setStatus('mandatory')
lm1000sstateFlagLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sstateFlagLaserPower.setStatus('mandatory')
lm1000sminValueLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminValueLaserPower.setStatus('mandatory')
lm1000smaxValueLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smaxValueLaserPower.setStatus('mandatory')
lm1000salarmStateLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000salarmStateLaserPower.setStatus('mandatory')
lm1000slabelLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000slabelLaserTemp.setStatus('optional')
lm1000suomLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000suomLaserTemp.setStatus('optional')
lm1000smajorHighLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smajorHighLaserTemp.setStatus('mandatory')
lm1000smajorLowLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smajorLowLaserTemp.setStatus('mandatory')
lm1000sminorHighLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminorHighLaserTemp.setStatus('obsolete')
lm1000sminorLowLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminorLowLaserTemp.setStatus('obsolete')
lm1000scurrentValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000scurrentValueLaserTemp.setStatus('mandatory')
lm1000sstateFlagLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sstateFlagLaserTemp.setStatus('mandatory')
lm1000sminValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminValueLaserTemp.setStatus('mandatory')
lm1000smaxValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smaxValueLaserTemp.setStatus('mandatory')
lm1000salarmStateLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000salarmStateLaserTemp.setStatus('mandatory')
lm1000slabelLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000slabelLaserCurrent.setStatus('optional')
lm1000suomLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000suomLaserCurrent.setStatus('optional')
lm1000smajorHighLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smajorHighLaserCurrent.setStatus('mandatory')
lm1000smajorLowLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smajorLowLaserCurrent.setStatus('mandatory')
lm1000sminorHighLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminorHighLaserCurrent.setStatus('obsolete')
lm1000sminorLowLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminorLowLaserCurrent.setStatus('obsolete')
lm1000scurrentValueLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000scurrentValueLaserCurrent.setStatus('mandatory')
lm1000sstateFlagLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sstateFlagLaserCurrent.setStatus('mandatory')
lm1000sminValueLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminValueLaserCurrent.setStatus('mandatory')
lm1000smaxValueLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smaxValueLaserCurrent.setStatus('mandatory')
lm1000salarmStateLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000salarmStateLaserCurrent.setStatus('mandatory')
lm1000slabelTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000slabelTecCurrent.setStatus('optional')
lm1000suomTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000suomTecCurrent.setStatus('optional')
lm1000smajorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smajorHighTecCurrent.setStatus('mandatory')
lm1000smajorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smajorLowTecCurrent.setStatus('mandatory')
lm1000sminorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminorHighTecCurrent.setStatus('obsolete')
lm1000sminorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminorLowTecCurrent.setStatus('obsolete')
lm1000scurrentValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000scurrentValueTecCurrent.setStatus('mandatory')
lm1000sstateFlagTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sstateFlagTecCurrent.setStatus('mandatory')
lm1000sminValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminValueTecCurrent.setStatus('mandatory')
lm1000smaxValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smaxValueTecCurrent.setStatus('mandatory')
lm1000salarmStateTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000salarmStateTecCurrent.setStatus('mandatory')
lm1000slabelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000slabelModTemp.setStatus('optional')
lm1000suomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000suomModTemp.setStatus('optional')
lm1000smajorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smajorHighModTemp.setStatus('mandatory')
lm1000smajorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smajorLowModTemp.setStatus('mandatory')
lm1000sminorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminorHighModTemp.setStatus('mandatory')
lm1000sminorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminorLowModTemp.setStatus('mandatory')
lm1000scurrentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000scurrentValueModTemp.setStatus('mandatory')
lm1000sstateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sstateFlagModTemp.setStatus('mandatory')
lm1000sminValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminValueModTemp.setStatus('mandatory')
lm1000smaxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smaxValueModTemp.setStatus('mandatory')
lm1000salarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000salarmStateModTemp.setStatus('mandatory')
lm1000slabelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000slabelFanCurrent.setStatus('optional')
lm1000suomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000suomFanCurrent.setStatus('optional')
lm1000smajorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smajorHighFanCurrent.setStatus('mandatory')
lm1000smajorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smajorLowFanCurrent.setStatus('mandatory')
lm1000sminorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminorHighFanCurrent.setStatus('obsolete')
lm1000sminorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminorLowFanCurrent.setStatus('obsolete')
lm1000scurrentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000scurrentValueFanCurrent.setStatus('mandatory')
lm1000sstateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sstateFlagFanCurrent.setStatus('mandatory')
lm1000sminValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sminValueFanCurrent.setStatus('mandatory')
lm1000smaxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000smaxValueFanCurrent.setStatus('mandatory')
lm1000salarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000salarmStateFanCurrent.setStatus('mandatory')
gx2Lm1000sDigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Lm1000sDigitalTableIndex.setStatus('mandatory')
lm1000slabelRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000slabelRfInput.setStatus('optional')
lm1000senumRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000senumRfInput.setStatus('optional')
lm1000svalueRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lm1000svalueRfInput.setStatus('mandatory')
lm1000sstateflagRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sstateflagRfInput.setStatus('mandatory')
lm1000slabelOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000slabelOptOutput.setStatus('optional')
lm1000senumOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000senumOptOutput.setStatus('optional')
lm1000svalueOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lm1000svalueOptOutput.setStatus('mandatory')
lm1000sstateflagOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sstateflagOptOutput.setStatus('mandatory')
lm1000slabelAttnSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000slabelAttnSetting.setStatus('optional')
lm1000senumAttnSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000senumAttnSetting.setStatus('optional')
lm1000svalueAttnSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("dB00-0", 1), ("db00-5", 2), ("db01-0", 3), ("db01-5", 4), ("db02-0", 5), ("db02-5", 6), ("db03-0", 7), ("db03-5", 8), ("db04-0", 9), ("db04-5", 10), ("db05-0", 11), ("db05-5", 12), ("db06-0", 13), ("db06-5", 14), ("db07-0", 15), ("db07-5", 16), ("db08-0", 17), ("db08-5", 18), ("db09-0", 19), ("db09-5", 20), ("db10-0", 21), ("db10-5", 22), ("db11-0", 23), ("db11-5", 24), ("db12-0", 25), ("db12-5", 26), ("db13-0", 27), ("db13-5", 28), ("db14-0", 29), ("db14-5", 30), ("db15-0", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lm1000svalueAttnSetting.setStatus('mandatory')
lm1000sstateflagAttnSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sstateflagAttnSetting.setStatus('mandatory')
lm1000slabelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000slabelFactoryDefault.setStatus('optional')
lm1000senumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000senumFactoryDefault.setStatus('optional')
lm1000svalueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lm1000svalueFactoryDefault.setStatus('mandatory')
lm1000sstateflagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sstateflagFactoryDefault.setStatus('mandatory')
gx2Lm1000sStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Lm1000sStatusTableIndex.setStatus('mandatory')
lm1000slabelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000slabelBoot.setStatus('optional')
lm1000svalueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000svalueBoot.setStatus('mandatory')
lm1000sstateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sstateflagBoot.setStatus('mandatory')
lm1000slabelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000slabelFlash.setStatus('optional')
lm1000svalueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000svalueFlash.setStatus('mandatory')
lm1000sstateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sstateflagFlash.setStatus('mandatory')
lm1000slabelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000slabelFactoryDataCRC.setStatus('optional')
lm1000svalueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000svalueFactoryDataCRC.setStatus('mandatory')
lm1000sstateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sstateflagFactoryDataCRC.setStatus('mandatory')
lm1000slabelLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000slabelLaserDataCRC.setStatus('optional')
lm1000svalueLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000svalueLaserDataCRC.setStatus('mandatory')
lm1000sstateflagLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sstateflagLaserDataCRC.setStatus('mandatory')
lm1000slabelAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000slabelAlarmDataCrc.setStatus('optional')
lm1000svalueAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000svalueAlarmDataCrc.setStatus('mandatory')
lm1000sstateflagAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sstateflagAlarmDataCrc.setStatus('mandatory')
lm1000slabelRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000slabelRFInputStatus.setStatus('optional')
lm1000svalueRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000svalueRFInputStatus.setStatus('mandatory')
lm1000sstateflagRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sstateflagRFInputStatus.setStatus('mandatory')
gx2Lm1000sFactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Lm1000sFactoryTableIndex.setStatus('mandatory')
lm1000sbootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sbootControlByte.setStatus('mandatory')
lm1000sbootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sbootStatusByte.setStatus('mandatory')
lm1000sbank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sbank1CRC.setStatus('mandatory')
lm1000sbank2CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sbank2CRC.setStatus('mandatory')
lm1000sprgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sprgEEPROMByte.setStatus('mandatory')
lm1000sfactoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sfactoryCRC.setStatus('mandatory')
lm1000scalculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("na", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000scalculateCRC.setStatus('obsolete')
lm1000shourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000shourMeter.setStatus('mandatory')
lm1000sflashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sflashPrgCntA.setStatus('mandatory')
lm1000sflashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sflashPrgCntB.setStatus('mandatory')
lm1000sflashBankARev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sflashBankARev.setStatus('mandatory')
lm1000sflashBankBRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm1000sflashBankBRev.setStatus('mandatory')
trapLM1000SConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM1000SConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM1000SfanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM1000SModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM1000SomiOffsetAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM1000StecCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM1000SLaserCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM1000SLaserTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM1000SLaserPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM1000SFlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM1000SBankBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM1000SAlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM1000SFactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM1000SCalDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM1000SResetFacDefault = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM1000SUserRFOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM1000SUserOpticalOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM1000SUserSBSOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM1000SRFInputAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,19)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLM1000SRFOverloadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 31) + (0,20)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2Lm1000s-MIB", trapLM1000SUserRFOffAlarm=trapLM1000SUserRFOffAlarm, gx2Lm1000sAnalogEntry=gx2Lm1000sAnalogEntry, lm1000sminorHighLaserPower=lm1000sminorHighLaserPower, lm1000svalueFactoryDefault=lm1000svalueFactoryDefault, lm1000smajorLowLaserTemp=lm1000smajorLowLaserTemp, lm1000sminorLowOffsetNomMonitor=lm1000sminorLowOffsetNomMonitor, lm1000sminValueModTemp=lm1000sminValueModTemp, lm1000slabelRFInputStatus=lm1000slabelRFInputStatus, lm1000sminValueLaserCurrent=lm1000sminValueLaserCurrent, lm1000svalueOptOutput=lm1000svalueOptOutput, lm1000shourMeter=lm1000shourMeter, trapLM1000SLaserTempAlarm=trapLM1000SLaserTempAlarm, trapLM1000SFactoryDataCRCAlarm=trapLM1000SFactoryDataCRCAlarm, lm1000sminValueTecCurrent=lm1000sminValueTecCurrent, lm1000slabelFlash=lm1000slabelFlash, trapLM1000SModuleTempAlarm=trapLM1000SModuleTempAlarm, lm1000salarmStateFanCurrent=lm1000salarmStateFanCurrent, lm1000svalueAttnSetting=lm1000svalueAttnSetting, lm1000sstateFlagTecCurrent=lm1000sstateFlagTecCurrent, trapLM1000SRFOverloadAlarm=trapLM1000SRFOverloadAlarm, lm1000smajorHighFanCurrent=lm1000smajorHighFanCurrent, lm1000sminorLowLaserCurrent=lm1000sminorLowLaserCurrent, lm1000salarmStateOffsetNomMonitor=lm1000salarmStateOffsetNomMonitor, lm1000sfactoryCRC=lm1000sfactoryCRC, lm1000salarmStateTecCurrent=lm1000salarmStateTecCurrent, lm1000sminorHighLaserCurrent=lm1000sminorHighLaserCurrent, lm1000sbootStatusByte=lm1000sbootStatusByte, lm1000sminorLowFanCurrent=lm1000sminorLowFanCurrent, gx2Lm1000sStatusTable=gx2Lm1000sStatusTable, lm1000slabelLaserTemp=lm1000slabelLaserTemp, gx2Lm1000sDigitalTableIndex=gx2Lm1000sDigitalTableIndex, lm1000slabelFactoryDefault=lm1000slabelFactoryDefault, lm1000smaxValueModTemp=lm1000smaxValueModTemp, lm1000scurrentValueLaserCurrent=lm1000scurrentValueLaserCurrent, lm1000sminorHighTecCurrent=lm1000sminorHighTecCurrent, lm1000svalueBoot=lm1000svalueBoot, lm1000slabelBoot=lm1000slabelBoot, lm1000sstateflagFactoryDataCRC=lm1000sstateflagFactoryDataCRC, lm1000smaxValueLaserPower=lm1000smaxValueLaserPower, gx2Lm1000sStatusTableIndex=gx2Lm1000sStatusTableIndex, lm1000sminorHighOffsetNomMonitor=lm1000sminorHighOffsetNomMonitor, trapLM1000SConfigChangeInteger=trapLM1000SConfigChangeInteger, lm1000smajorHighTecCurrent=lm1000smajorHighTecCurrent, lm1000smajorHighModTemp=lm1000smajorHighModTemp, lm1000senumFactoryDefault=lm1000senumFactoryDefault, lm1000senumRfInput=lm1000senumRfInput, lm1000sstateflagRfInput=lm1000sstateflagRfInput, lm1000smaxValueFanCurrent=lm1000smaxValueFanCurrent, lm1000suomLaserCurrent=lm1000suomLaserCurrent, lm1000salarmStateLaserTemp=lm1000salarmStateLaserTemp, lm1000sstateFlagLaserTemp=lm1000sstateFlagLaserTemp, lm1000slabelAttnSetting=lm1000slabelAttnSetting, lm1000scurrentValueOffsetNomMonitor=lm1000scurrentValueOffsetNomMonitor, trapLM1000SAlarmDataCRCAlarm=trapLM1000SAlarmDataCRCAlarm, lm1000smaxValueLaserCurrent=lm1000smaxValueLaserCurrent, lm1000slabelAlarmDataCrc=lm1000slabelAlarmDataCrc, lm1000slabelRfInput=lm1000slabelRfInput, gx2Lm1000sStatusEntry=gx2Lm1000sStatusEntry, trapLM1000SLaserPowerAlarm=trapLM1000SLaserPowerAlarm, lm1000smajorLowTecCurrent=lm1000smajorLowTecCurrent, trapLM1000SBankBootAlarm=trapLM1000SBankBootAlarm, lm1000suomTecCurrent=lm1000suomTecCurrent, lm1000slabelOptOutput=lm1000slabelOptOutput, gx2Lm1000sDigitalTable=gx2Lm1000sDigitalTable, gx2Lm1000sDescriptor=gx2Lm1000sDescriptor, lm1000sstateFlagModTemp=lm1000sstateFlagModTemp, lm1000smaxValueTecCurrent=lm1000smaxValueTecCurrent, lm1000sminorLowLaserPower=lm1000sminorLowLaserPower, lm1000sstateFlagLaserPower=lm1000sstateFlagLaserPower, lm1000sminValueOffsetNomMonitor=lm1000sminValueOffsetNomMonitor, lm1000suomLaserPower=lm1000suomLaserPower, lm1000suomOffsetNomMonitor=lm1000suomOffsetNomMonitor, lm1000suomFanCurrent=lm1000suomFanCurrent, lm1000sstateflagLaserDataCRC=lm1000sstateflagLaserDataCRC, lm1000sstateflagAlarmDataCrc=lm1000sstateflagAlarmDataCrc, lm1000slabelFanCurrent=lm1000slabelFanCurrent, lm1000sstateflagFlash=lm1000sstateflagFlash, trapLM1000SfanCurrentAlarm=trapLM1000SfanCurrentAlarm, trapLM1000SUserOpticalOffAlarm=trapLM1000SUserOpticalOffAlarm, trapLM1000SLaserCurrentAlarm=trapLM1000SLaserCurrentAlarm, lm1000sflashBankARev=lm1000sflashBankARev, lm1000svalueAlarmDataCrc=lm1000svalueAlarmDataCrc, gx2Lm1000sAnalogTable=gx2Lm1000sAnalogTable, trapLM1000SFlashAlarm=trapLM1000SFlashAlarm, lm1000scurrentValueLaserTemp=lm1000scurrentValueLaserTemp, lm1000sstateFlagLaserCurrent=lm1000sstateFlagLaserCurrent, lm1000smajorHighLaserPower=lm1000smajorHighLaserPower, lm1000smaxValueLaserTemp=lm1000smaxValueLaserTemp, lm1000sminValueLaserTemp=lm1000sminValueLaserTemp, lm1000sminorHighFanCurrent=lm1000sminorHighFanCurrent, gx2Lm1000sFactoryEntry=gx2Lm1000sFactoryEntry, lm1000sprgEEPROMByte=lm1000sprgEEPROMByte, lm1000sbank1CRC=lm1000sbank1CRC, lm1000slabelLaserCurrent=lm1000slabelLaserCurrent, Float=Float, lm1000scalculateCRC=lm1000scalculateCRC, lm1000sminValueFanCurrent=lm1000sminValueFanCurrent, lm1000svalueFactoryDataCRC=lm1000svalueFactoryDataCRC, trapLM1000SUserSBSOffAlarm=trapLM1000SUserSBSOffAlarm, lm1000slabelLaserDataCRC=lm1000slabelLaserDataCRC, lm1000salarmStateLaserPower=lm1000salarmStateLaserPower, lm1000sstateflagRFInputStatus=lm1000sstateflagRFInputStatus, lm1000smajorLowOffsetNomMonitor=lm1000smajorLowOffsetNomMonitor, gx2Lm1000sAnalogTableIndex=gx2Lm1000sAnalogTableIndex, lm1000svalueRfInput=lm1000svalueRfInput, lm1000sflashPrgCntB=lm1000sflashPrgCntB, trapLM1000StecCurrentAlarm=trapLM1000StecCurrentAlarm, lm1000slabelFactoryDataCRC=lm1000slabelFactoryDataCRC, lm1000smaxValueOffsetNomMonitor=lm1000smaxValueOffsetNomMonitor, lm1000sminorLowLaserTemp=lm1000sminorLowLaserTemp, lm1000smajorHighLaserCurrent=lm1000smajorHighLaserCurrent, lm1000salarmStateModTemp=lm1000salarmStateModTemp, lm1000svalueFlash=lm1000svalueFlash, lm1000svalueLaserDataCRC=lm1000svalueLaserDataCRC, lm1000smajorLowModTemp=lm1000smajorLowModTemp, lm1000scurrentValueModTemp=lm1000scurrentValueModTemp, lm1000scurrentValueTecCurrent=lm1000scurrentValueTecCurrent, lm1000slabelOffsetNomMonitor=lm1000slabelOffsetNomMonitor, lm1000sstateflagBoot=lm1000sstateflagBoot, lm1000suomModTemp=lm1000suomModTemp, lm1000sstateFlagFanCurrent=lm1000sstateFlagFanCurrent, lm1000sminorHighModTemp=lm1000sminorHighModTemp, lm1000senumAttnSetting=lm1000senumAttnSetting, lm1000smajorHighOffsetNomMonitor=lm1000smajorHighOffsetNomMonitor, lm1000slabelModTemp=lm1000slabelModTemp, gx2Lm1000sFactoryTableIndex=gx2Lm1000sFactoryTableIndex, lm1000slabelLaserPower=lm1000slabelLaserPower, lm1000sminorLowTecCurrent=lm1000sminorLowTecCurrent, trapLM1000SRFInputAlarm=trapLM1000SRFInputAlarm, lm1000sflashPrgCntA=lm1000sflashPrgCntA, gx2Lm1000sFactoryTable=gx2Lm1000sFactoryTable, lm1000sstateflagOptOutput=lm1000sstateflagOptOutput, lm1000sstateFlagOffsetNomMonitor=lm1000sstateFlagOffsetNomMonitor, gx2Lm1000sDigitalEntry=gx2Lm1000sDigitalEntry, lm1000sbootControlByte=lm1000sbootControlByte, lm1000sbank2CRC=lm1000sbank2CRC, lm1000suomLaserTemp=lm1000suomLaserTemp, trapLM1000SCalDataCRCAlarm=trapLM1000SCalDataCRCAlarm, lm1000smajorHighLaserTemp=lm1000smajorHighLaserTemp, trapLM1000SConfigChangeDisplayString=trapLM1000SConfigChangeDisplayString, lm1000salarmStateLaserCurrent=lm1000salarmStateLaserCurrent, lm1000sflashBankBRev=lm1000sflashBankBRev, lm1000sminValueLaserPower=lm1000sminValueLaserPower, lm1000sstateflagFactoryDefault=lm1000sstateflagFactoryDefault, lm1000smajorLowLaserPower=lm1000smajorLowLaserPower, lm1000scurrentValueFanCurrent=lm1000scurrentValueFanCurrent, lm1000smajorLowFanCurrent=lm1000smajorLowFanCurrent, lm1000sminorLowModTemp=lm1000sminorLowModTemp, lm1000smajorLowLaserCurrent=lm1000smajorLowLaserCurrent, trapLM1000SomiOffsetAlarm=trapLM1000SomiOffsetAlarm, trapLM1000SResetFacDefault=trapLM1000SResetFacDefault, lm1000svalueRFInputStatus=lm1000svalueRFInputStatus, lm1000senumOptOutput=lm1000senumOptOutput, lm1000slabelTecCurrent=lm1000slabelTecCurrent, lm1000scurrentValueLaserPower=lm1000scurrentValueLaserPower, lm1000sstateflagAttnSetting=lm1000sstateflagAttnSetting, lm1000sminorHighLaserTemp=lm1000sminorHighLaserTemp)
