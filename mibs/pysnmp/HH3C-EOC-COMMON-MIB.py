#
# PySNMP MIB module HH3C-EOC-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-EOC-COMMON-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:13:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
hh3cHPEOCDownLoadCNUFWResult, = mibBuilder.importSymbols("HH3C-HPEOC-MIB", "hh3cHPEOCDownLoadCNUFWResult")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ifIndex, ifDescr = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifDescr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, iso, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, Counter64, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "Counter64", "Gauge32", "TimeTicks")
MacAddress, DisplayString, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")
hh3cEOCCommon = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 83))
if mibBuilder.loadTexts: hh3cEOCCommon.setLastUpdated('200709111008Z')
if mibBuilder.loadTexts: hh3cEOCCommon.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cEOCCommonSysMan = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 83, 1))
hh3cEOCCommonSysScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 83, 1, 1))
hh3cEOCCommonSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 83, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCCommonSysVersion.setStatus('current')
hh3cEOCCommonUpLinkMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 83, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCCommonUpLinkMacAddress.setStatus('current')
hh3cEOCCommonCltMan = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 83, 2))
hh3cEOCCommonCltManTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 83, 2, 1), )
if mibBuilder.loadTexts: hh3cEOCCommonCltManTable.setStatus('current')
hh3cEOCCommonCltManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 83, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cEOCCommonCltManEntry.setStatus('current')
hh3cEOCCommonCltAutoAuthorize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 2, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCCommonCltAutoAuthorize.setStatus('current')
hh3cEOCCommonCltMaxAllowToAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 2, 1, 1, 2), Integer32().clone(253)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCCommonCltMaxAllowToAccess.setStatus('current')
hh3cEOCComCnuMan = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3))
hh3cEOCComCnuScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 1))
hh3cEOCComCnuMaxDownBWMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComCnuMaxDownBWMinVal.setStatus('current')
hh3cEOCComCnuMaxDownBWMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComCnuMaxDownBWMaxVal.setStatus('current')
hh3cEOCComCnuSlaHighPriBWMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComCnuSlaHighPriBWMinVal.setStatus('current')
hh3cEOCComCnuSlaHighPriBWMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComCnuSlaHighPriBWMaxVal.setStatus('current')
hh3cEOCComCnuMaxUpBWMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComCnuMaxUpBWMinVal.setStatus('current')
hh3cEOCComCnuMaxUpBWMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComCnuMaxUpBWMaxVal.setStatus('current')
hh3cEOCComCnuAttenThrA = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComCnuAttenThrA.setStatus('current')
hh3cEOCComCnuAttenThrB = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComCnuAttenThrB.setStatus('current')
hh3cEOCComCnuRateDropThr = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComCnuRateDropThr.setStatus('current')
hh3cEOCComCnuSysManTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 2), )
if mibBuilder.loadTexts: hh3cEOCComCnuSysManTable.setStatus('current')
hh3cEOCComCnuSysManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cEOCComCnuSysManEntry.setStatus('current')
hh3cEOCComCnuCableIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComCnuCableIfindex.setStatus('current')
hh3cEOCComCnuDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComCnuDeviceType.setStatus('current')
hh3cEOCComCnuDeviceAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComCnuDeviceAlias.setStatus('current')
hh3cEOCComCnuDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComCnuDescr.setStatus('current')
hh3cEOCComCnuUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComCnuUpTime.setStatus('current')
hh3cEOCComCnuVLANType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vLANTrunk", 1), ("access", 2), ("hybrid", 3), ("fabric", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComCnuVLANType.setStatus('current')
hh3cEOCComCnuPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComCnuPvid.setStatus('current')
hh3cEOCComCnuVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComCnuVlanTag.setStatus('current')
hh3cEOCComCnuReset = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComCnuReset.setStatus('current')
hh3cEOCComCnuDeregister = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("deregister", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComCnuDeregister.setStatus('current')
hh3cEOCComCnuSave = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("save", 1), ("running", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComCnuSave.setStatus('current')
hh3cEOCComCnuAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("access", 1), ("notaccess", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComCnuAccess.setStatus('current')
hh3cEOCComCnuMacTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 3), )
if mibBuilder.loadTexts: hh3cEOCComCnuMacTable.setStatus('current')
hh3cEOCComCnuMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cEOCComCnuMacEntry.setStatus('current')
hh3cEOCComCnuMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 3, 1, 1), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEOCComCnuMacAddress.setStatus('current')
hh3cEOCComCnuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEOCComCnuRowStatus.setStatus('current')
hh3cEOCComCnuInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 4), )
if mibBuilder.loadTexts: hh3cEOCComCnuInfoTable.setStatus('current')
hh3cEOCComCnuInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cEOCComCnuInfoEntry.setStatus('current')
hh3cEOCComCnuHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComCnuHardwareVersion.setStatus('current')
hh3cEOCComCnuPCBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComCnuPCBVersion.setStatus('current')
hh3cEOCComCnuLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("physicaldown", 1), ("linkdown", 2), ("linkup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComCnuLinkState.setStatus('current')
hh3cEOCComCnuAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComCnuAttenuation.setStatus('current')
hh3cEOCComCnuSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComCnuSoftwareVersion.setStatus('current')
hh3cEOCComCnuTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComCnuTxRate.setStatus('current')
hh3cEOCComCnuRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComCnuRxRate.setStatus('current')
hh3cEOCComCnuTxRateDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComCnuTxRateDrop.setStatus('current')
hh3cEOCComCnuRxRateDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComCnuRxRateDrop.setStatus('current')
hh3cEOCComCnuBandWidthTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 5), )
if mibBuilder.loadTexts: hh3cEOCComCnuBandWidthTable.setStatus('current')
hh3cEOCComCnuBandWidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cEOCComCnuBandWidthEntry.setStatus('current')
hh3cEOCComCnuMaxDownBW = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComCnuMaxDownBW.setStatus('current')
hh3cEOCComCnuSlaHighPriBW = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComCnuSlaHighPriBW.setStatus('current')
hh3cEOCComCnuMaxUpBW = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 3, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComCnuMaxUpBW.setStatus('current')
hh3cEOCComUniMan = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4))
hh3cEOCComUniManTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1), )
if mibBuilder.loadTexts: hh3cEOCComUniManTable.setStatus('current')
hh3cEOCComUniManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EOC-COMMON-MIB", "hh3cEOCUniIndex"))
if mibBuilder.loadTexts: hh3cEOCComUniManEntry.setStatus('current')
hh3cEOCUniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cEOCUniIndex.setStatus('current')
hh3cEOCComUniDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComUniDescr.setStatus('current')
hh3cEOCComUniStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComUniStatus.setStatus('current')
hh3cEOCComUniSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 100))).clone(namedValues=NamedValues(("auto", 1), ("s10M", 10), ("s100M", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComUniSpeed.setStatus('current')
hh3cEOCComUniDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComUniDuplex.setStatus('current')
hh3cEOCComUniCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComUniCurrentSpeed.setStatus('current')
hh3cEOCComUniCurrentDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComUniCurrentDuplex.setStatus('current')
hh3cEOCComUniMdi = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mdi-ii", 1), ("mdi-x", 2), ("mdi-auto", 3))).clone('mdi-auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComUniMdi.setStatus('current')
hh3cEOCComUniFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComUniFlowControl.setStatus('current')
hh3cEOCComUniCountReset = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComUniCountReset.setStatus('current')
hh3cEOCComUniAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComUniAlias.setStatus('current')
hh3cEOCComUniType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1, 12), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComUniType.setStatus('current')
hh3cEOCComUniVLANType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vLANTrunk", 1), ("access", 2), ("hybrid", 3), ("fabric", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComUniVLANType.setStatus('current')
hh3cEOCComUniPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComUniPvid.setStatus('current')
hh3cEOCComUniVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComUniVlanTag.setStatus('current')
hh3cEOCComUniPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComUniPriority.setStatus('current')
hh3cEOCComUniUpLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComUniUpLineRate.setStatus('current')
hh3cEOCComUniDownLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComUniDownLineRate.setStatus('current')
hh3cEOCComUniAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEOCComUniAdminStatus.setStatus('current')
hh3cEOCComUniCountTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2), )
if mibBuilder.loadTexts: hh3cEOCComUniCountTable.setStatus('current')
hh3cEOCComUniCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EOC-COMMON-MIB", "hh3cEOCUniIndex"))
if mibBuilder.loadTexts: hh3cEOCComUniCountEntry.setStatus('current')
hh3cEOCUniInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniInPkts.setStatus('current')
hh3cEOCUniInUPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniInUPkts.setStatus('current')
hh3cEOCUniInBPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniInBPkts.setStatus('current')
hh3cEOCUniInMPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniInMPkts.setStatus('current')
hh3cEOCUniInPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniInPausePkts.setStatus('current')
hh3cEOCUniInTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniInTotalErrors.setStatus('current')
hh3cEOCUniInCRCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniInCRCErrs.setStatus('current')
hh3cEOCUniInUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniInUndersizePkts.setStatus('current')
hh3cEOCUniInOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniInOversizePkts.setStatus('current')
hh3cEOCUniInErrorbyOther = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniInErrorbyOther.setStatus('current')
hh3cEOCUniInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniInOctets.setStatus('current')
hh3cEOCUniOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniOutPkts.setStatus('current')
hh3cEOCUniOutUPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniOutUPkts.setStatus('current')
hh3cEOCUniOutBPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniOutBPkts.setStatus('current')
hh3cEOCUniOutMPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniOutMPkts.setStatus('current')
hh3cEOCUniOutPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniOutPausePkts.setStatus('current')
hh3cEOCUniOutTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniOutTotalErrors.setStatus('current')
hh3cEOCUniOutCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniOutCollisions.setStatus('current')
hh3cEOCUniOutDelayExceedDsds = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniOutDelayExceedDsds.setStatus('current')
hh3cEOCUniOutErrorbyOther = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniOutErrorbyOther.setStatus('current')
hh3cEOCUniOutDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniOutDroppedFrames.setStatus('current')
hh3cEOCUniOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 4, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCUniOutOctets.setStatus('current')
hh3cEOCCommonTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5))
hh3cEOCTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0))
hh3cEOCCnuRegExcessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEOCCnuRegExcessTrap.setStatus('current')
hh3cEOCCnuRegExcessRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEOCCnuRegExcessRecoverTrap.setStatus('current')
hh3cEOCCnuRegSuccTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEOCCnuRegSuccTrap.setStatus('current')
hh3cEOCCnuOffLineTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEOCCnuOffLineTrap.setStatus('current')
hh3cEOCCnuLinkupTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 5)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEOCCnuLinkupTrap.setStatus('current')
hh3cEOCOamDisconnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 6)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEOCOamDisconnectTrap.setStatus('current')
hh3cEOCOamDisconnectRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 7)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEOCOamDisconnectRecoverTrap.setStatus('current')
hh3cEOCBandwidthNotEnoughTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 8)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEOCBandwidthNotEnoughTrap.setStatus('current')
hh3cEOCCnuAttenuationTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 9)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EOC-COMMON-MIB", "hh3cEOCComCnuMacAddress"), ("HH3C-EOC-COMMON-MIB", "hh3cEOCComCnuAttenuation"))
if mibBuilder.loadTexts: hh3cEOCCnuAttenuationTrap.setStatus('current')
hh3cEOCCnuRegFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 10)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEOCCnuRegFailTrap.setStatus('current')
hh3cEOCCLTCablePortErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 11)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEOCCLTCablePortErrorTrap.setStatus('current')
hh3cEOCCLTCablePortErrReTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 12)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEOCCLTCablePortErrReTrap.setStatus('current')
hh3cEOCCnuTxRateDropTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 13)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EOC-COMMON-MIB", "hh3cEOCComCnuMacAddress"), ("HH3C-EOC-COMMON-MIB", "hh3cEOCComCnuTxRateDrop"))
if mibBuilder.loadTexts: hh3cEOCCnuTxRateDropTrap.setStatus('current')
hh3cEOCCnuTxRateDropRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 14)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EOC-COMMON-MIB", "hh3cEOCComCnuMacAddress"), ("HH3C-EOC-COMMON-MIB", "hh3cEOCComCnuTxRateDrop"))
if mibBuilder.loadTexts: hh3cEOCCnuTxRateDropRecoverTrap.setStatus('current')
hh3cEOCCnuRxRateDropTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 15)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EOC-COMMON-MIB", "hh3cEOCComCnuMacAddress"), ("HH3C-EOC-COMMON-MIB", "hh3cEOCComCnuRxRateDrop"))
if mibBuilder.loadTexts: hh3cEOCCnuRxRateDropTrap.setStatus('current')
hh3cEOCCnuRxRateDropRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 16)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EOC-COMMON-MIB", "hh3cEOCComCnuMacAddress"), ("HH3C-EOC-COMMON-MIB", "hh3cEOCComCnuRxRateDrop"))
if mibBuilder.loadTexts: hh3cEOCCnuRxRateDropRecoverTrap.setStatus('current')
hh3cEOCCnuFWDownLoadErrTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 17)).setObjects(("HH3C-HPEOC-MIB", "hh3cHPEOCDownLoadCNUFWResult"))
if mibBuilder.loadTexts: hh3cEOCCnuFWDownLoadErrTrap.setStatus('current')
hh3cEOCCnuFWDownLoadErrReTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 18))
if mibBuilder.loadTexts: hh3cEOCCnuFWDownLoadErrReTrap.setStatus('current')
hh3cEOCCnuDeviceTypeErrTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 19)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EOC-COMMON-MIB", "hh3cEOCComCnuMacAddress"), ("HH3C-EOC-COMMON-MIB", "hh3cEOCComCnuDeviceType"))
if mibBuilder.loadTexts: hh3cEOCCnuDeviceTypeErrTrap.setStatus('current')
hh3cEOCCnuDeviceTypeErrReTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 20)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EOC-COMMON-MIB", "hh3cEOCComCnuMacAddress"))
if mibBuilder.loadTexts: hh3cEOCCnuDeviceTypeErrReTrap.setStatus('current')
hh3cEOCCnuAutoUpdateErrTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 21)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EOC-COMMON-MIB", "hh3cEOCComCnuMacAddress"))
if mibBuilder.loadTexts: hh3cEOCCnuAutoUpdateErrTrap.setStatus('current')
hh3cEOCCnuAutoUpdateSuccTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 83, 5, 0, 22)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EOC-COMMON-MIB", "hh3cEOCComCnuMacAddress"))
if mibBuilder.loadTexts: hh3cEOCCnuAutoUpdateSuccTrap.setStatus('current')
hh3cEOCComOnLineCnuMan = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 83, 6))
hh3cEOCComCnuTypeTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 83, 6, 1), )
if mibBuilder.loadTexts: hh3cEOCComCnuTypeTable.setStatus('current')
hh3cEOCComCnuTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 83, 6, 1, 1), ).setIndexNames((0, "HH3C-EOC-COMMON-MIB", "hh3cEOCComCnuTypeIdx"))
if mibBuilder.loadTexts: hh3cEOCComCnuTypeEntry.setStatus('current')
hh3cEOCComCnuTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 6, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cEOCComCnuTypeIdx.setStatus('current')
hh3cEOCComCnuDescripton = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComCnuDescripton.setStatus('current')
hh3cEOCComCnuNumTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 83, 6, 2), )
if mibBuilder.loadTexts: hh3cEOCComCnuNumTable.setStatus('current')
hh3cEOCComCnuNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 83, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EOC-COMMON-MIB", "hh3cEOCComCnuTypeIdx"))
if mibBuilder.loadTexts: hh3cEOCComCnuNumEntry.setStatus('current')
hh3cEOCComCnuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 83, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEOCComCnuNumber.setStatus('current')
mibBuilder.exportSymbols("HH3C-EOC-COMMON-MIB", hh3cEOCCnuDeviceTypeErrReTrap=hh3cEOCCnuDeviceTypeErrReTrap, hh3cEOCCommon=hh3cEOCCommon, hh3cEOCComCnuSave=hh3cEOCComCnuSave, hh3cEOCComCnuInfoTable=hh3cEOCComCnuInfoTable, hh3cEOCComCnuRxRateDrop=hh3cEOCComCnuRxRateDrop, hh3cEOCComCnuSysManEntry=hh3cEOCComCnuSysManEntry, hh3cEOCCommonTrap=hh3cEOCCommonTrap, hh3cEOCCnuRegSuccTrap=hh3cEOCCnuRegSuccTrap, hh3cEOCComUniMan=hh3cEOCComUniMan, hh3cEOCCnuAttenuationTrap=hh3cEOCCnuAttenuationTrap, hh3cEOCCLTCablePortErrorTrap=hh3cEOCCLTCablePortErrorTrap, hh3cEOCCnuRegFailTrap=hh3cEOCCnuRegFailTrap, hh3cEOCComCnuAccess=hh3cEOCComCnuAccess, hh3cEOCComCnuMaxUpBWMinVal=hh3cEOCComCnuMaxUpBWMinVal, hh3cEOCCommonSysMan=hh3cEOCCommonSysMan, hh3cEOCTrapPrefix=hh3cEOCTrapPrefix, hh3cEOCComCnuBandWidthEntry=hh3cEOCComCnuBandWidthEntry, hh3cEOCUniInTotalErrors=hh3cEOCUniInTotalErrors, hh3cEOCComCnuSoftwareVersion=hh3cEOCComCnuSoftwareVersion, hh3cEOCUniOutBPkts=hh3cEOCUniOutBPkts, hh3cEOCCommonSysScalarObjects=hh3cEOCCommonSysScalarObjects, hh3cEOCComCnuMacAddress=hh3cEOCComCnuMacAddress, hh3cEOCUniInUPkts=hh3cEOCUniInUPkts, hh3cEOCComUniCurrentSpeed=hh3cEOCComUniCurrentSpeed, hh3cEOCComCnuAttenThrB=hh3cEOCComCnuAttenThrB, hh3cEOCOamDisconnectRecoverTrap=hh3cEOCOamDisconnectRecoverTrap, hh3cEOCComCnuAttenuation=hh3cEOCComCnuAttenuation, hh3cEOCComCnuNumEntry=hh3cEOCComCnuNumEntry, hh3cEOCUniInOversizePkts=hh3cEOCUniInOversizePkts, hh3cEOCUniOutErrorbyOther=hh3cEOCUniOutErrorbyOther, hh3cEOCComUniStatus=hh3cEOCComUniStatus, hh3cEOCUniOutMPkts=hh3cEOCUniOutMPkts, hh3cEOCCnuRegExcessTrap=hh3cEOCCnuRegExcessTrap, hh3cEOCCnuAutoUpdateSuccTrap=hh3cEOCCnuAutoUpdateSuccTrap, hh3cEOCUniInUndersizePkts=hh3cEOCUniInUndersizePkts, hh3cEOCComOnLineCnuMan=hh3cEOCComOnLineCnuMan, hh3cEOCUniInMPkts=hh3cEOCUniInMPkts, hh3cEOCComCnuMacTable=hh3cEOCComCnuMacTable, hh3cEOCOamDisconnectTrap=hh3cEOCOamDisconnectTrap, hh3cEOCComCnuMaxDownBWMinVal=hh3cEOCComCnuMaxDownBWMinVal, hh3cEOCUniOutCollisions=hh3cEOCUniOutCollisions, hh3cEOCCnuRxRateDropRecoverTrap=hh3cEOCCnuRxRateDropRecoverTrap, hh3cEOCComCnuSlaHighPriBW=hh3cEOCComCnuSlaHighPriBW, hh3cEOCUniInCRCErrs=hh3cEOCUniInCRCErrs, hh3cEOCUniOutDelayExceedDsds=hh3cEOCUniOutDelayExceedDsds, hh3cEOCComCnuNumber=hh3cEOCComCnuNumber, hh3cEOCCnuFWDownLoadErrReTrap=hh3cEOCCnuFWDownLoadErrReTrap, hh3cEOCComUniVLANType=hh3cEOCComUniVLANType, hh3cEOCComCnuVLANType=hh3cEOCComCnuVLANType, hh3cEOCUniOutDroppedFrames=hh3cEOCUniOutDroppedFrames, hh3cEOCComUniCountEntry=hh3cEOCComUniCountEntry, hh3cEOCComCnuRateDropThr=hh3cEOCComCnuRateDropThr, hh3cEOCComCnuVlanTag=hh3cEOCComCnuVlanTag, hh3cEOCCommonCltMan=hh3cEOCCommonCltMan, hh3cEOCComCnuDescr=hh3cEOCComCnuDescr, hh3cEOCComCnuSysManTable=hh3cEOCComCnuSysManTable, hh3cEOCComCnuMaxDownBWMaxVal=hh3cEOCComCnuMaxDownBWMaxVal, hh3cEOCComCnuRowStatus=hh3cEOCComCnuRowStatus, hh3cEOCComUniUpLineRate=hh3cEOCComUniUpLineRate, hh3cEOCCnuFWDownLoadErrTrap=hh3cEOCCnuFWDownLoadErrTrap, hh3cEOCUniOutOctets=hh3cEOCUniOutOctets, hh3cEOCComCnuSlaHighPriBWMinVal=hh3cEOCComCnuSlaHighPriBWMinVal, hh3cEOCComUniCountTable=hh3cEOCComUniCountTable, hh3cEOCComCnuDescripton=hh3cEOCComCnuDescripton, hh3cEOCComCnuMaxUpBWMaxVal=hh3cEOCComCnuMaxUpBWMaxVal, hh3cEOCComUniCurrentDuplex=hh3cEOCComUniCurrentDuplex, hh3cEOCComCnuScalarObjects=hh3cEOCComCnuScalarObjects, hh3cEOCComCnuBandWidthTable=hh3cEOCComCnuBandWidthTable, hh3cEOCUniOutTotalErrors=hh3cEOCUniOutTotalErrors, hh3cEOCComUniPvid=hh3cEOCComUniPvid, hh3cEOCComUniManEntry=hh3cEOCComUniManEntry, hh3cEOCCnuTxRateDropRecoverTrap=hh3cEOCCnuTxRateDropRecoverTrap, hh3cEOCCnuRxRateDropTrap=hh3cEOCCnuRxRateDropTrap, hh3cEOCComUniPriority=hh3cEOCComUniPriority, hh3cEOCComCnuNumTable=hh3cEOCComCnuNumTable, hh3cEOCCommonCltAutoAuthorize=hh3cEOCCommonCltAutoAuthorize, hh3cEOCComCnuUpTime=hh3cEOCComCnuUpTime, hh3cEOCCnuLinkupTrap=hh3cEOCCnuLinkupTrap, hh3cEOCCnuDeviceTypeErrTrap=hh3cEOCCnuDeviceTypeErrTrap, hh3cEOCCnuAutoUpdateErrTrap=hh3cEOCCnuAutoUpdateErrTrap, hh3cEOCComCnuMaxDownBW=hh3cEOCComCnuMaxDownBW, hh3cEOCComCnuTypeEntry=hh3cEOCComCnuTypeEntry, hh3cEOCComCnuHardwareVersion=hh3cEOCComCnuHardwareVersion, hh3cEOCUniIndex=hh3cEOCUniIndex, hh3cEOCComCnuDeregister=hh3cEOCComCnuDeregister, hh3cEOCComCnuMan=hh3cEOCComCnuMan, hh3cEOCComCnuTypeIdx=hh3cEOCComCnuTypeIdx, hh3cEOCUniInPausePkts=hh3cEOCUniInPausePkts, hh3cEOCComUniCountReset=hh3cEOCComUniCountReset, hh3cEOCUniInBPkts=hh3cEOCUniInBPkts, hh3cEOCComCnuCableIfindex=hh3cEOCComCnuCableIfindex, hh3cEOCComUniManTable=hh3cEOCComUniManTable, hh3cEOCCnuRegExcessRecoverTrap=hh3cEOCCnuRegExcessRecoverTrap, hh3cEOCUniOutPausePkts=hh3cEOCUniOutPausePkts, hh3cEOCComCnuMaxUpBW=hh3cEOCComCnuMaxUpBW, hh3cEOCUniOutUPkts=hh3cEOCUniOutUPkts, hh3cEOCUniOutPkts=hh3cEOCUniOutPkts, hh3cEOCComCnuDeviceType=hh3cEOCComCnuDeviceType, hh3cEOCCommonUpLinkMacAddress=hh3cEOCCommonUpLinkMacAddress, hh3cEOCCommonCltMaxAllowToAccess=hh3cEOCCommonCltMaxAllowToAccess, hh3cEOCComCnuPCBVersion=hh3cEOCComCnuPCBVersion, hh3cEOCComCnuLinkState=hh3cEOCComCnuLinkState, hh3cEOCComUniDuplex=hh3cEOCComUniDuplex, hh3cEOCComCnuDeviceAlias=hh3cEOCComCnuDeviceAlias, hh3cEOCUniInOctets=hh3cEOCUniInOctets, hh3cEOCCnuOffLineTrap=hh3cEOCCnuOffLineTrap, hh3cEOCBandwidthNotEnoughTrap=hh3cEOCBandwidthNotEnoughTrap, PYSNMP_MODULE_ID=hh3cEOCCommon, hh3cEOCComUniMdi=hh3cEOCComUniMdi, hh3cEOCUniInPkts=hh3cEOCUniInPkts, hh3cEOCComCnuMacEntry=hh3cEOCComCnuMacEntry, hh3cEOCCommonSysVersion=hh3cEOCCommonSysVersion, hh3cEOCCLTCablePortErrReTrap=hh3cEOCCLTCablePortErrReTrap, hh3cEOCComCnuSlaHighPriBWMaxVal=hh3cEOCComCnuSlaHighPriBWMaxVal, hh3cEOCComUniDescr=hh3cEOCComUniDescr, hh3cEOCComCnuReset=hh3cEOCComCnuReset, hh3cEOCComCnuRxRate=hh3cEOCComCnuRxRate, hh3cEOCComUniAdminStatus=hh3cEOCComUniAdminStatus, hh3cEOCComUniType=hh3cEOCComUniType, hh3cEOCComCnuTxRateDrop=hh3cEOCComCnuTxRateDrop, hh3cEOCUniInErrorbyOther=hh3cEOCUniInErrorbyOther, hh3cEOCCnuTxRateDropTrap=hh3cEOCCnuTxRateDropTrap, hh3cEOCComUniSpeed=hh3cEOCComUniSpeed, hh3cEOCComUniVlanTag=hh3cEOCComUniVlanTag, hh3cEOCComCnuTypeTable=hh3cEOCComCnuTypeTable, hh3cEOCComCnuTxRate=hh3cEOCComCnuTxRate, hh3cEOCComCnuPvid=hh3cEOCComCnuPvid, hh3cEOCCommonCltManTable=hh3cEOCCommonCltManTable, hh3cEOCComUniFlowControl=hh3cEOCComUniFlowControl, hh3cEOCComUniDownLineRate=hh3cEOCComUniDownLineRate, hh3cEOCComCnuAttenThrA=hh3cEOCComCnuAttenThrA, hh3cEOCCommonCltManEntry=hh3cEOCCommonCltManEntry, hh3cEOCComUniAlias=hh3cEOCComUniAlias, hh3cEOCComCnuInfoEntry=hh3cEOCComCnuInfoEntry)
