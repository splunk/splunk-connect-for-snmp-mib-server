#
# PySNMP MIB module Nortel-Magellan-Passport-VcTesterMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-VcTesterMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:19:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
Unsigned32, StorageType, DisplayString, RowPointer, RowStatus, Integer32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "Unsigned32", "StorageType", "DisplayString", "RowPointer", "RowStatus", "Integer32")
Link, NonReplicated, EnterpriseDateAndTime, AsciiString, HexString, DigitString, Hex = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "Link", "NonReplicated", "EnterpriseDateAndTime", "AsciiString", "HexString", "DigitString", "Hex")
components, passportMIBs = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "components", "passportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter64, ObjectIdentity, IpAddress, MibIdentifier, ModuleIdentity, Gauge32, Bits, TimeTicks, iso, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "ObjectIdentity", "IpAddress", "MibIdentifier", "ModuleIdentity", "Gauge32", "Bits", "TimeTicks", "iso", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
vcTesterMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 34))
vct = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130))
vctRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 1), )
if mibBuilder.loadTexts: vctRowStatusTable.setStatus('mandatory')
vctRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"))
if mibBuilder.loadTexts: vctRowStatusEntry.setStatus('mandatory')
vctRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctRowStatus.setStatus('mandatory')
vctComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctComponentName.setStatus('mandatory')
vctStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctStorageType.setStatus('mandatory')
vctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: vctIndex.setStatus('mandatory')
vctProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 10), )
if mibBuilder.loadTexts: vctProvTable.setStatus('mandatory')
vctProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"))
if mibBuilder.loadTexts: vctProvEntry.setStatus('mandatory')
vctLogicalProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctLogicalProcessor.setStatus('mandatory')
vctVcName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gvc", 1), ("fvc", 2))).clone('gvc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctVcName.setStatus('mandatory')
vctDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2))
vctDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 1), )
if mibBuilder.loadTexts: vctDnaRowStatusTable.setStatus('mandatory')
vctDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaIndex"))
if mibBuilder.loadTexts: vctDnaRowStatusEntry.setStatus('mandatory')
vctDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctDnaRowStatus.setStatus('mandatory')
vctDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctDnaComponentName.setStatus('mandatory')
vctDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctDnaStorageType.setStatus('mandatory')
vctDnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vctDnaIndex.setStatus('mandatory')
vctDnaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 10), )
if mibBuilder.loadTexts: vctDnaAddressTable.setStatus('mandatory')
vctDnaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaIndex"))
if mibBuilder.loadTexts: vctDnaAddressEntry.setStatus('mandatory')
vctDnaNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaNumberingPlanIndicator.setStatus('mandatory')
vctDnaDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaDataNetworkAddress.setStatus('mandatory')
vctDnaOutgoingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11), )
if mibBuilder.loadTexts: vctDnaOutgoingOptionsTable.setStatus('mandatory')
vctDnaOutgoingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaIndex"))
if mibBuilder.loadTexts: vctDnaOutgoingOptionsEntry.setStatus('mandatory')
vctDnaOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaOutCalls.setStatus('mandatory')
vctDnaOutNormalCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaOutNormalCharge.setStatus('mandatory')
vctDnaOutReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaOutReverseCharge.setStatus('mandatory')
vctDnaOutForceReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaOutForceReverseCharge.setStatus('mandatory')
vctDnaOutNormalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaOutNormalPriority.setStatus('mandatory')
vctDnaOutHighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaOutHighPriority.setStatus('mandatory')
vctDnaOutDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaOutDefaultPriority.setStatus('mandatory')
vctDnaOutIntl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaOutIntl.setStatus('mandatory')
vctDnaOutFsRestrictedResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaOutFsRestrictedResponse.setStatus('mandatory')
vctDnaOutFsUnrestrictedResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaOutFsUnrestrictedResponse.setStatus('mandatory')
vctDnaOutDefaultPathSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1))).clone('throughput')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaOutDefaultPathSensitivity.setStatus('obsolete')
vctDnaOutPathSensitivityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaOutPathSensitivityOverRide.setStatus('obsolete')
vctDnaOutPathSensitivitySignal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaOutPathSensitivitySignal.setStatus('mandatory')
vctDnaOutDefaultPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1))).clone('high')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaOutDefaultPathReliability.setStatus('mandatory')
vctDnaOutPathReliabilityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaOutPathReliabilityOverRide.setStatus('mandatory')
vctDnaOutPathReliabilitySignal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaOutPathReliabilitySignal.setStatus('mandatory')
vctDnaOutAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaOutAccess.setStatus('mandatory')
vctDnaDefaultTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaDefaultTransferPriority.setStatus('mandatory')
vctDnaTransferPriorityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaTransferPriorityOverRide.setStatus('mandatory')
vctDnaIncomingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 12), )
if mibBuilder.loadTexts: vctDnaIncomingOptionsTable.setStatus('mandatory')
vctDnaIncomingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaIndex"))
if mibBuilder.loadTexts: vctDnaIncomingOptionsEntry.setStatus('mandatory')
vctDnaIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaIncCalls.setStatus('mandatory')
vctDnaIncHighPriorityReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaIncHighPriorityReverseCharge.setStatus('mandatory')
vctDnaIncNormalPriorityReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaIncNormalPriorityReverseCharge.setStatus('mandatory')
vctDnaIncIntlNormalCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaIncIntlNormalCharge.setStatus('mandatory')
vctDnaIncIntlReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaIncIntlReverseCharge.setStatus('mandatory')
vctDnaIncFastSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaIncFastSelect.setStatus('mandatory')
vctDnaIncSameService = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaIncSameService.setStatus('mandatory')
vctDnaIncChargeTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaIncChargeTransfer.setStatus('mandatory')
vctDnaIncAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaIncAccess.setStatus('mandatory')
vctDnaCallOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13), )
if mibBuilder.loadTexts: vctDnaCallOptionsTable.setStatus('mandatory')
vctDnaCallOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaIndex"))
if mibBuilder.loadTexts: vctDnaCallOptionsEntry.setStatus('mandatory')
vctDnaServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("gsp", 0), ("x25", 1), ("enhancedIti", 2), ("ncs", 3), ("mlti", 4), ("sm", 5), ("ici", 6), ("dsp3270", 7), ("iam", 8), ("mlhi", 9), ("term3270", 10), ("iti", 11), ("bsi", 13), ("hostIti", 14), ("x75", 15), ("hdsp3270", 16), ("api3201", 20), ("sdlc", 21), ("snaMultiHost", 22), ("redirectionServ", 23), ("trSnaTpad", 24), ("offnetNui", 25), ("gasServer", 26), ("vapServer", 28), ("vapAgent", 29), ("frameRelay", 30), ("ipiVc", 31), ("gvcIf", 32))).clone('frameRelay')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaServiceCategory.setStatus('mandatory')
vctDnaPacketSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="1c00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaPacketSizes.setStatus('mandatory')
vctDnaDefaultRecvFrmNetworkPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12))).clone('n128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaDefaultRecvFrmNetworkPacketSize.setStatus('mandatory')
vctDnaDefaultSendToNetworkPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12))).clone('n128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaDefaultSendToNetworkPacketSize.setStatus('mandatory')
vctDnaDefaultRecvFrmNetworkThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaDefaultRecvFrmNetworkThruputClass.setStatus('mandatory')
vctDnaDefaultSendToNetworkThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaDefaultSendToNetworkThruputClass.setStatus('mandatory')
vctDnaDefaultRecvFrmNetworkWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaDefaultRecvFrmNetworkWindowSize.setStatus('mandatory')
vctDnaDefaultSendToNetworkWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaDefaultSendToNetworkWindowSize.setStatus('mandatory')
vctDnaPacketSizeNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("endToEnd", 0), ("local", 1))).clone('endToEnd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaPacketSizeNegotiation.setStatus('mandatory')
vctDnaCugFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("extended", 1))).clone('basic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaCugFormat.setStatus('mandatory')
vctDnaCug0AsNonCugCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaCug0AsNonCugCall.setStatus('mandatory')
vctDnaSignalPreferentialCugToLink = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaSignalPreferentialCugToLink.setStatus('mandatory')
vctDnaSignalIntlAddressToLink = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaSignalIntlAddressToLink.setStatus('mandatory')
vctDnaFastSelectCallsOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaFastSelectCallsOnly.setStatus('mandatory')
vctDnaPreselectRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaPreselectRpoa.setStatus('mandatory')
vctDnaAccountClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaAccountClass.setStatus('mandatory')
vctDnaAccountCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="80")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaAccountCollection.setStatus('mandatory')
vctDnaServiceExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaServiceExchange.setStatus('mandatory')
vctDnaEgressAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaEgressAccounting.setStatus('mandatory')
vctDnaRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 20), DigitString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="30303030")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaRpoa.setStatus('mandatory')
vctDnaDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 13, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dprsOnly", 0), ("dprsMcsOnly", 1), ("dprsMcsFirst", 2))).clone('dprsOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaDataPath.setStatus('mandatory')
vctDnaCug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 2))
vctDnaCugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 2, 1), )
if mibBuilder.loadTexts: vctDnaCugRowStatusTable.setStatus('mandatory')
vctDnaCugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaCugIndex"))
if mibBuilder.loadTexts: vctDnaCugRowStatusEntry.setStatus('mandatory')
vctDnaCugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaCugRowStatus.setStatus('mandatory')
vctDnaCugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctDnaCugComponentName.setStatus('mandatory')
vctDnaCugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctDnaCugStorageType.setStatus('mandatory')
vctDnaCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: vctDnaCugIndex.setStatus('mandatory')
vctDnaCugCugOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 2, 10), )
if mibBuilder.loadTexts: vctDnaCugCugOptionsTable.setStatus('mandatory')
vctDnaCugCugOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaCugIndex"))
if mibBuilder.loadTexts: vctDnaCugCugOptionsEntry.setStatus('mandatory')
vctDnaCugType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("national", 0), ("international", 1))).clone('national')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaCugType.setStatus('mandatory')
vctDnaCugDnic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="30303030")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaCugDnic.setStatus('mandatory')
vctDnaCugInterlockCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaCugInterlockCode.setStatus('mandatory')
vctDnaCugPreferential = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaCugPreferential.setStatus('mandatory')
vctDnaCugOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaCugOutCalls.setStatus('mandatory')
vctDnaCugIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaCugIncCalls.setStatus('mandatory')
vctDnaCugPrivileged = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaCugPrivileged.setStatus('mandatory')
vctDnaHgM = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3))
vctDnaHgMRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 1), )
if mibBuilder.loadTexts: vctDnaHgMRowStatusTable.setStatus('mandatory')
vctDnaHgMRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaHgMIndex"))
if mibBuilder.loadTexts: vctDnaHgMRowStatusEntry.setStatus('mandatory')
vctDnaHgMRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaHgMRowStatus.setStatus('mandatory')
vctDnaHgMComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctDnaHgMComponentName.setStatus('mandatory')
vctDnaHgMStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctDnaHgMStorageType.setStatus('mandatory')
vctDnaHgMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vctDnaHgMIndex.setStatus('mandatory')
vctDnaHgMIfTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 10), )
if mibBuilder.loadTexts: vctDnaHgMIfTable.setStatus('mandatory')
vctDnaHgMIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaHgMIndex"))
if mibBuilder.loadTexts: vctDnaHgMIfEntry.setStatus('mandatory')
vctDnaHgMAvailabilityUpdateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaHgMAvailabilityUpdateThreshold.setStatus('mandatory')
vctDnaHgMOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 11), )
if mibBuilder.loadTexts: vctDnaHgMOpTable.setStatus('mandatory')
vctDnaHgMOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaHgMIndex"))
if mibBuilder.loadTexts: vctDnaHgMOpEntry.setStatus('mandatory')
vctDnaHgMMaxAvailableChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctDnaHgMMaxAvailableChannels.setStatus('mandatory')
vctDnaHgMAvailableChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctDnaHgMAvailableChannels.setStatus('mandatory')
vctDnaHgMAvailabilityDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-4096, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctDnaHgMAvailabilityDelta.setStatus('mandatory')
vctDnaHgMHgAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 2))
vctDnaHgMHgAddrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 2, 1), )
if mibBuilder.loadTexts: vctDnaHgMHgAddrRowStatusTable.setStatus('mandatory')
vctDnaHgMHgAddrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaHgMIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaHgMHgAddrIndex"))
if mibBuilder.loadTexts: vctDnaHgMHgAddrRowStatusEntry.setStatus('mandatory')
vctDnaHgMHgAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaHgMHgAddrRowStatus.setStatus('mandatory')
vctDnaHgMHgAddrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctDnaHgMHgAddrComponentName.setStatus('mandatory')
vctDnaHgMHgAddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctDnaHgMHgAddrStorageType.setStatus('mandatory')
vctDnaHgMHgAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: vctDnaHgMHgAddrIndex.setStatus('mandatory')
vctDnaHgMHgAddrAddrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 2, 10), )
if mibBuilder.loadTexts: vctDnaHgMHgAddrAddrTable.setStatus('mandatory')
vctDnaHgMHgAddrAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaHgMIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDnaHgMHgAddrIndex"))
if mibBuilder.loadTexts: vctDnaHgMHgAddrAddrEntry.setStatus('mandatory')
vctDnaHgMHgAddrNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaHgMHgAddrNumberingPlanIndicator.setStatus('mandatory')
vctDnaHgMHgAddrDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 2, 3, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDnaHgMHgAddrDataNetworkAddress.setStatus('mandatory')
vctDc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3))
vctDcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 1), )
if mibBuilder.loadTexts: vctDcRowStatusTable.setStatus('mandatory')
vctDcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDcIndex"))
if mibBuilder.loadTexts: vctDcRowStatusEntry.setStatus('mandatory')
vctDcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDcRowStatus.setStatus('mandatory')
vctDcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctDcComponentName.setStatus('mandatory')
vctDcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctDcStorageType.setStatus('mandatory')
vctDcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: vctDcIndex.setStatus('mandatory')
vctDcOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 10), )
if mibBuilder.loadTexts: vctDcOptionsTable.setStatus('mandatory')
vctDcOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDcIndex"))
if mibBuilder.loadTexts: vctDcOptionsEntry.setStatus('mandatory')
vctDcLocalNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDcLocalNpi.setStatus('mandatory')
vctDcLocalDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDcLocalDna.setStatus('mandatory')
vctDcRemoteNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDcRemoteNpi.setStatus('mandatory')
vctDcRemoteDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 10, 1, 4), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDcRemoteDna.setStatus('mandatory')
vctDcRemoteLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDcRemoteLcn.setStatus('mandatory')
vctDcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("switched", 0), ("permanentMaster", 1), ("permanentSlave", 2), ("permanentBackupSlave", 3), ("permanentSlaveWithBackup", 4))).clone('switched')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDcType.setStatus('mandatory')
vctDcSvcAutoCallRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDcSvcAutoCallRetry.setStatus('mandatory')
vctDcUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 10, 1, 8), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDcUserData.setStatus('mandatory')
vctDcDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("useDnaDefPriority", 3))).clone('useDnaDefPriority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDcDiscardPriority.setStatus('mandatory')
vctDcDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("dprsOnly", 0), ("dprsMcsOnly", 1), ("dprsMcsFirst", 2), ("useDnaValue", 3))).clone('dprsOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDcDataPath.setStatus('mandatory')
vctDcCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDcCugIndex.setStatus('mandatory')
vctDcCugType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 9))).clone(namedValues=NamedValues(("doNotSignal", 0), ("cug", 3), ("cugOa", 9))).clone('doNotSignal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDcCugType.setStatus('mandatory')
vctDcCfaTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 267), )
if mibBuilder.loadTexts: vctDcCfaTable.setStatus('mandatory')
vctDcCfaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 267, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDcIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDcCfaIndex"))
if mibBuilder.loadTexts: vctDcCfaEntry.setStatus('mandatory')
vctDcCfaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 267, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(9, 9), ValueRangeConstraint(66, 66), ValueRangeConstraint(67, 67), ValueRangeConstraint(68, 68), ValueRangeConstraint(71, 71), ValueRangeConstraint(72, 72), ValueRangeConstraint(73, 73), ValueRangeConstraint(196, 196), ValueRangeConstraint(198, 198), )))
if mibBuilder.loadTexts: vctDcCfaIndex.setStatus('mandatory')
vctDcCfaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 267, 1, 2), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDcCfaValue.setStatus('mandatory')
vctDcCfaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 267, 1, 3), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: vctDcCfaRowStatus.setStatus('mandatory')
vctDcDfaTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 268), )
if mibBuilder.loadTexts: vctDcDfaTable.setStatus('mandatory')
vctDcDfaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 268, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDcIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDcDfaIndex"))
if mibBuilder.loadTexts: vctDcDfaEntry.setStatus('mandatory')
vctDcDfaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 268, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(11, 11), ValueRangeConstraint(201, 201), ValueRangeConstraint(202, 202), ValueRangeConstraint(203, 203), ValueRangeConstraint(210, 210), ValueRangeConstraint(211, 211), )))
if mibBuilder.loadTexts: vctDcDfaIndex.setStatus('mandatory')
vctDcDfaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 268, 1, 2), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDcDfaValue.setStatus('mandatory')
vctDcDfaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 268, 1, 3), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: vctDcDfaRowStatus.setStatus('mandatory')
vctDcNfaTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 269), )
if mibBuilder.loadTexts: vctDcNfaTable.setStatus('obsolete')
vctDcNfaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 269, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDcIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDcNfaIndex"))
if mibBuilder.loadTexts: vctDcNfaEntry.setStatus('obsolete')
vctDcNfaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 269, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(48, 48), ValueRangeConstraint(127, 127), ValueRangeConstraint(212, 212), )))
if mibBuilder.loadTexts: vctDcNfaIndex.setStatus('obsolete')
vctDcNfaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 269, 1, 2), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDcNfaValue.setStatus('obsolete')
vctDcNfaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 269, 1, 3), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: vctDcNfaRowStatus.setStatus('obsolete')
vctDcIfaTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 270), )
if mibBuilder.loadTexts: vctDcIfaTable.setStatus('mandatory')
vctDcIfaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 270, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDcIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctDcIfaIndex"))
if mibBuilder.loadTexts: vctDcIfaEntry.setStatus('mandatory')
vctDcIfaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 270, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: vctDcIfaIndex.setStatus('mandatory')
vctDcIfaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 270, 1, 2), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vctDcIfaValue.setStatus('mandatory')
vctDcIfaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 3, 270, 1, 3), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: vctDcIfaRowStatus.setStatus('mandatory')
vctVc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4))
vctVcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 1), )
if mibBuilder.loadTexts: vctVcRowStatusTable.setStatus('mandatory')
vctVcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctVcIndex"))
if mibBuilder.loadTexts: vctVcRowStatusEntry.setStatus('mandatory')
vctVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcRowStatus.setStatus('mandatory')
vctVcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcComponentName.setStatus('mandatory')
vctVcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcStorageType.setStatus('mandatory')
vctVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vctVcIndex.setStatus('mandatory')
vctVcCadTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10), )
if mibBuilder.loadTexts: vctVcCadTable.setStatus('mandatory')
vctVcCadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctVcIndex"))
if mibBuilder.loadTexts: vctVcCadEntry.setStatus('mandatory')
vctVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("svc", 0), ("pvc", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcType.setStatus('mandatory')
vctVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcState.setStatus('mandatory')
vctVcPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcPreviousState.setStatus('mandatory')
vctVcDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcDiagnosticCode.setStatus('mandatory')
vctVcPreviousDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcPreviousDiagnosticCode.setStatus('mandatory')
vctVcCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcCalledNpi.setStatus('mandatory')
vctVcCalledDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 7), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcCalledDna.setStatus('mandatory')
vctVcCalledLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcCalledLcn.setStatus('mandatory')
vctVcCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcCallingNpi.setStatus('mandatory')
vctVcCallingDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcCallingDna.setStatus('mandatory')
vctVcCallingLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcCallingLcn.setStatus('mandatory')
vctVcAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcAccountingEnabled.setStatus('mandatory')
vctVcFastSelectCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcFastSelectCall.setStatus('mandatory')
vctVcLocalRxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcLocalRxPktSize.setStatus('mandatory')
vctVcLocalTxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcLocalTxPktSize.setStatus('mandatory')
vctVcLocalTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcLocalTxWindowSize.setStatus('mandatory')
vctVcLocalRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcLocalRxWindowSize.setStatus('mandatory')
vctVcPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcPathReliability.setStatus('mandatory')
vctVcAccountingEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("callingEnd", 0), ("calledEnd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcAccountingEnd.setStatus('mandatory')
vctVcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcPriority.setStatus('mandatory')
vctVcSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcSegmentSize.setStatus('mandatory')
vctVcSubnetTxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcSubnetTxPktSize.setStatus('mandatory')
vctVcSubnetTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcSubnetTxWindowSize.setStatus('mandatory')
vctVcSubnetRxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcSubnetRxPktSize.setStatus('mandatory')
vctVcSubnetRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcSubnetRxWindowSize.setStatus('mandatory')
vctVcMaxSubnetPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcMaxSubnetPktSize.setStatus('mandatory')
vctVcTransferPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcTransferPriorityToNetwork.setStatus('mandatory')
vctVcTransferPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcTransferPriorityFromNetwork.setStatus('mandatory')
vctVcIntdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 11), )
if mibBuilder.loadTexts: vctVcIntdTable.setStatus('mandatory')
vctVcIntdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctVcIndex"))
if mibBuilder.loadTexts: vctVcIntdEntry.setStatus('mandatory')
vctVcCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 11, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcCallReferenceNumber.setStatus('mandatory')
vctVcElapsedTimeTillNow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcElapsedTimeTillNow.setStatus('mandatory')
vctVcSegmentsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcSegmentsRx.setStatus('mandatory')
vctVcSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcSegmentsSent.setStatus('mandatory')
vctVcStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 11, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcStartTime.setStatus('mandatory')
vctVcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 12), )
if mibBuilder.loadTexts: vctVcStatsTable.setStatus('mandatory')
vctVcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctVcIndex"))
if mibBuilder.loadTexts: vctVcStatsEntry.setStatus('mandatory')
vctVcAckStackingTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcAckStackingTimeouts.setStatus('mandatory')
vctVcOutOfRangeFrmFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcOutOfRangeFrmFromSubnet.setStatus('mandatory')
vctVcDuplicatesFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcDuplicatesFromSubnet.setStatus('mandatory')
vctVcFrmRetryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcFrmRetryTimeouts.setStatus('mandatory')
vctVcPeakRetryQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcPeakRetryQueueSize.setStatus('mandatory')
vctVcPeakOoSeqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcPeakOoSeqQueueSize.setStatus('mandatory')
vctVcPeakOoSeqFrmForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcPeakOoSeqFrmForwarded.setStatus('mandatory')
vctVcPeakStackedAcksRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcPeakStackedAcksRx.setStatus('mandatory')
vctVcSubnetRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcSubnetRecoveries.setStatus('mandatory')
vctVcWindowClosuresToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcWindowClosuresToSubnet.setStatus('mandatory')
vctVcWindowClosuresFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcWindowClosuresFromSubnet.setStatus('mandatory')
vctVcWrTriggers = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 4, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcWrTriggers.setStatus('mandatory')
vctVcfr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5))
vctVcfrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 1), )
if mibBuilder.loadTexts: vctVcfrRowStatusTable.setStatus('mandatory')
vctVcfrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctVcfrIndex"))
if mibBuilder.loadTexts: vctVcfrRowStatusEntry.setStatus('mandatory')
vctVcfrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrRowStatus.setStatus('mandatory')
vctVcfrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrComponentName.setStatus('mandatory')
vctVcfrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrStorageType.setStatus('mandatory')
vctVcfrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vctVcfrIndex.setStatus('mandatory')
vctVcfrCadTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10), )
if mibBuilder.loadTexts: vctVcfrCadTable.setStatus('mandatory')
vctVcfrCadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctVcfrIndex"))
if mibBuilder.loadTexts: vctVcfrCadEntry.setStatus('mandatory')
vctVcfrType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("svc", 0), ("pvc", 1), ("spvc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrType.setStatus('mandatory')
vctVcfrState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrState.setStatus('mandatory')
vctVcfrPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrPreviousState.setStatus('mandatory')
vctVcfrDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrDiagnosticCode.setStatus('mandatory')
vctVcfrPreviousDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrPreviousDiagnosticCode.setStatus('mandatory')
vctVcfrCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrCalledNpi.setStatus('mandatory')
vctVcfrCalledDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 7), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrCalledDna.setStatus('mandatory')
vctVcfrCalledLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrCalledLcn.setStatus('mandatory')
vctVcfrCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrCallingNpi.setStatus('mandatory')
vctVcfrCallingDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrCallingDna.setStatus('mandatory')
vctVcfrCallingLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrCallingLcn.setStatus('mandatory')
vctVcfrAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrAccountingEnabled.setStatus('mandatory')
vctVcfrFastSelectCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrFastSelectCall.setStatus('mandatory')
vctVcfrPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrPathReliability.setStatus('mandatory')
vctVcfrAccountingEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("callingEnd", 0), ("calledEnd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrAccountingEnd.setStatus('mandatory')
vctVcfrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrPriority.setStatus('mandatory')
vctVcfrSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrSegmentSize.setStatus('mandatory')
vctVcfrMaxSubnetPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrMaxSubnetPktSize.setStatus('mandatory')
vctVcfrRcosToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrRcosToNetwork.setStatus('mandatory')
vctVcfrRcosFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1), ("multimedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrRcosFromNetwork.setStatus('mandatory')
vctVcfrEmissionPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrEmissionPriorityToNetwork.setStatus('mandatory')
vctVcfrEmissionPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("high", 1), ("interrupting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrEmissionPriorityFromNetwork.setStatus('mandatory')
vctVcfrDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 10, 1, 32), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrDataPath.setStatus('mandatory')
vctVcfrIntdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 11), )
if mibBuilder.loadTexts: vctVcfrIntdTable.setStatus('mandatory')
vctVcfrIntdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctVcfrIndex"))
if mibBuilder.loadTexts: vctVcfrIntdEntry.setStatus('mandatory')
vctVcfrCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 11, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrCallReferenceNumber.setStatus('mandatory')
vctVcfrElapsedTimeTillNow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrElapsedTimeTillNow.setStatus('mandatory')
vctVcfrSegmentsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrSegmentsRx.setStatus('mandatory')
vctVcfrSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrSegmentsSent.setStatus('mandatory')
vctVcfrStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 11, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrStartTime.setStatus('mandatory')
vctVcfrFrdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 12), )
if mibBuilder.loadTexts: vctVcfrFrdTable.setStatus('mandatory')
vctVcfrFrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctVcfrIndex"))
if mibBuilder.loadTexts: vctVcfrFrdEntry.setStatus('mandatory')
vctVcfrFrmCongestedToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrFrmCongestedToSubnet.setStatus('mandatory')
vctVcfrCannotForwardToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrCannotForwardToSubnet.setStatus('mandatory')
vctVcfrNotDataXferToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrNotDataXferToSubnet.setStatus('mandatory')
vctVcfrOutOfRangeFrmFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrOutOfRangeFrmFromSubnet.setStatus('mandatory')
vctVcfrCombErrorsFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrCombErrorsFromSubnet.setStatus('mandatory')
vctVcfrDuplicatesFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrDuplicatesFromSubnet.setStatus('mandatory')
vctVcfrNotDataXferFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrNotDataXferFromSubnet.setStatus('mandatory')
vctVcfrFrmLossTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrFrmLossTimeouts.setStatus('mandatory')
vctVcfrOoSeqByteCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrOoSeqByteCntExceeded.setStatus('mandatory')
vctVcfrPeakOoSeqPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrPeakOoSeqPktCount.setStatus('mandatory')
vctVcfrPeakOoSeqFrmForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrPeakOoSeqFrmForwarded.setStatus('mandatory')
vctVcfrSendSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 12, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrSendSequenceNumber.setStatus('mandatory')
vctVcfrPktRetryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 12, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrPktRetryTimeouts.setStatus('mandatory')
vctVcfrPeakRetryQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 12, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrPeakRetryQueueSize.setStatus('mandatory')
vctVcfrSubnetRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 12, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrSubnetRecoveries.setStatus('mandatory')
vctVcfrOoSeqPktCntExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 12, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrOoSeqPktCntExceeded.setStatus('mandatory')
vctVcfrPeakOoSeqByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 12, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrPeakOoSeqByteCount.setStatus('mandatory')
vctVcfrDmepTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 417), )
if mibBuilder.loadTexts: vctVcfrDmepTable.setStatus('mandatory')
vctVcfrDmepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 417, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VcTesterMIB", "vctIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctVcfrIndex"), (0, "Nortel-Magellan-Passport-VcTesterMIB", "vctVcfrDmepValue"))
if mibBuilder.loadTexts: vctVcfrDmepEntry.setStatus('mandatory')
vctVcfrDmepValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 5130, 5, 417, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vctVcfrDmepValue.setStatus('mandatory')
vcTesterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 34, 1))
vcTesterGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 34, 1, 5))
vcTesterGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 34, 1, 5, 2))
vcTesterGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 34, 1, 5, 2, 2))
vcTesterCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 34, 3))
vcTesterCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 34, 3, 5))
vcTesterCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 34, 3, 5, 2))
vcTesterCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 34, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-VcTesterMIB", vctVcfrCombErrorsFromSubnet=vctVcfrCombErrorsFromSubnet, vctDcIfaRowStatus=vctDcIfaRowStatus, vctDnaHgMHgAddrNumberingPlanIndicator=vctDnaHgMHgAddrNumberingPlanIndicator, vctDnaEgressAccounting=vctDnaEgressAccounting, vctVcStatsEntry=vctVcStatsEntry, vctDc=vctDc, vctDcUserData=vctDcUserData, vctVcfrPreviousState=vctVcfrPreviousState, vctVcfrPeakRetryQueueSize=vctVcfrPeakRetryQueueSize, vctDnaHgMHgAddrComponentName=vctDnaHgMHgAddrComponentName, vctDcIfaEntry=vctDcIfaEntry, vctDnaHgMHgAddrRowStatusEntry=vctDnaHgMHgAddrRowStatusEntry, vctVcfrCannotForwardToSubnet=vctVcfrCannotForwardToSubnet, vctDnaCugRowStatusTable=vctDnaCugRowStatusTable, vctDnaCugCugOptionsTable=vctDnaCugCugOptionsTable, vctVcfrRowStatusEntry=vctVcfrRowStatusEntry, vctDcDataPath=vctDcDataPath, vctVcfrCallingLcn=vctVcfrCallingLcn, vctVcfrMaxSubnetPktSize=vctVcfrMaxSubnetPktSize, vctDnaHgMRowStatus=vctDnaHgMRowStatus, vctDcDfaRowStatus=vctDcDfaRowStatus, vctDcIfaValue=vctDcIfaValue, vctDnaOutHighPriority=vctDnaOutHighPriority, vctDnaDataPath=vctDnaDataPath, vctVcFastSelectCall=vctVcFastSelectCall, vctVcPeakRetryQueueSize=vctVcPeakRetryQueueSize, vctVcfrPreviousDiagnosticCode=vctVcfrPreviousDiagnosticCode, vctDnaIncIntlNormalCharge=vctDnaIncIntlNormalCharge, vctVcAckStackingTimeouts=vctVcAckStackingTimeouts, vctDnaHgMOpEntry=vctDnaHgMOpEntry, vctDcDfaEntry=vctDcDfaEntry, vctDnaDefaultSendToNetworkWindowSize=vctDnaDefaultSendToNetworkWindowSize, vctVcfrAccountingEnd=vctVcfrAccountingEnd, vctVcfrRcosFromNetwork=vctVcfrRcosFromNetwork, vctDnaComponentName=vctDnaComponentName, vctDcRowStatusTable=vctDcRowStatusTable, vctVcComponentName=vctVcComponentName, vctVcTransferPriorityFromNetwork=vctVcTransferPriorityFromNetwork, vctVcLocalRxPktSize=vctVcLocalRxPktSize, vctVcfrState=vctVcfrState, vctVcfrSegmentsRx=vctVcfrSegmentsRx, vctDcType=vctDcType, vctVcfrCallReferenceNumber=vctVcfrCallReferenceNumber, vctVcfrRowStatusTable=vctVcfrRowStatusTable, vctVcRowStatusEntry=vctVcRowStatusEntry, vctDcComponentName=vctDcComponentName, vctVcCallingNpi=vctVcCallingNpi, vctVcCalledLcn=vctVcCalledLcn, vctDnaHgMHgAddrStorageType=vctDnaHgMHgAddrStorageType, vctVcfrFrmCongestedToSubnet=vctVcfrFrmCongestedToSubnet, vctVcLocalRxWindowSize=vctVcLocalRxWindowSize, vctVcfrSegmentsSent=vctVcfrSegmentsSent, vctDcIfaTable=vctDcIfaTable, vctLogicalProcessor=vctLogicalProcessor, vctDcRowStatusEntry=vctDcRowStatusEntry, vctVcfrPeakOoSeqFrmForwarded=vctVcfrPeakOoSeqFrmForwarded, vctVcfrSendSequenceNumber=vctVcfrSendSequenceNumber, vctVcSubnetTxWindowSize=vctVcSubnetTxWindowSize, vctDnaOutCalls=vctDnaOutCalls, vctDnaHgMMaxAvailableChannels=vctDnaHgMMaxAvailableChannels, vctVcfrType=vctVcfrType, vctDnaAddressEntry=vctDnaAddressEntry, vctDnaOutPathSensitivityOverRide=vctDnaOutPathSensitivityOverRide, vctDnaRowStatusTable=vctDnaRowStatusTable, vctDnaServiceCategory=vctDnaServiceCategory, vcTesterGroupBE=vcTesterGroupBE, vcTesterCapabilitiesBE01=vcTesterCapabilitiesBE01, vctDnaOutDefaultPathSensitivity=vctDnaOutDefaultPathSensitivity, vctDcCfaTable=vctDcCfaTable, vctRowStatusTable=vctRowStatusTable, vctDnaIncAccess=vctDnaIncAccess, vctDcDfaTable=vctDcDfaTable, vctVcfrOutOfRangeFrmFromSubnet=vctVcfrOutOfRangeFrmFromSubnet, vctDna=vctDna, vctDnaAddressTable=vctDnaAddressTable, vctDnaIncCalls=vctDnaIncCalls, vctDcOptionsEntry=vctDcOptionsEntry, vctVcStartTime=vctVcStartTime, vctVcfrIntdEntry=vctVcfrIntdEntry, vctVcfrDataPath=vctVcfrDataPath, vctComponentName=vctComponentName, vctDnaRowStatusEntry=vctDnaRowStatusEntry, vctRowStatusEntry=vctRowStatusEntry, vctDnaOutgoingOptionsEntry=vctDnaOutgoingOptionsEntry, vctDcCfaValue=vctDcCfaValue, vctVcSegmentSize=vctVcSegmentSize, vctDnaIncSameService=vctDnaIncSameService, vctDnaHgMRowStatusEntry=vctDnaHgMRowStatusEntry, vcTesterMIB=vcTesterMIB, vctVcName=vctVcName, vctDnaPacketSizes=vctDnaPacketSizes, vctDnaIncomingOptionsTable=vctDnaIncomingOptionsTable, vctDnaCugDnic=vctDnaCugDnic, vctVcfrAccountingEnabled=vctVcfrAccountingEnabled, vctVcfrSegmentSize=vctVcfrSegmentSize, vctDnaOutAccess=vctDnaOutAccess, vctDnaTransferPriorityOverRide=vctDnaTransferPriorityOverRide, vctVcSubnetTxPktSize=vctVcSubnetTxPktSize, vctVcfrFrdTable=vctVcfrFrdTable, vctDnaOutForceReverseCharge=vctDnaOutForceReverseCharge, vctVcfrPriority=vctVcfrPriority, vctVcfrStartTime=vctVcfrStartTime, vctVcWindowClosuresToSubnet=vctVcWindowClosuresToSubnet, vctIndex=vctIndex, vctDnaOutPathSensitivitySignal=vctDnaOutPathSensitivitySignal, vctDcDfaIndex=vctDcDfaIndex, vctVcfrCalledDna=vctVcfrCalledDna, vctVcfrDuplicatesFromSubnet=vctVcfrDuplicatesFromSubnet, vctDnaSignalPreferentialCugToLink=vctDnaSignalPreferentialCugToLink, vctDcLocalNpi=vctDcLocalNpi, vctDcNfaRowStatus=vctDcNfaRowStatus, vctDnaOutIntl=vctDnaOutIntl, vctDnaCug=vctDnaCug, vctVcfrCallingNpi=vctVcfrCallingNpi, vctVcfrCallingDna=vctVcfrCallingDna, vctDnaDataNetworkAddress=vctDnaDataNetworkAddress, vctVcfrIntdTable=vctVcfrIntdTable, vctVcfrDmepEntry=vctVcfrDmepEntry, vctDnaAccountClass=vctDnaAccountClass, vctProvEntry=vctProvEntry, vctDnaCallOptionsTable=vctDnaCallOptionsTable, vctVcWrTriggers=vctVcWrTriggers, vctDnaDefaultTransferPriority=vctDnaDefaultTransferPriority, vctDnaIncomingOptionsEntry=vctDnaIncomingOptionsEntry, vctVcState=vctVcState, vctVcCallReferenceNumber=vctVcCallReferenceNumber, vctVcfrNotDataXferToSubnet=vctVcfrNotDataXferToSubnet, vctVcCadTable=vctVcCadTable, vctDnaOutgoingOptionsTable=vctDnaOutgoingOptionsTable, vctDnaServiceExchange=vctDnaServiceExchange, vctVcPreviousDiagnosticCode=vctVcPreviousDiagnosticCode, vctDnaHgMIfEntry=vctDnaHgMIfEntry, vctDnaHgMComponentName=vctDnaHgMComponentName, vctVcPeakOoSeqQueueSize=vctVcPeakOoSeqQueueSize, vctDnaCugType=vctDnaCugType, vctVcfrNotDataXferFromSubnet=vctVcfrNotDataXferFromSubnet, vctDnaCug0AsNonCugCall=vctDnaCug0AsNonCugCall, vctDnaStorageType=vctDnaStorageType, vctDcIndex=vctDcIndex, vctVcfrElapsedTimeTillNow=vctVcfrElapsedTimeTillNow, vctDnaRpoa=vctDnaRpoa, vctVcType=vctVcType, vctVcfrPeakOoSeqPktCount=vctVcfrPeakOoSeqPktCount, vctVcfrSubnetRecoveries=vctVcfrSubnetRecoveries, vctDnaOutDefaultPathReliability=vctDnaOutDefaultPathReliability, vctDnaHgMHgAddr=vctDnaHgMHgAddr, vctVc=vctVc, vctDnaIncIntlReverseCharge=vctDnaIncIntlReverseCharge, vctDcCfaRowStatus=vctDcCfaRowStatus, vcTesterGroupBE01A=vcTesterGroupBE01A, vctDnaCugComponentName=vctDnaCugComponentName, vctDcNfaTable=vctDcNfaTable, vctDnaCugOutCalls=vctDnaCugOutCalls, vctDnaHgMAvailabilityDelta=vctDnaHgMAvailabilityDelta, vctDnaHgMHgAddrAddrEntry=vctDnaHgMHgAddrAddrEntry, vctVcAccountingEnd=vctVcAccountingEnd, vctVcPeakOoSeqFrmForwarded=vctVcPeakOoSeqFrmForwarded, vctDcSvcAutoCallRetry=vctDcSvcAutoCallRetry, vctVcStatsTable=vctVcStatsTable, vctVcfrCadTable=vctVcfrCadTable, vctVcPeakStackedAcksRx=vctVcPeakStackedAcksRx, vctDnaHgMStorageType=vctDnaHgMStorageType, vctProvTable=vctProvTable, vctDnaDefaultRecvFrmNetworkPacketSize=vctDnaDefaultRecvFrmNetworkPacketSize, vctDcRemoteDna=vctDcRemoteDna, vctDnaPacketSizeNegotiation=vctDnaPacketSizeNegotiation, vctDnaCugInterlockCode=vctDnaCugInterlockCode, vctDnaCugPrivileged=vctDnaCugPrivileged, vctDcStorageType=vctDcStorageType, vctDcCugIndex=vctDcCugIndex, vctDcIfaIndex=vctDcIfaIndex, vctVcCallingLcn=vctVcCallingLcn, vctVcLocalTxWindowSize=vctVcLocalTxWindowSize, vctVcfrPktRetryTimeouts=vctVcfrPktRetryTimeouts, vctDcNfaValue=vctDcNfaValue, vctVcfrDiagnosticCode=vctVcfrDiagnosticCode, vctDnaCugIndex=vctDnaCugIndex, vctVcCallingDna=vctVcCallingDna, vctDnaNumberingPlanIndicator=vctDnaNumberingPlanIndicator, vctDnaCugFormat=vctDnaCugFormat, vctDnaOutFsRestrictedResponse=vctDnaOutFsRestrictedResponse, vctVcfrOoSeqPktCntExceeded=vctVcfrOoSeqPktCntExceeded, vctDnaHgMOpTable=vctDnaHgMOpTable, vctDcRemoteNpi=vctDcRemoteNpi, vctDnaHgM=vctDnaHgM, vctDnaIncChargeTransfer=vctDnaIncChargeTransfer, vctVcWindowClosuresFromSubnet=vctVcWindowClosuresFromSubnet, vctVcfrCalledNpi=vctVcfrCalledNpi, vct=vct, vctDnaOutDefaultPriority=vctDnaOutDefaultPriority, vctDnaDefaultRecvFrmNetworkWindowSize=vctDnaDefaultRecvFrmNetworkWindowSize, vctDnaCugStorageType=vctDnaCugStorageType, vctDcRemoteLcn=vctDcRemoteLcn, vctVcElapsedTimeTillNow=vctVcElapsedTimeTillNow, vctDnaCugRowStatus=vctDnaCugRowStatus, vctStorageType=vctStorageType, vctDcRowStatus=vctDcRowStatus, vcTesterGroup=vcTesterGroup, vctVcTransferPriorityToNetwork=vctVcTransferPriorityToNetwork, vctVcSegmentsSent=vctVcSegmentsSent, vctVcSubnetRecoveries=vctVcSubnetRecoveries, vctDnaCugIncCalls=vctDnaCugIncCalls, vctDnaHgMIndex=vctDnaHgMIndex, vctDcNfaIndex=vctDcNfaIndex, vctDnaPreselectRpoa=vctDnaPreselectRpoa, vctDnaHgMHgAddrAddrTable=vctDnaHgMHgAddrAddrTable, vctDnaSignalIntlAddressToLink=vctDnaSignalIntlAddressToLink, vctVcCalledNpi=vctVcCalledNpi, vctVcSegmentsRx=vctVcSegmentsRx, vctVcfrEmissionPriorityFromNetwork=vctVcfrEmissionPriorityFromNetwork, vctDnaHgMAvailableChannels=vctDnaHgMAvailableChannels, vctVcfrFrdEntry=vctVcfrFrdEntry, vctVcfrCadEntry=vctVcfrCadEntry, vctVcMaxSubnetPktSize=vctVcMaxSubnetPktSize, vctVcfrFrmLossTimeouts=vctVcfrFrmLossTimeouts, vctDnaRowStatus=vctDnaRowStatus, vctDnaOutReverseCharge=vctDnaOutReverseCharge, vctDcDiscardPriority=vctDcDiscardPriority, vctVcStorageType=vctVcStorageType, vctDnaCugPreferential=vctDnaCugPreferential, vctVcCalledDna=vctVcCalledDna, vctVcfrDmepValue=vctVcfrDmepValue, vctVcRowStatusTable=vctVcRowStatusTable, vctVcfrFastSelectCall=vctVcfrFastSelectCall, vctDnaHgMRowStatusTable=vctDnaHgMRowStatusTable, vctVcOutOfRangeFrmFromSubnet=vctVcOutOfRangeFrmFromSubnet, vctDnaOutNormalCharge=vctDnaOutNormalCharge, vctDnaOutNormalPriority=vctDnaOutNormalPriority, vctDnaHgMHgAddrDataNetworkAddress=vctDnaHgMHgAddrDataNetworkAddress, vctDnaOutPathReliabilitySignal=vctDnaOutPathReliabilitySignal, vctDnaAccountCollection=vctDnaAccountCollection, vctDcCfaIndex=vctDcCfaIndex, vctDnaFastSelectCallsOnly=vctDnaFastSelectCallsOnly, vctDnaIndex=vctDnaIndex, vctDnaHgMHgAddrRowStatusTable=vctDnaHgMHgAddrRowStatusTable, vctDcNfaEntry=vctDcNfaEntry, vctVcPreviousState=vctVcPreviousState, vctVcSubnetRxPktSize=vctVcSubnetRxPktSize, vctVcFrmRetryTimeouts=vctVcFrmRetryTimeouts, vctDnaDefaultSendToNetworkThruputClass=vctDnaDefaultSendToNetworkThruputClass, vcTesterCapabilitiesBE01A=vcTesterCapabilitiesBE01A, vctDnaOutFsUnrestrictedResponse=vctDnaOutFsUnrestrictedResponse, vctVcfrEmissionPriorityToNetwork=vctVcfrEmissionPriorityToNetwork, vctVcfrRowStatus=vctVcfrRowStatus, vctVcfrIndex=vctVcfrIndex, vctDnaOutPathReliabilityOverRide=vctDnaOutPathReliabilityOverRide, vctDnaDefaultSendToNetworkPacketSize=vctDnaDefaultSendToNetworkPacketSize, vctDcCugType=vctDcCugType, vctVcRowStatus=vctVcRowStatus, vctVcIntdEntry=vctVcIntdEntry, vctDnaIncNormalPriorityReverseCharge=vctDnaIncNormalPriorityReverseCharge, vctDnaIncFastSelect=vctDnaIncFastSelect, vctVcfrComponentName=vctVcfrComponentName, vctVcfrCalledLcn=vctVcfrCalledLcn)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-VcTesterMIB", vctVcPriority=vctVcPriority, vcTesterCapabilitiesBE=vcTesterCapabilitiesBE, vctVcDuplicatesFromSubnet=vctVcDuplicatesFromSubnet, vctVcAccountingEnabled=vctVcAccountingEnabled, vctVcfrStorageType=vctVcfrStorageType, vctVcfrRcosToNetwork=vctVcfrRcosToNetwork, vctDcDfaValue=vctDcDfaValue, vctVcLocalTxPktSize=vctVcLocalTxPktSize, vctDnaIncHighPriorityReverseCharge=vctDnaIncHighPriorityReverseCharge, vctDnaDefaultRecvFrmNetworkThruputClass=vctDnaDefaultRecvFrmNetworkThruputClass, vctVcCadEntry=vctVcCadEntry, vctDnaCugRowStatusEntry=vctDnaCugRowStatusEntry, vctDnaCugCugOptionsEntry=vctDnaCugCugOptionsEntry, vctDnaHgMAvailabilityUpdateThreshold=vctDnaHgMAvailabilityUpdateThreshold, vctVcfrPathReliability=vctVcfrPathReliability, vcTesterGroupBE01=vcTesterGroupBE01, vctDcOptionsTable=vctDcOptionsTable, vctVcfrDmepTable=vctVcfrDmepTable, vctDnaHgMHgAddrRowStatus=vctDnaHgMHgAddrRowStatus, vctVcfrOoSeqByteCntExceeded=vctVcfrOoSeqByteCntExceeded, vcTesterCapabilities=vcTesterCapabilities, vctVcfrPeakOoSeqByteCount=vctVcfrPeakOoSeqByteCount, vctVcSubnetRxWindowSize=vctVcSubnetRxWindowSize, vctDnaCallOptionsEntry=vctDnaCallOptionsEntry, vctRowStatus=vctRowStatus, vctDcCfaEntry=vctDcCfaEntry, vctVcIndex=vctVcIndex, vctVcPathReliability=vctVcPathReliability, vctVcIntdTable=vctVcIntdTable, vctVcfr=vctVcfr, vctDnaHgMHgAddrIndex=vctDnaHgMHgAddrIndex, vctDcLocalDna=vctDcLocalDna, vctVcDiagnosticCode=vctVcDiagnosticCode, vctDnaHgMIfTable=vctDnaHgMIfTable)
