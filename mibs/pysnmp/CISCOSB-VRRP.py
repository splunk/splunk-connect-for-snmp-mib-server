#
# PySNMP MIB module CISCOSB-VRRP (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCOSB-VRRP
# Produced by pysmi-0.3.4 at Mon Apr 29 18:08:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ipSpec, = mibBuilder.importSymbols("CISCOSB-IP", "ipSpec")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter64, Integer32, MibIdentifier, Gauge32, ModuleIdentity, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, iso, Counter32, ObjectIdentity, mib_2 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "Integer32", "MibIdentifier", "Gauge32", "ModuleIdentity", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "iso", "Counter32", "ObjectIdentity", "mib-2")
TextualConvention, RowStatus, TimeInterval, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TimeInterval", "DisplayString")
vrrpv3AssociatedIpAddrEntry, vrrpv3OperationsEntry = mibBuilder.importSymbols("VRRPV3-MIB", "vrrpv3AssociatedIpAddrEntry", "vrrpv3OperationsEntry")
rlVrrp = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26))
rlVrrp.setRevisions(('2010-12-09 00:00',))
if mibBuilder.loadTexts: rlVrrp.setLastUpdated('201012090000Z')
if mibBuilder.loadTexts: rlVrrp.setOrganization('Cisco Small Business')
rlVrrpv3OperationsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 1), )
if mibBuilder.loadTexts: rlVrrpv3OperationsTable.setStatus('current')
rlVrrpv3OperationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 1, 1), )
vrrpv3OperationsEntry.registerAugmentions(("CISCOSB-VRRP", "rlVrrpv3OperationsEntry"))
rlVrrpv3OperationsEntry.setIndexNames(*vrrpv3OperationsEntry.getIndexNames())
if mibBuilder.loadTexts: rlVrrpv3OperationsEntry.setStatus('current')
rlVrrpv3OperationsDefaultPrimaryIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 1, 1, 1), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3OperationsDefaultPrimaryIpAddr.setStatus('current')
rlVrrpv3OperationsPrimaryIpAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3OperationsPrimaryIpAddrState.setStatus('current')
rlVrrpv3OperationsVrDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlVrrpv3OperationsVrDescription.setStatus('current')
rlVrrpv3OperationsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlVrrpv3OperationsAdminState.setStatus('current')
rlVrrpv3OperationsVrrpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("version2and3", 1), ("version2", 2), ("version3", 3))).clone('version3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlVrrpv3OperationsVrrpVersion.setStatus('current')
rlVrrpv3OperationsMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3OperationsMasterPriority.setStatus('current')
rlVrrpv3OperationsMasterAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 1, 1, 7), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3OperationsMasterAdvInterval.setStatus('current')
rlVrrpv3OperationsMasterDownInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 1, 1, 8), TimeInterval()).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3OperationsMasterDownInterval.setStatus('current')
rlVrrpv3OperationsSkewTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 1, 1, 9), TimeInterval()).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3OperationsSkewTime.setStatus('current')
rlVrrpv3AssociatedIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 2), )
if mibBuilder.loadTexts: rlVrrpv3AssociatedIpAddrTable.setStatus('current')
rlVrrpv3AssociatedIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 2, 1), )
vrrpv3AssociatedIpAddrEntry.registerAugmentions(("CISCOSB-VRRP", "rlVrrpv3AssociatedIpAddrEntry"))
rlVrrpv3AssociatedIpAddrEntry.setIndexNames(*vrrpv3AssociatedIpAddrEntry.getIndexNames())
if mibBuilder.loadTexts: rlVrrpv3AssociatedIpAddrEntry.setStatus('current')
rlVrrpv3AssociatedIpAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3AssociatedIpAddrState.setStatus('current')
rlVrrpv3CountersTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 3), )
if mibBuilder.loadTexts: rlVrrpv3CountersTable.setStatus('current')
rlVrrpv3CountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 3, 1), ).setIndexNames((0, "CISCOSB-VRRP", "rlVrrpv3CountersIfIndex"))
if mibBuilder.loadTexts: rlVrrpv3CountersEntry.setStatus('current')
rlVrrpv3CountersIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 3, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: rlVrrpv3CountersIfIndex.setStatus('current')
rlVrrpv3CountersChecksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3CountersChecksumErrors.setStatus('current')
rlVrrpv3CountersRcvdPacketsLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3CountersRcvdPacketsLength.setStatus('current')
rlVrrpv3CountersIpTtlErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3CountersIpTtlErrors.setStatus('current')
rlVrrpv3CountersRcvdInvalidTypePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3CountersRcvdInvalidTypePackets.setStatus('current')
rlVrrpv3CountersRcvdInvalidVrrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3CountersRcvdInvalidVrrpId.setStatus('current')
rlVrrpv3CountersProtoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3CountersProtoErrors.setStatus('current')
rlVrrpv3CountersAddressListErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3CountersAddressListErrors.setStatus('current')
rlVrrpv3CountersAdvIntervalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3CountersAdvIntervalErrors.setStatus('current')
rlVrrpv3CountersAuthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3CountersAuthErrors.setStatus('current')
rlVrrpv3CountersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 26, 26, 3, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlVrrpv3CountersRowStatus.setStatus('current')
mibBuilder.exportSymbols("CISCOSB-VRRP", rlVrrpv3OperationsSkewTime=rlVrrpv3OperationsSkewTime, rlVrrp=rlVrrp, rlVrrpv3CountersAddressListErrors=rlVrrpv3CountersAddressListErrors, rlVrrpv3OperationsVrDescription=rlVrrpv3OperationsVrDescription, rlVrrpv3AssociatedIpAddrEntry=rlVrrpv3AssociatedIpAddrEntry, rlVrrpv3CountersRowStatus=rlVrrpv3CountersRowStatus, rlVrrpv3OperationsVrrpVersion=rlVrrpv3OperationsVrrpVersion, rlVrrpv3CountersRcvdPacketsLength=rlVrrpv3CountersRcvdPacketsLength, rlVrrpv3CountersProtoErrors=rlVrrpv3CountersProtoErrors, rlVrrpv3OperationsTable=rlVrrpv3OperationsTable, rlVrrpv3CountersRcvdInvalidVrrpId=rlVrrpv3CountersRcvdInvalidVrrpId, rlVrrpv3CountersAdvIntervalErrors=rlVrrpv3CountersAdvIntervalErrors, rlVrrpv3OperationsDefaultPrimaryIpAddr=rlVrrpv3OperationsDefaultPrimaryIpAddr, rlVrrpv3OperationsEntry=rlVrrpv3OperationsEntry, PYSNMP_MODULE_ID=rlVrrp, rlVrrpv3AssociatedIpAddrState=rlVrrpv3AssociatedIpAddrState, rlVrrpv3CountersIfIndex=rlVrrpv3CountersIfIndex, rlVrrpv3CountersAuthErrors=rlVrrpv3CountersAuthErrors, rlVrrpv3AssociatedIpAddrTable=rlVrrpv3AssociatedIpAddrTable, rlVrrpv3OperationsPrimaryIpAddrState=rlVrrpv3OperationsPrimaryIpAddrState, rlVrrpv3OperationsMasterDownInterval=rlVrrpv3OperationsMasterDownInterval, rlVrrpv3CountersEntry=rlVrrpv3CountersEntry, rlVrrpv3CountersChecksumErrors=rlVrrpv3CountersChecksumErrors, rlVrrpv3CountersRcvdInvalidTypePackets=rlVrrpv3CountersRcvdInvalidTypePackets, rlVrrpv3OperationsMasterAdvInterval=rlVrrpv3OperationsMasterAdvInterval, rlVrrpv3OperationsMasterPriority=rlVrrpv3OperationsMasterPriority, rlVrrpv3CountersTable=rlVrrpv3CountersTable, rlVrrpv3CountersIpTtlErrors=rlVrrpv3CountersIpTtlErrors, rlVrrpv3OperationsAdminState=rlVrrpv3OperationsAdminState)
