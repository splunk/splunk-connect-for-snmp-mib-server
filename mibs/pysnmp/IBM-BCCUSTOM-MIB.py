#
# PySNMP MIB module IBM-BCCUSTOM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBM-BCCUSTOM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:39:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Bits, ObjectIdentity, Counter64, IpAddress, ModuleIdentity, Unsigned32, enterprises, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, Gauge32, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "ObjectIdentity", "Counter64", "IpAddress", "ModuleIdentity", "Unsigned32", "enterprises", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "Gauge32", "iso", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
bcCustom = ModuleIdentity((1, 3, 6, 1, 4, 1, 2, 6, 215))
bcCustom.setRevisions(('2013-10-15 17:30',))
if mibBuilder.loadTexts: bcCustom.setLastUpdated('201310151730Z')
if mibBuilder.loadTexts: bcCustom.setOrganization('Brocade Communications Systems, Inc.,')
bcCustomMibVersion = ObjectIdentity((1, 3, 6, 1, 4, 1, 2, 6, 215, 1))
if mibBuilder.loadTexts: bcCustomMibVersion.setStatus('current')
ports = ObjectIdentity((1, 3, 6, 1, 4, 1, 2, 6, 215, 2))
if mibBuilder.loadTexts: ports.setStatus('current')
firmware = ObjectIdentity((1, 3, 6, 1, 4, 1, 2, 6, 215, 3))
if mibBuilder.loadTexts: firmware.setStatus('current')
files = ObjectIdentity((1, 3, 6, 1, 4, 1, 2, 6, 215, 4))
if mibBuilder.loadTexts: files.setStatus('current')
protocols = ObjectIdentity((1, 3, 6, 1, 4, 1, 2, 6, 215, 5))
if mibBuilder.loadTexts: protocols.setStatus('current')
snmpuser = ObjectIdentity((1, 3, 6, 1, 4, 1, 2, 6, 215, 6))
if mibBuilder.loadTexts: snmpuser.setStatus('current')
license = ObjectIdentity((1, 3, 6, 1, 4, 1, 2, 6, 215, 7))
if mibBuilder.loadTexts: license.setStatus('current')
mibCustomVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 215, 1, 1))
mibMajorMinor = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibMajorMinor.setStatus('current')
iomGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 215, 1, 2))
iomCapability = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iomCapability.setStatus('current')
iomMode = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("managedSwitchMode", 1), ("passthruNativeMode", 2), ("passthruEnhanceMode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iomMode.setStatus('current')
portInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1))
portInformationTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1), )
if mibBuilder.loadTexts: portInformationTable.setStatus('current')
portInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1, 1), ).setIndexNames((0, "IBM-BCCUSTOM-MIB", "portModuleIndex"), (0, "IBM-BCCUSTOM-MIB", "portModuleType"))
if mibBuilder.loadTexts: portInformationEntry.setStatus('current')
portModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModuleIndex.setStatus('current')
portModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unUsed", 0), ("externalPort", 1), ("externalManagementPort", 2), ("externalDualPort", 3), ("bladePort", 4), ("mmManagementPort", 5), ("uplinkPort", 6), ("interModulePort", 7), ("interModuleManagementPort", 8), ("interModuleDualPort", 9), ("interModuleExternalBridgePort", 10), ("interModuleInternalBridgePort", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModuleType.setStatus('current')
portModuleLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("initialized", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portModuleLinkState.setStatus('current')
portModuleLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portModuleLabel.setStatus('current')
portModuleSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 10, 20, 40, 60, 80, 100, 140, 160, 200, 400, 560, 600, 800, 1000, 1120, 1680))).clone(namedValues=NamedValues(("autoduplex", 0), ("hundred-Mbpsfullduplex", 1), ("one-Gbpsfullduplex", 10), ("two-Gbpsfullduplex", 20), ("four-Gbpsfullduplex", 40), ("six-Gbpsfullduplex", 60), ("eight-Gbpsfullduplex", 80), ("ten-Gbpsfullduplex", 100), ("fourteen-Gbpsfullduplex", 140), ("sixteen-Gbpsfullduplex", 160), ("twenty-Gbpsfullduplex", 200), ("fourty-Gbpsfullduplex", 400), ("fivtysix-Gbpsfullduplex", 560), ("sixty-Gbpsfullduplex", 600), ("eighty-Gbpsfullduplex", 800), ("hundred-Gbpsfullduplex", 1000), ("hundredandtwelve-Gbpsfullduplex", 1120), ("hundredandsixtyeight-Gbpsfullduplex", 1680)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portModuleSpeed.setStatus('current')
portModuleMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 32, 40, 48, 255))).clone(namedValues=NamedValues(("copper", 0), ("serdes", 1), ("opticalShortHaul", 32), ("opticalInterHaul", 40), ("opticalLongHaul", 48), ("other", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModuleMedia.setStatus('current')
portModuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32, 48, 64, 80, 112, 120))).clone(namedValues=NamedValues(("ethernet", 16), ("fibreChannel", 32), ("scalability", 48), ("infiniband", 64), ("pciExpress", 80), ("myrinet", 112), ("serial", 120)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModuleProtocol.setStatus('current')
portModuleTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModuleTotal.setStatus('current')
portModuleSpeedList = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModuleSpeedList.setStatus('current')
portModuleReal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModuleReal.setStatus('current')
portModuleRelative = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModuleRelative.setStatus('current')
portModuleLaneCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 12, 16))).clone(namedValues=NamedValues(("onex", 1), ("twox", 2), ("fourx", 4), ("eightx", 8), ("twelvex", 12), ("sixteenx", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModuleLaneCount.setStatus('current')
portModuleCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModuleCableLength.setStatus('current')
portModuleCableManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModuleCableManufacturer.setStatus('current')
portModuleCableCompatiblity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("incompatible", 0), ("compatible", 1), ("compatibleButNotRecommnded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModuleCableCompatiblity.setStatus('current')
portModuleCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModuleCableType.setStatus('current')
portModuleDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("sdr", 0), ("ddr", 1), ("qdr", 2), ("edr", 3), ("fdr", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModuleDataRate.setStatus('current')
portModuleLicensedState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("notLicensed", 1), ("licensed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModuleLicensedState.setStatus('current')
firmwareOps = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 215, 3, 1))
fwInformationTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 215, 3, 1, 1), )
if mibBuilder.loadTexts: fwInformationTable.setStatus('current')
fwInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 215, 3, 1, 1, 1), ).setIndexNames((0, "IBM-BCCUSTOM-MIB", "fwImageIndex"))
if mibBuilder.loadTexts: fwInformationEntry.setStatus('current')
fwImageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwImageIndex.setStatus('current')
fwImageInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 3, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwImageInformation.setStatus('current')
fwImageFileLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mmServer", 0), ("externalServerRequired", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwImageFileLocation.setStatus('current')
fwImageProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 3, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwImageProtocols.setStatus('current')
fwImageIsUpdateable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("updateable", 0), ("notupdateable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwImageIsUpdateable.setStatus('current')
firmwareCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 215, 3, 1, 2))
firmwareImageCnt = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareImageCnt.setStatus('current')
firmwareImageNum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareImageNum.setStatus('current')
firmwareAction = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 3, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 0), ("get", 1), ("rsvd2", 2), ("rsvd3", 3), ("rsvd4", 4), ("rsvd5", 5), ("rsvd6", 6), ("rsvd7", 7), ("rsvd8", 8), ("rsvd9", 9), ("rsvd10", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareAction.setStatus('current')
fwUpdateOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 3, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 101, 201))).clone(namedValues=NamedValues(("noOperation", 0), ("success", 101), ("failure", 201)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwUpdateOperationStatus.setStatus('current')
firmwareServer = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 3, 1, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareServer.setStatus('current')
fwUpdateImageActivation = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 3, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fwUpdateImageActivation.setStatus('current')
fwUpdateImageUri = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 3, 1, 2, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fwUpdateImageUri.setStatus('current')
fwUpdateImageSftpRsaKey = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 3, 1, 2, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fwUpdateImageSftpRsaKey.setStatus('deprecated')
systemFile = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 215, 4, 1))
systemFileInformationTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 215, 4, 1, 1), )
if mibBuilder.loadTexts: systemFileInformationTable.setStatus('current')
systemFileInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 215, 4, 1, 1, 1), ).setIndexNames((0, "IBM-BCCUSTOM-MIB", "systemFileIndex"))
if mibBuilder.loadTexts: systemFileInformationEntry.setStatus('current')
systemFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileIndex.setStatus('current')
systemFileInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 4, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileInformation.setStatus('current')
systemFileInformationProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 4, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileInformationProtocols.setStatus('current')
systemFileCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 215, 4, 2))
systemFileCmdCnt = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileCmdCnt.setStatus('current')
systemFileCmdFilename = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 4, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFileCmdFilename.setStatus('deprecated')
systemFileCmdMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFileCmdMaxSize.setStatus('current')
systemFileCmdUri = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 4, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFileCmdUri.setStatus('current')
systemFileCmdSftpRsaKey = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 4, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFileCmdSftpRsaKey.setStatus('deprecated')
systemFileCmdExecuteOp = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 4, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("ssget", 1), ("cfgget", 2), ("cfgput", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFileCmdExecuteOp.setStatus('current')
systemFileOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 4, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50, 51, 101, 201))).clone(namedValues=NamedValues(("noOperation", 0), ("initiated", 1), ("generationcompleted", 50), ("transfer", 51), ("success", 101), ("failed", 201)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileOperationStatus.setStatus('current')
systemFileOpStatusString = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 4, 2, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileOpStatusString.setStatus('current')
systemFileActivation = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 4, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noOp", 0), ("activate", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFileActivation.setStatus('current')
ntpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 215, 5, 1))
ntpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpEnable.setStatus('current')
ntpSrvIpv6Address = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpSrvIpv6Address.setStatus('current')
ntpSrvIpv4Address = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpSrvIpv4Address.setStatus('current')
ntpUpdateFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpUpdateFrequency.setStatus('current')
ntpv3AuthConfig = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpv3AuthConfig.setStatus('current')
ntpv3AuthEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpv3AuthEnable.setStatus('current')
iomSnmpv3Cfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 215, 6, 1))
iomSnmpv3UserName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iomSnmpv3UserName.setStatus('current')
iomSnmpv3UserAuthProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("sha", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iomSnmpv3UserAuthProtocol.setStatus('current')
iomSnmpv3UserAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iomSnmpv3UserAuthPassword.setStatus('current')
iomSnmpv3UserPrivacyProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("aes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iomSnmpv3UserPrivacyProtocol.setStatus('current')
iomSnmpv3UserPrivacyPassword = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iomSnmpv3UserPrivacyPassword.setStatus('current')
iomSnmpv3UserAccessType = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("no-access", 0), ("get-traps", 1), ("get-set-traps", 2), ("traps-only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iomSnmpv3UserAccessType.setStatus('current')
iomSnmpv3UserIPv6TrapAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 6, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iomSnmpv3UserIPv6TrapAddress.setStatus('current')
iomSnmpv3UserIPv4TrapAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 6, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iomSnmpv3UserIPv4TrapAddress.setStatus('current')
iomSnmpv3UserState = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iomSnmpv3UserState.setStatus('current')
iomSnmpv3UserStateStatusString = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 6, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: iomSnmpv3UserStateStatusString.setStatus('current')
iomSnmpv3TestTrap = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("traptest", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iomSnmpv3TestTrap.setStatus('current')
iomSnmpv3tResetUser = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 215, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iomSnmpv3tResetUser.setStatus('current')
licenseKeyInformationTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 215, 7, 1), )
if mibBuilder.loadTexts: licenseKeyInformationTable.setStatus('current')
licenseKeyInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 215, 7, 1, 1), ).setIndexNames((0, "IBM-BCCUSTOM-MIB", "licenseKeyIndex"))
if mibBuilder.loadTexts: licenseKeyInformationEntry.setStatus('current')
licenseKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyIndex.setStatus('current')
licenseKeyDescStringInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 7, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyDescStringInformation.setStatus('current')
licenseKeyCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 215, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("valid", 1), ("notValid", 2), ("expired", 3), ("usageExceeded", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyCurrentState.setStatus('current')
mibBuilder.exportSymbols("IBM-BCCUSTOM-MIB", systemFileInformationEntry=systemFileInformationEntry, systemFileInformation=systemFileInformation, licenseKeyIndex=licenseKeyIndex, PYSNMP_MODULE_ID=bcCustom, ntpv3AuthEnable=ntpv3AuthEnable, fwImageInformation=fwImageInformation, fwImageIndex=fwImageIndex, portModuleSpeedList=portModuleSpeedList, protocols=protocols, licenseKeyDescStringInformation=licenseKeyDescStringInformation, firmwareImageNum=firmwareImageNum, systemFileCmdExecuteOp=systemFileCmdExecuteOp, ntpv3AuthConfig=ntpv3AuthConfig, iomSnmpv3UserStateStatusString=iomSnmpv3UserStateStatusString, licenseKeyInformationTable=licenseKeyInformationTable, portModuleLaneCount=portModuleLaneCount, mibMajorMinor=mibMajorMinor, systemFileCmdCnt=systemFileCmdCnt, ports=ports, licenseKeyInformationEntry=licenseKeyInformationEntry, firmwareOps=firmwareOps, portInformationTable=portInformationTable, portModuleLabel=portModuleLabel, ntpUpdateFrequency=ntpUpdateFrequency, firmware=firmware, iomMode=iomMode, portModuleType=portModuleType, portModuleLinkState=portModuleLinkState, ibm=ibm, systemFileCmdSftpRsaKey=systemFileCmdSftpRsaKey, ntpSrvIpv4Address=ntpSrvIpv4Address, iomSnmpv3UserName=iomSnmpv3UserName, fwUpdateOperationStatus=fwUpdateOperationStatus, fwImageFileLocation=fwImageFileLocation, ntpSrvIpv6Address=ntpSrvIpv6Address, iomSnmpv3UserState=iomSnmpv3UserState, firmwareImageCnt=firmwareImageCnt, firmwareAction=firmwareAction, licenseKeyCurrentState=licenseKeyCurrentState, systemFileCmdFilename=systemFileCmdFilename, systemFileOperationStatus=systemFileOperationStatus, portModuleRelative=portModuleRelative, iomSnmpv3Cfg=iomSnmpv3Cfg, fwImageProtocols=fwImageProtocols, ibmProd=ibmProd, fwUpdateImageSftpRsaKey=fwUpdateImageSftpRsaKey, portModuleCableManufacturer=portModuleCableManufacturer, iomSnmpv3TestTrap=iomSnmpv3TestTrap, iomSnmpv3UserAuthPassword=iomSnmpv3UserAuthPassword, fwInformationTable=fwInformationTable, fwUpdateImageActivation=fwUpdateImageActivation, systemFileInformationProtocols=systemFileInformationProtocols, systemFileCmdMaxSize=systemFileCmdMaxSize, systemFileActivation=systemFileActivation, firmwareServer=firmwareServer, iomSnmpv3tResetUser=iomSnmpv3tResetUser, systemFileCmd=systemFileCmd, portInformation=portInformation, ntpEnable=ntpEnable, portModuleProtocol=portModuleProtocol, portModuleReal=portModuleReal, portModuleDataRate=portModuleDataRate, systemFile=systemFile, iomSnmpv3UserAuthProtocol=iomSnmpv3UserAuthProtocol, systemFileOpStatusString=systemFileOpStatusString, ntpConfig=ntpConfig, portModuleTotal=portModuleTotal, files=files, portModuleCableType=portModuleCableType, fwUpdateImageUri=fwUpdateImageUri, iomSnmpv3UserIPv4TrapAddress=iomSnmpv3UserIPv4TrapAddress, portModuleMedia=portModuleMedia, portModuleCableLength=portModuleCableLength, portModuleIndex=portModuleIndex, fwInformationEntry=fwInformationEntry, systemFileIndex=systemFileIndex, bcCustom=bcCustom, firmwareCmd=firmwareCmd, iomSnmpv3UserPrivacyProtocol=iomSnmpv3UserPrivacyProtocol, systemFileInformationTable=systemFileInformationTable, iomSnmpv3UserPrivacyPassword=iomSnmpv3UserPrivacyPassword, systemFileCmdUri=systemFileCmdUri, portModuleLicensedState=portModuleLicensedState, portInformationEntry=portInformationEntry, iomSnmpv3UserIPv6TrapAddress=iomSnmpv3UserIPv6TrapAddress, fwImageIsUpdateable=fwImageIsUpdateable, iomSnmpv3UserAccessType=iomSnmpv3UserAccessType, snmpuser=snmpuser, bcCustomMibVersion=bcCustomMibVersion, iomCapability=iomCapability, license=license, portModuleCableCompatiblity=portModuleCableCompatiblity, mibCustomVersion=mibCustomVersion, iomGlobal=iomGlobal, portModuleSpeed=portModuleSpeed)
