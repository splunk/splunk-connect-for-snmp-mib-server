#
# PySNMP MIB module Cisco90Series-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Cisco90Series-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:20:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Integer32, NotificationType, NotificationType, enterprises, ObjectIdentity, iso, Unsigned32, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, IpAddress, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "NotificationType", "NotificationType", "enterprises", "ObjectIdentity", "iso", "Unsigned32", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "IpAddress", "Counter32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

ciscoTelesend = MibIdentifier((1, 3, 6, 1, 4, 1, 1570))
frMux = MibIdentifier((1, 3, 6, 1, 4, 1, 1570, 1))
frxSys = MibIdentifier((1, 3, 6, 1, 4, 1, 1570, 1, 1))
frxDefault = MibIdentifier((1, 3, 6, 1, 4, 1, 1570, 1, 2))
frxBank = MibIdentifier((1, 3, 6, 1, 4, 1, 1570, 1, 3))
frxChUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 1570, 1, 4))
frxMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 1570, 1, 5))
frxPort = MibIdentifier((1, 3, 6, 1, 4, 1, 1570, 1, 6))
frxSysDescr = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxSysDescr.setStatus('mandatory')
frxClockHour = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxClockHour.setStatus('mandatory')
frxClockMin = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxClockMin.setStatus('mandatory')
frxClockSec = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxClockSec.setStatus('mandatory')
frxUpTime = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxUpTime.setStatus('mandatory')
frxAdminContact = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxAdminContact.setStatus('mandatory')
frxSysName = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxSysName.setStatus('mandatory')
frxSysLoc = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxSysLoc.setStatus('mandatory')
frxSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxSysVersion.setStatus('mandatory')
frxUPerfTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enableUPerfTrap", 1), ("disableUPerfTrap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxUPerfTrapEnable.setStatus('mandatory')
frxAgtLinkErrors = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxAgtLinkErrors.setStatus('mandatory')
frxAgtProtErrors = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxAgtProtErrors.setStatus('mandatory')
frxAgtChInactive = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxAgtChInactive.setStatus('mandatory')
frxAgtChStatus = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxAgtChStatus.setStatus('mandatory')
frxDefaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enableAutoLoad", 1), ("disableAutoLoad", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDefaultEnable.setStatus('mandatory')
frxDefaultTrap = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enableConfigureTrap", 1), ("disableConfigureTrap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDefaultTrap.setStatus('mandatory')
frxDConfigSrc = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annexD", 1), ("snmp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDConfigSrc.setStatus('mandatory')
frxDMgtT391 = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDMgtT391.setStatus('mandatory')
frxDMgtT392 = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDMgtT392.setStatus('mandatory')
frxDMgtN391 = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDMgtN391.setStatus('mandatory')
frxDMgtN392 = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDMgtN392.setStatus('mandatory')
frxDMgtN393 = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDMgtN393.setStatus('mandatory')
frxDPortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("use56kbps", 1), ("use64kbps", 2), ("use128kbps", 3), ("use144kbps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDPortSpeed.setStatus('mandatory')
frxDPortProtocol = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frameRelay", 1), ("ppp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDPortProtocol.setStatus('mandatory')
frxDCktCIR = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1544000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDCktCIR.setStatus('mandatory')
frxDCktBc = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDCktBc.setStatus('mandatory')
frxDCktBe = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777212))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDCktBe.setStatus('mandatory')
frxBankTable = MibTable((1, 3, 6, 1, 4, 1, 1570, 1, 3, 1), )
if mibBuilder.loadTexts: frxBankTable.setStatus('mandatory')
frxBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1570, 1, 3, 1, 1), ).setIndexNames((0, "Cisco90Series-MIB", "frxBankIndex"))
if mibBuilder.loadTexts: frxBankEntry.setStatus('mandatory')
frxBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxBankIndex.setStatus('mandatory')
frxBankType = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("d4", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxBankType.setStatus('mandatory')
frxChUTable = MibTable((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1), )
if mibBuilder.loadTexts: frxChUTable.setStatus('mandatory')
frxChUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1), ).setIndexNames((0, "Cisco90Series-MIB", "frxBankIndex"), (0, "Cisco90Series-MIB", "frxChUIndex"))
if mibBuilder.loadTexts: frxChUEntry.setStatus('mandatory')
frxChUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxChUIndex.setStatus('mandatory')
frxChUType = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100))).clone(namedValues=NamedValues(("cisco90i", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxChUType.setStatus('mandatory')
frxChUVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxChUVersion.setStatus('mandatory')
frxSigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("annexD", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxSigProtocol.setStatus('mandatory')
frxConfigSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annexD", 1), ("snmp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxConfigSrc.setStatus('mandatory')
frxDLCIAdLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("twoOctetDlci", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDLCIAdLen.setStatus('mandatory')
frxNetInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetInOctets.setStatus('mandatory')
frxNetOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetOutOctets.setStatus('mandatory')
frxNetBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetBadFrames.setStatus('mandatory')
frxNetHDLCEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetHDLCEs.setStatus('mandatory')
frxNetCRCEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetCRCEs.setStatus('mandatory')
frxNetLinkEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetLinkEs.setStatus('mandatory')
frxNetFrShEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetFrShEs.setStatus('mandatory')
frxNetFrLgEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetFrLgEs.setStatus('mandatory')
frxNetPPPEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetPPPEs.setStatus('mandatory')
frxNetBufEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetBufEs.setStatus('mandatory')
frxMgtTable = MibTable((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1), )
if mibBuilder.loadTexts: frxMgtTable.setStatus('mandatory')
frxMgtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1), ).setIndexNames((0, "Cisco90Series-MIB", "frxBankIndex"), (0, "Cisco90Series-MIB", "frxChUIndex"))
if mibBuilder.loadTexts: frxMgtEntry.setStatus('mandatory')
frxPortsInSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPortsInSvc.setStatus('mandatory')
frxMgtT391 = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxMgtT391.setStatus('mandatory')
frxMgtT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxMgtT392.setStatus('mandatory')
frxMgtN391 = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxMgtN391.setStatus('mandatory')
frxMgtN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxMgtN392.setStatus('mandatory')
frxMgtN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxMgtN393.setStatus('mandatory')
frxNetLinkErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetLinkErrors.setStatus('mandatory')
frxNetProtErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetProtErrors.setStatus('mandatory')
frxNetChInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetChInactive.setStatus('mandatory')
frxNetChStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetChStatus.setStatus('mandatory')
frxMgtPortTable = MibTable((1, 3, 6, 1, 4, 1, 1570, 1, 5, 2), )
if mibBuilder.loadTexts: frxMgtPortTable.setStatus('mandatory')
frxMgtPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1570, 1, 5, 2, 1), ).setIndexNames((0, "Cisco90Series-MIB", "frxBankIndex"), (0, "Cisco90Series-MIB", "frxChUIndex"), (0, "Cisco90Series-MIB", "frxPortIndex"))
if mibBuilder.loadTexts: frxMgtPortEntry.setStatus('mandatory')
frxPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPortIndex.setStatus('mandatory')
frxPortLinkErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPortLinkErrors.setStatus('mandatory')
frxPortProtErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPortProtErrors.setStatus('mandatory')
frxPortChInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPortChInactive.setStatus('mandatory')
frxPortTable = MibTable((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1), )
if mibBuilder.loadTexts: frxPortTable.setStatus('mandatory')
frxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1), ).setIndexNames((0, "Cisco90Series-MIB", "frxBankIndex"), (0, "Cisco90Series-MIB", "frxChUIndex"), (0, "Cisco90Series-MIB", "frxPortIndex"))
if mibBuilder.loadTexts: frxPortEntry.setStatus('mandatory')
frxPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("use56kbps", 1), ("use64kbps", 2), ("use128kbps", 3), ("use144kbps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxPortSpeed.setStatus('mandatory')
frxPortProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frameRelay", 1), ("ppp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxPortProtocol.setStatus('mandatory')
frxDSLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loopDown", 1), ("dslSyncOnly", 2), ("loopUpInactive", 3), ("loopUp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLStatus.setStatus('mandatory')
frxPVCAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPVCAssigned.setStatus('mandatory')
frxLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxLastChange.setStatus('mandatory')
frxBrite = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxBrite.setStatus('mandatory')
frxDSLInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLInOctets.setStatus('mandatory')
frxDSLOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLOutOctets.setStatus('mandatory')
frxT1InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxT1InOctets.setStatus('mandatory')
frxT1OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxT1OutOctets.setStatus('mandatory')
frxDSLBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLBadFrames.setStatus('mandatory')
frxDSLHDLCEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLHDLCEs.setStatus('mandatory')
frxDSLCRCEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLCRCEs.setStatus('mandatory')
frxDSLLinkEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLLinkEs.setStatus('mandatory')
frxDSLFrShEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLFrShEs.setStatus('mandatory')
frxDSLFrLgEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLFrLgEs.setStatus('mandatory')
frxDSLDLCIEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLDLCIEs.setStatus('mandatory')
frxTxBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxTxBuf.setStatus('mandatory')
frxRxBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxRxBuf.setStatus('mandatory')
frxPortNetEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPortNetEs.setStatus('mandatory')
frxCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2), )
if mibBuilder.loadTexts: frxCircuitTable.setStatus('mandatory')
frxCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1), ).setIndexNames((0, "Cisco90Series-MIB", "frxBankIndex"), (0, "Cisco90Series-MIB", "frxChUIndex"), (0, "Cisco90Series-MIB", "frxPortIndex"), (0, "Cisco90Series-MIB", "frxPvcIndex"))
if mibBuilder.loadTexts: frxCircuitEntry.setStatus('mandatory')
frxPvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPvcIndex.setStatus('mandatory')
frxCktCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1544000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxCktCIR.setStatus('mandatory')
frxCktBc = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxCktBc.setStatus('mandatory')
frxCktBe = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxCktBe.setStatus('mandatory')
frxFarEndOpStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxFarEndOpStat.setStatus('mandatory')
frxCktInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxCktInOctets.setStatus('mandatory')
frxCktOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxCktOutOctets.setStatus('mandatory')
frxCktInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxCktInFrames.setStatus('mandatory')
frxCktOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxCktOutFrames.setStatus('mandatory')
frxCktDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxCktDiscards.setStatus('mandatory')
frxUEocTable = MibTable((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3), )
if mibBuilder.loadTexts: frxUEocTable.setStatus('mandatory')
frxUEocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1), ).setIndexNames((0, "Cisco90Series-MIB", "frxBankIndex"), (0, "Cisco90Series-MIB", "frxChUIndex"))
if mibBuilder.loadTexts: frxUEocEntry.setStatus('mandatory')
frxTestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxTestPort.setStatus('mandatory')
frxTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("loopbackAndBert", 1), ("bertOnly", 2), ("sendCorruptCRC", 3), ("loopbackOnly", 4), ("localLoopAllPorts", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxTestType.setStatus('mandatory')
frxLoopLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 1, 2, 3, 4, 5, 6, 8))).clone(namedValues=NamedValues(("localFrx", 7), ("briteCard1", 1), ("briteCard2", 2), ("briteCard3", 3), ("briteCard4", 4), ("briteCard5", 5), ("briteCard6", 6), ("nt1", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxLoopLoc.setStatus('mandatory')
frxLoopCh = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b1only", 1), ("b2only", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxLoopCh.setStatus('mandatory')
frxStartTest = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopTest", 1), ("startTest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxStartTest.setStatus('mandatory')
frxBertRst = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("resetBert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxBertRst.setStatus('mandatory')
frxBertBE = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxBertBE.setStatus('mandatory')
frxBertTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxBertTestTime.setStatus('mandatory')
frxTestInProg = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("testInProgress", 1), ("normalOperation", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxTestInProg.setStatus('mandatory')
frxUThrTable = MibTable((1, 3, 6, 1, 4, 1, 1570, 1, 6, 4), )
if mibBuilder.loadTexts: frxUThrTable.setStatus('mandatory')
frxUThrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1570, 1, 6, 4, 1), ).setIndexNames((0, "Cisco90Series-MIB", "frxBankIndex"), (0, "Cisco90Series-MIB", "frxChUIndex"), (0, "Cisco90Series-MIB", "frxPortIndex"), (0, "Cisco90Series-MIB", "frxPAddrIndex"))
if mibBuilder.loadTexts: frxUThrEntry.setStatus('mandatory')
frxPAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("localFrx", 7), ("briteCard1", 1), ("briteCard2", 2), ("briteCard3", 3), ("briteCard4", 4), ("briteCard5", 5), ("briteCard6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPAddrIndex.setStatus('mandatory')
frxChEsTh = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxChEsTh.setStatus('mandatory')
frxCdEsTh = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxCdEsTh.setStatus('mandatory')
frxChSesTh = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxChSesTh.setStatus('mandatory')
frxCdSesTh = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxCdSesTh.setStatus('mandatory')
frxAlertMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxAlertMask.setStatus('mandatory')
frxThCond = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxThCond.setStatus('mandatory')
frxUPerfTable = MibTable((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5), )
if mibBuilder.loadTexts: frxUPerfTable.setStatus('mandatory')
frxUPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1), ).setIndexNames((0, "Cisco90Series-MIB", "frxBankIndex"), (0, "Cisco90Series-MIB", "frxChUIndex"), (0, "Cisco90Series-MIB", "frxPortIndex"), (0, "Cisco90Series-MIB", "frxPAddrIndex"))
if mibBuilder.loadTexts: frxUPerfEntry.setStatus('mandatory')
frxResetPM = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("resetPM", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxResetPM.setStatus('mandatory')
frxPMtype = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("segmentedPM", 1), ("pathPM", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPMtype.setStatus('mandatory')
frxChEsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxChEsTx.setStatus('mandatory')
frxChEsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxChEsRx.setStatus('mandatory')
frxPhEsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPhEsTx.setStatus('mandatory')
frxPhEsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPhEsRx.setStatus('mandatory')
frxH2EsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH2EsTx.setStatus('mandatory')
frxH2EsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH2EsRx.setStatus('mandatory')
frxH3EsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH3EsTx.setStatus('mandatory')
frxH3EsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH3EsRx.setStatus('mandatory')
frxH4EsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH4EsTx.setStatus('mandatory')
frxH4EsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH4EsRx.setStatus('mandatory')
frxH5EsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH5EsTx.setStatus('mandatory')
frxH5EsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH5EsRx.setStatus('mandatory')
frxH6EsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH6EsTx.setStatus('mandatory')
frxH6EsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH6EsRx.setStatus('mandatory')
frxH7EsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH7EsTx.setStatus('mandatory')
frxH7EsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH7EsRx.setStatus('mandatory')
frxH8EsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH8EsTx.setStatus('mandatory')
frxH8EsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH8EsRx.setStatus('mandatory')
frxCdEsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxCdEsTx.setStatus('mandatory')
frxCdEsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxCdEsRx.setStatus('mandatory')
frxPdEsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPdEsTx.setStatus('mandatory')
frxPdEsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPdEsRx.setStatus('mandatory')
frxChSesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxChSesTx.setStatus('mandatory')
frxChSesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxChSesRx.setStatus('mandatory')
frxPhSesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPhSesTx.setStatus('mandatory')
frxPhSesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPhSesRx.setStatus('mandatory')
frxCdSesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxCdSesTx.setStatus('mandatory')
frxCdSesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxCdSesRx.setStatus('mandatory')
frxPdSesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPdSesTx.setStatus('mandatory')
frxPdSesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPdSesRx.setStatus('mandatory')
frxChBeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxChBeTx.setStatus('mandatory')
frxChBeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxChBeRx.setStatus('mandatory')
frxPhBeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPhBeTx.setStatus('mandatory')
frxPhBeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPhBeRx.setStatus('mandatory')
frxDownloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 1570, 1) + (0,1)).setObjects(("Cisco90Series-MIB", "frxBankIndex"), ("Cisco90Series-MIB", "frxChUIndex"))
frxUPerfTrap = NotificationType((1, 3, 6, 1, 4, 1, 1570, 1) + (0,2)).setObjects(("Cisco90Series-MIB", "frxBankIndex"), ("Cisco90Series-MIB", "frxChUIndex"))
frxInsertChUTrap = NotificationType((1, 3, 6, 1, 4, 1, 1570, 1) + (0,3)).setObjects(("Cisco90Series-MIB", "frxBankIndex"), ("Cisco90Series-MIB", "frxChUIndex"))
frxRemoveChUTrap = NotificationType((1, 3, 6, 1, 4, 1, 1570, 1) + (0,4)).setObjects(("Cisco90Series-MIB", "frxBankIndex"), ("Cisco90Series-MIB", "frxChUIndex"))
frxDConfigFailed = NotificationType((1, 3, 6, 1, 4, 1, 1570, 1) + (0,5)).setObjects(("Cisco90Series-MIB", "frxBankIndex"), ("Cisco90Series-MIB", "frxChUIndex"))
mibBuilder.exportSymbols("Cisco90Series-MIB", frxNetLinkErrors=frxNetLinkErrors, frxTestType=frxTestType, frxDSLFrShEs=frxDSLFrShEs, frxPhSesRx=frxPhSesRx, frxInsertChUTrap=frxInsertChUTrap, frxPdSesTx=frxPdSesTx, frxH2EsTx=frxH2EsTx, frxDCktBc=frxDCktBc, frxH4EsRx=frxH4EsRx, frxPortsInSvc=frxPortsInSvc, frxDMgtN392=frxDMgtN392, frxDSLOutOctets=frxDSLOutOctets, frxNetProtErrors=frxNetProtErrors, frxChEsTh=frxChEsTh, frxMgtT391=frxMgtT391, frxCircuitEntry=frxCircuitEntry, frxPMtype=frxPMtype, frxTestPort=frxTestPort, frxNetOutOctets=frxNetOutOctets, frxNetPPPEs=frxNetPPPEs, frxH3EsTx=frxH3EsTx, frxChUTable=frxChUTable, frxMgtN391=frxMgtN391, frxSigProtocol=frxSigProtocol, frxMgtT392=frxMgtT392, frxH3EsRx=frxH3EsRx, frxPAddrIndex=frxPAddrIndex, frxDefaultTrap=frxDefaultTrap, frxPhSesTx=frxPhSesTx, frxT1OutOctets=frxT1OutOctets, frxPhBeTx=frxPhBeTx, frxNetFrShEs=frxNetFrShEs, frxUEocTable=frxUEocTable, frxChBeTx=frxChBeTx, frxH6EsRx=frxH6EsRx, frxUpTime=frxUpTime, frxSysLoc=frxSysLoc, frxDSLStatus=frxDSLStatus, frxPortEntry=frxPortEntry, frxCdSesTh=frxCdSesTh, frxNetChInactive=frxNetChInactive, frxPort=frxPort, frxPvcIndex=frxPvcIndex, frxDConfigFailed=frxDConfigFailed, frxBertRst=frxBertRst, frxBankType=frxBankType, frxPortTable=frxPortTable, frxCircuitTable=frxCircuitTable, frxH8EsTx=frxH8EsTx, frxDSLInOctets=frxDSLInOctets, frxBrite=frxBrite, frxUPerfTrapEnable=frxUPerfTrapEnable, frxDLCIAdLen=frxDLCIAdLen, frxUThrEntry=frxUThrEntry, frxChUVersion=frxChUVersion, frxChBeRx=frxChBeRx, frxPhEsTx=frxPhEsTx, frxClockHour=frxClockHour, frxDPortSpeed=frxDPortSpeed, frxDSLFrLgEs=frxDSLFrLgEs, frxDMgtN391=frxDMgtN391, frxNetBufEs=frxNetBufEs, frxBertTestTime=frxBertTestTime, frxBankIndex=frxBankIndex, frxCdSesRx=frxCdSesRx, frxBankEntry=frxBankEntry, frxResetPM=frxResetPM, frxSys=frxSys, frxAgtLinkErrors=frxAgtLinkErrors, frxNetCRCEs=frxNetCRCEs, frxPdEsTx=frxPdEsTx, frxBank=frxBank, frxDCktCIR=frxDCktCIR, frxCktInOctets=frxCktInOctets, frxPortSpeed=frxPortSpeed, frxH8EsRx=frxH8EsRx, frxMgtPortEntry=frxMgtPortEntry, frxPdSesRx=frxPdSesRx, frxRemoveChUTrap=frxRemoveChUTrap, frxNetBadFrames=frxNetBadFrames, frxLoopLoc=frxLoopLoc, frxCdSesTx=frxCdSesTx, frxChSesTh=frxChSesTh, frxH7EsTx=frxH7EsTx, frxDPortProtocol=frxDPortProtocol, frxMgtPortTable=frxMgtPortTable, frxDConfigSrc=frxDConfigSrc, frxCktDiscards=frxCktDiscards, frxThCond=frxThCond, frxPortLinkErrors=frxPortLinkErrors, frxChEsRx=frxChEsRx, frxTestInProg=frxTestInProg, frxDSLLinkEs=frxDSLLinkEs, frxSysName=frxSysName, frxH5EsTx=frxH5EsTx, frxNetFrLgEs=frxNetFrLgEs, frxCktOutFrames=frxCktOutFrames, frxPortIndex=frxPortIndex, frxAgtChInactive=frxAgtChInactive, frxCdEsRx=frxCdEsRx, DisplayString=DisplayString, frxCktCIR=frxCktCIR, frxPortProtocol=frxPortProtocol, frxH7EsRx=frxH7EsRx, frxPVCAssigned=frxPVCAssigned, frxPortNetEs=frxPortNetEs, frxCdEsTx=frxCdEsTx, frxUThrTable=frxUThrTable, frxH4EsTx=frxH4EsTx, frxAdminContact=frxAdminContact, frxChUEntry=frxChUEntry, frxFarEndOpStat=frxFarEndOpStat, frxDMgtT392=frxDMgtT392, frxUEocEntry=frxUEocEntry, frxMgtEntry=frxMgtEntry, frMux=frMux, frxTxBuf=frxTxBuf, ciscoTelesend=ciscoTelesend, frxChSesRx=frxChSesRx, frxNetHDLCEs=frxNetHDLCEs, frxBankTable=frxBankTable, frxSysVersion=frxSysVersion, frxMgtN393=frxMgtN393, frxCktBc=frxCktBc, frxChUIndex=frxChUIndex, frxChSesTx=frxChSesTx, frxPortChInactive=frxPortChInactive, frxChUnit=frxChUnit, frxNetInOctets=frxNetInOctets, frxPhEsRx=frxPhEsRx, frxH2EsRx=frxH2EsRx, frxMgtN392=frxMgtN392, frxDSLCRCEs=frxDSLCRCEs, frxLastChange=frxLastChange, frxDownloadTrap=frxDownloadTrap, frxDSLHDLCEs=frxDSLHDLCEs, frxDefault=frxDefault, frxH5EsRx=frxH5EsRx, frxT1InOctets=frxT1InOctets, frxRxBuf=frxRxBuf, frxClockMin=frxClockMin, frxH6EsTx=frxH6EsTx, frxCktInFrames=frxCktInFrames, frxClockSec=frxClockSec, frxUPerfEntry=frxUPerfEntry, frxCktBe=frxCktBe, frxMgt=frxMgt, frxNetChStatus=frxNetChStatus, frxChUType=frxChUType, frxConfigSrc=frxConfigSrc, frxDMgtN393=frxDMgtN393, frxPortProtErrors=frxPortProtErrors, frxDMgtT391=frxDMgtT391, frxBertBE=frxBertBE, frxAlertMask=frxAlertMask, frxUPerfTrap=frxUPerfTrap, frxMgtTable=frxMgtTable, frxAgtProtErrors=frxAgtProtErrors, frxAgtChStatus=frxAgtChStatus, frxDSLDLCIEs=frxDSLDLCIEs, frxChEsTx=frxChEsTx, frxUPerfTable=frxUPerfTable, frxPhBeRx=frxPhBeRx, frxLoopCh=frxLoopCh, frxSysDescr=frxSysDescr, frxDefaultEnable=frxDefaultEnable, frxDCktBe=frxDCktBe, frxPdEsRx=frxPdEsRx, frxDSLBadFrames=frxDSLBadFrames, frxStartTest=frxStartTest, frxCktOutOctets=frxCktOutOctets, frxNetLinkEs=frxNetLinkEs, frxCdEsTh=frxCdEsTh)
