#
# PySNMP MIB module IBMHPRNCL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBMHPRNCL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:40:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, ObjectIdentity, Counter64, MibIdentifier, Integer32, ModuleIdentity, Gauge32, TimeTicks, iso, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "Counter64", "MibIdentifier", "Integer32", "ModuleIdentity", "Gauge32", "TimeTicks", "iso", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Unsigned32", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmArchitecture = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5))
hpr = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10))
ibmHprNcl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10, 3))
ibmHprNclGlobe = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 1))
ibmHprNclGlobeCtrState = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmHprNclGlobeCtrState.setStatus('mandatory')
ibmHprNclGlobeCtrStateTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclGlobeCtrStateTime.setStatus('mandatory')
ibmHprNclGlobeAssignAnrs = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclGlobeAssignAnrs.setStatus('mandatory')
ibmHprNclTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2), )
if mibBuilder.loadTexts: ibmHprNclTable.setStatus('mandatory')
ibmHprNclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1), ).setIndexNames((0, "IBMHPRNCL-MIB", "ibmHprNclEnvId"))
if mibBuilder.loadTexts: ibmHprNclEntry.setStatus('mandatory')
ibmHprNclEnvId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclEnvId.setStatus('mandatory')
ibmHprNclDlcRecvNetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcRecvNetFrames.setStatus('mandatory')
ibmHprNclDlcRecvHiFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcRecvHiFrames.setStatus('mandatory')
ibmHprNclDlcRecvMedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcRecvMedFrames.setStatus('mandatory')
ibmHprNclDlcRecvLoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcRecvLoFrames.setStatus('mandatory')
ibmHprNclDlcRecvNetBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcRecvNetBytes.setStatus('mandatory')
ibmHprNclDlcRecvHiBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcRecvHiBytes.setStatus('mandatory')
ibmHprNclDlcRecvMedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcRecvMedBytes.setStatus('mandatory')
ibmHprNclDlcRecvLoBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcRecvLoBytes.setStatus('mandatory')
ibmHprNclDlcRecvAnrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcRecvAnrErrors.setStatus('mandatory')
ibmHprNclDlcSendNetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcSendNetFrames.setStatus('mandatory')
ibmHprNclDlcSendHiFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcSendHiFrames.setStatus('mandatory')
ibmHprNclDlcSendMedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcSendMedFrames.setStatus('mandatory')
ibmHprNclDlcSendLoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcSendLoFrames.setStatus('mandatory')
ibmHprNclDlcSendNetBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcSendNetBytes.setStatus('mandatory')
ibmHprNclDlcSendHiBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcSendHiBytes.setStatus('mandatory')
ibmHprNclDlcSendMedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcSendMedBytes.setStatus('mandatory')
ibmHprNclDlcSendLoBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcSendLoBytes.setStatus('mandatory')
ibmHprNclRtpRecvNetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpRecvNetFrames.setStatus('mandatory')
ibmHprNclRtpRecvHiFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpRecvHiFrames.setStatus('mandatory')
ibmHprNclRtpRecvMedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpRecvMedFrames.setStatus('mandatory')
ibmHprNclRtpRecvLoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpRecvLoFrames.setStatus('mandatory')
ibmHprNclRtpRecvNetBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpRecvNetBytes.setStatus('mandatory')
ibmHprNclRtpRecvHiBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpRecvHiBytes.setStatus('mandatory')
ibmHprNclRtpRecvMedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpRecvMedBytes.setStatus('mandatory')
ibmHprNclRtpRecvLoBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpRecvLoBytes.setStatus('mandatory')
ibmHprNclRtpRecvAnrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpRecvAnrErrors.setStatus('mandatory')
ibmHprNclRtpSendNetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpSendNetFrames.setStatus('mandatory')
ibmHprNclRtpSendHiFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpSendHiFrames.setStatus('mandatory')
ibmHprNclRtpSendMedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpSendMedFrames.setStatus('mandatory')
ibmHprNclRtpSendLoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpSendLoFrames.setStatus('mandatory')
ibmHprNclRtpSendNetBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpSendNetBytes.setStatus('mandatory')
ibmHprNclRtpSendHiBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpSendHiBytes.setStatus('mandatory')
ibmHprNclRtpSendMedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpSendMedBytes.setStatus('mandatory')
ibmHprNclRtpSendLoBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpSendLoBytes.setStatus('mandatory')
ibmHprNclInterSendNetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclInterSendNetFrames.setStatus('mandatory')
ibmHprNclInterSendHiFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclInterSendHiFrames.setStatus('mandatory')
ibmHprNclInterSendMedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclInterSendMedFrames.setStatus('mandatory')
ibmHprNclInterSendLoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclInterSendLoFrames.setStatus('mandatory')
ibmHprNclInterSendNetBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclInterSendNetBytes.setStatus('mandatory')
ibmHprNclInterSendHiBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclInterSendHiBytes.setStatus('mandatory')
ibmHprNclInterSendMedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclInterSendMedBytes.setStatus('mandatory')
ibmHprNclInterSendLoBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclInterSendLoBytes.setStatus('mandatory')
ibmHprNclCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 3))
ibmHprNclConfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 4))
mibBuilder.exportSymbols("IBMHPRNCL-MIB", ibmHprNclInterSendNetFrames=ibmHprNclInterSendNetFrames, ibmHprNclGlobeCtrStateTime=ibmHprNclGlobeCtrStateTime, ibmHprNclDlcSendNetBytes=ibmHprNclDlcSendNetBytes, ibmHprNclEnvId=ibmHprNclEnvId, ibmHprNclRtpRecvNetBytes=ibmHprNclRtpRecvNetBytes, ibmHprNclRtpRecvMedFrames=ibmHprNclRtpRecvMedFrames, ibmHprNclCompliances=ibmHprNclCompliances, ibmHprNclRtpRecvHiFrames=ibmHprNclRtpRecvHiFrames, ibmHprNclDlcRecvLoFrames=ibmHprNclDlcRecvLoFrames, ibm=ibm, ibmHprNclDlcSendMedBytes=ibmHprNclDlcSendMedBytes, ibmHprNclRtpSendNetBytes=ibmHprNclRtpSendNetBytes, ibmHprNclTable=ibmHprNclTable, ibmHprNclRtpSendHiBytes=ibmHprNclRtpSendHiBytes, ibmHprNclDlcSendMedFrames=ibmHprNclDlcSendMedFrames, ibmHprNclRtpSendLoFrames=ibmHprNclRtpSendLoFrames, ibmHprNclGlobeAssignAnrs=ibmHprNclGlobeAssignAnrs, ibmArchitecture=ibmArchitecture, ibmHprNclEntry=ibmHprNclEntry, ibmHprNclRtpRecvMedBytes=ibmHprNclRtpRecvMedBytes, ibmHprNclDlcRecvAnrErrors=ibmHprNclDlcRecvAnrErrors, ibmHprNclDlcSendHiFrames=ibmHprNclDlcSendHiFrames, ibmHprNclInterSendNetBytes=ibmHprNclInterSendNetBytes, ibmHprNclInterSendLoBytes=ibmHprNclInterSendLoBytes, ibmHprNclDlcRecvNetFrames=ibmHprNclDlcRecvNetFrames, ibmHprNclInterSendMedBytes=ibmHprNclInterSendMedBytes, ibmHprNclRtpRecvLoBytes=ibmHprNclRtpRecvLoBytes, ibmHprNclConfGroups=ibmHprNclConfGroups, ibmHprNclInterSendMedFrames=ibmHprNclInterSendMedFrames, ibmHprNclDlcRecvMedBytes=ibmHprNclDlcRecvMedBytes, ibmHprNclInterSendHiBytes=ibmHprNclInterSendHiBytes, ibmHprNclRtpRecvNetFrames=ibmHprNclRtpRecvNetFrames, ibmHprNclDlcRecvNetBytes=ibmHprNclDlcRecvNetBytes, ibmHprNclDlcRecvHiFrames=ibmHprNclDlcRecvHiFrames, ibmHprNclRtpRecvAnrErrors=ibmHprNclRtpRecvAnrErrors, ibmHprNclInterSendLoFrames=ibmHprNclInterSendLoFrames, ibmHprNclRtpSendNetFrames=ibmHprNclRtpSendNetFrames, ibmHprNclRtpRecvHiBytes=ibmHprNclRtpRecvHiBytes, ibmHprNclRtpRecvLoFrames=ibmHprNclRtpRecvLoFrames, ibmHprNclGlobeCtrState=ibmHprNclGlobeCtrState, ibmHprNclGlobe=ibmHprNclGlobe, ibmHprNclDlcSendHiBytes=ibmHprNclDlcSendHiBytes, hpr=hpr, ibmHprNclDlcRecvLoBytes=ibmHprNclDlcRecvLoBytes, ibmHprNclDlcSendLoFrames=ibmHprNclDlcSendLoFrames, ibmHprNclRtpSendHiFrames=ibmHprNclRtpSendHiFrames, ibmHprNcl=ibmHprNcl, ibmHprNclRtpSendMedFrames=ibmHprNclRtpSendMedFrames, ibmHprNclDlcRecvMedFrames=ibmHprNclDlcRecvMedFrames, ibmHprNclDlcSendLoBytes=ibmHprNclDlcSendLoBytes, ibmHprNclDlcSendNetFrames=ibmHprNclDlcSendNetFrames, ibmHprNclInterSendHiFrames=ibmHprNclInterSendHiFrames, ibmHprNclDlcRecvHiBytes=ibmHprNclDlcRecvHiBytes, ibmHprNclRtpSendLoBytes=ibmHprNclRtpSendLoBytes, ibmHprNclRtpSendMedBytes=ibmHprNclRtpSendMedBytes)
