#
# PySNMP MIB module DEC-LECS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DEC-LECS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:22:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
decMIBextension, = mibBuilder.importSymbols("DECATM-MIB", "decMIBextension")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, iso, Counter32, Integer32, Counter64, ObjectIdentity, Unsigned32, ModuleIdentity, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "Counter32", "Integer32", "Counter64", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
decLecsMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31))
decElanAdminGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 1))
decElanConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2))
decElanLecsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3))
decElanLecsConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1))
decElanLecsFaultGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 2))
decElanLecsStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 3))
decElanAdminPolicyVal = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 1, 1))
assignByAtmAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 1, 1, 1))
assignByMacAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 1, 1, 2))
assignByRouteDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 1, 1, 3))
assignByElanName = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 1, 1, 4))
assignByCompatibility = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 1, 1, 5))
decLecsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 4))
decLecsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 4, 1))
decLecsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 4, 2))
decElanConfNextId = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decElanConfNextId.setStatus('mandatory')
decElanConfTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 2), )
if mibBuilder.loadTexts: decElanConfTable.setStatus('mandatory')
decElanConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 2, 1), ).setIndexNames((0, "DEC-LECS-MIB", "decElanConfIndex"))
if mibBuilder.loadTexts: decElanConfEntry.setStatus('mandatory')
decElanConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decElanConfIndex.setStatus('mandatory')
decElanConfName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decElanConfName.setStatus('mandatory')
decElanConfTlvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decElanConfTlvIndex.setStatus('mandatory')
decElanConfLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("s8023", 2), ("s8025", 3))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decElanConfLanType.setStatus('mandatory')
decElanConfMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unspecified", 1), ("max1516", 2), ("max4544", 3), ("max9234", 4), ("max18190", 5))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decElanConfMaxFrameSize.setStatus('mandatory')
decElanConfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decElanConfAdminStatus.setStatus('mandatory')
decElanConfDefaultElan = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decElanConfDefaultElan.setStatus('mandatory')
decElanConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decElanConfRowStatus.setStatus('mandatory')
decElanLesTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 3), )
if mibBuilder.loadTexts: decElanLesTable.setStatus('mandatory')
decElanLesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 3, 1), ).setIndexNames((0, "DEC-LECS-MIB", "decElanConfIndex"), (0, "DEC-LECS-MIB", "decElanLesIndex"))
if mibBuilder.loadTexts: decElanLesEntry.setStatus('mandatory')
decElanLesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decElanLesIndex.setStatus('mandatory')
decElanLesAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decElanLesAtmAddress.setStatus('mandatory')
decElanLesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decElanLesRowStatus.setStatus('mandatory')
decElanPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 4), )
if mibBuilder.loadTexts: decElanPolicyTable.setStatus('mandatory')
decElanPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 4, 1), ).setIndexNames((0, "DEC-LECS-MIB", "decElanPolicySelectorIndex"), (0, "DEC-LECS-MIB", "decElanPolicyIndex"))
if mibBuilder.loadTexts: decElanPolicyEntry.setStatus('mandatory')
decElanPolicySelectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decElanPolicySelectorIndex.setStatus('mandatory')
decElanPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decElanPolicyIndex.setStatus('mandatory')
decElanPolicyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decElanPolicyPriority.setStatus('mandatory')
decElanPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 4, 1, 4), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decElanPolicyType.setStatus('mandatory')
decElanPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decElanPolicyRowStatus.setStatus('mandatory')
decElanLecAtmAddrTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 5), )
if mibBuilder.loadTexts: decElanLecAtmAddrTable.setStatus('mandatory')
decElanLecAtmAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 5, 1), ).setIndexNames((0, "DEC-LECS-MIB", "decElanConfIndex"), (0, "DEC-LECS-MIB", "decElanLesIndex"), (0, "DEC-LECS-MIB", "decElanLecAtmAddress"), (0, "DEC-LECS-MIB", "decElanLecAtmMask"))
if mibBuilder.loadTexts: decElanLecAtmAddrEntry.setStatus('mandatory')
decElanLecAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decElanLecAtmAddress.setStatus('mandatory')
decElanLecAtmMask = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decElanLecAtmMask.setStatus('mandatory')
decElanLecAtmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decElanLecAtmRowStatus.setStatus('mandatory')
decElanLecMacAddrTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 6), )
if mibBuilder.loadTexts: decElanLecMacAddrTable.setStatus('mandatory')
decElanLecMacAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 6, 1), ).setIndexNames((0, "DEC-LECS-MIB", "decElanConfIndex"), (0, "DEC-LECS-MIB", "decElanLesIndex"), (0, "DEC-LECS-MIB", "decElanLecMacAddress"))
if mibBuilder.loadTexts: decElanLecMacAddrEntry.setStatus('mandatory')
decElanLecMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: decElanLecMacAddress.setStatus('mandatory')
decElanLecMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decElanLecMacRowStatus.setStatus('mandatory')
decElanLecRdTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 7), )
if mibBuilder.loadTexts: decElanLecRdTable.setStatus('mandatory')
decElanLecRdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 7, 1), ).setIndexNames((0, "DEC-LECS-MIB", "decElanConfIndex"), (0, "DEC-LECS-MIB", "decElanLesIndex"), (0, "DEC-LECS-MIB", "decElanLecRdSegId"), (0, "DEC-LECS-MIB", "decElanLecRdBridgeNum"))
if mibBuilder.loadTexts: decElanLecRdEntry.setStatus('mandatory')
decElanLecRdSegId = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decElanLecRdSegId.setStatus('mandatory')
decElanLecRdBridgeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decElanLecRdBridgeNum.setStatus('mandatory')
decElanLecRdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decElanLecRdRowStatus.setStatus('mandatory')
decLecsConfNextId = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsConfNextId.setStatus('mandatory')
decLecsConfTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 2), )
if mibBuilder.loadTexts: decLecsConfTable.setStatus('mandatory')
decLecsConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 2, 1), ).setIndexNames((0, "DEC-LECS-MIB", "decLecsConfIndex"))
if mibBuilder.loadTexts: decLecsConfEntry.setStatus('mandatory')
decLecsConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsConfIndex.setStatus('mandatory')
decLecsAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 2, 1, 2), Integer32().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLecsAtmIfIndex.setStatus('mandatory')
decLecsAtmAddrSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone(hexValue="4700790000000000000000000000A03E00000100")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLecsAtmAddrSpec.setStatus('mandatory')
decLecsAtmAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20).clone(hexValue="FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLecsAtmAddrMask.setStatus('mandatory')
decLecsAtmAddrActual = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsAtmAddrActual.setStatus('mandatory')
decLecsPolicySelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsPolicySelIndex.setStatus('mandatory')
decLecsLastInitialized = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsLastInitialized.setStatus('mandatory')
decLecsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsOperStatus.setStatus('mandatory')
decLecsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLecsAdminStatus.setStatus('mandatory')
decLecsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLecsRowStatus.setStatus('mandatory')
decLecsTlvTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 4), )
if mibBuilder.loadTexts: decLecsTlvTable.setStatus('mandatory')
decLecsTlvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 4, 1), ).setIndexNames((0, "DEC-LECS-MIB", "decLecsTlvSelectorIndex"), (0, "DEC-LECS-MIB", "decLecsTlvTag"), (0, "DEC-LECS-MIB", "decLecsTlvIndex"))
if mibBuilder.loadTexts: decLecsTlvEntry.setStatus('mandatory')
decLecsTlvSelectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsTlvSelectorIndex.setStatus('mandatory')
decLecsTlvTag = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsTlvTag.setStatus('mandatory')
decLecsTlvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsTlvIndex.setStatus('mandatory')
decLecsTlvVal = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLecsTlvVal.setStatus('mandatory')
decLecsTlvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLecsTlvRowStatus.setStatus('mandatory')
decLecsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 3, 1), )
if mibBuilder.loadTexts: decLecsStatsTable.setStatus('mandatory')
decLecsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 3, 1, 1), ).setIndexNames((0, "DEC-LECS-MIB", "decLecsConfIndex"))
if mibBuilder.loadTexts: decLecsStatsEntry.setStatus('mandatory')
decLecsStatSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsStatSuccessful.setStatus('mandatory')
decLecsStatInBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsStatInBadFrames.setStatus('mandatory')
decLecsStatInvalidParam = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsStatInvalidParam.setStatus('mandatory')
decLecsStatInsufRes = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsStatInsufRes.setStatus('mandatory')
decLecsStatAccDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsStatAccDenied.setStatus('mandatory')
decLecsStatInvalidReq = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsStatInvalidReq.setStatus('mandatory')
decLecsStatInvalidDest = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsStatInvalidDest.setStatus('mandatory')
decLecsStatInvalidAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsStatInvalidAddr.setStatus('mandatory')
decLecsStatNoConf = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsStatNoConf.setStatus('mandatory')
decLecsStatConfError = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsStatConfError.setStatus('mandatory')
decLecsStatInsufInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsStatInsufInfo.setStatus('mandatory')
decLecsErrCtlTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 2, 1), )
if mibBuilder.loadTexts: decLecsErrCtlTable.setStatus('mandatory')
decLecsErrCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 2, 1, 1), ).setIndexNames((0, "DEC-LECS-MIB", "decLecsConfIndex"))
if mibBuilder.loadTexts: decLecsErrCtlEntry.setStatus('mandatory')
decLecsErrCtlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLecsErrCtlAdminStatus.setStatus('mandatory')
decLecsErrCtlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("outOfRes", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsErrCtlOperStatus.setStatus('mandatory')
decLecsErrCtlClearLog = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLecsErrCtlClearLog.setStatus('mandatory')
decLecsErrCtlMaxEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsErrCtlMaxEntries.setStatus('mandatory')
decLecsErrCtlLastEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLecsErrCtlLastEntry.setStatus('mandatory')
decLecsErrLogTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 2, 2), )
if mibBuilder.loadTexts: decLecsErrLogTable.setStatus('mandatory')
decLecsErrLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 2, 2, 1), ).setIndexNames((0, "DEC-LECS-MIB", "decLecsConfIndex"), (0, "DEC-LECS-MIB", "decLecsErrLogIndex"))
if mibBuilder.loadTexts: decLecsErrLogEntry.setStatus('mandatory')
decLecsErrLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsErrLogIndex.setStatus('mandatory')
decLecsErrLogAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsErrLogAtmAddr.setStatus('mandatory')
decLecsErrLogErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsErrLogErrCode.setStatus('mandatory')
decLecsErrLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 3, 2, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLecsErrLogTime.setStatus('mandatory')
decElanCConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 4, 1, 1))
decElanLecAssignByAtmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 4, 1, 2))
decElanLecAssignByMacGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 4, 1, 3))
decElanLecAssignByRdGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 4, 1, 4))
decLecsCStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 4, 1, 5))
decLecsCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 4, 1, 6))
decLecsCFaultGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 4, 1, 7))
decLecsMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 31, 4, 2, 1))
mibBuilder.exportSymbols("DEC-LECS-MIB", decElanConfNextId=decElanConfNextId, decElanPolicyEntry=decElanPolicyEntry, decElanPolicyType=decElanPolicyType, decElanCConfGroup=decElanCConfGroup, decLecsErrLogEntry=decLecsErrLogEntry, decLecsStatConfError=decLecsStatConfError, assignByRouteDescriptor=assignByRouteDescriptor, decLecsErrCtlClearLog=decLecsErrCtlClearLog, decElanLecAssignByMacGroup=decElanLecAssignByMacGroup, assignByCompatibility=assignByCompatibility, decElanPolicyRowStatus=decElanPolicyRowStatus, decLecsCStatGroup=decLecsCStatGroup, decLecsMIBCompliance=decLecsMIBCompliance, decElanLesRowStatus=decElanLesRowStatus, decElanLesEntry=decElanLesEntry, decElanPolicySelectorIndex=decElanPolicySelectorIndex, decLecsAtmAddrSpec=decLecsAtmAddrSpec, decLecsAdminStatus=decLecsAdminStatus, decLecsErrCtlMaxEntries=decLecsErrCtlMaxEntries, decLecsStatInvalidReq=decLecsStatInvalidReq, decElanLecAssignByRdGroup=decElanLecAssignByRdGroup, decLecsStatNoConf=decLecsStatNoConf, assignByAtmAddr=assignByAtmAddr, decElanLecRdRowStatus=decElanLecRdRowStatus, decElanLecsGroup=decElanLecsGroup, decLecsStatsTable=decLecsStatsTable, decLecsErrLogTable=decLecsErrLogTable, decElanConfDefaultElan=decElanConfDefaultElan, assignByElanName=assignByElanName, decLecsStatInvalidParam=decLecsStatInvalidParam, decElanConfName=decElanConfName, decLecsErrLogTime=decLecsErrLogTime, decElanLesTable=decElanLesTable, decLecsTlvVal=decLecsTlvVal, decLecsAtmIfIndex=decLecsAtmIfIndex, decElanLecRdBridgeNum=decElanLecRdBridgeNum, decLecsStatAccDenied=decLecsStatAccDenied, decElanLecAtmMask=decElanLecAtmMask, decLecsErrLogIndex=decLecsErrLogIndex, decElanPolicyPriority=decElanPolicyPriority, decLecsStatsEntry=decLecsStatsEntry, decLecsErrCtlEntry=decLecsErrCtlEntry, decElanConfEntry=decElanConfEntry, decLecsTlvTable=decLecsTlvTable, decLecsMIBGroups=decLecsMIBGroups, decElanLesIndex=decElanLesIndex, decElanConfTlvIndex=decElanConfTlvIndex, decLecsStatSuccessful=decLecsStatSuccessful, decElanConfRowStatus=decElanConfRowStatus, decElanLecAtmAddrEntry=decElanLecAtmAddrEntry, decElanConfMaxFrameSize=decElanConfMaxFrameSize, decElanConfIndex=decElanConfIndex, decElanLecRdEntry=decElanLecRdEntry, decLecsErrLogAtmAddr=decLecsErrLogAtmAddr, decElanLecAtmAddress=decElanLecAtmAddress, decElanLecsFaultGroup=decElanLecsFaultGroup, decElanConfLanType=decElanConfLanType, decElanLecAssignByAtmGroup=decElanLecAssignByAtmGroup, decLecsLastInitialized=decLecsLastInitialized, decLecsErrCtlAdminStatus=decLecsErrCtlAdminStatus, assignByMacAddr=assignByMacAddr, decElanLecRdSegId=decElanLecRdSegId, decElanPolicyIndex=decElanPolicyIndex, decLecsStatInvalidDest=decLecsStatInvalidDest, decLecsConfEntry=decLecsConfEntry, decLecsErrLogErrCode=decLecsErrLogErrCode, decLecsOperStatus=decLecsOperStatus, decLecsTlvTag=decLecsTlvTag, decElanLecRdTable=decElanLecRdTable, decElanConfTable=decElanConfTable, decElanPolicyTable=decElanPolicyTable, decLecsCFaultGroup=decLecsCFaultGroup, decElanLecsStatGroup=decElanLecsStatGroup, decElanLecMacAddress=decElanLecMacAddress, decElanLecMacAddrTable=decElanLecMacAddrTable, decLecsErrCtlLastEntry=decLecsErrCtlLastEntry, decLecsMIBCompliances=decLecsMIBCompliances, decLecsTlvRowStatus=decLecsTlvRowStatus, decLecsRowStatus=decLecsRowStatus, decLecsConfIndex=decLecsConfIndex, decLecsMIBConformance=decLecsMIBConformance, decLecsAtmAddrActual=decLecsAtmAddrActual, decLecsTlvSelectorIndex=decLecsTlvSelectorIndex, decLecsStatInvalidAddr=decLecsStatInvalidAddr, decElanLesAtmAddress=decElanLesAtmAddress, decLecsTlvIndex=decLecsTlvIndex, decElanAdminPolicyVal=decElanAdminPolicyVal, decLecsCGroup=decLecsCGroup, decLecsTlvEntry=decLecsTlvEntry, decLecsStatInsufRes=decLecsStatInsufRes, decLecsErrCtlOperStatus=decLecsErrCtlOperStatus, decLecsStatInsufInfo=decLecsStatInsufInfo, decLecsMIB=decLecsMIB, decLecsPolicySelIndex=decLecsPolicySelIndex, decElanLecMacRowStatus=decElanLecMacRowStatus, decLecsConfNextId=decLecsConfNextId, decElanLecAtmAddrTable=decElanLecAtmAddrTable, decLecsAtmAddrMask=decLecsAtmAddrMask, decElanLecsConfGroup=decElanLecsConfGroup, decLecsConfTable=decLecsConfTable, decElanConfAdminStatus=decElanConfAdminStatus, decElanLecAtmRowStatus=decElanLecAtmRowStatus, decElanLecMacAddrEntry=decElanLecMacAddrEntry, decElanConfGroup=decElanConfGroup, decElanAdminGroup=decElanAdminGroup, decLecsStatInBadFrames=decLecsStatInBadFrames, decLecsErrCtlTable=decLecsErrCtlTable)
