#
# PySNMP MIB module UMSLMSENSOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/UMSLMSENSOR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:21:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, ModuleIdentity, ObjectIdentity, Bits, Gauge32, NotificationType, Counter64, Integer32, Counter32, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "ModuleIdentity", "ObjectIdentity", "Bits", "Gauge32", "NotificationType", "Counter64", "Integer32", "Counter32", "Unsigned32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
Sint16, Boolean, Sint64, ibmpsgLMSensor, String, Sint32, Real32, Real64, Uint16, Uint64, Sint8, Datetime, Uint32, Uint8 = mibBuilder.importSymbols("UMS-MIB", "Sint16", "Boolean", "Sint64", "ibmpsgLMSensor", "String", "Sint32", "Real32", "Real64", "Uint16", "Uint64", "Sint8", "Datetime", "Uint32", "Uint8")
iBMPSGTemperatureSensorTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1), )
if mibBuilder.loadTexts: iBMPSGTemperatureSensorTable.setStatus('mandatory')
iBMPSGTemperatureSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1), ).setIndexNames((0, "UMSLMSENSOR-MIB", "iBMPSGTemperatureSensorKeyIndex"))
if mibBuilder.loadTexts: iBMPSGTemperatureSensorEntry.setStatus('mandatory')
iBMPSGTemperatureSensorKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 1), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorKeyIndex.setStatus('mandatory')
iBMPSGTemperatureSensorCurrentReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 2), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorCurrentReading.setStatus('mandatory')
iBMPSGTemperatureSensorNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 3), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorNominalReading.setStatus('mandatory')
iBMPSGTemperatureSensorNormalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 4), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorNormalMax.setStatus('mandatory')
iBMPSGTemperatureSensorNormalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 5), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorNormalMin.setStatus('mandatory')
iBMPSGTemperatureSensorMaxReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 6), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorMaxReadable.setStatus('mandatory')
iBMPSGTemperatureSensorMinReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 7), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorMinReadable.setStatus('mandatory')
iBMPSGTemperatureSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 8), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorResolution.setStatus('mandatory')
iBMPSGTemperatureSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 9), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorTolerance.setStatus('mandatory')
iBMPSGTemperatureSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 10), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorAccuracy.setStatus('mandatory')
iBMPSGTemperatureSensorLowerThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 11), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorLowerThresholdNonCritical.setStatus('mandatory')
iBMPSGTemperatureSensorUpperThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 12), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorUpperThresholdNonCritical.setStatus('mandatory')
iBMPSGTemperatureSensorLowerThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 13), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorLowerThresholdCritical.setStatus('mandatory')
iBMPSGTemperatureSensorUpperThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 14), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorUpperThresholdCritical.setStatus('mandatory')
iBMPSGTemperatureSensorLowerThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 15), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorLowerThresholdFatal.setStatus('mandatory')
iBMPSGTemperatureSensorUpperThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 16), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorUpperThresholdFatal.setStatus('mandatory')
iBMPSGTemperatureSensorTempLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 17), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorTempLocation.setStatus('mandatory')
iBMPSGTemperatureSensorEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 18), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorEventsEnabled.setStatus('mandatory')
iBMPSGTemperatureSensorPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 19), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorPollingInterval.setStatus('mandatory')
iBMPSGTemperatureSensorEventAutoClearEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 20), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorEventAutoClearEnabled.setStatus('mandatory')
iBMPSGTemperatureSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 1, 1, 21), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTemperatureSensorStatus.setStatus('mandatory')
iBMPSGVoltageSensorTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2), )
if mibBuilder.loadTexts: iBMPSGVoltageSensorTable.setStatus('mandatory')
iBMPSGVoltageSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1), ).setIndexNames((0, "UMSLMSENSOR-MIB", "iBMPSGVoltageSensorKeyIndex"))
if mibBuilder.loadTexts: iBMPSGVoltageSensorEntry.setStatus('mandatory')
iBMPSGVoltageSensorKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 1), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorKeyIndex.setStatus('mandatory')
iBMPSGVoltageSensorCurrentReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 2), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorCurrentReading.setStatus('mandatory')
iBMPSGVoltageSensorNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 3), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorNominalReading.setStatus('mandatory')
iBMPSGVoltageSensorNormalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 4), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorNormalMax.setStatus('mandatory')
iBMPSGVoltageSensorNormalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 5), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorNormalMin.setStatus('mandatory')
iBMPSGVoltageSensorMaxReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 6), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorMaxReadable.setStatus('mandatory')
iBMPSGVoltageSensorMinReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 7), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorMinReadable.setStatus('mandatory')
iBMPSGVoltageSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 8), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorResolution.setStatus('mandatory')
iBMPSGVoltageSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 9), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorTolerance.setStatus('mandatory')
iBMPSGVoltageSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 10), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorAccuracy.setStatus('mandatory')
iBMPSGVoltageSensorLowerThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 11), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorLowerThresholdNonCritical.setStatus('mandatory')
iBMPSGVoltageSensorUpperThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 12), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorUpperThresholdNonCritical.setStatus('mandatory')
iBMPSGVoltageSensorLowerThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 13), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorLowerThresholdCritical.setStatus('mandatory')
iBMPSGVoltageSensorUpperThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 14), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorUpperThresholdCritical.setStatus('mandatory')
iBMPSGVoltageSensorLowerThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 15), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorLowerThresholdFatal.setStatus('mandatory')
iBMPSGVoltageSensorUpperThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 16), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorUpperThresholdFatal.setStatus('mandatory')
iBMPSGVoltageSensorVoltageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 17), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorVoltageType.setStatus('mandatory')
iBMPSGVoltageSensorEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 18), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorEventsEnabled.setStatus('mandatory')
iBMPSGVoltageSensorPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 19), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorPollingInterval.setStatus('mandatory')
iBMPSGVoltageSensorEventAutoClearEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 20), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorEventAutoClearEnabled.setStatus('mandatory')
iBMPSGVoltageSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 2, 1, 21), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGVoltageSensorStatus.setStatus('mandatory')
iBMPSGFanTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3), )
if mibBuilder.loadTexts: iBMPSGFanTable.setStatus('mandatory')
iBMPSGFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1), ).setIndexNames((0, "UMSLMSENSOR-MIB", "iBMPSGFanKeyIndex"))
if mibBuilder.loadTexts: iBMPSGFanEntry.setStatus('mandatory')
iBMPSGFanKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1, 1), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGFanKeyIndex.setStatus('mandatory')
iBMPSGFanVariableSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1, 2), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGFanVariableSpeed.setStatus('mandatory')
iBMPSGFanDesiredSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1, 3), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGFanDesiredSpeed.setStatus('mandatory')
iBMPSGFanActiveCooling = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1, 4), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGFanActiveCooling.setStatus('mandatory')
iBMPSGFanFanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1, 5), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGFanFanType.setStatus('mandatory')
iBMPSGFanEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1, 6), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGFanEventsEnabled.setStatus('mandatory')
iBMPSGFanPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1, 7), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGFanPollingInterval.setStatus('mandatory')
iBMPSGFanEventAutoClearEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1, 8), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGFanEventAutoClearEnabled.setStatus('mandatory')
iBMPSGFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 3, 1, 9), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGFanStatus.setStatus('mandatory')
iBMPSGSystemEnclosureTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4), )
if mibBuilder.loadTexts: iBMPSGSystemEnclosureTable.setStatus('mandatory')
iBMPSGSystemEnclosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1), ).setIndexNames((0, "UMSLMSENSOR-MIB", "iBMPSGSystemEnclosureKeyIndex"))
if mibBuilder.loadTexts: iBMPSGSystemEnclosureEntry.setStatus('mandatory')
iBMPSGSystemEnclosureKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1, 1), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGSystemEnclosureKeyIndex.setStatus('mandatory')
iBMPSGSystemEnclosureIntrusionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1, 2), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGSystemEnclosureIntrusionStatus.setStatus('mandatory')
iBMPSGSystemEnclosureIntrusionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1, 3), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGSystemEnclosureIntrusionType.setStatus('mandatory')
iBMPSGSystemEnclosureEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1, 4), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGSystemEnclosureEventsEnabled.setStatus('mandatory')
iBMPSGSystemEnclosurePollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1, 5), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGSystemEnclosurePollingInterval.setStatus('mandatory')
iBMPSGSystemEnclosureACLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1, 7), Uint16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGSystemEnclosureACLineStatus.setStatus('mandatory')
iBMPSGSystemEnclosureDockingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1, 6), Uint16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGSystemEnclosureDockingStatus.setStatus('mandatory')
iBMPSGSystemEnclosureEventAutoClearEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1, 8), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGSystemEnclosureEventAutoClearEnabled.setStatus('mandatory')
iBMPSGSystemEnclosureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 4, 1, 9), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGSystemEnclosureStatus.setStatus('mandatory')
iBMPSGTachometerTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5), )
if mibBuilder.loadTexts: iBMPSGTachometerTable.setStatus('mandatory')
iBMPSGTachometerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1), ).setIndexNames((0, "UMSLMSENSOR-MIB", "iBMPSGTachometerKeyIndex"))
if mibBuilder.loadTexts: iBMPSGTachometerEntry.setStatus('mandatory')
iBMPSGTachometerKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 1), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerKeyIndex.setStatus('mandatory')
iBMPSGTachometerCurrentReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 2), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerCurrentReading.setStatus('mandatory')
iBMPSGTachometerNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 3), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerNominalReading.setStatus('mandatory')
iBMPSGTachometerNormalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 4), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerNormalMax.setStatus('mandatory')
iBMPSGTachometerNormalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 5), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerNormalMin.setStatus('mandatory')
iBMPSGTachometerMaxReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 6), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerMaxReadable.setStatus('mandatory')
iBMPSGTachometerMinReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 7), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerMinReadable.setStatus('mandatory')
iBMPSGTachometerResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 8), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerResolution.setStatus('mandatory')
iBMPSGTachometerTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 9), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerTolerance.setStatus('mandatory')
iBMPSGTachometerLowerThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 10), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerLowerThresholdNonCritical.setStatus('mandatory')
iBMPSGTachometerUpperThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 11), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerUpperThresholdNonCritical.setStatus('mandatory')
iBMPSGTachometerLowerThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 12), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerLowerThresholdCritical.setStatus('mandatory')
iBMPSGTachometerUpperThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 13), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerUpperThresholdCritical.setStatus('mandatory')
iBMPSGTachometerLowerThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 14), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerLowerThresholdFatal.setStatus('mandatory')
iBMPSGTachometerUpperThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 15), Sint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerUpperThresholdFatal.setStatus('mandatory')
iBMPSGTachometerFanDescrip = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 16), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerFanDescrip.setStatus('mandatory')
iBMPSGTachometerFanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 17), Uint32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerFanType.setStatus('mandatory')
iBMPSGTachometerEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 18), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerEventsEnabled.setStatus('mandatory')
iBMPSGTachometerEventAutoClearEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 19), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerEventAutoClearEnabled.setStatus('mandatory')
iBMPSGTachometerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 159, 1, 1, 80, 5, 1, 20), String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iBMPSGTachometerStatus.setStatus('mandatory')
mibBuilder.exportSymbols("UMSLMSENSOR-MIB", iBMPSGTemperatureSensorResolution=iBMPSGTemperatureSensorResolution, iBMPSGTachometerFanType=iBMPSGTachometerFanType, iBMPSGTachometerLowerThresholdFatal=iBMPSGTachometerLowerThresholdFatal, iBMPSGTachometerKeyIndex=iBMPSGTachometerKeyIndex, iBMPSGTachometerFanDescrip=iBMPSGTachometerFanDescrip, iBMPSGTemperatureSensorCurrentReading=iBMPSGTemperatureSensorCurrentReading, iBMPSGTachometerMinReadable=iBMPSGTachometerMinReadable, iBMPSGTemperatureSensorNominalReading=iBMPSGTemperatureSensorNominalReading, iBMPSGSystemEnclosurePollingInterval=iBMPSGSystemEnclosurePollingInterval, iBMPSGTemperatureSensorLowerThresholdFatal=iBMPSGTemperatureSensorLowerThresholdFatal, iBMPSGTemperatureSensorLowerThresholdNonCritical=iBMPSGTemperatureSensorLowerThresholdNonCritical, iBMPSGTemperatureSensorTempLocation=iBMPSGTemperatureSensorTempLocation, iBMPSGVoltageSensorPollingInterval=iBMPSGVoltageSensorPollingInterval, iBMPSGTachometerEventAutoClearEnabled=iBMPSGTachometerEventAutoClearEnabled, iBMPSGSystemEnclosureEventsEnabled=iBMPSGSystemEnclosureEventsEnabled, iBMPSGTachometerLowerThresholdNonCritical=iBMPSGTachometerLowerThresholdNonCritical, iBMPSGTachometerStatus=iBMPSGTachometerStatus, iBMPSGFanEntry=iBMPSGFanEntry, iBMPSGFanActiveCooling=iBMPSGFanActiveCooling, iBMPSGFanEventsEnabled=iBMPSGFanEventsEnabled, iBMPSGTemperatureSensorStatus=iBMPSGTemperatureSensorStatus, iBMPSGTachometerUpperThresholdCritical=iBMPSGTachometerUpperThresholdCritical, iBMPSGTemperatureSensorAccuracy=iBMPSGTemperatureSensorAccuracy, iBMPSGTemperatureSensorPollingInterval=iBMPSGTemperatureSensorPollingInterval, iBMPSGTachometerEntry=iBMPSGTachometerEntry, iBMPSGTemperatureSensorEntry=iBMPSGTemperatureSensorEntry, iBMPSGTachometerLowerThresholdCritical=iBMPSGTachometerLowerThresholdCritical, iBMPSGTemperatureSensorNormalMin=iBMPSGTemperatureSensorNormalMin, iBMPSGVoltageSensorAccuracy=iBMPSGVoltageSensorAccuracy, iBMPSGSystemEnclosureEntry=iBMPSGSystemEnclosureEntry, iBMPSGTachometerMaxReadable=iBMPSGTachometerMaxReadable, iBMPSGFanTable=iBMPSGFanTable, iBMPSGTachometerCurrentReading=iBMPSGTachometerCurrentReading, iBMPSGVoltageSensorStatus=iBMPSGVoltageSensorStatus, iBMPSGVoltageSensorTable=iBMPSGVoltageSensorTable, iBMPSGFanFanType=iBMPSGFanFanType, iBMPSGVoltageSensorNormalMin=iBMPSGVoltageSensorNormalMin, iBMPSGVoltageSensorUpperThresholdCritical=iBMPSGVoltageSensorUpperThresholdCritical, iBMPSGTachometerNormalMin=iBMPSGTachometerNormalMin, iBMPSGVoltageSensorEventsEnabled=iBMPSGVoltageSensorEventsEnabled, iBMPSGVoltageSensorEntry=iBMPSGVoltageSensorEntry, iBMPSGTemperatureSensorEventsEnabled=iBMPSGTemperatureSensorEventsEnabled, iBMPSGTemperatureSensorMaxReadable=iBMPSGTemperatureSensorMaxReadable, iBMPSGVoltageSensorLowerThresholdNonCritical=iBMPSGVoltageSensorLowerThresholdNonCritical, iBMPSGTachometerUpperThresholdFatal=iBMPSGTachometerUpperThresholdFatal, iBMPSGTemperatureSensorUpperThresholdNonCritical=iBMPSGTemperatureSensorUpperThresholdNonCritical, iBMPSGTachometerTolerance=iBMPSGTachometerTolerance, iBMPSGTemperatureSensorNormalMax=iBMPSGTemperatureSensorNormalMax, iBMPSGVoltageSensorNormalMax=iBMPSGVoltageSensorNormalMax, iBMPSGVoltageSensorLowerThresholdCritical=iBMPSGVoltageSensorLowerThresholdCritical, iBMPSGVoltageSensorVoltageType=iBMPSGVoltageSensorVoltageType, iBMPSGTemperatureSensorKeyIndex=iBMPSGTemperatureSensorKeyIndex, iBMPSGSystemEnclosureACLineStatus=iBMPSGSystemEnclosureACLineStatus, iBMPSGTachometerUpperThresholdNonCritical=iBMPSGTachometerUpperThresholdNonCritical, iBMPSGFanEventAutoClearEnabled=iBMPSGFanEventAutoClearEnabled, iBMPSGVoltageSensorCurrentReading=iBMPSGVoltageSensorCurrentReading, iBMPSGVoltageSensorMaxReadable=iBMPSGVoltageSensorMaxReadable, iBMPSGTachometerTable=iBMPSGTachometerTable, iBMPSGFanStatus=iBMPSGFanStatus, iBMPSGTemperatureSensorTolerance=iBMPSGTemperatureSensorTolerance, iBMPSGSystemEnclosureIntrusionType=iBMPSGSystemEnclosureIntrusionType, iBMPSGVoltageSensorLowerThresholdFatal=iBMPSGVoltageSensorLowerThresholdFatal, iBMPSGTemperatureSensorEventAutoClearEnabled=iBMPSGTemperatureSensorEventAutoClearEnabled, iBMPSGTachometerResolution=iBMPSGTachometerResolution, iBMPSGVoltageSensorResolution=iBMPSGVoltageSensorResolution, iBMPSGTachometerEventsEnabled=iBMPSGTachometerEventsEnabled, iBMPSGTemperatureSensorTable=iBMPSGTemperatureSensorTable, iBMPSGFanDesiredSpeed=iBMPSGFanDesiredSpeed, iBMPSGSystemEnclosureIntrusionStatus=iBMPSGSystemEnclosureIntrusionStatus, iBMPSGTachometerNormalMax=iBMPSGTachometerNormalMax, iBMPSGFanVariableSpeed=iBMPSGFanVariableSpeed, iBMPSGVoltageSensorUpperThresholdFatal=iBMPSGVoltageSensorUpperThresholdFatal, iBMPSGTemperatureSensorLowerThresholdCritical=iBMPSGTemperatureSensorLowerThresholdCritical, iBMPSGSystemEnclosureEventAutoClearEnabled=iBMPSGSystemEnclosureEventAutoClearEnabled, iBMPSGTemperatureSensorUpperThresholdFatal=iBMPSGTemperatureSensorUpperThresholdFatal, iBMPSGVoltageSensorNominalReading=iBMPSGVoltageSensorNominalReading, iBMPSGSystemEnclosureKeyIndex=iBMPSGSystemEnclosureKeyIndex, iBMPSGSystemEnclosureStatus=iBMPSGSystemEnclosureStatus, iBMPSGFanPollingInterval=iBMPSGFanPollingInterval, iBMPSGVoltageSensorMinReadable=iBMPSGVoltageSensorMinReadable, iBMPSGVoltageSensorTolerance=iBMPSGVoltageSensorTolerance, iBMPSGVoltageSensorUpperThresholdNonCritical=iBMPSGVoltageSensorUpperThresholdNonCritical, iBMPSGTachometerNominalReading=iBMPSGTachometerNominalReading, iBMPSGSystemEnclosureDockingStatus=iBMPSGSystemEnclosureDockingStatus, iBMPSGFanKeyIndex=iBMPSGFanKeyIndex, iBMPSGVoltageSensorKeyIndex=iBMPSGVoltageSensorKeyIndex, iBMPSGTemperatureSensorUpperThresholdCritical=iBMPSGTemperatureSensorUpperThresholdCritical, iBMPSGVoltageSensorEventAutoClearEnabled=iBMPSGVoltageSensorEventAutoClearEnabled, iBMPSGTemperatureSensorMinReadable=iBMPSGTemperatureSensorMinReadable, iBMPSGSystemEnclosureTable=iBMPSGSystemEnclosureTable)
