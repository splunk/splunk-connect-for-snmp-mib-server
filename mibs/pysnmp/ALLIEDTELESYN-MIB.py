#
# PySNMP MIB module ALLIEDTELESYN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALLIEDTELESYN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:04:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, MibIdentifier, Bits, ModuleIdentity, Unsigned32, NotificationType, Counter32, TimeTicks, NotificationType, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, ObjectIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "MibIdentifier", "Bits", "ModuleIdentity", "Unsigned32", "NotificationType", "Counter32", "TimeTicks", "NotificationType", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "ObjectIdentity", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class InterfaceIndexOrZero(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

alliedTelesyn = MibIdentifier((1, 3, 6, 1, 4, 1, 207))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1))
mibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8))
bridgeRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1))
centreCOM_AR300Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 8)).setLabel("centreCOM-AR300Router")
centreCOM_AR720Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 11)).setLabel("centreCOM-AR720Router")
centreCOM_AR300LRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 12)).setLabel("centreCOM-AR300LRouter")
centreCOM_AR310Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 13)).setLabel("centreCOM-AR310Router")
centreCOM_AR300LURouter = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 14)).setLabel("centreCOM-AR300LURouter")
centreCOM_AR300URouter = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 15)).setLabel("centreCOM-AR300URouter")
centreCOM_AR310URouter = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 16)).setLabel("centreCOM-AR310URouter")
centreCOM_AR350Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 17)).setLabel("centreCOM-AR350Router")
centreCOM_AR370Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 18)).setLabel("centreCOM-AR370Router")
centreCOM_AR330Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 19)).setLabel("centreCOM-AR330Router")
centreCOM_AR395Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 20)).setLabel("centreCOM-AR395Router")
centreCOM_AR390Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 21)).setLabel("centreCOM-AR390Router")
centreCOM_AR370URouter = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 22)).setLabel("centreCOM-AR370URouter")
centreCOM_AR740Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 23)).setLabel("centreCOM-AR740Router")
centreCOM_AR140SRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 24)).setLabel("centreCOM-AR140SRouter")
centreCOM_AR140URouter = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 25)).setLabel("centreCOM-AR140URouter")
centreCOM_AR320Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 26)).setLabel("centreCOM-AR320Router")
centreCOM_AR130SRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 27)).setLabel("centreCOM-AR130SRouter")
centreCOM_AR130URouter = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 28)).setLabel("centreCOM-AR130URouter")
centreCOM_AR160Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 29)).setLabel("centreCOM-AR160Router")
at_AR740RouterDC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 43)).setLabel("at-AR740RouterDC")
centreCOM_AR120Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 44)).setLabel("centreCOM-AR120Router")
at_AR410Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 47)).setLabel("at-AR410Router")
at_AR725Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 48)).setLabel("at-AR725Router")
at_AR745Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 49)).setLabel("at-AR745Router")
at_AR410v2Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 50)).setLabel("at-AR410v2Router")
at_AR410v3Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 51)).setLabel("at-AR410v3Router")
at_AR725RouterDC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 52)).setLabel("at-AR725RouterDC")
at_AR745RouterDC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 53)).setLabel("at-AR745RouterDC")
at_AR450Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 54)).setLabel("at-AR450Router")
at_AR450DualRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 55)).setLabel("at-AR450DualRouter")
at_AR440Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 59)).setLabel("at-AR440Router")
at_AR441Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 60)).setLabel("at-AR441Router")
at_AR442Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 61)).setLabel("at-AR442Router")
at_AR443Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 62)).setLabel("at-AR443Router")
at_AR444Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 63)).setLabel("at-AR444Router")
at_AR420Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 64)).setLabel("at-AR420Router")
at_AR550Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 73)).setLabel("at-AR550Router")
at_AR551Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 74)).setLabel("at-AR551Router")
at_AR552Router = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 1, 75)).setLabel("at-AR552Router")
routerSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14))
at_Rapier24 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 1)).setLabel("at-Rapier24")
at_Rapier16fSC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 2)).setLabel("at-Rapier16fSC")
at_Rapier16fVF = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 3)).setLabel("at-Rapier16fVF")
at_Rapier16fMT = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 4)).setLabel("at-Rapier16fMT")
at_Rapier48 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 5)).setLabel("at-Rapier48")
at_Rapier8t8fSC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 6)).setLabel("at-Rapier8t8fSC")
at_Rapier8t8fSCi = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 7)).setLabel("at-Rapier8t8fSCi")
at_Rapier8t8fMT = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 8)).setLabel("at-Rapier8t8fMT")
at_Rapier8t8fMTi = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 9)).setLabel("at-Rapier8t8fMTi")
at_Rapier8fSC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 10)).setLabel("at-Rapier8fSC")
at_Rapier8fSCi = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 11)).setLabel("at-Rapier8fSCi")
at_Rapier8fMT = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 12)).setLabel("at-Rapier8fMT")
at_Rapier8fMTi = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 13)).setLabel("at-Rapier8fMTi")
at_Rapier16fMTi = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 14)).setLabel("at-Rapier16fMTi")
at_RapierG6 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 15)).setLabel("at-RapierG6")
at_RapierG6SX = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 16)).setLabel("at-RapierG6SX")
at_RapierG6LX = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 17)).setLabel("at-RapierG6LX")
at_RapierG6MT = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 18)).setLabel("at-RapierG6MT")
at_Rapier16fSCi = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 19)).setLabel("at-Rapier16fSCi")
at_Rapier24i = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 20)).setLabel("at-Rapier24i")
at_Rapier48i = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 21)).setLabel("at-Rapier48i")
at_Switchblade4AC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 22)).setLabel("at-Switchblade4AC")
at_Switchblade4DC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 23)).setLabel("at-Switchblade4DC")
at_Switchblade8AC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 24)).setLabel("at-Switchblade8AC")
at_Switchblade8DC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 25)).setLabel("at-Switchblade8DC")
at_9816GF = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 26)).setLabel("at-9816GF")
at_9812TF = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 27)).setLabel("at-9812TF")
at_9816GB = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 28)).setLabel("at-9816GB")
at_9812T = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 29)).setLabel("at-9812T")
at_8724XL = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 30)).setLabel("at-8724XL")
at_8748XL = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 31)).setLabel("at-8748XL")
at_8724XLDC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 32)).setLabel("at-8724XLDC")
at_8748XLDC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 33)).setLabel("at-8748XLDC")
at_9816GB_DC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 34)).setLabel("at-9816GB-DC")
at_9812T_DC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 35)).setLabel("at-9812T-DC")
at_8824 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 36)).setLabel("at-8824")
at_8848 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 37)).setLabel("at-8848")
at_8824_DC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 38)).setLabel("at-8824-DC")
at_8848_DC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 39)).setLabel("at-8848-DC")
at_8624XL_80 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 41)).setLabel("at-8624XL-80")
at_8724XL_80 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 42)).setLabel("at-8724XL-80")
at_8748XL_80 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 43)).setLabel("at-8748XL-80")
at_8948EX = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 44)).setLabel("at-8948EX")
at_8948MX = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 45)).setLabel("at-8948MX")
at_8624T2M = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 46)).setLabel("at-8624T2M")
at_Rapier24i_DC_NEBS = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 47)).setLabel("at-Rapier24i-DC-NEBS")
at_8724XL_DC_NEBS = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 48)).setLabel("at-8724XL-DC-NEBS")
at_9924T = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 49)).setLabel("at-9924T")
at_9924SP = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 50)).setLabel("at-9924SP")
at_9924T_4SP = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 51)).setLabel("at-9924T-4SP")
at_9924TEMC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 53)).setLabel("at-9924TEMC")
at_8724MLB = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 55)).setLabel("at-8724MLB")
at_8624POE = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 56)).setLabel("at-8624POE")
at_86482SP = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 14, 58)).setLabel("at-86482SP")
brouterMib = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4))
atRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4))
objects = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 2))
sysinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3))
modules = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4))
arInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5))
protocols = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 6))
boards = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1))
pprIcmAr023 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 39))
pprIcmAr021s = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 40))
pprIcmAr022 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 41))
pprIcmAr025 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 45))
pprIcmAr024 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 46))
pprAr300 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 49))
pprAr300L = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 52))
pprAr310 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 53))
pprAr120 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 54))
pprAr300Lu = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 55))
pprAr300u = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 56))
pprAr310u = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 57))
pprAr350 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 58))
pprIcmAr021u = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 59))
pprAr720 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 63))
pprAr010 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 67))
pprAr012 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 68))
pprAr011 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 69))
pprAr370 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 70))
pprAr330 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 71))
pprAr395 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 72))
pprAr390 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 73))
pprAr370u = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 75))
pprIcmAr020 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 76))
pprAr740 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 79))
pprAr140s = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 80))
pprAr140u = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 81))
pprAr160su = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 82))
pprAr320 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 83))
pprAr130s = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 85))
pprAr130u = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 86))
pprRapier24 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 87))
pprNsm0404Pic = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 88))
pprA35SXSC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 89))
pprA35LXSC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 90))
pprA36MTRJ = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 91))
pprA37VF45 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 92))
pprA38LC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 93))
pprA39Tx = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 94))
pprAr740DC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 95))
pprNsm0418BRI = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 96))
pprRapier16fSC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 97))
ppr8624xl80 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 98))
pprRapier16fMT = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 99))
pprRapier16fMTi = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 100))
pprRapier8t8fSC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 101))
pprRapier8t8fSCi = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 102))
pprRapier8t8fMT = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 103))
pprRapier8t8fMTi = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 104))
pprRapier8fSC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 105))
pprRapier8fSCi = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 106))
pprRapier8fMT = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 107))
pprRapier8fMTi = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 108))
pprRapierG6 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 110))
pprRapierG6SX = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 111))
pprRapierG6LX = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 112))
pprRapierG6MT = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 113))
pprRapier16fSCi = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 114))
pprRapier24i = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 115))
pprAr824 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 116))
pprAr816fSC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 117))
pprAr816fSCi = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 118))
pprAr816fMT = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 119))
pprAr816fMTi = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 120))
pprAr88t8fSC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 121))
pprAr88t8fSCi = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 122))
pprAr88t8fMT = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 123))
pprAr88t8fMTi = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 124))
pprAr88fSC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 125))
pprAr88fSCi = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 126))
pprAr88fMT = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 127))
pprAr88fMTi = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 128))
pprAr824i = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 129))
pprAt8724XL = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 130))
pprAt8748XL = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 131))
pprAt8724XLDC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 132))
pprAt8748XLDC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 133))
pprAt8824 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 134))
pprAt8824DC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 135))
ppr8724XLDC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 141))
ppr8748XLDC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 142))
pprRapier24iDC_NEBS = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 144)).setLabel("pprRapier24iDC-NEBS")
pprAt8724XLDC_NEBS = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 146)).setLabel("pprAt8724XLDC-NEBS")
pprAt8848DC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 147))
pprRapier48 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 148))
pprAt8848 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 149))
pprRapier48i = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 150))
pprNsm0424BRI = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 151))
pprIcmAR026 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 153))
ppr9816GF = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 157))
ppr9812TF = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 158))
pprSbChassis4AC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 159))
pprSbChassis4DC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 160))
pprSbChassis8AC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 161))
pprSbChassis8DC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 162))
pprSbChassis16AC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 163))
pprSbChassis16DC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 164))
pprSbControl = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 165))
pprSbControlDTM = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 166))
pprSb48t = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 167))
pprSb96t = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 168))
pprSb32fSC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 169))
pprSb32fMT = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 170))
pprSb8fRJ = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 172))
pprSb8fSXSC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 173))
pprSb8fSXMT = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 174))
pprSb8fLXSC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 175))
pprSb8fLXMT = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 176))
pprAr410 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 177))
pprA40SC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 178))
pprA40MTRJ = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 179))
pprA41SC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 180))
pprA41MTRJ = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 181))
pprAr725 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 182))
pprAr745 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 183))
pprSb8GBIC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 184))
pprA42GBIC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 185))
ppr9816GB = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 186))
ppr9812T = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 187))
pprNsm048DS3 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 188))
pprAr450 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 191))
pprAr450Dual = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 192))
pprSbExpander = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 193))
pprAr725DC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 194))
pprAr745DC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 195))
pprAr410v2 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 196))
pprAr410v3 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 197))
pprIcmAr027 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 198))
ppr8948EX = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 202))
ppr8948MX = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 203))
ppr9816GBDC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 204))
ppr9812TDC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 205))
pprIcmAr021v2s = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 206))
pprA50 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 207))
pprA51 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 208))
pprA52 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 209))
pprA53 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 210))
pprFanA01 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 212))
pprAtPwr01AC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 213))
pprAtPwr01DC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 214))
pprAtFan01 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 215))
pprSb24RJ = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 216))
pprSb1XFP = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 217))
ppr9924T = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 218))
ppr9924SP = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 219))
ppr9924TEMC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 220))
ppr9924T4SP = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 221))
pprAR440 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 227))
pprAR441 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 228))
pprAR442 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 229))
pprAR443 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 230))
pprAR444 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 231))
pprAR420 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 232))
pprAt8624T2M = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 239))
pprA46Tx = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 240))
pprAR550 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 241))
pprAR551 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 242))
pprAR552 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 243))
pprC8724MLB = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 248))
pprAt86482SP = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 252))
pprAt8624POE = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 253))
pprAtPwr01RAC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 254))
pprAtFan01R = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 255))
pprAtPwr02AC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 264))
pprAtPwr02RAC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 265))
pprSb24SFP = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 1, 269))
release = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 2))
iftypes = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 3))
ifaceEth = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 3, 1))
ifaceSyn = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 3, 2))
ifaceAsyn = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 3, 3))
ifaceBri = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 3, 4))
ifacePri = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 3, 5))
ifacePots = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 3, 6))
ifaceGBIC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 3, 7))
chips = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4))
chip68020Cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 1))
chip68340Cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 2))
chip68302Cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 3))
chip68360Cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 4))
chip860TCpu = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 5))
chipRtc1 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 21))
chipRtc2 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 22))
chipRtc3 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 23))
chipRtc4 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 24))
chipRam1mb = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 31))
chipRam2mb = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 32))
chipRam3mb = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 33))
chipRam4mb = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 34))
chipRam6mb = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 36))
chipRam8mb = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 38))
chipRam12mb = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 42))
chipRam16mb = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 46))
chipRam20mb = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 50))
chipRam32mb = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 62))
chipFlash1mb = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 71))
chipFlash2mb = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 72))
chipFlash3mb = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 73))
chipFlash4mb = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 74))
chipFlash6mb = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 76))
chipFlash8mb = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 78))
chipPem = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 1, 4, 120))
fanAndPs = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1))
fanAndPsRpsConnectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("non-supported", 0), ("connected", 1), ("not-connected", 2), ("not-monitoring", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsRpsConnectionStatus.setStatus('mandatory')
fanAndPsMainPSUStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("faulty", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsMainPSUStatus.setStatus('mandatory')
fanAndPsRedundantPSUStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("non-supported", 0), ("on", 1), ("off", 2), ("not-monitoring", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsRedundantPSUStatus.setStatus('mandatory')
fanAndPsRpsMonitoringStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("non-supported", 0), ("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanAndPsRpsMonitoringStatus.setStatus('mandatory')
fanAndPsMainFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("non-supported", 0), ("ok", 1), ("not-ok", 2), ("warning", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsMainFanStatus.setStatus('mandatory')
fanAndPsRedundantFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("non-supported", 0), ("ok", 1), ("not-ok", 2), ("not-monitoring", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsRedundantFanStatus.setStatus('mandatory')
fanAndPsTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsTemperatureStatus.setStatus('mandatory')
fanAndPsFanTrayPresent = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("non-supported", 0), ("present", 1), ("not-present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsFanTrayPresent.setStatus('mandatory')
fanAndPsFanTrayStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("non-supported", 0), ("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsFanTrayStatus.setStatus('mandatory')
fanAndPsMainMonitoringStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("non-supported", 0), ("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsMainMonitoringStatus.setStatus('mandatory')
fanAndPsPsuStatusTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 11), )
if mibBuilder.loadTexts: fanAndPsPsuStatusTable.setStatus('mandatory')
fanAndPsPsuStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 11, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "fanAndPsPsuNumber"))
if mibBuilder.loadTexts: fanAndPsPsuStatusEntry.setStatus('mandatory')
fanAndPsPsuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsPsuNumber.setStatus('mandatory')
fanAndPsPsuPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsPsuPresent.setStatus('mandatory')
fanAndPsPsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ac", 0), ("dc", 1), ("fan", 2), ("not-present", 3), ("not-supported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsPsuType.setStatus('mandatory')
fanAndPsPsuFan = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("fail", 1), ("not-present", 2), ("not-supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsPsuFan.setStatus('mandatory')
fanAndPsPsuTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("high", 1), ("not-present", 2), ("not-supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsPsuTemperature.setStatus('mandatory')
fanAndPsPsuPower = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("good", 0), ("bad", 1), ("not-present", 2), ("not-supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsPsuPower.setStatus('mandatory')
fanAndPsAccelFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("non-supported", 0), ("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAndPsAccelFanStatus.setStatus('mandatory')
fanAndPsRpsConnectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1) + (0,1)).setObjects(("ALLIEDTELESYN-MIB", "fanAndPsRpsConnectionStatus"))
fanAndPsMainPSUStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1) + (0,2)).setObjects(("ALLIEDTELESYN-MIB", "fanAndPsMainPSUStatus"))
fanAndPsRedundantPSUStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1) + (0,3)).setObjects(("ALLIEDTELESYN-MIB", "fanAndPsRedundantPSUStatus"))
fanAndPsMainFanStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1) + (0,4)).setObjects(("ALLIEDTELESYN-MIB", "fanAndPsMainFanStatus"))
fanAndPsRedundantFanStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1) + (0,5)).setObjects(("ALLIEDTELESYN-MIB", "fanAndPsRedundantFanStatus"))
fanAndPsTemperatureStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1) + (0,6)).setObjects(("ALLIEDTELESYN-MIB", "fanAndPsTemperatureStatus"))
fanAndPsFanTrayPresentTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1) + (0,7)).setObjects(("ALLIEDTELESYN-MIB", "fanAndPsFanTrayPresent"))
fanAndPsFanTrayStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1) + (0,8)).setObjects(("ALLIEDTELESYN-MIB", "fanAndPsFanTrayStatus"))
fanAndPsMainMonitoringStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1) + (0,9)).setObjects(("ALLIEDTELESYN-MIB", "fanAndPsMainMonitoringStatus"))
fanAndPsAccelFanStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 1) + (0,10)).setObjects(("ALLIEDTELESYN-MIB", "fanAndPsAccelFanStatus"))
restart = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("restart-none", 0), ("restart-warm", 1), ("restart-cold", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restart.setStatus('mandatory')
cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3))
cpuUtilisationMax = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationMax.setStatus('mandatory')
cpuUtilisationAvg = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationAvg.setStatus('mandatory')
cpuUtilisationAvgLastMinute = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationAvgLastMinute.setStatus('mandatory')
cpuUtilisationAvgLast10Seconds = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationAvgLast10Seconds.setStatus('mandatory')
cpuUtilisationAvgLastSecond = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationAvgLastSecond.setStatus('mandatory')
cpuUtilisationMaxLast5Minutes = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationMaxLast5Minutes.setStatus('mandatory')
cpuUtilisationAvgLast5Minutes = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilisationAvgLast5Minutes.setStatus('mandatory')
sysTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4))
generalTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 1))
generalTemperatureSupported = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-supported", 0), ("supported", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalTemperatureSupported.setStatus('mandatory')
generalTemperatureActualTemp = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalTemperatureActualTemp.setStatus('mandatory')
generalTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalTemperatureStatus.setStatus('mandatory')
generalTemperatureThreshold = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generalTemperatureThreshold.setStatus('mandatory')
generalTemperatureStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 1) + (0,1)).setObjects(("ALLIEDTELESYN-MIB", "generalTemperatureStatus"), ("ALLIEDTELESYN-MIB", "generalTemperatureActualTemp"), ("ALLIEDTELESYN-MIB", "generalTemperatureThreshold"))
sbTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2))
sbTempTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2, 1), )
if mibBuilder.loadTexts: sbTempTable.setStatus('mandatory')
sbTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2, 1, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "sbTempIndex"))
if mibBuilder.loadTexts: sbTempEntry.setStatus('mandatory')
sbTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbTempIndex.setStatus('mandatory')
sbTempActualTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbTempActualTemperature.setStatus('mandatory')
sbTempFixedThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("crossover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbTempFixedThresholdStatus.setStatus('mandatory')
sbTempSettableThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("crossover", 2), ("undefined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbTempSettableThresholdStatus.setStatus('mandatory')
sbTempSettableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbTempSettableThreshold.setStatus('mandatory')
sbTempFixedThreshold = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sbTempFixedThreshold.setStatus('mandatory')
sbTempFixedThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2) + (0,1)).setObjects(("ALLIEDTELESYN-MIB", "sbTempFixedThresholdStatus"), ("ALLIEDTELESYN-MIB", "sbTempActualTemperature"), ("ALLIEDTELESYN-MIB", "sbTempFixedThreshold"))
sbTempSettableThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 2) + (0,2)).setObjects(("ALLIEDTELESYN-MIB", "sbTempSettableThresholdStatus"), ("ALLIEDTELESYN-MIB", "sbTempActualTemperature"), ("ALLIEDTELESYN-MIB", "sbTempSettableThreshold"))
atContactDetails = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atContactDetails.setStatus('mandatory')
acceleratorTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 3))
acceleratorTemperatureSupported = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-supported", 0), ("supported", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acceleratorTemperatureSupported.setStatus('mandatory')
acceleratorTemperatureActualTemp = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acceleratorTemperatureActualTemp.setStatus('mandatory')
acceleratorTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acceleratorTemperatureStatus.setStatus('mandatory')
acceleratorTemperatureThreshold = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acceleratorTemperatureThreshold.setStatus('mandatory')
acceleratorTemperatureStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 4, 3) + (0,1)).setObjects(("ALLIEDTELESYN-MIB", "acceleratorTemperatureStatus"))
bbrNvs = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 6))
bbrNvsReinitialiseTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 6) + (0,1))
memory = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 7))
freeMemory = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMemory.setStatus('mandatory')
totalBuffers = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBuffers.setStatus('mandatory')
realTimeClockStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: realTimeClockStatus.setStatus('mandatory')
hostId = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostId.setStatus('mandatory')
arBoardMaxIndex = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arBoardMaxIndex.setStatus('mandatory')
arBoardTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 2), )
if mibBuilder.loadTexts: arBoardTable.setStatus('mandatory')
arBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 2, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "arBoardIndex"))
if mibBuilder.loadTexts: arBoardEntry.setStatus('mandatory')
arBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arBoardIndex.setStatus('mandatory')
arBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arBoardId.setStatus('mandatory')
arBoardName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arBoardName.setStatus('mandatory')
arBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arBoardRevision.setStatus('mandatory')
arBoardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arBoardSerialNumber.setStatus('mandatory')
arBoardTotalSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arBoardTotalSlots.setStatus('mandatory')
arBoardTotalPositions = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arBoardTotalPositions.setStatus('mandatory')
arSlotTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 3), )
if mibBuilder.loadTexts: arSlotTable.setStatus('mandatory')
arSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 3, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "arSlotBoardIndex"), (0, "ALLIEDTELESYN-MIB", "arSlotSlotIndex"))
if mibBuilder.loadTexts: arSlotEntry.setStatus('mandatory')
arSlotBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arSlotBoardIndex.setStatus('mandatory')
arSlotSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arSlotSlotIndex.setStatus('mandatory')
arSlotHeldBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arSlotHeldBoardIndex.setStatus('mandatory')
arSlotDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arSlotDescription.setStatus('mandatory')
arInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 4), )
if mibBuilder.loadTexts: arInterfaceTable.setStatus('mandatory')
arInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 4, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "arInterfaceBoardIndex"), (0, "ALLIEDTELESYN-MIB", "arInterfacePosition"))
if mibBuilder.loadTexts: arInterfaceEntry.setStatus('mandatory')
arInterfaceBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arInterfaceBoardIndex.setStatus('mandatory')
arInterfacePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arInterfacePosition.setStatus('mandatory')
arInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 4, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arInterfaceIfIndex.setStatus('mandatory')
arInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arInterfaceName.setStatus('mandatory')
arInterfaceFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arInterfaceFullName.setStatus('mandatory')
arIfXTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 5), )
if mibBuilder.loadTexts: arIfXTable.setStatus('mandatory')
arIfXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 5, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "arIfXIndex"))
if mibBuilder.loadTexts: arIfXEntry.setStatus('mandatory')
arIfXIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arIfXIndex.setStatus('mandatory')
arIfXAverageInputBitsSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arIfXAverageInputBitsSecond.setStatus('mandatory')
arIfXAverageInputPacketsSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arIfXAverageInputPacketsSecond.setStatus('mandatory')
arIfXAverageOutputBitsSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arIfXAverageOutputBitsSecond.setStatus('mandatory')
arIfXAverageOutputPacketsSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 5, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arIfXAverageOutputPacketsSecond.setStatus('mandatory')
ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 23))
ethIntTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 23, 1), )
if mibBuilder.loadTexts: ethIntTable.setStatus('mandatory')
ethIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 23, 1, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "ethIntIndex"))
if mibBuilder.loadTexts: ethIntEntry.setStatus('mandatory')
ethIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 23, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntIndex.setStatus('mandatory')
ethIntBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 23, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntBoardIndex.setStatus('mandatory')
ethIntBoardPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 23, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntBoardPosition.setStatus('mandatory')
ethIntDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full-duplex", 1), ("half-duplex", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntDuplexMode.setStatus('mandatory')
flash = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31))
flashGetFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashGetFailure.setStatus('mandatory')
flashOpenFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashOpenFailure.setStatus('mandatory')
flashReadFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashReadFailure.setStatus('mandatory')
flashCloseFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCloseFailure.setStatus('mandatory')
flashCompleteFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCompleteFailure.setStatus('mandatory')
flashWriteFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashWriteFailure.setStatus('mandatory')
flashCreateFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCreateFailure.setStatus('mandatory')
flashPutFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashPutFailure.setStatus('mandatory')
flashDeleteFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDeleteFailure.setStatus('mandatory')
flashCheckFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCheckFailure.setStatus('mandatory')
flashEraseFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashEraseFailure.setStatus('mandatory')
flashCompactFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCompactFailure.setStatus('mandatory')
flashVerifyFailure = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashVerifyFailure.setStatus('mandatory')
flashFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 31) + (0,1)).setObjects(("ALLIEDTELESYN-MIB", "flashGetFailure"), ("ALLIEDTELESYN-MIB", "flashOpenFailure"), ("ALLIEDTELESYN-MIB", "flashReadFailure"), ("ALLIEDTELESYN-MIB", "flashCloseFailure"), ("ALLIEDTELESYN-MIB", "flashCompleteFailure"), ("ALLIEDTELESYN-MIB", "flashWriteFailure"), ("ALLIEDTELESYN-MIB", "flashCreateFailure"), ("ALLIEDTELESYN-MIB", "flashPutFailure"), ("ALLIEDTELESYN-MIB", "flashDeleteFailure"), ("ALLIEDTELESYN-MIB", "flashCheckFailure"), ("ALLIEDTELESYN-MIB", "flashEraseFailure"), ("ALLIEDTELESYN-MIB", "flashCompactFailure"), ("ALLIEDTELESYN-MIB", "flashVerifyFailure"))
cc = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37))
ccDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1), )
if mibBuilder.loadTexts: ccDetailsTable.setStatus('mandatory')
ccDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "ccDetailsIndex"))
if mibBuilder.loadTexts: ccDetailsEntry.setStatus('mandatory')
ccDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccDetailsIndex.setStatus('mandatory')
ccDetailsName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsName.setStatus('mandatory')
ccDetailsRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsRemoteName.setStatus('mandatory')
ccDetailsCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsCalledNumber.setStatus('mandatory')
ccDetailsCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsCallingNumber.setStatus('mandatory')
ccDetailsAlternateNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsAlternateNumber.setStatus('mandatory')
ccDetailsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsEnabled.setStatus('mandatory')
ccDetailsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in-only", 1), ("out-only", 2), ("both", 3))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsDirection.setStatus('mandatory')
ccDetailsPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsPrecedence.setStatus('mandatory')
ccDetailsHoldupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsHoldupTime.setStatus('mandatory')
ccDetailsPreferredIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 11), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsPreferredIfIndex.setStatus('mandatory')
ccDetailsRequiredIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 12), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsRequiredIfIndex.setStatus('mandatory')
ccDetailsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsPriority.setStatus('mandatory')
ccDetailsRetryT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 120)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsRetryT1.setStatus('mandatory')
ccDetailsRetryN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsRetryN1.setStatus('mandatory')
ccDetailsRetryT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 1200)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsRetryT2.setStatus('mandatory')
ccDetailsRetryN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsRetryN2.setStatus('mandatory')
ccDetailsKeepup = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsKeepup.setStatus('mandatory')
ccDetailsOutSetupCli = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("calling", 2), ("interface", 3), ("nonumber", 4))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsOutSetupCli.setStatus('mandatory')
ccDetailsOutSetupUser = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsOutSetupUser.setStatus('mandatory')
ccDetailsOutSetupCalledSub = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsOutSetupCalledSub.setStatus('mandatory')
ccDetailsOutSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsOutSubaddress.setStatus('mandatory')
ccDetailsCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsCallback.setStatus('mandatory')
ccDetailsCallbackDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(41)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsCallbackDelay.setStatus('mandatory')
ccDetailsInSetupCalledSubSearch = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupCalledSubSearch.setStatus('mandatory')
ccDetailsInSetupUserSearch = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupUserSearch.setStatus('mandatory')
ccDetailsInSetupCliSearch = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("list", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupCliSearch.setStatus('mandatory')
ccDetailsInSetupCliSearchList = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupCliSearchList.setStatus('mandatory')
ccDetailsInAnyFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInAnyFlag.setStatus('mandatory')
ccDetailsInSetupCalledSubCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupCalledSubCheck.setStatus('mandatory')
ccDetailsInSetupUserCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("local", 2), ("remote", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupUserCheck.setStatus('mandatory')
ccDetailsInSetupCliCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("present", 2), ("required", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupCliCheck.setStatus('mandatory')
ccDetailsInSetupCliCheckList = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsInSetupCliCheckList.setStatus('mandatory')
ccDetailsUserType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("attach", 1), ("ppp", 2))).clone('attach')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsUserType.setStatus('mandatory')
ccDetailsLoginType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("userdb", 2), ("radius", 3), ("pap-tacacs", 4), ("chap", 5), ("pap-radius", 6), ("tacacs", 7), ("all", 8))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsLoginType.setStatus('mandatory')
ccDetailsUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("cli", 2), ("calledsub", 3), ("useruser", 4), ("callname", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsUsername.setStatus('mandatory')
ccDetailsPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("cli", 2), ("calledsub", 3), ("useruser", 4), ("callname", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsPassword.setStatus('mandatory')
ccDetailsBumpDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsBumpDelay.setStatus('mandatory')
ccDetailsDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate-64k", 1), ("rate-56k", 2))).clone('rate-64k')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsDataRate.setStatus('mandatory')
ccDetailsPppTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 33)).clone(33)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccDetailsPppTemplate.setStatus('mandatory')
ccDetailsUserModule = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccDetailsUserModule.setStatus('mandatory')
ccDetailsNumberAttachments = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccDetailsNumberAttachments.setStatus('mandatory')
ccCliListTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 2), )
if mibBuilder.loadTexts: ccCliListTable.setStatus('mandatory')
ccCliListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 2, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "ccCliListListIndex"), (0, "ALLIEDTELESYN-MIB", "ccCliListEntryIndex"))
if mibBuilder.loadTexts: ccCliListEntry.setStatus('mandatory')
ccCliListListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCliListListIndex.setStatus('mandatory')
ccCliListEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCliListEntryIndex.setStatus('mandatory')
ccCliListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCliListNumber.setStatus('mandatory')
ccActiveCallTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3), )
if mibBuilder.loadTexts: ccActiveCallTable.setStatus('mandatory')
ccActiveCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "ccActiveCallIndex"))
if mibBuilder.loadTexts: ccActiveCallEntry.setStatus('mandatory')
ccActiveCallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallIndex.setStatus('mandatory')
ccActiveCallDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallDetailsIndex.setStatus('mandatory')
ccActiveCallIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallIfIndex.setStatus('mandatory')
ccActiveCallDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate-64k", 1), ("rate-56k", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallDataRate.setStatus('mandatory')
ccActiveCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("null", 1), ("off", 2), ("try", 3), ("on", 4), ("wait", 5), ("await1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallState.setStatus('mandatory')
ccActiveCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("undefined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallDirection.setStatus('mandatory')
ccActiveCallUserModule = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallUserModule.setStatus('mandatory')
ccActiveCallUserInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallUserInstance.setStatus('mandatory')
ccActiveCallBchannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccActiveCallBchannelIndex.setStatus('mandatory')
ccCallLogTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 4), )
if mibBuilder.loadTexts: ccCallLogTable.setStatus('mandatory')
ccCallLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 4, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "ccCallLogIndex"))
if mibBuilder.loadTexts: ccCallLogEntry.setStatus('mandatory')
ccCallLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogIndex.setStatus('mandatory')
ccCallLogName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogName.setStatus('mandatory')
ccCallLogState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initial", 1), ("active", 2), ("disconnected", 3), ("cleared", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogState.setStatus('mandatory')
ccCallLogTimeStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogTimeStarted.setStatus('mandatory')
ccCallLogDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogDirection.setStatus('mandatory')
ccCallLogDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogDuration.setStatus('mandatory')
ccCallLogRemoteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCallLogRemoteNumber.setStatus('mandatory')
ccAttachmentTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 5), )
if mibBuilder.loadTexts: ccAttachmentTable.setStatus('mandatory')
ccAttachmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 5, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "ccAttachmentDetailsIndex"), (0, "ALLIEDTELESYN-MIB", "ccAttachmentEntryIndex"))
if mibBuilder.loadTexts: ccAttachmentEntry.setStatus('mandatory')
ccAttachmentDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccAttachmentDetailsIndex.setStatus('mandatory')
ccAttachmentEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccAttachmentEntryIndex.setStatus('mandatory')
ccAttachmentActiveCallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccAttachmentActiveCallIndex.setStatus('mandatory')
ccAttachmentUserInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccAttachmentUserInstance.setStatus('mandatory')
ccBchannelTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 6), )
if mibBuilder.loadTexts: ccBchannelTable.setStatus('mandatory')
ccBchannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 6, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "ccBchannelIfIndex"), (0, "ALLIEDTELESYN-MIB", "ccBchannelChannelIndex"))
if mibBuilder.loadTexts: ccBchannelEntry.setStatus('mandatory')
ccBchannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelIfIndex.setStatus('mandatory')
ccBchannelChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelChannelIndex.setStatus('mandatory')
ccBchannelAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelAllocated.setStatus('mandatory')
ccBchannelCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("data", 2), ("voice", 3), ("x25", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelCallType.setStatus('mandatory')
ccBchannelActiveCallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelActiveCallIndex.setStatus('mandatory')
ccBchannelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelPriority.setStatus('mandatory')
ccBchannelDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 37, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("unallocated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBchannelDirection.setStatus('mandatory')
bri = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41))
briIntTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 1), )
if mibBuilder.loadTexts: briIntTable.setStatus('mandatory')
briIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 1, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "briIntIndex"))
if mibBuilder.loadTexts: briIntEntry.setStatus('mandatory')
briIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briIntIndex.setStatus('mandatory')
briIntBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briIntBoardIndex.setStatus('mandatory')
briIntBoardPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briIntBoardPosition.setStatus('mandatory')
briIntMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("isdn", 1), ("tdm", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: briIntMode.setStatus('mandatory')
briIntTdmChannelMap = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briIntTdmChannelMap.setStatus('mandatory')
briIntIsdnChannelMap = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briIntIsdnChannelMap.setStatus('mandatory')
briChanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 2), )
if mibBuilder.loadTexts: briChanTable.setStatus('mandatory')
briChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 2, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "briChanIntIndex"), (0, "ALLIEDTELESYN-MIB", "briChanChannelIndex"))
if mibBuilder.loadTexts: briChanEntry.setStatus('mandatory')
briChanIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briChanIntIndex.setStatus('mandatory')
briChanChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: briChanChannelIndex.setStatus('mandatory')
briChanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("isdn", 1), ("tdm", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: briChanMode.setStatus('mandatory')
briChanState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 41, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: briChanState.setStatus('mandatory')
pri = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 42))
priIntTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 42, 1), )
if mibBuilder.loadTexts: priIntTable.setStatus('mandatory')
priIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 42, 1, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "priIntIndex"))
if mibBuilder.loadTexts: priIntEntry.setStatus('mandatory')
priIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 42, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priIntIndex.setStatus('mandatory')
priIntBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 42, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priIntBoardIndex.setStatus('mandatory')
priIntBoardPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 42, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priIntBoardPosition.setStatus('mandatory')
priIntMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 42, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("isdn", 1), ("tdm", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: priIntMode.setStatus('mandatory')
priIntTdmChannelMap = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 42, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priIntTdmChannelMap.setStatus('mandatory')
priIntIsdnChannelMap = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 42, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priIntIsdnChannelMap.setStatus('mandatory')
priIntType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 42, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("e1", 1), ("t1", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: priIntType.setStatus('mandatory')
priChanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 42, 2), )
if mibBuilder.loadTexts: priChanTable.setStatus('mandatory')
priChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 42, 2, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "priChanIntIndex"), (0, "ALLIEDTELESYN-MIB", "priChanChannelIndex"))
if mibBuilder.loadTexts: priChanEntry.setStatus('mandatory')
priChanIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 42, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priChanIntIndex.setStatus('mandatory')
priChanChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 42, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: priChanChannelIndex.setStatus('mandatory')
priChanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 42, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("isdn", 1), ("tdm", 2), ("neither", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: priChanMode.setStatus('mandatory')
priChanState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 42, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: priChanState.setStatus('mandatory')
loader = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 48))
loadTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 48, 1), )
if mibBuilder.loadTexts: loadTable.setStatus('mandatory')
loadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 48, 1, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "loadIndex"))
if mibBuilder.loadTexts: loadEntry.setStatus('mandatory')
loadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 48, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadIndex.setStatus('mandatory')
loadServer = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 48, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadServer.setStatus('mandatory')
loadDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 48, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("nvs", 2), ("flash", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadDestination.setStatus('mandatory')
loadFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 48, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadFilename.setStatus('mandatory')
loadDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 48, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadDelay.setStatus('mandatory')
loadStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 48, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("wait", 2), ("loading", 3), ("complete", 4), ("reset", 5), ("actionstart", 6), ("actionstop", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadStatus.setStatus('mandatory')
install = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49))
installTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1), )
if mibBuilder.loadTexts: installTable.setStatus('mandatory')
installEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "instIndex"))
if mibBuilder.loadTexts: installEntry.setStatus('mandatory')
instIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("temporary", 1), ("preferred", 2), ("default", 3), ("current", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: instIndex.setStatus('mandatory')
instRelDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("eprom", 2), ("flash", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: instRelDevice.setStatus('mandatory')
instRelName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: instRelName.setStatus('mandatory')
instRelMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instRelMajor.setStatus('mandatory')
instRelMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instRelMinor.setStatus('mandatory')
instPatDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("flash", 3), ("nvs", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: instPatDevice.setStatus('mandatory')
instPatName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: instPatName.setStatus('mandatory')
instRelInterim = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instRelInterim.setStatus('mandatory')
instRelExists = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: instRelExists.setStatus('mandatory')
instPatExists = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: instPatExists.setStatus('mandatory')
installHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 2), )
if mibBuilder.loadTexts: installHistoryTable.setStatus('mandatory')
installHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 2, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "instHistIndex"))
if mibBuilder.loadTexts: installHistoryEntry.setStatus('mandatory')
instHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: instHistIndex.setStatus('mandatory')
instHistLine = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: instHistLine.setStatus('mandatory')
configFile = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFile.setStatus('mandatory')
licenceTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4), )
if mibBuilder.loadTexts: licenceTable.setStatus('mandatory')
licenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "licenceIndex"))
if mibBuilder.loadTexts: licenceEntry.setStatus('mandatory')
licenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenceIndex.setStatus('mandatory')
licenceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("deleting", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenceStatus.setStatus('mandatory')
licenceRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenceRelease.setStatus('mandatory')
licenceMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenceMajor.setStatus('mandatory')
licenceMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenceMinor.setStatus('mandatory')
licencePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licencePassword.setStatus('mandatory')
licenceExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenceExpiry.setStatus('mandatory')
licenceInterim = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenceInterim.setStatus('mandatory')
createConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: createConfigFile.setStatus('mandatory')
configFileExist = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configFileExist.setStatus('mandatory')
configFileExistTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49) + (0,1)).setObjects(("ALLIEDTELESYN-MIB", "configFileExist"))
currentConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 49, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentConfigFile.setStatus('mandatory')
trigger = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 53))
triggerLastTriggerActivated = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 53, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: triggerLastTriggerActivated.setStatus('mandatory')
triggerTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 53) + (0,1)).setObjects(("ALLIEDTELESYN-MIB", "triggerLastTriggerActivated"))
file = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56))
fileTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56, 1), )
if mibBuilder.loadTexts: fileTable.setStatus('mandatory')
fileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56, 1, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "fileIndex"))
if mibBuilder.loadTexts: fileEntry.setStatus('mandatory')
fileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileIndex.setStatus('mandatory')
fileName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileName.setStatus('mandatory')
fileDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flash", 1), ("nvs", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileDevice.setStatus('mandatory')
fileCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCreationTime.setStatus('mandatory')
fileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("deleting", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileStatus.setStatus('mandatory')
fileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSize.setStatus('mandatory')
fileNumbers = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 56, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileNumbers.setStatus('mandatory')
ping = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58))
pingTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1), )
if mibBuilder.loadTexts: pingTable.setStatus('mandatory')
pingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "pingIndex"))
if mibBuilder.loadTexts: pingEntry.setStatus('mandatory')
pingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingIndex.setStatus('mandatory')
pingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 0), ("apple", 1), ("ip", 2), ("ipx", 3), ("osi", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingProtocol.setStatus('mandatory')
pingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingAddress.setStatus('mandatory')
pingNumberOfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingNumberOfPackets.setStatus('mandatory')
pingPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingPacketSize.setStatus('mandatory')
pingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingTimeout.setStatus('mandatory')
pingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingDelay.setStatus('mandatory')
pingTrapOnCompletion = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingTrapOnCompletion.setStatus('mandatory')
pingTypeOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingTypeOfService.setStatus('mandatory')
pingPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingPattern.setStatus('mandatory')
pingStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start-running", 1), ("stop-stopped", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingStatus.setStatus('mandatory')
pingStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 3))
pingSentPackets = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingSentPackets.setStatus('mandatory')
pingReceivedPackets = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingReceivedPackets.setStatus('mandatory')
pingMinimumRoundTripTime = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingMinimumRoundTripTime.setStatus('mandatory')
pingAverageRoundTripTime = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingAverageRoundTripTime.setStatus('mandatory')
pingMaximumRoundTripTime = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingMaximumRoundTripTime.setStatus('mandatory')
pingTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 58) + (0,1))
dhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 70))
dhcpRangeTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 70, 1), )
if mibBuilder.loadTexts: dhcpRangeTable.setStatus('mandatory')
dhcpRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 70, 1, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "dhcpRangeIndex"))
if mibBuilder.loadTexts: dhcpRangeEntry.setStatus('mandatory')
dhcpRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 70, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRangeIndex.setStatus('mandatory')
dhcpRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 70, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRangeName.setStatus('mandatory')
dhcpRangeBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 70, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRangeBaseAddress.setStatus('mandatory')
dhcpRangeNumberOfAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 70, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRangeNumberOfAddresses.setStatus('mandatory')
dhcpRangeGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 70, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRangeGateway.setStatus('mandatory')
dhcpTrapVariable = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 70, 2))
dhcpRangeExhaustedGateway = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 70, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRangeExhaustedGateway.setStatus('mandatory')
dhcpRangeExhaustedInterface = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 70, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRangeExhaustedInterface.setStatus('mandatory')
dhcpRangeExhaustedTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 70) + (0,1)).setObjects(("ALLIEDTELESYN-MIB", "dhcpRangeExhaustedGateway"), ("ALLIEDTELESYN-MIB", "dhcpRangeExhaustedInterface"))
dhcpClientTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 70, 3), )
if mibBuilder.loadTexts: dhcpClientTable.setStatus('mandatory')
dhcpClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 70, 3, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "dhcpRangeIndex"), (0, "ALLIEDTELESYN-MIB", "dhcpClientIpAddress"))
if mibBuilder.loadTexts: dhcpClientEntry.setStatus('mandatory')
dhcpClientIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 70, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientIpAddress.setStatus('mandatory')
dhcpClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 70, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientID.setStatus('mandatory')
dhcpClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 70, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unused", 0), ("reclaiming", 1), ("inuse", 2), ("offered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientState.setStatus('mandatory')
dhcpClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 70, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("dyn", 2), ("static", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientType.setStatus('mandatory')
dhcpClientExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 70, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientExpiry.setStatus('mandatory')
firewall = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 77))
firewallTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 77, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firewallTrapMessage.setStatus('mandatory')
firewallTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 77) + (0,1)).setObjects(("ALLIEDTELESYN-MIB", "firewallTrapMessage"))
swi = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87))
swiPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 1), )
if mibBuilder.loadTexts: swiPortTable.setStatus('mandatory')
swiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 1, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "swiPortNumber"))
if mibBuilder.loadTexts: swiPortEntry.setStatus('mandatory')
swiPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swiPortNumber.setStatus('mandatory')
swiPortIngressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swiPortIngressLimit.setStatus('mandatory')
swiPortEgressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swiPortEgressLimit.setStatus('mandatory')
swi56xxPortCounterTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2), )
if mibBuilder.loadTexts: swi56xxPortCounterTable.setStatus('mandatory')
swi56xxPortCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "swi56xxPortNumber"))
if mibBuilder.loadTexts: swi56xxPortCounterEntry.setStatus('mandatory')
swi56xxPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortNumber.setStatus('mandatory')
swi56xxRxTx64kPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxRxTx64kPkts.setStatus('mandatory')
swi56xxRxTx65To127kPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxRxTx65To127kPkts.setStatus('mandatory')
swi56xxRxTx128To255kPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxRxTx128To255kPkts.setStatus('mandatory')
swi56xxRxTx256To511kPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxRxTx256To511kPkts.setStatus('mandatory')
swi56xxRxTx512To1023kPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxRxTx512To1023kPkts.setStatus('mandatory')
swi56xxRxTx1024ToMaxPktSzPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxRxTx1024ToMaxPktSzPkts.setStatus('mandatory')
swi56xxRxTx519To1522kPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxRxTx519To1522kPkts.setStatus('mandatory')
swi56xxPortRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortRxOctets.setStatus('mandatory')
swi56xxPortRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortRxPkts.setStatus('mandatory')
swi56xxPortRxFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortRxFCSErrors.setStatus('mandatory')
swi56xxPortRxMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortRxMulticastPkts.setStatus('mandatory')
swi56xxPortRxBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortRxBroadcastPkts.setStatus('mandatory')
swi56xxPortRxPauseMACCtlFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortRxPauseMACCtlFrms.setStatus('mandatory')
swi56xxPortRxOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortRxOversizePkts.setStatus('mandatory')
swi56xxPortRxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortRxFragments.setStatus('mandatory')
swi56xxPortRxJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortRxJabbers.setStatus('mandatory')
swi56xxPortRxMACControlFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortRxMACControlFrms.setStatus('mandatory')
swi56xxPortRxUnsupportOpcode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortRxUnsupportOpcode.setStatus('mandatory')
swi56xxPortRxAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortRxAlignmentErrors.setStatus('mandatory')
swi56xxPortRxOutOfRngeLenFld = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortRxOutOfRngeLenFld.setStatus('mandatory')
swi56xxPortRxSymErDurCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortRxSymErDurCarrier.setStatus('mandatory')
swi56xxPortRxCarrierSenseErr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortRxCarrierSenseErr.setStatus('mandatory')
swi56xxPortRxUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortRxUndersizePkts.setStatus('mandatory')
swi56xxPortRxIpInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortRxIpInHdrErrors.setStatus('mandatory')
swi56xxPortTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortTxOctets.setStatus('mandatory')
swi56xxPortTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortTxPkts.setStatus('mandatory')
swi56xxPortTxFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortTxFCSErrors.setStatus('mandatory')
swi56xxPortTxMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortTxMulticastPkts.setStatus('mandatory')
swi56xxPortTxBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortTxBroadcastPkts.setStatus('mandatory')
swi56xxPortTxPauseMACCtlFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortTxPauseMACCtlFrms.setStatus('mandatory')
swi56xxPortTxOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortTxOversizePkts.setStatus('mandatory')
swi56xxPortTxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortTxFragments.setStatus('mandatory')
swi56xxPortTxJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortTxJabbers.setStatus('mandatory')
swi56xxPortTxPauseCtrlFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortTxPauseCtrlFrms.setStatus('mandatory')
swi56xxPortTxFrameWDeferrdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortTxFrameWDeferrdTx.setStatus('mandatory')
swi56xxPortTxFrmWExcesDefer = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortTxFrmWExcesDefer.setStatus('mandatory')
swi56xxPortTxSingleCollsnFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortTxSingleCollsnFrm.setStatus('mandatory')
swi56xxPortTxMultCollsnFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortTxMultCollsnFrm.setStatus('mandatory')
swi56xxPortTxLateCollsns = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortTxLateCollsns.setStatus('mandatory')
swi56xxPortTxExcessivCollsns = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortTxExcessivCollsns.setStatus('mandatory')
swi56xxPortTxCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortTxCollisionFrames.setStatus('mandatory')
swi56xxPortMiscDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortMiscDropEvents.setStatus('mandatory')
swi56xxPortMiscTaggedPktTx = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortMiscTaggedPktTx.setStatus('mandatory')
swi56xxPortMiscTotalPktTxAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortMiscTotalPktTxAbort.setStatus('mandatory')
swi56xxPortHWMultiTTLexpired = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortHWMultiTTLexpired.setStatus('mandatory')
swi56xxPortHWMultiBridgedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortHWMultiBridgedFrames.setStatus('mandatory')
swi56xxPortHWMultiRxDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortHWMultiRxDrops.setStatus('mandatory')
swi56xxPortHWMultiTxDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swi56xxPortHWMultiTxDrops.setStatus('mandatory')
swiDebugVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 3))
swiDebugMemoryParityErrors = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swiDebugMemoryParityErrors.setStatus('mandatory')
swiIntrusionDetectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 87) + (0,6)).setObjects(("IF-MIB", "ifIndex"))
lb = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104))
lbShowGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 1), )
if mibBuilder.loadTexts: lbShowGlobalTable.setStatus('mandatory')
lbShowGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 1, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "lbGlobalIndex"))
if mibBuilder.loadTexts: lbShowGlobalEntry.setStatus('mandatory')
lbGlobalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbGlobalIndex.setStatus('mandatory')
lbAffinityTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbAffinityTimeOut.setStatus('mandatory')
lbOrphanTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOrphanTimeOut.setStatus('mandatory')
lbCriticalRst = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbCriticalRst.setStatus('mandatory')
lbTotalResources = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbTotalResources.setStatus('mandatory')
lbTotalResPools = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbTotalResPools.setStatus('mandatory')
lbTotalVirtBals = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbTotalVirtBals.setStatus('mandatory')
lbCurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbCurrentConnections.setStatus('mandatory')
lbShowResTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 2), )
if mibBuilder.loadTexts: lbShowResTable.setStatus('mandatory')
lbShowResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 2, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "lbResIndex"))
if mibBuilder.loadTexts: lbShowResEntry.setStatus('mandatory')
lbResIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbResIndex.setStatus('mandatory')
lbResource = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbResource.setStatus('mandatory')
lbResIp = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbResIp.setStatus('mandatory')
lbResPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbResPort.setStatus('mandatory')
lbResState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbResState.setStatus('mandatory')
lbResWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbResWeight.setStatus('mandatory')
lbResTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbResTotalConnections.setStatus('mandatory')
lbResCurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbResCurrentConnections.setStatus('mandatory')
lbShowResPoolTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 3), )
if mibBuilder.loadTexts: lbShowResPoolTable.setStatus('mandatory')
lbShowResPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 3, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "lbResPoolIndex"), (0, "ALLIEDTELESYN-MIB", "lbResPoolResourceIndex"))
if mibBuilder.loadTexts: lbShowResPoolEntry.setStatus('mandatory')
lbResPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbResPoolIndex.setStatus('mandatory')
lbResPoolResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbResPoolResourceIndex.setStatus('mandatory')
lbResPool = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbResPool.setStatus('mandatory')
lbResPoolSelectionAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbResPoolSelectionAlg.setStatus('mandatory')
lbResPoolFailOnLast = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbResPoolFailOnLast.setStatus('mandatory')
lbResPoolTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbResPoolTotalConnections.setStatus('mandatory')
lbResPoolResources = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbResPoolResources.setStatus('mandatory')
lbShowVirtBalTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 4), )
if mibBuilder.loadTexts: lbShowVirtBalTable.setStatus('mandatory')
lbShowVirtBalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 4, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "lbVirtBalIndex"))
if mibBuilder.loadTexts: lbShowVirtBalEntry.setStatus('mandatory')
lbVirtBalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbVirtBalIndex.setStatus('mandatory')
lbVirtBal = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbVirtBal.setStatus('mandatory')
lbVirtBalPublicIp = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbVirtBalPublicIp.setStatus('mandatory')
lbVirtBalPublicPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbVirtBalPublicPort.setStatus('mandatory')
lbVirtBalState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbVirtBalState.setStatus('mandatory')
lbVirtBalResPool = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbVirtBalResPool.setStatus('mandatory')
lbVirtBalType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbVirtBalType.setStatus('mandatory')
lbVirtBalTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbVirtBalTotalConnections.setStatus('mandatory')
lbVirtBalAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbVirtBalAffinity.setStatus('mandatory')
lbVirtBalHttpErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbVirtBalHttpErrorCode.setStatus('mandatory')
lbShowAffTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 5), )
if mibBuilder.loadTexts: lbShowAffTable.setStatus('mandatory')
lbShowAffEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 5, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "lbAffIndex"))
if mibBuilder.loadTexts: lbShowAffEntry.setStatus('mandatory')
lbAffIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbAffIndex.setStatus('mandatory')
lbAffVirtBal = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbAffVirtBal.setStatus('mandatory')
lbAffClientIp = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbAffClientIp.setStatus('mandatory')
lbAffCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbAffCookie.setStatus('mandatory')
lbAffResource = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbAffResource.setStatus('mandatory')
lbAffExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbAffExpiry.setStatus('mandatory')
lbShowConTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 6), )
if mibBuilder.loadTexts: lbShowConTable.setStatus('mandatory')
lbShowConEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 6, 1), ).setIndexNames((0, "ALLIEDTELESYN-MIB", "lbConIndex"))
if mibBuilder.loadTexts: lbShowConEntry.setStatus('mandatory')
lbConIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbConIndex.setStatus('mandatory')
lbConVirtBal = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbConVirtBal.setStatus('mandatory')
lbConClientIp = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbConClientIp.setStatus('mandatory')
lbConPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbConPort.setStatus('mandatory')
lbConResource = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 104, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbConResource.setStatus('mandatory')
ds3module = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 109))
ds3TrapTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 109, 1), )
if mibBuilder.loadTexts: ds3TrapTable.setStatus('mandatory')
ds3TrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 109, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ds3TrapEntry.setStatus('mandatory')
ds3TcaTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 109, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3TcaTrapEnable.setStatus('mandatory')
ds3TrapError = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 109, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("ds3NoError", 1), ("ds3PES", 2), ("ds3PSES", 3), ("ds3SEFs", 4), ("ds3UAS", 5), ("ds3LCVs", 6), ("ds3PCVs", 7), ("ds3LESs", 8), ("ds3CCVs", 9), ("ds3CESs", 10), ("ds3CSESs", 11))).clone('ds3NoError')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TrapError.setStatus('mandatory')
ds3TrapLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 109, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ds3NoLoc", 1), ("ds3Near", 2), ("ds3Far", 3))).clone('ds3NoLoc')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TrapLoc.setStatus('mandatory')
ds3TrapInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 109, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ds3NoInt", 1), ("ds3Fifteen", 2), ("ds3Twentyfour", 3))).clone('ds3NoInt')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TrapInterval.setStatus('mandatory')
tcaTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 109) + (0,1)).setObjects(("ALLIEDTELESYN-MIB", "ds3TrapError"), ("ALLIEDTELESYN-MIB", "ds3TrapLoc"), ("ALLIEDTELESYN-MIB", "ds3TrapInterval"))
mibBuilder.exportSymbols("ALLIEDTELESYN-MIB", ccCliListEntryIndex=ccCliListEntryIndex, chipRam8mb=chipRam8mb, lbShowConTable=lbShowConTable, pprAt8748XLDC=pprAt8748XLDC, pprAR444=pprAR444, cc=cc, sbTempSettableThresholdTrap=sbTempSettableThresholdTrap, swi56xxPortTxPauseCtrlFrms=swi56xxPortTxPauseCtrlFrms, lbAffinityTimeOut=lbAffinityTimeOut, dhcpRangeName=dhcpRangeName, pprRapierG6LX=pprRapierG6LX, pingTable=pingTable, swi=swi, ccDetailsInAnyFlag=ccDetailsInAnyFlag, fanAndPsPsuTemperature=fanAndPsPsuTemperature, pprAr745=pprAr745, fanAndPsTemperatureStatusTrap=fanAndPsTemperatureStatusTrap, pprAr370=pprAr370, install=install, centreCOM_AR390Router=centreCOM_AR390Router, briChanEntry=briChanEntry, pprA50=pprA50, lbVirtBalPublicIp=lbVirtBalPublicIp, briIntMode=briIntMode, pprSbChassis4AC=pprSbChassis4AC, priChanMode=priChanMode, dhcpRangeGateway=dhcpRangeGateway, dhcpClientType=dhcpClientType, file=file, pingTypeOfService=pingTypeOfService, firewallTrap=firewallTrap, dhcpRangeExhaustedGateway=dhcpRangeExhaustedGateway, at_Switchblade4DC=at_Switchblade4DC, bri=bri, chipRtc3=chipRtc3, pprIcmAR026=pprIcmAR026, at_Rapier16fMTi=at_Rapier16fMTi, lbVirtBal=lbVirtBal, at_Rapier8fMTi=at_Rapier8fMTi, ppr8624xl80=ppr8624xl80, pprAR551=pprAR551, swi56xxPortTxExcessivCollsns=swi56xxPortTxExcessivCollsns, swi56xxRxTx64kPkts=swi56xxRxTx64kPkts, pprIcmAr022=pprIcmAr022, pprAr745DC=pprAr745DC, fanAndPsFanTrayPresentTrap=fanAndPsFanTrayPresentTrap, pingProtocol=pingProtocol, at_8848_DC=at_8848_DC, at_AR442Router=at_AR442Router, ccDetailsUserType=ccDetailsUserType, licenceIndex=licenceIndex, arBoardTable=arBoardTable, chipFlash6mb=chipFlash6mb, lbTotalResources=lbTotalResources, ds3module=ds3module, lbAffExpiry=lbAffExpiry, arInterfaceName=arInterfaceName, at_Rapier8fSC=at_Rapier8fSC, pprAt8748XL=pprAt8748XL, pprAr824=pprAr824, at_8624T2M=at_8624T2M, totalBuffers=totalBuffers, fanAndPsMainFanStatus=fanAndPsMainFanStatus, at_9816GF=at_9816GF, at_Switchblade8DC=at_Switchblade8DC, at_8624XL_80=at_8624XL_80, pprIcmAr023=pprIcmAr023, pprAr120=pprAr120, arBoardId=arBoardId, lbAffIndex=lbAffIndex, briIntTable=briIntTable, pprSb32fMT=pprSb32fMT, at_9924T=at_9924T, fanAndPsAccelFanStatus=fanAndPsAccelFanStatus, ds3TcaTrapEnable=ds3TcaTrapEnable, pprAr816fSCi=pprAr816fSCi, pprRapier24iDC_NEBS=pprRapier24iDC_NEBS, pprSbControlDTM=pprSbControlDTM, swi56xxPortTxPkts=swi56xxPortTxPkts, lbVirtBalHttpErrorCode=lbVirtBalHttpErrorCode, dhcp=dhcp, swi56xxPortMiscDropEvents=swi56xxPortMiscDropEvents, loadDestination=loadDestination, pprA35LXSC=pprA35LXSC, acceleratorTemperatureSupported=acceleratorTemperatureSupported, at_RapierG6LX=at_RapierG6LX, lbTotalResPools=lbTotalResPools, cpuUtilisationAvgLastSecond=cpuUtilisationAvgLastSecond, bbrNvsReinitialiseTrap=bbrNvsReinitialiseTrap, arBoardRevision=arBoardRevision, fileSize=fileSize, instPatDevice=instPatDevice, priIntIndex=priIntIndex, lbShowConEntry=lbShowConEntry, pprSb8fRJ=pprSb8fRJ, ccDetailsInSetupCliCheck=ccDetailsInSetupCliCheck, sbTempSettableThresholdStatus=sbTempSettableThresholdStatus, fanAndPsMainPSUStatusTrap=fanAndPsMainPSUStatusTrap, fileCreationTime=fileCreationTime, ethIntIndex=ethIntIndex, lbGlobalIndex=lbGlobalIndex, cpuUtilisationAvg=cpuUtilisationAvg, ccDetailsPassword=ccDetailsPassword, pprNsm0418BRI=pprNsm0418BRI, pprAr140s=pprAr140s, pprAr330=pprAr330, ccActiveCallUserModule=ccActiveCallUserModule, dhcpRangeBaseAddress=dhcpRangeBaseAddress, sbTempActualTemperature=sbTempActualTemperature, arInterfaceIfIndex=arInterfaceIfIndex, at_Rapier16fSCi=at_Rapier16fSCi, swi56xxPortTxLateCollsns=swi56xxPortTxLateCollsns, pprAr725=pprAr725, pingReceivedPackets=pingReceivedPackets, pprAr88t8fSCi=pprAr88t8fSCi, ppr9812T=ppr9812T, flashCloseFailure=flashCloseFailure, centreCOM_AR310Router=centreCOM_AR310Router, lbVirtBalType=lbVirtBalType, arBoardTotalSlots=arBoardTotalSlots, pingMinimumRoundTripTime=pingMinimumRoundTripTime, pprA40SC=pprA40SC, ppr9924T4SP=ppr9924T4SP, lbResTotalConnections=lbResTotalConnections, lbResWeight=lbResWeight, cpu=cpu, pingPattern=pingPattern, sbTemperature=sbTemperature, lbShowGlobalTable=lbShowGlobalTable, mibObject=mibObject, sbTempTable=sbTempTable, ccDetailsCallbackDelay=ccDetailsCallbackDelay, pprA52=pprA52, at_Rapier8fMT=at_Rapier8fMT, ccActiveCallIfIndex=ccActiveCallIfIndex, fileName=fileName, swi56xxPortTxFCSErrors=swi56xxPortTxFCSErrors, dhcpRangeExhaustedInterface=dhcpRangeExhaustedInterface, ccDetailsOutSetupCalledSub=ccDetailsOutSetupCalledSub, ccBchannelDirection=ccBchannelDirection, acceleratorTemperature=acceleratorTemperature, pprRapier16fMTi=pprRapier16fMTi, licenceMajor=licenceMajor, lbShowAffTable=lbShowAffTable, centreCOM_AR740Router=centreCOM_AR740Router, pprAr010=pprAr010, centreCOM_AR310URouter=centreCOM_AR310URouter, at_8948EX=at_8948EX, boards=boards, swi56xxPortRxFCSErrors=swi56xxPortRxFCSErrors, licenceStatus=licenceStatus, pprRapier8t8fMTi=pprRapier8t8fMTi, briChanTable=briChanTable, lbShowResTable=lbShowResTable, swi56xxPortRxJabbers=swi56xxPortRxJabbers, lbCurrentConnections=lbCurrentConnections, lbShowVirtBalEntry=lbShowVirtBalEntry, at_Rapier48i=at_Rapier48i, fanAndPsRpsConnectionTrap=fanAndPsRpsConnectionTrap, pprAr300L=pprAr300L, pprSb8fSXSC=pprSb8fSXSC, ccActiveCallIndex=ccActiveCallIndex, protocols=protocols, lbAffClientIp=lbAffClientIp, cpuUtilisationMaxLast5Minutes=cpuUtilisationMaxLast5Minutes, arSlotBoardIndex=arSlotBoardIndex, flashCompactFailure=flashCompactFailure, at_AR450Router=at_AR450Router, pprAr370u=pprAr370u, ccDetailsRetryT2=ccDetailsRetryT2, ccDetailsPppTemplate=ccDetailsPppTemplate, pprAr88fSC=pprAr88fSC, lbShowResPoolEntry=lbShowResPoolEntry, fanAndPsRpsMonitoringStatus=fanAndPsRpsMonitoringStatus, centreCOM_AR300URouter=centreCOM_AR300URouter, swi56xxPortTxOctets=swi56xxPortTxOctets, ccAttachmentUserInstance=ccAttachmentUserInstance, briIntTdmChannelMap=briIntTdmChannelMap, dhcpRangeIndex=dhcpRangeIndex, pprAr88t8fMTi=pprAr88t8fMTi, lbResPool=lbResPool, fanAndPsPsuType=fanAndPsPsuType, pprAt8824DC=pprAt8824DC, ccCallLogEntry=ccCallLogEntry, pprFanA01=pprFanA01, ds3TrapError=ds3TrapError, swi56xxPortRxCarrierSenseErr=swi56xxPortRxCarrierSenseErr, swi56xxPortRxOutOfRngeLenFld=swi56xxPortRxOutOfRngeLenFld, ifaceEth=ifaceEth, ppr9812TDC=ppr9812TDC, fanAndPsPsuStatusEntry=fanAndPsPsuStatusEntry, fileDevice=fileDevice, atRouter=atRouter, ppr9816GB=ppr9816GB, swi56xxPortTxCollisionFrames=swi56xxPortTxCollisionFrames, arBoardName=arBoardName, at_AR410v2Router=at_AR410v2Router, ccDetailsOutSetupCli=ccDetailsOutSetupCli, swi56xxPortTxBroadcastPkts=swi56xxPortTxBroadcastPkts, swi56xxPortTxPauseMACCtlFrms=swi56xxPortTxPauseMACCtlFrms, swi56xxPortTxJabbers=swi56xxPortTxJabbers, lbResIndex=lbResIndex, firewall=firewall, at_Rapier16fMT=at_Rapier16fMT, pprA41SC=pprA41SC, ds3TrapLoc=ds3TrapLoc, pprAr88t8fSC=pprAr88t8fSC, ethernet=ethernet, pprSbExpander=pprSbExpander, dhcpRangeNumberOfAddresses=dhcpRangeNumberOfAddresses, pprRapierG6SX=pprRapierG6SX, lbResPoolSelectionAlg=lbResPoolSelectionAlg, lbCriticalRst=lbCriticalRst, traps=traps, sysinfo=sysinfo, pprRapier8t8fMT=pprRapier8t8fMT, at_AR551Router=at_AR551Router, ccActiveCallEntry=ccActiveCallEntry, configFileExistTrap=configFileExistTrap, arIfXAverageOutputBitsSecond=arIfXAverageOutputBitsSecond, ccDetailsInSetupUserCheck=ccDetailsInSetupUserCheck, centreCOM_AR350Router=centreCOM_AR350Router, sbTempIndex=sbTempIndex, pprAR441=pprAR441, pprSbChassis8AC=pprSbChassis8AC, pprRapier16fMT=pprRapier16fMT, sysTemperature=sysTemperature, instRelExists=instRelExists, pingStatus=pingStatus, swi56xxPortCounterTable=swi56xxPortCounterTable, currentConfigFile=currentConfigFile, pprAt8624POE=pprAt8624POE, restart=restart, centreCOM_AR320Router=centreCOM_AR320Router, chipRtc2=chipRtc2, createConfigFile=createConfigFile, chip68360Cpu=chip68360Cpu, centreCOM_AR140SRouter=centreCOM_AR140SRouter, pprSb8fLXMT=pprSb8fLXMT, chipFlash2mb=chipFlash2mb, ccDetailsDataRate=ccDetailsDataRate, flash=flash, at_8824_DC=at_8824_DC, pprIcmAr024=pprIcmAr024, lbVirtBalState=lbVirtBalState, ccCallLogState=ccCallLogState, at_8724XL=at_8724XL, pingStatistics=pingStatistics, swi56xxRxTx1024ToMaxPktSzPkts=swi56xxRxTx1024ToMaxPktSzPkts, tcaTrap=tcaTrap, at_AR441Router=at_AR441Router, pprAr720=pprAr720, ccDetailsRetryT1=ccDetailsRetryT1, at_8624POE=at_8624POE)
mibBuilder.exportSymbols("ALLIEDTELESYN-MIB", ccDetailsInSetupCliSearch=ccDetailsInSetupCliSearch, ppr8748XLDC=ppr8748XLDC, InterfaceIndexOrZero=InterfaceIndexOrZero, at_8748XL_80=at_8748XL_80, centreCOM_AR720Router=centreCOM_AR720Router, ccDetailsPreferredIfIndex=ccDetailsPreferredIfIndex, pprIcmAr020=pprIcmAr020, flashCreateFailure=flashCreateFailure, fileNumbers=fileNumbers, swi56xxPortTxFrmWExcesDefer=swi56xxPortTxFrmWExcesDefer, lbShowVirtBalTable=lbShowVirtBalTable, pprIcmAr021v2s=pprIcmAr021v2s, generalTemperatureStatusTrap=generalTemperatureStatusTrap, arIfXTable=arIfXTable, priIntTable=priIntTable, pprA51=pprA51, trigger=trigger, briIntBoardPosition=briIntBoardPosition, ds3TrapTable=ds3TrapTable, ifacePots=ifacePots, iftypes=iftypes, installEntry=installEntry, swi56xxPortRxUndersizePkts=swi56xxPortRxUndersizePkts, centreCOM_AR395Router=centreCOM_AR395Router, arBoardEntry=arBoardEntry, brouterMib=brouterMib, dhcpClientIpAddress=dhcpClientIpAddress, swi56xxPortRxBroadcastPkts=swi56xxPortRxBroadcastPkts, pingMaximumRoundTripTime=pingMaximumRoundTripTime, at_AR550Router=at_AR550Router, ccDetailsKeepup=ccDetailsKeepup, ccBchannelAllocated=ccBchannelAllocated, fanAndPsRedundantPSUStatus=fanAndPsRedundantPSUStatus, briChanChannelIndex=briChanChannelIndex, ppr9924T=ppr9924T, pprAt8624T2M=pprAt8624T2M, ethIntBoardPosition=ethIntBoardPosition, pprRapier24i=pprRapier24i, chipFlash1mb=chipFlash1mb, swi56xxPortTxMultCollsnFrm=swi56xxPortTxMultCollsnFrm, ccDetailsUsername=ccDetailsUsername, lbShowAffEntry=lbShowAffEntry, swiDebugMemoryParityErrors=swiDebugMemoryParityErrors, instRelMajor=instRelMajor, loadTable=loadTable, dhcpClientID=dhcpClientID, swi56xxPortHWMultiTTLexpired=swi56xxPortHWMultiTTLexpired, arBoardSerialNumber=arBoardSerialNumber, lbResIp=lbResIp, acceleratorTemperatureStatus=acceleratorTemperatureStatus, at_Rapier8t8fSCi=at_Rapier8t8fSCi, at_9816GB_DC=at_9816GB_DC, ccDetailsInSetupCliSearchList=ccDetailsInSetupCliSearchList, swiDebugVariables=swiDebugVariables, at_Rapier24=at_Rapier24, lbShowGlobalEntry=lbShowGlobalEntry, at_Rapier8t8fMTi=at_Rapier8t8fMTi, lbShowResEntry=lbShowResEntry, briChanIntIndex=briChanIntIndex, generalTemperature=generalTemperature, ccCallLogDuration=ccCallLogDuration, pprAr88fSCi=pprAr88fSCi, pprAR442=pprAR442, pprAt8824=pprAt8824, pprRapier48=pprRapier48, chips=chips, ppr8948EX=ppr8948EX, installHistoryEntry=installHistoryEntry, pprRapier16fSCi=pprRapier16fSCi, at_AR725Router=at_AR725Router, priIntIsdnChannelMap=priIntIsdnChannelMap, pprSb8fLXSC=pprSb8fLXSC, at_AR440Router=at_AR440Router, at_Switchblade4AC=at_Switchblade4AC, pprAtFan01R=pprAtFan01R, swi56xxPortTxFragments=swi56xxPortTxFragments, centreCOM_AR140URouter=centreCOM_AR140URouter, instHistIndex=instHistIndex, swiPortNumber=swiPortNumber, at_8948MX=at_8948MX, swi56xxPortRxMulticastPkts=swi56xxPortRxMulticastPkts, swi56xxPortRxPauseMACCtlFrms=swi56xxPortRxPauseMACCtlFrms, pprRapier16fSC=pprRapier16fSC, pprRapier8fMT=pprRapier8fMT, arInterfaces=arInterfaces, ccCliListListIndex=ccCliListListIndex, lbResPort=lbResPort, arBoardMaxIndex=arBoardMaxIndex, pprAr450=pprAr450, ccDetailsInSetupCalledSubCheck=ccDetailsInSetupCalledSubCheck, fileIndex=fileIndex, lbAffResource=lbAffResource, ppr9924TEMC=ppr9924TEMC, fanAndPsRpsConnectionStatus=fanAndPsRpsConnectionStatus, pprAt8724XL=pprAt8724XL, chipRam32mb=chipRam32mb, pprIcmAr025=pprIcmAr025, pprAt8848=pprAt8848, at_AR450DualRouter=at_AR450DualRouter, fanAndPsPsuNumber=fanAndPsPsuNumber, pingTrap=pingTrap, pprSbControl=pprSbControl, pprAt8724XLDC=pprAt8724XLDC, pprAR552=pprAR552, arInterfaceBoardIndex=arInterfaceBoardIndex, ccActiveCallDetailsIndex=ccActiveCallDetailsIndex, priChanIntIndex=priChanIntIndex, generalTemperatureSupported=generalTemperatureSupported, pingAverageRoundTripTime=pingAverageRoundTripTime, ccDetailsRetryN2=ccDetailsRetryN2, pprRapier8t8fSCi=pprRapier8t8fSCi, at_RapierG6=at_RapierG6, ccDetailsNumberAttachments=ccDetailsNumberAttachments, acceleratorTemperatureThreshold=acceleratorTemperatureThreshold, ccBchannelChannelIndex=ccBchannelChannelIndex, bbrNvs=bbrNvs, lbConPort=lbConPort, alliedTelesyn=alliedTelesyn, generalTemperatureStatus=generalTemperatureStatus, hostId=hostId, swiPortIngressLimit=swiPortIngressLimit, lbAffCookie=lbAffCookie, ccDetailsUserModule=ccDetailsUserModule, swi56xxPortRxAlignmentErrors=swi56xxPortRxAlignmentErrors, ccDetailsEnabled=ccDetailsEnabled, pprAr320=pprAr320, ccCliListTable=ccCliListTable, chip860TCpu=chip860TCpu, acceleratorTemperatureStatusTrap=acceleratorTemperatureStatusTrap, swi56xxPortMiscTotalPktTxAbort=swi56xxPortMiscTotalPktTxAbort, arInterfacePosition=arInterfacePosition, briIntIsdnChannelMap=briIntIsdnChannelMap, fanAndPsMainPSUStatus=fanAndPsMainPSUStatus, at_AR420Router=at_AR420Router, centreCOM_AR370URouter=centreCOM_AR370URouter, pprAtPwr02AC=pprAtPwr02AC, swi56xxPortRxFragments=swi56xxPortRxFragments, loadEntry=loadEntry, fanAndPsPsuFan=fanAndPsPsuFan, swi56xxRxTx519To1522kPkts=swi56xxRxTx519To1522kPkts, pprRapier48i=pprRapier48i, ccDetailsIndex=ccDetailsIndex, dhcpClientTable=dhcpClientTable, ccAttachmentActiveCallIndex=ccAttachmentActiveCallIndex, chipRam4mb=chipRam4mb, ccBchannelActiveCallIndex=ccBchannelActiveCallIndex, swiPortTable=swiPortTable, pprAr300=pprAr300, ccAttachmentEntry=ccAttachmentEntry, at_8748XLDC=at_8748XLDC, ifaceBri=ifaceBri, arIfXAverageInputPacketsSecond=arIfXAverageInputPacketsSecond, at_Rapier24i_DC_NEBS=at_Rapier24i_DC_NEBS, chip68020Cpu=chip68020Cpu, swi56xxRxTx512To1023kPkts=swi56xxRxTx512To1023kPkts, ccDetailsOutSetupUser=ccDetailsOutSetupUser, at_Rapier8t8fSC=at_Rapier8t8fSC, at_9812T=at_9812T, flashReadFailure=flashReadFailure, pprRapier24=pprRapier24, ccDetailsName=ccDetailsName, pprAr140u=pprAr140u, licenceTable=licenceTable, pprAr450Dual=pprAr450Dual, pprSb24SFP=pprSb24SFP, pingTrapOnCompletion=pingTrapOnCompletion, at_8724XL_DC_NEBS=at_8724XL_DC_NEBS, flashCheckFailure=flashCheckFailure, freeMemory=freeMemory, configFile=configFile, pprAr300Lu=pprAr300Lu, firewallTrapMessage=firewallTrapMessage, ccBchannelEntry=ccBchannelEntry, instHistLine=instHistLine, pprA41MTRJ=pprA41MTRJ, fanAndPsAccelFanStatusTrap=fanAndPsAccelFanStatusTrap, at_9924SP=at_9924SP, lbVirtBalAffinity=lbVirtBalAffinity, chipRam2mb=chipRam2mb, pprAr395=pprAr395, at_Rapier8fSCi=at_Rapier8fSCi, fanAndPsMainMonitoringStatus=fanAndPsMainMonitoringStatus, atContactDetails=atContactDetails, swi56xxPortMiscTaggedPktTx=swi56xxPortMiscTaggedPktTx, pprAR443=pprAR443, pprAR550=pprAR550, briChanState=briChanState, priIntEntry=priIntEntry, pprSbChassis16DC=pprSbChassis16DC, swi56xxPortRxUnsupportOpcode=swi56xxPortRxUnsupportOpcode, swi56xxPortHWMultiTxDrops=swi56xxPortHWMultiTxDrops, centreCOM_AR120Router=centreCOM_AR120Router, objects=objects, at_RapierG6MT=at_RapierG6MT, at_AR443Router=at_AR443Router, triggerTrap=triggerTrap, pprAr310u=pprAr310u, at_AR745Router=at_AR745Router, swiPortEntry=swiPortEntry, ppr8724XLDC=ppr8724XLDC, dhcpRangeTable=dhcpRangeTable, pprIcmAr021s=pprIcmAr021s, centreCOM_AR130URouter=centreCOM_AR130URouter, arSlotHeldBoardIndex=arSlotHeldBoardIndex, arIfXEntry=arIfXEntry, pprAr130s=pprAr130s, cpuUtilisationMax=cpuUtilisationMax, ccBchannelCallType=ccBchannelCallType, fanAndPs=fanAndPs, swi56xxPortHWMultiBridgedFrames=swi56xxPortHWMultiBridgedFrames, pprA37VF45=pprA37VF45, pprAR440=pprAR440, centreCOM_AR300Router=centreCOM_AR300Router, priIntBoardPosition=priIntBoardPosition, at_AR725RouterDC=at_AR725RouterDC, pprSb32fSC=pprSb32fSC, generalTemperatureActualTemp=generalTemperatureActualTemp, swi56xxPortCounterEntry=swi56xxPortCounterEntry, fileTable=fileTable, swi56xxPortRxOversizePkts=swi56xxPortRxOversizePkts, sbTempFixedThreshold=sbTempFixedThreshold, ccDetailsInSetupCliCheckList=ccDetailsInSetupCliCheckList, ccDetailsRequiredIfIndex=ccDetailsRequiredIfIndex, arIfXAverageInputBitsSecond=arIfXAverageInputBitsSecond, lbResCurrentConnections=lbResCurrentConnections, pprAr816fSC=pprAr816fSC, ifaceGBIC=ifaceGBIC, centreCOM_AR130SRouter=centreCOM_AR130SRouter, instRelInterim=instRelInterim, swi56xxPortTxFrameWDeferrdTx=swi56xxPortTxFrameWDeferrdTx, ethIntBoardIndex=ethIntBoardIndex, pprAr310=pprAr310, licenceRelease=licenceRelease, lbConResource=lbConResource, fanAndPsRedundantPSUStatusTrap=fanAndPsRedundantPSUStatusTrap, instPatExists=instPatExists, ethIntTable=ethIntTable, lbVirtBalPublicPort=lbVirtBalPublicPort, lbConVirtBal=lbConVirtBal, ppr9812TF=ppr9812TF, dhcpClientState=dhcpClientState, ppr9816GBDC=ppr9816GBDC, cpuUtilisationAvgLast5Minutes=cpuUtilisationAvgLast5Minutes, ccBchannelTable=ccBchannelTable, ccActiveCallState=ccActiveCallState, ccActiveCallBchannelIndex=ccActiveCallBchannelIndex, at_9816GB=at_9816GB, pprAr88t8fMT=pprAr88t8fMT, pprSbChassis8DC=pprSbChassis8DC, priIntType=priIntType, lbTotalVirtBals=lbTotalVirtBals, ds3TrapEntry=ds3TrapEntry, ds3TrapInterval=ds3TrapInterval, pprAr740=pprAr740)
mibBuilder.exportSymbols("ALLIEDTELESYN-MIB", ccDetailsBumpDelay=ccDetailsBumpDelay, ccBchannelIfIndex=ccBchannelIfIndex, flashCompleteFailure=flashCompleteFailure, at_AR410Router=at_AR410Router, ethIntDuplexMode=ethIntDuplexMode, swi56xxPortNumber=swi56xxPortNumber, swi56xxRxTx65To127kPkts=swi56xxRxTx65To127kPkts, pprAr160su=pprAr160su, pprAt8848DC=pprAt8848DC, ifaceAsyn=ifaceAsyn, chipFlash8mb=chipFlash8mb, loadDelay=loadDelay, ccDetailsCallback=ccDetailsCallback, lbAffVirtBal=lbAffVirtBal, pprRapier8t8fSC=pprRapier8t8fSC, lbOrphanTimeOut=lbOrphanTimeOut, ccCallLogTable=ccCallLogTable, at_8848=at_8848, chip68302Cpu=chip68302Cpu, pingPacketSize=pingPacketSize, ccDetailsLoginType=ccDetailsLoginType, fileStatus=fileStatus, flashVerifyFailure=flashVerifyFailure, pprAR420=pprAR420, loader=loader, release=release, lbVirtBalResPool=lbVirtBalResPool, arInterfaceEntry=arInterfaceEntry, at_AR745RouterDC=at_AR745RouterDC, chipRam6mb=chipRam6mb, pprRapier8fMTi=pprRapier8fMTi, lbResPoolResources=lbResPoolResources, ccCallLogTimeStarted=ccCallLogTimeStarted, pprAr130u=pprAr130u, ccDetailsCallingNumber=ccDetailsCallingNumber, swiPortEgressLimit=swiPortEgressLimit, ccBchannelPriority=ccBchannelPriority, pingAddress=pingAddress, ccActiveCallTable=ccActiveCallTable, chipPem=chipPem, lbResPoolIndex=lbResPoolIndex, lb=lb, ifacePri=ifacePri, arInterfaceTable=arInterfaceTable, licenceMinor=licenceMinor, at_RapierG6SX=at_RapierG6SX, pprA35SXSC=pprA35SXSC, chipRtc4=chipRtc4, ccDetailsInSetupCalledSubSearch=ccDetailsInSetupCalledSubSearch, pingTimeout=pingTimeout, swi56xxPortRxSymErDurCarrier=swi56xxPortRxSymErDurCarrier, pprAtFan01=pprAtFan01, pprAr410v3=pprAr410v3, at_AR740RouterDC=at_AR740RouterDC, swi56xxPortTxMulticastPkts=swi56xxPortTxMulticastPkts, pprIcmAr027=pprIcmAr027, at_8824=at_8824, ccDetailsHoldupTime=ccDetailsHoldupTime, pprNsm0404Pic=pprNsm0404Pic, arInterfaceFullName=arInterfaceFullName, ccDetailsEntry=ccDetailsEntry, ccCallLogName=ccCallLogName, fanAndPsTemperatureStatus=fanAndPsTemperatureStatus, instRelDevice=instRelDevice, swi56xxPortRxMACControlFrms=swi56xxPortRxMACControlFrms, pri=pri, priChanChannelIndex=priChanChannelIndex, swi56xxPortTxSingleCollsnFrm=swi56xxPortTxSingleCollsnFrm, pprSb8GBIC=pprSb8GBIC, fanAndPsMainFanStatusTrap=fanAndPsMainFanStatusTrap, at_8724XL_80=at_8724XL_80, chip68340Cpu=chip68340Cpu, briChanMode=briChanMode, swi56xxRxTx256To511kPkts=swi56xxRxTx256To511kPkts, at_Rapier24i=at_Rapier24i, pprSbChassis16AC=pprSbChassis16AC, pprAt86482SP=pprAt86482SP, lbResPoolTotalConnections=lbResPoolTotalConnections, pprAr824i=pprAr824i, products=products, modules=modules, priIntBoardIndex=priIntBoardIndex, licenceExpiry=licenceExpiry, fanAndPsMainMonitoringStatusTrap=fanAndPsMainMonitoringStatusTrap, sbTempSettableThreshold=sbTempSettableThreshold, pprAr410=pprAr410, priIntMode=priIntMode, centreCOM_AR300LURouter=centreCOM_AR300LURouter, chipRtc1=chipRtc1, ccDetailsCalledNumber=ccDetailsCalledNumber, loadStatus=loadStatus, dhcpTrapVariable=dhcpTrapVariable, dhcpRangeEntry=dhcpRangeEntry, fanAndPsPsuPower=fanAndPsPsuPower, centreCOM_AR370Router=centreCOM_AR370Router, acceleratorTemperatureActualTemp=acceleratorTemperatureActualTemp, briIntEntry=briIntEntry, lbResPoolResourceIndex=lbResPoolResourceIndex, pprSb48t=pprSb48t, pprSb8fSXMT=pprSb8fSXMT, ccDetailsTable=ccDetailsTable, ccDetailsPriority=ccDetailsPriority, ccActiveCallDataRate=ccActiveCallDataRate, flashPutFailure=flashPutFailure, at_Switchblade8AC=at_Switchblade8AC, pprA53=pprA53, ccActiveCallDirection=ccActiveCallDirection, ccCallLogDirection=ccCallLogDirection, pprRapierG6MT=pprRapierG6MT, chipRam12mb=chipRam12mb, flashOpenFailure=flashOpenFailure, pprC8724MLB=pprC8724MLB, generalTemperatureThreshold=generalTemperatureThreshold, pprRapier8fSCi=pprRapier8fSCi, pprAt8724XLDC_NEBS=pprAt8724XLDC_NEBS, fanAndPsPsuPresent=fanAndPsPsuPresent, sbTempEntry=sbTempEntry, at_AR444Router=at_AR444Router, at_Rapier16fVF=at_Rapier16fVF, pprAr011=pprAr011, pprSbChassis4DC=pprSbChassis4DC, centreCOM_AR160Router=centreCOM_AR160Router, bridgeRouter=bridgeRouter, swi56xxRxTx128To255kPkts=swi56xxRxTx128To255kPkts, sbTempFixedThresholdStatus=sbTempFixedThresholdStatus, lbResPoolFailOnLast=lbResPoolFailOnLast, at_AR552Router=at_AR552Router, pprA38LC=pprA38LC, routerSwitch=routerSwitch, licencePassword=licencePassword, ccDetailsPrecedence=ccDetailsPrecedence, lbConIndex=lbConIndex, dhcpRangeExhaustedTrap=dhcpRangeExhaustedTrap, pprAtPwr01RAC=pprAtPwr01RAC, chipRam3mb=chipRam3mb, dhcpClientExpiry=dhcpClientExpiry, swi56xxPortRxPkts=swi56xxPortRxPkts, flashWriteFailure=flashWriteFailure, ccCliListEntry=ccCliListEntry, chipRam16mb=chipRam16mb, ifaceSyn=ifaceSyn, pprA39Tx=pprA39Tx, arIfXAverageOutputPacketsSecond=arIfXAverageOutputPacketsSecond, loadIndex=loadIndex, loadFilename=loadFilename, pprA46Tx=pprA46Tx, pprRapierG6=pprRapierG6, cpuUtilisationAvgLastMinute=cpuUtilisationAvgLastMinute, fanAndPsRedundantFanStatusTrap=fanAndPsRedundantFanStatusTrap, ccCliListNumber=ccCliListNumber, ppr8948MX=ppr8948MX, priChanState=priChanState, installHistoryTable=installHistoryTable, pprAr740DC=pprAr740DC, fanAndPsPsuStatusTable=fanAndPsPsuStatusTable, instRelName=instRelName, pprAr816fMT=pprAr816fMT, ccDetailsRetryN1=ccDetailsRetryN1, instPatName=instPatName, at_Rapier16fSC=at_Rapier16fSC, at_Rapier8t8fMT=at_Rapier8t8fMT, ccDetailsOutSubaddress=ccDetailsOutSubaddress, pingSentPackets=pingSentPackets, lbResState=lbResState, pprAr410v2=pprAr410v2, at_9812T_DC=at_9812T_DC, memory=memory, arSlotTable=arSlotTable, briIntBoardIndex=briIntBoardIndex, fanAndPsFanTrayPresent=fanAndPsFanTrayPresent, realTimeClockStatus=realTimeClockStatus, pprRapier8fSC=pprRapier8fSC, flashGetFailure=flashGetFailure, pingNumberOfPackets=pingNumberOfPackets, arSlotDescription=arSlotDescription, ping=ping, at_AR410v3Router=at_AR410v3Router, configFileExist=configFileExist, swi56xxPortTxOversizePkts=swi56xxPortTxOversizePkts, pprAr816fMTi=pprAr816fMTi, cpuUtilisationAvgLast10Seconds=cpuUtilisationAvgLast10Seconds, swiIntrusionDetectionTrap=swiIntrusionDetectionTrap, lbShowResPoolTable=lbShowResPoolTable, ppr9924SP=ppr9924SP, flashFailureTrap=flashFailureTrap, fanAndPsFanTrayStatus=fanAndPsFanTrayStatus, pprAr88fMT=pprAr88fMT, pprAr390=pprAr390, chipRam1mb=chipRam1mb, sbTempFixedThresholdTrap=sbTempFixedThresholdTrap, licenceInterim=licenceInterim, swi56xxPortRxIpInHdrErrors=swi56xxPortRxIpInHdrErrors, arIfXIndex=arIfXIndex, ccDetailsRemoteName=ccDetailsRemoteName, ccDetailsAlternateNumber=ccDetailsAlternateNumber, pingDelay=pingDelay, chipRam20mb=chipRam20mb, ccCallLogRemoteNumber=ccCallLogRemoteNumber, pprAr725DC=pprAr725DC, priChanTable=priChanTable, instRelMinor=instRelMinor, pprNsm048DS3=pprNsm048DS3, arSlotSlotIndex=arSlotSlotIndex, dhcpClientEntry=dhcpClientEntry, fanAndPsRedundantFanStatus=fanAndPsRedundantFanStatus, priIntTdmChannelMap=priIntTdmChannelMap, ccDetailsInSetupUserSearch=ccDetailsInSetupUserSearch, arBoardIndex=arBoardIndex, at_9924T_4SP=at_9924T_4SP, at_8724MLB=at_8724MLB, arSlotEntry=arSlotEntry, lbVirtBalIndex=lbVirtBalIndex, pprAr012=pprAr012, at_86482SP=at_86482SP, pprAtPwr01AC=pprAtPwr01AC, pprA42GBIC=pprA42GBIC, ccAttachmentTable=ccAttachmentTable, pprSb24RJ=pprSb24RJ, pprA40MTRJ=pprA40MTRJ, ccAttachmentEntryIndex=ccAttachmentEntryIndex, at_8748XL=at_8748XL, ppr9816GF=ppr9816GF, flashDeleteFailure=flashDeleteFailure, pprSb1XFP=pprSb1XFP, ccActiveCallUserInstance=ccActiveCallUserInstance, chipFlash4mb=chipFlash4mb, ethIntEntry=ethIntEntry, ccDetailsDirection=ccDetailsDirection, lbResource=lbResource, pprAr88fMTi=pprAr88fMTi, loadServer=loadServer, priChanEntry=priChanEntry, pingIndex=pingIndex, instIndex=instIndex, at_Rapier48=at_Rapier48, triggerLastTriggerActivated=triggerLastTriggerActivated, pprAr350=pprAr350, arBoardTotalPositions=arBoardTotalPositions, briIntIndex=briIntIndex, ccCallLogIndex=ccCallLogIndex, fileEntry=fileEntry, pprIcmAr021u=pprIcmAr021u, at_8724XLDC=at_8724XLDC, chipFlash3mb=chipFlash3mb, pprSb96t=pprSb96t, pprAtPwr01DC=pprAtPwr01DC, pprNsm0424BRI=pprNsm0424BRI, swi56xxPortHWMultiRxDrops=swi56xxPortHWMultiRxDrops, centreCOM_AR330Router=centreCOM_AR330Router, pprAr300u=pprAr300u, centreCOM_AR300LRouter=centreCOM_AR300LRouter, at_9812TF=at_9812TF, fanAndPsFanTrayStatusTrap=fanAndPsFanTrayStatusTrap, ccAttachmentDetailsIndex=ccAttachmentDetailsIndex)
mibBuilder.exportSymbols("ALLIEDTELESYN-MIB", lbConClientIp=lbConClientIp, pingEntry=pingEntry, lbVirtBalTotalConnections=lbVirtBalTotalConnections, installTable=installTable, flashEraseFailure=flashEraseFailure, pprA36MTRJ=pprA36MTRJ, at_9924TEMC=at_9924TEMC, licenceEntry=licenceEntry, pprAtPwr02RAC=pprAtPwr02RAC, swi56xxPortRxOctets=swi56xxPortRxOctets)
