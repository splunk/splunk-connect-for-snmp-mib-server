#
# PySNMP MIB module TRIDIUMR3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRIDIUMR3-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:20:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, TimeTicks, Counter64, IpAddress, MibIdentifier, Counter32, enterprises, NotificationType, ObjectIdentity, ModuleIdentity, Gauge32, NotificationType, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "Counter64", "IpAddress", "MibIdentifier", "Counter32", "enterprises", "NotificationType", "ObjectIdentity", "ModuleIdentity", "Gauge32", "NotificationType", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tridium = MibIdentifier((1, 3, 6, 1, 4, 1, 4131))
tridiumStation = MibIdentifier((1, 3, 6, 1, 4, 1, 4131, 1))
version = MibScalar((1, 3, 6, 1, 4, 1, 4131, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: version.setStatus('mandatory')
action = MibScalar((1, 3, 6, 1, 4, 1, 4131, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noAction", 0), ("ackAll", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: action.setStatus('mandatory')
alarmTable = MibTable((1, 3, 6, 1, 4, 1, 4131, 1, 3), )
if mibBuilder.loadTexts: alarmTable.setStatus('mandatory')
alarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1), ).setIndexNames((1, "TRIDIUMR3-MIB", "uuid"))
if mibBuilder.loadTexts: alarmTableEntry.setStatus('mandatory')
timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timestamp.setStatus('mandatory')
uuid = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uuid.setStatus('mandatory')
sourceState = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("offnormal", 1), ("fault", 2), ("alert", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceState.setStatus('mandatory')
ackState = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("acked", 0), ("unacked", 1), ("ackPending", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ackState.setStatus('mandatory')
ackRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ackRequired.setStatus('mandatory')
source = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: source.setStatus('mandatory')
alarmClass = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmClass.setStatus('mandatory')
priority = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: priority.setStatus('mandatory')
normalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: normalTime.setStatus('mandatory')
ackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ackTime.setStatus('mandatory')
user = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: user.setStatus('mandatory')
alarmData = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmData.setStatus('mandatory')
alarmTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("offnormal", 1), ("fault", 2), ("alert", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTransition.setStatus('mandatory')
lastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastUpdate.setStatus('mandatory')
inputTable = MibTable((1, 3, 6, 1, 4, 1, 4131, 1, 4), )
if mibBuilder.loadTexts: inputTable.setStatus('mandatory')
inputTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4131, 1, 4, 1), ).setIndexNames((0, "TRIDIUMR3-MIB", "inputIndex"))
if mibBuilder.loadTexts: inputTableEntry.setStatus('mandatory')
inputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputIndex.setStatus('mandatory')
inputName = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputName.setStatus('mandatory')
inputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputValue.setStatus('mandatory')
outputTable = MibTable((1, 3, 6, 1, 4, 1, 4131, 1, 5), )
if mibBuilder.loadTexts: outputTable.setStatus('mandatory')
outputTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4131, 1, 5, 1), ).setIndexNames((0, "TRIDIUMR3-MIB", "outputIndex"))
if mibBuilder.loadTexts: outputTableEntry.setStatus('mandatory')
outputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputIndex.setStatus('mandatory')
outputName = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputName.setStatus('mandatory')
outputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4131, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputValue.setStatus('mandatory')
stationAlarm = NotificationType((1, 3, 6, 1, 4, 1, 4131, 1) + (0,1)).setObjects(("TRIDIUMR3-MIB", "timestamp"), ("TRIDIUMR3-MIB", "uuid"), ("TRIDIUMR3-MIB", "sourceState"), ("TRIDIUMR3-MIB", "ackState"), ("TRIDIUMR3-MIB", "ackRequired"), ("TRIDIUMR3-MIB", "source"), ("TRIDIUMR3-MIB", "alarmClass"), ("TRIDIUMR3-MIB", "priority"), ("TRIDIUMR3-MIB", "normalTime"), ("TRIDIUMR3-MIB", "ackTime"), ("TRIDIUMR3-MIB", "user"), ("TRIDIUMR3-MIB", "alarmData"), ("TRIDIUMR3-MIB", "alarmTransition"), ("TRIDIUMR3-MIB", "lastUpdate"))
mibBuilder.exportSymbols("TRIDIUMR3-MIB", action=action, outputValue=outputValue, inputTable=inputTable, ackState=ackState, sourceState=sourceState, user=user, tridium=tridium, outputName=outputName, ackRequired=ackRequired, inputIndex=inputIndex, inputName=inputName, uuid=uuid, alarmClass=alarmClass, source=source, stationAlarm=stationAlarm, ackTime=ackTime, inputValue=inputValue, alarmData=alarmData, inputTableEntry=inputTableEntry, outputIndex=outputIndex, version=version, timestamp=timestamp, tridiumStation=tridiumStation, alarmTransition=alarmTransition, outputTable=outputTable, outputTableEntry=outputTableEntry, alarmTable=alarmTable, lastUpdate=lastUpdate, normalTime=normalTime, alarmTableEntry=alarmTableEntry, priority=priority)
