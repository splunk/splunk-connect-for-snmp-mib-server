#
# PySNMP MIB module HPN-ICF-LswINF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-LswINF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:25:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
hpnicflswCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicflswCommon")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, TimeTicks, NotificationType, Counter64, Bits, ModuleIdentity, ObjectIdentity, IpAddress, Gauge32, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "NotificationType", "Counter64", "Bits", "ModuleIdentity", "ObjectIdentity", "IpAddress", "Gauge32", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32")
TextualConvention, DisplayString, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "TruthValue")
hpnicfLswL2InfMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5))
hpnicfLswL2InfMib.setRevisions(('2001-06-29 00:00',))
if mibBuilder.loadTexts: hpnicfLswL2InfMib.setLastUpdated('200106290000Z')
if mibBuilder.loadTexts: hpnicfLswL2InfMib.setOrganization('')
class PortList(TextualConvention, OctetString):
    status = 'current'

class VlanIndex(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class DropDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("disable", 1), ("enableInbound", 2), ("enableOutbound", 3), ("enableBoth", 4))

class SpeedModeFlag(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("s10M", 0), ("s100M", 1), ("s1000M", 2), ("s10000M", 3), ("s24000M", 4), ("s40000M", 5), ("s100000M", 6))

hpnicfLswExtInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1))
hpnicfifXXTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1), )
if mibBuilder.loadTexts: hpnicfifXXTable.setStatus('current')
hpnicfifXXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfifXXEntry.setStatus('current')
hpnicfifUnBoundPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifUnBoundPort.setStatus('current')
hpnicfifISPhyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifISPhyPort.setStatus('current')
hpnicfifAggregatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifAggregatePort.setStatus('current')
hpnicfifMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifMirrorPort.setStatus('current')
hpnicfifVLANType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vLANTrunk", 1), ("access", 2), ("hybrid", 3), ("fabric", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifVLANType.setStatus('current')
hpnicfifMcastControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifMcastControl.setStatus('current')
hpnicfifFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifFlowControl.setStatus('current')
hpnicfifSrcMacControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifSrcMacControl.setStatus('current')
hpnicfifClearStat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifClearStat.setStatus('current')
hpnicfifXXBasePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifXXBasePortIndex.setStatus('current')
hpnicfifXXDevPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifXXDevPortIndex.setStatus('current')
hpnicfifPpsMcastControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifPpsMcastControl.setStatus('current')
hpnicfifPpsBcastDisValControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifPpsBcastDisValControl.setStatus('current')
hpnicfifUniSuppressionStep = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifUniSuppressionStep.setStatus('current')
hpnicfifPpsUniSuppressionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifPpsUniSuppressionMax.setStatus('current')
hpnicfifMulSuppressionStep = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifMulSuppressionStep.setStatus('current')
hpnicfifPpsMulSuppressionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifPpsMulSuppressionMax.setStatus('current')
hpnicfifUniSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifUniSuppression.setStatus('current')
hpnicfifPpsUniSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifPpsUniSuppression.setStatus('current')
hpnicfifMulSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifMulSuppression.setStatus('current')
hpnicfifPpsMulSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifPpsMulSuppression.setStatus('current')
hpnicfifComboActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fiber", 1), ("copper", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifComboActivePort.setStatus('obsolete')
hpnicfifBMbpsMulSuppressionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifBMbpsMulSuppressionMax.setStatus('current')
hpnicfifBMbpsMulSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifBMbpsMulSuppression.setStatus('current')
hpnicfifBKbpsMulSuppressionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifBKbpsMulSuppressionMax.setStatus('current')
hpnicfifBKbpsMulSuppressionStep = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifBKbpsMulSuppressionStep.setStatus('current')
hpnicfifBKbpsMulSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifBKbpsMulSuppression.setStatus('current')
hpnicfifUnknownPacketDropMul = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 28), DropDirection().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifUnknownPacketDropMul.setStatus('current')
hpnicfifUnknownPacketDropUni = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 29), DropDirection().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifUnknownPacketDropUni.setStatus('current')
hpnicfifBMbpsUniSuppressionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifBMbpsUniSuppressionMax.setStatus('current')
hpnicfifBMbpsUniSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifBMbpsUniSuppression.setStatus('current')
hpnicfifBKbpsUniSuppressionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifBKbpsUniSuppressionMax.setStatus('current')
hpnicfifBKbpsUniSuppressionStep = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifBKbpsUniSuppressionStep.setStatus('current')
hpnicfifBKbpsUniSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifBKbpsUniSuppression.setStatus('current')
hpnicfifOutPayloadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifOutPayloadOctets.setStatus('current')
hpnicfifInPayloadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifInPayloadOctets.setStatus('current')
hpnicfifInErrorPktsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifInErrorPktsRate.setStatus('current')
hpnicfifInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifInPkts.setStatus('current')
hpnicfifInNormalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifInNormalPkts.setStatus('current')
hpnicfifOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 1, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifOutPkts.setStatus('current')
hpnicfifAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 2), )
if mibBuilder.loadTexts: hpnicfifAggregateTable.setStatus('current')
hpnicfifAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-LswINF-MIB", "hpnicfifAggregatePortIndex"))
if mibBuilder.loadTexts: hpnicfifAggregateEntry.setStatus('current')
hpnicfifAggregatePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifAggregatePortIndex.setStatus('current')
hpnicfifAggregatePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifAggregatePortName.setStatus('current')
hpnicfifAggregatePortListPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 2, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifAggregatePortListPorts.setStatus('current')
hpnicfifAggregateModel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ingress", 1), ("both", 2), ("round-robin", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifAggregateModel.setStatus('current')
hpnicfifAggregateOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfifAggregateOperStatus.setStatus('current')
hpnicfifHybridPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 3), )
if mibBuilder.loadTexts: hpnicfifHybridPortTable.setStatus('current')
hpnicfifHybridPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-LswINF-MIB", "hpnicfifHybridPortIndex"))
if mibBuilder.loadTexts: hpnicfifHybridPortEntry.setStatus('current')
hpnicfifHybridPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifHybridPortIndex.setStatus('current')
hpnicfifHybridTaggedVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifHybridTaggedVlanListLow.setStatus('current')
hpnicfifHybridTaggedVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifHybridTaggedVlanListHigh.setStatus('current')
hpnicfifHybridUnTaggedVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifHybridUnTaggedVlanListLow.setStatus('current')
hpnicfifHybridUnTaggedVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifHybridUnTaggedVlanListHigh.setStatus('current')
hpnicfifComboPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 4), )
if mibBuilder.loadTexts: hpnicfifComboPortTable.setStatus('current')
hpnicfifComboPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 4, 1), ).setIndexNames((0, "HPN-ICF-LswINF-MIB", "hpnicfifComboPortIndex"))
if mibBuilder.loadTexts: hpnicfifComboPortEntry.setStatus('current')
hpnicfifComboPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 4, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifComboPortIndex.setStatus('current')
hpnicfifComboPortCurActive = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fiber", 1), ("copper", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifComboPortCurActive.setStatus('current')
hpnicfifPktBufTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 5), )
if mibBuilder.loadTexts: hpnicfifPktBufTable.setStatus('current')
hpnicfifPktBufEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfifPktBufEntry.setStatus('current')
hpnicfifPktBufFree = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifPktBufFree.setStatus('current')
hpnicfifPktBufInit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifPktBufInit.setStatus('current')
hpnicfifPktBufMin = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifPktBufMin.setStatus('current')
hpnicfifPktBufMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 1, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifPktBufMiss.setStatus('current')
hpnicfLswL2InfMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1))
hpnicfSlotPortMax = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSlotPortMax.setStatus('current')
hpnicfSwitchPortMax = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSwitchPortMax.setStatus('current')
hpnicfifVLANTrunkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 3), )
if mibBuilder.loadTexts: hpnicfifVLANTrunkStatusTable.setStatus('current')
hpnicfifVLANTrunkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-LswINF-MIB", "hpnicfifVLANTrunkIndex"))
if mibBuilder.loadTexts: hpnicfifVLANTrunkStatusEntry.setStatus('current')
hpnicfifVLANTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifVLANTrunkIndex.setStatus('current')
hpnicfifVLANTrunkGvrpRegistration = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fixed", 2), ("forbidden", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifVLANTrunkGvrpRegistration.setStatus('current')
hpnicfifVLANTrunkPassListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifVLANTrunkPassListLow.setStatus('current')
hpnicfifVLANTrunkPassListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifVLANTrunkPassListHigh.setStatus('current')
hpnicfifVLANTrunkAllowListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifVLANTrunkAllowListLow.setStatus('current')
hpnicfifVLANTrunkAllowListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifVLANTrunkAllowListHigh.setStatus('current')
hpnicfethernetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 4), )
if mibBuilder.loadTexts: hpnicfethernetTable.setStatus('current')
hpnicfethernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfethernetEntry.setStatus('current')
hpnicfifEthernetDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifEthernetDuplex.setStatus('current')
hpnicfifEthernetMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifEthernetMTU.setStatus('current')
hpnicfifEthernetSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 10, 100, 1000, 10000, 24000, 40000, 100000))).clone(namedValues=NamedValues(("auto", 0), ("s10M", 10), ("s100M", 100), ("s1000M", 1000), ("s10000M", 10000), ("s24000M", 24000), ("s40000M", 40000), ("s100000M", 100000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifEthernetSpeed.setStatus('current')
hpnicfifEthernetMdi = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mdi-ii", 1), ("mdi-x", 2), ("mdi-auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifEthernetMdi.setStatus('current')
hpnicfMaxMacLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfMaxMacLearn.setStatus('current')
hpnicfifMacAddressLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifMacAddressLearn.setStatus('current')
hpnicfifEthernetTest = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("test", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifEthernetTest.setStatus('current')
hpnicfifMacAddrLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iVL", 1), ("sVL", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifMacAddrLearnMode.setStatus('current')
hpnicfifEthernetFlowInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifEthernetFlowInterval.setStatus('current')
hpnicfifEthernetIsolate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 4, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifEthernetIsolate.setStatus('current')
hpnicfifVlanVPNStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifVlanVPNStatus.setStatus('current')
hpnicfifVlanVPNUplinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifVlanVPNUplinkStatus.setStatus('current')
hpnicfifVlanVPNTPID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifVlanVPNTPID.setStatus('current')
hpnicfifIsolateGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 4, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifIsolateGroupID.setStatus('current')
hpnicfifisUplinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifisUplinkPort.setStatus('current')
hpnicfifEthernetAutoSpeedMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 4, 1, 19), SpeedModeFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifEthernetAutoSpeedMask.setStatus('current')
hpnicfifEthernetAutoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 4, 1, 20), SpeedModeFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfifEthernetAutoSpeed.setStatus('current')
hpnicfIsolateGroupMax = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIsolateGroupMax.setStatus('current')
hpnicfGlobalBroadcastMaxPps = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14881000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfGlobalBroadcastMaxPps.setStatus('current')
hpnicfGlobalBroadcastMaxRatio = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfGlobalBroadcastMaxRatio.setStatus('current')
hpnicfBpduTunnelStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfBpduTunnelStatus.setStatus('current')
hpnicfVlanVPNTPIDMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port-based", 1), ("global", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfVlanVPNTPIDMode.setStatus('current')
hpnicfVlanVPNTPID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfVlanVPNTPID.setStatus('current')
hpnicfPortIsolateGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 11), )
if mibBuilder.loadTexts: hpnicfPortIsolateGroupTable.setStatus('current')
hpnicfPortIsolateGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 11, 1), ).setIndexNames((0, "HPN-ICF-LswINF-MIB", "hpnicfPortIsolateGroupIndex"))
if mibBuilder.loadTexts: hpnicfPortIsolateGroupEntry.setStatus('current')
hpnicfPortIsolateGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfPortIsolateGroupIndex.setStatus('current')
hpnicfPortIsolateUplinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 11, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPortIsolateUplinkIfIndex.setStatus('current')
hpnicfPortIsolateGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPortIsolateGroupRowStatus.setStatus('current')
hpnicfPortIsolateGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPortIsolateGroupDescription.setStatus('current')
hpnicfMaxMacLearnRange = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfMaxMacLearnRange.setStatus('current')
hpnicfifPortProtocolStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13), )
if mibBuilder.loadTexts: hpnicfifPortProtocolStatTable.setStatus('current')
hpnicfifPortProtocolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfifPortProtocolStatEntry.setStatus('current')
hpnicfifIPv4InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv4InOctets.setStatus('current')
hpnicfifIPv4InUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv4InUcastPkts.setStatus('current')
hpnicfifIPv4InMultiPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv4InMultiPkts.setStatus('current')
hpnicfifIPv4InBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv4InBroadcastPkts.setStatus('current')
hpnicfifIPv4InDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv4InDiscards.setStatus('current')
hpnicfifIPv4InErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv4InErrors.setStatus('current')
hpnicfifIPv4OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv4OutOctets.setStatus('current')
hpnicfifIPv4OutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv4OutUcastPkts.setStatus('current')
hpnicfifIPv4OutMultiPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv4OutMultiPkts.setStatus('current')
hpnicfifIPv4OutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv4OutBroadcastPkts.setStatus('current')
hpnicfifIPv4OutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv4OutDiscards.setStatus('current')
hpnicfifIPv4OutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv4OutErrors.setStatus('current')
hpnicfifIPv6InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv6InOctets.setStatus('current')
hpnicfifIPv6InUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv6InUcastPkts.setStatus('current')
hpnicfifIPv6InMultiPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv6InMultiPkts.setStatus('current')
hpnicfifIPv6InAnycastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv6InAnycastPkts.setStatus('current')
hpnicfifIPv6InDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv6InDiscards.setStatus('current')
hpnicfifIPv6InErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv6InErrors.setStatus('current')
hpnicfifIPv6OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv6OutOctets.setStatus('current')
hpnicfifIPv6OutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv6OutUcastPkts.setStatus('current')
hpnicfifIPv6OutMultiPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv6OutMultiPkts.setStatus('current')
hpnicfifIPv6OutAnycastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv6OutAnycastPkts.setStatus('current')
hpnicfifIPv6OutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv6OutDiscards.setStatus('current')
hpnicfifIPv6OutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 35, 5, 1, 13, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfifIPv6OutErrors.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-LswINF-MIB", hpnicfifHybridTaggedVlanListLow=hpnicfifHybridTaggedVlanListLow, hpnicfifIPv4OutBroadcastPkts=hpnicfifIPv4OutBroadcastPkts, hpnicfifBKbpsUniSuppression=hpnicfifBKbpsUniSuppression, hpnicfifBKbpsUniSuppressionStep=hpnicfifBKbpsUniSuppressionStep, PYSNMP_MODULE_ID=hpnicfLswL2InfMib, hpnicfifPpsBcastDisValControl=hpnicfifPpsBcastDisValControl, hpnicfifInPayloadOctets=hpnicfifInPayloadOctets, hpnicfBpduTunnelStatus=hpnicfBpduTunnelStatus, hpnicfifOutPkts=hpnicfifOutPkts, hpnicfifEthernetAutoSpeedMask=hpnicfifEthernetAutoSpeedMask, hpnicfifisUplinkPort=hpnicfifisUplinkPort, hpnicfifIPv4OutMultiPkts=hpnicfifIPv4OutMultiPkts, PortList=PortList, hpnicfifXXDevPortIndex=hpnicfifXXDevPortIndex, hpnicfifUniSuppression=hpnicfifUniSuppression, hpnicfPortIsolateGroupRowStatus=hpnicfPortIsolateGroupRowStatus, hpnicfifIPv6OutErrors=hpnicfifIPv6OutErrors, hpnicfifComboActivePort=hpnicfifComboActivePort, hpnicfifHybridPortEntry=hpnicfifHybridPortEntry, hpnicfSlotPortMax=hpnicfSlotPortMax, hpnicfifPktBufInit=hpnicfifPktBufInit, hpnicfifMulSuppressionStep=hpnicfifMulSuppressionStep, hpnicfifIPv4OutOctets=hpnicfifIPv4OutOctets, DropDirection=DropDirection, hpnicfLswL2InfMib=hpnicfLswL2InfMib, hpnicfifBKbpsMulSuppressionStep=hpnicfifBKbpsMulSuppressionStep, hpnicfifHybridUnTaggedVlanListHigh=hpnicfifHybridUnTaggedVlanListHigh, hpnicfifVlanVPNTPID=hpnicfifVlanVPNTPID, hpnicfifMacAddressLearn=hpnicfifMacAddressLearn, hpnicfifIPv4OutUcastPkts=hpnicfifIPv4OutUcastPkts, hpnicfifIPv6InMultiPkts=hpnicfifIPv6InMultiPkts, hpnicfifIPv6OutMultiPkts=hpnicfifIPv6OutMultiPkts, hpnicfifPpsUniSuppression=hpnicfifPpsUniSuppression, hpnicfifFlowControl=hpnicfifFlowControl, hpnicfifBKbpsMulSuppressionMax=hpnicfifBKbpsMulSuppressionMax, hpnicfifComboPortCurActive=hpnicfifComboPortCurActive, hpnicfifAggregateTable=hpnicfifAggregateTable, hpnicfIsolateGroupMax=hpnicfIsolateGroupMax, hpnicfifVLANTrunkAllowListLow=hpnicfifVLANTrunkAllowListLow, hpnicfifBKbpsUniSuppressionMax=hpnicfifBKbpsUniSuppressionMax, hpnicfifIPv4InErrors=hpnicfifIPv4InErrors, hpnicfifIPv6InDiscards=hpnicfifIPv6InDiscards, SpeedModeFlag=SpeedModeFlag, hpnicfifPpsMulSuppression=hpnicfifPpsMulSuppression, hpnicfifVLANTrunkIndex=hpnicfifVLANTrunkIndex, hpnicfifInNormalPkts=hpnicfifInNormalPkts, hpnicfifUniSuppressionStep=hpnicfifUniSuppressionStep, hpnicfifIPv4InBroadcastPkts=hpnicfifIPv4InBroadcastPkts, hpnicfifVlanVPNStatus=hpnicfifVlanVPNStatus, hpnicfifIPv6OutDiscards=hpnicfifIPv6OutDiscards, hpnicfifIPv6OutOctets=hpnicfifIPv6OutOctets, hpnicfifAggregatePortIndex=hpnicfifAggregatePortIndex, hpnicfifVLANTrunkStatusTable=hpnicfifVLANTrunkStatusTable, hpnicfifPpsMcastControl=hpnicfifPpsMcastControl, hpnicfSwitchPortMax=hpnicfSwitchPortMax, hpnicfifOutPayloadOctets=hpnicfifOutPayloadOctets, hpnicfifVLANTrunkStatusEntry=hpnicfifVLANTrunkStatusEntry, hpnicfifEthernetTest=hpnicfifEthernetTest, hpnicfGlobalBroadcastMaxRatio=hpnicfGlobalBroadcastMaxRatio, hpnicfifPortProtocolStatEntry=hpnicfifPortProtocolStatEntry, hpnicfifMulSuppression=hpnicfifMulSuppression, hpnicfifIPv4InDiscards=hpnicfifIPv4InDiscards, hpnicfifPktBufMin=hpnicfifPktBufMin, hpnicfifPpsMulSuppressionMax=hpnicfifPpsMulSuppressionMax, hpnicfifInErrorPktsRate=hpnicfifInErrorPktsRate, hpnicfifPpsUniSuppressionMax=hpnicfifPpsUniSuppressionMax, hpnicfVlanVPNTPID=hpnicfVlanVPNTPID, hpnicfifIPv6InOctets=hpnicfifIPv6InOctets, hpnicfifBMbpsUniSuppressionMax=hpnicfifBMbpsUniSuppressionMax, hpnicfifVLANType=hpnicfifVLANType, hpnicfPortIsolateGroupEntry=hpnicfPortIsolateGroupEntry, hpnicfPortIsolateUplinkIfIndex=hpnicfPortIsolateUplinkIfIndex, hpnicfifIPv4OutDiscards=hpnicfifIPv4OutDiscards, hpnicfifVLANTrunkPassListHigh=hpnicfifVLANTrunkPassListHigh, hpnicfifPktBufEntry=hpnicfifPktBufEntry, hpnicfifIPv6InUcastPkts=hpnicfifIPv6InUcastPkts, hpnicfifVlanVPNUplinkStatus=hpnicfifVlanVPNUplinkStatus, hpnicfifUnBoundPort=hpnicfifUnBoundPort, hpnicfifAggregatePortListPorts=hpnicfifAggregatePortListPorts, hpnicfGlobalBroadcastMaxPps=hpnicfGlobalBroadcastMaxPps, hpnicfifClearStat=hpnicfifClearStat, hpnicfifInPkts=hpnicfifInPkts, hpnicfifBKbpsMulSuppression=hpnicfifBKbpsMulSuppression, hpnicfifEthernetAutoSpeed=hpnicfifEthernetAutoSpeed, hpnicfPortIsolateGroupTable=hpnicfPortIsolateGroupTable, hpnicfLswL2InfMibObject=hpnicfLswL2InfMibObject, hpnicfifEthernetDuplex=hpnicfifEthernetDuplex, hpnicfifMcastControl=hpnicfifMcastControl, hpnicfifAggregateOperStatus=hpnicfifAggregateOperStatus, hpnicfVlanVPNTPIDMode=hpnicfVlanVPNTPIDMode, hpnicfifSrcMacControl=hpnicfifSrcMacControl, hpnicfifEthernetIsolate=hpnicfifEthernetIsolate, hpnicfifIPv4InOctets=hpnicfifIPv4InOctets, hpnicfifBMbpsMulSuppressionMax=hpnicfifBMbpsMulSuppressionMax, hpnicfifVLANTrunkGvrpRegistration=hpnicfifVLANTrunkGvrpRegistration, hpnicfifIsolateGroupID=hpnicfifIsolateGroupID, hpnicfifIPv4InUcastPkts=hpnicfifIPv4InUcastPkts, hpnicfifMirrorPort=hpnicfifMirrorPort, hpnicfifIPv4OutErrors=hpnicfifIPv4OutErrors, hpnicfifAggregatePortName=hpnicfifAggregatePortName, hpnicfethernetEntry=hpnicfethernetEntry, hpnicfMaxMacLearn=hpnicfMaxMacLearn, hpnicfPortIsolateGroupIndex=hpnicfPortIsolateGroupIndex, hpnicfifXXBasePortIndex=hpnicfifXXBasePortIndex, hpnicfifEthernetFlowInterval=hpnicfifEthernetFlowInterval, hpnicfifMacAddrLearnMode=hpnicfifMacAddrLearnMode, hpnicfifHybridPortIndex=hpnicfifHybridPortIndex, hpnicfifUnknownPacketDropMul=hpnicfifUnknownPacketDropMul, hpnicfethernetTable=hpnicfethernetTable, hpnicfifIPv4InMultiPkts=hpnicfifIPv4InMultiPkts, hpnicfifComboPortTable=hpnicfifComboPortTable, hpnicfifVLANTrunkAllowListHigh=hpnicfifVLANTrunkAllowListHigh, hpnicfifPktBufMiss=hpnicfifPktBufMiss, hpnicfifBMbpsUniSuppression=hpnicfifBMbpsUniSuppression, hpnicfifAggregateModel=hpnicfifAggregateModel, hpnicfifXXEntry=hpnicfifXXEntry, hpnicfifEthernetMdi=hpnicfifEthernetMdi, hpnicfifIPv6InAnycastPkts=hpnicfifIPv6InAnycastPkts, hpnicfifPortProtocolStatTable=hpnicfifPortProtocolStatTable, VlanIndex=VlanIndex, hpnicfifHybridUnTaggedVlanListLow=hpnicfifHybridUnTaggedVlanListLow, hpnicfifISPhyPort=hpnicfifISPhyPort, hpnicfifAggregatePort=hpnicfifAggregatePort, hpnicfifUnknownPacketDropUni=hpnicfifUnknownPacketDropUni, hpnicfifIPv6OutUcastPkts=hpnicfifIPv6OutUcastPkts, hpnicfPortIsolateGroupDescription=hpnicfPortIsolateGroupDescription, hpnicfifIPv6OutAnycastPkts=hpnicfifIPv6OutAnycastPkts, hpnicfifXXTable=hpnicfifXXTable, hpnicfifBMbpsMulSuppression=hpnicfifBMbpsMulSuppression, hpnicfifComboPortIndex=hpnicfifComboPortIndex, hpnicfifEthernetSpeed=hpnicfifEthernetSpeed, hpnicfifPktBufFree=hpnicfifPktBufFree, hpnicfifComboPortEntry=hpnicfifComboPortEntry, hpnicfifIPv6InErrors=hpnicfifIPv6InErrors, hpnicfifAggregateEntry=hpnicfifAggregateEntry, hpnicfifPktBufTable=hpnicfifPktBufTable, hpnicfifVLANTrunkPassListLow=hpnicfifVLANTrunkPassListLow, hpnicfLswExtInterface=hpnicfLswExtInterface, hpnicfMaxMacLearnRange=hpnicfMaxMacLearnRange, hpnicfifHybridTaggedVlanListHigh=hpnicfifHybridTaggedVlanListHigh, hpnicfifHybridPortTable=hpnicfifHybridPortTable, hpnicfifEthernetMTU=hpnicfifEthernetMTU)
