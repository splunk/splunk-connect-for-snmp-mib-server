#
# PySNMP MIB module CXAtmPhy-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXAtmPhy-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:16:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
cxAtmPhy, = mibBuilder.importSymbols("CXProduct-SMI", "cxAtmPhy")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, IpAddress, Gauge32, MibIdentifier, ObjectIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, Bits, Counter64, Unsigned32, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Gauge32", "MibIdentifier", "ObjectIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "Bits", "Counter64", "Unsigned32", "Integer32", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class Switch(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2))

class ErrorState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("errorNotDetected", 1), ("errorDetected", 2))

atmPhyMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPhyMibLevel.setStatus('mandatory')
atmPhyInterfaceConfTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 10), )
if mibBuilder.loadTexts: atmPhyInterfaceConfTable.setStatus('mandatory')
atmPhyInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmPhyInterfaceConfEntry.setStatus('mandatory')
atmPhyConfTxClocking = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("synchronized", 1), ("unsynchronized", 2))).clone('synchronized')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPhyConfTxClocking.setStatus('mandatory')
atmPhyConfRxLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("line", 2), ("cell", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPhyConfRxLoopback.setStatus('mandatory')
atmPhyConfFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("g-804", 1), ("plcp", 2))).clone('g-804')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPhyConfFrameFormat.setStatus('mandatory')
atmPhyConfPlcpBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 10, 1, 4), Switch().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPhyConfPlcpBypass.setStatus('mandatory')
atmPhyConfTxCoset = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 10, 1, 5), Switch().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPhyConfTxCoset.setStatus('mandatory')
atmPhyConfRxCoset = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 10, 1, 6), Switch().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPhyConfRxCoset.setStatus('mandatory')
atmPhyConfCellScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 10, 1, 7), Switch().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPhyConfCellScrambling.setStatus('mandatory')
atmPhyConfCellDescrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 10, 1, 8), Switch().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPhyConfCellDescrambling.setStatus('mandatory')
atmPhyConfTxFifoDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPhyConfTxFifoDepth.setStatus('mandatory')
atmPhyConfRxUserProgH1Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 10, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPhyConfRxUserProgH1Mask.setStatus('mandatory')
atmPhyConfRxUserProgH2Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 10, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPhyConfRxUserProgH2Mask.setStatus('mandatory')
atmPhyConfRxUserProgH3Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 10, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPhyConfRxUserProgH3Mask.setStatus('mandatory')
atmPhyConfRxUserProgH4Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 10, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPhyConfRxUserProgH4Mask.setStatus('mandatory')
atmPhyConfTxIdleUnassignedCellPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 10, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(106)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPhyConfTxIdleUnassignedCellPayload.setStatus('mandatory')
atmPhyConfPlcpControlTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 10, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPhyConfPlcpControlTimer.setStatus('mandatory')
atmPhyConfControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 10, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("clearStats", 2), ("enableHCSErrorGeneration", 3), ("disableHCSErrorGeneration", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPhyConfControl.setStatus('mandatory')
atmPhyConfPlcpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 10, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPhyConfPlcpControl.setStatus('mandatory')
atmPhyOperTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 20), )
if mibBuilder.loadTexts: atmPhyOperTable.setStatus('mandatory')
atmPhyOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmPhyOperEntry.setStatus('mandatory')
atmPhyOperDeviceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 20, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPhyOperDeviceVersion.setStatus('mandatory')
atmPhyOperFramerDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 20, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("ds1", 2), ("e1", 3), ("ds3", 4), ("e3", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPhyOperFramerDetected.setStatus('mandatory')
atmPhyOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 20, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("offLine", 1), ("downNoHwDetected", 2), ("downConfigError", 3), ("down", 4), ("up", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPhyOperState.setStatus('mandatory')
atmPhyOperLCDState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 20, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("detectedLCD", 1), ("noLCD", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPhyOperLCDState.setStatus('mandatory')
atmPhyOperRxIdleUnassignedCellsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 20, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPhyOperRxIdleUnassignedCellsDropped.setStatus('mandatory')
atmPhyOperHCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 20, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPhyOperHCSErrors.setStatus('mandatory')
atmPhyOperOCDEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 20, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPhyOperOCDEvents.setStatus('mandatory')
atmPhyOperRxFifoOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 20, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPhyOperRxFifoOverruns.setStatus('mandatory')
atmPhyOperTxFifoOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 20, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPhyOperTxFifoOverruns.setStatus('mandatory')
atmPhyOperPlcpTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 30), )
if mibBuilder.loadTexts: atmPhyOperPlcpTable.setStatus('mandatory')
atmPhyOperPlcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 30, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmPhyOperPlcpEntry.setStatus('mandatory')
atmPhyOperPlcpOOFDefectState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 30, 1, 10), ErrorState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPhyOperPlcpOOFDefectState.setStatus('mandatory')
atmPhyOperPlcpLOFDefectState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 30, 1, 11), ErrorState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPhyOperPlcpLOFDefectState.setStatus('mandatory')
atmPhyOperPlcpYADefectState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 30, 1, 12), ErrorState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPhyOperPlcpYADefectState.setStatus('mandatory')
atmPhyOperPlcpOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 30, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPhyOperPlcpOOFs.setStatus('mandatory')
atmPhyOperPlcpLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 30, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPhyOperPlcpLOFs.setStatus('mandatory')
atmPhyOperPlcpYAs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 30, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPhyOperPlcpYAs.setStatus('mandatory')
atmPhyOperPlcpBIPErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 30, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPhyOperPlcpBIPErrors.setStatus('mandatory')
atmPhyOperPlcpFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 30, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPhyOperPlcpFramingErrors.setStatus('mandatory')
atmPhyOperPlcpFEBEErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 61, 30, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPhyOperPlcpFEBEErrors.setStatus('mandatory')
mibBuilder.exportSymbols("CXAtmPhy-MIB", ErrorState=ErrorState, atmPhyConfPlcpBypass=atmPhyConfPlcpBypass, atmPhyConfTxIdleUnassignedCellPayload=atmPhyConfTxIdleUnassignedCellPayload, atmPhyOperPlcpFEBEErrors=atmPhyOperPlcpFEBEErrors, atmPhyOperTxFifoOverruns=atmPhyOperTxFifoOverruns, atmPhyConfTxFifoDepth=atmPhyConfTxFifoDepth, atmPhyConfRxLoopback=atmPhyConfRxLoopback, Switch=Switch, atmPhyConfRxUserProgH4Mask=atmPhyConfRxUserProgH4Mask, atmPhyOperOCDEvents=atmPhyOperOCDEvents, atmPhyOperPlcpTable=atmPhyOperPlcpTable, atmPhyOperPlcpFramingErrors=atmPhyOperPlcpFramingErrors, atmPhyOperPlcpYADefectState=atmPhyOperPlcpYADefectState, atmPhyConfCellScrambling=atmPhyConfCellScrambling, atmPhyOperHCSErrors=atmPhyOperHCSErrors, atmPhyOperPlcpLOFDefectState=atmPhyOperPlcpLOFDefectState, atmPhyOperEntry=atmPhyOperEntry, atmPhyConfPlcpControl=atmPhyConfPlcpControl, atmPhyConfFrameFormat=atmPhyConfFrameFormat, atmPhyConfRxUserProgH1Mask=atmPhyConfRxUserProgH1Mask, atmPhyConfRxCoset=atmPhyConfRxCoset, atmPhyOperFramerDetected=atmPhyOperFramerDetected, atmPhyOperTable=atmPhyOperTable, atmPhyInterfaceConfEntry=atmPhyInterfaceConfEntry, atmPhyOperLCDState=atmPhyOperLCDState, atmPhyConfPlcpControlTimer=atmPhyConfPlcpControlTimer, atmPhyOperPlcpOOFDefectState=atmPhyOperPlcpOOFDefectState, atmPhyOperPlcpOOFs=atmPhyOperPlcpOOFs, atmPhyConfCellDescrambling=atmPhyConfCellDescrambling, atmPhyConfTxClocking=atmPhyConfTxClocking, atmPhyInterfaceConfTable=atmPhyInterfaceConfTable, atmPhyOperDeviceVersion=atmPhyOperDeviceVersion, atmPhyOperRxFifoOverruns=atmPhyOperRxFifoOverruns, atmPhyMibLevel=atmPhyMibLevel, atmPhyConfTxCoset=atmPhyConfTxCoset, atmPhyOperPlcpEntry=atmPhyOperPlcpEntry, atmPhyConfControl=atmPhyConfControl, atmPhyOperState=atmPhyOperState, atmPhyOperRxIdleUnassignedCellsDropped=atmPhyOperRxIdleUnassignedCellsDropped, atmPhyConfRxUserProgH3Mask=atmPhyConfRxUserProgH3Mask, atmPhyOperPlcpLOFs=atmPhyOperPlcpLOFs, atmPhyOperPlcpYAs=atmPhyOperPlcpYAs, atmPhyOperPlcpBIPErrors=atmPhyOperPlcpBIPErrors, atmPhyConfRxUserProgH2Mask=atmPhyConfRxUserProgH2Mask)
