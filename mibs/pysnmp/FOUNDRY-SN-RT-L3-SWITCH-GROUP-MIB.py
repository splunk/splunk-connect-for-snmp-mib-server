#
# PySNMP MIB module FOUNDRY-SN-RT-L3-SWITCH-GROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FOUNDRY-SN-RT-L3-SWITCH-GROUP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:01:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
snIpx, snIp = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "snIpx", "snIp")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, TimeTicks, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, Gauge32, IpAddress, Counter64, Bits, ObjectIdentity, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "Gauge32", "IpAddress", "Counter64", "Bits", "ObjectIdentity", "Counter32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class RowSts(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4))

class RtrStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1))

class ClearStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("normal", 0), ("clear", 1))

class PortIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 34)

class Action(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("deny", 0), ("permit", 1))

class PhysAddress(OctetString):
    pass

class NetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

snRtIpGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1))
snRtClearArpCache = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 1), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtClearArpCache.setStatus('mandatory')
snRtClearIpCache = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 2), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtClearIpCache.setStatus('mandatory')
snRtIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3), )
if mibBuilder.loadTexts: snRtIpFilterTable.setStatus('mandatory')
snRtIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-RT-L3-SWITCH-GROUP-MIB", "snRtIpFilterIndex"))
if mibBuilder.loadTexts: snRtIpFilterEntry.setStatus('mandatory')
snRtIpFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFilterIndex.setStatus('mandatory')
snRtIpFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1), ("qosEnabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterAction.setStatus('mandatory')
snRtIpFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterProtocol.setStatus('mandatory')
snRtIpFilterSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterSourceIp.setStatus('mandatory')
snRtIpFilterSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterSourceMask.setStatus('mandatory')
snRtIpFilterDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterDestIp.setStatus('mandatory')
snRtIpFilterDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterDestMask.setStatus('mandatory')
snRtIpFilterOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("greater", 1), ("equal", 2), ("less", 3), ("notEqual", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterOperator.setStatus('mandatory')
snRtIpFilterOperand = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterOperand.setStatus('mandatory')
snRtIpFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 10), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterRowStatus.setStatus('mandatory')
snRtIpFilterEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 11), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterEstablished.setStatus('mandatory')
snRtIpFilterQosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterQosPriority.setStatus('mandatory')
snRtIpTraceRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10))
snRtIpTraceRouteGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1))
snRtIpTraceRouteResult = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2))
snRtIpTraceRouteTargetAddr = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpTraceRouteTargetAddr.setStatus('mandatory')
snRtIpTraceRouteMinTtl = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpTraceRouteMinTtl.setStatus('mandatory')
snRtIpTraceRouteMaxTtl = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpTraceRouteMaxTtl.setStatus('mandatory')
snRtIpTraceRouteTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpTraceRouteTimeOut.setStatus('mandatory')
snRtIpTraceRouteControl = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("start", 1), ("abort", 2), ("success", 3), ("failure", 4), ("inProgress", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpTraceRouteControl.setStatus('mandatory')
snRtIpTraceRouteResultTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1), )
if mibBuilder.loadTexts: snRtIpTraceRouteResultTable.setStatus('mandatory')
snRtIpTraceRouteResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-RT-L3-SWITCH-GROUP-MIB", "snRtIpTraceRouteResultIndex"))
if mibBuilder.loadTexts: snRtIpTraceRouteResultEntry.setStatus('mandatory')
snRtIpTraceRouteResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpTraceRouteResultIndex.setStatus('mandatory')
snRtIpTraceRouteResultAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpTraceRouteResultAddr.setStatus('mandatory')
snRtIpTraceRouteResultRoundTripTime1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpTraceRouteResultRoundTripTime1.setStatus('mandatory')
snRtIpTraceRouteResultRoundTripTime2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpTraceRouteResultRoundTripTime2.setStatus('mandatory')
snIpxGen = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1))
snIpxCache = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 2))
snIpxRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 3))
snIpxFwdFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5))
snIpxPortCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 12))
snIpxClearCache = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 3), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxClearCache.setStatus('mandatory')
snIpxClearRoute = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 4), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxClearRoute.setStatus('mandatory')
snIpxClearTrafficCnts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 5), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxClearTrafficCnts.setStatus('mandatory')
snIpxRcvPktsCnt = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxRcvPktsCnt.setStatus('mandatory')
snIpxFwdPktsCnt = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxFwdPktsCnt.setStatus('mandatory')
snIpxRcvFiltPktsCnt = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxRcvFiltPktsCnt.setStatus('mandatory')
snIpxCacheTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 2, 1), )
if mibBuilder.loadTexts: snIpxCacheTable.setStatus('mandatory')
snIpxCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-RT-L3-SWITCH-GROUP-MIB", "snIpxCacheIndex"))
if mibBuilder.loadTexts: snIpxCacheEntry.setStatus('mandatory')
snIpxCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxCacheIndex.setStatus('mandatory')
snIpxCacheNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxCacheNetNum.setStatus('mandatory')
snIpxCacheNode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 2, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxCacheNode.setStatus('mandatory')
snIpxCacheOutFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 2, 1, 1, 4), RtrStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxCacheOutFilter.setStatus('mandatory')
snIpxCacheEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernetII", 1), ("ethernet8022", 2), ("ethernet8023", 3), ("ethernetSnap", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxCacheEncap.setStatus('mandatory')
snIpxCachePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 2, 1, 1, 6), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxCachePort.setStatus('mandatory')
snIpxRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 3, 1), )
if mibBuilder.loadTexts: snIpxRouteTable.setStatus('mandatory')
snIpxRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 3, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-RT-L3-SWITCH-GROUP-MIB", "snIpxRouteIndex"))
if mibBuilder.loadTexts: snIpxRouteEntry.setStatus('mandatory')
snIpxRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxRouteIndex.setStatus('mandatory')
snIpxDestNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxDestNetNum.setStatus('mandatory')
snIpxFwdRouterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 3, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxFwdRouterNode.setStatus('mandatory')
snIpxDestHopCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxDestHopCnts.setStatus('mandatory')
snIpxRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxRouteMetric.setStatus('mandatory')
snIpxDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxDestPort.setStatus('mandatory')
snIpxFwdFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1), )
if mibBuilder.loadTexts: snIpxFwdFilterTable.setStatus('mandatory')
snIpxFwdFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-RT-L3-SWITCH-GROUP-MIB", "snIpxFwdFilterId"))
if mibBuilder.loadTexts: snIpxFwdFilterEntry.setStatus('mandatory')
snIpxFwdFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxFwdFilterId.setStatus('mandatory')
snIpxFwdFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1, 1, 2), Action()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxFwdFilterAction.setStatus('mandatory')
snIpxFwdFilterSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxFwdFilterSocket.setStatus('mandatory')
snIpxFwdFilterSrcNet = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1, 1, 4), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxFwdFilterSrcNet.setStatus('mandatory')
snIpxFwdFilterSrcNode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1, 1, 5), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxFwdFilterSrcNode.setStatus('mandatory')
snIpxFwdFilterDestNet = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1, 1, 6), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxFwdFilterDestNet.setStatus('mandatory')
snIpxFwdFilterDestNode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1, 1, 7), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxFwdFilterDestNode.setStatus('mandatory')
snIpxFwdFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxFwdFilterRowStatus.setStatus('mandatory')
snIpxPortCountersTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 12, 1), )
if mibBuilder.loadTexts: snIpxPortCountersTable.setStatus('mandatory')
snIpxPortCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 12, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-RT-L3-SWITCH-GROUP-MIB", "snIpxPortCountersPort"))
if mibBuilder.loadTexts: snIpxPortCountersEntry.setStatus('mandatory')
snIpxPortCountersPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 12, 1, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxPortCountersPort.setStatus('mandatory')
snIpxPortCountersRcvPktsCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 12, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxPortCountersRcvPktsCnt.setStatus('mandatory')
snIpxPortCountersFwdPktsCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 12, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxPortCountersFwdPktsCnt.setStatus('mandatory')
snIpxPortCountersRcvFiltPktsCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 12, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxPortCountersRcvFiltPktsCnt.setStatus('mandatory')
mibBuilder.exportSymbols("FOUNDRY-SN-RT-L3-SWITCH-GROUP-MIB", snIpxCacheTable=snIpxCacheTable, Action=Action, snIpxFwdFilterDestNode=snIpxFwdFilterDestNode, snRtIpTraceRouteResultEntry=snRtIpTraceRouteResultEntry, snRtIpFilterIndex=snRtIpFilterIndex, snRtIpTraceRouteResult=snRtIpTraceRouteResult, NetNumber=NetNumber, snIpxPortCountersEntry=snIpxPortCountersEntry, snRtIpTraceRouteResultRoundTripTime1=snRtIpTraceRouteResultRoundTripTime1, snIpxFwdFilterEntry=snIpxFwdFilterEntry, PhysAddress=PhysAddress, snRtIpTraceRouteMinTtl=snRtIpTraceRouteMinTtl, snRtIpFilterOperand=snRtIpFilterOperand, snIpxGen=snIpxGen, snIpxCachePort=snIpxCachePort, snIpxPortCounters=snIpxPortCounters, snRtIpFilterDestMask=snRtIpFilterDestMask, PortIndex=PortIndex, snIpxDestNetNum=snIpxDestNetNum, snIpxFwdFilterAction=snIpxFwdFilterAction, snRtIpFilterTable=snRtIpFilterTable, snRtIpFilterEntry=snRtIpFilterEntry, snIpxRcvFiltPktsCnt=snIpxRcvFiltPktsCnt, snIpxRouteTable=snIpxRouteTable, snRtIpTraceRoute=snRtIpTraceRoute, snRtIpTraceRouteResultTable=snRtIpTraceRouteResultTable, snIpxCacheOutFilter=snIpxCacheOutFilter, snIpxClearRoute=snIpxClearRoute, snIpxPortCountersRcvPktsCnt=snIpxPortCountersRcvPktsCnt, snRtIpFilterProtocol=snRtIpFilterProtocol, snRtClearArpCache=snRtClearArpCache, snIpxFwdFilter=snIpxFwdFilter, RtrStatus=RtrStatus, snIpxFwdFilterId=snIpxFwdFilterId, snIpxFwdPktsCnt=snIpxFwdPktsCnt, RowSts=RowSts, snIpxDestHopCnts=snIpxDestHopCnts, snRtIpFilterRowStatus=snRtIpFilterRowStatus, snRtIpTraceRouteGeneral=snRtIpTraceRouteGeneral, snIpxCacheEntry=snIpxCacheEntry, snIpxCacheIndex=snIpxCacheIndex, snIpxCacheEncap=snIpxCacheEncap, snIpxFwdFilterTable=snIpxFwdFilterTable, snRtIpFilterSourceMask=snRtIpFilterSourceMask, snIpxFwdFilterSrcNode=snIpxFwdFilterSrcNode, snIpxFwdRouterNode=snIpxFwdRouterNode, snRtIpFilterQosPriority=snRtIpFilterQosPriority, snRtIpTraceRouteResultRoundTripTime2=snRtIpTraceRouteResultRoundTripTime2, snIpxFwdFilterSrcNet=snIpxFwdFilterSrcNet, snIpxCache=snIpxCache, snIpxCacheNetNum=snIpxCacheNetNum, snIpxClearTrafficCnts=snIpxClearTrafficCnts, snRtIpFilterSourceIp=snRtIpFilterSourceIp, snIpxRoute=snIpxRoute, snRtIpTraceRouteResultIndex=snRtIpTraceRouteResultIndex, snIpxPortCountersRcvFiltPktsCnt=snIpxPortCountersRcvFiltPktsCnt, snRtClearIpCache=snRtClearIpCache, snIpxClearCache=snIpxClearCache, snRtIpTraceRouteTimeOut=snRtIpTraceRouteTimeOut, snRtIpFilterDestIp=snRtIpFilterDestIp, snRtIpGeneral=snRtIpGeneral, snRtIpTraceRouteMaxTtl=snRtIpTraceRouteMaxTtl, snIpxPortCountersTable=snIpxPortCountersTable, snRtIpFilterEstablished=snRtIpFilterEstablished, snIpxFwdFilterDestNet=snIpxFwdFilterDestNet, ClearStatus=ClearStatus, snIpxPortCountersPort=snIpxPortCountersPort, snRtIpFilterAction=snRtIpFilterAction, snIpxRouteEntry=snIpxRouteEntry, snRtIpTraceRouteTargetAddr=snRtIpTraceRouteTargetAddr, snIpxRouteIndex=snIpxRouteIndex, snIpxFwdFilterSocket=snIpxFwdFilterSocket, snIpxFwdFilterRowStatus=snIpxFwdFilterRowStatus, snRtIpTraceRouteResultAddr=snRtIpTraceRouteResultAddr, snIpxCacheNode=snIpxCacheNode, snIpxRouteMetric=snIpxRouteMetric, snRtIpTraceRouteControl=snRtIpTraceRouteControl, snIpxPortCountersFwdPktsCnt=snIpxPortCountersFwdPktsCnt, snIpxDestPort=snIpxDestPort, snRtIpFilterOperator=snRtIpFilterOperator, snIpxRcvPktsCnt=snIpxRcvPktsCnt)
