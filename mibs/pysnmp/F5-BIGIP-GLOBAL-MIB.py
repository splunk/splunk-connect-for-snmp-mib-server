#
# PySNMP MIB module F5-BIGIP-GLOBAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/F5-BIGIP-GLOBAL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:57:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
bigipCompliances, bigipTrafficMgmt, LongDisplayString, bigipGroups = mibBuilder.importSymbols("F5-BIGIP-COMMON-MIB", "bigipCompliances", "bigipTrafficMgmt", "LongDisplayString", "bigipGroups")
InetAddress, InetAddressType, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Gauge32, IpAddress, Integer32, TimeTicks, ObjectIdentity, MibIdentifier, iso, Unsigned32, Counter64, Opaque, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, enterprises, Counter32, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "Integer32", "TimeTicks", "ObjectIdentity", "MibIdentifier", "iso", "Unsigned32", "Counter64", "Opaque", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "enterprises", "Counter32", "Bits", "ModuleIdentity")
TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString")
bigipGlobalTM = ModuleIdentity((1, 3, 6, 1, 4, 1, 3375, 2, 3))
if mibBuilder.loadTexts: bigipGlobalTM.setLastUpdated('201508070110Z')
if mibBuilder.loadTexts: bigipGlobalTM.setOrganization('F5 Networks, Inc.')
gtmGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1))
gtmApplications = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2))
gtmDataCenters = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3))
gtmIps = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4))
gtmLinks = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5))
gtmPools = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6))
gtmRegions = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7))
gtmRules = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8))
gtmServers = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9))
gtmTopologies = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10))
gtmVirtualServers = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11))
gtmWideips = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12))
gtmProberPools = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13))
gtmDNSSEC = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14))
gtmGlobalAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1))
gtmGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2))
gtmGlobalAttr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1))
gtmGlobalLdnsProbeProto = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2))
gtmGlobalAttr2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3))
gtmGlobalStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1))
gtmGlobalDnssecStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2))
gtmApplication = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1))
gtmApplicationStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2))
gtmAppContextStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3))
gtmAppContextDisable = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4))
gtmDataCenter = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1))
gtmDataCenterStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2))
gtmDataCenterStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3))
gtmIp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1))
gtmLink = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1))
gtmLinkCost = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2))
gtmLinkStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3))
gtmLinkStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4))
gtmPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1))
gtmPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2))
gtmPoolStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3))
gtmPoolMember = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4))
gtmPoolMemberDepends = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5))
gtmPoolMemberStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6))
gtmPoolMemberStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7))
gtmRegionEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 1))
gtmRegItem = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2))
gtmRule = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1))
gtmRuleEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2))
gtmRuleEventStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3))
gtmServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1))
gtmServerStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2))
gtmServerStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3))
gtmServerStat2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4))
gtmTopItem = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1))
gtmVirtualServ = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1))
gtmVirtualServDepends = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2))
gtmVirtualServStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3))
gtmVirtualServStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4))
gtmWideip = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1))
gtmWideipStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2))
gtmWideipStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3))
gtmWideipAlias = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 4))
gtmWideipPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5))
gtmWideipRule = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6))
gtmProberPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1))
gtmProberPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2))
gtmProberPoolStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3))
gtmProberPoolMember = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4))
gtmProberPoolMemberStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5))
gtmProberPoolMemberStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6))
gtmDnssecZoneStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1))
gtmAttrDumpTopology = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDumpTopology.setStatus('deprecated')
gtmAttrCacheLdns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrCacheLdns.setStatus('deprecated')
gtmAttrAolAware = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrAolAware.setStatus('deprecated')
gtmAttrCheckStaticDepends = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrCheckStaticDepends.setStatus('deprecated')
gtmAttrCheckDynamicDepends = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrCheckDynamicDepends.setStatus('deprecated')
gtmAttrDrainRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDrainRequests.setStatus('deprecated')
gtmAttrEnableResetsRipeness = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrEnableResetsRipeness.setStatus('deprecated')
gtmAttrFbRespectDepends = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrFbRespectDepends.setStatus('deprecated')
gtmAttrFbRespectAcl = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrFbRespectAcl.setStatus('deprecated')
gtmAttrDefaultAlternate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersist", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vssore", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDefaultAlternate.setStatus('deprecated')
gtmAttrDefaultFallback = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersit", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vsscore", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDefaultFallback.setStatus('deprecated')
gtmAttrPersistMask = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrPersistMask.setStatus('deprecated')
gtmAttrGtmSetsRecursion = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrGtmSetsRecursion.setStatus('deprecated')
gtmAttrQosFactorLcs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorLcs.setStatus('deprecated')
gtmAttrQosFactorRtt = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorRtt.setStatus('deprecated')
gtmAttrQosFactorHops = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorHops.setStatus('deprecated')
gtmAttrQosFactorHitRatio = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorHitRatio.setStatus('deprecated')
gtmAttrQosFactorPacketRate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorPacketRate.setStatus('deprecated')
gtmAttrQosFactorBps = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorBps.setStatus('deprecated')
gtmAttrQosFactorVsCapacity = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorVsCapacity.setStatus('deprecated')
gtmAttrQosFactorTopology = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorTopology.setStatus('deprecated')
gtmAttrQosFactorConnRate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorConnRate.setStatus('deprecated')
gtmAttrTimerRetryPathData = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTimerRetryPathData.setStatus('deprecated')
gtmAttrTimerGetAutoconfigData = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTimerGetAutoconfigData.setStatus('deprecated')
gtmAttrTimerPersistCache = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTimerPersistCache.setStatus('deprecated')
gtmAttrDefaultProbeLimit = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDefaultProbeLimit.setStatus('deprecated')
gtmAttrDownThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDownThreshold.setStatus('deprecated')
gtmAttrDownMultiple = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDownMultiple.setStatus('deprecated')
gtmAttrPathTtl = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrPathTtl.setStatus('deprecated')
gtmAttrTraceTtl = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTraceTtl.setStatus('deprecated')
gtmAttrLdnsDuration = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLdnsDuration.setStatus('deprecated')
gtmAttrPathDuration = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrPathDuration.setStatus('deprecated')
gtmAttrRttSampleCount = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrRttSampleCount.setStatus('deprecated')
gtmAttrRttPacketLength = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrRttPacketLength.setStatus('deprecated')
gtmAttrRttTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrRttTimeout.setStatus('deprecated')
gtmAttrMaxMonReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrMaxMonReqs.setStatus('deprecated')
gtmAttrTraceroutePort = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTraceroutePort.setStatus('deprecated')
gtmAttrPathsNeverDie = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrPathsNeverDie.setStatus('deprecated')
gtmAttrProbeDisabledObjects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrProbeDisabledObjects.setStatus('deprecated')
gtmAttrLinkLimitFactor = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLinkLimitFactor.setStatus('deprecated')
gtmAttrOverLimitLinkLimitFactor = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrOverLimitLinkLimitFactor.setStatus('deprecated')
gtmAttrLinkPrepaidFactor = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLinkPrepaidFactor.setStatus('deprecated')
gtmAttrLinkCompensateInbound = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLinkCompensateInbound.setStatus('deprecated')
gtmAttrLinkCompensateOutbound = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLinkCompensateOutbound.setStatus('deprecated')
gtmAttrLinkCompensationHistory = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLinkCompensationHistory.setStatus('deprecated')
gtmAttrMaxLinkOverLimitCount = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrMaxLinkOverLimitCount.setStatus('deprecated')
gtmAttrLowerBoundPctRow = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLowerBoundPctRow.setStatus('deprecated')
gtmAttrLowerBoundPctCol = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLowerBoundPctCol.setStatus('deprecated')
gtmAttrAutoconf = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrAutoconf.setStatus('deprecated')
gtmAttrAutosync = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrAutosync.setStatus('deprecated')
gtmAttrSyncNamedConf = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrSyncNamedConf.setStatus('deprecated')
gtmAttrSyncGroup = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 52), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrSyncGroup.setStatus('deprecated')
gtmAttrSyncTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrSyncTimeout.setStatus('deprecated')
gtmAttrSyncZonesTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrSyncZonesTimeout.setStatus('deprecated')
gtmAttrTimeTolerance = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTimeTolerance.setStatus('deprecated')
gtmAttrTopologyLongestMatch = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTopologyLongestMatch.setStatus('deprecated')
gtmAttrTopologyAclThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTopologyAclThreshold.setStatus('deprecated')
gtmAttrStaticPersistCidr = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrStaticPersistCidr.setStatus('deprecated')
gtmAttrStaticPersistV6Cidr = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrStaticPersistV6Cidr.setStatus('deprecated')
gtmAttrQosFactorVsScore = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorVsScore.setStatus('deprecated')
gtmAttrTimerSendKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTimerSendKeepAlive.setStatus('deprecated')
gtmAttrCertificateDepth = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrCertificateDepth.setStatus('deprecated')
gtmAttrMaxMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrMaxMemoryUsage.setStatus('deprecated')
gtmGlobalLdnsProbeProtoNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoNumber.setStatus('current')
gtmGlobalLdnsProbeProtoTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2, 2), )
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoTable.setStatus('current')
gtmGlobalLdnsProbeProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmGlobalLdnsProbeProtoName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmGlobalLdnsProbeProtoIndex"))
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoEntry.setStatus('current')
gtmGlobalLdnsProbeProtoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoIndex.setStatus('current')
gtmGlobalLdnsProbeProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("icmp", 0), ("tcp", 1), ("udp", 2), ("dnsdot", 3), ("dnsrev", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoType.setStatus('current')
gtmGlobalLdnsProbeProtoName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoName.setStatus('current')
gtmStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmStatResetStats.setStatus('current')
gtmStatRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatRequests.setStatus('current')
gtmStatResolutions = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatResolutions.setStatus('current')
gtmStatPersisted = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatPersisted.setStatus('current')
gtmStatPreferred = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatPreferred.setStatus('current')
gtmStatAlternate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatAlternate.setStatus('current')
gtmStatFallback = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatFallback.setStatus('current')
gtmStatDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatDropped.setStatus('current')
gtmStatExplicitIp = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatExplicitIp.setStatus('deprecated')
gtmStatReturnToDns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatReturnToDns.setStatus('current')
gtmStatReconnects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatReconnects.setStatus('current')
gtmStatBytesReceived = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatBytesReceived.setStatus('current')
gtmStatBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatBytesSent.setStatus('current')
gtmStatNumBacklogged = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatNumBacklogged.setStatus('current')
gtmStatBytesDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatBytesDropped.setStatus('current')
gtmStatLdnses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatLdnses.setStatus('current')
gtmStatPaths = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatPaths.setStatus('current')
gtmStatReturnFromDns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatReturnFromDns.setStatus('current')
gtmStatCnameResolutions = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatCnameResolutions.setStatus('current')
gtmStatARequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatARequests.setStatus('current')
gtmStatAaaaRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatAaaaRequests.setStatus('current')
gtmAppNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppNumber.setStatus('current')
gtmAppTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 2), )
if mibBuilder.loadTexts: gtmAppTable.setStatus('current')
gtmAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmAppName"))
if mibBuilder.loadTexts: gtmAppEntry.setStatus('current')
gtmAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppName.setStatus('current')
gtmAppPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppPersist.setStatus('current')
gtmAppTtlPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppTtlPersist.setStatus('current')
gtmAppAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("server", 1), ("link", 2), ("datacenter", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppAvailability.setStatus('current')
gtmAppStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppStatusNumber.setStatus('current')
gtmAppStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2), )
if mibBuilder.loadTexts: gtmAppStatusTable.setStatus('current')
gtmAppStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmAppStatusName"))
if mibBuilder.loadTexts: gtmAppStatusEntry.setStatus('current')
gtmAppStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppStatusName.setStatus('current')
gtmAppStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppStatusAvailState.setStatus('current')
gtmAppStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppStatusEnabledState.setStatus('current')
gtmAppStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppStatusParentType.setStatus('deprecated')
gtmAppStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppStatusDetailReason.setStatus('current')
gtmAppContStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatNumber.setStatus('current')
gtmAppContStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2), )
if mibBuilder.loadTexts: gtmAppContStatTable.setStatus('current')
gtmAppContStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmAppContStatAppName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmAppContStatType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmAppContStatName"))
if mibBuilder.loadTexts: gtmAppContStatEntry.setStatus('current')
gtmAppContStatAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatAppName.setStatus('current')
gtmAppContStatType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("datacenter", 0), ("server", 1), ("link", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatType.setStatus('current')
gtmAppContStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatName.setStatus('current')
gtmAppContStatNumAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatNumAvail.setStatus('current')
gtmAppContStatAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatAvailState.setStatus('current')
gtmAppContStatEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatEnabledState.setStatus('current')
gtmAppContStatParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatParentType.setStatus('deprecated')
gtmAppContStatDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatDetailReason.setStatus('current')
gtmAppContDisNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContDisNumber.setStatus('current')
gtmAppContDisTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4, 2), )
if mibBuilder.loadTexts: gtmAppContDisTable.setStatus('current')
gtmAppContDisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmAppContDisAppName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmAppContDisType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmAppContDisName"))
if mibBuilder.loadTexts: gtmAppContDisEntry.setStatus('current')
gtmAppContDisAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContDisAppName.setStatus('current')
gtmAppContDisType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("datacenter", 0), ("server", 1), ("link", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContDisType.setStatus('current')
gtmAppContDisName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContDisName.setStatus('current')
gtmDcNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcNumber.setStatus('current')
gtmDcTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 2), )
if mibBuilder.loadTexts: gtmDcTable.setStatus('current')
gtmDcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmDcName"))
if mibBuilder.loadTexts: gtmDcEntry.setStatus('current')
gtmDcName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcName.setStatus('current')
gtmDcLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcLocation.setStatus('current')
gtmDcContact = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcContact.setStatus('current')
gtmDcEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcEnabled.setStatus('current')
gtmDcStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmDcStatResetStats.setStatus('current')
gtmDcStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatNumber.setStatus('current')
gtmDcStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3), )
if mibBuilder.loadTexts: gtmDcStatTable.setStatus('current')
gtmDcStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmDcStatName"))
if mibBuilder.loadTexts: gtmDcStatEntry.setStatus('current')
gtmDcStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatName.setStatus('current')
gtmDcStatCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatCpuUsage.setStatus('current')
gtmDcStatMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatMemAvail.setStatus('current')
gtmDcStatBitsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatBitsPerSecIn.setStatus('current')
gtmDcStatBitsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatBitsPerSecOut.setStatus('current')
gtmDcStatPktsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatPktsPerSecIn.setStatus('current')
gtmDcStatPktsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatPktsPerSecOut.setStatus('current')
gtmDcStatConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatConnections.setStatus('current')
gtmDcStatConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatConnRate.setStatus('deprecated')
gtmDcStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatusNumber.setStatus('current')
gtmDcStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2), )
if mibBuilder.loadTexts: gtmDcStatusTable.setStatus('current')
gtmDcStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmDcStatusName"))
if mibBuilder.loadTexts: gtmDcStatusEntry.setStatus('current')
gtmDcStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatusName.setStatus('current')
gtmDcStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatusAvailState.setStatus('current')
gtmDcStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatusEnabledState.setStatus('current')
gtmDcStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatusParentType.setStatus('deprecated')
gtmDcStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatusDetailReason.setStatus('current')
gtmIpNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpNumber.setStatus('current')
gtmIpTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2), )
if mibBuilder.loadTexts: gtmIpTable.setStatus('current')
gtmIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmIpIpType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmIpIp"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmIpLinkName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmIpServerName"))
if mibBuilder.loadTexts: gtmIpEntry.setStatus('current')
gtmIpIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpIpType.setStatus('current')
gtmIpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpIp.setStatus('current')
gtmIpLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpLinkName.setStatus('current')
gtmIpServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpServerName.setStatus('current')
gtmIpUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpUnitId.setStatus('deprecated')
gtmIpIpXlatedType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpIpXlatedType.setStatus('current')
gtmIpIpXlated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpIpXlated.setStatus('current')
gtmIpDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpDeviceName.setStatus('current')
gtmLinkNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkNumber.setStatus('current')
gtmLinkTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2), )
if mibBuilder.loadTexts: gtmLinkTable.setStatus('current')
gtmLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmLinkName"))
if mibBuilder.loadTexts: gtmLinkEntry.setStatus('current')
gtmLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkName.setStatus('current')
gtmLinkDcName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkDcName.setStatus('current')
gtmLinkIspName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkIspName.setStatus('current')
gtmLinkUplinkAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkUplinkAddressType.setStatus('current')
gtmLinkUplinkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkUplinkAddress.setStatus('current')
gtmLinkLimitInCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInCpuUsageEnabled.setStatus('current')
gtmLinkLimitInMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInMemAvailEnabled.setStatus('current')
gtmLinkLimitInBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInBitsPerSecEnabled.setStatus('current')
gtmLinkLimitInPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInPktsPerSecEnabled.setStatus('current')
gtmLinkLimitInConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInConnEnabled.setStatus('current')
gtmLinkLimitInConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInConnPerSecEnabled.setStatus('deprecated')
gtmLinkLimitInCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInCpuUsage.setStatus('current')
gtmLinkLimitInMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInMemAvail.setStatus('current')
gtmLinkLimitInBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInBitsPerSec.setStatus('current')
gtmLinkLimitInPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInPktsPerSec.setStatus('current')
gtmLinkLimitInConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInConn.setStatus('current')
gtmLinkLimitInConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInConnPerSec.setStatus('deprecated')
gtmLinkLimitOutCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutCpuUsageEnabled.setStatus('current')
gtmLinkLimitOutMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutMemAvailEnabled.setStatus('current')
gtmLinkLimitOutBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutBitsPerSecEnabled.setStatus('current')
gtmLinkLimitOutPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutPktsPerSecEnabled.setStatus('current')
gtmLinkLimitOutConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutConnEnabled.setStatus('current')
gtmLinkLimitOutConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutConnPerSecEnabled.setStatus('deprecated')
gtmLinkLimitOutCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutCpuUsage.setStatus('current')
gtmLinkLimitOutMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutMemAvail.setStatus('current')
gtmLinkLimitOutBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutBitsPerSec.setStatus('current')
gtmLinkLimitOutPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutPktsPerSec.setStatus('current')
gtmLinkLimitOutConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutConn.setStatus('current')
gtmLinkLimitOutConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutConnPerSec.setStatus('deprecated')
gtmLinkLimitTotalCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalCpuUsageEnabled.setStatus('current')
gtmLinkLimitTotalMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalMemAvailEnabled.setStatus('current')
gtmLinkLimitTotalBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalBitsPerSecEnabled.setStatus('current')
gtmLinkLimitTotalPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalPktsPerSecEnabled.setStatus('current')
gtmLinkLimitTotalConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalConnEnabled.setStatus('current')
gtmLinkLimitTotalConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalConnPerSecEnabled.setStatus('deprecated')
gtmLinkLimitTotalCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalCpuUsage.setStatus('current')
gtmLinkLimitTotalMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalMemAvail.setStatus('current')
gtmLinkLimitTotalBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalBitsPerSec.setStatus('current')
gtmLinkLimitTotalPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalPktsPerSec.setStatus('current')
gtmLinkLimitTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalConn.setStatus('current')
gtmLinkLimitTotalConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalConnPerSec.setStatus('deprecated')
gtmLinkMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 42), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkMonitorRule.setStatus('current')
gtmLinkDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkDuplex.setStatus('current')
gtmLinkEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkEnabled.setStatus('current')
gtmLinkRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkRatio.setStatus('current')
gtmLinkPrepaid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkPrepaid.setStatus('current')
gtmLinkPrepaidInDollars = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkPrepaidInDollars.setStatus('deprecated')
gtmLinkWeightingType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ratio", 0), ("cost", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkWeightingType.setStatus('current')
gtmLinkCostNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkCostNumber.setStatus('current')
gtmLinkCostTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 2), )
if mibBuilder.loadTexts: gtmLinkCostTable.setStatus('current')
gtmLinkCostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmLinkCostName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmLinkCostIndex"))
if mibBuilder.loadTexts: gtmLinkCostEntry.setStatus('current')
gtmLinkCostName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkCostName.setStatus('current')
gtmLinkCostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkCostIndex.setStatus('current')
gtmLinkCostUptoBps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkCostUptoBps.setStatus('current')
gtmLinkCostDollarsPerMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkCostDollarsPerMbps.setStatus('current')
gtmLinkStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmLinkStatResetStats.setStatus('current')
gtmLinkStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatNumber.setStatus('current')
gtmLinkStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3), )
if mibBuilder.loadTexts: gtmLinkStatTable.setStatus('current')
gtmLinkStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmLinkStatName"))
if mibBuilder.loadTexts: gtmLinkStatEntry.setStatus('current')
gtmLinkStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatName.setStatus('current')
gtmLinkStatRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRate.setStatus('current')
gtmLinkStatRateIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateIn.setStatus('current')
gtmLinkStatRateOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateOut.setStatus('current')
gtmLinkStatRateNode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateNode.setStatus('current')
gtmLinkStatRateNodeIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateNodeIn.setStatus('current')
gtmLinkStatRateNodeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateNodeOut.setStatus('current')
gtmLinkStatRateVses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateVses.setStatus('current')
gtmLinkStatRateVsesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateVsesIn.setStatus('current')
gtmLinkStatRateVsesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateVsesOut.setStatus('current')
gtmLinkStatLcsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatLcsIn.setStatus('current')
gtmLinkStatLcsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatLcsOut.setStatus('current')
gtmLinkStatPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatPaths.setStatus('current')
gtmLinkStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatusNumber.setStatus('current')
gtmLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2), )
if mibBuilder.loadTexts: gtmLinkStatusTable.setStatus('current')
gtmLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusName"))
if mibBuilder.loadTexts: gtmLinkStatusEntry.setStatus('current')
gtmLinkStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatusName.setStatus('current')
gtmLinkStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatusAvailState.setStatus('current')
gtmLinkStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatusEnabledState.setStatus('current')
gtmLinkStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatusParentType.setStatus('deprecated')
gtmLinkStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatusDetailReason.setStatus('current')
gtmPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolNumber.setStatus('current')
gtmPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2), )
if mibBuilder.loadTexts: gtmPoolTable.setStatus('current')
gtmPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolName"))
if mibBuilder.loadTexts: gtmPoolEntry.setStatus('current')
gtmPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolName.setStatus('current')
gtmPoolTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolTtl.setStatus('current')
gtmPoolEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolEnabled.setStatus('current')
gtmPoolVerifyMember = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolVerifyMember.setStatus('current')
gtmPoolDynamicRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolDynamicRatio.setStatus('current')
gtmPoolAnswersToReturn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolAnswersToReturn.setStatus('current')
gtmPoolLbMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersit", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vsscore", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLbMode.setStatus('current')
gtmPoolAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersit", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vsscore", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolAlternate.setStatus('current')
gtmPoolFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersit", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vsscore", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolFallback.setStatus('current')
gtmPoolManualResume = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolManualResume.setStatus('current')
gtmPoolQosCoeffRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffRtt.setStatus('current')
gtmPoolQosCoeffHops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffHops.setStatus('current')
gtmPoolQosCoeffTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffTopology.setStatus('current')
gtmPoolQosCoeffHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffHitRatio.setStatus('current')
gtmPoolQosCoeffPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffPacketRate.setStatus('current')
gtmPoolQosCoeffVsCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffVsCapacity.setStatus('current')
gtmPoolQosCoeffBps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffBps.setStatus('current')
gtmPoolQosCoeffLcs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffLcs.setStatus('current')
gtmPoolQosCoeffConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffConnRate.setStatus('deprecated')
gtmPoolFallbackIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 20), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolFallbackIpType.setStatus('current')
gtmPoolFallbackIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 21), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolFallbackIp.setStatus('current')
gtmPoolCname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 22), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolCname.setStatus('current')
gtmPoolLimitCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitCpuUsageEnabled.setStatus('current')
gtmPoolLimitMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitMemAvailEnabled.setStatus('current')
gtmPoolLimitBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitBitsPerSecEnabled.setStatus('current')
gtmPoolLimitPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitPktsPerSecEnabled.setStatus('current')
gtmPoolLimitConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitConnEnabled.setStatus('current')
gtmPoolLimitConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitConnPerSecEnabled.setStatus('deprecated')
gtmPoolLimitCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitCpuUsage.setStatus('current')
gtmPoolLimitMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitMemAvail.setStatus('current')
gtmPoolLimitBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitBitsPerSec.setStatus('current')
gtmPoolLimitPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitPktsPerSec.setStatus('current')
gtmPoolLimitConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitConn.setStatus('current')
gtmPoolLimitConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitConnPerSec.setStatus('deprecated')
gtmPoolMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 35), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMonitorRule.setStatus('current')
gtmPoolQosCoeffVsScore = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffVsScore.setStatus('current')
gtmPoolFallbackIpv6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 37), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolFallbackIpv6Type.setStatus('current')
gtmPoolFallbackIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 38), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolFallbackIpv6.setStatus('current')
gtmPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmPoolStatResetStats.setStatus('current')
gtmPoolStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatNumber.setStatus('current')
gtmPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3), )
if mibBuilder.loadTexts: gtmPoolStatTable.setStatus('current')
gtmPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolStatName"))
if mibBuilder.loadTexts: gtmPoolStatEntry.setStatus('current')
gtmPoolStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatName.setStatus('current')
gtmPoolStatPreferred = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatPreferred.setStatus('current')
gtmPoolStatAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatAlternate.setStatus('current')
gtmPoolStatFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatFallback.setStatus('current')
gtmPoolStatDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatDropped.setStatus('current')
gtmPoolStatExplicitIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatExplicitIp.setStatus('deprecated')
gtmPoolStatReturnToDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatReturnToDns.setStatus('current')
gtmPoolStatReturnFromDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatReturnFromDns.setStatus('current')
gtmPoolStatCnameResolutions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatCnameResolutions.setStatus('current')
gtmPoolMbrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrNumber.setStatus('current')
gtmPoolMbrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2), )
if mibBuilder.loadTexts: gtmPoolMbrTable.setStatus('current')
gtmPoolMbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrVsName"))
if mibBuilder.loadTexts: gtmPoolMbrEntry.setStatus('current')
gtmPoolMbrPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrPoolName.setStatus('current')
gtmPoolMbrIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrIpType.setStatus('deprecated')
gtmPoolMbrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrIp.setStatus('deprecated')
gtmPoolMbrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrPort.setStatus('deprecated')
gtmPoolMbrVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrVsName.setStatus('current')
gtmPoolMbrOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrOrder.setStatus('current')
gtmPoolMbrLimitCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitCpuUsageEnabled.setStatus('current')
gtmPoolMbrLimitMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitMemAvailEnabled.setStatus('current')
gtmPoolMbrLimitBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitBitsPerSecEnabled.setStatus('current')
gtmPoolMbrLimitPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitPktsPerSecEnabled.setStatus('current')
gtmPoolMbrLimitConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitConnEnabled.setStatus('current')
gtmPoolMbrLimitConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitConnPerSecEnabled.setStatus('deprecated')
gtmPoolMbrLimitCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitCpuUsage.setStatus('current')
gtmPoolMbrLimitMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitMemAvail.setStatus('current')
gtmPoolMbrLimitBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitBitsPerSec.setStatus('current')
gtmPoolMbrLimitPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitPktsPerSec.setStatus('current')
gtmPoolMbrLimitConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitConn.setStatus('current')
gtmPoolMbrLimitConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitConnPerSec.setStatus('deprecated')
gtmPoolMbrMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrMonitorRule.setStatus('current')
gtmPoolMbrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrEnabled.setStatus('current')
gtmPoolMbrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrRatio.setStatus('current')
gtmPoolMbrServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 22), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrServerName.setStatus('current')
gtmPoolStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatusNumber.setStatus('current')
gtmPoolStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2), )
if mibBuilder.loadTexts: gtmPoolStatusTable.setStatus('current')
gtmPoolStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusName"))
if mibBuilder.loadTexts: gtmPoolStatusEntry.setStatus('current')
gtmPoolStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatusName.setStatus('current')
gtmPoolStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatusAvailState.setStatus('current')
gtmPoolStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatusEnabledState.setStatus('current')
gtmPoolStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatusParentType.setStatus('deprecated')
gtmPoolStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatusDetailReason.setStatus('current')
gtmPoolMbrDepsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsNumber.setStatus('current')
gtmPoolMbrDepsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2), )
if mibBuilder.loadTexts: gtmPoolMbrDepsTable.setStatus('current')
gtmPoolMbrDepsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsVsName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsDependServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsDependVsName"))
if mibBuilder.loadTexts: gtmPoolMbrDepsEntry.setStatus('current')
gtmPoolMbrDepsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsIpType.setStatus('deprecated')
gtmPoolMbrDepsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsIp.setStatus('deprecated')
gtmPoolMbrDepsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsPort.setStatus('deprecated')
gtmPoolMbrDepsPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsPoolName.setStatus('current')
gtmPoolMbrDepsVipType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsVipType.setStatus('deprecated')
gtmPoolMbrDepsVip = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsVip.setStatus('deprecated')
gtmPoolMbrDepsVport = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsVport.setStatus('deprecated')
gtmPoolMbrDepsServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsServerName.setStatus('current')
gtmPoolMbrDepsVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsVsName.setStatus('current')
gtmPoolMbrDepsDependServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsDependServerName.setStatus('current')
gtmPoolMbrDepsDependVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsDependVsName.setStatus('current')
gtmPoolMbrStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmPoolMbrStatResetStats.setStatus('current')
gtmPoolMbrStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatNumber.setStatus('current')
gtmPoolMbrStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3), )
if mibBuilder.loadTexts: gtmPoolMbrStatTable.setStatus('current')
gtmPoolMbrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatVsName"))
if mibBuilder.loadTexts: gtmPoolMbrStatEntry.setStatus('current')
gtmPoolMbrStatPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatPoolName.setStatus('current')
gtmPoolMbrStatIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatIpType.setStatus('deprecated')
gtmPoolMbrStatIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatIp.setStatus('deprecated')
gtmPoolMbrStatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatPort.setStatus('deprecated')
gtmPoolMbrStatPreferred = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatPreferred.setStatus('current')
gtmPoolMbrStatAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatAlternate.setStatus('current')
gtmPoolMbrStatFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatFallback.setStatus('current')
gtmPoolMbrStatServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatServerName.setStatus('current')
gtmPoolMbrStatVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatVsName.setStatus('current')
gtmPoolMbrStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusNumber.setStatus('current')
gtmPoolMbrStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2), )
if mibBuilder.loadTexts: gtmPoolMbrStatusTable.setStatus('current')
gtmPoolMbrStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusVsName"))
if mibBuilder.loadTexts: gtmPoolMbrStatusEntry.setStatus('current')
gtmPoolMbrStatusPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusPoolName.setStatus('current')
gtmPoolMbrStatusIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusIpType.setStatus('deprecated')
gtmPoolMbrStatusIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusIp.setStatus('deprecated')
gtmPoolMbrStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusPort.setStatus('deprecated')
gtmPoolMbrStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusAvailState.setStatus('current')
gtmPoolMbrStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusEnabledState.setStatus('current')
gtmPoolMbrStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusParentType.setStatus('deprecated')
gtmPoolMbrStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusDetailReason.setStatus('current')
gtmPoolMbrStatusVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusVsName.setStatus('current')
gtmPoolMbrStatusServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusServerName.setStatus('current')
gtmRegionEntryNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegionEntryNumber.setStatus('current')
gtmRegionEntryTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 1, 2), )
if mibBuilder.loadTexts: gtmRegionEntryTable.setStatus('current')
gtmRegionEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmRegionEntryName"))
if mibBuilder.loadTexts: gtmRegionEntryEntry.setStatus('current')
gtmRegionEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegionEntryName.setStatus('current')
gtmRegionEntryRegionDbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("user", 0), ("acl", 1), ("isp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegionEntryRegionDbType.setStatus('current')
gtmRegItemNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegItemNumber.setStatus('current')
gtmRegItemTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2), )
if mibBuilder.loadTexts: gtmRegItemTable.setStatus('current')
gtmRegItemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmRegItemRegionDbType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRegItemRegionName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRegItemType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRegItemNegate"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRegItemRegEntry"))
if mibBuilder.loadTexts: gtmRegItemEntry.setStatus('current')
gtmRegItemRegionDbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("user", 0), ("acl", 1), ("isp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegItemRegionDbType.setStatus('current')
gtmRegItemRegionName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegItemRegionName.setStatus('current')
gtmRegItemType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cidr", 0), ("region", 1), ("continent", 2), ("country", 3), ("state", 4), ("pool", 5), ("datacenter", 6), ("ispregion", 7), ("geoip-isp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegItemType.setStatus('current')
gtmRegItemNegate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegItemNegate.setStatus('current')
gtmRegItemRegEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegItemRegEntry.setStatus('current')
gtmRuleNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleNumber.setStatus('current')
gtmRuleTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1, 2), )
if mibBuilder.loadTexts: gtmRuleTable.setStatus('current')
gtmRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleName"))
if mibBuilder.loadTexts: gtmRuleEntry.setStatus('current')
gtmRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleName.setStatus('current')
gtmRuleDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleDefinition.setStatus('deprecated')
gtmRuleConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleConfigSource.setStatus('current')
gtmRuleEventNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventNumber.setStatus('current')
gtmRuleEventTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 2), )
if mibBuilder.loadTexts: gtmRuleEventTable.setStatus('current')
gtmRuleEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleEventName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleEventEventType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleEventPriority"))
if mibBuilder.loadTexts: gtmRuleEventEntry.setStatus('current')
gtmRuleEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventName.setStatus('current')
gtmRuleEventEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventEventType.setStatus('current')
gtmRuleEventPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventPriority.setStatus('current')
gtmRuleEventScript = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventScript.setStatus('deprecated')
gtmRuleEventStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmRuleEventStatResetStats.setStatus('current')
gtmRuleEventStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatNumber.setStatus('current')
gtmRuleEventStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3), )
if mibBuilder.loadTexts: gtmRuleEventStatTable.setStatus('current')
gtmRuleEventStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatEventType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatPriority"))
if mibBuilder.loadTexts: gtmRuleEventStatEntry.setStatus('current')
gtmRuleEventStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatName.setStatus('current')
gtmRuleEventStatEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatEventType.setStatus('current')
gtmRuleEventStatPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatPriority.setStatus('current')
gtmRuleEventStatFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatFailures.setStatus('current')
gtmRuleEventStatAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatAborts.setStatus('current')
gtmRuleEventStatTotalExecutions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatTotalExecutions.setStatus('current')
gtmServerNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerNumber.setStatus('current')
gtmServerTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2), )
if mibBuilder.loadTexts: gtmServerTable.setStatus('current')
gtmServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmServerName"))
if mibBuilder.loadTexts: gtmServerEntry.setStatus('current')
gtmServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerName.setStatus('current')
gtmServerDcName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerDcName.setStatus('current')
gtmServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("bigipstandalone", 0), ("bigipredundant", 1), ("genericloadbalancer", 2), ("alteonacedirector", 3), ("ciscocss", 4), ("ciscolocaldirectorv2", 5), ("ciscolocaldirectorv3", 6), ("ciscoserverloadbalancer", 7), ("extreme", 8), ("foundryserveriron", 9), ("generichost", 10), ("cacheflow", 11), ("netapp", 12), ("windows2000", 13), ("windowsnt4", 14), ("solaris", 15), ("radware", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerType.setStatus('current')
gtmServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerEnabled.setStatus('current')
gtmServerLimitCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitCpuUsageEnabled.setStatus('current')
gtmServerLimitMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitMemAvailEnabled.setStatus('current')
gtmServerLimitBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitBitsPerSecEnabled.setStatus('current')
gtmServerLimitPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitPktsPerSecEnabled.setStatus('current')
gtmServerLimitConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitConnEnabled.setStatus('current')
gtmServerLimitConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitConnPerSecEnabled.setStatus('deprecated')
gtmServerLimitCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitCpuUsage.setStatus('current')
gtmServerLimitMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitMemAvail.setStatus('current')
gtmServerLimitBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitBitsPerSec.setStatus('current')
gtmServerLimitPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitPktsPerSec.setStatus('current')
gtmServerLimitConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitConn.setStatus('current')
gtmServerLimitConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitConnPerSec.setStatus('deprecated')
gtmServerProberType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerProberType.setStatus('deprecated')
gtmServerProber = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerProber.setStatus('deprecated')
gtmServerMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerMonitorRule.setStatus('current')
gtmServerAllowSvcChk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerAllowSvcChk.setStatus('current')
gtmServerAllowPath = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerAllowPath.setStatus('current')
gtmServerAllowSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerAllowSnmp.setStatus('current')
gtmServerAutoconfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("enablednoautodelete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerAutoconfState.setStatus('current')
gtmServerLinkAutoconfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("enablednoautodelete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLinkAutoconfState.setStatus('current')
gtmServerStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmServerStatResetStats.setStatus('deprecated')
gtmServerStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatNumber.setStatus('deprecated')
gtmServerStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3), )
if mibBuilder.loadTexts: gtmServerStatTable.setStatus('deprecated')
gtmServerStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmServerStatName"))
if mibBuilder.loadTexts: gtmServerStatEntry.setStatus('deprecated')
gtmServerStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatName.setStatus('deprecated')
gtmServerStatUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatUnitId.setStatus('deprecated')
gtmServerStatVsPicks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatVsPicks.setStatus('deprecated')
gtmServerStatCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatCpuUsage.setStatus('deprecated')
gtmServerStatMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatMemAvail.setStatus('deprecated')
gtmServerStatBitsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatBitsPerSecIn.setStatus('deprecated')
gtmServerStatBitsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatBitsPerSecOut.setStatus('deprecated')
gtmServerStatPktsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatPktsPerSecIn.setStatus('deprecated')
gtmServerStatPktsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatPktsPerSecOut.setStatus('deprecated')
gtmServerStatConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatConnections.setStatus('deprecated')
gtmServerStatConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatConnRate.setStatus('deprecated')
gtmServerStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatusNumber.setStatus('current')
gtmServerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2), )
if mibBuilder.loadTexts: gtmServerStatusTable.setStatus('current')
gtmServerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmServerStatusName"))
if mibBuilder.loadTexts: gtmServerStatusEntry.setStatus('current')
gtmServerStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatusName.setStatus('current')
gtmServerStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatusAvailState.setStatus('current')
gtmServerStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatusEnabledState.setStatus('current')
gtmServerStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatusParentType.setStatus('deprecated')
gtmServerStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatusDetailReason.setStatus('current')
gtmTopItemNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemNumber.setStatus('current')
gtmTopItemTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2), )
if mibBuilder.loadTexts: gtmTopItemTable.setStatus('current')
gtmTopItemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmTopItemLdnsType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmTopItemLdnsNegate"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmTopItemLdnsEntry"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmTopItemServerType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmTopItemServerNegate"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmTopItemServerEntry"))
if mibBuilder.loadTexts: gtmTopItemEntry.setStatus('current')
gtmTopItemLdnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cidr", 0), ("region", 1), ("continent", 2), ("country", 3), ("state", 4), ("pool", 5), ("datacenter", 6), ("ispregion", 7), ("geoip-isp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemLdnsType.setStatus('current')
gtmTopItemLdnsNegate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemLdnsNegate.setStatus('current')
gtmTopItemLdnsEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemLdnsEntry.setStatus('current')
gtmTopItemServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cidr", 0), ("region", 1), ("continent", 2), ("country", 3), ("state", 4), ("pool", 5), ("datacenter", 6), ("ispregion", 7), ("geoip-isp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemServerType.setStatus('current')
gtmTopItemServerNegate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemServerNegate.setStatus('current')
gtmTopItemServerEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemServerEntry.setStatus('current')
gtmTopItemWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemWeight.setStatus('current')
gtmTopItemOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemOrder.setStatus('current')
gtmVsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsNumber.setStatus('current')
gtmVsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2), )
if mibBuilder.loadTexts: gtmVsTable.setStatus('current')
gtmVsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmVsServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmVsName"))
if mibBuilder.loadTexts: gtmVsEntry.setStatus('current')
gtmVsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsIpType.setStatus('current')
gtmVsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsIp.setStatus('current')
gtmVsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsPort.setStatus('current')
gtmVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsName.setStatus('current')
gtmVsServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsServerName.setStatus('current')
gtmVsIpXlatedType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsIpXlatedType.setStatus('current')
gtmVsIpXlated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsIpXlated.setStatus('current')
gtmVsPortXlated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 8), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsPortXlated.setStatus('current')
gtmVsLimitCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitCpuUsageEnabled.setStatus('current')
gtmVsLimitMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitMemAvailEnabled.setStatus('current')
gtmVsLimitBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitBitsPerSecEnabled.setStatus('current')
gtmVsLimitPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitPktsPerSecEnabled.setStatus('current')
gtmVsLimitConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitConnEnabled.setStatus('current')
gtmVsLimitConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitConnPerSecEnabled.setStatus('deprecated')
gtmVsLimitCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitCpuUsage.setStatus('current')
gtmVsLimitMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitMemAvail.setStatus('current')
gtmVsLimitBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitBitsPerSec.setStatus('current')
gtmVsLimitPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitPktsPerSec.setStatus('current')
gtmVsLimitConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitConn.setStatus('current')
gtmVsLimitConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitConnPerSec.setStatus('deprecated')
gtmVsMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 21), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsMonitorRule.setStatus('current')
gtmVsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsEnabled.setStatus('current')
gtmVsLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 23), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLinkName.setStatus('current')
gtmVsDepsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsNumber.setStatus('current')
gtmVsDepsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2), )
if mibBuilder.loadTexts: gtmVsDepsTable.setStatus('current')
gtmVsDepsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmVsDepsServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmVsDepsVsName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmVsDepsDependServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmVsDepsDependVsName"))
if mibBuilder.loadTexts: gtmVsDepsEntry.setStatus('current')
gtmVsDepsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsIpType.setStatus('deprecated')
gtmVsDepsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsIp.setStatus('deprecated')
gtmVsDepsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsPort.setStatus('deprecated')
gtmVsDepsVipType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsVipType.setStatus('deprecated')
gtmVsDepsVip = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsVip.setStatus('deprecated')
gtmVsDepsVport = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 6), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsVport.setStatus('deprecated')
gtmVsDepsServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsServerName.setStatus('current')
gtmVsDepsVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsVsName.setStatus('current')
gtmVsDepsDependServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsDependServerName.setStatus('current')
gtmVsDepsDependVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsDependVsName.setStatus('current')
gtmVsStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmVsStatResetStats.setStatus('current')
gtmVsStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatNumber.setStatus('current')
gtmVsStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3), )
if mibBuilder.loadTexts: gtmVsStatTable.setStatus('current')
gtmVsStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmVsStatServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmVsStatName"))
if mibBuilder.loadTexts: gtmVsStatEntry.setStatus('current')
gtmVsStatIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatIpType.setStatus('deprecated')
gtmVsStatIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatIp.setStatus('deprecated')
gtmVsStatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatPort.setStatus('deprecated')
gtmVsStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatName.setStatus('current')
gtmVsStatCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatCpuUsage.setStatus('current')
gtmVsStatMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatMemAvail.setStatus('current')
gtmVsStatBitsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatBitsPerSecIn.setStatus('current')
gtmVsStatBitsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatBitsPerSecOut.setStatus('current')
gtmVsStatPktsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatPktsPerSecIn.setStatus('current')
gtmVsStatPktsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatPktsPerSecOut.setStatus('current')
gtmVsStatConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatConnections.setStatus('current')
gtmVsStatConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatConnRate.setStatus('deprecated')
gtmVsStatVsScore = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatVsScore.setStatus('current')
gtmVsStatServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 14), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatServerName.setStatus('current')
gtmVsStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusNumber.setStatus('current')
gtmVsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2), )
if mibBuilder.loadTexts: gtmVsStatusTable.setStatus('current')
gtmVsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmVsStatusServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmVsStatusVsName"))
if mibBuilder.loadTexts: gtmVsStatusEntry.setStatus('current')
gtmVsStatusIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusIpType.setStatus('deprecated')
gtmVsStatusIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusIp.setStatus('deprecated')
gtmVsStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusPort.setStatus('deprecated')
gtmVsStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusAvailState.setStatus('current')
gtmVsStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusEnabledState.setStatus('current')
gtmVsStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusParentType.setStatus('deprecated')
gtmVsStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusDetailReason.setStatus('current')
gtmVsStatusVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusVsName.setStatus('current')
gtmVsStatusServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusServerName.setStatus('current')
gtmWideipNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipNumber.setStatus('current')
gtmWideipTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2), )
if mibBuilder.loadTexts: gtmWideipTable.setStatus('current')
gtmWideipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipName"))
if mibBuilder.loadTexts: gtmWideipEntry.setStatus('current')
gtmWideipName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipName.setStatus('current')
gtmWideipPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPersist.setStatus('current')
gtmWideipTtlPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipTtlPersist.setStatus('current')
gtmWideipEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipEnabled.setStatus('current')
gtmWideipLbmodePool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersit", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vsscore", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipLbmodePool.setStatus('current')
gtmWideipApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipApplication.setStatus('current')
gtmWideipLastResortPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipLastResortPool.setStatus('current')
gtmWideipIpv6Noerror = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipIpv6Noerror.setStatus('current')
gtmWideipLoadBalancingDecisionLogVerbosity = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipLoadBalancingDecisionLogVerbosity.setStatus('current')
gtmWideipStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmWideipStatResetStats.setStatus('current')
gtmWideipStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatNumber.setStatus('current')
gtmWideipStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3), )
if mibBuilder.loadTexts: gtmWideipStatTable.setStatus('current')
gtmWideipStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipStatName"))
if mibBuilder.loadTexts: gtmWideipStatEntry.setStatus('current')
gtmWideipStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatName.setStatus('current')
gtmWideipStatRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatRequests.setStatus('current')
gtmWideipStatResolutions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatResolutions.setStatus('current')
gtmWideipStatPersisted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatPersisted.setStatus('current')
gtmWideipStatPreferred = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatPreferred.setStatus('current')
gtmWideipStatFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatFallback.setStatus('current')
gtmWideipStatDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatDropped.setStatus('current')
gtmWideipStatExplicitIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatExplicitIp.setStatus('deprecated')
gtmWideipStatReturnToDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatReturnToDns.setStatus('current')
gtmWideipStatReturnFromDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatReturnFromDns.setStatus('current')
gtmWideipStatCnameResolutions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatCnameResolutions.setStatus('current')
gtmWideipStatARequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatARequests.setStatus('current')
gtmWideipStatAaaaRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatAaaaRequests.setStatus('current')
gtmWideipStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatusNumber.setStatus('current')
gtmWideipStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2), )
if mibBuilder.loadTexts: gtmWideipStatusTable.setStatus('current')
gtmWideipStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusName"))
if mibBuilder.loadTexts: gtmWideipStatusEntry.setStatus('current')
gtmWideipStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatusName.setStatus('current')
gtmWideipStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatusAvailState.setStatus('current')
gtmWideipStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatusEnabledState.setStatus('current')
gtmWideipStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatusParentType.setStatus('deprecated')
gtmWideipStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatusDetailReason.setStatus('current')
gtmWideipAliasNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipAliasNumber.setStatus('current')
gtmWideipAliasTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 4, 2), )
if mibBuilder.loadTexts: gtmWideipAliasTable.setStatus('current')
gtmWideipAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipAliasWipName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipAliasName"))
if mibBuilder.loadTexts: gtmWideipAliasEntry.setStatus('current')
gtmWideipAliasWipName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipAliasWipName.setStatus('current')
gtmWideipAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 4, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipAliasName.setStatus('current')
gtmWideipPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPoolNumber.setStatus('current')
gtmWideipPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2), )
if mibBuilder.loadTexts: gtmWideipPoolTable.setStatus('current')
gtmWideipPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolWipName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolPoolName"))
if mibBuilder.loadTexts: gtmWideipPoolEntry.setStatus('current')
gtmWideipPoolWipName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPoolWipName.setStatus('current')
gtmWideipPoolPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPoolPoolName.setStatus('current')
gtmWideipPoolOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPoolOrder.setStatus('current')
gtmWideipPoolRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPoolRatio.setStatus('current')
gtmWideipRuleNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipRuleNumber.setStatus('current')
gtmWideipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6, 2), )
if mibBuilder.loadTexts: gtmWideipRuleTable.setStatus('current')
gtmWideipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipRuleWipName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipRuleRuleName"))
if mibBuilder.loadTexts: gtmWideipRuleEntry.setStatus('current')
gtmWideipRuleWipName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipRuleWipName.setStatus('current')
gtmWideipRuleRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipRuleRuleName.setStatus('current')
gtmWideipRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipRulePriority.setStatus('current')
gtmServerStat2ResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmServerStat2ResetStats.setStatus('current')
gtmServerStat2Number = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2Number.setStatus('current')
gtmServerStat2Table = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3), )
if mibBuilder.loadTexts: gtmServerStat2Table.setStatus('current')
gtmServerStat2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmServerStat2Name"))
if mibBuilder.loadTexts: gtmServerStat2Entry.setStatus('current')
gtmServerStat2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2Name.setStatus('current')
gtmServerStat2UnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2UnitId.setStatus('deprecated')
gtmServerStat2VsPicks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2VsPicks.setStatus('current')
gtmServerStat2CpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2CpuUsage.setStatus('current')
gtmServerStat2MemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2MemAvail.setStatus('current')
gtmServerStat2BitsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2BitsPerSecIn.setStatus('current')
gtmServerStat2BitsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2BitsPerSecOut.setStatus('current')
gtmServerStat2PktsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2PktsPerSecIn.setStatus('current')
gtmServerStat2PktsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2PktsPerSecOut.setStatus('current')
gtmServerStat2Connections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2Connections.setStatus('current')
gtmServerStat2ConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2ConnRate.setStatus('deprecated')
gtmProberPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolNumber.setStatus('current')
gtmProberPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1, 2), )
if mibBuilder.loadTexts: gtmProberPoolTable.setStatus('current')
gtmProberPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolName"))
if mibBuilder.loadTexts: gtmProberPoolEntry.setStatus('current')
gtmProberPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolName.setStatus('current')
gtmProberPoolLbMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6))).clone(namedValues=NamedValues(("roundrobin", 2), ("ga", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolLbMode.setStatus('current')
gtmProberPoolEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolEnabled.setStatus('current')
gtmProberPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmProberPoolStatResetStats.setStatus('current')
gtmProberPoolStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatNumber.setStatus('current')
gtmProberPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 3), )
if mibBuilder.loadTexts: gtmProberPoolStatTable.setStatus('current')
gtmProberPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatName"))
if mibBuilder.loadTexts: gtmProberPoolStatEntry.setStatus('current')
gtmProberPoolStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatName.setStatus('current')
gtmProberPoolStatTotalProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatTotalProbes.setStatus('current')
gtmProberPoolStatSuccessfulProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatSuccessfulProbes.setStatus('current')
gtmProberPoolStatFailedProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatFailedProbes.setStatus('current')
gtmProberPoolStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatusNumber.setStatus('current')
gtmProberPoolStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 2), )
if mibBuilder.loadTexts: gtmProberPoolStatusTable.setStatus('current')
gtmProberPoolStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatusName"))
if mibBuilder.loadTexts: gtmProberPoolStatusEntry.setStatus('current')
gtmProberPoolStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatusName.setStatus('current')
gtmProberPoolStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatusAvailState.setStatus('current')
gtmProberPoolStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatusEnabledState.setStatus('current')
gtmProberPoolStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatusDetailReason.setStatus('current')
gtmProberPoolMbrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrNumber.setStatus('current')
gtmProberPoolMbrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 2), )
if mibBuilder.loadTexts: gtmProberPoolMbrTable.setStatus('current')
gtmProberPoolMbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrServerName"))
if mibBuilder.loadTexts: gtmProberPoolMbrEntry.setStatus('current')
gtmProberPoolMbrPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrPoolName.setStatus('current')
gtmProberPoolMbrServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrServerName.setStatus('current')
gtmProberPoolMbrPmbrOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrPmbrOrder.setStatus('current')
gtmProberPoolMbrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrEnabled.setStatus('current')
gtmProberPoolMbrStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmProberPoolMbrStatResetStats.setStatus('current')
gtmProberPoolMbrStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatNumber.setStatus('current')
gtmProberPoolMbrStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3), )
if mibBuilder.loadTexts: gtmProberPoolMbrStatTable.setStatus('current')
gtmProberPoolMbrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatServerName"))
if mibBuilder.loadTexts: gtmProberPoolMbrStatEntry.setStatus('current')
gtmProberPoolMbrStatPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatPoolName.setStatus('current')
gtmProberPoolMbrStatServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatServerName.setStatus('current')
gtmProberPoolMbrStatTotalProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatTotalProbes.setStatus('current')
gtmProberPoolMbrStatSuccessfulProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatSuccessfulProbes.setStatus('current')
gtmProberPoolMbrStatFailedProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatFailedProbes.setStatus('current')
gtmProberPoolMbrStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatusNumber.setStatus('current')
gtmProberPoolMbrStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2), )
if mibBuilder.loadTexts: gtmProberPoolMbrStatusTable.setStatus('current')
gtmProberPoolMbrStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusServerName"))
if mibBuilder.loadTexts: gtmProberPoolMbrStatusEntry.setStatus('current')
gtmProberPoolMbrStatusPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatusPoolName.setStatus('current')
gtmProberPoolMbrStatusServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatusServerName.setStatus('current')
gtmProberPoolMbrStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatusAvailState.setStatus('current')
gtmProberPoolMbrStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatusEnabledState.setStatus('current')
gtmProberPoolMbrStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatusDetailReason.setStatus('current')
gtmAttr2Number = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2Number.setStatus('current')
gtmAttr2Table = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2), )
if mibBuilder.loadTexts: gtmAttr2Table.setStatus('current')
gtmAttr2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmAttr2Name"))
if mibBuilder.loadTexts: gtmAttr2Entry.setStatus('current')
gtmAttr2DumpTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DumpTopology.setStatus('current')
gtmAttr2CacheLdns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2CacheLdns.setStatus('current')
gtmAttr2AolAware = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2AolAware.setStatus('current')
gtmAttr2CheckStaticDepends = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2CheckStaticDepends.setStatus('current')
gtmAttr2CheckDynamicDepends = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2CheckDynamicDepends.setStatus('current')
gtmAttr2DrainRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DrainRequests.setStatus('current')
gtmAttr2EnableResetsRipeness = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2EnableResetsRipeness.setStatus('current')
gtmAttr2FbRespectDepends = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2FbRespectDepends.setStatus('current')
gtmAttr2FbRespectAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2FbRespectAcl.setStatus('deprecated')
gtmAttr2DefaultAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersist", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vssore", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DefaultAlternate.setStatus('current')
gtmAttr2DefaultFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersit", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vsscore", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DefaultFallback.setStatus('current')
gtmAttr2PersistMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2PersistMask.setStatus('deprecated')
gtmAttr2GtmSetsRecursion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2GtmSetsRecursion.setStatus('current')
gtmAttr2QosFactorLcs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorLcs.setStatus('current')
gtmAttr2QosFactorRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorRtt.setStatus('current')
gtmAttr2QosFactorHops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorHops.setStatus('current')
gtmAttr2QosFactorHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorHitRatio.setStatus('current')
gtmAttr2QosFactorPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorPacketRate.setStatus('current')
gtmAttr2QosFactorBps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorBps.setStatus('current')
gtmAttr2QosFactorVsCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorVsCapacity.setStatus('current')
gtmAttr2QosFactorTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorTopology.setStatus('current')
gtmAttr2QosFactorConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorConnRate.setStatus('deprecated')
gtmAttr2TimerRetryPathData = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TimerRetryPathData.setStatus('current')
gtmAttr2TimerGetAutoconfigData = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TimerGetAutoconfigData.setStatus('current')
gtmAttr2TimerPersistCache = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TimerPersistCache.setStatus('current')
gtmAttr2DefaultProbeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DefaultProbeLimit.setStatus('current')
gtmAttr2DownThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DownThreshold.setStatus('current')
gtmAttr2DownMultiple = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DownMultiple.setStatus('current')
gtmAttr2PathTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2PathTtl.setStatus('current')
gtmAttr2TraceTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TraceTtl.setStatus('current')
gtmAttr2LdnsDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LdnsDuration.setStatus('current')
gtmAttr2PathDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2PathDuration.setStatus('current')
gtmAttr2RttSampleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2RttSampleCount.setStatus('current')
gtmAttr2RttPacketLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2RttPacketLength.setStatus('current')
gtmAttr2RttTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2RttTimeout.setStatus('current')
gtmAttr2MaxMonReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2MaxMonReqs.setStatus('current')
gtmAttr2TraceroutePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TraceroutePort.setStatus('current')
gtmAttr2PathsNeverDie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2PathsNeverDie.setStatus('current')
gtmAttr2ProbeDisabledObjects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2ProbeDisabledObjects.setStatus('current')
gtmAttr2LinkLimitFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LinkLimitFactor.setStatus('current')
gtmAttr2OverLimitLinkLimitFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2OverLimitLinkLimitFactor.setStatus('current')
gtmAttr2LinkPrepaidFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LinkPrepaidFactor.setStatus('current')
gtmAttr2LinkCompensateInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LinkCompensateInbound.setStatus('current')
gtmAttr2LinkCompensateOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LinkCompensateOutbound.setStatus('current')
gtmAttr2LinkCompensationHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LinkCompensationHistory.setStatus('current')
gtmAttr2MaxLinkOverLimitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2MaxLinkOverLimitCount.setStatus('current')
gtmAttr2LowerBoundPctRow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LowerBoundPctRow.setStatus('deprecated')
gtmAttr2LowerBoundPctCol = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LowerBoundPctCol.setStatus('deprecated')
gtmAttr2Autoconf = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2Autoconf.setStatus('current')
gtmAttr2Autosync = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2Autosync.setStatus('current')
gtmAttr2SyncNamedConf = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2SyncNamedConf.setStatus('current')
gtmAttr2SyncGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 52), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2SyncGroup.setStatus('current')
gtmAttr2SyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2SyncTimeout.setStatus('current')
gtmAttr2SyncZonesTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2SyncZonesTimeout.setStatus('current')
gtmAttr2TimeTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TimeTolerance.setStatus('current')
gtmAttr2TopologyLongestMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TopologyLongestMatch.setStatus('current')
gtmAttr2TopologyAclThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TopologyAclThreshold.setStatus('deprecated')
gtmAttr2StaticPersistCidr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2StaticPersistCidr.setStatus('current')
gtmAttr2StaticPersistV6Cidr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2StaticPersistV6Cidr.setStatus('current')
gtmAttr2QosFactorVsScore = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorVsScore.setStatus('current')
gtmAttr2TimerSendKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TimerSendKeepAlive.setStatus('current')
gtmAttr2CertificateDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2CertificateDepth.setStatus('deprecated')
gtmAttr2MaxMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2MaxMemoryUsage.setStatus('deprecated')
gtmAttr2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 64), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2Name.setStatus('current')
gtmAttr2ForwardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2ForwardStatus.setStatus('current')
gtmDnssecZoneStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmDnssecZoneStatResetStats.setStatus('current')
gtmDnssecZoneStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatNumber.setStatus('current')
gtmDnssecZoneStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3), )
if mibBuilder.loadTexts: gtmDnssecZoneStatTable.setStatus('current')
gtmDnssecZoneStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1), ).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatName"))
if mibBuilder.loadTexts: gtmDnssecZoneStatEntry.setStatus('current')
gtmDnssecZoneStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatName.setStatus('current')
gtmDnssecZoneStatNsec3s = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatNsec3s.setStatus('current')
gtmDnssecZoneStatNsec3Nodata = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatNsec3Nodata.setStatus('current')
gtmDnssecZoneStatNsec3Nxdomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatNsec3Nxdomain.setStatus('current')
gtmDnssecZoneStatNsec3Referral = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatNsec3Referral.setStatus('current')
gtmDnssecZoneStatNsec3Resalt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatNsec3Resalt.setStatus('current')
gtmDnssecZoneStatDnssecResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatDnssecResponses.setStatus('current')
gtmDnssecZoneStatDnssecDnskeyQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatDnssecDnskeyQueries.setStatus('current')
gtmDnssecZoneStatDnssecNsec3paramQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatDnssecNsec3paramQueries.setStatus('current')
gtmDnssecZoneStatDnssecDsQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatDnssecDsQueries.setStatus('current')
gtmDnssecZoneStatSigCryptoFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatSigCryptoFailed.setStatus('current')
gtmDnssecZoneStatSigSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatSigSuccess.setStatus('current')
gtmDnssecZoneStatSigFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatSigFailed.setStatus('current')
gtmDnssecZoneStatSigRrsetFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatSigRrsetFailed.setStatus('current')
gtmDnssecZoneStatConnectFlowFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatConnectFlowFailed.setStatus('current')
gtmDnssecZoneStatTowireFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatTowireFailed.setStatus('current')
gtmDnssecZoneStatAxfrQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatAxfrQueries.setStatus('current')
gtmDnssecZoneStatIxfrQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatIxfrQueries.setStatus('current')
gtmDnssecZoneStatXfrStarts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrStarts.setStatus('current')
gtmDnssecZoneStatXfrCompletes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrCompletes.setStatus('current')
gtmDnssecZoneStatXfrMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrMsgs.setStatus('current')
gtmDnssecZoneStatXfrMasterMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrMasterMsgs.setStatus('current')
gtmDnssecZoneStatXfrResponseAverageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrResponseAverageSize.setStatus('current')
gtmDnssecZoneStatXfrSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrSerial.setStatus('current')
gtmDnssecZoneStatXfrMasterSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 14, 1, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecZoneStatXfrMasterSerial.setStatus('current')
gtmDnssecStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmDnssecStatResetStats.setStatus('current')
gtmDnssecStatNsec3s = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatNsec3s.setStatus('current')
gtmDnssecStatNsec3Nodata = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatNsec3Nodata.setStatus('current')
gtmDnssecStatNsec3Nxdomain = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatNsec3Nxdomain.setStatus('current')
gtmDnssecStatNsec3Referral = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatNsec3Referral.setStatus('current')
gtmDnssecStatNsec3Resalt = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatNsec3Resalt.setStatus('current')
gtmDnssecStatDnssecResponses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatDnssecResponses.setStatus('current')
gtmDnssecStatDnssecDnskeyQueries = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatDnssecDnskeyQueries.setStatus('current')
gtmDnssecStatDnssecNsec3paramQueries = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatDnssecNsec3paramQueries.setStatus('current')
gtmDnssecStatDnssecDsQueries = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatDnssecDsQueries.setStatus('current')
gtmDnssecStatSigCryptoFailed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatSigCryptoFailed.setStatus('current')
gtmDnssecStatSigSuccess = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatSigSuccess.setStatus('current')
gtmDnssecStatSigFailed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatSigFailed.setStatus('current')
gtmDnssecStatSigRrsetFailed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatSigRrsetFailed.setStatus('current')
gtmDnssecStatConnectFlowFailed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatConnectFlowFailed.setStatus('current')
gtmDnssecStatTowireFailed = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatTowireFailed.setStatus('current')
gtmDnssecStatAxfrQueries = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatAxfrQueries.setStatus('current')
gtmDnssecStatIxfrQueries = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatIxfrQueries.setStatus('current')
gtmDnssecStatXfrStarts = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatXfrStarts.setStatus('current')
gtmDnssecStatXfrCompletes = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatXfrCompletes.setStatus('current')
gtmDnssecStatXfrMsgs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatXfrMsgs.setStatus('current')
gtmDnssecStatXfrMasterMsgs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatXfrMasterMsgs.setStatus('current')
gtmDnssecStatXfrResponseAverageSize = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatXfrResponseAverageSize.setStatus('current')
gtmDnssecStatXfrSerial = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatXfrSerial.setStatus('current')
gtmDnssecStatXfrMasterSerial = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 2, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDnssecStatXfrMasterSerial.setStatus('current')
bigipGlobalTMCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3375, 2, 5, 1, 3)).setObjects(("F5-BIGIP-GLOBAL-MIB", "bigipGlobalTMGroups"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bigipGlobalTMCompliance = bigipGlobalTMCompliance.setStatus('current')
bigipGlobalTMGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3))
gtmAttrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 1)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmAttrDumpTopology"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrCacheLdns"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrAolAware"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrCheckStaticDepends"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrCheckDynamicDepends"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrDrainRequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrEnableResetsRipeness"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrFbRespectDepends"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrFbRespectAcl"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrDefaultAlternate"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrDefaultFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrPersistMask"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrGtmSetsRecursion"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorLcs"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorRtt"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorHops"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorHitRatio"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorPacketRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorBps"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorVsCapacity"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorTopology"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorConnRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTimerRetryPathData"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTimerGetAutoconfigData"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTimerPersistCache"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrDefaultProbeLimit"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrDownThreshold"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrDownMultiple"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrPathTtl"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTraceTtl"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLdnsDuration"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrPathDuration"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrRttSampleCount"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrRttPacketLength"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrRttTimeout"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrMaxMonReqs"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTraceroutePort"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrPathsNeverDie"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrProbeDisabledObjects"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLinkLimitFactor"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrOverLimitLinkLimitFactor"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLinkPrepaidFactor"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLinkCompensateInbound"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLinkCompensateOutbound"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLinkCompensationHistory"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrMaxLinkOverLimitCount"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLowerBoundPctRow"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLowerBoundPctCol"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrAutoconf"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrAutosync"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrSyncNamedConf"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrSyncGroup"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrSyncTimeout"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrSyncZonesTimeout"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTimeTolerance"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTopologyLongestMatch"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTopologyAclThreshold"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrStaticPersistCidr"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrStaticPersistV6Cidr"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorVsScore"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTimerSendKeepAlive"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrCertificateDepth"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrMaxMemoryUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmAttrGroup = gtmAttrGroup.setStatus('current')
gtmGlobalLdnsProbeProtoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 2)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmGlobalLdnsProbeProtoNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmGlobalLdnsProbeProtoIndex"), ("F5-BIGIP-GLOBAL-MIB", "gtmGlobalLdnsProbeProtoType"), ("F5-BIGIP-GLOBAL-MIB", "gtmGlobalLdnsProbeProtoName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmGlobalLdnsProbeProtoGroup = gtmGlobalLdnsProbeProtoGroup.setStatus('current')
gtmStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 3)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatRequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatResolutions"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatPersisted"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatPreferred"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatAlternate"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatDropped"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatExplicitIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatReturnToDns"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatReconnects"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatBytesReceived"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatBytesSent"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatNumBacklogged"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatBytesDropped"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatLdnses"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatPaths"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatReturnFromDns"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatCnameResolutions"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatARequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatAaaaRequests"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmStatGroup = gtmStatGroup.setStatus('current')
gtmAppGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 4)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmAppNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppName"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppPersist"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppTtlPersist"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppAvailability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmAppGroup = gtmAppGroup.setStatus('current')
gtmAppStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 5)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmAppStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppStatusDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmAppStatusGroup = gtmAppStatusGroup.setStatus('current')
gtmAppContStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 6)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatAppName"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatType"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatNumAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmAppContStatGroup = gtmAppContStatGroup.setStatus('current')
gtmAppContDisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 7)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmAppContDisNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContDisAppName"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContDisType"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContDisName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmAppContDisGroup = gtmAppContDisGroup.setStatus('current')
gtmDcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 8)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmDcNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcName"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcLocation"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcContact"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmDcGroup = gtmDcGroup.setStatus('current')
gtmDcStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 9)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmDcStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatBitsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatBitsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatPktsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatPktsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatConnections"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatConnRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmDcStatGroup = gtmDcStatGroup.setStatus('current')
gtmDcStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 10)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmDcStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatusDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmDcStatusGroup = gtmDcStatusGroup.setStatus('current')
gtmIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 11)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmIpNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpLinkName"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpUnitId"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpIpXlatedType"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpIpXlated"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpDeviceName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmIpGroup = gtmIpGroup.setStatus('current')
gtmLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 12)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmLinkNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkName"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkDcName"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkIspName"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkUplinkAddressType"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkUplinkAddress"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkMonitorRule"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkDuplex"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkRatio"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkPrepaid"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkPrepaidInDollars"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkWeightingType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmLinkGroup = gtmLinkGroup.setStatus('current')
gtmLinkCostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 13)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmLinkCostNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkCostName"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkCostIndex"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkCostUptoBps"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkCostDollarsPerMbps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmLinkCostGroup = gtmLinkCostGroup.setStatus('current')
gtmLinkStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 14)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateNode"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateNodeIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateNodeOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateVses"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateVsesIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateVsesOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatLcsIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatLcsOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatPaths"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmLinkStatGroup = gtmLinkStatGroup.setStatus('current')
gtmLinkStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 15)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmLinkStatusGroup = gtmLinkStatusGroup.setStatus('current')
gtmPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 16)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmPoolNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolTtl"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolVerifyMember"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolDynamicRatio"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolAnswersToReturn"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLbMode"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolAlternate"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolManualResume"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffRtt"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffHops"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffTopology"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffHitRatio"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffPacketRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffVsCapacity"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffBps"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffLcs"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffConnRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolFallbackIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolFallbackIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolCname"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMonitorRule"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffVsScore"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolFallbackIpv6Type"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolFallbackIpv6"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmPoolGroup = gtmPoolGroup.setStatus('current')
gtmPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 17)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatPreferred"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatAlternate"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatDropped"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatExplicitIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatReturnToDns"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatReturnFromDns"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatCnameResolutions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmPoolStatGroup = gtmPoolStatGroup.setStatus('current')
gtmPoolMbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 18)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrOrder"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrMonitorRule"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrRatio"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrServerName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmPoolMbrGroup = gtmPoolMbrGroup.setStatus('current')
gtmPoolStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 19)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmPoolStatusGroup = gtmPoolStatusGroup.setStatus('current')
gtmPoolMbrDepsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 20)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsVipType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsVip"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsVport"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsDependServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsDependVsName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmPoolMbrDepsGroup = gtmPoolMbrDepsGroup.setStatus('current')
gtmPoolMbrStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 21)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatPreferred"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatAlternate"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatVsName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmPoolMbrStatGroup = gtmPoolMbrStatGroup.setStatus('current')
gtmPoolMbrStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 22)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusDetailReason"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusServerName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmPoolMbrStatusGroup = gtmPoolMbrStatusGroup.setStatus('current')
gtmRegionEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 23)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmRegionEntryNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegionEntryName"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegionEntryRegionDbType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmRegionEntryGroup = gtmRegionEntryGroup.setStatus('current')
gtmRegItemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 24)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmRegItemNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegItemRegionDbType"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegItemRegionName"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegItemType"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegItemNegate"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegItemRegEntry"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmRegItemGroup = gtmRegItemGroup.setStatus('current')
gtmRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 25)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmRuleNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleName"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleDefinition"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleConfigSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmRuleGroup = gtmRuleGroup.setStatus('current')
gtmRuleEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 26)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventName"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventEventType"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventPriority"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventScript"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmRuleEventGroup = gtmRuleEventGroup.setStatus('current')
gtmRuleEventStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 27)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatEventType"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatPriority"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatFailures"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatAborts"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatTotalExecutions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmRuleEventStatGroup = gtmRuleEventStatGroup.setStatus('current')
gtmServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 28)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmServerNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerDcName"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerType"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerProberType"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerProber"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerMonitorRule"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerAllowSvcChk"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerAllowPath"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerAllowSnmp"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerAutoconfState"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLinkAutoconfState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmServerGroup = gtmServerGroup.setStatus('current')
gtmServerStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 29)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmServerStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatUnitId"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatVsPicks"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatBitsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatBitsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatPktsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatPktsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatConnections"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatConnRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmServerStatGroup = gtmServerStatGroup.setStatus('current')
gtmServerStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 30)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmServerStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatusDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmServerStatusGroup = gtmServerStatusGroup.setStatus('current')
gtmTopItemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 31)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmTopItemNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemLdnsType"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemLdnsNegate"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemLdnsEntry"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemServerType"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemServerNegate"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemServerEntry"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemWeight"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemOrder"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmTopItemGroup = gtmTopItemGroup.setStatus('current')
gtmVsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 32)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmVsNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsIpXlatedType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsIpXlated"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsPortXlated"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsMonitorRule"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLinkName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmVsGroup = gtmVsGroup.setStatus('current')
gtmVsDepsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 33)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsVipType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsVip"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsVport"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsDependServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsDependVsName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmVsDepsGroup = gtmVsDepsGroup.setStatus('current')
gtmVsStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 34)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmVsStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatBitsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatBitsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatPktsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatPktsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatConnections"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatConnRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatVsScore"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatServerName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmVsStatGroup = gtmVsStatGroup.setStatus('current')
gtmVsStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 35)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusDetailReason"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusServerName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmVsStatusGroup = gtmVsStatusGroup.setStatus('current')
gtmWideipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 36)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmWideipNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipPersist"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipTtlPersist"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipLbmodePool"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipApplication"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipLastResortPool"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipIpv6Noerror"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipLoadBalancingDecisionLogVerbosity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmWideipGroup = gtmWideipGroup.setStatus('current')
gtmWideipStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 37)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatRequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatResolutions"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatPersisted"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatPreferred"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatDropped"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatExplicitIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatReturnToDns"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatReturnFromDns"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatCnameResolutions"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatARequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatAaaaRequests"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmWideipStatGroup = gtmWideipStatGroup.setStatus('current')
gtmWideipStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 38)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmWideipStatusGroup = gtmWideipStatusGroup.setStatus('current')
gtmWideipAliasGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 39)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmWideipAliasNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipAliasWipName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipAliasName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmWideipAliasGroup = gtmWideipAliasGroup.setStatus('current')
gtmWideipPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 40)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolWipName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolOrder"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolRatio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmWideipPoolGroup = gtmWideipPoolGroup.setStatus('current')
gtmWideipRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 41)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmWideipRuleNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipRuleWipName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipRuleRuleName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipRulePriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmWideipRuleGroup = gtmWideipRuleGroup.setStatus('current')
gtmServerStat2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 42)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2Number"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2Name"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2UnitId"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2VsPicks"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2CpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2MemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2BitsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2BitsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2PktsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2PktsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2Connections"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2ConnRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmServerStat2Group = gtmServerStat2Group.setStatus('current')
gtmProberPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 43)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolLbMode"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmProberPoolGroup = gtmProberPoolGroup.setStatus('current')
gtmProberPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 44)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatTotalProbes"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatSuccessfulProbes"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatFailedProbes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmProberPoolStatGroup = gtmProberPoolStatGroup.setStatus('current')
gtmProberPoolStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 45)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatusDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmProberPoolStatusGroup = gtmProberPoolStatusGroup.setStatus('current')
gtmProberPoolMbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 46)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrPmbrOrder"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmProberPoolMbrGroup = gtmProberPoolMbrGroup.setStatus('current')
gtmProberPoolMbrStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 47)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatTotalProbes"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatSuccessfulProbes"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatFailedProbes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmProberPoolMbrStatGroup = gtmProberPoolMbrStatGroup.setStatus('current')
gtmProberPoolMbrStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 48)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmProberPoolMbrStatusGroup = gtmProberPoolMbrStatusGroup.setStatus('current')
gtmAttr2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 49)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmAttr2Number"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DumpTopology"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2CacheLdns"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2AolAware"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2CheckStaticDepends"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2CheckDynamicDepends"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DrainRequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2EnableResetsRipeness"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2FbRespectDepends"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2FbRespectAcl"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DefaultAlternate"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DefaultFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2PersistMask"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2GtmSetsRecursion"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorLcs"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorRtt"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorHops"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorHitRatio"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorPacketRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorBps"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorVsCapacity"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorTopology"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorConnRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TimerRetryPathData"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TimerGetAutoconfigData"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TimerPersistCache"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DefaultProbeLimit"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DownThreshold"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DownMultiple"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2PathTtl"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TraceTtl"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LdnsDuration"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2PathDuration"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2RttSampleCount"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2RttPacketLength"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2RttTimeout"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2MaxMonReqs"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TraceroutePort"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2PathsNeverDie"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2ProbeDisabledObjects"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LinkLimitFactor"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2OverLimitLinkLimitFactor"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LinkPrepaidFactor"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LinkCompensateInbound"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LinkCompensateOutbound"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LinkCompensationHistory"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2MaxLinkOverLimitCount"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LowerBoundPctRow"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LowerBoundPctCol"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2Autoconf"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2Autosync"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2SyncNamedConf"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2SyncGroup"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2SyncTimeout"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2SyncZonesTimeout"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TimeTolerance"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TopologyLongestMatch"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TopologyAclThreshold"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2StaticPersistCidr"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2StaticPersistV6Cidr"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorVsScore"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TimerSendKeepAlive"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2CertificateDepth"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2MaxMemoryUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2Name"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2ForwardStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmAttr2Group = gtmAttr2Group.setStatus('current')
gtmDnssecZoneStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 50)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatNsec3s"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatNsec3Nodata"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatNsec3Nxdomain"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatNsec3Referral"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatNsec3Resalt"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatDnssecResponses"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatDnssecDnskeyQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatDnssecNsec3paramQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatDnssecDsQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatSigCryptoFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatSigSuccess"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatSigFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatSigRrsetFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatConnectFlowFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatTowireFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatAxfrQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatIxfrQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatXfrStarts"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatXfrCompletes"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatXfrMsgs"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatXfrMasterMsgs"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatXfrResponseAverageSize"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatXfrSerial"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecZoneStatXfrMasterSerial"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmDnssecZoneStatGroup = gtmDnssecZoneStatGroup.setStatus('current')
gtmDnssecStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 51)).setObjects(("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatNsec3s"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatNsec3Nodata"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatNsec3Nxdomain"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatNsec3Referral"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatNsec3Resalt"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatDnssecResponses"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatDnssecDnskeyQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatDnssecNsec3paramQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatDnssecDsQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatSigCryptoFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatSigSuccess"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatSigFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatSigRrsetFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatConnectFlowFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatTowireFailed"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatAxfrQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatIxfrQueries"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatXfrStarts"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatXfrCompletes"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatXfrMsgs"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatXfrMasterMsgs"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatXfrResponseAverageSize"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatXfrSerial"), ("F5-BIGIP-GLOBAL-MIB", "gtmDnssecStatXfrMasterSerial"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtmDnssecStatGroup = gtmDnssecStatGroup.setStatus('current')
mibBuilder.exportSymbols("F5-BIGIP-GLOBAL-MIB", gtmPoolLbMode=gtmPoolLbMode, gtmLinkLimitInConnPerSecEnabled=gtmLinkLimitInConnPerSecEnabled, gtmVsDepsVipType=gtmVsDepsVipType, gtmVsStatIpType=gtmVsStatIpType, gtmProberPoolMbrStatusTable=gtmProberPoolMbrStatusTable, gtmPoolMbrStatusAvailState=gtmPoolMbrStatusAvailState, gtmWideipPoolEntry=gtmWideipPoolEntry, gtmAttr2LinkCompensationHistory=gtmAttr2LinkCompensationHistory, gtmDnssecStatTowireFailed=gtmDnssecStatTowireFailed, gtmDcStatTable=gtmDcStatTable, gtmServerStat2Entry=gtmServerStat2Entry, gtmRegItemNumber=gtmRegItemNumber, gtmDnssecZoneStatConnectFlowFailed=gtmDnssecZoneStatConnectFlowFailed, gtmAttrPathsNeverDie=gtmAttrPathsNeverDie, gtmLinkLimitInConnEnabled=gtmLinkLimitInConnEnabled, gtmLinkLimitTotalCpuUsageEnabled=gtmLinkLimitTotalCpuUsageEnabled, gtmPoolManualResume=gtmPoolManualResume, gtmPoolTable=gtmPoolTable, gtmAttr2DrainRequests=gtmAttr2DrainRequests, gtmProberPoolMbrStatusNumber=gtmProberPoolMbrStatusNumber, gtmGlobalStats=gtmGlobalStats, gtmServerLimitCpuUsageEnabled=gtmServerLimitCpuUsageEnabled, gtmAttrQosFactorVsCapacity=gtmAttrQosFactorVsCapacity, gtmPoolMbrStatusDetailReason=gtmPoolMbrStatusDetailReason, gtmDnssecZoneStatAxfrQueries=gtmDnssecZoneStatAxfrQueries, gtmProberPoolName=gtmProberPoolName, gtmProberPoolStatusGroup=gtmProberPoolStatusGroup, gtmAttrGtmSetsRecursion=gtmAttrGtmSetsRecursion, gtmPoolQosCoeffLcs=gtmPoolQosCoeffLcs, gtmAttr2ProbeDisabledObjects=gtmAttr2ProbeDisabledObjects, gtmAttrAolAware=gtmAttrAolAware, gtmServerStat2=gtmServerStat2, gtmPoolMonitorRule=gtmPoolMonitorRule, gtmAttr2QosFactorHitRatio=gtmAttr2QosFactorHitRatio, gtmAttr2QosFactorTopology=gtmAttr2QosFactorTopology, gtmAppStatusName=gtmAppStatusName, gtmAttrDefaultAlternate=gtmAttrDefaultAlternate, gtmAttrQosFactorVsScore=gtmAttrQosFactorVsScore, gtmPoolLimitPktsPerSec=gtmPoolLimitPktsPerSec, gtmProberPoolMbrGroup=gtmProberPoolMbrGroup, gtmVsLinkName=gtmVsLinkName, gtmAttrPersistMask=gtmAttrPersistMask, gtmPool=gtmPool, gtmAttr2LinkCompensateOutbound=gtmAttr2LinkCompensateOutbound, gtmLinkEnabled=gtmLinkEnabled, gtmDnssecStatDnssecDnskeyQueries=gtmDnssecStatDnssecDnskeyQueries, gtmApplications=gtmApplications, gtmDcStatBitsPerSecOut=gtmDcStatBitsPerSecOut, gtmServerStat2Connections=gtmServerStat2Connections, gtmIpIpXlatedType=gtmIpIpXlatedType, gtmDnssecZoneStatNumber=gtmDnssecZoneStatNumber, gtmAttr2SyncTimeout=gtmAttr2SyncTimeout, gtmAppContStatEntry=gtmAppContStatEntry, gtmWideipStatCnameResolutions=gtmWideipStatCnameResolutions, gtmAttr2LinkPrepaidFactor=gtmAttr2LinkPrepaidFactor, gtmPoolMbrDepsEntry=gtmPoolMbrDepsEntry, gtmLinkLimitTotalCpuUsage=gtmLinkLimitTotalCpuUsage, gtmDcStatusNumber=gtmDcStatusNumber, gtmPoolEntry=gtmPoolEntry, gtmVsStatVsScore=gtmVsStatVsScore, gtmPoolMbrStatFallback=gtmPoolMbrStatFallback, gtmPoolStatusDetailReason=gtmPoolStatusDetailReason, gtmAttr2DefaultProbeLimit=gtmAttr2DefaultProbeLimit, gtmDcStatusGroup=gtmDcStatusGroup, gtmRegionEntry=gtmRegionEntry, gtmProberPoolMbrStatPoolName=gtmProberPoolMbrStatPoolName, gtmDnssecZoneStatSigRrsetFailed=gtmDnssecZoneStatSigRrsetFailed, gtmLinkLimitTotalMemAvail=gtmLinkLimitTotalMemAvail, gtmLinkStat=gtmLinkStat, gtmLinkLimitTotalPktsPerSecEnabled=gtmLinkLimitTotalPktsPerSecEnabled, gtmLinkStatusEnabledState=gtmLinkStatusEnabledState, gtmAttr2TimerGetAutoconfigData=gtmAttr2TimerGetAutoconfigData, gtmVsDepsGroup=gtmVsDepsGroup, gtmStatLdnses=gtmStatLdnses, gtmAttrStaticPersistV6Cidr=gtmAttrStaticPersistV6Cidr, gtmPoolLimitBitsPerSecEnabled=gtmPoolLimitBitsPerSecEnabled, gtmAttr2CertificateDepth=gtmAttr2CertificateDepth, gtmIpTable=gtmIpTable, gtmVsIpType=gtmVsIpType, gtmWideipApplication=gtmWideipApplication, gtmPoolMbrDepsVipType=gtmPoolMbrDepsVipType, gtmDnssecStatAxfrQueries=gtmDnssecStatAxfrQueries, gtmAttrTraceTtl=gtmAttrTraceTtl, gtmProberPoolMemberStat=gtmProberPoolMemberStat, gtmStatNumBacklogged=gtmStatNumBacklogged, gtmStatFallback=gtmStatFallback, gtmVsStatConnections=gtmVsStatConnections, gtmPoolStatusEnabledState=gtmPoolStatusEnabledState, gtmTopItemServerNegate=gtmTopItemServerNegate, gtmLinkLimitTotalConnPerSec=gtmLinkLimitTotalConnPerSec, gtmProberPoolMbrServerName=gtmProberPoolMbrServerName, gtmAttr2TopologyAclThreshold=gtmAttr2TopologyAclThreshold, gtmRegionEntryGroup=gtmRegionEntryGroup, gtmGlobalLdnsProbeProtoEntry=gtmGlobalLdnsProbeProtoEntry, gtmIpIpType=gtmIpIpType, gtmPoolMbrDepsDependServerName=gtmPoolMbrDepsDependServerName, gtmGlobalAttr=gtmGlobalAttr, gtmAttrTopologyLongestMatch=gtmAttrTopologyLongestMatch, gtmPoolMbrStatusEnabledState=gtmPoolMbrStatusEnabledState, gtmLinkEntry=gtmLinkEntry, gtmServerStat2Number=gtmServerStat2Number, gtmPoolStatusTable=gtmPoolStatusTable, gtmAppStatusGroup=gtmAppStatusGroup, gtmWideipStatTable=gtmWideipStatTable, gtmAttr2CheckStaticDepends=gtmAttr2CheckStaticDepends, gtmStatAlternate=gtmStatAlternate, gtmPoolGroup=gtmPoolGroup, gtmLinkStatLcsIn=gtmLinkStatLcsIn, gtmAppStatusParentType=gtmAppStatusParentType, gtmWideipStatExplicitIp=gtmWideipStatExplicitIp, gtmWideipRuleRuleName=gtmWideipRuleRuleName, gtmRegionEntryName=gtmRegionEntryName, gtmAppAvailability=gtmAppAvailability, gtmProberPoolMbrStatEntry=gtmProberPoolMbrStatEntry, gtmLinkWeightingType=gtmLinkWeightingType, gtmLinkLimitTotalMemAvailEnabled=gtmLinkLimitTotalMemAvailEnabled, gtmPoolFallbackIpv6Type=gtmPoolFallbackIpv6Type, gtmPoolMbrStatPreferred=gtmPoolMbrStatPreferred, gtmPoolMbrDepsIp=gtmPoolMbrDepsIp, gtmPoolFallbackIpv6=gtmPoolFallbackIpv6, gtmDcGroup=gtmDcGroup, gtmRegItemType=gtmRegItemType, gtmIpUnitId=gtmIpUnitId, gtmIpEntry=gtmIpEntry, gtmPoolCname=gtmPoolCname, gtmPoolMbrPort=gtmPoolMbrPort, gtmServerAllowSnmp=gtmServerAllowSnmp, gtmVsStatusNumber=gtmVsStatusNumber, gtmWideipRuleGroup=gtmWideipRuleGroup, gtmAttrFbRespectDepends=gtmAttrFbRespectDepends, gtmPoolMbrStatusPort=gtmPoolMbrStatusPort, gtmRegItemNegate=gtmRegItemNegate, gtmProberPoolStatTable=gtmProberPoolStatTable, gtmLinkStatRateOut=gtmLinkStatRateOut, gtmServerStatusNumber=gtmServerStatusNumber, gtmVsStatusServerName=gtmVsStatusServerName, gtmWideipAliasName=gtmWideipAliasName, gtmAppStatusDetailReason=gtmAppStatusDetailReason, gtmVsStatusEnabledState=gtmVsStatusEnabledState, gtmWideipRuleWipName=gtmWideipRuleWipName, gtmVsEntry=gtmVsEntry, gtmProberPoolMbrStatFailedProbes=gtmProberPoolMbrStatFailedProbes, gtmAttrCacheLdns=gtmAttrCacheLdns, gtmDnssecStatXfrMasterSerial=gtmDnssecStatXfrMasterSerial, gtmAppEntry=gtmAppEntry, gtmLinkStatRateVsesOut=gtmLinkStatRateVsesOut, gtmServerStatUnitId=gtmServerStatUnitId, gtmDcContact=gtmDcContact, gtmProberPoolMbrStatusPoolName=gtmProberPoolMbrStatusPoolName, gtmProberPoolMbrTable=gtmProberPoolMbrTable, gtmAttrGroup=gtmAttrGroup, gtmLinkLimitOutBitsPerSec=gtmLinkLimitOutBitsPerSec, gtmDnssecZoneStatName=gtmDnssecZoneStatName, gtmRuleConfigSource=gtmRuleConfigSource, gtmDcEntry=gtmDcEntry, gtmServerLimitMemAvailEnabled=gtmServerLimitMemAvailEnabled, gtmWideipAliasEntry=gtmWideipAliasEntry, gtmProberPoolStatusNumber=gtmProberPoolStatusNumber, gtmWideipName=gtmWideipName, gtmPoolQosCoeffHops=gtmPoolQosCoeffHops, gtmAttr2MaxMonReqs=gtmAttr2MaxMonReqs, gtmLinkLimitOutMemAvail=gtmLinkLimitOutMemAvail, gtmAttr2MaxMemoryUsage=gtmAttr2MaxMemoryUsage, gtmGlobalDnssecStat=gtmGlobalDnssecStat, gtmLinkDcName=gtmLinkDcName, gtmAttr2LinkLimitFactor=gtmAttr2LinkLimitFactor, gtmPoolMbrDepsPort=gtmPoolMbrDepsPort, gtmProberPoolStatEntry=gtmProberPoolStatEntry, gtmRuleEvent=gtmRuleEvent, gtmPoolMbrEnabled=gtmPoolMbrEnabled, gtmVsLimitConn=gtmVsLimitConn, gtmPoolMbrDepsIpType=gtmPoolMbrDepsIpType, gtmDnssecStatResetStats=gtmDnssecStatResetStats, gtmLinkStatusNumber=gtmLinkStatusNumber, gtmAttrMaxMemoryUsage=gtmAttrMaxMemoryUsage, gtmVsDepsVsName=gtmVsDepsVsName, gtmDnssecZoneStatEntry=gtmDnssecZoneStatEntry, gtmProberPoolMember=gtmProberPoolMember, gtmLinkCostEntry=gtmLinkCostEntry, gtmAttr2TimerPersistCache=gtmAttr2TimerPersistCache, gtmAttrTimerPersistCache=gtmAttrTimerPersistCache, gtmPools=gtmPools, gtmDnssecZoneStatTable=gtmDnssecZoneStatTable, gtmVsDepsVport=gtmVsDepsVport, gtmGlobalLdnsProbeProtoIndex=gtmGlobalLdnsProbeProtoIndex, gtmDnssecZoneStat=gtmDnssecZoneStat, gtmDnssecZoneStatXfrMasterMsgs=gtmDnssecZoneStatXfrMasterMsgs, gtmPoolDynamicRatio=gtmPoolDynamicRatio, gtmAttrEnableResetsRipeness=gtmAttrEnableResetsRipeness, gtmProberPoolTable=gtmProberPoolTable, gtmDnssecZoneStatSigCryptoFailed=gtmDnssecZoneStatSigCryptoFailed, gtmPoolMbrStatPoolName=gtmPoolMbrStatPoolName, gtmVsStatPort=gtmVsStatPort, gtmProberPoolStatusTable=gtmProberPoolStatusTable, gtmProberPoolMbrPmbrOrder=gtmProberPoolMbrPmbrOrder, gtmPoolLimitPktsPerSecEnabled=gtmPoolLimitPktsPerSecEnabled, gtmPoolStatusName=gtmPoolStatusName, gtmPoolMbrStatusNumber=gtmPoolMbrStatusNumber, gtmRuleEventStatTotalExecutions=gtmRuleEventStatTotalExecutions, gtmPoolMbrLimitConnPerSec=gtmPoolMbrLimitConnPerSec, gtmAttr2StaticPersistCidr=gtmAttr2StaticPersistCidr, gtmAttr2SyncGroup=gtmAttr2SyncGroup, gtmProberPoolMbrNumber=gtmProberPoolMbrNumber, gtmAttrQosFactorHitRatio=gtmAttrQosFactorHitRatio, gtmPoolMbrLimitConnEnabled=gtmPoolMbrLimitConnEnabled, gtmStatResolutions=gtmStatResolutions, gtmAttrTraceroutePort=gtmAttrTraceroutePort, gtmPoolMbrStatGroup=gtmPoolMbrStatGroup, gtmAppStatusNumber=gtmAppStatusNumber, gtmTopItemOrder=gtmTopItemOrder, gtmLinkPrepaid=gtmLinkPrepaid, gtmWideipRule=gtmWideipRule, gtmAttr2EnableResetsRipeness=gtmAttr2EnableResetsRipeness, gtmLinkLimitOutMemAvailEnabled=gtmLinkLimitOutMemAvailEnabled, gtmLinkLimitTotalPktsPerSec=gtmLinkLimitTotalPktsPerSec, gtmStatRequests=gtmStatRequests, gtmAppContStatType=gtmAppContStatType, gtmAttrDefaultProbeLimit=gtmAttrDefaultProbeLimit, gtmAttrSyncNamedConf=gtmAttrSyncNamedConf, gtmPoolMbrStatVsName=gtmPoolMbrStatVsName, gtmVsStatusIpType=gtmVsStatusIpType, gtmLinkStatusParentType=gtmLinkStatusParentType, gtmPoolMbrTable=gtmPoolMbrTable, gtmVsDepsEntry=gtmVsDepsEntry, gtmRuleEntry=gtmRuleEntry, gtmRuleEventTable=gtmRuleEventTable, gtmPoolQosCoeffVsCapacity=gtmPoolQosCoeffVsCapacity, gtmAttr2TimerSendKeepAlive=gtmAttr2TimerSendKeepAlive, gtmLinkUplinkAddressType=gtmLinkUplinkAddressType, gtmPoolMbrStatIpType=gtmPoolMbrStatIpType, gtmAppGroup=gtmAppGroup, gtmLinkLimitTotalConnPerSecEnabled=gtmLinkLimitTotalConnPerSecEnabled, gtmVsLimitConnPerSec=gtmVsLimitConnPerSec, gtmLinkStatNumber=gtmLinkStatNumber, gtmWideipStatusDetailReason=gtmWideipStatusDetailReason, gtmStatBytesReceived=gtmStatBytesReceived, gtmVsStatPktsPerSecIn=gtmVsStatPktsPerSecIn, gtmWideipTable=gtmWideipTable, gtmServerStatEntry=gtmServerStatEntry, gtmVirtualServDepends=gtmVirtualServDepends, gtmProberPoolStatName=gtmProberPoolStatName, gtmPoolMbrEntry=gtmPoolMbrEntry, gtmPoolStatAlternate=gtmPoolStatAlternate, gtmPoolMbrDepsTable=gtmPoolMbrDepsTable, gtmDnssecStatXfrMsgs=gtmDnssecStatXfrMsgs, gtmDcStatusParentType=gtmDcStatusParentType, gtmTopItemServerEntry=gtmTopItemServerEntry, gtmAttrFbRespectAcl=gtmAttrFbRespectAcl, gtmAppContDisName=gtmAppContDisName, gtmPoolLimitConn=gtmPoolLimitConn, gtmServerLimitBitsPerSec=gtmServerLimitBitsPerSec, gtmServerLimitConnPerSec=gtmServerLimitConnPerSec, gtmPoolMember=gtmPoolMember, gtmAttrLowerBoundPctRow=gtmAttrLowerBoundPctRow)
mibBuilder.exportSymbols("F5-BIGIP-GLOBAL-MIB", gtmAttrQosFactorLcs=gtmAttrQosFactorLcs, gtmLinkLimitTotalBitsPerSec=gtmLinkLimitTotalBitsPerSec, gtmPoolMbrDepsDependVsName=gtmPoolMbrDepsDependVsName, gtmVsDepsNumber=gtmVsDepsNumber, gtmDnssecStatSigCryptoFailed=gtmDnssecStatSigCryptoFailed, gtmLinkLimitTotalConnEnabled=gtmLinkLimitTotalConnEnabled, gtmProberPoolStatSuccessfulProbes=gtmProberPoolStatSuccessfulProbes, gtmPoolMbrLimitConnPerSecEnabled=gtmPoolMbrLimitConnPerSecEnabled, gtmPoolMemberStat=gtmPoolMemberStat, gtmAttrMaxMonReqs=gtmAttrMaxMonReqs, gtmPoolMbrStatusIpType=gtmPoolMbrStatusIpType, gtmProberPoolMbrEnabled=gtmProberPoolMbrEnabled, gtmAttrTimerRetryPathData=gtmAttrTimerRetryPathData, gtmServerAllowSvcChk=gtmServerAllowSvcChk, gtmWideipPoolOrder=gtmWideipPoolOrder, gtmAttr2PathsNeverDie=gtmAttr2PathsNeverDie, gtmLinkCost=gtmLinkCost, gtmRuleEventStatEventType=gtmRuleEventStatEventType, gtmAttr2SyncZonesTimeout=gtmAttr2SyncZonesTimeout, gtmLinkCostName=gtmLinkCostName, gtmLinkLimitInCpuUsage=gtmLinkLimitInCpuUsage, gtmServerStatNumber=gtmServerStatNumber, gtmStatARequests=gtmStatARequests, gtmVsStatusTable=gtmVsStatusTable, gtmVsStatusEntry=gtmVsStatusEntry, gtmDcStatConnRate=gtmDcStatConnRate, gtmWideipGroup=gtmWideipGroup, gtmAttr2QosFactorVsScore=gtmAttr2QosFactorVsScore, gtmAttr2Group=gtmAttr2Group, gtmPoolQosCoeffBps=gtmPoolQosCoeffBps, gtmDnssecStatGroup=gtmDnssecStatGroup, gtmLinkStatGroup=gtmLinkStatGroup, gtmPoolStatName=gtmPoolStatName, gtmDnssecStatSigFailed=gtmDnssecStatSigFailed, gtmWideipStatResetStats=gtmWideipStatResetStats, gtmPoolFallbackIp=gtmPoolFallbackIp, gtmDnssecStatSigRrsetFailed=gtmDnssecStatSigRrsetFailed, gtmProberPoolMbrStatusGroup=gtmProberPoolMbrStatusGroup, gtmPoolStatReturnFromDns=gtmPoolStatReturnFromDns, gtmTopologies=gtmTopologies, gtmLinkLimitTotalConn=gtmLinkLimitTotalConn, gtmServerStatCpuUsage=gtmServerStatCpuUsage, gtmVsDepsTable=gtmVsDepsTable, gtmDcStatusEntry=gtmDcStatusEntry, gtmVsStatusAvailState=gtmVsStatusAvailState, gtmVsLimitCpuUsage=gtmVsLimitCpuUsage, gtmPoolMbrNumber=gtmPoolMbrNumber, gtmProberPoolStatusEnabledState=gtmProberPoolStatusEnabledState, gtmVsStatMemAvail=gtmVsStatMemAvail, gtmProberPoolMbrStatNumber=gtmProberPoolMbrStatNumber, gtmDnssecZoneStatGroup=gtmDnssecZoneStatGroup, gtmPoolMbrStatPort=gtmPoolMbrStatPort, gtmLinkStatLcsOut=gtmLinkStatLcsOut, gtmVsStatServerName=gtmVsStatServerName, gtmDnssecZoneStatNsec3Resalt=gtmDnssecZoneStatNsec3Resalt, gtmAttrPathTtl=gtmAttrPathTtl, gtmApplication=gtmApplication, gtmPoolMbrLimitCpuUsageEnabled=gtmPoolMbrLimitCpuUsageEnabled, gtmServerLimitPktsPerSecEnabled=gtmServerLimitPktsPerSecEnabled, gtmAppStatusEnabledState=gtmAppStatusEnabledState, gtmAppContDisTable=gtmAppContDisTable, gtmVsStatBitsPerSecOut=gtmVsStatBitsPerSecOut, gtmProberPoolMbrStatSuccessfulProbes=gtmProberPoolMbrStatSuccessfulProbes, gtmIpGroup=gtmIpGroup, gtmVsLimitPktsPerSecEnabled=gtmVsLimitPktsPerSecEnabled, gtmAppContStatEnabledState=gtmAppContStatEnabledState, gtmWideipIpv6Noerror=gtmWideipIpv6Noerror, gtmVsStatResetStats=gtmVsStatResetStats, gtmServerStat2BitsPerSecOut=gtmServerStat2BitsPerSecOut, gtmPoolMbrDepsVip=gtmPoolMbrDepsVip, gtmAppContStatTable=gtmAppContStatTable, gtmRuleTable=gtmRuleTable, gtmDcStatResetStats=gtmDcStatResetStats, gtmLinkCostNumber=gtmLinkCostNumber, gtmPoolMbrStatTable=gtmPoolMbrStatTable, gtmAttr2AolAware=gtmAttr2AolAware, gtmWideipEntry=gtmWideipEntry, gtmAttr2DumpTopology=gtmAttr2DumpTopology, gtmAttr2FbRespectDepends=gtmAttr2FbRespectDepends, gtmWideipPoolPoolName=gtmWideipPoolPoolName, gtmRuleGroup=gtmRuleGroup, gtmStatDropped=gtmStatDropped, gtmWideipStatEntry=gtmWideipStatEntry, gtmPoolName=gtmPoolName, gtmRuleEventEventType=gtmRuleEventEventType, gtmDnssecZoneStatNsec3Nodata=gtmDnssecZoneStatNsec3Nodata, gtmAttrDrainRequests=gtmAttrDrainRequests, gtmAttrTopologyAclThreshold=gtmAttrTopologyAclThreshold, gtmPoolStatResetStats=gtmPoolStatResetStats, gtmWideipStatusEntry=gtmWideipStatusEntry, gtmWideipRuleNumber=gtmWideipRuleNumber, gtmVsGroup=gtmVsGroup, gtmServerStatResetStats=gtmServerStatResetStats, gtmDnssecZoneStatXfrCompletes=gtmDnssecZoneStatXfrCompletes, gtmServerLimitBitsPerSecEnabled=gtmServerLimitBitsPerSecEnabled, gtmWideipStatusAvailState=gtmWideipStatusAvailState, gtmLinkLimitInMemAvail=gtmLinkLimitInMemAvail, gtmAttr2PathTtl=gtmAttr2PathTtl, gtmGlobalLdnsProbeProtoName=gtmGlobalLdnsProbeProtoName, gtmLinkNumber=gtmLinkNumber, gtmVirtualServ=gtmVirtualServ, gtmStatBytesDropped=gtmStatBytesDropped, gtmVsStatName=gtmVsStatName, gtmPoolStatusNumber=gtmPoolStatusNumber, gtmLinkLimitOutConnPerSec=gtmLinkLimitOutConnPerSec, gtmServerStatMemAvail=gtmServerStatMemAvail, gtmDnssecZoneStatDnssecDsQueries=gtmDnssecZoneStatDnssecDsQueries, gtmPoolAnswersToReturn=gtmPoolAnswersToReturn, gtmGlobalLdnsProbeProtoType=gtmGlobalLdnsProbeProtoType, gtmLinkLimitInBitsPerSecEnabled=gtmLinkLimitInBitsPerSecEnabled, gtmAttr2CacheLdns=gtmAttr2CacheLdns, gtmPoolStatDropped=gtmPoolStatDropped, gtmPoolMbrLimitCpuUsage=gtmPoolMbrLimitCpuUsage, gtmWideipStatRequests=gtmWideipStatRequests, gtmDnssecStatXfrCompletes=gtmDnssecStatXfrCompletes, gtmLinks=gtmLinks, gtmRuleEventStatAborts=gtmRuleEventStatAborts, gtmVsStatTable=gtmVsStatTable, gtmPoolTtl=gtmPoolTtl, gtmWideipAliasWipName=gtmWideipAliasWipName, gtmServerStat2ResetStats=gtmServerStat2ResetStats, gtmAttr2SyncNamedConf=gtmAttr2SyncNamedConf, gtmPoolStatFallback=gtmPoolStatFallback, gtmAttrOverLimitLinkLimitFactor=gtmAttrOverLimitLinkLimitFactor, gtmAppStatusTable=gtmAppStatusTable, gtmGlobals=gtmGlobals, gtmServerStatusParentType=gtmServerStatusParentType, gtmVsStatusParentType=gtmVsStatusParentType, gtmAttr2GtmSetsRecursion=gtmAttr2GtmSetsRecursion, gtmVsStatPktsPerSecOut=gtmVsStatPktsPerSecOut, gtmWideipLbmodePool=gtmWideipLbmodePool, gtmAttr2LinkCompensateInbound=gtmAttr2LinkCompensateInbound, gtmServerStatConnRate=gtmServerStatConnRate, gtmPoolMbrOrder=gtmPoolMbrOrder, gtmAttrCheckDynamicDepends=gtmAttrCheckDynamicDepends, gtmVsIpXlatedType=gtmVsIpXlatedType, gtmLinkLimitOutCpuUsage=gtmLinkLimitOutCpuUsage, gtmLinkStatusName=gtmLinkStatusName, gtmAttrCheckStaticDepends=gtmAttrCheckStaticDepends, gtmVsLimitConnPerSecEnabled=gtmVsLimitConnPerSecEnabled, gtmServerAutoconfState=gtmServerAutoconfState, gtmWideipStatARequests=gtmWideipStatARequests, gtmStatReconnects=gtmStatReconnects, gtmAppContStatDetailReason=gtmAppContStatDetailReason, gtmAppContextStat=gtmAppContextStat, gtmDcStatConnections=gtmDcStatConnections, gtmPoolQosCoeffPacketRate=gtmPoolQosCoeffPacketRate, gtmServerNumber=gtmServerNumber, gtmServerProber=gtmServerProber, gtmVsStatCpuUsage=gtmVsStatCpuUsage, gtmProberPoolEnabled=gtmProberPoolEnabled, gtmDcStatPktsPerSecOut=gtmDcStatPktsPerSecOut, gtmTopItem=gtmTopItem, gtmLinkStatResetStats=gtmLinkStatResetStats, gtmPoolMbrDepsPoolName=gtmPoolMbrDepsPoolName, gtmAttr2Name=gtmAttr2Name, gtmWideipRuleEntry=gtmWideipRuleEntry, gtmAttr2FbRespectAcl=gtmAttr2FbRespectAcl, gtmPoolLimitConnPerSec=gtmPoolLimitConnPerSec, gtmProberPoolGroup=gtmProberPoolGroup, gtmDnssecStatDnssecNsec3paramQueries=gtmDnssecStatDnssecNsec3paramQueries, gtmStatReturnToDns=gtmStatReturnToDns, gtmAppContStatAppName=gtmAppContStatAppName, gtmAttr2LowerBoundPctRow=gtmAttr2LowerBoundPctRow, gtmServerStat=gtmServerStat, gtmLinkLimitInCpuUsageEnabled=gtmLinkLimitInCpuUsageEnabled, gtmServerProberType=gtmServerProberType, gtmLinkStatRateVsesIn=gtmLinkStatRateVsesIn, gtmRegionEntryEntry=gtmRegionEntryEntry, gtmPoolMemberDepends=gtmPoolMemberDepends, gtmDcStatPktsPerSecIn=gtmDcStatPktsPerSecIn, gtmWideipPersist=gtmWideipPersist, gtmRegItem=gtmRegItem, gtmPoolStatusParentType=gtmPoolStatusParentType, gtmWideipLastResortPool=gtmWideipLastResortPool, gtmLinkCostIndex=gtmLinkCostIndex, gtmPoolMbrDepsVsName=gtmPoolMbrDepsVsName, gtmWideipStatResolutions=gtmWideipStatResolutions, gtmIp=gtmIp, gtmVsIp=gtmVsIp, gtmStatAaaaRequests=gtmStatAaaaRequests, gtmAttr2OverLimitLinkLimitFactor=gtmAttr2OverLimitLinkLimitFactor, gtmWideip=gtmWideip, gtmIpIpXlated=gtmIpIpXlated, gtmVsServerName=gtmVsServerName, gtmWideipStatus=gtmWideipStatus, gtmAttrAutoconf=gtmAttrAutoconf, gtmPoolMbrDepsGroup=gtmPoolMbrDepsGroup, gtmServerStat2PktsPerSecIn=gtmServerStat2PktsPerSecIn, gtmAppContDisGroup=gtmAppContDisGroup, gtmAttrLinkCompensateOutbound=gtmAttrLinkCompensateOutbound, gtmServerStat2BitsPerSecIn=gtmServerStat2BitsPerSecIn, gtmServerStat2UnitId=gtmServerStat2UnitId, gtmServerStat2VsPicks=gtmServerStat2VsPicks, gtmProberPoolStatNumber=gtmProberPoolStatNumber, gtmAttrQosFactorPacketRate=gtmAttrQosFactorPacketRate, gtmAppPersist=gtmAppPersist, gtmProberPoolStatusEntry=gtmProberPoolStatusEntry, gtmAttr2LowerBoundPctCol=gtmAttr2LowerBoundPctCol, gtmAttrSyncZonesTimeout=gtmAttrSyncZonesTimeout, gtmProberPoolStatusName=gtmProberPoolStatusName, gtmWideipAliasNumber=gtmWideipAliasNumber, gtmAttr2Entry=gtmAttr2Entry, gtmWideipPoolGroup=gtmWideipPoolGroup, gtmAttrLinkLimitFactor=gtmAttrLinkLimitFactor, gtmServerLimitConn=gtmServerLimitConn, gtmServerStatusTable=gtmServerStatusTable, gtmProberPoolMbrEntry=gtmProberPoolMbrEntry, gtmVsMonitorRule=gtmVsMonitorRule, gtmAttr2PathDuration=gtmAttr2PathDuration, gtmDcStatNumber=gtmDcStatNumber, gtmWideipAliasGroup=gtmWideipAliasGroup, gtmLinkRatio=gtmLinkRatio, gtmWideipEnabled=gtmWideipEnabled, gtmVsLimitBitsPerSec=gtmVsLimitBitsPerSec, gtmAttrQosFactorRtt=gtmAttrQosFactorRtt, gtmServerStatBitsPerSecIn=gtmServerStatBitsPerSecIn, gtmLinkCostTable=gtmLinkCostTable, gtmRuleDefinition=gtmRuleDefinition, gtmServerStatConnections=gtmServerStatConnections, gtmProberPoolMbrStatusEntry=gtmProberPoolMbrStatusEntry, gtmProberPoolMbrStatusDetailReason=gtmProberPoolMbrStatusDetailReason, gtmPoolMbrLimitBitsPerSecEnabled=gtmPoolMbrLimitBitsPerSecEnabled, gtmServerGroup=gtmServerGroup, gtmStatPaths=gtmStatPaths, gtmServerStatTable=gtmServerStatTable, gtmProberPoolStatTotalProbes=gtmProberPoolStatTotalProbes, gtmAttr2TraceTtl=gtmAttr2TraceTtl, gtmProberPool=gtmProberPool, gtmRuleEventPriority=gtmRuleEventPriority, gtmRegionEntryRegionDbType=gtmRegionEntryRegionDbType, gtmPoolLimitMemAvailEnabled=gtmPoolLimitMemAvailEnabled, gtmVsStatEntry=gtmVsStatEntry, gtmAttr2DownMultiple=gtmAttr2DownMultiple, gtmPoolStat=gtmPoolStat, gtmIpServerName=gtmIpServerName, gtmPoolMbrStatusVsName=gtmPoolMbrStatusVsName, gtmDnssecZoneStatNsec3Referral=gtmDnssecZoneStatNsec3Referral, gtmDnssecZoneStatDnssecResponses=gtmDnssecZoneStatDnssecResponses, gtmAppContextDisable=gtmAppContextDisable, gtmVsName=gtmVsName, gtmAttr2QosFactorVsCapacity=gtmAttr2QosFactorVsCapacity, gtmDnssecZoneStatNsec3s=gtmDnssecZoneStatNsec3s, gtmLinkStatTable=gtmLinkStatTable, gtmGlobalLdnsProbeProto=gtmGlobalLdnsProbeProto, gtmRegItemRegionName=gtmRegItemRegionName, gtmVsLimitMemAvail=gtmVsLimitMemAvail, gtmWideipRulePriority=gtmWideipRulePriority, gtmRegions=gtmRegions, gtmWideipStatName=gtmWideipStatName, gtmDcStatMemAvail=gtmDcStatMemAvail, gtmAppContDisAppName=gtmAppContDisAppName, gtmRuleEventStat=gtmRuleEventStat, gtmVsStatusPort=gtmVsStatusPort)
mibBuilder.exportSymbols("F5-BIGIP-GLOBAL-MIB", gtmWideipRuleTable=gtmWideipRuleTable, gtmWideips=gtmWideips, gtmPoolFallbackIpType=gtmPoolFallbackIpType, gtmLinkLimitOutCpuUsageEnabled=gtmLinkLimitOutCpuUsageEnabled, gtmAppContStatAvailState=gtmAppContStatAvailState, gtmVsTable=gtmVsTable, gtmServerStat2Group=gtmServerStat2Group, gtmPoolMbrPoolName=gtmPoolMbrPoolName, gtmAppContStatGroup=gtmAppContStatGroup, gtmAttr2TimeTolerance=gtmAttr2TimeTolerance, gtmAttrPathDuration=gtmAttrPathDuration, gtmAppTable=gtmAppTable, gtmPoolMbrStatIp=gtmPoolMbrStatIp, gtmDnssecStatNsec3s=gtmDnssecStatNsec3s, gtmDcStatusEnabledState=gtmDcStatusEnabledState, gtmDnssecStatDnssecResponses=gtmDnssecStatDnssecResponses, gtmRegItemTable=gtmRegItemTable, gtmServerStat2MemAvail=gtmServerStat2MemAvail, gtmDnssecStatXfrStarts=gtmDnssecStatXfrStarts, gtmServerDcName=gtmServerDcName, gtmAttr2Autosync=gtmAttr2Autosync, gtmDnssecZoneStatIxfrQueries=gtmDnssecZoneStatIxfrQueries, gtmAttrQosFactorBps=gtmAttrQosFactorBps, gtmAppTtlPersist=gtmAppTtlPersist, gtmServerStat2ConnRate=gtmServerStat2ConnRate, gtmDcStatGroup=gtmDcStatGroup, gtmServerStatName=gtmServerStatName, gtmWideipStatAaaaRequests=gtmWideipStatAaaaRequests, gtmPoolNumber=gtmPoolNumber, gtmAppNumber=gtmAppNumber, gtmLinkLimitOutPktsPerSecEnabled=gtmLinkLimitOutPktsPerSecEnabled, gtmStatPreferred=gtmStatPreferred, gtmVsLimitMemAvailEnabled=gtmVsLimitMemAvailEnabled, gtmRuleEventStatName=gtmRuleEventStatName, gtmIpNumber=gtmIpNumber, gtmLink=gtmLink, gtmAttrProbeDisabledObjects=gtmAttrProbeDisabledObjects, gtmLinkLimitTotalBitsPerSecEnabled=gtmLinkLimitTotalBitsPerSecEnabled, gtmAttr2Number=gtmAttr2Number, gtmAttrLowerBoundPctCol=gtmAttrLowerBoundPctCol, gtmProberPoolStatusAvailState=gtmProberPoolStatusAvailState, gtmDnssecZoneStatSigFailed=gtmDnssecZoneStatSigFailed, gtmAttrRttSampleCount=gtmAttrRttSampleCount, gtmLinkLimitInConnPerSec=gtmLinkLimitInConnPerSec, gtmAppContStatParentType=gtmAppContStatParentType, gtmDataCenters=gtmDataCenters, gtmServerStat2Name=gtmServerStat2Name, gtmProberPoolStatGroup=gtmProberPoolStatGroup, gtmPoolMbrStatusTable=gtmPoolMbrStatusTable, gtmPoolMbrLimitConn=gtmPoolMbrLimitConn, gtmVsLimitBitsPerSecEnabled=gtmVsLimitBitsPerSecEnabled, gtmGlobalLdnsProbeProtoNumber=gtmGlobalLdnsProbeProtoNumber, gtmServerStat2Table=gtmServerStat2Table, gtmLinkCostDollarsPerMbps=gtmLinkCostDollarsPerMbps, gtmAttr2LdnsDuration=gtmAttr2LdnsDuration, gtmAppName=gtmAppName, gtmAppContDisEntry=gtmAppContDisEntry, gtmLinkStatEntry=gtmLinkStatEntry, gtmWideipPoolNumber=gtmWideipPoolNumber, gtmLinkStatus=gtmLinkStatus, gtmWideipPoolRatio=gtmWideipPoolRatio, gtmServerStat2PktsPerSecOut=gtmServerStat2PktsPerSecOut, gtmDnssecZoneStatXfrResponseAverageSize=gtmDnssecZoneStatXfrResponseAverageSize, gtmVsDepsDependVsName=gtmVsDepsDependVsName, gtmAttr2RttTimeout=gtmAttr2RttTimeout, gtmLinkPrepaidInDollars=gtmLinkPrepaidInDollars, gtmAttrSyncTimeout=gtmAttrSyncTimeout, gtmLinkGroup=gtmLinkGroup, gtmPoolLimitConnEnabled=gtmPoolLimitConnEnabled, gtmServerStatVsPicks=gtmServerStatVsPicks, gtmProberPoolMbrStatResetStats=gtmProberPoolMbrStatResetStats, gtmDnssecZoneStatXfrMsgs=gtmDnssecZoneStatXfrMsgs, gtmRegItemRegionDbType=gtmRegItemRegionDbType, gtmAttr2QosFactorLcs=gtmAttr2QosFactorLcs, gtmRuleName=gtmRuleName, gtmWideipStatusParentType=gtmWideipStatusParentType, gtmDcLocation=gtmDcLocation, gtmLinkLimitOutBitsPerSecEnabled=gtmLinkLimitOutBitsPerSecEnabled, gtmAttr2Autoconf=gtmAttr2Autoconf, gtmServerStatPktsPerSecOut=gtmServerStatPktsPerSecOut, gtmWideipStatusName=gtmWideipStatusName, gtmLinkMonitorRule=gtmLinkMonitorRule, gtmPoolAlternate=gtmPoolAlternate, gtmPoolLimitMemAvail=gtmPoolLimitMemAvail, gtmServerLimitConnPerSecEnabled=gtmServerLimitConnPerSecEnabled, gtmAppContDisNumber=gtmAppContDisNumber, gtmTopItemLdnsEntry=gtmTopItemLdnsEntry, gtmServerLimitCpuUsage=gtmServerLimitCpuUsage, gtmWideipStatReturnToDns=gtmWideipStatReturnToDns, gtmStatExplicitIp=gtmStatExplicitIp, gtmRuleEventStatResetStats=gtmRuleEventStatResetStats, gtmWideipLoadBalancingDecisionLogVerbosity=gtmWideipLoadBalancingDecisionLogVerbosity, gtmAttr2DefaultFallback=gtmAttr2DefaultFallback, gtmServer=gtmServer, gtmAttr2RttSampleCount=gtmAttr2RttSampleCount, gtmPoolMbrGroup=gtmPoolMbrGroup, gtmAttrLdnsDuration=gtmAttrLdnsDuration, gtmRuleEventStatEntry=gtmRuleEventStatEntry, gtmVsNumber=gtmVsNumber, gtmWideipStatPreferred=gtmWideipStatPreferred, gtmServerEnabled=gtmServerEnabled, gtmStatBytesSent=gtmStatBytesSent, gtmDnssecStatXfrSerial=gtmDnssecStatXfrSerial, gtmAppContDisType=gtmAppContDisType, gtmVsEnabled=gtmVsEnabled, gtmDnssecStatXfrMasterMsgs=gtmDnssecStatXfrMasterMsgs, gtmProberPoolMemberStatus=gtmProberPoolMemberStatus, gtmAttrStaticPersistCidr=gtmAttrStaticPersistCidr, gtmDcStatusName=gtmDcStatusName, gtmLinkStatRate=gtmLinkStatRate, gtmPoolQosCoeffRtt=gtmPoolQosCoeffRtt, gtmPoolMbrStatServerName=gtmPoolMbrStatServerName, gtmTopItemEntry=gtmTopItemEntry, gtmAttrAutosync=gtmAttrAutosync, gtmWideipPool=gtmWideipPool, gtmRuleEventStatTable=gtmRuleEventStatTable, gtmPoolMbrStatResetStats=gtmPoolMbrStatResetStats, gtmPoolMbrStatusPoolName=gtmPoolMbrStatusPoolName, gtmVsStatusIp=gtmVsStatusIp, gtmProberPoolMbrStatusAvailState=gtmProberPoolMbrStatusAvailState, gtmRuleEventName=gtmRuleEventName, gtmDnssecZoneStatXfrMasterSerial=gtmDnssecZoneStatXfrMasterSerial, gtmPoolQosCoeffTopology=gtmPoolQosCoeffTopology, gtmPoolMbrRatio=gtmPoolMbrRatio, gtmProberPoolStatResetStats=gtmProberPoolStatResetStats, gtmVsStatusVsName=gtmVsStatusVsName, gtmLinkIspName=gtmLinkIspName, gtmVirtualServStat=gtmVirtualServStat, gtmVsDepsIp=gtmVsDepsIp, gtmLinkTable=gtmLinkTable, gtmWideipStat=gtmWideipStat, gtmPoolMbrLimitMemAvail=gtmPoolMbrLimitMemAvail, gtmPoolMbrLimitPktsPerSec=gtmPoolMbrLimitPktsPerSec, gtmGlobalAttr2=gtmGlobalAttr2, gtmPoolFallback=gtmPoolFallback, gtmStatPersisted=gtmStatPersisted, gtmAttrTimerSendKeepAlive=gtmAttrTimerSendKeepAlive, gtmLinkName=gtmLinkName, gtmPoolStatCnameResolutions=gtmPoolStatCnameResolutions, gtmServerLimitMemAvail=gtmServerLimitMemAvail, gtmVsPortXlated=gtmVsPortXlated, gtmRuleEventStatGroup=gtmRuleEventStatGroup, gtmDnssecStatXfrResponseAverageSize=gtmDnssecStatXfrResponseAverageSize, gtmVsDepsVip=gtmVsDepsVip, gtmServerStatusAvailState=gtmServerStatusAvailState, gtmLinkLimitOutConnPerSecEnabled=gtmLinkLimitOutConnPerSecEnabled, gtmDnssecZoneStatXfrSerial=gtmDnssecZoneStatXfrSerial, gtmGlobalAttrs=gtmGlobalAttrs, gtmProberPools=gtmProberPools, gtmPoolMbrStatusServerName=gtmPoolMbrStatusServerName, gtmTopItemLdnsType=gtmTopItemLdnsType, gtmAttrRttTimeout=gtmAttrRttTimeout, gtmAttr2Table=gtmAttr2Table, gtmAttr2DownThreshold=gtmAttr2DownThreshold, gtmWideipStatusGroup=gtmWideipStatusGroup, gtmPoolStatEntry=gtmPoolStatEntry, gtmAttr2RttPacketLength=gtmAttr2RttPacketLength, bigipGlobalTM=bigipGlobalTM, gtmAttrMaxLinkOverLimitCount=gtmAttrMaxLinkOverLimitCount, gtmPoolStatusAvailState=gtmPoolStatusAvailState, gtmServerStatBitsPerSecOut=gtmServerStatBitsPerSecOut, gtmWideipStatFallback=gtmWideipStatFallback, gtmAttr2MaxLinkOverLimitCount=gtmAttr2MaxLinkOverLimitCount, gtmDcStatusAvailState=gtmDcStatusAvailState, gtmLinkStatusGroup=gtmLinkStatusGroup, gtmWideipStatDropped=gtmWideipStatDropped, gtmPoolMbrStatusParentType=gtmPoolMbrStatusParentType, gtmVsLimitConnEnabled=gtmVsLimitConnEnabled, gtmServerStatusEnabledState=gtmServerStatusEnabledState, gtmLinkLimitInPktsPerSec=gtmLinkLimitInPktsPerSec, gtmWideipPoolTable=gtmWideipPoolTable, gtmRegionEntryTable=gtmRegionEntryTable, gtmLinkStatusAvailState=gtmLinkStatusAvailState, gtmVsLimitPktsPerSec=gtmVsLimitPktsPerSec, gtmLinkDuplex=gtmLinkDuplex, gtmTopItemGroup=gtmTopItemGroup, gtmProberPoolStat=gtmProberPoolStat, gtmAttrQosFactorConnRate=gtmAttrQosFactorConnRate, gtmGlobalLdnsProbeProtoTable=gtmGlobalLdnsProbeProtoTable, gtmLinkStatName=gtmLinkStatName, gtmDnssecZoneStatTowireFailed=gtmDnssecZoneStatTowireFailed, gtmLinkCostUptoBps=gtmLinkCostUptoBps, gtmServerStatusEntry=gtmServerStatusEntry, gtmGlobalLdnsProbeProtoGroup=gtmGlobalLdnsProbeProtoGroup, PYSNMP_MODULE_ID=bigipGlobalTM, gtmProberPoolMbrStatTotalProbes=gtmProberPoolMbrStatTotalProbes, gtmAttrQosFactorHops=gtmAttrQosFactorHops, gtmServerStat2CpuUsage=gtmServerStat2CpuUsage, gtmVsStatusGroup=gtmVsStatusGroup, gtmDcStatEntry=gtmDcStatEntry, gtmPoolQosCoeffHitRatio=gtmPoolQosCoeffHitRatio, gtmRuleEventStatFailures=gtmRuleEventStatFailures, gtmLinkStatRateVses=gtmLinkStatRateVses, gtmWideipStatNumber=gtmWideipStatNumber, gtmPoolStatusEntry=gtmPoolStatusEntry, gtmPoolStatExplicitIp=gtmPoolStatExplicitIp, gtmServerStatusName=gtmServerStatusName, gtmVsLimitCpuUsageEnabled=gtmVsLimitCpuUsageEnabled, gtmPoolStatusGroup=gtmPoolStatusGroup, gtmRuleEventEntry=gtmRuleEventEntry, gtmAttr2StaticPersistV6Cidr=gtmAttr2StaticPersistV6Cidr, gtmRuleEventStatPriority=gtmRuleEventStatPriority, gtmAttr2DefaultAlternate=gtmAttr2DefaultAlternate, gtmDcStatName=gtmDcStatName, gtmLinkLimitInMemAvailEnabled=gtmLinkLimitInMemAvailEnabled, gtmAttr2TraceroutePort=gtmAttr2TraceroutePort, gtmVsStatNumber=gtmVsStatNumber, gtmProberPoolMbrStatServerName=gtmProberPoolMbrStatServerName, gtmApplicationStatus=gtmApplicationStatus, gtmTopItemServerType=gtmTopItemServerType, gtmAttr2PersistMask=gtmAttr2PersistMask, gtmPoolMbrDepsServerName=gtmPoolMbrDepsServerName, gtmDNSSEC=gtmDNSSEC, gtmLinkLimitOutConn=gtmLinkLimitOutConn, gtmWideipStatusNumber=gtmWideipStatusNumber, gtmDnssecStatNsec3Referral=gtmDnssecStatNsec3Referral, gtmGlobalStat=gtmGlobalStat, gtmRuleNumber=gtmRuleNumber, gtmTopItemWeight=gtmTopItemWeight, gtmRuleEventStatNumber=gtmRuleEventStatNumber, gtmDnssecZoneStatResetStats=gtmDnssecZoneStatResetStats, gtmLinkCostGroup=gtmLinkCostGroup, gtmDcStatusTable=gtmDcStatusTable, gtmAttr2QosFactorConnRate=gtmAttr2QosFactorConnRate, bigipGlobalTMCompliance=bigipGlobalTMCompliance, gtmAppContStatName=gtmAppContStatName, gtmWideipAliasTable=gtmWideipAliasTable, gtmAppStatusEntry=gtmAppStatusEntry, gtmDataCenterStat=gtmDataCenterStat, gtmLinkLimitOutPktsPerSec=gtmLinkLimitOutPktsPerSec, gtmProberPoolMbrStatTable=gtmProberPoolMbrStatTable, gtmIps=gtmIps, gtmDnssecStatSigSuccess=gtmDnssecStatSigSuccess, gtmRuleEventScript=gtmRuleEventScript, gtmAttrQosFactorTopology=gtmAttrQosFactorTopology, gtmPoolStatTable=gtmPoolStatTable, gtmAttr2CheckDynamicDepends=gtmAttr2CheckDynamicDepends, gtmServerStatusDetailReason=gtmServerStatusDetailReason, gtmVsStatusDetailReason=gtmVsStatusDetailReason, gtmRuleEventGroup=gtmRuleEventGroup, gtmPoolEnabled=gtmPoolEnabled, gtmRegItemGroup=gtmRegItemGroup, gtmRegItemEntry=gtmRegItemEntry, gtmLinkStatRateNodeIn=gtmLinkStatRateNodeIn, gtmWideipStatGroup=gtmWideipStatGroup, gtmPoolMbrLimitPktsPerSecEnabled=gtmPoolMbrLimitPktsPerSecEnabled, gtmStatResetStats=gtmStatResetStats, gtmRegionEntryNumber=gtmRegionEntryNumber, gtmAppContStatNumAvail=gtmAppContStatNumAvail, gtmServerLimitPktsPerSec=gtmServerLimitPktsPerSec, gtmServers=gtmServers, gtmPoolMbrIp=gtmPoolMbrIp, gtmPoolVerifyMember=gtmPoolVerifyMember, gtmVsStatBitsPerSecIn=gtmVsStatBitsPerSecIn)
mibBuilder.exportSymbols("F5-BIGIP-GLOBAL-MIB", gtmVsDepsIpType=gtmVsDepsIpType, gtmServerEntry=gtmServerEntry, gtmWideipNumber=gtmWideipNumber, gtmServerLimitConnEnabled=gtmServerLimitConnEnabled, gtmLinkLimitInPktsPerSecEnabled=gtmLinkLimitInPktsPerSecEnabled, gtmPoolMemberStatus=gtmPoolMemberStatus, gtmAttrLinkPrepaidFactor=gtmAttrLinkPrepaidFactor, gtmAttr2QosFactorBps=gtmAttr2QosFactorBps, gtmServerStatGroup=gtmServerStatGroup, gtmVsStatGroup=gtmVsStatGroup, gtmRegItemRegEntry=gtmRegItemRegEntry, gtmServerName=gtmServerName, gtmServerAllowPath=gtmServerAllowPath, gtmVsStatIp=gtmVsStatIp, gtmDnssecZoneStatDnssecDnskeyQueries=gtmDnssecZoneStatDnssecDnskeyQueries, gtmDnssecStatNsec3Nxdomain=gtmDnssecStatNsec3Nxdomain, gtmAttr2TopologyLongestMatch=gtmAttr2TopologyLongestMatch, gtmServerLinkAutoconfState=gtmServerLinkAutoconfState, gtmAttr2QosFactorRtt=gtmAttr2QosFactorRtt, gtmLinkStatRateNodeOut=gtmLinkStatRateNodeOut, gtmServerStatPktsPerSecIn=gtmServerStatPktsPerSecIn, gtmVirtualServers=gtmVirtualServers, gtmAttrDumpTopology=gtmAttrDumpTopology, gtmVsIpXlated=gtmVsIpXlated, gtmVsDepsServerName=gtmVsDepsServerName, gtmWideipPoolWipName=gtmWideipPoolWipName, gtmLinkLimitInConn=gtmLinkLimitInConn, gtmProberPoolMbrStatGroup=gtmProberPoolMbrStatGroup, gtmPoolMbrStatNumber=gtmPoolMbrStatNumber, gtmLinkStatusTable=gtmLinkStatusTable, gtmIpIp=gtmIpIp, gtmAttrCertificateDepth=gtmAttrCertificateDepth, gtmServerTable=gtmServerTable, gtmProberPoolMbrStatusServerName=gtmProberPoolMbrStatusServerName, gtmAttr2TimerRetryPathData=gtmAttr2TimerRetryPathData, gtmPoolMbrDepsVport=gtmPoolMbrDepsVport, gtmPoolQosCoeffVsScore=gtmPoolQosCoeffVsScore, gtmDnssecZoneStatDnssecNsec3paramQueries=gtmDnssecZoneStatDnssecNsec3paramQueries, gtmDcName=gtmDcName, gtmLinkStatPaths=gtmLinkStatPaths, gtmLinkStatusEntry=gtmLinkStatusEntry, gtmAttrSyncGroup=gtmAttrSyncGroup, gtmTopItemLdnsNegate=gtmTopItemLdnsNegate, gtmPoolLimitCpuUsage=gtmPoolLimitCpuUsage, gtmPoolMbrIpType=gtmPoolMbrIpType, gtmPoolMbrLimitMemAvailEnabled=gtmPoolMbrLimitMemAvailEnabled, gtmLinkLimitInBitsPerSec=gtmLinkLimitInBitsPerSec, gtmServerStatus=gtmServerStatus, gtmProberPoolLbMode=gtmProberPoolLbMode, gtmPoolMbrStatusIp=gtmPoolMbrStatusIp, gtmIpLinkName=gtmIpLinkName, gtmVsStatConnRate=gtmVsStatConnRate, gtmDnssecStatNsec3Nodata=gtmDnssecStatNsec3Nodata, gtmWideipStatPersisted=gtmWideipStatPersisted, gtmPoolMbrStatusGroup=gtmPoolMbrStatusGroup, gtmVsDepsPort=gtmVsDepsPort, gtmServerStatusGroup=gtmServerStatusGroup, gtmRule=gtmRule, gtmRules=gtmRules, gtmAttr2ForwardStatus=gtmAttr2ForwardStatus, gtmProberPoolNumber=gtmProberPoolNumber, gtmPoolLimitCpuUsageEnabled=gtmPoolLimitCpuUsageEnabled, gtmServerMonitorRule=gtmServerMonitorRule, gtmPoolStatGroup=gtmPoolStatGroup, gtmLinkStatusDetailReason=gtmLinkStatusDetailReason, gtmDnssecZoneStatSigSuccess=gtmDnssecZoneStatSigSuccess, gtmPoolStatPreferred=gtmPoolStatPreferred, gtmPoolMbrMonitorRule=gtmPoolMbrMonitorRule, gtmStatReturnFromDns=gtmStatReturnFromDns, gtmAttrLinkCompensationHistory=gtmAttrLinkCompensationHistory, gtmDcStatusDetailReason=gtmDcStatusDetailReason, gtmPoolLimitBitsPerSec=gtmPoolLimitBitsPerSec, gtmAttrDownMultiple=gtmAttrDownMultiple, gtmPoolMbrLimitBitsPerSec=gtmPoolMbrLimitBitsPerSec, gtmTopItemNumber=gtmTopItemNumber, gtmAttrTimerGetAutoconfigData=gtmAttrTimerGetAutoconfigData, gtmPoolStatus=gtmPoolStatus, gtmPoolStatReturnToDns=gtmPoolStatReturnToDns, gtmVsDepsDependServerName=gtmVsDepsDependServerName, gtmWideipTtlPersist=gtmWideipTtlPersist, gtmWideipStatReturnFromDns=gtmWideipStatReturnFromDns, gtmProberPoolStatFailedProbes=gtmProberPoolStatFailedProbes, gtmAttrTimeTolerance=gtmAttrTimeTolerance, gtmPoolMbrStatusEntry=gtmPoolMbrStatusEntry, gtmDataCenter=gtmDataCenter, gtmDcEnabled=gtmDcEnabled, gtmLinkStatRateNode=gtmLinkStatRateNode, gtmIpDeviceName=gtmIpDeviceName, gtmTopItemTable=gtmTopItemTable, gtmProberPoolEntry=gtmProberPoolEntry, gtmPoolLimitConnPerSecEnabled=gtmPoolLimitConnPerSecEnabled, gtmAttr2QosFactorPacketRate=gtmAttr2QosFactorPacketRate, gtmAttrDownThreshold=gtmAttrDownThreshold, gtmProberPoolMbrStatusEnabledState=gtmProberPoolMbrStatusEnabledState, gtmLinkLimitOutConnEnabled=gtmLinkLimitOutConnEnabled, gtmLinkStatRateIn=gtmLinkStatRateIn, gtmVsPort=gtmVsPort, gtmDcStatBitsPerSecIn=gtmDcStatBitsPerSecIn, gtmLinkUplinkAddress=gtmLinkUplinkAddress, gtmRuleEventNumber=gtmRuleEventNumber, gtmProberPoolStatusDetailReason=gtmProberPoolStatusDetailReason, gtmAppContStatNumber=gtmAppContStatNumber, gtmWideipStatusTable=gtmWideipStatusTable, bigipGlobalTMGroups=bigipGlobalTMGroups, gtmVirtualServStatus=gtmVirtualServStatus, gtmProberPoolMbrPoolName=gtmProberPoolMbrPoolName, gtmDnssecStatNsec3Resalt=gtmDnssecStatNsec3Resalt, gtmDnssecStatIxfrQueries=gtmDnssecStatIxfrQueries, gtmDnssecZoneStatXfrStarts=gtmDnssecZoneStatXfrStarts, gtmDnssecStatConnectFlowFailed=gtmDnssecStatConnectFlowFailed, gtmProberPoolStatus=gtmProberPoolStatus, gtmPoolQosCoeffConnRate=gtmPoolQosCoeffConnRate, gtmPoolMbrVsName=gtmPoolMbrVsName, gtmPoolMbrServerName=gtmPoolMbrServerName, gtmAttrRttPacketLength=gtmAttrRttPacketLength, gtmDcTable=gtmDcTable, gtmAttrDefaultFallback=gtmAttrDefaultFallback, gtmAttr2QosFactorHops=gtmAttr2QosFactorHops, gtmStatGroup=gtmStatGroup, gtmDnssecStatDnssecDsQueries=gtmDnssecStatDnssecDsQueries, gtmDcNumber=gtmDcNumber, gtmPoolStatNumber=gtmPoolStatNumber, gtmServerType=gtmServerType, gtmDataCenterStatus=gtmDataCenterStatus, gtmDcStatCpuUsage=gtmDcStatCpuUsage, gtmWideipStatusEnabledState=gtmWideipStatusEnabledState, gtmStatCnameResolutions=gtmStatCnameResolutions, gtmAppStatusAvailState=gtmAppStatusAvailState, gtmPoolMbrStatEntry=gtmPoolMbrStatEntry, gtmPoolMbrStatAlternate=gtmPoolMbrStatAlternate, gtmDnssecZoneStatNsec3Nxdomain=gtmDnssecZoneStatNsec3Nxdomain, gtmPoolMbrDepsNumber=gtmPoolMbrDepsNumber, gtmWideipAlias=gtmWideipAlias, gtmAttrLinkCompensateInbound=gtmAttrLinkCompensateInbound)
