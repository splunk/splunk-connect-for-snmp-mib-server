#
# PySNMP MIB module ASCEND-SDSL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-SDSL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:13:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
wanTypeSdsl, = mibBuilder.importSymbols("ASCEND-WAN-MIB", "wanTypeSdsl")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, NotificationType, ModuleIdentity, Bits, Counter32, Unsigned32, Counter64, TimeTicks, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "ModuleIdentity", "Bits", "Counter32", "Unsigned32", "Counter64", "TimeTicks", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sdslLineStatusTable = MibTable((1, 3, 6, 1, 4, 1, 529, 4, 8, 1), )
if mibBuilder.loadTexts: sdslLineStatusTable.setStatus('mandatory')
sdslLineStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 4, 8, 1, 1), ).setIndexNames((0, "ASCEND-SDSL-MIB", "sdslStatusIfEntryIndex"))
if mibBuilder.loadTexts: sdslLineStatusEntry.setStatus('mandatory')
sdslStatusIfEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatusIfEntryIndex.setStatus('mandatory')
sdslStatusShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatusShelfIndex.setStatus('mandatory')
sdslStatusSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatusSlotIndex.setStatus('mandatory')
sdslStatusLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatusLineIndex.setStatus('mandatory')
sdslStatusUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("coe", 2), ("cpe", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatusUnitType.setStatus('mandatory')
sdslStatusLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("configure", 2), ("deactivate", 3), ("deactive-lost", 4), ("start-up", 5), ("pend-port-up", 6), ("up", 7), ("pend-deactivate", 8), ("out-of-service", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatusLineState.setStatus('mandatory')
sdslStatusUpRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2320000, 1568000, 1552000, 1536000, 1168000, 1152000, 1040000, 784000, 768000, 528000, 416000, 400000, 384000, 272000, 208000, 192000, 160000, 144000))).clone(namedValues=NamedValues(("m2320000", 2320000), ("m1568000", 1568000), ("m1552000", 1552000), ("m1536000", 1536000), ("m1168000", 1168000), ("m1152000", 1152000), ("m1040000", 1040000), ("k784000", 784000), ("k768000", 768000), ("k528000", 528000), ("k416000", 416000), ("k400000", 400000), ("k384000", 384000), ("k272000", 272000), ("k208000", 208000), ("k192000", 192000), ("k160000", 160000), ("k144000", 144000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdslStatusUpRate.setStatus('deprecated')
sdslStatusDownRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2320000, 1568000, 1552000, 1536000, 1168000, 1152000, 1040000, 784000, 768000, 528000, 416000, 400000, 384000, 272000, 208000, 192000, 160000, 144000))).clone(namedValues=NamedValues(("m2320000", 2320000), ("m1568000", 1568000), ("m1552000", 1552000), ("m1536000", 1536000), ("m1168000", 1168000), ("m1152000", 1152000), ("m1040000", 1040000), ("k784000", 784000), ("k768000", 768000), ("k528000", 528000), ("k416000", 416000), ("k400000", 400000), ("k384000", 384000), ("k272000", 272000), ("k208000", 208000), ("k192000", 192000), ("k160000", 160000), ("k144000", 144000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdslStatusDownRate.setStatus('deprecated')
sdslStatusVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatusVendorId.setStatus('mandatory')
sdslStatusMajorFirmWareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatusMajorFirmWareVer.setStatus('mandatory')
sdslStatusMinorFirmWareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatusMinorFirmWareVer.setStatus('mandatory')
sdslStatusHardWareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatusHardWareVer.setStatus('mandatory')
sdslStatusLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2320000, 1568000, 1552000, 1536000, 1168000, 1152000, 1040000, 784000, 768000, 528000, 416000, 400000, 384000, 272000, 208000, 192000, 160000, 144000))).clone(namedValues=NamedValues(("unknown", 1), ("m2320000", 2320000), ("m1568000", 1568000), ("m1552000", 1552000), ("m1536000", 1536000), ("m1168000", 1168000), ("m1152000", 1152000), ("m1040000", 1040000), ("k784000", 784000), ("k768000", 768000), ("k528000", 528000), ("k416000", 416000), ("k400000", 400000), ("k384000", 384000), ("k272000", 272000), ("k208000", 208000), ("k192000", 192000), ("k160000", 160000), ("k144000", 144000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatusLineRate.setStatus('mandatory')
sdslLineStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 529, 4, 8, 2), )
if mibBuilder.loadTexts: sdslLineStatisticTable.setStatus('mandatory')
sdslLineStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 4, 8, 2, 1), ).setIndexNames((0, "ASCEND-SDSL-MIB", "sdslStatIfEntryIndex"))
if mibBuilder.loadTexts: sdslLineStatisticEntry.setStatus('mandatory')
sdslStatIfEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatIfEntryIndex.setStatus('mandatory')
sdslStatShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatShelfIndex.setStatus('mandatory')
sdslStatSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatSlotIndex.setStatus('mandatory')
sdslStatLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatLineIndex.setStatus('mandatory')
sdslStatConnUpDays = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatConnUpDays.setStatus('mandatory')
sdslStatConnUpHours = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatConnUpHours.setStatus('mandatory')
sdslStatConnUpMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatConnUpMinutes.setStatus('mandatory')
sdslStatRxSignalPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatRxSignalPresent.setStatus('mandatory')
sdslStatLineQualityDb = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatLineQualityDb.setStatus('mandatory')
sdslStatUpDwnCntr = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatUpDwnCntr.setStatus('mandatory')
sdslStatLineSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 1, 2, 3))).clone(namedValues=NamedValues(("other", 4), ("selfTestFailed", 1), ("localLoopBackFailed", 2), ("passed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatLineSelfTest.setStatus('mandatory')
sdslStatBertTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("one-minute", 1), ("two-minutes", 2), ("three-minutes", 3), ("four-minutes", 4), ("five-minutes", 5), ("ten-minutes", 6), ("fifteen-minutes", 7), ("twenty-minutes", 8), ("thirty-minutes", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdslStatBertTimer.setStatus('mandatory')
sdslStatBertEna = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdslStatBertEna.setStatus('mandatory')
sdslStatBertState = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("stopped", 2), ("start-up", 3), ("waiting", 4), ("pend-active", 5), ("bert-los", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatBertState.setStatus('mandatory')
sdslStatBertErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslStatBertErrorCounter.setStatus('mandatory')
sdslLineConfigTable = MibTable((1, 3, 6, 1, 4, 1, 529, 4, 8, 3), )
if mibBuilder.loadTexts: sdslLineConfigTable.setStatus('mandatory')
sdslLineConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 4, 8, 3, 1), ).setIndexNames((0, "ASCEND-SDSL-MIB", "sdslConfigIfEntryIndex"))
if mibBuilder.loadTexts: sdslLineConfigEntry.setStatus('mandatory')
sdslConfigIfEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslConfigIfEntryIndex.setStatus('mandatory')
sdslConfigShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslConfigShelfIndex.setStatus('mandatory')
sdslConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslConfigSlotIndex.setStatus('mandatory')
sdslConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslConfigLineIndex.setStatus('mandatory')
sdslConfigLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2320000, 1568000, 1552000, 1536000, 1168000, 1152000, 1040000, 784000, 768000, 528000, 416000, 400000, 384000, 272000, 208000, 192000, 160000, 144000))).clone(namedValues=NamedValues(("unknown", 1), ("m2320000", 2320000), ("m1568000", 1568000), ("m1552000", 1552000), ("m1536000", 1536000), ("m1168000", 1168000), ("m1152000", 1152000), ("m1040000", 1040000), ("k784000", 784000), ("k768000", 768000), ("k528000", 528000), ("k416000", 416000), ("k400000", 400000), ("k384000", 384000), ("k272000", 272000), ("k208000", 208000), ("k192000", 192000), ("k160000", 160000), ("k144000", 144000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdslConfigLineRate.setStatus('mandatory')
mibBuilder.exportSymbols("ASCEND-SDSL-MIB", sdslLineStatisticTable=sdslLineStatisticTable, sdslStatusSlotIndex=sdslStatusSlotIndex, sdslLineConfigTable=sdslLineConfigTable, sdslStatIfEntryIndex=sdslStatIfEntryIndex, sdslStatusLineState=sdslStatusLineState, sdslStatBertEna=sdslStatBertEna, sdslStatRxSignalPresent=sdslStatRxSignalPresent, sdslStatBertErrorCounter=sdslStatBertErrorCounter, sdslStatusLineIndex=sdslStatusLineIndex, sdslStatusMajorFirmWareVer=sdslStatusMajorFirmWareVer, sdslStatusUnitType=sdslStatusUnitType, sdslStatusLineRate=sdslStatusLineRate, sdslLineStatisticEntry=sdslLineStatisticEntry, sdslConfigLineIndex=sdslConfigLineIndex, sdslStatusMinorFirmWareVer=sdslStatusMinorFirmWareVer, sdslStatBertState=sdslStatBertState, sdslStatusIfEntryIndex=sdslStatusIfEntryIndex, sdslStatusHardWareVer=sdslStatusHardWareVer, sdslStatLineSelfTest=sdslStatLineSelfTest, sdslConfigSlotIndex=sdslConfigSlotIndex, sdslConfigLineRate=sdslConfigLineRate, sdslStatusUpRate=sdslStatusUpRate, sdslLineConfigEntry=sdslLineConfigEntry, sdslStatConnUpHours=sdslStatConnUpHours, sdslStatLineQualityDb=sdslStatLineQualityDb, sdslStatShelfIndex=sdslStatShelfIndex, sdslStatConnUpMinutes=sdslStatConnUpMinutes, sdslStatusVendorId=sdslStatusVendorId, sdslConfigShelfIndex=sdslConfigShelfIndex, sdslStatUpDwnCntr=sdslStatUpDwnCntr, sdslStatLineIndex=sdslStatLineIndex, sdslStatSlotIndex=sdslStatSlotIndex, sdslLineStatusEntry=sdslLineStatusEntry, sdslStatConnUpDays=sdslStatConnUpDays, sdslLineStatusTable=sdslLineStatusTable, sdslStatBertTimer=sdslStatBertTimer, sdslStatusShelfIndex=sdslStatusShelfIndex, sdslStatusDownRate=sdslStatusDownRate, sdslConfigIfEntryIndex=sdslConfigIfEntryIndex)
