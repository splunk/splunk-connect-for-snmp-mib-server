#
# PySNMP MIB module FASTPATH-QOS-DIFFSERV-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FASTPATH-QOS-DIFFSERV-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:58:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
fastPathQOS, = mibBuilder.importSymbols("FASTPATH-QOS-MIB", "fastPathQOS")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetPortNumber, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Counter32, Unsigned32, Counter64, Integer32, ModuleIdentity, TimeTicks, Bits, ObjectIdentity, IpAddress, iso, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "Unsigned32", "Counter64", "Integer32", "ModuleIdentity", "TimeTicks", "Bits", "ObjectIdentity", "IpAddress", "iso", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
StorageType, RowStatus, TextualConvention, PhysAddress, DisplayString, MacAddress, TruthValue, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "RowStatus", "TextualConvention", "PhysAddress", "DisplayString", "MacAddress", "TruthValue", "RowPointer")
fastPathQOSDiffServPrivate = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7))
fastPathQOSDiffServPrivate.setRevisions(('2007-11-12 00:00', '2007-05-23 00:00', '2005-06-23 00:00', '2004-10-06 00:00', '2003-11-21 00:00',))
if mibBuilder.loadTexts: fastPathQOSDiffServPrivate.setLastUpdated('200711120000Z')
if mibBuilder.loadTexts: fastPathQOSDiffServPrivate.setOrganization('Netgear')
class QosBurstSize(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 128)

class IntfDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("in", 1), ("out", 2))

class EtypeValue(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1536, 65535)

class Ipv6AddressPrefix(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

agentDiffServGenStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 1))
agentDiffServGenStatusAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDiffServGenStatusAdminMode.setStatus('current')
agentDiffServGenStatusClassTableSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusClassTableSize.setStatus('current')
agentDiffServGenStatusClassTableMax = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusClassTableMax.setStatus('current')
agentDiffServGenStatusClassRuleTableSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusClassRuleTableSize.setStatus('current')
agentDiffServGenStatusClassRuleTableMax = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusClassRuleTableMax.setStatus('current')
agentDiffServGenStatusPolicyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyTableSize.setStatus('current')
agentDiffServGenStatusPolicyTableMax = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyTableMax.setStatus('current')
agentDiffServGenStatusPolicyInstTableSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyInstTableSize.setStatus('current')
agentDiffServGenStatusPolicyInstTableMax = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyInstTableMax.setStatus('current')
agentDiffServGenStatusPolicyAttrTableSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyAttrTableSize.setStatus('current')
agentDiffServGenStatusPolicyAttrTableMax = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyAttrTableMax.setStatus('current')
agentDiffServGenStatusServiceTableSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusServiceTableSize.setStatus('current')
agentDiffServGenStatusServiceTableMax = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusServiceTableMax.setStatus('current')
agentDiffServClassGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2))
agentDiffServClassIndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServClassIndexNextFree.setStatus('current')
agentDiffServClassTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 2), )
if mibBuilder.loadTexts: agentDiffServClassTable.setStatus('current')
agentDiffServClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 2, 1), ).setIndexNames((0, "FASTPATH-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServClassIndex"))
if mibBuilder.loadTexts: agentDiffServClassEntry.setStatus('current')
agentDiffServClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentDiffServClassIndex.setStatus('current')
agentDiffServClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassName.setStatus('current')
agentDiffServClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("any", 2), ("acl", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassType.setStatus('current')
agentDiffServClassAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassAclNum.setStatus('current')
agentDiffServClassRuleIndexNextFree = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServClassRuleIndexNextFree.setStatus('current')
agentDiffServClassStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 2, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassStorageType.setStatus('current')
agentDiffServClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRowStatus.setStatus('current')
agentDiffServClassAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2), ("ipv6", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassAclType.setStatus('current')
agentDiffServClassProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassProtoType.setStatus('current')
agentDiffServClassRuleTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3), )
if mibBuilder.loadTexts: agentDiffServClassRuleTable.setStatus('current')
agentDiffServClassRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1), ).setIndexNames((0, "FASTPATH-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServClassIndex"), (0, "FASTPATH-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServClassRuleIndex"))
if mibBuilder.loadTexts: agentDiffServClassRuleEntry.setStatus('current')
agentDiffServClassRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentDiffServClassRuleIndex.setStatus('current')
agentDiffServClassRuleMatchEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("cos", 1), ("dstip", 2), ("dstl4port", 3), ("dstmac", 4), ("every", 5), ("ipdscp", 6), ("ipprecedence", 7), ("iptos", 8), ("protocol", 9), ("refclass", 10), ("srcip", 11), ("srcl4port", 12), ("srcmac", 13), ("vlan", 14), ("cos2", 15), ("etype", 16), ("vlanid", 17), ("vlanid2", 18), ("flowLabel", 19), ("srcPrefix", 20), ("dstPrefix", 21)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchEntryType.setStatus('current')
agentDiffServClassRuleMatchCos = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchCos.setStatus('current')
agentDiffServClassRuleMatchDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstIpAddr.setStatus('current')
agentDiffServClassRuleMatchDstIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstIpMask.setStatus('current')
agentDiffServClassRuleMatchDstL4PortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 6), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstL4PortStart.setStatus('current')
agentDiffServClassRuleMatchDstL4PortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 7), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstL4PortEnd.setStatus('current')
agentDiffServClassRuleMatchDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 8), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstMacAddr.setStatus('current')
agentDiffServClassRuleMatchDstMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 9), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstMacMask.setStatus('current')
agentDiffServClassRuleMatchEvery = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchEvery.setStatus('current')
agentDiffServClassRuleMatchIpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpDscp.setStatus('current')
agentDiffServClassRuleMatchIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpPrecedence.setStatus('current')
agentDiffServClassRuleMatchIpTosBits = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpTosBits.setStatus('current')
agentDiffServClassRuleMatchIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpTosMask.setStatus('current')
agentDiffServClassRuleMatchProtocolNum = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchProtocolNum.setStatus('current')
agentDiffServClassRuleMatchRefClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchRefClassIndex.setStatus('current')
agentDiffServClassRuleMatchSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 17), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcIpAddr.setStatus('current')
agentDiffServClassRuleMatchSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 18), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcIpMask.setStatus('current')
agentDiffServClassRuleMatchSrcL4PortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 19), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcL4PortStart.setStatus('current')
agentDiffServClassRuleMatchSrcL4PortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 20), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcL4PortEnd.setStatus('current')
agentDiffServClassRuleMatchSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 21), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcMacAddr.setStatus('current')
agentDiffServClassRuleMatchSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 22), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcMacMask.setStatus('current')
agentDiffServClassRuleMatchVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchVlanId.setStatus('obsolete')
agentDiffServClassRuleMatchExcludeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 24), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchExcludeFlag.setStatus('current')
agentDiffServClassRuleStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 25), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleStorageType.setStatus('current')
agentDiffServClassRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleRowStatus.setStatus('current')
agentDiffServClassRuleMatchCos2 = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchCos2.setStatus('current')
agentDiffServClassRuleMatchEtypeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("custom", 1), ("appletalk", 2), ("arp", 3), ("ibmsna", 4), ("ipv4", 5), ("ipv6", 6), ("ipx", 7), ("mplsmcast", 8), ("mplsucast", 9), ("netbios", 10), ("novell", 11), ("pppoe", 12), ("rarp", 13)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchEtypeKey.setStatus('current')
agentDiffServClassRuleMatchEtypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 29), EtypeValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchEtypeValue.setStatus('current')
agentDiffServClassRuleMatchVlanIdStart = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchVlanIdStart.setStatus('current')
agentDiffServClassRuleMatchVlanIdEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchVlanIdEnd.setStatus('current')
agentDiffServClassRuleMatchVlanId2Start = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchVlanId2Start.setStatus('current')
agentDiffServClassRuleMatchVlanId2End = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchVlanId2End.setStatus('current')
agentDiffServClassRuleMatchFlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchFlowLabel.setStatus('current')
agentDiffServClassRuleMatchDstIpv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 35), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstIpv6Prefix.setStatus('current')
agentDiffServClassRuleMatchSrcIpv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 36), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcIpv6Prefix.setStatus('current')
agentDiffServClassRuleMatchDstIpv6PrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstIpv6PrefixLength.setStatus('current')
agentDiffServClassRuleMatchSrcIpv6PrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 2, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcIpv6PrefixLength.setStatus('current')
agentDiffServPolicyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3))
agentDiffServPolicyIndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyIndexNextFree.setStatus('current')
agentDiffServPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 2), )
if mibBuilder.loadTexts: agentDiffServPolicyTable.setStatus('current')
agentDiffServPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 2, 1), ).setIndexNames((0, "FASTPATH-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyIndex"))
if mibBuilder.loadTexts: agentDiffServPolicyEntry.setStatus('current')
agentDiffServPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentDiffServPolicyIndex.setStatus('current')
agentDiffServPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyName.setStatus('current')
agentDiffServPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 2, 1, 3), IntfDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyType.setStatus('current')
agentDiffServPolicyInstIndexNextFree = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyInstIndexNextFree.setStatus('current')
agentDiffServPolicyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 2, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyStorageType.setStatus('current')
agentDiffServPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyRowStatus.setStatus('current')
agentDiffServPolicyInstTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 3), )
if mibBuilder.loadTexts: agentDiffServPolicyInstTable.setStatus('current')
agentDiffServPolicyInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 3, 1), ).setIndexNames((0, "FASTPATH-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyIndex"), (0, "FASTPATH-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyInstIndex"))
if mibBuilder.loadTexts: agentDiffServPolicyInstEntry.setStatus('current')
agentDiffServPolicyInstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentDiffServPolicyInstIndex.setStatus('current')
agentDiffServPolicyInstClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 3, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyInstClassIndex.setStatus('current')
agentDiffServPolicyInstAttrIndexNextFree = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyInstAttrIndexNextFree.setStatus('current')
agentDiffServPolicyInstStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 3, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyInstStorageType.setStatus('current')
agentDiffServPolicyInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyInstRowStatus.setStatus('current')
agentDiffServPolicyAttrTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4), )
if mibBuilder.loadTexts: agentDiffServPolicyAttrTable.setStatus('current')
agentDiffServPolicyAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1), ).setIndexNames((0, "FASTPATH-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyIndex"), (0, "FASTPATH-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyInstIndex"), (0, "FASTPATH-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyAttrIndex"))
if mibBuilder.loadTexts: agentDiffServPolicyAttrEntry.setStatus('current')
agentDiffServPolicyAttrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentDiffServPolicyAttrIndex.setStatus('current')
agentDiffServPolicyAttrStmtEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("bandwidth", 1), ("expedite", 2), ("markCosVal", 3), ("markIpDscpVal", 4), ("markIpPrecedenceVal", 5), ("policeSimple", 6), ("policeSinglerate", 7), ("policeTworate", 8), ("randomdrop", 9), ("shapeAverage", 10), ("shapePeak", 11), ("assignQueue", 12), ("drop", 13), ("markCos2Val", 14), ("redirect", 15), ("mirror", 16), ("markCosAsSecCos", 17)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtEntryType.setStatus('current')
agentDiffServPolicyAttrStmtBandwidthCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtBandwidthCrate.setStatus('obsolete')
agentDiffServPolicyAttrStmtBandwidthCrateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kbps", 1), ("percentage", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtBandwidthCrateUnits.setStatus('obsolete')
agentDiffServPolicyAttrStmtExpediteCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtExpediteCrate.setStatus('obsolete')
agentDiffServPolicyAttrStmtExpediteCrateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kbps", 1), ("percentage", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtExpediteCrateUnits.setStatus('obsolete')
agentDiffServPolicyAttrStmtExpediteCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 7), QosBurstSize().clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtExpediteCburst.setStatus('obsolete')
agentDiffServPolicyAttrStmtMarkCosVal = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkCosVal.setStatus('current')
agentDiffServPolicyAttrStmtMarkIpDscpVal = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkIpDscpVal.setStatus('current')
agentDiffServPolicyAttrStmtMarkIpPrecedenceVal = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkIpPrecedenceVal.setStatus('current')
agentDiffServPolicyAttrStmtPoliceConformAct = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("drop", 1), ("markdscp", 2), ("markprec", 3), ("send", 4), ("markcos", 5), ("markcos2", 6), ("markcosAsSecCos", 7))).clone('send')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceConformAct.setStatus('current')
agentDiffServPolicyAttrStmtPoliceConformVal = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceConformVal.setStatus('current')
agentDiffServPolicyAttrStmtPoliceExceedAct = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("drop", 1), ("markdscp", 2), ("markprec", 3), ("send", 4), ("markcos", 5), ("markcos2", 6), ("markcosAsSecCos", 7))).clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceExceedAct.setStatus('current')
agentDiffServPolicyAttrStmtPoliceExceedVal = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceExceedVal.setStatus('current')
agentDiffServPolicyAttrStmtPoliceNonconformAct = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("drop", 1), ("markdscp", 2), ("markprec", 3), ("send", 4), ("markcos", 5), ("markcos2", 6), ("markcosAsSecCos", 7))).clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceNonconformAct.setStatus('current')
agentDiffServPolicyAttrStmtPoliceNonconformVal = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceNonconformVal.setStatus('current')
agentDiffServPolicyAttrStmtPoliceSimpleCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSimpleCrate.setStatus('current')
agentDiffServPolicyAttrStmtPoliceSimpleCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 18), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSimpleCburst.setStatus('current')
agentDiffServPolicyAttrStmtPoliceSinglerateCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSinglerateCrate.setStatus('current')
agentDiffServPolicyAttrStmtPoliceSinglerateCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 20), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSinglerateCburst.setStatus('current')
agentDiffServPolicyAttrStmtPoliceSinglerateEburst = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 21), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSinglerateEburst.setStatus('current')
agentDiffServPolicyAttrStmtPoliceTworateCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworateCrate.setStatus('current')
agentDiffServPolicyAttrStmtPoliceTworateCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 23), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworateCburst.setStatus('current')
agentDiffServPolicyAttrStmtPoliceTworatePrate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworatePrate.setStatus('current')
agentDiffServPolicyAttrStmtPoliceTworatePburst = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 25), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworatePburst.setStatus('current')
agentDiffServPolicyAttrStmtRandomdropMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 250000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropMinThresh.setStatus('obsolete')
agentDiffServPolicyAttrStmtRandomdropMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropMaxThresh.setStatus('obsolete')
agentDiffServPolicyAttrStmtRandomdropMaxDropProb = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropMaxDropProb.setStatus('obsolete')
agentDiffServPolicyAttrStmtRandomdropSamplingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropSamplingRate.setStatus('obsolete')
agentDiffServPolicyAttrStmtRandomdropDecayExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropDecayExponent.setStatus('obsolete')
agentDiffServPolicyAttrStmtShapeAverageCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 31), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtShapeAverageCrate.setStatus('obsolete')
agentDiffServPolicyAttrStmtShapePeakCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 32), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtShapePeakCrate.setStatus('obsolete')
agentDiffServPolicyAttrStmtShapePeakPrate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 33), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtShapePeakPrate.setStatus('obsolete')
agentDiffServPolicyAttrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 34), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStorageType.setStatus('current')
agentDiffServPolicyAttrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 35), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrRowStatus.setStatus('current')
agentDiffServPolicyAttrStmtAssignQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 36), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtAssignQueueId.setStatus('current')
agentDiffServPolicyAttrStmtDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 37), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtDrop.setStatus('current')
agentDiffServPolicyAttrStmtMarkCos2Val = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkCos2Val.setStatus('current')
agentDiffServPolicyAttrStmtPoliceColorConformIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 39), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceColorConformIndex.setStatus('current')
agentDiffServPolicyAttrStmtPoliceColorConformMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("blind", 1), ("cos", 2), ("cos2", 3), ("ipdscp", 4), ("ipprec", 5))).clone('blind')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceColorConformMode.setStatus('current')
agentDiffServPolicyAttrStmtPoliceColorConformVal = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceColorConformVal.setStatus('current')
agentDiffServPolicyAttrStmtPoliceColorExceedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 42), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceColorExceedIndex.setStatus('current')
agentDiffServPolicyAttrStmtPoliceColorExceedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("blind", 1), ("cos", 2), ("cos2", 3), ("ipdscp", 4), ("ipprec", 5), ("unused", 6))).clone('blind')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceColorExceedMode.setStatus('current')
agentDiffServPolicyAttrStmtPoliceColorExceedVal = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceColorExceedVal.setStatus('current')
agentDiffServPolicyAttrStmtRedirectIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 45), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRedirectIntf.setStatus('current')
agentDiffServPolicyAttrStmtMirrorIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 46), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMirrorIntf.setStatus('current')
agentDiffServPolicyAttrStmtMarkCosAsSecCos = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 4, 1, 47), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkCosAsSecCos.setStatus('current')
agentDiffServPolicyPerfInTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 5), )
if mibBuilder.loadTexts: agentDiffServPolicyPerfInTable.setStatus('current')
agentDiffServPolicyPerfInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 5, 1), ).setIndexNames((0, "FASTPATH-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyIndex"), (0, "FASTPATH-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyInstIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDiffServPolicyPerfInEntry.setStatus('current')
agentDiffServPolicyPerfInOfferedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInOfferedOctets.setStatus('current')
agentDiffServPolicyPerfInOfferedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInOfferedPackets.setStatus('current')
agentDiffServPolicyPerfInDiscardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInDiscardedOctets.setStatus('current')
agentDiffServPolicyPerfInDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInDiscardedPackets.setStatus('current')
agentDiffServPolicyPerfInHCOfferedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInHCOfferedOctets.setStatus('current')
agentDiffServPolicyPerfInHCOfferedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInHCOfferedPackets.setStatus('current')
agentDiffServPolicyPerfInHCDiscardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInHCDiscardedOctets.setStatus('current')
agentDiffServPolicyPerfInHCDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInHCDiscardedPackets.setStatus('current')
agentDiffServPolicyPerfInStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 5, 1, 9), StorageType().clone('nonVolatile')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInStorageType.setStatus('current')
agentDiffServPolicyPerfInRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 5, 1, 10), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInRowStatus.setStatus('current')
agentDiffServPolicyPerfOutTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6), )
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutTable.setStatus('current')
agentDiffServPolicyPerfOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1), ).setIndexNames((0, "FASTPATH-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyIndex"), (0, "FASTPATH-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyInstIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutEntry.setStatus('current')
agentDiffServPolicyPerfOutTailDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutTailDroppedOctets.setStatus('obsolete')
agentDiffServPolicyPerfOutTailDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutTailDroppedPackets.setStatus('obsolete')
agentDiffServPolicyPerfOutRandomDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutRandomDroppedOctets.setStatus('obsolete')
agentDiffServPolicyPerfOutRandomDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutRandomDroppedPackets.setStatus('obsolete')
agentDiffServPolicyPerfOutShapeDelayedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutShapeDelayedOctets.setStatus('obsolete')
agentDiffServPolicyPerfOutShapeDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutShapeDelayedPackets.setStatus('obsolete')
agentDiffServPolicyPerfOutSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutSentOctets.setStatus('obsolete')
agentDiffServPolicyPerfOutSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutSentPackets.setStatus('obsolete')
agentDiffServPolicyPerfOutHCTailDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCTailDroppedOctets.setStatus('obsolete')
agentDiffServPolicyPerfOutHCTailDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCTailDroppedPackets.setStatus('obsolete')
agentDiffServPolicyPerfOutHCRandomDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCRandomDroppedOctets.setStatus('obsolete')
agentDiffServPolicyPerfOutHCRandomDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCRandomDroppedPackets.setStatus('obsolete')
agentDiffServPolicyPerfOutHCShapeDelayedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCShapeDelayedOctets.setStatus('obsolete')
agentDiffServPolicyPerfOutHCShapeDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCShapeDelayedPackets.setStatus('obsolete')
agentDiffServPolicyPerfOutHCSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCSentOctets.setStatus('obsolete')
agentDiffServPolicyPerfOutHCSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCSentPackets.setStatus('obsolete')
agentDiffServPolicyPerfOutStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 17), StorageType().clone('nonVolatile')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutStorageType.setStatus('current')
agentDiffServPolicyPerfOutRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 18), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutRowStatus.setStatus('current')
agentDiffServPolicyPerfOutOfferedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutOfferedOctets.setStatus('current')
agentDiffServPolicyPerfOutOfferedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutOfferedPackets.setStatus('current')
agentDiffServPolicyPerfOutDiscardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutDiscardedOctets.setStatus('current')
agentDiffServPolicyPerfOutDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutDiscardedPackets.setStatus('current')
agentDiffServPolicyPerfOutHCOfferedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCOfferedOctets.setStatus('current')
agentDiffServPolicyPerfOutHCOfferedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCOfferedPackets.setStatus('current')
agentDiffServPolicyPerfOutHCDiscardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCDiscardedOctets.setStatus('current')
agentDiffServPolicyPerfOutHCDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 3, 6, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCDiscardedPackets.setStatus('current')
agentDiffServServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4))
agentDiffServServiceTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 1), )
if mibBuilder.loadTexts: agentDiffServServiceTable.setStatus('current')
agentDiffServServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 1, 1), ).setIndexNames((0, "FASTPATH-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServServiceIfIndex"), (0, "FASTPATH-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServServiceIfDirection"))
if mibBuilder.loadTexts: agentDiffServServiceEntry.setStatus('current')
agentDiffServServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: agentDiffServServiceIfIndex.setStatus('current')
agentDiffServServiceIfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 1, 1, 2), IntfDirection())
if mibBuilder.loadTexts: agentDiffServServiceIfDirection.setStatus('current')
agentDiffServServicePolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServServicePolicyIndex.setStatus('current')
agentDiffServServiceIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServiceIfOperStatus.setStatus('current')
agentDiffServServiceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 1, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServServiceStorageType.setStatus('current')
agentDiffServServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServServiceRowStatus.setStatus('current')
agentDiffServServicePerfTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 2), )
if mibBuilder.loadTexts: agentDiffServServicePerfTable.setStatus('current')
agentDiffServServicePerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 2, 1), )
agentDiffServServiceEntry.registerAugmentions(("FASTPATH-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServServicePerfEntry"))
agentDiffServServicePerfEntry.setIndexNames(*agentDiffServServiceEntry.getIndexNames())
if mibBuilder.loadTexts: agentDiffServServicePerfEntry.setStatus('current')
agentDiffServServicePerfOfferedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfOfferedOctets.setStatus('current')
agentDiffServServicePerfOfferedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfOfferedPackets.setStatus('current')
agentDiffServServicePerfDiscardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfDiscardedOctets.setStatus('current')
agentDiffServServicePerfDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfDiscardedPackets.setStatus('current')
agentDiffServServicePerfSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfSentOctets.setStatus('current')
agentDiffServServicePerfSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfSentPackets.setStatus('current')
agentDiffServServicePerfHCOfferedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfHCOfferedOctets.setStatus('current')
agentDiffServServicePerfHCOfferedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfHCOfferedPackets.setStatus('current')
agentDiffServServicePerfHCDiscardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfHCDiscardedOctets.setStatus('current')
agentDiffServServicePerfHCDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfHCDiscardedPackets.setStatus('current')
agentDiffServServicePerfHCSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfHCSentOctets.setStatus('current')
agentDiffServServicePerfHCSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 3, 7, 4, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfHCSentPackets.setStatus('current')
mibBuilder.exportSymbols("FASTPATH-QOS-DIFFSERV-PRIVATE-MIB", agentDiffServClassRuleMatchVlanId2End=agentDiffServClassRuleMatchVlanId2End, agentDiffServPolicyInstAttrIndexNextFree=agentDiffServPolicyInstAttrIndexNextFree, agentDiffServPolicyAttrStmtPoliceColorExceedIndex=agentDiffServPolicyAttrStmtPoliceColorExceedIndex, agentDiffServPolicyPerfOutStorageType=agentDiffServPolicyPerfOutStorageType, agentDiffServPolicyPerfOutDiscardedOctets=agentDiffServPolicyPerfOutDiscardedOctets, agentDiffServPolicyAttrStmtPoliceSimpleCrate=agentDiffServPolicyAttrStmtPoliceSimpleCrate, Ipv6AddressPrefix=Ipv6AddressPrefix, agentDiffServPolicyPerfOutEntry=agentDiffServPolicyPerfOutEntry, agentDiffServClassRuleRowStatus=agentDiffServClassRuleRowStatus, agentDiffServPolicyAttrEntry=agentDiffServPolicyAttrEntry, agentDiffServClassRuleMatchIpTosBits=agentDiffServClassRuleMatchIpTosBits, agentDiffServPolicyAttrStmtPoliceConformAct=agentDiffServPolicyAttrStmtPoliceConformAct, agentDiffServPolicyPerfOutTable=agentDiffServPolicyPerfOutTable, agentDiffServServicePerfHCOfferedPackets=agentDiffServServicePerfHCOfferedPackets, agentDiffServClassRuleEntry=agentDiffServClassRuleEntry, agentDiffServPolicyAttrStmtExpediteCburst=agentDiffServPolicyAttrStmtExpediteCburst, agentDiffServPolicyAttrStmtPoliceConformVal=agentDiffServPolicyAttrStmtPoliceConformVal, agentDiffServPolicyAttrStmtPoliceTworateCrate=agentDiffServPolicyAttrStmtPoliceTworateCrate, agentDiffServPolicyPerfOutOfferedPackets=agentDiffServPolicyPerfOutOfferedPackets, agentDiffServPolicyAttrStmtBandwidthCrate=agentDiffServPolicyAttrStmtBandwidthCrate, agentDiffServPolicyAttrStmtPoliceColorExceedMode=agentDiffServPolicyAttrStmtPoliceColorExceedMode, agentDiffServGenStatusServiceTableMax=agentDiffServGenStatusServiceTableMax, agentDiffServPolicyInstIndexNextFree=agentDiffServPolicyInstIndexNextFree, agentDiffServPolicyAttrStmtExpediteCrate=agentDiffServPolicyAttrStmtExpediteCrate, EtypeValue=EtypeValue, agentDiffServClassStorageType=agentDiffServClassStorageType, agentDiffServPolicyAttrTable=agentDiffServPolicyAttrTable, agentDiffServClassRuleMatchEntryType=agentDiffServClassRuleMatchEntryType, agentDiffServPolicyIndex=agentDiffServPolicyIndex, agentDiffServServicePerfHCDiscardedPackets=agentDiffServServicePerfHCDiscardedPackets, agentDiffServPolicyAttrStmtEntryType=agentDiffServPolicyAttrStmtEntryType, agentDiffServPolicyAttrStmtMarkIpDscpVal=agentDiffServPolicyAttrStmtMarkIpDscpVal, agentDiffServPolicyPerfInStorageType=agentDiffServPolicyPerfInStorageType, agentDiffServClassRuleMatchIpDscp=agentDiffServClassRuleMatchIpDscp, agentDiffServPolicyPerfInTable=agentDiffServPolicyPerfInTable, PYSNMP_MODULE_ID=fastPathQOSDiffServPrivate, agentDiffServClassRuleMatchSrcL4PortEnd=agentDiffServClassRuleMatchSrcL4PortEnd, agentDiffServPolicyPerfInHCOfferedOctets=agentDiffServPolicyPerfInHCOfferedOctets, agentDiffServServicePerfHCDiscardedOctets=agentDiffServServicePerfHCDiscardedOctets, agentDiffServPolicyPerfOutHCOfferedPackets=agentDiffServPolicyPerfOutHCOfferedPackets, agentDiffServPolicyPerfOutHCSentOctets=agentDiffServPolicyPerfOutHCSentOctets, agentDiffServGenStatusPolicyTableSize=agentDiffServGenStatusPolicyTableSize, agentDiffServClassIndex=agentDiffServClassIndex, agentDiffServServiceIfDirection=agentDiffServServiceIfDirection, agentDiffServServicePerfHCSentOctets=agentDiffServServicePerfHCSentOctets, agentDiffServPolicyAttrStmtRandomdropMinThresh=agentDiffServPolicyAttrStmtRandomdropMinThresh, agentDiffServPolicyPerfInOfferedOctets=agentDiffServPolicyPerfInOfferedOctets, agentDiffServPolicyPerfOutHCTailDroppedOctets=agentDiffServPolicyPerfOutHCTailDroppedOctets, agentDiffServServiceGroup=agentDiffServServiceGroup, agentDiffServPolicyAttrStmtMarkCos2Val=agentDiffServPolicyAttrStmtMarkCos2Val, agentDiffServClassRuleMatchSrcIpv6PrefixLength=agentDiffServClassRuleMatchSrcIpv6PrefixLength, agentDiffServPolicyAttrStmtPoliceExceedVal=agentDiffServPolicyAttrStmtPoliceExceedVal, agentDiffServGenStatusAdminMode=agentDiffServGenStatusAdminMode, agentDiffServPolicyPerfInOfferedPackets=agentDiffServPolicyPerfInOfferedPackets, agentDiffServClassGroup=agentDiffServClassGroup, agentDiffServClassRuleMatchVlanIdEnd=agentDiffServClassRuleMatchVlanIdEnd, agentDiffServPolicyAttrStmtMarkIpPrecedenceVal=agentDiffServPolicyAttrStmtMarkIpPrecedenceVal, agentDiffServPolicyPerfOutHCShapeDelayedPackets=agentDiffServPolicyPerfOutHCShapeDelayedPackets, agentDiffServClassTable=agentDiffServClassTable, agentDiffServPolicyPerfOutHCShapeDelayedOctets=agentDiffServPolicyPerfOutHCShapeDelayedOctets, agentDiffServPolicyAttrRowStatus=agentDiffServPolicyAttrRowStatus, agentDiffServServicePerfOfferedPackets=agentDiffServServicePerfOfferedPackets, agentDiffServPolicyInstIndex=agentDiffServPolicyInstIndex, agentDiffServClassName=agentDiffServClassName, agentDiffServPolicyAttrStmtBandwidthCrateUnits=agentDiffServPolicyAttrStmtBandwidthCrateUnits, agentDiffServClassRuleMatchDstMacAddr=agentDiffServClassRuleMatchDstMacAddr, agentDiffServClassRuleMatchSrcMacAddr=agentDiffServClassRuleMatchSrcMacAddr, agentDiffServPolicyPerfOutShapeDelayedPackets=agentDiffServPolicyPerfOutShapeDelayedPackets, agentDiffServPolicyAttrStmtExpediteCrateUnits=agentDiffServPolicyAttrStmtExpediteCrateUnits, agentDiffServPolicyPerfOutHCDiscardedOctets=agentDiffServPolicyPerfOutHCDiscardedOctets, agentDiffServClassRuleMatchDstIpAddr=agentDiffServClassRuleMatchDstIpAddr, agentDiffServPolicyAttrStmtPoliceSinglerateEburst=agentDiffServPolicyAttrStmtPoliceSinglerateEburst, agentDiffServPolicyAttrStmtPoliceNonconformVal=agentDiffServPolicyAttrStmtPoliceNonconformVal, agentDiffServGenStatusPolicyTableMax=agentDiffServGenStatusPolicyTableMax, agentDiffServClassRuleMatchProtocolNum=agentDiffServClassRuleMatchProtocolNum, agentDiffServClassRuleMatchFlowLabel=agentDiffServClassRuleMatchFlowLabel, agentDiffServPolicyPerfInHCDiscardedPackets=agentDiffServPolicyPerfInHCDiscardedPackets, agentDiffServPolicyAttrStmtRandomdropDecayExponent=agentDiffServPolicyAttrStmtRandomdropDecayExponent, agentDiffServGenStatusPolicyAttrTableSize=agentDiffServGenStatusPolicyAttrTableSize, agentDiffServClassRuleMatchIpPrecedence=agentDiffServClassRuleMatchIpPrecedence, agentDiffServPolicyInstEntry=agentDiffServPolicyInstEntry, agentDiffServPolicyAttrStmtPoliceExceedAct=agentDiffServPolicyAttrStmtPoliceExceedAct, IntfDirection=IntfDirection, agentDiffServServicePerfSentOctets=agentDiffServServicePerfSentOctets, agentDiffServClassRuleMatchSrcIpMask=agentDiffServClassRuleMatchSrcIpMask, agentDiffServClassRuleMatchSrcMacMask=agentDiffServClassRuleMatchSrcMacMask, agentDiffServPolicyRowStatus=agentDiffServPolicyRowStatus, agentDiffServClassRuleMatchDstMacMask=agentDiffServClassRuleMatchDstMacMask, fastPathQOSDiffServPrivate=fastPathQOSDiffServPrivate, agentDiffServPolicyAttrStmtPoliceNonconformAct=agentDiffServPolicyAttrStmtPoliceNonconformAct, agentDiffServPolicyAttrStmtRandomdropMaxDropProb=agentDiffServPolicyAttrStmtRandomdropMaxDropProb, agentDiffServPolicyAttrStmtPoliceSinglerateCrate=agentDiffServPolicyAttrStmtPoliceSinglerateCrate, agentDiffServPolicyPerfOutHCRandomDroppedOctets=agentDiffServPolicyPerfOutHCRandomDroppedOctets, QosBurstSize=QosBurstSize, agentDiffServPolicyPerfOutTailDroppedOctets=agentDiffServPolicyPerfOutTailDroppedOctets, agentDiffServPolicyAttrStmtMirrorIntf=agentDiffServPolicyAttrStmtMirrorIntf, agentDiffServPolicyPerfOutSentOctets=agentDiffServPolicyPerfOutSentOctets, agentDiffServPolicyIndexNextFree=agentDiffServPolicyIndexNextFree, agentDiffServPolicyAttrStmtDrop=agentDiffServPolicyAttrStmtDrop, agentDiffServPolicyAttrStmtPoliceColorConformVal=agentDiffServPolicyAttrStmtPoliceColorConformVal, agentDiffServClassRuleMatchSrcL4PortStart=agentDiffServClassRuleMatchSrcL4PortStart, agentDiffServPolicyAttrStmtRandomdropMaxThresh=agentDiffServPolicyAttrStmtRandomdropMaxThresh, agentDiffServServicePerfHCSentPackets=agentDiffServServicePerfHCSentPackets, agentDiffServClassRuleMatchVlanIdStart=agentDiffServClassRuleMatchVlanIdStart, agentDiffServPolicyAttrStmtAssignQueueId=agentDiffServPolicyAttrStmtAssignQueueId, agentDiffServServiceIfIndex=agentDiffServServiceIfIndex, agentDiffServPolicyAttrStmtShapePeakPrate=agentDiffServPolicyAttrStmtShapePeakPrate, agentDiffServPolicyAttrStmtMarkCosAsSecCos=agentDiffServPolicyAttrStmtMarkCosAsSecCos, agentDiffServPolicyAttrStmtPoliceColorConformMode=agentDiffServPolicyAttrStmtPoliceColorConformMode, agentDiffServGenStatusGroup=agentDiffServGenStatusGroup, agentDiffServPolicyType=agentDiffServPolicyType, agentDiffServPolicyEntry=agentDiffServPolicyEntry, agentDiffServPolicyAttrIndex=agentDiffServPolicyAttrIndex, agentDiffServServiceRowStatus=agentDiffServServiceRowStatus, agentDiffServPolicyPerfOutRowStatus=agentDiffServPolicyPerfOutRowStatus, agentDiffServClassRuleMatchEtypeKey=agentDiffServClassRuleMatchEtypeKey, agentDiffServPolicyAttrStmtPoliceColorExceedVal=agentDiffServPolicyAttrStmtPoliceColorExceedVal, agentDiffServPolicyPerfOutHCOfferedOctets=agentDiffServPolicyPerfOutHCOfferedOctets, agentDiffServPolicyAttrStmtShapePeakCrate=agentDiffServPolicyAttrStmtShapePeakCrate, agentDiffServClassRuleMatchDstIpv6Prefix=agentDiffServClassRuleMatchDstIpv6Prefix, agentDiffServGenStatusClassRuleTableSize=agentDiffServGenStatusClassRuleTableSize, agentDiffServPolicyGroup=agentDiffServPolicyGroup, agentDiffServPolicyStorageType=agentDiffServPolicyStorageType, agentDiffServPolicyPerfInDiscardedOctets=agentDiffServPolicyPerfInDiscardedOctets, agentDiffServClassRuleStorageType=agentDiffServClassRuleStorageType, agentDiffServClassRuleMatchVlanId=agentDiffServClassRuleMatchVlanId, agentDiffServPolicyPerfInHCDiscardedOctets=agentDiffServPolicyPerfInHCDiscardedOctets, agentDiffServClassIndexNextFree=agentDiffServClassIndexNextFree, agentDiffServPolicyPerfOutOfferedOctets=agentDiffServPolicyPerfOutOfferedOctets, agentDiffServClassRuleMatchExcludeFlag=agentDiffServClassRuleMatchExcludeFlag, agentDiffServPolicyPerfOutDiscardedPackets=agentDiffServPolicyPerfOutDiscardedPackets, agentDiffServServicePolicyIndex=agentDiffServServicePolicyIndex, agentDiffServPolicyPerfOutSentPackets=agentDiffServPolicyPerfOutSentPackets, agentDiffServServicePerfDiscardedOctets=agentDiffServServicePerfDiscardedOctets, agentDiffServClassRuleMatchIpTosMask=agentDiffServClassRuleMatchIpTosMask, agentDiffServPolicyPerfOutRandomDroppedOctets=agentDiffServPolicyPerfOutRandomDroppedOctets, agentDiffServPolicyPerfOutHCDiscardedPackets=agentDiffServPolicyPerfOutHCDiscardedPackets, agentDiffServServiceIfOperStatus=agentDiffServServiceIfOperStatus, agentDiffServPolicyAttrStmtShapeAverageCrate=agentDiffServPolicyAttrStmtShapeAverageCrate, agentDiffServGenStatusPolicyAttrTableMax=agentDiffServGenStatusPolicyAttrTableMax, agentDiffServClassRuleMatchDstL4PortEnd=agentDiffServClassRuleMatchDstL4PortEnd, agentDiffServServicePerfHCOfferedOctets=agentDiffServServicePerfHCOfferedOctets, agentDiffServClassRuleMatchDstIpMask=agentDiffServClassRuleMatchDstIpMask, agentDiffServClassRuleTable=agentDiffServClassRuleTable, agentDiffServPolicyPerfInEntry=agentDiffServPolicyPerfInEntry, agentDiffServServicePerfTable=agentDiffServServicePerfTable, agentDiffServPolicyAttrStmtRandomdropSamplingRate=agentDiffServPolicyAttrStmtRandomdropSamplingRate, agentDiffServServicePerfOfferedOctets=agentDiffServServicePerfOfferedOctets, agentDiffServClassProtoType=agentDiffServClassProtoType, agentDiffServPolicyAttrStmtPoliceTworatePburst=agentDiffServPolicyAttrStmtPoliceTworatePburst, agentDiffServClassAclNum=agentDiffServClassAclNum, agentDiffServPolicyInstTable=agentDiffServPolicyInstTable, agentDiffServClassRuleMatchDstL4PortStart=agentDiffServClassRuleMatchDstL4PortStart, agentDiffServPolicyPerfOutHCTailDroppedPackets=agentDiffServPolicyPerfOutHCTailDroppedPackets, agentDiffServServicePerfEntry=agentDiffServServicePerfEntry, agentDiffServClassRuleMatchCos2=agentDiffServClassRuleMatchCos2, agentDiffServPolicyInstClassIndex=agentDiffServPolicyInstClassIndex, agentDiffServClassRuleIndexNextFree=agentDiffServClassRuleIndexNextFree, agentDiffServPolicyName=agentDiffServPolicyName, agentDiffServPolicyAttrStorageType=agentDiffServPolicyAttrStorageType, agentDiffServPolicyTable=agentDiffServPolicyTable, agentDiffServClassEntry=agentDiffServClassEntry, agentDiffServClassRuleMatchSrcIpAddr=agentDiffServClassRuleMatchSrcIpAddr, agentDiffServPolicyAttrStmtPoliceTworateCburst=agentDiffServPolicyAttrStmtPoliceTworateCburst, agentDiffServPolicyInstRowStatus=agentDiffServPolicyInstRowStatus, agentDiffServClassAclType=agentDiffServClassAclType, agentDiffServPolicyAttrStmtPoliceColorConformIndex=agentDiffServPolicyAttrStmtPoliceColorConformIndex, agentDiffServServicePerfDiscardedPackets=agentDiffServServicePerfDiscardedPackets, agentDiffServClassRuleMatchEtypeValue=agentDiffServClassRuleMatchEtypeValue, agentDiffServClassRuleMatchDstIpv6PrefixLength=agentDiffServClassRuleMatchDstIpv6PrefixLength, agentDiffServPolicyAttrStmtPoliceSimpleCburst=agentDiffServPolicyAttrStmtPoliceSimpleCburst, agentDiffServPolicyPerfInRowStatus=agentDiffServPolicyPerfInRowStatus, agentDiffServClassType=agentDiffServClassType, agentDiffServPolicyPerfOutHCRandomDroppedPackets=agentDiffServPolicyPerfOutHCRandomDroppedPackets, agentDiffServGenStatusClassTableSize=agentDiffServGenStatusClassTableSize, agentDiffServPolicyAttrStmtMarkCosVal=agentDiffServPolicyAttrStmtMarkCosVal, agentDiffServPolicyPerfOutRandomDroppedPackets=agentDiffServPolicyPerfOutRandomDroppedPackets, agentDiffServServiceTable=agentDiffServServiceTable, agentDiffServPolicyInstStorageType=agentDiffServPolicyInstStorageType, agentDiffServServiceEntry=agentDiffServServiceEntry, agentDiffServServiceStorageType=agentDiffServServiceStorageType, agentDiffServPolicyPerfInDiscardedPackets=agentDiffServPolicyPerfInDiscardedPackets, agentDiffServClassRuleIndex=agentDiffServClassRuleIndex, agentDiffServPolicyAttrStmtRedirectIntf=agentDiffServPolicyAttrStmtRedirectIntf, agentDiffServPolicyAttrStmtPoliceTworatePrate=agentDiffServPolicyAttrStmtPoliceTworatePrate, agentDiffServClassRowStatus=agentDiffServClassRowStatus, agentDiffServClassRuleMatchCos=agentDiffServClassRuleMatchCos, agentDiffServClassRuleMatchEvery=agentDiffServClassRuleMatchEvery, agentDiffServClassRuleMatchVlanId2Start=agentDiffServClassRuleMatchVlanId2Start, agentDiffServPolicyPerfInHCOfferedPackets=agentDiffServPolicyPerfInHCOfferedPackets, agentDiffServPolicyPerfOutShapeDelayedOctets=agentDiffServPolicyPerfOutShapeDelayedOctets, agentDiffServGenStatusServiceTableSize=agentDiffServGenStatusServiceTableSize, agentDiffServGenStatusClassRuleTableMax=agentDiffServGenStatusClassRuleTableMax, agentDiffServPolicyPerfOutTailDroppedPackets=agentDiffServPolicyPerfOutTailDroppedPackets, agentDiffServClassRuleMatchRefClassIndex=agentDiffServClassRuleMatchRefClassIndex, agentDiffServPolicyAttrStmtPoliceSinglerateCburst=agentDiffServPolicyAttrStmtPoliceSinglerateCburst, agentDiffServClassRuleMatchSrcIpv6Prefix=agentDiffServClassRuleMatchSrcIpv6Prefix, agentDiffServGenStatusClassTableMax=agentDiffServGenStatusClassTableMax, agentDiffServPolicyPerfOutHCSentPackets=agentDiffServPolicyPerfOutHCSentPackets, agentDiffServGenStatusPolicyInstTableMax=agentDiffServGenStatusPolicyInstTableMax, agentDiffServServicePerfSentPackets=agentDiffServServicePerfSentPackets, agentDiffServGenStatusPolicyInstTableSize=agentDiffServGenStatusPolicyInstTableSize)
