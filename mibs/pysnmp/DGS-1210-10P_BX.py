#
# PySNMP MIB module DGS-1210-10P_BX (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS-1210-10P_BX
# Produced by pysmi-0.3.4 at Mon Apr 29 18:27:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
dot1dBasePort, dot1dBasePortEntry, dot1dBridge = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort", "dot1dBasePortEntry", "dot1dBridge")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
InterfaceIndexOrZero, InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex", "ifIndex")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
SnmpAdminString, SnmpEngineID, SnmpSecurityLevel = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString", "SnmpEngineID", "SnmpSecurityLevel")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, Gauge32, Unsigned32, TimeTicks, Counter32, NotificationType, ObjectIdentity, IpAddress, ModuleIdentity, iso, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Gauge32", "Unsigned32", "TimeTicks", "Counter32", "NotificationType", "ObjectIdentity", "IpAddress", "ModuleIdentity", "iso", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits")
TruthValue, DisplayString, RowStatus, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "MacAddress", "TextualConvention")
d_link = MibIdentifier((1, 3, 6, 1, 4, 1, 171)).setLabel("d-link")
dlink_products = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10)).setLabel("dlink-products")
dlink_DGS12XXSeriesProd = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76)).setLabel("dlink-DGS12XXSeriesProd")
dgs_1210_10pbx = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12)).setLabel("dgs-1210-10pbx")
class VlanIndex(TextualConvention, Unsigned32):
    status = 'current'

class PortList(TextualConvention, OctetString):
    status = 'current'

class BridgeId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd4'

class RmonStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

class LldpManAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 31)

class Ipv6Address(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

companySystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1))
companyIpifGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2))
companyTftpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3))
companyMiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 4))
companyRSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6))
companyDot1qVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7))
companyLA = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8))
companyStaticMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 9))
companyIgsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10))
companyDot1xGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11))
companyQoSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12))
companyTrafficMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13))
companySecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14))
companyACLGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15))
companySyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16))
companyLBD = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17))
companyMirror = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 18))
companyTrapSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19))
companySNTPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20))
companyVoiceVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21))
companyPoEGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22))
companyLLDPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24))
companySNMPV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25))
companyAutoSurveillanceVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26))
companyTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27))
companyGreenSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31))
companyTimeRangeMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32))
companyStaticMcast = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 35))
companyCableDiagnostic = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37))
companyRMON = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47))
companyNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 50))
companydot3azEEE = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 52))
companyDHCPRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61))
companyDHCPLocalRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 62))
companyDHCPv6Relay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63))
sysSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSwitchName.setStatus('current')
sysHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersion.setStatus('current')
sysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFirmwareVersion.setStatus('current')
sysLoginTimeoutInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLoginTimeoutInterval.setStatus('current')
sysLocationName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocationName.setStatus('current')
sysGroupInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(120, 1225), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGroupInterval.setStatus('current')
sysSystemPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSystemPassword.setStatus('current')
sysSafeGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSafeGuardEnable.setStatus('current')
sysRestart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRestart.setStatus('current')
sysSave = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSave.setStatus('current')
sysJumboFrameEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysJumboFrameEnable.setStatus('current')
sysPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 13), )
if mibBuilder.loadTexts: sysPortCtrlTable.setStatus('current')
sysPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 13, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "sysPortCtrlIndex"))
if mibBuilder.loadTexts: sysPortCtrlEntry.setStatus('current')
sysPortCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlIndex.setStatus('current')
sysPortCtrlSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("rate1000M-Full", 1), ("rate100M-Full", 2), ("rate100M-Half", 3), ("rate10M-Full", 4), ("rate10M-Half", 5), ("auto", 6), ("disable", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlSpeed.setStatus('current')
sysPortCtrlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 1), ("rate1000M-Full", 2), ("rate100M-Full", 3), ("rate100M-Half", 4), ("rate10M-Full", 5), ("rate10M-Half", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlOperStatus.setStatus('current')
sysPortCtrlMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("mdi", 2), ("mdix", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlMDI.setStatus('current')
sysPortCtrlFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlFlowControl.setStatus('current')
sysPortCtrlFlowControlOper = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlFlowControlOper.setStatus('current')
sysPortCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fastethernet", 1), ("gigabitethernet", 2), ("fiberwith100BaseSFPModule", 3), ("fiberwith1000BaseSFPModule", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlType.setStatus('current')
sysDhcpAutoConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpAutoConfiguration.setStatus('current')
sysDdp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 30))
sysDdpGlobalOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpGlobalOnOff.setStatus('current')
sysDdpGeneralReportOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 30, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpGeneralReportOnOff.setStatus('current')
sysDdpGeneralReportTimer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 30, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("time-30seconds", 30), ("time-60seconds", 60), ("time-90seconds", 90), ("time-120seconds", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpGeneralReportTimer.setStatus('current')
sysDdpProtStatusTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 30, 4), )
if mibBuilder.loadTexts: sysDdpProtStatusTable.setStatus('current')
sysDdpProtStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 30, 4, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "sysDdpProtStatusIndex"))
if mibBuilder.loadTexts: sysDdpProtStatusEntry.setStatus('current')
sysDdpProtStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 30, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDdpProtStatusIndex.setStatus('current')
sysDdpProtStatusControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 30, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpProtStatusControl.setStatus('current')
dot3azEEEset = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 52, 1))
dot3azTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 52, 1, 1), )
if mibBuilder.loadTexts: dot3azTable.setStatus('current')
dot3azEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 52, 1, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "portD3Index"))
if mibBuilder.loadTexts: dot3azEntry.setStatus('current')
portD3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 52, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portD3Index.setStatus('current')
portD3State = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 52, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portD3State.setStatus('current')
ipv4sysIpAddrCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysIpAddrCfgMode.setStatus('obsolete')
ipv4sysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysIpAddr.setStatus('obsolete')
ipv4sysIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysIpSubnetMask.setStatus('obsolete')
ipv4sysGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysGateway.setStatus('obsolete')
ipifSupportV4V6Info = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5))
sysIpAddrCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddrCfgMode.setStatus('current')
sysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddr.setStatus('current')
sysIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpSubnetMask.setStatus('current')
sysGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGateway.setStatus('current')
ipifName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifName.setStatus('current')
ipifv6GlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6GlobalStatus.setStatus('current')
ipifv6DHCPStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6DHCPStatus.setStatus('current')
ipifv6AutolinkloStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6AutolinkloStatus.setStatus('current')
ipifv6NSRetransmitTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6NSRetransmitTime.setStatus('current')
ipifv6DefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 11), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6DefaultGateway.setStatus('current')
ipifV6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 12), )
if mibBuilder.loadTexts: ipifV6AddressTable.setStatus('current')
ipifV6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 12, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "ipifV6AddressMainIndex"), (0, "DGS-1210-10P_BX", "ipifV6AddressIpAddr"), (0, "DGS-1210-10P_BX", "ipifV6AddressIpPrefix"))
if mibBuilder.loadTexts: ipifV6AddressEntry.setStatus('current')
ipifV6AddressMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 12, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressMainIndex.setStatus('current')
ipifV6AddressIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 12, 1, 2), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpAddr.setStatus('current')
ipifV6AddressIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpPrefix.setStatus('current')
ipifV6AddressIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("anycast", 2), ("linklocal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpType.setStatus('current')
ipifV6AddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifV6AddressRowStatus.setStatus('current')
tftpFwServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwServerIpAddress.setStatus('obsolete')
tftpFwImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwImageFileName.setStatus('obsolete')
tftpFwTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTftpOperation.setStatus('obsolete')
tftpFwTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpFwTftpOperationStatus.setStatus('obsolete')
tftpCfgServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgServerIpAddress.setStatus('obsolete')
tftpConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpConfigFileName.setStatus('obsolete')
tftpConfigTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2), ("progressing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpConfigTftpOperation.setStatus('obsolete')
tftpConfigTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpConfigTftpOperationStatus.setStatus('obsolete')
tftpFwTargetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 9))
tftpFwTargetServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 9, 1), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetServerIpAddress.setStatus('current')
tftpFwTargetServerIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetServerIpType.setStatus('current')
tftpFwTargetInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 9, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetInterfaceName.setStatus('current')
tftpFwTargetImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetImageFileName.setStatus('current')
tftpFwTargetTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetTftpOperation.setStatus('current')
tftpFwTargetTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpFwTargetTftpOperationStatus.setStatus('current')
tftpCfgTargetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 10))
tftpCfgTargetServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 10, 1), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetServerIpAddress.setStatus('current')
tftpCfgTargetServerIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetServerIpType.setStatus('current')
tftpCfgTargetInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 10, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetInterfaceName.setStatus('current')
tftpCfgTargetImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetImageFileName.setStatus('current')
tftpCfgTargetTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2), ("progressing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetTftpOperation.setStatus('current')
tftpCfgTargetTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpCfgTargetTftpOperationStatus.setStatus('current')
miscReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscReset.setStatus('current')
miscStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscStatisticsReset.setStatus('current')
securityIpMacPortBinding = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10))
impbSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 1), )
if mibBuilder.loadTexts: impbSettingTable.setStatus('current')
impbSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "impbPortIndex"))
if mibBuilder.loadTexts: impbSettingEntry.setStatus('current')
impbPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortIndex.setStatus('current')
impbPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortState.setStatus('current')
impbInsIpPacPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbInsIpPacPortState.setStatus('current')
impbDHCPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbDHCPPortState.setStatus('current')
impbSmartTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 2), )
if mibBuilder.loadTexts: impbSmartTable.setStatus('current')
impbSmartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "impbSmartMacAddress"), (0, "DGS-1210-10P_BX", "impbSmartPort"), (0, "DGS-1210-10P_BX", "impbSmartIpAddress"))
if mibBuilder.loadTexts: impbSmartEntry.setStatus('current')
impbSmartMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbSmartMacAddress.setStatus('current')
impbSmartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbSmartPort.setStatus('current')
impbSmartIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbSmartIpAddress.setStatus('current')
impbSmartVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbSmartVlanId.setStatus('current')
impbSmartBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbSmartBinding.setStatus('current')
impbWhiteListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 3), )
if mibBuilder.loadTexts: impbWhiteListTable.setStatus('current')
impbWhiteListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 3, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "impbWhiteListIpAddress"), (0, "DGS-1210-10P_BX", "impbWhiteListMacAddress"))
if mibBuilder.loadTexts: impbWhiteListEntry.setStatus('current')
impbWhiteListIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbWhiteListIpAddress.setStatus('current')
impbWhiteListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbWhiteListMacAddress.setStatus('current')
impbWhiteListPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbWhiteListPort.setStatus('current')
impbWhiteListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: impbWhiteListRowStatus.setStatus('current')
impbBlackListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 4), )
if mibBuilder.loadTexts: impbBlackListTable.setStatus('current')
impbBlackListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 4, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "impbBlackListMacAddress"), (0, "DGS-1210-10P_BX", "impbBlackListVlanId"), (0, "DGS-1210-10P_BX", "impbBlackListPort"))
if mibBuilder.loadTexts: impbBlackListEntry.setStatus('current')
impbBlackListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlackListMacAddress.setStatus('current')
impbBlackListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlackListVlanId.setStatus('current')
impbBlackListPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlackListPort.setStatus('current')
impbBlackListIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlackListIpAddress.setStatus('current')
impbBlackListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("deleted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbBlackListStatus.setStatus('current')
impbAutoScanIpAddressFrom = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanIpAddressFrom.setStatus('current')
impbAutoScanIpAddressTo = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanIpAddressTo.setStatus('current')
impbAutoScanStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("scan", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanStatus.setStatus('current')
stpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1))
rstpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rstpStatus.setStatus('current')
stpVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpVersion.setStatus('current')
stpPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPriority.setStatus('current')
stpTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpTxHoldCount.setStatus('current')
stpProtocolSpecification = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpProtocolSpecification.setStatus('current')
stpTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpTimeSinceTopologyChange.setStatus('current')
stpTopChanges = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpTopChanges.setStatus('current')
stpDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpDesignatedRoot.setStatus('current')
stpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootCost.setStatus('current')
stpRootPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootPort.setStatus('current')
stpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpMaxAge.setStatus('current')
stpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpHelloTime.setStatus('current')
stpHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpHoldTime.setStatus('current')
stpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpForwardDelay.setStatus('current')
stpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 15), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeMaxAge.setStatus('current')
stpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 16), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeHelloTime.setStatus('current')
stpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 17), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeForwardDelay.setStatus('current')
stpPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2), )
if mibBuilder.loadTexts: stpPortTable.setStatus('current')
stpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "stpPort"))
if mibBuilder.loadTexts: stpPortEntry.setStatus('current')
stpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPort.setStatus('current')
stpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortPriority.setStatus('current')
stpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortState.setStatus('current')
stpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortEnable.setStatus('current')
stpAdminPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpAdminPortPathCost.setStatus('current')
stpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortPathCost.setStatus('current')
stpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedRoot.setStatus('current')
stpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedCost.setStatus('current')
stpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedBridge.setStatus('current')
stpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedPort.setStatus('current')
stpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortForwardTransitions.setStatus('current')
stpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortProtocolMigration.setStatus('current')
stpPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortOperEdgePort.setStatus('current')
stpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortAdminPointToPoint.setStatus('current')
stpPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortOperPointToPoint.setStatus('current')
stpPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 0), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortEdge.setStatus('current')
stpPortRestrictedRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortRestrictedRole.setStatus('current')
stpPortRestrictedTCN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortRestrictedTCN.setStatus('current')
staticMcastTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 35, 1), )
if mibBuilder.loadTexts: staticMcastTable.setStatus('current')
staticMcastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 35, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "staticMcastVlanID"), (0, "DGS-1210-10P_BX", "staticMcastMac"), (0, "DGS-1210-10P_BX", "staticMcastEgressPorts"))
if mibBuilder.loadTexts: staticMcastEntry.setStatus('current')
staticMcastVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 35, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastVlanID.setStatus('current')
staticMcastMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 35, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastMac.setStatus('current')
staticMcastEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 35, 1, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastEgressPorts.setStatus('current')
staticMcastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 35, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMcastStatus.setStatus('current')
dot1qVlanManagementOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanManagementOnOff.setStatus('current')
dot1qVlanManagementid = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 3), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanManagementid.setStatus('current')
dot1qVlanAsyOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanAsyOnOff.setStatus('current')
dot1qVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 6), )
if mibBuilder.loadTexts: dot1qVlanTable.setStatus('current')
dot1qVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 6, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dot1qVlanName"))
if mibBuilder.loadTexts: dot1qVlanEntry.setStatus('current')
dot1qVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 6, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanName.setStatus('current')
dot1qVlanEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 6, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanEgressPorts.setStatus('current')
dot1qVlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 6, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanUntaggedPorts.setStatus('current')
dot1qVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanRowStatus.setStatus('current')
dot1qVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 7), )
if mibBuilder.loadTexts: dot1qVlanPortTable.setStatus('current')
dot1qVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 7, 1), )
dot1dBasePortEntry.registerAugmentions(("DGS-1210-10P_BX", "dot1qVlanPortEntry"))
dot1qVlanPortEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: dot1qVlanPortEntry.setStatus('current')
dot1qVlanPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 7, 1, 1), VlanIndex().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanPvid.setStatus('current')
dot1qVlanUngisterMCFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 8), )
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterTable.setStatus('current')
dot1qVlanUngisterMCFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 8, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dot1qVlanUngisterMCFilterVlanId"))
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterEntry.setStatus('current')
dot1qVlanUngisterMCFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterVlanId.setStatus('current')
dot1qVlanUngisterMCFiltermode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("filter", 1), ("forward", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanUngisterMCFiltermode.setStatus('current')
laSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 1))
laPortControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 2))
class PortLaMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("lacp", 1), ("static", 2), ("disable", 3))

class LacpKey(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

laStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laStatus.setStatus('current')
laPortChannelTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 1, 3), )
if mibBuilder.loadTexts: laPortChannelTable.setStatus('current')
laPortChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 1, 3, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "laPortChannelIfIndex"))
if mibBuilder.loadTexts: laPortChannelEntry.setStatus('current')
laPortChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 1, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortChannelIfIndex.setStatus('current')
laPortChannelMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 1, 3, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMemberList.setStatus('current')
laPortChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 1, 3, 1, 3), PortLaMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMode.setStatus('current')
laPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 2, 1), )
if mibBuilder.loadTexts: laPortControlTable.setStatus('current')
laPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "laPortControlIndex"))
if mibBuilder.loadTexts: laPortControlEntry.setStatus('current')
laPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortControlIndex.setStatus('current')
laPortActorActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorActivity.setStatus('current')
laPortActorTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorTimeout.setStatus('current')
staticDisableAutoLearn = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticDisableAutoLearn.setStatus('current')
staticAutoLearningList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 9, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticAutoLearningList.setStatus('current')
staticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 9, 3), )
if mibBuilder.loadTexts: staticTable.setStatus('current')
staticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 9, 3, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "staticVlanID"), (0, "DGS-1210-10P_BX", "staticMac"), (0, "DGS-1210-10P_BX", "staticPort"))
if mibBuilder.loadTexts: staticEntry.setStatus('current')
staticVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticVlanID.setStatus('current')
staticMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 9, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMac.setStatus('current')
staticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticPort.setStatus('current')
staticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 9, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticStatus.setStatus('current')
igsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 1))
igsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3))
igsStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsStatus.setStatus('current')
igsRouterPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsRouterPortPurgeInterval.setStatus('current')
igsHostPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(130, 153025)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsHostPortPurgeInterval.setStatus('current')
igsRobustnessValue = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsRobustnessValue.setStatus('current')
igsGrpQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsGrpQueryInterval.setStatus('current')
igsQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsQueryInterval.setStatus('current')
igsQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsQueryMaxResponseTime.setStatus('current')
igsReportToAllPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsReportToAllPort.setStatus('current')
igsVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 3), )
if mibBuilder.loadTexts: igsVlanRouterTable.setStatus('current')
igsVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 3, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "igsVlanRouterVlanId"))
if mibBuilder.loadTexts: igsVlanRouterEntry.setStatus('current')
igsVlanRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterVlanId.setStatus('current')
igsVlanRouterPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 3, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterPortList.setStatus('current')
igsVlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 4), )
if mibBuilder.loadTexts: igsVlanFilterTable.setStatus('current')
igsVlanFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 4, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "igsVlanFilterVlanId"))
if mibBuilder.loadTexts: igsVlanFilterEntry.setStatus('current')
igsVlanFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanFilterVlanId.setStatus('current')
igsVlanSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanSnoopStatus.setStatus('current')
igsVlanQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQuerier.setStatus('current')
igsVlanCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanCfgQuerier.setStatus('current')
igsVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQueryInterval.setStatus('current')
igsVlanRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 4, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanRtrPortList.setStatus('current')
igsVlanFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanFastLeave.setStatus('current')
igsVlanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 5), )
if mibBuilder.loadTexts: igsVlanMulticastGroupTable.setStatus('current')
igsVlanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 5, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "igsVlanMulticastGroupVlanId"), (0, "DGS-1210-10P_BX", "igsVlanMulticastGroupIpAddress"))
if mibBuilder.loadTexts: igsVlanMulticastGroupEntry.setStatus('current')
igsVlanMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupVlanId.setStatus('current')
igsVlanMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 5, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupIpAddress.setStatus('current')
igsVlanMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupMacAddress.setStatus('current')
igsVlanMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupPortList.setStatus('current')
dot1xAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2))
dot1xAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthStatus.setStatus('current')
dot1xAuthQuietPeriod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthQuietPeriod.setStatus('current')
dot1xAuthTxPeriod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthTxPeriod.setStatus('current')
dot1xAuthSuppTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthSuppTimeout.setStatus('current')
dot1xAuthServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthServerTimeout.setStatus('current')
dot1xAuthMaxReq = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthMaxReq.setStatus('current')
dot1xAuthReAuthPeriod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthReAuthPeriod.setStatus('current')
dot1xAuthReAuthEnabled = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthReAuthEnabled.setStatus('current')
dot1xAuthConfigPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 9), )
if mibBuilder.loadTexts: dot1xAuthConfigPortTable.setStatus('current')
dot1xAuthConfigPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 9, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dot1xAuthConfigPortNumber"))
if mibBuilder.loadTexts: dot1xAuthConfigPortEntry.setStatus('current')
dot1xAuthConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthConfigPortNumber.setStatus('current')
dot1xAuthConfigPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceUnauthorized", 1), ("auto", 2), ("forceAuthorized", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthConfigPortControl.setStatus('current')
dot1xAuthConfigPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authorized", 1), ("unauthorized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthConfigPortStatus.setStatus('current')
dot1xAuthConfigPortSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 9, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthConfigPortSessionTime.setStatus('current')
dot1xAuthConfigPortSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 9, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthConfigPortSessionUserName.setStatus('current')
swAuthCtrlPktFwdMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthCtrlPktFwdMode.setStatus('current')
radius = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 1))
ipv4radiusServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4radiusServerAddress.setStatus('obsolete')
ipv4radiusServerSharedSecret = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4radiusServerSharedSecret.setStatus('obsolete')
radiusServerTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 1, 3))
swRadiusServerIPType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swRadiusServerIPType.setStatus('current')
swRadiusServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 1, 3, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swRadiusServerAddress.setStatus('current')
swRadiusServerInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 1, 3, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swRadiusServerInterfaceName.setStatus('current')
swRadiusServerSharedSecret = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 1, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swRadiusServerSharedSecret.setStatus('current')
qosMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1p", 1), ("dscp", 2), ("tos", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMode.setStatus('current')
queuingMechanism = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strictPriority", 1), ("wrr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queuingMechanism.setStatus('current')
qosQ1p = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 3))
dot1pPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 3, 1), )
if mibBuilder.loadTexts: dot1pPortTable.setStatus('current')
dot1pPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 3, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dot1pPortIndex"))
if mibBuilder.loadTexts: dot1pPortEntry.setStatus('current')
dot1pPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pPortIndex.setStatus('current')
dot1pPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("highest", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1pPortPriority.setStatus('current')
qosDiffServ = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4))
qosDiffServEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDiffServEnable.setStatus('current')
qosDiffServTypeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2))
qosDiffServType00 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType00.setStatus('current')
qosDiffServType01 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType01.setStatus('current')
qosDiffServType02 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType02.setStatus('current')
qosDiffServType03 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType03.setStatus('current')
qosDiffServType04 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType04.setStatus('current')
qosDiffServType05 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType05.setStatus('current')
qosDiffServType06 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType06.setStatus('current')
qosDiffServType07 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType07.setStatus('current')
qosDiffServType08 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType08.setStatus('current')
qosDiffServType09 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType09.setStatus('current')
qosDiffServType10 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType10.setStatus('current')
qosDiffServType11 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType11.setStatus('current')
qosDiffServType12 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType12.setStatus('current')
qosDiffServType13 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType13.setStatus('current')
qosDiffServType14 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType14.setStatus('current')
qosDiffServType15 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType15.setStatus('current')
qosDiffServType16 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType16.setStatus('current')
qosDiffServType17 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType17.setStatus('current')
qosDiffServType18 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType18.setStatus('current')
qosDiffServType19 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType19.setStatus('current')
qosDiffServType20 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType20.setStatus('current')
qosDiffServType21 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType21.setStatus('current')
qosDiffServType22 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType22.setStatus('current')
qosDiffServType23 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType23.setStatus('current')
qosDiffServType24 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType24.setStatus('current')
qosDiffServType25 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType25.setStatus('current')
qosDiffServType26 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType26.setStatus('current')
qosDiffServType27 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType27.setStatus('current')
qosDiffServType28 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType28.setStatus('current')
qosDiffServType29 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType29.setStatus('current')
qosDiffServType30 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType30.setStatus('current')
qosDiffServType31 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType31.setStatus('current')
qosDiffServType32 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType32.setStatus('current')
qosDiffServType33 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType33.setStatus('current')
qosDiffServType34 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType34.setStatus('current')
qosDiffServType35 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType35.setStatus('current')
qosDiffServType36 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType36.setStatus('current')
qosDiffServType37 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType37.setStatus('current')
qosDiffServType38 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType38.setStatus('current')
qosDiffServType39 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType39.setStatus('current')
qosDiffServType40 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType40.setStatus('current')
qosDiffServType41 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType41.setStatus('current')
qosDiffServType42 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType42.setStatus('current')
qosDiffServType43 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType43.setStatus('current')
qosDiffServType44 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType44.setStatus('current')
qosDiffServType45 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType45.setStatus('current')
qosDiffServType46 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType46.setStatus('current')
qosDiffServType47 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType47.setStatus('current')
qosDiffServType48 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType48.setStatus('current')
qosDiffServType49 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType49.setStatus('current')
qosDiffServType50 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType50.setStatus('current')
qosDiffServType51 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType51.setStatus('current')
qosDiffServType52 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType52.setStatus('current')
qosDiffServType53 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType53.setStatus('current')
qosDiffServType54 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType54.setStatus('current')
qosDiffServType55 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType55.setStatus('current')
qosDiffServType56 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType56.setStatus('current')
qosDiffServType57 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType57.setStatus('current')
qosDiffServType58 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType58.setStatus('current')
qosDiffServType59 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType59.setStatus('current')
qosDiffServType60 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType60.setStatus('current')
qosDiffServType61 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType61.setStatus('current')
qosDiffServType62 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType62.setStatus('current')
qosDiffServType63 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType63.setStatus('current')
qosTOS = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5))
qosTOSEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosTOSEnable.setStatus('current')
qosTOSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 2))
qosTOSType00 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType00.setStatus('current')
qosTOSType01 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType01.setStatus('current')
qosTOSType02 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType02.setStatus('current')
qosTOSType03 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType03.setStatus('current')
qosTOSType04 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType04.setStatus('current')
qosTOSType05 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType05.setStatus('current')
qosTOSType06 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType06.setStatus('current')
qosTOSType07 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType07.setStatus('current')
bandwidthCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 1))
bandwidthCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 1, 2), )
if mibBuilder.loadTexts: bandwidthCtrlTable.setStatus('current')
bandwidthCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 1, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "bandwidthCtrlIndex"))
if mibBuilder.loadTexts: bandwidthCtrlEntry.setStatus('current')
bandwidthCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthCtrlIndex.setStatus('current')
bandwidthCtrlTxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlTxThreshold.setStatus('current')
bandwidthCtrlRxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlRxThreshold.setStatus('current')
broadcastStormCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 3))
broadcastStormCtrlGlobalOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlGlobalOnOff.setStatus('current')
broadcastStormCtrlLimitType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcastonly", 1), ("multicastAndbroadcast", 2), ("dlfMulticastAndbroadcast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlLimitType.setStatus('current')
broadcastStormCtrlThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlThreshold.setStatus('current')
securityTrustedHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1))
trustedHostStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trustedHostStatus.setStatus('current')
ipv4trustedHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 2), )
if mibBuilder.loadTexts: ipv4trustedHostTable.setStatus('obsolete')
ipv4trustedHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "ipv4trustedHostIpAddr"), (0, "DGS-1210-10P_BX", "ipv4trustedHostIpMask"))
if mibBuilder.loadTexts: ipv4trustedHostEntry.setStatus('obsolete')
ipv4trustedHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4trustedHostIpAddr.setStatus('obsolete')
ipv4trustedHostIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4trustedHostIpMask.setStatus('obsolete')
ipv4trustedHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4trustedHostRowStatus.setStatus('obsolete')
trustedHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 3), )
if mibBuilder.loadTexts: trustedHostTable.setStatus('current')
trustedHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 3, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "trustedHostIPType"), (0, "DGS-1210-10P_BX", "trustedHostIpAddr"), (0, "DGS-1210-10P_BX", "trustedHostIpMask"))
if mibBuilder.loadTexts: trustedHostEntry.setStatus('current')
trustedHostIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIPType.setStatus('current')
trustedHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 3, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpAddr.setStatus('current')
trustedHostIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 3, 1, 3), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpMask.setStatus('current')
trustedHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trustedHostRowStatus.setStatus('current')
securityARPSpoofPrevent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 3))
aRPSpoofPreventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 3, 1), )
if mibBuilder.loadTexts: aRPSpoofPreventTable.setStatus('current')
aRPSpoofPreventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 3, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "aRPSpoofPreventIpAddr"))
if mibBuilder.loadTexts: aRPSpoofPreventEntry.setStatus('current')
aRPSpoofPreventIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 3, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: aRPSpoofPreventIpAddr.setStatus('current')
aRPSpoofPreventMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 3, 1, 1, 2), MacAddress().clone(hexValue="000102030405")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRPSpoofPreventMacAddress.setStatus('current')
aRPSpoofPreventPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 3, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRPSpoofPreventPortList.setStatus('current')
aRPSpoofPreventRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aRPSpoofPreventRowStatus.setStatus('current')
securitySSL = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 5))
sslSecurityHttpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslSecurityHttpStatus.setStatus('current')
sslCiphers = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 5, 2))
sslCipherSuiteList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 5, 2, 1), Bits().clone(namedValues=NamedValues(("rsa-null-md5", 0), ("rsa-null-sha", 1), ("rsa-des-sha", 2), ("rsa-3des-sha", 3), ("dh-rsa-des-sha", 4), ("dh-rsa-3des-sha", 5), ("rsa-exp1024-des-sha", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCipherSuiteList.setStatus('current')
securityPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 2))
portSecTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 2, 1), )
if mibBuilder.loadTexts: portSecTable.setStatus('current')
portSecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "portSecIndex"))
if mibBuilder.loadTexts: portSecEntry.setStatus('current')
portSecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecIndex.setStatus('current')
portSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecState.setStatus('current')
portSecMLA = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMLA.setStatus('current')
cableDiagTriggerIndex = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableDiagTriggerIndex.setStatus('current')
cableDiagPair1TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair1TestResult.setStatus('current')
cableDiagPair1FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair1FaultDistance.setStatus('current')
cableDiagPair2TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair2TestResult.setStatus('current')
cableDiagPair2FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair2FaultDistance.setStatus('current')
cableDiagPair3TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair3TestResult.setStatus('current')
cableDiagPair3FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair3FaultDistance.setStatus('current')
cableDiagPair4TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair4TestResult.setStatus('current')
cableDiagPair4FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair4FaultDistance.setStatus('current')
cableDiagLengthinRange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("less50", 1), ("from50to80", 2), ("from80to100", 3), ("from100to140", 4), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagLengthinRange.setStatus('current')
aclProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1))
ipv4aclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1), )
if mibBuilder.loadTexts: ipv4aclProfileTable.setStatus('obsolete')
ipv4aclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "ipv4aclProfileNo"))
if mibBuilder.loadTexts: ipv4aclProfileEntry.setStatus('obsolete')
ipv4aclProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclProfileNo.setStatus('obsolete')
ipv4aclProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 12))).clone(namedValues=NamedValues(("l2", 1), ("l3", 2), ("impb", 3), ("arpSP_permit", 4), ("arpSP_deny", 5), ("voiceVlan", 6), ("surveillanceVlan", 7), ("aclQoS", 8), ("dhcpServerScreen", 10), ("zone_defense", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileType.setStatus('obsolete')
ipv4aclProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclProfileRuleCount.setStatus('obsolete')
ipv4aclProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileMask.setStatus('obsolete')
ipv4aclProfileDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileDstMacAddrMask.setStatus('obsolete')
ipv4aclProfileSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileSrcMacAddrMask.setStatus('obsolete')
ipv4aclProfileIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileIPProtocol.setStatus('obsolete')
ipv4aclProfileDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 8), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileDstIpAddrMask.setStatus('obsolete')
ipv4aclProfileSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileSrcIpAddrMask.setStatus('obsolete')
ipv4aclProfileDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 10), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileDstPortMask.setStatus('obsolete')
ipv4aclProfileSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 11), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileSrcPortMask.setStatus('obsolete')
ipv4aclProfileArpSenderMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 12), MacAddress().clone(hexValue="FFFFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclProfileArpSenderMacAddrMask.setStatus('obsolete')
ipv4aclProfileArpSenderIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 13), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclProfileArpSenderIpAddrMask.setStatus('obsolete')
ipv4aclProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4aclProfileStatus.setStatus('obsolete')
aclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2), )
if mibBuilder.loadTexts: aclProfileTable.setStatus('current')
aclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "aclProfileNo"))
if mibBuilder.loadTexts: aclProfileEntry.setStatus('current')
aclProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileNo.setStatus('current')
aclProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12))).clone(namedValues=NamedValues(("l2", 1), ("l3v4", 2), ("impb", 3), ("arpSP_permit", 4), ("arpSP_deny", 5), ("voiceVlan", 6), ("surveillanceVlan", 7), ("aclQoS", 8), ("dhcpServerScreen", 10), ("l3v6", 11), ("zone_defense", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileType.setStatus('current')
aclProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileRuleCount.setStatus('current')
aclProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileMask.setStatus('current')
aclProfileDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstMacAddrMask.setStatus('current')
aclProfileSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcMacAddrMask.setStatus('current')
aclProfileIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 58, 17))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("icmpv6", 58), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileIPProtocol.setStatus('current')
aclProfileDstIpAddrMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstIpAddrMaskType.setStatus('current')
aclProfileDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 9), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstIpAddrMask.setStatus('current')
aclProfileSrcIpAddrMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcIpAddrMaskType.setStatus('current')
aclProfileSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 11), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcIpAddrMask.setStatus('current')
aclProfileDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 12), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstPortMask.setStatus('current')
aclProfileSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 13), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcPortMask.setStatus('current')
aclProfileArpSenderMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 14), MacAddress().clone(hexValue="FFFFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileArpSenderMacAddrMask.setStatus('current')
aclProfileArpSenderIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 15), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileArpSenderIpAddrMask.setStatus('current')
aclProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclProfileStatus.setStatus('current')
aclL2Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2))
aclL2RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1), )
if mibBuilder.loadTexts: aclL2RuleTable.setStatus('current')
aclL2RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "aclL2AccessID"), (0, "DGS-1210-10P_BX", "aclL2ProfileID"))
if mibBuilder.loadTexts: aclL2RuleEntry.setStatus('current')
aclL2AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2AccessID.setStatus('current')
aclL2ProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2ProfileID.setStatus('current')
aclL2RuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1501, 65535), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleEtherType.setStatus('current')
aclL2RuleDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleDstMacAddr.setStatus('current')
aclL2RuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddr.setStatus('current')
aclL2RuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleVlanId.setStatus('current')
aclL2Rule1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2Rule1pPriority.setStatus('current')
aclL2RuleDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleDstMacAddrMask.setStatus('current')
aclL2RuleSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddrMask.setStatus('current')
aclL2RuleInPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 10), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleInPortList.setStatus('current')
aclL2RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleAction.setStatus('current')
aclL2RulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RulePriority.setStatus('current')
aclL2RuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleReplacePriority.setStatus('current')
aclL2RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL2RuleStatus.setStatus('current')
aclL3Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3))
aclL3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1), )
if mibBuilder.loadTexts: aclL3RuleTable.setStatus('current')
aclL3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "aclL3RuleAccessID"), (0, "DGS-1210-10P_BX", "aclL3RuleProfileNo"))
if mibBuilder.loadTexts: aclL3RuleEntry.setStatus('current')
aclL3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleAccessID.setStatus('current')
aclL3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleProfileNo.setStatus('current')
aclL3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 17))).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleProtocol.setStatus('current')
aclL3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleICMPMessageType.setStatus('current')
aclL3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleICMPMessageCode.setStatus('current')
aclL3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleDstIpAddr.setStatus('current')
aclL3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleSrcIpAddr.setStatus('current')
aclL3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 8), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleDstIpAddrMask.setStatus('current')
aclL3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleSrcIpAddrMask.setStatus('current')
aclL3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleTcpUdpDstPort.setStatus('current')
aclL3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleTcpUdpSrcPort.setStatus('current')
aclL3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleTcpUdpDstPortMask.setStatus('current')
aclL3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleTcpUdpSrcPortMask.setStatus('current')
aclL3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpAckBit.setStatus('current')
aclL3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpRstBit.setStatus('current')
aclL3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpUrgBit.setStatus('current')
aclL3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpPshBit.setStatus('current')
aclL3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpSynBit.setStatus('current')
aclL3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpFinBit.setStatus('current')
aclL3RuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleDscp.setStatus('current')
aclL3RuleIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleIgmpType.setStatus('current')
aclL3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 22), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RulePortList.setStatus('current')
aclL3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleAction.setStatus('current')
aclL3RulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RulePriority.setStatus('current')
aclL3RuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleReplacePriority.setStatus('current')
aclL3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleStatus.setStatus('current')
aclv6L3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2), )
if mibBuilder.loadTexts: aclv6L3RuleTable.setStatus('current')
aclv6L3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "aclv6L3RuleAccessID"), (0, "DGS-1210-10P_BX", "aclv6L3RuleProfileNo"))
if mibBuilder.loadTexts: aclv6L3RuleEntry.setStatus('current')
aclv6L3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleAccessID.setStatus('current')
aclv6L3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleProfileNo.setStatus('current')
aclv6L3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 58, 17))).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("tcp", 6), ("icmpv6", 58), ("udp", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleProtocol.setStatus('current')
aclv6L3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleICMPMessageType.setStatus('current')
aclv6L3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleICMPMessageCode.setStatus('current')
aclv6L3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 6), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleDstIpAddr.setStatus('current')
aclv6L3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 7), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleSrcIpAddr.setStatus('current')
aclv6L3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 8), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleDstIpAddrMask.setStatus('current')
aclv6L3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 9), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleSrcIpAddrMask.setStatus('current')
aclv6L3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpDstPort.setStatus('current')
aclv6L3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpSrcPort.setStatus('current')
aclv6L3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpDstPortMask.setStatus('current')
aclv6L3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpSrcPortMask.setStatus('current')
aclv6L3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpAckBit.setStatus('current')
aclv6L3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpRstBit.setStatus('current')
aclv6L3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpUrgBit.setStatus('current')
aclv6L3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpPshBit.setStatus('current')
aclv6L3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpSynBit.setStatus('current')
aclv6L3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpFinBit.setStatus('current')
aclv6L3RuleTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTrafficClass.setStatus('current')
aclv6L3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 21), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RulePortList.setStatus('current')
aclv6L3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleAction.setStatus('current')
aclv6L3RulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RulePriority.setStatus('current')
aclv6L3RuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleReplacePriority.setStatus('current')
aclv6L3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleStatus.setStatus('current')
snmpGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGlobalState.setStatus('current')
snmpV3User = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2))
snmpV3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3))
snmpV3ViewTree = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 4))
snmpV3Community = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 5))
snmpV3Host = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6))
snmpV3EngineID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 7), SnmpEngineID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3EngineID.setStatus('current')
snmpV3Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 8))
snmpV3UserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1), )
if mibBuilder.loadTexts: snmpV3UserTable.setStatus('current')
snmpV3UserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "snmpV3UserName"), (0, "DGS-1210-10P_BX", "snmpV3UserVersion"))
if mibBuilder.loadTexts: snmpV3UserEntry.setStatus('current')
snmpV3UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserName.setStatus('current')
snmpV3UserVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserVersion.setStatus('current')
snmpV3UserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserGroupName.setStatus('current')
snmpV3UserAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocol.setStatus('current')
snmpV3UserAuthProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocolPassword.setStatus('current')
snmpV3UserPrivProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocol.setStatus('current')
snmpV3UserPrivProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocolPassword.setStatus('current')
snmpV3UserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserStatus.setStatus('current')
snmpV3GroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3, 1), )
if mibBuilder.loadTexts: snmpV3GroupTable.setStatus('current')
snmpV3GroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "snmpV3GroupName"), (0, "DGS-1210-10P_BX", "snmpV3GroupSecurityModel"), (0, "DGS-1210-10P_BX", "snmpV3GroupSecurityLevel"))
if mibBuilder.loadTexts: snmpV3GroupEntry.setStatus('current')
snmpV3GroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupName.setStatus('current')
snmpV3GroupSecurityModel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityModel.setStatus('current')
snmpV3GroupSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3, 1, 1, 3), SnmpSecurityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityLevel.setStatus('current')
snmpV3GroupReadViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupReadViewName.setStatus('current')
snmpV3GroupWriteViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupWriteViewName.setStatus('current')
snmpV3GroupNotifyViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupNotifyViewName.setStatus('current')
snmpV3GroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupStatus.setStatus('current')
snmpV3ViewTreeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 4, 1), )
if mibBuilder.loadTexts: snmpV3ViewTreeTable.setStatus('current')
snmpV3ViewTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 4, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "snmpV3viewTreeName"), (0, "DGS-1210-10P_BX", "snmpV3viewTreeSubtree"))
if mibBuilder.loadTexts: snmpV3ViewTreeEntry.setStatus('current')
snmpV3viewTreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 4, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeName.setStatus('current')
snmpV3viewTreeSubtree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 4, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeSubtree.setStatus('current')
snmpV3viewTreeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeMask.setStatus('current')
snmpV3viewTreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("included", 1), ("excluded", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeType.setStatus('current')
snmpV3viewTreeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeStatus.setStatus('current')
snmpV3CommunityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 5, 1), )
if mibBuilder.loadTexts: snmpV3CommunityTable.setStatus('current')
snmpV3CommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 5, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "snmpV3CommunityName"))
if mibBuilder.loadTexts: snmpV3CommunityEntry.setStatus('current')
snmpV3CommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 5, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3CommunityName.setStatus('current')
snmpV3CommunityPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 5, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityPolicy.setStatus('current')
snmpV3CommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityStatus.setStatus('current')
ipv4snmpV3HostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 1), )
if mibBuilder.loadTexts: ipv4snmpV3HostTable.setStatus('obsolete')
ipv4snmpV3HostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "ipv4snmpV3HostAddress"))
if mibBuilder.loadTexts: ipv4snmpV3HostEntry.setStatus('obsolete')
ipv4snmpV3HostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4snmpV3HostAddress.setStatus('obsolete')
ipv4snmpV3HostCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4snmpV3HostCommunityName.setStatus('obsolete')
ipv4snmpV3HostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3NoAuthNoPriv", 3), ("v3AuthNoPriv", 4), ("v3AuthPriv", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4snmpV3HostVersion.setStatus('obsolete')
ipv4snmpV3HostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4snmpV3HostStatus.setStatus('obsolete')
snmpV3HostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 2), )
if mibBuilder.loadTexts: snmpV3HostTable.setStatus('current')
snmpV3HostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "snmpV3HostAddress"), (0, "DGS-1210-10P_BX", "snmpV3IPType"))
if mibBuilder.loadTexts: snmpV3HostEntry.setStatus('current')
snmpV3HostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 2, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3HostAddress.setStatus('current')
snmpV3IPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3IPType.setStatus('current')
snmpV3HostCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostCommunityName.setStatus('current')
snmpV3HostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3NoAuthNoPriv", 3), ("v3AuthNoPriv", 4), ("v3AuthPriv", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostVersion.setStatus('current')
snmpV3HostInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 2, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostInterfaceName.setStatus('current')
snmpV3HostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostStatus.setStatus('current')
snmpV3TrapSNMPAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapSNMPAuthentication.setStatus('current')
snmpV3TrapBootup = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapBootup.setStatus('current')
snmpV3TrapPortLinkUpDown = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapPortLinkUpDown.setStatus('current')
snmpV3TrapRSTPStateChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapRSTPStateChange.setStatus('current')
snmpV3TrapFirmUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapFirmUpgrade.setStatus('current')
snmpV3TrapPoePowerOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapPoePowerOnOff.setStatus('current')
snmpV3TrapPoePowerError = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapPoePowerError.setStatus('current')
snmpV3TrapOverMaxPowerBudget = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapOverMaxPowerBudget.setStatus('current')
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0))
topologyChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 4)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: topologyChange.setStatus('current')
firmwareUpgradeSuccess = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 8))
if mibBuilder.loadTexts: firmwareUpgradeSuccess.setStatus('current')
firmwareUpgradeFailure = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 9))
if mibBuilder.loadTexts: firmwareUpgradeFailure.setStatus('current')
firmwareIllegalFile = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 10))
if mibBuilder.loadTexts: firmwareIllegalFile.setStatus('current')
firmwareTransferError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 11))
if mibBuilder.loadTexts: firmwareTransferError.setStatus('current')
firmwareChecksumError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 12))
if mibBuilder.loadTexts: firmwareChecksumError.setStatus('current')
poePowerOn = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 13))
if mibBuilder.loadTexts: poePowerOn.setStatus('current')
poePowerOff = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 14))
if mibBuilder.loadTexts: poePowerOff.setStatus('current')
poeShortCircuit = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 15))
if mibBuilder.loadTexts: poeShortCircuit.setStatus('current')
poeOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 16))
if mibBuilder.loadTexts: poeOverLoad.setStatus('current')
poePowerDenied = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 17))
if mibBuilder.loadTexts: poePowerDenied.setStatus('current')
poeThermalShutdown = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 18))
if mibBuilder.loadTexts: poeThermalShutdown.setStatus('current')
poeOverMaxPowerBudget = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 19))
if mibBuilder.loadTexts: poeOverMaxPowerBudget.setStatus('current')
ipv4syslogGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 1))
syslogGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2))
ipv4syslogLogSrvAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4syslogLogSrvAddr.setStatus('obsolete')
ipv4syslogUDPPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4syslogUDPPort.setStatus('obsolete')
ipv4syslogTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4syslogTimeStamp.setStatus('obsolete')
ipv4syslogSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6, 7))).clone(namedValues=NamedValues(("warning", 4), ("info", 6), ("all", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4syslogSeverity.setStatus('obsolete')
ipv4syslogFacility = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 136, 144, 152, 160, 168, 176, 184))).clone(namedValues=NamedValues(("local0", 128), ("local1", 136), ("local2", 144), ("local3", 152), ("local4", 160), ("local5", 168), ("local6", 176), ("local7", 184))).clone('local0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4syslogFacility.setStatus('obsolete')
ipv4syslogLogging = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4syslogLogging.setStatus('obsolete')
syslogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogState.setStatus('current')
syslogTimeStampOption = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogTimeStampOption.setStatus('current')
syslogSrvSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6, 7))).clone(namedValues=NamedValues(("warning", 4), ("info", 6), ("all", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSrvSeverity.setStatus('current')
syslogSrvFacility = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 136, 144, 152, 160, 168, 176, 184))).clone(namedValues=NamedValues(("local0", 128), ("local1", 136), ("local2", 144), ("local3", 152), ("local4", 160), ("local5", 168), ("local6", 176), ("local7", 184)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSrvFacility.setStatus('current')
syslogSrvTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 5), )
if mibBuilder.loadTexts: syslogSrvTable.setStatus('current')
syslogSrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 5, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "syslogSrvIPType"), (0, "DGS-1210-10P_BX", "syslogSrvIP"))
if mibBuilder.loadTexts: syslogSrvEntry.setStatus('current')
syslogSrvIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogSrvIPType.setStatus('current')
syslogSrvIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 5, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogSrvIP.setStatus('current')
syslogSrvPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(514)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogSrvPort.setStatus('current')
syslogInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 5, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogInterfaceName.setStatus('current')
syslogSrvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogSrvRowStatus.setStatus('current')
sysLBDStateEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDStateEnable.setStatus('current')
sysLBDMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("vlan", 2))).clone('port')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDMode.setStatus('current')
sysLBDInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDInterval.setStatus('current')
sysLBDRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1000000), )).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDRecoverTime.setStatus('current')
sysLBDCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 5), )
if mibBuilder.loadTexts: sysLBDCtrlTable.setStatus('current')
sysLBDCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 5, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "sysLBDCtrlIndex"))
if mibBuilder.loadTexts: sysLBDCtrlEntry.setStatus('current')
sysLBDCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDCtrlIndex.setStatus('current')
sysLBDPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDPortStatus.setStatus('current')
sysLBDPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDPortLoopStatus.setStatus('current')
sysLBDVlanLoopTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 6), )
if mibBuilder.loadTexts: sysLBDVlanLoopTable.setStatus('current')
sysLBDVlanLoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 6, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "sysLBDVlanLoopIndex"))
if mibBuilder.loadTexts: sysLBDVlanLoopEntry.setStatus('current')
sysLBDVlanLoopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDVlanLoopIndex.setStatus('current')
sysLBDVlanLoopPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 6, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDVlanLoopPorts.setStatus('current')
sysMirrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorStatus.setStatus('current')
sysMirrorTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorTargetPort.setStatus('current')
sysMirrorCtrlIngressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 18, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlIngressMirroring.setStatus('current')
sysMirrorCtrlEgressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 18, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlEgressMirroring.setStatus('current')
sysTrapIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapIP.setStatus('current')
sysTrapSystemEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("deviceBootUp", 1), ("illegalLogin", 2), ("both", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapSystemEvent.setStatus('current')
sysTrapPortEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapPortEvent.setStatus('current')
sysTrapStateChangeEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapStateChangeEvent.setStatus('current')
sysTrapFirmUpgradeEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapFirmUpgradeEvent.setStatus('current')
sysTrapPoePowerOnOffEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapPoePowerOnOffEvent.setStatus('current')
sysTrapPoePowerErrorEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapPoePowerErrorEvent.setStatus('current')
sysTrapOverMaxPowerBudgetEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapOverMaxPowerBudgetEvent.setStatus('current')
sysTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapStatus.setStatus('current')
ipv4sysSNTPTimeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPTimeSeconds.setStatus('obsolete')
ipv4sysSNTPFirstServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPFirstServer.setStatus('obsolete')
ipv4sysSNTPSecondServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPSecondServer.setStatus('obsolete')
ipv4sysSNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPPollInterval.setStatus('obsolete')
ipv4sysSNTPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sntp", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPState.setStatus('obsolete')
ipv4sysSNTPDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("offset30min", 30), ("offset60min", 60), ("offset90min", 90), ("offset120min", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTOffset.setStatus('obsolete')
ipv4sysSNTPGMTMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPGMTMinutes.setStatus('obsolete')
ipv4sysSNTPDSTStartMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartMon.setStatus('obsolete')
ipv4sysSNTPDSTStartDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartDay.setStatus('obsolete')
ipv4sysSNTPDSTStartHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartHour.setStatus('obsolete')
ipv4sysSNTPDSTStartMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartMin.setStatus('obsolete')
ipv4sysSNTPDSTEndMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndMon.setStatus('obsolete')
ipv4sysSNTPDSTEndDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndDay.setStatus('obsolete')
ipv4sysSNTPDSTEndHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndHour.setStatus('obsolete')
ipv4sysSNTPDSTEndMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndMin.setStatus('obsolete')
ipv4sysSNTPDSTState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annual", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTState.setStatus('obsolete')
sysSNTPServerTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17))
sysSNTPTimeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPTimeSeconds.setStatus('current')
sysSNTPFirstServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstServer.setStatus('current')
sysSNTPFirstType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstType.setStatus('current')
sysSNTPFirstInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstInterfaceName.setStatus('current')
sysSNTPSecondServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 5), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondServer.setStatus('current')
sysSNTPSecondType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondType.setStatus('current')
sysSNTPSecondInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondInterfaceName.setStatus('current')
sysSNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPPollInterval.setStatus('current')
sysSNTPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sntp", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPState.setStatus('current')
sysSNTPDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("offset30min", 30), ("offset60min", 60), ("offset90min", 90), ("offset120min", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTOffset.setStatus('current')
sysSNTPGMTMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPGMTMinutes.setStatus('current')
sysSNTPDSTStartMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMon.setStatus('current')
sysSNTPDSTStartDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartDay.setStatus('current')
sysSNTPDSTStartHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartHour.setStatus('current')
sysSNTPDSTStartMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMin.setStatus('current')
sysSNTPDSTEndMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMon.setStatus('current')
sysSNTPDSTEndDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndDay.setStatus('current')
sysSNTPDSTEndHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndHour.setStatus('current')
sysSNTPDSTEndMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMin.setStatus('current')
sysSNTPDSTState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annual", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTState.setStatus('current')
voicevlanSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1))
voicevlanOUI = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 2))
voicevlanDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 3))
voiceVlanMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanMode.setStatus('current')
voiceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanId.setStatus('current')
voiceVlanTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanTimeout.setStatus('current')
voiceVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("highest", 0), ("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPriority.setStatus('current')
voicevlanPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 6), )
if mibBuilder.loadTexts: voicevlanPortControlTable.setStatus('current')
voicevlanPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 6, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "voicevlanPortControlIndex"))
if mibBuilder.loadTexts: voicevlanPortControlEntry.setStatus('current')
voicevlanPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 6, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanPortControlIndex.setStatus('current')
voicevlanPortAutoDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanPortAutoDetection.setStatus('current')
voicevlanPortManuTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tag", 1), ("untag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanPortManuTagMode.setStatus('current')
voicevlanPortCurrentTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tag", 1), ("untag", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanPortCurrentTagMode.setStatus('current')
voicevlanPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanPortState.setStatus('current')
voicevlanOUITable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 2, 1), )
if mibBuilder.loadTexts: voicevlanOUITable.setStatus('current')
voicevlanOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "voicevlanOUITelephonyOUI"))
if mibBuilder.loadTexts: voicevlanOUIEntry.setStatus('current')
voicevlanOUITelephonyOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanOUITelephonyOUI.setStatus('current')
voicevlanOUIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanOUIDescription.setStatus('current')
voicevlanOUIMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanOUIMask.setStatus('current')
voicevlanOUIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 2, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanOUIStatus.setStatus('current')
voicevlanDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 3, 1), )
if mibBuilder.loadTexts: voicevlanDeviceTable.setStatus('current')
voicevlanDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 3, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "voicevlanDeviceIndexMac"))
if mibBuilder.loadTexts: voicevlanDeviceEntry.setStatus('current')
voicevlanDeviceIndexMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 3, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDeviceIndexMac.setStatus('current')
voicevlanDevicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDevicePort.setStatus('current')
voicevlanDevicePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDevicePriority.setStatus('current')
voicevlanDeviceTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tag", 1), ("untag", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDeviceTagType.setStatus('current')
voicevlanDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanDeviceStatus.setStatus('current')
autoSurveillanceVlanSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 1))
autoSurveillanceVlanOUI = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 2))
autoSurveillanceVlanMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanMode.setStatus('current')
autoSurveillanceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanId.setStatus('current')
autoSurveillanceVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("highest", 0), ("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanPriority.setStatus('current')
autoSurveillanceVlanTaggedUplinkDownlinkPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanTaggedUplinkDownlinkPort.setStatus('current')
autoSurveillanceVlanOUITable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 2, 1), )
if mibBuilder.loadTexts: autoSurveillanceVlanOUITable.setStatus('current')
autoSurveillanceVlanOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "autoSurveillanceVlanOUISurveillanceOUI"))
if mibBuilder.loadTexts: autoSurveillanceVlanOUIEntry.setStatus('current')
autoSurveillanceVlanOUISurveillanceOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoSurveillanceVlanOUISurveillanceOUI.setStatus('current')
autoSurveillanceVlanOUIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIDescription.setStatus('current')
autoSurveillanceVlanOUIMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 2, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIMask.setStatus('current')
autoSurveillanceVlanOUIComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("video_Management_Server", 0), ("vMS_Client", 1), ("video_Encoder", 2), ("network_Storage", 3), ("other_IP_Surveillance_Devices", 4), ("d-Link_Surveillance_Device", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIComponentType.setStatus('current')
autoSurveillanceVlanOUIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 2, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIStatus.setStatus('current')
sysPoEPortSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1), )
if mibBuilder.loadTexts: sysPoEPortSettingTable.setStatus('current')
sysPoEPortSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "poeportgroup"), (0, "DGS-1210-10P_BX", "poeportid"))
if mibBuilder.loadTexts: sysPoEPortSettingEntry.setStatus('current')
poeportgroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeportgroup.setStatus('current')
poeportid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeportid.setStatus('current')
poePortSettingState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortSettingState.setStatus('current')
poePortTimeBaseSchduleID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortTimeBaseSchduleID.setStatus('current')
poePortSettingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("normal", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortSettingPriority.setStatus('current')
poePortSettingPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortSettingPowerLimit.setStatus('current')
poePortSettingUserDefineState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortSettingUserDefineState.setStatus('current')
poePortSettingUserDefine = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortSettingUserDefine.setStatus('current')
poePortPower = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortPower.setStatus('current')
poePortVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortVoltage.setStatus('current')
poePortCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortCurrent.setStatus('current')
poePortClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortClassification.setStatus('current')
poePortDelayPowerDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortDelayPowerDetect.setStatus('current')
poePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 99), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortStatus.setStatus('current')
poeSystemSettingPowerThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeSystemSettingPowerThreshold.setStatus('current')
poeSystemSettingDisconnectMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("denyNextPort", 1), ("denyLowPriorityPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeSystemSettingDisconnectMethod.setStatus('current')
pethPsePortPowerBudget = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortPowerBudget.setStatus('current')
pethPsePortPowerConsumption = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortPowerConsumption.setStatus('current')
pethPsePortPowerRemainder = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortPowerRemainder.setStatus('current')
pethPsePortPowerRatioOfSystemPower = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortPowerRatioOfSystemPower.setStatus('current')
poeLedMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeLedMode.setStatus('current')
swTimeRangeSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1), )
if mibBuilder.loadTexts: swTimeRangeSettingTable.setStatus('current')
swTimeRangeSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "swTimeRangeIndex"))
if mibBuilder.loadTexts: swTimeRangeSettingEntry.setStatus('current')
swTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTimeRangeIndex.setStatus('current')
swTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeName.setStatus('current')
swTimeRangeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeDate.setStatus('current')
swTimeRangeStartYear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037))).clone(namedValues=NamedValues(("y2009", 2009), ("y2010", 2010), ("y2011", 2011), ("y2012", 2012), ("y2013", 2013), ("y2014", 2014), ("y2015", 2015), ("y2016", 2016), ("y2017", 2017), ("y2018", 2018), ("y2019", 2019), ("y2020", 2020), ("y2021", 2021), ("y2022", 2022), ("y2023", 2023), ("y2024", 2024), ("y2025", 2025), ("y2026", 2026), ("y2027", 2027), ("y2028", 2028), ("y2029", 2029), ("y2030", 2030), ("y2031", 2031), ("y2032", 2032), ("y2033", 2033), ("y2034", 2034), ("y2035", 2035), ("y2036", 2036), ("y2037", 2037)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartYear.setStatus('current')
swTimeRangeStartMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartMonth.setStatus('current')
swTimeRangeStartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartDay.setStatus('current')
swTimeRangeStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartHour.setStatus('current')
swTimeRangeStartMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartMinute.setStatus('current')
swTimeRangeEndYear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037))).clone(namedValues=NamedValues(("y2009", 2009), ("y2010", 2010), ("y2011", 2011), ("y2012", 2012), ("y2013", 2013), ("y2014", 2014), ("y2015", 2015), ("y2016", 2016), ("y2017", 2017), ("y2018", 2018), ("y2019", 2019), ("y2020", 2020), ("y2021", 2021), ("y2022", 2022), ("y2023", 2023), ("y2024", 2024), ("y2025", 2025), ("y2026", 2026), ("y2027", 2027), ("y2028", 2028), ("y2029", 2029), ("y2030", 2030), ("y2031", 2031), ("y2032", 2032), ("y2033", 2033), ("y2034", 2034), ("y2035", 2035), ("y2036", 2036), ("y2037", 2037)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndYear.setStatus('current')
swTimeRangeEndMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndMonth.setStatus('current')
swTimeRangeEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndDay.setStatus('current')
swTimeRangeEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndHour.setStatus('current')
swTimeRangeEndMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndMinute.setStatus('current')
swTimeRangeMonday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeMonday.setStatus('current')
swTimeRangeTuesday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeTuesday.setStatus('current')
swTimeRangeWednesday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeWednesday.setStatus('current')
swTimeRangeThursday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeThursday.setStatus('current')
swTimeRangeFriday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeFriday.setStatus('current')
swTimeRangeSaturday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeSaturday.setStatus('current')
swTimeRangeSunday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeSunday.setStatus('current')
swTimeRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swTimeRangeRowStatus.setStatus('current')
dlinklldpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpState.setStatus('current')
dlinklldpMsgHoldMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpMsgHoldMultiplier.setStatus('current')
dlinklldpMsgTxInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpMsgTxInterval.setStatus('current')
dlinklldpReinitDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpReinitDelay.setStatus('current')
dlinklldpTxDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpTxDelay.setStatus('current')
dlinklldpConfigManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 7), )
if mibBuilder.loadTexts: dlinklldpConfigManAddrTable.setStatus('current')
dlinklldpConfigManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 7, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dlinklldpLocManAddrSubtype"), (0, "DGS-1210-10P_BX", "dlinklldpLocManAddr"))
if mibBuilder.loadTexts: dlinklldpConfigManAddrEntry.setStatus('current')
dlinklldpLocManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 7, 1, 1), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlinklldpLocManAddrSubtype.setStatus('current')
dlinklldpLocManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 7, 1, 2), LldpManAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlinklldpLocManAddr.setStatus('current')
dlinklldpConfigManAddrPortsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 7, 1, 3), PortList().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpConfigManAddrPortsTxEnable.setStatus('current')
lldpMEDPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 8), )
if mibBuilder.loadTexts: lldpMEDPortControlTable.setStatus('current')
lldpMEDPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 8, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "lldpMEDPortControlIndex"))
if mibBuilder.loadTexts: lldpMEDPortControlEntry.setStatus('current')
lldpMEDPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 8, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMEDPortControlIndex.setStatus('current')
lldpMEDPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMEDPortState.setStatus('current')
dlinklldpAntiRoguePortControl = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 9), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpAntiRoguePortControl.setStatus('current')
dlinklldpRemOrgDefInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 10), )
if mibBuilder.loadTexts: dlinklldpRemOrgDefInfoTable.setStatus('current')
dlinklldpRemOrgDefInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 10, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dlinklldpAntiRoguePortIndex"))
if mibBuilder.loadTexts: dlinklldpRemOrgDefInfoEntry.setStatus('current')
dlinklldpAntiRoguePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 10, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlinklldpAntiRoguePortIndex.setStatus('current')
dlinklldpAntiRoguePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("authenticationDisabled", 0), ("authenticationEnabled", 1), ("authenticationSuccessful", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlinklldpAntiRoguePortStatus.setStatus('current')
dlinklldpRemOrgDefInfoOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlinklldpRemOrgDefInfoOUI.setStatus('current')
dlinklldpAntiRoguePassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpAntiRoguePassword.setStatus('current')
dlinkGreenLEDShutoff = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 1))
dlinkGreenPortShutoff = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 2))
dlinkGreenPortStandby = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 3))
dlinkGreenSystemHibernation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 4))
dlinkGreenLEDShutoffPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 1, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffPortList.setStatus('current')
dlinkGreenLEDShutoffState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffState.setStatus('current')
dlinkGreenLEDShutoffTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffTimeProfile1.setStatus('current')
dlinkGreenLEDShutoffTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffTimeProfile2.setStatus('current')
dlinkGreenPortShutoffPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 2, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffPortList.setStatus('current')
dlinkGreenPortShutoffState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffState.setStatus('current')
dlinkGreenPortShutoffTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffTimeProfile1.setStatus('current')
dlinkGreenPortShutoffTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffTimeProfile2.setStatus('current')
dlinkGreenPortStandbyPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 3, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortStandbyPortList.setStatus('current')
dlinkGreenPortStandbyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortStandbyState.setStatus('current')
dlinkGreenPortStandbyTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortStandbyTimeProfile1.setStatus('current')
dlinkGreenPortStandbyTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortStandbyTimeProfile2.setStatus('current')
dlinkGreenSystemHibernationState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationState.setStatus('current')
dlinkGreenSystemHibernationTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationTimeProfile1.setStatus('current')
dlinkGreenSystemHibernationTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationTimeProfile2.setStatus('current')
dlinkPowerSavCableLenDetectionState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkPowerSavCableLenDetectionState.setStatus('current')
dlinkPowerSavLinkStatusDetectState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkPowerSavLinkStatusDetectState.setStatus('current')
securityDhcpServerScreen = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7))
dhcpServerScreenEnablePortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenEnablePortlist.setStatus('current')
ipv4dhcpServerScreenServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 2), )
if mibBuilder.loadTexts: ipv4dhcpServerScreenServerTable.setStatus('obsolete')
ipv4dhcpServerScreenServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "ipv4dhcpServerScreenServerIndex"))
if mibBuilder.loadTexts: ipv4dhcpServerScreenServerEntry.setStatus('obsolete')
ipv4dhcpServerScreenServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4dhcpServerScreenServerIndex.setStatus('obsolete')
ipv4dhcpServerScreenServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4dhcpServerScreenServerAddress.setStatus('obsolete')
ipv4dhcpServerScreenServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4dhcpServerScreenServerStatus.setStatus('obsolete')
dhcpServerScreenTrustedServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 3), )
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerTable.setStatus('current')
dhcpServerScreenTrustedServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 3, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dhcpServerScreenTrustedServerIndex"))
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerEntry.setStatus('current')
dhcpServerScreenTrustedServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerIndex.setStatus('current')
dhcpServerScreenTrustedServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 3, 1, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerAddress.setStatus('current')
dhcpServerScreenIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenIPType.setStatus('current')
dhcpServerScreenTrustedServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerStatus.setStatus('current')
securityTrafficSeg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 9))
trafficSegStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficSegStatus.setStatus('current')
trafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 9, 2), )
if mibBuilder.loadTexts: trafficSegTable.setStatus('current')
trafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 9, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "trafficSegIfIndex"))
if mibBuilder.loadTexts: trafficSegEntry.setStatus('current')
trafficSegIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 9, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficSegIfIndex.setStatus('current')
trafficSegMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 9, 2, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficSegMemberList.setStatus('current')
rmonGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonGlobalState.setStatus('current')
rmonStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 2))
rmonHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 3))
rmonAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4))
rmonEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 5))
rmonStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 2, 1), )
if mibBuilder.loadTexts: rmonStatsTable.setStatus('current')
rmonStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "rmonStatsIndex"))
if mibBuilder.loadTexts: rmonStatsEntry.setStatus('current')
rmonStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsIndex.setStatus('current')
rmonStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsDataSource.setStatus('current')
rmonStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsOwner.setStatus('current')
rmonStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 2, 1, 1, 4), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsStatus.setStatus('current')
rmonHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 3, 1), )
if mibBuilder.loadTexts: rmonHistoryTable.setStatus('current')
rmonHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 3, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "rmonHistoryIndex"))
if mibBuilder.loadTexts: rmonHistoryEntry.setStatus('current')
rmonHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryIndex.setStatus('current')
rmonHistoryDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 3, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryDataSource.setStatus('current')
rmonHistoryBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryBucketsRequested.setStatus('current')
rmonHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1800)).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryInterval.setStatus('current')
rmonHistoryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryOwner.setStatus('current')
rmonHistoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 3, 1, 1, 6), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryStatus.setStatus('current')
rmonAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1), )
if mibBuilder.loadTexts: rmonAlarmTable.setStatus('current')
rmonAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "rmonAlarmIndex"))
if mibBuilder.loadTexts: rmonAlarmEntry.setStatus('current')
rmonAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAlarmIndex.setStatus('current')
rmonAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 2), Integer32()).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmInterval.setStatus('current')
rmonAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmVariable.setStatus('current')
rmonAlarmSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteValue", 1), ("deltaValue", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmSampleType.setStatus('current')
rmonAlarmRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRisingThreshold.setStatus('current')
rmonAlarmFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmFallingThreshold.setStatus('current')
rmonAlarmRisingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRisingEventIndex.setStatus('current')
rmonAlarmFallingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmFallingEventIndex.setStatus('current')
rmonAlarmOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmOwner.setStatus('current')
rmonAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 10), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmStatus.setStatus('current')
rmonEventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 5, 1), )
if mibBuilder.loadTexts: rmonEventTable.setStatus('current')
rmonEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 5, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "rmonEventIndex"))
if mibBuilder.loadTexts: rmonEventEntry.setStatus('current')
rmonEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonEventIndex.setStatus('current')
rmonEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventDescription.setStatus('current')
rmonEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("log", 2), ("snmptrap", 3), ("logandtrap", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventType.setStatus('current')
rmonEventCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventCommunity.setStatus('current')
rmonEventOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventOwner.setStatus('current')
rmonEventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 5, 1, 1, 6), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventStatus.setStatus('current')
neighborTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 50, 1), )
if mibBuilder.loadTexts: neighborTable.setStatus('current')
neighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 50, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "neighborIfindex"), (0, "DGS-1210-10P_BX", "neighborIPv6Addr"), (0, "DGS-1210-10P_BX", "neighborMACAddr"))
if mibBuilder.loadTexts: neighborEntry.setStatus('current')
neighborIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 50, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIfindex.setStatus('current')
neighborIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 50, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIPv6Addr.setStatus('current')
neighborMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 50, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborMACAddr.setStatus('current')
neighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 50, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborType.setStatus('current')
neighborCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 50, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("static", 1), ("reachable", 2), ("incomplete", 3), ("stale", 4), ("delay", 5), ("probe", 6), ("notinservice", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborCacheState.setStatus('current')
neighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 50, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neighborRowStatus.setStatus('current')
dhcpBOOTPRelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 1))
dhcpBOOTPRelayManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2))
dhcpBOOTPRelayManagementOption82 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 2))
dhcpBOOTPRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayState.setStatus('current')
dhcpBOOTPRelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayHopCount.setStatus('current')
dhcpBOOTPRelayTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayTimeThreshold.setStatus('current')
dhcpBOOTPRelayInterfaceSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 1), )
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsTable.setStatus('current')
dhcpBOOTPRelayInterfaceSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dhcpBOOTPRelayInterface"), (0, "DGS-1210-10P_BX", "dhcpBOOTPRelayServerIP"))
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsEntry.setStatus('current')
dhcpBOOTPRelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpBOOTPRelayInterface.setStatus('current')
dhcpBOOTPRelayServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpBOOTPRelayServerIP.setStatus('current')
dhcpBOOTPRelayInterfaceSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsRowStatus.setStatus('current')
dhcpBOOTPRelayOption82State = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82State.setStatus('current')
dhcpBOOTPRelayOption82CheckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82CheckState.setStatus('current')
dhcpBOOTPRelayOption82Policy = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82Policy.setStatus('current')
dhcpBOOTPRelayOption82RemoteIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("userdefined", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82RemoteIDType.setStatus('current')
dhcpBOOTPRelayOption82RemoteID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82RemoteID.setStatus('current')
dhcpLocalRelayGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 62, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelayGlobalState.setStatus('current')
dhcpLocalRelayTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 62, 2), )
if mibBuilder.loadTexts: dhcpLocalRelayTable.setStatus('current')
dhcpLocalRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 62, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dhcpLocalRelaySettingsVLANID"))
if mibBuilder.loadTexts: dhcpLocalRelayEntry.setStatus('current')
dhcpLocalRelaySettingsVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 62, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLocalRelaySettingsVLANID.setStatus('current')
dhcpLocalRelaySettingsState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 62, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelaySettingsState.setStatus('current')
dhcpv6RelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 1))
dhcpv6RelayManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 2))
dhcpv6RelayOption37 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 3))
dhcpv6RelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayState.setStatus('current')
dhcpv6RelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayHopCount.setStatus('current')
dhcpv6RelayInterfaceSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 2, 1), )
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsTable.setStatus('current')
dhcpv6RelayInterfaceSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dhcpv6RelayInterface"), (0, "DGS-1210-10P_BX", "dhcpv6RelayServerIP"))
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsEntry.setStatus('current')
dhcpv6RelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6RelayInterface.setStatus('current')
dhcpv6RelayServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 2, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6RelayServerIP.setStatus('current')
dhcpv6RelayInterfaceSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 2, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsRowStatus.setStatus('current')
dhcpv6RelayOption37State = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37State.setStatus('current')
dhcpv6RelayOption37CheckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37CheckState.setStatus('current')
dhcpv6RelayOption37RemoteIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("cid_with_user_define", 1), ("user_define", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37RemoteIDType.setStatus('current')
dhcpv6RelayOption37RemoteID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37RemoteID.setStatus('current')
mibBuilder.exportSymbols("DGS-1210-10P_BX", tftpCfgTargetTftpOperation=tftpCfgTargetTftpOperation, swTimeRangeIndex=swTimeRangeIndex, trafficSegEntry=trafficSegEntry, aclL3RuleTcpUdpDstPortMask=aclL3RuleTcpUdpDstPortMask, dhcpLocalRelaySettingsState=dhcpLocalRelaySettingsState, dot1xAuthConfigPortStatus=dot1xAuthConfigPortStatus, qosDiffServType00=qosDiffServType00, sysSNTPState=sysSNTPState, aclL2RuleDstMacAddr=aclL2RuleDstMacAddr, sysSNTPDSTEndHour=sysSNTPDSTEndHour, tftpCfgTargetServerIpAddress=tftpCfgTargetServerIpAddress, snmpV3UserGroupName=snmpV3UserGroupName, dhcpServerScreenTrustedServerTable=dhcpServerScreenTrustedServerTable, voiceVlanPriority=voiceVlanPriority, igsQueryMaxResponseTime=igsQueryMaxResponseTime, sysPortCtrlOperStatus=sysPortCtrlOperStatus, companyDot1xGroup=companyDot1xGroup, sysDdpProtStatusEntry=sysDdpProtStatusEntry, aclL3RuleSrcIpAddrMask=aclL3RuleSrcIpAddrMask, laPortChannelMode=laPortChannelMode, dlinkGreenLEDShutoffPortList=dlinkGreenLEDShutoffPortList, cableDiagPair1TestResult=cableDiagPair1TestResult, ipv4trustedHostEntry=ipv4trustedHostEntry, ipv4syslogLogSrvAddr=ipv4syslogLogSrvAddr, sysMirrorStatus=sysMirrorStatus, sysPortCtrlMDI=sysPortCtrlMDI, aclProfileIPProtocol=aclProfileIPProtocol, sysSNTPDSTState=sysSNTPDSTState, firmwareUpgradeSuccess=firmwareUpgradeSuccess, rmonAlarmInterval=rmonAlarmInterval, laPortControlEntry=laPortControlEntry, snmpV3viewTreeStatus=snmpV3viewTreeStatus, laStatus=laStatus, securityTrafficSeg=securityTrafficSeg, rmonEventOwner=rmonEventOwner, sysSNTPSecondType=sysSNTPSecondType, dlinklldpAntiRoguePassword=dlinklldpAntiRoguePassword, tftpCfgServerIpAddress=tftpCfgServerIpAddress, aclL2RuleReplacePriority=aclL2RuleReplacePriority, snmpV3UserVersion=snmpV3UserVersion, ipifv6AutolinkloStatus=ipifv6AutolinkloStatus, dot1xAuthMaxReq=dot1xAuthMaxReq, sysLBDStateEnable=sysLBDStateEnable, qosDiffServType08=qosDiffServType08, ipv4sysIpAddr=ipv4sysIpAddr, snmpV3UserAuthProtocol=snmpV3UserAuthProtocol, autoSurveillanceVlanOUIEntry=autoSurveillanceVlanOUIEntry, dot1qVlanUntaggedPorts=dot1qVlanUntaggedPorts, snmpV3TrapOverMaxPowerBudget=snmpV3TrapOverMaxPowerBudget, autoSurveillanceVlanId=autoSurveillanceVlanId, qosDiffServType10=qosDiffServType10, portD3Index=portD3Index, qosDiffServType17=qosDiffServType17, sysSwitchName=sysSwitchName, snmpV3Trap=snmpV3Trap, aRPSpoofPreventIpAddr=aRPSpoofPreventIpAddr, dot1pPortIndex=dot1pPortIndex, aclv6L3RuleTcpAckBit=aclv6L3RuleTcpAckBit, ipv4sysSNTPState=ipv4sysSNTPState, sysLBDPortStatus=sysLBDPortStatus, BridgeId=BridgeId, sysPortCtrlFlowControlOper=sysPortCtrlFlowControlOper, qosDiffServType33=qosDiffServType33, companyAutoSurveillanceVlan=companyAutoSurveillanceVlan, staticVlanID=staticVlanID, qosDiffServType15=qosDiffServType15, companyTrafficMgmt=companyTrafficMgmt, autoSurveillanceVlanOUIDescription=autoSurveillanceVlanOUIDescription, cableDiagPair2TestResult=cableDiagPair2TestResult, cableDiagLengthinRange=cableDiagLengthinRange, staticMcastVlanID=staticMcastVlanID, swTimeRangeStartYear=swTimeRangeStartYear, igsVlanFastLeave=igsVlanFastLeave, companyRSTP=companyRSTP, qosDiffServType42=qosDiffServType42, dlinklldpLocManAddrSubtype=dlinklldpLocManAddrSubtype, poePortVoltage=poePortVoltage, dlinklldpConfigManAddrEntry=dlinklldpConfigManAddrEntry, rmonHistoryEntry=rmonHistoryEntry, aclv6L3RuleTrafficClass=aclv6L3RuleTrafficClass, qosTOSGroup=qosTOSGroup, igsVlan=igsVlan, trustedHostIPType=trustedHostIPType, stpPortState=stpPortState, qosDiffServType44=qosDiffServType44, dhcpBOOTPRelayControl=dhcpBOOTPRelayControl, sysIpAddrCfgMode=sysIpAddrCfgMode, dot1xAuthReAuthPeriod=dot1xAuthReAuthPeriod, autoSurveillanceVlanMode=autoSurveillanceVlanMode, dhcpBOOTPRelayOption82Policy=dhcpBOOTPRelayOption82Policy, stpPortDesignatedBridge=stpPortDesignatedBridge, securityDhcpServerScreen=securityDhcpServerScreen, dhcpv6RelayInterface=dhcpv6RelayInterface, qosDiffServType07=qosDiffServType07, aclL3RuleAccessID=aclL3RuleAccessID, autoSurveillanceVlanOUIStatus=autoSurveillanceVlanOUIStatus, rmonHistoryInterval=rmonHistoryInterval, dot3azTable=dot3azTable, dot1qVlanName=dot1qVlanName, dot1qVlanAsyOnOff=dot1qVlanAsyOnOff, topologyChange=topologyChange, bandwidthCtrlEntry=bandwidthCtrlEntry, snmpV3viewTreeName=snmpV3viewTreeName, impbBlackListStatus=impbBlackListStatus, snmpV3GroupSecurityLevel=snmpV3GroupSecurityLevel, broadcastStormCtrlGlobalOnOff=broadcastStormCtrlGlobalOnOff, traps=traps, voicevlanOUI=voicevlanOUI, aclProfileSrcIpAddrMask=aclProfileSrcIpAddrMask, pethPsePortPowerConsumption=pethPsePortPowerConsumption, dlinklldpRemOrgDefInfoTable=dlinklldpRemOrgDefInfoTable, aclv6L3RuleSrcIpAddr=aclv6L3RuleSrcIpAddr, aclv6L3RulePriority=aclv6L3RulePriority, sysDdpGeneralReportTimer=sysDdpGeneralReportTimer, rmonStatistics=rmonStatistics, stpPort=stpPort, stpPortRestrictedRole=stpPortRestrictedRole, sysDdpGlobalOnOff=sysDdpGlobalOnOff, snmpV3HostVersion=snmpV3HostVersion, autoSurveillanceVlanOUISurveillanceOUI=autoSurveillanceVlanOUISurveillanceOUI, tftpCfgTargetServerIpType=tftpCfgTargetServerIpType, ipv4sysSNTPDSTEndHour=ipv4sysSNTPDSTEndHour, rmonEventStatus=rmonEventStatus, autoSurveillanceVlanOUITable=autoSurveillanceVlanOUITable, sysTrapPoePowerErrorEvent=sysTrapPoePowerErrorEvent, qosDiffServType40=qosDiffServType40, companyMirror=companyMirror, broadcastStormCtrlSettings=broadcastStormCtrlSettings, trustedHostRowStatus=trustedHostRowStatus, autoSurveillanceVlanPriority=autoSurveillanceVlanPriority, impbSmartVlanId=impbSmartVlanId, poePowerOff=poePowerOff, rmonEvent=rmonEvent, snmpV3ViewTreeEntry=snmpV3ViewTreeEntry, dot1xAuthConfigPortControl=dot1xAuthConfigPortControl, laPortControl=laPortControl, rmonStatsTable=rmonStatsTable, impbWhiteListIpAddress=impbWhiteListIpAddress, sysSafeGuardEnable=sysSafeGuardEnable, aclProfileArpSenderMacAddrMask=aclProfileArpSenderMacAddrMask, rmonAlarmRisingThreshold=rmonAlarmRisingThreshold, stpPortOperPointToPoint=stpPortOperPointToPoint, VlanIndex=VlanIndex, staticMcastEgressPorts=staticMcastEgressPorts, qosDiffServType49=qosDiffServType49, stpPortAdminPointToPoint=stpPortAdminPointToPoint, miscReset=miscReset, poeOverMaxPowerBudget=poeOverMaxPowerBudget, sysSNTPServerTable=sysSNTPServerTable, ipv4syslogGeneralGroup=ipv4syslogGeneralGroup, swTimeRangeThursday=swTimeRangeThursday, sysSNTPDSTEndMon=sysSNTPDSTEndMon, poePortSettingUserDefineState=poePortSettingUserDefineState, dot1xAuthReAuthEnabled=dot1xAuthReAuthEnabled, sysSNTPDSTEndDay=sysSNTPDSTEndDay, companyVoiceVlan=companyVoiceVlan, dhcpBOOTPRelayOption82RemoteIDType=dhcpBOOTPRelayOption82RemoteIDType, stpTimeSinceTopologyChange=stpTimeSinceTopologyChange, ipv4aclProfileType=ipv4aclProfileType, impbSmartPort=impbSmartPort, poePortClassification=poePortClassification, portSecTable=portSecTable, tftpConfigTftpOperation=tftpConfigTftpOperation, securityPortSecurity=securityPortSecurity, impbWhiteListRowStatus=impbWhiteListRowStatus, stpProtocolSpecification=stpProtocolSpecification, swAuthCtrlPktFwdMode=swAuthCtrlPktFwdMode, aclL2RuleInPortList=aclL2RuleInPortList, ipv4aclProfileStatus=ipv4aclProfileStatus, poeportid=poeportid, dlinkGreenLEDShutoff=dlinkGreenLEDShutoff, aclProfileDstPortMask=aclProfileDstPortMask, poeportgroup=poeportgroup, ipv4dhcpServerScreenServerEntry=ipv4dhcpServerScreenServerEntry, dot1qVlanEntry=dot1qVlanEntry, snmpV3ViewTree=snmpV3ViewTree, qosTOSType02=qosTOSType02, dot1xAuthTxPeriod=dot1xAuthTxPeriod, poeLedMode=poeLedMode, qosDiffServType53=qosDiffServType53, stpPortTable=stpPortTable, snmpV3IPType=snmpV3IPType, dlinklldpMsgHoldMultiplier=dlinklldpMsgHoldMultiplier, aclProfileMask=aclProfileMask, snmpV3Host=snmpV3Host, aclProfileStatus=aclProfileStatus, poePortStatus=poePortStatus, swTimeRangeFriday=swTimeRangeFriday, neighborEntry=neighborEntry, dhcpv6RelayOption37RemoteID=dhcpv6RelayOption37RemoteID, companySecurity=companySecurity, tftpFwTargetTftpOperation=tftpFwTargetTftpOperation, voicevlanDeviceIndexMac=voicevlanDeviceIndexMac, dlinkGreenPortStandbyTimeProfile2=dlinkGreenPortStandbyTimeProfile2, rmonStatsStatus=rmonStatsStatus, dot1qVlanUngisterMCFilterEntry=dot1qVlanUngisterMCFilterEntry, staticEntry=staticEntry, trafficSegTable=trafficSegTable, rmonStatsIndex=rmonStatsIndex, ipv4radiusServerSharedSecret=ipv4radiusServerSharedSecret, aclL2Rule=aclL2Rule, aclL3RulePortList=aclL3RulePortList, qosTOSType00=qosTOSType00, sysIpAddr=sysIpAddr, trustedHostTable=trustedHostTable, aclL2RuleTable=aclL2RuleTable, aclv6L3RuleTcpFinBit=aclv6L3RuleTcpFinBit, snmpV3viewTreeType=snmpV3viewTreeType, impbSmartIpAddress=impbSmartIpAddress, snmpV3HostAddress=snmpV3HostAddress, sysLBDCtrlEntry=sysLBDCtrlEntry, swTimeRangeStartMinute=swTimeRangeStartMinute, rmonHistoryDataSource=rmonHistoryDataSource, rmonEventType=rmonEventType, dhcpv6RelayInterfaceSettingsEntry=dhcpv6RelayInterfaceSettingsEntry, sysPortCtrlEntry=sysPortCtrlEntry, qosDiffServType06=qosDiffServType06, aclv6L3RuleDstIpAddr=aclv6L3RuleDstIpAddr, sysLBDMode=sysLBDMode, voicevlanSystem=voicevlanSystem, aRPSpoofPreventTable=aRPSpoofPreventTable, ipv4dhcpServerScreenServerTable=ipv4dhcpServerScreenServerTable, sysDdpGeneralReportOnOff=sysDdpGeneralReportOnOff, sysPoEPortSettingTable=sysPoEPortSettingTable, laPortChannelTable=laPortChannelTable, aclv6L3RuleTcpPshBit=aclv6L3RuleTcpPshBit, laPortChannelIfIndex=laPortChannelIfIndex, dot1qVlanPvid=dot1qVlanPvid, impbSettingTable=impbSettingTable, dhcpBOOTPRelayHopCount=dhcpBOOTPRelayHopCount, qosDiffServType30=qosDiffServType30, qosDiffServType39=qosDiffServType39, stpVersion=stpVersion, sysSNTPDSTStartMon=sysSNTPDSTStartMon, qosDiffServType52=qosDiffServType52, dlinklldpAntiRoguePortStatus=dlinklldpAntiRoguePortStatus, swTimeRangeName=swTimeRangeName, sysSNTPSecondServer=sysSNTPSecondServer, dhcpv6RelayInterfaceSettingsRowStatus=dhcpv6RelayInterfaceSettingsRowStatus, rmonEventCommunity=rmonEventCommunity, swTimeRangeEndDay=swTimeRangeEndDay, qosTOS=qosTOS, aclv6L3RuleProtocol=aclv6L3RuleProtocol, sysTrapStatus=sysTrapStatus, voiceVlanMode=voiceVlanMode, swTimeRangeEndMinute=swTimeRangeEndMinute, qosTOSType05=qosTOSType05, syslogGeneralGroup=syslogGeneralGroup, stpHoldTime=stpHoldTime, dhcpServerScreenTrustedServerAddress=dhcpServerScreenTrustedServerAddress, qosDiffServType20=qosDiffServType20, rmonEventTable=rmonEventTable, aclL2RuleSrcMacAddrMask=aclL2RuleSrcMacAddrMask, swTimeRangeStartMonth=swTimeRangeStartMonth)
mibBuilder.exportSymbols("DGS-1210-10P_BX", dhcpv6RelayControl=dhcpv6RelayControl, igsVlanFilterVlanId=igsVlanFilterVlanId, rmonGlobalState=rmonGlobalState, syslogSrvIPType=syslogSrvIPType, companyRMON=companyRMON, rmonHistoryIndex=rmonHistoryIndex, sysSNTPTimeSeconds=sysSNTPTimeSeconds, companyLA=companyLA, neighborCacheState=neighborCacheState, laPortChannelMemberList=laPortChannelMemberList, voicevlanPortManuTagMode=voicevlanPortManuTagMode, sysTrapPortEvent=sysTrapPortEvent, ipv4trustedHostTable=ipv4trustedHostTable, staticPort=staticPort, ipv4aclProfileSrcMacAddrMask=ipv4aclProfileSrcMacAddrMask, companydot3azEEE=companydot3azEEE, stpTopChanges=stpTopChanges, stpBridgeHelloTime=stpBridgeHelloTime, syslogSrvEntry=syslogSrvEntry, poePowerDenied=poePowerDenied, ipifV6AddressMainIndex=ipifV6AddressMainIndex, ipv4syslogTimeStamp=ipv4syslogTimeStamp, syslogSrvIP=syslogSrvIP, ipv4sysIpSubnetMask=ipv4sysIpSubnetMask, portSecEntry=portSecEntry, lldpMEDPortControlTable=lldpMEDPortControlTable, dot1xAuthConfigPortNumber=dot1xAuthConfigPortNumber, impbWhiteListEntry=impbWhiteListEntry, igsVlanRouterEntry=igsVlanRouterEntry, aclL2ProfileID=aclL2ProfileID, dhcpBOOTPRelayOption82CheckState=dhcpBOOTPRelayOption82CheckState, qosDiffServType38=qosDiffServType38, swTimeRangeDate=swTimeRangeDate, sysTrapPoePowerOnOffEvent=sysTrapPoePowerOnOffEvent, aclv6L3RuleStatus=aclv6L3RuleStatus, sysDdpProtStatusIndex=sysDdpProtStatusIndex, aclL2AccessID=aclL2AccessID, companySyslog=companySyslog, dot1xAuthQuietPeriod=dot1xAuthQuietPeriod, dhcpBOOTPRelayOption82State=dhcpBOOTPRelayOption82State, stpMaxAge=stpMaxAge, bandwidthCtrlSettings=bandwidthCtrlSettings, cableDiagPair2FaultDistance=cableDiagPair2FaultDistance, autoSurveillanceVlanOUI=autoSurveillanceVlanOUI, dhcpv6RelayManagement=dhcpv6RelayManagement, poeSystemSettingDisconnectMethod=poeSystemSettingDisconnectMethod, snmpV3HostCommunityName=snmpV3HostCommunityName, sysFirmwareVersion=sysFirmwareVersion, sysHardwareVersion=sysHardwareVersion, impbBlackListPort=impbBlackListPort, stpBridgeMaxAge=stpBridgeMaxAge, dot1qVlanTable=dot1qVlanTable, sysDhcpAutoConfiguration=sysDhcpAutoConfiguration, dlinklldpRemOrgDefInfoEntry=dlinklldpRemOrgDefInfoEntry, dot3azEntry=dot3azEntry, aclL3RuleTcpPshBit=aclL3RuleTcpPshBit, poePortCurrent=poePortCurrent, snmpV3UserStatus=snmpV3UserStatus, dot1xAuthStatus=dot1xAuthStatus, dot1qVlanPortTable=dot1qVlanPortTable, autoSurveillanceVlanSystem=autoSurveillanceVlanSystem, aclL2RuleDstMacAddrMask=aclL2RuleDstMacAddrMask, ipv4radiusServerAddress=ipv4radiusServerAddress, qosDiffServType09=qosDiffServType09, cableDiagPair3FaultDistance=cableDiagPair3FaultDistance, ipv4snmpV3HostEntry=ipv4snmpV3HostEntry, sysMirrorTargetPort=sysMirrorTargetPort, snmpV3HostInterfaceName=snmpV3HostInterfaceName, staticMcastStatus=staticMcastStatus, dlinklldpAntiRoguePortControl=dlinklldpAntiRoguePortControl, ipifV6AddressIpAddr=ipifV6AddressIpAddr, autoSurveillanceVlanTaggedUplinkDownlinkPort=autoSurveillanceVlanTaggedUplinkDownlinkPort, aclL3RulePriority=aclL3RulePriority, qosDiffServType23=qosDiffServType23, sysMirrorCtrlEgressMirroring=sysMirrorCtrlEgressMirroring, ipv4dhcpServerScreenServerStatus=ipv4dhcpServerScreenServerStatus, aclL3RuleEntry=aclL3RuleEntry, igsVlanMulticastGroupTable=igsVlanMulticastGroupTable, qosQ1p=qosQ1p, qosDiffServType22=qosDiffServType22, dot1xAuthServerTimeout=dot1xAuthServerTimeout, pethPsePortPowerRatioOfSystemPower=pethPsePortPowerRatioOfSystemPower, swTimeRangeEndHour=swTimeRangeEndHour, sysTrapOverMaxPowerBudgetEvent=sysTrapOverMaxPowerBudgetEvent, companyTftpGroup=companyTftpGroup, dot1qVlanRowStatus=dot1qVlanRowStatus, ipv4aclProfileArpSenderIpAddrMask=ipv4aclProfileArpSenderIpAddrMask, sysLBDVlanLoopPorts=sysLBDVlanLoopPorts, stpDesignatedRoot=stpDesignatedRoot, rmonHistory=rmonHistory, ipv4aclProfileDstMacAddrMask=ipv4aclProfileDstMacAddrMask, syslogState=syslogState, dhcpServerScreenTrustedServerStatus=dhcpServerScreenTrustedServerStatus, qosDiffServType01=qosDiffServType01, swTimeRangeSettingEntry=swTimeRangeSettingEntry, dlinklldpRemOrgDefInfoOUI=dlinklldpRemOrgDefInfoOUI, rmonAlarmTable=rmonAlarmTable, sysSNTPFirstServer=sysSNTPFirstServer, laPortChannelEntry=laPortChannelEntry, firmwareUpgradeFailure=firmwareUpgradeFailure, aRPSpoofPreventRowStatus=aRPSpoofPreventRowStatus, swTimeRangeStartDay=swTimeRangeStartDay, dhcpServerScreenIPType=dhcpServerScreenIPType, Timeout=Timeout, voicevlanDeviceTagType=voicevlanDeviceTagType, ipifv6DefaultGateway=ipifv6DefaultGateway, aclL3RuleReplacePriority=aclL3RuleReplacePriority, impbBlackListVlanId=impbBlackListVlanId, ipifV6AddressEntry=ipifV6AddressEntry, snmpGlobalState=snmpGlobalState, swRadiusServerAddress=swRadiusServerAddress, qosDiffServType02=qosDiffServType02, aclL3RuleDstIpAddrMask=aclL3RuleDstIpAddrMask, LacpKey=LacpKey, voicevlanPortControlTable=voicevlanPortControlTable, stpTxHoldCount=stpTxHoldCount, swTimeRangeStartHour=swTimeRangeStartHour, companyACLGroup=companyACLGroup, qosDiffServType43=qosDiffServType43, dot1xAuthConfigPortSessionUserName=dot1xAuthConfigPortSessionUserName, aclv6L3RuleICMPMessageType=aclv6L3RuleICMPMessageType, trustedHostEntry=trustedHostEntry, qosTOSType07=qosTOSType07, sysPortCtrlType=sysPortCtrlType, ipifV6AddressTable=ipifV6AddressTable, dot1pPortTable=dot1pPortTable, aclL3RuleDstIpAddr=aclL3RuleDstIpAddr, firmwareTransferError=firmwareTransferError, snmpV3TrapPoePowerOnOff=snmpV3TrapPoePowerOnOff, qosDiffServType29=qosDiffServType29, snmpV3CommunityTable=snmpV3CommunityTable, staticStatus=staticStatus, voicevlanOUITelephonyOUI=voicevlanOUITelephonyOUI, dhcpBOOTPRelayOption82RemoteID=dhcpBOOTPRelayOption82RemoteID, dlinkPowerSavLinkStatusDetectState=dlinkPowerSavLinkStatusDetectState, impbSettingEntry=impbSettingEntry, voicevlanPortState=voicevlanPortState, dhcpv6RelayHopCount=dhcpv6RelayHopCount, trafficSegMemberList=trafficSegMemberList, impbWhiteListTable=impbWhiteListTable, qosMode=qosMode, aclL3RuleSrcIpAddr=aclL3RuleSrcIpAddr, igsVlanCfgQuerier=igsVlanCfgQuerier, igsRobustnessValue=igsRobustnessValue, aclL2RulePriority=aclL2RulePriority, aclProfileSrcMacAddrMask=aclProfileSrcMacAddrMask, syslogSrvSeverity=syslogSrvSeverity, portSecMLA=portSecMLA, ipv4syslogLogging=ipv4syslogLogging, igsVlanMulticastGroupEntry=igsVlanMulticastGroupEntry, sysSNTPSecondInterfaceName=sysSNTPSecondInterfaceName, snmpV3viewTreeSubtree=snmpV3viewTreeSubtree, rmonAlarmFallingThreshold=rmonAlarmFallingThreshold, snmpV3ViewTreeTable=snmpV3ViewTreeTable, ipv4aclProfileDstPortMask=ipv4aclProfileDstPortMask, companySNMPV3=companySNMPV3, aclv6L3RuleAction=aclv6L3RuleAction, sysGateway=sysGateway, dot1qVlanEgressPorts=dot1qVlanEgressPorts, sysTrapSystemEvent=sysTrapSystemEvent, securityTrustedHost=securityTrustedHost, sysSNTPDSTEndMin=sysSNTPDSTEndMin, cableDiagPair4FaultDistance=cableDiagPair4FaultDistance, sysSNTPFirstType=sysSNTPFirstType, radiusServerTable=radiusServerTable, stpPortDesignatedPort=stpPortDesignatedPort, stpPortDesignatedCost=stpPortDesignatedCost, companyPoEGroup=companyPoEGroup, sysRestart=sysRestart, qosDiffServType21=qosDiffServType21, portSecIndex=portSecIndex, poePowerOn=poePowerOn, aclProfileEntry=aclProfileEntry, sysTrapStateChangeEvent=sysTrapStateChangeEvent, neighborType=neighborType, sysSave=sysSave, ipifSupportV4V6Info=ipifSupportV4V6Info, companyDHCPRelay=companyDHCPRelay, staticMcastMac=staticMcastMac, igsHostPortPurgeInterval=igsHostPortPurgeInterval, sysLBDCtrlTable=sysLBDCtrlTable, impbBlackListMacAddress=impbBlackListMacAddress, dlinkGreenLEDShutoffTimeProfile1=dlinkGreenLEDShutoffTimeProfile1, sysLBDVlanLoopIndex=sysLBDVlanLoopIndex, voicevlanDeviceStatus=voicevlanDeviceStatus, ipifv6GlobalStatus=ipifv6GlobalStatus, aclProfileNo=aclProfileNo, autoSurveillanceVlanOUIMask=autoSurveillanceVlanOUIMask, aclL2Rule1pPriority=aclL2Rule1pPriority, sysLBDCtrlIndex=sysLBDCtrlIndex, poeThermalShutdown=poeThermalShutdown, swRadiusServerInterfaceName=swRadiusServerInterfaceName, rmonAlarmIndex=rmonAlarmIndex, dot1qVlanPortEntry=dot1qVlanPortEntry, ipv4snmpV3HostCommunityName=ipv4snmpV3HostCommunityName, dlinklldpState=dlinklldpState, sysPoEPortSettingEntry=sysPoEPortSettingEntry, igsVlanRouterPortList=igsVlanRouterPortList, companyLBD=companyLBD, igsQueryInterval=igsQueryInterval, dlinkGreenSystemHibernationState=dlinkGreenSystemHibernationState, qosTOSType01=qosTOSType01, qosDiffServType58=qosDiffServType58, impbAutoScanIpAddressFrom=impbAutoScanIpAddressFrom, qosDiffServType27=qosDiffServType27, snmpV3CommunityStatus=snmpV3CommunityStatus, snmpV3TrapBootup=snmpV3TrapBootup, aclL3Rule=aclL3Rule, stpPortForwardTransitions=stpPortForwardTransitions, igsGrpQueryInterval=igsGrpQueryInterval, qosDiffServType36=qosDiffServType36, poePortPower=poePortPower, broadcastStormCtrlLimitType=broadcastStormCtrlLimitType, aclL2RuleEntry=aclL2RuleEntry, ipv4sysSNTPSecondServer=ipv4sysSNTPSecondServer, companyStaticMAC=companyStaticMAC, tftpCfgTargetInterfaceName=tftpCfgTargetInterfaceName, tftpFwTargetServerIpType=tftpFwTargetServerIpType, swRadiusServerSharedSecret=swRadiusServerSharedSecret, tftpFwTargetServerIpAddress=tftpFwTargetServerIpAddress, companyDHCPv6Relay=companyDHCPv6Relay, qosDiffServType59=qosDiffServType59, trustedHostStatus=trustedHostStatus, sysSNTPFirstInterfaceName=sysSNTPFirstInterfaceName, ipv4snmpV3HostStatus=ipv4snmpV3HostStatus, dlinklldpConfigManAddrTable=dlinklldpConfigManAddrTable, sysPortCtrlFlowControl=sysPortCtrlFlowControl, rmonAlarmStatus=rmonAlarmStatus, dhcpBOOTPRelayInterface=dhcpBOOTPRelayInterface, pethPsePortPowerBudget=pethPsePortPowerBudget, qosDiffServ=qosDiffServ, aclv6L3RuleDstIpAddrMask=aclv6L3RuleDstIpAddrMask, swTimeRangeEndMonth=swTimeRangeEndMonth, snmpV3CommunityName=snmpV3CommunityName, bandwidthCtrlTable=bandwidthCtrlTable, ipifv6DHCPStatus=ipifv6DHCPStatus, dot1xAuthConfigPortTable=dot1xAuthConfigPortTable, tftpCfgTargetImageFileName=tftpCfgTargetImageFileName, sysGroupInterval=sysGroupInterval, aclL3RuleTcpUdpDstPort=aclL3RuleTcpUdpDstPort, PortLaMode=PortLaMode, dhcpBOOTPRelayManagement=dhcpBOOTPRelayManagement, impbBlackListIpAddress=impbBlackListIpAddress, qosDiffServType04=qosDiffServType04, aclL3RuleTable=aclL3RuleTable, sysTrapIP=sysTrapIP, voicevlanOUITable=voicevlanOUITable, igsVlanQuerier=igsVlanQuerier, dhcpBOOTPRelayManagementOption82=dhcpBOOTPRelayManagementOption82, dot1xAuthConfigPortEntry=dot1xAuthConfigPortEntry, impbInsIpPacPortState=impbInsIpPacPortState, staticMcastTable=staticMcastTable, voicevlanPortAutoDetection=voicevlanPortAutoDetection, voicevlanDevicePort=voicevlanDevicePort)
mibBuilder.exportSymbols("DGS-1210-10P_BX", companyTraps=companyTraps, snmpV3viewTreeMask=snmpV3viewTreeMask, dhcpBOOTPRelayServerIP=dhcpBOOTPRelayServerIP, cableDiagPair1FaultDistance=cableDiagPair1FaultDistance, lldpMEDPortState=lldpMEDPortState, sysLBDInterval=sysLBDInterval, voicevlanDevicePriority=voicevlanDevicePriority, dlinkGreenPortShutoff=dlinkGreenPortShutoff, dhcpBOOTPRelayTimeThreshold=dhcpBOOTPRelayTimeThreshold, aclL3RuleProfileNo=aclL3RuleProfileNo, aclv6L3RuleTcpUdpDstPortMask=aclv6L3RuleTcpUdpDstPortMask, impbAutoScanIpAddressTo=impbAutoScanIpAddressTo, stpPortOperEdgePort=stpPortOperEdgePort, dlinkGreenPortStandbyPortList=dlinkGreenPortStandbyPortList, securityIpMacPortBinding=securityIpMacPortBinding, dlinklldpAntiRoguePortIndex=dlinklldpAntiRoguePortIndex, dhcpLocalRelayEntry=dhcpLocalRelayEntry, voicevlanOUIMask=voicevlanOUIMask, dot1qVlanManagementid=dot1qVlanManagementid, snmpV3TrapPortLinkUpDown=snmpV3TrapPortLinkUpDown, ipv4sysGateway=ipv4sysGateway, stpPortEdge=stpPortEdge, ipv4dhcpServerScreenServerIndex=ipv4dhcpServerScreenServerIndex, rmonStatsDataSource=rmonStatsDataSource, dlinkGreenSystemHibernationTimeProfile2=dlinkGreenSystemHibernationTimeProfile2, tftpFwTargetGroup=tftpFwTargetGroup, stpPortEntry=stpPortEntry, qosDiffServType11=qosDiffServType11, igsVlanMulticastGroupIpAddress=igsVlanMulticastGroupIpAddress, aclv6L3RuleTcpUdpSrcPort=aclv6L3RuleTcpUdpSrcPort, qosTOSType04=qosTOSType04, dot1pPortEntry=dot1pPortEntry, qosTOSEnable=qosTOSEnable, cableDiagPair4TestResult=cableDiagPair4TestResult, qosDiffServTypeGroup=qosDiffServTypeGroup, aclProfileArpSenderIpAddrMask=aclProfileArpSenderIpAddrMask, qosDiffServType13=qosDiffServType13, ipv4syslogUDPPort=ipv4syslogUDPPort, qosDiffServType24=qosDiffServType24, igsVlanRtrPortList=igsVlanRtrPortList, dot1xAuthSuppTimeout=dot1xAuthSuppTimeout, dlinklldpLocManAddr=dlinklldpLocManAddr, qosTOSType06=qosTOSType06, aclProfileSrcPortMask=aclProfileSrcPortMask, sysLoginTimeoutInterval=sysLoginTimeoutInterval, igsVlanRouterVlanId=igsVlanRouterVlanId, ipv4sysSNTPDSTEndMon=ipv4sysSNTPDSTEndMon, impbSmartTable=impbSmartTable, dhcpLocalRelaySettingsVLANID=dhcpLocalRelaySettingsVLANID, securityARPSpoofPrevent=securityARPSpoofPrevent, dhcpBOOTPRelayInterfaceSettingsRowStatus=dhcpBOOTPRelayInterfaceSettingsRowStatus, dhcpLocalRelayTable=dhcpLocalRelayTable, stpPortPathCost=stpPortPathCost, staticAutoLearningList=staticAutoLearningList, qosDiffServType37=qosDiffServType37, ipv4snmpV3HostVersion=ipv4snmpV3HostVersion, ipv4trustedHostRowStatus=ipv4trustedHostRowStatus, aRPSpoofPreventMacAddress=aRPSpoofPreventMacAddress, snmpV3GroupSecurityModel=snmpV3GroupSecurityModel, neighborTable=neighborTable, snmpV3CommunityEntry=snmpV3CommunityEntry, PortList=PortList, queuingMechanism=queuingMechanism, companySNTPSetting=companySNTPSetting, ipv4sysSNTPDSTStartMon=ipv4sysSNTPDSTStartMon, snmpV3UserName=snmpV3UserName, poePortSettingPowerLimit=poePortSettingPowerLimit, poeSystemSettingPowerThreshold=poeSystemSettingPowerThreshold, rmonAlarmRisingEventIndex=rmonAlarmRisingEventIndex, companyCableDiagnostic=companyCableDiagnostic, dot1qVlanUngisterMCFilterTable=dot1qVlanUngisterMCFilterTable, sysLBDRecoverTime=sysLBDRecoverTime, LldpManAddress=LldpManAddress, snmpV3TrapSNMPAuthentication=snmpV3TrapSNMPAuthentication, sysSNTPPollInterval=sysSNTPPollInterval, neighborMACAddr=neighborMACAddr, dhcpServerScreenTrustedServerIndex=dhcpServerScreenTrustedServerIndex, impbPortIndex=impbPortIndex, ipv4trustedHostIpMask=ipv4trustedHostIpMask, dhcpBOOTPRelayState=dhcpBOOTPRelayState, snmpV3HostStatus=snmpV3HostStatus, swTimeRangeEndYear=swTimeRangeEndYear, syslogSrvRowStatus=syslogSrvRowStatus, miscStatisticsReset=miscStatisticsReset, qosDiffServType14=qosDiffServType14, voiceVlanTimeout=voiceVlanTimeout, laPortControlTable=laPortControlTable, companyMiscGroup=companyMiscGroup, ipv4sysSNTPDSTEndDay=ipv4sysSNTPDSTEndDay, sslCiphers=sslCiphers, trafficSegIfIndex=trafficSegIfIndex, syslogTimeStampOption=syslogTimeStampOption, voicevlanOUIEntry=voicevlanOUIEntry, poePortSettingState=poePortSettingState, snmpV3TrapPoePowerError=snmpV3TrapPoePowerError, qosDiffServType54=qosDiffServType54, qosDiffServType63=qosDiffServType63, rmonHistoryOwner=rmonHistoryOwner, snmpV3UserEntry=snmpV3UserEntry, voicevlanDeviceEntry=voicevlanDeviceEntry, syslogSrvPort=syslogSrvPort, stpPortEnable=stpPortEnable, ipv4sysSNTPDSTState=ipv4sysSNTPDSTState, aclL3RuleIgmpType=aclL3RuleIgmpType, aclv6L3RuleAccessID=aclv6L3RuleAccessID, aclL3RuleTcpRstBit=aclL3RuleTcpRstBit, snmpV3Group=snmpV3Group, ipv4sysIpAddrCfgMode=ipv4sysIpAddrCfgMode, stpPortDesignatedRoot=stpPortDesignatedRoot, staticTable=staticTable, igsVlanFilterEntry=igsVlanFilterEntry, stpPortProtocolMigration=stpPortProtocolMigration, trafficSegStatus=trafficSegStatus, impbDHCPPortState=impbDHCPPortState, snmpV3GroupReadViewName=snmpV3GroupReadViewName, ipv4sysSNTPPollInterval=ipv4sysSNTPPollInterval, firmwareChecksumError=firmwareChecksumError, snmpV3Community=snmpV3Community, companyTrapSetting=companyTrapSetting, tftpFwTargetTftpOperationStatus=tftpFwTargetTftpOperationStatus, snmpV3GroupEntry=snmpV3GroupEntry, swTimeRangeSaturday=swTimeRangeSaturday, qosDiffServType25=qosDiffServType25, syslogSrvFacility=syslogSrvFacility, aclL3RuleTcpUdpSrcPortMask=aclL3RuleTcpUdpSrcPortMask, dlinkGreenPortShutoffState=dlinkGreenPortShutoffState, autoSurveillanceVlanOUIComponentType=autoSurveillanceVlanOUIComponentType, dlinkGreenPortShutoffTimeProfile2=dlinkGreenPortShutoffTimeProfile2, rmonHistoryBucketsRequested=rmonHistoryBucketsRequested, voicevlanPortControlEntry=voicevlanPortControlEntry, swTimeRangeRowStatus=swTimeRangeRowStatus, snmpV3UserPrivProtocol=snmpV3UserPrivProtocol, dot1qVlanUngisterMCFilterVlanId=dot1qVlanUngisterMCFilterVlanId, aclL3RuleTcpSynBit=aclL3RuleTcpSynBit, dlinklldpConfigManAddrPortsTxEnable=dlinklldpConfigManAddrPortsTxEnable, igsSystem=igsSystem, cableDiagTriggerIndex=cableDiagTriggerIndex, stpRootCost=stpRootCost, aclv6L3RuleTcpUrgBit=aclv6L3RuleTcpUrgBit, ipv4snmpV3HostTable=ipv4snmpV3HostTable, qosTOSType03=qosTOSType03, securitySSL=securitySSL, qosDiffServType48=qosDiffServType48, trustedHostIpMask=trustedHostIpMask, dlink_products=dlink_products, rmonHistoryStatus=rmonHistoryStatus, dot1qVlanManagementOnOff=dot1qVlanManagementOnOff, aclL3RuleTcpUrgBit=aclL3RuleTcpUrgBit, ipv4trustedHostIpAddr=ipv4trustedHostIpAddr, sysLBDVlanLoopEntry=sysLBDVlanLoopEntry, poeShortCircuit=poeShortCircuit, dlinkPowerSavCableLenDetectionState=dlinkPowerSavCableLenDetectionState, rmonAlarmOwner=rmonAlarmOwner, aclL2RuleSrcMacAddr=aclL2RuleSrcMacAddr, stpGlobal=stpGlobal, stpPortPriority=stpPortPriority, aclProfileDstIpAddrMask=aclProfileDstIpAddrMask, aclL2RuleVlanId=aclL2RuleVlanId, ipv4syslogSeverity=ipv4syslogSeverity, impbSmartEntry=impbSmartEntry, qosDiffServType03=qosDiffServType03, companySystem=companySystem, qosDiffServType46=qosDiffServType46, snmpV3TrapFirmUpgrade=snmpV3TrapFirmUpgrade, snmpV3UserPrivProtocolPassword=snmpV3UserPrivProtocolPassword, companyIgsGroup=companyIgsGroup, stpHelloTime=stpHelloTime, dlinklldpReinitDelay=dlinklldpReinitDelay, impbWhiteListPort=impbWhiteListPort, swTimeRangeSettingTable=swTimeRangeSettingTable, snmpV3EngineID=snmpV3EngineID, igsReportToAllPort=igsReportToAllPort, sysLBDPortLoopStatus=sysLBDPortLoopStatus, aclProfileType=aclProfileType, dlinkGreenPortStandby=dlinkGreenPortStandby, ipv4sysSNTPDSTStartDay=ipv4sysSNTPDSTStartDay, aclProfileSrcIpAddrMaskType=aclProfileSrcIpAddrMaskType, portD3State=portD3State, qosDiffServType12=qosDiffServType12, aclL3RuleTcpFinBit=aclL3RuleTcpFinBit, rmonEventEntry=rmonEventEntry, ipv4aclProfileTable=ipv4aclProfileTable, sysDdpProtStatusControl=sysDdpProtStatusControl, aclProfileDstIpAddrMaskType=aclProfileDstIpAddrMaskType, dlinkGreenPortShutoffTimeProfile1=dlinkGreenPortShutoffTimeProfile1, ipv4aclProfileArpSenderMacAddrMask=ipv4aclProfileArpSenderMacAddrMask, dhcpServerScreenEnablePortlist=dhcpServerScreenEnablePortlist, impbWhiteListMacAddress=impbWhiteListMacAddress, dhcpv6RelayOption37RemoteIDType=dhcpv6RelayOption37RemoteIDType, ipifV6AddressIpType=ipifV6AddressIpType, ipv4aclProfileSrcIpAddrMask=ipv4aclProfileSrcIpAddrMask, qosDiffServType16=qosDiffServType16, laPortActorTimeout=laPortActorTimeout, ipv4aclProfileSrcPortMask=ipv4aclProfileSrcPortMask, cableDiagPair3TestResult=cableDiagPair3TestResult, voicevlanOUIDescription=voicevlanOUIDescription, pethPsePortPowerRemainder=pethPsePortPowerRemainder, voicevlanPortControlIndex=voicevlanPortControlIndex, qosDiffServType60=qosDiffServType60, rmonEventDescription=rmonEventDescription, sysSNTPDSTStartMin=sysSNTPDSTStartMin, bandwidthCtrlIndex=bandwidthCtrlIndex, companyQoSGroup=companyQoSGroup, sysTrapFirmUpgradeEvent=sysTrapFirmUpgradeEvent, stpBridgeForwardDelay=stpBridgeForwardDelay, tftpFwTftpOperationStatus=tftpFwTftpOperationStatus, dot1xAuthConfigPortSessionTime=dot1xAuthConfigPortSessionTime, igsVlanSnoopStatus=igsVlanSnoopStatus, aRPSpoofPreventEntry=aRPSpoofPreventEntry, ipv4aclProfileRuleCount=ipv4aclProfileRuleCount, sysSNTPGMTMinutes=sysSNTPGMTMinutes, voiceVlanId=voiceVlanId, swTimeRangeSunday=swTimeRangeSunday, dhcpv6RelayOption37CheckState=dhcpv6RelayOption37CheckState, qosDiffServType34=qosDiffServType34, igsVlanMulticastGroupVlanId=igsVlanMulticastGroupVlanId, aclL3RuleICMPMessageType=aclL3RuleICMPMessageType, companyStaticMcast=companyStaticMcast, swRadiusServerIPType=swRadiusServerIPType, snmpV3GroupStatus=snmpV3GroupStatus, ipifName=ipifName, Ipv6Address=Ipv6Address, companyLLDPSetting=companyLLDPSetting, staticDisableAutoLearn=staticDisableAutoLearn, igsVlanMulticastGroupPortList=igsVlanMulticastGroupPortList, dlinklldpTxDelay=dlinklldpTxDelay, rmonAlarm=rmonAlarm, ipv4sysSNTPTimeSeconds=ipv4sysSNTPTimeSeconds, dgs_1210_10pbx=dgs_1210_10pbx, impbPortState=impbPortState, swTimeRangeMonday=swTimeRangeMonday, dlinkGreenPortStandbyTimeProfile1=dlinkGreenPortStandbyTimeProfile1, dlink_DGS12XXSeriesProd=dlink_DGS12XXSeriesProd, aclL3RuleTcpUdpSrcPort=aclL3RuleTcpUdpSrcPort, dhcpv6RelayOption37=dhcpv6RelayOption37, aclv6L3RuleReplacePriority=aclv6L3RuleReplacePriority, bandwidthCtrlRxThreshold=bandwidthCtrlRxThreshold, stpAdminPortPathCost=stpAdminPortPathCost, aclv6L3RuleProfileNo=aclv6L3RuleProfileNo, sysPortCtrlIndex=sysPortCtrlIndex, laPortControlIndex=laPortControlIndex, qosDiffServType19=qosDiffServType19, aclL2RuleEtherType=aclL2RuleEtherType, lldpMEDPortControlEntry=lldpMEDPortControlEntry, igsVlanRouterTable=igsVlanRouterTable, dot3azEEEset=dot3azEEEset, qosDiffServType26=qosDiffServType26, trustedHostIpAddr=trustedHostIpAddr, aclv6L3RuleTcpUdpDstPort=aclv6L3RuleTcpUdpDstPort, poePortTimeBaseSchduleID=poePortTimeBaseSchduleID, aclL3RuleDscp=aclL3RuleDscp, radius=radius, syslogSrvTable=syslogSrvTable, aclProfileRuleCount=aclProfileRuleCount)
mibBuilder.exportSymbols("DGS-1210-10P_BX", sysDdp=sysDdp, aclProfileDstMacAddrMask=aclProfileDstMacAddrMask, rstpStatus=rstpStatus, stpPortRestrictedTCN=stpPortRestrictedTCN, qosDiffServType31=qosDiffServType31, ipifv6NSRetransmitTime=ipifv6NSRetransmitTime, sysSNTPDSTOffset=sysSNTPDSTOffset, ipv4aclProfileEntry=ipv4aclProfileEntry, dot1qVlanUngisterMCFiltermode=dot1qVlanUngisterMCFiltermode, companyNeighbor=companyNeighbor, aclL3RuleProtocol=aclL3RuleProtocol, tftpFwTargetInterfaceName=tftpFwTargetInterfaceName, ipv4sysSNTPDSTStartMin=ipv4sysSNTPDSTStartMin, dhcpv6RelayServerIP=dhcpv6RelayServerIP, ipv4sysSNTPDSTOffset=ipv4sysSNTPDSTOffset, aclv6L3RulePortList=aclv6L3RulePortList, dlinkGreenLEDShutoffState=dlinkGreenLEDShutoffState, ipv4sysSNTPDSTStartHour=ipv4sysSNTPDSTStartHour, impbAutoScanStatus=impbAutoScanStatus, tftpConfigTftpOperationStatus=tftpConfigTftpOperationStatus, ipv4sysSNTPGMTMinutes=ipv4sysSNTPGMTMinutes, rmonAlarmVariable=rmonAlarmVariable, impbSmartBinding=impbSmartBinding, igsStatus=igsStatus, sysMirrorCtrlIngressMirroring=sysMirrorCtrlIngressMirroring, snmpV3GroupNotifyViewName=snmpV3GroupNotifyViewName, companyTimeRangeMgmt=companyTimeRangeMgmt, ipv4sysSNTPFirstServer=ipv4sysSNTPFirstServer, poePortSettingUserDefine=poePortSettingUserDefine, qosDiffServType45=qosDiffServType45, igsVlanFilterTable=igsVlanFilterTable, qosDiffServType55=qosDiffServType55, qosDiffServEnable=qosDiffServEnable, lldpMEDPortControlIndex=lldpMEDPortControlIndex, neighborIfindex=neighborIfindex, qosDiffServType05=qosDiffServType05, qosDiffServType62=qosDiffServType62, dhcpBOOTPRelayInterfaceSettingsEntry=dhcpBOOTPRelayInterfaceSettingsEntry, staticMac=staticMac, staticMcastEntry=staticMcastEntry, voicevlanOUIStatus=voicevlanOUIStatus, poeOverLoad=poeOverLoad, tftpCfgTargetGroup=tftpCfgTargetGroup, swTimeRangeWednesday=swTimeRangeWednesday, dhcpServerScreenTrustedServerEntry=dhcpServerScreenTrustedServerEntry, tftpFwServerIpAddress=tftpFwServerIpAddress, dlinklldpMsgTxInterval=dlinklldpMsgTxInterval, bandwidthCtrlTxThreshold=bandwidthCtrlTxThreshold, aclv6L3RuleTable=aclv6L3RuleTable, sysIpSubnetMask=sysIpSubnetMask, snmpV3UserAuthProtocolPassword=snmpV3UserAuthProtocolPassword, qosDiffServType51=qosDiffServType51, voicevlanDeviceTable=voicevlanDeviceTable, dhcpv6RelayState=dhcpv6RelayState, impbBlackListEntry=impbBlackListEntry, qosDiffServType47=qosDiffServType47, impbBlackListTable=impbBlackListTable, sysSystemPassword=sysSystemPassword, rmonAlarmSampleType=rmonAlarmSampleType, aclL2RuleStatus=aclL2RuleStatus, rmonAlarmFallingEventIndex=rmonAlarmFallingEventIndex, snmpV3TrapRSTPStateChange=snmpV3TrapRSTPStateChange, RmonStatus=RmonStatus, dlinkGreenPortShutoffPortList=dlinkGreenPortShutoffPortList, sysLocationName=sysLocationName, firmwareIllegalFile=firmwareIllegalFile, aclL3RuleStatus=aclL3RuleStatus, dot1pPortPriority=dot1pPortPriority, sslSecurityHttpStatus=sslSecurityHttpStatus, aclL3RuleAction=aclL3RuleAction, aclv6L3RuleSrcIpAddrMask=aclv6L3RuleSrcIpAddrMask, aclv6L3RuleTcpRstBit=aclv6L3RuleTcpRstBit, dhcpLocalRelayGlobalState=dhcpLocalRelayGlobalState, ipv4syslogFacility=ipv4syslogFacility, poePortDelayPowerDetect=poePortDelayPowerDetect, tftpFwImageFileName=tftpFwImageFileName, tftpFwTftpOperation=tftpFwTftpOperation, sysPortCtrlSpeed=sysPortCtrlSpeed, aRPSpoofPreventPortList=aRPSpoofPreventPortList, qosDiffServType50=qosDiffServType50, aclL2RuleAction=aclL2RuleAction, snmpV3CommunityPolicy=snmpV3CommunityPolicy, rmonEventIndex=rmonEventIndex, laSystem=laSystem, tftpConfigFileName=tftpConfigFileName, ipifV6AddressRowStatus=ipifV6AddressRowStatus, laPortActorActivity=laPortActorActivity, broadcastStormCtrlThreshold=broadcastStormCtrlThreshold, ipifV6AddressIpPrefix=ipifV6AddressIpPrefix, dot1xAuth=dot1xAuth, companyGreenSetting=companyGreenSetting, aclProfileTable=aclProfileTable, stpPriority=stpPriority, ipv4sysSNTPDSTEndMin=ipv4sysSNTPDSTEndMin, ipv4snmpV3HostAddress=ipv4snmpV3HostAddress, sysJumboFrameEnable=sysJumboFrameEnable, aclv6L3RuleTcpSynBit=aclv6L3RuleTcpSynBit, snmpV3GroupWriteViewName=snmpV3GroupWriteViewName, rmonAlarmEntry=rmonAlarmEntry, companyIpifGroup=companyIpifGroup, dhcpv6RelayOption37State=dhcpv6RelayOption37State, qosDiffServType41=qosDiffServType41, snmpV3User=snmpV3User, dlinkGreenSystemHibernationTimeProfile1=dlinkGreenSystemHibernationTimeProfile1, poePortSettingPriority=poePortSettingPriority, sysPortCtrlTable=sysPortCtrlTable, snmpV3GroupTable=snmpV3GroupTable, stpForwardDelay=stpForwardDelay, qosDiffServType61=qosDiffServType61, dlinkGreenSystemHibernation=dlinkGreenSystemHibernation, ipv4aclProfileDstIpAddrMask=ipv4aclProfileDstIpAddrMask, tftpCfgTargetTftpOperationStatus=tftpCfgTargetTftpOperationStatus, sysSNTPDSTStartHour=sysSNTPDSTStartHour, voicevlanPortCurrentTagMode=voicevlanPortCurrentTagMode, aclProfile=aclProfile, dhcpBOOTPRelayInterfaceSettingsTable=dhcpBOOTPRelayInterfaceSettingsTable, snmpV3GroupName=snmpV3GroupName, portSecState=portSecState, qosDiffServType35=qosDiffServType35, swTimeRangeTuesday=swTimeRangeTuesday, stpRootPort=stpRootPort, companyDHCPLocalRelay=companyDHCPLocalRelay, igsRouterPortPurgeInterval=igsRouterPortPurgeInterval, qosDiffServType28=qosDiffServType28, sysSNTPDSTStartDay=sysSNTPDSTStartDay, aclL3RuleTcpAckBit=aclL3RuleTcpAckBit, aclv6L3RuleICMPMessageCode=aclv6L3RuleICMPMessageCode, qosDiffServType56=qosDiffServType56, snmpV3HostEntry=snmpV3HostEntry, companyDot1qVlanGroup=companyDot1qVlanGroup, aclv6L3RuleTcpUdpSrcPortMask=aclv6L3RuleTcpUdpSrcPortMask, dlinkGreenPortStandbyState=dlinkGreenPortStandbyState, qosDiffServType57=qosDiffServType57, tftpFwTargetImageFileName=tftpFwTargetImageFileName, qosDiffServType18=qosDiffServType18, ipv4aclProfileMask=ipv4aclProfileMask, rmonStatsOwner=rmonStatsOwner, sysLBDVlanLoopTable=sysLBDVlanLoopTable, ipv4aclProfileNo=ipv4aclProfileNo, sysDdpProtStatusTable=sysDdpProtStatusTable, igsVlanMulticastGroupMacAddress=igsVlanMulticastGroupMacAddress, sslCipherSuiteList=sslCipherSuiteList, ipv4dhcpServerScreenServerAddress=ipv4dhcpServerScreenServerAddress, voicevlanDevice=voicevlanDevice, dhcpv6RelayInterfaceSettingsTable=dhcpv6RelayInterfaceSettingsTable, rmonStatsEntry=rmonStatsEntry, d_link=d_link, ipv4aclProfileIPProtocol=ipv4aclProfileIPProtocol, snmpV3UserTable=snmpV3UserTable, syslogInterfaceName=syslogInterfaceName, dlinkGreenLEDShutoffTimeProfile2=dlinkGreenLEDShutoffTimeProfile2, qosDiffServType32=qosDiffServType32, neighborRowStatus=neighborRowStatus, aclv6L3RuleEntry=aclv6L3RuleEntry, igsVlanQueryInterval=igsVlanQueryInterval, rmonHistoryTable=rmonHistoryTable, snmpV3HostTable=snmpV3HostTable, neighborIPv6Addr=neighborIPv6Addr, aclL3RuleICMPMessageCode=aclL3RuleICMPMessageCode, impbSmartMacAddress=impbSmartMacAddress)
