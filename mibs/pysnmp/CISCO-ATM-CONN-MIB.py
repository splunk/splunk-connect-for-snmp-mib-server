#
# PySNMP MIB module CISCO-ATM-CONN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ATM-CONN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:33:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
atmVplVpi, AtmTrafficDescrParamIndex, atmVclVpi, atmVclVci = mibBuilder.importSymbols("ATM-MIB", "atmVplVpi", "AtmTrafficDescrParamIndex", "atmVclVpi", "atmVclVci")
NsapAtmAddr, = mibBuilder.importSymbols("CISCO-ATM-IF-MIB", "NsapAtmAddr")
LsPerVcqThresholdGroup, = mibBuilder.importSymbols("CISCO-ATM-RM-MIB", "LsPerVcqThresholdGroup")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ObjectIdentity, Bits, Counter64, IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, ModuleIdentity, Counter32, TimeTicks, MibIdentifier, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "Counter64", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "ModuleIdentity", "Counter32", "TimeTicks", "MibIdentifier", "iso", "NotificationType")
TimeStamp, RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
ciscoAtmConnMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 13))
ciscoAtmConnMIB.setRevisions(('2002-07-12 00:00', '2001-10-30 00:00', '2001-10-10 00:00', '2001-08-06 00:00', '2001-01-29 00:00', '1998-10-02 00:00', '1997-05-26 00:00', '1996-11-01 00:00', '1998-07-26 00:00',))
if mibBuilder.loadTexts: ciscoAtmConnMIB.setLastUpdated('200207120000Z')
if mibBuilder.loadTexts: ciscoAtmConnMIB.setOrganization('Cisco Systems, Inc.')
ciscoAtmConnMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 13, 1))
class CastType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("pointToPoint", 1), ("pointToMultiPointRoot", 2), ("pointToMultiPointLeaf", 3))

class ConfigType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("permanent", 2), ("switch", 3), ("soft", 4), ("softPassive", 5))

class SpanType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("transit", 2), ("terminate", 3), ("both", 4))

class EnableStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

class UpcStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("passing", 1), ("tagging", 2), ("dropping", 3), ("localShaping", 4))

class ConnState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("setup", 1), ("release", 2), ("notInstalled", 3), ("down", 4), ("up", 5))

class Location(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("calling", 2), ("called", 3))

class Direction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("p2pCallingSide", 2), ("p2pCalledSide", 3), ("p2mpRoot", 4), ("p2mpLeaf", 5))

class SnoopDirType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("transmit", 1), ("receive", 2))

ciscoAtmVpl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1))
ciscoAtmVplTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1), )
if mibBuilder.loadTexts: ciscoAtmVplTable.setStatus('current')
ciscoAtmVplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: ciscoAtmVplEntry.setStatus('current')
ciscoAtmVplCastType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 1), CastType().clone('pointToPoint')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplCastType.setStatus('current')
ciscoAtmVplSpanType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 2), SpanType().clone('transit')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplSpanType.setStatus('current')
ciscoAtmVplConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 3), ConfigType().clone('permanent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplConfigType.setStatus('current')
ciscoAtmVplRxUpcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 4), UpcStatus().clone('passing')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplRxUpcMode.setStatus('current')
ciscoAtmVplConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 5), ConnState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplConnState.setStatus('current')
ciscoAtmVplOamLoopbkTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplOamLoopbkTxInterval.setStatus('current')
ciscoAtmVplOamSegmentLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 7), EnableStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplOamSegmentLoopback.setStatus('current')
ciscoAtmVplOamEndLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 8), EnableStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplOamEndLoopback.setStatus('current')
ciscoAtmVplOamAisEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 9), EnableStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplOamAisEnable.setStatus('current')
ciscoAtmVplOamRdiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 10), EnableStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplOamRdiEnable.setStatus('current')
ciscoAtmVplInstallTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplInstallTime.setStatus('current')
ciscoAtmVplInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplInCells.setStatus('current')
ciscoAtmVplOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplOutCells.setStatus('current')
ciscoAtmVplCrossIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 14), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplCrossIfIndex.setStatus('current')
ciscoAtmVplCrossVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplCrossVpi.setStatus('current')
ciscoAtmVplNextLeafIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 16), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplNextLeafIfIndex.setStatus('current')
ciscoAtmVplNextLeafVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplNextLeafVpi.setStatus('current')
ciscoAtmVplRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 18), NsapAtmAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplRemoteAddr.setStatus('current')
ciscoAtmVplRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplRemoteVpi.setStatus('current')
ciscoAtmVplLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 20), Location()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplLocation.setStatus('current')
ciscoAtmVplSlowRetryIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplSlowRetryIntv.setStatus('current')
ciscoAtmVplNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplNumAttempts.setStatus('current')
ciscoAtmVplLastReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplLastReleaseCause.setStatus('current')
ciscoAtmVplLogicalPortDef = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notLogicalIf", 1), ("isLogicalIf", 2))).clone('notLogicalIf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplLogicalPortDef.setStatus('current')
ciscoAtmVplLogicalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 25), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplLogicalPortIndex.setStatus('current')
ciscoAtmVplUpcViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplUpcViolations.setStatus('current')
ciscoAtmVplEpdTpdCellDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplEpdTpdCellDrops.setStatus('obsolete')
ciscoAtmVplEpdTpdPacketDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplEpdTpdPacketDrops.setStatus('obsolete')
ciscoAtmVplEpdTpdPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplEpdTpdPacketsIn.setStatus('obsolete')
ciscoAtmVplClp1Drops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplClp1Drops.setStatus('obsolete')
ciscoAtmVplDefaultRxUpcTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplDefaultRxUpcTolerance.setStatus('current')
ciscoAtmVplDefaultRxUpcVbrCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplDefaultRxUpcVbrCdvt.setStatus('current')
ciscoAtmVplLsPerVcqWrrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplLsPerVcqWrrWeight.setStatus('current')
ciscoAtmVplLsPerVcqTunnelIsShaped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplLsPerVcqTunnelIsShaped.setStatus('current')
ciscoAtmVplLsPerVcqXmtQueuedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplLsPerVcqXmtQueuedCells.setStatus('current')
ciscoAtmVplLsPerVcQThreshGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 36), LsPerVcqThresholdGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplLsPerVcQThreshGrp.setStatus('current')
ciscoAtmVplInClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplInClp0Cells.setStatus('current')
ciscoAtmVplInClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplInClp1Cells.setStatus('current')
ciscoAtmVplOutClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplOutClp0Cells.setStatus('current')
ciscoAtmVplOutClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplOutClp1Cells.setStatus('current')
ciscoAtmVplCellDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplCellDrops.setStatus('current')
ciscoAtmVplClp0VcqFullCellDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplClp0VcqFullCellDrops.setStatus('current')
ciscoAtmVplVcqClpThreshCellDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplVcqClpThreshCellDrops.setStatus('current')
ciscoAtmVplLsPerVcqTunnelIsHierarchical = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 45), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplLsPerVcqTunnelIsHierarchical.setStatus('current')
ciscoAtmVplRxNegTraffDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 46), AtmTrafficDescrParamIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplRxNegTraffDescrIndex.setStatus('current')
ciscoAtmVplTxNegTraffDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 47), AtmTrafficDescrParamIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplTxNegTraffDescrIndex.setStatus('current')
ciscoAtmVplSwFabOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplSwFabOutCells.setStatus('current')
ciscoAtmVplSwFabOutClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplSwFabOutClp0Cells.setStatus('current')
ciscoAtmVplSwFabOutClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVplSwFabOutClp1Cells.setStatus('current')
ciscoAtmVplConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 51), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplConnName.setStatus('current')
ciscoAtmVplConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("endToEnd", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVplConnType.setStatus('current')
ciscoAtmVcl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2))
ciscoAtmVclTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1), )
if mibBuilder.loadTexts: ciscoAtmVclTable.setStatus('current')
ciscoAtmVclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: ciscoAtmVclEntry.setStatus('current')
ciscoAtmVclCastType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 1), CastType().clone('pointToPoint')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclCastType.setStatus('current')
ciscoAtmVclSpanType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 2), SpanType().clone('transit')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclSpanType.setStatus('current')
ciscoAtmVclConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 3), ConfigType().clone('permanent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclConfigType.setStatus('current')
ciscoAtmVclRxUpcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 4), UpcStatus().clone('passing')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclRxUpcMode.setStatus('current')
ciscoAtmVclEpdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("useTrafficDescr", 3))).clone('useTrafficDescr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclEpdEnable.setStatus('current')
ciscoAtmVclConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 6), ConnState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclConnState.setStatus('current')
ciscoAtmVclOamLoopbkTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclOamLoopbkTxInterval.setStatus('current')
ciscoAtmVclOamSegmentLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 8), EnableStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclOamSegmentLoopback.setStatus('current')
ciscoAtmVclOamEndLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 9), EnableStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclOamEndLoopback.setStatus('current')
ciscoAtmVclOamAisEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 10), EnableStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclOamAisEnable.setStatus('current')
ciscoAtmVclOamRdiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 11), EnableStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclOamRdiEnable.setStatus('current')
ciscoAtmVclInstallTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclInstallTime.setStatus('current')
ciscoAtmVclInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclInCells.setStatus('current')
ciscoAtmVclOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclOutCells.setStatus('current')
ciscoAtmVclCrossIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 15), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclCrossIfIndex.setStatus('current')
ciscoAtmVclCrossVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclCrossVpi.setStatus('current')
ciscoAtmVclCrossVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclCrossVci.setStatus('current')
ciscoAtmVclNextLeafIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 18), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclNextLeafIfIndex.setStatus('current')
ciscoAtmVclNextLeafVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclNextLeafVpi.setStatus('current')
ciscoAtmVclNextLeafVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclNextLeafVci.setStatus('current')
ciscoAtmVclAalEncapFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("aal5Snap", 2), ("aal5Nlpid", 3), ("aal5FrNlpid", 4), ("aal5Mux", 5), ("aal34Smds", 6), ("aalQsAal", 7), ("aal5Ilmi", 8), ("aal5Lane", 9), ("aal5Pnni", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclAalEncapFlag.setStatus('current')
ciscoAtmVclAalEncapProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("ip", 2), ("xns", 3), ("appletalk", 4), ("clns", 5), ("decnet", 6), ("novell", 7), ("apollo", 8), ("vines", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclAalEncapProtocol.setStatus('current')
ciscoAtmVclAalUserVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("boxConfigure", 2), ("busForward", 3), ("busSend", 4), ("clientConfigure", 5), ("clientData", 6), ("clientDirect", 7), ("clientDistribute", 8), ("clientForward", 9), ("clientSend", 10), ("configure", 11), ("serverConfigure", 12), ("serverDirect", 13), ("serverDistribute", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclAalUserVcType.setStatus('current')
ciscoAtmVclAtmInArpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclAtmInArpInterval.setStatus('current')
ciscoAtmVclRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 25), NsapAtmAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclRemoteAddr.setStatus('current')
ciscoAtmVclRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclRemoteVpi.setStatus('current')
ciscoAtmVclRemoteVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclRemoteVci.setStatus('current')
ciscoAtmVclLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 28), Location()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclLocation.setStatus('current')
ciscoAtmVclSlowRetryIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclSlowRetryIntv.setStatus('current')
ciscoAtmVclNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclNumAttempts.setStatus('current')
ciscoAtmVclLastReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclLastReleaseCause.setStatus('current')
ciscoAtmVclUpcViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclUpcViolations.setStatus('current')
ciscoAtmVclEpdTpdCellDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclEpdTpdCellDrops.setStatus('obsolete')
ciscoAtmVclEpdTpdPacketDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclEpdTpdPacketDrops.setStatus('current')
ciscoAtmVclEpdTpdPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclEpdTpdPacketsIn.setStatus('current')
ciscoAtmVclClp1Drops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclClp1Drops.setStatus('obsolete')
ciscoAtmVclDefaultRxUpcTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclDefaultRxUpcTolerance.setStatus('current')
ciscoAtmVclDefaultRxUpcVbrCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclDefaultRxUpcVbrCdvt.setStatus('current')
ciscoAtmVclLsPerVcqWrrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclLsPerVcqWrrWeight.setStatus('current')
ciscoAtmVclLsPerVcqXmtQueuedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclLsPerVcqXmtQueuedCells.setStatus('current')
ciscoAtmVclLsPerVcQThreshGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 42), LsPerVcqThresholdGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclLsPerVcQThreshGrp.setStatus('current')
ciscoAtmVclInClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclInClp0Cells.setStatus('current')
ciscoAtmVclInClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclInClp1Cells.setStatus('current')
ciscoAtmVclOutClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclOutClp0Cells.setStatus('current')
ciscoAtmVclOutClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclOutClp1Cells.setStatus('current')
ciscoAtmVclCellDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclCellDrops.setStatus('current')
ciscoAtmVclClp0VcqFullCellDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclClp0VcqFullCellDrops.setStatus('current')
ciscoAtmVclVcqClpThreshCellDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclVcqClpThreshCellDrops.setStatus('current')
ciscoAtmVclRxNegTraffDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 50), AtmTrafficDescrParamIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclRxNegTraffDescrIndex.setStatus('current')
ciscoAtmVclTxNegTraffDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 51), AtmTrafficDescrParamIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclTxNegTraffDescrIndex.setStatus('current')
ciscoAtmVclSwFabOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclSwFabOutCells.setStatus('current')
ciscoAtmVclSwFabOutClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclSwFabOutClp0Cells.setStatus('current')
ciscoAtmVclSwFabOutClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmVclSwFabOutClp1Cells.setStatus('current')
ciscoAtmVclConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 55), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclConnName.setStatus('current')
ciscoAtmVclConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 2, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("endToEnd", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmVclConnType.setStatus('current')
ciscoAtmSvp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 3))
ciscoAtmSvpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 3, 1), )
if mibBuilder.loadTexts: ciscoAtmSvpAddrTable.setStatus('current')
ciscoAtmSvpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-CONN-MIB", "ciscoAtmSvpAddr"), (0, "CISCO-ATM-CONN-MIB", "ciscoAtmSvpVpi"))
if mibBuilder.loadTexts: ciscoAtmSvpAddrEntry.setStatus('current')
ciscoAtmSvpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20))
if mibBuilder.loadTexts: ciscoAtmSvpAddr.setStatus('current')
ciscoAtmSvpVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: ciscoAtmSvpVpi.setStatus('current')
ciscoAtmSvpDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 3, 1, 1, 3), Direction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmSvpDirection.setStatus('current')
ciscoAtmSvc = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 4))
ciscoAtmSvcAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 4, 1), )
if mibBuilder.loadTexts: ciscoAtmSvcAddrTable.setStatus('current')
ciscoAtmSvcAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-CONN-MIB", "ciscoAtmSvcAddr"), (0, "CISCO-ATM-CONN-MIB", "ciscoAtmSvcVpi"), (0, "CISCO-ATM-CONN-MIB", "ciscoAtmSvcVci"))
if mibBuilder.loadTexts: ciscoAtmSvcAddrEntry.setStatus('current')
ciscoAtmSvcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20))
if mibBuilder.loadTexts: ciscoAtmSvcAddr.setStatus('current')
ciscoAtmSvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: ciscoAtmSvcVpi.setStatus('current')
ciscoAtmSvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: ciscoAtmSvcVci.setStatus('current')
ciscoAtmSvcDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 4, 1, 1, 4), Direction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmSvcDirection.setStatus('current')
ciscoAtmSnoopVc = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 5))
ciscoAtmSnoopVcTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 5, 1), )
if mibBuilder.loadTexts: ciscoAtmSnoopVcTable.setStatus('current')
ciscoAtmSnoopVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: ciscoAtmSnoopVcEntry.setStatus('current')
ciscoAtmSnoopVcSnoopedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 5, 1, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoAtmSnoopVcSnoopedIfIndex.setStatus('current')
ciscoAtmSnoopVcSnoopedVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoAtmSnoopVcSnoopedVpi.setStatus('current')
ciscoAtmSnoopVcSnoopedVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoAtmSnoopVcSnoopedVci.setStatus('current')
ciscoAtmSnoopVcDir = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 5, 1, 1, 4), SnoopDirType().clone('receive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoAtmSnoopVcDir.setStatus('current')
ciscoAtmSnoopVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 5, 1, 1, 5), ConnState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmSnoopVcState.setStatus('current')
ciscoAtmSnoopVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 5, 1, 1, 6), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoAtmSnoopVcRowStatus.setStatus('current')
ciscoAtmSnoopVp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 6))
ciscoAtmSnoopVpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 6, 1), )
if mibBuilder.loadTexts: ciscoAtmSnoopVpTable.setStatus('current')
ciscoAtmSnoopVpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: ciscoAtmSnoopVpEntry.setStatus('current')
ciscoAtmSnoopVpSnoopedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 6, 1, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoAtmSnoopVpSnoopedIfIndex.setStatus('current')
ciscoAtmSnoopVpSnoopedVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoAtmSnoopVpSnoopedVpi.setStatus('current')
ciscoAtmSnoopVpDir = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 6, 1, 1, 3), SnoopDirType().clone('receive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoAtmSnoopVpDir.setStatus('current')
ciscoAtmSnoopVpState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 6, 1, 1, 4), ConnState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmSnoopVpState.setStatus('current')
ciscoAtmSnoopVpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 6, 1, 1, 5), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoAtmSnoopVpRowStatus.setStatus('current')
ciscoAtmSvcFrameDiscardUsesAal5Ie = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 13, 1, 4, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmSvcFrameDiscardUsesAal5Ie.setStatus('current')
ciscoAtmConnMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 13, 3))
ciscoAtmConnMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 1))
ciscoAtmConnMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 2))
ciscoAtmConnMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 1, 1)).setObjects(("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmConnMIBCompliance = ciscoAtmConnMIBCompliance.setStatus('obsolete')
ciscoAtmConnMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 1, 2)).setObjects(("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBGroup"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmConnMIBCompliance2 = ciscoAtmConnMIBCompliance2.setStatus('obsolete')
ciscoAtmConnMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 1, 3)).setObjects(("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBGroup"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBGroup3"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBlsPerVcqGroup"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBlsFcPfqGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmConnMIBCompliance3 = ciscoAtmConnMIBCompliance3.setStatus('obsolete')
ciscoAtmConnMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 1, 4)).setObjects(("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBGroup"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBGroup3"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBlsPerVcqGroup2"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBlsFcPfqGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmConnMIBCompliance4 = ciscoAtmConnMIBCompliance4.setStatus('obsolete')
ciscoAtmConnMIBCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 1, 5)).setObjects(("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBGroup"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBGroup3"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBlsPerVcqGroup2"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBlsFcPfqGroup"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBNegTraffGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmConnMIBCompliance5 = ciscoAtmConnMIBCompliance5.setStatus('deprecated')
ciscoAtmConnMIBCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 1, 6)).setObjects(("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBGroup"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBGroup3"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBlsPerVcqGroup2"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBlsFcPfqGroup1"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBNegTraffGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmConnMIBCompliance6 = ciscoAtmConnMIBCompliance6.setStatus('deprecated')
ciscoAtmConnMIBCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 1, 7)).setObjects(("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBGroup1"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBGroup3"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBlsPerVcqGroup2"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBlsFcPfqGroup1"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBNegTraffGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmConnMIBCompliance7 = ciscoAtmConnMIBCompliance7.setStatus('deprecated')
ciscoAtmConnMIBCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 1, 8)).setObjects(("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBGroup4"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBGroup3"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBlsPerVcqGroup2"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBlsFcPfqGroup1"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnMIBNegTraffGroup"), ("CISCO-ATM-CONN-MIB", "ciscoAtmConnNmsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmConnMIBCompliance8 = ciscoAtmConnMIBCompliance8.setStatus('current')
ciscoAtmConnMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 2, 1)).setObjects(("CISCO-ATM-CONN-MIB", "ciscoAtmVplCastType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplSpanType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplConfigType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplRxUpcMode"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplConnState"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOamLoopbkTxInterval"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOamSegmentLoopback"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOamEndLoopback"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOamAisEnable"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOamRdiEnable"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplInstallTime"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplInCells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOutCells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplCrossIfIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplCrossVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplNextLeafIfIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplNextLeafVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplRemoteAddr"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplRemoteVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplLocation"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplSlowRetryIntv"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplNumAttempts"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplLastReleaseCause"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplLogicalPortDef"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplLogicalPortIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclCastType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclSpanType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclConfigType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclRxUpcMode"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclEpdEnable"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclConnState"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOamLoopbkTxInterval"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOamSegmentLoopback"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOamEndLoopback"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOamAisEnable"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOamRdiEnable"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclInstallTime"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclInCells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOutCells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclCrossIfIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclCrossVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclCrossVci"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclNextLeafIfIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclNextLeafVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclNextLeafVci"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclAalEncapFlag"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclAalEncapProtocol"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclAalUserVcType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclAtmInArpInterval"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclRemoteAddr"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclRemoteVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclRemoteVci"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclLocation"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclSlowRetryIntv"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclNumAttempts"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclLastReleaseCause"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSvpDirection"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSvcDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmConnMIBGroup = ciscoAtmConnMIBGroup.setStatus('deprecated')
ciscoAtmConnMIBGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 2, 2)).setObjects(("CISCO-ATM-CONN-MIB", "ciscoAtmVplUpcViolations"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplEpdTpdCellDrops"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplEpdTpdPacketDrops"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplEpdTpdPacketsIn"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplClp1Drops"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplDefaultRxUpcTolerance"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclUpcViolations"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclEpdTpdCellDrops"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclEpdTpdPacketDrops"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclEpdTpdPacketsIn"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclClp1Drops"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclDefaultRxUpcTolerance"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSvcFrameDiscardUsesAal5Ie"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmConnMIBGroup2 = ciscoAtmConnMIBGroup2.setStatus('obsolete')
ciscoAtmConnMIBGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 2, 3)).setObjects(("CISCO-ATM-CONN-MIB", "ciscoAtmVplDefaultRxUpcTolerance"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclDefaultRxUpcTolerance"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplDefaultRxUpcVbrCdvt"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclDefaultRxUpcVbrCdvt"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSvcFrameDiscardUsesAal5Ie"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmConnMIBGroup3 = ciscoAtmConnMIBGroup3.setStatus('current')
ciscoAtmConnMIBlsPerVcqGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 2, 4)).setObjects(("CISCO-ATM-CONN-MIB", "ciscoAtmVplLsPerVcqWrrWeight"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplLsPerVcqTunnelIsShaped"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplLsPerVcqXmtQueuedCells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplLsPerVcQThreshGrp"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclLsPerVcqWrrWeight"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclLsPerVcqXmtQueuedCells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclLsPerVcQThreshGrp"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVcSnoopedIfIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVcSnoopedVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVcSnoopedVci"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVcDir"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVcState"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVcRowStatus"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVpSnoopedIfIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVpSnoopedVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVpDir"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVpState"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmConnMIBlsPerVcqGroup = ciscoAtmConnMIBlsPerVcqGroup.setStatus('obsolete')
ciscoAtmConnMIBlsFcPfqGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 2, 5)).setObjects(("CISCO-ATM-CONN-MIB", "ciscoAtmVplUpcViolations"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclUpcViolations"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclEpdTpdPacketDrops"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclEpdTpdPacketsIn"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplInClp0Cells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplInClp1Cells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOutClp0Cells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOutClp1Cells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplCellDrops"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplClp0VcqFullCellDrops"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplVcqClpThreshCellDrops"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclInClp0Cells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclInClp1Cells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOutClp0Cells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOutClp1Cells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclCellDrops"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclClp0VcqFullCellDrops"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclVcqClpThreshCellDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmConnMIBlsFcPfqGroup = ciscoAtmConnMIBlsFcPfqGroup.setStatus('deprecated')
ciscoAtmConnMIBlsPerVcqGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 2, 6)).setObjects(("CISCO-ATM-CONN-MIB", "ciscoAtmVplLsPerVcqWrrWeight"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplLsPerVcqTunnelIsShaped"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplLsPerVcqTunnelIsHierarchical"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplLsPerVcqXmtQueuedCells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplLsPerVcQThreshGrp"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclLsPerVcqWrrWeight"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclLsPerVcqXmtQueuedCells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclLsPerVcQThreshGrp"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVcSnoopedIfIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVcSnoopedVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVcSnoopedVci"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVcDir"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVcState"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVcRowStatus"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVpSnoopedIfIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVpSnoopedVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVpDir"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVpState"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSnoopVpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmConnMIBlsPerVcqGroup2 = ciscoAtmConnMIBlsPerVcqGroup2.setStatus('current')
ciscoAtmConnMIBNegTraffGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 2, 7)).setObjects(("CISCO-ATM-CONN-MIB", "ciscoAtmVplRxNegTraffDescrIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplTxNegTraffDescrIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclRxNegTraffDescrIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclTxNegTraffDescrIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmConnMIBNegTraffGroup = ciscoAtmConnMIBNegTraffGroup.setStatus('current')
ciscoAtmConnMIBlsFcPfqGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 2, 8)).setObjects(("CISCO-ATM-CONN-MIB", "ciscoAtmVplUpcViolations"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclUpcViolations"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclEpdTpdPacketDrops"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclEpdTpdPacketsIn"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplInClp0Cells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplInClp1Cells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOutClp0Cells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOutClp1Cells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplCellDrops"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplClp0VcqFullCellDrops"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplVcqClpThreshCellDrops"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplSwFabOutCells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplSwFabOutClp0Cells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplSwFabOutClp1Cells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclInClp0Cells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclInClp1Cells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOutClp0Cells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOutClp1Cells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclCellDrops"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclClp0VcqFullCellDrops"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclVcqClpThreshCellDrops"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclSwFabOutCells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclSwFabOutClp0Cells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclSwFabOutClp1Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmConnMIBlsFcPfqGroup1 = ciscoAtmConnMIBlsFcPfqGroup1.setStatus('current')
ciscoAtmConnMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 2, 9)).setObjects(("CISCO-ATM-CONN-MIB", "ciscoAtmVplCastType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplSpanType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplConfigType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplRxUpcMode"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplConnState"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOamLoopbkTxInterval"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOamSegmentLoopback"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOamEndLoopback"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOamAisEnable"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOamRdiEnable"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplInstallTime"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplInCells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOutCells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplCrossIfIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplCrossVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplNextLeafIfIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplNextLeafVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplRemoteAddr"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplRemoteVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplLocation"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplSlowRetryIntv"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplNumAttempts"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplLastReleaseCause"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplLogicalPortDef"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplLogicalPortIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplConnName"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclCastType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclSpanType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclConfigType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclRxUpcMode"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclEpdEnable"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclConnState"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOamLoopbkTxInterval"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOamSegmentLoopback"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOamEndLoopback"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOamAisEnable"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOamRdiEnable"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclInstallTime"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclInCells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOutCells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclCrossIfIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclCrossVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclCrossVci"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclNextLeafIfIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclNextLeafVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclNextLeafVci"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclAalEncapFlag"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclAalEncapProtocol"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclAalUserVcType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclAtmInArpInterval"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclRemoteAddr"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclRemoteVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclRemoteVci"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclLocation"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclSlowRetryIntv"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclNumAttempts"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclLastReleaseCause"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclConnName"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSvpDirection"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSvcDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmConnMIBGroup1 = ciscoAtmConnMIBGroup1.setStatus('deprecated')
ciscoAtmConnMIBGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 2, 10)).setObjects(("CISCO-ATM-CONN-MIB", "ciscoAtmVplCastType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplSpanType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplConfigType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplRxUpcMode"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplConnState"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOamLoopbkTxInterval"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOamSegmentLoopback"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOamEndLoopback"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOamAisEnable"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOamRdiEnable"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplInstallTime"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplInCells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplOutCells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplCrossIfIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplCrossVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplNextLeafIfIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplNextLeafVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplRemoteAddr"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplRemoteVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplLocation"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplSlowRetryIntv"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplNumAttempts"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplLastReleaseCause"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplLogicalPortDef"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplLogicalPortIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclCastType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclSpanType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclConfigType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclRxUpcMode"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclEpdEnable"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclConnState"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOamLoopbkTxInterval"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOamSegmentLoopback"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOamEndLoopback"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOamAisEnable"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOamRdiEnable"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclInstallTime"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclInCells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclOutCells"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclCrossIfIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclCrossVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclCrossVci"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclNextLeafIfIndex"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclNextLeafVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclNextLeafVci"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclAalEncapFlag"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclAalEncapProtocol"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclAalUserVcType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclAtmInArpInterval"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclRemoteAddr"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclRemoteVpi"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclRemoteVci"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclLocation"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclSlowRetryIntv"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclNumAttempts"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclLastReleaseCause"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSvpDirection"), ("CISCO-ATM-CONN-MIB", "ciscoAtmSvcDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmConnMIBGroup4 = ciscoAtmConnMIBGroup4.setStatus('current')
ciscoAtmConnNmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 13, 3, 2, 11)).setObjects(("CISCO-ATM-CONN-MIB", "ciscoAtmVplConnName"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVplConnType"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclConnName"), ("CISCO-ATM-CONN-MIB", "ciscoAtmVclConnType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmConnNmsGroup = ciscoAtmConnNmsGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-ATM-CONN-MIB", ciscoAtmVplInClp1Cells=ciscoAtmVplInClp1Cells, ciscoAtmVplCellDrops=ciscoAtmVplCellDrops, ciscoAtmVclEpdTpdPacketDrops=ciscoAtmVclEpdTpdPacketDrops, ciscoAtmVclLsPerVcQThreshGrp=ciscoAtmVclLsPerVcQThreshGrp, ciscoAtmVclDefaultRxUpcVbrCdvt=ciscoAtmVclDefaultRxUpcVbrCdvt, ciscoAtmSnoopVpSnoopedVpi=ciscoAtmSnoopVpSnoopedVpi, ciscoAtmVplSwFabOutCells=ciscoAtmVplSwFabOutCells, ciscoAtmVclLastReleaseCause=ciscoAtmVclLastReleaseCause, ConnState=ConnState, ciscoAtmVclCastType=ciscoAtmVclCastType, ciscoAtmVclConnState=ciscoAtmVclConnState, ciscoAtmVclVcqClpThreshCellDrops=ciscoAtmVclVcqClpThreshCellDrops, ciscoAtmSvcFrameDiscardUsesAal5Ie=ciscoAtmSvcFrameDiscardUsesAal5Ie, ciscoAtmVplOutCells=ciscoAtmVplOutCells, ciscoAtmVplConnName=ciscoAtmVplConnName, ciscoAtmVclEpdEnable=ciscoAtmVclEpdEnable, ciscoAtmConnMIBCompliance7=ciscoAtmConnMIBCompliance7, ciscoAtmVplOamEndLoopback=ciscoAtmVplOamEndLoopback, ciscoAtmVplTxNegTraffDescrIndex=ciscoAtmVplTxNegTraffDescrIndex, ciscoAtmVplCrossIfIndex=ciscoAtmVplCrossIfIndex, ciscoAtmVclConnName=ciscoAtmVclConnName, ciscoAtmVclUpcViolations=ciscoAtmVclUpcViolations, ciscoAtmConnMIBGroup2=ciscoAtmConnMIBGroup2, ciscoAtmVclSpanType=ciscoAtmVclSpanType, ciscoAtmVplCastType=ciscoAtmVplCastType, ciscoAtmVclOutCells=ciscoAtmVclOutCells, ciscoAtmSnoopVpTable=ciscoAtmSnoopVpTable, ciscoAtmVclAalEncapFlag=ciscoAtmVclAalEncapFlag, ciscoAtmSnoopVcDir=ciscoAtmSnoopVcDir, ciscoAtmVclNumAttempts=ciscoAtmVclNumAttempts, ciscoAtmVplUpcViolations=ciscoAtmVplUpcViolations, ciscoAtmVplOutClp0Cells=ciscoAtmVplOutClp0Cells, ciscoAtmVplNextLeafVpi=ciscoAtmVplNextLeafVpi, ciscoAtmVclOamEndLoopback=ciscoAtmVclOamEndLoopback, ciscoAtmVclEpdTpdCellDrops=ciscoAtmVclEpdTpdCellDrops, ciscoAtmSvpDirection=ciscoAtmSvpDirection, ciscoAtmVplConfigType=ciscoAtmVplConfigType, ciscoAtmVclLsPerVcqWrrWeight=ciscoAtmVclLsPerVcqWrrWeight, ciscoAtmVplDefaultRxUpcTolerance=ciscoAtmVplDefaultRxUpcTolerance, ciscoAtmVclInstallTime=ciscoAtmVclInstallTime, ciscoAtmVplLocation=ciscoAtmVplLocation, ciscoAtmSnoopVcState=ciscoAtmSnoopVcState, ciscoAtmVclOutClp0Cells=ciscoAtmVclOutClp0Cells, ciscoAtmSvcAddrTable=ciscoAtmSvcAddrTable, ciscoAtmVclAalEncapProtocol=ciscoAtmVclAalEncapProtocol, ciscoAtmVplSpanType=ciscoAtmVplSpanType, ciscoAtmSnoopVcEntry=ciscoAtmSnoopVcEntry, ciscoAtmConnMIBGroups=ciscoAtmConnMIBGroups, ciscoAtmConnMIBCompliance4=ciscoAtmConnMIBCompliance4, ciscoAtmVclSwFabOutCells=ciscoAtmVclSwFabOutCells, ciscoAtmSvp=ciscoAtmSvp, CastType=CastType, ciscoAtmConnMIBlsFcPfqGroup=ciscoAtmConnMIBlsFcPfqGroup, ciscoAtmSvpVpi=ciscoAtmSvpVpi, ciscoAtmSnoopVc=ciscoAtmSnoopVc, ciscoAtmVclOamSegmentLoopback=ciscoAtmVclOamSegmentLoopback, ciscoAtmVclInClp1Cells=ciscoAtmVclInClp1Cells, ciscoAtmVclOutClp1Cells=ciscoAtmVclOutClp1Cells, Location=Location, ciscoAtmVplEntry=ciscoAtmVplEntry, ciscoAtmVplRxNegTraffDescrIndex=ciscoAtmVplRxNegTraffDescrIndex, ciscoAtmVplInstallTime=ciscoAtmVplInstallTime, EnableStatus=EnableStatus, ciscoAtmConnMIBCompliances=ciscoAtmConnMIBCompliances, ciscoAtmVclRxNegTraffDescrIndex=ciscoAtmVclRxNegTraffDescrIndex, ciscoAtmVclAtmInArpInterval=ciscoAtmVclAtmInArpInterval, ciscoAtmVplOamAisEnable=ciscoAtmVplOamAisEnable, Direction=Direction, PYSNMP_MODULE_ID=ciscoAtmConnMIB, ciscoAtmVclCrossVpi=ciscoAtmVclCrossVpi, ciscoAtmConnNmsGroup=ciscoAtmConnNmsGroup, ciscoAtmConnMIBCompliance8=ciscoAtmConnMIBCompliance8, ciscoAtmVclNextLeafIfIndex=ciscoAtmVclNextLeafIfIndex, ciscoAtmVclClp0VcqFullCellDrops=ciscoAtmVclClp0VcqFullCellDrops, ciscoAtmVplNumAttempts=ciscoAtmVplNumAttempts, ciscoAtmVplConnState=ciscoAtmVplConnState, ciscoAtmVplOamLoopbkTxInterval=ciscoAtmVplOamLoopbkTxInterval, ciscoAtmVclSlowRetryIntv=ciscoAtmVclSlowRetryIntv, ciscoAtmVplEpdTpdPacketsIn=ciscoAtmVplEpdTpdPacketsIn, ciscoAtmVclRemoteVci=ciscoAtmVclRemoteVci, ciscoAtmVplRxUpcMode=ciscoAtmVplRxUpcMode, ciscoAtmConnMIBCompliance2=ciscoAtmConnMIBCompliance2, ciscoAtmVpl=ciscoAtmVpl, ciscoAtmVclTable=ciscoAtmVclTable, ciscoAtmVplRemoteVpi=ciscoAtmVplRemoteVpi, ciscoAtmVplConnType=ciscoAtmVplConnType, ciscoAtmConnMIBlsFcPfqGroup1=ciscoAtmConnMIBlsFcPfqGroup1, ciscoAtmVclSwFabOutClp1Cells=ciscoAtmVclSwFabOutClp1Cells, ciscoAtmVclClp1Drops=ciscoAtmVclClp1Drops, ciscoAtmVplNextLeafIfIndex=ciscoAtmVplNextLeafIfIndex, ciscoAtmVplInClp0Cells=ciscoAtmVplInClp0Cells, ciscoAtmSnoopVcSnoopedVci=ciscoAtmSnoopVcSnoopedVci, ciscoAtmVclConfigType=ciscoAtmVclConfigType, ciscoAtmVplLastReleaseCause=ciscoAtmVplLastReleaseCause, ciscoAtmVclAalUserVcType=ciscoAtmVclAalUserVcType, ciscoAtmVplOamSegmentLoopback=ciscoAtmVplOamSegmentLoopback, ciscoAtmVplLsPerVcqXmtQueuedCells=ciscoAtmVplLsPerVcqXmtQueuedCells, ciscoAtmSvcAddr=ciscoAtmSvcAddr, ciscoAtmSnoopVpRowStatus=ciscoAtmSnoopVpRowStatus, ciscoAtmVclEpdTpdPacketsIn=ciscoAtmVclEpdTpdPacketsIn, ciscoAtmConnMIB=ciscoAtmConnMIB, ciscoAtmVplLsPerVcqTunnelIsShaped=ciscoAtmVplLsPerVcqTunnelIsShaped, ciscoAtmVclNextLeafVci=ciscoAtmVclNextLeafVci, ciscoAtmVclConnType=ciscoAtmVclConnType, ciscoAtmVclCellDrops=ciscoAtmVclCellDrops, UpcStatus=UpcStatus, ciscoAtmConnMIBCompliance3=ciscoAtmConnMIBCompliance3, ciscoAtmConnMIBGroup1=ciscoAtmConnMIBGroup1, ciscoAtmVcl=ciscoAtmVcl, ciscoAtmVclOamAisEnable=ciscoAtmVclOamAisEnable, SnoopDirType=SnoopDirType, ciscoAtmVclInClp0Cells=ciscoAtmVclInClp0Cells, ciscoAtmConnMIBCompliance5=ciscoAtmConnMIBCompliance5, ciscoAtmVplEpdTpdCellDrops=ciscoAtmVplEpdTpdCellDrops, ciscoAtmSvcVpi=ciscoAtmSvcVpi, ciscoAtmVplSwFabOutClp1Cells=ciscoAtmVplSwFabOutClp1Cells, ciscoAtmVplCrossVpi=ciscoAtmVplCrossVpi, ciscoAtmConnMIBObjects=ciscoAtmConnMIBObjects, ciscoAtmVclNextLeafVpi=ciscoAtmVclNextLeafVpi, ciscoAtmVplDefaultRxUpcVbrCdvt=ciscoAtmVplDefaultRxUpcVbrCdvt, ciscoAtmVplClp0VcqFullCellDrops=ciscoAtmVplClp0VcqFullCellDrops, ciscoAtmSvpAddrTable=ciscoAtmSvpAddrTable, ciscoAtmVclDefaultRxUpcTolerance=ciscoAtmVclDefaultRxUpcTolerance, SpanType=SpanType, ciscoAtmSvcVci=ciscoAtmSvcVci, ciscoAtmSnoopVpDir=ciscoAtmSnoopVpDir, ciscoAtmConnMIBConformance=ciscoAtmConnMIBConformance, ciscoAtmSnoopVcSnoopedVpi=ciscoAtmSnoopVcSnoopedVpi, ciscoAtmConnMIBlsPerVcqGroup2=ciscoAtmConnMIBlsPerVcqGroup2, ciscoAtmConnMIBlsPerVcqGroup=ciscoAtmConnMIBlsPerVcqGroup, ciscoAtmSnoopVcRowStatus=ciscoAtmSnoopVcRowStatus, ciscoAtmVclInCells=ciscoAtmVclInCells, ciscoAtmVplSwFabOutClp0Cells=ciscoAtmVplSwFabOutClp0Cells, ciscoAtmVplOutClp1Cells=ciscoAtmVplOutClp1Cells, ciscoAtmSnoopVpEntry=ciscoAtmSnoopVpEntry, ciscoAtmConnMIBGroup3=ciscoAtmConnMIBGroup3, ciscoAtmSvpAddrEntry=ciscoAtmSvpAddrEntry, ciscoAtmVclLocation=ciscoAtmVclLocation, ciscoAtmConnMIBCompliance6=ciscoAtmConnMIBCompliance6, ciscoAtmSvcAddrEntry=ciscoAtmSvcAddrEntry, ciscoAtmSnoopVpSnoopedIfIndex=ciscoAtmSnoopVpSnoopedIfIndex, ciscoAtmVclRemoteAddr=ciscoAtmVclRemoteAddr, ciscoAtmVplLsPerVcqTunnelIsHierarchical=ciscoAtmVplLsPerVcqTunnelIsHierarchical, ciscoAtmVclEntry=ciscoAtmVclEntry, ConfigType=ConfigType, ciscoAtmVclTxNegTraffDescrIndex=ciscoAtmVclTxNegTraffDescrIndex, ciscoAtmVclCrossIfIndex=ciscoAtmVclCrossIfIndex, ciscoAtmVplLogicalPortDef=ciscoAtmVplLogicalPortDef, ciscoAtmSnoopVcSnoopedIfIndex=ciscoAtmSnoopVcSnoopedIfIndex, ciscoAtmSvc=ciscoAtmSvc, ciscoAtmVclOamLoopbkTxInterval=ciscoAtmVclOamLoopbkTxInterval, ciscoAtmVclOamRdiEnable=ciscoAtmVclOamRdiEnable, ciscoAtmSvcDirection=ciscoAtmSvcDirection, ciscoAtmConnMIBGroup=ciscoAtmConnMIBGroup, ciscoAtmVplVcqClpThreshCellDrops=ciscoAtmVplVcqClpThreshCellDrops, ciscoAtmSvpAddr=ciscoAtmSvpAddr, ciscoAtmVclSwFabOutClp0Cells=ciscoAtmVclSwFabOutClp0Cells, ciscoAtmVplEpdTpdPacketDrops=ciscoAtmVplEpdTpdPacketDrops, ciscoAtmVplClp1Drops=ciscoAtmVplClp1Drops, ciscoAtmConnMIBGroup4=ciscoAtmConnMIBGroup4, ciscoAtmVplInCells=ciscoAtmVplInCells, ciscoAtmVplLsPerVcqWrrWeight=ciscoAtmVplLsPerVcqWrrWeight, ciscoAtmVplRemoteAddr=ciscoAtmVplRemoteAddr, ciscoAtmVplTable=ciscoAtmVplTable, ciscoAtmVplOamRdiEnable=ciscoAtmVplOamRdiEnable, ciscoAtmVplLogicalPortIndex=ciscoAtmVplLogicalPortIndex, ciscoAtmConnMIBCompliance=ciscoAtmConnMIBCompliance, ciscoAtmConnMIBNegTraffGroup=ciscoAtmConnMIBNegTraffGroup, ciscoAtmSnoopVcTable=ciscoAtmSnoopVcTable, ciscoAtmSnoopVpState=ciscoAtmSnoopVpState, ciscoAtmVclRemoteVpi=ciscoAtmVclRemoteVpi, ciscoAtmVplLsPerVcQThreshGrp=ciscoAtmVplLsPerVcQThreshGrp, ciscoAtmVclLsPerVcqXmtQueuedCells=ciscoAtmVclLsPerVcqXmtQueuedCells, ciscoAtmVclRxUpcMode=ciscoAtmVclRxUpcMode, ciscoAtmVclCrossVci=ciscoAtmVclCrossVci, ciscoAtmSnoopVp=ciscoAtmSnoopVp, ciscoAtmVplSlowRetryIntv=ciscoAtmVplSlowRetryIntv)
