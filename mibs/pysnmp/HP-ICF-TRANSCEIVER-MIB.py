#
# PySNMP MIB module HP-ICF-TRANSCEIVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-TRANSCEIVER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:23:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, IpAddress, Counter64, Unsigned32, NotificationType, ModuleIdentity, Bits, TimeTicks, MibIdentifier, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "IpAddress", "Counter64", "Unsigned32", "NotificationType", "ModuleIdentity", "Bits", "TimeTicks", "MibIdentifier", "ObjectIdentity", "Integer32")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
hpicfTransceiverMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82))
hpicfTransceiverMIB.setRevisions(('2016-02-23 00:00', '2016-02-01 00:00', '2015-02-17 00:00', '2012-02-22 00:00', '2011-07-25 00:00', '2011-06-08 00:00', '2011-03-14 00:00', '2011-03-02 00:00',))
if mibBuilder.loadTexts: hpicfTransceiverMIB.setLastUpdated('201602230000Z')
if mibBuilder.loadTexts: hpicfTransceiverMIB.setOrganization('HP Networking')
hpicfXcvrObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1))
hpicfXcvrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1))
hpicfXcvrInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1), )
if mibBuilder.loadTexts: hpicfXcvrInfoTable.setStatus('current')
hpicfXcvrInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfXcvrInfoEntry.setStatus('current')
hpicfXcvrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrPortIndex.setStatus('current')
hpicfXcvrPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrPortDesc.setStatus('current')
hpicfXcvrModel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrModel.setStatus('current')
hpicfXcvrSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrSerial.setStatus('current')
hpicfXcvrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrType.setStatus('current')
hpicfXcvrConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrConnectorType.setStatus('current')
hpicfXcvrWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrWavelength.setStatus('current')
hpicfXcvrTxDist = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrTxDist.setStatus('current')
hpicfXcvrDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("dom", 1), ("vct", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrDiagnostics.setStatus('current')
hpicfXcvrDiagnosticsUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfXcvrDiagnosticsUpdate.setStatus('current')
hpicfXcvrTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 11), Integer32()).setUnits('thousandths of degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrTemp.setStatus('current')
hpicfXcvrVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('hundreds of microvolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrVoltage.setStatus('current')
hpicfXcvrBias = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrBias.setStatus('current')
hpicfXcvrTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 14), Integer32()).setUnits('thousandths of dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrTxPower.setStatus('current')
hpicfXcvrRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 15), Integer32()).setUnits('thousandths of dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrRxPower.setStatus('current')
hpicfXcvrAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 16), Bits().clone(namedValues=NamedValues(("rxPowerLowWarning", 0), ("rxPowerHighWarning", 1), ("txPowerLowWarning", 2), ("txPowerHighWarning", 3), ("txBiasLowWarning", 4), ("txBiasHighWarning", 5), ("vccLowWarning", 6), ("vccHighWarning", 7), ("tempLowWarning", 8), ("tempHighWarning", 9), ("rxPowerLowAlarm", 10), ("rxPowerHighAlarm", 11), ("txPowerLowAlarm", 12), ("txPowerHighAlarm", 13), ("txBiasLowAlarm", 14), ("txBiasHighAlarm", 15), ("vccLowAlarm", 16), ("vccHighAlarm", 17), ("tempLowAlarm", 18), ("tempHighAlarm", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrAlarms.setStatus('current')
hpicfXcvrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 17), Bits().clone(namedValues=NamedValues(("xcvrIOError", 0), ("xcvrChecksum", 1), ("xcvrTypeAndPortConfigMismatch", 2), ("xcvrTypeNotSupported", 3), ("wisLocalFault", 4), ("rcvOpticalPowerFault", 5), ("pmapmdReceiverLocalFault", 6), ("pcsReceiveLocalFault", 7), ("phyXSReceiveLocalFault", 8), ("laserBiasCurrentFault", 9), ("laserTemperatureFault", 10), ("laserOutputPowerFault", 11), ("txFault", 12), ("pmapmdTransmitterLocalFault", 13), ("pcsTransmitLocalFault", 14), ("phyXSTransmitLocalFault", 15), ("rxLossOfSignal", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrErrors.setStatus('current')
hpicfXcvrTempHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 18), Integer32()).setUnits('thousandths of degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrTempHiAlarm.setStatus('current')
hpicfXcvrTempLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 19), Integer32()).setUnits('thousandths of degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrTempLoAlarm.setStatus('current')
hpicfXcvrTempHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 20), Integer32()).setUnits('thousandths of degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrTempHiWarn.setStatus('current')
hpicfXcvrTempLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 21), Integer32()).setUnits('thousandths of degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrTempLoWarn.setStatus('current')
hpicfXcvrVccHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('hundreds of microvolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrVccHiAlarm.setStatus('current')
hpicfXcvrVccLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('hundreds of microvolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrVccLoAlarm.setStatus('current')
hpicfXcvrVccHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('hundreds of microvolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrVccHiWarn.setStatus('current')
hpicfXcvrVccLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('hundreds of microvolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrVccLoWarn.setStatus('current')
hpicfXcvrBiasHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrBiasHiAlarm.setStatus('current')
hpicfXcvrBiasLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrBiasLoAlarm.setStatus('current')
hpicfXcvrBiasHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrBiasHiWarn.setStatus('current')
hpicfXcvrBiasLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrBiasLoWarn.setStatus('current')
hpicfXcvrPwrOutHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('tenths of microwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrPwrOutHiAlarm.setStatus('current')
hpicfXcvrPwrOutLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('tenths of microwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrPwrOutLoAlarm.setStatus('current')
hpicfXcvrPwrOutHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('tenths of microwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrPwrOutHiWarn.setStatus('current')
hpicfXcvrPwrOutLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('tenths of microwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrPwrOutLoWarn.setStatus('current')
hpicfXcvrRcvPwrHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('tenths of microwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrRcvPwrHiAlarm.setStatus('current')
hpicfXcvrRcvPwrLoAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('tenths of microwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrRcvPwrLoAlarm.setStatus('current')
hpicfXcvrRcvPwrHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('tenths of microwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrRcvPwrHiWarn.setStatus('current')
hpicfXcvrRcvPwrLoWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('tenths of microwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrRcvPwrLoWarn.setStatus('current')
hpicfXcvrDiagnosticsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 38), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrDiagnosticsTimeStamp.setStatus('deprecated')
hpicfXcvrPhyLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrPhyLinkStatus.setStatus('current')
hpicfXcvrPhySpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('megabits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrPhySpeed.setStatus('current')
hpicfXcvrPhyDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("half", 0), ("full", 1), ("unspecified", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrPhyDuplex.setStatus('current')
hpicfXcvrMdiPairACableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 0), ("short", 1), ("open", 2), ("failed", 3), ("impedanceMismatch", 4), ("unspecified", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairACableStatus.setStatus('current')
hpicfXcvrMdiPairACableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairACableLength.setStatus('current')
hpicfXcvrMdiPairADistanceToFault = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairADistanceToFault.setStatus('current')
hpicfXcvrMdiPairAPolaritySwap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("reversed", 1), ("unspecified", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairAPolaritySwap.setStatus('current')
hpicfXcvrMdiPairASkew = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairASkew.setStatus('current')
hpicfXcvrMdiPairBCableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 0), ("short", 1), ("open", 2), ("failed", 3), ("impedanceMismatch", 4), ("unspecified", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairBCableStatus.setStatus('current')
hpicfXcvrMdiPairBCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairBCableLength.setStatus('current')
hpicfXcvrMdiPairBDistanceToFault = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 49), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairBDistanceToFault.setStatus('current')
hpicfXcvrMdiPairBPolaritySwap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("reversed", 1), ("unspecified", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairBPolaritySwap.setStatus('current')
hpicfXcvrMdiPairBSkew = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 51), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairBSkew.setStatus('current')
hpicfXcvrMdiPairCCableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 0), ("short", 1), ("open", 2), ("failed", 3), ("impedanceMismatch", 4), ("unspecified", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairCCableStatus.setStatus('current')
hpicfXcvrMdiPairCCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 53), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairCCableLength.setStatus('current')
hpicfXcvrMdiPairCDistanceToFault = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 54), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairCDistanceToFault.setStatus('current')
hpicfXcvrMdiPairCPolaritySwap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("reversed", 1), ("unspecified", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairCPolaritySwap.setStatus('current')
hpicfXcvrMdiPairCSkew = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 56), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairCSkew.setStatus('current')
hpicfXcvrMdiPairDCableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 0), ("short", 1), ("open", 2), ("failed", 3), ("impedanceMismatch", 4), ("unspecified", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairDCableStatus.setStatus('current')
hpicfXcvrMdiPairDCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 58), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairDCableLength.setStatus('current')
hpicfXcvrMdiPairDDistanceToFault = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 59), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairDDistanceToFault.setStatus('current')
hpicfXcvrMdiPairDPolaritySwap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("reversed", 1), ("unspecified", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairDPolaritySwap.setStatus('current')
hpicfXcvrMdiPairDSkew = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 61), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairDSkew.setStatus('current')
hpicfXcvrMdiPairABSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("mdi", 0), ("mdix", 1), ("unspecified", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairABSwap.setStatus('current')
hpicfXcvrMdiPairCDSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("mdi", 0), ("mdix", 1), ("unspecified", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrMdiPairCDSwap.setStatus('current')
hpicfXcvrDiagnosticsTimeTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 64), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrDiagnosticsTimeTicks.setStatus('current')
hpicfXcvrManufacDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 1, 1, 65), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrManufacDate.setStatus('current')
hpicfXcvrChannelInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 2), )
if mibBuilder.loadTexts: hpicfXcvrChannelInfoTable.setStatus('current')
hpicfXcvrChannelInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrChannel"))
if mibBuilder.loadTexts: hpicfXcvrChannelInfoEntry.setStatus('current')
hpicfXcvrChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpicfXcvrChannel.setStatus('current')
hpicfXcvrChannelTxBias = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrChannelTxBias.setStatus('current')
hpicfXcvrChannelTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 2, 1, 3), Integer32()).setUnits('thousandths of dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrChannelTxPower.setStatus('current')
hpicfXcvrChannelRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 2, 1, 4), Integer32()).setUnits('thousandths of dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrChannelRxPower.setStatus('current')
hpicfXcvrChannelAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 2, 1, 5), Bits().clone(namedValues=NamedValues(("rxPowerLowWarning", 0), ("rxPowerHighWarning", 1), ("txPowerLowWarning", 2), ("txPowerHighWarning", 3), ("txBiasLowWarning", 4), ("txBiasHighWarning", 5), ("rxPowerLowAlarm", 6), ("rxPowerHighAlarm", 7), ("txPowerLowAlarm", 8), ("txPowerHighAlarm", 9), ("txBiasLowAlarm", 10), ("txBiasHighAlarm", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrChannelAlarms.setStatus('current')
hpicfXcvrChannelErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 1, 1, 2, 1, 6), Bits().clone(namedValues=NamedValues(("txFault", 0), ("txLossOfSignal", 1), ("rxLossOfSignal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXcvrChannelErrors.setStatus('current')
hpicfXcvrConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2))
hpicfXcvrGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 1))
hpicfXcvrInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 1, 1)).setObjects(("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPortIndex"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPortDesc"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrModel"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrSerial"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrType"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrConnectorType"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrWavelength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTxDist"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrDiagnostics"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrDiagnosticsUpdate"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTemp"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVoltage"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBias"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRxPower"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTxPower"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrAlarms"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrErrors"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrDiagnosticsTimeStamp"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPhyLinkStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPhySpeed"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPhyDuplex"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairACableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairACableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairADistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairAPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairASkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBCableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBCableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBDistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBSkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCCableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCCableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCDistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCSkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDCableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDCableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDDistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDSkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairABSwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCDSwap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXcvrInfoGroup = hpicfXcvrInfoGroup.setStatus('deprecated')
hpicfXcvrInfoGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 1, 2)).setObjects(("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPortIndex"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPortDesc"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrModel"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrSerial"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrType"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrConnectorType"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrWavelength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTxDist"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrDiagnostics"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrDiagnosticsUpdate"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTemp"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVoltage"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBias"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRxPower"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTxPower"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrAlarms"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrErrors"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPhyLinkStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPhySpeed"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPhyDuplex"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairACableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairACableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairADistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairAPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairASkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBCableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBCableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBDistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBSkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCCableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCCableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCDistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCSkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDCableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDCableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDDistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDSkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairABSwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCDSwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrDiagnosticsTimeTicks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXcvrInfoGroup1 = hpicfXcvrInfoGroup1.setStatus('deprecated')
hpicfXcvrInfoGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 1, 3)).setObjects(("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPortIndex"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPortDesc"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrModel"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrSerial"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrType"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrConnectorType"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrWavelength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTxDist"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrDiagnostics"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrDiagnosticsUpdate"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTemp"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVoltage"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBias"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRxPower"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTxPower"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrAlarms"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrErrors"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrTempLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrVccLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrBiasLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPwrOutLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrHiAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrLoAlarm"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrHiWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrRcvPwrLoWarn"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPhyLinkStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPhySpeed"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrPhyDuplex"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairACableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairACableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairADistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairAPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairASkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBCableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBCableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBDistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairBSkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCCableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCCableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCDistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCSkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDCableStatus"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDCableLength"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDDistanceToFault"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDPolaritySwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairDSkew"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairABSwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrMdiPairCDSwap"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrDiagnosticsTimeTicks"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrManufacDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXcvrInfoGroup2 = hpicfXcvrInfoGroup2.setStatus('current')
hpicfXcvrChannelInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 1, 4)).setObjects(("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrChannelTxBias"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrChannelTxPower"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrChannelRxPower"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrChannelAlarms"), ("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrChannelErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXcvrChannelInfoGroup = hpicfXcvrChannelInfoGroup.setStatus('current')
hpicfXcvrCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 2))
hpicfXcvrCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 2, 1)).setObjects(("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXcvrCompliance = hpicfXcvrCompliance.setStatus('deprecated')
hpicfXcvrCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 2, 2)).setObjects(("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrInfoGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXcvrCompliance1 = hpicfXcvrCompliance1.setStatus('deprecated')
hpicfXcvrCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 2, 3)).setObjects(("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrInfoGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXcvrCompliance2 = hpicfXcvrCompliance2.setStatus('current')
hpicfXcvrChannelCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 82, 2, 2, 4)).setObjects(("HP-ICF-TRANSCEIVER-MIB", "hpicfXcvrChannelInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXcvrChannelCompliance = hpicfXcvrChannelCompliance.setStatus('current')
mibBuilder.exportSymbols("HP-ICF-TRANSCEIVER-MIB", hpicfXcvrInfoGroup2=hpicfXcvrInfoGroup2, hpicfXcvrRcvPwrLoWarn=hpicfXcvrRcvPwrLoWarn, hpicfXcvrTempHiAlarm=hpicfXcvrTempHiAlarm, hpicfXcvrChannelRxPower=hpicfXcvrChannelRxPower, hpicfXcvrMdiPairCDistanceToFault=hpicfXcvrMdiPairCDistanceToFault, hpicfXcvrConnectorType=hpicfXcvrConnectorType, hpicfXcvrVccHiWarn=hpicfXcvrVccHiWarn, hpicfXcvrVoltage=hpicfXcvrVoltage, hpicfXcvrModel=hpicfXcvrModel, hpicfXcvrVccLoAlarm=hpicfXcvrVccLoAlarm, hpicfXcvrObjects=hpicfXcvrObjects, hpicfXcvrPortDesc=hpicfXcvrPortDesc, hpicfXcvrChannelTxBias=hpicfXcvrChannelTxBias, hpicfXcvrCompliance=hpicfXcvrCompliance, hpicfXcvrTxPower=hpicfXcvrTxPower, hpicfXcvrMdiPairACableStatus=hpicfXcvrMdiPairACableStatus, hpicfXcvrMdiPairCPolaritySwap=hpicfXcvrMdiPairCPolaritySwap, hpicfXcvrTempLoAlarm=hpicfXcvrTempLoAlarm, hpicfXcvrBias=hpicfXcvrBias, hpicfXcvrTempLoWarn=hpicfXcvrTempLoWarn, hpicfXcvrBiasLoAlarm=hpicfXcvrBiasLoAlarm, hpicfXcvrMdiPairBPolaritySwap=hpicfXcvrMdiPairBPolaritySwap, hpicfXcvrMdiPairABSwap=hpicfXcvrMdiPairABSwap, PYSNMP_MODULE_ID=hpicfTransceiverMIB, hpicfXcvrRcvPwrLoAlarm=hpicfXcvrRcvPwrLoAlarm, hpicfXcvrDiagnosticsTimeStamp=hpicfXcvrDiagnosticsTimeStamp, hpicfXcvrPwrOutHiWarn=hpicfXcvrPwrOutHiWarn, hpicfXcvrBiasLoWarn=hpicfXcvrBiasLoWarn, hpicfXcvrTemp=hpicfXcvrTemp, hpicfXcvrPortIndex=hpicfXcvrPortIndex, hpicfXcvrMdiPairBSkew=hpicfXcvrMdiPairBSkew, hpicfXcvrRxPower=hpicfXcvrRxPower, hpicfXcvrVccHiAlarm=hpicfXcvrVccHiAlarm, hpicfXcvrVccLoWarn=hpicfXcvrVccLoWarn, hpicfXcvrAlarms=hpicfXcvrAlarms, hpicfXcvrChannel=hpicfXcvrChannel, hpicfXcvrMdiPairDCableStatus=hpicfXcvrMdiPairDCableStatus, hpicfXcvrChannelInfoGroup=hpicfXcvrChannelInfoGroup, hpicfXcvrMdiPairACableLength=hpicfXcvrMdiPairACableLength, hpicfXcvrCompliances=hpicfXcvrCompliances, hpicfXcvrChannelCompliance=hpicfXcvrChannelCompliance, hpicfXcvrRcvPwrHiWarn=hpicfXcvrRcvPwrHiWarn, hpicfXcvrCompliance1=hpicfXcvrCompliance1, hpicfXcvrMdiPairADistanceToFault=hpicfXcvrMdiPairADistanceToFault, hpicfXcvrChannelInfoEntry=hpicfXcvrChannelInfoEntry, hpicfXcvrTempHiWarn=hpicfXcvrTempHiWarn, hpicfXcvrMdiPairCCableLength=hpicfXcvrMdiPairCCableLength, hpicfXcvrMdiPairBDistanceToFault=hpicfXcvrMdiPairBDistanceToFault, hpicfXcvrRcvPwrHiAlarm=hpicfXcvrRcvPwrHiAlarm, hpicfTransceiverMIB=hpicfTransceiverMIB, hpicfXcvrChannelInfoTable=hpicfXcvrChannelInfoTable, hpicfXcvrType=hpicfXcvrType, hpicfXcvrMdiPairASkew=hpicfXcvrMdiPairASkew, hpicfXcvrMdiPairAPolaritySwap=hpicfXcvrMdiPairAPolaritySwap, hpicfXcvrPwrOutHiAlarm=hpicfXcvrPwrOutHiAlarm, hpicfXcvrInfoGroup1=hpicfXcvrInfoGroup1, hpicfXcvrDiagnosticsUpdate=hpicfXcvrDiagnosticsUpdate, hpicfXcvrPhyLinkStatus=hpicfXcvrPhyLinkStatus, hpicfXcvrCompliance2=hpicfXcvrCompliance2, hpicfXcvrConformance=hpicfXcvrConformance, hpicfXcvrWavelength=hpicfXcvrWavelength, hpicfXcvrMdiPairDCableLength=hpicfXcvrMdiPairDCableLength, hpicfXcvrChannelErrors=hpicfXcvrChannelErrors, hpicfXcvrMdiPairDSkew=hpicfXcvrMdiPairDSkew, hpicfXcvrGroups=hpicfXcvrGroups, hpicfXcvrErrors=hpicfXcvrErrors, hpicfXcvrBiasHiAlarm=hpicfXcvrBiasHiAlarm, hpicfXcvrMdiPairDPolaritySwap=hpicfXcvrMdiPairDPolaritySwap, hpicfXcvrDiagnostics=hpicfXcvrDiagnostics, hpicfXcvrPwrOutLoWarn=hpicfXcvrPwrOutLoWarn, hpicfXcvrInfoGroup=hpicfXcvrInfoGroup, hpicfXcvrPwrOutLoAlarm=hpicfXcvrPwrOutLoAlarm, hpicfXcvrMdiPairCSkew=hpicfXcvrMdiPairCSkew, hpicfXcvrBiasHiWarn=hpicfXcvrBiasHiWarn, hpicfXcvrMdiPairCCableStatus=hpicfXcvrMdiPairCCableStatus, hpicfXcvrDiagnosticsTimeTicks=hpicfXcvrDiagnosticsTimeTicks, hpicfXcvrChannelAlarms=hpicfXcvrChannelAlarms, hpicfXcvrPhySpeed=hpicfXcvrPhySpeed, hpicfXcvrTxDist=hpicfXcvrTxDist, hpicfXcvrMdiPairDDistanceToFault=hpicfXcvrMdiPairDDistanceToFault, hpicfXcvrInfo=hpicfXcvrInfo, hpicfXcvrInfoEntry=hpicfXcvrInfoEntry, hpicfXcvrMdiPairBCableStatus=hpicfXcvrMdiPairBCableStatus, hpicfXcvrChannelTxPower=hpicfXcvrChannelTxPower, hpicfXcvrPhyDuplex=hpicfXcvrPhyDuplex, hpicfXcvrInfoTable=hpicfXcvrInfoTable, hpicfXcvrMdiPairBCableLength=hpicfXcvrMdiPairBCableLength, hpicfXcvrManufacDate=hpicfXcvrManufacDate, hpicfXcvrMdiPairCDSwap=hpicfXcvrMdiPairCDSwap, hpicfXcvrSerial=hpicfXcvrSerial)
