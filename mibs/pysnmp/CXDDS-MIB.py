#
# PySNMP MIB module CXDDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXDDS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:16:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
Alias, cxDds, SapIndex = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "cxDds", "SapIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, NotificationType, TimeTicks, ModuleIdentity, Bits, IpAddress, ObjectIdentity, Unsigned32, Counter32, MibIdentifier, Integer32, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "NotificationType", "TimeTicks", "ModuleIdentity", "Bits", "IpAddress", "ObjectIdentity", "Unsigned32", "Counter32", "MibIdentifier", "Integer32", "Gauge32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ddsSlotTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1), )
if mibBuilder.loadTexts: ddsSlotTable.setStatus('mandatory')
ddsSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1), ).setIndexNames((0, "CXDDS-MIB", "ddsSlotNumber"))
if mibBuilder.loadTexts: ddsSlotEntry.setStatus('mandatory')
ddsSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsSlotNumber.setStatus('mandatory')
ddsSlotAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 2), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsSlotAlias.setStatus('mandatory')
ddsSlotRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsSlotRowStatus.setStatus('mandatory')
ddsSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dds-not-present", 1), ("dds-present", 2), ("dds-present-failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsSlotStatus.setStatus('mandatory')
ddsSlotConfigLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("telco-point-to-point", 1), ("telco-multipt", 2), ("ldm-timing-slave", 3), ("ldm-timing-master", 4))).clone('telco-point-to-point')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsSlotConfigLineType.setStatus('mandatory')
ddsSlotConfigLineService = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("clear-channel-64K", 1), ("switched-56K", 2), ("dds-56K", 3), ("dds-19200", 4), ("dds-9600", 5), ("dds-4800", 6), ("dds-2400", 7))).clone('dds-56K')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsSlotConfigLineService.setStatus('mandatory')
ddsSlotConfigLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-loopback", 1), ("dte-loopback", 2), ("loop2", 3), ("loop3", 4), ("loop4", 5), ("remote-loop2", 6))).clone('no-loopback')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsSlotConfigLoopback.setStatus('mandatory')
ddsSlotConfigRemLoop2LocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsSlotConfigRemLoop2LocalAddress.setStatus('mandatory')
ddsSlotConfigRemLoop2RemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsSlotConfigRemLoop2RemoteAddress.setStatus('mandatory')
ddsSlotConfigPatternGen = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-pattern", 1), ("pattern-511", 2), ("pattern-511-with-errors", 3))).clone('no-pattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsSlotConfigPatternGen.setStatus('mandatory')
ddsSlotDialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsSlotDialNumber.setStatus('mandatory')
ddsSlotSoftwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsSlotSoftwareRevision.setStatus('mandatory')
ddsSlotStuffingOption = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ccc-installed", 1), ("ccc-not-installed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsSlotStuffingOption.setStatus('mandatory')
ddsSlotLineQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("link", 1), ("no-link", 2), ("network-error-oos", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsSlotLineQuality.setStatus('mandatory')
ddsSlotLineRelativeReceiveLevelMin = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsSlotLineRelativeReceiveLevelMin.setStatus('mandatory')
ddsSlotLineRelativeReceiveLevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsSlotLineRelativeReceiveLevelMax.setStatus('mandatory')
ddsSlotLineLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("csu-loopback", 2), ("dsu-loopback", 3), ("dte-loopback", 4), ("loop2", 5), ("loop3", 6), ("loop4", 7), ("remote-loop2", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsSlotLineLoopback.setStatus('mandatory')
ddsSlotResultErtPatternDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-receiving-pattern", 1), ("receiving-pattern", 2), ("receiving-patt-with-errors", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsSlotResultErtPatternDetect.setStatus('mandatory')
ddsSlotResultPatternGen = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-pattern", 1), ("ert-pattern", 2), ("ert-with-errors", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsSlotResultPatternGen.setStatus('mandatory')
ddsSlotResultDialing = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("dialing-idle", 1), ("dialing-now", 2), ("connection-made", 3), ("err-no-num-from-host", 4), ("err-no-link", 5), ("err-no-rx-idle", 6), ("err-no-wink", 7), ("err-invalid-wink", 8), ("err-no-answer", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsSlotResultDialing.setStatus('mandatory')
ddsSlotModel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsSlotModel.setStatus('mandatory')
ddsSlotRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsSlotRevision.setStatus('mandatory')
ddsSlotEco = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddsSlotEco.setStatus('mandatory')
ddsSlotLineTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsSlotLineTrap.setStatus('mandatory')
ddsSlotLoopTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddsSlotLoopTrap.setStatus('mandatory')
ddsSlotLineStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39) + (0,1)).setObjects(("CXDDS-MIB", "ddsSlotNumber"), ("CXDDS-MIB", "ddsSlotLineQuality"))
ddsSlotLoopStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 39) + (0,2)).setObjects(("CXDDS-MIB", "ddsSlotNumber"), ("CXDDS-MIB", "ddsSlotLineLoopback"))
mibBuilder.exportSymbols("CXDDS-MIB", ddsSlotResultErtPatternDetect=ddsSlotResultErtPatternDetect, ddsSlotConfigPatternGen=ddsSlotConfigPatternGen, ddsSlotConfigLineType=ddsSlotConfigLineType, ddsSlotResultDialing=ddsSlotResultDialing, ddsSlotLineTrap=ddsSlotLineTrap, ddsSlotAlias=ddsSlotAlias, ddsSlotEntry=ddsSlotEntry, ddsSlotLoopStatusChange=ddsSlotLoopStatusChange, ddsSlotLineQuality=ddsSlotLineQuality, ddsSlotConfigLineService=ddsSlotConfigLineService, ddsSlotLineRelativeReceiveLevelMax=ddsSlotLineRelativeReceiveLevelMax, ddsSlotDialNumber=ddsSlotDialNumber, ddsSlotTable=ddsSlotTable, ddsSlotRowStatus=ddsSlotRowStatus, ddsSlotRevision=ddsSlotRevision, ddsSlotLineRelativeReceiveLevelMin=ddsSlotLineRelativeReceiveLevelMin, ddsSlotNumber=ddsSlotNumber, ddsSlotEco=ddsSlotEco, ddsSlotStatus=ddsSlotStatus, ddsSlotLoopTrap=ddsSlotLoopTrap, ddsSlotConfigRemLoop2RemoteAddress=ddsSlotConfigRemLoop2RemoteAddress, ddsSlotConfigLoopback=ddsSlotConfigLoopback, ddsSlotStuffingOption=ddsSlotStuffingOption, ddsSlotResultPatternGen=ddsSlotResultPatternGen, ddsSlotSoftwareRevision=ddsSlotSoftwareRevision, ddsSlotConfigRemLoop2LocalAddress=ddsSlotConfigRemLoop2LocalAddress, ddsSlotModel=ddsSlotModel, ddsSlotLineLoopback=ddsSlotLineLoopback, ddsSlotLineStatusChange=ddsSlotLineStatusChange)
