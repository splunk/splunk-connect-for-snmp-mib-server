#
# PySNMP MIB module HH3C-EPON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-EPON-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:13:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
hh3cLswSlotIndex, hh3cLswFrameIndex = mibBuilder.importSymbols("HH3C-LSW-DEV-ADM-MIB", "hh3cLswSlotIndex", "hh3cLswFrameIndex")
hh3cEpon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cEpon")
ifIndex, ifDescr = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifDescr")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, iso, Unsigned32, IpAddress, Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32, Counter32, ObjectIdentity, Bits, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "Unsigned32", "IpAddress", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32", "Counter32", "ObjectIdentity", "Bits", "ModuleIdentity", "NotificationType")
TextualConvention, TruthValue, MacAddress, DisplayString, RowStatus, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "MacAddress", "DisplayString", "RowStatus", "DateAndTime")
hh3cEponMibObjects = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1))
if mibBuilder.loadTexts: hh3cEponMibObjects.setLastUpdated('200705221008Z')
if mibBuilder.loadTexts: hh3cEponMibObjects.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
hh3cEponSysMan = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1))
hh3cEponAutoAuthorize = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponAutoAuthorize.setStatus('current')
hh3cEponMonitorCycle = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponMonitorCycle.setStatus('current')
hh3cEponMsgTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 3), Integer32().clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponMsgTimeOut.setStatus('current')
hh3cEponMsgLoseNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 4), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponMsgLoseNum.setStatus('current')
hh3cEponSysHasEPONBoard = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEponSysHasEPONBoard.setStatus('current')
hh3cEponMonitorCycleEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponMonitorCycleEnable.setStatus('current')
hh3cEponOltSoftwareErrAlmEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponOltSoftwareErrAlmEnable.setStatus('current')
hh3cEponPortLoopBackAlmEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponPortLoopBackAlmEnable.setStatus('current')
hh3cEponMonitorCycleMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEponMonitorCycleMinVal.setStatus('current')
hh3cEponMonitorCycleMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEponMonitorCycleMaxVal.setStatus('current')
hh3cEponMsgTimeOutMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEponMsgTimeOutMinVal.setStatus('current')
hh3cEponMsgTimeOutMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEponMsgTimeOutMaxVal.setStatus('current')
hh3cEponMsgLoseNumMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEponMsgLoseNumMinVal.setStatus('current')
hh3cEponMsgLoseNumMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEponMsgLoseNumMaxVal.setStatus('current')
hh3cEponSysScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 15))
hh3cEponSysManTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 16), )
if mibBuilder.loadTexts: hh3cEponSysManTable.setStatus('current')
hh3cEponSysManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 16, 1), ).setIndexNames((0, "HH3C-EPON-MIB", "hh3cEponSlotIndex"))
if mibBuilder.loadTexts: hh3cEponSysManEntry.setStatus('current')
hh3cEponSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 16, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cEponSlotIndex.setStatus('current')
hh3cEponModeSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cmode", 1), ("hmode", 2))).clone('cmode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponModeSwitch.setStatus('current')
hh3cEponAutomaticMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponAutomaticMode.setStatus('current')
hh3cEponOamDiscoveryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 16, 1, 4), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponOamDiscoveryTimeout.setStatus('current')
hh3cEponEncryptionNoReplyTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 16, 1, 5), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponEncryptionNoReplyTimeOut.setStatus('current')
hh3cEponEncryptionUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 16, 1, 6), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponEncryptionUpdateTime.setStatus('current')
hh3cEponAutoBindStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponAutoBindStatus.setStatus('current')
hh3cEponAutoUpdateTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 17), )
if mibBuilder.loadTexts: hh3cEponAutoUpdateTable.setStatus('current')
hh3cEponAutoUpdateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 17, 1), ).setIndexNames((0, "HH3C-EPON-MIB", "hh3cEponSlotIndex"))
if mibBuilder.loadTexts: hh3cEponAutoUpdateEntry.setStatus('current')
hh3cEponAutoUpdateFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 17, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponAutoUpdateFileName.setStatus('current')
hh3cEponAutoUpdateSchedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponAutoUpdateSchedStatus.setStatus('current')
hh3cEponAutoUpdateSchedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 17, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponAutoUpdateSchedTime.setStatus('current')
hh3cEponAutoUpdateSchedType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("daily", 1), ("weekly", 2), ("comingdate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponAutoUpdateSchedType.setStatus('current')
hh3cEponAutoUpdateRealTimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponAutoUpdateRealTimeStatus.setStatus('current')
hh3cEponOuiIndexNextTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 18), )
if mibBuilder.loadTexts: hh3cEponOuiIndexNextTable.setStatus('current')
hh3cEponOuiIndexNextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 18, 1), ).setIndexNames((0, "HH3C-EPON-MIB", "hh3cEponSlotIndex"))
if mibBuilder.loadTexts: hh3cEponOuiIndexNextEntry.setStatus('current')
hh3cEponOuiIndexNext = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEponOuiIndexNext.setStatus('current')
hh3cEponOuiTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 19), )
if mibBuilder.loadTexts: hh3cEponOuiTable.setStatus('current')
hh3cEponOuiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 19, 1), ).setIndexNames((0, "HH3C-EPON-MIB", "hh3cEponSlotIndex"), (0, "HH3C-EPON-MIB", "hh3cEponOuiIndex"))
if mibBuilder.loadTexts: hh3cEponOuiEntry.setStatus('current')
hh3cEponOuiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 19, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cEponOuiIndex.setStatus('current')
hh3cEponOuiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 19, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEponOuiValue.setStatus('current')
hh3cEponOamVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 19, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEponOamVersion.setStatus('current')
hh3cEponOuiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 19, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEponOuiRowStatus.setStatus('current')
hh3cEponMulticastControlTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 20), )
if mibBuilder.loadTexts: hh3cEponMulticastControlTable.setStatus('current')
hh3cEponMulticastControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 20, 1), ).setIndexNames((0, "HH3C-EPON-MIB", "hh3cEponMulticastVlanId"))
if mibBuilder.loadTexts: hh3cEponMulticastControlEntry.setStatus('current')
hh3cEponMulticastVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 20, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cEponMulticastVlanId.setStatus('current')
hh3cEponMulticastAddressList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 20, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEponMulticastAddressList.setStatus('current')
hh3cEponMulticastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 1, 20, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cEponMulticastStatus.setStatus('current')
hh3cEponFileName = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 2))
hh3cEponDbaUpdateFileName = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponDbaUpdateFileName.setStatus('current')
hh3cEponOnuUpdateFileName = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponOnuUpdateFileName.setStatus('current')
hh3cEponOltMan = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3))
hh3cOltSysManTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 1), )
if mibBuilder.loadTexts: hh3cOltSysManTable.setStatus('current')
hh3cOltSysManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cOltSysManEntry.setStatus('current')
hh3cOltLaserOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 1, 1, 1), Integer32().clone(96)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltLaserOnTime.setStatus('current')
hh3cOltLaserOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 1, 1, 2), Integer32().clone(96)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltLaserOffTime.setStatus('current')
hh3cOltMultiCopyBrdCast = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltMultiCopyBrdCast.setStatus('current')
hh3cOltEnableDiscardPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltEnableDiscardPacket.setStatus('current')
hh3cOltSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("selftest", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltSelfTest.setStatus('current')
hh3cOltSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltSelfTestResult.setStatus('current')
hh3cOltMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltMaxRtt.setStatus('current')
hh3cOltInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 2), )
if mibBuilder.loadTexts: hh3cOltInfoTable.setStatus('current')
hh3cOltInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cOltInfoEntry.setStatus('current')
hh3cOltFirmMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltFirmMajorVersion.setStatus('current')
hh3cOltFirmMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltFirmMinorVersion.setStatus('current')
hh3cOltHardMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltHardMajorVersion.setStatus('current')
hh3cOltHardMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltHardMinorVersion.setStatus('current')
hh3cOltAgcLockTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltAgcLockTime.setStatus('current')
hh3cOltAgcCdrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltAgcCdrTime.setStatus('current')
hh3cOltMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 2, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltMacAddress.setStatus('current')
hh3cOltWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("open", 2), ("reset", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltWorkMode.setStatus('current')
hh3cOltOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltOpticalPowerTx.setStatus('current')
hh3cOltOpticalPowerRx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltOpticalPowerRx.setStatus('current')
hh3cOltDbaManTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 3), )
if mibBuilder.loadTexts: hh3cOltDbaManTable.setStatus('current')
hh3cOltDbaManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cOltDbaManEntry.setStatus('current')
hh3cOltDbaEnabledType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltDbaEnabledType.setStatus('current')
hh3cOltDbaDiscoveryLength = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 3, 1, 2), Integer32().clone(41500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltDbaDiscoveryLength.setStatus('current')
hh3cOltDbaDiscovryFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 3, 1, 3), Integer32().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltDbaDiscovryFrequency.setStatus('current')
hh3cOltDbaCycleLength = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 3, 1, 4), Integer32().clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltDbaCycleLength.setStatus('current')
hh3cOltDbaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltDbaVersion.setStatus('current')
hh3cOltDbaUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltDbaUpdate.setStatus('current')
hh3cOltDbaUpdateResult = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("fail", 3), ("fileNotExist", 4), ("notSetFilename", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltDbaUpdateResult.setStatus('current')
hh3cOltPortAlarmThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 4), )
if mibBuilder.loadTexts: hh3cOltPortAlarmThresholdTable.setStatus('current')
hh3cOltPortAlarmThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cOltPortAlarmThresholdEntry.setStatus('current')
hh3cOltPortAlarmBerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 4, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltPortAlarmBerEnabled.setStatus('current')
hh3cOltPortAlarmBerDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("berUplink", 1), ("berDownlink", 2), ("berAll", 3))).clone('berAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltPortAlarmBerDirect.setStatus('current')
hh3cOltPortAlarmBerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 4, 1, 3), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltPortAlarmBerThreshold.setStatus('current')
hh3cOltPortAlarmFerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 4, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltPortAlarmFerEnabled.setStatus('current')
hh3cOltPortAlarmFerDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ferUplink", 1), ("ferDownlink", 2), ("ferAll", 3))).clone('ferAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltPortAlarmFerDirect.setStatus('current')
hh3cOltPortAlarmFerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 4, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltPortAlarmFerThreshold.setStatus('current')
hh3cOltPortAlarmLlidMismatchEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 4, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltPortAlarmLlidMismatchEnabled.setStatus('current')
hh3cOltPortAlarmLlidMismatchThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 4, 1, 8), Integer32().clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltPortAlarmLlidMismatchThreshold.setStatus('current')
hh3cOltPortAlarmRemoteStableEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 4, 1, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltPortAlarmRemoteStableEnabled.setStatus('current')
hh3cOltPortAlarmLocalStableEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 4, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltPortAlarmLocalStableEnabled.setStatus('current')
hh3cOltPortAlarmRegistrationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 4, 1, 11), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltPortAlarmRegistrationEnabled.setStatus('current')
hh3cOltPortAlarmOamDisconnectionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 4, 1, 12), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltPortAlarmOamDisconnectionEnabled.setStatus('current')
hh3cOltPortAlarmEncryptionKeyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 4, 1, 13), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltPortAlarmEncryptionKeyEnabled.setStatus('current')
hh3cOltPortAlarmVendorSpecificEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 4, 1, 14), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltPortAlarmVendorSpecificEnabled.setStatus('current')
hh3cOltPortAlarmRegExcessEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 4, 1, 15), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltPortAlarmRegExcessEnabled.setStatus('current')
hh3cOltPortAlarmDFEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 4, 1, 16), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOltPortAlarmDFEEnabled.setStatus('current')
hh3cOltLaserOnTimeMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltLaserOnTimeMinVal.setStatus('current')
hh3cOltLaserOnTimeMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltLaserOnTimeMaxVal.setStatus('current')
hh3cOltLaserOffTimeMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltLaserOffTimeMinVal.setStatus('current')
hh3cOltLaserOffTimeMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltLaserOffTimeMaxVal.setStatus('current')
hh3cOltDbaDiscoveryLengthMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltDbaDiscoveryLengthMinVal.setStatus('current')
hh3cOltDbaDiscoveryLengthMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltDbaDiscoveryLengthMaxVal.setStatus('current')
hh3cOltDbaDiscovryFrequencyMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltDbaDiscovryFrequencyMinVal.setStatus('current')
hh3cOltDbaDiscovryFrequencyMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltDbaDiscovryFrequencyMaxVal.setStatus('current')
hh3cOltDbaCycleLengthMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltDbaCycleLengthMinVal.setStatus('current')
hh3cOltDbaCycleLengthMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltDbaCycleLengthMaxVal.setStatus('current')
hh3cOltPortAlarmLlidMisMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltPortAlarmLlidMisMinVal.setStatus('current')
hh3cOltPortAlarmLlidMisMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltPortAlarmLlidMisMaxVal.setStatus('current')
hh3cOltPortAlarmBerMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltPortAlarmBerMinVal.setStatus('current')
hh3cOltPortAlarmBerMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltPortAlarmBerMaxVal.setStatus('current')
hh3cOltPortAlarmFerMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltPortAlarmFerMinVal.setStatus('current')
hh3cOltPortAlarmFerMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltPortAlarmFerMaxVal.setStatus('current')
hh3cOnuSilentTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 21), )
if mibBuilder.loadTexts: hh3cOnuSilentTable.setStatus('current')
hh3cOnuSilentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 21, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EPON-MIB", "hh3cOnuSilentMacAddr"))
if mibBuilder.loadTexts: hh3cOnuSilentEntry.setStatus('current')
hh3cOnuSilentMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 21, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cOnuSilentMacAddr.setStatus('current')
hh3cOnuSilentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuSilentTime.setStatus('current')
hh3cOltUsingOnuTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 22), )
if mibBuilder.loadTexts: hh3cOltUsingOnuTable.setStatus('current')
hh3cOltUsingOnuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EPON-MIB", "hh3cOltUsingOnuNum"))
if mibBuilder.loadTexts: hh3cOltUsingOnuEntry.setStatus('current')
hh3cOltUsingOnuNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hh3cOltUsingOnuNum.setStatus('current')
hh3cOltUsingOnuIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOltUsingOnuIfIndex.setStatus('current')
hh3cOltUsingOnuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 3, 22, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cOltUsingOnuRowStatus.setStatus('current')
hh3cEponOnuMan = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5))
hh3cOnuSysManTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 1), )
if mibBuilder.loadTexts: hh3cOnuSysManTable.setStatus('current')
hh3cOnuSysManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cOnuSysManEntry.setStatus('current')
hh3cOnuEncryptMan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("downlink", 2), ("updownlink", 3))).clone('downlink')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuEncryptMan.setStatus('current')
hh3cOnuReAuthorize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reAuthorize", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuReAuthorize.setStatus('current')
hh3cOnuMulticastFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuMulticastFilterStatus.setStatus('current')
hh3cOnuDbaReportQueueSetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 1, 1, 4), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuDbaReportQueueSetNumber.setStatus('current')
hh3cOnuRemoteFecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuRemoteFecStatus.setStatus('current')
hh3cOnuPortBerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuPortBerStatus.setStatus('current')
hh3cOnuReset = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuReset.setStatus('current')
hh3cOnuMulticastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("igmpsnooping", 1), ("multicastcontrol", 2))).clone('igmpsnooping')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuMulticastControlMode.setStatus('current')
hh3cOnuAccessVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuAccessVlan.setStatus('current')
hh3cOnuEncryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuEncryptKey.setStatus('current')
hh3cOnuUniUpDownTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuUniUpDownTrapStatus.setStatus('current')
hh3cOnuFecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuFecStatus.setStatus('current')
hh3cOnuMcastCtrlHostAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuMcastCtrlHostAgingTime.setStatus('current')
hh3cOnuMulticastFastLeaveEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 1, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuMulticastFastLeaveEnable.setStatus('current')
hh3cOnuPortIsolateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuPortIsolateEnable.setStatus('current')
hh3cOnuLinkTestTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 2), )
if mibBuilder.loadTexts: hh3cOnuLinkTestTable.setStatus('current')
hh3cOnuLinkTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cOnuLinkTestEntry.setStatus('current')
hh3cOnuLinkTestFrameNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 2, 1, 1), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuLinkTestFrameNum.setStatus('current')
hh3cOnuLinkTestFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 1514)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuLinkTestFrameSize.setStatus('current')
hh3cOnuLinkTestDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 2, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuLinkTestDelay.setStatus('current')
hh3cOnuLinkTestVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 2, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuLinkTestVlanTag.setStatus('current')
hh3cOnuLinkTestVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuLinkTestVlanPriority.setStatus('current')
hh3cOnuLinkTestVlanTagID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuLinkTestVlanTagID.setStatus('current')
hh3cOnuLinkTestResultSentFrameNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuLinkTestResultSentFrameNum.setStatus('current')
hh3cOnuLinkTestResultRetFrameNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuLinkTestResultRetFrameNum.setStatus('current')
hh3cOnuLinkTestResultRetErrFrameNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuLinkTestResultRetErrFrameNum.setStatus('current')
hh3cOnuLinkTestResultMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuLinkTestResultMinDelay.setStatus('current')
hh3cOnuLinkTestResultMeanDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuLinkTestResultMeanDelay.setStatus('current')
hh3cOnuLinkTestResultMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuLinkTestResultMaxDelay.setStatus('current')
hh3cOnuBandWidthTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 3), )
if mibBuilder.loadTexts: hh3cOnuBandWidthTable.setStatus('current')
hh3cOnuBandWidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cOnuBandWidthEntry.setStatus('current')
hh3cOnuDownStreamBandWidthPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 3, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuDownStreamBandWidthPolicy.setStatus('current')
hh3cOnuDownStreamMaxBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuDownStreamMaxBandWidth.setStatus('current')
hh3cOnuDownStreamMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8388480)).clone(8388480)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuDownStreamMaxBurstSize.setStatus('current')
hh3cOnuDownStreamHighPriorityFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 3, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuDownStreamHighPriorityFirst.setStatus('current')
hh3cOnuDownStreamShortFrameFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuDownStreamShortFrameFirst.setStatus('current')
hh3cOnuP2PBandWidthPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 3, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuP2PBandWidthPolicy.setStatus('current')
hh3cOnuP2PMaxBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuP2PMaxBandWidth.setStatus('current')
hh3cOnuP2PMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8388480)).clone(8388480)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuP2PMaxBurstSize.setStatus('current')
hh3cOnuP2PHighPriorityFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuP2PHighPriorityFirst.setStatus('current')
hh3cOnuP2PShortFrameFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 3, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuP2PShortFrameFirst.setStatus('current')
hh3cOnuSlaManTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 4), )
if mibBuilder.loadTexts: hh3cOnuSlaManTable.setStatus('current')
hh3cOnuSlaManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cOnuSlaManEntry.setStatus('current')
hh3cOnuSlaMaxBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuSlaMaxBandWidth.setStatus('current')
hh3cOnuSlaMinBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuSlaMinBandWidth.setStatus('current')
hh3cOnuSlaBandWidthStepVal = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuSlaBandWidthStepVal.setStatus('current')
hh3cOnuSlaDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2))).clone('low')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuSlaDelay.setStatus('current')
hh3cOnuSlaFixedBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuSlaFixedBandWidth.setStatus('current')
hh3cOnuSlaPriorityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuSlaPriorityClass.setStatus('current')
hh3cOnuSlaFixedPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuSlaFixedPacketSize.setStatus('current')
hh3cOnuInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5), )
if mibBuilder.loadTexts: hh3cOnuInfoTable.setStatus('current')
hh3cOnuInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cOnuInfoEntry.setStatus('current')
hh3cOnuHardMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuHardMajorVersion.setStatus('current')
hh3cOnuHardMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuHardMinorVersion.setStatus('current')
hh3cOnuSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuSoftwareVersion.setStatus('current')
hh3cOnuUniMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("mii", 2), ("gmii", 3), ("tbi", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuUniMacType.setStatus('current')
hh3cOnuLaserOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuLaserOnTime.setStatus('current')
hh3cOnuLaserOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuLaserOffTime.setStatus('current')
hh3cOnuGrantFifoDep = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(2147483647, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuGrantFifoDep.setStatus('current')
hh3cOnuWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("pending", 3), ("off", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuWorkMode.setStatus('current')
hh3cOnuPCBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuPCBVersion.setStatus('current')
hh3cOnuRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuRtt.setStatus('current')
hh3cOnuEEPROMVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuEEPROMVersion.setStatus('current')
hh3cOnuRegType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuRegType.setStatus('current')
hh3cOnuHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuHostType.setStatus('current')
hh3cOnuDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuDistance.setStatus('current')
hh3cOnuLlid = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuLlid.setStatus('current')
hh3cOnuVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuVendorId.setStatus('current')
hh3cOnuFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuFirmwareVersion.setStatus('current')
hh3cOnuOpticalPowerReceivedByOlt = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuOpticalPowerReceivedByOlt.setStatus('current')
hh3cOnuMacAddrInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 6), )
if mibBuilder.loadTexts: hh3cOnuMacAddrInfoTable.setStatus('current')
hh3cOnuMacAddrInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EPON-MIB", "hh3cOnuMacIndex"))
if mibBuilder.loadTexts: hh3cOnuMacAddrInfoEntry.setStatus('current')
hh3cOnuMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cOnuMacIndex.setStatus('current')
hh3cOnuMacAddrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bound", 1), ("registered", 2), ("run", 3), ("regIncorrect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuMacAddrFlag.setStatus('current')
hh3cOnuMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 6, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuMacAddress.setStatus('current')
hh3cOnuBindMacAddrTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 7), )
if mibBuilder.loadTexts: hh3cOnuBindMacAddrTable.setStatus('current')
hh3cOnuBindMacAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cOnuBindMacAddrEntry.setStatus('current')
hh3cOnuBindMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 7, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuBindMacAddress.setStatus('current')
hh3cOnuBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuBindType.setStatus('current')
hh3cOnuFirmwareUpdateTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 8), )
if mibBuilder.loadTexts: hh3cOnuFirmwareUpdateTable.setStatus('current')
hh3cOnuFirmwareUpdateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cOnuFirmwareUpdateEntry.setStatus('current')
hh3cOnuUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuUpdate.setStatus('current')
hh3cOnuUpdateResult = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("updating", 1), ("ok", 2), ("fail", 3), ("fileNotExist", 4), ("notSetFilename", 5), ("fileNotMatchONU", 6), ("timeout", 7), ("otherError", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuUpdateResult.setStatus('current')
hh3cOnuUpdateFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuUpdateFileName.setStatus('current')
hh3cOnuLinkTestFrameNumMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuLinkTestFrameNumMinVal.setStatus('current')
hh3cOnuLinkTestFrameNumMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuLinkTestFrameNumMaxVal.setStatus('current')
hh3cOnuSlaMaxBandWidthMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuSlaMaxBandWidthMinVal.setStatus('current')
hh3cOnuSlaMaxBandWidthMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuSlaMaxBandWidthMaxVal.setStatus('current')
hh3cOnuSlaMinBandWidthMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuSlaMinBandWidthMinVal.setStatus('current')
hh3cOnuSlaMinBandWidthMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuSlaMinBandWidthMaxVal.setStatus('current')
hh3cEponOnuTypeManTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 15), )
if mibBuilder.loadTexts: hh3cEponOnuTypeManTable.setStatus('current')
hh3cEponOnuTypeManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 15, 1), ).setIndexNames((0, "HH3C-EPON-MIB", "hh3cEponOnuTypeIndex"))
if mibBuilder.loadTexts: hh3cEponOnuTypeManEntry.setStatus('current')
hh3cEponOnuTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 15, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cEponOnuTypeIndex.setStatus('current')
hh3cEponOnuTypeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 15, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEponOnuTypeDescr.setStatus('current')
hh3cOnuPacketManTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 16), )
if mibBuilder.loadTexts: hh3cOnuPacketManTable.setStatus('current')
hh3cOnuPacketManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cOnuPacketManEntry.setStatus('current')
hh3cOnuPriorityTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dscp", 1), ("ipprecedence", 2), ("cos", 3))).clone('cos')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuPriorityTrust.setStatus('current')
hh3cOnuQueueScheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spq", 1), ("wfq", 2))).clone('spq')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuQueueScheduler.setStatus('current')
hh3cOnuProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 17), )
if mibBuilder.loadTexts: hh3cOnuProtocolTable.setStatus('current')
hh3cOnuProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cOnuProtocolEntry.setStatus('current')
hh3cOnuStpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 17, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuStpStatus.setStatus('current')
hh3cOnuIgmpSnoopingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 17, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuIgmpSnoopingStatus.setStatus('current')
hh3cOnuDhcpsnoopingOption82 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 17, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuDhcpsnoopingOption82.setStatus('current')
hh3cOnuDhcpsnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 17, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuDhcpsnooping.setStatus('current')
hh3cOnuPppoe = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 17, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuPppoe.setStatus('current')
hh3cOnuIgmpSnoopingHostAgingT = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 17, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuIgmpSnoopingHostAgingT.setStatus('current')
hh3cOnuIgmpSnoopingMaxRespT = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 17, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuIgmpSnoopingMaxRespT.setStatus('current')
hh3cOnuIgmpSnoopingRouterAgingT = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 17, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuIgmpSnoopingRouterAgingT.setStatus('current')
hh3cOnuIgmpSnoopingAggReportS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 17, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuIgmpSnoopingAggReportS.setStatus('current')
hh3cOnuIgmpSnoopingAggLeaveS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 17, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuIgmpSnoopingAggLeaveS.setStatus('current')
hh3cOnuDot1xTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 18), )
if mibBuilder.loadTexts: hh3cOnuDot1xTable.setStatus('current')
hh3cOnuDot1xEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cOnuDot1xEntry.setStatus('current')
hh3cOnuDot1xAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 18, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuDot1xAccount.setStatus('current')
hh3cOnuDot1xPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 18, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuDot1xPassword.setStatus('current')
hh3cEponBatchOperationMan = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 6))
hh3cOnuPriorityQueueTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 19), )
if mibBuilder.loadTexts: hh3cOnuPriorityQueueTable.setStatus('current')
hh3cOnuPriorityQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 19, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EPON-MIB", "hh3cOnuQueueDirection"), (0, "HH3C-EPON-MIB", "hh3cOnuQueueId"))
if mibBuilder.loadTexts: hh3cOnuPriorityQueueEntry.setStatus('current')
hh3cOnuQueueDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: hh3cOnuQueueDirection.setStatus('current')
hh3cOnuQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hh3cOnuQueueId.setStatus('current')
hh3cOnuQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 19, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuQueueSize.setStatus('current')
hh3cOnuCountTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 20), )
if mibBuilder.loadTexts: hh3cOnuCountTable.setStatus('current')
hh3cOnuCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cOnuCountEntry.setStatus('current')
hh3cOnuInCRCErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 20, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuInCRCErrPkts.setStatus('current')
hh3cOnuOutDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 20, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuOutDroppedFrames.setStatus('current')
hh3cEponOnuScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 21))
hh3cOnuPriorityQueueSizeMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuPriorityQueueSizeMinVal.setStatus('current')
hh3cOnuPriorityQueueSizeMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 21, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuPriorityQueueSizeMaxVal.setStatus('current')
hh3cOnuPriorityQueueBandwidthMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 21, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuPriorityQueueBandwidthMinVal.setStatus('current')
hh3cOnuPriorityQueueBandwidthMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 21, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuPriorityQueueBandwidthMaxVal.setStatus('current')
hh3cOnuPriorityQueueBurstsizeMinVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 21, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuPriorityQueueBurstsizeMinVal.setStatus('current')
hh3cOnuPriorityQueueBurstsizeMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 21, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuPriorityQueueBurstsizeMaxVal.setStatus('current')
hh3cOnuUpdateByTypeNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 21, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuUpdateByTypeNextIndex.setStatus('current')
hh3cOnuQueueBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 22), )
if mibBuilder.loadTexts: hh3cOnuQueueBandwidthTable.setStatus('current')
hh3cOnuQueueBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EPON-MIB", "hh3cOnuQueueDirection"), (0, "HH3C-EPON-MIB", "hh3cOnuQueueId"))
if mibBuilder.loadTexts: hh3cOnuQueueBandwidthEntry.setStatus('current')
hh3cOnuQueueMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 22, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuQueueMaxBandwidth.setStatus('current')
hh3cOnuQueueMaxBurstsize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 22, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuQueueMaxBurstsize.setStatus('current')
hh3cOnuQueuePolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 22, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuQueuePolicyStatus.setStatus('current')
hh3cOnuIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 23), )
if mibBuilder.loadTexts: hh3cOnuIpAddressTable.setStatus('current')
hh3cOnuIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 23, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cOnuIpAddressEntry.setStatus('current')
hh3cOnuIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 23, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuIpAddress.setStatus('current')
hh3cOnuIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 23, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuIpAddressMask.setStatus('current')
hh3cOnuIpAddressGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 23, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuIpAddressGateway.setStatus('current')
hh3cOnuDhcpallocate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 23, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuDhcpallocate.setStatus('current')
hh3cOnuManageVID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 23, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuManageVID.setStatus('current')
hh3cOnuManageVlanIntfS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 23, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuManageVlanIntfS.setStatus('current')
hh3cOnuChipSetInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 24), )
if mibBuilder.loadTexts: hh3cOnuChipSetInfoTable.setStatus('current')
hh3cOnuChipSetInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 24, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cOnuChipSetInfoEntry.setStatus('current')
hh3cOnuChipSetVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 24, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuChipSetVendorId.setStatus('current')
hh3cOnuChipSetModel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 24, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuChipSetModel.setStatus('current')
hh3cOnuChipSetRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 24, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuChipSetRevision.setStatus('current')
hh3cOnuChipSetDesignDate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 24, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuChipSetDesignDate.setStatus('current')
hh3cOnuCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 25), )
if mibBuilder.loadTexts: hh3cOnuCapabilityTable.setStatus('current')
hh3cOnuCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 25, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cOnuCapabilityEntry.setStatus('current')
hh3cOnuServiceSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 25, 1, 1), Bits().clone(namedValues=NamedValues(("geinterfacesupport", 0), ("feinterfacesupport", 1), ("voipservicesupport", 2), ("tdmservicesupport", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuServiceSupported.setStatus('current')
hh3cOnuGEPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuGEPortNumber.setStatus('current')
hh3cOnuFEPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 25, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuFEPortNumber.setStatus('current')
hh3cOnuPOTSPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 25, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuPOTSPortNumber.setStatus('current')
hh3cOnuE1PortsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 25, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuE1PortsNumber.setStatus('current')
hh3cOnuUpstreamQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 25, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuUpstreamQueueNumber.setStatus('current')
hh3cOnuMaxUpstreamQueuePerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 25, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuMaxUpstreamQueuePerPort.setStatus('current')
hh3cOnuDownstreamQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 25, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuDownstreamQueueNumber.setStatus('current')
hh3cOnuMaxDownstreamQueuePerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 25, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuMaxDownstreamQueuePerPort.setStatus('current')
hh3cOnuBatteryBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 25, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuBatteryBackup.setStatus('current')
hh3cOnuIgspFastLeaveSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 25, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuIgspFastLeaveSupported.setStatus('current')
hh3cOnuMCtrlFastLeaveSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 25, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuMCtrlFastLeaveSupported.setStatus('current')
hh3cOnuDbaReportTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 26), )
if mibBuilder.loadTexts: hh3cOnuDbaReportTable.setStatus('current')
hh3cOnuDbaReportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 26, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EPON-MIB", "hh3cOnuDbaReportQueueId"))
if mibBuilder.loadTexts: hh3cOnuDbaReportEntry.setStatus('current')
hh3cOnuDbaReportQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 26, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cOnuDbaReportQueueId.setStatus('current')
hh3cOnuDbaReportThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 26, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuDbaReportThreshold.setStatus('current')
hh3cOnuDbaReportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuDbaReportStatus.setStatus('current')
hh3cOnuCosToLocalPrecedenceTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 27), )
if mibBuilder.loadTexts: hh3cOnuCosToLocalPrecedenceTable.setStatus('current')
hh3cOnuCosToLocalPrecedenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 27, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EPON-MIB", "hh3cOnuCosToLocalPrecedenceCosIndex"))
if mibBuilder.loadTexts: hh3cOnuCosToLocalPrecedenceEntry.setStatus('current')
hh3cOnuCosToLocalPrecedenceCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuCosToLocalPrecedenceCosIndex.setStatus('current')
hh3cOnuCosToLocalPrecedenceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 27, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuCosToLocalPrecedenceValue.setStatus('current')
hh3cEponOnuStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 28), )
if mibBuilder.loadTexts: hh3cEponOnuStpPortTable.setStatus('current')
hh3cEponOnuStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 28, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EPON-MIB", "hh3cEponStpPortIndex"))
if mibBuilder.loadTexts: hh3cEponOnuStpPortEntry.setStatus('current')
hh3cEponStpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 144))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cEponStpPortIndex.setStatus('current')
hh3cEponStpPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 28, 1, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cEponStpPortDescr.setStatus('current')
hh3cEponStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 3), ("forwarding", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cEponStpPortState.setStatus('current')
hh3cOnuPhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 29), )
if mibBuilder.loadTexts: hh3cOnuPhysicalTable.setStatus('current')
hh3cOnuPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 29, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cOnuPhysicalEntry.setStatus('current')
hh3cOnuBridgeMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 29, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuBridgeMac.setStatus('current')
hh3cOnuFirstPonMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 29, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuFirstPonMac.setStatus('current')
hh3cOnuFirstPonRegState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notExist", 1), ("absent", 2), ("offline", 3), ("silent", 4), ("down", 5), ("up", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuFirstPonRegState.setStatus('current')
hh3cOnuSecondPonMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 29, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuSecondPonMac.setStatus('current')
hh3cOnuSecondPonRegState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notExist", 1), ("absent", 2), ("offline", 3), ("silent", 4), ("down", 5), ("up", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuSecondPonRegState.setStatus('current')
hh3cOnuSmlkTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 30), )
if mibBuilder.loadTexts: hh3cOnuSmlkTable.setStatus('current')
hh3cOnuSmlkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 30, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EPON-MIB", "hh3cOnuSmlkGroupID"))
if mibBuilder.loadTexts: hh3cOnuSmlkEntry.setStatus('current')
hh3cOnuSmlkGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 30, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuSmlkGroupID.setStatus('current')
hh3cOnuSmlkFirstPonRole = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("null", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuSmlkFirstPonRole.setStatus('current')
hh3cOnuSmlkFirstPonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("down", 3), ("null", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuSmlkFirstPonStatus.setStatus('current')
hh3cOnuSmlkSecondPonRole = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("null", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuSmlkSecondPonRole.setStatus('current')
hh3cOnuSmlkSecondPonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 30, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("down", 3), ("null", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuSmlkSecondPonStatus.setStatus('current')
hh3cOnuRS485PropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 31), )
if mibBuilder.loadTexts: hh3cOnuRS485PropertiesTable.setStatus('current')
hh3cOnuRS485PropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 31, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EPON-MIB", "hh3cOnuRS485SerialIndex"))
if mibBuilder.loadTexts: hh3cOnuRS485PropertiesEntry.setStatus('current')
hh3cOnuRS485SerialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hh3cOnuRS485SerialIndex.setStatus('current')
hh3cOnuRS485BaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("baudRate300", 1), ("baudRate600", 2), ("baudRate1200", 3), ("baudRate2400", 4), ("baudRate4800", 5), ("baudRate9600", 6), ("baudRate19200", 7), ("baudRate38400", 8), ("baudRate57600", 9), ("baudRate115200", 10))).clone('baudRate9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuRS485BaudRate.setStatus('current')
hh3cOnuRS485DataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("five", 1), ("six", 2), ("seven", 3), ("eight", 4))).clone('eight')).setUnits('bit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuRS485DataBits.setStatus('current')
hh3cOnuRS485Parity = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuRS485Parity.setStatus('current')
hh3cOnuRS485StopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 31, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("oneAndHalf", 3))).clone('one')).setUnits('bit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuRS485StopBits.setStatus('current')
hh3cOnuRS485FlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 31, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hardware", 2), ("xonOrxoff", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuRS485FlowControl.setStatus('current')
hh3cOnuRS485TXOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 31, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuRS485TXOctets.setStatus('current')
hh3cOnuRS485RXOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 31, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuRS485RXOctets.setStatus('current')
hh3cOnuRS485TXErrOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 31, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuRS485TXErrOctets.setStatus('current')
hh3cOnuRS485RXErrOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 31, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuRS485RXErrOctets.setStatus('current')
hh3cOnuRS485ResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 31, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("counting", 1), ("clear", 2))).clone('counting')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cOnuRS485ResetStatistics.setStatus('current')
hh3cOnuRS485SessionSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 32), )
if mibBuilder.loadTexts: hh3cOnuRS485SessionSummaryTable.setStatus('current')
hh3cOnuRS485SessionSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 32, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EPON-MIB", "hh3cOnuRS485SerialIndex"))
if mibBuilder.loadTexts: hh3cOnuRS485SessionSummaryEntry.setStatus('current')
hh3cOnuRS485SessionMaxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuRS485SessionMaxNum.setStatus('current')
hh3cOnuRS485SessionNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuRS485SessionNextIndex.setStatus('current')
hh3cOnuRS485SessionTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 33), )
if mibBuilder.loadTexts: hh3cOnuRS485SessionTable.setStatus('current')
hh3cOnuRS485SessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 33, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EPON-MIB", "hh3cOnuRS485SerialIndex"), (0, "HH3C-EPON-MIB", "hh3cOnuRS485SessionIndex"))
if mibBuilder.loadTexts: hh3cOnuRS485SessionEntry.setStatus('current')
hh3cOnuRS485SessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hh3cOnuRS485SessionIndex.setStatus('current')
hh3cOnuRS485SessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("udp", 1), ("tcpClient", 2), ("tcpServer", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cOnuRS485SessionType.setStatus('current')
hh3cOnuRS485SessionAddType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 33, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cOnuRS485SessionAddType.setStatus('current')
hh3cOnuRS485SessionRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 33, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cOnuRS485SessionRemoteIP.setStatus('current')
hh3cOnuRS485SessionRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 33, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cOnuRS485SessionRemotePort.setStatus('current')
hh3cOnuRS485SessionLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 33, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cOnuRS485SessionLocalPort.setStatus('current')
hh3cOnuRS485SessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 33, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cOnuRS485SessionRowStatus.setStatus('current')
hh3cOnuRS485SessionErrInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 34), )
if mibBuilder.loadTexts: hh3cOnuRS485SessionErrInfoTable.setStatus('current')
hh3cOnuRS485SessionErrInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 34, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-EPON-MIB", "hh3cOnuRS485SerialIndex"), (0, "HH3C-EPON-MIB", "hh3cOnuRS485SessionIndex"))
if mibBuilder.loadTexts: hh3cOnuRS485SessionErrInfoEntry.setStatus('current')
hh3cOnuRS485SessionErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 5, 34, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cOnuRS485SessionErrInfo.setStatus('current')
hh3cEponBatchOperationBySlotTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 6, 1), )
if mibBuilder.loadTexts: hh3cEponBatchOperationBySlotTable.setStatus('current')
hh3cEponBatchOperationBySlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 6, 1, 1), ).setIndexNames((0, "HH3C-EPON-MIB", "hh3cEponBatchOperationBySlotIndex"))
if mibBuilder.loadTexts: hh3cEponBatchOperationBySlotEntry.setStatus('current')
hh3cEponBatchOperationBySlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 6, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cEponBatchOperationBySlotIndex.setStatus('current')
hh3cEponBatchOperationBySlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 9, 10))).clone(namedValues=NamedValues(("resetUnknown", 1), ("updateDba", 9), ("updateONU", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponBatchOperationBySlotType.setStatus('current')
hh3cEponBatchOperationBySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("batOpBySlot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponBatchOperationBySlot.setStatus('current')
hh3cEponBatchOperationBySlotResult = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEponBatchOperationBySlotResult.setStatus('current')
hh3cEponBatchOperationByOLTTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 6, 2), )
if mibBuilder.loadTexts: hh3cEponBatchOperationByOLTTable.setStatus('current')
hh3cEponBatchOperationByOLTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cEponBatchOperationByOLTEntry.setStatus('current')
hh3cEponBatchOperationByOLTType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5))).clone(namedValues=NamedValues(("resetUnknown", 1), ("updateONU", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponBatchOperationByOLTType.setStatus('current')
hh3cEponBatchOperationByOLT = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("batOpByOlt", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cEponBatchOperationByOLT.setStatus('current')
hh3cEponBatchOperationByOLTResult = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEponBatchOperationByOLTResult.setStatus('current')
hh3cOnuFirmwareUpdateByTypeTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 6, 3), )
if mibBuilder.loadTexts: hh3cOnuFirmwareUpdateByTypeTable.setStatus('current')
hh3cOnuFirmwareUpdateByTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 6, 3, 1), ).setIndexNames((0, "HH3C-EPON-MIB", "hh3cOnuUpdateByOnuTypeIndex"))
if mibBuilder.loadTexts: hh3cOnuFirmwareUpdateByTypeEntry.setStatus('current')
hh3cOnuUpdateByOnuTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 6, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cOnuUpdateByOnuTypeIndex.setStatus('current')
hh3cOnuUpdateByTypeOnuType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 6, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cOnuUpdateByTypeOnuType.setStatus('current')
hh3cOnuUpdateByTypeFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 6, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cOnuUpdateByTypeFileName.setStatus('current')
hh3cOnuUpdateByTypeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 6, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cOnuUpdateByTypeRowStatus.setStatus('current')
hh3cEponErrorInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 7))
hh3cEponSoftwareErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 7, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cEponSoftwareErrorCode.setStatus('current')
hh3cOamVendorSpecificAlarmCode = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 7, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cOamVendorSpecificAlarmCode.setStatus('current')
hh3cEponOnuRegErrorMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 7, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cEponOnuRegErrorMacAddr.setStatus('current')
hh3cOamEventLogType = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 7, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cOamEventLogType.setStatus('current')
hh3cOamEventLogLocation = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cOamEventLogLocation.setStatus('current')
hh3cEponLoopbackPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 7, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cEponLoopbackPortIndex.setStatus('current')
hh3cEponLoopbackPortDescr = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 7, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cEponLoopbackPortDescr.setStatus('current')
hh3cOltPortAlarmLlidMisFrames = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 7, 8), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cOltPortAlarmLlidMisFrames.setStatus('current')
hh3cOltPortAlarmBer = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 7, 9), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cOltPortAlarmBer.setStatus('current')
hh3cOltPortAlarmFer = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 7, 10), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cOltPortAlarmFer.setStatus('current')
hh3cEponOnuRegSilentMac = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 7, 11), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cEponOnuRegSilentMac.setStatus('current')
hh3cEponOperationResult = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 7, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cEponOperationResult.setStatus('current')
hh3cEponOnuLaserState = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 7, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("laserAlwaysOn", 2), ("signalDegradation", 3), ("endOfLife", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cEponOnuLaserState.setStatus('current')
hh3cEponTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8))
hh3cEponTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0))
hh3cEponPortAlarmBerTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EPON-MIB", "hh3cOltPortAlarmBerDirect"), ("HH3C-EPON-MIB", "hh3cOltPortAlarmBer"), ("HH3C-EPON-MIB", "hh3cOltPortAlarmBerThreshold"))
if mibBuilder.loadTexts: hh3cEponPortAlarmBerTrap.setStatus('current')
hh3cEponPortAlarmFerTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EPON-MIB", "hh3cOltPortAlarmFerDirect"), ("HH3C-EPON-MIB", "hh3cOltPortAlarmFer"), ("HH3C-EPON-MIB", "hh3cOltPortAlarmFerThreshold"))
if mibBuilder.loadTexts: hh3cEponPortAlarmFerTrap.setStatus('current')
hh3cEponErrorLLIDFrameTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EPON-MIB", "hh3cOltPortAlarmLlidMisFrames"), ("HH3C-EPON-MIB", "hh3cOltPortAlarmLlidMismatchThreshold"))
if mibBuilder.loadTexts: hh3cEponErrorLLIDFrameTrap.setStatus('current')
hh3cEponLoopBackEnableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EPON-MIB", "hh3cEponLoopbackPortIndex"), ("HH3C-EPON-MIB", "hh3cEponLoopbackPortDescr"))
if mibBuilder.loadTexts: hh3cEponLoopBackEnableTrap.setStatus('current')
hh3cEponOnuRegistrationErrTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 5)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EPON-MIB", "hh3cEponOnuRegErrorMacAddr"))
if mibBuilder.loadTexts: hh3cEponOnuRegistrationErrTrap.setStatus('current')
hh3cEponOamDisconnectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 6)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEponOamDisconnectionTrap.setStatus('current')
hh3cEponEncryptionKeyErrTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 7)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEponEncryptionKeyErrTrap.setStatus('current')
hh3cEponRemoteStableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 8)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEponRemoteStableTrap.setStatus('current')
hh3cEponLocalStableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 9)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEponLocalStableTrap.setStatus('current')
hh3cEponOamVendorSpecificTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 10)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EPON-MIB", "hh3cOamVendorSpecificAlarmCode"))
if mibBuilder.loadTexts: hh3cEponOamVendorSpecificTrap.setStatus('current')
hh3cEponSoftwareErrTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 11)).setObjects(("HH3C-LSW-DEV-ADM-MIB", "hh3cLswFrameIndex"), ("HH3C-LSW-DEV-ADM-MIB", "hh3cLswSlotIndex"), ("HH3C-EPON-MIB", "hh3cEponSoftwareErrorCode"))
if mibBuilder.loadTexts: hh3cEponSoftwareErrTrap.setStatus('current')
hh3cEponPortAlarmBerRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 12)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EPON-MIB", "hh3cOltPortAlarmBerDirect"))
if mibBuilder.loadTexts: hh3cEponPortAlarmBerRecoverTrap.setStatus('current')
hh3cEponPortAlarmFerRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 13)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EPON-MIB", "hh3cOltPortAlarmFerDirect"))
if mibBuilder.loadTexts: hh3cEponPortAlarmFerRecoverTrap.setStatus('current')
hh3cEponErrorLLIDFrameRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 14)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEponErrorLLIDFrameRecoverTrap.setStatus('current')
hh3cEponLoopBackEnableRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 15)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEponLoopBackEnableRecoverTrap.setStatus('current')
hh3cEponOnuRegistrationErrRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 16)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EPON-MIB", "hh3cEponOnuRegErrorMacAddr"))
if mibBuilder.loadTexts: hh3cEponOnuRegistrationErrRecoverTrap.setStatus('current')
hh3cEponOamDisconnectionRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 17)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEponOamDisconnectionRecoverTrap.setStatus('current')
hh3cEponEncryptionKeyErrRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 18)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEponEncryptionKeyErrRecoverTrap.setStatus('current')
hh3cEponRemoteStableRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 19)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEponRemoteStableRecoverTrap.setStatus('current')
hh3cEponLocalStableRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 20)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEponLocalStableRecoverTrap.setStatus('current')
hh3cEponOamVendorSpecificRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 21)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EPON-MIB", "hh3cOamVendorSpecificAlarmCode"))
if mibBuilder.loadTexts: hh3cEponOamVendorSpecificRecoverTrap.setStatus('current')
hh3cEponSoftwareErrRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 22)).setObjects(("HH3C-LSW-DEV-ADM-MIB", "hh3cLswFrameIndex"), ("HH3C-LSW-DEV-ADM-MIB", "hh3cLswSlotIndex"), ("HH3C-EPON-MIB", "hh3cEponSoftwareErrorCode"))
if mibBuilder.loadTexts: hh3cEponSoftwareErrRecoverTrap.setStatus('current')
hh3cDot3OamThresholdRecoverEvent = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 23)).setObjects(("IF-MIB", "ifIndex"), ("HH3C-EPON-MIB", "hh3cOamEventLogType"), ("HH3C-EPON-MIB", "hh3cOamEventLogLocation"))
if mibBuilder.loadTexts: hh3cDot3OamThresholdRecoverEvent.setStatus('current')
hh3cDot3OamNonThresholdRecoverEvent = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 24)).setObjects(("IF-MIB", "ifIndex"), ("HH3C-EPON-MIB", "hh3cOamEventLogType"), ("HH3C-EPON-MIB", "hh3cOamEventLogLocation"))
if mibBuilder.loadTexts: hh3cDot3OamNonThresholdRecoverEvent.setStatus('current')
hh3cEponOnuRegExcessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 25)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEponOnuRegExcessTrap.setStatus('current')
hh3cEponOnuRegExcessRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 26)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEponOnuRegExcessRecoverTrap.setStatus('current')
hh3cEponOnuPowerOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 27)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEponOnuPowerOffTrap.setStatus('current')
hh3cEponOltSwitchoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 28)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEponOltSwitchoverTrap.setStatus('current')
hh3cEponOltDFETrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 29)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEponOltDFETrap.setStatus('current')
hh3cEponOltDFERecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 30)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cEponOltDFERecoverTrap.setStatus('current')
hh3cEponOnuSilenceTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 31)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EPON-MIB", "hh3cEponOnuRegSilentMac"))
if mibBuilder.loadTexts: hh3cEponOnuSilenceTrap.setStatus('current')
hh3cEponOnuSilenceRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 32)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EPON-MIB", "hh3cEponOnuRegSilentMac"))
if mibBuilder.loadTexts: hh3cEponOnuSilenceRecoverTrap.setStatus('current')
hh3cEponOnuUpdateResultTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 33)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EPON-MIB", "hh3cOnuBindMacAddress"), ("HH3C-EPON-MIB", "hh3cOnuUpdateResult"), ("HH3C-EPON-MIB", "hh3cOnuRegType"), ("HH3C-EPON-MIB", "hh3cOnuUpdateFileName"))
if mibBuilder.loadTexts: hh3cEponOnuUpdateResultTrap.setStatus('current')
hh3cEponOnuAutoBindTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 34)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EPON-MIB", "hh3cOnuBindMacAddress"), ("HH3C-EPON-MIB", "hh3cEponOperationResult"))
if mibBuilder.loadTexts: hh3cEponOnuAutoBindTrap.setStatus('current')
hh3cEponOnuPortStpStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 35)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EPON-MIB", "hh3cEponStpPortIndex"), ("HH3C-EPON-MIB", "hh3cEponStpPortDescr"), ("HH3C-EPON-MIB", "hh3cEponStpPortState"))
if mibBuilder.loadTexts: hh3cEponOnuPortStpStateTrap.setStatus('current')
hh3cEponOnuLaserFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 36)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EPON-MIB", "hh3cEponOnuLaserState"))
if mibBuilder.loadTexts: hh3cEponOnuLaserFailedTrap.setStatus('current')
hh3cOnuSmlkSwitchoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 8, 0, 37)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HH3C-EPON-MIB", "hh3cOnuSmlkGroupID"), ("HH3C-EPON-MIB", "hh3cOnuSmlkFirstPonStatus"), ("HH3C-EPON-MIB", "hh3cOnuSmlkSecondPonStatus"))
if mibBuilder.loadTexts: hh3cOnuSmlkSwitchoverTrap.setStatus('current')
hh3cEponStat = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 9))
hh3cEponStatTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 9, 1), )
if mibBuilder.loadTexts: hh3cEponStatTable.setStatus('current')
hh3cEponStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cEponStatEntry.setStatus('current')
hh3cEponStatFER = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 9, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEponStatFER.setStatus('current')
hh3cEponStatBER = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 42, 1, 9, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cEponStatBER.setStatus('current')
mibBuilder.exportSymbols("HH3C-EPON-MIB", hh3cOnuFirstPonMac=hh3cOnuFirstPonMac, hh3cEponAutoBindStatus=hh3cEponAutoBindStatus, hh3cEponSoftwareErrTrap=hh3cEponSoftwareErrTrap, hh3cOnuSlaMinBandWidthMaxVal=hh3cOnuSlaMinBandWidthMaxVal, hh3cOltPortAlarmDFEEnabled=hh3cOltPortAlarmDFEEnabled, hh3cEponOltDFETrap=hh3cEponOltDFETrap, hh3cOnuBridgeMac=hh3cOnuBridgeMac, hh3cOltDbaCycleLengthMaxVal=hh3cOltDbaCycleLengthMaxVal, hh3cEponOamVendorSpecificRecoverTrap=hh3cEponOamVendorSpecificRecoverTrap, hh3cEponMibObjects=hh3cEponMibObjects, hh3cEponPortAlarmBerRecoverTrap=hh3cEponPortAlarmBerRecoverTrap, hh3cEponAutoUpdateEntry=hh3cEponAutoUpdateEntry, hh3cOnuSmlkFirstPonStatus=hh3cOnuSmlkFirstPonStatus, hh3cEponErrorInfo=hh3cEponErrorInfo, hh3cEponBatchOperationByOLTEntry=hh3cEponBatchOperationByOLTEntry, hh3cOnuDbaReportQueueId=hh3cOnuDbaReportQueueId, hh3cEponEncryptionKeyErrTrap=hh3cEponEncryptionKeyErrTrap, hh3cEponOnuRegExcessTrap=hh3cEponOnuRegExcessTrap, hh3cOnuSmlkGroupID=hh3cOnuSmlkGroupID, hh3cEponSysScalarGroup=hh3cEponSysScalarGroup, hh3cEponPortAlarmFerTrap=hh3cEponPortAlarmFerTrap, hh3cOnuLinkTestDelay=hh3cOnuLinkTestDelay, hh3cEponBatchOperationByOLTTable=hh3cEponBatchOperationByOLTTable, hh3cOnuBindMacAddress=hh3cOnuBindMacAddress, hh3cOnuLinkTestResultRetFrameNum=hh3cOnuLinkTestResultRetFrameNum, hh3cOnuFirmwareUpdateByTypeEntry=hh3cOnuFirmwareUpdateByTypeEntry, hh3cEponAutoUpdateSchedTime=hh3cEponAutoUpdateSchedTime, hh3cOnuManageVlanIntfS=hh3cOnuManageVlanIntfS, hh3cEponOnuAutoBindTrap=hh3cEponOnuAutoBindTrap, hh3cOnuRegType=hh3cOnuRegType, hh3cOnuProtocolTable=hh3cOnuProtocolTable, hh3cOltFirmMinorVersion=hh3cOltFirmMinorVersion, hh3cEponStatTable=hh3cEponStatTable, hh3cEponMulticastVlanId=hh3cEponMulticastVlanId, hh3cOnuChipSetModel=hh3cOnuChipSetModel, hh3cOnuLinkTestResultMinDelay=hh3cOnuLinkTestResultMinDelay, hh3cOnuAccessVlan=hh3cOnuAccessVlan, hh3cEponStatBER=hh3cEponStatBER, hh3cEponLoopbackPortDescr=hh3cEponLoopbackPortDescr, hh3cOltLaserOffTime=hh3cOltLaserOffTime, hh3cEponPortAlarmFerRecoverTrap=hh3cEponPortAlarmFerRecoverTrap, hh3cOnuChipSetVendorId=hh3cOnuChipSetVendorId, hh3cEponOnuLaserFailedTrap=hh3cEponOnuLaserFailedTrap, hh3cEponMulticastStatus=hh3cEponMulticastStatus, hh3cOnuEncryptKey=hh3cOnuEncryptKey, hh3cOltLaserOnTimeMaxVal=hh3cOltLaserOnTimeMaxVal, hh3cOnuIgspFastLeaveSupported=hh3cOnuIgspFastLeaveSupported, hh3cOnuReAuthorize=hh3cOnuReAuthorize, hh3cOltUsingOnuRowStatus=hh3cOltUsingOnuRowStatus, hh3cEponOnuLaserState=hh3cEponOnuLaserState, hh3cOnuDistance=hh3cOnuDistance, hh3cOnuCountTable=hh3cOnuCountTable, hh3cOltLaserOffTimeMinVal=hh3cOltLaserOffTimeMinVal, hh3cOnuRS485SessionAddType=hh3cOnuRS485SessionAddType, hh3cOnuRS485PropertiesEntry=hh3cOnuRS485PropertiesEntry, hh3cEponOnuRegistrationErrTrap=hh3cEponOnuRegistrationErrTrap, hh3cOltPortAlarmBerMaxVal=hh3cOltPortAlarmBerMaxVal, hh3cEponOamDiscoveryTimeout=hh3cEponOamDiscoveryTimeout, hh3cOnuRS485FlowControl=hh3cOnuRS485FlowControl, hh3cOltUsingOnuIfIndex=hh3cOltUsingOnuIfIndex, hh3cEponErrorLLIDFrameTrap=hh3cEponErrorLLIDFrameTrap, hh3cOnuIgmpSnoopingStatus=hh3cOnuIgmpSnoopingStatus, hh3cEponBatchOperationByOLTResult=hh3cEponBatchOperationByOLTResult, hh3cOnuLinkTestFrameNum=hh3cOnuLinkTestFrameNum, hh3cEponTrapPrefix=hh3cEponTrapPrefix, hh3cEponAutoUpdateSchedStatus=hh3cEponAutoUpdateSchedStatus, hh3cEponOamVersion=hh3cEponOamVersion, hh3cOnuIpAddressEntry=hh3cOnuIpAddressEntry, hh3cOltPortAlarmBer=hh3cOltPortAlarmBer, hh3cOnuRS485SessionErrInfo=hh3cOnuRS485SessionErrInfo, hh3cOnuFecStatus=hh3cOnuFecStatus, hh3cEponStatEntry=hh3cEponStatEntry, hh3cOnuWorkMode=hh3cOnuWorkMode, hh3cOnuRS485DataBits=hh3cOnuRS485DataBits, hh3cOltPortAlarmBerThreshold=hh3cOltPortAlarmBerThreshold, hh3cEponSysHasEPONBoard=hh3cEponSysHasEPONBoard, hh3cOltOpticalPowerTx=hh3cOltOpticalPowerTx, hh3cOnuGrantFifoDep=hh3cOnuGrantFifoDep, hh3cOnuQueueMaxBandwidth=hh3cOnuQueueMaxBandwidth, hh3cDot3OamNonThresholdRecoverEvent=hh3cDot3OamNonThresholdRecoverEvent, hh3cOltSysManEntry=hh3cOltSysManEntry, hh3cOltPortAlarmOamDisconnectionEnabled=hh3cOltPortAlarmOamDisconnectionEnabled, hh3cOltPortAlarmFerMaxVal=hh3cOltPortAlarmFerMaxVal, hh3cOnuDbaReportEntry=hh3cOnuDbaReportEntry, hh3cOnuRS485SessionErrInfoTable=hh3cOnuRS485SessionErrInfoTable, hh3cOltDbaUpdateResult=hh3cOltDbaUpdateResult, hh3cOnuLinkTestTable=hh3cOnuLinkTestTable, hh3cEponSlotIndex=hh3cEponSlotIndex, hh3cOnuE1PortsNumber=hh3cOnuE1PortsNumber, hh3cOnuIgmpSnoopingMaxRespT=hh3cOnuIgmpSnoopingMaxRespT, hh3cOnuUpdateByTypeOnuType=hh3cOnuUpdateByTypeOnuType, hh3cEponMsgLoseNumMinVal=hh3cEponMsgLoseNumMinVal, hh3cOnuMulticastFastLeaveEnable=hh3cOnuMulticastFastLeaveEnable, hh3cOnuSlaPriorityClass=hh3cOnuSlaPriorityClass, hh3cOnuSlaMaxBandWidthMaxVal=hh3cOnuSlaMaxBandWidthMaxVal, hh3cOltDbaCycleLengthMinVal=hh3cOltDbaCycleLengthMinVal, hh3cEponLocalStableRecoverTrap=hh3cEponLocalStableRecoverTrap, hh3cOnuRS485PropertiesTable=hh3cOnuRS485PropertiesTable, hh3cOnuSecondPonRegState=hh3cOnuSecondPonRegState, hh3cOnuDownstreamQueueNumber=hh3cOnuDownstreamQueueNumber, hh3cOnuRS485StopBits=hh3cOnuRS485StopBits, hh3cOnuRS485SessionIndex=hh3cOnuRS485SessionIndex, hh3cOltEnableDiscardPacket=hh3cOltEnableDiscardPacket, hh3cOnuSlaMinBandWidthMinVal=hh3cOnuSlaMinBandWidthMinVal, hh3cOnuManageVID=hh3cOnuManageVID, hh3cEponEncryptionNoReplyTimeOut=hh3cEponEncryptionNoReplyTimeOut, hh3cEponOnuSilenceRecoverTrap=hh3cEponOnuSilenceRecoverTrap, hh3cOnuSoftwareVersion=hh3cOnuSoftwareVersion, hh3cOltPortAlarmLocalStableEnabled=hh3cOltPortAlarmLocalStableEnabled, hh3cEponSoftwareErrorCode=hh3cEponSoftwareErrorCode, hh3cOnuRS485SessionRemotePort=hh3cOnuRS485SessionRemotePort, hh3cOltInfoTable=hh3cOltInfoTable, hh3cOltPortAlarmFerThreshold=hh3cOltPortAlarmFerThreshold, hh3cEponSoftwareErrRecoverTrap=hh3cEponSoftwareErrRecoverTrap, hh3cOltPortAlarmFer=hh3cOltPortAlarmFer, hh3cOltMultiCopyBrdCast=hh3cOltMultiCopyBrdCast, hh3cOnuDownStreamShortFrameFirst=hh3cOnuDownStreamShortFrameFirst, hh3cOltMacAddress=hh3cOltMacAddress, hh3cOnuSilentMacAddr=hh3cOnuSilentMacAddr, hh3cOnuPriorityQueueSizeMinVal=hh3cOnuPriorityQueueSizeMinVal, hh3cOltPortAlarmLlidMisMinVal=hh3cOltPortAlarmLlidMisMinVal, hh3cOnuHostType=hh3cOnuHostType, hh3cOnuMacAddrInfoEntry=hh3cOnuMacAddrInfoEntry, hh3cOltPortAlarmThresholdEntry=hh3cOltPortAlarmThresholdEntry, hh3cEponMsgTimeOutMinVal=hh3cEponMsgTimeOutMinVal, hh3cOnuDbaReportQueueSetNumber=hh3cOnuDbaReportQueueSetNumber, hh3cOltSysManTable=hh3cOltSysManTable, hh3cOltSelfTestResult=hh3cOltSelfTestResult, hh3cOnuP2PMaxBandWidth=hh3cOnuP2PMaxBandWidth, hh3cOnuRS485TXOctets=hh3cOnuRS485TXOctets, hh3cOnuSilentTable=hh3cOnuSilentTable, hh3cEponOamDisconnectionTrap=hh3cEponOamDisconnectionTrap, hh3cOnuDhcpsnoopingOption82=hh3cOnuDhcpsnoopingOption82, hh3cEponAutoUpdateSchedType=hh3cEponAutoUpdateSchedType, hh3cOnuUpdateResult=hh3cOnuUpdateResult, hh3cEponAutoUpdateTable=hh3cEponAutoUpdateTable, hh3cOnuMulticastFilterStatus=hh3cOnuMulticastFilterStatus, hh3cOnuIpAddressGateway=hh3cOnuIpAddressGateway, hh3cOnuPhysicalTable=hh3cOnuPhysicalTable, hh3cOnuFirmwareUpdateEntry=hh3cOnuFirmwareUpdateEntry, hh3cOnuRemoteFecStatus=hh3cOnuRemoteFecStatus, hh3cOnuRS485SerialIndex=hh3cOnuRS485SerialIndex, hh3cEponStpPortDescr=hh3cEponStpPortDescr, hh3cOltLaserOnTime=hh3cOltLaserOnTime, hh3cOnuDownStreamBandWidthPolicy=hh3cOnuDownStreamBandWidthPolicy, hh3cEponOuiIndexNextEntry=hh3cEponOuiIndexNextEntry, hh3cEponMonitorCycle=hh3cEponMonitorCycle, hh3cEponLoopbackPortIndex=hh3cEponLoopbackPortIndex, hh3cOnuPhysicalEntry=hh3cOnuPhysicalEntry, hh3cEponMsgLoseNumMaxVal=hh3cEponMsgLoseNumMaxVal, hh3cOltDbaDiscovryFrequency=hh3cOltDbaDiscovryFrequency, hh3cEponOltDFERecoverTrap=hh3cEponOltDFERecoverTrap, hh3cOltPortAlarmVendorSpecificEnabled=hh3cOltPortAlarmVendorSpecificEnabled, hh3cOnuQueueMaxBurstsize=hh3cOnuQueueMaxBurstsize, hh3cOnuMCtrlFastLeaveSupported=hh3cOnuMCtrlFastLeaveSupported, hh3cOnuPriorityQueueBandwidthMaxVal=hh3cOnuPriorityQueueBandwidthMaxVal, hh3cEponOamDisconnectionRecoverTrap=hh3cEponOamDisconnectionRecoverTrap, hh3cOnuDhcpallocate=hh3cOnuDhcpallocate, hh3cOnuBandWidthTable=hh3cOnuBandWidthTable, hh3cEponOuiIndexNextTable=hh3cEponOuiIndexNextTable, hh3cOnuUpdate=hh3cOnuUpdate, hh3cEponAutoUpdateFileName=hh3cEponAutoUpdateFileName, hh3cOltPortAlarmBerMinVal=hh3cOltPortAlarmBerMinVal, hh3cOnuLaserOnTime=hh3cOnuLaserOnTime, hh3cEponBatchOperationBySlotEntry=hh3cEponBatchOperationBySlotEntry, hh3cOltDbaUpdate=hh3cOltDbaUpdate, hh3cOnuP2PHighPriorityFirst=hh3cOnuP2PHighPriorityFirst, hh3cOnuBatteryBackup=hh3cOnuBatteryBackup, hh3cOnuCosToLocalPrecedenceValue=hh3cOnuCosToLocalPrecedenceValue, hh3cOltPortAlarmFerDirect=hh3cOltPortAlarmFerDirect, hh3cOnuQueueDirection=hh3cOnuQueueDirection, hh3cOnuRS485Parity=hh3cOnuRS485Parity, hh3cOnuQueueSize=hh3cOnuQueueSize, hh3cOnuLlid=hh3cOnuLlid, hh3cOnuDot1xPassword=hh3cOnuDot1xPassword, hh3cEponMulticastControlTable=hh3cEponMulticastControlTable, hh3cOnuRS485SessionType=hh3cOnuRS485SessionType, hh3cOnuLinkTestVlanTagID=hh3cOnuLinkTestVlanTagID, hh3cOnuFEPortNumber=hh3cOnuFEPortNumber, hh3cOnuSlaManEntry=hh3cOnuSlaManEntry, hh3cOltDbaVersion=hh3cOltDbaVersion, hh3cEponBatchOperationBySlotTable=hh3cEponBatchOperationBySlotTable, hh3cOnuMacIndex=hh3cOnuMacIndex, hh3cOnuBindMacAddrEntry=hh3cOnuBindMacAddrEntry, hh3cOnuUpdateByTypeRowStatus=hh3cOnuUpdateByTypeRowStatus, hh3cOnuDhcpsnooping=hh3cOnuDhcpsnooping, hh3cOltDbaDiscoveryLength=hh3cOltDbaDiscoveryLength, hh3cOltPortAlarmBerDirect=hh3cOltPortAlarmBerDirect, hh3cOltHardMinorVersion=hh3cOltHardMinorVersion, hh3cOnuInfoTable=hh3cOnuInfoTable, hh3cOnuQueueBandwidthEntry=hh3cOnuQueueBandwidthEntry, hh3cEponOuiRowStatus=hh3cEponOuiRowStatus, hh3cEponOnuRegSilentMac=hh3cEponOnuRegSilentMac, hh3cEponMonitorCycleEnable=hh3cEponMonitorCycleEnable, hh3cOnuHardMinorVersion=hh3cOnuHardMinorVersion, hh3cEponMonitorCycleMaxVal=hh3cEponMonitorCycleMaxVal, hh3cOnuDbaReportStatus=hh3cOnuDbaReportStatus, hh3cEponBatchOperationMan=hh3cEponBatchOperationMan, hh3cOamEventLogType=hh3cOamEventLogType, hh3cEponSysMan=hh3cEponSysMan, hh3cEponOnuPortStpStateTrap=hh3cEponOnuPortStpStateTrap, hh3cOnuSlaMaxBandWidthMinVal=hh3cOnuSlaMaxBandWidthMinVal, hh3cEponDbaUpdateFileName=hh3cEponDbaUpdateFileName, hh3cOnuUpdateByOnuTypeIndex=hh3cOnuUpdateByOnuTypeIndex, hh3cOnuLinkTestResultRetErrFrameNum=hh3cOnuLinkTestResultRetErrFrameNum, hh3cEponBatchOperationBySlotResult=hh3cEponBatchOperationBySlotResult, hh3cEponModeSwitch=hh3cEponModeSwitch, hh3cOnuUpdateByTypeNextIndex=hh3cOnuUpdateByTypeNextIndex, hh3cOnuSmlkFirstPonRole=hh3cOnuSmlkFirstPonRole, hh3cOnuPacketManTable=hh3cOnuPacketManTable, hh3cEponOnuStpPortEntry=hh3cEponOnuStpPortEntry, hh3cOnuQueueScheduler=hh3cOnuQueueScheduler, hh3cOnuSysManTable=hh3cOnuSysManTable, hh3cEponLocalStableTrap=hh3cEponLocalStableTrap, hh3cOnuMacAddress=hh3cOnuMacAddress, hh3cEponOuiIndexNext=hh3cEponOuiIndexNext, hh3cEponBatchOperationByOLT=hh3cEponBatchOperationByOLT, hh3cOnuUpstreamQueueNumber=hh3cOnuUpstreamQueueNumber, hh3cOltPortAlarmThresholdTable=hh3cOltPortAlarmThresholdTable, hh3cOnuStpStatus=hh3cOnuStpStatus, hh3cOnuRS485SessionErrInfoEntry=hh3cOnuRS485SessionErrInfoEntry, hh3cOnuSlaFixedPacketSize=hh3cOnuSlaFixedPacketSize, hh3cOnuCosToLocalPrecedenceTable=hh3cOnuCosToLocalPrecedenceTable, hh3cEponOnuUpdateFileName=hh3cEponOnuUpdateFileName, hh3cOltFirmMajorVersion=hh3cOltFirmMajorVersion, hh3cOltOpticalPowerRx=hh3cOltOpticalPowerRx, hh3cOnuFirmwareVersion=hh3cOnuFirmwareVersion, hh3cOltPortAlarmLlidMisFrames=hh3cOltPortAlarmLlidMisFrames, hh3cOnuChipSetInfoEntry=hh3cOnuChipSetInfoEntry, hh3cEponOnuMan=hh3cEponOnuMan, hh3cOnuUniUpDownTrapStatus=hh3cOnuUniUpDownTrapStatus, hh3cOnuRS485SessionLocalPort=hh3cOnuRS485SessionLocalPort, hh3cEponTrap=hh3cEponTrap, hh3cOnuRS485SessionTable=hh3cOnuRS485SessionTable, hh3cEponOuiEntry=hh3cEponOuiEntry, hh3cEponOperationResult=hh3cEponOperationResult, hh3cEponOnuSilenceTrap=hh3cEponOnuSilenceTrap, hh3cOltSelfTest=hh3cOltSelfTest, hh3cOnuPortBerStatus=hh3cOnuPortBerStatus, hh3cOnuVendorId=hh3cOnuVendorId, hh3cOnuIgmpSnoopingRouterAgingT=hh3cOnuIgmpSnoopingRouterAgingT, hh3cEponSysManEntry=hh3cEponSysManEntry, hh3cEponRemoteStableRecoverTrap=hh3cEponRemoteStableRecoverTrap, hh3cOnuDbaReportTable=hh3cOnuDbaReportTable, hh3cOltDbaManTable=hh3cOltDbaManTable, hh3cOnuSlaDelay=hh3cOnuSlaDelay, hh3cOnuCapabilityTable=hh3cOnuCapabilityTable, hh3cEponOltMan=hh3cEponOltMan, hh3cOnuLinkTestResultMeanDelay=hh3cOnuLinkTestResultMeanDelay, hh3cEponOnuTypeManEntry=hh3cEponOnuTypeManEntry, hh3cOnuSysManEntry=hh3cOnuSysManEntry, hh3cOnuDot1xTable=hh3cOnuDot1xTable, hh3cOnuLinkTestVlanPriority=hh3cOnuLinkTestVlanPriority, hh3cOnuInfoEntry=hh3cOnuInfoEntry)
mibBuilder.exportSymbols("HH3C-EPON-MIB", hh3cOnuDbaReportThreshold=hh3cOnuDbaReportThreshold, hh3cEponOnuRegExcessRecoverTrap=hh3cEponOnuRegExcessRecoverTrap, hh3cEponStpPortState=hh3cEponStpPortState, hh3cOnuMaxDownstreamQueuePerPort=hh3cOnuMaxDownstreamQueuePerPort, hh3cOnuEncryptMan=hh3cOnuEncryptMan, hh3cOltLaserOffTimeMaxVal=hh3cOltLaserOffTimeMaxVal, hh3cOnuCosToLocalPrecedenceCosIndex=hh3cOnuCosToLocalPrecedenceCosIndex, hh3cOnuBindType=hh3cOnuBindType, hh3cOnuLinkTestFrameNumMinVal=hh3cOnuLinkTestFrameNumMinVal, hh3cEponOltSoftwareErrAlmEnable=hh3cEponOltSoftwareErrAlmEnable, hh3cOnuPppoe=hh3cOnuPppoe, hh3cOnuIpAddressTable=hh3cOnuIpAddressTable, hh3cOnuSlaMinBandWidth=hh3cOnuSlaMinBandWidth, hh3cOnuOutDroppedFrames=hh3cOnuOutDroppedFrames, hh3cOltMaxRtt=hh3cOltMaxRtt, hh3cOnuPriorityQueueBurstsizeMinVal=hh3cOnuPriorityQueueBurstsizeMinVal, hh3cEponSysManTable=hh3cEponSysManTable, hh3cOnuFirstPonRegState=hh3cOnuFirstPonRegState, hh3cOnuIgmpSnoopingAggLeaveS=hh3cOnuIgmpSnoopingAggLeaveS, hh3cOnuRS485RXOctets=hh3cOnuRS485RXOctets, hh3cOnuDownStreamMaxBandWidth=hh3cOnuDownStreamMaxBandWidth, hh3cOnuFirmwareUpdateByTypeTable=hh3cOnuFirmwareUpdateByTypeTable, hh3cOnuMulticastControlMode=hh3cOnuMulticastControlMode, hh3cOnuP2PBandWidthPolicy=hh3cOnuP2PBandWidthPolicy, hh3cOnuIpAddressMask=hh3cOnuIpAddressMask, hh3cEponPortLoopBackAlmEnable=hh3cEponPortLoopBackAlmEnable, hh3cOnuPriorityQueueTable=hh3cOnuPriorityQueueTable, hh3cOnuRS485RXErrOctets=hh3cOnuRS485RXErrOctets, hh3cOnuRS485SessionRemoteIP=hh3cOnuRS485SessionRemoteIP, hh3cEponLoopBackEnableRecoverTrap=hh3cEponLoopBackEnableRecoverTrap, hh3cEponOnuTypeIndex=hh3cEponOnuTypeIndex, hh3cOnuQueueId=hh3cOnuQueueId, hh3cOltDbaDiscoveryLengthMinVal=hh3cOltDbaDiscoveryLengthMinVal, hh3cOnuRS485ResetStatistics=hh3cOnuRS485ResetStatistics, hh3cEponOnuPowerOffTrap=hh3cEponOnuPowerOffTrap, hh3cOnuLinkTestFrameNumMaxVal=hh3cOnuLinkTestFrameNumMaxVal, hh3cOnuSlaManTable=hh3cOnuSlaManTable, hh3cOnuChipSetRevision=hh3cOnuChipSetRevision, hh3cEponOamVendorSpecificTrap=hh3cEponOamVendorSpecificTrap, hh3cOnuRS485TXErrOctets=hh3cOnuRS485TXErrOctets, hh3cEponRemoteStableTrap=hh3cEponRemoteStableTrap, hh3cOnuP2PMaxBurstSize=hh3cOnuP2PMaxBurstSize, hh3cOltDbaCycleLength=hh3cOltDbaCycleLength, hh3cOnuRS485SessionNextIndex=hh3cOnuRS485SessionNextIndex, hh3cOnuSlaFixedBandWidth=hh3cOnuSlaFixedBandWidth, hh3cOnuSecondPonMac=hh3cOnuSecondPonMac, hh3cOltDbaDiscoveryLengthMaxVal=hh3cOltDbaDiscoveryLengthMaxVal, hh3cOltAgcCdrTime=hh3cOltAgcCdrTime, hh3cEponOnuStpPortTable=hh3cEponOnuStpPortTable, hh3cOnuMaxUpstreamQueuePerPort=hh3cOnuMaxUpstreamQueuePerPort, hh3cEponMsgTimeOutMaxVal=hh3cEponMsgTimeOutMaxVal, hh3cOnuSmlkSwitchoverTrap=hh3cOnuSmlkSwitchoverTrap, hh3cEponOuiIndex=hh3cEponOuiIndex, hh3cEponBatchOperationBySlotIndex=hh3cEponBatchOperationBySlotIndex, hh3cOltWorkMode=hh3cOltWorkMode, hh3cOltPortAlarmEncryptionKeyEnabled=hh3cOltPortAlarmEncryptionKeyEnabled, hh3cOltUsingOnuNum=hh3cOltUsingOnuNum, hh3cEponOnuScalarGroup=hh3cEponOnuScalarGroup, hh3cEponPortAlarmBerTrap=hh3cEponPortAlarmBerTrap, hh3cOnuQueueBandwidthTable=hh3cOnuQueueBandwidthTable, hh3cOnuPriorityQueueBurstsizeMaxVal=hh3cOnuPriorityQueueBurstsizeMaxVal, hh3cEponBatchOperationByOLTType=hh3cEponBatchOperationByOLTType, hh3cOnuMcastCtrlHostAgingTime=hh3cOnuMcastCtrlHostAgingTime, hh3cOnuDot1xEntry=hh3cOnuDot1xEntry, hh3cOnuEEPROMVersion=hh3cOnuEEPROMVersion, hh3cOnuSilentTime=hh3cOnuSilentTime, hh3cOnuLaserOffTime=hh3cOnuLaserOffTime, hh3cOltHardMajorVersion=hh3cOltHardMajorVersion, hh3cOltInfoEntry=hh3cOltInfoEntry, hh3cEponStatFER=hh3cEponStatFER, hh3cEponAutoUpdateRealTimeStatus=hh3cEponAutoUpdateRealTimeStatus, hh3cOltAgcLockTime=hh3cOltAgcLockTime, hh3cOltDbaEnabledType=hh3cOltDbaEnabledType, hh3cOnuMacAddrInfoTable=hh3cOnuMacAddrInfoTable, hh3cOltDbaManEntry=hh3cOltDbaManEntry, hh3cOnuIgmpSnoopingHostAgingT=hh3cOnuIgmpSnoopingHostAgingT, hh3cOnuPriorityQueueEntry=hh3cOnuPriorityQueueEntry, hh3cOnuServiceSupported=hh3cOnuServiceSupported, hh3cOnuP2PShortFrameFirst=hh3cOnuP2PShortFrameFirst, hh3cEponBatchOperationBySlot=hh3cEponBatchOperationBySlot, hh3cEponAutomaticMode=hh3cEponAutomaticMode, hh3cOnuPriorityTrust=hh3cOnuPriorityTrust, hh3cOnuCosToLocalPrecedenceEntry=hh3cOnuCosToLocalPrecedenceEntry, hh3cEponOltSwitchoverTrap=hh3cEponOltSwitchoverTrap, hh3cOnuProtocolEntry=hh3cOnuProtocolEntry, hh3cOnuSmlkEntry=hh3cOnuSmlkEntry, hh3cEponStpPortIndex=hh3cEponStpPortIndex, hh3cOnuLinkTestFrameSize=hh3cOnuLinkTestFrameSize, hh3cOnuBandWidthEntry=hh3cOnuBandWidthEntry, hh3cOltPortAlarmFerMinVal=hh3cOltPortAlarmFerMinVal, hh3cEponMonitorCycleMinVal=hh3cEponMonitorCycleMinVal, hh3cOnuSmlkSecondPonStatus=hh3cOnuSmlkSecondPonStatus, hh3cOltPortAlarmFerEnabled=hh3cOltPortAlarmFerEnabled, hh3cOnuSmlkTable=hh3cOnuSmlkTable, hh3cOnuRS485SessionSummaryTable=hh3cOnuRS485SessionSummaryTable, hh3cOnuQueuePolicyStatus=hh3cOnuQueuePolicyStatus, hh3cOnuSlaMaxBandWidth=hh3cOnuSlaMaxBandWidth, hh3cOnuRS485SessionMaxNum=hh3cOnuRS485SessionMaxNum, hh3cEponFileName=hh3cEponFileName, hh3cOnuRS485SessionEntry=hh3cOnuRS485SessionEntry, hh3cOnuRtt=hh3cOnuRtt, hh3cOltUsingOnuEntry=hh3cOltUsingOnuEntry, hh3cEponOnuRegErrorMacAddr=hh3cEponOnuRegErrorMacAddr, hh3cEponStat=hh3cEponStat, hh3cEponEncryptionUpdateTime=hh3cEponEncryptionUpdateTime, hh3cEponOnuTypeDescr=hh3cEponOnuTypeDescr, hh3cOnuUniMacType=hh3cOnuUniMacType, hh3cOnuCapabilityEntry=hh3cOnuCapabilityEntry, hh3cEponMulticastControlEntry=hh3cEponMulticastControlEntry, hh3cOnuSmlkSecondPonRole=hh3cOnuSmlkSecondPonRole, hh3cEponBatchOperationBySlotType=hh3cEponBatchOperationBySlotType, hh3cOnuInCRCErrPkts=hh3cOnuInCRCErrPkts, hh3cOnuSilentEntry=hh3cOnuSilentEntry, hh3cEponMsgTimeOut=hh3cEponMsgTimeOut, hh3cOnuDot1xAccount=hh3cOnuDot1xAccount, hh3cOnuBindMacAddrTable=hh3cOnuBindMacAddrTable, hh3cEponOnuRegistrationErrRecoverTrap=hh3cEponOnuRegistrationErrRecoverTrap, hh3cOltPortAlarmRegExcessEnabled=hh3cOltPortAlarmRegExcessEnabled, hh3cEponOuiValue=hh3cEponOuiValue, hh3cOnuCountEntry=hh3cOnuCountEntry, hh3cOltUsingOnuTable=hh3cOltUsingOnuTable, hh3cOnuDownStreamMaxBurstSize=hh3cOnuDownStreamMaxBurstSize, hh3cOnuIpAddress=hh3cOnuIpAddress, hh3cOnuPortIsolateEnable=hh3cOnuPortIsolateEnable, hh3cOnuHardMajorVersion=hh3cOnuHardMajorVersion, hh3cOltPortAlarmLlidMismatchThreshold=hh3cOltPortAlarmLlidMismatchThreshold, hh3cOltLaserOnTimeMinVal=hh3cOltLaserOnTimeMinVal, hh3cOnuLinkTestVlanTag=hh3cOnuLinkTestVlanTag, hh3cOnuChipSetInfoTable=hh3cOnuChipSetInfoTable, hh3cOnuGEPortNumber=hh3cOnuGEPortNumber, hh3cOnuMacAddrFlag=hh3cOnuMacAddrFlag, hh3cDot3OamThresholdRecoverEvent=hh3cDot3OamThresholdRecoverEvent, hh3cEponOnuUpdateResultTrap=hh3cEponOnuUpdateResultTrap, hh3cOnuLinkTestEntry=hh3cOnuLinkTestEntry, hh3cOnuLinkTestResultSentFrameNum=hh3cOnuLinkTestResultSentFrameNum, hh3cEponOuiTable=hh3cEponOuiTable, hh3cOnuRS485BaudRate=hh3cOnuRS485BaudRate, hh3cOnuPriorityQueueBandwidthMinVal=hh3cOnuPriorityQueueBandwidthMinVal, hh3cOnuPOTSPortNumber=hh3cOnuPOTSPortNumber, hh3cOnuIgmpSnoopingAggReportS=hh3cOnuIgmpSnoopingAggReportS, hh3cOltPortAlarmLlidMismatchEnabled=hh3cOltPortAlarmLlidMismatchEnabled, hh3cOnuSlaBandWidthStepVal=hh3cOnuSlaBandWidthStepVal, hh3cEponMulticastAddressList=hh3cEponMulticastAddressList, hh3cOamVendorSpecificAlarmCode=hh3cOamVendorSpecificAlarmCode, hh3cOnuRS485SessionSummaryEntry=hh3cOnuRS485SessionSummaryEntry, hh3cEponAutoAuthorize=hh3cEponAutoAuthorize, hh3cOnuReset=hh3cOnuReset, hh3cEponOnuTypeManTable=hh3cEponOnuTypeManTable, hh3cOltPortAlarmRegistrationEnabled=hh3cOltPortAlarmRegistrationEnabled, hh3cOnuUpdateByTypeFileName=hh3cOnuUpdateByTypeFileName, hh3cEponErrorLLIDFrameRecoverTrap=hh3cEponErrorLLIDFrameRecoverTrap, hh3cEponLoopBackEnableTrap=hh3cEponLoopBackEnableTrap, hh3cOltPortAlarmRemoteStableEnabled=hh3cOltPortAlarmRemoteStableEnabled, hh3cOnuOpticalPowerReceivedByOlt=hh3cOnuOpticalPowerReceivedByOlt, hh3cOnuPriorityQueueSizeMaxVal=hh3cOnuPriorityQueueSizeMaxVal, hh3cEponMsgLoseNum=hh3cEponMsgLoseNum, hh3cOnuChipSetDesignDate=hh3cOnuChipSetDesignDate, hh3cOnuRS485SessionRowStatus=hh3cOnuRS485SessionRowStatus, hh3cOltPortAlarmLlidMisMaxVal=hh3cOltPortAlarmLlidMisMaxVal, hh3cOltDbaDiscovryFrequencyMinVal=hh3cOltDbaDiscovryFrequencyMinVal, hh3cOnuLinkTestResultMaxDelay=hh3cOnuLinkTestResultMaxDelay, hh3cOnuPacketManEntry=hh3cOnuPacketManEntry, hh3cOnuPCBVersion=hh3cOnuPCBVersion, PYSNMP_MODULE_ID=hh3cEponMibObjects, hh3cOltPortAlarmBerEnabled=hh3cOltPortAlarmBerEnabled, hh3cOnuUpdateFileName=hh3cOnuUpdateFileName, hh3cEponEncryptionKeyErrRecoverTrap=hh3cEponEncryptionKeyErrRecoverTrap, hh3cOamEventLogLocation=hh3cOamEventLogLocation, hh3cOnuDownStreamHighPriorityFirst=hh3cOnuDownStreamHighPriorityFirst, hh3cOltDbaDiscovryFrequencyMaxVal=hh3cOltDbaDiscovryFrequencyMaxVal, hh3cOnuFirmwareUpdateTable=hh3cOnuFirmwareUpdateTable)
