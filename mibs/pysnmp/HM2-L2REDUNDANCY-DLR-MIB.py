#
# PySNMP MIB module HM2-L2REDUNDANCY-DLR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-L2REDUNDANCY-DLR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:18:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
hm2L2RedundancyMibObjects, = mibBuilder.importSymbols("HM2-L2REDUNDANCY-MIB", "hm2L2RedundancyMibObjects")
HmEnabledStatus, = mibBuilder.importSymbols("HM2-TC-MIB", "HmEnabledStatus")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Bits, Counter64, iso, ObjectIdentity, Counter32, IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, Gauge32, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Bits", "Counter64", "iso", "ObjectIdentity", "Counter32", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "Gauge32", "ModuleIdentity", "NotificationType")
MacAddress, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "RowStatus", "DisplayString")
hm2DlrMibGroup = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5))
hm2DlrMibGroup.setRevisions(('2014-11-07 00:00',))
if mibBuilder.loadTexts: hm2DlrMibGroup.setLastUpdated('201411070000Z')
if mibBuilder.loadTexts: hm2DlrMibGroup.setOrganization('Hirschmann Automation and Control GmbH')
hm2DlrMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 0))
hm2DlrMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1))
hm2DlrConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1))
hm2DlrStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2))
class Hm2DlrNetworkTopologyType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("linear", 0), ("ring", 1))

class Hm2DlrNetworkStatusType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("normal", 0), ("ringFault", 1), ("loop", 2), ("partial", 3), ("rapidFault", 4))

class Hm2DlrGatewayStatusType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("nonGateway", 0), ("backup", 1), ("active", 2), ("uplinkFault", 3), ("unsupported", 4), ("networkFault", 5))

class Hm2DlrRingDeviceStatusType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("backup", 0), ("supervisor", 1), ("node", 2), ("nonDlr", 3), ("unsupported", 4))

class Hm2DlrPortStatusType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("disabled", 1), ("blocked", 2), ("forwarding", 3), ("notConnected", 4))

class Hm2DlrTimeInterval(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

hm2DlrGlobalAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DlrGlobalAdminState.setStatus('current')
hm2DlrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10), )
if mibBuilder.loadTexts: hm2DlrConfigTable.setStatus('current')
hm2DlrGatewayConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11), )
if mibBuilder.loadTexts: hm2DlrGatewayConfigTable.setStatus('current')
hm2DlrStatusTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1), )
if mibBuilder.loadTexts: hm2DlrStatusTable.setStatus('current')
hm2DlrRingParticipantsTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 2), )
if mibBuilder.loadTexts: hm2DlrRingParticipantsTable.setStatus('current')
hm2DlrGatewayStatusTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 3), )
if mibBuilder.loadTexts: hm2DlrGatewayStatusTable.setStatus('current')
hm2DlrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1), ).setIndexNames((0, "HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrRingIndex"))
if mibBuilder.loadTexts: hm2DlrConfigEntry.setStatus('current')
hm2DlrRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2DlrRingIndex.setStatus('current')
hm2DlrRingName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrRingName.setStatus('current')
hm2DlrRingport1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrRingport1IfIndex.setStatus('current')
hm2DlrRingport2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrRingport2IfIndex.setStatus('current')
hm2DlrRingport1OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 5), Hm2DlrPortStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrRingport1OperStatus.setStatus('current')
hm2DlrRingport2OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 6), Hm2DlrPortStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrRingport2OperStatus.setStatus('current')
hm2DlrSupervisorAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 7), HmEnabledStatus().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrSupervisorAdminState.setStatus('current')
hm2DlrSupervisorPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrSupervisorPrecedence.setStatus('current')
hm2DlrBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(400, 100000)).clone(400)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrBeaconInterval.setStatus('current')
hm2DlrBeaconTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(800, 500000)).clone(1960)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrBeaconTimeout.setStatus('current')
hm2DlrVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4042)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrVLANID.setStatus('current')
hm2DlrService = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("noService", 0), ("verifyFaultLocation", 1), ("clearRapidFaults", 2), ("restartSignOn", 3), ("clearGatewayPartialFault", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrService.setStatus('current')
hm2DlrConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 10, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrConfigRowStatus.setStatus('current')
hm2DlrStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1), ).setIndexNames((0, "HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrRingIndex"))
if mibBuilder.loadTexts: hm2DlrStatusEntry.setStatus('current')
hm2DlrCapabilityFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 1), Bits().clone(namedValues=NamedValues(("announce", 0), ("beacon", 1), ("supervisor", 5), ("gateway", 6), ("flushTable", 7))).clone(namedValues=NamedValues(("beacon", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrCapabilityFlags.setStatus('current')
hm2DlrDeviceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 2), Hm2DlrRingDeviceStatusType().clone('node')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrDeviceOperStatus.setStatus('current')
hm2DlrNetworkTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 3), Hm2DlrNetworkTopologyType().clone('ring')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrNetworkTopology.setStatus('current')
hm2DlrNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 4), Hm2DlrNetworkStatusType().clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrNetworkStatus.setStatus('current')
hm2DlrLastNetworkStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 5), Hm2DlrTimeInterval()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrLastNetworkStatusChange.setStatus('current')
hm2DlrRingParticipantsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrRingParticipantsCount.setStatus('current')
hm2DlrActiveSupervisorIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 7), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrActiveSupervisorIpAddressType.setStatus('current')
hm2DlrActiveSupervisorIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 8), InetAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrActiveSupervisorIpAddress.setStatus('current')
hm2DlrActiveSupervisorMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 9), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrActiveSupervisorMacAddress.setStatus('current')
hm2DlrActiveSupervisorPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrActiveSupervisorPrecedence.setStatus('current')
hm2DlrRingFaultsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrRingFaultsCount.setStatus('current')
hm2DlrLastActiveNodePort1IpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 12), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrLastActiveNodePort1IpAddressType.setStatus('current')
hm2DlrLastActiveNodePort1IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 13), InetAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrLastActiveNodePort1IpAddress.setStatus('current')
hm2DlrLastActiveNodePort1MacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 14), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrLastActiveNodePort1MacAddress.setStatus('current')
hm2DlrLastActiveNodePort2IpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 15), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrLastActiveNodePort2IpAddressType.setStatus('current')
hm2DlrLastActiveNodePort2IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 16), InetAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrLastActiveNodePort2IpAddress.setStatus('current')
hm2DlrLastActiveNodePort2MacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 1, 1, 17), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrLastActiveNodePort2MacAddress.setStatus('current')
hm2DlrRingParticipantsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 2, 1), ).setIndexNames((0, "HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrRingIndex"), (0, "HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrRingParticipantsIndex"))
if mibBuilder.loadTexts: hm2DlrRingParticipantsEntry.setStatus('current')
hm2DlrRingParticipantsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hm2DlrRingParticipantsIndex.setStatus('current')
hm2DlrRingParticipantsIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 2, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrRingParticipantsIpAddressType.setStatus('current')
hm2DlrRingParticipantsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrRingParticipantsIpAddress.setStatus('current')
hm2DlrRingParticipantsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrRingParticipantsMacAddress.setStatus('current')
hm2DlrGatewayConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1), ).setIndexNames((0, "HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrRingIndex"), (0, "HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrGatewayIndex"))
if mibBuilder.loadTexts: hm2DlrGatewayConfigEntry.setStatus('current')
hm2DlrGatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2DlrGatewayIndex.setStatus('current')
hm2DlrGatewayName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrGatewayName.setStatus('current')
hm2DlrGatewayConfigLearningUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 3), HmEnabledStatus().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrGatewayConfigLearningUpdate.setStatus('current')
hm2DlrGatewayConfigPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrGatewayConfigPrecedence.setStatus('current')
hm2DlrGatewayConfigAdvertiseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 100000)).clone(2000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrGatewayConfigAdvertiseInterval.setStatus('current')
hm2DlrGatewayConfigAdvertiseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2500, 500000)).clone(5000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrGatewayConfigAdvertiseTimeout.setStatus('current')
hm2DlrGatewayConfigUplinkPort1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 7), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrGatewayConfigUplinkPort1IfIndex.setStatus('current')
hm2DlrGatewayConfigUplinkPort2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrGatewayConfigUplinkPort2IfIndex.setStatus('current')
hm2DlrGatewayUplinkPort1OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 9), Hm2DlrPortStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrGatewayUplinkPort1OperStatus.setStatus('current')
hm2DlrGatewayUplinkPort2OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 10), Hm2DlrPortStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrGatewayUplinkPort2OperStatus.setStatus('current')
hm2DlrGatewayConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 1, 11, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DlrGatewayConfigRowStatus.setStatus('current')
hm2DlrGatewayStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 3, 1), ).setIndexNames((0, "HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrRingIndex"), (0, "HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrGatewayIndex"))
if mibBuilder.loadTexts: hm2DlrGatewayStatusEntry.setStatus('current')
hm2DlrGatewayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 3, 1, 1), Hm2DlrGatewayStatusType().clone('nonGateway')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrGatewayStatus.setStatus('current')
hm2DlrGatewayStatusPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrGatewayStatusPrecedence.setStatus('current')
hm2DlrGatewayStatusIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 3, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrGatewayStatusIpAddressType.setStatus('current')
hm2DlrGatewayStatusIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 3, 1, 4), InetAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrGatewayStatusIpAddress.setStatus('current')
hm2DlrGatewayStatusMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 1, 2, 3, 1, 5), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DlrGatewayStatusMacAddress.setStatus('current')
hm2DlrRingStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 5, 0, 1)).setObjects(("HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrRingIndex"), ("HM2-L2REDUNDANCY-DLR-MIB", "hm2DlrNetworkStatus"))
if mibBuilder.loadTexts: hm2DlrRingStatusTrap.setStatus('current')
mibBuilder.exportSymbols("HM2-L2REDUNDANCY-DLR-MIB", Hm2DlrNetworkStatusType=Hm2DlrNetworkStatusType, Hm2DlrPortStatusType=Hm2DlrPortStatusType, hm2DlrActiveSupervisorPrecedence=hm2DlrActiveSupervisorPrecedence, hm2DlrGatewayName=hm2DlrGatewayName, hm2DlrGatewayUplinkPort2OperStatus=hm2DlrGatewayUplinkPort2OperStatus, Hm2DlrNetworkTopologyType=Hm2DlrNetworkTopologyType, hm2DlrDeviceOperStatus=hm2DlrDeviceOperStatus, Hm2DlrTimeInterval=Hm2DlrTimeInterval, hm2DlrGatewayConfigUplinkPort1IfIndex=hm2DlrGatewayConfigUplinkPort1IfIndex, hm2DlrCapabilityFlags=hm2DlrCapabilityFlags, hm2DlrLastActiveNodePort2IpAddressType=hm2DlrLastActiveNodePort2IpAddressType, hm2DlrStatus=hm2DlrStatus, hm2DlrNetworkTopology=hm2DlrNetworkTopology, hm2DlrSupervisorAdminState=hm2DlrSupervisorAdminState, hm2DlrActiveSupervisorIpAddressType=hm2DlrActiveSupervisorIpAddressType, hm2DlrRingParticipantsEntry=hm2DlrRingParticipantsEntry, hm2DlrGatewayStatusIpAddress=hm2DlrGatewayStatusIpAddress, hm2DlrRingParticipantsTable=hm2DlrRingParticipantsTable, hm2DlrGatewayConfigEntry=hm2DlrGatewayConfigEntry, hm2DlrStatusTable=hm2DlrStatusTable, hm2DlrLastActiveNodePort1IpAddressType=hm2DlrLastActiveNodePort1IpAddressType, hm2DlrGatewayConfigLearningUpdate=hm2DlrGatewayConfigLearningUpdate, hm2DlrRingName=hm2DlrRingName, hm2DlrGatewayConfigUplinkPort2IfIndex=hm2DlrGatewayConfigUplinkPort2IfIndex, hm2DlrBeaconInterval=hm2DlrBeaconInterval, hm2DlrGatewayConfigAdvertiseTimeout=hm2DlrGatewayConfigAdvertiseTimeout, hm2DlrNetworkStatus=hm2DlrNetworkStatus, hm2DlrLastActiveNodePort2IpAddress=hm2DlrLastActiveNodePort2IpAddress, hm2DlrMibNotifications=hm2DlrMibNotifications, hm2DlrMibObjects=hm2DlrMibObjects, hm2DlrActiveSupervisorIpAddress=hm2DlrActiveSupervisorIpAddress, hm2DlrRingParticipantsMacAddress=hm2DlrRingParticipantsMacAddress, hm2DlrVLANID=hm2DlrVLANID, PYSNMP_MODULE_ID=hm2DlrMibGroup, hm2DlrRingParticipantsCount=hm2DlrRingParticipantsCount, hm2DlrSupervisorPrecedence=hm2DlrSupervisorPrecedence, hm2DlrRingFaultsCount=hm2DlrRingFaultsCount, hm2DlrRingport2IfIndex=hm2DlrRingport2IfIndex, hm2DlrLastActiveNodePort1IpAddress=hm2DlrLastActiveNodePort1IpAddress, hm2DlrGatewayConfigAdvertiseInterval=hm2DlrGatewayConfigAdvertiseInterval, hm2DlrGatewayConfigRowStatus=hm2DlrGatewayConfigRowStatus, hm2DlrGatewayStatusEntry=hm2DlrGatewayStatusEntry, hm2DlrConfiguration=hm2DlrConfiguration, hm2DlrConfigRowStatus=hm2DlrConfigRowStatus, hm2DlrRingport1IfIndex=hm2DlrRingport1IfIndex, hm2DlrConfigEntry=hm2DlrConfigEntry, hm2DlrLastActiveNodePort1MacAddress=hm2DlrLastActiveNodePort1MacAddress, hm2DlrGatewayUplinkPort1OperStatus=hm2DlrGatewayUplinkPort1OperStatus, hm2DlrGatewayIndex=hm2DlrGatewayIndex, hm2DlrGlobalAdminState=hm2DlrGlobalAdminState, hm2DlrGatewayConfigTable=hm2DlrGatewayConfigTable, hm2DlrGatewayConfigPrecedence=hm2DlrGatewayConfigPrecedence, hm2DlrGatewayStatusMacAddress=hm2DlrGatewayStatusMacAddress, hm2DlrStatusEntry=hm2DlrStatusEntry, hm2DlrBeaconTimeout=hm2DlrBeaconTimeout, hm2DlrMibGroup=hm2DlrMibGroup, hm2DlrLastNetworkStatusChange=hm2DlrLastNetworkStatusChange, hm2DlrRingParticipantsIpAddress=hm2DlrRingParticipantsIpAddress, hm2DlrActiveSupervisorMacAddress=hm2DlrActiveSupervisorMacAddress, hm2DlrRingStatusTrap=hm2DlrRingStatusTrap, hm2DlrRingport2OperStatus=hm2DlrRingport2OperStatus, hm2DlrService=hm2DlrService, Hm2DlrGatewayStatusType=Hm2DlrGatewayStatusType, hm2DlrConfigTable=hm2DlrConfigTable, hm2DlrGatewayStatus=hm2DlrGatewayStatus, hm2DlrGatewayStatusPrecedence=hm2DlrGatewayStatusPrecedence, hm2DlrRingIndex=hm2DlrRingIndex, hm2DlrRingParticipantsIpAddressType=hm2DlrRingParticipantsIpAddressType, hm2DlrLastActiveNodePort2MacAddress=hm2DlrLastActiveNodePort2MacAddress, hm2DlrRingParticipantsIndex=hm2DlrRingParticipantsIndex, hm2DlrGatewayStatusIpAddressType=hm2DlrGatewayStatusIpAddressType, Hm2DlrRingDeviceStatusType=Hm2DlrRingDeviceStatusType, hm2DlrRingport1OperStatus=hm2DlrRingport1OperStatus, hm2DlrGatewayStatusTable=hm2DlrGatewayStatusTable)
