#
# PySNMP MIB module NETWORTH-FASTPIPES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETWORTH-FASTPIPES-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:11:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ObjectIdentity, NotificationType, enterprises, Counter32, ModuleIdentity, iso, Integer32, Counter64, Bits, MibIdentifier, Unsigned32, NotificationType, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "NotificationType", "enterprises", "Counter32", "ModuleIdentity", "iso", "Integer32", "Counter64", "Bits", "MibIdentifier", "Unsigned32", "NotificationType", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
networth = MibIdentifier((1, 3, 6, 1, 4, 1, 215))
networthProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 215, 1))
networthInternetworking = MibIdentifier((1, 3, 6, 1, 4, 1, 215, 1, 2))
nwFastPipes = MibIdentifier((1, 3, 6, 1, 4, 1, 215, 1, 2, 2))
nwfpProductType = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpProductType.setStatus('mandatory')
nwfpReset = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-reset", 1), ("reset", 2), ("reset-and-erase-config", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpReset.setStatus('mandatory')
nwfpCurrentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpCurrentSoftwareVersion.setStatus('mandatory')
nwfpFutureSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpFutureSoftwareVersion.setStatus('mandatory')
nwfpTFTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpTFTPServerIPAddress.setStatus('mandatory')
nwfpCurrentUplinkSoftwareVers = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpCurrentUplinkSoftwareVers.setStatus('mandatory')
nwfpFutureUplinkSoftwareVers = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpFutureUplinkSoftwareVers.setStatus('mandatory')
nwfpLastFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpLastFailureReason.setStatus('mandatory')
nwfpEEPROMVersion = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpEEPROMVersion.setStatus('mandatory')
nwfpManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpManufactureDate.setStatus('mandatory')
nwfpAuthErrIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpAuthErrIPaddress.setStatus('mandatory')
nwfpRAMsize = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("one-MB", 1), ("two-MB", 2), ("four-MB", 4), ("eight-MB", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpRAMsize.setStatus('mandatory')
nwfpEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 13), )
if mibBuilder.loadTexts: nwfpEthernetTable.setStatus('mandatory')
nwfpEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 13, 1), ).setIndexNames((0, "NETWORTH-FASTPIPES-MIB", "nwfpIfIndex"))
if mibBuilder.loadTexts: nwfpEthernetEntry.setStatus('mandatory')
nwfpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpIfIndex.setStatus('mandatory')
nwfpBOOTPrequestFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpBOOTPrequestFlag.setStatus('mandatory')
nwfpBOOTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpBOOTPServerIPAddress.setStatus('mandatory')
nwfpBOOTPEthernetIF = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpBOOTPEthernetIF.setStatus('mandatory')
nwfpUplinkSoftwarePath = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpUplinkSoftwarePath.setStatus('mandatory')
nwfpSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpSerialNumber.setStatus('mandatory')
nwfpConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(500, 501, 502, 503, 504))).clone(namedValues=NamedValues(("fsp12", 500), ("fsp6", 501), ("fsp11", 502), ("fsp12fx", 503), ("fsp6fl", 504)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpConfiguration.setStatus('mandatory')
nwfpUpLinkEEPROMVersion = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpUpLinkEEPROMVersion.setStatus('mandatory')
nwfpUpLinkManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpUpLinkManufactureDate.setStatus('mandatory')
nwfpUpLinkSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpUpLinkSerialNumber.setStatus('mandatory')
nwfpUpLinkConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("fddi-fiber-das", 2), ("fddi-fiber-sas", 3), ("fddi-tppmd-sas", 4), ("ethernet-100mbps-t4", 5), ("ethernet-100mbps-tx", 6), ("ethernet-100mbps-fx", 7), ("atm", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpUpLinkConfiguration.setStatus('mandatory')
nwfpSoftwarePath = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpSoftwarePath.setStatus('mandatory')
nwfpCurrentBooterSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpCurrentBooterSoftwareVersion.setStatus('mandatory')
nwfpFutureBooterSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpFutureBooterSoftwareVersion.setStatus('mandatory')
nwfpBooterSoftwarePath = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpBooterSoftwarePath.setStatus('mandatory')
nwfpSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("config-info-saved", 1), ("save-all", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpSaveConfig.setStatus('mandatory')
nwfpFddiIPFrag = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpFddiIPFrag.setStatus('mandatory')
nwfpFddiToEthIPTrans = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet-ii", 1), ("ethernet-802-3-RAW", 2), ("automatic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpFddiToEthIPTrans.setStatus('mandatory')
nwfpFddiSNAPToEthIPXTrans = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet-ii", 1), ("ieee8022snap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpFddiSNAPToEthIPXTrans.setStatus('mandatory')
nwfpFddi8022ToEthIPXTrans = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet-802-3-RAW", 1), ("ieee8022", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpFddi8022ToEthIPXTrans.setStatus('mandatory')
nwfpFddiLocTrafFiltering = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpFddiLocTrafFiltering.setStatus('mandatory')
nwfpSpanningTreeEnable = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpSpanningTreeEnable.setStatus('mandatory')
nwfpTpFdbMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpTpFdbMaxSize.setStatus('mandatory')
nwfpTpFdbNbEntriesUsed = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpTpFdbNbEntriesUsed.setStatus('mandatory')
nwfpEthIPX8023ToFddiTrans = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet-802-3-RAW", 1), ("ieee8022", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpEthIPX8023ToFddiTrans.setStatus('mandatory')
nwfpPowerSupplyNumber = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpPowerSupplyNumber.setStatus('mandatory')
nwfpPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 42), )
if mibBuilder.loadTexts: nwfpPowerSupplyTable.setStatus('mandatory')
nwfpPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 42, 1), ).setIndexNames((0, "NETWORTH-FASTPIPES-MIB", "nwfpPowerSupplyIndex"))
if mibBuilder.loadTexts: nwfpPowerSupplyEntry.setStatus('mandatory')
nwfpPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 42, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpPowerSupplyIndex.setStatus('mandatory')
nwfpPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 42, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("good", 1), ("bad", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpPowerSupplyStatus.setStatus('mandatory')
nwfpFanNumber = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpFanNumber.setStatus('mandatory')
nwfpFanTable = MibTable((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 44), )
if mibBuilder.loadTexts: nwfpFanTable.setStatus('mandatory')
nwfpFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 44, 1), ).setIndexNames((0, "NETWORTH-FASTPIPES-MIB", "nwfpFanIndex"))
if mibBuilder.loadTexts: nwfpFanEntry.setStatus('mandatory')
nwfpFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 44, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpFanIndex.setStatus('mandatory')
nwfpFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 44, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("good", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwfpFanStatus.setStatus('mandatory')
nwfpMonitorPort = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpMonitorPort.setStatus('mandatory')
nwfpMonitorSource = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpMonitorSource.setStatus('mandatory')
nwfpMonitorPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 215, 1, 2, 2, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwfpMonitorPortStatus.setStatus('mandatory')
nwfpPowerSupplyDown = NotificationType((1, 3, 6, 1, 4, 1, 215) + (0,11)).setObjects(("NETWORTH-FASTPIPES-MIB", "nwfpPowerSupplyIndex"), ("NETWORTH-FASTPIPES-MIB", "nwfpPowerSupplyStatus"))
nwfpPowerSupplyUp = NotificationType((1, 3, 6, 1, 4, 1, 215) + (0,12)).setObjects(("NETWORTH-FASTPIPES-MIB", "nwfpPowerSupplyIndex"), ("NETWORTH-FASTPIPES-MIB", "nwfpPowerSupplyStatus"))
nwfpfanDown = NotificationType((1, 3, 6, 1, 4, 1, 215) + (0,13)).setObjects(("NETWORTH-FASTPIPES-MIB", "nwfpFanIndex"), ("NETWORTH-FASTPIPES-MIB", "nwfpFanStatus"))
nwfpfanUp = NotificationType((1, 3, 6, 1, 4, 1, 215) + (0,14)).setObjects(("NETWORTH-FASTPIPES-MIB", "nwfpFanIndex"), ("NETWORTH-FASTPIPES-MIB", "nwfpFanStatus"))
mibBuilder.exportSymbols("NETWORTH-FASTPIPES-MIB", nwfpUpLinkSerialNumber=nwfpUpLinkSerialNumber, nwfpBOOTPServerIPAddress=nwfpBOOTPServerIPAddress, nwfpPowerSupplyDown=nwfpPowerSupplyDown, nwfpBOOTPEthernetIF=nwfpBOOTPEthernetIF, nwfpFddiLocTrafFiltering=nwfpFddiLocTrafFiltering, networthProducts=networthProducts, nwfpCurrentSoftwareVersion=nwfpCurrentSoftwareVersion, nwfpEthernetEntry=nwfpEthernetEntry, nwfpfanDown=nwfpfanDown, nwfpManufactureDate=nwfpManufactureDate, nwfpSoftwarePath=nwfpSoftwarePath, nwfpUpLinkConfiguration=nwfpUpLinkConfiguration, nwfpProductType=nwfpProductType, nwfpFanNumber=nwfpFanNumber, nwfpBooterSoftwarePath=nwfpBooterSoftwarePath, nwfpFanTable=nwfpFanTable, nwfpCurrentUplinkSoftwareVers=nwfpCurrentUplinkSoftwareVers, nwfpEthernetTable=nwfpEthernetTable, nwfpSerialNumber=nwfpSerialNumber, nwfpEthIPX8023ToFddiTrans=nwfpEthIPX8023ToFddiTrans, nwfpConfiguration=nwfpConfiguration, nwfpFddiIPFrag=nwfpFddiIPFrag, nwfpBOOTPrequestFlag=nwfpBOOTPrequestFlag, nwfpFanEntry=nwfpFanEntry, nwfpFutureSoftwareVersion=nwfpFutureSoftwareVersion, nwfpPowerSupplyTable=nwfpPowerSupplyTable, nwfpPowerSupplyNumber=nwfpPowerSupplyNumber, nwfpEEPROMVersion=nwfpEEPROMVersion, nwfpCurrentBooterSoftwareVersion=nwfpCurrentBooterSoftwareVersion, nwfpSaveConfig=nwfpSaveConfig, nwfpTpFdbMaxSize=nwfpTpFdbMaxSize, nwfpFddiSNAPToEthIPXTrans=nwfpFddiSNAPToEthIPXTrans, nwfpLastFailureReason=nwfpLastFailureReason, nwfpFutureUplinkSoftwareVers=nwfpFutureUplinkSoftwareVers, nwfpPowerSupplyIndex=nwfpPowerSupplyIndex, nwfpTpFdbNbEntriesUsed=nwfpTpFdbNbEntriesUsed, nwfpMonitorSource=nwfpMonitorSource, nwfpFddi8022ToEthIPXTrans=nwfpFddi8022ToEthIPXTrans, nwfpMonitorPort=nwfpMonitorPort, nwfpRAMsize=nwfpRAMsize, nwfpFutureBooterSoftwareVersion=nwfpFutureBooterSoftwareVersion, nwfpUpLinkManufactureDate=nwfpUpLinkManufactureDate, nwfpFanStatus=nwfpFanStatus, nwfpPowerSupplyEntry=nwfpPowerSupplyEntry, nwfpFddiToEthIPTrans=nwfpFddiToEthIPTrans, nwfpMonitorPortStatus=nwfpMonitorPortStatus, nwfpReset=nwfpReset, nwfpUplinkSoftwarePath=nwfpUplinkSoftwarePath, nwfpIfIndex=nwfpIfIndex, nwfpPowerSupplyStatus=nwfpPowerSupplyStatus, nwfpUpLinkEEPROMVersion=nwfpUpLinkEEPROMVersion, nwfpfanUp=nwfpfanUp, nwfpTFTPServerIPAddress=nwfpTFTPServerIPAddress, networthInternetworking=networthInternetworking, nwfpSpanningTreeEnable=nwfpSpanningTreeEnable, nwfpAuthErrIPaddress=nwfpAuthErrIPaddress, nwfpFanIndex=nwfpFanIndex, nwFastPipes=nwFastPipes, nwfpPowerSupplyUp=nwfpPowerSupplyUp, networth=networth)
