#
# PySNMP MIB module EIA-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EIA-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:45:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter64, IpAddress, Bits, enterprises, Counter32, MibIdentifier, Integer32, TimeTicks, Gauge32, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "IpAddress", "Bits", "enterprises", "Counter32", "MibIdentifier", "Integer32", "TimeTicks", "Gauge32", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatOtherStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class DisplayString(OctetString):
    pass

cdx6500StatEIATable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 7), )
if mibBuilder.loadTexts: cdx6500StatEIATable.setStatus('mandatory')
cdx6500StatEIAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 7, 1), ).setIndexNames((0, "EIA-OPT-MIB", "cdx6500StatEIAEntryPortNumber"))
if mibBuilder.loadTexts: cdx6500StatEIAEntry.setStatus('mandatory')
cdx6500StatEIAEntryPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500StatEIAEntryPortNumber.setStatus('mandatory')
cdx6500StatEIAEntryDimType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 50))).clone(namedValues=NamedValues(("dimTypeNone", 0), ("dimTypeNotInstalled", 1), ("dimTypeEia232d", 2), ("dimTypeX21", 3), ("dimTypeV35", 4), ("dimTypeV36", 5), ("dimTypeV11", 6), ("dimTypeEia530", 7), ("dimTypeDsu", 8), ("dimTypeI430", 10), ("newvalDimTypeNone", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500StatEIAEntryDimType.setStatus('mandatory')
cdx6500StatEIAEntryDimCfgn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("dimCfgnDte", 0), ("dimCfgnDce", 1), ("newvalDimCfgnDte", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500StatEIAEntryDimCfgn.setStatus('mandatory')
cdx6500StatEIAEntryEiaState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500StatEIAEntryEiaState.setStatus('mandatory')
cdx6500StatEIAEntryConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500StatEIAEntryConnType.setStatus('mandatory')
cdx6500StatEIAEntrySignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500StatEIAEntrySignalStatus.setStatus('mandatory')
isgVGIsdnEIAStatTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 8), )
if mibBuilder.loadTexts: isgVGIsdnEIAStatTable.setStatus('mandatory')
isgVGIsdnEIAStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 8, 1), ).setIndexNames((0, "EIA-OPT-MIB", "isgVGIsdnEIAStatPortNum"))
if mibBuilder.loadTexts: isgVGIsdnEIAStatEntry.setStatus('mandatory')
isgVGIsdnEIAStatPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnEIAStatPortNum.setStatus('mandatory')
isgVGIsdnEIAStatDimType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9))).clone(namedValues=NamedValues(("dimTypeIsdn", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnEIAStatDimType.setStatus('mandatory')
isgVGIsdnEIAStatDimCfgn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("dimIsdnST", 0), ("dimIsdnU", 1), ("newvalDimIsdnST", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnEIAStatDimCfgn.setStatus('mandatory')
isgVGIsdnEIAStatTEI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnEIAStatTEI.setStatus('mandatory')
isgVGIsdnEIAStatSPBU = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("main", 0), ("backup", 1), ("disabled", 2), ("newvalMain", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnEIAStatSPBU.setStatus('mandatory')
isgVGIsdnEIAStatL1State = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 50))).clone(namedValues=NamedValues(("l1Setup", 0), ("l1Deactive", 1), ("l1Active", 2), ("l1B1Loop", 3), ("l1B2Loop", 4), ("l1B1B2Loop", 5), ("l12BDLoop", 6), ("unknownState", 7), ("newvalL1Setup", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnEIAStatL1State.setStatus('mandatory')
isgVGIsdnEIAStatChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 50))).clone(namedValues=NamedValues(("error", 0), ("isdnD", 1), ("isdnB1", 2), ("isdnB2", 3), ("isdn2B", 4), ("isdnB", 5), ("newvalError", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnEIAStatChanType.setStatus('mandatory')
isgVGIsdnEIAStatAccType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 50))).clone(namedValues=NamedValues(("permanent", 0), ("cktMode", 1), ("pktMode", 2), ("dPckEnabled", 3), ("dPckDisabled", 4), ("notConnected", 5), ("newvalPermanent", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isgVGIsdnEIAStatAccType.setStatus('mandatory')
mibBuilder.exportSymbols("EIA-OPT-MIB", cdx6500Configuration=cdx6500Configuration, isgVGIsdnEIAStatAccType=isgVGIsdnEIAStatAccType, cdx6500StatEIAEntrySignalStatus=cdx6500StatEIAEntrySignalStatus, DisplayString=DisplayString, isgVGIsdnEIAStatL1State=isgVGIsdnEIAStatL1State, cdx6500=cdx6500, isgVGIsdnEIAStatTable=isgVGIsdnEIAStatTable, codex=codex, isgVGIsdnEIAStatSPBU=isgVGIsdnEIAStatSPBU, cdx6500StatEIAEntryConnType=cdx6500StatEIAEntryConnType, cdxProductSpecific=cdxProductSpecific, cdx6500StatEIAEntryDimType=cdx6500StatEIAEntryDimType, cdx6500CfgGeneralGroup=cdx6500CfgGeneralGroup, cdx6500StatEIAEntry=cdx6500StatEIAEntry, isgVGIsdnEIAStatDimCfgn=isgVGIsdnEIAStatDimCfgn, isgVGIsdnEIAStatEntry=isgVGIsdnEIAStatEntry, cdx6500StatEIAEntryDimCfgn=cdx6500StatEIAEntryDimCfgn, isgVGIsdnEIAStatPortNum=isgVGIsdnEIAStatPortNum, isgVGIsdnEIAStatChanType=isgVGIsdnEIAStatChanType, isgVGIsdnEIAStatTEI=isgVGIsdnEIAStatTEI, cdx6500StatOtherStatsGroup=cdx6500StatOtherStatsGroup, cdx6500Statistics=cdx6500Statistics, cdx6500StatEIAEntryEiaState=cdx6500StatEIAEntryEiaState, cdx6500Controls=cdx6500Controls, isgVGIsdnEIAStatDimType=isgVGIsdnEIAStatDimType, cdx6500StatEIAEntryPortNumber=cdx6500StatEIAEntryPortNumber, cdx6500StatEIATable=cdx6500StatEIATable)
