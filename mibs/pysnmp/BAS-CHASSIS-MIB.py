#
# PySNMP MIB module BAS-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
BasLogicalPortId, BasCardClass, basChassisInfo, BasSlotId, BasChassisId, BasInterfaceId = mibBuilder.importSymbols("BAS-MIB", "BasLogicalPortId", "BasCardClass", "basChassisInfo", "BasSlotId", "BasChassisId", "BasInterfaceId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Counter32, Gauge32, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, MibIdentifier, NotificationType, Bits, Counter64, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "Gauge32", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "MibIdentifier", "NotificationType", "Bits", "Counter64", "TimeTicks", "Integer32")
TextualConvention, DateAndTime, RowStatus, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "RowStatus", "TruthValue", "DisplayString")
basChassisInfoMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1))
if mibBuilder.loadTexts: basChassisInfoMib.setLastUpdated('9901180900Z')
if mibBuilder.loadTexts: basChassisInfoMib.setOrganization('Broadband Access Systems')
basChassisObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1))
basChassisDhcpRelayObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 2))
basChassisInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 1), )
if mibBuilder.loadTexts: basChassisInfoTable.setStatus('current')
basChassisInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 1, 1), ).setIndexNames((0, "BAS-CHASSIS-MIB", "basChassisInfoChassis"), (0, "BAS-CHASSIS-MIB", "basChassisInfoSlot"), (0, "BAS-CHASSIS-MIB", "basChassisInfoIf"), (0, "BAS-CHASSIS-MIB", "basChassisInfoLPort"))
if mibBuilder.loadTexts: basChassisInfoEntry.setStatus('current')
basChassisInfoChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 1, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basChassisInfoChassis.setStatus('current')
basChassisInfoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 1, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basChassisInfoSlot.setStatus('current')
basChassisInfoIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 1, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basChassisInfoIf.setStatus('current')
basChassisInfoLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 1, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basChassisInfoLPort.setStatus('current')
basChassisInfoChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 1, 1, 5), BasChassisId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basChassisInfoChassisId.setStatus('current')
basChassisInfoClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basChassisInfoClusterId.setStatus('current')
basChassisInfoLdapServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basChassisInfoLdapServerIpAddr.setStatus('current')
basChassisInfoLdapServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basChassisInfoLdapServerPort.setStatus('current')
basChassisInfoLdapServerUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basChassisInfoLdapServerUserName.setStatus('current')
basChassisInfoLdapServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basChassisInfoLdapServerPassword.setStatus('current')
basChassisInfoLdapServerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basChassisInfoLdapServerEnable.setStatus('current')
basChassisIsProvisioningServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basChassisIsProvisioningServer.setStatus('current')
basChassisIsProvServerOnThisChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basChassisIsProvServerOnThisChassis.setStatus('current')
basChassisManagerTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 2), )
if mibBuilder.loadTexts: basChassisManagerTable.setStatus('current')
basChassisManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 2, 1), ).setIndexNames((0, "BAS-CHASSIS-MIB", "basChassisManagerChassis"), (0, "BAS-CHASSIS-MIB", "basChassisManagerSlot"), (0, "BAS-CHASSIS-MIB", "basChassisManagerIf"), (0, "BAS-CHASSIS-MIB", "basChassisManagerLPort"))
if mibBuilder.loadTexts: basChassisManagerEntry.setStatus('current')
basChassisManagerChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 2, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basChassisManagerChassis.setStatus('current')
basChassisManagerSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 2, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basChassisManagerSlot.setStatus('current')
basChassisManagerIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 2, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basChassisManagerIf.setStatus('current')
basChassisManagerLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 2, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basChassisManagerLPort.setStatus('current')
basChassisManagerAgentTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basChassisManagerAgentTcpPort.setStatus('current')
basChassisManagerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basChassisManagerPriority.setStatus('current')
basChassisManagerScope = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bca", 1), ("ca", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basChassisManagerScope.setStatus('current')
basChassisManagerDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 1, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basChassisManagerDateAndTime.setStatus('current')
basChassisDhcpRelayServerTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 2, 1), )
if mibBuilder.loadTexts: basChassisDhcpRelayServerTable.setStatus('current')
basChassisDhcpRelayServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 2, 1, 1), ).setIndexNames((0, "BAS-CHASSIS-MIB", "basChassisDhcpRelayServerChassis"), (0, "BAS-CHASSIS-MIB", "basChassisDhcpRelayServerSlot"), (0, "BAS-CHASSIS-MIB", "basChassisDhcpRelayServerIf"), (0, "BAS-CHASSIS-MIB", "basChassisDhcpRelayServerLPort"), (0, "BAS-CHASSIS-MIB", "basChassisDhcpRelayServerAddress"), (0, "BAS-CHASSIS-MIB", "basChassisDhcpRelayServerType"))
if mibBuilder.loadTexts: basChassisDhcpRelayServerEntry.setStatus('current')
basChassisDhcpRelayServerChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 2, 1, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basChassisDhcpRelayServerChassis.setStatus('current')
basChassisDhcpRelayServerSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 2, 1, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basChassisDhcpRelayServerSlot.setStatus('current')
basChassisDhcpRelayServerIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 2, 1, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basChassisDhcpRelayServerIf.setStatus('current')
basChassisDhcpRelayServerLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 2, 1, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basChassisDhcpRelayServerLPort.setStatus('current')
basChassisDhcpRelayServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 2, 1, 1, 5), IpAddress().clone(2))
if mibBuilder.loadTexts: basChassisDhcpRelayServerAddress.setStatus('current')
basChassisDhcpRelayServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unauthorized", 1), ("authorized", 2), ("cablemodem", 3))).clone(1))
if mibBuilder.loadTexts: basChassisDhcpRelayServerType.setStatus('current')
basChassisDhcpRelayServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 1, 3, 1, 2, 1, 1, 7), RowStatus().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basChassisDhcpRelayServerStatus.setStatus('current')
mibBuilder.exportSymbols("BAS-CHASSIS-MIB", basChassisManagerChassis=basChassisManagerChassis, basChassisDhcpRelayServerIf=basChassisDhcpRelayServerIf, basChassisInfoIf=basChassisInfoIf, basChassisManagerIf=basChassisManagerIf, basChassisInfoLdapServerPort=basChassisInfoLdapServerPort, basChassisManagerDateAndTime=basChassisManagerDateAndTime, basChassisDhcpRelayServerAddress=basChassisDhcpRelayServerAddress, PYSNMP_MODULE_ID=basChassisInfoMib, basChassisInfoLdapServerEnable=basChassisInfoLdapServerEnable, basChassisInfoLPort=basChassisInfoLPort, basChassisInfoTable=basChassisInfoTable, basChassisInfoClusterId=basChassisInfoClusterId, basChassisManagerPriority=basChassisManagerPriority, basChassisDhcpRelayServerType=basChassisDhcpRelayServerType, basChassisDhcpRelayServerStatus=basChassisDhcpRelayServerStatus, basChassisInfoEntry=basChassisInfoEntry, basChassisInfoLdapServerPassword=basChassisInfoLdapServerPassword, basChassisDhcpRelayObjects=basChassisDhcpRelayObjects, basChassisInfoChassisId=basChassisInfoChassisId, basChassisInfoLdapServerUserName=basChassisInfoLdapServerUserName, basChassisInfoSlot=basChassisInfoSlot, basChassisDhcpRelayServerSlot=basChassisDhcpRelayServerSlot, basChassisManagerLPort=basChassisManagerLPort, basChassisManagerAgentTcpPort=basChassisManagerAgentTcpPort, basChassisInfoLdapServerIpAddr=basChassisInfoLdapServerIpAddr, basChassisDhcpRelayServerLPort=basChassisDhcpRelayServerLPort, basChassisManagerScope=basChassisManagerScope, basChassisDhcpRelayServerEntry=basChassisDhcpRelayServerEntry, basChassisIsProvServerOnThisChassis=basChassisIsProvServerOnThisChassis, basChassisInfoMib=basChassisInfoMib, basChassisManagerTable=basChassisManagerTable, basChassisDhcpRelayServerChassis=basChassisDhcpRelayServerChassis, basChassisManagerSlot=basChassisManagerSlot, basChassisObjects=basChassisObjects, basChassisInfoChassis=basChassisInfoChassis, basChassisDhcpRelayServerTable=basChassisDhcpRelayServerTable, basChassisIsProvisioningServer=basChassisIsProvisioningServer, basChassisManagerEntry=basChassisManagerEntry)
