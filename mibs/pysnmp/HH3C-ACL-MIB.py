#
# PySNMP MIB module HH3C-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-ACL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:12:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
InetAddress, InetAddressType, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetAddressPrefixLength")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
iso, ObjectIdentity, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, IpAddress, ModuleIdentity, TimeTicks, Counter64, Bits, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "IpAddress", "ModuleIdentity", "TimeTicks", "Counter64", "Bits", "Unsigned32", "NotificationType")
MacAddress, TextualConvention, RowStatus, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "RowStatus", "TruthValue", "DisplayString")
hh3cAcl = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 8))
if mibBuilder.loadTexts: hh3cAcl.setLastUpdated('200409211936Z')
if mibBuilder.loadTexts: hh3cAcl.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
class RuleAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("invalid", 1), ("permit", 2), ("deny", 3))

class CounterClear(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("cleared", 1), ("nouse", 2))

class PortOp(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid", 0), ("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("range", 5))

class DSCPValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), )
class TCPFlag(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("invalid", 0), ("tcpack", 1), ("tcpfin", 2), ("tcppsh", 3), ("tcprst", 4), ("tcpsyn", 5), ("tcpurg", 6))

class FragmentFlag(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("invalid", 0), ("fragment", 1), ("fragmentSubseq", 2), ("nonFragment", 3), ("nonSubseq", 4))

class AddressFlag(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("invalid", 0), ("t64SrcAddrPre64DestAddrPre", 1), ("t64SrcAddrPre64DestAddrSuf", 2), ("t64SrcAddrSuf64DestAddrPre", 3), ("t64SrcAddrSuf64DestAddrSuf", 4), ("t128SourceAddress", 5), ("t128DestinationAddress", 6))

hh3cAclMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1))
hh3cAclMode = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkBased", 1), ("ipBased", 2))).clone('ipBased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cAclMode.setStatus('current')
hh3cAclNumGroupTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 2), )
if mibBuilder.loadTexts: hh3cAclNumGroupTable.setStatus('current')
hh3cAclNumGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 2, 1), ).setIndexNames((0, "HH3C-ACL-MIB", "hh3cAclNumGroupAclNum"))
if mibBuilder.loadTexts: hh3cAclNumGroupEntry.setStatus('current')
hh3cAclNumGroupAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 5999)))
if mibBuilder.loadTexts: hh3cAclNumGroupAclNum.setStatus('current')
hh3cAclNumGroupMatchOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("config", 1), ("auto", 2))).clone('config')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclNumGroupMatchOrder.setStatus('current')
hh3cAclNumGroupSubitemNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclNumGroupSubitemNum.setStatus('current')
hh3cAclNumGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cAclNumGroupDescription.setStatus('current')
hh3cAclNumGroupCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("nouse", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclNumGroupCountClear.setStatus('current')
hh3cAclNumGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclNumGroupRowStatus.setStatus('current')
hh3cAclNameGroupTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 3), )
if mibBuilder.loadTexts: hh3cAclNameGroupTable.setStatus('current')
hh3cAclNameGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 3, 1), ).setIndexNames((0, "HH3C-ACL-MIB", "hh3cAclNameGroupIndex"))
if mibBuilder.loadTexts: hh3cAclNameGroupEntry.setStatus('current')
hh3cAclNameGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 12999)))
if mibBuilder.loadTexts: hh3cAclNameGroupIndex.setStatus('current')
hh3cAclNameGroupCreateName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclNameGroupCreateName.setStatus('current')
hh3cAclNameGroupTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("basic", 1), ("advanced", 2), ("ifBased", 3), ("link", 4), ("user", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclNameGroupTypes.setStatus('current')
hh3cAclNameGroupMatchOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("config", 1), ("auto", 2))).clone('config')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclNameGroupMatchOrder.setStatus('current')
hh3cAclNameGroupSubitemNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclNameGroupSubitemNum.setStatus('current')
hh3cAclNameGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclNameGroupRowStatus.setStatus('current')
hh3cAclBasicRuleTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 4), )
if mibBuilder.loadTexts: hh3cAclBasicRuleTable.setStatus('current')
hh3cAclBasicRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 4, 1), ).setIndexNames((0, "HH3C-ACL-MIB", "hh3cAclBasicAclNum"), (0, "HH3C-ACL-MIB", "hh3cAclBasicSubitem"))
if mibBuilder.loadTexts: hh3cAclBasicRuleEntry.setStatus('current')
hh3cAclBasicAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 2999), ValueRangeConstraint(10000, 12999), )))
if mibBuilder.loadTexts: hh3cAclBasicAclNum.setStatus('current')
hh3cAclBasicSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hh3cAclBasicSubitem.setStatus('current')
hh3cAclBasicAct = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclBasicAct.setStatus('current')
hh3cAclBasicSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 4, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclBasicSrcIp.setStatus('current')
hh3cAclBasicSrcWild = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 4, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclBasicSrcWild.setStatus('current')
hh3cAclBasicTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclBasicTimeRangeName.setStatus('current')
hh3cAclBasicFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 4, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclBasicFragments.setStatus('current')
hh3cAclBasicLog = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 4, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclBasicLog.setStatus('current')
hh3cAclBasicEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclBasicEnable.setStatus('current')
hh3cAclBasicCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclBasicCount.setStatus('current')
hh3cAclBasicCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("nouse", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclBasicCountClear.setStatus('current')
hh3cAclBasicRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 4, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclBasicRowStatus.setStatus('current')
hh3cAclAdvancedRuleTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5), )
if mibBuilder.loadTexts: hh3cAclAdvancedRuleTable.setStatus('current')
hh3cAclAdvancedRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1), ).setIndexNames((0, "HH3C-ACL-MIB", "hh3cAclAdvancedAclNum"), (0, "HH3C-ACL-MIB", "hh3cAclAdvancedSubitem"))
if mibBuilder.loadTexts: hh3cAclAdvancedRuleEntry.setStatus('current')
hh3cAclAdvancedAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3000, 3999), ValueRangeConstraint(10000, 12999), )))
if mibBuilder.loadTexts: hh3cAclAdvancedAclNum.setStatus('current')
hh3cAclAdvancedSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hh3cAclAdvancedSubitem.setStatus('current')
hh3cAclAdvancedAct = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedAct.setStatus('current')
hh3cAclAdvancedProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedProtocol.setStatus('current')
hh3cAclAdvancedSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedSrcIp.setStatus('current')
hh3cAclAdvancedSrcWild = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedSrcWild.setStatus('current')
hh3cAclAdvancedSrcOp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 0), ("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("range", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedSrcOp.setStatus('current')
hh3cAclAdvancedSrcPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedSrcPort1.setStatus('current')
hh3cAclAdvancedSrcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedSrcPort2.setStatus('current')
hh3cAclAdvancedDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedDestIp.setStatus('current')
hh3cAclAdvancedDestWild = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedDestWild.setStatus('current')
hh3cAclAdvancedDestOp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 0), ("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("range", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedDestOp.setStatus('current')
hh3cAclAdvancedDestPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedDestPort1.setStatus('current')
hh3cAclAdvancedDestPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedDestPort2.setStatus('current')
hh3cAclAdvancedPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedPrecedence.setStatus('current')
hh3cAclAdvancedTos = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedTos.setStatus('current')
hh3cAclAdvancedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedDscp.setStatus('current')
hh3cAclAdvancedEstablish = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedEstablish.setStatus('current')
hh3cAclAdvancedTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedTimeRangeName.setStatus('current')
hh3cAclAdvancedIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedIcmpType.setStatus('current')
hh3cAclAdvancedIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedIcmpCode.setStatus('current')
hh3cAclAdvancedFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 22), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedFragments.setStatus('current')
hh3cAclAdvancedLog = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedLog.setStatus('current')
hh3cAclAdvancedEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclAdvancedEnable.setStatus('current')
hh3cAclAdvancedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclAdvancedCount.setStatus('current')
hh3cAclAdvancedCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("nouse", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedCountClear.setStatus('current')
hh3cAclAdvancedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 5, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclAdvancedRowStatus.setStatus('current')
hh3cAclIfRuleTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 6), )
if mibBuilder.loadTexts: hh3cAclIfRuleTable.setStatus('current')
hh3cAclIfRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 6, 1), ).setIndexNames((0, "HH3C-ACL-MIB", "hh3cAclIfAclNum"), (0, "HH3C-ACL-MIB", "hh3cAclIfSubitem"))
if mibBuilder.loadTexts: hh3cAclIfRuleEntry.setStatus('current')
hh3cAclIfAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1000, 1999), ValueRangeConstraint(10000, 12999), )))
if mibBuilder.loadTexts: hh3cAclIfAclNum.setStatus('current')
hh3cAclIfSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hh3cAclIfSubitem.setStatus('current')
hh3cAclIfAct = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIfAct.setStatus('current')
hh3cAclIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIfIndex.setStatus('current')
hh3cAclIfAny = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 6, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIfAny.setStatus('current')
hh3cAclIfTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIfTimeRangeName.setStatus('current')
hh3cAclIfLog = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 6, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIfLog.setStatus('current')
hh3cAclIfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 6, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclIfEnable.setStatus('current')
hh3cAclIfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclIfCount.setStatus('current')
hh3cAclIfCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("nouse", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIfCountClear.setStatus('current')
hh3cAclIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 6, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIfRowStatus.setStatus('current')
hh3cAclLinkTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7), )
if mibBuilder.loadTexts: hh3cAclLinkTable.setStatus('current')
hh3cAclLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1), ).setIndexNames((0, "HH3C-ACL-MIB", "hh3cAclLinkAclNum"), (0, "HH3C-ACL-MIB", "hh3cAclLinkSubitem"))
if mibBuilder.loadTexts: hh3cAclLinkEntry.setStatus('current')
hh3cAclLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), )))
if mibBuilder.loadTexts: hh3cAclLinkAclNum.setStatus('current')
hh3cAclLinkSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hh3cAclLinkSubitem.setStatus('current')
hh3cAclLinkAct = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkAct.setStatus('current')
hh3cAclLinkProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2048, 2054, 32821, 34915, 34916, 34887))).clone(namedValues=NamedValues(("invalid", 0), ("ip", 2048), ("arp", 2054), ("rarp", 32821), ("pppoeControl", 34915), ("pppoeData", 34916), ("mpls", 34887))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkProtocol.setStatus('current')
hh3cAclLinkFormatType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("ethernetII", 1), ("snap", 2), ("ieee802Dot3And2", 3), ("ieee802Dot3", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkFormatType.setStatus('current')
hh3cAclLinkVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("tagged", 1), ("untagged", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkVlanTag.setStatus('current')
hh3cAclLinkVlanPri = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkVlanPri.setStatus('current')
hh3cAclLinkSrcVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkSrcVlanId.setStatus('current')
hh3cAclLinkSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 9), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkSrcMac.setStatus('current')
hh3cAclLinkSrcMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 10), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkSrcMacWild.setStatus('current')
hh3cAclLinkSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkSrcIfIndex.setStatus('current')
hh3cAclLinkSrcAny = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkSrcAny.setStatus('current')
hh3cAclLinkDestVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkDestVlanId.setStatus('current')
hh3cAclLinkDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 14), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkDestMac.setStatus('current')
hh3cAclLinkDestMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 15), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkDestMacWild.setStatus('current')
hh3cAclLinkDestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkDestIfIndex.setStatus('current')
hh3cAclLinkDestAny = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkDestAny.setStatus('current')
hh3cAclLinkTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkTimeRangeName.setStatus('current')
hh3cAclLinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclLinkEnable.setStatus('current')
hh3cAclLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkRowStatus.setStatus('current')
hh3cAclLinkTypeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkTypeCode.setStatus('current')
hh3cAclLinkTypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkTypeMask.setStatus('current')
hh3cAclLinkLsapCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkLsapCode.setStatus('current')
hh3cAclLinkLsapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkLsapMask.setStatus('current')
hh3cAclLinkL2LabelRangeOp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 0), ("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("range", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkL2LabelRangeOp.setStatus('current')
hh3cAclLinkL2LabelRangeBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 26), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkL2LabelRangeBegin.setStatus('current')
hh3cAclLinkL2LabelRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 27), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkL2LabelRangeEnd.setStatus('current')
hh3cAclLinkMplsExp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 7, 1, 28), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclLinkMplsExp.setStatus('current')
hh3cAclUserTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 8), )
if mibBuilder.loadTexts: hh3cAclUserTable.setStatus('current')
hh3cAclUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 8, 1), ).setIndexNames((0, "HH3C-ACL-MIB", "hh3cAclUserAclNum"), (0, "HH3C-ACL-MIB", "hh3cAclUserSubitem"))
if mibBuilder.loadTexts: hh3cAclUserEntry.setStatus('current')
hh3cAclUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), )))
if mibBuilder.loadTexts: hh3cAclUserAclNum.setStatus('current')
hh3cAclUserSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hh3cAclUserSubitem.setStatus('current')
hh3cAclUserAct = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclUserAct.setStatus('current')
hh3cAclUserFormatType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("ethernetII", 1), ("snap", 2), ("ieee802Dot2And3", 3), ("ieee802Dot4", 4))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclUserFormatType.setStatus('current')
hh3cAclUserVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 0))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2), ("invalid", 0))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclUserVlanTag.setStatus('current')
hh3cAclUserRuleStr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 8, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclUserRuleStr.setStatus('current')
hh3cAclUserRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclUserRuleMask.setStatus('current')
hh3cAclUserTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 8, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclUserTimeRangeName.setStatus('current')
hh3cAclUserEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 8, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclUserEnable.setStatus('current')
hh3cAclUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 8, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclUserRowStatus.setStatus('current')
hh3cAclActiveTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 9), )
if mibBuilder.loadTexts: hh3cAclActiveTable.setStatus('current')
hh3cAclActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 9, 1), ).setIndexNames((0, "HH3C-ACL-MIB", "hh3cAclActiveAclIndex"), (0, "HH3C-ACL-MIB", "hh3cAclActiveIfIndex"), (0, "HH3C-ACL-MIB", "hh3cAclActiveVlanID"), (0, "HH3C-ACL-MIB", "hh3cAclActiveDirection"))
if mibBuilder.loadTexts: hh3cAclActiveEntry.setStatus('current')
hh3cAclActiveAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 5999), ValueRangeConstraint(10000, 12999), )))
if mibBuilder.loadTexts: hh3cAclActiveAclIndex.setStatus('current')
hh3cAclActiveIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hh3cAclActiveIfIndex.setStatus('current')
hh3cAclActiveVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 9, 1, 3), Integer32())
if mibBuilder.loadTexts: hh3cAclActiveVlanID.setStatus('current')
hh3cAclActiveDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 0))).clone(namedValues=NamedValues(("input", 1), ("output", 2), ("both", 3), ("invalid", 0))))
if mibBuilder.loadTexts: hh3cAclActiveDirection.setStatus('current')
hh3cAclActiveUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5000, 5999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclActiveUserAclNum.setStatus('current')
hh3cAclActiveUserAclSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclActiveUserAclSubitem.setStatus('current')
hh3cAclActiveIpAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclActiveIpAclNum.setStatus('current')
hh3cAclActiveIpAclSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclActiveIpAclSubitem.setStatus('current')
hh3cAclActiveLinkAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4000, 4999), ValueRangeConstraint(10000, 12999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclActiveLinkAclNum.setStatus('current')
hh3cAclActiveLinkAclSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclActiveLinkAclSubitem.setStatus('current')
hh3cAclActiveRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 9, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclActiveRuntime.setStatus('current')
hh3cAclActiveRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 9, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclActiveRowStatus.setStatus('current')
hh3cAclIDSTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 10), )
if mibBuilder.loadTexts: hh3cAclIDSTable.setStatus('current')
hh3cAclIDSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 10, 1), ).setIndexNames((1, "HH3C-ACL-MIB", "hh3cAclIDSName"))
if mibBuilder.loadTexts: hh3cAclIDSEntry.setStatus('current')
hh3cAclIDSName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: hh3cAclIDSName.setStatus('current')
hh3cAclIDSSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 10, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIDSSrcMac.setStatus('current')
hh3cAclIDSDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 10, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIDSDestMac.setStatus('current')
hh3cAclIDSSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 10, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIDSSrcIp.setStatus('current')
hh3cAclIDSSrcWild = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 10, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIDSSrcWild.setStatus('current')
hh3cAclIDSDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 10, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIDSDestIp.setStatus('current')
hh3cAclIDSDestWild = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 10, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIDSDestWild.setStatus('current')
hh3cAclIDSSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIDSSrcPort.setStatus('current')
hh3cAclIDSDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIDSDestPort.setStatus('current')
hh3cAclIDSProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIDSProtocol.setStatus('current')
hh3cAclIDSDenyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 10, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIDSDenyTime.setStatus('current')
hh3cAclIDSAct = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIDSAct.setStatus('current')
hh3cAclIDSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 1, 10, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIDSRowStatus.setStatus('current')
hh3cAclMib2Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2))
hh3cAclMib2GlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1))
hh3cAclMib2NodesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 1))
hh3cAclMib2Mode = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkBased", 1), ("ipBased", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cAclMib2Mode.setStatus('current')
hh3cAclMib2Version = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclMib2Version.setStatus('current')
hh3cAclMib2ObjectsCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 1, 3), Bits().clone(namedValues=NamedValues(("hh3cAclMib2Mode", 0), ("hh3cAclVersion", 1), ("hh3cAclMib2ObjectsCapabilities", 2), ("hh3cAclMib2CapabilityTable", 3), ("hh3cAclNumberGroupTable", 4), ("hh3cAclIPAclBasicTable", 5), ("hh3cAclIPAclAdvancedTable", 6), ("hh3cAclMACTable", 7), ("hh3cAclEnUserTable", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclMib2ObjectsCapabilities.setStatus('current')
hh3cAclMib2CapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 2), )
if mibBuilder.loadTexts: hh3cAclMib2CapabilityTable.setStatus('current')
hh3cAclMib2CapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 2, 1), ).setIndexNames((0, "HH3C-ACL-MIB", "hh3cAclMib2EntityType"), (0, "HH3C-ACL-MIB", "hh3cAclMib2EntityIndex"), (0, "HH3C-ACL-MIB", "hh3cAclMib2ModuleIndex"), (0, "HH3C-ACL-MIB", "hh3cAclMib2CharacteristicsIndex"))
if mibBuilder.loadTexts: hh3cAclMib2CapabilityEntry.setStatus('current')
hh3cAclMib2EntityType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("system", 1), ("interface", 2))))
if mibBuilder.loadTexts: hh3cAclMib2EntityType.setStatus('current')
hh3cAclMib2EntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: hh3cAclMib2EntityIndex.setStatus('current')
hh3cAclMib2ModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("layer3", 1), ("layer2", 2), ("userDefined", 3))))
if mibBuilder.loadTexts: hh3cAclMib2ModuleIndex.setStatus('current')
hh3cAclMib2CharacteristicsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 2, 1, 4), Integer32())
if mibBuilder.loadTexts: hh3cAclMib2CharacteristicsIndex.setStatus('current')
hh3cAclMib2CharacteristicsDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclMib2CharacteristicsDesc.setStatus('current')
hh3cAclMib2CharacteristicsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclMib2CharacteristicsValue.setStatus('current')
hh3cAclNumberGroupTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 3), )
if mibBuilder.loadTexts: hh3cAclNumberGroupTable.setStatus('current')
hh3cAclNumberGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 3, 1), ).setIndexNames((0, "HH3C-ACL-MIB", "hh3cAclNumberGroupType"), (0, "HH3C-ACL-MIB", "hh3cAclNumberGroupIndex"))
if mibBuilder.loadTexts: hh3cAclNumberGroupEntry.setStatus('current')
hh3cAclNumberGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))).clone('ipv4'))
if mibBuilder.loadTexts: hh3cAclNumberGroupType.setStatus('current')
hh3cAclNumberGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2000, 5999), ValueRangeConstraint(10000, 42767), )))
if mibBuilder.loadTexts: hh3cAclNumberGroupIndex.setStatus('current')
hh3cAclNumberGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclNumberGroupRowStatus.setStatus('current')
hh3cAclNumberGroupMatchOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("config", 1), ("auto", 2))).clone('config')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclNumberGroupMatchOrder.setStatus('current')
hh3cAclNumberGroupStep = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclNumberGroupStep.setStatus('current')
hh3cAclNumberGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclNumberGroupDescription.setStatus('current')
hh3cAclNumberGroupCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 3, 1, 7), CounterClear().clone('nouse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cAclNumberGroupCountClear.setStatus('current')
hh3cAclNumberGroupRuleCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclNumberGroupRuleCounter.setStatus('current')
hh3cAclIPAclGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2))
hh3cAclIPAclBasicTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 2), )
if mibBuilder.loadTexts: hh3cAclIPAclBasicTable.setStatus('current')
hh3cAclIPAclBasicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 2, 1), ).setIndexNames((0, "HH3C-ACL-MIB", "hh3cAclNumberGroupType"), (0, "HH3C-ACL-MIB", "hh3cAclNumberGroupIndex"), (0, "HH3C-ACL-MIB", "hh3cAclIPAclBasicRuleIndex"))
if mibBuilder.loadTexts: hh3cAclIPAclBasicEntry.setStatus('current')
hh3cAclIPAclBasicRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: hh3cAclIPAclBasicRuleIndex.setStatus('current')
hh3cAclIPAclBasicRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclBasicRowStatus.setStatus('current')
hh3cAclIPAclBasicAct = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 2, 1, 3), RuleAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclBasicAct.setStatus('current')
hh3cAclIPAclBasicSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 2, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclBasicSrcAddrType.setStatus('current')
hh3cAclIPAclBasicSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 2, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclBasicSrcAddr.setStatus('current')
hh3cAclIPAclBasicSrcPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 2, 1, 6), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclBasicSrcPrefix.setStatus('current')
hh3cAclIPAclBasicSrcAny = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 2, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclBasicSrcAny.setStatus('current')
hh3cAclIPAclBasicSrcWild = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 2, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclBasicSrcWild.setStatus('current')
hh3cAclIPAclBasicTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclBasicTimeRangeName.setStatus('current')
hh3cAclIPAclBasicFragmentFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 2, 1, 10), FragmentFlag()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclBasicFragmentFlag.setStatus('current')
hh3cAclIPAclBasicLog = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 2, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclBasicLog.setStatus('current')
hh3cAclIPAclBasicCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclIPAclBasicCount.setStatus('current')
hh3cAclIPAclBasicCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 2, 1, 13), CounterClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cAclIPAclBasicCountClear.setStatus('current')
hh3cAclIPAclBasicEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclIPAclBasicEnable.setStatus('current')
hh3cAclIPAclBasicVpnInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclBasicVpnInstanceName.setStatus('current')
hh3cAclIPAclBasicComment = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclBasicComment.setStatus('current')
hh3cAclIPAclAdvancedTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3), )
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedTable.setStatus('current')
hh3cAclIPAclAdvancedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1), ).setIndexNames((0, "HH3C-ACL-MIB", "hh3cAclNumberGroupType"), (0, "HH3C-ACL-MIB", "hh3cAclNumberGroupIndex"), (0, "HH3C-ACL-MIB", "hh3cAclIPAclAdvancedRuleIndex"))
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedEntry.setStatus('current')
hh3cAclIPAclAdvancedRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedRuleIndex.setStatus('current')
hh3cAclIPAclAdvancedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedRowStatus.setStatus('current')
hh3cAclIPAclAdvancedAct = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 3), RuleAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedAct.setStatus('current')
hh3cAclIPAclAdvancedProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedProtocol.setStatus('current')
hh3cAclIPAclAdvancedAddrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 5), AddressFlag().clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedAddrFlag.setStatus('current')
hh3cAclIPAclAdvancedSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedSrcAddrType.setStatus('current')
hh3cAclIPAclAdvancedSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedSrcAddr.setStatus('current')
hh3cAclIPAclAdvancedSrcPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 8), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedSrcPrefix.setStatus('current')
hh3cAclIPAclAdvancedSrcAny = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedSrcAny.setStatus('current')
hh3cAclIPAclAdvancedSrcWild = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedSrcWild.setStatus('current')
hh3cAclIPAclAdvancedSrcOp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 11), PortOp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedSrcOp.setStatus('current')
hh3cAclIPAclAdvancedSrcPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedSrcPort1.setStatus('current')
hh3cAclIPAclAdvancedSrcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedSrcPort2.setStatus('current')
hh3cAclIPAclAdvancedDestAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 14), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedDestAddrType.setStatus('current')
hh3cAclIPAclAdvancedDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 15), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedDestAddr.setStatus('current')
hh3cAclIPAclAdvancedDestPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 16), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedDestPrefix.setStatus('current')
hh3cAclIPAclAdvancedDestAny = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedDestAny.setStatus('current')
hh3cAclIPAclAdvancedDestWild = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 18), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedDestWild.setStatus('current')
hh3cAclIPAclAdvancedDestOp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 19), PortOp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedDestOp.setStatus('current')
hh3cAclIPAclAdvancedDestPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedDestPort1.setStatus('current')
hh3cAclIPAclAdvancedDestPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedDestPort2.setStatus('current')
hh3cAclIPAclAdvancedIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedIcmpType.setStatus('current')
hh3cAclIPAclAdvancedIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedIcmpCode.setStatus('current')
hh3cAclIPAclAdvancedPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedPrecedence.setStatus('current')
hh3cAclIPAclAdvancedTos = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedTos.setStatus('current')
hh3cAclIPAclAdvancedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 26), DSCPValue().clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedDscp.setStatus('current')
hh3cAclIPAclAdvancedTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedTimeRangeName.setStatus('current')
hh3cAclIPAclAdvancedTCPFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 28), TCPFlag().clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedTCPFlag.setStatus('current')
hh3cAclIPAclAdvancedFragmentFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 29), FragmentFlag().clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedFragmentFlag.setStatus('current')
hh3cAclIPAclAdvancedLog = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 30), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedLog.setStatus('current')
hh3cAclIPAclAdvancedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedCount.setStatus('current')
hh3cAclIPAclAdvancedCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 32), CounterClear().clone('nouse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedCountClear.setStatus('current')
hh3cAclIPAclAdvancedEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 33), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedEnable.setStatus('current')
hh3cAclIPAclAdvancedVpnInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedVpnInstanceName.setStatus('current')
hh3cAclIPAclAdvancedComment = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedComment.setStatus('current')
hh3cAclIPAclAdvancedReflective = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 2, 3, 1, 36), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclIPAclAdvancedReflective.setStatus('current')
hh3cAclMACAclGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3))
hh3cAclMACTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3, 1), )
if mibBuilder.loadTexts: hh3cAclMACTable.setStatus('current')
hh3cAclMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3, 1, 1), ).setIndexNames((0, "HH3C-ACL-MIB", "hh3cAclNumberGroupType"), (0, "HH3C-ACL-MIB", "hh3cAclNumberGroupIndex"), (0, "HH3C-ACL-MIB", "hh3cAclMACRuleIndex"))
if mibBuilder.loadTexts: hh3cAclMACEntry.setStatus('current')
hh3cAclMACRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: hh3cAclMACRuleIndex.setStatus('current')
hh3cAclMACRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclMACRowStatus.setStatus('current')
hh3cAclMACAct = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3, 1, 1, 3), RuleAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclMACAct.setStatus('current')
hh3cAclMACTypeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclMACTypeCode.setStatus('current')
hh3cAclMACTypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclMACTypeMask.setStatus('current')
hh3cAclMACSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3, 1, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclMACSrcMac.setStatus('current')
hh3cAclMACSrcMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3, 1, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclMACSrcMacWild.setStatus('current')
hh3cAclMACDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3, 1, 1, 8), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclMACDestMac.setStatus('current')
hh3cAclMACDestMacWild = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3, 1, 1, 9), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclMACDestMacWild.setStatus('current')
hh3cAclMACLsapCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclMACLsapCode.setStatus('current')
hh3cAclMACLsapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclMACLsapMask.setStatus('current')
hh3cAclMACCos = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3, 1, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclMACCos.setStatus('current')
hh3cAclMACTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclMACTimeRangeName.setStatus('current')
hh3cAclMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclMACCount.setStatus('current')
hh3cAclMACCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3, 1, 1, 15), CounterClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cAclMACCountClear.setStatus('current')
hh3cAclMACEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclMACEnable.setStatus('current')
hh3cAclMACComment = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 3, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclMACComment.setStatus('current')
hh3cAclEnUserAclGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 4))
hh3cAclEnUserTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 4, 3), )
if mibBuilder.loadTexts: hh3cAclEnUserTable.setStatus('current')
hh3cAclEnUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 4, 3, 1), ).setIndexNames((0, "HH3C-ACL-MIB", "hh3cAclNumberGroupType"), (0, "HH3C-ACL-MIB", "hh3cAclNumberGroupIndex"), (0, "HH3C-ACL-MIB", "hh3cAclEnUserRuleIndex"))
if mibBuilder.loadTexts: hh3cAclEnUserEntry.setStatus('current')
hh3cAclEnUserRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)))
if mibBuilder.loadTexts: hh3cAclEnUserRuleIndex.setStatus('current')
hh3cAclEnUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclEnUserRowStatus.setStatus('current')
hh3cAclEnUserAct = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 4, 3, 1, 3), RuleAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclEnUserAct.setStatus('current')
hh3cAclEnUserStartString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 4, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclEnUserStartString.setStatus('current')
hh3cAclEnUserL2String = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 4, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclEnUserL2String.setStatus('current')
hh3cAclEnUserMplsString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 4, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclEnUserMplsString.setStatus('current')
hh3cAclEnUserIPv4String = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 4, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclEnUserIPv4String.setStatus('current')
hh3cAclEnUserIPv6String = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 4, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclEnUserIPv6String.setStatus('current')
hh3cAclEnUserL4String = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 4, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclEnUserL4String.setStatus('current')
hh3cAclEnUserL5String = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 4, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclEnUserL5String.setStatus('current')
hh3cAclEnUserTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 4, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclEnUserTimeRangeName.setStatus('current')
hh3cAclEnUserCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 4, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclEnUserCount.setStatus('current')
hh3cAclEnUserCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 4, 3, 1, 13), CounterClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cAclEnUserCountClear.setStatus('current')
hh3cAclEnUserEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 4, 3, 1, 14), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclEnUserEnable.setStatus('current')
hh3cAclEnUserComment = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 4, 3, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAclEnUserComment.setStatus('current')
hh3cAclResourceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 5))
hh3cAclResourceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 5, 1), )
if mibBuilder.loadTexts: hh3cAclResourceUsageTable.setStatus('current')
hh3cAclResourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 5, 1, 1), ).setIndexNames((0, "HH3C-ACL-MIB", "hh3cAclResourceChassis"), (0, "HH3C-ACL-MIB", "hh3cAclResourceSlot"), (0, "HH3C-ACL-MIB", "hh3cAclResourceChip"), (0, "HH3C-ACL-MIB", "hh3cAclResourceType"))
if mibBuilder.loadTexts: hh3cAclResourceUsageEntry.setStatus('current')
hh3cAclResourceChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cAclResourceChassis.setStatus('current')
hh3cAclResourceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 5, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hh3cAclResourceSlot.setStatus('current')
hh3cAclResourceChip = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 5, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: hh3cAclResourceChip.setStatus('current')
hh3cAclResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("vfpAclResource", 1), ("ifpAclResource", 2), ("ifpMeterResource", 3), ("ifpCounterResource", 4), ("efpAclResource", 5), ("efpMeterResource", 6), ("efpCounterResource", 7), ("aclRuleResource", 8), ("meterResource", 9), ("counterResource", 10), ("ingressAclResource", 11), ("egressAclResource", 12), ("ipv4AclResource", 13), ("ipv6AclResource", 14))))
if mibBuilder.loadTexts: hh3cAclResourceType.setStatus('current')
hh3cAclPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 5, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclPortRange.setStatus('current')
hh3cAclResourceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 5, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclResourceTotal.setStatus('current')
hh3cAclResourceReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclResourceReserved.setStatus('current')
hh3cAclResourceConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 5, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclResourceConfigured.setStatus('current')
hh3cAclResourceUsagePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 8, 2, 5, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAclResourceUsagePercent.setStatus('current')
mibBuilder.exportSymbols("HH3C-ACL-MIB", hh3cAclAdvancedIcmpCode=hh3cAclAdvancedIcmpCode, hh3cAclLinkSrcIfIndex=hh3cAclLinkSrcIfIndex, hh3cAclEnUserAct=hh3cAclEnUserAct, hh3cAclActiveUserAclNum=hh3cAclActiveUserAclNum, hh3cAclIPAclGroup=hh3cAclIPAclGroup, hh3cAclUserVlanTag=hh3cAclUserVlanTag, hh3cAclIPAclAdvancedTimeRangeName=hh3cAclIPAclAdvancedTimeRangeName, hh3cAclNumGroupTable=hh3cAclNumGroupTable, hh3cAclActiveIfIndex=hh3cAclActiveIfIndex, hh3cAclAdvancedCountClear=hh3cAclAdvancedCountClear, hh3cAclNumberGroupRuleCounter=hh3cAclNumberGroupRuleCounter, hh3cAclIPAclAdvancedSrcAddr=hh3cAclIPAclAdvancedSrcAddr, hh3cAclAdvancedDscp=hh3cAclAdvancedDscp, hh3cAclIDSEntry=hh3cAclIDSEntry, TCPFlag=TCPFlag, hh3cAclNameGroupCreateName=hh3cAclNameGroupCreateName, hh3cAclBasicCount=hh3cAclBasicCount, hh3cAclAdvancedSrcWild=hh3cAclAdvancedSrcWild, hh3cAclActiveLinkAclSubitem=hh3cAclActiveLinkAclSubitem, hh3cAclNumGroupDescription=hh3cAclNumGroupDescription, hh3cAclEnUserTimeRangeName=hh3cAclEnUserTimeRangeName, hh3cAclNameGroupTypes=hh3cAclNameGroupTypes, hh3cAclBasicRuleEntry=hh3cAclBasicRuleEntry, hh3cAclLinkTypeCode=hh3cAclLinkTypeCode, hh3cAclIDSAct=hh3cAclIDSAct, hh3cAclIPAclAdvancedAct=hh3cAclIPAclAdvancedAct, hh3cAclUserSubitem=hh3cAclUserSubitem, hh3cAclEnUserAclGroup=hh3cAclEnUserAclGroup, hh3cAclAdvancedFragments=hh3cAclAdvancedFragments, hh3cAclNumGroupCountClear=hh3cAclNumGroupCountClear, hh3cAclIDSRowStatus=hh3cAclIDSRowStatus, hh3cAclIDSSrcMac=hh3cAclIDSSrcMac, hh3cAclUserRuleStr=hh3cAclUserRuleStr, hh3cAclLinkSubitem=hh3cAclLinkSubitem, hh3cAclNumGroupRowStatus=hh3cAclNumGroupRowStatus, hh3cAclIPAclBasicComment=hh3cAclIPAclBasicComment, hh3cAclEnUserCount=hh3cAclEnUserCount, hh3cAclResourceReserved=hh3cAclResourceReserved, hh3cAclBasicSrcWild=hh3cAclBasicSrcWild, hh3cAclIPAclAdvancedComment=hh3cAclIPAclAdvancedComment, hh3cAclResourceUsagePercent=hh3cAclResourceUsagePercent, hh3cAclEnUserTable=hh3cAclEnUserTable, hh3cAclIPAclAdvancedRowStatus=hh3cAclIPAclAdvancedRowStatus, hh3cAclLinkDestMac=hh3cAclLinkDestMac, hh3cAclMib2CharacteristicsValue=hh3cAclMib2CharacteristicsValue, hh3cAclIPAclAdvancedTCPFlag=hh3cAclIPAclAdvancedTCPFlag, hh3cAclMACSrcMac=hh3cAclMACSrcMac, hh3cAclUserRuleMask=hh3cAclUserRuleMask, hh3cAclLinkDestVlanId=hh3cAclLinkDestVlanId, hh3cAclIPAclBasicAct=hh3cAclIPAclBasicAct, hh3cAclActiveRuntime=hh3cAclActiveRuntime, hh3cAclMib2Version=hh3cAclMib2Version, hh3cAclUserTable=hh3cAclUserTable, hh3cAclActiveLinkAclNum=hh3cAclActiveLinkAclNum, hh3cAclAdvancedRuleEntry=hh3cAclAdvancedRuleEntry, hh3cAclAdvancedDestPort2=hh3cAclAdvancedDestPort2, hh3cAclNumberGroupTable=hh3cAclNumberGroupTable, hh3cAclIPAclBasicEntry=hh3cAclIPAclBasicEntry, hh3cAclAdvancedSubitem=hh3cAclAdvancedSubitem, hh3cAclAdvancedDestIp=hh3cAclAdvancedDestIp, hh3cAclAdvancedDestOp=hh3cAclAdvancedDestOp, hh3cAclActiveVlanID=hh3cAclActiveVlanID, hh3cAclIDSDenyTime=hh3cAclIDSDenyTime, hh3cAclBasicFragments=hh3cAclBasicFragments, hh3cAclAdvancedPrecedence=hh3cAclAdvancedPrecedence, hh3cAclEnUserIPv6String=hh3cAclEnUserIPv6String, hh3cAclMACEntry=hh3cAclMACEntry, hh3cAclEnUserL4String=hh3cAclEnUserL4String, hh3cAclResourceSlot=hh3cAclResourceSlot, hh3cAclIPAclAdvancedCountClear=hh3cAclIPAclAdvancedCountClear, hh3cAclIfSubitem=hh3cAclIfSubitem, hh3cAclLinkDestIfIndex=hh3cAclLinkDestIfIndex, hh3cAclIDSDestMac=hh3cAclIDSDestMac, hh3cAclNameGroupSubitemNum=hh3cAclNameGroupSubitemNum, hh3cAclIfRuleTable=hh3cAclIfRuleTable, hh3cAclUserRowStatus=hh3cAclUserRowStatus, hh3cAclMib2EntityIndex=hh3cAclMib2EntityIndex, hh3cAclIPAclBasicSrcPrefix=hh3cAclIPAclBasicSrcPrefix, hh3cAclIPAclBasicRowStatus=hh3cAclIPAclBasicRowStatus, hh3cAclIPAclAdvancedEnable=hh3cAclIPAclAdvancedEnable, hh3cAclEnUserIPv4String=hh3cAclEnUserIPv4String, hh3cAclAdvancedDestWild=hh3cAclAdvancedDestWild, hh3cAclLinkL2LabelRangeEnd=hh3cAclLinkL2LabelRangeEnd, hh3cAclMib2NodesGroup=hh3cAclMib2NodesGroup, DSCPValue=DSCPValue, hh3cAclAdvancedAct=hh3cAclAdvancedAct, hh3cAclBasicRowStatus=hh3cAclBasicRowStatus, hh3cAclResourceUsageEntry=hh3cAclResourceUsageEntry, hh3cAclIPAclBasicSrcAddr=hh3cAclIPAclBasicSrcAddr, hh3cAclIDSProtocol=hh3cAclIDSProtocol, hh3cAclIPAclAdvancedEntry=hh3cAclIPAclAdvancedEntry, hh3cAclIfLog=hh3cAclIfLog, hh3cAclIPAclAdvancedDestAny=hh3cAclIPAclAdvancedDestAny, hh3cAclResourceConfigured=hh3cAclResourceConfigured, hh3cAclResourceUsageTable=hh3cAclResourceUsageTable, hh3cAclLinkFormatType=hh3cAclLinkFormatType, hh3cAclIPAclAdvancedRuleIndex=hh3cAclIPAclAdvancedRuleIndex, hh3cAclEnUserEntry=hh3cAclEnUserEntry, hh3cAclIPAclAdvancedAddrFlag=hh3cAclIPAclAdvancedAddrFlag, hh3cAclPortRange=hh3cAclPortRange, hh3cAclAdvancedSrcPort1=hh3cAclAdvancedSrcPort1, hh3cAclLinkProtocol=hh3cAclLinkProtocol, hh3cAclIfAny=hh3cAclIfAny, hh3cAclMib2CharacteristicsDesc=hh3cAclMib2CharacteristicsDesc, hh3cAclActiveDirection=hh3cAclActiveDirection, hh3cAclActiveEntry=hh3cAclActiveEntry, hh3cAclIPAclAdvancedDestPort2=hh3cAclIPAclAdvancedDestPort2, hh3cAclIDSTable=hh3cAclIDSTable, hh3cAclIPAclAdvancedDestPort1=hh3cAclIPAclAdvancedDestPort1, hh3cAclLinkSrcMacWild=hh3cAclLinkSrcMacWild, hh3cAclIPAclAdvancedProtocol=hh3cAclIPAclAdvancedProtocol, hh3cAclNameGroupTable=hh3cAclNameGroupTable, hh3cAclLinkDestAny=hh3cAclLinkDestAny, hh3cAclMib2GlobalGroup=hh3cAclMib2GlobalGroup, hh3cAclMACTypeMask=hh3cAclMACTypeMask, hh3cAclMibObjects=hh3cAclMibObjects, hh3cAclAdvancedRowStatus=hh3cAclAdvancedRowStatus, hh3cAclIfAclNum=hh3cAclIfAclNum, hh3cAclUserEntry=hh3cAclUserEntry, hh3cAcl=hh3cAcl, hh3cAclLinkAct=hh3cAclLinkAct, AddressFlag=AddressFlag, hh3cAclAdvancedRuleTable=hh3cAclAdvancedRuleTable, hh3cAclIDSDestPort=hh3cAclIDSDestPort, hh3cAclMib2ModuleIndex=hh3cAclMib2ModuleIndex, PortOp=PortOp, hh3cAclAdvancedSrcOp=hh3cAclAdvancedSrcOp, hh3cAclIPAclBasicTable=hh3cAclIPAclBasicTable, hh3cAclIPAclAdvancedSrcPort1=hh3cAclIPAclAdvancedSrcPort1, hh3cAclNumberGroupIndex=hh3cAclNumberGroupIndex, hh3cAclIDSSrcPort=hh3cAclIDSSrcPort, hh3cAclMACCount=hh3cAclMACCount, hh3cAclNumberGroupStep=hh3cAclNumberGroupStep, hh3cAclIfCountClear=hh3cAclIfCountClear, hh3cAclActiveIpAclNum=hh3cAclActiveIpAclNum, hh3cAclMACTimeRangeName=hh3cAclMACTimeRangeName, hh3cAclEnUserRowStatus=hh3cAclEnUserRowStatus, hh3cAclBasicSrcIp=hh3cAclBasicSrcIp, hh3cAclIPAclAdvancedDestAddr=hh3cAclIPAclAdvancedDestAddr, hh3cAclAdvancedEstablish=hh3cAclAdvancedEstablish, hh3cAclLinkSrcMac=hh3cAclLinkSrcMac, hh3cAclIPAclBasicSrcWild=hh3cAclIPAclBasicSrcWild, hh3cAclBasicRuleTable=hh3cAclBasicRuleTable, hh3cAclNumGroupSubitemNum=hh3cAclNumGroupSubitemNum, hh3cAclNameGroupEntry=hh3cAclNameGroupEntry, hh3cAclIPAclAdvancedVpnInstanceName=hh3cAclIPAclAdvancedVpnInstanceName, hh3cAclResourceChip=hh3cAclResourceChip, hh3cAclMib2EntityType=hh3cAclMib2EntityType, hh3cAclAdvancedDestPort1=hh3cAclAdvancedDestPort1, hh3cAclResourceChassis=hh3cAclResourceChassis, hh3cAclIPAclAdvancedDestWild=hh3cAclIPAclAdvancedDestWild, hh3cAclMACRuleIndex=hh3cAclMACRuleIndex, hh3cAclIPAclAdvancedTable=hh3cAclIPAclAdvancedTable, hh3cAclAdvancedProtocol=hh3cAclAdvancedProtocol, hh3cAclMode=hh3cAclMode, hh3cAclIfCount=hh3cAclIfCount, hh3cAclUserEnable=hh3cAclUserEnable, hh3cAclIDSSrcWild=hh3cAclIDSSrcWild, hh3cAclEnUserComment=hh3cAclEnUserComment, hh3cAclMACEnable=hh3cAclMACEnable, hh3cAclNameGroupRowStatus=hh3cAclNameGroupRowStatus, hh3cAclLinkL2LabelRangeBegin=hh3cAclLinkL2LabelRangeBegin, hh3cAclIPAclBasicSrcAddrType=hh3cAclIPAclBasicSrcAddrType, hh3cAclAdvancedIcmpType=hh3cAclAdvancedIcmpType, hh3cAclAdvancedSrcIp=hh3cAclAdvancedSrcIp, hh3cAclIPAclBasicSrcAny=hh3cAclIPAclBasicSrcAny, hh3cAclActiveUserAclSubitem=hh3cAclActiveUserAclSubitem, hh3cAclNumGroupEntry=hh3cAclNumGroupEntry, hh3cAclAdvancedTimeRangeName=hh3cAclAdvancedTimeRangeName, hh3cAclNumberGroupType=hh3cAclNumberGroupType, hh3cAclMACAct=hh3cAclMACAct, hh3cAclBasicLog=hh3cAclBasicLog, hh3cAclMACDestMac=hh3cAclMACDestMac, hh3cAclEnUserEnable=hh3cAclEnUserEnable, hh3cAclMACLsapCode=hh3cAclMACLsapCode, hh3cAclIPAclAdvancedSrcPort2=hh3cAclIPAclAdvancedSrcPort2, hh3cAclMACTable=hh3cAclMACTable, hh3cAclActiveTable=hh3cAclActiveTable, hh3cAclEnUserStartString=hh3cAclEnUserStartString, RuleAction=RuleAction, hh3cAclActiveIpAclSubitem=hh3cAclActiveIpAclSubitem, hh3cAclLinkEntry=hh3cAclLinkEntry, hh3cAclIPAclAdvancedPrecedence=hh3cAclIPAclAdvancedPrecedence, hh3cAclUserAct=hh3cAclUserAct, hh3cAclIPAclAdvancedTos=hh3cAclIPAclAdvancedTos, hh3cAclIfRowStatus=hh3cAclIfRowStatus, hh3cAclIPAclAdvancedSrcOp=hh3cAclIPAclAdvancedSrcOp, hh3cAclBasicCountClear=hh3cAclBasicCountClear, hh3cAclIPAclBasicCount=hh3cAclIPAclBasicCount, hh3cAclAdvancedLog=hh3cAclAdvancedLog, hh3cAclIPAclAdvancedSrcAny=hh3cAclIPAclAdvancedSrcAny, hh3cAclIPAclAdvancedDscp=hh3cAclIPAclAdvancedDscp, hh3cAclIDSSrcIp=hh3cAclIDSSrcIp, hh3cAclAdvancedAclNum=hh3cAclAdvancedAclNum, hh3cAclIfAct=hh3cAclIfAct, hh3cAclAdvancedTos=hh3cAclAdvancedTos, hh3cAclBasicAct=hh3cAclBasicAct, hh3cAclIfTimeRangeName=hh3cAclIfTimeRangeName, hh3cAclLinkLsapCode=hh3cAclLinkLsapCode, hh3cAclNumGroupMatchOrder=hh3cAclNumGroupMatchOrder, hh3cAclIfEnable=hh3cAclIfEnable, hh3cAclIDSDestWild=hh3cAclIDSDestWild, hh3cAclMib2ObjectsCapabilities=hh3cAclMib2ObjectsCapabilities, hh3cAclNumberGroupRowStatus=hh3cAclNumberGroupRowStatus, hh3cAclNumberGroupDescription=hh3cAclNumberGroupDescription, hh3cAclIPAclBasicRuleIndex=hh3cAclIPAclBasicRuleIndex, hh3cAclIPAclAdvancedSrcPrefix=hh3cAclIPAclAdvancedSrcPrefix, hh3cAclIPAclAdvancedDestOp=hh3cAclIPAclAdvancedDestOp, hh3cAclIPAclAdvancedIcmpCode=hh3cAclIPAclAdvancedIcmpCode, hh3cAclMACDestMacWild=hh3cAclMACDestMacWild, hh3cAclNameGroupIndex=hh3cAclNameGroupIndex, hh3cAclUserFormatType=hh3cAclUserFormatType, hh3cAclNumberGroupCountClear=hh3cAclNumberGroupCountClear, hh3cAclMACLsapMask=hh3cAclMACLsapMask, hh3cAclLinkL2LabelRangeOp=hh3cAclLinkL2LabelRangeOp, hh3cAclLinkTypeMask=hh3cAclLinkTypeMask, hh3cAclMib2Objects=hh3cAclMib2Objects, hh3cAclLinkLsapMask=hh3cAclLinkLsapMask, hh3cAclResourceGroup=hh3cAclResourceGroup, hh3cAclLinkDestMacWild=hh3cAclLinkDestMacWild, hh3cAclBasicSubitem=hh3cAclBasicSubitem, hh3cAclNumberGroupEntry=hh3cAclNumberGroupEntry, hh3cAclIPAclAdvancedSrcAddrType=hh3cAclIPAclAdvancedSrcAddrType, hh3cAclBasicTimeRangeName=hh3cAclBasicTimeRangeName, hh3cAclUserAclNum=hh3cAclUserAclNum, hh3cAclIPAclAdvancedLog=hh3cAclIPAclAdvancedLog, hh3cAclMACCountClear=hh3cAclMACCountClear, hh3cAclIPAclAdvancedSrcWild=hh3cAclIPAclAdvancedSrcWild, hh3cAclIPAclAdvancedFragmentFlag=hh3cAclIPAclAdvancedFragmentFlag, hh3cAclMACSrcMacWild=hh3cAclMACSrcMacWild, hh3cAclNameGroupMatchOrder=hh3cAclNameGroupMatchOrder, hh3cAclMACCos=hh3cAclMACCos, hh3cAclIfRuleEntry=hh3cAclIfRuleEntry, hh3cAclActiveAclIndex=hh3cAclActiveAclIndex, hh3cAclAdvancedEnable=hh3cAclAdvancedEnable, hh3cAclLinkVlanTag=hh3cAclLinkVlanTag, hh3cAclMib2CapabilityEntry=hh3cAclMib2CapabilityEntry, hh3cAclIPAclBasicVpnInstanceName=hh3cAclIPAclBasicVpnInstanceName, hh3cAclMACTypeCode=hh3cAclMACTypeCode, hh3cAclEnUserMplsString=hh3cAclEnUserMplsString, hh3cAclResourceTotal=hh3cAclResourceTotal, hh3cAclIPAclAdvancedReflective=hh3cAclIPAclAdvancedReflective, hh3cAclIPAclAdvancedIcmpType=hh3cAclIPAclAdvancedIcmpType, hh3cAclLinkSrcVlanId=hh3cAclLinkSrcVlanId, hh3cAclIPAclAdvancedDestAddrType=hh3cAclIPAclAdvancedDestAddrType, hh3cAclIPAclAdvancedCount=hh3cAclIPAclAdvancedCount, hh3cAclEnUserRuleIndex=hh3cAclEnUserRuleIndex, hh3cAclUserTimeRangeName=hh3cAclUserTimeRangeName, hh3cAclMACRowStatus=hh3cAclMACRowStatus, hh3cAclEnUserL2String=hh3cAclEnUserL2String, hh3cAclBasicAclNum=hh3cAclBasicAclNum, hh3cAclAdvancedCount=hh3cAclAdvancedCount, hh3cAclBasicEnable=hh3cAclBasicEnable, hh3cAclLinkTable=hh3cAclLinkTable)
mibBuilder.exportSymbols("HH3C-ACL-MIB", hh3cAclMib2CharacteristicsIndex=hh3cAclMib2CharacteristicsIndex, hh3cAclIPAclBasicEnable=hh3cAclIPAclBasicEnable, hh3cAclEnUserL5String=hh3cAclEnUserL5String, hh3cAclMACAclGroup=hh3cAclMACAclGroup, hh3cAclIfIndex=hh3cAclIfIndex, hh3cAclLinkTimeRangeName=hh3cAclLinkTimeRangeName, hh3cAclMib2CapabilityTable=hh3cAclMib2CapabilityTable, hh3cAclLinkRowStatus=hh3cAclLinkRowStatus, hh3cAclIPAclBasicLog=hh3cAclIPAclBasicLog, hh3cAclEnUserCountClear=hh3cAclEnUserCountClear, hh3cAclNumGroupAclNum=hh3cAclNumGroupAclNum, hh3cAclLinkAclNum=hh3cAclLinkAclNum, hh3cAclLinkSrcAny=hh3cAclLinkSrcAny, hh3cAclResourceType=hh3cAclResourceType, FragmentFlag=FragmentFlag, CounterClear=CounterClear, PYSNMP_MODULE_ID=hh3cAcl, hh3cAclMACComment=hh3cAclMACComment, hh3cAclNumberGroupMatchOrder=hh3cAclNumberGroupMatchOrder, hh3cAclIPAclBasicCountClear=hh3cAclIPAclBasicCountClear, hh3cAclIPAclBasicFragmentFlag=hh3cAclIPAclBasicFragmentFlag, hh3cAclActiveRowStatus=hh3cAclActiveRowStatus, hh3cAclLinkMplsExp=hh3cAclLinkMplsExp, hh3cAclIDSName=hh3cAclIDSName, hh3cAclIDSDestIp=hh3cAclIDSDestIp, hh3cAclIPAclAdvancedDestPrefix=hh3cAclIPAclAdvancedDestPrefix, hh3cAclMib2Mode=hh3cAclMib2Mode, hh3cAclLinkVlanPri=hh3cAclLinkVlanPri, hh3cAclAdvancedSrcPort2=hh3cAclAdvancedSrcPort2, hh3cAclIPAclBasicTimeRangeName=hh3cAclIPAclBasicTimeRangeName, hh3cAclLinkEnable=hh3cAclLinkEnable)
