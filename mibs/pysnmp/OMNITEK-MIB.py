#
# PySNMP MIB module OMNITEK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNITEK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:24:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Integer32, ObjectIdentity, Counter64, enterprises, Bits, Gauge32, TimeTicks, MibIdentifier, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "ObjectIdentity", "Counter64", "enterprises", "Bits", "Gauge32", "TimeTicks", "MibIdentifier", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "NotificationType", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class AudioStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("missing", 1), ("silent", 2), ("active", 3), ("peak", 4))

omnitek = MibIdentifier((1, 3, 6, 1, 4, 1, 18458))
videostatus = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 1))
videoindex = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 2))
wss = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 3))
teletext = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 4))
closedcaptions = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 5))
errors = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 6))
timecode = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 7))
audio = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 8))
logging = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 9))
generator = MibIdentifier((1, 3, 6, 1, 4, 1, 18458, 10))
videoStandard = MibScalar((1, 3, 6, 1, 4, 1, 18458, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("format486i59", 1), ("format486p59", 2), ("format576i50", 3), ("format576p50", 4), ("format720p59", 5), ("format720p60", 6), ("format1035i59", 7), ("format1035i60", 8), ("format1080sf23", 9), ("format1080p23", 10), ("format1080sf24", 11), ("format1080p24", 12), ("format1080i50", 13), ("format1080p25", 14), ("format1080i59", 15), ("format1080p29", 16), ("format1080i60", 17), ("format1080p30", 18), ("format720p23", 19), ("format720p24", 20), ("format720p25", 21), ("format720p29", 22), ("format720p30", 23), ("format720p50", 24), ("format1080sf23rgb444log", 26), ("format1080sf23rgb444lin", 27), ("format1080sf23yuv444", 28), ("format1080sf24rgb444log", 29), ("format1080sf24rgb444lin", 30), ("format1080sf24yuv444", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: videoStandard.setStatus('mandatory')
digitalInput = MibScalar((1, 3, 6, 1, 4, 1, 18458, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("missing", 1), ("error", 2), ("ok", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInput.setStatus('mandatory')
digitalInputB = MibScalar((1, 3, 6, 1, 4, 1, 18458, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("missing", 1), ("error", 2), ("ok", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalInputB.setStatus('mandatory')
motionContent = MibScalar((1, 3, 6, 1, 4, 1, 18458, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frozen", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: motionContent.setStatus('mandatory')
lumaContent = MibScalar((1, 3, 6, 1, 4, 1, 18458, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("black", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lumaContent.setStatus('mandatory')
chromaContent = MibScalar((1, 3, 6, 1, 4, 1, 18458, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("monochrome", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chromaContent.setStatus('mandatory')
syncStatus = MibScalar((1, 3, 6, 1, 4, 1, 18458, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("missing", 1), ("error", 2), ("ok", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syncStatus.setStatus('mandatory')
activeFormat = MibScalar((1, 3, 6, 1, 4, 1, 18458, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeFormat.setStatus('mandatory')
codedFrame = MibScalar((1, 3, 6, 1, 4, 1, 18458, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: codedFrame.setStatus('mandatory')
componentSet = MibScalar((1, 3, 6, 1, 4, 1, 18458, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSet.setStatus('mandatory')
sampleStructure = MibScalar((1, 3, 6, 1, 4, 1, 18458, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sampleStructure.setStatus('mandatory')
wssReadType = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("en300294", 1), ("ardspec", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wssReadType.setStatus('mandatory')
aspectRatioEN300294 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspectRatioEN300294.setStatus('mandatory')
enhancedServicesEN300294 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enhancedServicesEN300294.setStatus('mandatory')
subtitlesEN300294 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subtitlesEN300294.setStatus('mandatory')
othersEN300294 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: othersEN300294.setStatus('mandatory')
aspectRatioARDSPEC = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspectRatioARDSPEC.setStatus('mandatory')
activeFormatARDSPEC = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeFormatARDSPEC.setStatus('mandatory')
parityBitsARDSPEC = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parityBitsARDSPEC.setStatus('mandatory')
enhancedServicesARDSPEC = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enhancedServicesARDSPEC.setStatus('mandatory')
reservedARDSPEC = MibScalar((1, 3, 6, 1, 4, 1, 18458, 3, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reservedARDSPEC.setStatus('mandatory')
present = MibScalar((1, 3, 6, 1, 4, 1, 18458, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("missing", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: present.setStatus('mandatory')
closedCaptionAnc608 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("missing", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: closedCaptionAnc608.setStatus('mandatory')
closedCaptionAnc708 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("missing", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: closedCaptionAnc708.setStatus('mandatory')
closedCaptionLine21 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("missing", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: closedCaptionLine21.setStatus('mandatory')
crcErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crcErrors.setStatus('mandatory')
crcBErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crcBErrors.setStatus('mandatory')
rgbRangeErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rgbRangeErrors.setStatus('mandatory')
rgbRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rgbRangeMin.setStatus('mandatory')
rgbRangeMax = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rgbRangeMax.setStatus('mandatory')
ycbcrRangeErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ycbcrRangeErrors.setStatus('mandatory')
yRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: yRangeMin.setStatus('mandatory')
yRrangeMax = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: yRrangeMax.setStatus('mandatory')
uRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uRangeMin.setStatus('mandatory')
uRangeMax = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uRangeMax.setStatus('mandatory')
vRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRangeMin.setStatus('mandatory')
vRangeMax = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRangeMax.setStatus('mandatory')
trsErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trsErrors.setStatus('mandatory')
trsBErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trsBErrors.setStatus('mandatory')
ancErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ancErrors.setStatus('mandatory')
ancBErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ancBErrors.setStatus('mandatory')
lineErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineErrors.setStatus('mandatory')
lineBErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineBErrors.setStatus('mandatory')
frozenVITC = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frozenVITC.setStatus('mandatory')
skippedVITC = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skippedVITC.setStatus('mandatory')
frozenATC = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frozenATC.setStatus('mandatory')
skippedATC = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: skippedATC.setStatus('mandatory')
compRangeErrors = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compRangeErrors.setStatus('mandatory')
compRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compRangeMin.setStatus('mandatory')
compRangeMax = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compRangeMax.setStatus('mandatory')
edhError = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edhError.setStatus('mandatory')
edhInvalid = MibScalar((1, 3, 6, 1, 4, 1, 18458, 6, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: edhInvalid.setStatus('mandatory')
vitc = MibScalar((1, 3, 6, 1, 4, 1, 18458, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vitc.setStatus('mandatory')
atc = MibScalar((1, 3, 6, 1, 4, 1, 18458, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atc.setStatus('mandatory')
usageGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageGroup1.setStatus('mandatory')
usageGroup2 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageGroup2.setStatus('mandatory')
usageGroup3 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageGroup3.setStatus('mandatory')
usageGroup4 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usageGroup4.setStatus('mandatory')
sampleGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("audio", 1), ("data", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sampleGroup1.setStatus('mandatory')
sampleGroup2 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("audio", 1), ("data", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sampleGroup2.setStatus('mandatory')
sampleGroup3 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("audio", 1), ("data", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sampleGroup3.setStatus('mandatory')
sampleGroup4 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("audio", 1), ("data", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sampleGroup4.setStatus('mandatory')
emphasisGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emphasisGroup1.setStatus('mandatory')
emphasisGroup2 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emphasisGroup2.setStatus('mandatory')
emphasisGroup3 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emphasisGroup3.setStatus('mandatory')
emphasisGroup4 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emphasisGroup4.setStatus('mandatory')
lockGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockGroup1.setStatus('mandatory')
lockGroup2 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockGroup2.setStatus('mandatory')
lockGroup3 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockGroup3.setStatus('mandatory')
lockGroup4 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lockGroup4.setStatus('mandatory')
frequencyGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default48khz", 1), ("manual48khz", 2), ("freq441khz", 3), ("freq32khz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyGroup1.setStatus('mandatory')
frequencyGroup2 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default48khz", 1), ("manual48khz", 2), ("freq441khz", 3), ("freq32khz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyGroup2.setStatus('mandatory')
frequencyGroup3 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default48khz", 1), ("manual48khz", 2), ("freq441khz", 3), ("freq32khz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyGroup3.setStatus('mandatory')
frequencyGroup4 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default48khz", 1), ("manual48khz", 2), ("freq441khz", 3), ("freq32khz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frequencyGroup4.setStatus('mandatory')
channelModeGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("default", 1), ("dual", 2), ("single", 3), ("primarysecondary", 4), ("stereo", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelModeGroup1.setStatus('mandatory')
channelModeGroup2 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("default", 1), ("dual", 2), ("single", 3), ("primarysecondary", 4), ("stereo", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelModeGroup2.setStatus('mandatory')
channelModeGroup3 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("default", 1), ("dual", 2), ("single", 3), ("primarysecondary", 4), ("stereo", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelModeGroup3.setStatus('mandatory')
channelModeGroup4 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("default", 1), ("dual", 2), ("single", 3), ("primarysecondary", 4), ("stereo", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelModeGroup4.setStatus('mandatory')
wordLengthGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("default", 1), ("bits16", 2), ("bits18", 3), ("bits19", 4), ("bits20", 5), ("bits22", 6), ("bits23", 7), ("bits24", 8), ("user", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wordLengthGroup1.setStatus('mandatory')
wordLengthGroup2 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("default", 1), ("bits16", 2), ("bits18", 3), ("bits19", 4), ("bits20", 5), ("bits22", 6), ("bits23", 7), ("bits24", 8), ("user", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wordLengthGroup2.setStatus('mandatory')
wordLengthGroup3 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("default", 1), ("bits16", 2), ("bits18", 3), ("bits19", 4), ("bits20", 5), ("bits22", 6), ("bits23", 7), ("bits24", 8), ("user", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wordLengthGroup3.setStatus('mandatory')
wordLengthGroup4 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("default", 1), ("bits16", 2), ("bits18", 3), ("bits19", 4), ("bits20", 5), ("bits22", 6), ("bits23", 7), ("bits24", 8), ("user", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wordLengthGroup4.setStatus('mandatory')
channelStatus1 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 29), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus1.setStatus('mandatory')
channelStatus2 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 30), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus2.setStatus('mandatory')
channelStatus3 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 31), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus3.setStatus('mandatory')
channelStatus4 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 32), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus4.setStatus('mandatory')
channelStatus5 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 33), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus5.setStatus('mandatory')
channelStatus6 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 34), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus6.setStatus('mandatory')
channelStatus7 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 35), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus7.setStatus('mandatory')
channelStatus8 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 36), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus8.setStatus('mandatory')
channelStatus9 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 37), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus9.setStatus('mandatory')
channelStatus10 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 38), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus10.setStatus('mandatory')
channelStatus11 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 39), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus11.setStatus('mandatory')
channelStatus12 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 40), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus12.setStatus('mandatory')
channelStatus13 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 41), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus13.setStatus('mandatory')
channelStatus14 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 42), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus14.setStatus('mandatory')
channelStatus15 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 43), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus15.setStatus('mandatory')
channelStatus16 = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 44), AudioStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus16.setStatus('mandatory')
audioMin = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioMin.setStatus('mandatory')
audioMax = MibScalar((1, 3, 6, 1, 4, 1, 18458, 8, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: audioMax.setStatus('mandatory')
jobId = MibScalar((1, 3, 6, 1, 4, 1, 18458, 9, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jobId.setStatus('mandatory')
indexPattern = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 1), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: indexPattern.setStatus('mandatory')
nextPattern = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: nextPattern.setStatus('mandatory')
prevPattern = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 3), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: prevPattern.setStatus('mandatory')
transportToStart = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 4), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: transportToStart.setStatus('mandatory')
transportJogBack = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: transportJogBack.setStatus('mandatory')
transportPlayReverse = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transportPlayReverse.setStatus('mandatory')
transportStop = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transportStop.setStatus('mandatory')
transportPlayForward = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transportPlayForward.setStatus('mandatory')
transportJogNext = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: transportJogNext.setStatus('mandatory')
transportToEnd = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 10), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: transportToEnd.setStatus('mandatory')
transportLoop = MibScalar((1, 3, 6, 1, 4, 1, 18458, 10, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transportLoop.setStatus('mandatory')
systemUpTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458) + (0,1))
systemDownTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458) + (0,2))
videoStandardChangedTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 1) + (0,3)).setObjects(("OMNITEK-MIB", "videoStandard"))
digitalInputTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 1) + (0,4)).setObjects(("OMNITEK-MIB", "digitalInput"))
digitalInputBTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 1) + (0,5)).setObjects(("OMNITEK-MIB", "digitalInputB"))
motionContentTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 1) + (0,6)).setObjects(("OMNITEK-MIB", "motionContent"))
lumaContentTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 1) + (0,7)).setObjects(("OMNITEK-MIB", "lumaContent"))
chromaContentTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 1) + (0,8)).setObjects(("OMNITEK-MIB", "chromaContent"))
syncStatusTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 1) + (0,9)).setObjects(("OMNITEK-MIB", "syncStatus"))
crcErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,10)).setObjects(("OMNITEK-MIB", "crcErrors"))
crcBErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,11)).setObjects(("OMNITEK-MIB", "crcBErrors"))
rgbRangeErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,12)).setObjects(("OMNITEK-MIB", "rgbRangeErrors"))
ycbcrRangeErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,13)).setObjects(("OMNITEK-MIB", "ycbcrRangeErrors"))
trsErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,14)).setObjects(("OMNITEK-MIB", "trsErrors"))
trsBErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,15)).setObjects(("OMNITEK-MIB", "trsBErrors"))
ancErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,16)).setObjects(("OMNITEK-MIB", "ancErrors"))
ancBErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,17)).setObjects(("OMNITEK-MIB", "ancBErrors"))
lineErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,18)).setObjects(("OMNITEK-MIB", "lineErrors"))
lineBErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,19)).setObjects(("OMNITEK-MIB", "lineBErrors"))
frozenVITCTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,20)).setObjects(("OMNITEK-MIB", "frozenVITC"))
skippedVITCTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,21)).setObjects(("OMNITEK-MIB", "skippedVITC"))
frozenATCTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,22)).setObjects(("OMNITEK-MIB", "frozenATC"))
skippedATCTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,23)).setObjects(("OMNITEK-MIB", "skippedATC"))
compRangeErrorsTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,24)).setObjects(("OMNITEK-MIB", "compRangeErrors"))
edhErrorTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,25)).setObjects(("OMNITEK-MIB", "edhError"))
edhInvalidTRAP = NotificationType((1, 3, 6, 1, 4, 1, 18458, 6) + (0,26)).setObjects(("OMNITEK-MIB", "edhInvalid"))
mibBuilder.exportSymbols("OMNITEK-MIB", rgbRangeMin=rgbRangeMin, timecode=timecode, motionContent=motionContent, transportLoop=transportLoop, transportStop=transportStop, logging=logging, sampleStructure=sampleStructure, othersEN300294=othersEN300294, channelStatus1=channelStatus1, emphasisGroup1=emphasisGroup1, channelStatus4=channelStatus4, syncStatus=syncStatus, channelStatus11=channelStatus11, uRangeMin=uRangeMin, channelStatus7=channelStatus7, closedCaptionAnc708=closedCaptionAnc708, lumaContent=lumaContent, yRangeMin=yRangeMin, channelStatus5=channelStatus5, sampleGroup1=sampleGroup1, frozenVITCTRAP=frozenVITCTRAP, lockGroup3=lockGroup3, audioMin=audioMin, channelStatus16=channelStatus16, compRangeErrors=compRangeErrors, channelModeGroup3=channelModeGroup3, lineErrorsTRAP=lineErrorsTRAP, teletext=teletext, chromaContent=chromaContent, vRangeMin=vRangeMin, enhancedServicesEN300294=enhancedServicesEN300294, videoindex=videoindex, jobId=jobId, compRangeMax=compRangeMax, frozenVITC=frozenVITC, transportPlayReverse=transportPlayReverse, channelStatus2=channelStatus2, audioMax=audioMax, lumaContentTRAP=lumaContentTRAP, videostatus=videostatus, atc=atc, transportJogBack=transportJogBack, prevPattern=prevPattern, skippedVITC=skippedVITC, usageGroup4=usageGroup4, wssReadType=wssReadType, emphasisGroup2=emphasisGroup2, digitalInput=digitalInput, ycbcrRangeErrors=ycbcrRangeErrors, channelStatus9=channelStatus9, audio=audio, ancBErrorsTRAP=ancBErrorsTRAP, edhInvalidTRAP=edhInvalidTRAP, motionContentTRAP=motionContentTRAP, indexPattern=indexPattern, componentSet=componentSet, present=present, systemUpTRAP=systemUpTRAP, edhError=edhError, wordLengthGroup3=wordLengthGroup3, wordLengthGroup4=wordLengthGroup4, digitalInputTRAP=digitalInputTRAP, crcErrorsTRAP=crcErrorsTRAP, channelModeGroup2=channelModeGroup2, trsBErrors=trsBErrors, lockGroup1=lockGroup1, ancErrorsTRAP=ancErrorsTRAP, chromaContentTRAP=chromaContentTRAP, vRangeMax=vRangeMax, wss=wss, channelStatus12=channelStatus12, lineBErrorsTRAP=lineBErrorsTRAP, ycbcrRangeErrorsTRAP=ycbcrRangeErrorsTRAP, enhancedServicesARDSPEC=enhancedServicesARDSPEC, generator=generator, channelStatus3=channelStatus3, channelModeGroup4=channelModeGroup4, usageGroup1=usageGroup1, trsBErrorsTRAP=trsBErrorsTRAP, aspectRatioEN300294=aspectRatioEN300294, skippedATC=skippedATC, transportPlayForward=transportPlayForward, vitc=vitc, rgbRangeErrors=rgbRangeErrors, syncStatusTRAP=syncStatusTRAP, digitalInputBTRAP=digitalInputBTRAP, closedCaptionAnc608=closedCaptionAnc608, codedFrame=codedFrame, parityBitsARDSPEC=parityBitsARDSPEC, closedcaptions=closedcaptions, trsErrorsTRAP=trsErrorsTRAP, sampleGroup4=sampleGroup4, channelStatus8=channelStatus8, systemDownTRAP=systemDownTRAP, channelStatus10=channelStatus10, transportToStart=transportToStart, ancBErrors=ancBErrors, crcBErrors=crcBErrors, frozenATC=frozenATC, omnitek=omnitek, crcErrors=crcErrors, compRangeErrorsTRAP=compRangeErrorsTRAP, edhInvalid=edhInvalid, wordLengthGroup1=wordLengthGroup1, videoStandard=videoStandard, rgbRangeErrorsTRAP=rgbRangeErrorsTRAP, reservedARDSPEC=reservedARDSPEC, yRrangeMax=yRrangeMax, errors=errors, emphasisGroup3=emphasisGroup3, compRangeMin=compRangeMin, videoStandardChangedTRAP=videoStandardChangedTRAP, usageGroup2=usageGroup2, subtitlesEN300294=subtitlesEN300294, wordLengthGroup2=wordLengthGroup2, rgbRangeMax=rgbRangeMax, digitalInputB=digitalInputB, ancErrors=ancErrors, sampleGroup2=sampleGroup2, emphasisGroup4=emphasisGroup4, aspectRatioARDSPEC=aspectRatioARDSPEC, usageGroup3=usageGroup3, activeFormatARDSPEC=activeFormatARDSPEC, frequencyGroup4=frequencyGroup4, trsErrors=trsErrors, transportJogNext=transportJogNext, uRangeMax=uRangeMax, channelStatus14=channelStatus14, lineBErrors=lineBErrors, channelStatus15=channelStatus15, activeFormat=activeFormat, skippedATCTRAP=skippedATCTRAP, frozenATCTRAP=frozenATCTRAP, channelStatus6=channelStatus6, lockGroup2=lockGroup2, closedCaptionLine21=closedCaptionLine21, skippedVITCTRAP=skippedVITCTRAP, lockGroup4=lockGroup4, channelStatus13=channelStatus13, AudioStatus=AudioStatus, sampleGroup3=sampleGroup3, nextPattern=nextPattern, frequencyGroup1=frequencyGroup1, edhErrorTRAP=edhErrorTRAP, frequencyGroup3=frequencyGroup3, transportToEnd=transportToEnd, crcBErrorsTRAP=crcBErrorsTRAP, channelModeGroup1=channelModeGroup1, frequencyGroup2=frequencyGroup2, lineErrors=lineErrors)
