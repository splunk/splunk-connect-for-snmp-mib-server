#
# PySNMP MIB module FASTTRAKIDERAID-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FASTTRAKIDERAID-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:58:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, ObjectIdentity, Gauge32, Unsigned32, TimeTicks, NotificationType, iso, Bits, Integer32, Counter32, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "ObjectIdentity", "Gauge32", "Unsigned32", "TimeTicks", "NotificationType", "iso", "Bits", "Integer32", "Counter32", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DmiInteger(Integer32):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiDateX(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

promise = MibIdentifier((1, 3, 6, 1, 4, 1, 7933))
intel = MibIdentifier((1, 3, 6, 1, 4, 1, 7933, 343))
fasttrak = MibIdentifier((1, 3, 6, 1, 4, 1, 7933, 343, 1))
isc3xtraps = MibIdentifier((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 1, 1), ).setIndexNames((0, "FASTTRAKIDERAID-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 1, 1, 5), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccurredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vVerificationIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
tDiskController = MibTable((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 45), )
if mibBuilder.loadTexts: tDiskController.setStatus('mandatory')
eDiskController = MibTableRow((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 45, 1), ).setIndexNames((0, "FASTTRAKIDERAID-MIB", "DmiComponentIndex"), (0, "FASTTRAKIDERAID-MIB", "a45DiskControllerIndex"))
if mibBuilder.loadTexts: eDiskController.setStatus('mandatory')
a45DiskControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 45, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a45DiskControllerIndex.setStatus('mandatory')
a45FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 45, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a45FruGroupIndex.setStatus('mandatory')
a45OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 45, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a45OperationalGroupIndex.setStatus('mandatory')
a45SystemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 45, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a45SystemSlotIndex.setStatus('mandatory')
a45DiskControllerIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 45, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a45DiskControllerIdentification.setStatus('mandatory')
a45ControllerSoftwareRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 45, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a45ControllerSoftwareRevisionLevel.setStatus('mandatory')
a45ControllerChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 45, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a45ControllerChannelCount.setStatus('mandatory')
a45ControllerMaximumDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 45, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a45ControllerMaximumDevices.setStatus('mandatory')
tDisks = MibTable((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49), )
if mibBuilder.loadTexts: tDisks.setStatus('mandatory')
eDisks = MibTableRow((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1), ).setIndexNames((0, "FASTTRAKIDERAID-MIB", "DmiComponentIndex"), (0, "FASTTRAKIDERAID-MIB", "a49StorageType"), (0, "FASTTRAKIDERAID-MIB", "a49DiskIndex"))
if mibBuilder.loadTexts: eDisks.setStatus('mandatory')
a49StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vHardDisk", 3), ("vFloppyDisk", 4), ("vOpticalRom", 5), ("vOpticalWorm", 6), ("vOpticalRw", 7), ("vCompactDisk", 8), ("vFlashDisk", 9), ("vBernoulli", 10), ("vOpticalFloppyDisk", 11), ("vDigitalVersatileDiskDvdDrive", 12), ("vDigitalVersatileDiskDvdRamDrive", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49StorageType.setStatus('mandatory')
a49DiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49DiskIndex.setStatus('mandatory')
a49StorageInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vScsi", 3), ("vEsdi", 4), ("vIde", 5), ("vCmd", 6), ("vIpi", 7), ("vSt506", 8), ("vDssi", 9), ("vParallelPort", 10), ("vHippi", 11), ("vQic2", 12), ("vFloppyDiskInterface", 13), ("vPcmcia", 14), ("vEnhancedAtaide", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49StorageInterfaceType.setStatus('mandatory')
a49InterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49InterfaceDescription.setStatus('mandatory')
a49MediaLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49MediaLoaded.setStatus('mandatory')
a49RemovableDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49RemovableDrive.setStatus('mandatory')
a49RemovableMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49RemovableMedia.setStatus('mandatory')
a49DeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49DeviceId.setStatus('mandatory')
a49LogicalUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49LogicalUnitNumber.setStatus('mandatory')
a49NumberOfPhysicalCylinders = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49NumberOfPhysicalCylinders.setStatus('mandatory')
a49NumberOfPhysicalSectorsPerTrack = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49NumberOfPhysicalSectorsPerTrack.setStatus('mandatory')
a49NumberOfPhysicalHeads = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49NumberOfPhysicalHeads.setStatus('mandatory')
a49PhysicalCylinderForWritePrecompensati = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49PhysicalCylinderForWritePrecompensati.setStatus('mandatory')
a49PhysicalCylinderForLandingZone = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49PhysicalCylinderForLandingZone.setStatus('mandatory')
a49SectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49SectorSize.setStatus('mandatory')
a49TotalPhysicalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49TotalPhysicalSize.setStatus('mandatory')
a49NumberOfCurrentBadBlocksOrSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49NumberOfCurrentBadBlocksOrSectors.setStatus('mandatory')
a49Partitions = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 18), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49Partitions.setStatus('mandatory')
a49PhysicalLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vInternal", 3), ("vExternal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49PhysicalLocation.setStatus('mandatory')
a49FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 20), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49FruGroupIndex.setStatus('mandatory')
a49OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 21), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49OperationalGroupIndex.setStatus('mandatory')
a49SecuritySettings = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 49, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vRead-only", 4), ("vLockoutEnabled", 5), ("vBoot-bypass", 6), ("vBoot-bypass-Read-only", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a49SecuritySettings.setStatus('mandatory')
tMassStoreArrayInfoTable = MibTable((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 85), )
if mibBuilder.loadTexts: tMassStoreArrayInfoTable.setStatus('mandatory')
eMassStoreArrayInfoTable = MibTableRow((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 85, 1), ).setIndexNames((0, "FASTTRAKIDERAID-MIB", "DmiComponentIndex"), (0, "FASTTRAKIDERAID-MIB", "a85LogicalDriveIndex"))
if mibBuilder.loadTexts: eMassStoreArrayInfoTable.setStatus('mandatory')
a85LogicalDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 85, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a85LogicalDriveIndex.setStatus('mandatory')
a85DriveArrayLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 85, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRaid0", 3), ("vRaid1", 4), ("vRaid2", 5), ("vRaid3", 6), ("vRaid4", 7), ("vRaid5", 8), ("vRaid7", 9), ("vRaid10", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a85DriveArrayLevel.setStatus('mandatory')
a85DriveArrayRedundancyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 85, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vFullyRedundant", 3), ("vDegradedRedundancy", 4), ("vRedundancyLost", 5), ("vNotApplicableUnitNotRedundant", 6), ("vUnitFailed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a85DriveArrayRedundancyStatus.setStatus('mandatory')
a85DriveArrayOperationInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 85, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vVerify", 3), ("vRebuild", 5), ("vNone", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a85DriveArrayOperationInProgress.setStatus('mandatory')
tMassStoreLogicalDrivesTable = MibTable((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 86), )
if mibBuilder.loadTexts: tMassStoreLogicalDrivesTable.setStatus('mandatory')
eMassStoreLogicalDrivesTable = MibTableRow((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 86, 1), ).setIndexNames((0, "FASTTRAKIDERAID-MIB", "DmiComponentIndex"), (0, "FASTTRAKIDERAID-MIB", "a86LogicalDriveIndex"))
if mibBuilder.loadTexts: eMassStoreLogicalDrivesTable.setStatus('mandatory')
a86LogicalDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 86, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a86LogicalDriveIndex.setStatus('mandatory')
a86TopOfHierarchy = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 86, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a86TopOfHierarchy.setStatus('mandatory')
a86DriveArray = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 86, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a86DriveArray.setStatus('mandatory')
a86LogicalDriveSizeInKb = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 86, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a86LogicalDriveSizeInKb.setStatus('mandatory')
a86LogicalDriveBlockSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 86, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a86LogicalDriveBlockSizeInBytes.setStatus('mandatory')
a86LogicalDriveNameString = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 86, 1, 6), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a86LogicalDriveNameString.setStatus('mandatory')
tMassStoreMappingTable = MibTable((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 87), )
if mibBuilder.loadTexts: tMassStoreMappingTable.setStatus('mandatory')
eMassStoreMappingTable = MibTableRow((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 87, 1), ).setIndexNames((0, "FASTTRAKIDERAID-MIB", "DmiComponentIndex"), (0, "FASTTRAKIDERAID-MIB", "a87MappingIndex"))
if mibBuilder.loadTexts: eMassStoreMappingTable.setStatus('mandatory')
a87MappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 87, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a87MappingIndex.setStatus('mandatory')
a87ParentDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 87, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a87ParentDrive.setStatus('mandatory')
a87ChildSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 87, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a87ChildSegment.setStatus('mandatory')
tMassStoreSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 88), )
if mibBuilder.loadTexts: tMassStoreSegmentTable.setStatus('mandatory')
eMassStoreSegmentTable = MibTableRow((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 88, 1), ).setIndexNames((0, "FASTTRAKIDERAID-MIB", "DmiComponentIndex"), (0, "FASTTRAKIDERAID-MIB", "a88SegmentIndex"))
if mibBuilder.loadTexts: eMassStoreSegmentTable.setStatus('mandatory')
a88SegmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 88, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a88SegmentIndex.setStatus('mandatory')
a88SegmentType = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 88, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vPhysical", 1), ("vLogical", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a88SegmentType.setStatus('mandatory')
a88SegmentStart = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 88, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a88SegmentStart.setStatus('mandatory')
a88SegmentLength = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 88, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a88SegmentLength.setStatus('mandatory')
a88SegmentAllocationUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 88, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vPhysicalSector", 3), ("vLogicalBlock", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a88SegmentAllocationUnit.setStatus('mandatory')
a88SegmentAllocationState = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 88, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vAllocated", 3), ("vAvailable", 4), ("vDefective", 5), ("vReserved1", 6), ("vSpare", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a88SegmentAllocationState.setStatus('mandatory')
a88DriveKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 88, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vHardDisk", 3), ("vFloppyDisk", 4), ("vOpticalRom", 5), ("vOpticalWorm", 6), ("vOpticalRw", 7), ("vCompactDisk", 8), ("vFlashDisk", 9), ("vBernoulli", 10), ("vOpticalFloppyDisk", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a88DriveKey1.setStatus('mandatory')
a88DriveKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 88, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a88DriveKey2.setStatus('mandatory')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 99), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 99, 1), ).setIndexNames((0, "FASTTRAKIDERAID-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
a99MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 99, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibName.setStatus('mandatory')
a99MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 99, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibOid.setStatus('mandatory')
a99DisableTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 99, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a99DisableTrap.setStatus('mandatory')
tEventState = MibTable((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 100), )
if mibBuilder.loadTexts: tEventState.setStatus('mandatory')
eEventState = MibTableRow((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 100, 1), ).setIndexNames((0, "FASTTRAKIDERAID-MIB", "DmiComponentIndex"), (0, "FASTTRAKIDERAID-MIB", "a100EventIndex"))
if mibBuilder.loadTexts: eEventState.setStatus('mandatory')
a100EventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 100, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100EventIndex.setStatus('mandatory')
a100EventGenerationGroupClass = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 100, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100EventGenerationGroupClass.setStatus('mandatory')
a100EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 100, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100EventType.setStatus('mandatory')
a100CurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 100, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8, 16, 32))).clone(namedValues=NamedValues(("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100CurrentState.setStatus('mandatory')
a100AssociatedGroupObject = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 100, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a100AssociatedGroupObject.setStatus('mandatory')
tEventGenerationForDiskController = MibTable((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 238), )
if mibBuilder.loadTexts: tEventGenerationForDiskController.setStatus('mandatory')
eEventGenerationForDiskController = MibTableRow((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 238, 1), ).setIndexNames((0, "FASTTRAKIDERAID-MIB", "DmiComponentIndex"), (0, "FASTTRAKIDERAID-MIB", "a238AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForDiskController.setStatus('mandatory')
a238EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 238, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vInitializationFailure", 1), ("vConfigurationError", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a238EventType.setStatus('mandatory')
a238EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 238, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical1", 8), ("vCritical", 16), ("vNon-recoverable1", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a238EventSeverity.setStatus('mandatory')
a238IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 238, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a238IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a238IsEventState_based.setStatus('mandatory')
a238EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 238, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a238EventStateKey.setStatus('mandatory')
a238AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 238, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a238AssociatedGroup.setStatus('mandatory')
a238EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 238, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a238EventSystem.setStatus('mandatory')
a238EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 238, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a238EventSubsystem.setStatus('mandatory')
tEventGenerationForDisks = MibTable((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 239), )
if mibBuilder.loadTexts: tEventGenerationForDisks.setStatus('mandatory')
eEventGenerationForDisks = MibTableRow((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 239, 1), ).setIndexNames((0, "FASTTRAKIDERAID-MIB", "DmiComponentIndex"), (0, "FASTTRAKIDERAID-MIB", "a239AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForDisks.setStatus('mandatory')
a239EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 239, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vPhysicalDeviceStatusChange", 1), ("vInitializationFailure", 2), ("vConfigurationError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a239EventType.setStatus('mandatory')
a239EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 239, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a239EventSeverity.setStatus('mandatory')
a239IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 239, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a239IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a239IsEventState_based.setStatus('mandatory')
a239EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 239, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a239EventStateKey.setStatus('mandatory')
a239AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 239, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a239AssociatedGroup.setStatus('mandatory')
a239EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 239, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a239EventSystem.setStatus('mandatory')
a239EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 239, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a239EventSubsystem.setStatus('mandatory')
tEventGenerationForMassStoreLogicalDrive = MibTable((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 244), )
if mibBuilder.loadTexts: tEventGenerationForMassStoreLogicalDrive.setStatus('mandatory')
eEventGenerationForMassStoreLogicalDrive = MibTableRow((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 244, 1), ).setIndexNames((0, "FASTTRAKIDERAID-MIB", "DmiComponentIndex"), (0, "FASTTRAKIDERAID-MIB", "a244AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForMassStoreLogicalDrive.setStatus('mandatory')
a244EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 244, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vPhysicalDeviceStatusChange", 1), ("vHotSpareActivated", 2), ("vLogicalDeviceStatusChange", 3), ("vInitializationFailure", 4), ("vConfigurationError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a244EventType.setStatus('mandatory')
a244EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 244, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a244EventSeverity.setStatus('mandatory')
a244IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 244, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a244IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a244IsEventState_based.setStatus('mandatory')
a244EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 244, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a244EventStateKey.setStatus('mandatory')
a244AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 244, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a244AssociatedGroup.setStatus('mandatory')
a244EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 244, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a244EventSystem.setStatus('mandatory')
a244EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 244, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a244EventSubsystem.setStatus('mandatory')
tTrapGroup = MibTable((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 9999), )
if mibBuilder.loadTexts: tTrapGroup.setStatus('mandatory')
eTrapGroup = MibTableRow((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 9999, 1), ).setIndexNames((0, "FASTTRAKIDERAID-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eTrapGroup.setStatus('mandatory')
a9999ErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 9999, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorTime.setStatus('mandatory')
a9999ErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 9999, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorStatus.setStatus('mandatory')
a9999ErrorGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 9999, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorGroupId.setStatus('mandatory')
a9999ErrorInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 9999, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorInstanceId.setStatus('mandatory')
a9999ComponentId = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 9999, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ComponentId.setStatus('mandatory')
a9999GroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 9999, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999GroupId.setStatus('mandatory')
a9999InstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 9999, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999InstanceId.setStatus('mandatory')
a9999VendorCode1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 9999, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorCode1.setStatus('mandatory')
a9999VendorCode2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 9999, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorCode2.setStatus('mandatory')
a9999VendorText = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 9999, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorText.setStatus('mandatory')
a9999ParentGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 9999, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ParentGroupId.setStatus('mandatory')
a9999ParentInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 9999, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ParentInstanceId.setStatus('mandatory')
dmtfEventError = NotificationType((1, 3, 6, 1, 4, 1, 7933, 343, 1, 1, 1, 9999, 1) + (0,1)).setObjects(("FASTTRAKIDERAID-MIB", "a9999ErrorTime"), ("FASTTRAKIDERAID-MIB", "a9999ErrorStatus"), ("FASTTRAKIDERAID-MIB", "a9999ErrorGroupId"), ("FASTTRAKIDERAID-MIB", "a9999ErrorInstanceId"), ("FASTTRAKIDERAID-MIB", "a9999ComponentId"), ("FASTTRAKIDERAID-MIB", "a9999GroupId"), ("FASTTRAKIDERAID-MIB", "a9999InstanceId"), ("FASTTRAKIDERAID-MIB", "a9999VendorCode1"), ("FASTTRAKIDERAID-MIB", "a9999VendorCode2"), ("FASTTRAKIDERAID-MIB", "a9999VendorText"), ("FASTTRAKIDERAID-MIB", "a9999ParentGroupId"), ("FASTTRAKIDERAID-MIB", "a9999ParentInstanceId"))
mibBuilder.exportSymbols("FASTTRAKIDERAID-MIB", a49Partitions=a49Partitions, a9999ParentGroupId=a9999ParentGroupId, a49StorageType=a49StorageType, eMassStoreMappingTable=eMassStoreMappingTable, a99DisableTrap=a99DisableTrap, a49SecuritySettings=a49SecuritySettings, a1Product=a1Product, a88SegmentAllocationUnit=a88SegmentAllocationUnit, tEventGenerationForDisks=tEventGenerationForDisks, a244EventSubsystem=a244EventSubsystem, tDiskController=tDiskController, a100EventIndex=a100EventIndex, a45ControllerMaximumDevices=a45ControllerMaximumDevices, a239IsEventState_based=a239IsEventState_based, a86LogicalDriveBlockSizeInBytes=a86LogicalDriveBlockSizeInBytes, a9999VendorCode2=a9999VendorCode2, eEventState=eEventState, a87MappingIndex=a87MappingIndex, dmtfGroups=dmtfGroups, eMassStoreArrayInfoTable=eMassStoreArrayInfoTable, fasttrak=fasttrak, a244EventType=a244EventType, eMiftomib=eMiftomib, a49TotalPhysicalSize=a49TotalPhysicalSize, a49NumberOfCurrentBadBlocksOrSectors=a49NumberOfCurrentBadBlocksOrSectors, a45ControllerChannelCount=a45ControllerChannelCount, tMiftomib=tMiftomib, a45FruGroupIndex=a45FruGroupIndex, a45SystemSlotIndex=a45SystemSlotIndex, a49PhysicalCylinderForLandingZone=a49PhysicalCylinderForLandingZone, a1Version=a1Version, eDisks=eDisks, a49NumberOfPhysicalSectorsPerTrack=a49NumberOfPhysicalSectorsPerTrack, tTrapGroup=tTrapGroup, a49OperationalGroupIndex=a49OperationalGroupIndex, a239EventType=a239EventType, a49PhysicalLocation=a49PhysicalLocation, a1Verify=a1Verify, tMassStoreLogicalDrivesTable=tMassStoreLogicalDrivesTable, a86DriveArray=a86DriveArray, a88SegmentAllocationState=a88SegmentAllocationState, a85DriveArrayRedundancyStatus=a85DriveArrayRedundancyStatus, a45DiskControllerIndex=a45DiskControllerIndex, a244EventStateKey=a244EventStateKey, a244IsEventState_based=a244IsEventState_based, eEventGenerationForDiskController=eEventGenerationForDiskController, eComponentid=eComponentid, a86LogicalDriveNameString=a86LogicalDriveNameString, a49SectorSize=a49SectorSize, a239EventSeverity=a239EventSeverity, a87ChildSegment=a87ChildSegment, tComponentid=tComponentid, a49MediaLoaded=a49MediaLoaded, a9999ErrorGroupId=a9999ErrorGroupId, a100EventType=a100EventType, a49DeviceId=a49DeviceId, a49LogicalUnitNumber=a49LogicalUnitNumber, a100CurrentState=a100CurrentState, a85DriveArrayLevel=a85DriveArrayLevel, DmiComponentIndex=DmiComponentIndex, a9999GroupId=a9999GroupId, a88SegmentLength=a88SegmentLength, eEventGenerationForMassStoreLogicalDrive=eEventGenerationForMassStoreLogicalDrive, promise=promise, a239EventStateKey=a239EventStateKey, tMassStoreSegmentTable=tMassStoreSegmentTable, tMassStoreArrayInfoTable=tMassStoreArrayInfoTable, a244AssociatedGroup=a244AssociatedGroup, a88SegmentIndex=a88SegmentIndex, dmtfEventError=dmtfEventError, a49PhysicalCylinderForWritePrecompensati=a49PhysicalCylinderForWritePrecompensati, a85LogicalDriveIndex=a85LogicalDriveIndex, a45DiskControllerIdentification=a45DiskControllerIdentification, eEventGenerationForDisks=eEventGenerationForDisks, a100AssociatedGroupObject=a100AssociatedGroupObject, tDisks=tDisks, a88DriveKey1=a88DriveKey1, a49StorageInterfaceType=a49StorageInterfaceType, isc3xtraps=isc3xtraps, a86LogicalDriveIndex=a86LogicalDriveIndex, a9999ComponentId=a9999ComponentId, a49RemovableDrive=a49RemovableDrive, a9999ErrorStatus=a9999ErrorStatus, a49DiskIndex=a49DiskIndex, eMassStoreLogicalDrivesTable=eMassStoreLogicalDrivesTable, a9999ErrorTime=a9999ErrorTime, a100EventGenerationGroupClass=a100EventGenerationGroupClass, DmiInteger=DmiInteger, a239AssociatedGroup=a239AssociatedGroup, a239EventSystem=a239EventSystem, a1Manufacturer=a1Manufacturer, a9999ErrorInstanceId=a9999ErrorInstanceId, a99MibName=a99MibName, a238EventStateKey=a238EventStateKey, a49InterfaceDescription=a49InterfaceDescription, a49FruGroupIndex=a49FruGroupIndex, a45ControllerSoftwareRevisionLevel=a45ControllerSoftwareRevisionLevel, a49NumberOfPhysicalCylinders=a49NumberOfPhysicalCylinders, a49NumberOfPhysicalHeads=a49NumberOfPhysicalHeads, a9999InstanceId=a9999InstanceId, DmiDisplaystring=DmiDisplaystring, a1SerialNumber=a1SerialNumber, a238AssociatedGroup=a238AssociatedGroup, a9999ParentInstanceId=a9999ParentInstanceId, DmiDateX=DmiDateX, intel=intel, a87ParentDrive=a87ParentDrive, a88DriveKey2=a88DriveKey2, tEventGenerationForMassStoreLogicalDrive=tEventGenerationForMassStoreLogicalDrive, a85DriveArrayOperationInProgress=a85DriveArrayOperationInProgress, eTrapGroup=eTrapGroup, a45OperationalGroupIndex=a45OperationalGroupIndex, tEventGenerationForDiskController=tEventGenerationForDiskController, tMassStoreMappingTable=tMassStoreMappingTable, tEventState=tEventState, a86LogicalDriveSizeInKb=a86LogicalDriveSizeInKb, a244EventSeverity=a244EventSeverity, a238EventType=a238EventType, a238EventSeverity=a238EventSeverity, a49RemovableMedia=a49RemovableMedia, a9999VendorCode1=a9999VendorCode1, a239EventSubsystem=a239EventSubsystem, a9999VendorText=a9999VendorText, a238EventSubsystem=a238EventSubsystem, eMassStoreSegmentTable=eMassStoreSegmentTable, a1Installation=a1Installation, a238IsEventState_based=a238IsEventState_based, a238EventSystem=a238EventSystem, a88SegmentType=a88SegmentType, a244EventSystem=a244EventSystem, a99MibOid=a99MibOid, a88SegmentStart=a88SegmentStart, a86TopOfHierarchy=a86TopOfHierarchy, eDiskController=eDiskController)
