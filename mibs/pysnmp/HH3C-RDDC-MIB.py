#
# PySNMP MIB module HH3C-RDDC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-RDDC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:16:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, ifDescr = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifDescr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, ModuleIdentity, TimeTicks, Gauge32, MibIdentifier, Bits, Unsigned32, IpAddress, iso, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "ModuleIdentity", "TimeTicks", "Gauge32", "MibIdentifier", "Bits", "Unsigned32", "IpAddress", "iso", "Counter32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hh3cRddc = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 151))
hh3cRddc.setRevisions(('2014-01-03 00:00',))
if mibBuilder.loadTexts: hh3cRddc.setLastUpdated('201401030000Z')
if mibBuilder.loadTexts: hh3cRddc.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
hh3cRddcNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 151, 0))
hh3cRddcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1))
hh3cRddcInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 1))
hh3cRddcTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 2))
hh3cRddcTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 1, 1), )
if mibBuilder.loadTexts: hh3cRddcTable.setStatus('current')
hh3cRddcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 1, 1, 1), ).setIndexNames((0, "HH3C-RDDC-MIB", "hh3cRddcGroupIdx"))
if mibBuilder.loadTexts: hh3cRddcEntry.setStatus('current')
hh3cRddcGroupIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 1, 1, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cRddcGroupIdx.setStatus('current')
hh3cRddcGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRddcGroupName.setStatus('current')
hh3cRddcPreempTimeRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 1, 1, 1, 3), Unsigned32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRddcPreempTimeRemain.setStatus('current')
hh3cRddcPreempTimeConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 1, 1, 1, 4), Unsigned32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRddcPreempTimeConfig.setStatus('current')
hh3cRddcHoldTimeRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 1, 1, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRddcHoldTimeRemain.setStatus('current')
hh3cRddcHoldTimeConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 1, 1, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRddcHoldTimeConfig.setStatus('current')
hh3cRddcNodeTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 1, 2), )
if mibBuilder.loadTexts: hh3cRddcNodeTable.setStatus('current')
hh3cRddcNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 1, 2, 1), ).setIndexNames((0, "HH3C-RDDC-MIB", "hh3cRddcNodeGroupIdx"), (0, "HH3C-RDDC-MIB", "hh3cRddcNodeId"))
if mibBuilder.loadTexts: hh3cRddcNodeEntry.setStatus('current')
hh3cRddcNodeGroupIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cRddcNodeGroupIdx.setStatus('current')
hh3cRddcNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 1, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hh3cRddcNodeId.setStatus('current')
hh3cRddcNodeBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("chassis", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRddcNodeBindType.setStatus('current')
hh3cRddcNodeBindInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRddcNodeBindInfo.setStatus('current')
hh3cRddcNodePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRddcNodePriority.setStatus('current')
hh3cRddcNodeWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRddcNodeWeight.setStatus('current')
hh3cRddcNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("master", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRddcNodeStatus.setStatus('current')
hh3cRddcNodeInfo = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cRddcNodeInfo.setStatus('current')
hh3cRddcSwitchReason = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 151, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cRddcSwitchReason.setStatus('current')
hh3cRddcSwitchoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 151, 0, 1)).setObjects(("HH3C-RDDC-MIB", "hh3cRddcGroupIdx"), ("HH3C-RDDC-MIB", "hh3cRddcGroupName"), ("HH3C-RDDC-MIB", "hh3cRddcNodeInfo"), ("HH3C-RDDC-MIB", "hh3cRddcSwitchReason"))
if mibBuilder.loadTexts: hh3cRddcSwitchoverTrap.setStatus('current')
hh3cRddcFailIfRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 151, 0, 2)).setObjects(("HH3C-RDDC-MIB", "hh3cRddcGroupIdx"), ("HH3C-RDDC-MIB", "hh3cRddcGroupName"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cRddcFailIfRecoverTrap.setStatus('current')
hh3cRddcFailIfGenerateTrap = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 151, 0, 3)).setObjects(("HH3C-RDDC-MIB", "hh3cRddcGroupIdx"), ("HH3C-RDDC-MIB", "hh3cRddcGroupName"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cRddcFailIfGenerateTrap.setStatus('current')
mibBuilder.exportSymbols("HH3C-RDDC-MIB", hh3cRddcPreempTimeConfig=hh3cRddcPreempTimeConfig, hh3cRddcNodeId=hh3cRddcNodeId, hh3cRddcHoldTimeConfig=hh3cRddcHoldTimeConfig, hh3cRddcNotifications=hh3cRddcNotifications, hh3cRddcInfo=hh3cRddcInfo, hh3cRddcNodeGroupIdx=hh3cRddcNodeGroupIdx, hh3cRddcSwitchoverTrap=hh3cRddcSwitchoverTrap, hh3cRddcGroupName=hh3cRddcGroupName, hh3cRddcNodeBindType=hh3cRddcNodeBindType, hh3cRddcObjects=hh3cRddcObjects, hh3cRddcGroupIdx=hh3cRddcGroupIdx, hh3cRddcSwitchReason=hh3cRddcSwitchReason, hh3cRddcNodeEntry=hh3cRddcNodeEntry, hh3cRddcHoldTimeRemain=hh3cRddcHoldTimeRemain, hh3cRddc=hh3cRddc, hh3cRddcNodeInfo=hh3cRddcNodeInfo, hh3cRddcNodeTable=hh3cRddcNodeTable, hh3cRddcFailIfRecoverTrap=hh3cRddcFailIfRecoverTrap, PYSNMP_MODULE_ID=hh3cRddc, hh3cRddcNodeBindInfo=hh3cRddcNodeBindInfo, hh3cRddcNodeWeight=hh3cRddcNodeWeight, hh3cRddcNodeStatus=hh3cRddcNodeStatus, hh3cRddcTrapObjects=hh3cRddcTrapObjects, hh3cRddcTable=hh3cRddcTable, hh3cRddcNodePriority=hh3cRddcNodePriority, hh3cRddcFailIfGenerateTrap=hh3cRddcFailIfGenerateTrap, hh3cRddcPreempTimeRemain=hh3cRddcPreempTimeRemain, hh3cRddcEntry=hh3cRddcEntry)
