#
# PySNMP MIB module CENTILLION-CONFIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CENTILLION-CONFIG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:30:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
MacAddress, StatusIndicator, sysConfig, BitField, EnableIndicator = mibBuilder.importSymbols("CENTILLION-ROOT-MIB", "MacAddress", "StatusIndicator", "sysConfig", "BitField", "EnableIndicator")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, IpAddress, NotificationType, ObjectIdentity, Integer32, TimeTicks, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, Unsigned32, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "NotificationType", "ObjectIdentity", "Integer32", "TimeTicks", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "Unsigned32", "Counter64", "Bits")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4095)

sysTableConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 1))
sysImgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 2))
sysMcpRedundInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 3))
sysNetProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 14))
sysTFTPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 18))
sysSNMPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 19))
netbiosGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21))
lnmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 25))
sysIpProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 14, 1))
sysImgGbl = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 2, 1))
sysImgGblInvokeSrc = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysImgGblInvokeSrc.setStatus('mandatory')
sysImgGblLoadDst = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("location1", 2), ("location2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysImgGblLoadDst.setStatus('mandatory')
sysImgTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 2, 2), )
if mibBuilder.loadTexts: sysImgTable.setStatus('mandatory')
sysImgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 2, 2, 1), ).setIndexNames((0, "CENTILLION-CONFIG-MIB", "sysImgIndx"))
if mibBuilder.loadTexts: sysImgEntry.setStatus('mandatory')
sysImgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysImgIndx.setStatus('mandatory')
sysImgVer = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysImgVer.setStatus('mandatory')
sysImgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("good", 2), ("bad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysImgStatus.setStatus('mandatory')
sysMcpRedundGbl = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 3, 1))
sysMcpRedundNxtGblState = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMcpRedundNxtGblState.setStatus('mandatory')
sysMcpRedundTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 3, 2), )
if mibBuilder.loadTexts: sysMcpRedundTable.setStatus('mandatory')
sysMcpRedundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 3, 2, 1), ).setIndexNames((0, "CENTILLION-CONFIG-MIB", "sysMcpRedundIndx"))
if mibBuilder.loadTexts: sysMcpRedundEntry.setStatus('mandatory')
sysMcpRedundIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMcpRedundIndx.setStatus('mandatory')
sysMcpRedundPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMcpRedundPriority.setStatus('mandatory')
sysMcpRedundType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("regular", 2), ("primary", 3), ("secondary", 4), ("switching", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMcpRedundType.setStatus('mandatory')
sysMcpRedundOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMcpRedundOperState.setStatus('mandatory')
sysMcpRedundCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("user-enable", 2), ("user-disable", 3), ("default-enable", 4), ("default-disable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMcpRedundCfgStatus.setStatus('mandatory')
rifTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 5), )
if mibBuilder.loadTexts: rifTable.setStatus('mandatory')
rifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 5, 1), ).setIndexNames((0, "CENTILLION-CONFIG-MIB", "rifPath"))
if mibBuilder.loadTexts: rifEntry.setStatus('mandatory')
rifPath = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rifPath.setStatus('mandatory')
rifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rifIndex.setStatus('mandatory')
rifInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 5, 1, 3), BitField()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rifInUse.setStatus('mandatory')
rifCount = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rifCount.setStatus('mandatory')
rifLength = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rifLength.setStatus('mandatory')
rifNext = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rifNext.setStatus('mandatory')
rifPrevious = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rifPrevious.setStatus('mandatory')
systemMaxPacketInfoSize = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(516, 17800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemMaxPacketInfoSize.setStatus('mandatory')
systemConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("transparentSwitchingNoSTP", 2), ("source-route-bridging", 3), ("transparent-bridging", 4), ("noVirtualRingBridging", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigMode.setStatus('mandatory')
systemConfigIpOption = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("eraseIP", 2), ("preservedIP", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigIpOption.setStatus('mandatory')
maxPerfMode = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 8), EnableIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxPerfMode.setStatus('mandatory')
configSave = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 10), BitField()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSave.setStatus('mandatory')
localAdminMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 12), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localAdminMacAddress.setStatus('mandatory')
configLogin = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configLogin.setStatus('mandatory')
configProtocol = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("flash", 1), ("tftpNoSave", 2), ("tftpSave", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configProtocol.setStatus('mandatory')
configFilename = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFilename.setStatus('mandatory')
configSource = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flashConfig", 1), ("remoteConfig", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configSource.setStatus('mandatory')
sonmpTrConfig = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonmpTrConfig.setStatus('mandatory')
sonmpTrSpeed = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("topFast", 2), ("topSlow", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonmpTrSpeed.setStatus('mandatory')
srUnknownFrameFlood = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 32), EnableIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srUnknownFrameFlood.setStatus('mandatory')
srbIeeeBpduEnable = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 33), EnableIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srbIeeeBpduEnable.setStatus('mandatory')
tbRifProxyEnable = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 34), EnableIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tbRifProxyEnable.setStatus('mandatory')
cpuClkRate = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mhz66", 1), ("mhz85", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuClkRate.setStatus('mandatory')
maxRids = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxRids.setStatus('mandatory')
sysAddr = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 14, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAddr.setStatus('deprecated')
sysNetMask = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 14, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysNetMask.setStatus('deprecated')
sysBcastAddr = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 14, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBcastAddr.setStatus('deprecated')
defaultGatewayAddr = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 14, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultGatewayAddr.setStatus('deprecated')
configServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 14, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configServerAddr.setStatus('mandatory')
ipConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flash", 1), ("bootp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipConfigProtocol.setStatus('deprecated')
ipHostNumber = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipHostNumber.setStatus('mandatory')
ipHostTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 14, 1, 8), )
if mibBuilder.loadTexts: ipHostTable.setStatus('mandatory')
ipHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 14, 1, 8, 1), ).setIndexNames((0, "CENTILLION-CONFIG-MIB", "ipHostIndex"))
if mibBuilder.loadTexts: ipHostEntry.setStatus('mandatory')
ipHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 14, 1, 8, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHostIndex.setStatus('mandatory')
ipHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 14, 1, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHostAddress.setStatus('mandatory')
ipHostNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 14, 1, 8, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHostNetMask.setStatus('mandatory')
ipHostBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 14, 1, 8, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHostBcastAddr.setStatus('mandatory')
ipHostDefaultGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 14, 1, 8, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHostDefaultGatewayAddr.setStatus('mandatory')
ipHostConfigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 14, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flash", 1), ("bootp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHostConfigProtocol.setStatus('mandatory')
ipHostEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 14, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHostEnable.setStatus('mandatory')
ipHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 14, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipHostType.setStatus('mandatory')
sysTFTPStart = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tftpNoTransfer", 1), ("tftpGet", 2), ("tftpPut", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTFTPStart.setStatus('mandatory')
sysTFTPIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 18, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTFTPIpAddress.setStatus('mandatory')
sysTFTPFileName = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 18, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTFTPFileName.setStatus('mandatory')
sysTFTPFileType = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configuration", 1), ("imageCode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTFTPFileType.setStatus('mandatory')
sysTFTPResult = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 18, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("clear", 1), ("xferInProgress", 2), ("okay", 3), ("otherTFTPError", 4), ("fileNotFound", 5), ("accessError", 6), ("diskFull", 7), ("illegalTFTPOperation", 8), ("invalidTFTPTransactionID", 9), ("fileExists", 10), ("noSuchUser", 11), ("noResources", 12), ("noResponse", 13), ("flashError", 14), ("configMismatch", 15), ("configChecksumError", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTFTPResult.setStatus('mandatory')
sysSNMPGetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 19, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNMPGetCommunity.setStatus('mandatory')
sysSNMPSetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 19, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNMPSetCommunity.setStatus('mandatory')
sysSNMPEnableTraps = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 19, 3), EnableIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNMPEnableTraps.setStatus('mandatory')
sysSNMPTrapIPReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 19, 4), )
if mibBuilder.loadTexts: sysSNMPTrapIPReceiverTable.setStatus('mandatory')
sysSNMPTrapIPReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 19, 4, 1), ).setIndexNames((0, "CENTILLION-CONFIG-MIB", "trapIPRcvrAddress"))
if mibBuilder.loadTexts: sysSNMPTrapIPReceiverEntry.setStatus('mandatory')
trapIPRcvrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 19, 4, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIPRcvrAddress.setStatus('mandatory')
trapIPRcvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 19, 4, 1, 2), StatusIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIPRcvrStatus.setStatus('mandatory')
trapIPRcvrCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 19, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIPRcvrCommunity.setStatus('mandatory')
sysMgmtRingNumber = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMgmtRingNumber.setStatus('mandatory')
netbiosNameTableAgingTimer = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netbiosNameTableAgingTimer.setStatus('mandatory')
netbiosNameQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netbiosNameQueryInterval.setStatus('mandatory')
netbiosNameTableFlush = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 3), BitField()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netbiosNameTableFlush.setStatus('mandatory')
netbiosNameTableEntry = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 4), )
if mibBuilder.loadTexts: netbiosNameTableEntry.setStatus('deprecated')
netbiosNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 4, 1), ).setIndexNames((0, "CENTILLION-CONFIG-MIB", "netbiosNameName"))
if mibBuilder.loadTexts: netbiosNameEntry.setStatus('deprecated')
netbiosNameName = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbiosNameName.setStatus('deprecated')
netbiosNameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 4, 1, 2), StatusIndicator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbiosNameStatus.setStatus('deprecated')
netbiosNameStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 4, 1, 3), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbiosNameStationAddress.setStatus('deprecated')
netbiosNameVirtualRingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbiosNameVirtualRingNumber.setStatus('deprecated')
netbiosNameCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbiosNameCardNumber.setStatus('deprecated')
netbiosNamePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbiosNamePortNumber.setStatus('deprecated')
netbiosNamePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("token-ring", 2), ("fddi", 3), ("ethernet", 4), ("atm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbiosNamePortType.setStatus('deprecated')
netbiosNameAge = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 4, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbiosNameAge.setStatus('deprecated')
netbiosNameProxies = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbiosNameProxies.setStatus('deprecated')
netbiosNameSuppressedQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netbiosNameSuppressedQueries.setStatus('deprecated')
cnnetbiosNameTableEntry = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 5), )
if mibBuilder.loadTexts: cnnetbiosNameTableEntry.setStatus('mandatory')
cnnetbiosNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 5, 1), ).setIndexNames((0, "CENTILLION-CONFIG-MIB", "cnnetbiosNameVlanId"), (0, "CENTILLION-CONFIG-MIB", "cnnetbiosNameName"))
if mibBuilder.loadTexts: cnnetbiosNameEntry.setStatus('mandatory')
cnnetbiosNameName = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnnetbiosNameName.setStatus('mandatory')
cnnetbiosNameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 5, 1, 2), StatusIndicator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnnetbiosNameStatus.setStatus('mandatory')
cnnetbiosNameStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 5, 1, 3), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnnetbiosNameStationAddress.setStatus('mandatory')
cnnetbiosNameVirtualRingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnnetbiosNameVirtualRingNumber.setStatus('mandatory')
cnnetbiosNameCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnnetbiosNameCardNumber.setStatus('mandatory')
cnnetbiosNamePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnnetbiosNamePortNumber.setStatus('mandatory')
cnnetbiosNameVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 5, 1, 7), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnnetbiosNameVlanId.setStatus('mandatory')
cnnetbiosNamePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("token-ring", 2), ("fddi", 3), ("ethernet", 4), ("atm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnnetbiosNamePortType.setStatus('mandatory')
cnnetbiosNameAge = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 5, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnnetbiosNameAge.setStatus('mandatory')
cnnetbiosNameProxies = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnnetbiosNameProxies.setStatus('mandatory')
cnnetbiosNameSuppressedQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 21, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnnetbiosNameSuppressedQueries.setStatus('mandatory')
lnmOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnmOperStatus.setStatus('mandatory')
lnmAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 25, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lnmAdminStatus.setStatus('mandatory')
lnmBridgeGroupDisplayMode = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 25, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aggregate", 1), ("separate", 2))).clone('aggregate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lnmBridgeGroupDisplayMode.setStatus('mandatory')
lnmLinkPassword = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 25, 4), EnableIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lnmLinkPassword.setStatus('mandatory')
mibBuilder.exportSymbols("CENTILLION-CONFIG-MIB", sysTFTPStart=sysTFTPStart, sysTFTPIpAddress=sysTFTPIpAddress, sysMgmtRingNumber=sysMgmtRingNumber, netbiosNameStatus=netbiosNameStatus, cnnetbiosNameStatus=cnnetbiosNameStatus, cnnetbiosNameCardNumber=cnnetbiosNameCardNumber, sysImgTable=sysImgTable, sysMcpRedundType=sysMcpRedundType, ipHostNumber=ipHostNumber, lnmLinkPassword=lnmLinkPassword, systemConfigIpOption=systemConfigIpOption, sysMcpRedundIndx=sysMcpRedundIndx, cnnetbiosNameEntry=cnnetbiosNameEntry, configSave=configSave, cnnetbiosNamePortNumber=cnnetbiosNamePortNumber, sysSNMPTrapIPReceiverEntry=sysSNMPTrapIPReceiverEntry, netbiosNameTableAgingTimer=netbiosNameTableAgingTimer, ipConfigProtocol=ipConfigProtocol, cnnetbiosNamePortType=cnnetbiosNamePortType, cnnetbiosNameAge=cnnetbiosNameAge, rifPrevious=rifPrevious, netbiosNameAge=netbiosNameAge, sysTFTPResult=sysTFTPResult, ipHostNetMask=ipHostNetMask, sysTFTPFileType=sysTFTPFileType, rifEntry=rifEntry, lnmAdminStatus=lnmAdminStatus, netbiosNameStationAddress=netbiosNameStationAddress, sysMcpRedundTable=sysMcpRedundTable, sysImgGblLoadDst=sysImgGblLoadDst, configFilename=configFilename, cnnetbiosNameStationAddress=cnnetbiosNameStationAddress, sysMcpRedundOperState=sysMcpRedundOperState, cnnetbiosNameVirtualRingNumber=cnnetbiosNameVirtualRingNumber, systemConfigMode=systemConfigMode, sysImgEntry=sysImgEntry, ipHostEntry=ipHostEntry, configSource=configSource, sysAddr=sysAddr, rifInUse=rifInUse, cnnetbiosNameSuppressedQueries=cnnetbiosNameSuppressedQueries, srUnknownFrameFlood=srUnknownFrameFlood, lnmBridgeGroupDisplayMode=lnmBridgeGroupDisplayMode, configProtocol=configProtocol, trapIPRcvrStatus=trapIPRcvrStatus, sysSNMPTrapIPReceiverTable=sysSNMPTrapIPReceiverTable, netbiosNameQueryInterval=netbiosNameQueryInterval, sysMcpRedundGbl=sysMcpRedundGbl, tbRifProxyEnable=tbRifProxyEnable, trapIPRcvrCommunity=trapIPRcvrCommunity, netbiosNameProxies=netbiosNameProxies, lnmGroup=lnmGroup, rifPath=rifPath, sysTFTPGroup=sysTFTPGroup, rifTable=rifTable, ipHostAddress=ipHostAddress, sysIpProtocol=sysIpProtocol, configLogin=configLogin, ipHostBcastAddr=ipHostBcastAddr, ipHostEnable=ipHostEnable, sysImgInfo=sysImgInfo, cnnetbiosNameVlanId=cnnetbiosNameVlanId, srbIeeeBpduEnable=srbIeeeBpduEnable, netbiosGroup=netbiosGroup, sonmpTrSpeed=sonmpTrSpeed, netbiosNameSuppressedQueries=netbiosNameSuppressedQueries, sonmpTrConfig=sonmpTrConfig, cpuClkRate=cpuClkRate, ipHostTable=ipHostTable, rifCount=rifCount, cnnetbiosNameTableEntry=cnnetbiosNameTableEntry, netbiosNameVirtualRingNumber=netbiosNameVirtualRingNumber, ipHostIndex=ipHostIndex, rifLength=rifLength, rifNext=rifNext, sysSNMPEnableTraps=sysSNMPEnableTraps, sysTableConfig=sysTableConfig, maxRids=maxRids, ipHostConfigProtocol=ipHostConfigProtocol, sysNetProtocol=sysNetProtocol, sysImgGblInvokeSrc=sysImgGblInvokeSrc, trapIPRcvrAddress=trapIPRcvrAddress, netbiosNamePortType=netbiosNamePortType, netbiosNamePortNumber=netbiosNamePortNumber, sysTFTPFileName=sysTFTPFileName, sysSNMPSetCommunity=sysSNMPSetCommunity, sysNetMask=sysNetMask, netbiosNameCardNumber=netbiosNameCardNumber, cnnetbiosNameName=cnnetbiosNameName, netbiosNameName=netbiosNameName, sysMcpRedundNxtGblState=sysMcpRedundNxtGblState, sysSNMPGroup=sysSNMPGroup, systemMaxPacketInfoSize=systemMaxPacketInfoSize, cnnetbiosNameProxies=cnnetbiosNameProxies, sysMcpRedundInfo=sysMcpRedundInfo, sysBcastAddr=sysBcastAddr, sysImgStatus=sysImgStatus, lnmOperStatus=lnmOperStatus, netbiosNameTableFlush=netbiosNameTableFlush, maxPerfMode=maxPerfMode, VlanId=VlanId, ipHostDefaultGatewayAddr=ipHostDefaultGatewayAddr, netbiosNameTableEntry=netbiosNameTableEntry, sysSNMPGetCommunity=sysSNMPGetCommunity, sysImgGbl=sysImgGbl, netbiosNameEntry=netbiosNameEntry, sysMcpRedundEntry=sysMcpRedundEntry, rifIndex=rifIndex, ipHostType=ipHostType, configServerAddr=configServerAddr, sysMcpRedundPriority=sysMcpRedundPriority, sysImgIndx=sysImgIndx, defaultGatewayAddr=defaultGatewayAddr, localAdminMacAddress=localAdminMacAddress, sysImgVer=sysImgVer, sysMcpRedundCfgStatus=sysMcpRedundCfgStatus)
