#
# PySNMP MIB module SYMBIOSDMI20MIFDEFINITIONID20-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYMBIOSDMI20MIFDEFINITIONID20-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:06:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Unsigned32, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, IpAddress, enterprises, NotificationType, MibIdentifier, NotificationType, ObjectIdentity, Counter64, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "IpAddress", "enterprises", "NotificationType", "MibIdentifier", "NotificationType", "ObjectIdentity", "Counter64", "Counter32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DmiCounter(Counter32):
    pass

class DmiInteger(Integer32):
    pass

class DmiInteger64(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-18446744073709551615, 18446744073709551615)

class DmiDisplaystring(DisplayString):
    pass

class DmiDateX(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

symbios = MibIdentifier((1, 3, 6, 1, 4, 1, 1123))
cosprings = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3))
scsi = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3, 1))
fam8xx = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2))
id20 = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 1, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 1, 1, 5), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccurredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vTheVerifyIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
tSubcomponentSoftware = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2), )
if mibBuilder.loadTexts: tSubcomponentSoftware.setStatus('mandatory')
eSubcomponentSoftware = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a2SoftwareIndex"))
if mibBuilder.loadTexts: eSubcomponentSoftware.setStatus('mandatory')
a2SoftwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2SoftwareIndex.setStatus('mandatory')
a2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Type.setStatus('mandatory')
a2Vendor = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Vendor.setStatus('mandatory')
a2Version = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Version.setStatus('mandatory')
a2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Description.setStatus('mandatory')
a2IdentificationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2IdentificationCode.setStatus('mandatory')
a2LanguageEdition = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2LanguageEdition.setStatus('mandatory')
a2InterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2InterfaceDescription.setStatus('mandatory')
a2InterfaceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 2, 1, 9), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2InterfaceVersion.setStatus('mandatory')
tWorldwideIdentifer = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 3), )
if mibBuilder.loadTexts: tWorldwideIdentifer.setStatus('mandatory')
eWorldwideIdentifer = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 3, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a3WorldwideIdentifierIndex"))
if mibBuilder.loadTexts: eWorldwideIdentifer.setStatus('mandatory')
a3WorldwideIdentifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3WorldwideIdentifierIndex.setStatus('mandatory')
a3WorldwideIdentifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vVendorIdProductIdSerialNumber", 4), ("vIeeeExtendedUniqueIdentifier64-bit", 5), ("vFc-ph64-bitName-identifier", 6), ("vBinary", 7), ("vUnicode", 8), ("vLanMacAddress", 9), ("vWanAccessAddress", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3WorldwideIdentifierType.setStatus('mandatory')
a3WorldwideIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 3, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3WorldwideIdentifier.setStatus('mandatory')
tFieldReplaceableUnit = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4), )
if mibBuilder.loadTexts: tFieldReplaceableUnit.setStatus('mandatory')
eFieldReplaceableUnit = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a4FruIndex"))
if mibBuilder.loadTexts: eFieldReplaceableUnit.setStatus('mandatory')
a4FruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4FruIndex.setStatus('mandatory')
a4DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4DeviceGroupIndex.setStatus('mandatory')
a4Description = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Description.setStatus('mandatory')
a4Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Manufacturer.setStatus('mandatory')
a4Model = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Model.setStatus('mandatory')
a4PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4PartNumber.setStatus('mandatory')
a4FruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4FruSerialNumber.setStatus('mandatory')
a4RevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4RevisionLevel.setStatus('mandatory')
a4WarrantyStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 9), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4WarrantyStartDate.setStatus('mandatory')
a4WarrantyDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4WarrantyDuration.setStatus('mandatory')
a4SupportPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 11), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4SupportPhoneNumber.setStatus('mandatory')
a4FruInternetUniformResourceLocator = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 4, 1, 12), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4FruInternetUniformResourceLocator.setStatus('mandatory')
tStorageDevices = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5), )
if mibBuilder.loadTexts: tStorageDevices.setStatus('mandatory')
eStorageDevices = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a5StorageDeviceIndex"))
if mibBuilder.loadTexts: eStorageDevices.setStatus('mandatory')
a5StorageDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5StorageDeviceIndex.setStatus('mandatory')
a5Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRigidDiskDrive", 3), ("vFlexibleDisketteDrive", 4), ("vOpticalWrite-onceread-manyWormDrive", 6), ("vMagneto-opticalDrive", 7), ("vCompactDiskDrive", 8), ("vFlashDisk", 9), ("vCartridgeRigidDiskDrive", 10), ("vOpticalFloppyDiskDrive", 11), ("vTapeDrive", 12), ("vMediaChanger", 13), ("vSolidState", 14), ("vDigitalVersatileDiskDvdDrive", 15), ("vDigitalVersatileDiskDvdramRamDrive", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Type.setStatus('mandatory')
a5TypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5TypeDescription.setStatus('mandatory')
a5Sub_identifier = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 4), DmiDisplaystring()).setLabel("a5Sub-identifier").setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Sub_identifier.setStatus('mandatory')
a5MediaDataBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5MediaDataBlockSize.setStatus('mandatory')
a5FormattedMediaCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 6), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5FormattedMediaCapacity.setStatus('mandatory')
a5RemovableDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5RemovableDevice.setStatus('mandatory')
a5DeviceLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5DeviceLoaded.setStatus('mandatory')
a5RemovableMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5RemovableMedia.setStatus('mandatory')
a5MediaLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5MediaLoaded.setStatus('mandatory')
a5Compression = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Compression.setStatus('mandatory')
a5Encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Encryption.setStatus('mandatory')
tStorageDevicesEvents = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6), )
if mibBuilder.loadTexts: tStorageDevicesEvents.setStatus('mandatory')
eStorageDevicesEvents = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6AssociatedGroup"))
if mibBuilder.loadTexts: eStorageDevicesEvents.setStatus('mandatory')
a6StorageDevicesEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vRebuildInProgress", 1), ("vStorageDeviceReadying", 2), ("vStorageDeviceError", 3), ("vSelf-monitoringWarning", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6StorageDevicesEventType.setStatus('mandatory')
a6EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventSeverity.setStatus('mandatory')
a6EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventIsStateBased.setStatus('mandatory')
a6EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventStateKey.setStatus('mandatory')
a6AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6AssociatedGroup.setStatus('mandatory')
a6EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventSystem.setStatus('mandatory')
a6EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventSubsystem.setStatus('mandatory')
a6EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v1stCheckCabling2ndPowerCycleDeviceLas", 3), ("vBackupDataFromFailingDeviceAndReplaceTh", 4), ("vRunDiskAdministrator", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventSolution.setStatus('mandatory')
a6InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6InstanceDataPresent.setStatus('mandatory')
a6EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventMessage.setStatus('mandatory')
tStorageController = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 7), )
if mibBuilder.loadTexts: tStorageController.setStatus('mandatory')
eStorageController = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 7, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a7ControllerIndex"))
if mibBuilder.loadTexts: eStorageController.setStatus('mandatory')
a7ControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 7, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7ControllerIndex.setStatus('mandatory')
a7Identification = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 7, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7Identification.setStatus('mandatory')
a7ProtectionManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vUnprotected", 3), ("vProtected", 4), ("vProtectedThroughScsi-3ControllerCommand", 5), ("vProtectedThroughScsi-3ControllerComman1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7ProtectionManagement.setStatus('mandatory')
a7BusMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7BusMaster.setStatus('mandatory')
a7SecondsSinceLastPower_up = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 7, 1, 5), DmiInteger()).setLabel("a7SecondsSinceLastPower-up").setMaxAccess("readonly")
if mibBuilder.loadTexts: a7SecondsSinceLastPower_up.setStatus('mandatory')
tStorageControllerEvents = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8), )
if mibBuilder.loadTexts: tStorageControllerEvents.setStatus('mandatory')
eStorageControllerEvents = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8AssociatedGroup"))
if mibBuilder.loadTexts: eStorageControllerEvents.setStatus('mandatory')
a8StorageControllerEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vStorageControllerError", 1), ("vSelf-monitoringWarning1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8StorageControllerEventType.setStatus('mandatory')
a8EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventSeverity.setStatus('mandatory')
a8EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventIsStateBased.setStatus('mandatory')
a8EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventStateKey.setStatus('mandatory')
a8AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8AssociatedGroup.setStatus('mandatory')
a8EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventSystem.setStatus('mandatory')
a8EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventSubsystem.setStatus('mandatory')
a8EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v1stCheckCabling2ndPowerCycleSystemLas", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventSolution.setStatus('mandatory')
a8InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8InstanceDataPresent.setStatus('mandatory')
a8EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventMessage.setStatus('mandatory')
tBusPort = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9), )
if mibBuilder.loadTexts: tBusPort.setStatus('mandatory')
eBusPort = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a9BusPortIndex"))
if mibBuilder.loadTexts: eBusPort.setStatus('mandatory')
a9BusPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9BusPortIndex.setStatus('mandatory')
a9Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEisa", 3), ("vIsa", 4), ("vPci", 5), ("vAtaatapi", 6), ("vFlexibleDiskette", 7), ("v1496", 8), ("vScsiParallelInterface", 9), ("vScsiFibreChannelProtocol", 10), ("vScsiSerialBusProtocol", 11), ("vScsiSerialBusProtocol-21394", 12), ("vScsiSerialStorageArchitecture", 13), ("vVesa", 14), ("vPcmcia", 15), ("vUniversalSerialBus", 16), ("vParallelPort", 17), ("vEscon", 18), ("vDiagnostic", 19), ("vI2c", 20), ("vPower", 21), ("vHippi", 22), ("vMultibus", 23), ("vVme", 24), ("vIpi", 25), ("vIeee-488", 26), ("vRs232", 27), ("vIeee802310base5", 28), ("vIeee802310base2", 29), ("vIeee80231base5", 30), ("vIeee802310broad36", 31), ("vIeee8023100basevg", 32), ("vIeee8025Token-ring", 33), ("vAnsiX3t95Fddi", 34), ("vMca", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9Protocol.setStatus('mandatory')
a9ProtocolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ProtocolDescription.setStatus('mandatory')
a9SignalCharacteristics = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSingleEnded", 3), ("vDifferential", 4), ("vLowVoltageDifferential", 5), ("vOptical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9SignalCharacteristics.setStatus('mandatory')
a9AddressDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9AddressDescriptor.setStatus('mandatory')
a9Isochronous = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9Isochronous.setStatus('mandatory')
a9MaximumWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9MaximumWidth.setStatus('mandatory')
a9MaximumTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9MaximumTransferRate.setStatus('mandatory')
a9MaximumNumberOfAttachments = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9MaximumNumberOfAttachments.setStatus('mandatory')
a9ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vScsiAHigh-densityShielded50Pins", 4), ("vScsiAHigh-densityUnshielded50Pins", 5), ("vScsiALow-densityShielded50Pins", 6), ("vScsiALow-densityUnshielded50Pins", 7), ("vScsiPHigh-densityShielded68Pins", 8), ("vScsiPHigh-densityUnshielded68Pins", 9), ("vScsiSca-i80Pins", 10), ("vScsiSca-ii80Pins", 11), ("vScsiFibreChannelDb9Copper", 12), ("vScsiFibreChannelFibre", 13), ("vScsiFibreChannelSca-ii40Pins", 14), ("vScsiFibreChannelSca-ii20Pins", 15), ("vScsiFibreChannelBnc", 16), ("vAta3-12Inch40Pins", 17), ("vAta2-12Inch44Pins", 18), ("vSerial9Pin", 19), ("vSerial25Pin", 20), ("vRs23225Pin", 21), ("vRs422", 22), ("vIeee-488", 23), ("vAui", 24), ("vUptCategory3", 25), ("vUptCategory4", 26), ("vUptCategory5", 27), ("vBnc", 28), ("vStpRj11", 29), ("vStpRj45", 30), ("vStpDb9", 31), ("vFiberMic", 32), ("vAppleAui", 33), ("vPciSlot", 34), ("vIsaSlot", 35), ("vEisaSlot", 36), ("vVesaSlot", 37), ("vPcmciaSlot", 38), ("vPcCardSlot", 39), ("vFloppyDiskette5-14Inch", 40), ("vFloppyDiskette3-12Inch", 41), ("vHssdc6Pins", 42), ("vGbicSocket", 43), ("v13946Pins", 44), ("vScsiVhdciShielded68Pins", 45)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ConnectorType.setStatus('mandatory')
a9ConnectorTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 11), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ConnectorTypeDescription.setStatus('mandatory')
a9ConnectorGender = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vFemale", 3), ("vMale", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ConnectorGender.setStatus('mandatory')
tFibreChannelBusPortExtensions = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 10), )
if mibBuilder.loadTexts: tFibreChannelBusPortExtensions.setStatus('mandatory')
eFibreChannelBusPortExtensions = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 10, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a10BusPortIndex"))
if mibBuilder.loadTexts: eFibreChannelBusPortExtensions.setStatus('mandatory')
a10BusPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 10, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10BusPortIndex.setStatus('mandatory')
a10EndToEndCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 10, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10EndToEndCredit.setStatus('mandatory')
a10BufferToBufferCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 10, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10BufferToBufferCredit.setStatus('mandatory')
a10LinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vCopper", 3), ("vFibre-SingleMode1300Nanometers", 4), ("vFibre-SingleMode1500Nanometers", 5), ("vFibre-Multimode50-Laser", 6), ("vFibre-Multimode50-Led", 7), ("vFibre-Multimode625-Laser", 8), ("vFibre-Multimode625-Led", 9), ("vFibreLongWave", 10), ("vFibreShortWave", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10LinkType.setStatus('mandatory')
a10FlowControlClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vClass-1", 3), ("vClass-2", 4), ("vClass-3", 5), ("vClass-1class-2", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10FlowControlClassType.setStatus('mandatory')
a10FlowControlAcknowledgmentType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vAck-0", 3), ("vAck-1", 4), ("vAck-n", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10FlowControlAcknowledgmentType.setStatus('mandatory')
a10FabricTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10FabricTopology.setStatus('mandatory')
tMassStorageAssociation = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 11), )
if mibBuilder.loadTexts: tMassStorageAssociation.setStatus('mandatory')
eMassStorageAssociation = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 11, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a11AssociationIndex"))
if mibBuilder.loadTexts: eMassStorageAssociation.setStatus('mandatory')
a11AssociationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 11, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11AssociationIndex.setStatus('mandatory')
a11Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 11, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11Type.setStatus('mandatory')
a11Reference1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 11, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11Reference1.setStatus('mandatory')
a11Reference2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 11, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11Reference2.setStatus('mandatory')
tMassStorageAssociationEvents = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12), )
if mibBuilder.loadTexts: tMassStorageAssociationEvents.setStatus('mandatory')
eMassStorageAssociationEvents = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12AssociatedGroup"))
if mibBuilder.loadTexts: eMassStorageAssociationEvents.setStatus('mandatory')
a12MassStorageAssociationEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vNewObjectDetected", 1), ("vExistingObjectReplaced", 2), ("vExistingObjectGone", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12MassStorageAssociationEventType.setStatus('mandatory')
a12EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventSeverity.setStatus('mandatory')
a12EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventIsStateBased.setStatus('mandatory')
a12EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventStateKey.setStatus('mandatory')
a12AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12AssociatedGroup.setStatus('mandatory')
a12EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1), ("vStorageController", 2), ("vStorageDevice", 3), ("vBusPort", 4), ("vVolumeSet", 5), ("vProtectedSpaceExtent", 6), ("vAggregateProtectedSpaceExtent", 7), ("vPhysicalExtent", 8), ("vAggregatePhysicalExtent", 9), ("vRedundancyGroup", 10), ("vCache", 11), ("vSoftwareSubcomponent", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventSystem.setStatus('mandatory')
a12EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventSubsystem.setStatus('mandatory')
a12EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNoActionIsRequired", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventSolution.setStatus('mandatory')
a12InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12InstanceDataPresent.setStatus('mandatory')
a12EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventMessage.setStatus('mandatory')
tBusPortAssociation = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 13), )
if mibBuilder.loadTexts: tBusPortAssociation.setStatus('mandatory')
eBusPortAssociation = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 13, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a13BusPortAssociationIndex"))
if mibBuilder.loadTexts: eBusPortAssociation.setStatus('mandatory')
a13BusPortAssociationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 13, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13BusPortAssociationIndex.setStatus('mandatory')
a13NegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 13, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13NegotiatedSpeed.setStatus('mandatory')
a13NegotiatedWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 13, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13NegotiatedWidth.setStatus('mandatory')
tOperationalState = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14), )
if mibBuilder.loadTexts: tOperationalState.setStatus('mandatory')
eOperationalState = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a14OperationalStateInstanceIndex"))
if mibBuilder.loadTexts: eOperationalState.setStatus('mandatory')
a14OperationalStateInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14OperationalStateInstanceIndex.setStatus('mandatory')
a14DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14DeviceGroupIndex.setStatus('mandatory')
a14OperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEnabled", 3), ("vDisabled", 4), ("vNotApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14OperationalStatus.setStatus('mandatory')
a14UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIdle", 3), ("vActive", 4), ("vBusy", 5), ("vNotApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14UsageState.setStatus('mandatory')
a14AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRunning", 3), ("vWarning", 4), ("vInTest", 5), ("vNotApplicable", 6), ("vPowerOff", 7), ("vOffLine", 8), ("vOffDuty", 9), ("vDegraded", 10), ("vNotInstalled", 11), ("vInstallError", 12), ("vPowerSave", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14AvailabilityStatus.setStatus('mandatory')
a14AdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLocked", 3), ("vUnlocked", 4), ("vNotApplicable", 5), ("vShuttingDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14AdministrativeState.setStatus('mandatory')
a14FatalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14FatalErrorCount.setStatus('mandatory')
a14MajorErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 8), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14MajorErrorCount.setStatus('mandatory')
a14WarningErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 9), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14WarningErrorCount.setStatus('mandatory')
a14CurrentErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical1", 4), ("vCritical", 5), ("vNon-recoverable1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14CurrentErrorStatus.setStatus('mandatory')
a14DevicePredictedFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNotSupportedByThisDevice", 3), ("vNoFailurePredictedByTheDevice", 4), ("vDeviceFailurePredictedByTheDevice", 5), ("vMediaFailurePredictedByTheDevice", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14DevicePredictedFailureStatus.setStatus('mandatory')
tSymbiosEventPolling = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 15), )
if mibBuilder.loadTexts: tSymbiosEventPolling.setStatus('mandatory')
eSymbiosEventPolling = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 15, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eSymbiosEventPolling.setStatus('mandatory')
a15SymbiosFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 15, 1, 1), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a15SymbiosFlag.setStatus('mandatory')
a15SmartEventPolling = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vDisabled", 0), ("vEnabled", 1), ("vUnknown", 2), ("vNotApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a15SmartEventPolling.setStatus('mandatory')
a15ScanEventPolling = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vDisabled", 0), ("vEnabled", 1), ("vUnknown", 2), ("vNotApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a15ScanEventPolling.setStatus('mandatory')
a15Saf_teEventPolling = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vDisabled", 0), ("vEnabled", 1), ("vUnknown", 2), ("vNotApplicable", 3)))).setLabel("a15Saf-teEventPolling").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a15Saf_teEventPolling.setStatus('mandatory')
a15EventPollingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 15, 1, 5), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a15EventPollingPeriod.setStatus('mandatory')
tSymbiosSmartDevice = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 16), )
if mibBuilder.loadTexts: tSymbiosSmartDevice.setStatus('mandatory')
eSymbiosSmartDevice = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 16, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a16SymSmartDeviceIndex"))
if mibBuilder.loadTexts: eSymbiosSmartDevice.setStatus('mandatory')
a16SymSmartDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 16, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a16SymSmartDeviceIndex.setStatus('mandatory')
a16SmartReportingCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vDisabled", 0), ("vEnabled", 1), ("vUnknown", 2), ("vNotSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a16SmartReportingCapability.setStatus('mandatory')
tSaf_teProcessor = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17), ).setLabel("tSaf-teProcessor")
if mibBuilder.loadTexts: tSaf_teProcessor.setStatus('mandatory')
eSaf_teProcessor = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1), ).setLabel("eSaf-teProcessor").setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a17Saf-teProcessorIndex"))
if mibBuilder.loadTexts: eSaf_teProcessor.setStatus('mandatory')
a17Saf_teProcessorIndex = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 1), DmiInteger()).setLabel("a17Saf-teProcessorIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Saf_teProcessorIndex.setStatus('mandatory')
a17StorageControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17StorageControllerIndex.setStatus('mandatory')
a17ScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 3), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17ScsiId.setStatus('mandatory')
a17ScsiLun = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 4), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17ScsiLun.setStatus('mandatory')
a17VendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17VendorId.setStatus('mandatory')
a17ProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17ProductId.setStatus('mandatory')
a17FirmwareRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17FirmwareRevisionLevel.setStatus('mandatory')
a17EnclosureUniqueIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17EnclosureUniqueIdentifier.setStatus('mandatory')
a17Saf_teSpecificationRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 9), DmiDisplaystring()).setLabel("a17Saf-teSpecificationRevisionLevel").setMaxAccess("readonly")
if mibBuilder.loadTexts: a17Saf_teSpecificationRevisionLevel.setStatus('mandatory')
a17HasLocks = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17HasLocks.setStatus('mandatory')
a17HasSpeakers = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17HasSpeakers.setStatus('mandatory')
a17DoorLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17DoorLocked.setStatus('mandatory')
a17SpeakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17SpeakerStatus.setStatus('mandatory')
a17PowerOnMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17PowerOnMinutes.setStatus('mandatory')
a17PowerOnCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17PowerOnCycles.setStatus('mandatory')
a17TemperatureOutOfRange = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 17, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a17TemperatureOutOfRange.setStatus('mandatory')
tSaf_teControlledFan = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 18), ).setLabel("tSaf-teControlledFan")
if mibBuilder.loadTexts: tSaf_teControlledFan.setStatus('mandatory')
eSaf_teControlledFan = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 18, 1), ).setLabel("eSaf-teControlledFan").setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a18Saf-teControlledFanIndex"))
if mibBuilder.loadTexts: eSaf_teControlledFan.setStatus('mandatory')
a18Saf_teControlledFanIndex = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 18, 1, 1), DmiInteger()).setLabel("a18Saf-teControlledFanIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: a18Saf_teControlledFanIndex.setStatus('mandatory')
a18Saf_teProcessorIndex = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 18, 1, 2), DmiInteger()).setLabel("a18Saf-teProcessorIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: a18Saf_teProcessorIndex.setStatus('mandatory')
a18Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 128))).clone(namedValues=NamedValues(("vFanIsOperational", 0), ("vFanIsMalfunctioning", 1), ("vFanIsNotInstalled", 2), ("vUnknownStatus", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a18Status.setStatus('mandatory')
tSaf_teControlledPowerSupply = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 19), ).setLabel("tSaf-teControlledPowerSupply")
if mibBuilder.loadTexts: tSaf_teControlledPowerSupply.setStatus('mandatory')
eSaf_teControlledPowerSupply = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 19, 1), ).setLabel("eSaf-teControlledPowerSupply").setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a19Saf-teControlledPowerSupplyIndex"))
if mibBuilder.loadTexts: eSaf_teControlledPowerSupply.setStatus('mandatory')
a19Saf_teControlledPowerSupplyIndex = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 19, 1, 1), DmiInteger()).setLabel("a19Saf-teControlledPowerSupplyIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: a19Saf_teControlledPowerSupplyIndex.setStatus('mandatory')
a19Saf_teProcessorIndex = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 19, 1, 2), DmiInteger()).setLabel("a19Saf-teProcessorIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: a19Saf_teProcessorIndex.setStatus('mandatory')
a19Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 16, 17, 32, 33, 128))).clone(namedValues=NamedValues(("vPowerSupplyIsOperationalAndOn", 0), ("vPowerSupplyIsOperationalAndOff", 1), ("vPowerSupplyIsMalfunctioningAndCommanded", 16), ("vPowerSupplyIsMalfunctioningAndCommande1", 17), ("vPowerSupplyIsNotPresent", 32), ("vPowerSupplyIsPresent", 33), ("vUnknownStatus", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a19Status.setStatus('mandatory')
tSaf_teControlledSlot = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20), ).setLabel("tSaf-teControlledSlot")
if mibBuilder.loadTexts: tSaf_teControlledSlot.setStatus('mandatory')
eSaf_teControlledSlot = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1), ).setLabel("eSaf-teControlledSlot").setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a20Saf-teControlledSlotIndex"))
if mibBuilder.loadTexts: eSaf_teControlledSlot.setStatus('mandatory')
a20Saf_teControlledSlotIndex = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 1), DmiInteger()).setLabel("a20Saf-teControlledSlotIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: a20Saf_teControlledSlotIndex.setStatus('mandatory')
a20Saf_teProcessorIndex = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 2), DmiInteger()).setLabel("a20Saf-teProcessorIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: a20Saf_teProcessorIndex.setStatus('mandatory')
a20ScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 3), DmiInteger64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20ScsiId.setStatus('mandatory')
a20NumberOfInsertions = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20NumberOfInsertions.setStatus('mandatory')
a20State = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("vDevicePresent-Ready", 1), ("vDevicePresent-NotReady", 2), ("vDevicePresent-HotSpare", 3), ("vDevicePresent-ReadyForRemoval", 4), ("vDeviceNotPresent", 5), ("vDeviceNotPresent-ReadyForInsertion", 6), ("vUnconfigured", 7), ("vUnknownState", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20State.setStatus('mandatory')
a20Rebuild = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vNotRebuilding", 0), ("vRebuildInProcess", 1), ("vRebuildStopped", 2), ("vUnknownStatus", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20Rebuild.setStatus('mandatory')
a20DeviceFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20DeviceFault.setStatus('mandatory')
a20InFailedArray = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20InFailedArray.setStatus('mandatory')
a20InCriticalArray = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20InCriticalArray.setStatus('mandatory')
a20ParityCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20ParityCheck.setStatus('mandatory')
a20PredictedFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 20, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a20PredictedFault.setStatus('mandatory')
tSaf_teControlledTemperatureSensor = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 21), ).setLabel("tSaf-teControlledTemperatureSensor")
if mibBuilder.loadTexts: tSaf_teControlledTemperatureSensor.setStatus('mandatory')
eSaf_teControlledTemperatureSensor = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 21, 1), ).setLabel("eSaf-teControlledTemperatureSensor").setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a21Saf-teControlledTemperatureSensorInde"))
if mibBuilder.loadTexts: eSaf_teControlledTemperatureSensor.setStatus('mandatory')
a21Saf_teControlledTemperatureSensorInde = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 21, 1, 1), DmiInteger()).setLabel("a21Saf-teControlledTemperatureSensorInde").setMaxAccess("readonly")
if mibBuilder.loadTexts: a21Saf_teControlledTemperatureSensorInde.setStatus('mandatory')
a21Saf_teProcessorIndex = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 21, 1, 2), DmiInteger()).setLabel("a21Saf-teProcessorIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: a21Saf_teProcessorIndex.setStatus('mandatory')
a21Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 21, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a21Temperature.setStatus('mandatory')
tNetworkAdapter802PortGroup = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 22), )
if mibBuilder.loadTexts: tNetworkAdapter802PortGroup.setStatus('mandatory')
eNetworkAdapter802PortGroup = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 22, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a22PortIndex"))
if mibBuilder.loadTexts: eNetworkAdapter802PortGroup.setStatus('mandatory')
a22PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 22, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a22PortIndex.setStatus('mandatory')
a22PermanentNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 22, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a22PermanentNetworkAddress.setStatus('mandatory')
a22CurrentNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 22, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a22CurrentNetworkAddress.setStatus('mandatory')
a22ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vUnknown", 1), ("vAui", 2), ("vUtpCategory3", 3), ("vUtpCategory4", 4), ("vUtpCategory5", 5), ("vBnc", 6), ("vStpRj45", 7), ("vStpDb9", 8), ("vFiberMic", 9), ("vAppleAui", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a22ConnectorType.setStatus('mandatory')
a22DataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 22, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a22DataRate.setStatus('mandatory')
tNetworkAdapterHardwareGroup = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 23), )
if mibBuilder.loadTexts: tNetworkAdapterHardwareGroup.setStatus('mandatory')
eNetworkAdapterHardwareGroup = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 23, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eNetworkAdapterHardwareGroup.setStatus('mandatory')
a23NetworkTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vOther", 1), ("v10MbpsEthernet", 2), ("v100MbpsEthernet", 3), ("v10010MbpsEthernet", 4), ("v100MbpsVgAnylan", 5), ("v4MbpsToken-ring", 6), ("v16MbpsToken-ring", 7), ("v164MbpsToken-ring", 8), ("v2MbpsArcnet", 9), ("v20MbpsArcnet", 10), ("vFddi", 11), ("vAtm", 12), ("vAppletalk", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23NetworkTopology.setStatus('mandatory')
a23TransmissionCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vNormal", 1), ("vFullDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23TransmissionCapability.setStatus('mandatory')
a23NetworkAdapterRamSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 23, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23NetworkAdapterRamSize.setStatus('mandatory')
a23BusType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 256))).clone(namedValues=NamedValues(("vOther", 1), ("vIsa", 2), ("vEisa", 3), ("vMca", 4), ("vPci", 5), ("vVl", 6), ("vPcmcia", 7), ("vParallel", 8), ("vNec98", 9), ("vMotherboard", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23BusType.setStatus('mandatory')
a23BusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v8BitCard", 3), ("v16BitCard", 4), ("v32BitCard", 5), ("v64BitCard", 6), ("v128BitCard", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a23BusWidth.setStatus('mandatory')
tEventGenerationForPowerSupply = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24), )
if mibBuilder.loadTexts: tEventGenerationForPowerSupply.setStatus('mandatory')
eEventGenerationForPowerSupply = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a24AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForPowerSupply.setStatus('mandatory')
a24EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 257, 258))).clone(namedValues=NamedValues(("vPowerSupplyFailed", 256), ("vPowerSupplyOk", 257), ("vPowerSupplyLikelyToFail", 258)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24EventType.setStatus('mandatory')
a24EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24EventSeverity.setStatus('mandatory')
a24IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a24IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a24IsEventState_based.setStatus('mandatory')
a24EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24EventStateKey.setStatus('mandatory')
a24AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24AssociatedGroup.setStatus('mandatory')
a24EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24EventSystem.setStatus('mandatory')
a24EventSubsystem = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24EventSubsystem.setStatus('mandatory')
a24IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24IsInstanceDataPresent.setStatus('mandatory')
a24EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 24, 1, 9), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a24EventMessage.setStatus('mandatory')
tEventGenerationForTemperatureProbe = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25), )
if mibBuilder.loadTexts: tEventGenerationForTemperatureProbe.setStatus('mandatory')
eEventGenerationForTemperatureProbe = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a25AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForTemperatureProbe.setStatus('mandatory')
a25EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vTemperatureOutOfRange", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25EventType.setStatus('mandatory')
a25EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25EventSeverity.setStatus('mandatory')
a25IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a25IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a25IsEventState_based.setStatus('mandatory')
a25EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25EventStateKey.setStatus('mandatory')
a25AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25AssociatedGroup.setStatus('mandatory')
a25EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25EventSystem.setStatus('mandatory')
a25EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25EventSubsystem.setStatus('mandatory')
a25IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25IsInstanceDataPresent.setStatus('mandatory')
a25EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 25, 1, 9), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a25EventMessage.setStatus('mandatory')
tEventGenerationForFans = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26), )
if mibBuilder.loadTexts: tEventGenerationForFans.setStatus('mandatory')
eEventGenerationForFans = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"), (0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a26AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForFans.setStatus('mandatory')
a26EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vFanFailure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26EventType.setStatus('mandatory')
a26EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26EventSeverity.setStatus('mandatory')
a26IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a26IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a26IsEventState_based.setStatus('mandatory')
a26EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26EventStateKey.setStatus('mandatory')
a26AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26AssociatedGroup.setStatus('mandatory')
a26EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26EventSystem.setStatus('mandatory')
a26EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26EventSubsystem.setStatus('mandatory')
a26IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26IsInstanceDataPresent.setStatus('mandatory')
a26EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 26, 1, 9), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a26EventMessage.setStatus('mandatory')
tSymbiosHealth = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 27), )
if mibBuilder.loadTexts: tSymbiosHealth.setStatus('mandatory')
eSymbiosHealth = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 27, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eSymbiosHealth.setStatus('mandatory')
a27OverallHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vDegraded", 4), ("vNon-recoverable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27OverallHealthStatus.setStatus('mandatory')
a27OverallControllerHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vDegraded", 4), ("vNon-recoverable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27OverallControllerHealthStatus.setStatus('mandatory')
a27Non_recoverableControllers = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 27, 1, 3), DmiInteger()).setLabel("a27Non-recoverableControllers").setMaxAccess("readonly")
if mibBuilder.loadTexts: a27Non_recoverableControllers.setStatus('mandatory')
a27DegradedControllers = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 27, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27DegradedControllers.setStatus('mandatory')
a27OverallDeviceHealthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 27, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vDegraded", 4), ("vNon-recoverable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27OverallDeviceHealthStatus.setStatus('mandatory')
a27Non_recoverableDevices = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 27, 1, 6), DmiInteger()).setLabel("a27Non-recoverableDevices").setMaxAccess("readonly")
if mibBuilder.loadTexts: a27Non_recoverableDevices.setStatus('mandatory')
a27DegradedDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 27, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a27DegradedDevices.setStatus('mandatory')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 99), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 99, 1), ).setIndexNames((0, "SYMBIOSDMI20MIFDEFINITIONID20-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
a99MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 99, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibName.setStatus('mandatory')
a99MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 99, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibOid.setStatus('mandatory')
a99DisableTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 99, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a99DisableTrap.setStatus('mandatory')
trap1ID20forStorageDevices = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1) + (0,1)).setObjects(("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6StorageDevicesEventType"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventSeverity"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventIsStateBased"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventStateKey"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6AssociatedGroup"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventSystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventSubsystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventSolution"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6InstanceDataPresent"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventMessage"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a5StorageDeviceIndex"))
trap2ID20forStorageDevices = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 6, 1) + (0,2)).setObjects(("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6StorageDevicesEventType"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventSeverity"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventIsStateBased"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventStateKey"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6AssociatedGroup"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventSystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventSubsystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventSolution"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6InstanceDataPresent"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a6EventMessage"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a5StorageDeviceIndex"))
trap3ID20forStorageController = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 8, 1) + (0,3)).setObjects(("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8StorageControllerEventType"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8EventSeverity"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8EventIsStateBased"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8EventStateKey"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8AssociatedGroup"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8EventSystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8EventSubsystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8EventSolution"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8InstanceDataPresent"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a8EventMessage"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a7ControllerIndex"))
trap4ID20forMassStorageAssociation = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1) + (0,4)).setObjects(("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12MassStorageAssociationEventType"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSeverity"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventIsStateBased"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventStateKey"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12AssociatedGroup"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSubsystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSolution"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12InstanceDataPresent"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventMessage"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a11AssociationIndex"))
trap5ID20forMassStorageAssociation = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1) + (0,5)).setObjects(("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12MassStorageAssociationEventType"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSeverity"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventIsStateBased"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventStateKey"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12AssociatedGroup"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSubsystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSolution"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12InstanceDataPresent"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventMessage"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a11AssociationIndex"))
trap6ID20forMassStorageAssociation = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1) + (0,6)).setObjects(("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12MassStorageAssociationEventType"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSeverity"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventIsStateBased"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventStateKey"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12AssociatedGroup"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSubsystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSolution"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12InstanceDataPresent"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventMessage"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a11AssociationIndex"))
trap7ID20forMassStorageAssociation = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 20, 1, 12, 1) + (0,7)).setObjects(("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12MassStorageAssociationEventType"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSeverity"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventIsStateBased"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventStateKey"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12AssociatedGroup"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSubsystem"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventSolution"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12InstanceDataPresent"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a12EventMessage"), ("SYMBIOSDMI20MIFDEFINITIONID20-MIB", "a11AssociationIndex"))
mibBuilder.exportSymbols("SYMBIOSDMI20MIFDEFINITIONID20-MIB", tNetworkAdapterHardwareGroup=tNetworkAdapterHardwareGroup, eMassStorageAssociationEvents=eMassStorageAssociationEvents, a5MediaLoaded=a5MediaLoaded, tSymbiosEventPolling=tSymbiosEventPolling, a27OverallDeviceHealthStatus=a27OverallDeviceHealthStatus, eStorageController=eStorageController, a14DevicePredictedFailureStatus=a14DevicePredictedFailureStatus, a7SecondsSinceLastPower_up=a7SecondsSinceLastPower_up, a14OperationalStateInstanceIndex=a14OperationalStateInstanceIndex, eSymbiosEventPolling=eSymbiosEventPolling, a14WarningErrorCount=a14WarningErrorCount, a99DisableTrap=a99DisableTrap, a9SignalCharacteristics=a9SignalCharacteristics, a6EventSolution=a6EventSolution, tSaf_teControlledFan=tSaf_teControlledFan, tEventGenerationForFans=tEventGenerationForFans, a5StorageDeviceIndex=a5StorageDeviceIndex, a15Saf_teEventPolling=a15Saf_teEventPolling, tStorageControllerEvents=tStorageControllerEvents, tSaf_teControlledPowerSupply=tSaf_teControlledPowerSupply, a20NumberOfInsertions=a20NumberOfInsertions, tSymbiosSmartDevice=tSymbiosSmartDevice, a9AddressDescriptor=a9AddressDescriptor, a11Reference1=a11Reference1, a24EventSystem=a24EventSystem, a17DoorLocked=a17DoorLocked, a24EventStateKey=a24EventStateKey, trap7ID20forMassStorageAssociation=trap7ID20forMassStorageAssociation, a13BusPortAssociationIndex=a13BusPortAssociationIndex, a12EventStateKey=a12EventStateKey, eFieldReplaceableUnit=eFieldReplaceableUnit, a9Protocol=a9Protocol, a25AssociatedGroup=a25AssociatedGroup, a20State=a20State, a10FlowControlClassType=a10FlowControlClassType, a8AssociatedGroup=a8AssociatedGroup, a9Isochronous=a9Isochronous, a20ParityCheck=a20ParityCheck, a22DataRate=a22DataRate, eNetworkAdapterHardwareGroup=eNetworkAdapterHardwareGroup, eComponentid=eComponentid, a26EventSystem=a26EventSystem, a2IdentificationCode=a2IdentificationCode, a24IsEventState_based=a24IsEventState_based, a25EventMessage=a25EventMessage, tComponentid=tComponentid, a11Type=a11Type, a6EventMessage=a6EventMessage, a18Status=a18Status, a11AssociationIndex=a11AssociationIndex, a2Type=a2Type, a1SerialNumber=a1SerialNumber, a6EventStateKey=a6EventStateKey, a4Manufacturer=a4Manufacturer, DmiDisplaystring=DmiDisplaystring, a26IsInstanceDataPresent=a26IsInstanceDataPresent, tFibreChannelBusPortExtensions=tFibreChannelBusPortExtensions, a4FruIndex=a4FruIndex, eSaf_teControlledTemperatureSensor=eSaf_teControlledTemperatureSensor, tSubcomponentSoftware=tSubcomponentSoftware, a8EventIsStateBased=a8EventIsStateBased, a5Sub_identifier=a5Sub_identifier, eSaf_teControlledSlot=eSaf_teControlledSlot, tFieldReplaceableUnit=tFieldReplaceableUnit, a9ConnectorType=a9ConnectorType, a5TypeDescription=a5TypeDescription, a6EventSystem=a6EventSystem, tWorldwideIdentifer=tWorldwideIdentifer, DmiDateX=DmiDateX, DmiInteger64=DmiInteger64, DmiCounter=DmiCounter, tStorageDevices=tStorageDevices, a9ProtocolDescription=a9ProtocolDescription, a8EventSeverity=a8EventSeverity, a7ProtectionManagement=a7ProtectionManagement, a18Saf_teProcessorIndex=a18Saf_teProcessorIndex, a14MajorErrorCount=a14MajorErrorCount, a15SmartEventPolling=a15SmartEventPolling, a26AssociatedGroup=a26AssociatedGroup, eEventGenerationForFans=eEventGenerationForFans, a19Saf_teProcessorIndex=a19Saf_teProcessorIndex, a27DegradedControllers=a27DegradedControllers, a14AvailabilityStatus=a14AvailabilityStatus, a14AdministrativeState=a14AdministrativeState, a6EventIsStateBased=a6EventIsStateBased, fam8xx=fam8xx, a6StorageDevicesEventType=a6StorageDevicesEventType, a10EndToEndCredit=a10EndToEndCredit, a10BusPortIndex=a10BusPortIndex, a12EventSubsystem=a12EventSubsystem, a5RemovableMedia=a5RemovableMedia, a24AssociatedGroup=a24AssociatedGroup, a23BusType=a23BusType, eEventGenerationForPowerSupply=eEventGenerationForPowerSupply, tNetworkAdapter802PortGroup=tNetworkAdapter802PortGroup, a5Encryption=a5Encryption, a4PartNumber=a4PartNumber, a17PowerOnCycles=a17PowerOnCycles, a20Rebuild=a20Rebuild, a15ScanEventPolling=a15ScanEventPolling, a7ControllerIndex=a7ControllerIndex, eBusPortAssociation=eBusPortAssociation, a20Saf_teProcessorIndex=a20Saf_teProcessorIndex, a2LanguageEdition=a2LanguageEdition, a24EventMessage=a24EventMessage, tStorageDevicesEvents=tStorageDevicesEvents, tBusPortAssociation=tBusPortAssociation, tEventGenerationForTemperatureProbe=tEventGenerationForTemperatureProbe, a20PredictedFault=a20PredictedFault, a22PermanentNetworkAddress=a22PermanentNetworkAddress, tSymbiosHealth=tSymbiosHealth, a17HasLocks=a17HasLocks, a19Saf_teControlledPowerSupplyIndex=a19Saf_teControlledPowerSupplyIndex, cosprings=cosprings, a8EventSystem=a8EventSystem, a11Reference2=a11Reference2, a26EventSeverity=a26EventSeverity, a9MaximumTransferRate=a9MaximumTransferRate, a7Identification=a7Identification, a17Saf_teProcessorIndex=a17Saf_teProcessorIndex, trap1ID20forStorageDevices=trap1ID20forStorageDevices, a12MassStorageAssociationEventType=a12MassStorageAssociationEventType, a14FatalErrorCount=a14FatalErrorCount, eSaf_teProcessor=eSaf_teProcessor, a20ScsiId=a20ScsiId, a17EnclosureUniqueIdentifier=a17EnclosureUniqueIdentifier, a5RemovableDevice=a5RemovableDevice, a17ScsiId=a17ScsiId, a4SupportPhoneNumber=a4SupportPhoneNumber, a18Saf_teControlledFanIndex=a18Saf_teControlledFanIndex, a22PortIndex=a22PortIndex, a21Temperature=a21Temperature, a6EventSeverity=a6EventSeverity, a10FlowControlAcknowledgmentType=a10FlowControlAcknowledgmentType, a27OverallControllerHealthStatus=a27OverallControllerHealthStatus, eNetworkAdapter802PortGroup=eNetworkAdapter802PortGroup, a2Version=a2Version, tSaf_teControlledSlot=tSaf_teControlledSlot, a14DeviceGroupIndex=a14DeviceGroupIndex, eEventGenerationForTemperatureProbe=eEventGenerationForTemperatureProbe, a1Verify=a1Verify, eStorageDevicesEvents=eStorageDevicesEvents, a10BufferToBufferCredit=a10BufferToBufferCredit, a99MibName=a99MibName, a4RevisionLevel=a4RevisionLevel, eStorageControllerEvents=eStorageControllerEvents, a12EventSystem=a12EventSystem, dmtfGroups=dmtfGroups, a9MaximumNumberOfAttachments=a9MaximumNumberOfAttachments, a17HasSpeakers=a17HasSpeakers, trap5ID20forMassStorageAssociation=trap5ID20forMassStorageAssociation, a23TransmissionCapability=a23TransmissionCapability, a24EventType=a24EventType, a13NegotiatedWidth=a13NegotiatedWidth, eSaf_teControlledPowerSupply=eSaf_teControlledPowerSupply, trap3ID20forStorageController=trap3ID20forStorageController, a25EventStateKey=a25EventStateKey, a14UsageState=a14UsageState, a1Installation=a1Installation, a17StorageControllerIndex=a17StorageControllerIndex, a19Status=a19Status, a21Saf_teControlledTemperatureSensorInde=a21Saf_teControlledTemperatureSensorInde, a9MaximumWidth=a9MaximumWidth, tSaf_teProcessor=tSaf_teProcessor, id20=id20, a4FruInternetUniformResourceLocator=a4FruInternetUniformResourceLocator, a5Compression=a5Compression, tSaf_teControlledTemperatureSensor=tSaf_teControlledTemperatureSensor, a7BusMaster=a7BusMaster, a23NetworkAdapterRamSize=a23NetworkAdapterRamSize, a27Non_recoverableControllers=a27Non_recoverableControllers, a26EventSubsystem=a26EventSubsystem, eSymbiosHealth=eSymbiosHealth, a16SymSmartDeviceIndex=a16SymSmartDeviceIndex, a99MibOid=a99MibOid, a16SmartReportingCapability=a16SmartReportingCapability, a25IsInstanceDataPresent=a25IsInstanceDataPresent, a6InstanceDataPresent=a6InstanceDataPresent, a12AssociatedGroup=a12AssociatedGroup, symbios=symbios, a6EventSubsystem=a6EventSubsystem, a3WorldwideIdentifier=a3WorldwideIdentifier, a4Model=a4Model, tEventGenerationForPowerSupply=tEventGenerationForPowerSupply, a26EventMessage=a26EventMessage, a4FruSerialNumber=a4FruSerialNumber, a26EventType=a26EventType, a17FirmwareRevisionLevel=a17FirmwareRevisionLevel, a2SoftwareIndex=a2SoftwareIndex, a15SymbiosFlag=a15SymbiosFlag, a8EventStateKey=a8EventStateKey, a4Description=a4Description, a9ConnectorGender=a9ConnectorGender, a22ConnectorType=a22ConnectorType, a4DeviceGroupIndex=a4DeviceGroupIndex, eMassStorageAssociation=eMassStorageAssociation, a12InstanceDataPresent=a12InstanceDataPresent, a25EventSystem=a25EventSystem, a17TemperatureOutOfRange=a17TemperatureOutOfRange, a2Vendor=a2Vendor, a6AssociatedGroup=a6AssociatedGroup, eSubcomponentSoftware=eSubcomponentSoftware, a8EventSolution=a8EventSolution, a2InterfaceDescription=a2InterfaceDescription, a23BusWidth=a23BusWidth, eWorldwideIdentifer=eWorldwideIdentifer, a20InCriticalArray=a20InCriticalArray, a12EventIsStateBased=a12EventIsStateBased, a20DeviceFault=a20DeviceFault, a14OperationalStatus=a14OperationalStatus, a20Saf_teControlledSlotIndex=a20Saf_teControlledSlotIndex, a12EventMessage=a12EventMessage, a24EventSubsystem=a24EventSubsystem, eMiftomib=eMiftomib, a17Saf_teSpecificationRevisionLevel=a17Saf_teSpecificationRevisionLevel, trap2ID20forStorageDevices=trap2ID20forStorageDevices, a1Version=a1Version, a2InterfaceVersion=a2InterfaceVersion, a4WarrantyDuration=a4WarrantyDuration, eFibreChannelBusPortExtensions=eFibreChannelBusPortExtensions, a9BusPortIndex=a9BusPortIndex, a24EventSeverity=a24EventSeverity, a25EventSubsystem=a25EventSubsystem, a1Manufacturer=a1Manufacturer, a25IsEventState_based=a25IsEventState_based, a13NegotiatedSpeed=a13NegotiatedSpeed, a5MediaDataBlockSize=a5MediaDataBlockSize, a27DegradedDevices=a27DegradedDevices, a2Description=a2Description, eBusPort=eBusPort, a10LinkType=a10LinkType, eSymbiosSmartDevice=eSymbiosSmartDevice, eSaf_teControlledFan=eSaf_teControlledFan, a9ConnectorTypeDescription=a9ConnectorTypeDescription, a12EventSolution=a12EventSolution, trap4ID20forMassStorageAssociation=trap4ID20forMassStorageAssociation, a17VendorId=a17VendorId, a17ProductId=a17ProductId, a26IsEventState_based=a26IsEventState_based, a22CurrentNetworkAddress=a22CurrentNetworkAddress, tMassStorageAssociationEvents=tMassStorageAssociationEvents, eOperationalState=eOperationalState, tBusPort=tBusPort, a26EventStateKey=a26EventStateKey, a14CurrentErrorStatus=a14CurrentErrorStatus, eStorageDevices=eStorageDevices, a8InstanceDataPresent=a8InstanceDataPresent, a20InFailedArray=a20InFailedArray, a17ScsiLun=a17ScsiLun, a3WorldwideIdentifierType=a3WorldwideIdentifierType, a17PowerOnMinutes=a17PowerOnMinutes, tMiftomib=tMiftomib, a15EventPollingPeriod=a15EventPollingPeriod, a5DeviceLoaded=a5DeviceLoaded)
mibBuilder.exportSymbols("SYMBIOSDMI20MIFDEFINITIONID20-MIB", a25EventSeverity=a25EventSeverity, a8EventSubsystem=a8EventSubsystem, a1Product=a1Product, a10FabricTopology=a10FabricTopology, a17SpeakerStatus=a17SpeakerStatus, DmiComponentIndex=DmiComponentIndex, a25EventType=a25EventType, a8EventMessage=a8EventMessage, a27OverallHealthStatus=a27OverallHealthStatus, a5FormattedMediaCapacity=a5FormattedMediaCapacity, a3WorldwideIdentifierIndex=a3WorldwideIdentifierIndex, a21Saf_teProcessorIndex=a21Saf_teProcessorIndex, a24IsInstanceDataPresent=a24IsInstanceDataPresent, a8StorageControllerEventType=a8StorageControllerEventType, a5Type=a5Type, scsi=scsi, trap6ID20forMassStorageAssociation=trap6ID20forMassStorageAssociation, tMassStorageAssociation=tMassStorageAssociation, a23NetworkTopology=a23NetworkTopology, a12EventSeverity=a12EventSeverity, a27Non_recoverableDevices=a27Non_recoverableDevices, DmiInteger=DmiInteger, tOperationalState=tOperationalState, a4WarrantyStartDate=a4WarrantyStartDate, tStorageController=tStorageController)
