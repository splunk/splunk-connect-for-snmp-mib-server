#
# PySNMP MIB module CISCO-CASA-FA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CASA-FA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:35:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoIpProtocol, CiscoPort = mibBuilder.importSymbols("CISCO-TC", "CiscoIpProtocol", "CiscoPort")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, iso, ModuleIdentity, NotificationType, Counter64, Counter32, Unsigned32, Bits, IpAddress, MibIdentifier, Gauge32, Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "ModuleIdentity", "NotificationType", "Counter64", "Counter32", "Unsigned32", "Bits", "IpAddress", "MibIdentifier", "Gauge32", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DateAndTime, TimeStamp, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "TimeStamp", "TruthValue", "DisplayString")
ciscoCasaFaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 115))
ciscoCasaFaMIB.setRevisions(('2002-09-18 00:00',))
if mibBuilder.loadTexts: ciscoCasaFaMIB.setLastUpdated('200209180000Z')
if mibBuilder.loadTexts: ciscoCasaFaMIB.setOrganization('Cisco Systems, Inc.')
ciscoCasaFaMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 1))
ccfaGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 1))
ccfaStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 2))
ccfaWildcardAff = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3))
ccfaDispatchStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4))
class CasaWildcardAffIndex(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(32, 32)
    fixedLength = 32

class CasaInterestPacketSpecification(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

ccfaWildcardAffTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 1), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffTotalBytes.setStatus('current')
ccfaWildcardAffHCTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffHCTotalBytes.setStatus('current')
ccfaWildcardAffTotalPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffTotalPackets.setStatus('current')
ccfaWildcardAffNumOf = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 4), Gauge32()).setUnits('affinities').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffNumOf.setStatus('current')
ccfaWildcardAffNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccfaWildcardAffNotifEnabled.setStatus('current')
ccfaWildcardAffHiWtrMark = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 7), Unsigned32()).setUnits('affinities').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccfaWildcardAffHiWtrMark.setStatus('current')
ccfaWildAffCacheHiWtrMarkReset = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildAffCacheHiWtrMarkReset.setStatus('current')
ccfaWildcardAffDenies = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 9), Counter32()).setUnits('affinities').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffDenies.setStatus('current')
ccfaWildcardAffDrops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 10), Counter32()).setUnits('affinities').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffDrops.setStatus('current')
ccfaWildcardAffTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6), )
if mibBuilder.loadTexts: ccfaWildcardAffTable.setStatus('current')
ccfaWildcardAffEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1), ).setIndexNames((0, "CISCO-CASA-FA-MIB", "ccfaWildcardAffIndex"))
if mibBuilder.loadTexts: ccfaWildcardAffEntry.setStatus('current')
ccfaWildcardAffIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 1), CasaWildcardAffIndex())
if mibBuilder.loadTexts: ccfaWildcardAffIndex.setStatus('current')
ccfaWildcardAffSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffSourceAddr.setStatus('current')
ccfaWildcardAffDestinationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffDestinationAddr.setStatus('current')
ccfaWildcardAffSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 4), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffSourcePort.setStatus('current')
ccfaWildcardAffDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 5), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffDestinationPort.setStatus('current')
ccfaWildcardAffProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 6), CiscoIpProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffProtocol.setStatus('current')
ccfaWildcardAffFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffFragment.setStatus('current')
ccfaWildcardAffSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffSourceMask.setStatus('current')
ccfaWildcardAffDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffDestinationMask.setStatus('current')
ccfaWildcardAffSvcManagerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffSvcManagerAddr.setStatus('current')
ccfaWildcardAffSvcManagerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 11), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffSvcManagerPort.setStatus('current')
ccfaWildcardAffBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 12), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffBytes.setStatus('current')
ccfaWildcardAffHCBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 13), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffHCBytes.setStatus('current')
ccfaWildcardAffPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffPackets.setStatus('current')
ccfaWildcardAffHCPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 15), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffHCPackets.setStatus('current')
ccfaWildcardAffFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 16), Gauge32()).setUnits('affinities').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffFlows.setStatus('current')
ccfaWildcardAffInsertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffInsertTime.setStatus('current')
ccfaWildcardAffInterestTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffInterestTimeouts.setStatus('current')
ccfaWildcardAffAdvertiseDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffAdvertiseDestAddr.setStatus('current')
ccfaWildcardAffInterestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffInterestAddr.setStatus('current')
ccfaWildcardAffInterestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 21), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffInterestPort.setStatus('current')
ccfaWildAffInterestPacketSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 22), CasaInterestPacketSpecification()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildAffInterestPacketSpec.setStatus('current')
ccfaWildAffInterestTickelSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 23), CasaInterestPacketSpecification()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildAffInterestTickelSpec.setStatus('current')
ccfaWildcardAffDispatch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffDispatch.setStatus('current')
ccfaWildcardAffDispatchAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 3, 6, 1, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaWildcardAffDispatchAddr.setStatus('current')
ccfaDispatchStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1), )
if mibBuilder.loadTexts: ccfaDispatchStatsTable.setStatus('current')
ccfaDispatchStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-CASA-FA-MIB", "ccfaDispatchAddress"))
if mibBuilder.loadTexts: ccfaDispatchStatsEntry.setStatus('current')
ccfaDispatchAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: ccfaDispatchAddress.setStatus('current')
ccfaDispatchBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 2), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaDispatchBytesIn.setStatus('current')
ccfaDispatchHCBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 3), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaDispatchHCBytesIn.setStatus('current')
ccfaDispatchBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 4), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaDispatchBytesOut.setStatus('current')
ccfaDispatchHCBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 5), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaDispatchHCBytesOut.setStatus('current')
ccfaDispatchPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaDispatchPacketsIn.setStatus('current')
ccfaDispatchHCPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 7), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaDispatchHCPacketsIn.setStatus('current')
ccfaDispatchPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaDispatchPacketsOut.setStatus('current')
ccfaDispatchHCPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 9), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaDispatchHCPacketsOut.setStatus('current')
ccfaDispatchFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 1, 1, 10), Gauge32()).setUnits('affinities').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaDispatchFlows.setStatus('current')
ccfaAdvertisedDispatchTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 2), )
if mibBuilder.loadTexts: ccfaAdvertisedDispatchTable.setStatus('current')
ccfaAdvertisedDispatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-CASA-FA-MIB", "ccfaAdvertisedAddress"))
if mibBuilder.loadTexts: ccfaAdvertisedDispatchEntry.setStatus('current')
ccfaAdvertisedAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: ccfaAdvertisedAddress.setStatus('current')
ccfaAdvertisedDispatchAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 115, 1, 4, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccfaAdvertisedDispatchAddress.setStatus('current')
ciscoCasaFaMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 2))
ciscoCasaFaMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 2, 0))
ciscoCasaFaWildcardAffCreated = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 115, 2, 1)).setObjects(("CISCO-CASA-FA-MIB", "ccfaWildcardAffSourceAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDestinationAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSourcePort"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDestinationPort"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffProtocol"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffFragment"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSourceMask"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDestinationMask"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSvcManagerAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSvcManagerPort"))
if mibBuilder.loadTexts: ciscoCasaFaWildcardAffCreated.setStatus('current')
ciscoCasaFaWildcardAffDeleted = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 115, 2, 2)).setObjects(("CISCO-CASA-FA-MIB", "ccfaWildcardAffSourceAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDestinationAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSourcePort"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDestinationPort"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffProtocol"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffFragment"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSourceMask"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDestinationMask"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSvcManagerAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSvcManagerPort"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffFlows"))
if mibBuilder.loadTexts: ciscoCasaFaWildcardAffDeleted.setStatus('current')
ciscoCasaFaMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 3))
ciscoCasaFaMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 3, 1))
ciscoCasaFaMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 115, 3, 2))
ciscoCasaFaMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 115, 3, 1, 1)).setObjects(("CISCO-CASA-FA-MIB", "ciscoCasaFaWildcardAffGroup"), ("CISCO-CASA-FA-MIB", "ciscoCasaFaDispatchGroup"), ("CISCO-CASA-FA-MIB", "ciscoCasaFaADGroup"), ("CISCO-CASA-FA-MIB", "ciscoCasaFaNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCasaFaMIBCompliance = ciscoCasaFaMIBCompliance.setStatus('current')
ciscoCasaFaWildcardAffGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 115, 3, 2, 3)).setObjects(("CISCO-CASA-FA-MIB", "ccfaWildcardAffTotalBytes"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffHCTotalBytes"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffTotalPackets"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffNumOf"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffNotifEnabled"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffHiWtrMark"), ("CISCO-CASA-FA-MIB", "ccfaWildAffCacheHiWtrMarkReset"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDenies"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDrops"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSourceAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDestinationAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSourcePort"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDestinationPort"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffProtocol"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffFragment"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSourceMask"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDestinationMask"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSvcManagerAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffSvcManagerPort"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffBytes"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffHCBytes"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffPackets"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffHCPackets"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffFlows"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffInsertTime"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffInterestTimeouts"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffAdvertiseDestAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffInterestAddr"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffInterestPort"), ("CISCO-CASA-FA-MIB", "ccfaWildAffInterestPacketSpec"), ("CISCO-CASA-FA-MIB", "ccfaWildAffInterestTickelSpec"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDispatch"), ("CISCO-CASA-FA-MIB", "ccfaWildcardAffDispatchAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCasaFaWildcardAffGroup = ciscoCasaFaWildcardAffGroup.setStatus('current')
ciscoCasaFaDispatchGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 115, 3, 2, 5)).setObjects(("CISCO-CASA-FA-MIB", "ccfaDispatchBytesIn"), ("CISCO-CASA-FA-MIB", "ccfaDispatchHCBytesIn"), ("CISCO-CASA-FA-MIB", "ccfaDispatchBytesOut"), ("CISCO-CASA-FA-MIB", "ccfaDispatchHCBytesOut"), ("CISCO-CASA-FA-MIB", "ccfaDispatchPacketsIn"), ("CISCO-CASA-FA-MIB", "ccfaDispatchHCPacketsIn"), ("CISCO-CASA-FA-MIB", "ccfaDispatchPacketsOut"), ("CISCO-CASA-FA-MIB", "ccfaDispatchHCPacketsOut"), ("CISCO-CASA-FA-MIB", "ccfaDispatchFlows"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCasaFaDispatchGroup = ciscoCasaFaDispatchGroup.setStatus('current')
ciscoCasaFaADGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 115, 3, 2, 6)).setObjects(("CISCO-CASA-FA-MIB", "ccfaAdvertisedDispatchAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCasaFaADGroup = ciscoCasaFaADGroup.setStatus('current')
ciscoCasaFaNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 115, 3, 2, 7)).setObjects(("CISCO-CASA-FA-MIB", "ciscoCasaFaWildcardAffCreated"), ("CISCO-CASA-FA-MIB", "ciscoCasaFaWildcardAffDeleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCasaFaNotifGroup = ciscoCasaFaNotifGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-CASA-FA-MIB", ccfaGlobal=ccfaGlobal, ccfaWildcardAffDispatch=ccfaWildcardAffDispatch, ccfaWildcardAffHCTotalBytes=ccfaWildcardAffHCTotalBytes, ccfaAdvertisedDispatchTable=ccfaAdvertisedDispatchTable, ciscoCasaFaMIBNotificationPrefix=ciscoCasaFaMIBNotificationPrefix, ccfaWildcardAffHCBytes=ccfaWildcardAffHCBytes, ccfaDispatchHCBytesIn=ccfaDispatchHCBytesIn, ciscoCasaFaMIBGroups=ciscoCasaFaMIBGroups, ccfaDispatchFlows=ccfaDispatchFlows, ccfaWildcardAffTotalBytes=ccfaWildcardAffTotalBytes, ccfaWildcardAffNumOf=ccfaWildcardAffNumOf, ciscoCasaFaWildcardAffCreated=ciscoCasaFaWildcardAffCreated, ccfaWildcardAffTable=ccfaWildcardAffTable, ccfaWildcardAffDestinationAddr=ccfaWildcardAffDestinationAddr, ccfaWildcardAff=ccfaWildcardAff, ccfaWildcardAffNotifEnabled=ccfaWildcardAffNotifEnabled, ccfaWildcardAffAdvertiseDestAddr=ccfaWildcardAffAdvertiseDestAddr, ccfaDispatchHCPacketsOut=ccfaDispatchHCPacketsOut, ccfaWildAffInterestTickelSpec=ccfaWildAffInterestTickelSpec, ciscoCasaFaNotifGroup=ciscoCasaFaNotifGroup, ciscoCasaFaADGroup=ciscoCasaFaADGroup, ccfaWildcardAffProtocol=ccfaWildcardAffProtocol, ccfaAdvertisedDispatchAddress=ccfaAdvertisedDispatchAddress, ciscoCasaFaMIBConformance=ciscoCasaFaMIBConformance, ciscoCasaFaWildcardAffGroup=ciscoCasaFaWildcardAffGroup, CasaInterestPacketSpecification=CasaInterestPacketSpecification, ccfaAdvertisedAddress=ccfaAdvertisedAddress, ccfaWildcardAffHiWtrMark=ccfaWildcardAffHiWtrMark, ccfaWildcardAffSvcManagerAddr=ccfaWildcardAffSvcManagerAddr, ccfaDispatchStatsEntry=ccfaDispatchStatsEntry, ccfaWildcardAffSourcePort=ccfaWildcardAffSourcePort, ccfaWildcardAffSourceMask=ccfaWildcardAffSourceMask, ccfaDispatchStats=ccfaDispatchStats, ccfaWildcardAffInsertTime=ccfaWildcardAffInsertTime, ciscoCasaFaMIBObjects=ciscoCasaFaMIBObjects, ccfaDispatchPacketsOut=ccfaDispatchPacketsOut, ccfaDispatchHCBytesOut=ccfaDispatchHCBytesOut, ccfaWildcardAffDrops=ccfaWildcardAffDrops, ccfaWildcardAffDispatchAddr=ccfaWildcardAffDispatchAddr, ccfaWildcardAffHCPackets=ccfaWildcardAffHCPackets, ciscoCasaFaMIBCompliance=ciscoCasaFaMIBCompliance, ccfaDispatchStatsTable=ccfaDispatchStatsTable, ccfaDispatchAddress=ccfaDispatchAddress, ccfaWildcardAffTotalPackets=ccfaWildcardAffTotalPackets, ccfaWildcardAffDenies=ccfaWildcardAffDenies, ccfaWildcardAffFlows=ccfaWildcardAffFlows, ccfaWildAffInterestPacketSpec=ccfaWildAffInterestPacketSpec, ciscoCasaFaDispatchGroup=ciscoCasaFaDispatchGroup, ccfaDispatchPacketsIn=ccfaDispatchPacketsIn, ccfaAdvertisedDispatchEntry=ccfaAdvertisedDispatchEntry, ccfaWildcardAffBytes=ccfaWildcardAffBytes, ciscoCasaFaMIB=ciscoCasaFaMIB, ccfaDispatchBytesIn=ccfaDispatchBytesIn, PYSNMP_MODULE_ID=ciscoCasaFaMIB, ccfaWildcardAffIndex=ccfaWildcardAffIndex, ccfaWildcardAffInterestTimeouts=ccfaWildcardAffInterestTimeouts, ccfaWildcardAffDestinationMask=ccfaWildcardAffDestinationMask, ccfaWildcardAffInterestPort=ccfaWildcardAffInterestPort, ccfaDispatchBytesOut=ccfaDispatchBytesOut, ccfaWildcardAffPackets=ccfaWildcardAffPackets, CasaWildcardAffIndex=CasaWildcardAffIndex, ccfaWildAffCacheHiWtrMarkReset=ccfaWildAffCacheHiWtrMarkReset, ciscoCasaFaWildcardAffDeleted=ciscoCasaFaWildcardAffDeleted, ccfaWildcardAffEntry=ccfaWildcardAffEntry, ccfaWildcardAffDestinationPort=ccfaWildcardAffDestinationPort, ccfaWildcardAffInterestAddr=ccfaWildcardAffInterestAddr, ccfaWildcardAffSourceAddr=ccfaWildcardAffSourceAddr, ciscoCasaFaMIBCompliances=ciscoCasaFaMIBCompliances, ccfaWildcardAffSvcManagerPort=ccfaWildcardAffSvcManagerPort, ccfaDispatchHCPacketsIn=ccfaDispatchHCPacketsIn, ccfaStats=ccfaStats, ciscoCasaFaMIBNotifications=ciscoCasaFaMIBNotifications, ccfaWildcardAffFragment=ccfaWildcardAffFragment)
