#
# PySNMP MIB module INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:43:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
InterfaceIndex, OwnerString = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "OwnerString")
chassis, = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-MIB", "chassis")
groups, regModule = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "groups", "regModule")
EnabledStatus, PortList, FaultLedStates, PresenceLedStates, Index, PowerLedStates, IdromBinary16, Power, Presence, VlanIndex, TimeFilter, JackType = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-TC", "EnabledStatus", "PortList", "FaultLedStates", "PresenceLedStates", "Index", "PowerLedStates", "IdromBinary16", "Power", "Presence", "VlanIndex", "TimeFilter", "JackType")
EntryStatus, = mibBuilder.importSymbols("RMON-MIB", "EntryStatus")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, Counter64, IpAddress, Unsigned32, Bits, Counter32, TimeTicks, Integer32, iso, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "IpAddress", "Unsigned32", "Bits", "Counter32", "TimeTicks", "Integer32", "iso", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "MibIdentifier")
TruthValue, DisplayString, TextualConvention, MacAddress, PhysAddress, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "MacAddress", "PhysAddress", "TimeStamp")
multiFlexServerSwitchMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 1, 13))
multiFlexServerSwitchMibModule.setRevisions(('2007-08-15 19:00', '2007-06-18 20:30', '2007-06-07 20:30', '2007-06-07 13:30', '2007-05-21 15:00', '2007-04-18 19:05', '2007-03-27 12:30', '2007-03-06 10:30', '2007-02-22 17:00', '2007-02-07 19:00', '2006-12-27 12:30', '2006-11-07 11:27', '2006-10-02 06:29',))
if mibBuilder.loadTexts: multiFlexServerSwitchMibModule.setLastUpdated('200708151900Z')
if mibBuilder.loadTexts: multiFlexServerSwitchMibModule.setOrganization('Intel Corporation')
maxSwitches = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxSwitches.setStatus('current')
numOfSwitches = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfSwitches.setStatus('current')
switchPresenceMask = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPresenceMask.setStatus('current')
switches = ObjectIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203))
if mibBuilder.loadTexts: switches.setStatus('current')
switchTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 1), )
if mibBuilder.loadTexts: switchTable.setStatus('current')
switchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 1, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIndex"))
if mibBuilder.loadTexts: switchEntry.setStatus('current')
switchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 1, 1, 1), Index())
if mibBuilder.loadTexts: switchIndex.setStatus('current')
switchPresence = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 1, 1, 2), Presence()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPresence.setStatus('current')
switchVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchVendor.setStatus('current')
switchMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchMfgDate.setStatus('current')
switchDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDeviceName.setStatus('current')
switchPart = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 1, 1, 6), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPart.setStatus('current')
switchSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 1, 1, 7), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchSerialNo.setStatus('current')
switchMaximumPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 1, 1, 8), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchMaximumPower.setStatus('current')
switchNominalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 1, 1, 9), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchNominalPower.setStatus('current')
switchAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 1, 1, 10), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAssetTag.setStatus('current')
switchFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchFirmwareVersion.setStatus('current')
switchVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchVersion.setStatus('current')
switchPowerLed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 1, 1, 13), PowerLedStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPowerLed.setStatus('current')
switchFaultLed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 1, 1, 14), FaultLedStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchFaultLed.setStatus('current')
switchPhyPortsTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 2), )
if mibBuilder.loadTexts: switchPhyPortsTable.setStatus('current')
switchPhyPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 2, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIndex"), (0, "INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchPhyPortsIfIndex"))
if mibBuilder.loadTexts: switchPhyPortsEntry.setStatus('current')
switchPhyPortsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPhyPortsIfIndex.setStatus('current')
switchPhyPortsIfIndexName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPhyPortsIfIndexName.setStatus('current')
switchPhyPortsMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("copper", 1), ("opticfiber", 2), ("combo", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPhyPortsMediaType.setStatus('current')
switchPhyPortsStackUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPhyPortsStackUnit.setStatus('current')
switchPhyPortsModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPhyPortsModuleNumber.setStatus('current')
switchPhyPortsRow = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPhyPortsRow.setStatus('current')
switchPhyPortsColumn = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPhyPortsColumn.setStatus('current')
switchPhyConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 2, 1, 8), JackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPhyConnectorType.setStatus('current')
switchPhyPortHaul = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-relevant", 1), ("short", 2), ("long", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPhyPortHaul.setStatus('current')
switchIfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3), )
if mibBuilder.loadTexts: switchIfTable.setStatus('current')
switchIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIndex"), (0, "INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfIndex"))
if mibBuilder.loadTexts: switchIfEntry.setStatus('current')
switchIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfIndex.setStatus('current')
switchIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfDescr.setStatus('current')
switchIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 3), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfType.setStatus('current')
switchIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfMtu.setStatus('current')
switchIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfSpeed.setStatus('current')
switchIfPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfPhysAddress.setStatus('current')
switchIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfAdminStatus.setStatus('current')
switchIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfOperStatus.setStatus('current')
switchIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfLastChange.setStatus('current')
switchIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfInOctets.setStatus('current')
switchIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfInUcastPkts.setStatus('current')
switchIfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfInNUcastPkts.setStatus('deprecated')
switchIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfInDiscards.setStatus('current')
switchIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfInErrors.setStatus('current')
switchIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfInUnknownProtos.setStatus('current')
switchIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfOutOctets.setStatus('current')
switchIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfOutUcastPkts.setStatus('current')
switchIfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfOutNUcastPkts.setStatus('deprecated')
switchIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfOutDiscards.setStatus('current')
switchIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfOutErrors.setStatus('current')
switchIfOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfOutQLen.setStatus('deprecated')
switchIfSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 3, 1, 22), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfSpecific.setStatus('deprecated')
switchIfXTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4), )
if mibBuilder.loadTexts: switchIfXTable.setStatus('current')
switchIfXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1), )
switchIfEntry.registerAugmentions(("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfXEntry"))
switchIfXEntry.setIndexNames(*switchIfEntry.getIndexNames())
if mibBuilder.loadTexts: switchIfXEntry.setStatus('current')
switchIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfName.setStatus('current')
switchIfInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfInMulticastPkts.setStatus('current')
switchIfInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfInBroadcastPkts.setStatus('current')
switchIfOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfOutMulticastPkts.setStatus('current')
switchIfOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfOutBroadcastPkts.setStatus('current')
switchIfHCInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfHCInOctets.setStatus('current')
switchIfHCInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfHCInUcastPkts.setStatus('current')
switchIfHCInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfHCInMulticastPkts.setStatus('current')
switchIfHCInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfHCInBroadcastPkts.setStatus('current')
switchIfHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfHCOutOctets.setStatus('current')
switchIfHCOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfHCOutUcastPkts.setStatus('current')
switchIfHCOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfHCOutMulticastPkts.setStatus('current')
switchIfHCOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfHCOutBroadcastPkts.setStatus('current')
switchIfLinkUpDownTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfLinkUpDownTrapEnable.setStatus('current')
switchIfHighSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfHighSpeed.setStatus('current')
switchIfPromiscuousMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfPromiscuousMode.setStatus('current')
switchIfConnectorPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfConnectorPresent.setStatus('current')
switchIfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfAlias.setStatus('current')
switchIfCounterDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 4, 1, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfCounterDiscontinuityTime.setStatus('current')
switchEtherStatsTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5), )
if mibBuilder.loadTexts: switchEtherStatsTable.setStatus('current')
switchEtherStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIndex"), (0, "INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsIndex"))
if mibBuilder.loadTexts: switchEtherStatsEntry.setStatus('current')
switchEtherStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchEtherStatsIndex.setStatus('current')
switchEtherStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: switchEtherStatsDataSource.setStatus('current')
switchEtherStatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchEtherStatsDropEvents.setStatus('current')
switchEtherStatsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 4), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: switchEtherStatsOctets.setStatus('current')
switchEtherStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: switchEtherStatsPkts.setStatus('current')
switchEtherStatsBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 6), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: switchEtherStatsBroadcastPkts.setStatus('current')
switchEtherStatsMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 7), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: switchEtherStatsMulticastPkts.setStatus('current')
switchEtherStatsCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 8), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: switchEtherStatsCRCAlignErrors.setStatus('current')
switchEtherStatsUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: switchEtherStatsUndersizePkts.setStatus('current')
switchEtherStatsOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 10), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: switchEtherStatsOversizePkts.setStatus('current')
switchEtherStatsFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 11), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: switchEtherStatsFragments.setStatus('current')
switchEtherStatsJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 12), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: switchEtherStatsJabbers.setStatus('current')
switchEtherStatsCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 13), Counter32()).setUnits('Collisions').setMaxAccess("readonly")
if mibBuilder.loadTexts: switchEtherStatsCollisions.setStatus('current')
switchEtherStatsPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 14), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: switchEtherStatsPkts64Octets.setStatus('current')
switchEtherStatsPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 15), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: switchEtherStatsPkts65to127Octets.setStatus('current')
switchEtherStatsPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 16), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: switchEtherStatsPkts128to255Octets.setStatus('current')
switchEtherStatsPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 17), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: switchEtherStatsPkts256to511Octets.setStatus('current')
switchEtherStatsPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 18), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: switchEtherStatsPkts512to1023Octets.setStatus('current')
switchEtherStatsPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 19), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: switchEtherStatsPkts1024to1518Octets.setStatus('current')
switchEtherStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 20), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: switchEtherStatsOwner.setStatus('current')
switchEtherStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 5, 1, 21), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: switchEtherStatsStatus.setStatus('current')
switchDot1dTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 6), )
if mibBuilder.loadTexts: switchDot1dTpFdbTable.setStatus('current')
switchDot1dTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 6, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIndex"), (0, "INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDot1dTpFdbAddress"))
if mibBuilder.loadTexts: switchDot1dTpFdbEntry.setStatus('current')
switchDot1dTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 6, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDot1dTpFdbAddress.setStatus('current')
switchDot1dTpFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDot1dTpFdbPort.setStatus('current')
switchDot1dTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDot1dTpFdbStatus.setStatus('current')
switchDot1qVlanCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 7), )
if mibBuilder.loadTexts: switchDot1qVlanCurrentTable.setStatus('current')
switchDot1qVlanCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 7, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIndex"), (0, "INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDot1qVlanTimeMark"), (0, "INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDot1qVlanIndex"))
if mibBuilder.loadTexts: switchDot1qVlanCurrentEntry.setStatus('current')
switchDot1qVlanTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 7, 1, 1), TimeFilter())
if mibBuilder.loadTexts: switchDot1qVlanTimeMark.setStatus('current')
switchDot1qVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 7, 1, 2), VlanIndex())
if mibBuilder.loadTexts: switchDot1qVlanIndex.setStatus('current')
switchDot1qVlanFdbId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDot1qVlanFdbId.setStatus('current')
switchDot1qVlanCurrentEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 7, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDot1qVlanCurrentEgressPorts.setStatus('current')
switchDot1qVlanCurrentUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 7, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDot1qVlanCurrentUntaggedPorts.setStatus('current')
switchDot1qVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("permanent", 2), ("dynamicGvrp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDot1qVlanStatus.setStatus('current')
switchDot1qVlanCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 7, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDot1qVlanCreationTime.setStatus('current')
switchDot1qPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 8), )
if mibBuilder.loadTexts: switchDot1qPortVlanTable.setStatus('current')
switchDot1qPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 8, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIndex"), (0, "INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDot1dBasePort"))
if mibBuilder.loadTexts: switchDot1qPortVlanEntry.setStatus('current')
switchDot1dBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDot1dBasePort.setStatus('current')
switchDot1qPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 8, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDot1qPvid.setStatus('current')
switchDot1qPortAcceptableFrameTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("admitAll", 1), ("admitOnlyVlanTagged", 2))).clone('admitAll')).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDot1qPortAcceptableFrameTypes.setStatus('current')
switchDot1qPortIngressFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 8, 1, 4), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDot1qPortIngressFiltering.setStatus('current')
switchDot1qPortGvrpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 8, 1, 5), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDot1qPortGvrpStatus.setStatus('current')
switchDot1qPortGvrpFailedRegistrations = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDot1qPortGvrpFailedRegistrations.setStatus('current')
switchDot1qPortGvrpLastPduOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 203, 8, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDot1qPortGvrpLastPduOrigin.setStatus('current')
switchGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 2, 2, 13)).setObjects(("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "maxSwitches"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "numOfSwitches"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchPresenceMask"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIndex"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchVendor"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchMfgDate"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDeviceName"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchPart"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchSerialNo"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchMaximumPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchNominalPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchAssetTag"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchFirmwareVersion"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchVersion"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchPresence"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchPowerLed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchFaultLed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchPhyPortsIfIndex"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchPhyPortsIfIndexName"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchPhyPortsMediaType"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchPhyPortsStackUnit"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchPhyPortsModuleNumber"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchPhyPortsRow"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchPhyPortsColumn"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchPhyConnectorType"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchPhyPortHaul"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfIndex"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfDescr"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfType"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfMtu"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfSpeed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfPhysAddress"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfAdminStatus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfOperStatus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfLastChange"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfInOctets"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfInUcastPkts"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfInDiscards"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfInErrors"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfInUnknownProtos"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfOutOctets"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfOutUcastPkts"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfOutDiscards"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfOutErrors"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfName"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfInMulticastPkts"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfInBroadcastPkts"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfOutMulticastPkts"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfOutBroadcastPkts"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfHCInOctets"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfHCInUcastPkts"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfHCInMulticastPkts"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfHCInBroadcastPkts"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfHCOutOctets"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfHCOutUcastPkts"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfHCOutMulticastPkts"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfHCOutBroadcastPkts"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfLinkUpDownTrapEnable"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfHighSpeed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfPromiscuousMode"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfConnectorPresent"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfAlias"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchIfCounterDiscontinuityTime"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsIndex"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsDataSource"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsDropEvents"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsOctets"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsPkts"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsBroadcastPkts"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsMulticastPkts"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsCRCAlignErrors"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsUndersizePkts"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsOversizePkts"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsFragments"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsJabbers"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsCollisions"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsPkts64Octets"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsPkts65to127Octets"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsPkts128to255Octets"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsPkts256to511Octets"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsPkts512to1023Octets"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsPkts1024to1518Octets"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsOwner"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchEtherStatsStatus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDot1dTpFdbAddress"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDot1dTpFdbPort"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDot1dTpFdbStatus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDot1qVlanFdbId"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDot1qVlanCurrentEgressPorts"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDot1qVlanCurrentUntaggedPorts"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDot1qVlanStatus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDot1qVlanCreationTime"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDot1dBasePort"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDot1qPvid"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDot1qPortAcceptableFrameTypes"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDot1qPortIngressFiltering"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDot1qPortGvrpStatus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDot1qPortGvrpFailedRegistrations"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", "switchDot1qPortGvrpLastPduOrigin"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    switchGroup = switchGroup.setStatus('current')
mibBuilder.exportSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-SWITCH-MIB", switchIfType=switchIfType, PYSNMP_MODULE_ID=multiFlexServerSwitchMibModule, switchIfOutQLen=switchIfOutQLen, switchIfMtu=switchIfMtu, switchDot1dTpFdbTable=switchDot1dTpFdbTable, switchDot1qPortIngressFiltering=switchDot1qPortIngressFiltering, switchPhyPortsRow=switchPhyPortsRow, switchEtherStatsOversizePkts=switchEtherStatsOversizePkts, switchEtherStatsUndersizePkts=switchEtherStatsUndersizePkts, switchDot1dTpFdbPort=switchDot1dTpFdbPort, switchIfHCInUcastPkts=switchIfHCInUcastPkts, switchIfPhysAddress=switchIfPhysAddress, switchMfgDate=switchMfgDate, switchDot1qPortVlanEntry=switchDot1qPortVlanEntry, switchEtherStatsPkts64Octets=switchEtherStatsPkts64Octets, switchEtherStatsCollisions=switchEtherStatsCollisions, switchIfDescr=switchIfDescr, switchFirmwareVersion=switchFirmwareVersion, switchDot1dTpFdbAddress=switchDot1dTpFdbAddress, switchIfSpecific=switchIfSpecific, switchEtherStatsPkts512to1023Octets=switchEtherStatsPkts512to1023Octets, switchPart=switchPart, switchIfHCInBroadcastPkts=switchIfHCInBroadcastPkts, switchEtherStatsFragments=switchEtherStatsFragments, switchDot1qPortVlanTable=switchDot1qPortVlanTable, switchIfHCInMulticastPkts=switchIfHCInMulticastPkts, switchIfHCOutMulticastPkts=switchIfHCOutMulticastPkts, switchFaultLed=switchFaultLed, switchPhyPortsModuleNumber=switchPhyPortsModuleNumber, switchIfHCInOctets=switchIfHCInOctets, switchIfName=switchIfName, switchDeviceName=switchDeviceName, switchIfHCOutOctets=switchIfHCOutOctets, switchIfCounterDiscontinuityTime=switchIfCounterDiscontinuityTime, switchEtherStatsTable=switchEtherStatsTable, switchIfInBroadcastPkts=switchIfInBroadcastPkts, switchDot1qVlanCurrentTable=switchDot1qVlanCurrentTable, switchDot1qVlanStatus=switchDot1qVlanStatus, switchPresenceMask=switchPresenceMask, switchIfOutOctets=switchIfOutOctets, switchIfAdminStatus=switchIfAdminStatus, switchPhyPortsEntry=switchPhyPortsEntry, switchIfEntry=switchIfEntry, switchIfOutUcastPkts=switchIfOutUcastPkts, switchIfOutBroadcastPkts=switchIfOutBroadcastPkts, switchIfTable=switchIfTable, switchIfLastChange=switchIfLastChange, switchIfInErrors=switchIfInErrors, switchIfInNUcastPkts=switchIfInNUcastPkts, switchIfIndex=switchIfIndex, switchDot1qPortGvrpLastPduOrigin=switchDot1qPortGvrpLastPduOrigin, switchEtherStatsPkts65to127Octets=switchEtherStatsPkts65to127Octets, switchVersion=switchVersion, switchIfOutMulticastPkts=switchIfOutMulticastPkts, switchPresence=switchPresence, switchIndex=switchIndex, switchEtherStatsIndex=switchEtherStatsIndex, switchEtherStatsDataSource=switchEtherStatsDataSource, switchIfInUnknownProtos=switchIfInUnknownProtos, switchDot1qVlanCreationTime=switchDot1qVlanCreationTime, switchIfInMulticastPkts=switchIfInMulticastPkts, switchPhyPortsIfIndexName=switchPhyPortsIfIndexName, switchIfConnectorPresent=switchIfConnectorPresent, switchIfOperStatus=switchIfOperStatus, switchEtherStatsPkts256to511Octets=switchEtherStatsPkts256to511Octets, switchDot1qPortGvrpStatus=switchDot1qPortGvrpStatus, switchVendor=switchVendor, switchPowerLed=switchPowerLed, switchDot1qPortGvrpFailedRegistrations=switchDot1qPortGvrpFailedRegistrations, switches=switches, switchNominalPower=switchNominalPower, switchDot1qPvid=switchDot1qPvid, switchEtherStatsPkts128to255Octets=switchEtherStatsPkts128to255Octets, switchPhyPortsMediaType=switchPhyPortsMediaType, switchEtherStatsOwner=switchEtherStatsOwner, switchDot1qVlanCurrentEgressPorts=switchDot1qVlanCurrentEgressPorts, switchEtherStatsPkts1024to1518Octets=switchEtherStatsPkts1024to1518Octets, switchTable=switchTable, switchPhyConnectorType=switchPhyConnectorType, switchPhyPortsTable=switchPhyPortsTable, switchEtherStatsDropEvents=switchEtherStatsDropEvents, switchDot1qVlanFdbId=switchDot1qVlanFdbId, switchPhyPortsIfIndex=switchPhyPortsIfIndex, switchEtherStatsOctets=switchEtherStatsOctets, switchSerialNo=switchSerialNo, switchIfHCOutBroadcastPkts=switchIfHCOutBroadcastPkts, switchIfInDiscards=switchIfInDiscards, switchDot1dTpFdbEntry=switchDot1dTpFdbEntry, switchDot1qVlanCurrentUntaggedPorts=switchDot1qVlanCurrentUntaggedPorts, switchIfInOctets=switchIfInOctets, switchIfOutErrors=switchIfOutErrors, switchDot1qVlanIndex=switchDot1qVlanIndex, switchPhyPortHaul=switchPhyPortHaul, switchAssetTag=switchAssetTag, switchDot1dBasePort=switchDot1dBasePort, numOfSwitches=numOfSwitches, switchEntry=switchEntry, switchPhyPortsColumn=switchPhyPortsColumn, switchPhyPortsStackUnit=switchPhyPortsStackUnit, switchEtherStatsCRCAlignErrors=switchEtherStatsCRCAlignErrors, switchEtherStatsJabbers=switchEtherStatsJabbers, switchIfAlias=switchIfAlias, switchIfXTable=switchIfXTable, switchIfHCOutUcastPkts=switchIfHCOutUcastPkts, switchEtherStatsEntry=switchEtherStatsEntry, switchIfSpeed=switchIfSpeed, switchIfLinkUpDownTrapEnable=switchIfLinkUpDownTrapEnable, switchMaximumPower=switchMaximumPower, switchIfInUcastPkts=switchIfInUcastPkts, switchDot1qPortAcceptableFrameTypes=switchDot1qPortAcceptableFrameTypes, maxSwitches=maxSwitches, switchDot1dTpFdbStatus=switchDot1dTpFdbStatus, switchEtherStatsPkts=switchEtherStatsPkts, switchGroup=switchGroup, switchDot1qVlanCurrentEntry=switchDot1qVlanCurrentEntry, switchEtherStatsMulticastPkts=switchEtherStatsMulticastPkts, switchEtherStatsStatus=switchEtherStatsStatus, switchDot1qVlanTimeMark=switchDot1qVlanTimeMark, multiFlexServerSwitchMibModule=multiFlexServerSwitchMibModule, switchIfPromiscuousMode=switchIfPromiscuousMode, switchEtherStatsBroadcastPkts=switchEtherStatsBroadcastPkts, switchIfOutDiscards=switchIfOutDiscards, switchIfHighSpeed=switchIfHighSpeed, switchIfOutNUcastPkts=switchIfOutNUcastPkts, switchIfXEntry=switchIfXEntry)
