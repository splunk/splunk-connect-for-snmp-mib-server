#
# PySNMP MIB module XSWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XSWITCH-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:58:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
lannet, = mibBuilder.importSymbols("GEN-MIB", "lannet")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Integer32, iso, Bits, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, Unsigned32, MibIdentifier, NotificationType, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "iso", "Bits", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "MibIdentifier", "NotificationType", "Counter32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

switchChip = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 28))
scGen = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 28, 1))
scGenChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 28, 1, 1))
scGenChMainAgPosition = MibScalar((1, 3, 6, 1, 4, 1, 81, 28, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenChMainAgPosition.setStatus('mandatory')
scGenChRedunAgPosition = MibScalar((1, 3, 6, 1, 4, 1, 81, 28, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenChRedunAgPosition.setStatus('mandatory')
scGenChRedunAgActivityStatus = MibScalar((1, 3, 6, 1, 4, 1, 81, 28, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("notPresent", 1), ("dormant", 2), ("active", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenChRedunAgActivityStatus.setStatus('mandatory')
scGenChAgVLAN = MibScalar((1, 3, 6, 1, 4, 1, 81, 28, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenChAgVLAN.setStatus('mandatory')
scGenMon = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 28, 1, 2))
scGenMonTable = MibTable((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 1), )
if mibBuilder.loadTexts: scGenMonTable.setStatus('mandatory')
scGenMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 1, 1), ).setIndexNames((0, "XSWITCH-MIB", "scGenMonSwitchId"))
if mibBuilder.loadTexts: scGenMonEntry.setStatus('mandatory')
scGenMonSwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonSwitchId.setStatus('mandatory')
scGenMonDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonDropEvents.setStatus('mandatory')
scGenMonOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonOctets.setStatus('mandatory')
scGenMonPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonPkts.setStatus('mandatory')
scGenMonGoodBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonGoodBroadcastPkts.setStatus('mandatory')
scGenMonGoodMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonGoodMulticastPkts.setStatus('mandatory')
scGenMonGoodPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonGoodPkts.setStatus('mandatory')
scGenMonBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonBadPkts.setStatus('mandatory')
scGenMonGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonGoodOctets.setStatus('mandatory')
scGenMonBadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonBadOctets.setStatus('mandatory')
scGenMonSmonCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonSmonCapability.setStatus('mandatory')
scGenMonMIBCtrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenMonMIBCtrMode.setStatus('mandatory')
scGenMonSwitchVLANList = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonSwitchVLANList.setStatus('mandatory')
scGenMonMIBCtrList = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonMIBCtrList.setStatus('mandatory')
scGenMonTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 1, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonTimeStamp.setStatus('mandatory')
scGenMonVlanTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 1, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonVlanTimeStamp.setStatus('mandatory')
scGenMonPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 2), )
if mibBuilder.loadTexts: scGenMonPriorityTable.setStatus('mandatory')
scGenMonPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 2, 1), ).setIndexNames((0, "XSWITCH-MIB", "scGenMonPrioritySwitchId"), (0, "XSWITCH-MIB", "scGenMonPriorityId"))
if mibBuilder.loadTexts: scGenMonPriorityEntry.setStatus('mandatory')
scGenMonPrioritySwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonPrioritySwitchId.setStatus('mandatory')
scGenMonPriorityId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonPriorityId.setStatus('mandatory')
scGenMonPriorityGoodPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonPriorityGoodPkts.setStatus('mandatory')
scGenMonPriorityGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonPriorityGoodOctets.setStatus('mandatory')
scGenMonVLANList = MibScalar((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonVLANList.setStatus('mandatory')
scGenMonVLANTable = MibTable((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 4), )
if mibBuilder.loadTexts: scGenMonVLANTable.setStatus('mandatory')
scGenMonVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 4, 1), ).setIndexNames((0, "XSWITCH-MIB", "scGenMonVLANSwitchId"), (0, "XSWITCH-MIB", "scGenMonVLANId"))
if mibBuilder.loadTexts: scGenMonVLANEntry.setStatus('mandatory')
scGenMonVLANSwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonVLANSwitchId.setStatus('mandatory')
scGenMonVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonVLANId.setStatus('mandatory')
scGenMonVLANGoodPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonVLANGoodPkts.setStatus('mandatory')
scGenMonVLANGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonVLANGoodOctets.setStatus('mandatory')
scGenMonVLANStatsUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonVLANStatsUcastPkts.setStatus('mandatory')
scGenMonVLANStatsMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonVLANStatsMcastPkts.setStatus('mandatory')
scGenMonVLANStatsBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonVLANStatsBcastPkts.setStatus('mandatory')
scGenMonSwitches = MibScalar((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenMonSwitches.setStatus('mandatory')
scHostTimePortCorrTable = MibTable((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 6), )
if mibBuilder.loadTexts: scHostTimePortCorrTable.setStatus('mandatory')
scHostTimePortCorrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 6, 1), ).setIndexNames((0, "XSWITCH-MIB", "scHostTimeIndex"), (0, "XSWITCH-MIB", "scHostTimeCreationOrder"))
if mibBuilder.loadTexts: scHostTimePortCorrEntry.setStatus('mandatory')
scHostTimeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 6, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scHostTimeAddress.setStatus('mandatory')
scHostTimeCreationOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scHostTimeCreationOrder.setStatus('mandatory')
scHostTimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scHostTimeIndex.setStatus('mandatory')
scHostTimePortConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 2, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scHostTimePortConnection.setStatus('mandatory')
scGenGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 28, 1, 3))
scGenGroupTable = MibTable((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1), )
if mibBuilder.loadTexts: scGenGroupTable.setStatus('mandatory')
scGenGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1), ).setIndexNames((0, "XSWITCH-MIB", "scGenGroupId"))
if mibBuilder.loadTexts: scGenGroupEntry.setStatus('mandatory')
scGenGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupId.setStatus('mandatory')
scGenGroupUseSwitches = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupUseSwitches.setStatus('mandatory')
scGenGroupCopyPortSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupCopyPortSupport.setStatus('mandatory')
scGenGroupXswitchConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupXswitchConnection.setStatus('mandatory')
scGenGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ok", 1), ("loadsBudgetProblem", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupStatus.setStatus('mandatory')
scGenGroupSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ethernet", 1), ("token-ring", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupSwitchType.setStatus('mandatory')
scGenGroupNumberOfLoads = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupNumberOfLoads.setStatus('mandatory')
scGenGroupSetDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("layer2Only", 3), ("notSupported", 255))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupSetDefaults.setStatus('mandatory')
scGenGroupSupportCopyPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupSupportCopyPortList.setStatus('mandatory')
scGenGroupSupportPortCountersList = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupSupportPortCountersList.setStatus('mandatory')
scGenGroupSupportSegCountersList = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupSupportSegCountersList.setStatus('mandatory')
scGenGroupUpLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("fiber", 1), ("copper", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupUpLinkType.setStatus('mandatory')
scGenGroupPlugInType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 33, 254, 255))).clone(namedValues=NamedValues(("cajunX120T8", 1), ("cajunX120F2", 2), ("cajunX120S1", 3), ("cajunX120S2", 4), ("cajunX120L1", 5), ("cajunX120L2", 6), ("cajunX120T16", 7), ("cajunX120F4", 8), ("cajunX120G2", 9), ("cajunX120GT2", 10), ("cajunX330T16", 11), ("cajunX330F4", 12), ("cajunX330F2", 13), ("cajunX330L2", 14), ("cajunX330S2", 15), ("cajunX330L1", 16), ("cajunX330S1", 17), ("cajunX330-OC12F1", 18), ("cajunX330-OC12F2", 19), ("cajunX330-OC3F1", 20), ("cajunX330-OC3F2", 21), ("cajunX330-OC12S1", 22), ("cajunX330-OC12S2", 23), ("cajunX330GT4", 24), ("cajunX330GT2", 25), ("cajunX330G2", 26), ("cajunX330SSM", 27), ("cajunX130F2", 31), ("cajunX130G2", 32), ("cajunX130GT2", 33), ("unknown", 254), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupPlugInType.setStatus('mandatory')
scGenGroupPlugInDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupPlugInDescr.setStatus('mandatory')
scGenGroupPlugInCS = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupPlugInCS.setStatus('mandatory')
scGenGroupDefaultVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("vlan0", 1), ("vlan1", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupDefaultVLAN.setStatus('mandatory')
scGenGroupCascadingType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254, 255))).clone(namedValues=NamedValues(("cajunX330STK", 1), ("cajunX330MLSTK", 2), ("unknown", 254), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupCascadingType.setStatus('mandatory')
scGenGroupCascadingDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupCascadingDescr.setStatus('mandatory')
scGenGroupCascadingCS = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupCascadingCS.setStatus('mandatory')
scGenGroupSupportDstCopyPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupSupportDstCopyPortList.setStatus('mandatory')
scGenGroupBUPSType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ac", 1), ("dc", 2), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupBUPSType.setStatus('mandatory')
scGenGroupBUPSCS = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupBUPSCS.setStatus('mandatory')
scGenGroupBUPSFansStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("allFansOK", 1), ("oneFanFailed", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupBUPSFansStatus.setStatus('mandatory')
scGenGroupFansStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("allFansOK", 1), ("oneFanFailed", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupFansStatus.setStatus('mandatory')
scGenGroupInternalBuffering = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("min", 1), ("max", 2), ("med", 3), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupInternalBuffering.setStatus('mandatory')
scGenGroupMcFilterBoxSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("filteringSupported", 1), ("filterNotSupport", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupMcFilterBoxSupport.setStatus('mandatory')
scGenGroupMcFilterPersonalitySupport = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("filteringSupported", 1), ("filterNotSupport", 2), ("personalityNotInstalled", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupMcFilterPersonalitySupport.setStatus('mandatory')
scGenGroupMcFilterStackingSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("filteringSupported", 1), ("filterNotSupport", 2), ("stackingNotInstalled", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupMcFilterStackingSupport.setStatus('mandatory')
scGenGroupLACPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupLACPMode.setStatus('mandatory')
scGenGroupSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("nonSecurityMode", 1), ("securityMode", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupSecurityMode.setStatus('mandatory')
scGenGroupBroadcastStormControl = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupBroadcastStormControl.setStatus('mandatory')
scGenGroupBroadcastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 144000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupBroadcastThreshold.setStatus('mandatory')
scGenGroupPriorityQueuesScheduling = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("strict", 1), ("weighted", 2), ("notSupported", 255))).clone('weighted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupPriorityQueuesScheduling.setStatus('mandatory')
scGenGroupBoundedDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupBoundedDelay.setStatus('mandatory')
scGenGroupSLDAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupSLDAdminStatus.setStatus('mandatory')
scGenGroupSmonTable = MibTable((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 2), )
if mibBuilder.loadTexts: scGenGroupSmonTable.setStatus('mandatory')
scGenGroupSmonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 2, 1), ).setIndexNames((0, "XSWITCH-MIB", "scGenGroupSmonGroupId"))
if mibBuilder.loadTexts: scGenGroupSmonEntry.setStatus('mandatory')
scGenGroupSmonGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupSmonGroupId.setStatus('mandatory')
scGenGroupSmonCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupSmonCapability.setStatus('mandatory')
scGenGroupSmonVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupSmonVlanList.setStatus('mandatory')
scGenGroupSmonDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupSmonDropEvents.setStatus('mandatory')
scGenGroupSmonGoodBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupSmonGoodBroadcastPkts.setStatus('mandatory')
scGenGroupSmonGoodMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupSmonGoodMulticastPkts.setStatus('mandatory')
scGenGroupSmonGoodPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupSmonGoodPkts.setStatus('mandatory')
scGenGroupSmonBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupSmonBadPkts.setStatus('mandatory')
scGenGroupSmonGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupSmonGoodOctets.setStatus('mandatory')
scGenGroupSmonBadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupSmonBadOctets.setStatus('mandatory')
scGenGroupSmonPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupSmonPkts.setStatus('mandatory')
scGenGroupSmonOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupSmonOctets.setStatus('mandatory')
scGenGroupSmonMIBCtrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupSmonMIBCtrMode.setStatus('mandatory')
scGenGroupVlanTable = MibTable((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 3), )
if mibBuilder.loadTexts: scGenGroupVlanTable.setStatus('mandatory')
scGenGroupVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 3, 1), ).setIndexNames((0, "XSWITCH-MIB", "scGenGroupVlanGroupId"), (0, "XSWITCH-MIB", "scGenGroupVlanId"))
if mibBuilder.loadTexts: scGenGroupVlanEntry.setStatus('mandatory')
scGenGroupVlanGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupVlanGroupId.setStatus('mandatory')
scGenGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupVlanId.setStatus('mandatory')
scGenGroupVlanUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupVlanUcastPkts.setStatus('mandatory')
scGenGroupVlanMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupVlanMcastPkts.setStatus('mandatory')
scGenGroupVlanBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupVlanBcastPkts.setStatus('mandatory')
scGenGroupVlanGoodPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupVlanGoodPkts.setStatus('mandatory')
scGenGroupVlanGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupVlanGoodOctets.setStatus('mandatory')
scGenGroupVlanUcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupVlanUcastOctets.setStatus('mandatory')
scGenGroupVlanMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupVlanMcastOctets.setStatus('mandatory')
scGenGroupVlanBcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupVlanBcastOctets.setStatus('mandatory')
scGenGroupVlanCurrentEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 3, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupVlanCurrentEgressPorts.setStatus('mandatory')
scGenGroupVlanCurrentUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 3, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupVlanCurrentUntaggedPorts.setStatus('mandatory')
scGenGroupVlanStaticEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 3, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupVlanStaticEgressPorts.setStatus('mandatory')
scGenGroupVlanStaticUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupVlanStaticUntaggedPorts.setStatus('mandatory')
scGenGroupRspTable = MibTable((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 4), )
if mibBuilder.loadTexts: scGenGroupRspTable.setStatus('mandatory')
scGenGroupRspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 4, 1), ).setIndexNames((0, "XSWITCH-MIB", "scGenGroupRspGroupId"))
if mibBuilder.loadTexts: scGenGroupRspEntry.setStatus('mandatory')
scGenGroupRspGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenGroupRspGroupId.setStatus('mandatory')
scGenGroupRspHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 4, 1, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupRspHelloInterval.setStatus('mandatory')
scGenGroupRspDevicePollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 4, 1, 3), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupRspDevicePollingInterval.setStatus('mandatory')
scGenGroupRspDeviceNotRespondingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 4, 1, 4), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupRspDeviceNotRespondingTimeout.setStatus('mandatory')
scGenGroupRspSwitchNotRespondingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 4, 1, 5), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupRspSwitchNotRespondingTimeout.setStatus('mandatory')
scGenGroupRspMoveToForwardingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 4, 1, 6), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupRspMoveToForwardingInterval.setStatus('mandatory')
scGenGroupRspBroadcastArpShortInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 4, 1, 7), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupRspBroadcastArpShortInterval.setStatus('mandatory')
scGenGroupRspBroadcastArpShortIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 4, 1, 8), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupRspBroadcastArpShortIntervalNumber.setStatus('mandatory')
scGenGroupRspBroadcastArpLongInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 4, 1, 9), Integer32().clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupRspBroadcastArpLongInterval.setStatus('mandatory')
scGenGroupRspPeriodicPingsBoxIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 4, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupRspPeriodicPingsBoxIpAddress.setStatus('mandatory')
scGenGroupRspPeriodicPingsDestinationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 4, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupRspPeriodicPingsDestinationIpAddress.setStatus('mandatory')
scGenGroupRspMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("rsp-module-mode-role-A", 1), ("rsp-modue-mode-role-B", 2), ("notSupported", 255))).clone('rsp-module-mode-role-A')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenGroupRspMode.setStatus('mandatory')
scGenPort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 28, 1, 4))
scGenPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1), )
if mibBuilder.loadTexts: scGenPortTable.setStatus('mandatory')
scGenPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1), ).setIndexNames((0, "XSWITCH-MIB", "scGenPortGroupId"), (0, "XSWITCH-MIB", "scGenPortId"))
if mibBuilder.loadTexts: scGenPortEntry.setStatus('mandatory')
scGenPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenPortGroupId.setStatus('mandatory')
scGenPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenPortId.setStatus('mandatory')
scGenPortVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenPortVLAN.setStatus('mandatory')
scGenPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 255))).clone(namedValues=NamedValues(("regular", 1), ("high", 2), ("userPriority1", 3), ("userPriority2", 4), ("userPriority3", 5), ("userPriority4", 6), ("userPriority5", 7), ("userPriority6", 8), ("userPriority7", 9), ("userPriority8", 10), ("notSupported", 255))).clone('regular')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenPortPriority.setStatus('mandatory')
scGenPortSetDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenPortSetDefaults.setStatus('mandatory')
scGenPortBackbone = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenPortBackbone.setStatus('mandatory')
scGenPortCopyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenPortCopyMode.setStatus('mandatory')
scGenPortCopyDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8092))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenPortCopyDestination.setStatus('mandatory')
scGenPortLinkAggregationNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenPortLinkAggregationNumber.setStatus('mandatory')
scGenPortSendBridgedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenPortSendBridgedPackets.setStatus('mandatory')
scGenPortVLANEgressStaticConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenPortVLANEgressStaticConfiguration.setStatus('mandatory')
scGenPortStaticVLANBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenPortStaticVLANBinding.setStatus('mandatory')
scGenPortSecId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenPortSecId.setStatus('mandatory')
scGenPortMaxLagsOnSec = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenPortMaxLagsOnSec.setStatus('mandatory')
scGenPortGenericTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenPortGenericTrap.setStatus('mandatory')
scGenPortLACPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenPortLACPMode.setStatus('mandatory')
scGenPortLastIntruderSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenPortLastIntruderSourceAddr.setStatus('mandatory')
scGenPortSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("nonSecurityMode", 1), ("securityMode", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenPortSecurityMode.setStatus('mandatory')
scGenPortSTA = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenPortSTA.setStatus('mandatory')
scGenPortLagCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenPortLagCapability.setStatus('mandatory')
scGenPortCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenPortCapability.setStatus('mandatory')
scGenPortSLDAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenPortSLDAdminStatus.setStatus('mandatory')
scGenPortSLDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("selfLoop", 1), ("noSelfLoop", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenPortSLDStatus.setStatus('mandatory')
scGenPortRspTable = MibTable((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 2), )
if mibBuilder.loadTexts: scGenPortRspTable.setStatus('mandatory')
scGenPortRspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 2, 1), ).setIndexNames((0, "XSWITCH-MIB", "scGenPortRspGroupId"), (0, "XSWITCH-MIB", "scGenPortRspId"))
if mibBuilder.loadTexts: scGenPortRspEntry.setStatus('mandatory')
scGenPortRspGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenPortRspGroupId.setStatus('mandatory')
scGenPortRspId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenPortRspId.setStatus('mandatory')
scGenPortRspMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("regular", 1), ("rsp-mode-role-A", 2), ("rsp-mode-role-B", 3), ("device-mode", 4), ("notSupported", 255))).clone('regular')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenPortRspMode.setStatus('mandatory')
scGenSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 28, 1, 5))
scGenSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1), )
if mibBuilder.loadTexts: scGenSwitchTable.setStatus('mandatory')
scGenSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1), ).setIndexNames((0, "XSWITCH-MIB", "scGenSwitchId"))
if mibBuilder.loadTexts: scGenSwitchEntry.setStatus('mandatory')
scGenSwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenSwitchId.setStatus('mandatory')
scGenSwitchCopyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchCopyMode.setStatus('mandatory')
scGenSwitchCopySource = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchCopySource.setStatus('mandatory')
scGenSwitchCopyDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchCopyDestination.setStatus('mandatory')
scGenSwitchSetDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchSetDefaults.setStatus('mandatory')
scGenSwitchVIDP = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchVIDP.setStatus('mandatory')
scGenSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ethernet", 1), ("token-ring", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenSwitchType.setStatus('mandatory')
scGenSwitchMasterId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenSwitchMasterId.setStatus('mandatory')
scGenSwitchReset = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchReset.setStatus('mandatory')
scGenSwitchNumberOfLoads = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenSwitchNumberOfLoads.setStatus('mandatory')
scGenSwitchAgVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchAgVLAN.setStatus('mandatory')
scGenSwitchVLANList = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenSwitchVLANList.setStatus('mandatory')
scGenSwitchSTA = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchSTA.setStatus('mandatory')
scGenSwitchSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("nonSecurityMode", 1), ("securityMode", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchSecurityMode.setStatus('mandatory')
scGenSwitchFindQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchFindQuery.setStatus('mandatory')
scGenSwitchFindResult = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenSwitchFindResult.setStatus('mandatory')
scGenSwitchSWRdChange = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchSWRdChange.setStatus('mandatory')
scGenSwitchDefaultVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("vlan0", 1), ("vlan1", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenSwitchDefaultVLAN.setStatus('mandatory')
scGenSwitchVLANBridging = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchVLANBridging.setStatus('mandatory')
scGenSwitchOldVersionModules = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenSwitchOldVersionModules.setStatus('mandatory')
scGenSwitchVIDPNonSupportedModules = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenSwitchVIDPNonSupportedModules.setStatus('mandatory')
scGenSwitchSTANonSupportedModules = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenSwitchSTANonSupportedModules.setStatus('mandatory')
scGenSwitchIDSNonSupportedModules = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenSwitchIDSNonSupportedModules.setStatus('mandatory')
scGenSwitchMcFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchMcFilter.setStatus('mandatory')
scGenSwitchMcFilterHostAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 25), Integer32().clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchMcFilterHostAgingTime.setStatus('mandatory')
scGenSwitchMcFilterRouterAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 26), Integer32().clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchMcFilterRouterAgingTime.setStatus('mandatory')
scGenSwitchMcFilterDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 27), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchMcFilterDelayTime.setStatus('mandatory')
scGenSwitchLACPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchLACPMode.setStatus('mandatory')
scGenSwitchSecurityModePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchSecurityModePermit.setStatus('mandatory')
scGenSwitchFastAgingOnRemoteTopChg = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchFastAgingOnRemoteTopChg.setStatus('mandatory')
scGenSwitchGigaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("regular", 1), ("link-load-sharing", 2), ("primary-bottom", 3), ("primary-top", 4))).clone('regular')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchGigaMode.setStatus('mandatory')
scGenSwitchCAMClear = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 5, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenSwitchCAMClear.setStatus('mandatory')
scGenLinkAggregation = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 28, 1, 6))
scGenLinkAggregationTable = MibTable((1, 3, 6, 1, 4, 1, 81, 28, 1, 6, 1), )
if mibBuilder.loadTexts: scGenLinkAggregationTable.setStatus('mandatory')
scGenLinkAggregationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 28, 1, 6, 1, 1), ).setIndexNames((0, "XSWITCH-MIB", "scGenLinkAggregationId"))
if mibBuilder.loadTexts: scGenLinkAggregationEntry.setStatus('mandatory')
scGenLinkAggregationId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenLinkAggregationId.setStatus('mandatory')
scGenLinkAggregationName = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenLinkAggregationName.setStatus('mandatory')
scGenLinkAggregationBasePortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenLinkAggregationBasePortGroupId.setStatus('mandatory')
scGenLinkAggregationBasePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenLinkAggregationBasePortId.setStatus('mandatory')
scGenLinkAggregationNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenLinkAggregationNumberOfPorts.setStatus('mandatory')
scGenLinkAggregationLogicalPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenLinkAggregationLogicalPortGroupId.setStatus('mandatory')
scGenLinkAggregationLogicalPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenLinkAggregationLogicalPortId.setStatus('mandatory')
scGenLinkAggregationFunctionalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("partialFail", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenLinkAggregationFunctionalStatus.setStatus('mandatory')
scGenLinkAggregationAutoNegResults = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ok", 1), ("autoNegInconsistantResults", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenLinkAggregationAutoNegResults.setStatus('mandatory')
scGenLinkAggregationFaultMask = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 6, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenLinkAggregationFaultMask.setStatus('mandatory')
scGenLinkAggregationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 6, 1, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenLinkAggregationStatus.setStatus('mandatory')
scGenPortIPAddressRsp = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 28, 1, 7))
scGenPortIPAddressRspTable = MibTable((1, 3, 6, 1, 4, 1, 81, 28, 1, 7, 1), )
if mibBuilder.loadTexts: scGenPortIPAddressRspTable.setStatus('mandatory')
scGenPortIPAddressRspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 28, 1, 7, 1, 1), ).setIndexNames((0, "XSWITCH-MIB", "scGenPortIPAddressRspGroupId"), (0, "XSWITCH-MIB", "scGenPortIPAddressRspPortId"), (0, "XSWITCH-MIB", "scGenPortIPAddressRspIpAddressIndex"))
if mibBuilder.loadTexts: scGenPortIPAddressRspEntry.setStatus('mandatory')
scGenPortIPAddressRspGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenPortIPAddressRspGroupId.setStatus('mandatory')
scGenPortIPAddressRspPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenPortIPAddressRspPortId.setStatus('mandatory')
scGenPortIPAddressRspIpAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scGenPortIPAddressRspIpAddressIndex.setStatus('mandatory')
scGenPortIPAddressRspIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 1, 7, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scGenPortIPAddressRspIpAddress.setStatus('mandatory')
scEth = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 28, 2))
scEthPort = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 28, 2, 1))
scEthPortTable = MibTable((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1), )
if mibBuilder.loadTexts: scEthPortTable.setStatus('mandatory')
scEthPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1), ).setIndexNames((0, "XSWITCH-MIB", "scEthPortGroupId"), (0, "XSWITCH-MIB", "scEthPortId"))
if mibBuilder.loadTexts: scEthPortEntry.setStatus('mandatory')
scEthPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortGroupId.setStatus('mandatory')
scEthPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortId.setStatus('mandatory')
scEthPortOctetsRec = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortOctetsRec.setStatus('mandatory')
scEthPortPktsRec = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortPktsRec.setStatus('mandatory')
scEthPortGoodBroadcastPktsRec = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortGoodBroadcastPktsRec.setStatus('mandatory')
scEthPortGoodMulticastPktsRec = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortGoodMulticastPktsRec.setStatus('mandatory')
scEthPortCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortCRCAlignErrors.setStatus('mandatory')
scEthPortOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortOversizePkts.setStatus('mandatory')
scEthPortFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortFragments.setStatus('mandatory')
scEthPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortJabber.setStatus('mandatory')
scEthPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortCollisions.setStatus('mandatory')
scEthPortPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortPkts64Octets.setStatus('mandatory')
scEthPortPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortPkts65to127Octets.setStatus('mandatory')
scEthPortPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortPkts128to255Octets.setStatus('mandatory')
scEthPortPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortPkts256to511Octets.setStatus('mandatory')
scEthPortPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortPkts512to1023Octets.setStatus('mandatory')
scEthPortPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortPkts1024to1518Octets.setStatus('mandatory')
scEthPortGoodPktsRec = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortGoodPktsRec.setStatus('mandatory')
scEthPortBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortBadPkts.setStatus('mandatory')
scEthPortGoodOctetsRec = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortGoodOctetsRec.setStatus('mandatory')
scEthPortBadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortBadOctets.setStatus('mandatory')
scEthPortGoodBroadcastOctetsRec = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortGoodBroadcastOctetsRec.setStatus('mandatory')
scEthPortGoodMulticastOctetsRec = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortGoodMulticastOctetsRec.setStatus('mandatory')
scEthPortGoodOctetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortGoodOctetsSent.setStatus('mandatory')
scEthPortGoodPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortGoodPktsSent.setStatus('mandatory')
scEthPortLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortLateCollisions.setStatus('mandatory')
scEthPortFunctionalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8, 10, 11, 255))).clone(namedValues=NamedValues(("ok", 1), ("rld", 2), ("rxJabber", 3), ("partition", 8), ("remoteFault", 10), ("rspError", 11), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortFunctionalStatus.setStatus('mandatory')
scEthPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("halfDuplex", 1), ("fullDuplexNoPause", 2), ("fullDuplexProprietaryFC", 3), ("fullDuplexISL", 4), ("fullDuplexFlowControlISL", 5), ("fullDuplexAsymTxPause", 6), ("fullDuplexSymPause", 7), ("fullDuplexAsymRxPause", 8), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scEthPortMode.setStatus('mandatory')
scEthPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("ethernet", 1), ("fastEthernet", 2), ("gigabitEthernet", 3), ("a155Mbps", 4), ("a622Mbps", 5), ("notSupported", 255))).clone('fastEthernet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scEthPortSpeed.setStatus('mandatory')
scEthPortAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scEthPortAutoNegotiation.setStatus('mandatory')
scEthPortAutoNegotiationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("pass", 1), ("fail", 2), ("disable", 3), ("inProgress", 4), ("notSupported", 255))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortAutoNegotiationStatus.setStatus('mandatory')
scEthPortTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortTotalOctets.setStatus('mandatory')
scEthPortTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortTotalPkts.setStatus('mandatory')
scEthPortDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortDropEvents.setStatus('mandatory')
scEthPortGigaPauseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("noPause", 1), ("symmetricPause", 2), ("asymmetricPauseRx", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortGigaPauseStatus.setStatus('mandatory')
scEthPortLower32OctetsRec = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortLower32OctetsRec.setStatus('mandatory')
scEthPortUpper32OctetsRec = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortUpper32OctetsRec.setStatus('mandatory')
scEthPortLower32OctetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortLower32OctetsSent.setStatus('mandatory')
scEthPortUpper32OctetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortUpper32OctetsSent.setStatus('mandatory')
scEthPortGoodUnicastPktsRec = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortGoodUnicastPktsRec.setStatus('mandatory')
scEthPortDiscardPktsRec = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortDiscardPktsRec.setStatus('mandatory')
scEthPortUnicastPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortUnicastPktsSent.setStatus('mandatory')
scEthPortDiscardPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortDiscardPktsSent.setStatus('mandatory')
scEthPortPauseCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("noFlowControl", 1), ("asymTxFlowControlOnly", 2), ("symFlowControlOnly", 3), ("symAndAsymRxFlowControl", 4), ("notSupported", 255))).clone('symAndAsymRxFlowControl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scEthPortPauseCapabilities.setStatus('mandatory')
scEthPortMulticastPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortMulticastPktsSent.setStatus('mandatory')
scEthPortUndersizePktsRec = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthPortUndersizePktsRec.setStatus('mandatory')
scEthPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("noFlowControl", 1), ("asymTxFlowControl", 2), ("symFlowControl", 3), ("asymRxFlowControl", 4), ("proprietaryFlowControl", 5), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scEthPortFlowControl.setStatus('mandatory')
scEthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 28, 2, 2))
scEthGroupTable = MibTable((1, 3, 6, 1, 4, 1, 81, 28, 2, 2, 1), )
if mibBuilder.loadTexts: scEthGroupTable.setStatus('mandatory')
scEthGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 28, 2, 2, 1, 1), ).setIndexNames((0, "XSWITCH-MIB", "scEthGroupId"))
if mibBuilder.loadTexts: scEthGroupEntry.setStatus('mandatory')
scEthGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scEthGroupId.setStatus('mandatory')
scEthGroupAutoPartitionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scEthGroupAutoPartitionEnable.setStatus('mandatory')
scEthGroupFefiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 28, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 255))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scEthGroupFefiEnable.setStatus('mandatory')
mibBuilder.exportSymbols("XSWITCH-MIB", scGenMonPkts=scGenMonPkts, scEthPortTable=scEthPortTable, scGenChRedunAgPosition=scGenChRedunAgPosition, scGenGroupMcFilterBoxSupport=scGenGroupMcFilterBoxSupport, scGenSwitchNumberOfLoads=scGenSwitchNumberOfLoads, scGenLinkAggregationLogicalPortId=scGenLinkAggregationLogicalPortId, scEthPortGoodBroadcastOctetsRec=scEthPortGoodBroadcastOctetsRec, scGenGroupVlanBcastPkts=scGenGroupVlanBcastPkts, scGenLinkAggregationFaultMask=scGenLinkAggregationFaultMask, scGenPortLastIntruderSourceAddr=scGenPortLastIntruderSourceAddr, scGenGroupSmonMIBCtrMode=scGenGroupSmonMIBCtrMode, scGenPortIPAddressRspPortId=scGenPortIPAddressRspPortId, scEthPortCollisions=scEthPortCollisions, scGenSwitchReset=scGenSwitchReset, scEthPortPkts256to511Octets=scEthPortPkts256to511Octets, scGenSwitchCAMClear=scGenSwitchCAMClear, scGenMonTimeStamp=scGenMonTimeStamp, scEthGroupEntry=scEthGroupEntry, scEthPortLower32OctetsRec=scEthPortLower32OctetsRec, scEthPortEntry=scEthPortEntry, scGenMonPrioritySwitchId=scGenMonPrioritySwitchId, scHostTimePortCorrEntry=scHostTimePortCorrEntry, scHostTimePortConnection=scHostTimePortConnection, scGenMonVLANSwitchId=scGenMonVLANSwitchId, scGenGroupPlugInType=scGenGroupPlugInType, scGenGroupBUPSFansStatus=scGenGroupBUPSFansStatus, scGenGroupFansStatus=scGenGroupFansStatus, scEthPortJabber=scEthPortJabber, scEthPortPkts128to255Octets=scEthPortPkts128to255Octets, scGenGroupVlanUcastPkts=scGenGroupVlanUcastPkts, scGenMonBadPkts=scGenMonBadPkts, scGenGroupLACPMode=scGenGroupLACPMode, scGenChAgVLAN=scGenChAgVLAN, scGenGroupSupportSegCountersList=scGenGroupSupportSegCountersList, scGenPortCopyMode=scGenPortCopyMode, scEthPortGoodMulticastOctetsRec=scEthPortGoodMulticastOctetsRec, scGenMonSwitches=scGenMonSwitches, scGenPortPriority=scGenPortPriority, scGenPortSecurityMode=scGenPortSecurityMode, scGenPortId=scGenPortId, scGenGroupRspBroadcastArpShortInterval=scGenGroupRspBroadcastArpShortInterval, scEthPortId=scEthPortId, scGenMonTable=scGenMonTable, scGenGroupVlanBcastOctets=scGenGroupVlanBcastOctets, scGenGroupVlanCurrentUntaggedPorts=scGenGroupVlanCurrentUntaggedPorts, scGenMonVLANList=scGenMonVLANList, scGenPortRspTable=scGenPortRspTable, scGenPortRspId=scGenPortRspId, scGenSwitchFindResult=scGenSwitchFindResult, scGenPortTable=scGenPortTable, scGenSwitchCopyMode=scGenSwitchCopyMode, scGenGroupSmonGoodMulticastPkts=scGenGroupSmonGoodMulticastPkts, scEthPortFragments=scEthPortFragments, scGenSwitchIDSNonSupportedModules=scGenSwitchIDSNonSupportedModules, scEthPortFlowControl=scEthPortFlowControl, scGenPortSLDStatus=scGenPortSLDStatus, scGenMonEntry=scGenMonEntry, scGenGroupCascadingCS=scGenGroupCascadingCS, scEthPortMulticastPktsSent=scEthPortMulticastPktsSent, scGenPortGroupId=scGenPortGroupId, scGenMonSmonCapability=scGenMonSmonCapability, scGenMonVLANGoodPkts=scGenMonVLANGoodPkts, scGenLinkAggregationNumberOfPorts=scGenLinkAggregationNumberOfPorts, scEthPortPkts512to1023Octets=scEthPortPkts512to1023Octets, scGenMonPriorityTable=scGenMonPriorityTable, scEthGroupTable=scEthGroupTable, scHostTimeAddress=scHostTimeAddress, scGenGroupSmonGroupId=scGenGroupSmonGroupId, scGenLinkAggregation=scGenLinkAggregation, scGenGroupSupportPortCountersList=scGenGroupSupportPortCountersList, scGenGroupVlanGoodPkts=scGenGroupVlanGoodPkts, scGenGroupVlanTable=scGenGroupVlanTable, scGenGroupCopyPortSupport=scGenGroupCopyPortSupport, scEthPortUpper32OctetsSent=scEthPortUpper32OctetsSent, scGenGroupRspDevicePollingInterval=scGenGroupRspDevicePollingInterval, scGenGroupRspMode=scGenGroupRspMode, scEthPortOversizePkts=scEthPortOversizePkts, scGenSwitchVLANBridging=scGenSwitchVLANBridging, scEthGroupAutoPartitionEnable=scEthGroupAutoPartitionEnable, scGenMonGoodMulticastPkts=scGenMonGoodMulticastPkts, scGenGroupUpLinkType=scGenGroupUpLinkType, scGenGroupPriorityQueuesScheduling=scGenGroupPriorityQueuesScheduling, scGenGroupRspPeriodicPingsBoxIpAddress=scGenGroupRspPeriodicPingsBoxIpAddress, scGenLinkAggregationId=scGenLinkAggregationId, scEthPortGigaPauseStatus=scEthPortGigaPauseStatus, scEthPortGoodPktsRec=scEthPortGoodPktsRec, scGenGroupSetDefaults=scGenGroupSetDefaults, scGenGroupSmonEntry=scGenGroupSmonEntry, scGenGroupPlugInCS=scGenGroupPlugInCS, scGenSwitchMcFilterHostAgingTime=scGenSwitchMcFilterHostAgingTime, scEthPortGoodOctetsSent=scEthPortGoodOctetsSent, scGenSwitchFindQuery=scGenSwitchFindQuery, scGenPortIPAddressRspGroupId=scGenPortIPAddressRspGroupId, scGenSwitchVLANList=scGenSwitchVLANList, scGenGroupUseSwitches=scGenGroupUseSwitches, scGenGroupSupportCopyPortList=scGenGroupSupportCopyPortList, scGenGroupNumberOfLoads=scGenGroupNumberOfLoads, scGenGroupSwitchType=scGenGroupSwitchType, scGenLinkAggregationBasePortGroupId=scGenLinkAggregationBasePortGroupId, scGenPortSLDAdminStatus=scGenPortSLDAdminStatus, scGenSwitchType=scGenSwitchType, scGenSwitchMcFilterRouterAgingTime=scGenSwitchMcFilterRouterAgingTime, scGenLinkAggregationFunctionalStatus=scGenLinkAggregationFunctionalStatus, scGenLinkAggregationLogicalPortGroupId=scGenLinkAggregationLogicalPortGroupId, scHostTimeIndex=scHostTimeIndex, scGenPortIPAddressRsp=scGenPortIPAddressRsp, scGenPortSendBridgedPackets=scGenPortSendBridgedPackets, scGenGroup=scGenGroup, scGenGroupEntry=scGenGroupEntry, scGenGroupXswitchConnection=scGenGroupXswitchConnection, scGenSwitchOldVersionModules=scGenSwitchOldVersionModules, scGenGroupSmonTable=scGenGroupSmonTable, scGenSwitch=scGenSwitch, RowStatus=RowStatus, scGenChassis=scGenChassis, scGenSwitchMcFilter=scGenSwitchMcFilter, scGenPortEntry=scGenPortEntry, scEthPortDropEvents=scEthPortDropEvents, scGenMonGoodPkts=scGenMonGoodPkts, scEthPortPauseCapabilities=scEthPortPauseCapabilities, scGenMonPriorityId=scGenMonPriorityId, scGenGroupRspTable=scGenGroupRspTable, scGenSwitchLACPMode=scGenSwitchLACPMode, scGenGroupRspEntry=scGenGroupRspEntry, scGenSwitchSecurityModePermit=scGenSwitchSecurityModePermit, switchChip=switchChip, scGenGroupSmonDropEvents=scGenGroupSmonDropEvents, scGenLinkAggregationTable=scGenLinkAggregationTable, scEthPortGoodOctetsRec=scEthPortGoodOctetsRec, scGenPortStaticVLANBinding=scGenPortStaticVLANBinding, scGenLinkAggregationAutoNegResults=scGenLinkAggregationAutoNegResults, scGenGroupRspPeriodicPingsDestinationIpAddress=scGenGroupRspPeriodicPingsDestinationIpAddress, scGenGroupBUPSCS=scGenGroupBUPSCS, scGenSwitchAgVLAN=scGenSwitchAgVLAN, scEthPortUnicastPktsSent=scEthPortUnicastPktsSent, scEthPortAutoNegotiationStatus=scEthPortAutoNegotiationStatus, scGenGroupStatus=scGenGroupStatus, scEthPortSpeed=scEthPortSpeed, scGenMonPriorityGoodOctets=scGenMonPriorityGoodOctets, scGenSwitchSTANonSupportedModules=scGenSwitchSTANonSupportedModules, scGenPortSetDefaults=scGenPortSetDefaults, scGenSwitchSetDefaults=scGenSwitchSetDefaults, scGenChRedunAgActivityStatus=scGenChRedunAgActivityStatus, scGenGroupSmonVlanList=scGenGroupSmonVlanList, scGenGroupSmonPkts=scGenGroupSmonPkts, scGenGroupBUPSType=scGenGroupBUPSType, scGenPortRspEntry=scGenPortRspEntry, scGenPortRspMode=scGenPortRspMode, scGenPortIPAddressRspEntry=scGenPortIPAddressRspEntry, scEthPortBadOctets=scEthPortBadOctets, scGenMon=scGenMon, scGenGroupRspSwitchNotRespondingTimeout=scGenGroupRspSwitchNotRespondingTimeout, scGenSwitchDefaultVLAN=scGenSwitchDefaultVLAN, scGenGroupTable=scGenGroupTable, scGenGroupVlanEntry=scGenGroupVlanEntry, scGenSwitchVIDPNonSupportedModules=scGenSwitchVIDPNonSupportedModules, scGenGroupBroadcastThreshold=scGenGroupBroadcastThreshold, scGenGroupVlanCurrentEgressPorts=scGenGroupVlanCurrentEgressPorts, scGenGroupSupportDstCopyPortList=scGenGroupSupportDstCopyPortList, scEthPortPktsRec=scEthPortPktsRec, scGenGroupPlugInDescr=scGenGroupPlugInDescr, scGenSwitchTable=scGenSwitchTable, scEthPortPkts1024to1518Octets=scEthPortPkts1024to1518Octets, scGenGroupMcFilterStackingSupport=scGenGroupMcFilterStackingSupport, scGen=scGen, scGenMonBadOctets=scGenMonBadOctets, scEthPortPkts65to127Octets=scEthPortPkts65to127Octets, scGenPortVLANEgressStaticConfiguration=scGenPortVLANEgressStaticConfiguration, scHostTimeCreationOrder=scHostTimeCreationOrder, scGenPortSTA=scGenPortSTA, scGenMonPriorityGoodPkts=scGenMonPriorityGoodPkts, scEthGroup=scEthGroup, scGenGroupVlanStaticUntaggedPorts=scGenGroupVlanStaticUntaggedPorts, scGenGroupRspMoveToForwardingInterval=scGenGroupRspMoveToForwardingInterval, scGenGroupCascadingType=scGenGroupCascadingType, scGenGroupId=scGenGroupId, scGenMonVLANGoodOctets=scGenMonVLANGoodOctets, scGenMonVLANId=scGenMonVLANId, scGenGroupVlanGoodOctets=scGenGroupVlanGoodOctets, scGenGroupSmonGoodOctets=scGenGroupSmonGoodOctets, scGenMonMIBCtrMode=scGenMonMIBCtrMode, scGenGroupRspBroadcastArpLongInterval=scGenGroupRspBroadcastArpLongInterval, scGenPortGenericTrap=scGenPortGenericTrap, scEthPortGoodMulticastPktsRec=scEthPortGoodMulticastPktsRec, scGenGroupSmonBadPkts=scGenGroupSmonBadPkts, scGenGroupInternalBuffering=scGenGroupInternalBuffering, scGenSwitchCopyDestination=scGenSwitchCopyDestination, scGenMonSwitchId=scGenMonSwitchId, scGenSwitchSWRdChange=scGenSwitchSWRdChange, scGenGroupBroadcastStormControl=scGenGroupBroadcastStormControl, scEthPortMode=scEthPortMode, scGenGroupSmonCapability=scGenGroupSmonCapability, scEthPortGoodPktsSent=scEthPortGoodPktsSent, scGenMonPriorityEntry=scGenMonPriorityEntry, scEthPortOctetsRec=scEthPortOctetsRec, scGenGroupDefaultVLAN=scGenGroupDefaultVLAN, scGenGroupSmonOctets=scGenGroupSmonOctets, scGenGroupVlanGroupId=scGenGroupVlanGroupId, scGenPortIPAddressRspIpAddress=scGenPortIPAddressRspIpAddress, scGenGroupCascadingDescr=scGenGroupCascadingDescr, scGenMonVLANEntry=scGenMonVLANEntry, scEthPortGroupId=scEthPortGroupId, scGenPortMaxLagsOnSec=scGenPortMaxLagsOnSec, scEthPortDiscardPktsRec=scEthPortDiscardPktsRec, scEthPortDiscardPktsSent=scEthPortDiscardPktsSent, scGenPortLinkAggregationNumber=scGenPortLinkAggregationNumber, scGenSwitchMcFilterDelayTime=scGenSwitchMcFilterDelayTime, scGenGroupVlanStaticEgressPorts=scGenGroupVlanStaticEgressPorts, scEthGroupFefiEnable=scEthGroupFefiEnable, scGenMonGoodOctets=scGenMonGoodOctets, scEthPortUndersizePktsRec=scEthPortUndersizePktsRec, scGenPortLACPMode=scGenPortLACPMode, scGenSwitchMasterId=scGenSwitchMasterId, scGenLinkAggregationBasePortId=scGenLinkAggregationBasePortId, scGenSwitchVIDP=scGenSwitchVIDP, scEth=scEth, scEthGroupId=scEthGroupId, scGenPortIPAddressRspTable=scGenPortIPAddressRspTable, scGenChMainAgPosition=scGenChMainAgPosition, scGenGroupSmonGoodBroadcastPkts=scGenGroupSmonGoodBroadcastPkts, scGenPortSecId=scGenPortSecId, scEthPortLateCollisions=scEthPortLateCollisions, scEthPortGoodUnicastPktsRec=scEthPortGoodUnicastPktsRec, scGenLinkAggregationStatus=scGenLinkAggregationStatus, scGenGroupMcFilterPersonalitySupport=scGenGroupMcFilterPersonalitySupport, scGenGroupVlanId=scGenGroupVlanId, scGenGroupVlanUcastOctets=scGenGroupVlanUcastOctets, scEthPortGoodBroadcastPktsRec=scEthPortGoodBroadcastPktsRec, scEthPortUpper32OctetsRec=scEthPortUpper32OctetsRec, scEthPortCRCAlignErrors=scEthPortCRCAlignErrors, scGenSwitchId=scGenSwitchId, scGenSwitchSecurityMode=scGenSwitchSecurityMode, scGenGroupRspGroupId=scGenGroupRspGroupId, scGenSwitchFastAgingOnRemoteTopChg=scGenSwitchFastAgingOnRemoteTopChg, scGenPortCapability=scGenPortCapability, scGenMonVLANStatsUcastPkts=scGenMonVLANStatsUcastPkts, scGenMonVLANTable=scGenMonVLANTable, scGenPortLagCapability=scGenPortLagCapability, scGenSwitchSTA=scGenSwitchSTA, scEthPortLower32OctetsSent=scEthPortLower32OctetsSent, scGenGroupRspBroadcastArpShortIntervalNumber=scGenGroupRspBroadcastArpShortIntervalNumber, scEthPortTotalPkts=scEthPortTotalPkts, scGenPortVLAN=scGenPortVLAN, scGenPortRspGroupId=scGenPortRspGroupId, scGenGroupSLDAdminStatus=scGenGroupSLDAdminStatus, scGenLinkAggregationName=scGenLinkAggregationName, scEthPortFunctionalStatus=scEthPortFunctionalStatus, scGenGroupSmonGoodPkts=scGenGroupSmonGoodPkts, scGenGroupVlanMcastOctets=scGenGroupVlanMcastOctets, scGenMonMIBCtrList=scGenMonMIBCtrList, scEthPortTotalOctets=scEthPortTotalOctets, scEthPortPkts64Octets=scEthPortPkts64Octets, scGenMonVLANStatsBcastPkts=scGenMonVLANStatsBcastPkts, scGenGroupVlanMcastPkts=scGenGroupVlanMcastPkts)
mibBuilder.exportSymbols("XSWITCH-MIB", scGenMonOctets=scGenMonOctets, scGenGroupRspHelloInterval=scGenGroupRspHelloInterval, scGenGroupRspDeviceNotRespondingTimeout=scGenGroupRspDeviceNotRespondingTimeout, scGenPortBackbone=scGenPortBackbone, scGenGroupSmonBadOctets=scGenGroupSmonBadOctets, scGenSwitchEntry=scGenSwitchEntry, scGenSwitchCopySource=scGenSwitchCopySource, scGenSwitchGigaMode=scGenSwitchGigaMode, scGenPortIPAddressRspIpAddressIndex=scGenPortIPAddressRspIpAddressIndex, scGenPort=scGenPort, scHostTimePortCorrTable=scHostTimePortCorrTable, scGenGroupSecurityMode=scGenGroupSecurityMode, scGenGroupBoundedDelay=scGenGroupBoundedDelay, scGenMonSwitchVLANList=scGenMonSwitchVLANList, scGenMonDropEvents=scGenMonDropEvents, scGenLinkAggregationEntry=scGenLinkAggregationEntry, scEthPort=scEthPort, scEthPortBadPkts=scEthPortBadPkts, scGenMonGoodBroadcastPkts=scGenMonGoodBroadcastPkts, scGenPortCopyDestination=scGenPortCopyDestination, scGenMonVLANStatsMcastPkts=scGenMonVLANStatsMcastPkts, scGenMonVlanTimeStamp=scGenMonVlanTimeStamp, scEthPortAutoNegotiation=scEthPortAutoNegotiation)
