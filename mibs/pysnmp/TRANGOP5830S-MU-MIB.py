#
# PySNMP MIB module TRANGOP5830S-MU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRANGOP5830S-MU-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:19:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, IpAddress, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, ObjectIdentity, Bits, ModuleIdentity, Unsigned32, enterprises, Counter32, MibIdentifier, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "ObjectIdentity", "Bits", "ModuleIdentity", "Unsigned32", "enterprises", "Counter32", "MibIdentifier", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

trango = MibIdentifier((1, 3, 6, 1, 4, 1, 5454))
tbw = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1))
p5830smu = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22))
musys = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1))
murf = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2))
ru = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 3))
trapconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 4))
mibinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 5))
muversion = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 1))
muswitches = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 8))
mutraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 9))
muipconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 13))
murftable = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4))
muism = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 5))
muunii = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 6))
muversionHW = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: muversionHW.setStatus('mandatory')
muversionFW = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muversionFW.setStatus('mandatory')
muversionFPGA = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: muversionFPGA.setStatus('mandatory')
muversionFWChecksum = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: muversionFWChecksum.setStatus('mandatory')
muversionFPGAChecksum = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: muversionFPGAChecksum.setStatus('mandatory')
musysDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: musysDeviceId.setStatus('mandatory')
musysDefOpMode = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 0))).clone(namedValues=NamedValues(("on", 16), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: musysDefOpMode.setStatus('mandatory')
musysCurOpMode = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 0))).clone(namedValues=NamedValues(("on", 16), ("off", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: musysCurOpMode.setStatus('mandatory')
musysActivateOpmode = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deactivated", 0), ("activated", 1))).clone('deactivated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: musysActivateOpmode.setStatus('mandatory')
musysReadCommStr = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: musysReadCommStr.setStatus('mandatory')
musysWriteCommStr = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: musysWriteCommStr.setStatus('mandatory')
muswitchesBlockBroadcastMulticast = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("passed", 0), ("blocked", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muswitchesBlockBroadcastMulticast.setStatus('mandatory')
muswitchesHTTPD = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muswitchesHTTPD.setStatus('mandatory')
muswitchesAutoPowerLevelRemoteUnit = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muswitchesAutoPowerLevelRemoteUnit.setStatus('mandatory')
mutrafficEthInOctets = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mutrafficEthInOctets.setStatus('mandatory')
mutrafficEthOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mutrafficEthOutOctets.setStatus('mandatory')
mutrafficRfInOctets = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mutrafficRfInOctets.setStatus('mandatory')
mutrafficRfOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mutrafficRfOutOctets.setStatus('mandatory')
musysTemperature = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: musysTemperature.setStatus('mandatory')
musysUpdateFlashAndActivate = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: musysUpdateFlashAndActivate.setStatus('mandatory')
musysReboot = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deactivated", 0), ("activated", 1))).clone('deactivated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: musysReboot.setStatus('mandatory')
muipconfigIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 13, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muipconfigIpAddress.setStatus('mandatory')
muipconfigSubnet = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 13, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muipconfigSubnet.setStatus('mandatory')
muipconfigDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 13, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muipconfigDefaultGateway.setStatus('mandatory')
murfRSSI = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: murfRSSI.setStatus('mandatory')
murfActiveChannel = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murfActiveChannel.setStatus('mandatory')
murfActivePolarization = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murfActivePolarization.setStatus('mandatory')
murftableChannel1 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel1.setStatus('mandatory')
murftableChannel2 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel2.setStatus('mandatory')
murftableChannel3 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel3.setStatus('mandatory')
murftableChannel4 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel4.setStatus('mandatory')
murftableChannel5 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel5.setStatus('mandatory')
murftableChannel6 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel6.setStatus('mandatory')
murftableChannel7 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel7.setStatus('mandatory')
murftableChannel8 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel8.setStatus('mandatory')
murftableChannel9 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel9.setStatus('mandatory')
murftableChannel10 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel10.setStatus('mandatory')
murftableChannel11 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel11.setStatus('mandatory')
murftableChannel12 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel12.setStatus('mandatory')
murftableChannel13 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel13.setStatus('mandatory')
murftableChannel14 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel14.setStatus('mandatory')
murftableChannel15 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel15.setStatus('mandatory')
murftableChannel16 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel16.setStatus('mandatory')
murftableChannel17 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel17.setStatus('mandatory')
murftableChannel18 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel18.setStatus('mandatory')
murftableChannel19 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel19.setStatus('mandatory')
murftableChannel20 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel20.setStatus('mandatory')
murftableChannel21 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel21.setStatus('mandatory')
murftableChannel22 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel22.setStatus('mandatory')
murftableChannel23 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel23.setStatus('mandatory')
murftableChannel24 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel24.setStatus('mandatory')
murftableChannel25 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel25.setStatus('mandatory')
murftableChannel26 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel26.setStatus('mandatory')
murftableChannel27 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel27.setStatus('mandatory')
murftableChannel28 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel28.setStatus('mandatory')
murftableChannel29 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel29.setStatus('mandatory')
murftableChannel30 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel30.setStatus('mandatory')
muismTxPowerMax = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muismTxPowerMax.setStatus('mandatory')
muismTxPowerMin = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muismTxPowerMin.setStatus('mandatory')
muismTxPower = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muismTxPower.setStatus('mandatory')
muismRxThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-90, -90), ValueRangeConstraint(-85, -85), ValueRangeConstraint(-80, -80), ValueRangeConstraint(-75, -75), ValueRangeConstraint(-70, -70), ValueRangeConstraint(-65, -65), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muismRxThreshold.setStatus('mandatory')
muismTargetRSSI = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-85, -45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muismTargetRSSI.setStatus('mandatory')
muuniiTxPowerMax = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muuniiTxPowerMax.setStatus('mandatory')
muuniiTxPowerMin = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muuniiTxPowerMin.setStatus('mandatory')
muuniiTxPower = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muuniiTxPower.setStatus('mandatory')
muuniiRxThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-90, -90), ValueRangeConstraint(-85, -85), ValueRangeConstraint(-80, -80), ValueRangeConstraint(-75, -75), ValueRangeConstraint(-70, -70), ValueRangeConstraint(-65, -65), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muuniiRxThreshold.setStatus('mandatory')
muuniiTargetRSSI = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-85, -45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muuniiTargetRSSI.setStatus('mandatory')
ruDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruDeviceId.setStatus('mandatory')
ruUpstreamMIR = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruUpstreamMIR.setStatus('mandatory')
remoteDownstreamMIR = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000)).clone(9999)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteDownstreamMIR.setStatus('mandatory')
ruPowerLvl = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deactivated", 0), ("activated", 1))).clone('deactivated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruPowerLvl.setStatus('mandatory')
ruReboot = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deactivated", 0), ("activated", 1))).clone('deactivated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruReboot.setStatus('mandatory')
ruAssociation = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("associated", 1), ("notAssociated", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruAssociation.setStatus('mandatory')
ruDistance = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruDistance.setStatus('mandatory')
trapconfigDest1IPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapconfigDest1IPAddress.setStatus('mandatory')
trapconfigDest2IPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapconfigDest2IPAddress.setStatus('mandatory')
mibinfoVersion = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibinfoVersion.setStatus('mandatory')
mibBuilder.exportSymbols("TRANGOP5830S-MU-MIB", murftableChannel7=murftableChannel7, murftableChannel29=murftableChannel29, muismTxPowerMax=muismTxPowerMax, trapconfigDest2IPAddress=trapconfigDest2IPAddress, musysTemperature=musysTemperature, murftableChannel5=murftableChannel5, muswitches=muswitches, murftableChannel18=murftableChannel18, musysDeviceId=musysDeviceId, muswitchesHTTPD=muswitchesHTTPD, murftableChannel28=murftableChannel28, trango=trango, murftableChannel30=murftableChannel30, murftableChannel22=murftableChannel22, trapconfigDest1IPAddress=trapconfigDest1IPAddress, mutraffic=mutraffic, murftableChannel14=murftableChannel14, musysReadCommStr=musysReadCommStr, murfActiveChannel=murfActiveChannel, muversion=muversion, mutrafficRfInOctets=mutrafficRfInOctets, musysReboot=musysReboot, muismTxPowerMin=muismTxPowerMin, musysUpdateFlashAndActivate=musysUpdateFlashAndActivate, murf=murf, murftableChannel24=murftableChannel24, remoteDownstreamMIR=remoteDownstreamMIR, mibinfoVersion=mibinfoVersion, musysWriteCommStr=musysWriteCommStr, murftableChannel11=murftableChannel11, murftableChannel16=murftableChannel16, muversionFW=muversionFW, murftableChannel27=murftableChannel27, murftableChannel15=murftableChannel15, murftableChannel9=murftableChannel9, ruPowerLvl=ruPowerLvl, ruAssociation=ruAssociation, muversionFPGAChecksum=muversionFPGAChecksum, muuniiRxThreshold=muuniiRxThreshold, trapconfig=trapconfig, muismTxPower=muismTxPower, muism=muism, murftableChannel17=murftableChannel17, muversionFWChecksum=muversionFWChecksum, muismTargetRSSI=muismTargetRSSI, mutrafficRfOutOctets=mutrafficRfOutOctets, murftableChannel1=murftableChannel1, ruDeviceId=ruDeviceId, ruDistance=ruDistance, p5830smu=p5830smu, muipconfigIpAddress=muipconfigIpAddress, muversionFPGA=muversionFPGA, muipconfigDefaultGateway=muipconfigDefaultGateway, muuniiTxPowerMin=muuniiTxPowerMin, murftableChannel6=murftableChannel6, muipconfigSubnet=muipconfigSubnet, murftableChannel3=murftableChannel3, murftableChannel25=murftableChannel25, murftableChannel4=murftableChannel4, musys=musys, murftable=murftable, musysCurOpMode=musysCurOpMode, muswitchesBlockBroadcastMulticast=muswitchesBlockBroadcastMulticast, muuniiTargetRSSI=muuniiTargetRSSI, tbw=tbw, murftableChannel12=murftableChannel12, murftableChannel13=murftableChannel13, ru=ru, murftableChannel10=murftableChannel10, muswitchesAutoPowerLevelRemoteUnit=muswitchesAutoPowerLevelRemoteUnit, murftableChannel2=murftableChannel2, murftableChannel26=murftableChannel26, ruUpstreamMIR=ruUpstreamMIR, murftableChannel23=murftableChannel23, mutrafficEthInOctets=mutrafficEthInOctets, ruReboot=ruReboot, muunii=muunii, muuniiTxPower=muuniiTxPower, mutrafficEthOutOctets=mutrafficEthOutOctets, muipconfig=muipconfig, muismRxThreshold=muismRxThreshold, murftableChannel20=murftableChannel20, DisplayString=DisplayString, murftableChannel8=murftableChannel8, muversionHW=muversionHW, murftableChannel19=murftableChannel19, musysActivateOpmode=musysActivateOpmode, murfRSSI=murfRSSI, murftableChannel21=murftableChannel21, murfActivePolarization=murfActivePolarization, muuniiTxPowerMax=muuniiTxPowerMax, mibinfo=mibinfo, musysDefOpMode=musysDefOpMode)
