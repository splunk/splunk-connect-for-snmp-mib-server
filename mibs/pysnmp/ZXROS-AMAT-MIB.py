#
# PySNMP MIB module ZXROS-AMAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZXROS-AMAT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:42:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, Counter64, Gauge32, TimeTicks, NotificationType, Unsigned32, Counter32, MibIdentifier, Integer32, IpAddress, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "Counter64", "Gauge32", "TimeTicks", "NotificationType", "Unsigned32", "Counter32", "MibIdentifier", "Integer32", "IpAddress", "ModuleIdentity", "Bits")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
zte = MibIdentifier((1, 3, 6, 1, 4, 1, 3902))
zxros = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 100))
zxrosAMAT = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 100, 1000))
class DisplayString(OctetString):
    pass

zxrosAMATconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1))
zxrosAMATAttackAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATAttackAgingTime.setStatus('current')
zxrosAMATState = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATState.setStatus('current')
zxrosAMATHashOverNum = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATHashOverNum.setStatus('current')
zxrosAMATHashUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATHashUpdateTime.setStatus('current')
zxrosAMATIcmpConn = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATIcmpConn.setStatus('current')
zxrosAMATIcmpRate = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATIcmpRate.setStatus('current')
zxrosAMATIntervalSampleRate = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATIntervalSampleRate.setStatus('current')
zxrosAMATLogging = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATLogging.setStatus('current')
zxrosAMATRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATRateLimit.setStatus('current')
zxrosAMATRuleUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATRuleUpdateTime.setStatus('current')
zxrosAMATSampleCode = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATSampleCode.setStatus('current')
zxrosAMATSampleMatchCode = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATSampleMatchCode.setStatus('current')
zxrosAMATTcpConn = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATTcpConn.setStatus('current')
zxrosAMATTcpProportion = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATTcpProportion.setStatus('current')
zxrosAMATTcpRate = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATTcpRate.setStatus('current')
zxrosAMATUdpConn = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATUdpConn.setStatus('current')
zxrosAMATUdpRate = MibScalar((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATUdpRate.setStatus('current')
zxrosAMATIgnoreIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 2), )
if mibBuilder.loadTexts: zxrosAMATIgnoreIpAddressTable.setStatus('current')
zxrosAMATIgnoreIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 2, 1), ).setIndexNames((0, "ZXROS-AMAT-MIB", "zxrosAMATIgnoreIpAddressIpAddress"), (0, "ZXROS-AMAT-MIB", "zxrosAMATIgnoreIpAddressVpnName"))
if mibBuilder.loadTexts: zxrosAMATIgnoreIpAddressEntry.setStatus('current')
zxrosAMATIgnoreIpAddressIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATIgnoreIpAddressIpAddress.setStatus('current')
zxrosAMATIgnoreIpAddressVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATIgnoreIpAddressVpnName.setStatus('current')
zxrosAMATIgnoreIpAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zxrosAMATIgnoreIpAddressRowStatus.setStatus('current')
zxrosAMATAttackLoggingTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3), )
if mibBuilder.loadTexts: zxrosAMATAttackLoggingTable.setStatus('current')
zxrosAMATAttackLoggingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1), ).setIndexNames((0, "ZXROS-AMAT-MIB", "zxrosAMATAttackLoggingNo"))
if mibBuilder.loadTexts: zxrosAMATAttackLoggingEntry.setStatus('current')
zxrosAMATAttackLoggingNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATAttackLoggingNo.setStatus('current')
zxrosAMATAttackDetectedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATAttackDetectedTime.setStatus('current')
zxrosAMATAttackOverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATAttackOverTime.setStatus('current')
zxrosAMATVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATVpnName.setStatus('current')
zxrosAMATIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATIpAddress.setStatus('current')
zxrosAMATAttackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATAttackMode.setStatus('current')
zxrosAMATTcpPassPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATTcpPassPacket.setStatus('current')
zxrosAMATTcpFilterPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATTcpFilterPacket.setStatus('current')
zxrosAMATUdpPassPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATUdpPassPacket.setStatus('current')
zxrosAMATUdpFilterPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATUdpFilterPacket.setStatus('current')
zxrosAMATIcmpPassPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATIcmpPassPacket.setStatus('current')
zxrosAMATIcmpFilterPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATIcmpFilterPacket.setStatus('current')
zxrosAMATTcpAttackOverValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATTcpAttackOverValue.setStatus('current')
zxrosAMATUdpAttackOverValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATUdpAttackOverValue.setStatus('current')
zxrosAMATIcmpAttackOverValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATIcmpAttackOverValue.setStatus('current')
zxrosAMATPassPacketsBeforeRuleCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATPassPacketsBeforeRuleCreated.setStatus('current')
zxrosAMATShutDownLoggingTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4), )
if mibBuilder.loadTexts: zxrosAMATShutDownLoggingTable.setStatus('current')
zxrosAMATShutDownLoggingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1), ).setIndexNames((0, "ZXROS-AMAT-MIB", "zxrosAMATShutDownLoggingNo"))
if mibBuilder.loadTexts: zxrosAMATShutDownLoggingEntry.setStatus('current')
zxrosAMATShutDownLoggingNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATShutDownLoggingNo.setStatus('current')
zxrosAMATStartUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATStartUpTime.setStatus('current')
zxrosAMATShutDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATShutDownTime.setStatus('current')
zxrosAMATNoAmatPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATNoAmatPackets.setStatus('current')
zxrosAMATTotalPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATTotalPassPackets.setStatus('current')
zxrosAMATTotalFilterPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATTotalFilterPackets.setStatus('current')
zxrosAMATTcpPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATTcpPassPackets.setStatus('current')
zxrosAMATTcpFilterPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATTcpFilterPackets.setStatus('current')
zxrosAMATUdpPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATUdpPassPackets.setStatus('current')
zxrosAMATUdpFilterPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATUdpFilterPackets.setStatus('current')
zxrosAMATIcmpPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATIcmpPassPackets.setStatus('current')
zxrosAMATIcmpFilterPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 100, 1000, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxrosAMATIcmpFilterPackets.setStatus('current')
mibBuilder.exportSymbols("ZXROS-AMAT-MIB", zxrosAMATTotalFilterPackets=zxrosAMATTotalFilterPackets, zxrosAMATIcmpFilterPackets=zxrosAMATIcmpFilterPackets, zxrosAMATRuleUpdateTime=zxrosAMATRuleUpdateTime, zxrosAMATVpnName=zxrosAMATVpnName, zxrosAMATAttackAgingTime=zxrosAMATAttackAgingTime, zxrosAMATTcpProportion=zxrosAMATTcpProportion, zxrosAMATAttackLoggingNo=zxrosAMATAttackLoggingNo, zxrosAMATShutDownLoggingNo=zxrosAMATShutDownLoggingNo, zxrosAMATUdpRate=zxrosAMATUdpRate, zxrosAMATNoAmatPackets=zxrosAMATNoAmatPackets, zxrosAMATTcpConn=zxrosAMATTcpConn, zxrosAMAT=zxrosAMAT, zxrosAMATUdpFilterPackets=zxrosAMATUdpFilterPackets, zxrosAMATTcpFilterPackets=zxrosAMATTcpFilterPackets, zxrosAMATSampleMatchCode=zxrosAMATSampleMatchCode, zxrosAMATIgnoreIpAddressRowStatus=zxrosAMATIgnoreIpAddressRowStatus, zxrosAMATIpAddress=zxrosAMATIpAddress, zxrosAMATUdpPassPackets=zxrosAMATUdpPassPackets, zxrosAMATIcmpFilterPacket=zxrosAMATIcmpFilterPacket, zxrosAMATUdpAttackOverValue=zxrosAMATUdpAttackOverValue, zxrosAMATHashUpdateTime=zxrosAMATHashUpdateTime, zxrosAMATPassPacketsBeforeRuleCreated=zxrosAMATPassPacketsBeforeRuleCreated, zxrosAMATStartUpTime=zxrosAMATStartUpTime, zxrosAMATAttackDetectedTime=zxrosAMATAttackDetectedTime, zxrosAMATIcmpPassPacket=zxrosAMATIcmpPassPacket, zxrosAMATUdpFilterPacket=zxrosAMATUdpFilterPacket, zxrosAMATIntervalSampleRate=zxrosAMATIntervalSampleRate, zxrosAMATUdpConn=zxrosAMATUdpConn, zxrosAMATIgnoreIpAddressVpnName=zxrosAMATIgnoreIpAddressVpnName, zxrosAMATTcpFilterPacket=zxrosAMATTcpFilterPacket, zxrosAMATIcmpConn=zxrosAMATIcmpConn, zxrosAMATShutDownLoggingEntry=zxrosAMATShutDownLoggingEntry, zxrosAMATIcmpPassPackets=zxrosAMATIcmpPassPackets, zxrosAMATIcmpRate=zxrosAMATIcmpRate, zxrosAMATconfig=zxrosAMATconfig, zxros=zxros, zxrosAMATLogging=zxrosAMATLogging, zxrosAMATState=zxrosAMATState, zxrosAMATHashOverNum=zxrosAMATHashOverNum, zxrosAMATIgnoreIpAddressTable=zxrosAMATIgnoreIpAddressTable, zxrosAMATAttackOverTime=zxrosAMATAttackOverTime, zxrosAMATIcmpAttackOverValue=zxrosAMATIcmpAttackOverValue, zxrosAMATIgnoreIpAddressIpAddress=zxrosAMATIgnoreIpAddressIpAddress, zxrosAMATRateLimit=zxrosAMATRateLimit, zxrosAMATIgnoreIpAddressEntry=zxrosAMATIgnoreIpAddressEntry, zxrosAMATShutDownLoggingTable=zxrosAMATShutDownLoggingTable, zxrosAMATShutDownTime=zxrosAMATShutDownTime, zxrosAMATSampleCode=zxrosAMATSampleCode, zxrosAMATAttackLoggingTable=zxrosAMATAttackLoggingTable, zxrosAMATTotalPassPackets=zxrosAMATTotalPassPackets, zxrosAMATTcpPassPacket=zxrosAMATTcpPassPacket, zte=zte, zxrosAMATTcpRate=zxrosAMATTcpRate, zxrosAMATTcpAttackOverValue=zxrosAMATTcpAttackOverValue, DisplayString=DisplayString, zxrosAMATTcpPassPackets=zxrosAMATTcpPassPackets, zxrosAMATAttackLoggingEntry=zxrosAMATAttackLoggingEntry, zxrosAMATAttackMode=zxrosAMATAttackMode, zxrosAMATUdpPassPacket=zxrosAMATUdpPassPacket)
