#
# PySNMP MIB module MICOM-RFC1604-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-RFC1604-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:02:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, ObjectIdentity, Unsigned32, Counter64, Integer32, MibIdentifier, TimeTicks, IpAddress, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "ObjectIdentity", "Unsigned32", "Counter64", "Integer32", "MibIdentifier", "TimeTicks", "IpAddress", "Counter32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
micom_rfc1604 = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 8)).setLabel("micom-rfc1604")
rfc1604_configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1)).setLabel("rfc1604-configuration")
rfc1604_control = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2)).setLabel("rfc1604-control")
mcmFrLportTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 1), )
if mibBuilder.loadTexts: mcmFrLportTable.setStatus('mandatory')
mcmFrLportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 1, 1), ).setIndexNames((0, "MICOM-RFC1604-MIB", "mcmFrLportIfIndex"))
if mibBuilder.loadTexts: mcmFrLportEntry.setStatus('mandatory')
mcmFrLportIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLportIfIndex.setStatus('mandatory')
mcmFrLportNumPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("e164", 2), ("x121", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLportNumPlan.setStatus('mandatory')
mcmFrLportType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLportType.setStatus('mandatory')
mcmFrLportAddrDLCILen = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("twoOctets10Bits", 1), ("threeOctets10Bits", 2), ("threeOctets16Bits", 3), ("fourOctets17Bits", 4), ("fourOctets23Bits", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLportAddrDLCILen.setStatus('mandatory')
mcmFrLportVCSigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("lmi", 2), ("ccittQ933A", 5), ("ansiT1617D-1994", 6))).clone(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrLportVCSigProtocol.setStatus('mandatory')
mcmFrMgtVCSigTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2), )
if mibBuilder.loadTexts: mcmFrMgtVCSigTable.setStatus('mandatory')
mcmFrMgtVCSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2, 1), ).setIndexNames((0, "MICOM-RFC1604-MIB", "mcmFrMgtVCSigIfIndex"))
if mibBuilder.loadTexts: mcmFrMgtVCSigEntry.setStatus('mandatory')
mcmFrMgtVCSigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigIfIndex.setStatus('mandatory')
mcmFrMgtVCSigProced = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("u2nnet", 1), ("bidirect", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigProced.setStatus('mandatory')
mcmFrMgtVCSigNetN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigNetN392.setStatus('mandatory')
mcmFrMgtVCSigNetN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigNetN393.setStatus('mandatory')
mcmFrMgtVCSigNetT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigNetT392.setStatus('mandatory')
mcmFrMgtVCSigNetLinkRelErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigNetLinkRelErrors.setStatus('mandatory')
mcmFrMgtVCSigNetProtErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigNetProtErrors.setStatus('mandatory')
mcmFrMgtVCSigNetChanInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigNetChanInactive.setStatus('mandatory')
mcmFrPVCEndptTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3), )
if mibBuilder.loadTexts: mcmFrPVCEndptTable.setStatus('mandatory')
mcmFrPVCEndptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1), ).setIndexNames((0, "MICOM-RFC1604-MIB", "mcmFrPVCEndptIfIndex"), (0, "MICOM-RFC1604-MIB", "mcmFrPVCEndptDLCIIndex"))
if mibBuilder.loadTexts: mcmFrPVCEndptEntry.setStatus('mandatory')
mcmFrPVCEndptIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptIfIndex.setStatus('mandatory')
mcmFrPVCEndptDLCIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptDLCIIndex.setStatus('mandatory')
mcmFrPVCEndptInMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptInMaxFrameSize.setStatus('mandatory')
mcmFrPVCEndptInBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptInBc.setStatus('mandatory')
mcmFrPVCEndptInBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptInBe.setStatus('mandatory')
mcmFrPVCEndptInCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptInCIR.setStatus('mandatory')
mcmFrPVCEndptOutMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptOutMaxFrameSize.setStatus('mandatory')
mcmFrPVCEndptOutBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptOutBc.setStatus('mandatory')
mcmFrPVCEndptOutBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptOutBe.setStatus('mandatory')
mcmFrPVCEndptOutCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptOutCIR.setStatus('mandatory')
mcmFrPVCEndptInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptInFrames.setStatus('mandatory')
mcmFrPVCEndptOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptOutFrames.setStatus('mandatory')
mcmFrPVCEndptInDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptInDEFrames.setStatus('mandatory')
mcmFrPVCEndptInExcessFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptInExcessFrames.setStatus('mandatory')
mcmFrPVCEndptOutExcessFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptOutExcessFrames.setStatus('mandatory')
mcmFrPVCEndptInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptInDiscards.setStatus('mandatory')
mcmFrPVCEndptInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptInOctets.setStatus('mandatory')
mcmFrPVCEndptOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptOutOctets.setStatus('mandatory')
nvmFrLportTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 4), )
if mibBuilder.loadTexts: nvmFrLportTable.setStatus('mandatory')
nvmFrLportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 4, 1), ).setIndexNames((0, "MICOM-RFC1604-MIB", "nvmFrLportIfIndex"))
if mibBuilder.loadTexts: nvmFrLportEntry.setStatus('mandatory')
nvmFrLportIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrLportIfIndex.setStatus('mandatory')
nvmFrLportNumPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("e164", 2), ("x121", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrLportNumPlan.setStatus('mandatory')
nvmFrLportType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrLportType.setStatus('mandatory')
nvmFrLportAddrDLCILen = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("twoOctets10Bits", 1), ("threeOctets10Bits", 2), ("threeOctets16Bits", 3), ("fourOctets17Bits", 4), ("fourOctets23Bits", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrLportAddrDLCILen.setStatus('mandatory')
nvmFrLportVCSigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("lmi", 2), ("ccittQ933A", 5), ("ansiT1617D-1994", 6))).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrLportVCSigProtocol.setStatus('mandatory')
nvmFrMgtVCSigTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 5), )
if mibBuilder.loadTexts: nvmFrMgtVCSigTable.setStatus('mandatory')
nvmFrMgtVCSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 5, 1), ).setIndexNames((0, "MICOM-RFC1604-MIB", "nvmFrMgtVCSigIfIndex"))
if mibBuilder.loadTexts: nvmFrMgtVCSigEntry.setStatus('mandatory')
nvmFrMgtVCSigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrMgtVCSigIfIndex.setStatus('mandatory')
nvmFrMgtVCSigProced = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("u2nnet", 1), ("bidirect", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrMgtVCSigProced.setStatus('mandatory')
nvmFrMgtVCSigNetN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrMgtVCSigNetN392.setStatus('mandatory')
nvmFrMgtVCSigNetN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrMgtVCSigNetN393.setStatus('mandatory')
nvmFrMgtVCSigNetT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrMgtVCSigNetT392.setStatus('mandatory')
nvmFrPVCEndptTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6), )
if mibBuilder.loadTexts: nvmFrPVCEndptTable.setStatus('mandatory')
nvmFrPVCEndptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1), ).setIndexNames((0, "MICOM-RFC1604-MIB", "nvmFrPVCEndptIfIndex"), (0, "MICOM-RFC1604-MIB", "nvmFrPVCEndptDLCIIndex"))
if mibBuilder.loadTexts: nvmFrPVCEndptEntry.setStatus('mandatory')
nvmFrPVCEndptIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrPVCEndptIfIndex.setStatus('mandatory')
nvmFrPVCEndptDLCIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrPVCEndptDLCIIndex.setStatus('mandatory')
nvmFrPVCEndptInMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCEndptInMaxFrameSize.setStatus('mandatory')
nvmFrPVCEndptInBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrPVCEndptInBc.setStatus('mandatory')
nvmFrPVCEndptInBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCEndptInBe.setStatus('mandatory')
nvmFrPVCEndptInCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCEndptInCIR.setStatus('mandatory')
nvmFrPVCEndptOutMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCEndptOutMaxFrameSize.setStatus('mandatory')
nvmFrPVCEndptOutBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrPVCEndptOutBc.setStatus('mandatory')
nvmFrPVCEndptOutBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCEndptOutBe.setStatus('mandatory')
nvmFrPVCEndptOutCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrPVCEndptOutCIR.setStatus('mandatory')
mcmFrMgtVCSigCntrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2, 1), )
if mibBuilder.loadTexts: mcmFrMgtVCSigCntrTable.setStatus('obsolete')
mcmFrMgtVCSigCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2, 1, 1), ).setIndexNames((0, "MICOM-RFC1604-MIB", "mcmFrMgtVCSigCntrIfIndex"))
if mibBuilder.loadTexts: mcmFrMgtVCSigCntrEntry.setStatus('obsolete')
mcmFrMgtVCSigCntrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigCntrIfIndex.setStatus('obsolete')
mcmFrMgtVCSigCntrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmFrMgtVCSigCntrAction.setStatus('obsolete')
mcmFrPVCEndptCntrTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2, 2), )
if mibBuilder.loadTexts: mcmFrPVCEndptCntrTable.setStatus('obsolete')
mcmFrPVCEndptCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2, 2, 1), ).setIndexNames((0, "MICOM-RFC1604-MIB", "mcmFrPVCEndptCntrIfIndex"), (0, "MICOM-RFC1604-MIB", "mcmFrPVCEndptCntrDLCIIndex"))
if mibBuilder.loadTexts: mcmFrPVCEndptCntrEntry.setStatus('obsolete')
mcmFrPVCEndptCntrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptCntrIfIndex.setStatus('obsolete')
mcmFrPVCEndptCntrDLCIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrPVCEndptCntrDLCIIndex.setStatus('obsolete')
mcmFrPVCEndptCntrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmFrPVCEndptCntrAction.setStatus('obsolete')
mibBuilder.exportSymbols("MICOM-RFC1604-MIB", mcmFrPVCEndptInBe=mcmFrPVCEndptInBe, mcmFrLportType=mcmFrLportType, mcmFrPVCEndptOutBc=mcmFrPVCEndptOutBc, mcmFrPVCEndptOutBe=mcmFrPVCEndptOutBe, nvmFrMgtVCSigNetN392=nvmFrMgtVCSigNetN392, mcmFrMgtVCSigNetT392=mcmFrMgtVCSigNetT392, nvmFrPVCEndptInCIR=nvmFrPVCEndptInCIR, nvmFrPVCEndptTable=nvmFrPVCEndptTable, mcmFrPVCEndptCntrTable=mcmFrPVCEndptCntrTable, mcmFrPVCEndptCntrAction=mcmFrPVCEndptCntrAction, mcmFrMgtVCSigEntry=mcmFrMgtVCSigEntry, nvmFrPVCEndptOutBe=nvmFrPVCEndptOutBe, mcmFrPVCEndptOutFrames=mcmFrPVCEndptOutFrames, nvmFrLportEntry=nvmFrLportEntry, mcmFrMgtVCSigCntrAction=mcmFrMgtVCSigCntrAction, mcmFrPVCEndptInCIR=mcmFrPVCEndptInCIR, mcmFrPVCEndptInMaxFrameSize=mcmFrPVCEndptInMaxFrameSize, mcmFrLportEntry=mcmFrLportEntry, mcmFrPVCEndptOutOctets=mcmFrPVCEndptOutOctets, mcmFrPVCEndptOutMaxFrameSize=mcmFrPVCEndptOutMaxFrameSize, mcmFrLportIfIndex=mcmFrLportIfIndex, nvmFrPVCEndptOutMaxFrameSize=nvmFrPVCEndptOutMaxFrameSize, nvmFrPVCEndptOutCIR=nvmFrPVCEndptOutCIR, mcmFrPVCEndptInBc=mcmFrPVCEndptInBc, nvmFrMgtVCSigIfIndex=nvmFrMgtVCSigIfIndex, mcmFrMgtVCSigCntrTable=mcmFrMgtVCSigCntrTable, mcmFrPVCEndptEntry=mcmFrPVCEndptEntry, mcmFrLportVCSigProtocol=mcmFrLportVCSigProtocol, mcmFrLportTable=mcmFrLportTable, mcmFrPVCEndptIfIndex=mcmFrPVCEndptIfIndex, mcmFrPVCEndptInDiscards=mcmFrPVCEndptInDiscards, nvmFrLportIfIndex=nvmFrLportIfIndex, nvmFrMgtVCSigTable=nvmFrMgtVCSigTable, nvmFrPVCEndptEntry=nvmFrPVCEndptEntry, nvmFrLportAddrDLCILen=nvmFrLportAddrDLCILen, nvmFrMgtVCSigProced=nvmFrMgtVCSigProced, nvmFrPVCEndptInBc=nvmFrPVCEndptInBc, mcmFrPVCEndptCntrIfIndex=mcmFrPVCEndptCntrIfIndex, mcmFrMgtVCSigIfIndex=mcmFrMgtVCSigIfIndex, rfc1604_control=rfc1604_control, rfc1604_configuration=rfc1604_configuration, nvmFrLportTable=nvmFrLportTable, nvmFrMgtVCSigEntry=nvmFrMgtVCSigEntry, mcmFrPVCEndptInFrames=mcmFrPVCEndptInFrames, mcmFrLportNumPlan=mcmFrLportNumPlan, mcmFrPVCEndptTable=mcmFrPVCEndptTable, mcmFrMgtVCSigNetN393=mcmFrMgtVCSigNetN393, mcmFrMgtVCSigCntrEntry=mcmFrMgtVCSigCntrEntry, nvmFrPVCEndptIfIndex=nvmFrPVCEndptIfIndex, mcmFrPVCEndptCntrEntry=mcmFrPVCEndptCntrEntry, mcmFrPVCEndptDLCIIndex=mcmFrPVCEndptDLCIIndex, nvmFrLportType=nvmFrLportType, mcmFrPVCEndptInDEFrames=mcmFrPVCEndptInDEFrames, nvmFrLportVCSigProtocol=nvmFrLportVCSigProtocol, mcmFrPVCEndptOutCIR=mcmFrPVCEndptOutCIR, mcmFrPVCEndptInOctets=mcmFrPVCEndptInOctets, nvmFrPVCEndptInBe=nvmFrPVCEndptInBe, mcmFrMgtVCSigCntrIfIndex=mcmFrMgtVCSigCntrIfIndex, mcmFrMgtVCSigProced=mcmFrMgtVCSigProced, mcmFrLportAddrDLCILen=mcmFrLportAddrDLCILen, nvmFrPVCEndptDLCIIndex=nvmFrPVCEndptDLCIIndex, nvmFrMgtVCSigNetN393=nvmFrMgtVCSigNetN393, nvmFrPVCEndptInMaxFrameSize=nvmFrPVCEndptInMaxFrameSize, mcmFrPVCEndptCntrDLCIIndex=mcmFrPVCEndptCntrDLCIIndex, mcmFrPVCEndptInExcessFrames=mcmFrPVCEndptInExcessFrames, mcmFrMgtVCSigNetProtErrors=mcmFrMgtVCSigNetProtErrors, mcmFrMgtVCSigNetLinkRelErrors=mcmFrMgtVCSigNetLinkRelErrors, micom_rfc1604=micom_rfc1604, mcmFrMgtVCSigTable=mcmFrMgtVCSigTable, mcmFrMgtVCSigNetChanInactive=mcmFrMgtVCSigNetChanInactive, nvmFrLportNumPlan=nvmFrLportNumPlan, nvmFrMgtVCSigNetT392=nvmFrMgtVCSigNetT392, nvmFrPVCEndptOutBc=nvmFrPVCEndptOutBc, mcmFrMgtVCSigNetN392=mcmFrMgtVCSigNetN392, mcmFrPVCEndptOutExcessFrames=mcmFrPVCEndptOutExcessFrames)
