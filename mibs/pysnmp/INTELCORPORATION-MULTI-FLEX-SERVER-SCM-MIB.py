#
# PySNMP MIB module INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:43:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
chassis, = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-MIB", "chassis")
groups, regModule = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "groups", "regModule")
INT32withException, FaultLedStates, Index, Power, PowerLedStates, IdromBinary16, Presence = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-TC", "INT32withException", "FaultLedStates", "Index", "Power", "PowerLedStates", "IdromBinary16", "Presence")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Gauge32, Integer32, NotificationType, Bits, iso, MibIdentifier, ModuleIdentity, Counter32, Unsigned32, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "NotificationType", "Bits", "iso", "MibIdentifier", "ModuleIdentity", "Counter32", "Unsigned32", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
multiFlexServerScmMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 1, 14))
multiFlexServerScmMibModule.setRevisions(('2007-09-29 00:00', '2007-08-16 13:00', '2007-08-10 15:30', '2007-08-06 13:00', '2007-07-16 13:30', '2007-06-18 13:30', '2007-06-07 20:30', '2007-06-07 13:30', '2007-05-23 11:00', '2007-05-17 11:30', '2007-04-18 19:05', '2007-04-09 10:30', '2007-03-12 18:00', '2007-03-10 18:30', '2007-03-06 10:30', '2007-02-22 17:00', '2007-01-15 17:00', '2007-01-05 10:20', '2006-12-28 15:30', '2006-12-08 13:30', '2006-12-05 10:30', '2006-12-04 16:00', '2006-11-28 15:30', '2006-11-07 07:01', '2006-10-02 06:29',))
if mibBuilder.loadTexts: multiFlexServerScmMibModule.setLastUpdated('200709290000Z')
if mibBuilder.loadTexts: multiFlexServerScmMibModule.setOrganization('Intel Corporation')
maxScms = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxScms.setStatus('current')
numOfScms = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfScms.setStatus('current')
scmPresenceMask = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPresenceMask.setStatus('current')
scms = ObjectIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204))
if mibBuilder.loadTexts: scms.setStatus('current')
scmTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1), )
if mibBuilder.loadTexts: scmTable.setStatus('current')
scmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmIndex"))
if mibBuilder.loadTexts: scmEntry.setStatus('current')
scmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmIndex.setStatus('current')
scmPresence = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 2), Presence()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPresence.setStatus('current')
scmVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmVendor.setStatus('current')
scmMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmMfgDate.setStatus('current')
scmDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmDeviceName.setStatus('current')
scmPart = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 6), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPart.setStatus('current')
scmSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 7), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmSerialNo.setStatus('current')
scmMaximumPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 8), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmMaximumPower.setStatus('current')
scmNominalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 9), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNominalPower.setStatus('current')
scmAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 10), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmAssetTag.setStatus('current')
scmManagementMac = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 11), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmManagementMac.setStatus('current')
scmWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmWWN.setStatus('current')
scmSCSIProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-32, -16, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -32), ("unknown", -16), ("other", 1), ("scsi2", 2), ("scsi3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmSCSIProtocol.setStatus('current')
scmPowerLed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 14), PowerLedStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPowerLed.setStatus('current')
scmFaultLed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 15), FaultLedStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmFaultLed.setStatus('current')
scmFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmFirmwareVersion.setStatus('current')
scmOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmOpStatus.setStatus('current')
scmRole = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-32, -16, -1, 1, 0))).clone(namedValues=NamedValues(("notApplicable", -32), ("unknown", -16), ("unavailable", -1), ("primary", 1), ("secondary", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmRole.setStatus('current')
scmReadinessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmReadinessStatus.setStatus('current')
scmNumOfPoolsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 20), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfPoolsPresent.setStatus('current')
scmNumOfPhysicalDrivesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 21), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesPresent.setStatus('current')
scmNumOfPhysicalDrivesOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 22), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesOnline.setStatus('current')
scmNumOfPhysicalDrivesOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 23), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesOffline.setStatus('current')
scmNumOfPhysicalDrivesWithPFA = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 24), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesWithPFA.setStatus('current')
scmNumOfPhysicalDrivesRebuilding = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 25), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesRebuilding.setStatus('current')
scmNumOfPhysicalDrivesMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 26), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesMissing.setStatus('current')
scmNumOfPhysicalDrivesUnconfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 27), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfPhysicalDrivesUnconfigured.setStatus('current')
scmNumOfVirtualDrivesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 28), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfVirtualDrivesPresent.setStatus('current')
scmNumOfVirtualDrivesOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 29), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfVirtualDrivesOnline.setStatus('current')
scmNumOfVirtualDrivesOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 30), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfVirtualDrivesOffline.setStatus('current')
scmNumOfVirtualDrivesCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 31), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfVirtualDrivesCritical.setStatus('current')
scmNumOfGlobalSparesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 32), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfGlobalSparesPresent.setStatus('current')
scmNumOfDedicatedSparesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 33), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfDedicatedSparesPresent.setStatus('current')
scmNumOfRevertibleGlobalSparesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 34), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfRevertibleGlobalSparesPresent.setStatus('current')
scmNumOfRevertibleGlobalSparesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 35), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfRevertibleGlobalSparesUsed.setStatus('current')
scmNumOfRevertibleDedicatedSparesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 36), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfRevertibleDedicatedSparesPresent.setStatus('current')
scmNumOfRevertibleDedicatedSparesUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 37), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfRevertibleDedicatedSparesUsed.setStatus('current')
scmNumOfBGAs = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 38), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmNumOfBGAs.setStatus('current')
scmPowerOnHours = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 39), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmPowerOnHours.setStatus('current')
scmDirtyCachePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 40), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmDirtyCachePercentage.setStatus('current')
scmCacheUsagePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 1, 1, 41), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmCacheUsagePercentage.setStatus('current')
scmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2), )
if mibBuilder.loadTexts: scmStatsTable.setStatus('current')
scmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1), )
scmEntry.registerAugmentions(("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsEntry"))
scmStatsEntry.setIndexNames(*scmEntry.getIndexNames())
if mibBuilder.loadTexts: scmStatsEntry.setStatus('current')
scmStatsDataTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsDataTransferred.setStatus('current')
scmStatsReadDataTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsReadDataTransferred.setStatus('current')
scmStatsWriteDataTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsWriteDataTransferred.setStatus('current')
scmStatsNumOfErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsNumOfErrors.setStatus('current')
scmStatsNumOfNonRWErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsNumOfNonRWErrors.setStatus('current')
scmStatsNumOfReadErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsNumOfReadErrors.setStatus('current')
scmStatsNumOfWriteErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsNumOfWriteErrors.setStatus('current')
scmStatsNumOfIORequests = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsNumOfIORequests.setStatus('current')
scmStatsNumOfNonRWRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsNumOfNonRWRequests.setStatus('current')
scmStatsNumOfReadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsNumOfReadRequests.setStatus('current')
scmStatsNumOfWriteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsNumOfWriteRequests.setStatus('current')
scmStatsStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsStartTime.setStatus('current')
scmStatsCollectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmStatsCollectionTime.setStatus('current')
scmBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3), )
if mibBuilder.loadTexts: scmBatteryTable.setStatus('current')
scmBatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1), )
scmEntry.registerAugmentions(("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryEntry"))
scmBatteryEntry.setIndexNames(*scmEntry.getIndexNames())
if mibBuilder.loadTexts: scmBatteryEntry.setStatus('current')
scmBatteryPresence = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 1), Presence()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryPresence.setStatus('current')
scmBatteryVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryVendor.setStatus('current')
scmBatteryMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryMfgDate.setStatus('current')
scmBatteryDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryDeviceName.setStatus('current')
scmBatteryPart = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 5), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryPart.setStatus('current')
scmBatterySerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 6), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatterySerialNo.setStatus('current')
scmBatteryMaximumPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 7), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryMaximumPower.setStatus('current')
scmBatteryNominalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 8), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryNominalPower.setStatus('current')
scmBatteryAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 9), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryAssetTag.setStatus('current')
scmBatteryDeviceChemistry = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryDeviceChemistry.setStatus('current')
scmBatteryTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 11), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryTemperature.setStatus('current')
scmBatteryTempChargeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 12), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryTempChargeThreshold.setStatus('current')
scmBatteryTempDisChargeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 13), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryTempDisChargeThreshold.setStatus('current')
scmBatteryCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 14), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryCycleCount.setStatus('current')
scmBatteryRemainCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 15), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryRemainCapacity.setStatus('current')
scmBatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 16), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryVoltage.setStatus('current')
scmBatteryCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 17), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryCurrent.setStatus('current')
scmBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryStatus.setStatus('current')
scmBatteryCellType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-32, -16, 2, 4))).clone(namedValues=NamedValues(("notApplicable", -32), ("unknown", -16), ("twoCell", 2), ("fourCell", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryCellType.setStatus('current')
scmBatteryHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 204, 3, 1, 20), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmBatteryHoldTime.setStatus('current')
ctlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 2, 2, 14)).setObjects(("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "maxScms"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "numOfScms"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmPresenceMask"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmIndex"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmPresence"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmVendor"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmMfgDate"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmDeviceName"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmPart"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmSerialNo"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmMaximumPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNominalPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmAssetTag"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmManagementMac"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmWWN"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmSCSIProtocol"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmPowerLed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmFaultLed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmFirmwareVersion"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmOpStatus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmRole"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmReadinessStatus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfPoolsPresent"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfPhysicalDrivesPresent"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfPhysicalDrivesOnline"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfPhysicalDrivesOffline"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfPhysicalDrivesWithPFA"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfPhysicalDrivesRebuilding"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfPhysicalDrivesMissing"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfPhysicalDrivesUnconfigured"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfVirtualDrivesPresent"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfVirtualDrivesOnline"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfVirtualDrivesOffline"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfVirtualDrivesCritical"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfGlobalSparesPresent"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfDedicatedSparesPresent"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfRevertibleGlobalSparesPresent"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfRevertibleGlobalSparesUsed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfRevertibleDedicatedSparesPresent"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfRevertibleDedicatedSparesUsed"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmNumOfBGAs"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmPowerOnHours"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmDirtyCachePercentage"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmCacheUsagePercentage"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsDataTransferred"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsReadDataTransferred"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsWriteDataTransferred"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsNumOfErrors"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsNumOfNonRWErrors"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsNumOfReadErrors"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsNumOfWriteErrors"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsNumOfIORequests"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsNumOfNonRWRequests"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsNumOfReadRequests"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsNumOfWriteRequests"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsStartTime"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmStatsCollectionTime"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryPresence"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryVendor"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryMfgDate"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryDeviceName"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryPart"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatterySerialNo"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryMaximumPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryNominalPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryAssetTag"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryDeviceChemistry"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryTemperature"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryTempChargeThreshold"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryTempDisChargeThreshold"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryCycleCount"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryRemainCapacity"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryVoltage"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryCurrent"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryStatus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryCellType"), ("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", "scmBatteryHoldTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctlGroup = ctlGroup.setStatus('current')
mibBuilder.exportSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-SCM-MIB", scmNumOfRevertibleDedicatedSparesUsed=scmNumOfRevertibleDedicatedSparesUsed, scmPowerOnHours=scmPowerOnHours, scmBatteryEntry=scmBatteryEntry, scmBatteryVendor=scmBatteryVendor, scms=scms, scmNumOfVirtualDrivesOnline=scmNumOfVirtualDrivesOnline, scmBatteryVoltage=scmBatteryVoltage, scmPresenceMask=scmPresenceMask, scmOpStatus=scmOpStatus, scmPresence=scmPresence, scmNumOfVirtualDrivesCritical=scmNumOfVirtualDrivesCritical, scmBatteryDeviceChemistry=scmBatteryDeviceChemistry, scmBatteryTemperature=scmBatteryTemperature, scmStatsNumOfErrors=scmStatsNumOfErrors, scmFirmwareVersion=scmFirmwareVersion, scmNumOfPoolsPresent=scmNumOfPoolsPresent, scmNumOfRevertibleDedicatedSparesPresent=scmNumOfRevertibleDedicatedSparesPresent, scmBatteryHoldTime=scmBatteryHoldTime, scmBatteryCellType=scmBatteryCellType, multiFlexServerScmMibModule=multiFlexServerScmMibModule, scmStatsWriteDataTransferred=scmStatsWriteDataTransferred, scmManagementMac=scmManagementMac, scmMaximumPower=scmMaximumPower, scmCacheUsagePercentage=scmCacheUsagePercentage, ctlGroup=ctlGroup, scmStatsNumOfNonRWRequests=scmStatsNumOfNonRWRequests, scmReadinessStatus=scmReadinessStatus, scmStatsEntry=scmStatsEntry, scmBatteryNominalPower=scmBatteryNominalPower, scmBatteryRemainCapacity=scmBatteryRemainCapacity, scmBatteryPresence=scmBatteryPresence, scmStatsNumOfNonRWErrors=scmStatsNumOfNonRWErrors, scmStatsStartTime=scmStatsStartTime, scmBatteryAssetTag=scmBatteryAssetTag, scmNumOfDedicatedSparesPresent=scmNumOfDedicatedSparesPresent, scmNumOfPhysicalDrivesOnline=scmNumOfPhysicalDrivesOnline, scmNumOfRevertibleGlobalSparesUsed=scmNumOfRevertibleGlobalSparesUsed, scmIndex=scmIndex, maxScms=maxScms, scmPart=scmPart, scmNumOfVirtualDrivesPresent=scmNumOfVirtualDrivesPresent, scmDeviceName=scmDeviceName, scmStatsNumOfReadErrors=scmStatsNumOfReadErrors, scmNumOfPhysicalDrivesRebuilding=scmNumOfPhysicalDrivesRebuilding, scmBatteryTable=scmBatteryTable, scmBatteryStatus=scmBatteryStatus, scmStatsDataTransferred=scmStatsDataTransferred, scmNumOfPhysicalDrivesWithPFA=scmNumOfPhysicalDrivesWithPFA, scmBatteryCurrent=scmBatteryCurrent, scmPowerLed=scmPowerLed, scmWWN=scmWWN, numOfScms=numOfScms, scmTable=scmTable, scmNumOfGlobalSparesPresent=scmNumOfGlobalSparesPresent, scmBatteryCycleCount=scmBatteryCycleCount, scmNumOfPhysicalDrivesUnconfigured=scmNumOfPhysicalDrivesUnconfigured, scmVendor=scmVendor, scmNominalPower=scmNominalPower, scmStatsNumOfIORequests=scmStatsNumOfIORequests, scmNumOfVirtualDrivesOffline=scmNumOfVirtualDrivesOffline, scmBatteryDeviceName=scmBatteryDeviceName, scmBatteryPart=scmBatteryPart, scmMfgDate=scmMfgDate, scmNumOfRevertibleGlobalSparesPresent=scmNumOfRevertibleGlobalSparesPresent, scmFaultLed=scmFaultLed, scmStatsCollectionTime=scmStatsCollectionTime, scmSerialNo=scmSerialNo, scmNumOfBGAs=scmNumOfBGAs, scmEntry=scmEntry, scmNumOfPhysicalDrivesOffline=scmNumOfPhysicalDrivesOffline, scmStatsNumOfWriteErrors=scmStatsNumOfWriteErrors, scmStatsReadDataTransferred=scmStatsReadDataTransferred, scmStatsNumOfReadRequests=scmStatsNumOfReadRequests, scmBatteryMfgDate=scmBatteryMfgDate, scmBatteryTempChargeThreshold=scmBatteryTempChargeThreshold, scmSCSIProtocol=scmSCSIProtocol, scmBatteryMaximumPower=scmBatteryMaximumPower, scmStatsTable=scmStatsTable, scmBatterySerialNo=scmBatterySerialNo, scmNumOfPhysicalDrivesPresent=scmNumOfPhysicalDrivesPresent, scmRole=scmRole, scmBatteryTempDisChargeThreshold=scmBatteryTempDisChargeThreshold, scmStatsNumOfWriteRequests=scmStatsNumOfWriteRequests, scmAssetTag=scmAssetTag, scmNumOfPhysicalDrivesMissing=scmNumOfPhysicalDrivesMissing, PYSNMP_MODULE_ID=multiFlexServerScmMibModule, scmDirtyCachePercentage=scmDirtyCachePercentage)
