#
# PySNMP MIB module IEEE802dot11-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IEEE802dot11-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:38:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Gauge32, ObjectIdentity, Counter32, Unsigned32, IpAddress, Integer32, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Gauge32", "ObjectIdentity", "Counter32", "Unsigned32", "IpAddress", "Integer32", "Counter64", "iso")
MacAddress, TruthValue, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "TextualConvention", "DisplayString", "RowStatus")
member_body = MibIdentifier((1, 2)).setLabel("member-body")
us = MibIdentifier((1, 2, 840))
ieee802dot11 = ModuleIdentity((1, 2, 840, 10036))
if mibBuilder.loadTexts: ieee802dot11.setLastUpdated('200103270000Z')
if mibBuilder.loadTexts: ieee802dot11.setOrganization('IEEE 802.11')
dot11smt = MibIdentifier((1, 2, 840, 10036, 1))
dot11mac = MibIdentifier((1, 2, 840, 10036, 2))
dot11res = MibIdentifier((1, 2, 840, 10036, 3))
dot11resAttribute = MibIdentifier((1, 2, 840, 10036, 3, 1))
dot11phy = MibIdentifier((1, 2, 840, 10036, 4))
class WEPKeytype(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(5, 5)
    fixedLength = 5

dot11StationConfigTable = MibTable((1, 2, 840, 10036, 1, 1), )
if mibBuilder.loadTexts: dot11StationConfigTable.setStatus('current')
dot11StationConfigEntry = MibTableRow((1, 2, 840, 10036, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11StationConfigEntry.setStatus('current')
dot11StationID = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11StationID.setStatus('deprecated')
dot11MediumOccupancyLimit = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MediumOccupancyLimit.setStatus('current')
dot11CFPollable = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11CFPollable.setStatus('current')
dot11CFPPeriod = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CFPPeriod.setStatus('current')
dot11CFPMaxDuration = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CFPMaxDuration.setStatus('current')
dot11AuthenticationResponseTimeOut = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationResponseTimeOut.setStatus('current')
dot11PrivacyOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11PrivacyOptionImplemented.setStatus('current')
dot11PowerManagementMode = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("powersave", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PowerManagementMode.setStatus('current')
dot11DesiredSSID = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DesiredSSID.setStatus('current')
dot11DesiredBSSType = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("infrastructure", 1), ("independent", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DesiredBSSType.setStatus('current')
dot11OperationalRateSet = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11OperationalRateSet.setStatus('current')
dot11BeaconPeriod = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11BeaconPeriod.setStatus('current')
dot11DTIMPeriod = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DTIMPeriod.setStatus('current')
dot11AssociationResponseTimeOut = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AssociationResponseTimeOut.setStatus('current')
dot11DisassociateReason = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11DisassociateReason.setStatus('current')
dot11DisassociateStation = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 16), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11DisassociateStation.setStatus('current')
dot11DeauthenticateReason = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11DeauthenticateReason.setStatus('current')
dot11DeauthenticateStation = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 18), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11DeauthenticateStation.setStatus('current')
dot11AuthenticateFailStatus = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11AuthenticateFailStatus.setStatus('current')
dot11AuthenticateFailStation = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 20), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11AuthenticateFailStation.setStatus('current')
dot11MultiDomainCapabilityImplemented = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MultiDomainCapabilityImplemented.setStatus('current')
dot11MultiDomainCapabilityEnabled = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MultiDomainCapabilityEnabled.setStatus('current')
dot11CountryString = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11CountryString.setStatus('current')
dot11SpectrumManagementImplemented = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SpectrumManagementImplemented.setStatus('current')
dot11SpectrumManagementRequired = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SpectrumManagementRequired.setStatus('current')
dot11RSNAOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAOptionImplemented.setStatus('current')
dot11RSNAPreauthenticationImplemented = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAPreauthenticationImplemented.setStatus('current')
dot11QosOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 30), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QosOptionImplemented.setStatus('current')
dot11ImmediateBlockAckOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 31), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ImmediateBlockAckOptionImplemented.setStatus('current')
dot11DelayedBlockAckOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 32), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11DelayedBlockAckOptionImplemented.setStatus('current')
dot11DirectOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 33), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11DirectOptionImplemented.setStatus('current')
dot11APSDOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 34), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11APSDOptionImplemented.setStatus('current')
dot11QAckOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 35), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QAckOptionImplemented.setStatus('current')
dot11QBSSLoadOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 36), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QBSSLoadOptionImplemented.setStatus('current')
dot11QueueRequestOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 37), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QueueRequestOptionImplemented.setStatus('current')
dot11TXOPRequestOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 38), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TXOPRequestOptionImplemented.setStatus('current')
dot11MoreDataAckOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 39), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MoreDataAckOptionImplemented.setStatus('current')
dot11AssociateinNQBSS = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 40), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AssociateinNQBSS.setStatus('current')
dot11DLSAllowedInQBSS = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 41), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DLSAllowedInQBSS.setStatus('current')
dot11DLSAllowed = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 42), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DLSAllowed.setStatus('current')
dot11HighThroughputOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 1, 1, 58), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11HighThroughputOptionImplemented.setStatus('current')
dot11AuthenticationAlgorithmsTable = MibTable((1, 2, 840, 10036, 1, 2), )
if mibBuilder.loadTexts: dot11AuthenticationAlgorithmsTable.setStatus('current')
dot11AuthenticationAlgorithmsEntry = MibTableRow((1, 2, 840, 10036, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11AuthenticationAlgorithmsIndex"))
if mibBuilder.loadTexts: dot11AuthenticationAlgorithmsEntry.setStatus('current')
dot11AuthenticationAlgorithmsIndex = MibTableColumn((1, 2, 840, 10036, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11AuthenticationAlgorithmsIndex.setStatus('current')
dot11AuthenticationAlgorithm = MibTableColumn((1, 2, 840, 10036, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11AuthenticationAlgorithm.setStatus('current')
dot11AuthenticationAlgorithmsEnable = MibTableColumn((1, 2, 840, 10036, 1, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationAlgorithmsEnable.setStatus('current')
dot11WEPDefaultKeysTable = MibTable((1, 2, 840, 10036, 1, 3), )
if mibBuilder.loadTexts: dot11WEPDefaultKeysTable.setStatus('current')
dot11WEPDefaultKeysEntry = MibTableRow((1, 2, 840, 10036, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11WEPDefaultKeyIndex"))
if mibBuilder.loadTexts: dot11WEPDefaultKeysEntry.setStatus('current')
dot11WEPDefaultKeyIndex = MibTableColumn((1, 2, 840, 10036, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WEPDefaultKeyIndex.setStatus('current')
dot11WEPDefaultKeyValue = MibTableColumn((1, 2, 840, 10036, 1, 3, 1, 2), WEPKeytype()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WEPDefaultKeyValue.setStatus('current')
dot11WEPKeyMappingsTable = MibTable((1, 2, 840, 10036, 1, 4), )
if mibBuilder.loadTexts: dot11WEPKeyMappingsTable.setStatus('current')
dot11WEPKeyMappingsEntry = MibTableRow((1, 2, 840, 10036, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11WEPKeyMappingIndex"))
if mibBuilder.loadTexts: dot11WEPKeyMappingsEntry.setStatus('current')
dot11WEPKeyMappingIndex = MibTableColumn((1, 2, 840, 10036, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WEPKeyMappingIndex.setStatus('current')
dot11WEPKeyMappingAddress = MibTableColumn((1, 2, 840, 10036, 1, 4, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot11WEPKeyMappingAddress.setStatus('current')
dot11WEPKeyMappingWEPOn = MibTableColumn((1, 2, 840, 10036, 1, 4, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot11WEPKeyMappingWEPOn.setStatus('current')
dot11WEPKeyMappingValue = MibTableColumn((1, 2, 840, 10036, 1, 4, 1, 4), WEPKeytype()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot11WEPKeyMappingValue.setStatus('current')
dot11WEPKeyMappingStatus = MibTableColumn((1, 2, 840, 10036, 1, 4, 1, 5), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot11WEPKeyMappingStatus.setStatus('current')
dot11PrivacyTable = MibTable((1, 2, 840, 10036, 1, 5), )
if mibBuilder.loadTexts: dot11PrivacyTable.setStatus('current')
dot11PrivacyEntry = MibTableRow((1, 2, 840, 10036, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PrivacyEntry.setStatus('current')
dot11PrivacyInvoked = MibTableColumn((1, 2, 840, 10036, 1, 5, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PrivacyInvoked.setStatus('current')
dot11WEPDefaultKeyID = MibTableColumn((1, 2, 840, 10036, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WEPDefaultKeyID.setStatus('current')
dot11WEPKeyMappingLength = MibTableColumn((1, 2, 840, 10036, 1, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WEPKeyMappingLength.setStatus('current')
dot11ExcludeUnencrypted = MibTableColumn((1, 2, 840, 10036, 1, 5, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ExcludeUnencrypted.setStatus('current')
dot11WEPICVErrorCount = MibTableColumn((1, 2, 840, 10036, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WEPICVErrorCount.setStatus('current')
dot11WEPExcludedCount = MibTableColumn((1, 2, 840, 10036, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WEPExcludedCount.setStatus('current')
dot11RSNAEnabled = MibTableColumn((1, 2, 840, 10036, 1, 5, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RSNAEnabled.setStatus('current')
dot11RSNAPreAuthenticationEnabled = MibTableColumn((1, 2, 840, 10036, 1, 5, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RSNAPreAuthenticationEnabled.setStatus('current')
dot11SMTnotification = MibIdentifier((1, 2, 840, 10036, 1, 6))
dot11SMT_unknown = MibIdentifier((1, 2, 840, 10036, 1, 6, 0)).setLabel("dot11SMT-unknown")
dot11Disassociate = NotificationType((1, 2, 840, 10036, 1, 6, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IEEE802dot11-MIB", "dot11DisassociateReason"), ("IEEE802dot11-MIB", "dot11DisassociateStation"))
if mibBuilder.loadTexts: dot11Disassociate.setStatus('current')
dot11Deauthenticate = NotificationType((1, 2, 840, 10036, 1, 6, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("IEEE802dot11-MIB", "dot11DeauthenticateReason"), ("IEEE802dot11-MIB", "dot11DeauthenticateStation"))
if mibBuilder.loadTexts: dot11Deauthenticate.setStatus('current')
dot11AuthenticateFail = NotificationType((1, 2, 840, 10036, 1, 6, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("IEEE802dot11-MIB", "dot11AuthenticateFailStatus"), ("IEEE802dot11-MIB", "dot11AuthenticateFailStation"))
if mibBuilder.loadTexts: dot11AuthenticateFail.setStatus('current')
dot11MultiDomainCapabilityTable = MibTable((1, 2, 840, 10036, 1, 7), )
if mibBuilder.loadTexts: dot11MultiDomainCapabilityTable.setStatus('current')
dot11MultiDomainCapabilityEntry = MibTableRow((1, 2, 840, 10036, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11MultiDomainCapabilityIndex"))
if mibBuilder.loadTexts: dot11MultiDomainCapabilityEntry.setStatus('current')
dot11MultiDomainCapabilityIndex = MibTableColumn((1, 2, 840, 10036, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MultiDomainCapabilityIndex.setStatus('current')
dot11FirstChannelNumber = MibTableColumn((1, 2, 840, 10036, 1, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11FirstChannelNumber.setStatus('current')
dot11NumberofChannels = MibTableColumn((1, 2, 840, 10036, 1, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11NumberofChannels.setStatus('current')
dot11MaximumTransmitPowerLevel = MibTableColumn((1, 2, 840, 10036, 1, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MaximumTransmitPowerLevel.setStatus('current')
dot11SpectrumManagementTable = MibTable((1, 2, 840, 10036, 1, 8), )
if mibBuilder.loadTexts: dot11SpectrumManagementTable.setStatus('current')
dot11SpectrumManagementEntry = MibTableRow((1, 2, 840, 10036, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11SpectrumManagementIndex"))
if mibBuilder.loadTexts: dot11SpectrumManagementEntry.setStatus('current')
dot11SpectrumManagementIndex = MibTableColumn((1, 2, 840, 10036, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SpectrumManagementIndex.setStatus('current')
dot11MitigationRequirement = MibTableColumn((1, 2, 840, 10036, 1, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MitigationRequirement.setStatus('current')
dot11ChannelSwitchTime = MibTableColumn((1, 2, 840, 10036, 1, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ChannelSwitchTime.setStatus('current')
dot11PowerCapabilityMax = MibTableColumn((1, 2, 840, 10036, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11PowerCapabilityMax.setStatus('current')
dot11PowerCapabilityMin = MibTableColumn((1, 2, 840, 10036, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11PowerCapabilityMin.setStatus('current')
dot11OperationTable = MibTable((1, 2, 840, 10036, 2, 1), )
if mibBuilder.loadTexts: dot11OperationTable.setStatus('current')
dot11OperationEntry = MibTableRow((1, 2, 840, 10036, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11OperationEntry.setStatus('current')
dot11MACAddress = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MACAddress.setStatus('current')
dot11RTSThreshold = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RTSThreshold.setStatus('current')
dot11ShortRetryLimit = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ShortRetryLimit.setStatus('current')
dot11LongRetryLimit = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11LongRetryLimit.setStatus('current')
dot11FragmentationThreshold = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 8000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11FragmentationThreshold.setStatus('current')
dot11MaxTransmitMSDULifetime = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MaxTransmitMSDULifetime.setStatus('current')
dot11MaxReceiveLifetime = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MaxReceiveLifetime.setStatus('current')
dot11ManufacturerID = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ManufacturerID.setStatus('current')
dot11ProductID = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ProductID.setStatus('current')
dot11CAPLimit = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CAPLimit.setStatus('current')
dot11HCCWmin = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11HCCWmin.setStatus('current')
dot11HCCWmax = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11HCCWmax.setStatus('current')
dot11HCCAIFSN = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11HCCAIFSN.setStatus('current')
dot11ADDBAResponseTimeout = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ADDBAResponseTimeout.setStatus('current')
dot11ADDTSResponseTimeout = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ADDTSResponseTimeout.setStatus('current')
dot11ChannelUtilizationBeaconInterval = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ChannelUtilizationBeaconInterval.setStatus('current')
dot11ScheduleTimeout = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ScheduleTimeout.setStatus('current')
dot11DLSResponseTimeout = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DLSResponseTimeout.setStatus('current')
dot11QAPMissingAckRetryLimit = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QAPMissingAckRetryLimit.setStatus('current')
dot11EDCAAveragingPeriod = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EDCAAveragingPeriod.setStatus('current')
dot11HTOperatingMode = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("htPure", 0), ("optionalProtection", 1), ("mandatoryFortyProtection", 2), ("mandatoryAllProtection", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11HTOperatingMode.setStatus('current')
dot11RIFSMode = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 22), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RIFSMode.setStatus('current')
dot11PSMPControlledAccess = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 23), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PSMPControlledAccess.setStatus('current')
dot11ServiceIntervalGranularity = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ServiceIntervalGranularity.setStatus('current')
dot11DualCTSProtection = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 25), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DualCTSProtection.setStatus('current')
dot11LSigTxopFullProtectionEnabled = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 26), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11LSigTxopFullProtectionEnabled.setStatus('current')
dot11NonGFEntitiesPresent = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 27), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11NonGFEntitiesPresent.setStatus('current')
dot11PCOActivated = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 28), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PCOActivated.setStatus('current')
dot11PCO40MaxDuration = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PCO40MaxDuration.setStatus('current')
dot11PCO20MaxDuration = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PCO20MaxDuration.setStatus('current')
dot11PCO40MinDuration = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PCO40MinDuration.setStatus('current')
dot11PCO20MinDuration = MibTableColumn((1, 2, 840, 10036, 2, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PCO20MinDuration.setStatus('current')
dot11CountersTable = MibTable((1, 2, 840, 10036, 2, 2), )
if mibBuilder.loadTexts: dot11CountersTable.setStatus('current')
dot11CountersEntry = MibTableRow((1, 2, 840, 10036, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11CountersEntry.setStatus('current')
dot11TransmittedFragmentCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedFragmentCount.setStatus('current')
dot11MulticastTransmittedFrameCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MulticastTransmittedFrameCount.setStatus('current')
dot11FailedCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11FailedCount.setStatus('current')
dot11RetryCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RetryCount.setStatus('current')
dot11MultipleRetryCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MultipleRetryCount.setStatus('current')
dot11FrameDuplicateCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11FrameDuplicateCount.setStatus('current')
dot11RTSSuccessCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RTSSuccessCount.setStatus('current')
dot11RTSFailureCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RTSFailureCount.setStatus('current')
dot11ACKFailureCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ACKFailureCount.setStatus('current')
dot11ReceivedFragmentCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedFragmentCount.setStatus('current')
dot11MulticastReceivedFrameCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MulticastReceivedFrameCount.setStatus('current')
dot11FCSErrorCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11FCSErrorCount.setStatus('current')
dot11TransmittedFrameCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedFrameCount.setStatus('current')
dot11WEPUndecryptableCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WEPUndecryptableCount.setStatus('current')
dot11QosDiscardedFragmentCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QosDiscardedFragmentCount.setStatus('current')
dot11AssociatedStationCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11AssociatedStationCount.setStatus('current')
dot11QosCFPollsReceivedCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QosCFPollsReceivedCount.setStatus('current')
dot11QosCFPollsUnusedCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QosCFPollsUnusedCount.setStatus('current')
dot11QosCFPollsUnusableCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QosCFPollsUnusableCount.setStatus('current')
dot11TransmittedAMSDUCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedAMSDUCount.setStatus('current')
dot11FailedAMSDUCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11FailedAMSDUCount.setStatus('current')
dot11RetryAMSDUCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RetryAMSDUCount.setStatus('current')
dot11MultipleRetryAMSDUCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MultipleRetryAMSDUCount.setStatus('current')
dot11TransmittedOctetsInAMSDUCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedOctetsInAMSDUCount.setStatus('current')
dot11AMSDUAckFailureCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11AMSDUAckFailureCount.setStatus('current')
dot11ReceivedAMSDUCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedAMSDUCount.setStatus('current')
dot11ReceivedOctetsInAMSDUCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedOctetsInAMSDUCount.setStatus('current')
dot11TransmittedAMPDUCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedAMPDUCount.setStatus('current')
dot11TransmittedMPDUsInAMPDUCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedMPDUsInAMPDUCount.setStatus('current')
dot11TransmittedOctetsInAMPDUCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedOctetsInAMPDUCount.setStatus('current')
dot11AMPDUReceivedCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11AMPDUReceivedCount.setStatus('current')
dot11MPDUInReceivedAMPDUCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MPDUInReceivedAMPDUCount.setStatus('current')
dot11ReceivedOctetsInAMPDUCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedOctetsInAMPDUCount.setStatus('current')
dot11AMPDUDelimiterCRCErrorCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11AMPDUDelimiterCRCErrorCount.setStatus('current')
dot11ImplicitBARFailureCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ImplicitBARFailureCount.setStatus('current')
dot11ExplicitBARFailureCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExplicitBARFailureCount.setStatus('current')
dot11ChannelWidthSwitchCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ChannelWidthSwitchCount.setStatus('current')
dot11TwentyMHzFrameTransmittedCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TwentyMHzFrameTransmittedCount.setStatus('current')
dot11FortyMHzFrameTransmittedCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11FortyMHzFrameTransmittedCount.setStatus('current')
dot11TwentyMHzFrameReceivedCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TwentyMHzFrameReceivedCount.setStatus('current')
dot11FortyMHzFrameReceivedCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11FortyMHzFrameReceivedCount.setStatus('current')
dot11PSMPSuccessCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11PSMPSuccessCount.setStatus('current')
dot11PSMPFailureCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11PSMPFailureCount.setStatus('current')
dot11GrantedRDGUsedCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11GrantedRDGUsedCount.setStatus('current')
dot11GrantedRDGUnusedCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11GrantedRDGUnusedCount.setStatus('current')
dot11TransmittedFramesInGrantedRDGCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedFramesInGrantedRDGCount.setStatus('current')
dot11TransmittedOctetsInGrantedRDGCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedOctetsInGrantedRDGCount.setStatus('current')
dot11BeamformingFrameCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11BeamformingFrameCount.setStatus('current')
dot11DualCTSSuccessCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11DualCTSSuccessCount.setStatus('current')
dot11DualCTSFailureCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11DualCTSFailureCount.setStatus('current')
dot11STBCCTSSuccessCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11STBCCTSSuccessCount.setStatus('current')
dot11STBCCTSFailureCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11STBCCTSFailureCount.setStatus('current')
dot11nonSTBCCTSSuccessCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11nonSTBCCTSSuccessCount.setStatus('current')
dot11nonSTBCCTSFailureCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11nonSTBCCTSFailureCount.setStatus('current')
dot11RTSLSIGSuccessCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RTSLSIGSuccessCount.setStatus('current')
dot11RTSLSIGFailureCount = MibTableColumn((1, 2, 840, 10036, 2, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RTSLSIGFailureCount.setStatus('current')
dot11GroupAddressesTable = MibTable((1, 2, 840, 10036, 2, 3), )
if mibBuilder.loadTexts: dot11GroupAddressesTable.setStatus('current')
dot11GroupAddressesEntry = MibTableRow((1, 2, 840, 10036, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11GroupAddressesIndex"))
if mibBuilder.loadTexts: dot11GroupAddressesEntry.setStatus('current')
dot11GroupAddressesIndex = MibTableColumn((1, 2, 840, 10036, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11GroupAddressesIndex.setStatus('current')
dot11Address = MibTableColumn((1, 2, 840, 10036, 2, 3, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot11Address.setStatus('current')
dot11GroupAddressesStatus = MibTableColumn((1, 2, 840, 10036, 2, 3, 1, 3), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot11GroupAddressesStatus.setStatus('current')
dot11EDCATable = MibTable((1, 2, 840, 10036, 2, 4), )
if mibBuilder.loadTexts: dot11EDCATable.setStatus('current')
dot11EDCATableEntry = MibTableRow((1, 2, 840, 10036, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11EDCATableIndex"))
if mibBuilder.loadTexts: dot11EDCATableEntry.setStatus('current')
dot11EDCATableIndex = MibTableColumn((1, 2, 840, 10036, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11EDCATableIndex.setStatus('current')
dot11EDCATableCWmin = MibTableColumn((1, 2, 840, 10036, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EDCATableCWmin.setStatus('current')
dot11EDCATableCWmax = MibTableColumn((1, 2, 840, 10036, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EDCATableCWmax.setStatus('current')
dot11EDCATableAIFSN = MibTableColumn((1, 2, 840, 10036, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EDCATableAIFSN.setStatus('current')
dot11EDCATableTXOPLimit = MibTableColumn((1, 2, 840, 10036, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EDCATableTXOPLimit.setStatus('current')
dot11EDCATableMSDULifetime = MibTableColumn((1, 2, 840, 10036, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EDCATableMSDULifetime.setStatus('current')
dot11EDCATableMandatory = MibTableColumn((1, 2, 840, 10036, 2, 4, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EDCATableMandatory.setStatus('current')
dot11QAPEDCATable = MibTable((1, 2, 840, 10036, 2, 5), )
if mibBuilder.loadTexts: dot11QAPEDCATable.setStatus('current')
dot11QAPEDCATableEntry = MibTableRow((1, 2, 840, 10036, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11QAPEDCATableIndex"))
if mibBuilder.loadTexts: dot11QAPEDCATableEntry.setStatus('current')
dot11QAPEDCATableIndex = MibTableColumn((1, 2, 840, 10036, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QAPEDCATableIndex.setStatus('current')
dot11QAPEDCATableCWmin = MibTableColumn((1, 2, 840, 10036, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QAPEDCATableCWmin.setStatus('current')
dot11QAPEDCATableCWmax = MibTableColumn((1, 2, 840, 10036, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QAPEDCATableCWmax.setStatus('current')
dot11QAPEDCATableAIFSN = MibTableColumn((1, 2, 840, 10036, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QAPEDCATableAIFSN.setStatus('current')
dot11QAPEDCATableTXOPLimit = MibTableColumn((1, 2, 840, 10036, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QAPEDCATableTXOPLimit.setStatus('current')
dot11QAPEDCATableMSDULifetime = MibTableColumn((1, 2, 840, 10036, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QAPEDCATableMSDULifetime.setStatus('current')
dot11QAPEDCATableMandatory = MibTableColumn((1, 2, 840, 10036, 2, 5, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11QAPEDCATableMandatory.setStatus('current')
dot11QosCountersTable = MibTable((1, 2, 840, 10036, 2, 6), )
if mibBuilder.loadTexts: dot11QosCountersTable.setStatus('current')
dot11QosCountersEntry = MibTableRow((1, 2, 840, 10036, 2, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11QosCountersIndex"))
if mibBuilder.loadTexts: dot11QosCountersEntry.setStatus('current')
dot11QosCountersIndex = MibTableColumn((1, 2, 840, 10036, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QosCountersIndex.setStatus('current')
dot11QosTransmittedFragmentCount = MibTableColumn((1, 2, 840, 10036, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QosTransmittedFragmentCount.setStatus('current')
dot11QosFailedCount = MibTableColumn((1, 2, 840, 10036, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QosFailedCount.setStatus('current')
dot11QosRetryCount = MibTableColumn((1, 2, 840, 10036, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QosRetryCount.setStatus('current')
dot11QosMultipleRetryCount = MibTableColumn((1, 2, 840, 10036, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QosMultipleRetryCount.setStatus('current')
dot11QosFrameDuplicateCount = MibTableColumn((1, 2, 840, 10036, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QosFrameDuplicateCount.setStatus('current')
dot11QosRTSSuccessCount = MibTableColumn((1, 2, 840, 10036, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QosRTSSuccessCount.setStatus('current')
dot11QosRTSFailureCount = MibTableColumn((1, 2, 840, 10036, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QosRTSFailureCount.setStatus('current')
dot11QosACKFailureCount = MibTableColumn((1, 2, 840, 10036, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QosACKFailureCount.setStatus('current')
dot11QosReceivedFragmentCount = MibTableColumn((1, 2, 840, 10036, 2, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QosReceivedFragmentCount.setStatus('current')
dot11QosTransmittedFrameCount = MibTableColumn((1, 2, 840, 10036, 2, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QosTransmittedFrameCount.setStatus('current')
dot11QosDiscardedFrameCount = MibTableColumn((1, 2, 840, 10036, 2, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QosDiscardedFrameCount.setStatus('current')
dot11QosMPDUsReceivedCount = MibTableColumn((1, 2, 840, 10036, 2, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QosMPDUsReceivedCount.setStatus('current')
dot11QosRetriesReceivedCount = MibTableColumn((1, 2, 840, 10036, 2, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11QosRetriesReceivedCount.setStatus('current')
dot11ResourceTypeIDName = MibScalar((1, 2, 840, 10036, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone('RTID')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ResourceTypeIDName.setStatus('current')
dot11ResourceInfoTable = MibTable((1, 2, 840, 10036, 3, 1, 2), )
if mibBuilder.loadTexts: dot11ResourceInfoTable.setStatus('current')
dot11ResourceInfoEntry = MibTableRow((1, 2, 840, 10036, 3, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11ResourceInfoEntry.setStatus('current')
dot11manufacturerOUI = MibTableColumn((1, 2, 840, 10036, 3, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11manufacturerOUI.setStatus('current')
dot11manufacturerName = MibTableColumn((1, 2, 840, 10036, 3, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11manufacturerName.setStatus('current')
dot11manufacturerProductName = MibTableColumn((1, 2, 840, 10036, 3, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11manufacturerProductName.setStatus('current')
dot11manufacturerProductVersion = MibTableColumn((1, 2, 840, 10036, 3, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11manufacturerProductVersion.setStatus('current')
dot11PhyOperationTable = MibTable((1, 2, 840, 10036, 4, 1), )
if mibBuilder.loadTexts: dot11PhyOperationTable.setStatus('current')
dot11PhyOperationEntry = MibTableRow((1, 2, 840, 10036, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PhyOperationEntry.setStatus('current')
dot11PHYType = MibTableColumn((1, 2, 840, 10036, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("fhss", 1), ("dsss", 2), ("irbaseband", 3), ("ofdm", 4), ("hrdsss", 5), ("erp", 6), ("ht", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11PHYType.setStatus('current')
dot11CurrentRegDomain = MibTableColumn((1, 2, 840, 10036, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentRegDomain.setStatus('current')
dot11TempType = MibTableColumn((1, 2, 840, 10036, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tempType1", 1), ("tempType2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TempType.setStatus('current')
dot11PhyAntennaTable = MibTable((1, 2, 840, 10036, 4, 2), )
if mibBuilder.loadTexts: dot11PhyAntennaTable.setStatus('current')
dot11PhyAntennaEntry = MibTableRow((1, 2, 840, 10036, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PhyAntennaEntry.setStatus('current')
dot11CurrentTxAntenna = MibTableColumn((1, 2, 840, 10036, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentTxAntenna.setStatus('current')
dot11DiversitySupport = MibTableColumn((1, 2, 840, 10036, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fixedlist", 1), ("notsupported", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11DiversitySupport.setStatus('current')
dot11CurrentRxAntenna = MibTableColumn((1, 2, 840, 10036, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentRxAntenna.setStatus('current')
dot11AntennaSelectionOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 2, 1, 4), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11AntennaSelectionOptionImplemented.setStatus('current')
dot11TransmitExplicitCSIFeedbackASOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmitExplicitCSIFeedbackASOptionImplemented.setStatus('current')
dot11TransmitIndicesFeedbackASOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmitIndicesFeedbackASOptionImplemented.setStatus('current')
dot11ExplicitCSIFeedbackASOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExplicitCSIFeedbackASOptionImplemented.setStatus('current')
dot11TransmitIndicesComputationFeedbackASOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmitIndicesComputationFeedbackASOptionImplemented.setStatus('current')
dot11ReceiveAntennaSelectionOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceiveAntennaSelectionOptionImplemented.setStatus('current')
dot11TransmitSoundingPPDUOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 2, 1, 10), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmitSoundingPPDUOptionImplemented.setStatus('current')
dot11PhyTxPowerTable = MibTable((1, 2, 840, 10036, 4, 3), )
if mibBuilder.loadTexts: dot11PhyTxPowerTable.setStatus('current')
dot11PhyTxPowerEntry = MibTableRow((1, 2, 840, 10036, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PhyTxPowerEntry.setStatus('current')
dot11NumberSupportedPowerLevels = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11NumberSupportedPowerLevels.setStatus('current')
dot11TxPowerLevel1 = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TxPowerLevel1.setStatus('current')
dot11TxPowerLevel2 = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TxPowerLevel2.setStatus('current')
dot11TxPowerLevel3 = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TxPowerLevel3.setStatus('current')
dot11TxPowerLevel4 = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TxPowerLevel4.setStatus('current')
dot11TxPowerLevel5 = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TxPowerLevel5.setStatus('current')
dot11TxPowerLevel6 = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TxPowerLevel6.setStatus('current')
dot11TxPowerLevel7 = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TxPowerLevel7.setStatus('current')
dot11TxPowerLevel8 = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TxPowerLevel8.setStatus('current')
dot11CurrentTxPowerLevel = MibTableColumn((1, 2, 840, 10036, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentTxPowerLevel.setStatus('current')
dot11PhyFHSSTable = MibTable((1, 2, 840, 10036, 4, 4), )
if mibBuilder.loadTexts: dot11PhyFHSSTable.setStatus('current')
dot11PhyFHSSEntry = MibTableRow((1, 2, 840, 10036, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PhyFHSSEntry.setStatus('current')
dot11HopTime = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(224, 224))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11HopTime.setStatus('current')
dot11CurrentChannelNumber = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentChannelNumber.setStatus('current')
dot11MaxDwellTime = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MaxDwellTime.setStatus('current')
dot11CurrentDwellTime = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentDwellTime.setStatus('current')
dot11CurrentSet = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentSet.setStatus('current')
dot11CurrentPattern = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentPattern.setStatus('current')
dot11CurrentIndex = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentIndex.setStatus('current')
dot11EHCCPrimeRadix = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EHCCPrimeRadix.setStatus('current')
dot11EHCCNumberofChannelsFamilyIndex = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EHCCNumberofChannelsFamilyIndex.setStatus('current')
dot11EHCCCapabilityImplemented = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EHCCCapabilityImplemented.setStatus('current')
dot11EHCCCapabilityEnabled = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EHCCCapabilityEnabled.setStatus('current')
dot11HopAlgorithmAdopted = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("current", 0), ("hop-index", 1), ("hcc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11HopAlgorithmAdopted.setStatus('current')
dot11RandomTableFlag = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RandomTableFlag.setStatus('current')
dot11NumberofHoppingSets = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11NumberofHoppingSets.setStatus('current')
dot11HopModulus = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11HopModulus.setStatus('current')
dot11HopOffset = MibTableColumn((1, 2, 840, 10036, 4, 4, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11HopOffset.setStatus('current')
dot11HoppingPatternTable = MibTable((1, 2, 840, 10036, 4, 13), )
if mibBuilder.loadTexts: dot11HoppingPatternTable.setStatus('current')
dot11HoppingPatternEntry = MibTableRow((1, 2, 840, 10036, 4, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11HoppingPatternIndex"))
if mibBuilder.loadTexts: dot11HoppingPatternEntry.setStatus('current')
dot11HoppingPatternIndex = MibTableColumn((1, 2, 840, 10036, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11HoppingPatternIndex.setStatus('current')
dot11RandomTableFieldNumber = MibTableColumn((1, 2, 840, 10036, 4, 13, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RandomTableFieldNumber.setStatus('current')
dot11PhyERPTable = MibTable((1, 2, 840, 10036, 4, 14), )
if mibBuilder.loadTexts: dot11PhyERPTable.setStatus('current')
dot11PhyERPEntry = MibTableRow((1, 2, 840, 10036, 4, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PhyERPEntry.setStatus('current')
dot11ERPPBCCOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 14, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ERPPBCCOptionImplemented.setStatus('current')
dot11ERPBCCOptionEnabled = MibTableColumn((1, 2, 840, 10036, 4, 14, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ERPBCCOptionEnabled.setStatus('current')
dot11DSSSOFDMOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 14, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11DSSSOFDMOptionImplemented.setStatus('current')
dot11DSSSOFDMOptionEnabled = MibTableColumn((1, 2, 840, 10036, 4, 14, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DSSSOFDMOptionEnabled.setStatus('current')
dot11ShortSlotTimeOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 14, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ShortSlotTimeOptionImplemented.setStatus('current')
dot11ShortSlotTimeOptionEnabled = MibTableColumn((1, 2, 840, 10036, 4, 14, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ShortSlotTimeOptionEnabled.setStatus('current')
dot11PhyHTTable = MibTable((1, 2, 840, 10036, 4, 15), )
if mibBuilder.loadTexts: dot11PhyHTTable.setStatus('current')
dot11PhyHTEntry = MibTableRow((1, 2, 840, 10036, 4, 15, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PhyHTEntry.setStatus('current')
dot11FortyMHzOperationImplemented = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11FortyMHzOperationImplemented.setStatus('current')
dot11FortyMHzOperationEnabled = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11FortyMHzOperationEnabled.setStatus('current')
dot11CurrentPrimaryChannel = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11CurrentPrimaryChannel.setStatus('current')
dot11CurrentSecondaryChannel = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentSecondaryChannel.setStatus('current')
dot11NumberOfSpatialStreamsImplemented = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11NumberOfSpatialStreamsImplemented.setStatus('current')
dot11NumberOfSpatialStreamsEnabled = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11NumberOfSpatialStreamsEnabled.setStatus('current')
dot11GreenfieldOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11GreenfieldOptionImplemented.setStatus('current')
dot11GreenfieldOptionEnabled = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11GreenfieldOptionEnabled.setStatus('current')
dot11ShortGIOptionInTwentyImplemented = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 9), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ShortGIOptionInTwentyImplemented.setStatus('current')
dot11ShortGIOptionInTwentyEnabled = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ShortGIOptionInTwentyEnabled.setStatus('current')
dot11ShortGIOptionInFortyImplemented = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 11), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ShortGIOptionInFortyImplemented.setStatus('current')
dot11ShortGIOptionInFortyEnabled = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ShortGIOptionInFortyEnabled.setStatus('current')
dot11LDPCCodingOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 13), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11LDPCCodingOptionImplemented.setStatus('current')
dot11LDPCCodingOptionEnabled = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11LDPCCodingOptionEnabled.setStatus('current')
dot11TxSTBCOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 15), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TxSTBCOptionImplemented.setStatus('current')
dot11TxSTBCOptionEnabled = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11TxSTBCOptionEnabled.setStatus('current')
dot11RxSTBCOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 17), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RxSTBCOptionImplemented.setStatus('current')
dot11RxSTBCOptionEnabled = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RxSTBCOptionEnabled.setStatus('current')
dot11BeamFormingOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 19), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11BeamFormingOptionImplemented.setStatus('current')
dot11BeamFormingOptionEnabled = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11BeamFormingOptionEnabled.setStatus('current')
dot11HighestSupportedDataRate = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11HighestSupportedDataRate.setStatus('current')
dot11TxMCSSetDefined = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 22), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11TxMCSSetDefined.setStatus('current')
dot11TxRxMCSSetNotEqual = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 23), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11TxRxMCSSetNotEqual.setStatus('current')
dot11TxMaximumNumberSpatialStreamsSupported = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11TxMaximumNumberSpatialStreamsSupported.setStatus('current')
dot11TxUnequalModulationSupported = MibTableColumn((1, 2, 840, 10036, 4, 15, 1, 25), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11TxUnequalModulationSupported.setStatus('current')
dot11SupportedMCSTxTable = MibTable((1, 2, 840, 10036, 4, 16), )
if mibBuilder.loadTexts: dot11SupportedMCSTxTable.setStatus('current')
dot11SupportedMCSTxEntry = MibTableRow((1, 2, 840, 10036, 4, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11SupportedMCSTxIndex"))
if mibBuilder.loadTexts: dot11SupportedMCSTxEntry.setStatus('current')
dot11SupportedMCSTxIndex = MibTableColumn((1, 2, 840, 10036, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SupportedMCSTxIndex.setStatus('current')
dot11SupportedMCSTxValue = MibTableColumn((1, 2, 840, 10036, 4, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SupportedMCSTxValue.setStatus('current')
dot11SupportedMCSRxTable = MibTable((1, 2, 840, 10036, 4, 17), )
if mibBuilder.loadTexts: dot11SupportedMCSRxTable.setStatus('current')
dot11SupportedMCSRxEntry = MibTableRow((1, 2, 840, 10036, 4, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11SupportedMCSRxIndex"))
if mibBuilder.loadTexts: dot11SupportedMCSRxEntry.setStatus('current')
dot11SupportedMCSRxIndex = MibTableColumn((1, 2, 840, 10036, 4, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SupportedMCSRxIndex.setStatus('current')
dot11SupportedMCSRxValue = MibTableColumn((1, 2, 840, 10036, 4, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SupportedMCSRxValue.setStatus('current')
dot11TxBFConfigTable = MibTable((1, 2, 840, 10036, 4, 18), )
if mibBuilder.loadTexts: dot11TxBFConfigTable.setStatus('current')
dot11TxBFConfigEntry = MibTableRow((1, 2, 840, 10036, 4, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11TxBFConfigEntry.setStatus('current')
dot11ReceiveStaggerSoundingOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 18, 1, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceiveStaggerSoundingOptionImplemented.setStatus('current')
dot11TransmitStaggerSoundingOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 18, 1, 2), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmitStaggerSoundingOptionImplemented.setStatus('current')
dot11ReceiveNDPOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 18, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceiveNDPOptionImplemented.setStatus('current')
dot11TransmitNDPOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 18, 1, 4), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmitNDPOptionImplemented.setStatus('current')
dot11ImplicitTxBFOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 18, 1, 5), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ImplicitTxBFOptionImplemented.setStatus('current')
dot11CalibrationOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("inCapable", 0), ("unableToInitiate", 1), ("ableToInitiate", 2), ("fullyCapable", 3))).clone('inCapable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11CalibrationOptionImplemented.setStatus('current')
dot11ExplicitCSITxBFOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 18, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExplicitCSITxBFOptionImplemented.setStatus('current')
dot11ExplicitNonCompressedbeamformingMatrixOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 18, 1, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExplicitNonCompressedbeamformingMatrixOptionImplemented.setStatus('current')
dot11ExplicitBFCSIFeedbackOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("inCapable", 0), ("delayed", 1), ("immediate", 2), ("unsolicitedImmediate", 3), ("aggregated", 4), ("delayedAggregated", 5), ("immediateAggregated", 6), ("unsolicitedImmediateAggregated", 7))).clone('inCapable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExplicitBFCSIFeedbackOptionImplemented.setStatus('current')
dot11ExplicitNonCompressedbeamformingMatrixFeedbackOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 18, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("inCapable", 0), ("delayed", 1), ("immediate", 2), ("unsolicitedImmediate", 3), ("aggregated", 4), ("delayedAggregated", 5), ("immediateAggregated", 6), ("unsolicitedImmediateAggregated", 7))).clone('inCapable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExplicitNonCompressedbeamformingMatrixFeedbackOptionImplemented.setStatus('current')
dot11ExplicitCompressedbeamformingMatrixFeedbackOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 18, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("inCapable", 0), ("delayed", 1), ("immediate", 2), ("unsolicitedImmediate", 3), ("aggregated", 4), ("delayedAggregated", 5), ("immediateAggregated", 6), ("unsolicitedImmediateAggregated", 7))).clone('inCapable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ExplicitCompressedbeamformingMatrixFeedbackOptionImplemented.setStatus('current')
dot11NumberBeamFormingCSISupportAntenna = MibTableColumn((1, 2, 840, 10036, 4, 18, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11NumberBeamFormingCSISupportAntenna.setStatus('current')
dot11NumberNonCompressedbeamformingMatrixSupportAntenna = MibTableColumn((1, 2, 840, 10036, 4, 18, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11NumberNonCompressedbeamformingMatrixSupportAntenna.setStatus('current')
dot11NumberCompressedbeamformingMatrixSupportAntenna = MibTableColumn((1, 2, 840, 10036, 4, 18, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11NumberCompressedbeamformingMatrixSupportAntenna.setStatus('current')
dot11MaxCSIFeedbackDelay = MibTableColumn((1, 2, 840, 10036, 4, 18, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MaxCSIFeedbackDelay.setStatus('current')
dot11PhyDSSSTable = MibTable((1, 2, 840, 10036, 4, 5), )
if mibBuilder.loadTexts: dot11PhyDSSSTable.setStatus('current')
dot11PhyDSSSEntry = MibTableRow((1, 2, 840, 10036, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PhyDSSSEntry.setStatus('current')
dot11CurrentChannel = MibTableColumn((1, 2, 840, 10036, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentChannel.setStatus('current')
dot11CCAModeSupported = MibTableColumn((1, 2, 840, 10036, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11CCAModeSupported.setStatus('current')
dot11CurrentCCAMode = MibTableColumn((1, 2, 840, 10036, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))).clone(namedValues=NamedValues(("edonly", 1), ("csonly", 2), ("edandcs", 4), ("cswithtimer", 8), ("hrcsanded", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentCCAMode.setStatus('current')
dot11EDThreshold = MibTableColumn((1, 2, 840, 10036, 4, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EDThreshold.setStatus('current')
dot11PhyIRTable = MibTable((1, 2, 840, 10036, 4, 6), )
if mibBuilder.loadTexts: dot11PhyIRTable.setStatus('current')
dot11PhyIREntry = MibTableRow((1, 2, 840, 10036, 4, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PhyIREntry.setStatus('current')
dot11CCAWatchdogTimerMax = MibTableColumn((1, 2, 840, 10036, 4, 6, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CCAWatchdogTimerMax.setStatus('current')
dot11CCAWatchdogCountMax = MibTableColumn((1, 2, 840, 10036, 4, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CCAWatchdogCountMax.setStatus('current')
dot11CCAWatchdogTimerMin = MibTableColumn((1, 2, 840, 10036, 4, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CCAWatchdogTimerMin.setStatus('current')
dot11CCAWatchdogCountMin = MibTableColumn((1, 2, 840, 10036, 4, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CCAWatchdogCountMin.setStatus('current')
dot11RegDomainsSupportedTable = MibTable((1, 2, 840, 10036, 4, 7), )
if mibBuilder.loadTexts: dot11RegDomainsSupportedTable.setStatus('current')
dot11RegDomainsSupportEntry = MibTableRow((1, 2, 840, 10036, 4, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11RegDomainsSupportIndex"))
if mibBuilder.loadTexts: dot11RegDomainsSupportEntry.setStatus('current')
dot11RegDomainsSupportIndex = MibTableColumn((1, 2, 840, 10036, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RegDomainsSupportIndex.setStatus('current')
dot11RegDomainsSupportValue = MibTableColumn((1, 2, 840, 10036, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32, 48, 49, 50, 64))).clone(namedValues=NamedValues(("fcc", 16), ("doc", 32), ("etsi", 48), ("spain", 49), ("france", 50), ("mkk", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RegDomainsSupportValue.setStatus('current')
dot11AntennasListTable = MibTable((1, 2, 840, 10036, 4, 8), )
if mibBuilder.loadTexts: dot11AntennasListTable.setStatus('current')
dot11AntennasListEntry = MibTableRow((1, 2, 840, 10036, 4, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11AntennaListIndex"))
if mibBuilder.loadTexts: dot11AntennasListEntry.setStatus('current')
dot11AntennaListIndex = MibTableColumn((1, 2, 840, 10036, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11AntennaListIndex.setStatus('current')
dot11SupportedTxAntenna = MibTableColumn((1, 2, 840, 10036, 4, 8, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SupportedTxAntenna.setStatus('current')
dot11SupportedRxAntenna = MibTableColumn((1, 2, 840, 10036, 4, 8, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SupportedRxAntenna.setStatus('current')
dot11DiversitySelectionRx = MibTableColumn((1, 2, 840, 10036, 4, 8, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DiversitySelectionRx.setStatus('current')
dot11SupportedDataRatesTxTable = MibTable((1, 2, 840, 10036, 4, 9), )
if mibBuilder.loadTexts: dot11SupportedDataRatesTxTable.setStatus('current')
dot11SupportedDataRatesTxEntry = MibTableRow((1, 2, 840, 10036, 4, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11SupportedDataRatesTxIndex"))
if mibBuilder.loadTexts: dot11SupportedDataRatesTxEntry.setStatus('current')
dot11SupportedDataRatesTxIndex = MibTableColumn((1, 2, 840, 10036, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SupportedDataRatesTxIndex.setStatus('current')
dot11SupportedDataRatesTxValue = MibTableColumn((1, 2, 840, 10036, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SupportedDataRatesTxValue.setStatus('current')
dot11SupportedDataRatesRxTable = MibTable((1, 2, 840, 10036, 4, 10), )
if mibBuilder.loadTexts: dot11SupportedDataRatesRxTable.setStatus('current')
dot11SupportedDataRatesRxEntry = MibTableRow((1, 2, 840, 10036, 4, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11SupportedDataRatesRxIndex"))
if mibBuilder.loadTexts: dot11SupportedDataRatesRxEntry.setStatus('current')
dot11SupportedDataRatesRxIndex = MibTableColumn((1, 2, 840, 10036, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SupportedDataRatesRxIndex.setStatus('current')
dot11SupportedDataRatesRxValue = MibTableColumn((1, 2, 840, 10036, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SupportedDataRatesRxValue.setStatus('current')
dot11PhyOFDMTable = MibTable((1, 2, 840, 10036, 4, 11), )
if mibBuilder.loadTexts: dot11PhyOFDMTable.setStatus('current')
dot11PhyOFDMEntry = MibTableRow((1, 2, 840, 10036, 4, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PhyOFDMEntry.setStatus('current')
dot11CurrentFrequency = MibTableColumn((1, 2, 840, 10036, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentFrequency.setStatus('current')
dot11TIThreshold = MibTableColumn((1, 2, 840, 10036, 4, 11, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11TIThreshold.setStatus('current')
dot11FrequencyBandsSupported = MibTableColumn((1, 2, 840, 10036, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11FrequencyBandsSupported.setStatus('current')
dot11PhyHRDSSSTable = MibTable((1, 2, 840, 10036, 4, 12), )
if mibBuilder.loadTexts: dot11PhyHRDSSSTable.setStatus('current')
dot11PhyHRDSSSEntry = MibTableRow((1, 2, 840, 10036, 4, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11PhyHRDSSSEntry.setStatus('current')
dot11ChannelAgilityPresent = MibTableColumn((1, 2, 840, 10036, 4, 12, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ChannelAgilityPresent.setStatus('current')
dot11ChannelAgilityEnabled = MibTableColumn((1, 2, 840, 10036, 4, 12, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ChannelAgilityEnabled.setStatus('current')
dot11HRCCAModeSupported = MibTableColumn((1, 2, 840, 10036, 4, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11HRCCAModeSupported.setStatus('current')
dot11ShortPreambleOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 12, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ShortPreambleOptionImplemented.setStatus('current')
dot11PBCCOptionImplemented = MibTableColumn((1, 2, 840, 10036, 4, 12, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11PBCCOptionImplemented.setStatus('current')
dot11Conformance = MibIdentifier((1, 2, 840, 10036, 5))
dot11Groups = MibIdentifier((1, 2, 840, 10036, 5, 1))
dot11Compliances = MibIdentifier((1, 2, 840, 10036, 5, 2))
dot11Compliance = ModuleCompliance((1, 2, 840, 10036, 5, 2, 1)).setObjects(("IEEE802dot11-MIB", "dot11MACbase3"), ("IEEE802dot11-MIB", "dot11CountersGroup3"), ("IEEE802dot11-MIB", "dot11SmtAuthenticationAlgorithms"), ("IEEE802dot11-MIB", "dot11ResourceTypeID"), ("IEEE802dot11-MIB", "dot11PhyOperationComplianceGroup"), ("IEEE802dot11-MIB", "dot11PhyDSSSComplianceGroup"), ("IEEE802dot11-MIB", "dot11PhyIRComplianceGroup"), ("IEEE802dot11-MIB", "dot11PhyFHSSComplianceGroup"), ("IEEE802dot11-MIB", "dot11PhyHRDSSSComplianceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11Compliance = dot11Compliance.setStatus('current')
dot11SMTbase = ObjectGroup((1, 2, 840, 10036, 5, 1, 1)).setObjects(("IEEE802dot11-MIB", "dot11StationID"), ("IEEE802dot11-MIB", "dot11MediumOccupancyLimit"), ("IEEE802dot11-MIB", "dot11CFPollable"), ("IEEE802dot11-MIB", "dot11CFPPeriod"), ("IEEE802dot11-MIB", "dot11CFPMaxDuration"), ("IEEE802dot11-MIB", "dot11AuthenticationResponseTimeOut"), ("IEEE802dot11-MIB", "dot11PrivacyOptionImplemented"), ("IEEE802dot11-MIB", "dot11PowerManagementMode"), ("IEEE802dot11-MIB", "dot11DesiredSSID"), ("IEEE802dot11-MIB", "dot11DesiredBSSType"), ("IEEE802dot11-MIB", "dot11OperationalRateSet"), ("IEEE802dot11-MIB", "dot11BeaconPeriod"), ("IEEE802dot11-MIB", "dot11DTIMPeriod"), ("IEEE802dot11-MIB", "dot11AssociationResponseTimeOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11SMTbase = dot11SMTbase.setStatus('deprecated')
dot11SMTprivacy = ObjectGroup((1, 2, 840, 10036, 5, 1, 2)).setObjects(("IEEE802dot11-MIB", "dot11PrivacyInvoked"), ("IEEE802dot11-MIB", "dot11WEPKeyMappingLength"), ("IEEE802dot11-MIB", "dot11ExcludeUnencrypted"), ("IEEE802dot11-MIB", "dot11WEPICVErrorCount"), ("IEEE802dot11-MIB", "dot11WEPExcludedCount"), ("IEEE802dot11-MIB", "dot11WEPDefaultKeyID"), ("IEEE802dot11-MIB", "dot11WEPDefaultKeyValue"), ("IEEE802dot11-MIB", "dot11WEPKeyMappingWEPOn"), ("IEEE802dot11-MIB", "dot11WEPKeyMappingValue"), ("IEEE802dot11-MIB", "dot11WEPKeyMappingAddress"), ("IEEE802dot11-MIB", "dot11WEPKeyMappingStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11SMTprivacy = dot11SMTprivacy.setStatus('current')
dot11MACbase = ObjectGroup((1, 2, 840, 10036, 5, 1, 3)).setObjects(("IEEE802dot11-MIB", "dot11MACAddress"), ("IEEE802dot11-MIB", "dot11Address"), ("IEEE802dot11-MIB", "dot11GroupAddressesStatus"), ("IEEE802dot11-MIB", "dot11RTSThreshold"), ("IEEE802dot11-MIB", "dot11ShortRetryLimit"), ("IEEE802dot11-MIB", "dot11LongRetryLimit"), ("IEEE802dot11-MIB", "dot11FragmentationThreshold"), ("IEEE802dot11-MIB", "dot11MaxTransmitMSDULifetime"), ("IEEE802dot11-MIB", "dot11MaxReceiveLifetime"), ("IEEE802dot11-MIB", "dot11ManufacturerID"), ("IEEE802dot11-MIB", "dot11ProductID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11MACbase = dot11MACbase.setStatus('deprecated')
dot11MACStatistics = ObjectGroup((1, 2, 840, 10036, 5, 1, 4)).setObjects(("IEEE802dot11-MIB", "dot11RetryCount"), ("IEEE802dot11-MIB", "dot11MultipleRetryCount"), ("IEEE802dot11-MIB", "dot11RTSSuccessCount"), ("IEEE802dot11-MIB", "dot11RTSFailureCount"), ("IEEE802dot11-MIB", "dot11ACKFailureCount"), ("IEEE802dot11-MIB", "dot11FrameDuplicateCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11MACStatistics = dot11MACStatistics.setStatus('current')
dot11ResourceTypeID = ObjectGroup((1, 2, 840, 10036, 5, 1, 5)).setObjects(("IEEE802dot11-MIB", "dot11ResourceTypeIDName"), ("IEEE802dot11-MIB", "dot11manufacturerOUI"), ("IEEE802dot11-MIB", "dot11manufacturerName"), ("IEEE802dot11-MIB", "dot11manufacturerProductName"), ("IEEE802dot11-MIB", "dot11manufacturerProductVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11ResourceTypeID = dot11ResourceTypeID.setStatus('current')
dot11SmtAuthenticationAlgorithms = ObjectGroup((1, 2, 840, 10036, 5, 1, 6)).setObjects(("IEEE802dot11-MIB", "dot11AuthenticationAlgorithm"), ("IEEE802dot11-MIB", "dot11AuthenticationAlgorithmsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11SmtAuthenticationAlgorithms = dot11SmtAuthenticationAlgorithms.setStatus('current')
dot11PhyOperationComplianceGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 7)).setObjects(("IEEE802dot11-MIB", "dot11PHYType"), ("IEEE802dot11-MIB", "dot11CurrentRegDomain"), ("IEEE802dot11-MIB", "dot11TempType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyOperationComplianceGroup = dot11PhyOperationComplianceGroup.setStatus('current')
dot11PhyAntennaComplianceGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 8)).setObjects(("IEEE802dot11-MIB", "dot11CurrentTxAntenna"), ("IEEE802dot11-MIB", "dot11DiversitySupport"), ("IEEE802dot11-MIB", "dot11CurrentRxAntenna"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyAntennaComplianceGroup = dot11PhyAntennaComplianceGroup.setStatus('deprecated')
dot11PhyTxPowerComplianceGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 9)).setObjects(("IEEE802dot11-MIB", "dot11NumberSupportedPowerLevels"), ("IEEE802dot11-MIB", "dot11TxPowerLevel1"), ("IEEE802dot11-MIB", "dot11TxPowerLevel2"), ("IEEE802dot11-MIB", "dot11TxPowerLevel3"), ("IEEE802dot11-MIB", "dot11TxPowerLevel4"), ("IEEE802dot11-MIB", "dot11TxPowerLevel5"), ("IEEE802dot11-MIB", "dot11TxPowerLevel6"), ("IEEE802dot11-MIB", "dot11TxPowerLevel7"), ("IEEE802dot11-MIB", "dot11TxPowerLevel8"), ("IEEE802dot11-MIB", "dot11CurrentTxPowerLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyTxPowerComplianceGroup = dot11PhyTxPowerComplianceGroup.setStatus('current')
dot11PhyFHSSComplianceGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 10)).setObjects(("IEEE802dot11-MIB", "dot11HopTime"), ("IEEE802dot11-MIB", "dot11CurrentChannelNumber"), ("IEEE802dot11-MIB", "dot11MaxDwellTime"), ("IEEE802dot11-MIB", "dot11CurrentDwellTime"), ("IEEE802dot11-MIB", "dot11CurrentSet"), ("IEEE802dot11-MIB", "dot11CurrentPattern"), ("IEEE802dot11-MIB", "dot11CurrentIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyFHSSComplianceGroup = dot11PhyFHSSComplianceGroup.setStatus('current')
dot11PhyDSSSComplianceGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 11)).setObjects(("IEEE802dot11-MIB", "dot11CurrentChannel"), ("IEEE802dot11-MIB", "dot11CCAModeSupported"), ("IEEE802dot11-MIB", "dot11CurrentCCAMode"), ("IEEE802dot11-MIB", "dot11EDThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyDSSSComplianceGroup = dot11PhyDSSSComplianceGroup.setStatus('current')
dot11PhyIRComplianceGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 12)).setObjects(("IEEE802dot11-MIB", "dot11CCAWatchdogTimerMax"), ("IEEE802dot11-MIB", "dot11CCAWatchdogCountMax"), ("IEEE802dot11-MIB", "dot11CCAWatchdogTimerMin"), ("IEEE802dot11-MIB", "dot11CCAWatchdogCountMin"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyIRComplianceGroup = dot11PhyIRComplianceGroup.setStatus('current')
dot11PhyRegDomainsSupportGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 13)).setObjects(("IEEE802dot11-MIB", "dot11RegDomainsSupportValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyRegDomainsSupportGroup = dot11PhyRegDomainsSupportGroup.setStatus('current')
dot11PhyAntennasListGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 14)).setObjects(("IEEE802dot11-MIB", "dot11SupportedTxAntenna"), ("IEEE802dot11-MIB", "dot11SupportedRxAntenna"), ("IEEE802dot11-MIB", "dot11DiversitySelectionRx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyAntennasListGroup = dot11PhyAntennasListGroup.setStatus('current')
dot11PhyRateGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 15)).setObjects(("IEEE802dot11-MIB", "dot11SupportedDataRatesTxValue"), ("IEEE802dot11-MIB", "dot11SupportedDataRatesRxValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyRateGroup = dot11PhyRateGroup.setStatus('current')
dot11CountersGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 16)).setObjects(("IEEE802dot11-MIB", "dot11TransmittedFragmentCount"), ("IEEE802dot11-MIB", "dot11MulticastTransmittedFrameCount"), ("IEEE802dot11-MIB", "dot11FailedCount"), ("IEEE802dot11-MIB", "dot11ReceivedFragmentCount"), ("IEEE802dot11-MIB", "dot11MulticastReceivedFrameCount"), ("IEEE802dot11-MIB", "dot11FCSErrorCount"), ("IEEE802dot11-MIB", "dot11WEPUndecryptableCount"), ("IEEE802dot11-MIB", "dot11TransmittedFrameCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11CountersGroup = dot11CountersGroup.setStatus('deprecated')
dot11NotificationGroup = NotificationGroup((1, 2, 840, 10036, 5, 1, 17)).setObjects(("IEEE802dot11-MIB", "dot11Disassociate"), ("IEEE802dot11-MIB", "dot11Deauthenticate"), ("IEEE802dot11-MIB", "dot11AuthenticateFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11NotificationGroup = dot11NotificationGroup.setStatus('current')
dot11SMTbase2 = ObjectGroup((1, 2, 840, 10036, 5, 1, 18)).setObjects(("IEEE802dot11-MIB", "dot11MediumOccupancyLimit"), ("IEEE802dot11-MIB", "dot11CFPollable"), ("IEEE802dot11-MIB", "dot11CFPPeriod"), ("IEEE802dot11-MIB", "dot11CFPMaxDuration"), ("IEEE802dot11-MIB", "dot11AuthenticationResponseTimeOut"), ("IEEE802dot11-MIB", "dot11PrivacyOptionImplemented"), ("IEEE802dot11-MIB", "dot11PowerManagementMode"), ("IEEE802dot11-MIB", "dot11DesiredSSID"), ("IEEE802dot11-MIB", "dot11DesiredBSSType"), ("IEEE802dot11-MIB", "dot11OperationalRateSet"), ("IEEE802dot11-MIB", "dot11BeaconPeriod"), ("IEEE802dot11-MIB", "dot11DTIMPeriod"), ("IEEE802dot11-MIB", "dot11AssociationResponseTimeOut"), ("IEEE802dot11-MIB", "dot11DisassociateReason"), ("IEEE802dot11-MIB", "dot11DisassociateStation"), ("IEEE802dot11-MIB", "dot11DeauthenticateReason"), ("IEEE802dot11-MIB", "dot11DeauthenticateStation"), ("IEEE802dot11-MIB", "dot11AuthenticateFailStatus"), ("IEEE802dot11-MIB", "dot11AuthenticateFailStation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11SMTbase2 = dot11SMTbase2.setStatus('deprecated')
dot11PhyHRDSSSComplianceGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 19)).setObjects(("IEEE802dot11-MIB", "dot11CurrentChannel"), ("IEEE802dot11-MIB", "dot11CCAModeSupported"), ("IEEE802dot11-MIB", "dot11CurrentCCAMode"), ("IEEE802dot11-MIB", "dot11EDThreshold"), ("IEEE802dot11-MIB", "dot11ShortPreambleOptionImplemented"), ("IEEE802dot11-MIB", "dot11PBCCOptionImplemented"), ("IEEE802dot11-MIB", "dot11ChannelAgilityPresent"), ("IEEE802dot11-MIB", "dot11ChannelAgilityEnabled"), ("IEEE802dot11-MIB", "dot11HRCCAModeSupported"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyHRDSSSComplianceGroup = dot11PhyHRDSSSComplianceGroup.setStatus('current')
dot11SMTbase3 = ObjectGroup((1, 2, 840, 10036, 5, 1, 20)).setObjects(("IEEE802dot11-MIB", "dot11MediumOccupancyLimit"), ("IEEE802dot11-MIB", "dot11CFPollable"), ("IEEE802dot11-MIB", "dot11CFPPeriod"), ("IEEE802dot11-MIB", "dot11CFPMaxDuration"), ("IEEE802dot11-MIB", "dot11AuthenticationResponseTimeOut"), ("IEEE802dot11-MIB", "dot11PrivacyOptionImplemented"), ("IEEE802dot11-MIB", "dot11PowerManagementMode"), ("IEEE802dot11-MIB", "dot11DesiredSSID"), ("IEEE802dot11-MIB", "dot11DesiredBSSType"), ("IEEE802dot11-MIB", "dot11OperationalRateSet"), ("IEEE802dot11-MIB", "dot11BeaconPeriod"), ("IEEE802dot11-MIB", "dot11DTIMPeriod"), ("IEEE802dot11-MIB", "dot11AssociationResponseTimeOut"), ("IEEE802dot11-MIB", "dot11DisassociateReason"), ("IEEE802dot11-MIB", "dot11DisassociateStation"), ("IEEE802dot11-MIB", "dot11DeauthenticateReason"), ("IEEE802dot11-MIB", "dot11DeauthenticateStation"), ("IEEE802dot11-MIB", "dot11AuthenticateFailStatus"), ("IEEE802dot11-MIB", "dot11AuthenticateFailStation"), ("IEEE802dot11-MIB", "dot11MultiDomainCapabilityImplemented"), ("IEEE802dot11-MIB", "dot11MultiDomainCapabilityEnabled"), ("IEEE802dot11-MIB", "dot11CountryString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11SMTbase3 = dot11SMTbase3.setStatus('current')
dot11MultiDomainCapabilityGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 21)).setObjects(("IEEE802dot11-MIB", "dot11FirstChannelNumber"), ("IEEE802dot11-MIB", "dot11NumberofChannels"), ("IEEE802dot11-MIB", "dot11MaximumTransmitPowerLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11MultiDomainCapabilityGroup = dot11MultiDomainCapabilityGroup.setStatus('current')
dot11PhyFHSSComplianceGroup2 = ObjectGroup((1, 2, 840, 10036, 5, 1, 22)).setObjects(("IEEE802dot11-MIB", "dot11HopTime"), ("IEEE802dot11-MIB", "dot11CurrentChannelNumber"), ("IEEE802dot11-MIB", "dot11MaxDwellTime"), ("IEEE802dot11-MIB", "dot11CurrentDwellTime"), ("IEEE802dot11-MIB", "dot11CurrentSet"), ("IEEE802dot11-MIB", "dot11CurrentPattern"), ("IEEE802dot11-MIB", "dot11CurrentIndex"), ("IEEE802dot11-MIB", "dot11EHCCPrimeRadix"), ("IEEE802dot11-MIB", "dot11EHCCNumberofChannelsFamilyIndex"), ("IEEE802dot11-MIB", "dot11EHCCCapabilityImplemented"), ("IEEE802dot11-MIB", "dot11EHCCCapabilityEnabled"), ("IEEE802dot11-MIB", "dot11HopAlgorithmAdopted"), ("IEEE802dot11-MIB", "dot11RandomTableFlag"), ("IEEE802dot11-MIB", "dot11NumberofHoppingSets"), ("IEEE802dot11-MIB", "dot11HopModulus"), ("IEEE802dot11-MIB", "dot11HopOffset"), ("IEEE802dot11-MIB", "dot11RandomTableFieldNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyFHSSComplianceGroup2 = dot11PhyFHSSComplianceGroup2.setStatus('current')
dot11PhyOFDMComplianceGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 23)).setObjects(("IEEE802dot11-MIB", "dot11CurrentFrequency"), ("IEEE802dot11-MIB", "dot11TIThreshold"), ("IEEE802dot11-MIB", "dot11FrequencyBandsSupported"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyOFDMComplianceGroup = dot11PhyOFDMComplianceGroup.setStatus('current')
dot11PhyERPComplianceGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 24)).setObjects(("IEEE802dot11-MIB", "dot11CurrentChannel"), ("IEEE802dot11-MIB", "dot11ShortPreambleOptionImplemented"), ("IEEE802dot11-MIB", "dot11ChannelAgilityPresent"), ("IEEE802dot11-MIB", "dot11ChannelAgilityEnabled"), ("IEEE802dot11-MIB", "dot11DSSSOFDMOptionImplemented"), ("IEEE802dot11-MIB", "dot11DSSSOFDMOptionEnabled"), ("IEEE802dot11-MIB", "dot11PBCCOptionImplemented"), ("IEEE802dot11-MIB", "dot11ERPPBCCOptionImplemented"), ("IEEE802dot11-MIB", "dot11ShortSlotTimeOptionImplemented"), ("IEEE802dot11-MIB", "dot11ShortSlotTimeOptionEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyERPComplianceGroup = dot11PhyERPComplianceGroup.setStatus('current')
dot11RSNAadditions = ObjectGroup((1, 2, 840, 10036, 5, 1, 25)).setObjects(("IEEE802dot11-MIB", "dot11RSNAEnabled"), ("IEEE802dot11-MIB", "dot11RSNAPreAuthenticationEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11RSNAadditions = dot11RSNAadditions.setStatus('current')
dot11SMTbase4 = ObjectGroup((1, 2, 840, 10036, 5, 1, 26)).setObjects(("IEEE802dot11-MIB", "dot11MediumOccupancyLimit"), ("IEEE802dot11-MIB", "dot11CFPollable"), ("IEEE802dot11-MIB", "dot11CFPPeriod"), ("IEEE802dot11-MIB", "dot11CFPMaxDuration"), ("IEEE802dot11-MIB", "dot11AuthenticationResponseTimeOut"), ("IEEE802dot11-MIB", "dot11PrivacyOptionImplemented"), ("IEEE802dot11-MIB", "dot11PowerManagementMode"), ("IEEE802dot11-MIB", "dot11DesiredSSID"), ("IEEE802dot11-MIB", "dot11DesiredBSSType"), ("IEEE802dot11-MIB", "dot11OperationalRateSet"), ("IEEE802dot11-MIB", "dot11BeaconPeriod"), ("IEEE802dot11-MIB", "dot11DTIMPeriod"), ("IEEE802dot11-MIB", "dot11AssociationResponseTimeOut"), ("IEEE802dot11-MIB", "dot11DisassociateReason"), ("IEEE802dot11-MIB", "dot11DisassociateStation"), ("IEEE802dot11-MIB", "dot11DeauthenticateReason"), ("IEEE802dot11-MIB", "dot11DeauthenticateStation"), ("IEEE802dot11-MIB", "dot11AuthenticateFailStatus"), ("IEEE802dot11-MIB", "dot11AuthenticateFailStation"), ("IEEE802dot11-MIB", "dot11MultiDomainCapabilityImplemented"), ("IEEE802dot11-MIB", "dot11MultiDomainCapabilityEnabled"), ("IEEE802dot11-MIB", "dot11CountryString"), ("IEEE802dot11-MIB", "dot11RSNAOptionImplemented"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11SMTbase4 = dot11SMTbase4.setStatus('deprecated')
dot11MACbase2 = ObjectGroup((1, 2, 840, 10036, 5, 1, 31)).setObjects(("IEEE802dot11-MIB", "dot11MACAddress"), ("IEEE802dot11-MIB", "dot11Address"), ("IEEE802dot11-MIB", "dot11GroupAddressesStatus"), ("IEEE802dot11-MIB", "dot11RTSThreshold"), ("IEEE802dot11-MIB", "dot11ShortRetryLimit"), ("IEEE802dot11-MIB", "dot11LongRetryLimit"), ("IEEE802dot11-MIB", "dot11FragmentationThreshold"), ("IEEE802dot11-MIB", "dot11MaxTransmitMSDULifetime"), ("IEEE802dot11-MIB", "dot11MaxReceiveLifetime"), ("IEEE802dot11-MIB", "dot11ManufacturerID"), ("IEEE802dot11-MIB", "dot11ProductID"), ("IEEE802dot11-MIB", "dot11CAPLimit"), ("IEEE802dot11-MIB", "dot11HCCWmin"), ("IEEE802dot11-MIB", "dot11HCCWmax"), ("IEEE802dot11-MIB", "dot11HCCAIFSN"), ("IEEE802dot11-MIB", "dot11ADDBAResponseTimeout"), ("IEEE802dot11-MIB", "dot11ADDTSResponseTimeout"), ("IEEE802dot11-MIB", "dot11ChannelUtilizationBeaconInterval"), ("IEEE802dot11-MIB", "dot11ScheduleTimeout"), ("IEEE802dot11-MIB", "dot11DLSResponseTimeout"), ("IEEE802dot11-MIB", "dot11QAPMissingAckRetryLimit"), ("IEEE802dot11-MIB", "dot11EDCAAveragingPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11MACbase2 = dot11MACbase2.setStatus('deprecated')
dot11CountersGroup2 = ObjectGroup((1, 2, 840, 10036, 5, 1, 32)).setObjects(("IEEE802dot11-MIB", "dot11TransmittedFragmentCount"), ("IEEE802dot11-MIB", "dot11MulticastTransmittedFrameCount"), ("IEEE802dot11-MIB", "dot11FailedCount"), ("IEEE802dot11-MIB", "dot11ReceivedFragmentCount"), ("IEEE802dot11-MIB", "dot11MulticastReceivedFrameCount"), ("IEEE802dot11-MIB", "dot11FCSErrorCount"), ("IEEE802dot11-MIB", "dot11WEPUndecryptableCount"), ("IEEE802dot11-MIB", "dot11TransmittedFrameCount"), ("IEEE802dot11-MIB", "dot11QosDiscardedFragmentCount"), ("IEEE802dot11-MIB", "dot11AssociatedStationCount"), ("IEEE802dot11-MIB", "dot11QosCFPollsReceivedCount"), ("IEEE802dot11-MIB", "dot11QosCFPollsUnusedCount"), ("IEEE802dot11-MIB", "dot11QosCFPollsUnusableCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11CountersGroup2 = dot11CountersGroup2.setStatus('deprecated')
dot11Qosadditions = ObjectGroup((1, 2, 840, 10036, 5, 1, 33)).setObjects(("IEEE802dot11-MIB", "dot11EDCATable"), ("IEEE802dot11-MIB", "dot11QAPEDCATable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11Qosadditions = dot11Qosadditions.setStatus('current')
dot11SMTbase6 = ObjectGroup((1, 2, 840, 10036, 5, 1, 34)).setObjects(("IEEE802dot11-MIB", "dot11MediumOccupancyLimit"), ("IEEE802dot11-MIB", "dot11CFPollable"), ("IEEE802dot11-MIB", "dot11CFPPeriod"), ("IEEE802dot11-MIB", "dot11CFPMaxDuration"), ("IEEE802dot11-MIB", "dot11AuthenticationResponseTimeOut"), ("IEEE802dot11-MIB", "dot11PrivacyOptionImplemented"), ("IEEE802dot11-MIB", "dot11PowerManagementMode"), ("IEEE802dot11-MIB", "dot11DesiredSSID"), ("IEEE802dot11-MIB", "dot11DesiredBSSType"), ("IEEE802dot11-MIB", "dot11OperationalRateSet"), ("IEEE802dot11-MIB", "dot11BeaconPeriod"), ("IEEE802dot11-MIB", "dot11DTIMPeriod"), ("IEEE802dot11-MIB", "dot11AssociationResponseTimeOut"), ("IEEE802dot11-MIB", "dot11DisassociateReason"), ("IEEE802dot11-MIB", "dot11DisassociateStation"), ("IEEE802dot11-MIB", "dot11DeauthenticateReason"), ("IEEE802dot11-MIB", "dot11DeauthenticateStation"), ("IEEE802dot11-MIB", "dot11AuthenticateFailStatus"), ("IEEE802dot11-MIB", "dot11AuthenticateFailStation"), ("IEEE802dot11-MIB", "dot11MultiDomainCapabilityImplemented"), ("IEEE802dot11-MIB", "dot11MultiDomainCapabilityEnabled"), ("IEEE802dot11-MIB", "dot11CountryString"), ("IEEE802dot11-MIB", "dot11RSNAOptionImplemented"), ("IEEE802dot11-MIB", "dot11QosOptionImplemented"), ("IEEE802dot11-MIB", "dot11ImmediateBlockAckOptionImplemented"), ("IEEE802dot11-MIB", "dot11DelayedBlockAckOptionImplemented"), ("IEEE802dot11-MIB", "dot11DirectOptionImplemented"), ("IEEE802dot11-MIB", "dot11APSDOptionImplemented"), ("IEEE802dot11-MIB", "dot11QAckOptionImplemented"), ("IEEE802dot11-MIB", "dot11QBSSLoadOptionImplemented"), ("IEEE802dot11-MIB", "dot11QueueRequestOptionImplemented"), ("IEEE802dot11-MIB", "dot11TXOPRequestOptionImplemented"), ("IEEE802dot11-MIB", "dot11MoreDataAckOptionImplemented"), ("IEEE802dot11-MIB", "dot11AssociateinNQBSS"), ("IEEE802dot11-MIB", "dot11DLSAllowedInQBSS"), ("IEEE802dot11-MIB", "dot11DLSAllowed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11SMTbase6 = dot11SMTbase6.setStatus('current')
dot11PhyAntennaComplianceGroup2 = ObjectGroup((1, 2, 840, 10036, 5, 1, 41)).setObjects(("IEEE802dot11-MIB", "dot11CurrentTxAntenna"), ("IEEE802dot11-MIB", "dot11DiversitySupport"), ("IEEE802dot11-MIB", "dot11CurrentRxAntenna"), ("IEEE802dot11-MIB", "dot11TransmitExplicitCSIFeedbackASOptionImplemented"), ("IEEE802dot11-MIB", "dot11TransmitIndicesFeedbackASOptionImplemented"), ("IEEE802dot11-MIB", "dot11ExplicitCSIFeedbackASOptionImplemented"), ("IEEE802dot11-MIB", "dot11TransmitIndicesComputationFeedbackASOptionImplemented"), ("IEEE802dot11-MIB", "dot11ReceiveAntennaSelectionOptionImplemented"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyAntennaComplianceGroup2 = dot11PhyAntennaComplianceGroup2.setStatus('current')
dot11MACbase3 = ObjectGroup((1, 2, 840, 10036, 5, 1, 42)).setObjects(("IEEE802dot11-MIB", "dot11MACAddress"), ("IEEE802dot11-MIB", "dot11Address"), ("IEEE802dot11-MIB", "dot11GroupAddressesStatus"), ("IEEE802dot11-MIB", "dot11RTSThreshold"), ("IEEE802dot11-MIB", "dot11ShortRetryLimit"), ("IEEE802dot11-MIB", "dot11LongRetryLimit"), ("IEEE802dot11-MIB", "dot11FragmentationThreshold"), ("IEEE802dot11-MIB", "dot11MaxTransmitMSDULifetime"), ("IEEE802dot11-MIB", "dot11MaxReceiveLifetime"), ("IEEE802dot11-MIB", "dot11ManufacturerID"), ("IEEE802dot11-MIB", "dot11ProductID"), ("IEEE802dot11-MIB", "dot11CAPLimit"), ("IEEE802dot11-MIB", "dot11HCCWmin"), ("IEEE802dot11-MIB", "dot11HCCWmax"), ("IEEE802dot11-MIB", "dot11HCCAIFSN"), ("IEEE802dot11-MIB", "dot11ADDBAResponseTimeout"), ("IEEE802dot11-MIB", "dot11ADDTSResponseTimeout"), ("IEEE802dot11-MIB", "dot11ChannelUtilizationBeaconInterval"), ("IEEE802dot11-MIB", "dot11ScheduleTimeout"), ("IEEE802dot11-MIB", "dot11DLSResponseTimeout"), ("IEEE802dot11-MIB", "dot11QAPMissingAckRetryLimit"), ("IEEE802dot11-MIB", "dot11EDCAAveragingPeriod"), ("IEEE802dot11-MIB", "dot11HTOperatingMode"), ("IEEE802dot11-MIB", "dot11RIFSMode"), ("IEEE802dot11-MIB", "dot11PSMPControlledAccess"), ("IEEE802dot11-MIB", "dot11ServiceIntervalGranularity"), ("IEEE802dot11-MIB", "dot11DualCTSProtection"), ("IEEE802dot11-MIB", "dot11LSigTxopFullProtectionEnabled"), ("IEEE802dot11-MIB", "dot11NonGFEntitiesPresent"), ("IEEE802dot11-MIB", "dot11PCOActivated"), ("IEEE802dot11-MIB", "dot11PCO40MaxDuration"), ("IEEE802dot11-MIB", "dot11PCO20MaxDuration"), ("IEEE802dot11-MIB", "dot11PCO40MinDuration"), ("IEEE802dot11-MIB", "dot11PCO20MinDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11MACbase3 = dot11MACbase3.setStatus('current')
dot11CountersGroup3 = ObjectGroup((1, 2, 840, 10036, 5, 1, 43)).setObjects(("IEEE802dot11-MIB", "dot11TransmittedFragmentCount"), ("IEEE802dot11-MIB", "dot11MulticastTransmittedFrameCount"), ("IEEE802dot11-MIB", "dot11FailedCount"), ("IEEE802dot11-MIB", "dot11ReceivedFragmentCount"), ("IEEE802dot11-MIB", "dot11MulticastReceivedFrameCount"), ("IEEE802dot11-MIB", "dot11FCSErrorCount"), ("IEEE802dot11-MIB", "dot11WEPUndecryptableCount"), ("IEEE802dot11-MIB", "dot11TransmittedFrameCount"), ("IEEE802dot11-MIB", "dot11QosDiscardedFragmentCount"), ("IEEE802dot11-MIB", "dot11AssociatedStationCount"), ("IEEE802dot11-MIB", "dot11QosCFPollsReceivedCount"), ("IEEE802dot11-MIB", "dot11QosCFPollsUnusedCount"), ("IEEE802dot11-MIB", "dot11QosCFPollsUnusableCount"), ("IEEE802dot11-MIB", "dot11TransmittedAMSDUCount"), ("IEEE802dot11-MIB", "dot11FailedAMSDUCount"), ("IEEE802dot11-MIB", "dot11RetryAMSDUCount"), ("IEEE802dot11-MIB", "dot11MultipleRetryAMSDUCount"), ("IEEE802dot11-MIB", "dot11AMSDUAckFailureCount"), ("IEEE802dot11-MIB", "dot11ReceivedAMSDUCount"), ("IEEE802dot11-MIB", "dot11TransmittedAMPDUCount"), ("IEEE802dot11-MIB", "dot11TransmittedMPDUsInAMPDUCount"), ("IEEE802dot11-MIB", "dot11TransmittedOctetsInAMPDUCount"), ("IEEE802dot11-MIB", "dot11AMPDUReceivedCount"), ("IEEE802dot11-MIB", "dot11MPDUInReceivedAMPDUCount"), ("IEEE802dot11-MIB", "dot11ReceivedOctetsInAMPDUCount"), ("IEEE802dot11-MIB", "dot11AMPDUDelimiterCRCErrorCount"), ("IEEE802dot11-MIB", "dot11ImplicitBARFailureCount"), ("IEEE802dot11-MIB", "dot11ExplicitBARFailureCount"), ("IEEE802dot11-MIB", "dot11ChannelWidthSwitchCount"), ("IEEE802dot11-MIB", "dot11TwentyMHzFrameTransmittedCount"), ("IEEE802dot11-MIB", "dot11FortyMHzFrameTransmittedCount"), ("IEEE802dot11-MIB", "dot11TwentyMHzFrameReceivedCount"), ("IEEE802dot11-MIB", "dot11FortyMHzFrameReceivedCount"), ("IEEE802dot11-MIB", "dot11PSMPSuccessCount"), ("IEEE802dot11-MIB", "dot11PSMPFailureCount"), ("IEEE802dot11-MIB", "dot11GrantedRDGUsedCount"), ("IEEE802dot11-MIB", "dot11GrantedRDGUnusedCount"), ("IEEE802dot11-MIB", "dot11TransmittedFramesInGrantedRDGCount"), ("IEEE802dot11-MIB", "dot11TransmittedOctetsInGrantedRDGCount"), ("IEEE802dot11-MIB", "dot11DualCTSSuccessCount"), ("IEEE802dot11-MIB", "dot11DualCTSFailureCount"), ("IEEE802dot11-MIB", "dot11STBCCTSSuccessCount"), ("IEEE802dot11-MIB", "dot11STBCCTSFailureCount"), ("IEEE802dot11-MIB", "dot11nonSTBCCTSSuccessCount"), ("IEEE802dot11-MIB", "dot11nonSTBCCTSFailureCount"), ("IEEE802dot11-MIB", "dot11RTSLSIGSuccessCount"), ("IEEE802dot11-MIB", "dot11RTSLSIGFailureCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11CountersGroup3 = dot11CountersGroup3.setStatus('current')
dot11SMTbase9 = ObjectGroup((1, 2, 840, 10036, 5, 1, 44)).setObjects(("IEEE802dot11-MIB", "dot11MediumOccupancyLimit"), ("IEEE802dot11-MIB", "dot11CFPollable"), ("IEEE802dot11-MIB", "dot11CFPPeriod"), ("IEEE802dot11-MIB", "dot11CFPMaxDuration"), ("IEEE802dot11-MIB", "dot11AuthenticationResponseTimeOut"), ("IEEE802dot11-MIB", "dot11PrivacyOptionImplemented"), ("IEEE802dot11-MIB", "dot11PowerManagementMode"), ("IEEE802dot11-MIB", "dot11DesiredSSID"), ("IEEE802dot11-MIB", "dot11DesiredBSSType"), ("IEEE802dot11-MIB", "dot11OperationalRateSet"), ("IEEE802dot11-MIB", "dot11BeaconPeriod"), ("IEEE802dot11-MIB", "dot11DTIMPeriod"), ("IEEE802dot11-MIB", "dot11AssociationResponseTimeOut"), ("IEEE802dot11-MIB", "dot11DisassociateReason"), ("IEEE802dot11-MIB", "dot11DisassociateStation"), ("IEEE802dot11-MIB", "dot11DeauthenticateReason"), ("IEEE802dot11-MIB", "dot11DeauthenticateStation"), ("IEEE802dot11-MIB", "dot11AuthenticateFailStatus"), ("IEEE802dot11-MIB", "dot11AuthenticateFailStation"), ("IEEE802dot11-MIB", "dot11MultiDomainCapabilityImplemented"), ("IEEE802dot11-MIB", "dot11MultiDomainCapabilityEnabled"), ("IEEE802dot11-MIB", "dot11CountryString"), ("IEEE802dot11-MIB", "dot11RSNAOptionImplemented"), ("IEEE802dot11-MIB", "dot11QosOptionImplemented"), ("IEEE802dot11-MIB", "dot11ImmediateBlockAckOptionImplemented"), ("IEEE802dot11-MIB", "dot11DelayedBlockAckOptionImplemented"), ("IEEE802dot11-MIB", "dot11DirectOptionImplemented"), ("IEEE802dot11-MIB", "dot11APSDOptionImplemented"), ("IEEE802dot11-MIB", "dot11QAckOptionImplemented"), ("IEEE802dot11-MIB", "dot11QBSSLoadOptionImplemented"), ("IEEE802dot11-MIB", "dot11QueueRequestOptionImplemented"), ("IEEE802dot11-MIB", "dot11TXOPRequestOptionImplemented"), ("IEEE802dot11-MIB", "dot11MoreDataAckOptionImplemented"), ("IEEE802dot11-MIB", "dot11AssociateinNQBSS"), ("IEEE802dot11-MIB", "dot11DLSAllowedInQBSS"), ("IEEE802dot11-MIB", "dot11DLSAllowed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11SMTbase9 = dot11SMTbase9.setStatus('current')
dot11PhyMCSGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 45)).setObjects(("IEEE802dot11-MIB", "dot11SupportedMCSTxValue"), ("IEEE802dot11-MIB", "dot11SupportedMCSRxValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11PhyMCSGroup = dot11PhyMCSGroup.setStatus('current')
dot1PhyHTComplianceGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 46)).setObjects(("IEEE802dot11-MIB", "dot11HighThroughputOptionImplemented"), ("IEEE802dot11-MIB", "dot11FortyMHzOperationImplemented"), ("IEEE802dot11-MIB", "dot11FortyMHzOperationEnabled"), ("IEEE802dot11-MIB", "dot11CurrentPrimaryChannel"), ("IEEE802dot11-MIB", "dot11CurrentSecondaryChannel"), ("IEEE802dot11-MIB", "dot11GreenfieldOptionImplemented"), ("IEEE802dot11-MIB", "dot11GreenfieldOptionEnabled"), ("IEEE802dot11-MIB", "dot11ShortGIOptionInTwentyImplemented"), ("IEEE802dot11-MIB", "dot11ShortGIOptionInTwentyEnabled"), ("IEEE802dot11-MIB", "dot11ShortGIOptionInFortyImplemented"), ("IEEE802dot11-MIB", "dot11ShortGIOptionInFortyEnabled"), ("IEEE802dot11-MIB", "dot11LDPCCodingOptionImplemented"), ("IEEE802dot11-MIB", "dot11LDPCCodingOptionEnabled"), ("IEEE802dot11-MIB", "dot11TxSTBCOptionImplemented"), ("IEEE802dot11-MIB", "dot11TxSTBCOptionEnabled"), ("IEEE802dot11-MIB", "dot11RxSTBCOptionImplemented"), ("IEEE802dot11-MIB", "dot11RxSTBCOptionEnabled"), ("IEEE802dot11-MIB", "dot11BeamFormingOptionImplemented"), ("IEEE802dot11-MIB", "dot11BeamFormingOptionImplemented"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot1PhyHTComplianceGroup = dot1PhyHTComplianceGroup.setStatus('current')
dot11HTMACAdditions = ObjectGroup((1, 2, 840, 10036, 5, 1, 47)).setObjects(("IEEE802dot11-MIB", "dot11HTOperationalMCSSet"), ("IEEE802dot11-MIB", "dot11MIMOPowerSave"), ("IEEE802dot11-MIB", "dot11NDelayedBlockAckOptionImplemented"), ("IEEE802dot11-MIB", "dot11MaxAMSDULength"), ("IEEE802dot11-MIB", "dot11PSMPOptionImplemented"), ("IEEE802dot11-MIB", "dot11STBCControlFrameOptionImplemented"), ("IEEE802dot11-MIB", "dot11LsigTxopProtectionOptionImplemented"), ("IEEE802dot11-MIB", "dot11MaxRxAMPDUFactor"), ("IEEE802dot11-MIB", "dot11MinimumMPDUStartSpacing"), ("IEEE802dot11-MIB", "dot11PCOOptionImplemented"), ("IEEE802dot11-MIB", "dot11TransitionTime"), ("IEEE802dot11-MIB", "dot11MCSFeedbackOptionImplemented"), ("IEEE802dot11-MIB", "dot11HTControlFieldSupported"), ("IEEE802dot11-MIB", "dot11RDResponderOptionImplemented"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11HTMACAdditions = dot11HTMACAdditions.setStatus('current')
dot11TxBFGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 48)).setObjects(("IEEE802dot11-MIB", "dot11ReceiveStaggerSoundingOptionImplemented"), ("IEEE802dot11-MIB", "dot11TransmitStaggerSoundingOptionImplemented"), ("IEEE802dot11-MIB", "dot11ReceiveNDPOptionImplemented"), ("IEEE802dot11-MIB", "dot11TransmitNDPOptionImplemented"), ("IEEE802dot11-MIB", "dot11ImplicitTxBFOptionImplemented"), ("IEEE802dot11-MIB", "dot11CalibrationOptionImplemented"), ("IEEE802dot11-MIB", "dot11ExplicitCSITxBFOptionImplemented"), ("IEEE802dot11-MIB", "dot11ExplicitNonCompressedbeamformingMatrixOptionImplemented"), ("IEEE802dot11-MIB", "dot11ExplicitBFCSIFeedbackOptionImplemented"), ("IEEE802dot11-MIB", "dot11ExplicitNonCompressedbeamformingMatrixFeedbackOptionImplemented"), ("IEEE802dot11-MIB", "dot11ExplicitCompressedbeamformingMatrixFeedbackOptionImplemented"), ("IEEE802dot11-MIB", "dot11NumberBeamFormingCSISupportAntenna"), ("IEEE802dot11-MIB", "dot11NumberNonCompressedbeamformingMatrixSupportAntenna"), ("IEEE802dot11-MIB", "dot11NumberCompressedbeamformingMatrixSupportAntenna"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11TxBFGroup = dot11TxBFGroup.setStatus('current')
dot11RSNAConfigTable = MibTable((1, 2, 840, 10036, 1, 9), )
if mibBuilder.loadTexts: dot11RSNAConfigTable.setStatus('current')
dot11RSNAConfigEntry = MibTableRow((1, 2, 840, 10036, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11RSNAConfigEntry.setStatus('current')
dot11RSNAConfigVersion = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAConfigVersion.setStatus('current')
dot11RSNAConfigPairwiseKeysSupported = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAConfigPairwiseKeysSupported.setStatus('current')
dot11RSNAConfigGroupCipher = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RSNAConfigGroupCipher.setStatus('current')
dot11RSNAConfigGroupRekeyMethod = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("timeBased", 2), ("packetBased", 3), ("timepacket-Based", 4))).clone('timeBased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RSNAConfigGroupRekeyMethod.setStatus('current')
dot11RSNAConfigGroupRekeyTime = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(86400)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RSNAConfigGroupRekeyTime.setStatus('current')
dot11RSNAConfigGroupRekeyPackets = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('1000 packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RSNAConfigGroupRekeyPackets.setStatus('current')
dot11RSNAConfigGroupRekeyStrict = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RSNAConfigGroupRekeyStrict.setStatus('current')
dot11RSNAConfigPSKValue = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RSNAConfigPSKValue.setStatus('current')
dot11RSNAConfigPSKPassPhrase = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RSNAConfigPSKPassPhrase.setStatus('current')
dot11RSNAConfigGroupUpdateCount = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RSNAConfigGroupUpdateCount.setStatus('current')
dot11RSNAConfigPairwiseUpdateCount = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RSNAConfigPairwiseUpdateCount.setStatus('current')
dot11RSNAConfigGroupCipherSize = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAConfigGroupCipherSize.setStatus('current')
dot11RSNAConfigPMKLifetime = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(43200)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RSNAConfigPMKLifetime.setStatus('current')
dot11RSNAConfigPMKReauthThreshold = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RSNAConfigPMKReauthThreshold.setStatus('current')
dot11RSNAConfigNumberOfPTKSAReplayCounters = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAConfigNumberOfPTKSAReplayCounters.setStatus('current')
dot11RSNAConfigSATimeout = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RSNAConfigSATimeout.setStatus('current')
dot11RSNAAuthenticationSuiteSelected = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAAuthenticationSuiteSelected.setStatus('current')
dot11RSNAPairwiseCipherSelected = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAPairwiseCipherSelected.setStatus('current')
dot11RSNAGroupCipherSelected = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAGroupCipherSelected.setStatus('current')
dot11RSNAPMKIDUsed = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAPMKIDUsed.setStatus('current')
dot11RSNAAuthenticationSuiteRequested = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAAuthenticationSuiteRequested.setStatus('current')
dot11RSNAPairwiseCipherRequested = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAPairwiseCipherRequested.setStatus('current')
dot11RSNAGroupCipherRequested = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAGroupCipherRequested.setStatus('current')
dot11RSNATKIPCounterMeasuresInvoked = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RSNATKIPCounterMeasuresInvoked.setStatus('current')
dot11RSNA4WayHandshakeFailures = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RSNA4WayHandshakeFailures.setStatus('current')
dot11RSNAConfigNumberOfGTKSAReplayCounters = MibTableColumn((1, 2, 840, 10036, 1, 9, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAConfigNumberOfGTKSAReplayCounters.setStatus('current')
dot11RSNAConfigPairwiseCiphersTable = MibTable((1, 2, 840, 10036, 1, 10), )
if mibBuilder.loadTexts: dot11RSNAConfigPairwiseCiphersTable.setStatus('current')
dot11RSNAConfigPairwiseCiphersEntry = MibTableRow((1, 2, 840, 10036, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11RSNAConfigPairwiseCipherIndex"))
if mibBuilder.loadTexts: dot11RSNAConfigPairwiseCiphersEntry.setStatus('current')
dot11RSNAConfigPairwiseCipherIndex = MibTableColumn((1, 2, 840, 10036, 1, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAConfigPairwiseCipherIndex.setStatus('current')
dot11RSNAConfigPairwiseCipher = MibTableColumn((1, 2, 840, 10036, 1, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAConfigPairwiseCipher.setStatus('current')
dot11RSNAConfigPairwiseCipherEnabled = MibTableColumn((1, 2, 840, 10036, 1, 10, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RSNAConfigPairwiseCipherEnabled.setStatus('current')
dot11RSNAConfigPairwiseCipherSize = MibTableColumn((1, 2, 840, 10036, 1, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAConfigPairwiseCipherSize.setStatus('current')
dot11RSNAConfigAuthenticationSuitesTable = MibTable((1, 2, 840, 10036, 1, 11), )
if mibBuilder.loadTexts: dot11RSNAConfigAuthenticationSuitesTable.setStatus('current')
dot11RSNAConfigAuthenticationSuitesEntry = MibTableRow((1, 2, 840, 10036, 1, 11, 1), ).setIndexNames((0, "IEEE802dot11-MIB", "dot11RSNAConfigAuthenticationSuiteIndex"))
if mibBuilder.loadTexts: dot11RSNAConfigAuthenticationSuitesEntry.setStatus('current')
dot11RSNAConfigAuthenticationSuiteIndex = MibTableColumn((1, 2, 840, 10036, 1, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAConfigAuthenticationSuiteIndex.setStatus('current')
dot11RSNAConfigAuthenticationSuite = MibTableColumn((1, 2, 840, 10036, 1, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAConfigAuthenticationSuite.setStatus('current')
dot11RSNAConfigAuthenticationSuiteEnabled = MibTableColumn((1, 2, 840, 10036, 1, 11, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RSNAConfigAuthenticationSuiteEnabled.setStatus('current')
dot11RSNAStatsTable = MibTable((1, 2, 840, 10036, 1, 12), )
if mibBuilder.loadTexts: dot11RSNAStatsTable.setStatus('current')
dot11RSNAStatsEntry = MibTableRow((1, 2, 840, 10036, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "IEEE802dot11-MIB", "dot11RSNAStatsIndex"))
if mibBuilder.loadTexts: dot11RSNAStatsEntry.setStatus('current')
dot11RSNAStatsIndex = MibTableColumn((1, 2, 840, 10036, 1, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAStatsIndex.setStatus('current')
dot11RSNAStatsSTAAddress = MibTableColumn((1, 2, 840, 10036, 1, 12, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAStatsSTAAddress.setStatus('current')
dot11RSNAStatsVersion = MibTableColumn((1, 2, 840, 10036, 1, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAStatsVersion.setStatus('current')
dot11RSNAStatsSelectedPairwiseCipher = MibTableColumn((1, 2, 840, 10036, 1, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAStatsSelectedPairwiseCipher.setStatus('current')
dot11RSNAStatsTKIPICVErrors = MibTableColumn((1, 2, 840, 10036, 1, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAStatsTKIPICVErrors.setStatus('current')
dot11RSNAStatsTKIPLocalMICFailures = MibTableColumn((1, 2, 840, 10036, 1, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAStatsTKIPLocalMICFailures.setStatus('current')
dot11RSNAStatsTKIPRemoteMICFailures = MibTableColumn((1, 2, 840, 10036, 1, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAStatsTKIPRemoteMICFailures.setStatus('current')
dot11RSNAStatsCCMPReplays = MibTableColumn((1, 2, 840, 10036, 1, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAStatsCCMPReplays.setStatus('current')
dot11RSNAStatsCCMPDecryptErrors = MibTableColumn((1, 2, 840, 10036, 1, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAStatsCCMPDecryptErrors.setStatus('current')
dot11RSNAStatsTKIPReplays = MibTableColumn((1, 2, 840, 10036, 1, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RSNAStatsTKIPReplays.setStatus('current')
dot11HTStationConfigTable = MibTable((1, 2, 840, 10036, 1, 16), )
if mibBuilder.loadTexts: dot11HTStationConfigTable.setStatus('current')
dot11HTStationConfigEntry = MibTableRow((1, 2, 840, 10036, 1, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11HTStationConfigEntry.setStatus('current')
dot11HTOperationalMCSSet = MibTableColumn((1, 2, 840, 10036, 1, 16, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11HTOperationalMCSSet.setStatus('current')
dot11MIMOPowerSave = MibTableColumn((1, 2, 840, 10036, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("mimo", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MIMOPowerSave.setStatus('current')
dot11NDelayedBlockAckOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 16, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11NDelayedBlockAckOptionImplemented.setStatus('current')
dot11MaxAMSDULength = MibTableColumn((1, 2, 840, 10036, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3839, 7935)).clone(3839)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MaxAMSDULength.setStatus('current')
dot11PSMPOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 16, 1, 5), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11PSMPOptionImplemented.setStatus('current')
dot11STBCControlFrameOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 16, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11STBCControlFrameOptionImplemented.setStatus('current')
dot11LsigTxopProtectionOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 16, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11LsigTxopProtectionOptionImplemented.setStatus('current')
dot11MaxRxAMPDUFactor = MibTableColumn((1, 2, 840, 10036, 1, 16, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MaxRxAMPDUFactor.setStatus('current')
dot11MinimumMPDUStartSpacing = MibTableColumn((1, 2, 840, 10036, 1, 16, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MinimumMPDUStartSpacing.setStatus('current')
dot11PCOOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 16, 1, 10), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11PCOOptionImplemented.setStatus('current')
dot11TransitionTime = MibTableColumn((1, 2, 840, 10036, 1, 16, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransitionTime.setStatus('current')
dot11MCSFeedbackOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 16, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("unsolicited", 2), ("both", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MCSFeedbackOptionImplemented.setStatus('current')
dot11HTControlFieldSupported = MibTableColumn((1, 2, 840, 10036, 1, 16, 1, 13), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11HTControlFieldSupported.setStatus('current')
dot11RDResponderOptionImplemented = MibTableColumn((1, 2, 840, 10036, 1, 16, 1, 14), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RDResponderOptionImplemented.setStatus('current')
dot11RSNCompliance = ModuleCompliance((1, 2, 840, 10036, 5, 2, 2)).setObjects(("IEEE802dot11-MIB", "dot11RSNBase"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11RSNCompliance = dot11RSNCompliance.setStatus('current')
dot11RSNBase = ObjectGroup((1, 2, 840, 10036, 5, 1, 126)).setObjects(("IEEE802dot11-MIB", "dot11RSNAConfigVersion"), ("IEEE802dot11-MIB", "dot11RSNAConfigPairwiseKeysSupported"), ("IEEE802dot11-MIB", "dot11RSNAConfigGroupCipher"), ("IEEE802dot11-MIB", "dot11RSNAConfigGroupRekeyMethod"), ("IEEE802dot11-MIB", "dot11RSNAConfigGroupRekeyTime"), ("IEEE802dot11-MIB", "dot11RSNAConfigGroupRekeyPackets"), ("IEEE802dot11-MIB", "dot11RSNAConfigGroupRekeyStrict"), ("IEEE802dot11-MIB", "dot11RSNAConfigPSKValue"), ("IEEE802dot11-MIB", "dot11RSNAConfigPSKPassPhrase"), ("IEEE802dot11-MIB", "dot11RSNAConfigGroupUpdateCount"), ("IEEE802dot11-MIB", "dot11RSNAConfigPairwiseUpdateCount"), ("IEEE802dot11-MIB", "dot11RSNAConfigGroupCipherSize"), ("IEEE802dot11-MIB", "dot11RSNAConfigPairwiseCipher"), ("IEEE802dot11-MIB", "dot11RSNAConfigPairwiseCipherEnabled"), ("IEEE802dot11-MIB", "dot11RSNAConfigPairwiseCipherSize"), ("IEEE802dot11-MIB", "dot11RSNAConfigAuthenticationSuite"), ("IEEE802dot11-MIB", "dot11RSNAConfigAuthenticationSuiteEnabled"), ("IEEE802dot11-MIB", "dot11RSNAConfigNumberOfPTKSAReplayCounters"), ("IEEE802dot11-MIB", "dot11RSNAConfigSATimeout"), ("IEEE802dot11-MIB", "dot11RSNAConfigNumberOfGTKSAReplayCounters"), ("IEEE802dot11-MIB", "dot11RSNAAuthenticationSuiteSelected"), ("IEEE802dot11-MIB", "dot11RSNAPairwiseCipherSelected"), ("IEEE802dot11-MIB", "dot11RSNAGroupCipherSelected"), ("IEEE802dot11-MIB", "dot11RSNAPMKIDUsed"), ("IEEE802dot11-MIB", "dot11RSNAAuthenticationSuiteRequested"), ("IEEE802dot11-MIB", "dot11RSNAPairwiseCipherRequested"), ("IEEE802dot11-MIB", "dot11RSNAGroupCipherRequested"), ("IEEE802dot11-MIB", "dot11RSNAStatsSTAAddress"), ("IEEE802dot11-MIB", "dot11RSNAStatsVersion"), ("IEEE802dot11-MIB", "dot11RSNAStatsSelectedPairwiseCipher"), ("IEEE802dot11-MIB", "dot11RSNAStatsTKIPICVErrors"), ("IEEE802dot11-MIB", "dot11RSNAStatsTKIPLocalMICFailures"), ("IEEE802dot11-MIB", "dot11RSNAStatsTKIPRemoteMICFailures"), ("IEEE802dot11-MIB", "dot11RSNAStatsCCMPReplays"), ("IEEE802dot11-MIB", "dot11RSNAStatsCCMPDecryptErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11RSNBase = dot11RSNBase.setStatus('current')
dot11RSNPMKcachingGroup = ObjectGroup((1, 2, 840, 10036, 5, 1, 27)).setObjects(("IEEE802dot11-MIB", "dot11RSNAConfigPMKLifetime"), ("IEEE802dot11-MIB", "dot11RSNAConfigPMKReauthThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot11RSNPMKcachingGroup = dot11RSNPMKcachingGroup.setStatus('current')
mibBuilder.exportSymbols("IEEE802dot11-MIB", dot11ReceiveNDPOptionImplemented=dot11ReceiveNDPOptionImplemented, dot11RSNAGroupCipherSelected=dot11RSNAGroupCipherSelected, dot11RSNAConfigPSKValue=dot11RSNAConfigPSKValue, dot11PCO20MaxDuration=dot11PCO20MaxDuration, dot11MitigationRequirement=dot11MitigationRequirement, dot11ImplicitBARFailureCount=dot11ImplicitBARFailureCount, dot11Conformance=dot11Conformance, dot11AssociationResponseTimeOut=dot11AssociationResponseTimeOut, dot11SMTbase4=dot11SMTbase4, dot11RSNAConfigGroupRekeyStrict=dot11RSNAConfigGroupRekeyStrict, dot11QAPEDCATableEntry=dot11QAPEDCATableEntry, dot11QosTransmittedFrameCount=dot11QosTransmittedFrameCount, dot11NotificationGroup=dot11NotificationGroup, dot11FailedAMSDUCount=dot11FailedAMSDUCount, dot11TxBFConfigEntry=dot11TxBFConfigEntry, dot11SMTbase9=dot11SMTbase9, dot11RSNAStatsCCMPReplays=dot11RSNAStatsCCMPReplays, dot11LSigTxopFullProtectionEnabled=dot11LSigTxopFullProtectionEnabled, dot11SpectrumManagementImplemented=dot11SpectrumManagementImplemented, dot11ShortPreambleOptionImplemented=dot11ShortPreambleOptionImplemented, dot11RSNAConfigPairwiseCiphersEntry=dot11RSNAConfigPairwiseCiphersEntry, dot11RSNAadditions=dot11RSNAadditions, dot11CountryString=dot11CountryString, dot11PCO40MaxDuration=dot11PCO40MaxDuration, dot11AssociatedStationCount=dot11AssociatedStationCount, dot11SupportedMCSRxValue=dot11SupportedMCSRxValue, dot11TxSTBCOptionEnabled=dot11TxSTBCOptionEnabled, dot11QosACKFailureCount=dot11QosACKFailureCount, dot11RSNAConfigAuthenticationSuite=dot11RSNAConfigAuthenticationSuite, dot11RegDomainsSupportIndex=dot11RegDomainsSupportIndex, dot11QAPEDCATableTXOPLimit=dot11QAPEDCATableTXOPLimit, dot11PrivacyOptionImplemented=dot11PrivacyOptionImplemented, dot11TxBFConfigTable=dot11TxBFConfigTable, dot11SMTbase3=dot11SMTbase3, dot11AntennaSelectionOptionImplemented=dot11AntennaSelectionOptionImplemented, WEPKeytype=WEPKeytype, dot11WEPKeyMappingWEPOn=dot11WEPKeyMappingWEPOn, dot11PhyTxPowerEntry=dot11PhyTxPowerEntry, dot11PhyERPEntry=dot11PhyERPEntry, dot11HighThroughputOptionImplemented=dot11HighThroughputOptionImplemented, dot11ReceivedFragmentCount=dot11ReceivedFragmentCount, dot11WEPUndecryptableCount=dot11WEPUndecryptableCount, dot11RSNAConfigPairwiseCipherIndex=dot11RSNAConfigPairwiseCipherIndex, dot11RTSSuccessCount=dot11RTSSuccessCount, dot11CurrentRegDomain=dot11CurrentRegDomain, dot11WEPExcludedCount=dot11WEPExcludedCount, dot11MaxDwellTime=dot11MaxDwellTime, dot11RSNATKIPCounterMeasuresInvoked=dot11RSNATKIPCounterMeasuresInvoked, dot11StationConfigEntry=dot11StationConfigEntry, dot11RSNAPreauthenticationImplemented=dot11RSNAPreauthenticationImplemented, dot11mac=dot11mac, dot11QosMPDUsReceivedCount=dot11QosMPDUsReceivedCount, dot11SpectrumManagementRequired=dot11SpectrumManagementRequired, dot11MultiDomainCapabilityEntry=dot11MultiDomainCapabilityEntry, dot11CurrentDwellTime=dot11CurrentDwellTime, dot11SupportedMCSTxTable=dot11SupportedMCSTxTable, dot11MultiDomainCapabilityEnabled=dot11MultiDomainCapabilityEnabled, dot11res=dot11res, dot11AuthenticationAlgorithm=dot11AuthenticationAlgorithm, dot11RSNAConfigPairwiseCipherSize=dot11RSNAConfigPairwiseCipherSize, dot11TxPowerLevel8=dot11TxPowerLevel8, dot11RSNAConfigSATimeout=dot11RSNAConfigSATimeout, dot11manufacturerProductName=dot11manufacturerProductName, dot11RxSTBCOptionEnabled=dot11RxSTBCOptionEnabled, dot11SupportedDataRatesRxEntry=dot11SupportedDataRatesRxEntry, dot11ADDBAResponseTimeout=dot11ADDBAResponseTimeout, dot11ShortGIOptionInTwentyImplemented=dot11ShortGIOptionInTwentyImplemented, dot11ReceivedAMSDUCount=dot11ReceivedAMSDUCount, dot11Groups=dot11Groups, dot11RSNAConfigPairwiseUpdateCount=dot11RSNAConfigPairwiseUpdateCount, dot11QosCFPollsUnusableCount=dot11QosCFPollsUnusableCount, dot11ResourceTypeIDName=dot11ResourceTypeIDName, dot11NumberofHoppingSets=dot11NumberofHoppingSets, dot11QosMultipleRetryCount=dot11QosMultipleRetryCount, dot11ResourceTypeID=dot11ResourceTypeID, dot11FrameDuplicateCount=dot11FrameDuplicateCount, dot11DesiredBSSType=dot11DesiredBSSType, dot11SupportedDataRatesRxTable=dot11SupportedDataRatesRxTable, dot11AMSDUAckFailureCount=dot11AMSDUAckFailureCount, dot11WEPICVErrorCount=dot11WEPICVErrorCount, dot11TxUnequalModulationSupported=dot11TxUnequalModulationSupported, dot11STBCControlFrameOptionImplemented=dot11STBCControlFrameOptionImplemented, dot11PhyDSSSTable=dot11PhyDSSSTable, dot11EDCATableTXOPLimit=dot11EDCATableTXOPLimit, dot11RTSLSIGFailureCount=dot11RTSLSIGFailureCount, dot11SupportedDataRatesRxIndex=dot11SupportedDataRatesRxIndex, dot11RSNAConfigAuthenticationSuitesTable=dot11RSNAConfigAuthenticationSuitesTable, dot11FortyMHzOperationImplemented=dot11FortyMHzOperationImplemented, dot11AntennasListEntry=dot11AntennasListEntry, dot11manufacturerProductVersion=dot11manufacturerProductVersion, dot11BeaconPeriod=dot11BeaconPeriod, dot11PhyIRTable=dot11PhyIRTable, dot11RSNAStatsSTAAddress=dot11RSNAStatsSTAAddress, dot11TransmittedMPDUsInAMPDUCount=dot11TransmittedMPDUsInAMPDUCount, dot11PhyFHSSComplianceGroup2=dot11PhyFHSSComplianceGroup2, dot11DualCTSFailureCount=dot11DualCTSFailureCount, dot11TxBFGroup=dot11TxBFGroup, dot11FailedCount=dot11FailedCount, us=us, dot11TransmittedAMSDUCount=dot11TransmittedAMSDUCount, dot11DisassociateStation=dot11DisassociateStation, dot11TxMaximumNumberSpatialStreamsSupported=dot11TxMaximumNumberSpatialStreamsSupported, dot11ResourceInfoTable=dot11ResourceInfoTable, dot11TransmitNDPOptionImplemented=dot11TransmitNDPOptionImplemented, dot11EDCATableIndex=dot11EDCATableIndex, dot11PhyFHSSComplianceGroup=dot11PhyFHSSComplianceGroup, dot11MoreDataAckOptionImplemented=dot11MoreDataAckOptionImplemented, dot11MultiDomainCapabilityGroup=dot11MultiDomainCapabilityGroup, dot11CurrentPattern=dot11CurrentPattern, dot11QAPEDCATableCWmax=dot11QAPEDCATableCWmax, dot11RSNAGroupCipherRequested=dot11RSNAGroupCipherRequested, dot11Compliances=dot11Compliances, dot11QBSSLoadOptionImplemented=dot11QBSSLoadOptionImplemented, dot11TXOPRequestOptionImplemented=dot11TXOPRequestOptionImplemented, dot11RSNAConfigAuthenticationSuitesEntry=dot11RSNAConfigAuthenticationSuitesEntry, dot11TransmittedOctetsInAMSDUCount=dot11TransmittedOctetsInAMSDUCount, dot11RSNAStatsEntry=dot11RSNAStatsEntry, dot11RSNAConfigEntry=dot11RSNAConfigEntry, dot11NumberNonCompressedbeamformingMatrixSupportAntenna=dot11NumberNonCompressedbeamformingMatrixSupportAntenna, dot11RSNAEnabled=dot11RSNAEnabled, dot11CalibrationOptionImplemented=dot11CalibrationOptionImplemented, dot11RIFSMode=dot11RIFSMode, dot11BeamformingFrameCount=dot11BeamformingFrameCount, dot11WEPKeyMappingAddress=dot11WEPKeyMappingAddress, dot11NumberofChannels=dot11NumberofChannels, dot11ADDTSResponseTimeout=dot11ADDTSResponseTimeout, dot11manufacturerName=dot11manufacturerName, dot11PrivacyInvoked=dot11PrivacyInvoked, dot11DeauthenticateStation=dot11DeauthenticateStation, dot11WEPDefaultKeysEntry=dot11WEPDefaultKeysEntry, dot11AntennasListTable=dot11AntennasListTable, dot11TransmitStaggerSoundingOptionImplemented=dot11TransmitStaggerSoundingOptionImplemented, dot11RSNAPMKIDUsed=dot11RSNAPMKIDUsed, dot11MIMOPowerSave=dot11MIMOPowerSave, dot11ShortSlotTimeOptionEnabled=dot11ShortSlotTimeOptionEnabled, dot11SupportedDataRatesTxIndex=dot11SupportedDataRatesTxIndex, dot11ExplicitBARFailureCount=dot11ExplicitBARFailureCount, dot11SMTbase2=dot11SMTbase2, dot11SupportedDataRatesTxValue=dot11SupportedDataRatesTxValue, dot11TransmitExplicitCSIFeedbackASOptionImplemented=dot11TransmitExplicitCSIFeedbackASOptionImplemented, dot11CurrentFrequency=dot11CurrentFrequency, dot11CurrentTxPowerLevel=dot11CurrentTxPowerLevel, dot11SmtAuthenticationAlgorithms=dot11SmtAuthenticationAlgorithms, dot11RandomTableFieldNumber=dot11RandomTableFieldNumber, dot11EHCCPrimeRadix=dot11EHCCPrimeRadix, dot11EDCATableMSDULifetime=dot11EDCATableMSDULifetime, dot11LongRetryLimit=dot11LongRetryLimit, dot11PSMPOptionImplemented=dot11PSMPOptionImplemented, dot11RSNAConfigVersion=dot11RSNAConfigVersion, dot11CurrentSecondaryChannel=dot11CurrentSecondaryChannel, dot11ChannelWidthSwitchCount=dot11ChannelWidthSwitchCount, dot11PCOOptionImplemented=dot11PCOOptionImplemented, dot11HTControlFieldSupported=dot11HTControlFieldSupported, dot11QosTransmittedFragmentCount=dot11QosTransmittedFragmentCount, dot11NumberBeamFormingCSISupportAntenna=dot11NumberBeamFormingCSISupportAntenna, dot11GroupAddressesTable=dot11GroupAddressesTable, dot11PCO40MinDuration=dot11PCO40MinDuration, dot11FortyMHzFrameTransmittedCount=dot11FortyMHzFrameTransmittedCount, dot11CountersTable=dot11CountersTable, dot11HopOffset=dot11HopOffset, dot11EDThreshold=dot11EDThreshold, dot11TxPowerLevel5=dot11TxPowerLevel5, dot11FragmentationThreshold=dot11FragmentationThreshold, dot11MACStatistics=dot11MACStatistics, dot11FirstChannelNumber=dot11FirstChannelNumber, dot11SpectrumManagementIndex=dot11SpectrumManagementIndex, dot11QAPEDCATableMSDULifetime=dot11QAPEDCATableMSDULifetime, dot11PhyFHSSTable=dot11PhyFHSSTable, dot11OperationTable=dot11OperationTable, dot11ImmediateBlockAckOptionImplemented=dot11ImmediateBlockAckOptionImplemented, dot11RegDomainsSupportValue=dot11RegDomainsSupportValue, dot11PhyOperationEntry=dot11PhyOperationEntry, dot11WEPDefaultKeysTable=dot11WEPDefaultKeysTable, dot11AuthenticationResponseTimeOut=dot11AuthenticationResponseTimeOut, dot11NumberOfSpatialStreamsEnabled=dot11NumberOfSpatialStreamsEnabled, dot11AuthenticationAlgorithmsTable=dot11AuthenticationAlgorithmsTable, dot11EDCATableMandatory=dot11EDCATableMandatory, dot11PhyOperationTable=dot11PhyOperationTable, dot11MaxTransmitMSDULifetime=dot11MaxTransmitMSDULifetime, dot11GroupAddressesStatus=dot11GroupAddressesStatus, dot11ReceiveAntennaSelectionOptionImplemented=dot11ReceiveAntennaSelectionOptionImplemented, dot11WEPDefaultKeyID=dot11WEPDefaultKeyID, dot11PhyDSSSComplianceGroup=dot11PhyDSSSComplianceGroup, dot11Disassociate=dot11Disassociate, dot11QosCFPollsReceivedCount=dot11QosCFPollsReceivedCount, dot11PHYType=dot11PHYType, dot11RSNAOptionImplemented=dot11RSNAOptionImplemented, dot11STBCCTSFailureCount=dot11STBCCTSFailureCount, dot11AssociateinNQBSS=dot11AssociateinNQBSS, dot11QAPEDCATableIndex=dot11QAPEDCATableIndex, dot11SupportedDataRatesRxValue=dot11SupportedDataRatesRxValue, dot11PrivacyEntry=dot11PrivacyEntry, dot11HCCAIFSN=dot11HCCAIFSN, dot11QAPEDCATableCWmin=dot11QAPEDCATableCWmin, dot11HTMACAdditions=dot11HTMACAdditions, dot11RSNAConfigPairwiseCipherEnabled=dot11RSNAConfigPairwiseCipherEnabled, dot11PhyHTEntry=dot11PhyHTEntry, dot11MultiDomainCapabilityImplemented=dot11MultiDomainCapabilityImplemented, dot11SpectrumManagementTable=dot11SpectrumManagementTable, dot11AuthenticateFail=dot11AuthenticateFail, dot11CurrentChannelNumber=dot11CurrentChannelNumber, dot11ShortSlotTimeOptionImplemented=dot11ShortSlotTimeOptionImplemented, dot11PSMPSuccessCount=dot11PSMPSuccessCount, dot11SupportedMCSTxValue=dot11SupportedMCSTxValue, dot11PhyOperationComplianceGroup=dot11PhyOperationComplianceGroup, dot11RSNAStatsVersion=dot11RSNAStatsVersion, dot11TxRxMCSSetNotEqual=dot11TxRxMCSSetNotEqual, dot11HopTime=dot11HopTime, dot11HTOperationalMCSSet=dot11HTOperationalMCSSet, dot11SupportedRxAntenna=dot11SupportedRxAntenna, dot11PrivacyTable=dot11PrivacyTable, dot11MPDUInReceivedAMPDUCount=dot11MPDUInReceivedAMPDUCount, dot11EDCATable=dot11EDCATable, dot11APSDOptionImplemented=dot11APSDOptionImplemented, dot11ShortRetryLimit=dot11ShortRetryLimit, dot11DeauthenticateReason=dot11DeauthenticateReason, dot11MultipleRetryAMSDUCount=dot11MultipleRetryAMSDUCount, dot11RegDomainsSupportedTable=dot11RegDomainsSupportedTable, dot11ERPPBCCOptionImplemented=dot11ERPPBCCOptionImplemented, dot11RSNAStatsTKIPLocalMICFailures=dot11RSNAStatsTKIPLocalMICFailures, dot11HoppingPatternEntry=dot11HoppingPatternEntry, dot11FrequencyBandsSupported=dot11FrequencyBandsSupported, dot11TransmitIndicesFeedbackASOptionImplemented=dot11TransmitIndicesFeedbackASOptionImplemented, dot11TransmittedOctetsInGrantedRDGCount=dot11TransmittedOctetsInGrantedRDGCount, dot11GroupAddressesIndex=dot11GroupAddressesIndex, dot11CountersEntry=dot11CountersEntry, dot11CCAModeSupported=dot11CCAModeSupported, dot11DirectOptionImplemented=dot11DirectOptionImplemented, dot11PhyIRComplianceGroup=dot11PhyIRComplianceGroup, dot11TransmittedAMPDUCount=dot11TransmittedAMPDUCount, dot11CurrentSet=dot11CurrentSet, dot11GreenfieldOptionImplemented=dot11GreenfieldOptionImplemented, dot11TwentyMHzFrameTransmittedCount=dot11TwentyMHzFrameTransmittedCount, dot11DSSSOFDMOptionEnabled=dot11DSSSOFDMOptionEnabled, dot11TransitionTime=dot11TransitionTime, dot11AuthenticationAlgorithmsEnable=dot11AuthenticationAlgorithmsEnable, dot11PhyIREntry=dot11PhyIREntry, dot11PhyAntennaComplianceGroup=dot11PhyAntennaComplianceGroup, dot11PhyOFDMTable=dot11PhyOFDMTable, dot11CurrentTxAntenna=dot11CurrentTxAntenna, dot11TxPowerLevel4=dot11TxPowerLevel4, dot11PhyAntennaTable=dot11PhyAntennaTable, dot11DTIMPeriod=dot11DTIMPeriod, dot11PhyHRDSSSTable=dot11PhyHRDSSSTable, dot11PhyDSSSEntry=dot11PhyDSSSEntry, dot11HTOperatingMode=dot11HTOperatingMode, dot11HCCWmin=dot11HCCWmin, dot11PowerManagementMode=dot11PowerManagementMode, dot11CurrentPrimaryChannel=dot11CurrentPrimaryChannel, dot11RSNAConfigAuthenticationSuiteIndex=dot11RSNAConfigAuthenticationSuiteIndex, dot11RegDomainsSupportEntry=dot11RegDomainsSupportEntry, dot11StationConfigTable=dot11StationConfigTable, dot11HTStationConfigEntry=dot11HTStationConfigEntry, dot11MaxReceiveLifetime=dot11MaxReceiveLifetime)
mibBuilder.exportSymbols("IEEE802dot11-MIB", dot11QAPMissingAckRetryLimit=dot11QAPMissingAckRetryLimit, dot11SMT_unknown=dot11SMT_unknown, dot11RTSThreshold=dot11RTSThreshold, dot11DualCTSSuccessCount=dot11DualCTSSuccessCount, dot11MulticastReceivedFrameCount=dot11MulticastReceivedFrameCount, dot11PhyAntennaEntry=dot11PhyAntennaEntry, dot11QueueRequestOptionImplemented=dot11QueueRequestOptionImplemented, dot11MultiDomainCapabilityTable=dot11MultiDomainCapabilityTable, dot11EDCATableCWmin=dot11EDCATableCWmin, dot11EDCAAveragingPeriod=dot11EDCAAveragingPeriod, dot11PhyERPTable=dot11PhyERPTable, dot11TxSTBCOptionImplemented=dot11TxSTBCOptionImplemented, dot11nonSTBCCTSFailureCount=dot11nonSTBCCTSFailureCount, dot11SMTbase=dot11SMTbase, dot11TransmitIndicesComputationFeedbackASOptionImplemented=dot11TransmitIndicesComputationFeedbackASOptionImplemented, dot11Deauthenticate=dot11Deauthenticate, dot11TxPowerLevel6=dot11TxPowerLevel6, dot11ReceiveStaggerSoundingOptionImplemented=dot11ReceiveStaggerSoundingOptionImplemented, dot11ProductID=dot11ProductID, dot11ERPBCCOptionEnabled=dot11ERPBCCOptionEnabled, dot11HoppingPatternIndex=dot11HoppingPatternIndex, dot11SupportedTxAntenna=dot11SupportedTxAntenna, dot11RDResponderOptionImplemented=dot11RDResponderOptionImplemented, dot11EDCATableAIFSN=dot11EDCATableAIFSN, dot11RSNAAuthenticationSuiteSelected=dot11RSNAAuthenticationSuiteSelected, dot11CurrentChannel=dot11CurrentChannel, PYSNMP_MODULE_ID=ieee802dot11, dot11PhyHTTable=dot11PhyHTTable, dot11ReceivedOctetsInAMPDUCount=dot11ReceivedOctetsInAMPDUCount, dot11QosCountersIndex=dot11QosCountersIndex, dot11HopModulus=dot11HopModulus, dot11RSNAConfigGroupCipherSize=dot11RSNAConfigGroupCipherSize, dot11TxPowerLevel1=dot11TxPowerLevel1, dot11SupportedMCSRxTable=dot11SupportedMCSRxTable, dot11TempType=dot11TempType, dot11RSNAConfigPairwiseKeysSupported=dot11RSNAConfigPairwiseKeysSupported, dot11FortyMHzFrameReceivedCount=dot11FortyMHzFrameReceivedCount, dot11TIThreshold=dot11TIThreshold, dot11QosDiscardedFrameCount=dot11QosDiscardedFrameCount, dot11Address=dot11Address, dot11RSNAPairwiseCipherRequested=dot11RSNAPairwiseCipherRequested, dot11ExplicitBFCSIFeedbackOptionImplemented=dot11ExplicitBFCSIFeedbackOptionImplemented, dot11CCAWatchdogCountMax=dot11CCAWatchdogCountMax, dot11CFPPeriod=dot11CFPPeriod, dot11DiversitySupport=dot11DiversitySupport, dot11SupportedMCSTxEntry=dot11SupportedMCSTxEntry, dot11BeamFormingOptionEnabled=dot11BeamFormingOptionEnabled, dot11RSNAPreAuthenticationEnabled=dot11RSNAPreAuthenticationEnabled, dot11PhyAntennasListGroup=dot11PhyAntennasListGroup, dot11GroupAddressesEntry=dot11GroupAddressesEntry, dot11RSNAConfigPairwiseCiphersTable=dot11RSNAConfigPairwiseCiphersTable, dot11CFPMaxDuration=dot11CFPMaxDuration, dot11manufacturerOUI=dot11manufacturerOUI, dot11PhyHRDSSSComplianceGroup=dot11PhyHRDSSSComplianceGroup, dot11PSMPFailureCount=dot11PSMPFailureCount, dot11RSNAStatsTKIPReplays=dot11RSNAStatsTKIPReplays, dot11AuthenticateFailStation=dot11AuthenticateFailStation, dot11ReceivedOctetsInAMSDUCount=dot11ReceivedOctetsInAMSDUCount, dot11TwentyMHzFrameReceivedCount=dot11TwentyMHzFrameReceivedCount, dot11TxPowerLevel2=dot11TxPowerLevel2, dot1PhyHTComplianceGroup=dot1PhyHTComplianceGroup, dot11SMTprivacy=dot11SMTprivacy, dot11RSNAConfigGroupUpdateCount=dot11RSNAConfigGroupUpdateCount, dot11WEPKeyMappingStatus=dot11WEPKeyMappingStatus, dot11ExcludeUnencrypted=dot11ExcludeUnencrypted, dot11CurrentRxAntenna=dot11CurrentRxAntenna, dot11PhyHRDSSSEntry=dot11PhyHRDSSSEntry, dot11MACbase3=dot11MACbase3, dot11RSNPMKcachingGroup=dot11RSNPMKcachingGroup, dot11RSNAConfigTable=dot11RSNAConfigTable, dot11QAPEDCATableMandatory=dot11QAPEDCATableMandatory, dot11PCOActivated=dot11PCOActivated, dot11RSNAConfigGroupCipher=dot11RSNAConfigGroupCipher, dot11RetryCount=dot11RetryCount, dot11MCSFeedbackOptionImplemented=dot11MCSFeedbackOptionImplemented, dot11TransmitSoundingPPDUOptionImplemented=dot11TransmitSoundingPPDUOptionImplemented, dot11PhyRegDomainsSupportGroup=dot11PhyRegDomainsSupportGroup, dot11RSNAConfigNumberOfPTKSAReplayCounters=dot11RSNAConfigNumberOfPTKSAReplayCounters, dot11SupportedDataRatesTxEntry=dot11SupportedDataRatesTxEntry, dot11QosRetryCount=dot11QosRetryCount, dot11AMPDUReceivedCount=dot11AMPDUReceivedCount, dot11CCAWatchdogCountMin=dot11CCAWatchdogCountMin, dot11EHCCCapabilityImplemented=dot11EHCCCapabilityImplemented, member_body=member_body, dot11TransmittedFramesInGrantedRDGCount=dot11TransmittedFramesInGrantedRDGCount, dot11MulticastTransmittedFrameCount=dot11MulticastTransmittedFrameCount, dot11ChannelSwitchTime=dot11ChannelSwitchTime, dot11ResourceInfoEntry=dot11ResourceInfoEntry, dot11CountersGroup3=dot11CountersGroup3, dot11SupportedDataRatesTxTable=dot11SupportedDataRatesTxTable, dot11DLSAllowedInQBSS=dot11DLSAllowedInQBSS, dot11CFPollable=dot11CFPollable, dot11LDPCCodingOptionImplemented=dot11LDPCCodingOptionImplemented, dot11QosDiscardedFragmentCount=dot11QosDiscardedFragmentCount, dot11QosFailedCount=dot11QosFailedCount, ieee802dot11=ieee802dot11, dot11StationID=dot11StationID, dot11ExplicitNonCompressedbeamformingMatrixFeedbackOptionImplemented=dot11ExplicitNonCompressedbeamformingMatrixFeedbackOptionImplemented, dot11RSNAConfigPSKPassPhrase=dot11RSNAConfigPSKPassPhrase, dot11TransmittedFrameCount=dot11TransmittedFrameCount, dot11ExplicitCompressedbeamformingMatrixFeedbackOptionImplemented=dot11ExplicitCompressedbeamformingMatrixFeedbackOptionImplemented, dot11PowerCapabilityMax=dot11PowerCapabilityMax, dot11RSNAStatsTKIPRemoteMICFailures=dot11RSNAStatsTKIPRemoteMICFailures, dot11RSNAStatsTable=dot11RSNAStatsTable, dot11WEPKeyMappingValue=dot11WEPKeyMappingValue, dot11HRCCAModeSupported=dot11HRCCAModeSupported, dot11SMTnotification=dot11SMTnotification, dot11HopAlgorithmAdopted=dot11HopAlgorithmAdopted, dot11RSNAStatsSelectedPairwiseCipher=dot11RSNAStatsSelectedPairwiseCipher, dot11AuthenticateFailStatus=dot11AuthenticateFailStatus, dot11PowerCapabilityMin=dot11PowerCapabilityMin, dot11EDCATableCWmax=dot11EDCATableCWmax, dot11LDPCCodingOptionEnabled=dot11LDPCCodingOptionEnabled, dot11resAttribute=dot11resAttribute, dot11DLSResponseTimeout=dot11DLSResponseTimeout, dot11RTSLSIGSuccessCount=dot11RTSLSIGSuccessCount, dot11TransmittedOctetsInAMPDUCount=dot11TransmittedOctetsInAMPDUCount, dot11MaxCSIFeedbackDelay=dot11MaxCSIFeedbackDelay, dot11STBCCTSSuccessCount=dot11STBCCTSSuccessCount, dot11Qosadditions=dot11Qosadditions, dot11MACbase=dot11MACbase, dot11WEPDefaultKeyValue=dot11WEPDefaultKeyValue, dot11QosCountersEntry=dot11QosCountersEntry, dot11PhyFHSSEntry=dot11PhyFHSSEntry, dot11TxPowerLevel3=dot11TxPowerLevel3, dot11DesiredSSID=dot11DesiredSSID, dot11MACbase2=dot11MACbase2, dot11phy=dot11phy, dot11WEPDefaultKeyIndex=dot11WEPDefaultKeyIndex, dot11PhyERPComplianceGroup=dot11PhyERPComplianceGroup, dot11MaxRxAMPDUFactor=dot11MaxRxAMPDUFactor, dot11AuthenticationAlgorithmsEntry=dot11AuthenticationAlgorithmsEntry, dot11HCCWmax=dot11HCCWmax, dot11CurrentCCAMode=dot11CurrentCCAMode, dot11QosReceivedFragmentCount=dot11QosReceivedFragmentCount, dot11NumberCompressedbeamformingMatrixSupportAntenna=dot11NumberCompressedbeamformingMatrixSupportAntenna, dot11PBCCOptionImplemented=dot11PBCCOptionImplemented, dot11HTStationConfigTable=dot11HTStationConfigTable, dot11CountersGroup2=dot11CountersGroup2, dot11EHCCNumberofChannelsFamilyIndex=dot11EHCCNumberofChannelsFamilyIndex, dot11LsigTxopProtectionOptionImplemented=dot11LsigTxopProtectionOptionImplemented, dot11GrantedRDGUnusedCount=dot11GrantedRDGUnusedCount, dot11HoppingPatternTable=dot11HoppingPatternTable, dot11MaxAMSDULength=dot11MaxAMSDULength, dot11DelayedBlockAckOptionImplemented=dot11DelayedBlockAckOptionImplemented, dot11RSNAConfigPMKReauthThreshold=dot11RSNAConfigPMKReauthThreshold, dot11WEPKeyMappingLength=dot11WEPKeyMappingLength, dot11RSNAConfigGroupRekeyTime=dot11RSNAConfigGroupRekeyTime, dot11ChannelAgilityPresent=dot11ChannelAgilityPresent, dot11DSSSOFDMOptionImplemented=dot11DSSSOFDMOptionImplemented, dot11MultipleRetryCount=dot11MultipleRetryCount, dot11FortyMHzOperationEnabled=dot11FortyMHzOperationEnabled, dot11WEPKeyMappingsEntry=dot11WEPKeyMappingsEntry, dot11CCAWatchdogTimerMin=dot11CCAWatchdogTimerMin, dot11ImplicitTxBFOptionImplemented=dot11ImplicitTxBFOptionImplemented, dot11QosRTSFailureCount=dot11QosRTSFailureCount, dot11QosFrameDuplicateCount=dot11QosFrameDuplicateCount, dot11ExplicitCSITxBFOptionImplemented=dot11ExplicitCSITxBFOptionImplemented, dot11OperationalRateSet=dot11OperationalRateSet, dot11WEPKeyMappingsTable=dot11WEPKeyMappingsTable, dot11RxSTBCOptionImplemented=dot11RxSTBCOptionImplemented, dot11PhyOFDMComplianceGroup=dot11PhyOFDMComplianceGroup, dot11RSNCompliance=dot11RSNCompliance, dot11SupportedMCSTxIndex=dot11SupportedMCSTxIndex, dot11ScheduleTimeout=dot11ScheduleTimeout, dot11PCO20MinDuration=dot11PCO20MinDuration, dot11MaximumTransmitPowerLevel=dot11MaximumTransmitPowerLevel, dot11QosRetriesReceivedCount=dot11QosRetriesReceivedCount, dot11RSNAStatsCCMPDecryptErrors=dot11RSNAStatsCCMPDecryptErrors, dot11ChannelUtilizationBeaconInterval=dot11ChannelUtilizationBeaconInterval, dot11RSNAStatsTKIPICVErrors=dot11RSNAStatsTKIPICVErrors, dot11RSNAConfigGroupRekeyMethod=dot11RSNAConfigGroupRekeyMethod, dot11HighestSupportedDataRate=dot11HighestSupportedDataRate, dot11Compliance=dot11Compliance, dot11SMTbase6=dot11SMTbase6, dot11ChannelAgilityEnabled=dot11ChannelAgilityEnabled, dot11RandomTableFlag=dot11RandomTableFlag, dot11CurrentIndex=dot11CurrentIndex, dot11AMPDUDelimiterCRCErrorCount=dot11AMPDUDelimiterCRCErrorCount, dot11RTSFailureCount=dot11RTSFailureCount, dot11SupportedMCSRxIndex=dot11SupportedMCSRxIndex, dot11NDelayedBlockAckOptionImplemented=dot11NDelayedBlockAckOptionImplemented, dot11RSNAConfigAuthenticationSuiteEnabled=dot11RSNAConfigAuthenticationSuiteEnabled, dot11SupportedMCSRxEntry=dot11SupportedMCSRxEntry, dot11MultiDomainCapabilityIndex=dot11MultiDomainCapabilityIndex, dot11DLSAllowed=dot11DLSAllowed, dot11GreenfieldOptionEnabled=dot11GreenfieldOptionEnabled, dot11GrantedRDGUsedCount=dot11GrantedRDGUsedCount, dot11ShortGIOptionInFortyEnabled=dot11ShortGIOptionInFortyEnabled, dot11AntennaListIndex=dot11AntennaListIndex, dot11EHCCCapabilityEnabled=dot11EHCCCapabilityEnabled, dot11NumberSupportedPowerLevels=dot11NumberSupportedPowerLevels, dot11ShortGIOptionInTwentyEnabled=dot11ShortGIOptionInTwentyEnabled, dot11QosOptionImplemented=dot11QosOptionImplemented, dot11PhyAntennaComplianceGroup2=dot11PhyAntennaComplianceGroup2, dot11DiversitySelectionRx=dot11DiversitySelectionRx, dot11QosCFPollsUnusedCount=dot11QosCFPollsUnusedCount, dot11TxMCSSetDefined=dot11TxMCSSetDefined, dot11TxPowerLevel7=dot11TxPowerLevel7, dot11CCAWatchdogTimerMax=dot11CCAWatchdogTimerMax, dot11QosRTSSuccessCount=dot11QosRTSSuccessCount, dot11RSNAAuthenticationSuiteRequested=dot11RSNAAuthenticationSuiteRequested, dot11ACKFailureCount=dot11ACKFailureCount, dot11ServiceIntervalGranularity=dot11ServiceIntervalGranularity, dot11QosCountersTable=dot11QosCountersTable, dot11CAPLimit=dot11CAPLimit, dot11RSNAConfigPairwiseCipher=dot11RSNAConfigPairwiseCipher, dot11smt=dot11smt, dot11RSNAConfigGroupRekeyPackets=dot11RSNAConfigGroupRekeyPackets, dot11RSNBase=dot11RSNBase, dot11PhyMCSGroup=dot11PhyMCSGroup, dot11PhyTxPowerComplianceGroup=dot11PhyTxPowerComplianceGroup, dot11RSNAPairwiseCipherSelected=dot11RSNAPairwiseCipherSelected, dot11ShortGIOptionInFortyImplemented=dot11ShortGIOptionInFortyImplemented, dot11QAPEDCATableAIFSN=dot11QAPEDCATableAIFSN, dot11NumberOfSpatialStreamsImplemented=dot11NumberOfSpatialStreamsImplemented, dot11TransmittedFragmentCount=dot11TransmittedFragmentCount, dot11WEPKeyMappingIndex=dot11WEPKeyMappingIndex, dot11PhyOFDMEntry=dot11PhyOFDMEntry, dot11DualCTSProtection=dot11DualCTSProtection, dot11RSNA4WayHandshakeFailures=dot11RSNA4WayHandshakeFailures, dot11PSMPControlledAccess=dot11PSMPControlledAccess, dot11ManufacturerID=dot11ManufacturerID, dot11EDCATableEntry=dot11EDCATableEntry, dot11nonSTBCCTSSuccessCount=dot11nonSTBCCTSSuccessCount, dot11ExplicitCSIFeedbackASOptionImplemented=dot11ExplicitCSIFeedbackASOptionImplemented, dot11FCSErrorCount=dot11FCSErrorCount, dot11PhyRateGroup=dot11PhyRateGroup, dot11AuthenticationAlgorithmsIndex=dot11AuthenticationAlgorithmsIndex, dot11NonGFEntitiesPresent=dot11NonGFEntitiesPresent, dot11MACAddress=dot11MACAddress, dot11RetryAMSDUCount=dot11RetryAMSDUCount, dot11DisassociateReason=dot11DisassociateReason, dot11OperationEntry=dot11OperationEntry, dot11QAPEDCATable=dot11QAPEDCATable, dot11CountersGroup=dot11CountersGroup, dot11ExplicitNonCompressedbeamformingMatrixOptionImplemented=dot11ExplicitNonCompressedbeamformingMatrixOptionImplemented, dot11MinimumMPDUStartSpacing=dot11MinimumMPDUStartSpacing, dot11PhyTxPowerTable=dot11PhyTxPowerTable, dot11MediumOccupancyLimit=dot11MediumOccupancyLimit, dot11RSNAConfigPMKLifetime=dot11RSNAConfigPMKLifetime, dot11SpectrumManagementEntry=dot11SpectrumManagementEntry, dot11QAckOptionImplemented=dot11QAckOptionImplemented, dot11BeamFormingOptionImplemented=dot11BeamFormingOptionImplemented, dot11RSNAConfigNumberOfGTKSAReplayCounters=dot11RSNAConfigNumberOfGTKSAReplayCounters, dot11RSNAStatsIndex=dot11RSNAStatsIndex)
