#
# PySNMP MIB module HPN-ICF-ATM-DXI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-ATM-DXI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:25:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, iso, TimeTicks, Counter32, Gauge32, ModuleIdentity, MibIdentifier, Bits, Integer32, Unsigned32, ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "TimeTicks", "Counter32", "Gauge32", "ModuleIdentity", "MibIdentifier", "Bits", "Integer32", "Unsigned32", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
hpnicfAtmDxi = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49))
hpnicfAtmDxi.setRevisions(('2005-04-14 15:18',))
if mibBuilder.loadTexts: hpnicfAtmDxi.setLastUpdated('200504141518Z')
if mibBuilder.loadTexts: hpnicfAtmDxi.setOrganization('')
hpnicfAtmDxiScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 1))
hpnicfAtmDxiConfMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode1a", 1), ("mode1b", 2), ("mode2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAtmDxiConfMode.setStatus('current')
hpnicfAtmDxiIfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2))
hpnicfAtmDxiPvcTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 1), )
if mibBuilder.loadTexts: hpnicfAtmDxiPvcTable.setStatus('current')
hpnicfAtmDxiPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiPvcVpi"), (0, "HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiPvcVci"))
if mibBuilder.loadTexts: hpnicfAtmDxiPvcEntry.setStatus('current')
hpnicfAtmDxiPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: hpnicfAtmDxiPvcVpi.setStatus('current')
hpnicfAtmDxiPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hpnicfAtmDxiPvcVci.setStatus('current')
hpnicfAtmDxiPvcDFA = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAtmDxiPvcDFA.setStatus('current')
hpnicfAtmDxiPvcEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snap", 1), ("nlpid", 2), ("mux", 3))).clone('snap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAtmDxiPvcEncType.setStatus('current')
hpnicfAtmDxiPvcMapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAtmDxiPvcMapCount.setStatus('current')
hpnicfAtmDxiPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAtmDxiPvcRowStatus.setStatus('current')
hpnicfAtmDxiMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2), )
if mibBuilder.loadTexts: hpnicfAtmDxiMapTable.setStatus('current')
hpnicfAtmDxiMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiMapPeerIpType"), (0, "HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiMapPeerIp"), (0, "HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiMapPvcVpi"), (0, "HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiMapPvcVci"), (0, "HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiMapType"))
if mibBuilder.loadTexts: hpnicfAtmDxiMapEntry.setStatus('current')
hpnicfAtmDxiMapPeerIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpnicfAtmDxiMapPeerIpType.setStatus('current')
hpnicfAtmDxiMapPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: hpnicfAtmDxiMapPeerIp.setStatus('current')
hpnicfAtmDxiMapPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: hpnicfAtmDxiMapPvcVpi.setStatus('current')
hpnicfAtmDxiMapPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hpnicfAtmDxiMapPvcVci.setStatus('current')
hpnicfAtmDxiMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("address", 1), ("inarp", 2), ("default", 3))))
if mibBuilder.loadTexts: hpnicfAtmDxiMapType.setStatus('current')
hpnicfAtmDxiMapInarpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 10), )).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAtmDxiMapInarpTime.setStatus('current')
hpnicfAtmDxiMapBroEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAtmDxiMapBroEnable.setStatus('current')
hpnicfAtmDxiMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAtmDxiMapRowStatus.setStatus('current')
hpnicfAtmDxiConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 3))
hpnicfAtmDxiCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 3, 1))
hpnicfAtmDxiCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 3, 1, 1)).setObjects(("HPN-ICF-ATM-DXI-MIB", "hpnicfPVCMAPGroup"), ("HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiGeneralGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfAtmDxiCompliance = hpnicfAtmDxiCompliance.setStatus('current')
hpnicfAtmDxiGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 3, 2))
hpnicfPVCMAPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 3, 2, 1)).setObjects(("HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiPvcDFA"), ("HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiPvcEncType"), ("HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiPvcMapCount"), ("HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiPvcRowStatus"), ("HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiMapBroEnable"), ("HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiMapInarpTime"), ("HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiMapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfPVCMAPGroup = hpnicfPVCMAPGroup.setStatus('current')
hpnicfAtmDxiGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 3, 2, 2)).setObjects(("HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiConfMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfAtmDxiGeneralGroup = hpnicfAtmDxiGeneralGroup.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-ATM-DXI-MIB", hpnicfAtmDxiMapEntry=hpnicfAtmDxiMapEntry, hpnicfAtmDxiMapBroEnable=hpnicfAtmDxiMapBroEnable, hpnicfAtmDxiMapPvcVpi=hpnicfAtmDxiMapPvcVpi, hpnicfAtmDxiConformance=hpnicfAtmDxiConformance, hpnicfAtmDxiCompliances=hpnicfAtmDxiCompliances, hpnicfAtmDxiMapInarpTime=hpnicfAtmDxiMapInarpTime, hpnicfAtmDxiPvcTable=hpnicfAtmDxiPvcTable, hpnicfAtmDxiCompliance=hpnicfAtmDxiCompliance, hpnicfAtmDxiMapPvcVci=hpnicfAtmDxiMapPvcVci, hpnicfAtmDxiIfObjects=hpnicfAtmDxiIfObjects, hpnicfAtmDxiConfMode=hpnicfAtmDxiConfMode, hpnicfAtmDxiMapRowStatus=hpnicfAtmDxiMapRowStatus, hpnicfAtmDxiScalarGroup=hpnicfAtmDxiScalarGroup, hpnicfAtmDxiMapPeerIpType=hpnicfAtmDxiMapPeerIpType, hpnicfAtmDxiPvcVpi=hpnicfAtmDxiPvcVpi, hpnicfAtmDxiPvcRowStatus=hpnicfAtmDxiPvcRowStatus, PYSNMP_MODULE_ID=hpnicfAtmDxi, hpnicfAtmDxiMapTable=hpnicfAtmDxiMapTable, hpnicfAtmDxiPvcEntry=hpnicfAtmDxiPvcEntry, hpnicfPVCMAPGroup=hpnicfPVCMAPGroup, hpnicfAtmDxiPvcVci=hpnicfAtmDxiPvcVci, hpnicfAtmDxiPvcMapCount=hpnicfAtmDxiPvcMapCount, hpnicfAtmDxiGeneralGroup=hpnicfAtmDxiGeneralGroup, hpnicfAtmDxiMapPeerIp=hpnicfAtmDxiMapPeerIp, hpnicfAtmDxiPvcEncType=hpnicfAtmDxiPvcEncType, hpnicfAtmDxiGroup=hpnicfAtmDxiGroup, hpnicfAtmDxiMapType=hpnicfAtmDxiMapType, hpnicfAtmDxiPvcDFA=hpnicfAtmDxiPvcDFA, hpnicfAtmDxi=hpnicfAtmDxi)
