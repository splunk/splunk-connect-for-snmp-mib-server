#
# PySNMP MIB module CISCO-OTN-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-OTN-IF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:52:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, ifName = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifName")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, Counter64, ModuleIdentity, iso, MibIdentifier, ObjectIdentity, Gauge32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32, NotificationType, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "ModuleIdentity", "iso", "MibIdentifier", "ObjectIdentity", "Gauge32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32", "NotificationType", "Unsigned32", "Integer32")
TextualConvention, StorageType, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "StorageType", "RowStatus", "DisplayString", "TruthValue")
ciscoOtnIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 639))
ciscoOtnIfMIB.setRevisions(('2016-05-25 00:00', '2011-01-24 00:00', '2008-09-11 00:00', '2007-10-10 00:00',))
if mibBuilder.loadTexts: ciscoOtnIfMIB.setLastUpdated('201605250000Z')
if mibBuilder.loadTexts: ciscoOtnIfMIB.setOrganization('Cisco Systems, Inc.')
class CoiIntervalType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("fifteenMin", 1), ("oneDay", 2), ("thirtySecond", 3))

class CoiMonitorType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("path", 1), ("section", 2), ("tcm1", 3), ("tcm2", 4))

class CoiOtnThresholdType(TextualConvention, Integer32):
    reference = 'ITU - T Recommendation G.8201 - Error performance parameters and objectives for multi-operator international paths within the Optical Transport Network (OTN). ITU - T Recommendation M.2140: Transport network event correlation. ITU - T Recommendation G.826 - End-to-end error performance parameters and objectives for international constant bit-rate digital paths and connections.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("fc", 1), ("es", 2), ("ses", 3), ("uas", 4), ("bbe", 5), ("esr", 6), ("sesr", 7), ("bber", 8))

class CoiOpticalWavelength(TextualConvention, Unsigned32):
    reference = 'ITU - T Recommendation G.694.1 - Spectral grids for WDM applications: DWDM frequency grid, May 2002'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1528770, 1604030), )
ciscoOtnIfMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 639, 0))
ciscoOtnIfMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 639, 1))
coiDwdmInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1))
coiDwdmIfOtn = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2))
coiDwdmIfFEC = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3))
coiIfControllerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1), )
if mibBuilder.loadTexts: coiIfControllerTable.setStatus('current')
coiIfControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: coiIfControllerEntry.setStatus('current')
coiIfControllerLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoop", 1), ("otherLoop", 2), ("diagnosticLoop", 3), ("lineLoop", 4))).clone('noLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiIfControllerLoopback.setStatus('current')
coiIfControllerWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 2), CoiOpticalWavelength().clone(1529553)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiIfControllerWavelength.setStatus('current')
coiIfControllerLaserAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiIfControllerLaserAdminStatus.setStatus('current')
coiIfControllerLaserOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerLaserOperStatus.setStatus('current')
coiIfControllerOtnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiIfControllerOtnStatus.setStatus('current')
coiIfControllerFECMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disable", 1), ("enableStandard", 2), ("enableEnhanced", 3), ("enableEnhancedI4", 4), ("enableEnhancedI7", 5), ("enableHighGain", 6), ("enableLongHaul", 7), ("enableEnhancedSD7", 8), ("enableEnhancedSD20", 9))).clone('enableEnhanced')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiIfControllerFECMode.setStatus('current')
coiIfControllerTDCOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerTDCOperMode.setStatus('current')
coiIfControllerTDCOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("acquiring", 2), ("locked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerTDCOperStatus.setStatus('current')
coiIfControllerTDCOperSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2000, 2000))).setUnits('ps/nm - picoseconds per nanometer').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerTDCOperSetting.setStatus('current')
coiIfControllerPreFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerPreFECBERMantissa.setStatus('current')
coiIfControllerPreFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerPreFECBERExponent.setStatus('current')
coiIfControllerQFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('one hundredths of a dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerQFactor.setStatus('current')
coiIfControllerQMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('one hundredths of a dBQ').setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerQMargin.setStatus('current')
coiIfControllerOTNValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerOTNValidIntervals.setStatus('current')
coiIfControllerFECValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiIfControllerFECValidIntervals.setStatus('current')
coiOtnIfOTUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 16), Bits().clone(namedValues=NamedValues(("noDefect", 0), ("los", 1), ("lof", 2), ("lom", 3), ("bdi", 4), ("tim", 5), ("ais", 6), ("fecMismatch", 7), ("fecUncorrectedWord", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnIfOTUStatus.setStatus('current')
coiOtnIfODUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 1, 1, 1, 17), Bits().clone(namedValues=NamedValues(("noDefect", 0), ("oci", 1), ("lck", 2), ("tim", 3), ("bdi", 4), ("ais", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnIfODUStatus.setStatus('current')
coiOtnNearEndThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 1), )
if mibBuilder.loadTexts: coiOtnNearEndThresholdsTable.setStatus('current')
coiOtnNearEndThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OTN-IF-MIB", "coiOtnNearEndThreshIntervalType"), (0, "CISCO-OTN-IF-MIB", "coiOtnNearEndThreshMonType"), (0, "CISCO-OTN-IF-MIB", "coiOtnNearEndThresholdType"))
if mibBuilder.loadTexts: coiOtnNearEndThresholdsEntry.setStatus('current')
coiOtnNearEndThreshIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 1, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiOtnNearEndThreshIntervalType.setStatus('current')
coiOtnNearEndThreshMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 1, 1, 2), CoiMonitorType())
if mibBuilder.loadTexts: coiOtnNearEndThreshMonType.setStatus('current')
coiOtnNearEndThresholdType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 1, 1, 3), CoiOtnThresholdType())
if mibBuilder.loadTexts: coiOtnNearEndThresholdType.setStatus('current')
coiOtnNearEndThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coiOtnNearEndThreshValue.setStatus('current')
coiOtnNearEndThreshStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 1, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coiOtnNearEndThreshStorageType.setStatus('current')
coiOtnNearEndThreshStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coiOtnNearEndThreshStatus.setStatus('current')
coiOtnFarEndThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 2), )
if mibBuilder.loadTexts: coiOtnFarEndThresholdsTable.setStatus('current')
coiOtnFarEndThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OTN-IF-MIB", "coiOtnFarEndThreshIntervalType"), (0, "CISCO-OTN-IF-MIB", "coiOtnFarEndThreshMonType"), (0, "CISCO-OTN-IF-MIB", "coiOtnFarEndThresholdType"))
if mibBuilder.loadTexts: coiOtnFarEndThresholdsEntry.setStatus('current')
coiOtnFarEndThreshIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 2, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiOtnFarEndThreshIntervalType.setStatus('current')
coiOtnFarEndThreshMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 2, 1, 2), CoiMonitorType())
if mibBuilder.loadTexts: coiOtnFarEndThreshMonType.setStatus('current')
coiOtnFarEndThresholdType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 2, 1, 3), CoiOtnThresholdType())
if mibBuilder.loadTexts: coiOtnFarEndThresholdType.setStatus('current')
coiOtnFarEndThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coiOtnFarEndThreshValue.setStatus('current')
coiOtnFarEndThreshStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 2, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coiOtnFarEndThreshStorageType.setStatus('current')
coiOtnFarEndThreshStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coiOtnFarEndThreshStatus.setStatus('current')
coiOtnNearEndCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3), )
if mibBuilder.loadTexts: coiOtnNearEndCurrentTable.setStatus('current')
coiOtnNearEndCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OTN-IF-MIB", "coiOtnNearEndCurIntervalType"), (0, "CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentMonType"))
if mibBuilder.loadTexts: coiOtnNearEndCurrentEntry.setStatus('current')
coiOtnNearEndCurIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiOtnNearEndCurIntervalType.setStatus('current')
coiOtnNearEndCurrentMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 2), CoiMonitorType())
if mibBuilder.loadTexts: coiOtnNearEndCurrentMonType.setStatus('current')
coiOtnNearEndCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndCurrentFCs.setStatus('current')
coiOtnNearEndCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndCurrentESs.setStatus('current')
coiOtnNearEndCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndCurrentSESs.setStatus('current')
coiOtnNearEndCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndCurrentUASs.setStatus('current')
coiOtnNearEndCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndCurrentBBEs.setStatus('current')
coiOtnNearEndCurrentESRs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndCurrentESRs.setStatus('current')
coiOtnNearEndCurrentSESRs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndCurrentSESRs.setStatus('current')
coiOtnNearEndCurrentBBERs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndCurrentBBERs.setStatus('current')
coiOtnFarEndCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4), )
if mibBuilder.loadTexts: coiOtnFarEndCurrentTable.setStatus('current')
coiOtnFarEndCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OTN-IF-MIB", "coiOtnFarEndCurIntervalType"), (0, "CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentMonType"))
if mibBuilder.loadTexts: coiOtnFarEndCurrentEntry.setStatus('current')
coiOtnFarEndCurIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiOtnFarEndCurIntervalType.setStatus('current')
coiOtnFarEndCurrentMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 2), CoiMonitorType())
if mibBuilder.loadTexts: coiOtnFarEndCurrentMonType.setStatus('current')
coiOtnFarEndCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndCurrentFCs.setStatus('current')
coiOtnFarEndCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndCurrentESs.setStatus('current')
coiOtnFarEndCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndCurrentSESs.setStatus('current')
coiOtnFarEndCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndCurrentUASs.setStatus('current')
coiOtnFarEndCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndCurrentBBEs.setStatus('current')
coiOtnFarEndCurrentESRs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndCurrentESRs.setStatus('current')
coiOtnFarEndCurrentSESRs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndCurrentSESRs.setStatus('current')
coiOtnFarEndCurrentBBERs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndCurrentBBERs.setStatus('current')
coiOtnNearEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5), )
if mibBuilder.loadTexts: coiOtnNearEndIntervalTable.setStatus('current')
coiOtnNearEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalType"), (0, "CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalMonType"), (0, "CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalNum"))
if mibBuilder.loadTexts: coiOtnNearEndIntervalEntry.setStatus('current')
coiOtnNearEndIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiOtnNearEndIntervalType.setStatus('current')
coiOtnNearEndIntervalMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 2), CoiMonitorType())
if mibBuilder.loadTexts: coiOtnNearEndIntervalMonType.setStatus('current')
coiOtnNearEndIntervalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: coiOtnNearEndIntervalNum.setStatus('current')
coiOtnNearEndIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndIntervalFCs.setStatus('current')
coiOtnNearEndIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndIntervalESs.setStatus('current')
coiOtnNearEndIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndIntervalSESs.setStatus('current')
coiOtnNearEndIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndIntervalUASs.setStatus('current')
coiOtnNearEndIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndIntervalBBEs.setStatus('current')
coiOtnNearEndIntervalESRs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndIntervalESRs.setStatus('current')
coiOtnNearEndIntervalSESRs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndIntervalSESRs.setStatus('current')
coiOtnNearEndIntervalBBERs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndIntervalBBERs.setStatus('current')
coiOtnNearEndIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 5, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnNearEndIntervalValidData.setStatus('current')
coiOtnFarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6), )
if mibBuilder.loadTexts: coiOtnFarEndIntervalTable.setStatus('current')
coiOtnFarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalType"), (0, "CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalMonType"), (0, "CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalNum"))
if mibBuilder.loadTexts: coiOtnFarEndIntervalEntry.setStatus('current')
coiOtnFarEndIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiOtnFarEndIntervalType.setStatus('current')
coiOtnFarEndIntervalMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 2), CoiMonitorType())
if mibBuilder.loadTexts: coiOtnFarEndIntervalMonType.setStatus('current')
coiOtnFarEndIntervalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: coiOtnFarEndIntervalNum.setStatus('current')
coiOtnFarEndIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndIntervalFCs.setStatus('current')
coiOtnFarEndIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndIntervalESs.setStatus('current')
coiOtnFarEndIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndIntervalSESs.setStatus('current')
coiOtnFarEndIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndIntervalUASs.setStatus('current')
coiOtnFarEndIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndIntervalBBEs.setStatus('current')
coiOtnFarEndIntervalESRs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndIntervalESRs.setStatus('current')
coiOtnFarEndIntervalSESRs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndIntervalSESRs.setStatus('current')
coiOtnFarEndIntervalBBERs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndIntervalBBERs.setStatus('current')
coiOtnFarEndIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 6, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiOtnFarEndIntervalValidData.setStatus('current')
coiOtnIfNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 2, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coiOtnIfNotifEnabled.setStatus('current')
coiFECThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 1), )
if mibBuilder.loadTexts: coiFECThresholdsTable.setStatus('current')
coiFECThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OTN-IF-MIB", "coiFECThreshIntervalType"), (0, "CISCO-OTN-IF-MIB", "coiFECThreshType"))
if mibBuilder.loadTexts: coiFECThresholdsEntry.setStatus('current')
coiFECThreshIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 1, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiFECThreshIntervalType.setStatus('current')
coiFECThreshType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bitErrCor", 1), ("byteErrcor", 2), ("zeroErrDet", 3), ("oneErrDet", 4), ("unCorWords", 5))))
if mibBuilder.loadTexts: coiFECThreshType.setStatus('current')
coiFECThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coiFECThreshValue.setStatus('current')
coiFECThreshStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 1, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coiFECThreshStorageType.setStatus('current')
coiFECThreshStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: coiFECThreshStatus.setStatus('current')
coiFECCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2), )
if mibBuilder.loadTexts: coiFECCurrentTable.setStatus('current')
coiFECCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OTN-IF-MIB", "coiFECCurIntervalType"))
if mibBuilder.loadTexts: coiFECCurrentEntry.setStatus('current')
coiFECCurIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiFECCurIntervalType.setStatus('current')
coiFECCurrentCorBitErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentCorBitErrs.setStatus('current')
coiFECCurrentCorByteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentCorByteErrs.setStatus('current')
coiFECCurrentDetZeroErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentDetZeroErrs.setStatus('current')
coiFECCurrentDetOneErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentDetOneErrs.setStatus('current')
coiFECCurrentUncorWords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentUncorWords.setStatus('current')
coiFECCurrentPreFECMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentPreFECMin.setStatus('current')
coiFECCurrentPreFECMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentPreFECMax.setStatus('current')
coiFECCurrentPreFECAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentPreFECAvg.setStatus('current')
coiFECCurrentPostFECMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentPostFECMin.setStatus('current')
coiFECCurrentPostFECMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentPostFECMax.setStatus('current')
coiFECCurrentPostFECAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentPostFECAvg.setStatus('current')
coiFECCurrentQFactorMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentQFactorMin.setStatus('current')
coiFECCurrentQFactorMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentQFactorMax.setStatus('current')
coiFECCurrentQFactorAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentQFactorAvg.setStatus('current')
coiFECCurrentQMarginMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentQMarginMin.setStatus('current')
coiFECCurrentQMarginMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentQMarginMax.setStatus('current')
coiFECCurrentQMarginAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 2, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECCurrentQMarginAvg.setStatus('current')
coiFECIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3), )
if mibBuilder.loadTexts: coiFECIntervalTable.setStatus('current')
coiFECIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OTN-IF-MIB", "coiFECIntervalType"), (0, "CISCO-OTN-IF-MIB", "coiFECIntervalNum"))
if mibBuilder.loadTexts: coiFECIntervalEntry.setStatus('current')
coiFECIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 1), CoiIntervalType())
if mibBuilder.loadTexts: coiFECIntervalType.setStatus('current')
coiFECIntervalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: coiFECIntervalNum.setStatus('current')
coiFECIntervalCorBitErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalCorBitErrs.setStatus('current')
coiFECIntervalCorByteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalCorByteErrs.setStatus('current')
coiFECIntervalDetZeroErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalDetZeroErrs.setStatus('current')
coiFECIntervalDetOneErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalDetOneErrs.setStatus('current')
coiFECIntervalUncorWords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalUncorWords.setStatus('current')
coiFECIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalValidData.setStatus('current')
coiFECIntervalPreFECMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalPreFECMin.setStatus('current')
coiFECIntervalPreFECMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalPreFECMax.setStatus('current')
coiFECIntervalPreFECAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalPreFECAvg.setStatus('current')
coiFECIntervalPostFECMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalPostFECMin.setStatus('current')
coiFECIntervalPostFECMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalPostFECMax.setStatus('current')
coiFECIntervalPostFECAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalPostFECAvg.setStatus('current')
coiFECIntervalQFactorMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalQFactorMin.setStatus('current')
coiFECIntervalQFactorMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalQFactorMax.setStatus('current')
coiFECIntervalQFactorAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalQFactorAvg.setStatus('current')
coiFECIntervalQMarginMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalQMarginMin.setStatus('current')
coiFECIntervalQMarginMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalQMarginMax.setStatus('current')
coiFECIntervalQMarginAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 639, 1, 3, 3, 1, 20), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coiFECIntervalQMarginAvg.setStatus('current')
ciscoOtnIfMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 639, 2))
ciscoOtnIfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 1))
coiOtnIfOTUStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 639, 0, 1)).setObjects(("IF-MIB", "ifName"), ("CISCO-OTN-IF-MIB", "coiOtnIfOTUStatus"))
if mibBuilder.loadTexts: coiOtnIfOTUStatusChange.setStatus('current')
coiOtnIfODUStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 639, 0, 2)).setObjects(("IF-MIB", "ifName"), ("CISCO-OTN-IF-MIB", "coiOtnIfODUStatus"))
if mibBuilder.loadTexts: coiOtnIfODUStatusChange.setStatus('current')
ciscoOtnIfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2))
ciscoOtnIfMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 1, 1)).setObjects(("CISCO-OTN-IF-MIB", "coiIfControllerGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnGroup"), ("CISCO-OTN-IF-MIB", "coiIfFECGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNearEndCurrentGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNearEndIntervalGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnFarEndCurrentGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnFarEndIntervalGroup"), ("CISCO-OTN-IF-MIB", "coiIfFECCurrentGroup"), ("CISCO-OTN-IF-MIB", "coiIfFECIntervalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOtnIfMIBCompliance = ciscoOtnIfMIBCompliance.setStatus('deprecated')
ciscoOtnIfMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 1, 2)).setObjects(("CISCO-OTN-IF-MIB", "coiIfControllerGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnGroup"), ("CISCO-OTN-IF-MIB", "coiIfFECGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNearEndCurrentGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNearEndIntervalGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnFarEndCurrentGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnFarEndIntervalGroup"), ("CISCO-OTN-IF-MIB", "coiIfFECCurrentGroup"), ("CISCO-OTN-IF-MIB", "coiIfFECIntervalGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNotifGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNotifEnableGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNotifStatusObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOtnIfMIBCompliance1 = ciscoOtnIfMIBCompliance1.setStatus('deprecated')
ciscoOtnIfMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 1, 3)).setObjects(("CISCO-OTN-IF-MIB", "coiIfControllerGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnGroup"), ("CISCO-OTN-IF-MIB", "coiIfFECGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNearEndCurrentGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNearEndIntervalGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnFarEndCurrentGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnFarEndIntervalGroup"), ("CISCO-OTN-IF-MIB", "coiIfFECCurrentGroup1"), ("CISCO-OTN-IF-MIB", "coiIfFECIntervalGroup1"), ("CISCO-OTN-IF-MIB", "coiIfOtnNotifGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNotifEnableGroup"), ("CISCO-OTN-IF-MIB", "coiIfOtnNotifStatusObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOtnIfMIBCompliance2 = ciscoOtnIfMIBCompliance2.setStatus('current')
coiIfControllerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 1)).setObjects(("CISCO-OTN-IF-MIB", "coiIfControllerLoopback"), ("CISCO-OTN-IF-MIB", "coiIfControllerWavelength"), ("CISCO-OTN-IF-MIB", "coiIfControllerLaserAdminStatus"), ("CISCO-OTN-IF-MIB", "coiIfControllerLaserOperStatus"), ("CISCO-OTN-IF-MIB", "coiIfControllerOtnStatus"), ("CISCO-OTN-IF-MIB", "coiIfControllerFECMode"), ("CISCO-OTN-IF-MIB", "coiIfControllerTDCOperMode"), ("CISCO-OTN-IF-MIB", "coiIfControllerTDCOperStatus"), ("CISCO-OTN-IF-MIB", "coiIfControllerTDCOperSetting"), ("CISCO-OTN-IF-MIB", "coiIfControllerPreFECBERMantissa"), ("CISCO-OTN-IF-MIB", "coiIfControllerPreFECBERExponent"), ("CISCO-OTN-IF-MIB", "coiIfControllerQFactor"), ("CISCO-OTN-IF-MIB", "coiIfControllerQMargin"), ("CISCO-OTN-IF-MIB", "coiIfControllerOTNValidIntervals"), ("CISCO-OTN-IF-MIB", "coiIfControllerFECValidIntervals"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfControllerGroup = coiIfControllerGroup.setStatus('current')
coiIfOtnNearEndCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 3)).setObjects(("CISCO-OTN-IF-MIB", "coiOtnNearEndThreshValue"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndThreshStatus"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentFCs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentESs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentSESs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentUASs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentBBEs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentESRs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentSESRs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentBBERs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfOtnNearEndCurrentGroup = coiIfOtnNearEndCurrentGroup.setStatus('current')
coiIfOtnNearEndIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 4)).setObjects(("CISCO-OTN-IF-MIB", "coiOtnNearEndThreshValue"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndThreshStatus"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalFCs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalESs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalSESs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalUASs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalBBEs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalESRs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalSESRs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalBBERs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfOtnNearEndIntervalGroup = coiIfOtnNearEndIntervalGroup.setStatus('current')
coiIfOtnFarEndCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 5)).setObjects(("CISCO-OTN-IF-MIB", "coiOtnFarEndThreshValue"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndThreshStatus"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentFCs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentESs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentSESs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentUASs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentBBEs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentESRs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentSESRs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentBBERs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfOtnFarEndCurrentGroup = coiIfOtnFarEndCurrentGroup.setStatus('current')
coiIfOtnFarEndIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 6)).setObjects(("CISCO-OTN-IF-MIB", "coiOtnFarEndThreshValue"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndThreshStatus"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalFCs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalESs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalSESs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalUASs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalBBEs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalESRs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalSESRs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalBBERs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfOtnFarEndIntervalGroup = coiIfOtnFarEndIntervalGroup.setStatus('current')
coiIfOtnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 7)).setObjects(("CISCO-OTN-IF-MIB", "coiOtnNearEndThreshValue"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndThreshStatus"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentFCs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentESs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentSESs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentUASs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentBBEs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentESRs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentSESRs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndCurrentBBERs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalFCs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalESs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalSESs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalUASs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalBBEs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalESRs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalSESRs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalBBERs"), ("CISCO-OTN-IF-MIB", "coiOtnNearEndIntervalValidData"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndThreshValue"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndThreshStatus"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentFCs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentESs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentSESs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentUASs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentBBEs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentESRs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentSESRs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndCurrentBBERs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalFCs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalESs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalSESs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalUASs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalBBEs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalESRs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalSESRs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalBBERs"), ("CISCO-OTN-IF-MIB", "coiOtnFarEndIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfOtnGroup = coiIfOtnGroup.setStatus('current')
coiIfFECGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 8)).setObjects(("CISCO-OTN-IF-MIB", "coiFECThreshValue"), ("CISCO-OTN-IF-MIB", "coiFECThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiFECThreshStatus"), ("CISCO-OTN-IF-MIB", "coiFECCurrentCorBitErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentCorByteErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentDetZeroErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentDetOneErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentUncorWords"), ("CISCO-OTN-IF-MIB", "coiFECIntervalCorBitErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalCorByteErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalDetZeroErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalDetOneErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalUncorWords"), ("CISCO-OTN-IF-MIB", "coiFECIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfFECGroup = coiIfFECGroup.setStatus('current')
coiIfFECCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 9)).setObjects(("CISCO-OTN-IF-MIB", "coiFECThreshValue"), ("CISCO-OTN-IF-MIB", "coiFECThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiFECThreshStatus"), ("CISCO-OTN-IF-MIB", "coiFECCurrentCorBitErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentCorByteErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentDetZeroErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentDetOneErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentUncorWords"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfFECCurrentGroup = coiIfFECCurrentGroup.setStatus('deprecated')
coiIfFECIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 10)).setObjects(("CISCO-OTN-IF-MIB", "coiFECThreshValue"), ("CISCO-OTN-IF-MIB", "coiFECThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiFECThreshStatus"), ("CISCO-OTN-IF-MIB", "coiFECIntervalCorBitErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalCorByteErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalDetZeroErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalDetOneErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalUncorWords"), ("CISCO-OTN-IF-MIB", "coiFECIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfFECIntervalGroup = coiIfFECIntervalGroup.setStatus('deprecated')
coiIfOtnNotifEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 11)).setObjects(("CISCO-OTN-IF-MIB", "coiOtnIfNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfOtnNotifEnableGroup = coiIfOtnNotifEnableGroup.setStatus('current')
coiIfOtnNotifStatusObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 12)).setObjects(("CISCO-OTN-IF-MIB", "coiOtnIfOTUStatus"), ("CISCO-OTN-IF-MIB", "coiOtnIfODUStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfOtnNotifStatusObjectGroup = coiIfOtnNotifStatusObjectGroup.setStatus('current')
coiIfOtnNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 13)).setObjects(("CISCO-OTN-IF-MIB", "coiOtnIfOTUStatusChange"), ("CISCO-OTN-IF-MIB", "coiOtnIfODUStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfOtnNotifGroup = coiIfOtnNotifGroup.setStatus('current')
coiIfFECCurrentGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 14)).setObjects(("CISCO-OTN-IF-MIB", "coiFECThreshValue"), ("CISCO-OTN-IF-MIB", "coiFECThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiFECThreshStatus"), ("CISCO-OTN-IF-MIB", "coiFECCurrentCorBitErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentCorByteErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentDetZeroErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentDetOneErrs"), ("CISCO-OTN-IF-MIB", "coiFECCurrentUncorWords"), ("CISCO-OTN-IF-MIB", "coiFECCurrentPreFECMin"), ("CISCO-OTN-IF-MIB", "coiFECCurrentPreFECMax"), ("CISCO-OTN-IF-MIB", "coiFECCurrentPreFECAvg"), ("CISCO-OTN-IF-MIB", "coiFECCurrentPostFECMin"), ("CISCO-OTN-IF-MIB", "coiFECCurrentPostFECMax"), ("CISCO-OTN-IF-MIB", "coiFECCurrentPostFECAvg"), ("CISCO-OTN-IF-MIB", "coiFECCurrentQFactorMin"), ("CISCO-OTN-IF-MIB", "coiFECCurrentQFactorMax"), ("CISCO-OTN-IF-MIB", "coiFECCurrentQFactorAvg"), ("CISCO-OTN-IF-MIB", "coiFECCurrentQMarginMin"), ("CISCO-OTN-IF-MIB", "coiFECCurrentQMarginMax"), ("CISCO-OTN-IF-MIB", "coiFECCurrentQMarginAvg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfFECCurrentGroup1 = coiIfFECCurrentGroup1.setStatus('current')
coiIfFECIntervalGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 639, 2, 2, 15)).setObjects(("CISCO-OTN-IF-MIB", "coiFECThreshValue"), ("CISCO-OTN-IF-MIB", "coiFECThreshStorageType"), ("CISCO-OTN-IF-MIB", "coiFECThreshStatus"), ("CISCO-OTN-IF-MIB", "coiFECIntervalCorBitErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalCorByteErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalDetZeroErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalDetOneErrs"), ("CISCO-OTN-IF-MIB", "coiFECIntervalUncorWords"), ("CISCO-OTN-IF-MIB", "coiFECIntervalValidData"), ("CISCO-OTN-IF-MIB", "coiFECIntervalPreFECMin"), ("CISCO-OTN-IF-MIB", "coiFECIntervalPreFECMax"), ("CISCO-OTN-IF-MIB", "coiFECIntervalPreFECAvg"), ("CISCO-OTN-IF-MIB", "coiFECIntervalPostFECMin"), ("CISCO-OTN-IF-MIB", "coiFECIntervalPostFECMax"), ("CISCO-OTN-IF-MIB", "coiFECIntervalPostFECAvg"), ("CISCO-OTN-IF-MIB", "coiFECIntervalQFactorMin"), ("CISCO-OTN-IF-MIB", "coiFECIntervalQFactorMax"), ("CISCO-OTN-IF-MIB", "coiFECIntervalQFactorAvg"), ("CISCO-OTN-IF-MIB", "coiFECIntervalQMarginMin"), ("CISCO-OTN-IF-MIB", "coiFECIntervalQMarginMax"), ("CISCO-OTN-IF-MIB", "coiFECIntervalQMarginAvg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coiIfFECIntervalGroup1 = coiIfFECIntervalGroup1.setStatus('current')
mibBuilder.exportSymbols("CISCO-OTN-IF-MIB", coiFECCurrentPreFECMax=coiFECCurrentPreFECMax, coiOtnNearEndThreshIntervalType=coiOtnNearEndThreshIntervalType, coiOtnFarEndCurrentBBEs=coiOtnFarEndCurrentBBEs, coiFECCurrentDetZeroErrs=coiFECCurrentDetZeroErrs, coiIfOtnNotifStatusObjectGroup=coiIfOtnNotifStatusObjectGroup, coiFECIntervalPostFECAvg=coiFECIntervalPostFECAvg, coiOtnNearEndCurrentFCs=coiOtnNearEndCurrentFCs, PYSNMP_MODULE_ID=ciscoOtnIfMIB, coiOtnFarEndCurrentSESRs=coiOtnFarEndCurrentSESRs, coiOtnFarEndCurrentTable=coiOtnFarEndCurrentTable, coiFECIntervalPostFECMin=coiFECIntervalPostFECMin, coiFECIntervalDetZeroErrs=coiFECIntervalDetZeroErrs, coiFECIntervalValidData=coiFECIntervalValidData, coiOtnIfODUStatus=coiOtnIfODUStatus, CoiOtnThresholdType=CoiOtnThresholdType, coiIfOtnNotifGroup=coiIfOtnNotifGroup, coiIfControllerEntry=coiIfControllerEntry, coiOtnNearEndCurrentTable=coiOtnNearEndCurrentTable, coiOtnFarEndIntervalEntry=coiOtnFarEndIntervalEntry, coiIfOtnNearEndIntervalGroup=coiIfOtnNearEndIntervalGroup, coiOtnFarEndCurrentFCs=coiOtnFarEndCurrentFCs, coiFECIntervalPreFECMin=coiFECIntervalPreFECMin, coiOtnNearEndThreshStorageType=coiOtnNearEndThreshStorageType, coiFECIntervalType=coiFECIntervalType, coiOtnFarEndCurrentESRs=coiOtnFarEndCurrentESRs, coiOtnFarEndIntervalValidData=coiOtnFarEndIntervalValidData, coiOtnFarEndThreshMonType=coiOtnFarEndThreshMonType, coiFECCurrentQFactorMin=coiFECCurrentQFactorMin, coiFECIntervalQFactorMin=coiFECIntervalQFactorMin, ciscoOtnIfMIBCompliance1=ciscoOtnIfMIBCompliance1, coiOtnIfODUStatusChange=coiOtnIfODUStatusChange, coiDwdmIfOtn=coiDwdmIfOtn, coiIfControllerFECValidIntervals=coiIfControllerFECValidIntervals, coiOtnNearEndIntervalNum=coiOtnNearEndIntervalNum, coiOtnFarEndIntervalESs=coiOtnFarEndIntervalESs, coiOtnFarEndCurrentUASs=coiOtnFarEndCurrentUASs, coiIfControllerLaserOperStatus=coiIfControllerLaserOperStatus, coiFECCurrentEntry=coiFECCurrentEntry, coiOtnFarEndIntervalUASs=coiOtnFarEndIntervalUASs, coiIfControllerQFactor=coiIfControllerQFactor, coiFECIntervalUncorWords=coiFECIntervalUncorWords, ciscoOtnIfMIBObjects=ciscoOtnIfMIBObjects, coiOtnIfNotifEnabled=coiOtnIfNotifEnabled, coiIfControllerTDCOperStatus=coiIfControllerTDCOperStatus, coiOtnNearEndCurrentSESRs=coiOtnNearEndCurrentSESRs, coiIfFECCurrentGroup=coiIfFECCurrentGroup, coiFECThresholdsEntry=coiFECThresholdsEntry, coiOtnFarEndIntervalESRs=coiOtnFarEndIntervalESRs, CoiOpticalWavelength=CoiOpticalWavelength, coiFECIntervalEntry=coiFECIntervalEntry, coiOtnIfOTUStatus=coiOtnIfOTUStatus, coiOtnNearEndCurrentSESs=coiOtnNearEndCurrentSESs, coiOtnNearEndCurrentUASs=coiOtnNearEndCurrentUASs, coiFECThreshStorageType=coiFECThreshStorageType, coiOtnFarEndIntervalMonType=coiOtnFarEndIntervalMonType, coiOtnNearEndThresholdsTable=coiOtnNearEndThresholdsTable, coiFECCurrentCorByteErrs=coiFECCurrentCorByteErrs, coiIfOtnGroup=coiIfOtnGroup, coiFECCurrentPostFECMin=coiFECCurrentPostFECMin, coiOtnFarEndThreshStatus=coiOtnFarEndThreshStatus, ciscoOtnIfMIBConformance=ciscoOtnIfMIBConformance, ciscoOtnIfMIB=ciscoOtnIfMIB, coiFECCurrentPostFECMax=coiFECCurrentPostFECMax, coiOtnNearEndCurrentMonType=coiOtnNearEndCurrentMonType, coiOtnFarEndThreshIntervalType=coiOtnFarEndThreshIntervalType, coiOtnFarEndCurrentSESs=coiOtnFarEndCurrentSESs, coiFECThreshStatus=coiFECThreshStatus, coiOtnNearEndIntervalESRs=coiOtnNearEndIntervalESRs, coiIfFECIntervalGroup1=coiIfFECIntervalGroup1, coiIfOtnFarEndCurrentGroup=coiIfOtnFarEndCurrentGroup, coiOtnNearEndCurrentBBERs=coiOtnNearEndCurrentBBERs, coiOtnFarEndIntervalNum=coiOtnFarEndIntervalNum, coiOtnNearEndIntervalSESRs=coiOtnNearEndIntervalSESRs, ciscoOtnIfMIBCompliance=ciscoOtnIfMIBCompliance, coiIfControllerQMargin=coiIfControllerQMargin, coiOtnNearEndThreshValue=coiOtnNearEndThreshValue, coiIfControllerTDCOperMode=coiIfControllerTDCOperMode, coiOtnNearEndCurrentESRs=coiOtnNearEndCurrentESRs, coiOtnNearEndThreshStatus=coiOtnNearEndThreshStatus, coiOtnNearEndCurIntervalType=coiOtnNearEndCurIntervalType, coiOtnFarEndThresholdsTable=coiOtnFarEndThresholdsTable, ciscoOtnIfMIBGroups=ciscoOtnIfMIBGroups, coiIfOtnNotifEnableGroup=coiIfOtnNotifEnableGroup, coiOtnFarEndIntervalFCs=coiOtnFarEndIntervalFCs, coiFECCurrentTable=coiFECCurrentTable, CoiIntervalType=CoiIntervalType, coiIfFECCurrentGroup1=coiIfFECCurrentGroup1, coiFECCurrentQFactorMax=coiFECCurrentQFactorMax, coiOtnFarEndCurrentBBERs=coiOtnFarEndCurrentBBERs, coiIfControllerFECMode=coiIfControllerFECMode, coiOtnFarEndCurrentEntry=coiOtnFarEndCurrentEntry, coiFECIntervalNum=coiFECIntervalNum, coiFECIntervalQMarginMin=coiFECIntervalQMarginMin, coiOtnFarEndIntervalSESRs=coiOtnFarEndIntervalSESRs, coiOtnNearEndIntervalValidData=coiOtnNearEndIntervalValidData, ciscoOtnIfMIBCompliances=ciscoOtnIfMIBCompliances, coiFECIntervalQMarginAvg=coiFECIntervalQMarginAvg, coiIfControllerLaserAdminStatus=coiIfControllerLaserAdminStatus, coiFECCurrentQFactorAvg=coiFECCurrentQFactorAvg, coiOtnNearEndIntervalBBERs=coiOtnNearEndIntervalBBERs, coiFECIntervalCorByteErrs=coiFECIntervalCorByteErrs, ciscoOtnIfMIBCompliance2=ciscoOtnIfMIBCompliance2, coiOtnNearEndIntervalEntry=coiOtnNearEndIntervalEntry, coiOtnFarEndThreshValue=coiOtnFarEndThreshValue, coiFECIntervalPreFECAvg=coiFECIntervalPreFECAvg, coiOtnNearEndThresholdType=coiOtnNearEndThresholdType, coiFECThreshValue=coiFECThreshValue, coiIfControllerLoopback=coiIfControllerLoopback, coiOtnNearEndIntervalType=coiOtnNearEndIntervalType, coiFECCurrentCorBitErrs=coiFECCurrentCorBitErrs, coiFECIntervalDetOneErrs=coiFECIntervalDetOneErrs, coiOtnFarEndIntervalBBEs=coiOtnFarEndIntervalBBEs, coiFECCurIntervalType=coiFECCurIntervalType, coiOtnNearEndThreshMonType=coiOtnNearEndThreshMonType, coiFECThreshType=coiFECThreshType, coiFECCurrentPreFECMin=coiFECCurrentPreFECMin, coiOtnNearEndThresholdsEntry=coiOtnNearEndThresholdsEntry, coiIfControllerPreFECBERExponent=coiIfControllerPreFECBERExponent, coiOtnFarEndIntervalSESs=coiOtnFarEndIntervalSESs, coiIfFECIntervalGroup=coiIfFECIntervalGroup, coiDwdmIfFEC=coiDwdmIfFEC, coiFECIntervalQFactorMax=coiFECIntervalQFactorMax, coiOtnFarEndIntervalType=coiOtnFarEndIntervalType, coiIfControllerWavelength=coiIfControllerWavelength, coiIfFECGroup=coiIfFECGroup, coiOtnNearEndCurrentESs=coiOtnNearEndCurrentESs, coiOtnNearEndCurrentEntry=coiOtnNearEndCurrentEntry, coiOtnNearEndIntervalTable=coiOtnNearEndIntervalTable, coiIfOtnFarEndIntervalGroup=coiIfOtnFarEndIntervalGroup, coiOtnFarEndCurIntervalType=coiOtnFarEndCurIntervalType, coiFECCurrentQMarginAvg=coiFECCurrentQMarginAvg, CoiMonitorType=CoiMonitorType, coiIfControllerOTNValidIntervals=coiIfControllerOTNValidIntervals, coiOtnNearEndIntervalMonType=coiOtnNearEndIntervalMonType, ciscoOtnIfMIBNotifs=ciscoOtnIfMIBNotifs, coiOtnNearEndIntervalFCs=coiOtnNearEndIntervalFCs, coiOtnFarEndCurrentMonType=coiOtnFarEndCurrentMonType, coiOtnFarEndThreshStorageType=coiOtnFarEndThreshStorageType, coiOtnNearEndIntervalUASs=coiOtnNearEndIntervalUASs, coiFECCurrentDetOneErrs=coiFECCurrentDetOneErrs, coiFECIntervalQMarginMax=coiFECIntervalQMarginMax, coiIfControllerTDCOperSetting=coiIfControllerTDCOperSetting, coiOtnIfOTUStatusChange=coiOtnIfOTUStatusChange, coiFECCurrentQMarginMin=coiFECCurrentQMarginMin, coiFECIntervalTable=coiFECIntervalTable, coiIfOtnNearEndCurrentGroup=coiIfOtnNearEndCurrentGroup, coiFECIntervalCorBitErrs=coiFECIntervalCorBitErrs, coiOtnNearEndIntervalBBEs=coiOtnNearEndIntervalBBEs, coiFECThresholdsTable=coiFECThresholdsTable, coiFECThreshIntervalType=coiFECThreshIntervalType, coiFECCurrentUncorWords=coiFECCurrentUncorWords, coiOtnNearEndCurrentBBEs=coiOtnNearEndCurrentBBEs, coiIfControllerPreFECBERMantissa=coiIfControllerPreFECBERMantissa, coiOtnFarEndThresholdsEntry=coiOtnFarEndThresholdsEntry, coiFECCurrentQMarginMax=coiFECCurrentQMarginMax, coiIfControllerGroup=coiIfControllerGroup, coiOtnNearEndIntervalSESs=coiOtnNearEndIntervalSESs, coiOtnFarEndIntervalTable=coiOtnFarEndIntervalTable, coiOtnFarEndThresholdType=coiOtnFarEndThresholdType, coiIfControllerOtnStatus=coiIfControllerOtnStatus, coiFECIntervalPostFECMax=coiFECIntervalPostFECMax, coiOtnFarEndCurrentESs=coiOtnFarEndCurrentESs, coiOtnFarEndIntervalBBERs=coiOtnFarEndIntervalBBERs, coiFECIntervalPreFECMax=coiFECIntervalPreFECMax, coiFECCurrentPreFECAvg=coiFECCurrentPreFECAvg, coiFECIntervalQFactorAvg=coiFECIntervalQFactorAvg, coiIfControllerTable=coiIfControllerTable, coiOtnNearEndIntervalESs=coiOtnNearEndIntervalESs, coiDwdmInterface=coiDwdmInterface, coiFECCurrentPostFECAvg=coiFECCurrentPostFECAvg)
