#
# PySNMP MIB module DGS3000-28SC-L2MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS3000-28SC-L2MGMT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:30:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
AgentNotifyLevel, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "AgentNotifyLevel")
dot1agCfmMdIndex, dot1agCfmMepIdentifier, dot1agCfmMaIndex = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "dot1agCfmMdIndex", "dot1agCfmMepIdentifier", "dot1agCfmMaIndex")
swPortSecPortIndex, = mibBuilder.importSymbols("PORT-SECURITY-MIB", "swPortSecPortIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, TimeTicks, ModuleIdentity, Counter32, NotificationType, Unsigned32, Gauge32, iso, Bits, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "ModuleIdentity", "Counter32", "NotificationType", "Unsigned32", "Gauge32", "iso", "Bits", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress")
RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
dlink_Dgs3000Proj_DGS3000_28SCax, = mibBuilder.importSymbols("SWDGS3000PRIMGMT-MIB", "dlink-Dgs3000Proj-DGS3000-28SCax")
swL2MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2))
if mibBuilder.loadTexts: swL2MgmtMIB.setLastUpdated('201410141006Z')
if mibBuilder.loadTexts: swL2MgmtMIB.setOrganization('D-Link Corp.')
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

swL2DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1))
swL2VLANMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2))
swL2PortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3))
swL2TrunkMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9))
swL2MirrorMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10))
swL2IGMPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 11))
swL2TrafficMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 13))
swL2TrafficSegMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 14))
swL2MulticastFilterMode = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 17))
swL2LoopDetectMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18))
swL2MgmtMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100))
class IANAifMauAutoNegCapBits(TextualConvention, Bits):
    reference = '[IEEE802.3], Section 30.6.1.1.5'
    status = 'current'
    namedValues = NamedValues(("bOther", 0), ("b10baseT", 1), ("b10baseTFD", 2), ("b100baseT4", 3), ("b100baseTX", 4), ("b100baseTXFD", 5), ("b100baseT2", 6), ("b100baseT2FD", 7), ("bFdxPause", 8), ("bFdxAPause", 9), ("bFdxSPause", 10), ("bFdxBPause", 11), ("b1000baseX", 12), ("b1000baseXFD", 13), ("b1000baseT", 14), ("b1000baseTFD", 15))

swL2DevInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1))
swDevInfoTotalNumOfPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setStatus('current')
swDevInfoNumOfPortInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoNumOfPortInUse.setStatus('current')
swDevModuleInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1, 3), )
if mibBuilder.loadTexts: swDevModuleInfoTable.setStatus('current')
swDevModuleInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1, 3, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swDevModuleInfoUnitID"))
if mibBuilder.loadTexts: swDevModuleInfoEntry.setStatus('current')
swDevModuleInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoUnitID.setStatus('current')
swDevModuleInfoModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoModuleName.setStatus('current')
swDevModuleInfoReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoReversion.setStatus('current')
swDevModuleInfoSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoSerial.setStatus('current')
swDevModuleInfoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoDescription.setStatus('current')
swL2DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2))
swL2DevCtrlStpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlStpState.setStatus('current')
swL2DevCtrlIGMPSnooping = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnooping.setStatus('current')
swL2DevCtrlIGMPSnoopingMcstRTOnly = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnoopingMcstRTOnly.setStatus('current')
swL2DevCtrlRmonState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlRmonState.setStatus('current')
swL2DevCtrlSnmpTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlSnmpTrapState.setStatus('current')
swL2DevCtrlCleanAllStatisticCounter = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setStatus('current')
swL2DevCtrlVlanIdOfFDBTbl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 7), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVlanIdOfFDBTbl.setStatus('current')
swL2MACNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyState.setStatus('current')
swL2MACNotifyHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setStatus('current')
swL2MACNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyInterval.setStatus('current')
swL2DevCtrlAsymVlanState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlAsymVlanState.setStatus('current')
swL2DevCtrlTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 14))
swL2DevCtrlTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setStatus('current')
swL2DevCtrlTelnetTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetTcpPort.setStatus('current')
swL2DevCtrlManagementVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 16), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlManagementVlanId.setStatus('current')
swL2DevCtrlWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 17))
swL2DevCtrlWebState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebState.setStatus('current')
swL2DevCtrlWebTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 17, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebTcpPort.setStatus('current')
swL2DevCtrlLLDPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPState.setStatus('current')
swL2DevCtrlLLDPForwardMessageState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPForwardMessageState.setStatus('current')
swL2DevCtrlIpAutoconfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIpAutoconfig.setStatus('current')
swL2DevCtrlCFM = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21))
swL2DevCtrlCFMState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCFMState.setStatus('current')
swL2DevCtrlCFMPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 2), )
if mibBuilder.loadTexts: swL2DevCtrlCFMPortTable.setStatus('current')
swL2DevCtrlCFMPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 2, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2DevCtrlCFMPortIndex"))
if mibBuilder.loadTexts: swL2DevCtrlCFMPortEntry.setStatus('current')
swL2DevCtrlCFMPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: swL2DevCtrlCFMPortIndex.setStatus('current')
swL2DevCtrlCFMPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCFMPortState.setStatus('current')
swL2DevCtrlCFMMaTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 3), )
if mibBuilder.loadTexts: swL2DevCtrlCFMMaTable.setStatus('current')
swL2DevCtrlCFMMaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 3, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"))
if mibBuilder.loadTexts: swL2DevCtrlCFMMaEntry.setStatus('current')
swL2DevCtrlCFMMaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCFMMaMode.setStatus('current')
swL2DevCtrlCFMMepTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 4), )
if mibBuilder.loadTexts: swL2DevCtrlCFMMepTable.setStatus('current')
swL2DevCtrlCFMMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 4, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"))
if mibBuilder.loadTexts: swL2DevCtrlCFMMepEntry.setStatus('current')
swL2DevCtrlCFMMepMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DevCtrlCFMMepMode.setStatus('current')
swL2DevCtrlVLANTrunkState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVLANTrunkState.setStatus('current')
swL2DevCtrlIpAutoconfigTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIpAutoconfigTimeout.setStatus('current')
swL2DevAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 3))
swL2DevAlarmNewRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setStatus('current')
swL2DevAlarmTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setStatus('current')
swL2DevAlarmLinkChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setStatus('current')
swL2VlanStaticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 1), )
if mibBuilder.loadTexts: swL2VlanStaticTable.setStatus('current')
swL2VlanStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 1, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2VlanIndex"))
if mibBuilder.loadTexts: swL2VlanStaticEntry.setStatus('current')
swL2VlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 1, 1, 1), VlanId())
if mibBuilder.loadTexts: swL2VlanIndex.setStatus('current')
swL2VLANAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VLANAdvertisement.setStatus('current')
swL2PVIDAutoAssignmentState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PVIDAutoAssignmentState.setStatus('current')
swL2VlanPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 3), )
if mibBuilder.loadTexts: swL2VlanPortInfoTable.setStatus('current')
swL2VlanPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 3, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2VlanPortInfoPortIndex"), (0, "DGS3000-28SC-L2MGMT-MIB", "swL2VlanPortInfoVid"))
if mibBuilder.loadTexts: swL2VlanPortInfoEntry.setStatus('current')
swL2VlanPortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortInfoPortIndex.setStatus('current')
swL2VlanPortInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 3, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortInfoVid.setStatus('current')
swL2VlanPortInfoPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("untagged", 2), ("tagged", 3), ("dynamic", 4), ("forbidden", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortInfoPortRole.setStatus('current')
swL2SubnetVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 4), )
if mibBuilder.loadTexts: swL2SubnetVLANTable.setStatus('current')
swL2SubnetVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 4, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2SubnetVLANIPAddress"), (0, "DGS3000-28SC-L2MGMT-MIB", "swL2SubnetVLANIPMask"))
if mibBuilder.loadTexts: swL2SubnetVLANEntry.setStatus('current')
swL2SubnetVLANIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2SubnetVLANIPAddress.setStatus('current')
swL2SubnetVLANIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2SubnetVLANIPMask.setStatus('current')
swL2SubnetVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 4, 1, 3), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2SubnetVLANID.setStatus('current')
swL2SubnetVLANPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2SubnetVLANPriority.setStatus('current')
swL2SubnetVLANRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2SubnetVLANRowStatus.setStatus('current')
swL2VlanPrecedenceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 5), )
if mibBuilder.loadTexts: swL2VlanPrecedenceTable.setStatus('current')
swL2VlanPrecedenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 5, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2VlanPrecedencePortIndex"))
if mibBuilder.loadTexts: swL2VlanPrecedenceEntry.setStatus('current')
swL2VlanPrecedencePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPrecedencePortIndex.setStatus('current')
swL2VlanPrecedenceClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac-based", 1), ("subnet-based", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanPrecedenceClassification.setStatus('current')
swL2NniGvrpBpduAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot1d", 1), ("dot1ad", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2NniGvrpBpduAddress.setStatus('current')
swL2PortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1), )
if mibBuilder.loadTexts: swL2PortInfoTable.setStatus('current')
swL2PortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortInfoPortIndex"), (0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortInfoMediumType"))
if mibBuilder.loadTexts: swL2PortInfoEntry.setStatus('current')
swL2PortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setStatus('current')
swL2PortInfoMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoMediumType.setStatus('current')
swL2PortInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoUnitID.setStatus('current')
swL2PortInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("portType-100Base-TX", 1), ("portType-100Base-FX", 2), ("portType-100Base-FL", 3), ("portType-1000Base-TX", 4), ("portType-1000Base-SX", 5), ("portType-1000Base-LX", 6), ("portType-1000Base-SX-GBIC", 7), ("portType-1000Base-LX-GBIC", 8), ("portType-1000Base-TX-GBIC", 9), ("portType-1000Base-1394", 10), ("portType-1000Base-TX-GBIC-COMBO", 11), ("portType-1000Base-none-GBIC", 12), ("portType-1000Base-SX-MGBIC", 13), ("portType-1000Base-LX-MGBIC", 14), ("portType-1000Base-TX-MGBIC", 15), ("portType-1000Base-none-MGBIC", 16), ("portType-SIO", 17), ("portType-10G", 18), ("portType-10G-xenpak-1310nm", 19), ("portType-10G-xenpak-850nm", 20), ("portType-10G-xenpak-empty", 21), ("portType-10G-xfp-1310nm", 22), ("portType-10G-xfp-850nm", 23), ("portType-10G-xfp-empty", 24), ("portType-none", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoType.setStatus('current')
swL2PortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setStatus('current')
swL2PortInfoNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("link-down", 0), ("full-10Mbps-8023x", 1), ("full-10Mbps-none", 2), ("half-10Mbps-backp", 3), ("half-10Mbps-none", 4), ("full-100Mbps-8023x", 5), ("full-100Mbps-none", 6), ("half-100Mbps-backp", 7), ("half-100Mbps-none", 8), ("full-1Gigabps-8023x", 9), ("full-1Gigabps-none", 10), ("half-1Gigabps-backp", 11), ("half-1Gigabps-none", 12), ("full-10Gigabps-8023x", 13), ("full-10Gigabps-none", 14), ("half-10Gigabps-8023x", 15), ("half-10Gigabps-none", 16), ("empty", 17), ("err-disabled", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setStatus('current')
swL2PortInfoModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("none", 0), ("moduleType-COMBO", 1), ("moduleType-1394", 2), ("moduleType-1000T", 3), ("moduleType-MGBIC", 4), ("moduleType-1P-SC-SX", 5), ("moduleType-2P-SC-SX", 6), ("moduleType-1P-SC-LX", 7), ("moduleType-2P-SC-LX", 8), ("moduleType-1P-TX", 9), ("moduleType-2P-TX", 10), ("moduleType-1P-MTRJ-SX", 11), ("moduleType-2P-MTRJ-SX", 12), ("moduleType-1P-MTRJ-LX", 13), ("moduleType-2P-MTRJ-LX", 14), ("moduleType-1P-GBIC", 15), ("moduleType-2P-GBIC", 16), ("moduleType-1P-GBIC-1P-TX", 17), ("moduleType-1P-GBIC-1P-STACK", 18), ("moduleType-2P-STACK", 19), ("moduleType-2P-100FX", 20), ("moduleType-1P-100FX", 21), ("moduleType-2P-100FX-NEW", 22), ("moduleType-1P-100FL", 23), ("moduleType-2P-100FL", 24), ("moduleType-2P-100TX", 25), ("moduleType-BaseModule-24PORT", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoModuleType.setStatus('current')
swL2PortInfoErrorDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 0), ("storm-control", 1), ("stp-lbd", 2), ("unknow", 3), ("ctp-lbd", 4), ("ddm", 5), ("bpdu-protection", 6), ("power-saving", 7), ("port-security", 8), ("ip-mac-port-binding", 9), ("mac-temperature", 10), ("oam-unidirectional-link", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoErrorDisabled.setStatus('current')
swL2PortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2), )
if mibBuilder.loadTexts: swL2PortCtrlTable.setStatus('current')
swL2PortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortCtrlPortIndex"), (0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortCtrlMediumType"))
if mibBuilder.loadTexts: swL2PortCtrlEntry.setStatus('current')
swL2PortCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setStatus('current')
swL2PortCtrlMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlMediumType.setStatus('current')
swL2PortCtrlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setStatus('current')
swL2PortCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setStatus('current')
swL2PortCtrlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6), ("nway-disabled-1Gigabps-Half", 7), ("nway-disabled-1Gigabps-Full", 8), ("nway-disabled-1Gigabps-Full-master", 9), ("nway-disabled-1Gigabps-Full-slave", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setStatus('current')
swL2PortCtrlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setStatus('current')
swL2PortCtrlLearningState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlLearningState.setStatus('current')
swL2PortCtrlMACNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setStatus('current')
swL2PortCtrlMDIXState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("normal", 2), ("cross", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMDIXState.setStatus('current')
swL2PortCtrlAutoNegRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("norestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAutoNegRestart.setStatus('current')
swL2PortCtrlAutoNegCapAdvertisedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 12), IANAifMauAutoNegCapBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAutoNegCapAdvertisedBits.setStatus('current')
swL2PortCtrlJumboFrame = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrame.setStatus('current')
swL2PortCtrlJumboFrameMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrameMaxSize.setStatus('current')
swL2PortCableDiagnosisTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 5), )
if mibBuilder.loadTexts: swL2PortCableDiagnosisTable.setStatus('current')
swL2PortCableDiagnosisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 5, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortCableDiagnosisPortIndex"), (0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortCableDiagnosisPairIndex"))
if mibBuilder.loadTexts: swL2PortCableDiagnosisEntry.setStatus('current')
swL2PortCableDiagnosisPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPortIndex.setStatus('current')
swL2PortCableDiagnosisPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairIndex.setStatus('current')
swL2PortCableDiagnosisCableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("open-short", 3), ("not-support", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisCableStatus.setStatus('current')
swL2PortCableDiagnosisPairStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("fail", 3), ("not-supported", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairStatus.setStatus('current')
swL2PortCableDiagnosisPairLength = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairLength.setStatus('current')
swL2PortCableDiagnosisPairLengthInaccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairLengthInaccuracy.setStatus('current')
swL2PortCounterCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 6), )
if mibBuilder.loadTexts: swL2PortCounterCtrlTable.setStatus('current')
swL2PortCounterCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 6, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortCounterCtrlPortIndex"))
if mibBuilder.loadTexts: swL2PortCounterCtrlEntry.setStatus('current')
swL2PortCounterCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCounterCtrlPortIndex.setStatus('current')
swL2PortCounterClearCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCounterClearCtrl.setStatus('current')
swL2PortErrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 7), )
if mibBuilder.loadTexts: swL2PortErrTable.setStatus('current')
swL2PortErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 7, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortErrPortIndex"))
if mibBuilder.loadTexts: swL2PortErrEntry.setStatus('current')
swL2PortErrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortIndex.setStatus('current')
swL2PortErrPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortState.setStatus('current')
swL2PortErrPortConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("err-disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortConnStatus.setStatus('current')
swL2PortErrPortReason = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 0), ("stp-lbd", 1), ("storm-control", 2), ("ctp-lbd", 4), ("ddm", 5), ("bpdu-protection", 6), ("power-saving", 7), ("port-security", 8), ("ip-mac-port-binding", 9), ("mac-temperature", 10), ("oam-unidirectional-link", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortReason.setStatus('current')
swL2PortAutoNegInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 8), )
if mibBuilder.loadTexts: swL2PortAutoNegInfoTable.setStatus('current')
swL2PortAutoNegInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 8, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortAutoNegInfoPortIndex"))
if mibBuilder.loadTexts: swL2PortAutoNegInfoEntry.setStatus('current')
swL2PortAutoNegInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoPortIndex.setStatus('current')
swL2PortAutoNegInfoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoAdminStatus.setStatus('current')
swL2PortAutoNegInfoCapabilityBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 8, 1, 3), IANAifMauAutoNegCapBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapabilityBits.setStatus('current')
swL2PortAutoNegInfoCapAdvertisedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 8, 1, 4), IANAifMauAutoNegCapBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapAdvertisedBits.setStatus('current')
swL2PortAutoNegInfoCapReceivedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 8, 1, 5), IANAifMauAutoNegCapBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapReceivedBits.setStatus('current')
swL2PortDropCounterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9), )
if mibBuilder.loadTexts: swL2PortDropCounterTable.setStatus('current')
swL2PortDropCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortDropCounterPortIndex"))
if mibBuilder.loadTexts: swL2PortDropCounterEntry.setStatus('current')
swL2PortDropCounterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortDropCounterPortIndex.setStatus('current')
swL2PortBufferFullDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortBufferFullDrops.setStatus('current')
swL2PortACLDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortACLDrops.setStatus('current')
swL2PortMulticastDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortMulticastDrops.setStatus('current')
swL2PortVLANIngressDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortVLANIngressDrops.setStatus('current')
swL2PortIngressBandwidthControlDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortIngressBandwidthControlDrops.setStatus('current')
swL2PortInvalidIPv6Drops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInvalidIPv6Drops.setStatus('current')
swL2PortSTPDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSTPDrops.setStatus('current')
swL2PortStormAndFDBDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStormAndFDBDiscard.setStatus('current')
swL2PortMTUDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortMTUDrops.setStatus('current')
swL2PortInvalidDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInvalidDestinationPort.setStatus('current')
swL2PortJumboFrameCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 10), )
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlTable.setStatus('current')
swL2PortJumboFrameCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 10, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortJumboFrameCtrlPortIndex"))
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlEntry.setStatus('current')
swL2PortJumboFrameCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlPortIndex.setStatus('current')
swL2PortJumboFrameCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlState.setStatus('current')
swL2PortSfpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11), )
if mibBuilder.loadTexts: swL2PortSfpInfoTable.setStatus('current')
swL2PortSfpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortSfpInfoPortIndex"))
if mibBuilder.loadTexts: swL2PortSfpInfoEntry.setStatus('current')
swL2PortSfpInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoPortIndex.setStatus('current')
swL2PortSfpInfoConnectType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoConnectType.setStatus('current')
swL2PortSfpInfoVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoVendorName.setStatus('current')
swL2PortSfpInfoVendorPN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoVendorPN.setStatus('current')
swL2PortSfpInfoVendorSN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoVendorSN.setStatus('current')
swL2PortSfpInfoVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoVendorOUI.setStatus('current')
swL2PortSfpInfoVendorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoVendorRev.setStatus('current')
swL2PortSfpInfoDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoDateCode.setStatus('current')
swL2PortSfpInfoFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoFiberType.setStatus('current')
swL2PortSfpInfoBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoBaudRate.setStatus('current')
swL2PortSfpInfoWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoWavelength.setStatus('current')
swL2PortLinkTimeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 14), )
if mibBuilder.loadTexts: swL2PortLinkTimeTable.setStatus('current')
swL2PortLinkTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 14, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortLinkTimeIfIndex"))
if mibBuilder.loadTexts: swL2PortLinkTimeEntry.setStatus('current')
swL2PortLinkTimeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortLinkTimeIfIndex.setStatus('current')
swL2PortLinkTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 14, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortLinkTimer.setStatus('current')
swL2TrunkMaxSupportedEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkMaxSupportedEntries.setStatus('current')
swL2TrunkCurrentNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkCurrentNumEntries.setStatus('current')
swL2TrunkCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 3), )
if mibBuilder.loadTexts: swL2TrunkCtrlTable.setStatus('current')
swL2TrunkCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 3, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2TrunkIndex"))
if mibBuilder.loadTexts: swL2TrunkCtrlEntry.setStatus('current')
swL2TrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkIndex.setStatus('current')
swL2TrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkName.setStatus('current')
swL2TrunkMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMasterPort.setStatus('current')
swL2TrunkMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 3, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMember.setStatus('current')
swL2TrunkFloodingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkFloodingPort.setStatus('current')
swL2TrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("lacp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkType.setStatus('current')
swL2TrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkState.setStatus('current')
swL2TrunkAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("mac-source", 2), ("mac-destination", 3), ("mac-source-dest", 4), ("ip-source", 5), ("ip-destination", 6), ("ip-source-dest", 7), ("l4-source-port", 8), ("l4-destination-port", 9), ("l4-source-dest-port", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setStatus('current')
swL2TrunkLACPPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 5), )
if mibBuilder.loadTexts: swL2TrunkLACPPortTable.setStatus('current')
swL2TrunkLACPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 5, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2TrunkLACPPortIndex"))
if mibBuilder.loadTexts: swL2TrunkLACPPortEntry.setStatus('current')
swL2TrunkLACPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkLACPPortIndex.setStatus('current')
swL2TrunkLACPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkLACPPortState.setStatus('current')
swL2TrunkVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 6), )
if mibBuilder.loadTexts: swL2TrunkVLANTable.setStatus('current')
swL2TrunkVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 6, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2TrunkVLANPort"))
if mibBuilder.loadTexts: swL2TrunkVLANEntry.setStatus('current')
swL2TrunkVLANPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkVLANPort.setStatus('current')
swL2TrunkVLANState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkVLANState.setStatus('current')
swL2MirrorLogicTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorLogicTargetPort.setStatus('current')
swL2MirrorPortSourceIngress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceIngress.setStatus('current')
swL2MirrorPortSourceEgress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceEgress.setStatus('current')
swL2MirrorPortState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortState.setStatus('current')
swL2MirrorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 5), )
if mibBuilder.loadTexts: swL2MirrorGroupTable.setStatus('current')
swL2MirrorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 5, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2MirrorGroupID"))
if mibBuilder.loadTexts: swL2MirrorGroupEntry.setStatus('current')
swL2MirrorGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: swL2MirrorGroupID.setStatus('current')
swL2MirrorGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupRowStatus.setStatus('current')
swL2MirrorGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupState.setStatus('current')
swL2MirrorGroupTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupTargetPort.setStatus('current')
swL2MirrorGroupSourceIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 5, 1, 5), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupSourceIngress.setStatus('current')
swL2MirrorGroupSourceEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 5, 1, 6), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupSourceEgress.setStatus('current')
swL2IGMPAccessAuthTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 11, 13), )
if mibBuilder.loadTexts: swL2IGMPAccessAuthTable.setStatus('current')
swL2IGMPAccessAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 11, 13, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2IGMPAccessAuthPort"))
if mibBuilder.loadTexts: swL2IGMPAccessAuthEntry.setStatus('current')
swL2IGMPAccessAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 11, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPAccessAuthPort.setStatus('current')
swL2IGMPAccessAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 11, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("auth_only", 3), ("accounting_only", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPAccessAuthState.setStatus('current')
swL2TrafficCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 13, 1), )
if mibBuilder.loadTexts: swL2TrafficCtrlTable.setStatus('current')
swL2TrafficCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 13, 1, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2TrafficCtrlGroupIndex"))
if mibBuilder.loadTexts: swL2TrafficCtrlEntry.setStatus('current')
swL2TrafficCtrlGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficCtrlGroupIndex.setStatus('current')
swL2TrafficCtrlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficCtrlUnitIndex.setStatus('current')
swL2TrafficCtrlBMStromthreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficCtrlBMStromthreshold.setStatus('current')
swL2TrafficCtrlBcastStromCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficCtrlBcastStromCtrl.setStatus('current')
swL2TrafficCtrlMcastStromCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficCtrlMcastStromCtrl.setStatus('current')
swL2TrafficCtrlDlfStromCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficCtrlDlfStromCtrl.setStatus('current')
swL2TrafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 14, 1), )
if mibBuilder.loadTexts: swL2TrafficSegTable.setStatus('current')
swL2TrafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 14, 1, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2TrafficSegPort"))
if mibBuilder.loadTexts: swL2TrafficSegEntry.setStatus('current')
swL2TrafficSegPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficSegPort.setStatus('current')
swL2TrafficSegForwardPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 14, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setStatus('current')
swL2MulticastFilterModeVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 17, 1), )
if mibBuilder.loadTexts: swL2MulticastFilterModeVlanTable.setStatus('current')
swL2MulticastFilterModeVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 17, 1, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2MulticastFilterVid"))
if mibBuilder.loadTexts: swL2MulticastFilterModeVlanEntry.setStatus('current')
swL2MulticastFilterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterVid.setStatus('current')
swL2MulticastFilterVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward-all-groups", 1), ("forward-unregistered-groups", 2), ("filter-unregistered-groups", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MulticastFilterVlanMode.setStatus('current')
swL2MulticastFilterModePortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 17, 2), )
if mibBuilder.loadTexts: swL2MulticastFilterModePortTable.setStatus('current')
swL2MulticastFilterModePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 17, 2, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2MulticastFilterPortIndex"))
if mibBuilder.loadTexts: swL2MulticastFilterModePortEntry.setStatus('current')
swL2MulticastFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterPortIndex.setStatus('current')
swL2MulticastFilterPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward-all-groups", 1), ("forward-unregistered-groups", 2), ("filter-unregistered-groups", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MulticastFilterPortMode.setStatus('current')
swL2LoopDetectCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 1))
swL2LoopDetectAdminState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectAdminState.setStatus('current')
swL2LoopDetectInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectInterval.setStatus('current')
swL2LoopDetectRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectRecoverTime.setStatus('current')
swL2LoopDetectMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlan-based", 1), ("port-based", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectMode.setStatus('current')
swL2LoopDetectTrapMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("loop_detected", 2), ("loop_cleared", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectTrapMode.setStatus('current')
swL2LoopDetectPortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 2))
swL2LoopDetectPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 2, 1), )
if mibBuilder.loadTexts: swL2LoopDetectPortTable.setStatus('current')
swL2LoopDetectPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 2, 1, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2LoopDetectPortEntry.setStatus('current')
swL2LoopDetectPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortIndex.setStatus('current')
swL2LoopDetectPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectPortState.setStatus('current')
swL2LoopDetectPortLoopVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortLoopVLAN.setStatus('current')
swL2LoopDetectPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("loop", 2), ("error", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortLoopStatus.setStatus('current')
swL2Notify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1))
swL2NotifyMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 1))
swL2NotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2))
swL2NotifFirmware = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 0))
swL2macNotificationSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 1, 1), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2macNotificationSeverity.setStatus('current')
swL2PortSecurityViolationSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 1, 2), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityViolationSeverity.setStatus('current')
swL2macNotification = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 0, 1)).setObjects(("DGS3000-28SC-L2MGMT-MIB", "swL2macNotifyInfo"))
if mibBuilder.loadTexts: swL2macNotification.setStatus('current')
swL2PortSecurityViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 0, 2)).setObjects(("PORT-SECURITY-MIB", "swPortSecPortIndex"), ("DGS3000-28SC-L2MGMT-MIB", "swL2PortSecurityViolationMac"))
if mibBuilder.loadTexts: swL2PortSecurityViolationTrap.setStatus('current')
swL2PortLoopOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 0, 3)).setObjects(("DGS3000-28SC-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2PortLoopOccurred.setStatus('current')
swL2PortLoopRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 0, 4)).setObjects(("DGS3000-28SC-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2PortLoopRestart.setStatus('current')
swL2VlanLoopOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 0, 5)).setObjects(("DGS3000-28SC-L2MGMT-MIB", "swL2LoopDetectPortIndex"), ("DGS3000-28SC-L2MGMT-MIB", "swL2VlanLoopDetectVID"))
if mibBuilder.loadTexts: swL2VlanLoopOccurred.setStatus('current')
swL2VlanLoopRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 0, 6)).setObjects(("DGS3000-28SC-L2MGMT-MIB", "swL2LoopDetectPortIndex"), ("DGS3000-28SC-L2MGMT-MIB", "swL2VlanLoopDetectVID"))
if mibBuilder.loadTexts: swL2VlanLoopRestart.setStatus('current')
swl2NotificationBidings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 1))
swL2macNotifyInfo = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2macNotifyInfo.setStatus('current')
swL2PortSecurityViolationMac = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 1, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2PortSecurityViolationMac.setStatus('current')
swL2VlanLoopDetectVID = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2VlanLoopDetectVID.setStatus('current')
mibBuilder.exportSymbols("DGS3000-28SC-L2MGMT-MIB", swL2SubnetVLANTable=swL2SubnetVLANTable, swL2PortMulticastDrops=swL2PortMulticastDrops, swL2PortLoopRestart=swL2PortLoopRestart, swL2DevCtrlStpState=swL2DevCtrlStpState, swL2PortAutoNegInfoPortIndex=swL2PortAutoNegInfoPortIndex, swL2PortSfpInfoVendorOUI=swL2PortSfpInfoVendorOUI, swL2MACNotifyHistorySize=swL2MACNotifyHistorySize, swL2LoopDetectAdminState=swL2LoopDetectAdminState, swL2PortCounterCtrlPortIndex=swL2PortCounterCtrlPortIndex, swL2PortInfoMediumType=swL2PortInfoMediumType, swL2PortCtrlFlowCtrlState=swL2PortCtrlFlowCtrlState, swL2PortCtrlAutoNegRestart=swL2PortCtrlAutoNegRestart, swL2PortCableDiagnosisPairStatus=swL2PortCableDiagnosisPairStatus, swL2PortCtrlLearningState=swL2PortCtrlLearningState, swL2Notify=swL2Notify, swL2LoopDetectTrapMode=swL2LoopDetectTrapMode, swL2PortCtrlMediumType=swL2PortCtrlMediumType, swL2PortInfoType=swL2PortInfoType, MacAddress=MacAddress, swL2PortAutoNegInfoCapReceivedBits=swL2PortAutoNegInfoCapReceivedBits, swL2PortSecurityViolationTrap=swL2PortSecurityViolationTrap, swL2TrafficCtrlDlfStromCtrl=swL2TrafficCtrlDlfStromCtrl, swL2DevCtrlTelnetTcpPort=swL2DevCtrlTelnetTcpPort, swL2LoopDetectPortLoopVLAN=swL2LoopDetectPortLoopVLAN, swL2PortSTPDrops=swL2PortSTPDrops, swL2VlanPrecedenceClassification=swL2VlanPrecedenceClassification, swL2DevCtrlCFMMaEntry=swL2DevCtrlCFMMaEntry, swL2PortErrPortIndex=swL2PortErrPortIndex, swL2MirrorGroupTable=swL2MirrorGroupTable, swL2PortCableDiagnosisPairLength=swL2PortCableDiagnosisPairLength, swL2PortBufferFullDrops=swL2PortBufferFullDrops, swL2MulticastFilterVid=swL2MulticastFilterVid, swL2PortCableDiagnosisCableStatus=swL2PortCableDiagnosisCableStatus, swL2PortCounterClearCtrl=swL2PortCounterClearCtrl, swL2PortStormAndFDBDiscard=swL2PortStormAndFDBDiscard, PYSNMP_MODULE_ID=swL2MgmtMIB, swL2PortAutoNegInfoCapabilityBits=swL2PortAutoNegInfoCapabilityBits, swL2PortSfpInfoVendorPN=swL2PortSfpInfoVendorPN, swL2PortLinkTimeEntry=swL2PortLinkTimeEntry, swL2TrunkVLANTable=swL2TrunkVLANTable, swL2MirrorGroupID=swL2MirrorGroupID, swL2MulticastFilterModeVlanTable=swL2MulticastFilterModeVlanTable, swDevInfoTotalNumOfPort=swDevInfoTotalNumOfPort, swL2VlanStaticEntry=swL2VlanStaticEntry, swL2PortJumboFrameCtrlPortIndex=swL2PortJumboFrameCtrlPortIndex, swL2MirrorPortState=swL2MirrorPortState, swL2MulticastFilterPortIndex=swL2MulticastFilterPortIndex, swL2SubnetVLANIPAddress=swL2SubnetVLANIPAddress, swL2macNotificationSeverity=swL2macNotificationSeverity, swL2DevCtrlSnmpTrapState=swL2DevCtrlSnmpTrapState, swL2DevCtrlCFMPortState=swL2DevCtrlCFMPortState, swL2TrunkState=swL2TrunkState, swL2DevCtrlAsymVlanState=swL2DevCtrlAsymVlanState, swL2LoopDetectRecoverTime=swL2LoopDetectRecoverTime, swL2PortCtrlPortIndex=swL2PortCtrlPortIndex, swL2DevCtrlCFMState=swL2DevCtrlCFMState, swL2PortInvalidIPv6Drops=swL2PortInvalidIPv6Drops, swL2SubnetVLANPriority=swL2SubnetVLANPriority, swL2SubnetVLANRowStatus=swL2SubnetVLANRowStatus, swL2PortAutoNegInfoEntry=swL2PortAutoNegInfoEntry, swL2PortSfpInfoConnectType=swL2PortSfpInfoConnectType, swL2MirrorGroupEntry=swL2MirrorGroupEntry, swL2DevCtrlIGMPSnoopingMcstRTOnly=swL2DevCtrlIGMPSnoopingMcstRTOnly, swL2PortErrPortConnStatus=swL2PortErrPortConnStatus, swL2TrunkCtrlEntry=swL2TrunkCtrlEntry, swL2PortCableDiagnosisTable=swL2PortCableDiagnosisTable, swL2MACNotifyInterval=swL2MACNotifyInterval, swL2TrafficSegForwardPorts=swL2TrafficSegForwardPorts, swL2SubnetVLANID=swL2SubnetVLANID, swL2macNotifyInfo=swL2macNotifyInfo, swL2VlanIndex=swL2VlanIndex, swL2TrafficCtrlMcastStromCtrl=swL2TrafficCtrlMcastStromCtrl, swL2PortInfoErrorDisabled=swL2PortInfoErrorDisabled, swL2TrunkIndex=swL2TrunkIndex, swl2NotificationBidings=swl2NotificationBidings, swL2DevCtrlVlanIdOfFDBTbl=swL2DevCtrlVlanIdOfFDBTbl, swL2DevCtrlCleanAllStatisticCounter=swL2DevCtrlCleanAllStatisticCounter, swL2PortInfoEntry=swL2PortInfoEntry, swL2DevInfo=swL2DevInfo, swL2PVIDAutoAssignmentState=swL2PVIDAutoAssignmentState, swL2PortSfpInfoEntry=swL2PortSfpInfoEntry, swL2MulticastFilterModePortTable=swL2MulticastFilterModePortTable, swL2PortCounterCtrlTable=swL2PortCounterCtrlTable, swL2PortSfpInfoWavelength=swL2PortSfpInfoWavelength, swL2DevCtrlWebState=swL2DevCtrlWebState, swL2TrafficCtrlBcastStromCtrl=swL2TrafficCtrlBcastStromCtrl, swL2LoopDetectInterval=swL2LoopDetectInterval, swL2DevCtrlCFMMepTable=swL2DevCtrlCFMMepTable, swL2DevCtrlCFMMepMode=swL2DevCtrlCFMMepMode, swL2NotifyMgmt=swL2NotifyMgmt, swL2SubnetVLANEntry=swL2SubnetVLANEntry, swL2PortCtrlAdminState=swL2PortCtrlAdminState, swL2TrunkVLANEntry=swL2TrunkVLANEntry, swL2MirrorGroupState=swL2MirrorGroupState, swL2PortSfpInfoDateCode=swL2PortSfpInfoDateCode, swL2MirrorGroupSourceEgress=swL2MirrorGroupSourceEgress, swL2IGMPAccessAuthState=swL2IGMPAccessAuthState, swL2PortSecurityViolationSeverity=swL2PortSecurityViolationSeverity, swL2PortCounterCtrlEntry=swL2PortCounterCtrlEntry, swDevModuleInfoUnitID=swDevModuleInfoUnitID, swL2DevCtrlLLDPForwardMessageState=swL2DevCtrlLLDPForwardMessageState, swL2PortErrPortReason=swL2PortErrPortReason, swL2TrafficCtrlUnitIndex=swL2TrafficCtrlUnitIndex, swL2PortSfpInfoTable=swL2PortSfpInfoTable, swL2LoopDetectMgmt=swL2LoopDetectMgmt, swDevModuleInfoDescription=swDevModuleInfoDescription, swL2DevCtrlCFMPortIndex=swL2DevCtrlCFMPortIndex, swL2PortSfpInfoFiberType=swL2PortSfpInfoFiberType, swL2MACNotifyState=swL2MACNotifyState, swL2DevCtrlIGMPSnooping=swL2DevCtrlIGMPSnooping, swL2DevAlarmLinkChange=swL2DevAlarmLinkChange, swL2MulticastFilterModeVlanEntry=swL2MulticastFilterModeVlanEntry, swL2DevCtrlIpAutoconfig=swL2DevCtrlIpAutoconfig, swL2PortSecurityViolationMac=swL2PortSecurityViolationMac, swL2TrunkType=swL2TrunkType, swL2DevCtrlCFMMepEntry=swL2DevCtrlCFMMepEntry, swL2PortInfoLinkStatus=swL2PortInfoLinkStatus, swL2TrafficCtrlEntry=swL2TrafficCtrlEntry, swL2TrunkVLANState=swL2TrunkVLANState, swL2LoopDetectCtrl=swL2LoopDetectCtrl, swL2DevCtrlCFM=swL2DevCtrlCFM, swL2PortInfoModuleType=swL2PortInfoModuleType, swL2PortCableDiagnosisPairIndex=swL2PortCableDiagnosisPairIndex, swL2VlanPrecedenceEntry=swL2VlanPrecedenceEntry, swL2PortSfpInfoVendorRev=swL2PortSfpInfoVendorRev, swL2PortCtrlMACNotifyState=swL2PortCtrlMACNotifyState, swL2PortIngressBandwidthControlDrops=swL2PortIngressBandwidthControlDrops, swL2PortMTUDrops=swL2PortMTUDrops, swL2DevCtrlWebTcpPort=swL2DevCtrlWebTcpPort, swL2PortMgmt=swL2PortMgmt, swL2TrunkLACPPortTable=swL2TrunkLACPPortTable, swL2PortCableDiagnosisPairLengthInaccuracy=swL2PortCableDiagnosisPairLengthInaccuracy, swL2PortLinkTimeTable=swL2PortLinkTimeTable, swL2TrunkLACPPortEntry=swL2TrunkLACPPortEntry, swL2NotifyPrefix=swL2NotifyPrefix, PortList=PortList, swL2PortSfpInfoVendorName=swL2PortSfpInfoVendorName, swL2PortJumboFrameCtrlTable=swL2PortJumboFrameCtrlTable, swL2PortCtrlAutoNegCapAdvertisedBits=swL2PortCtrlAutoNegCapAdvertisedBits, swL2MirrorMgmt=swL2MirrorMgmt, swL2DevCtrlIpAutoconfigTimeout=swL2DevCtrlIpAutoconfigTimeout, swL2TrafficCtrlGroupIndex=swL2TrafficCtrlGroupIndex, swL2MirrorGroupTargetPort=swL2MirrorGroupTargetPort, swL2MulticastFilterModePortEntry=swL2MulticastFilterModePortEntry, swL2PortCtrlUnitIndex=swL2PortCtrlUnitIndex, swL2TrunkFloodingPort=swL2TrunkFloodingPort, swL2PortSfpInfoBaudRate=swL2PortSfpInfoBaudRate, swL2LoopDetectMode=swL2LoopDetectMode, swL2MirrorPortSourceIngress=swL2MirrorPortSourceIngress, swDevModuleInfoReversion=swDevModuleInfoReversion, swL2TrunkMember=swL2TrunkMember, VlanId=VlanId, swL2TrafficCtrlTable=swL2TrafficCtrlTable, swL2MirrorLogicTargetPort=swL2MirrorLogicTargetPort, swL2MulticastFilterPortMode=swL2MulticastFilterPortMode, swL2PortAutoNegInfoCapAdvertisedBits=swL2PortAutoNegInfoCapAdvertisedBits, swL2VlanPortInfoVid=swL2VlanPortInfoVid, swL2MirrorPortSourceEgress=swL2MirrorPortSourceEgress, swL2DevCtrlTelnet=swL2DevCtrlTelnet, swL2TrafficSegEntry=swL2TrafficSegEntry, swL2LoopDetectPortIndex=swL2LoopDetectPortIndex, swL2NotifFirmware=swL2NotifFirmware, swL2LoopDetectPortLoopStatus=swL2LoopDetectPortLoopStatus, swL2PortAutoNegInfoTable=swL2PortAutoNegInfoTable, swL2TrunkMgmt=swL2TrunkMgmt, swL2DevCtrlLLDPState=swL2DevCtrlLLDPState, swL2DevCtrlWeb=swL2DevCtrlWeb, swL2DevCtrlCFMPortTable=swL2DevCtrlCFMPortTable, swL2TrunkCurrentNumEntries=swL2TrunkCurrentNumEntries, swL2DevCtrlCFMMaTable=swL2DevCtrlCFMMaTable, swL2PortInvalidDestinationPort=swL2PortInvalidDestinationPort, swL2TrunkAlgorithm=swL2TrunkAlgorithm, swL2DevAlarm=swL2DevAlarm, swL2TrafficSegMgmt=swL2TrafficSegMgmt, swL2VlanPrecedencePortIndex=swL2VlanPrecedencePortIndex, swL2TrunkCtrlTable=swL2TrunkCtrlTable, swL2SubnetVLANIPMask=swL2SubnetVLANIPMask, swL2DevAlarmNewRoot=swL2DevAlarmNewRoot, swL2DevCtrlManagementVlanId=swL2DevCtrlManagementVlanId, swL2VlanLoopDetectVID=swL2VlanLoopDetectVID, swL2PortDropCounterTable=swL2PortDropCounterTable, swL2LoopDetectPortMgmt=swL2LoopDetectPortMgmt, swL2PortInfoTable=swL2PortInfoTable, swL2MulticastFilterVlanMode=swL2MulticastFilterVlanMode, swL2DevMgmt=swL2DevMgmt, swL2DevCtrlTelnetState=swL2DevCtrlTelnetState, swL2PortLoopOccurred=swL2PortLoopOccurred, swL2TrunkMasterPort=swL2TrunkMasterPort, swDevModuleInfoEntry=swDevModuleInfoEntry, swDevModuleInfoModuleName=swDevModuleInfoModuleName, swL2TrunkLACPPortIndex=swL2TrunkLACPPortIndex, swDevInfoNumOfPortInUse=swDevInfoNumOfPortInUse, swL2TrafficMgmt=swL2TrafficMgmt, swL2PortAutoNegInfoAdminStatus=swL2PortAutoNegInfoAdminStatus, swL2PortSfpInfoPortIndex=swL2PortSfpInfoPortIndex, swL2PortSfpInfoVendorSN=swL2PortSfpInfoVendorSN, swL2LoopDetectPortState=swL2LoopDetectPortState, swL2PortErrPortState=swL2PortErrPortState, swL2PortCtrlNwayState=swL2PortCtrlNwayState, swL2PortInfoUnitID=swL2PortInfoUnitID, swL2PortCtrlMDIXState=swL2PortCtrlMDIXState, swL2PortErrTable=swL2PortErrTable, swL2PortLinkTimeIfIndex=swL2PortLinkTimeIfIndex, swL2MgmtMIB=swL2MgmtMIB, IANAifMauAutoNegCapBits=IANAifMauAutoNegCapBits, swL2PortJumboFrameCtrlState=swL2PortJumboFrameCtrlState, swL2DevCtrlRmonState=swL2DevCtrlRmonState, swL2MulticastFilterMode=swL2MulticastFilterMode, swL2NniGvrpBpduAddress=swL2NniGvrpBpduAddress, swL2PortErrEntry=swL2PortErrEntry, swL2TrunkName=swL2TrunkName, swL2VlanStaticTable=swL2VlanStaticTable, swL2IGMPAccessAuthTable=swL2IGMPAccessAuthTable, swL2DevCtrl=swL2DevCtrl, swL2MgmtMIBTraps=swL2MgmtMIBTraps, swL2PortCtrlTable=swL2PortCtrlTable, swL2TrafficSegPort=swL2TrafficSegPort, swL2MirrorGroupRowStatus=swL2MirrorGroupRowStatus, swL2VlanPortInfoTable=swL2VlanPortInfoTable, swL2VlanPortInfoPortIndex=swL2VlanPortInfoPortIndex, swL2LoopDetectPortTable=swL2LoopDetectPortTable, swL2PortVLANIngressDrops=swL2PortVLANIngressDrops, swDevModuleInfoTable=swDevModuleInfoTable, swL2DevCtrlCFMMaMode=swL2DevCtrlCFMMaMode, swL2PortCableDiagnosisPortIndex=swL2PortCableDiagnosisPortIndex, swL2PortInfoNwayStatus=swL2PortInfoNwayStatus, swL2PortDropCounterPortIndex=swL2PortDropCounterPortIndex, swL2LoopDetectPortEntry=swL2LoopDetectPortEntry, swL2TrunkMaxSupportedEntries=swL2TrunkMaxSupportedEntries, swL2VlanLoopOccurred=swL2VlanLoopOccurred, swL2PortCtrlJumboFrame=swL2PortCtrlJumboFrame, swL2TrunkVLANPort=swL2TrunkVLANPort, swL2PortCtrlJumboFrameMaxSize=swL2PortCtrlJumboFrameMaxSize, swL2VLANMgmt=swL2VLANMgmt, swL2IGMPMgmt=swL2IGMPMgmt, swL2DevCtrlVLANTrunkState=swL2DevCtrlVLANTrunkState, swL2IGMPAccessAuthPort=swL2IGMPAccessAuthPort, swL2DevCtrlCFMPortEntry=swL2DevCtrlCFMPortEntry, swL2PortACLDrops=swL2PortACLDrops, swL2VlanPortInfoEntry=swL2VlanPortInfoEntry, swL2DevAlarmTopologyChange=swL2DevAlarmTopologyChange, swL2VlanPrecedenceTable=swL2VlanPrecedenceTable, swL2VLANAdvertisement=swL2VLANAdvertisement, swL2VlanPortInfoPortRole=swL2VlanPortInfoPortRole, swL2PortLinkTimer=swL2PortLinkTimer, swL2PortCtrlEntry=swL2PortCtrlEntry, swL2PortDropCounterEntry=swL2PortDropCounterEntry, swDevModuleInfoSerial=swDevModuleInfoSerial, swL2TrafficCtrlBMStromthreshold=swL2TrafficCtrlBMStromthreshold, swL2TrafficSegTable=swL2TrafficSegTable, swL2IGMPAccessAuthEntry=swL2IGMPAccessAuthEntry, swL2TrunkLACPPortState=swL2TrunkLACPPortState, swL2VlanLoopRestart=swL2VlanLoopRestart, swL2MirrorGroupSourceIngress=swL2MirrorGroupSourceIngress)
mibBuilder.exportSymbols("DGS3000-28SC-L2MGMT-MIB", swL2macNotification=swL2macNotification, swL2PortInfoPortIndex=swL2PortInfoPortIndex, swL2PortJumboFrameCtrlEntry=swL2PortJumboFrameCtrlEntry, swL2PortCableDiagnosisEntry=swL2PortCableDiagnosisEntry)
