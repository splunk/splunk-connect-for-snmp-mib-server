#
# PySNMP MIB module AT-LOADER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AT-LOADER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:14:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
DisplayStringUnsized, modules = mibBuilder.importSymbols("AT-SMI-MIB", "DisplayStringUnsized", "modules")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, TimeTicks, IpAddress, iso, Integer32, Counter64, NotificationType, Gauge32, Unsigned32, MibIdentifier, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "IpAddress", "iso", "Integer32", "Counter64", "NotificationType", "Gauge32", "Unsigned32", "MibIdentifier", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
loader = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 48))
loader.setRevisions(('2007-02-07 10:10', '2006-06-28 12:22',))
if mibBuilder.loadTexts: loader.setLastUpdated('200702071010Z')
if mibBuilder.loadTexts: loader.setOrganization('Allied Telesis, Inc')
loadTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 48, 1), )
if mibBuilder.loadTexts: loadTable.setStatus('current')
loadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 48, 1, 1), ).setIndexNames((0, "AT-LOADER-MIB", "loadIndex"))
if mibBuilder.loadTexts: loadEntry.setStatus('current')
loadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 48, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadIndex.setStatus('current')
loadServer = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 48, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadServer.setStatus('current')
loadDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 48, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("nvs", 2), ("flash", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadDestination.setStatus('current')
loadFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 48, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadFilename.setStatus('current')
loadDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 48, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadDelay.setStatus('current')
loadStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 48, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("idle", 1), ("wait", 2), ("loading", 3), ("complete", 4), ("reset", 5), ("actionload", 6), ("actionstop", 7), ("actionupload", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadStatus.setStatus('current')
mibBuilder.exportSymbols("AT-LOADER-MIB", loadIndex=loadIndex, loadTable=loadTable, loadDelay=loadDelay, loadDestination=loadDestination, PYSNMP_MODULE_ID=loader, loadStatus=loadStatus, loader=loader, loadServer=loadServer, loadFilename=loadFilename, loadEntry=loadEntry)
